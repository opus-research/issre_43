[
  {
    "_id": "662173a918912b45d36a705d",
    "number": 2510,
    "body": "rclcpp::Time currently allows a negative time when constructing with int64_t nanoseconds (but not with int32_t seconds even though both can possibly hold a negative value). For a more uniform interface and based off of https://github.com/ros2/rclcpp/issues/525 where time cannot be negative:\r\n- Added the negative time check and throw from the `rclcpp::Time(int32_t seconds, uint32_t nanoseconds, ...)` constructor to the `rclcpp::Time(int64_t nanoseconds, ...)` constructor\r\n- Added a test to check that it throws with negative time\r\n- Removed the tests which allowed for negative time (the cases should already be covered by the other tests?)\r\n\r\nCloses https://github.com/ros2/rclcpp/issues/2507.",
    "head_branch": "check_for_negative_time_nanoseconds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173aa18912b45d36a705e",
    "number": 2509,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/2508",
    "head_branch": "executer_regression_fix",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20877)](http://ci.ros2.org/job/ci_linux/20877/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15180)](http://ci.ros2.org/job/ci_linux-aarch64/15180/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21559)](http://ci.ros2.org/job/ci_windows/21559/)",
      "I looked further into this, as all the tests lid up.\r\nI pushed an updated version, can someone rerun the CI with this ?\r\n\r\n@wjwwood @mjcarroll I noticed, that the spin_some_impl method did not act according to the documentation.\r\nIt was not recollecting ready executables on every call. Is this intentional, or a bug ?",
      "@jmachowinski sorry i missed this, here is new CI.\r\n\r\nCI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20938)](http://ci.ros2.org/job/ci_linux/20938/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15229)](http://ci.ros2.org/job/ci_linux-aarch64/15229/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21612)](http://ci.ros2.org/job/ci_windows/21612/)",
      "Closing in favor of https://github.com/ros2/rclcpp/pull/2517, but we can reopen this one if needed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ab18912b45d36a705f",
    "number": 2506,
    "body": "refactor of \"API Changes for Multihtreaded Events Executor\": https://github.com/ros2/rclcpp/pull/2466",
    "head_branch": "wjwwood/executor_features",
    "is_a_fork": false,
    "comments": [
      "‚ö†Ô∏è The sha of the head commit of this PR conflicts with #2466. Mergify cannot evaluate rules on this PR. ‚ö†Ô∏è",
      "Tests are passing for me locally on `rclcpp` and `rclcpp_lifecycle`, running CI now:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20872)](http://ci.ros2.org/job/ci_linux/20872/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15175)](http://ci.ros2.org/job/ci_linux-aarch64/15175/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21554)](http://ci.ros2.org/job/ci_windows/21554/)",
      "Well, CI passed finally, but Windows took way too long, so we're past the deadline. I'm going to ask for an exception for merging this one in tomorrow's meeting.",
      "We got approval in the ROS 2 meeting, we'll announce this exception on discourse too. Merging it now. üéâ ",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/freeze-of-ros-2-base-packages-upcoming-branch-and-tutorial-party-for-jazzy-jalisco/37191/2\n"
    ],
    "commit_messages": [
      "Reduce overhead for inheriting from rclcpp::Executor when base functionality is not reused (#2506)\n\n* feat(clock): Added function to interrupt sleep\r\n\r\nThis is useful in case a second thread needs to wake up another\r\nthread, that is sleeping using a clock.\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* feat: Added support for multi thread wait / shutdown\r\n\r\nThis adds support for multiple threads waiting on the same\r\nclock, while an shutdown is invoked.\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@cellumation.com>\r\n\r\n* chore: Made Executor fully overloadable\r\n\r\nThis commit makes every public funciton virtual, and adds virtual impl\r\nfunction for the existing template functions.\r\n\r\nThe goal of this commit is to be able to fully control the everything from\r\na derived class.\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@cellumation.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <wjwwood@gmail.com>\r\nSigned-off-by: jmachowinski <jmachowinski@users.noreply.github.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <wjwwood@gmail.com>\r\nSigned-off-by: jmachowinski <jmachowinski@users.noreply.github.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <wjwwood@gmail.com>\r\nSigned-off-by: jmachowinski <jmachowinski@users.noreply.github.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <wjwwood@gmail.com>\r\nSigned-off-by: jmachowinski <jmachowinski@users.noreply.github.com>\r\n\r\n* docs: added doc string for spin_until_future_complete_impl\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* made is_spinning not virtual\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* feat: Changed interface of spin_until_future_complete_impl\r\n\r\nThis change allows it to use a second thread to wait for\r\nthe future to become ready.\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* doc fixup\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* undo template->implicit conversion change\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n---------\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\nSigned-off-by: Janosch Machowinski <j.machowinski@cellumation.com>\r\nSigned-off-by: jmachowinski <jmachowinski@users.noreply.github.com>\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\nCo-authored-by: jmachowinski <jmachowinski@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173ac18912b45d36a7060",
    "number": 2505,
    "body": "Modified version of https://github.com/ros2/rclcpp/pull/2382",
    "head_branch": "wjwwood/executor_exception_handling",
    "is_a_fork": false,
    "comments": [
      "‚ö†Ô∏è The sha of the head commit of this PR conflicts with #2382. Mergify cannot evaluate rules on this PR. ‚ö†Ô∏è",
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20873)](http://ci.ros2.org/job/ci_linux/20873/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15176)](http://ci.ros2.org/job/ci_linux-aarch64/15176/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21555)](http://ci.ros2.org/job/ci_windows/21555/)",
      "@jmachowinski unfortunately I did not get this one in under the wire, nightly CI has the farm locked up now (we should consider putting the deadline just before nightly jobs start...), but ultimately this set of changes were not ideal I think, maybe you had a big reason for passing it as an argument for spin(), but if you didn't I think the change to allow it in the executor options was probably a better approach that was less disruptive. The trade-off, however, is that it's up to each executor to make sure they account for the exception handler in the options, whereas the new signature in this approach makes that hard to ignore.\r\n\r\nHowever, there still may be a path to the ExecutorOptions change in jazzy, but it will require an ABI change before the release, but one I think we really should make, which is to add a pimpl pointer in the Executor base class as well as one in the ExecutorOptions. That would allow us to extend the options and executor APIs without breaking ABI in existing releases if needed. I'll have to talk to the other maintainers about it, but maybe we can go that route.",
      "@wjwwood  Thanks for the effort you put into the PRs !\r\n\r\nYour latest changes will break debugging. As soon as you catch an exception, and rethrow it, the only backtrack you will get will point to the rethrow. That was the reason for the code duplication that was going on.",
      "I don't fully understand what you mean, but I can have a look tomorrow. Should be something we can fix after the API freeze.\r\n",
      "> I don't fully understand what you mean, but I can have a look tomorrow. Should be something we can fix after the API freeze.\r\n\r\n```c++\r\n#include <stdexcept>\r\n\r\nvoid origin()\r\n{\r\n    throw std::runtime_error(\"Error in Origin\");\r\n}\r\n\r\nvoid rethrow_fun()\r\n{\r\n    try\r\n    {\r\n        origin();\r\n    }\r\n    catch(const std::exception &e)\r\n    {\r\n        throw;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    rethrow_fun();\r\n\r\n    return 0;\r\n}\r\n``` \r\n\r\n```\r\n(gdb) r\r\nStarting program: /home/jm/ros2/ros2_ws/example/a.out \r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\nterminate called after throwing an instance of 'std::runtime_error'\r\n  what():  Error in Origin\r\n\r\nProgram received signal SIGABRT, Aborted.\r\n__pthread_kill_implementation (no_tid=0, signo=6, threadid=140737352586176) at ./nptl/pthread_kill.c:44\r\n44      ./nptl/pthread_kill.c: No such file or directory.\r\n(gdb) bt\r\n#0  __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737352586176) at ./nptl/pthread_kill.c:44\r\n#1  __pthread_kill_internal (signo=6, threadid=140737352586176) at ./nptl/pthread_kill.c:78\r\n#2  __GI___pthread_kill (threadid=140737352586176, signo=signo@entry=6) at ./nptl/pthread_kill.c:89\r\n#3  0x00007ffff7842476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26\r\n#4  0x00007ffff78287f3 in __GI_abort () at ./stdlib/abort.c:79\r\n#5  0x00007ffff7ca2b9e in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#6  0x00007ffff7cae20c in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#7  0x00007ffff7cae277 in std::terminate() () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#8  0x00007ffff7cae52b in __cxa_rethrow () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#9  0x00005555555552c0 in rethrow_fun() ()\r\n#10 0x00005555555552ea in main ()\r\n(gdb) \r\n``` \r\n\r\n```c++\r\nMultiThreadedExecutor::spin()\r\n{\r\n  spin([](const std::exception & e) {throw e;});\r\n}\r\n``` \r\nWith the construct above, you will only get stack traces, pointing to the lambda inside of spin, but no one pointing to the origin of the throw. This makes debugging almost impossible.\r\n\r\nBut yes, changing this should have no effect on the external API/ABI",
      "We decided to not break the API freeze for these prs, but I did get tentative approval to add a pimpl pointer to the Executor and ExecutorOptions classes (ABI but not API breaking), which should let us address this problem between now and the release or just after the release, using the pimpl and new APIs (which are allowed).",
      "@wjwwood is there any update on this?\r\nIt looks that we could just undo the changes to the `spin` function done in your last commit, and this should be good to go (like this https://github.com/ros2/rclcpp/pull/2505/commits/05a8b4cf09685b95744bd808acf39c6d280ea3f6#diff-fd2db21239de2963e2248c8d3ef4042ebd4174ef3e4f9dbd252a375303398796R30)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ad18912b45d36a7061",
    "number": 2504,
    "body": null,
    "head_branch": "clalancette/remove-index-ros-org",
    "is_a_fork": false,
    "comments": [
      "I think https://build.ros2.org/job/Rpr__rclcpp__ubuntu_noble_amd64/165/ should be sufficient, no need for ci.ros2.org."
    ],
    "commit_messages": [
      "Remove references to index.ros.org. (#2504)\n\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ae18912b45d36a7062",
    "number": 2503,
    "body": "Fixed failing tests / errors.",
    "head_branch": "data_race_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(TestCallbackGroup): Fixed test after change to timers\n\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173af18912b45d36a7063",
    "number": 2501,
    "body": "Follow up to https://github.com/ros2/rclcpp/pull/2343",
    "head_branch": "wjwwood/fixup_var_names_to_snake_case",
    "is_a_fork": false,
    "comments": [
      "CI just up to rclcpp\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20833)](http://ci.ros2.org/job/ci_linux/20833/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15137)](http://ci.ros2.org/job/ci_linux-aarch64/15137/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21520)](http://ci.ros2.org/job/ci_windows/21520/)"
    ],
    "commit_messages": [
      "fixup var names to snake case (#2501)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173b118912b45d36a7064",
    "number": 2500,
    "body": "See: https://github.com/ros2/rclcpp/pull/2494\r\n\r\nWhich I could not update.",
    "head_branch": "wjwwood/data_race_fixes",
    "is_a_fork": false,
    "comments": [
      "Fixed the conflicts due to other merges, @jmachowinski can you have a look at `executor.cpp` to make sure I didn't muck up the merge conflicts?\r\n\r\n---\r\n\r\nalso, copying from https://github.com/ros2/rclcpp/pull/2494#issuecomment-2051680519:\r\n\r\nOn my machine, the test `TestAddCallbackGroupsToExecutor/StaticSingleThreadedExecutor.add_callback_groups_after_add_node_to_executor` (for all rmw implementations) is timing out.\r\n\r\n```\r\nThe following tests FAILED:\r\n\t 28 - test_add_callback_groups_to_executor__rmw_cyclonedds_cpp (Timeout)\r\n\t 29 - test_add_callback_groups_to_executor__rmw_fastrtps_cpp (Timeout)\r\n\t 30 - test_add_callback_groups_to_executor__rmw_fastrtps_dynamic_cpp (Timeout)\r\n```\r\n\r\nI'll run CI just to confirm:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20832)](http://ci.ros2.org/job/ci_linux/20832/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15136)](http://ci.ros2.org/job/ci_linux-aarch64/15136/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21519)](http://ci.ros2.org/job/ci_windows/21519/)\r\n\r\nI wasn't able to see any obvious issue, the CI is with my changes in https://github.com/ros2/rclcpp/pull/2500, but locally even this pr's changes have that problem.",
      "I'll look into it",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20836)](http://ci.ros2.org/job/ci_linux/20836/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15140)](http://ci.ros2.org/job/ci_linux-aarch64/15140/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21523)](http://ci.ros2.org/job/ci_windows/21523/)",
      "lgtm"
    ],
    "commit_messages": [
      "[wjwwood] Updated \"Data race fixes\" (#2500)\n\n* Fix callback group logic in executor\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@cellumation.com>\r\n\r\n* fix: Fixed unnecessary copy of wait_set\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* fix(executor): Fixed race conditions with rebuild of wait_sets\r\n\r\nBefore this change, the rebuild of wait set would be triggered\r\nafter the wait set was waken up. With bad timing, this could\r\nlead to the rebuild not happening with multi threaded executor.\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* fix(Executor): Fixed lost of entities rebuild request\r\n\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@cellumation.com>\r\n\r\n* chore: Added assert for not set callback_group in execute_any_executable\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* Add test for cbg getting reset\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\nCo-authored-by: Janosch Machowinski <j.machowinski@nospam.org>\r\n\r\n* chore: renamed test cases to snake_case\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* style\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup test to avoid polling and short timeouts\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix: Use correct notify_waitable_ instance\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* fix(StaticSingleThreadedExecutor): Added missing special case handling for current_notify_waitable_\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n* fix(TestCallbackGroup): Fixed test after change to timers\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@cellumation.com>\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Janosch Machowinski <j.machowinski@cellumation.com>\r\nCo-authored-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\nCo-authored-by: Janosch Machowinski <j.machowinski@nospam.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173b218912b45d36a7065",
    "number": 2499,
    "body": "Printing a warning here is not enough as subscribers that want to get \"latched\" messages will never get ANY messages.",
    "head_branch": "throw_on_sibscriber_with_incompatible_qos",
    "is_a_fork": true,
    "comments": [
      "Actually why do subscribers with transient local never get any data from a volatile publisher? Wouldn't it have be fine to print a warning that there are no stored messages on the publisher but still receive new messages?",
      "> Actually why do subscribers with transient local never get any data from a volatile publisher? Wouldn't it have be fine to print a warning that there are no stored messages on the publisher but still receive new messages?\r\n\r\nYeah, and I thought that was the case.  But in a simple test it doesn't work here either:\r\n\r\nTerminal 1:\r\n```\r\nros2 topic pub -r 1 /chatter --qos-durability volatile std_msgs/msg/String '{data: hello}'\r\n```\r\n\r\nTerminal 2:\r\n```\r\nros2 topic echo --qos-durability transient_local /chatter std_msgs/msg/String\r\n[WARN] [1712937664.106230183] [_ros2cli_160175]: New publisher discovered on topic '/chatter', offering incompatible QoS. No messages will be received from it. Last incompatible policy: DURABILITY\r\n```\r\n\r\n@eboasson @MiguelCompany @eduponz could you maybe comment here to let us know if it is expected that volatile publishers can publish to transient_local subscribers?",
      "We just discussed this in the Client Library Working Group (with @mjcarroll @jmachowinski)\r\n\r\nThe behavior proposed in the PR (throwing an exception if there's a qos mismatch) seems dangerous as it would allow to \"crash\" robots remotely, by creating a bad publisher.\r\nA temporary solution consists of overriding the qos mismatch event callback to throw the exception if some users want that.\r\n\r\nHaving said that, the current behavior is very user unfriendly.\r\nFrom the [QoS compatibility page](https://docs.ros.org/en/rolling/Concepts/Intermediate/About-Quality-of-Service-Settings.html#qos-compatibilities) we indeed see that a volatile publisher won't match with a transient local subscriber.\r\nPublishers offer \"volatile\", but subscribers request \"transient local\".\r\n\r\nThe desired behavior would be to still match, but not deliver the old messages.\r\n\r\nWe should investigate why the DDS QoS works this way.\r\nIf the DDS QoS can't support this use-case, we may need to create a \"ROS QoS\" at the RMW layer to define this policy\r\n\r\n\r\n",
      ">From the [QoS compatibility page](https://docs.ros.org/en/rolling/Concepts/Intermediate/About-Quality-of-Service-Settings.html#qos-compatibilities) we indeed see that a volatile publisher won't match with a transient local subscriber.\r\nPublishers offer \"volatile\", but subscribers request \"transient local\".\r\n\r\nThe reason it's this way is because DDS does it this way.\r\n\r\nI would prefer that the subscriptions were more \"promiscuous\" and match with any publishers, taking transient local if available, but communicating anyway if not. However, this is not trivial to implement in the ROS layer and DDS doesn't support it.\r\n\r\nAs to why, I believe (but I don't know for sure, I'm just speculating) the reason is a cultural difference in DDS and ROS, where DDS prefers precise matching rules that avoid unintended interactions, whereas ROS preferred an approach that allowed for maximum flexibility on matching components with little to zero configuration changes.\r\n\r\nThe oversight (in my opinion) comes in when you have multiple subscribers and a single publisher, with different requirements. I think DDS folks would argue the system is designed wrong and you should have two publishers or something like that, but it's nice if you can have say an algorithm ask for transient local, but occasionally have the recorder or some visualizer subscribe too but without transient local.\r\n\r\nSee this issue: https://github.com/ros2/ros2/issues/464\r\n\r\n---\r\n\r\nAs for this issue, I agree we simply cannot throw when the matching doesn't work, for the above mentioned security concerns. The warning is the best we can do.",
      "@wjwwood thanks for the comments.\r\n\r\n> As to why, I believe (but I don't know for sure, I'm just speculating) the reason is a cultural difference in DDS and ROS, where DDS prefers precise matching rules that avoid unintended interactions, whereas ROS preferred an approach that allowed for maximum flexibility on matching components with little to zero configuration changes.\r\n\r\ni think both reasonable. i believe the use cases for robotics and autonomous system, avoid unexpected behavior to stop communication would be better, instead of printing warning (user could oversight) to keep the communication. (probably later on, we find the problem with this behavior...)\r\njust idea, there could be some `opt-in` configuration flag for user to allow incompatible QoS to keep the communication explicitly, in that case user must be able to know what they are doing.",
      "As a developer in full control of my system, where ROS_LOCALHOST_ONLY is enabled, and I use SROS, there is no security concern. Why not allow this this opt-in. In some of our more complicated test frameworks, it's hard to catch things like these in logs because ROSOUT isn't captured as part of the test. Having it throw would be way better in case I forgot to update the QOS in my test code somewhere, instead of manually chasing down and looking at the ROS logs.\r\n\r\nThere's plenty of other ways to crash ROS if you are on the network with malformed DDS messages.\r\n\r\n",
      "> Why not allow this this opt-in\r\n\r\nThe \"opt-in\" would consist of a subscription option, e.g. `bool throw_on_qos_incompatible`.\r\nIMO that's redundant.\r\nYou already can set a custom callback for handling qos events, and this gives you the freedom to do whatever you want (e.g. throwing an exception) without need for having flags for each possible mode.\r\n\r\n> There's plenty of other ways to crash ROS if you are on the network with malformed DDS messages.\r\n\r\nThat's something we should fix, and not introduce more ways to cause problems.\r\nI'm not necessarily concerned about malicious actors, but more about developers mistakes and bad user experience.",
      "> just idea, there could be some opt-in configuration flag for user to allow incompatible QoS to keep the communication explicitly, in that case user must be able to know what they are doing.\r\n\r\nbtw, i am not even sure if this `opt-in` policy can be supported with current rmw implementations. as far as i see the docs, DDS cannot allow this incompatible cases at all as specification... CC: @MiguelCompany @eboasson @asorbini ",
      "Throwing in my two cents, I'd argue that a Volatile DataWriter only exists if the application explicitly sets the DurabilityQosPolicy to Volatile. Furthermore, a Transient Local DataReader only exists if the application explicitly changes the policy to Transient Local. Seeing that this need to be intended changes, I'd not allow Volatile writers to match with Transient Local readers. In fact, the very reason why the default is Transient Local in writers and Volatile in readers is so that applications can control the latching behaviour by simply setting the policy on the reader side.\r\n\r\nPerhaps with Durability is less clear, as a Transient Local reader not receiving historical data from a Volatile writer could be interpreted upon reception as that there was no historical data. However, if you take the analogous case of ReliabilityQosPolicy, a Reliable reader is explicitly expressing that it wants the writer to resend data in case of loss. I don't think we'd want that reader to match with a Best Effort writer that cannot resend any loss sample. IMO having discrepancies in the Qos incompatibility would be even more confusing.\r\n\r\nOne thing we could do is not to expose those policies for publishers (leaving the default values which are designed to matched with everyone), and let the QosPolicies of the communication be defined on the subscription side only.",
      ">  In fact, the very reason why the default is Transient Local in writers \r\n\r\nThis is NOT the default for writers. The default is volatile.\r\n\r\nEdit: Do you mean publishers when talking about writers ?",
      "@wjwwood\r\n\r\n> From the [QoS compatibility page](https://docs.ros.org/en/rolling/Concepts/Intermediate/About-Quality-of-Service-Settings.html#qos-compatibilities) we indeed see that a volatile publisher won't match with a transient local subscriber. \r\n> [...]\r\n> I would prefer that the subscriptions were more \"promiscuous\" and match with any publishers, taking transient local if available, but communicating anyway if not. However, this is not trivial to implement in the ROS layer and DDS doesn't support it.\r\n> As to why, I believe (but I don't know for sure, I'm just speculating) the reason is a cultural difference in DDS and ROS, where DDS prefers precise matching rules that avoid unintended interactions, whereas ROS preferred an approach that allowed for maximum flexibility on matching components with little to zero configuration changes.\r\n\r\nI want to make sure I don't get lumped in with the DDS folks here üòÄ From the day I learnt that DDS had this \"request-offered\" matching of QoS settings, I have been convinced that it was a bad decision. That was some 15 years ago, and I have not seen a single reason since that led me to reconsider that position. I did learn of various new ways in which it is a bad thing. The trouble is that it is set in stone in DDS ...\r\n\r\n@fujitatomoya \r\n\r\n> > just idea, there could be some opt-in configuration flag for user to allow incompatible QoS to keep the communication explicitly, in that case user must be able to know what they are doing.\r\n>\r\n> btw, i am not even sure if this opt-in policy can be supported with current rmw implementations. as far as i see the docs, DDS cannot allow this incompatible cases at all as specification...\r\n\r\nThere is a way of sneaking it into a DDS implementation without causing too much trouble (I've done it in the past), and that is by adding a QoS for configuring applicable matching rules, and then distribute that setting using a vendor-specific parameter code in the discovery information with the \"must understand\" flag set, indicating that any implementation that receives that the discovery data but doesn't understand this particular setting has to ignore it. Then you only need to fiddle a bit with feature flags/version numbers in discovery so that you can handle the case where you're interoperating with the same DDS implementation but an older version.\r\n\r\nI doubt the OMG would go for it, and in any case, that process is so slow that it might as well be ignored. That makes it necessarily very vendor-specific.\r\n\r\n@jmachowinski \r\n\r\n> > In fact, the very reason why the default is Transient Local in writers\r\n> \r\n> This is NOT the default for writers. The default is volatile.\r\n\r\nIndeed.\r\n\r\n> Edit: Do you mean publishers when talking about writers ?\r\n\r\nI have no desire to speak for someone else, but I might be able to provide some clarification. In DDS the basic entities are called \"(data) writers\" and \"(data) readers\", and the ROS 2 \"publisher\" is equivalent to the DDS \"writer\".\r\n\r\nTo make things more fun, in DDS you *also* have \"publishers\" and \"subscribers\". Each data writer is owned by exactly one publisher, but a publisher can own multiple data writers (analogous for readers/subscribers). So it is easy for confusion to arise.",
      "> > In fact, the very reason why the default is Transient Local in writers\r\n> \r\n> This is NOT the default for writers. The default is volatile.\r\n> \r\n> Edit: Do you mean publishers when talking about writers ?\r\n\r\nSorry for not been clear. When I wrote writers I meant DDS DataWriters, same with readers (DDS DataReaders). I always found strange that the DDS speck allows configuring these policies on both sides, instead of having the receiver deciding on them. It is my understanding that this was done to allow for optimizations in some cases, but it is something that ROS 2 may not expose, as it is somehow error prone. In that sense, changing durability or reliability on the DataWriter side should be presented in a only-touch-this-if-you-know-what-you-are-doing basis.\r\n\r\nOn the meantime, we could change the Publisher defaults for ROS 2 to map those of DDS so that setting the volatility or reliability on only on the subscriptions side does not lead to this issue. Furthermore, I'd always advocate for applications to implement all the callbacks and not just the data ones. We could either force them to do it (possible a bit harsh but it's what you would do in a safety context for instance), or we could have a default implementation that at the very least logs something (I agree that throwing is indeed a dangerous default). It is true that the error may still go unnoticed for some applications, but I guess it'd better than nothing.",
      "@fujitatomoya would you be willing to summarize this PR, close it, and open a discussion issue on ros2/ros2? üßá ",
      "As a conclusion to this PR, we are going to close this. According to the discussion above, it seems no objections but feel free to post the comments and reopen.\r\n\r\nThe reason is that this PR allows user to `crash (generating exception)` remotely on the subscriber by creating publisher on the topic. This could be security issue, and https://github.com/ros2/rclcpp/pull/2499#issuecomment-2052049179 describes the reason as well.\r\n\r\nFor another discussion on `How strict QoS compatibility should be?`, i created the the another issue to track the discussion and feedback, please visit https://github.com/ros2/ros2/issues/1562"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173b318912b45d36a7066",
    "number": 2498,
    "body": "When I added in the tests for large messages, I made a mistake and reserved space in the strings, but didn't actually expand it.  Thus, we were writing into uninitialized memory.  Fix this by just using the correct constructor for string, which will allocate and initialize the memory properly.\r\n\r\n@ahcorde FYI",
    "head_branch": "clalancette/fix-large-type-adapter",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20825)](http://ci.ros2.org/job/ci_linux/20825/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15129)](http://ci.ros2.org/job/ci_linux-aarch64/15129/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21512)](http://ci.ros2.org/job/ci_windows/21512/)\r\n* Windows Debug [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21513)](http://ci.ros2.org/job/ci_windows/21513/)"
    ],
    "commit_messages": [
      "Fix uninitialized memory in test (#2498)\n\nWhen I added in the tests for large messages, I made a mistake and reserved space in the strings, but didn't actually expand it.  Thus, we were writing into uninitialized memory.  Fix this by just using the correct constructor for string, which will allocate and initialize the memory properly.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173b418912b45d36a7067",
    "number": 2496,
    "body": "Closes #2493 \r\nCC @clalancette \r\n\r\nAt least for now I drafted a `bad_alloc` exception, but in the same files it is used `std::runtime_error` carrying always an explanatory message. `bad_alloc` by design is not allowed to allocate memory, so it is not designed with error messages in mind.\r\n\r\nSo I open this as draft so we can devise the best strategy / the one more consistent with `rclcpp` development in general. ",
    "head_branch": "fix/fanalizer_possible_dereference",
    "is_a_fork": true,
    "comments": [
      "Can we move the check into the allocate functions ?",
      "> Can we move the check into the allocate functions ?\r\n\r\n+1 on @jmachowinski suggestion\r\n\r\nI think it's a good change and it could be worth to apply it automatically.\r\n\r\n@roncapat note that the Jazzy feature freeze is on Monday.\r\nI think is worth to push this even if it's a API break, and we can document it in the changelog.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20844)](http://ci.ros2.org/job/ci_linux/20844/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15147)](http://ci.ros2.org/job/ci_linux-aarch64/15147/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21530)](http://ci.ros2.org/job/ci_windows/21530/)",
      "I don't understand these CI failures. Anyway, sorry for being late on this, I'll try today to do an alternative PR with fixes inside the executor as suggested.",
      "I just gave a look to the code, and frankly speaking I don't understand whether there is a possibility to move the check in the allocator. As the default allocator is `std::allocator<void>`, we can't make it throw inside on ourselves (it's a standard library thing). Aside from all the templating magic there, what seems to happen under the hood is a call to `std::allocator_traits<Alloc>::allocate` passing the allocator, which by default is `std::allocator<void>`.\r\n\r\n",
      "Please also note that the current patch fixes unhandled `nullptr`s only in some `rclcpp` headers, the ones used by my components per #2493. If there are other `::allocate` calls around `rclcpp` codebase, I believe these would be detected only by a full `-fanalyzer` rebuild of `rclcpp` package. So this fixes `-fanalyzer` builds of end users consuming `rclcpp` API, maybe not `rclcpp` codebase comprehensively.",
      "`std::allocator<void>::allocate()` already throws `std::bad_alloc`: https://en.cppreference.com/w/cpp/memory/allocator/allocate\r\n\r\nAs to the CI failures that looks bizarre to me.",
      "I assume the entry from https://gist.githubusercontent.com/alsora/a25f5d4cc933eb86df82f51cc0a9d09b/raw/6579317f4545b42dd007b95e750d1850090af4ec/rclcpp-2496.repos:\r\n\r\n```\r\n  ros2/rclcpp:\r\n    type: git\r\n    url: https://github.com/roncapat/rclcpp.git\r\n    version: fix/fanalizer_possible_dereference\r\n```\r\n\r\nPoints to an out-of-date branch? Maybe it needs to be merged with rolling first? When you provide a custom repos file it doesn't merge with rolling first (afaik, but I could be wrong about that).",
      "Yes, at least the documentation says so... we may be in front of a GCC bug then? If I'm using standard allocator I shouldn't see this warning popping up.",
      "OK, my fault... [C++ is not officially supported yet](https://gcc.gnu.org/bugzilla/showdependencytree.cgi?id=97110). I leave the bug tracker here because I think it is interesting to have a pointer to current support status and may be very useful in the future.\r\n\r\nClosing for now.",
      "Could be, I'm not familiar with how a function can let the compiler know what it will do. I assume there is an attribute of some sort, maybe that's just missing. I think there's a version of `new` that doesn't throw, and instead returns nullptr, but I think you have to pass `nothrow` to get that. I don't see something equivalent for `allocate()`.\r\n\r\nYeah here: https://en.cppreference.com/w/cpp/memory/new/operator_new#Version_5"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173b518912b45d36a7068",
    "number": 2495,
    "body": "See: https://github.com/ros2/rclcpp/pull/2250",
    "head_branch": "jmachowinski_2250",
    "is_a_fork": false,
    "comments": [
      "New CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20797)](http://ci.ros2.org/job/ci_linux/20797/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15100)](http://ci.ros2.org/job/ci_linux-aarch64/15100/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21475)](http://ci.ros2.org/job/ci_windows/21475/)",
      "I can't approve my own pr, but lgtm. I think this will be good to merge if the CI comes back clean.",
      "Looks like all of the generated typesupport linting failures here, I think we are good to go."
    ],
    "commit_messages": [
      "Remake of \"fix: Fixed race condition in action server between is_ready and take\" (#2495)\n\nSome background information: is_ready, take_data and execute data\r\nmay be called from different threads in any order. The code in the old\r\nstate expected them to be called in series, without interruption.\r\nThis lead to multiple race conditions, as the state of the pimpl objects\r\nwas altered by the three functions in a non thread safe way.\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Janosch Machowinski <j.machowinski@nospam.org>\r\nCo-authored-by: Janosch Machowinski <j.machowinski@nospam.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173b618912b45d36a7069",
    "number": 2494,
    "body": "@mjcarroll @wjwwood \r\n\r\nMake the executors more stable with our stack.\r\n",
    "head_branch": "data_race_fixes",
    "is_a_fork": true,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20791)](http://ci.ros2.org/job/ci_linux/20791/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15095)](http://ci.ros2.org/job/ci_linux-aarch64/15095/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21469)](http://ci.ros2.org/job/ci_windows/21469/)",
      "All test failures here are related to https://github.com/ros2/rosidl_typesupport_fastrtps/pull/117",
      "Can you explain the changes?",
      "@wjwwood did you look at the commit messages of the single commits ?",
      "https://github.com/ros2/rclcpp/pull/2494/commits/7d0b532d44262b67b0b523d4b7b059c392105b25\r\n\r\nAny rebuild request coming from a second thread may get lost, if issued, while the execution thread is in Executor::collect_entities(). Changes the clearing of the request to an atomic operation to fix this.\r\n\r\nhttps://github.com/ros2/rclcpp/pull/2494/commits/a968a3c1e511775f8274bcd786b7cdc702e37d2c\r\n\r\nThe waitable did not rearm its guard condition if not processed yet. I think In the long run we should have a better API for this, as it is a common pitfall.\r\n\r\nhttps://github.com/ros2/rclcpp/pull/2494/commits/5d99e3b594dd9330540327aa74c7b28212f35466\r\n\r\nAfter adding all of the timer_index++ in the outer code the code was basically same as the other next_XYZ, therefore\r\nI just replaced it, to a a more uniform code.\r\n\r\nhttps://github.com/ros2/rclcpp/pull/2494/commits/39e0d94076224f6e34ac555c32b0a063a5f543d1\r\n\r\nThis fixes a possible data race, as the on_trigger_callback might rely on the facts, that the executor wakes up,\r\nafter it was executed.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20804)](http://ci.ros2.org/job/ci_linux/20804/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15107)](http://ci.ros2.org/job/ci_linux-aarch64/15107/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21488)](http://ci.ros2.org/job/ci_windows/21488/)",
      "The unstable tests on windows seems to be non related, see https://github.com/ros2/rmw_connextdds/issues/136",
      "closed in favor for #2500 2500",
      "On my machine, the test `TestAddCallbackGroupsToExecutor/StaticSingleThreadedExecutor.add_callback_groups_after_add_node_to_executor` (for all rmw implementations) is timing out.\r\n\r\n```\r\nThe following tests FAILED:\r\n\t 28 - test_add_callback_groups_to_executor__rmw_cyclonedds_cpp (Timeout)\r\n\t 29 - test_add_callback_groups_to_executor__rmw_fastrtps_cpp (Timeout)\r\n\t 30 - test_add_callback_groups_to_executor__rmw_fastrtps_dynamic_cpp (Timeout)\r\n```\r\n\r\nI'll run CI just to confirm:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20832)](http://ci.ros2.org/job/ci_linux/20832/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15136)](http://ci.ros2.org/job/ci_linux-aarch64/15136/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21519)](http://ci.ros2.org/job/ci_windows/21519/)\r\n\r\nI wasn't able to see any obvious issue, the CI is with my changes in https://github.com/ros2/rclcpp/pull/2500, but locally even this pr's changes have that problem."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173b718912b45d36a706a",
    "number": 2492,
    "body": "this commit will fix the warning [-Wstringop-overflow=] #2461 ",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20781)](http://ci.ros2.org/job/ci_linux/20781/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15076)](http://ci.ros2.org/job/ci_linux-aarch64/15076/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21458)](http://ci.ros2.org/job/ci_windows/21458/)"
    ],
    "commit_messages": [
      "fix: init concatenated_vector with begin() & end() (#2492)\n\n*. this commit will fix the warning [-Wstringop-overflow=] #2461\r\n\r\nSigned-off-by: homalozoa <nx.tardis@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173b818912b45d36a706b",
    "number": 2491,
    "body": "‚Ä¶known state.\n\naddress https://github.com/ros2/rclcpp/issues/997<hr>This is an automatic backport of pull request #2450 done by [Mergify](https://mergify.com).",
    "head_branch": "mergify/bp/humble/pr-2450",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20776)](http://ci.ros2.org/job/ci_linux/20776/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15074)](http://ci.ros2.org/job/ci_linux-aarch64/15074/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21456)](http://ci.ros2.org/job/ci_windows/21456/)",
      "https://ci.ros2.org/job/ci_windows/21456/ is unrelated, merging."
    ],
    "commit_messages": [
      "call shutdown in LifecycleNode dtor to avoid leaving the device in un‚Ä¶ (#2450) (#2491)\n\n* call shutdown in LifecycleNode dtor to avoid leaving the device in unknown state.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add test to verify LifecycleNode::shutdown is called on destructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit 04ea0bb00293387791522590b7347a2282cda290)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173b918912b45d36a706c",
    "number": 2490,
    "body": "‚Ä¶known state.\n\naddress https://github.com/ros2/rclcpp/issues/997<hr>This is an automatic backport of pull request #2450 done by [Mergify](https://mergify.com).",
    "head_branch": "mergify/bp/iron/pr-2450",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20775)](http://ci.ros2.org/job/ci_linux/20775/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15073)](http://ci.ros2.org/job/ci_linux-aarch64/15073/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21455)](http://ci.ros2.org/job/ci_windows/21455/)",
      "https://ci.ros2.org/job/ci_windows/21455/ is unrelated, i will go ahead to merge this."
    ],
    "commit_messages": [
      "call shutdown in LifecycleNode dtor to avoid leaving the device in un‚Ä¶ (#2450) (#2490)\n\n* call shutdown in LifecycleNode dtor to avoid leaving the device in unknown state.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add test to verify LifecycleNode::shutdown is called on destructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit 04ea0bb00293387791522590b7347a2282cda290)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ba18912b45d36a706d",
    "number": 2489,
    "body": "Related with this issue https://github.com/ros2/rclcpp/issues/2488",
    "head_branch": "ahcorde/rolling/disable_compare_function_warn_test_utilities",
    "is_a_fork": false,
    "comments": [
      "* Linux clang [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20759)](http://ci.ros2.org/job/ci_linux/20759/)\r\n* Linux-aarch64 clang [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15058)](http://ci.ros2.org/job/ci_linux-aarch64/15058/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21438)](http://ci.ros2.org/job/ci_windows/21438/)",
      "other warning are unrelated"
    ],
    "commit_messages": [
      "Disable compare-function-pointers in test_utilities (#2489)\n\nSigned-off-by: Alejandro Hern√°ndez Cordero <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173bc18912b45d36a706e",
    "number": 2486,
    "body": "address https://github.com/ros2/rclcpp/issues/1963 and https://github.com/dusty-nv/jetson-containers/issues/336<hr>This is an automatic backport of pull request #2481 done by [Mergify](https://mergify.com).",
    "head_branch": "mergify/bp/iron/pr-2481",
    "is_a_fork": false,
    "comments": [
      "CI:\r\nBuilding on the built-in node in workspace /var/lib/jenkins/jobs/ci_launcher/workspace\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20751)](http://ci.ros2.org/job/ci_linux/20751/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15050)](http://ci.ros2.org/job/ci_linux-aarch64/15050/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21430)](http://ci.ros2.org/job/ci_windows/21430/)"
    ],
    "commit_messages": [
      "address ambiguous auto variable. (#2481) (#2486)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Steve Nogar <stephen.m.nogar.civ@army.mil>\r\n(cherry picked from commit 3cdb25934ed261c78bdfbcf5ec9f06e0573be81e)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173bd18912b45d36a706f",
    "number": 2485,
    "body": "address https://github.com/ros2/rclcpp/issues/1963 and https://github.com/dusty-nv/jetson-containers/issues/336<hr>This is an automatic backport of pull request #2481 done by [Mergify](https://mergify.com).",
    "head_branch": "mergify/bp/humble/pr-2481",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20752)](http://ci.ros2.org/job/ci_linux/20752/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15051)](http://ci.ros2.org/job/ci_linux-aarch64/15051/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21431)](http://ci.ros2.org/job/ci_windows/21431/)"
    ],
    "commit_messages": [
      "address ambiguous auto variable. (#2481) (#2485)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Steve Nogar <stephen.m.nogar.civ@army.mil>\r\n(cherry picked from commit 3cdb25934ed261c78bdfbcf5ec9f06e0573be81e)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173be18912b45d36a7070",
    "number": 2484,
    "body": "I can see a [timeout in rclcpp cppcheck](https://ci.ros2.org/view/nightly/job/nightly_win_deb/3052/consoleText) increasing it a little bit more. [nightly_win_deb build](https://ci.ros2.org/view/nightly/job/nightly_win_deb/3052/#showFailuresLink)\r\n\r\n```\r\n2:  - C:/ci/ws/install/Scripts/ament_cppcheck.exe --xunit-file C:/ci/ws/build/rclcpp/test_results/rclcpp/cppcheck.xunit.xml --include_dirs C:/ci/ws/src/ros2/rclcpp/rclcpp/include\r\n  2/124 Test   #2: cppcheck ...................................................***Timeout 600.10 sec\r\n```",
    "head_branch": "ahcorde/rolling/cpplint_timeout",
    "is_a_fork": false,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20743)](http://ci.ros2.org/job/ci_linux/20743/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15044)](http://ci.ros2.org/job/ci_linux-aarch64/15044/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21423)](http://ci.ros2.org/job/ci_windows/21423/)",
      "warning is unrelated"
    ],
    "commit_messages": [
      "Increase the cppcheck timeout to 1200 seconds (#2484)\n\nSigned-off-by: Alejandro Hern√°ndez Cordero <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173bf18912b45d36a7071",
    "number": 2483,
    "body": "Re-opened version of https://github.com/ros2/rclcpp/pull/2420 (it seems the target branch being deleted prevents me from reopening it and/or updating the target branch...).\r\n\r\nCopied from the original description:\r\n\r\n> An emerging responsibility of Waitables that wasn't explicitly declared before is that they should be ensuring guard conditions should stay ready between waits so long as the condition for them being triggered is still true.\r\n> \r\n> Some waitables will not need this, e.g. waitables that are used to only wake up an executor once, but don't have events tied to them don't need to be retriggered. But other waitables which use guard conditions to notify the executor of work to be done need to keep triggering those guard conditions on subsequent waits, so long as the work associated with them has not been completed.",
    "head_branch": "wjwwood/ensure_waitables_handle_guard_condition_retriggering",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20731)](http://ci.ros2.org/job/ci_linux/20731/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15036)](http://ci.ros2.org/job/ci_linux-aarch64/15036/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21413)](http://ci.ros2.org/job/ci_windows/21413/)",
      "Force pushed to fix DCO.",
      "Uhm, I'm confused, is allocator_memory_strategy.hpp still used ?\r\nI thought it was removed with the wait_set patch.",
      "> Uhm, I'm confused, is allocator_memory_strategy.hpp still used ?\r\n> I thought it was removed with the wait_set patch.\r\n\r\nIt's on `rolling`:\r\n\r\nhttps://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/strategies/allocator_memory_strategy.hpp\r\n\r\nI don't see that it was removed in the executor update: https://github.com/ros2/rclcpp/pull/2142/files\r\n\r\nThough maybe it should have been removed. @mjcarroll was that an oversight?",
      "Rerunning Windows CI after a small fix: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21418)](https://ci.ros2.org/job/ci_windows/21418/)",
      ">Though maybe it should have been removed. @mjcarroll was that an oversight?\r\n\r\nIt is unused in the executor implementation, but part of public API.  Do we need to tick-tock it or is it safe to remove in one version because it's an implementation detail?\r\n\r\nHappy to do either in a follow-up.",
      "It's tricky, I'd like to say we could just remove it because it was kind of an internal API, but it's probably safer to deprecate it first.",
      "Fresh set of full CI with the Windows fix:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20749)](http://ci.ros2.org/job/ci_linux/20749/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15049)](http://ci.ros2.org/job/ci_linux-aarch64/15049/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21428)](http://ci.ros2.org/job/ci_windows/21428/)\r\n  * Re-run: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21461)](https://ci.ros2.org/job/ci_windows/21461/)",
      "I believe the test failure on Windows was a pre-existing flake, and wasn't caused or made worse by this pr. Subsequent runs on CI did not fail.",
      "agreed, lgtm"
    ],
    "commit_messages": [
      "Ensure waitables handle guard condition retriggering (#2483)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\nCo-authored-by: Michael Carroll <mjcarroll@intrinsic.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173c018912b45d36a7072",
    "number": 2481,
    "body": "address https://github.com/ros2/rclcpp/issues/1963 and https://github.com/dusty-nv/jetson-containers/issues/336",
    "head_branch": "fujitatomoya/issue-1963",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20746)](http://ci.ros2.org/job/ci_linux/20746/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15047)](http://ci.ros2.org/job/ci_linux-aarch64/15047/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21426)](http://ci.ros2.org/job/ci_windows/21426/)\r\n",
      "Windows is unstable?\r\n\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21429)](http://ci.ros2.org/job/ci_windows/21429/)",
      "@Mergifyio backport humble iron",
      "> backport humble iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2485 address ambiguous auto variable. (backport #2481)](https://github.com/ros2/rclcpp/pull/2485) has been created for branch `humble`\n* [#2486 address ambiguous auto variable. (backport #2481)](https://github.com/ros2/rclcpp/pull/2486) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "address ambiguous auto variable. (#2481)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Steve Nogar <stephen.m.nogar.civ@army.mil>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c118912b45d36a7073",
    "number": 2479,
    "body": "Related with this warning https://ci.ros2.org/view/nightly/job/nightly_linux_clang_libcxx/1846/gcc/new/folder.-1481343024/",
    "head_branch": "ahcorde/rolling/remove_test_timers_manager_clang_warning",
    "is_a_fork": false,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20717)](http://ci.ros2.org/job/ci_linux/20717/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15026)](http://ci.ros2.org/job/ci_linux-aarch64/15026/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21401)](http://ci.ros2.org/job/ci_windows/21401/)\r\n\r\n* Linux clang [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20718)](http://ci.ros2.org/job/ci_linux/20718/)\r\n* Linux-aarch64 clang [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15027)](http://ci.ros2.org/job/ci_linux-aarch64/15027/)",
      "Windows doesn't like the change \r\n\r\n```\r\nerror C3493: 'cancel_iter' cannot be implicitly captured because no default capture mode has been specified [C:\\ci\\ws\\build\\rclcpp\\test\\rclcpp\\test_timers_manager.vcxproj]\r\n```",
      "> Windows doesn't like the change\r\n\r\nSee our conversation in https://github.com/ros2/rclcpp/pull/2479#discussion_r1549883993",
      "* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21406)](http://ci.ros2.org/job/ci_windows/21406/)\r\n",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20737)](http://ci.ros2.org/job/ci_linux/20737/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15041)](http://ci.ros2.org/job/ci_linux-aarch64/15041/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21416)](http://ci.ros2.org/job/ci_windows/21416/)\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20741)](http://ci.ros2.org/job/ci_linux/20741/)\r\n* Linux-aarch64 clang [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15040)](http://ci.ros2.org/job/ci_linux-aarch64/15040/)",
      "This specific warning is removed from the clang builds, Merging"
    ],
    "commit_messages": [
      "Removed test_timers_manager clang warning (#2479)\n\nSigned-off-by: Alejandro Hern√°ndez Cordero <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c218912b45d36a7074",
    "number": 2478,
    "body": "address https://github.com/ros2/rclcpp/issues/2477",
    "head_branch": "fujitatomoya/issue-2477",
    "is_a_fork": false,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20719)](http://ci.ros2.org/job/ci_linux/20719/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15028)](http://ci.ros2.org/job/ci_linux-aarch64/15028/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21402)](http://ci.ros2.org/job/ci_windows/21402/)",
      "@thomasmoore-torc windows failure https://ci.ros2.org/job/ci_windows/21402/testReport/junit/(root)/rclcpp/test_publisher_with_type_adapter_gtest_missing_result/ seems that it gets crashed on somewhere in `test_large_message_unique`.\r\n\r\nhttps://github.com/ros2/rclcpp/blob/f7a7954ae74f1b92164cbc21900b6cf89c5b8e16/rclcpp/test/rclcpp/test_publisher_with_type_adapter.cpp#L367-L386\r\n\r\nDo you have any clue for that?",
      "I can not reproduce this failure with linux platform.",
      "@fujitatomoya - I don't see anything obvious as to why this would fail on the Windows platform. However, I don't readily have access to a Windows-based development environment to try and debug.\r\n\r\nDid the most recent build fail with the same issues after you forced pushed the additional changes? I haven't discovered how to find those build results and the `Rpr__rclcpp__ubuntu_noble_amd64` build in the checks seems different.",
      "> Did the most recent build fail with the same issues after you forced pushed the additional changes?\r\n\r\nfailure really related to this PR, but we can give it a shot only with `rclcpp` test.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20747)](http://ci.ros2.org/job/ci_linux/20747/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15048)](http://ci.ros2.org/job/ci_linux-aarch64/15048/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21427)](http://ci.ros2.org/job/ci_windows/21427/)",
      "@thomasmoore-torc the same failure. I do not have windows either, i would like to ask some help on this verification. in the meantime, i will take a look what went wrong in the source code.\r\n\r\n```bash\r\n[ RUN      ] TestPublisher.test_large_message_unique\r\n-- run_test.py: return code 3221226356\r\n-- run_test.py: generate result file 'C:/ci/ws/build/rclcpp/test_results/rclcpp/test_publisher_with_type_adapter.gtest.xml' with failed test\r\n-- run_test.py: verify result file 'C:/ci/ws/build/rclcpp/test_results/rclcpp/test_publisher_with_type_adapter.gtest.xml'\r\n```",
      "@clalancette @alsora any thoughts?",
      "I think the failing test @fujitatomoya is mentioning was caused by https://github.com/ros2/rclcpp/pull/2443 (check [investigation](https://github.com/osrf/buildfarm-tools/issues/39#issuecomment-2047834728)).\r\n\r\nIt's a consistent issue in Windows Debug",
      "@Crola1702 thanks for the info.\r\n\r\nI got a question why CI https://github.com/ros2/rclcpp/pull/2443#issuecomment-1978752604 on https://github.com/ros2/rclcpp/pull/2443 could not detect this warning on windows?",
      "> I got a question why CI https://github.com/ros2/rclcpp/pull/2443#issuecomment-1978752604 on https://github.com/ros2/rclcpp/pull/2443 could not detect this warning on windows?\r\n\r\nThis is because CI builds (such as the ones you linked) use sequential executor. Nightly builds are using parallel executor.",
      "@thomasmoore-torc i think https://github.com/ros2/rclcpp/pull/2498 should fix our CI failure, let me try run CI again.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20853)](http://ci.ros2.org/job/ci_linux/20853/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15156)](http://ci.ros2.org/job/ci_linux-aarch64/15156/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21539)](http://ci.ros2.org/job/ci_windows/21539/)",
      "@fujitatomoya - it looks like that didn't fix it. While it shouldn't be an issue, the implementation of `struct TypeAdapter<std::string, rclcpp::msg::LargeMessage>` would generally be considered dangerous because it performs blind `memcpy` operations. It might be worth trying the following change to [this code](https://github.com/ros2/rclcpp/blob/90e451154cc23c4c231ca55dc103358f38cfd999/rclcpp/test/rclcpp/test_publisher_with_type_adapter.cpp#L109-L133):\r\n\r\n```diff\r\n  template<>\r\n  struct TypeAdapter<std::string, rclcpp::msg::LargeMessage>\r\n  {\r\n    using is_specialized = std::true_type;\r\n    using custom_type = std::string;\r\n    using ros_message_type = rclcpp::msg::LargeMessage;\r\n  \r\n    static void\r\n    convert_to_ros_message(\r\n      const custom_type & source,\r\n      ros_message_type & destination)\r\n    {\r\n-     destination.size = source.size();\r\n-     std::memcpy(destination.data.data(), source.data(), source.size());\r\n+     destination.size = std::min(source.size(), destination.data.max_size());\r\n+     std::memcpy(destination.data.data(), source.data(), destination.size);\r\n    }\r\n  \r\n    static void\r\n    convert_to_custom(\r\n      const ros_message_type & source,\r\n      custom_type & destination)\r\n    {\r\n      destination.resize(source.size);\r\n      std::memcpy(destination.data(), source.data.data(), source.size);\r\n    }\r\n  };\r\n```",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20860)](http://ci.ros2.org/job/ci_linux/20860/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15163)](http://ci.ros2.org/job/ci_linux-aarch64/15163/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21549)](http://ci.ros2.org/job/ci_windows/21549/)",
      "I poked at this a bit on my Windows VM, and it really doesn't like the change to `create_ros_message_unique_ptr` for some reason.\r\n\r\nIn particular, when I built this in Windows Debug, I got the following stack trace:\r\n```\r\nminkernel\\crts\\ucrt\\src\\appcrt\\heap\\debug_heap.cpp(904) : Assertion failed: _CrtIsValidHeapPointer(block)\r\nminkernel\\crts\\ucrt\\src\\appcrt\\heap\\debug_heap.cpp(908) : Assertion failed: is_block_type_valid(header->_block_use)\r\nunknown file: error: SEH exception with code 0xc0000005 thrown in the test body.\r\n```\r\n\r\nWhile I don't know exactly what it means, it suggests to me that `create_ros_message_unique_ptr` isn't actually allocating the memory we think it is.  I think someone needs to go in and validate what [this line](https://github.com/ros2/rclcpp/blob/3d58f0fb703d86461c2ab2fb39cd2640dc26e219/rclcpp/include/rclcpp/publisher.hpp#L575) really allocates."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c318912b45d36a7075",
    "number": 2476,
    "body": "Fixes #2474\r\n\r\nCC: @jmachowinski",
    "head_branch": "mjcarroll/fix_cbg_condition",
    "is_a_fork": false,
    "comments": [
      "> Is it easy to create a unit-test that would fail without this PR and succeeds now?\r\n\r\nShould be straight forward.\r\nA custom executor, \r\nAdd a cbg\r\ncall collect, \r\nthen delete the cbg\r\nCall get next executable.\r\nThis failed for me, I got a any executable with an empty cbg",
      "@jmachowinski can you take a look at my test here?  I can't get a scenario where the executable (in this case a timer) is valid, while the callback group is not.\r\n\r\nIn my case, even when resetting the callback group and the node, there are still 2 strong references to the callback group.",
      "> And I've found that using a custom waitable that can be explicitly triggered rather than a timer can avoid unintentional race conditions and sleeps\r\n\r\nIn this special case, the timer is not racy, as we just need it to be ready. Also I would like to keep the timer, as it uncovered a bug causing an endless loop.",
      "@jmachowinski I have incorporated your changes from: https://github.com/cellumation/rclcpp/tree/fix_cbg_condition\r\n\r\nThey have been squashed and I marekd you with co-authored-by\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20760)](http://ci.ros2.org/job/ci_linux/20760/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15059)](http://ci.ros2.org/job/ci_linux-aarch64/15059/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21439)](http://ci.ros2.org/job/ci_windows/21439/)",
      "@mjcarroll I picked the test over to https://github.com/ros2/rclcpp/pull/2494\r\n\r\n2494 also fixes the tests fails that came up in the CI.\r\n\r\nI think we can close this PR in favor for 2494",
      "Ok, let's go ahead and close this then. We can reopen it if needed, and I think the feed back was addressed in the new pr as far as I can tell.\r\n\r\nFor future reference, it's usually better to make prs to other prs rather than replacing them, though sometimes that doesn't work out due to needing to rebase. Or like me you mess up the pr or branch some how and have to close it üôÉ."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c418912b45d36a7076",
    "number": 2475,
    "body": "Reverts #1956, so it un-reverts #1874 (with some major updates), see https://github.com/ros2/rclcpp/pull/1874#issuecomment-1165811614\r\n\r\nReplaces #1957\r\n\r\nCloses #1821\r\n\r\nThis adds `spin_until_complete(condition, timeout)`.\r\n\r\nThis also adds `rclcpp::Executor::spin_for(duration)`. Original Issue: #1821 (Added by @fujitatomoya)\r\n\r\nThis goes along with the following PRs:\r\n\r\n- https://github.com/ros2/rclpy/pull/1268\r\n- https://github.com/ros2/ros2_documentation/pull/4252",
    "head_branch": "christophebedard/revert-1956-revert-1874-hliberacki/timeout",
    "is_a_fork": false,
    "comments": [
      "I had a few questions/suggestions/comments, but generally the approach lgtm. I think once you've addressed them to your satisfaction @christophebedard, then it should be good to go. ",
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20846)](http://ci.ros2.org/job/ci_linux/20846/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15149)](http://ci.ros2.org/job/ci_linux-aarch64/15149/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21532)](http://ci.ros2.org/job/ci_windows/21532/)",
      "Should we merge this now, or wait until the `rclpy` PR (https://github.com/ros2/rclpy/pull/1268) has been reviewed and is ready to go too?",
      "We should really merge them together, because I don't think it's good if we have rclpy and rclcpp deviate from one another.",
      "My CI above did not include your changes for rclpy unfortunately. We'll have to run separate CI for that.",
      "Any news on this?",
      "This seems like a low hanging fruit addition?",
      "@alsora Can you add this to the agenda of the next client workgroup meeting ?\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c518912b45d36a7077",
    "number": 2473,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/2470",
    "head_branch": "static_executor_fix",
    "is_a_fork": true,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20843)](http://ci.ros2.org/job/ci_linux/20843/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15146)](http://ci.ros2.org/job/ci_linux-aarch64/15146/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21529)](http://ci.ros2.org/job/ci_windows/21529/)\r\n\r\nMerging with green CI",
      "rebased to rolling. \r\n\r\nAs this is a pure bug fix, whats the process for merging this, wait until unfreeze, rolling and backport to jazzy ?\r\n",
      "> As this is a pure bug fix, whats the process for merging this, wait until unfreeze, rolling and backport to jazzy ?\r\n\r\nYep, that's exactly correct.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20876)](http://ci.ros2.org/job/ci_linux/20876/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15179)](http://ci.ros2.org/job/ci_linux-aarch64/15179/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21558)](http://ci.ros2.org/job/ci_windows/21558/)",
      "@jmachowinski friendly ping.  What would you like to do with this?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c618912b45d36a7078",
    "number": 2471,
    "body": "address https://github.com/ros2/rclcpp/issues/2451 and https://github.com/ros2/rclcpp/issues/1679\r\n\r\nNote: more tests need to be done before CI.",
    "head_branch": "fujitatomoya/issue-2451",
    "is_a_fork": false,
    "comments": [
      "- IMO, we do not guarantee all feedback messages must be delivered to the client. (if the goal accept response is not yet delivered, that would be dropped. but eventually, feedback messages will be received on the client once goal handle is being tracked.)\r\n- Service responses should be handled with priority than `feedback` and `status` topics because it changes internal action state in the client.\r\n",
      "@alsora thanks for the review.\r\n\r\nthis will change the action client behavior internally so i need to do more verification locally, and i would like to have more feedback for this before further. please keep it open for a while.",
      "Uhm, this implementation is ontop of a racy state...\r\n\r\nWe should merge https://github.com/ros2/rclcpp/pull/2250 first.",
      "Regarding the issue itself. From my point of view, the design of the action is broken, as it uses multiple communication channels to communicate, thus creating this kind of problems. \r\n\r\nBtw you can create the same bug by spamming feedback, and make an action never terminate.\r\n\r\n",
      "@jmachowinski thanks for the comment. this one is not in the merge queue yet, i need to take some more time to verify this, since this changes the action behavior, i am expecting that userspace (tests) would break.",
      "https://github.com/ros2/rclcpp/pull/2612 replaces this one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c818912b45d36a7079",
    "number": 2469,
    "body": "This fixed some issues reported in https://github.com/ros2/rcl/pull/1142\r\n\r\n@clalancette, @mjcarroll , @fujitatomoya , @wjwwood ",
    "head_branch": "flaky_timer_test_fix",
    "is_a_fork": true,
    "comments": [
      "@jmachowinski thanks for the fix.\r\n\r\nRegardless https://github.com/ros2/rcl/pull/1142, this is better to fix. i will start CI.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20692)](http://ci.ros2.org/job/ci_linux/20692/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15010)](http://ci.ros2.org/job/ci_linux-aarch64/15010/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21385)](http://ci.ros2.org/job/ci_windows/21385/)",
      "@fujitatomoya Yes, this patch just fixes the flakyness of the test.\r\nhttps://github.com/ros2/rcl/pull/1146 fixes the issues reported in 1142, can you also start the CI for this one ?",
      "https://ci.ros2.org/job/ci_windows/21385/ is unrelated, i will go ahead to merge this."
    ],
    "commit_messages": [
      "Flaky timer test fix (#2469)\n\n* fix(time_source): Fixed possible race condition\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@nospam.org>\r\n\r\n* fix(test_executors_time_cancel_behaviour): Fixed multiple race conditions\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@nospam.org>\r\n\r\n---------\r\n\r\nSigned-off-by: Janosch Machowinski <j.machowinski@nospam.org>\r\nCo-authored-by: Janosch Machowinski <j.machowinski@nospam.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173c918912b45d36a707a",
    "number": 2468,
    "body": "fix flakiness in TestTimersManager check_one_timer_cancel_doesnt_affect_other_timers\r\n\r\nthe previous version of the test was relying on the assumption that a timer with 1ms period gets called at least 6 times if the main thread waits 15ms. this is true most of the times, but it's not guaranteed, especially when running the test on windows CI servers. the new version of the test makes no assumptions on how much time it takes for the timers manager to invoke the timers, but rather focuses on ensuring that they are called the right amount of times, which is what's important for the purpose of the test\r\n\r\nwe need to ensure that if a timers manager has N timers and 1 gets cancelled, all the other ones keep getting invoked.",
    "head_branch": "asoragna/fix-timers-manager-cancel-test",
    "is_a_fork": false,
    "comments": [
      "CI\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20642)](http://ci.ros2.org/job/ci_linux/20642/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14978)](http://ci.ros2.org/job/ci_linux-aarch64/14978/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21351)](http://ci.ros2.org/job/ci_windows/21351/)",
      "FYI @mwcondino (as the author of the test)\r\nCan you please take a look and validate my changes",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20643)](http://ci.ros2.org/job/ci_linux/20643/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14979)](http://ci.ros2.org/job/ci_linux-aarch64/14979/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21352)](http://ci.ros2.org/job/ci_windows/21352/)",
      "> FYI @mwcondino (as the author of the test) Can you please take a look and validate my changes\r\n\r\nChanges look good, thank you for the improvements @alsora!"
    ],
    "commit_messages": [
      "fix flakiness in TestTimersManager unit-test (#2468)\n\nthe previous version of the test was relying on the assumption that a timer with 1ms period gets called at least 6 times if the main thread waits 15ms. this is true most of the times, but it's not guaranteed, especially when running the test on windows CI servers. the new version of the test makes no assumptions on how much time it takes for the timers manager to invoke the timers, but rather focuses on ensuring that they are called the right amount of times, which is what's important for the purpose of the test\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ca18912b45d36a707b",
    "number": 2467,
    "body": "Splitting this off from https://github.com/ros2/rclcpp/pull/2420 and trying to make the deprecation cycle work.",
    "head_branch": "wjwwood/fix_waitable_api_signatures",
    "is_a_fork": false,
    "comments": [
      "Commit 7d9b19ba43bd36de82819cec1d10d5e07c3bfafa is the main change to the API, and the other commits are fixing the fallout.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20654)](http://ci.ros2.org/job/ci_linux/20654/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14983)](http://ci.ros2.org/job/ci_linux-aarch64/14983/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21356)](http://ci.ros2.org/job/ci_windows/21356/)",
      "New test failure on this one: \r\n\r\nhttps://ci.ros2.org/job/ci_linux/20654/testReport/junit/ros2action.ros2action.test/test_cli/test_cli/",
      "Need to rebase this after https://github.com/ros2/rclcpp/pull/2142 was merged.",
      "New CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20660)](http://ci.ros2.org/job/ci_linux/20660/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14991)](http://ci.ros2.org/job/ci_linux-aarch64/14991/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21363)](http://ci.ros2.org/job/ci_windows/21363/)"
    ],
    "commit_messages": [
      "update rclcpp::Waitable API to use references and const (#2467)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173cb18912b45d36a707c",
    "number": 2466,
    "body": "These are the API changes needed in order to implement an external Multihtreaded Events Executor\r\n\r\n@mjcarroll @alsora @fujitatomoya ",
    "head_branch": "executor_features",
    "is_a_fork": true,
    "comments": [
      "Writing tests was a good suggestion, I screwed up the clock interface, it's not thread safe, I will redesign it...",
      "Redesigned the clock sleep interruption. Can the reviewers have a good lock at the mutex/lock/wait construct, its hard to get it right without data races....",
      "I'll need to add a way to terminate the clock and all sleeps as soon as the shutdown call was done.",
      "rebased to rolling",
      "Waiting for this to get in before running CI: https://github.com/ros2/rosidl_typesupport_fastrtps/pull/117\r\n",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20807)](http://ci.ros2.org/job/ci_linux/20807/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15111)](http://ci.ros2.org/job/ci_linux-aarch64/15111/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21490)](http://ci.ros2.org/job/ci_windows/21490/)",
      "rebased and (hopefully) fixed windows compile error",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20813)](http://ci.ros2.org/job/ci_linux/20813/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15117)](http://ci.ros2.org/job/ci_linux-aarch64/15117/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21497)](http://ci.ros2.org/job/ci_windows/21497/)",
      "Dropped the test refactoring. ",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20834)](http://ci.ros2.org/job/ci_linux/20834/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15138)](http://ci.ros2.org/job/ci_linux-aarch64/15138/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21521)](http://ci.ros2.org/job/ci_windows/21521/)",
      "@jmachowinski this needs a merge from `rolling` because of the added API",
      "rebased. test_executors_timer_cancel_behavior is flaky on my machine. I hope this gets fixed by #2500 ",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20835)](http://ci.ros2.org/job/ci_linux/20835/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15139)](http://ci.ros2.org/job/ci_linux-aarch64/15139/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21522)](http://ci.ros2.org/job/ci_windows/21522/)",
      "Looks like a failure in test_actions cli, which is unrelated to these changes, is this test known-flaky? https://ci.ros2.org/job/ci_linux/20835/testReport/junit/ros2action.ros2action.test/test_cli/test_cli/",
      "I merged https://github.com/ros2/rclcpp/pull/2500, so we can see if that addressed what you hoped it did @jmachowinski. Also, I have some questions about the changes to `executor.hpp` and `executors.hpp`, which I'd like to understand before giving the üëç.",
      "I'm highly suspect of the changes to the Executor API to make it so you don't need to inherit from `rclcpp::Executor`. I don't think we should go this route until it's explained better why that's necessary.",
      "rebased to rolling",
      "I reworked this PR. Now everything in rclcpp::Executor is made virtual. \r\n\r\nI changed two function, that were template function, without any reason to normal functions.\r\n\r\nI reworked the template function spin_until_future_complete, so that it can be fully overwritten by a subclass.\r\n\r\nI added an constructor, that will not touch anything in the system.\r\n\r\n@wjwwood can you do a review ?",
      "> Pretty close, had a few small style things and a suggestion to scope down the changes.\r\n> \r\n> Also, I think there might still be some style issues? please run `ament_uncrustify path/to/rclcpp --reformat` if you haven't already (saw some `if(` that should be `if (`).\r\n\r\nI did that, uncrustify doesn't fix this (?). BTW, why are we not using clang-format ? In my experience it works way better then the uncrustify / cpplint construct.",
      "> I did that, uncrustify doesn't fix this (?).\r\n\r\nI did this and if found the issues (and auto-formatted the fix when I used `--reformat`):\r\n\r\n```\r\nwilliam@markook-ubuntu-2204:~/ros2_ws/src/ros2/rclcpp (git:wjwwood/executor_features:163f727)\r\n$ ament_uncrustify .\r\n...\r\nCode style divergence in file 'rclcpp/test/rclcpp/test_clock.cpp':\r\n\r\n--- rclcpp/test/rclcpp/test_clock.cpp\r\n+++ rclcpp/test/rclcpp/test_clock.cpp.uncrustify\r\n@@ -116,4 +116,4 @@\r\n-        Clocks,\r\n-        TestClockWakeup,\r\n-        ::testing::Values(\r\n-            RCL_SYSTEM_TIME, RCL_ROS_TIME, RCL_STEADY_TIME\r\n+  Clocks,\r\n+  TestClockWakeup,\r\n+  ::testing::Values(\r\n+    RCL_SYSTEM_TIME, RCL_ROS_TIME, RCL_STEADY_TIME\r\n@@ -185,2 +185,3 @@\r\n-  for(size_t nr = 0; nr < thread_finished.size(); nr++) {\r\n-    threads.push_back(std::thread(\r\n+  for (size_t nr = 0; nr < thread_finished.size(); nr++) {\r\n+    threads.push_back(\r\n+      std::thread(\r\n@@ -189 +190 @@\r\n-        // make sure the thread starts sleeping late\r\n+          // make sure the thread starts sleeping late\r\n@@ -192 +193 @@\r\n-      }));\r\n+        }));\r\n@@ -198 +199 @@\r\n-  for(const bool & finished : thread_finished) {\r\n+  for (const bool & finished : thread_finished) {\r\n@@ -209,2 +210,2 @@\r\n-    for(const bool finished : thread_finished) {\r\n-      if(!finished) {\r\n+    for (const bool finished : thread_finished) {\r\n+      if (!finished) {\r\n@@ -219 +220 @@\r\n-  for(const bool finished : thread_finished) {\r\n+  for (const bool finished : thread_finished) {\r\n@@ -223 +224 @@\r\n-  for(auto & thread : threads) {\r\n+  for (auto & thread : threads) {\r\n...\r\n```\r\n\r\nAre you running it correctly?",
      "> BTW, why are we not using clang-format ? In my experience it works way better then the uncrustify / cpplint construct.\r\n\r\nWe've had many long, detailed conversations about this, some as recently as a month ago.  While I won't rehash all of the arguments, the short of it is:\r\n\r\n1.  It is not possible to configure `clang-format` to meet our preferred style.\r\n2.  Even if we were to change our preferred style to meet what `clang-format` wants, we have literally hundreds of packages in the core that would need to be changed.  And they would all have to be changed at once.  And it would mean that we could no longer cleanly backport from Rolling to stable branches.\r\n\r\nWe have many real problems in the code, this doesn't seem to be one of them (in my opinion).",
      "Closing in favor of https://github.com/ros2/rclcpp/pull/2506",
      "> better then the uncrustify / cpplint construct.\r\n\r\nAlso, for what it's worth, I think `clang-tidy` might overlap a bit with `cpplint`, but it wouldn't completely replace it. most projects that use `cpplint` also use `clang-tidy` or something similar along side it.",
      "> \r\n> Are you running it correctly?\r\n\r\nHere is a paste of my system, it is clearly not working, but why ?\r\n\r\nhttps://pastebin.com/gGbPLdaA",
      "> Here is a paste of my system, it is clearly not working, but why ?\r\n\r\nOh, you know, we've recently updated to a new version of uncrustify (0.78.1), that does things slightly differently than the old way.  What version of uncrustify are you using?",
      "> Oh, you know, we've recently updated to a new version of uncrustify (0.78.1), that does things slightly differently than the old way. What version of uncrustify are you using?\r\n\r\nRecent installation, uncrustify_vendor installs 0.78.1f\r\n```\r\n$ uncrustify --version\r\nUncrustify-0.78.1_f\r\n``` \r\n\r\nI even patched ament_uncrustify to check if it picked up the right version, and this one also reports Uncrustify-0.78.1_f\r\n\r\nI have an Uncrustify-0.72.0_f installed by apt, but even if I uninstall this version, my system still reports no style divergence."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173cc18912b45d36a707d",
    "number": 2465,
    "body": "This PR partially fixes https://github.com/ros2/rclcpp/issues/2462\r\n\r\nThe EventsExecutor and the StaticSingleThreadedExecutor were failing a unit-test.\r\nThis PR fixes the test for the EventsExecutor.\r\n\r\nThe waitables were not triggered, so the events executor was not executing them.\r\n\r\nThis poses the question... Why do the other executors \"execute\" a waitable that was not triggered?\r\nEDIT: the other executors worked because there was a bug in the `is_ready` method of the `TestWaitable` class. This was returning \"true\" regardless of whether the waitable was triggered.\r\nFixed it as a separate commit [0e6c78d](https://github.com/ros2/rclcpp/pull/2465/commits/0e6c78dba83e817d26d2cd8649d46a2513b5cc92)\r\n\r\nFYI @wjwwood ",
    "head_branch": "asoragna/spin-some-max-duration-fix",
    "is_a_fork": false,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20583)](http://ci.ros2.org/job/ci_linux/20583/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14944)](http://ci.ros2.org/job/ci_linux-aarch64/14944/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21307)](http://ci.ros2.org/job/ci_windows/21307/)",
      "There's a few test failures, but they are all unrelated.\r\n - uncrustify errors in linux x86_64 and arm64\r\n - a timers manager error in Windows\r\n\r\n\r\nCan we still merge this PR?\r\nI remember reading about some Timers Manager Windows failures in another ticket, but I can't remember where, is this the same one? `rclcpp.TestTimersManager.check_one_timer_cancel_doesnt_affect_other_timers`\r\n\r\n```\r\nC:\\ci\\ws\\src\\ros2\\rclcpp\\rclcpp\\test\\rclcpp\\test_timers_manager.cpp:405\r\nExpected: (t1_runs + 5) < (t2_runs), actual: 10 vs 11\r\n```\r\n",
      "> * uncrustify errors in linux x86_64 and arm64\r\n\r\nYeah, these are unrelated, but should be fixed now.\r\n\r\n> * a timers manager error in Windows\r\n\r\nYes, this one has been plaguing us for a while.  If you have any time to look into it, it would be most appreciated.",
      "Thanks @alsora, sorry I put in the broken test (missed the triggering of the waitables), indeed the `TestWaitable` was broken by design (for this test).\r\n\r\nI'll re-evaluate the tests w.r.t. https://github.com/ros2/rclcpp/pull/2142 based on that.",
      "@clalancette I opened a PR with a proposed fix for the timers manager unit-test.\r\nhttps://github.com/ros2/rclcpp/pull/2468\r\nThe test expectation was relying on the test being executed fast enough, which is often not the case on Windows.\r\n\r\n"
    ],
    "commit_messages": [
      "fix spin_some_max_duration unit-test for events-executor (#2465)\n\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173cd18912b45d36a707e",
    "number": 2464,
    "body": "part of https://github.com/ros2/ros2/issues/1462",
    "head_branch": "fujitatomoya/ros2-issue-1462",
    "is_a_fork": false,
    "comments": [
      "this replaces https://github.com/ros2/rclcpp/pull/2463",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20590)](http://ci.ros2.org/job/ci_linux/20590/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14951)](http://ci.ros2.org/job/ci_linux-aarch64/14951/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21314)](http://ci.ros2.org/job/ci_windows/21314/)",
      "@Mergifyio backport humble iron",
      "> backport humble iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2518 Do not generate the exception when action service response timeout. (backport #2464)](https://github.com/ros2/rclcpp/pull/2518) has been created for branch `humble`\n* [#2519 Do not generate the exception when action service response timeout. (backport #2464)](https://github.com/ros2/rclcpp/pull/2519) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Do not generate the exception when action service response timeout. (#2464)\n\n* Do not generate the exception when action service response timeout.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* address review comment.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ce18912b45d36a707f",
    "number": 2463,
    "body": "Hello @fujitatomoya,\r\n\r\nFollowing your reply in https://github.com/ros2/rmw_fastrtps/issues/751 and reading the discussions in https://github.com/ros2/rclcpp/pull/2215 I took the initiative to take a look at the problem at hand and see if I could fix it. Now just a few notes:\r\n\r\n- Before anything, I want you to know that this was my first time diving deep into the ROS2 source code and trying to change stuff. I also have limited time available to work on it. So I ask apologies in advance if what I am doing here is wrong.\r\n- Looking at https://github.com/ros2/rclcpp/pull/2215#issuecomment-1643763666 I assume that the same solution should be applied for all responses i.e., goal response, cancel response and result response. As the first commit I only changed the goal response to make sure it is the right way to do it. Given your confirmation I will extend this PR to implement the same for other responses as well.\r\n- This would fix the problem for RCLCPP but I believe the same fix should also be applied to rclpy (https://github.com/ros2/rclpy/blob/rolling/rclpy/src/rclpy/action_server.cpp#L138). I also did something similar for that as the following:\r\n```\r\n  if (RCL_RET_TIMEOUT == ret) { \\\r\n    int stack_level = 1; \\\r\n    PyErr_WarnFormat( \\\r\n      PyExc_RuntimeWarning, stack_level, \"Failed to send \" #Type \" response (timeout): %s\", \\\r\n      rcl_get_error_string().str); \\\r\n    rcl_reset_error(); \\\r\n  } else if (RCL_RET_OK != ret) { \\\r\n    throw rclpy::RCLError(\"Failed to send \" #Type \" response\"); \\\r\n  }\r\n``` \r\nOf course this needs its own PR in the approriate rclpy repo but since they are related I want to first make sure I am on the right path hence bringing it up here.\r\n\r\n- Something is still unclear to me. With such changes, we avoid raising exceptions on responses. But I am wondering if that would fix my original problem (https://github.com/ros2/rmw_fastrtps/issues/751). If there is a timeout on a goal response, can my action simply continuing the action execution? I mean, would it be able to send the result at a later stage to my client? Or is it like once the client is lost, it would be lost forever (I know for sure that my nodes are running fine in any case)? Unfortuantely to properly test this in my Bitbucket pipelines I need to spend considerable time to adjust my dockers and I did not have enough resources available for that. ",
    "head_branch": "no-exception-on-action-response-timeout",
    "is_a_fork": true,
    "comments": [
      "sorry i did not allocate time for the more details need to be fixed. this is part of it, but i think we need to address more entities for action services.\r\n\r\nbesides, https://github.com/ros2/rmw_fastrtps/issues/751 originally comes from rclpy, so we need to the same fix for `rclpy` and `rclcpp`.\r\n\r\ni think i can come up with PRs in this weekend, thanks for pushing this forward.",
      "@fujitatomoya given your following merged PRs:\r\n\r\n- https://github.com/ros2/rcl/pull/1138\r\n- https://github.com/ros2/rclcpp/pull/2464\r\n- https://github.com/ros2/rclpy/pull/1258\r\n\r\nI'm going to close this one. Thanks a lot for taking care of it. Also thanks to @alsora for the reviews."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173cf18912b45d36a7080",
    "number": 2460,
    "body": "After working on https://github.com/ros2/rclcpp/pull/2142 I came to realize that the parameterized `spinSome` (always should have been `spin_some` to match our style and the name of the method being tested) tests were testing some false assumptions and in general were very fragile.\r\n\r\nI reworked the nominal test to check that it does not block when there's no work, that it works with one ready item, and that it also executes multiple ready items when they are available.\r\n\r\n```\r\n$ ./build/rclcpp/test/rclcpp/test_executors --gtest_filter=*spin_some\r\nRunning main() from /home/william/ros2_ws/install/gtest_vendor/src/gtest_vendor/src/gtest_main.cc\r\nNote: Google Test filter = *spin_some\r\n[==========] Running 4 tests from 4 test suites.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from TestExecutors/SingleThreadedExecutor, where TypeParam = rclcpp::executors::SingleThreadedExecutor\r\n[ RUN      ] TestExecutors/SingleThreadedExecutor.spin_some\r\n[       OK ] TestExecutors/SingleThreadedExecutor.spin_some (53 ms)\r\n[----------] 1 test from TestExecutors/SingleThreadedExecutor (53 ms total)\r\n\r\n[----------] 1 test from TestExecutors/MultiThreadedExecutor, where TypeParam = rclcpp::executors::MultiThreadedExecutor\r\n[ RUN      ] TestExecutors/MultiThreadedExecutor.spin_some\r\n[       OK ] TestExecutors/MultiThreadedExecutor.spin_some (19 ms)\r\n[----------] 1 test from TestExecutors/MultiThreadedExecutor (19 ms total)\r\n\r\n[----------] 1 test from TestExecutors/StaticSingleThreadedExecutor, where TypeParam = rclcpp::executors::StaticSingleThreadedExecutor\r\n[ RUN      ] TestExecutors/StaticSingleThreadedExecutor.spin_some\r\n[       OK ] TestExecutors/StaticSingleThreadedExecutor.spin_some (19 ms)\r\n[----------] 1 test from TestExecutors/StaticSingleThreadedExecutor (19 ms total)\r\n\r\n[----------] 1 test from TestExecutors/EventsExecutor, where TypeParam = rclcpp::experimental::executors::EventsExecutor\r\n[ RUN      ] TestExecutors/EventsExecutor.spin_some\r\n[       OK ] TestExecutors/EventsExecutor.spin_some (19 ms)\r\n[----------] 1 test from TestExecutors/EventsExecutor (19 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 4 tests from 4 test suites ran. (110 ms total)\r\n[  PASSED  ] 4 tests.\r\n```\r\n\r\nI also added a test which checks the `max_duration` option is being respected, and I found that the `StaticSingleThreadedExecutor` and the `EventsExecutor` do not implement this correctly. I think at least the `StaticSingleThreadedExecutor` should be fixed in https://github.com/ros2/rclcpp/pull/2142, but I've disabled that new test for both of them for now, with a TODO. I will also open issues about it.\r\n\r\n```\r\n$ ./build/rclcpp/test/rclcpp/test_executors --gtest_filter=*spin_some_max_duration\r\nRunning main() from /home/william/ros2_ws/install/gtest_vendor/src/gtest_vendor/src/gtest_main.cc\r\nNote: Google Test filter = *spin_some_max_duration\r\n[==========] Running 4 tests from 4 test suites.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from TestExecutors/SingleThreadedExecutor, where TypeParam = rclcpp::executors::SingleThreadedExecutor\r\n[ RUN      ] TestExecutors/SingleThreadedExecutor.spin_some_max_duration\r\n[       OK ] TestExecutors/SingleThreadedExecutor.spin_some_max_duration (2065 ms)\r\n[----------] 1 test from TestExecutors/SingleThreadedExecutor (2066 ms total)\r\n\r\n[----------] 1 test from TestExecutors/MultiThreadedExecutor, where TypeParam = rclcpp::executors::MultiThreadedExecutor\r\n[ RUN      ] TestExecutors/MultiThreadedExecutor.spin_some_max_duration\r\n[       OK ] TestExecutors/MultiThreadedExecutor.spin_some_max_duration (2038 ms)\r\n[----------] 1 test from TestExecutors/MultiThreadedExecutor (2038 ms total)\r\n\r\n[----------] 1 test from TestExecutors/StaticSingleThreadedExecutor, where TypeParam = rclcpp::executors::StaticSingleThreadedExecutor\r\n[ RUN      ] TestExecutors/StaticSingleThreadedExecutor.spin_some_max_duration\r\n/home/william/ros2_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:616: Failure\r\nExpected: (to_nanoseconds_helper(spin_some_run_time)) < (to_nanoseconds_helper(waitable_callback_duration * 2)), actual: 4004709489 vs 4000000000\r\nspin_some() took longer than expected to execute by a significant margin, but this could be a false positive on a very slow computer\r\n/home/william/ros2_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:624: Failure\r\nExpected equality of these values:\r\n  number_of_waitables_executed\r\n    Which is: 2\r\n  1u\r\n    Which is: 1\r\nexpected exactly one of the two waitables to be executed, but my_waitable1->get_count(): 1 and my_waitable2->get_count(): 1\r\n[  FAILED  ] TestExecutors/StaticSingleThreadedExecutor.spin_some_max_duration, where TypeParam = rclcpp::executors::StaticSingleThreadedExecutor (4042 ms)\r\n[----------] 1 test from TestExecutors/StaticSingleThreadedExecutor (4042 ms total)\r\n\r\n[----------] 1 test from TestExecutors/EventsExecutor, where TypeParam = rclcpp::experimental::executors::EventsExecutor\r\n[ RUN      ] TestExecutors/EventsExecutor.spin_some_max_duration\r\n/home/william/ros2_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:610: Failure\r\nExpected: (to_nanoseconds_helper(spin_some_run_time)) > (to_nanoseconds_helper(waitable_callback_duration / 2)), actual: 55376 vs 1000000000\r\nspin_some() took less than half the expected time to execute a single waitable, which implies it did not actually execute one when it was expected to\r\n/home/william/ros2_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:624: Failure\r\nExpected equality of these values:\r\n  number_of_waitables_executed\r\n    Which is: 0\r\n  1u\r\n    Which is: 1\r\nexpected exactly one of the two waitables to be executed, but my_waitable1->get_count(): 0 and my_waitable2->get_count(): 0\r\n[  FAILED  ] TestExecutors/EventsExecutor.spin_some_max_duration, where TypeParam = rclcpp::experimental::executors::EventsExecutor (22 ms)\r\n[----------] 1 test from TestExecutors/EventsExecutor (22 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 4 tests from 4 test suites ran. (8169 ms total)\r\n[  PASSED  ] 2 tests.\r\n[  FAILED  ] 2 tests, listed below:\r\n[  FAILED  ] TestExecutors/StaticSingleThreadedExecutor.spin_some_max_duration, where TypeParam = rclcpp::executors::StaticSingleThreadedExecutor\r\n[  FAILED  ] TestExecutors/EventsExecutor.spin_some_max_duration, where TypeParam = rclcpp::experimental::executors::EventsExecutor\r\n\r\n 2 FAILED TESTS\r\n```\r\n\r\nNote that I will also reduce the `max_duration` being tested, but in the above output I had increased it to 1s to see if it's a data race issue, but it doesn't appear to be the case.\r\n\r\nI also took the opportunity to clarify the docstring for `spin_some` even though the text that was there previously already agreed with these tests, but I just made it extra clear what the expectation was (so clarified, but not a change in expected behavior).",
    "head_branch": "wjwwood/improve_spin_some_tests_for_executors",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20522)](http://ci.ros2.org/job/ci_linux/20522/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14921)](http://ci.ros2.org/job/ci_linux-aarch64/14921/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21272)](http://ci.ros2.org/job/ci_windows/21272/)",
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20528)](http://ci.ros2.org/job/ci_linux/20528/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14926)](http://ci.ros2.org/job/ci_linux-aarch64/14926/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21283)](http://ci.ros2.org/job/ci_windows/21283/)"
    ],
    "commit_messages": [
      "refactor and improve the parameterized spin_some tests for executors (#2460)\n\n* refactor and improve the spin_some parameterized tests for executors\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* disable spin_some_max_duration for the StaticSingleThreadedExecutor and EventsExecutor\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup and clarify the docstring for Executor::spin_some()\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* review comments\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n---------\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173d018912b45d36a7081",
    "number": 2459,
    "body": "Backport of #2116 to humble.\r\n\r\nWithout this, I would need to add `// NOLINT(clang-analyzer-cplusplus.Move)` to every my `publish()` call in humble.",
    "head_branch": "backport-2116-to-humble",
    "is_a_fork": true,
    "comments": [
      "@alsora Can we get another set of eyes on this one, since it's in the intraprocess manager?",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20656)](http://ci.ros2.org/job/ci_linux/20656/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14985)](http://ci.ros2.org/job/ci_linux-aarch64/14985/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21358)](http://ci.ros2.org/job/ci_windows/21358/)"
    ],
    "commit_messages": [
      "Fix clang warning: bugprone-use-after-move (#2116) (#2459)\n\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\nSigned-off-by: Tamaki Nishino <otamachan@gmail.com>\r\nCo-authored-by: mauropasse <mauropasse@hotmail.com>\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d118912b45d36a7082",
    "number": 2458,
    "body": "replacement for https://github.com/ros2/rclcpp/pull/2453\r\n\r\nthis depends on https://github.com/ros2/rclcpp/pull/2456",
    "head_branch": "fujitatomoya/issue-2452-2",
    "is_a_fork": false,
    "comments": [
      "CC: @alsora @Crola1702 ",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20516)](http://ci.ros2.org/job/ci_linux/20516/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14916)](http://ci.ros2.org/job/ci_linux-aarch64/14916/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21263)](http://ci.ros2.org/job/ci_windows/21263/)",
      "yaml_cpp_vendor is failing during clone, i am not sure what the cause this is. retry CI.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20520)](http://ci.ros2.org/job/ci_linux/20520/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21270)](http://ci.ros2.org/job/ci_windows/21270/)",
      "https://ci.ros2.org/job/ci_windows/21270/testReport/ is unrelated."
    ],
    "commit_messages": [
      "enable simulation clock for timer canceling test. (#2458)\n\n* enable simulation clock for timer canceling test.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* move MainExecutorTypes to test_executors_timer_cancel_behavior.cpp.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d218912b45d36a7083",
    "number": 2456,
    "body": "‚Ä¶453)\"\r\n\r\nThis reverts commit 1c350d0d7fb9c7158e0a39057112486ddbd38e9a.",
    "head_branch": "fujitatomoya/revert-pull-2453",
    "is_a_fork": false,
    "comments": [
      "please have a look at detailed explanation for https://github.com/ros2/rclcpp/pull/2453#issuecomment-2008082400",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20511)](http://ci.ros2.org/job/ci_linux/20511/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14910)](http://ci.ros2.org/job/ci_linux-aarch64/14910/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21258)](http://ci.ros2.org/job/ci_windows/21258/)",
      "CC: @alsora @Crola1702 ",
      "@clalancette thanks! i will go ahead to merge this revert."
    ],
    "commit_messages": [
      "Revert \"relax the test simulation rate for timer canceling tests. (#2453)\" (#2456)\n\nThis reverts commit 1c350d0d7fb9c7158e0a39057112486ddbd38e9a.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d418912b45d36a7084",
    "number": 2454,
    "body": "This is a tiny PR that adds a class docstring for the `MultiThreadedExecutor`. It includes a note about which methods support multithreaded execution.\r\n\r\nPlease let me know if this is not the right way to suggest additions to the documentation.\r\nAlso, please double check if the note is actually true or can be improved.\r\n\r\n**My context:**\r\nI have a unit test with two nodes that communicate with each other and I use the `MultiThreadedExecutor` to spin both of these nodes. One node publishes a TF, the other one regularly waits for that TF.\r\n\r\nIn the individual test cases, I have been using `multi_threaded_executor_.spin_until_future_complete(some_future);`. This leads to a flaky test that sometimes succeeds and sometimes fails. The reason for that seems to be that the `MultiThreadedExecutor` is only using a single thread when `spin_until_future_complete` is used. The test would fail (timeout) if the work item from node that waits for the TF gets executed first. Waiting for the TF blocks the main thread until timeout, while the other node that should supply that TF will not get executed.\r\n\r\nAfter changing my test setup to use `multi_threaded_executor_.spin();` in a separate thread and just do `some_future.wait_for(...)` in the test cases, everything is working fine.\r\n\r\nSo, after finding all that out, I thought I could maybe help others by adding a note somewhere. Just skimming through the [API docs](https://docs.ros2.org/latest/api/rclcpp/classrclcpp_1_1executors_1_1MultiThreadedExecutor.html), that behavior was not clear to me.\r\n\r\nThanks for having a look!",
    "head_branch": "docs/multithreaded-executor-clarification",
    "is_a_fork": true,
    "comments": [
      "@Cakem1x btw, can you also address DCO error?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d518912b45d36a7085",
    "number": 2453,
    "body": "address https://github.com/ros2/rclcpp/issues/2452",
    "head_branch": "fujitatomoya/issue-2452",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20492)](http://ci.ros2.org/job/ci_linux/20492/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14894)](http://ci.ros2.org/job/ci_linux-aarch64/14894/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21241)](http://ci.ros2.org/job/ci_windows/21241/)",
      "Just running a repeated build to see if it reduces the flakiness: [![Build Status](https://ci.ros2.org/job/ci_windows/21246/badge/icon)](https://ci.ros2.org/job/ci_windows/21246/)",
      "Yeah, it seems right! Thanks for pushing this!",
      "Hold on. Just noticed that the CI builds are using *sequential-executor*, these kind of tests are mostly failing with parallel executor, so the issue is not completely fixed:\r\n* [nightly_win_deb-3037](https://ci.ros2.org/view/nightly/job/nightly_win_deb/3037/)\r\n* [nightly_win_rep-3298](https://ci.ros2.org/view/nightly/job/nightly_win_rep/3298/)",
      "@Crola1702 really appreciate for checking the CI.\r\n\r\n@clalancette @alsora \r\n\r\ni believe i misunderstood the current test behavior.\r\n\r\ni was expecting that\r\n\r\nhttps://github.com/ros2/rclcpp/blob/1c350d0d7fb9c7158e0a39057112486ddbd38e9a/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp#L332\r\n\r\nuses simulation clock to mitigate the racy system clock condition especially for windows to avoid ***the problem*** such as https://github.com/ros2/rclcpp/issues/2452\r\n\r\nbut it is not implemented as designed, since it uses system clock for the entire test. (that said nobody uses simulation clock.)\r\n\r\nhttps://github.com/ros2/rclcpp/blob/1c350d0d7fb9c7158e0a39057112486ddbd38e9a/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp#L39-L48\r\n\r\nhttps://github.com/ros2/rclcpp/blob/1c350d0d7fb9c7158e0a39057112486ddbd38e9a/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp#L202-L203\r\n\r\nso actually what i have done here is making the situation worse, to give more time window for rasy timer condition?\r\n\r\ni guess we already have made the mistake in https://github.com/ros2/rclcpp/pull/2375, precisely this specific commit https://github.com/ros2/rclcpp/pull/2375/commits/666e9d5cce3dfd7ddee4f7bc0ffd02b30b9ebfbb?\r\n\r\ni would want to do the following after the confirmation of above my understanding.\r\n\r\n- revert https://github.com/ros2/rclcpp/pull/2453 (i do not think we need this change.)\r\n- change `use_sim_time` into `true`.",
      "@alsora @mauropasse \r\n\r\n> change use_sim_time into true.\r\n\r\ndoes `TimerManager` support simulation time?\r\n\r\nonce we enable sim time true,\r\n\r\nhttps://github.com/ros2/rclcpp/blob/1c350d0d7fb9c7158e0a39057112486ddbd38e9a/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp#L202-L203\r\n\r\nonly `EventExecutor` is failing,\r\n\r\n```bash\r\n    [----------] 6 tests from TestTimerCancelBehavior/EventsExecutor, where TypeParam = rclcpp::experimental::executors::EventsExecutor\r\n    [ RUN      ] TestTimerCancelBehavior/EventsExecutor.testTimer1CancelledWithExecutorSpin\r\n    /root/ros2_ws/colcon_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp:264: Failure\r\n    Expected: (t1_runs) != (t2_runs), actual: 1 vs 1\r\n    \r\n    /root/ros2_ws/colcon_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp:266: Failure\r\n    Expected: (t1_runs + 50) < (t2_runs), actual: 51 vs 1\r\n    \r\n    [  FAILED  ] TestTimerCancelBehavior/EventsExecutor.testTimer1CancelledWithExecutorSpin, where TypeParam = rclcpp::experimental::executors::EventsExecutor (870 ms)\r\n    [ RUN      ] TestTimerCancelBehavior/EventsExecutor.testTimer2CancelledWithExecutorSpin\r\n    /root/ros2_ws/colcon_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp:282: Failure\r\n    Expected: (t1_runs) != (t2_runs), actual: 1 vs 1\r\n    \r\n    /root/ros2_ws/colcon_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp:284: Failure\r\n    Expected: (t2_runs + 50) < (t1_runs), actual: 51 vs 1\r\n    \r\n    [  FAILED  ] TestTimerCancelBehavior/EventsExecutor.testTimer2CancelledWithExecutorSpin, where TypeParam = rclcpp::experimental::executors::EventsExecutor (852 ms)\r\n    [ RUN      ] TestTimerCancelBehavior/EventsExecutor.testHeadTimerCancelThenResetBehavior\r\n    /root/ros2_ws/colcon_ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors_timer_cancel_behavior.cpp:311: Failure\r\n    Expected: (t1_runs_initial + 50) < (t2_runs_initial), actual: 51 vs 1\r\n...    \r\n```",
      "@fujitatomoya good catch; the timers manager in rclcpp doesn't support ROS sim_time as it uses the std library wait primitives.\r\n\r\n```\r\ntimers_cv_.wait_for(lock, time_to_sleep.value(), [this]() {return timers_updated_;});\r\n```\r\n\r\nOur internal implementation of ROS overrides the stdlibrary with the ROS sim time, so we didn't catch the problem.\r\n\r\nI would suggest for now to disable the events executor from this test while we look for a solution.\r\n\r\nP.S. does ROS provide a \"sim-time aware\" condition variable?",
      "> P.S. does ROS provide a \"sim-time aware\" condition variable?\r\n\r\nas far as i know, i do not think we have that... @clalancette @mjcarroll @wjwwood \r\n\r\ni will summarize\r\n- creating another issue for `TimerManager` simulation clock support\r\n- reverting https://github.com/ros2/rclcpp/pull/2453\r\n- quick patch and removing `EventExecutor` from the timer test with simulation clock later.\r\n\r\n@Crola1702 again, thanks for catching this, i will get back to you soon."
    ],
    "commit_messages": [
      "relax the test simulation rate for timer canceling tests. (#2453)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d618912b45d36a7086",
    "number": 2450,
    "body": "‚Ä¶known state.\r\n\r\naddress https://github.com/ros2/rclcpp/issues/997",
    "head_branch": "fujitatomoya/issue-997",
    "is_a_fork": false,
    "comments": [
      "@Barry-Xu-2018 @alsora could you take a look as 1st review?",
      "I agree with adding tests for destructing LifecycleNode under different states of lifecycle node. However, the code added in this PR indeed is difficult to check by tests.   \r\n\r\nMaybe we should register a callback function (register_on_shutdown) in the tests to confirm that the state transitions to 'Finalized' when LifecycleNode is destructed.",
      "@alsora requesting another review! thanks in advance.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20769)](http://ci.ros2.org/job/ci_linux/20769/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15067)](http://ci.ros2.org/job/ci_linux-aarch64/15067/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21449)](http://ci.ros2.org/job/ci_windows/21449/)",
      "Running Linux CI again.\r\nThe previous failure seems unrelated.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20772)](http://ci.ros2.org/job/ci_linux/20772/)",
      "@Mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2490 call shutdown in LifecycleNode dtor to avoid leaving the device in un‚Ä¶ (backport #2450)](https://github.com/ros2/rclcpp/pull/2490) has been created for branch `iron`\n* [#2491 call shutdown in LifecycleNode dtor to avoid leaving the device in un‚Ä¶ (backport #2450)](https://github.com/ros2/rclcpp/pull/2491) has been created for branch `humble`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "call shutdown in LifecycleNode dtor to avoid leaving the device in un‚Ä¶ (#2450)\n\n* call shutdown in LifecycleNode dtor to avoid leaving the device in unknown state.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add test to verify LifecycleNode::shutdown is called on destructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d718912b45d36a7087",
    "number": 2448,
    "body": "Hi, I'm  developed member of [CARET](https://github.com/tier4/caret) for real-time analysis using [ros2tracing](https://github.com/ros2/ros2_tracing). \r\n\r\nIn communication through GenericPublisher/Subscription, message tracking was not possible due to a lack of trace data.\r\nIn this PR, added trace points to the GenericPublisher and GenericSubscription.\r\n\r\n- GenericPublisher\r\nI have added the following trace points.\r\n   - tracepoint : [rclcpp_publish](https://github.com/ros2/ros2_tracing/blob/327e8dfbf0cab3ab3472be409b5d184e4c1eacb9/tracetools/src/tracetools.c#L130-L136)\r\n\r\n- GenericSubscription\r\n[There was a recent PR that made `create_generic_subscription` go through AnySubscriptionCallback](https://github.com/ros2/rclcpp/pull/1928). This change caused [`callback`](https://github.com/ros2/rclcpp/blob/b007204fd83828c11f80bf4712d237bfb2431f6e/rclcpp/include/rclcpp/generic_subscription.hpp#L87-L91) to be captured by the lambda, resulting in it being copied and `callback` address was changed. In this case, the addresses of trace points outputed  at initialization and runtime were different.  Therefore, I modified to ensure that they have the same `callback` address .\r\nAnd, I have added the following trace points.\r\n   - tracepoint : [rclcpp_subscription_init](https://github.com/ros2/ros2_tracing/blob/327e8dfbf0cab3ab3472be409b5d184e4c1eacb9/tracetools/src/tracetools.c#L191-L198)\r\n   - tracepoint : [rclcpp_subscription_callback_added](https://github.com/ros2/ros2_tracing/blob/327e8dfbf0cab3ab3472be409b5d184e4c1eacb9/tracetools/src/tracetools.c#L200-L207)\r\n\r\n\r\nAdditionally, with these changes, I submitted a PR to the following repository.\r\n- rcl\r\nhttps://github.com/ros2/rcl/pull/1136\r\n- rmw_cyclonedds\r\nhttps://github.com/ros2/rmw_cyclonedds/pull/485\r\n- rmw_fastrtps\r\nhttps://github.com/ros2/rmw_fastrtps/pull/748\r\n- rmw_connextdds\r\nhttps://github.com/ros2/rmw_connextdds/pull/145\r\n- ros2_tracing\r\nhttps://github.com/ros2/ros2_tracing/pull/97",
    "head_branch": "output_tracepoint",
    "is_a_fork": true,
    "comments": [
      "@h-suzuki-isp thanks for the PRs. should we also add `TRACETOOLS_TRACEPOINT` to https://github.com/ros2/rmw_connextdds accordingly?",
      "@fujitatomoya \r\nThank you for your review.  I'm not fluent in English, so I apologize if my message wasn't clear.\r\n>thanks for the PRs. should we also add TRACETOOLS_TRACEPOINT to https://github.com/ros2/rmw_connextdds accordingly?\r\n\r\nIf Connext DDS is the DDS officially supported by ROS 2, I believe it's appropriate to add tracepoints to rmw_connextdds as well. Therefore, I've created a pull request for rmw_connextdds as follows. \r\nhttps://github.com/ros2/rmw_connextdds/pull/145\r\nSince rmw_publish already seemed to be added, I only added rmw_take.\r\nI haven't delved into rmw_connextdds in detail. so I'm not confident about the implementation, but it would probably be like this.\r\n\r\n\r\n\r\n",
      "> If Connext DDS is the DDS officially supported by ROS 2\r\n\r\nyes it is, https://github.com/ros2/ros2/blob/30e9231f04d6e971de4d9bcc3cc98733f8a89d23/ros2.repos#L302-L305",
      "[![Build Status](https://build.ros2.org/job/Rpr__rclcpp__ubuntu_noble_amd64/6/badge/icon)](https://build.ros2.org/job/Rpr__rclcpp__ubuntu_noble_amd64/6/)",
      "Thank you for the PR, this is really useful! It would be really great if you could add some tests to [`test_tracetools`](https://github.com/ros2/ros2_tracing/tree/rolling/test_tracetools) to cover this new instrumentation:\r\n\r\n1. A test similar to [`test_subscription.py`](https://github.com/ros2/ros2_tracing/blob/f1c66eb2d4463e74d1e632816600f63721c20875/test_tracetools/test/test_subscription.py) but for a generic subscription\r\n    - This would for example help make sure that the callback address is valid and that the trace data is coherent\r\n2. A test similar to [`test_pub_sub.py`](https://github.com/ros2/ros2_tracing/blob/f1c66eb2d4463e74d1e632816600f63721c20875/test_tracetools/test/test_pub_sub.py) but for a generic publisher and a generic subscription\r\n    - This would for example help make sure that the `*_publish` and `*_take` instrumentation is valid for serialized messages (i.e., we can track messages from end to end)\r\n\r\nYou would probably need to create copies of the `test_ping` & `test_pong` nodes that use generic subscriptions/publishers instead of normal subscriptions/publishers.",
      "@christophebedard Thank you for your review and explanation about `test_tracetools`.\r\nBased on this, I have created following PR.\r\nhttps://github.com/ros2/ros2_tracing/pull/97\r\nHowever, the CI is still failing, so I am investigating the cause.",
      "@christophebedard \r\nI'd like you to review [this](https://github.com/ros2/ros2_tracing/pull/97). The reason CI is failing is because it's not using the fixed branch, but local tests are passing.",
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20657)](http://ci.ros2.org/job/ci_linux/20657/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14987)](http://ci.ros2.org/job/ci_linux-aarch64/14987/)\r\n    * (Note that this doesn't test `rmw_connextdds` because it's not available on aarch64)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21359)](http://ci.ros2.org/job/ci_windows/21359/)\r\n\r\nIt includes the PRs mentioned in the PR description above:\r\n\r\n- (this PR)\r\n- https://github.com/ros2/rcl/pull/1136\r\n- https://github.com/ros2/rmw_cyclonedds/pull/485\r\n- https://github.com/ros2/rmw_fastrtps/pull/748\r\n- https://github.com/ros2/rmw_connextdds/pull/145\r\n- https://github.com/ros2/ros2_tracing/pull/97",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/ros-2-jazzy-jalisco-released/37862/9\n"
    ],
    "commit_messages": [
      "Add tracepoint for generic publisher/subscriber (#2448)\n\nSigned-off-by: h-suzuki <h-suzuki@isp.co.jp>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d818912b45d36a7088",
    "number": 2443,
    "body": "Mostly by ensuring we aren't attempting to store\r\nlarge messages on the stack.  Also add in tests.\r\nI verified that before these changes, the tests failed, while after them they succeed.\r\n\r\nThis should fix #2417 ",
    "head_branch": "clalancette/fix-large-message-type-adaptation",
    "is_a_fork": false,
    "comments": [
      "lgtm",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20420)](http://ci.ros2.org/job/ci_linux/20420/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14822)](http://ci.ros2.org/job/ci_linux-aarch64/14822/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21163)](http://ci.ros2.org/job/ci_windows/21163/)",
      "All right, all of the failing tests here are also failing on the nightlies.  So I'm going to go ahead and merge this one in.",
      "@clalancette - I noticed that the change associated with this PR uses `std::make_unique` directly and does not make use of the user-provided `ros_message_type_allocator_` (e.g. `create_ros_message_unique_ptr()`). Was this intentional or an oversight?",
      "> @clalancette - I noticed that the change associated with this PR uses `std::make_unique` directly and does not make use of the user-provided `ros_message_type_allocator_` (e.g. `create_ros_message_unique_ptr()`). Was this intentional or an oversight?\r\n\r\nI had no idea that was a thing.",
      ">I had no idea that was a thing.\r\n\r\nThat's fair. I've been digging into how the custom allocator functionality works, so I suppose it's fresh on my mind. I'm not in a position to be able to create a PR for this, so would it be best for me to create an issue?",
      "> That's fair. I've been digging into how the custom allocator functionality works, so I suppose it's fresh on my mind. I'm not in a position to be able to create a PR for this, so would it be best for me to create an issue?\r\n\r\nYep, that would be great, thanks."
    ],
    "commit_messages": [
      "Fix TypeAdapted publishing with large messages. (#2443)\n\nMostly by ensuring we aren't attempting to store\r\nlarge messages on the stack.  Also add in tests.\r\nI verified that before these changes, the tests failed,\r\nwhile after them they succeed.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173d918912b45d36a7089",
    "number": 2441,
    "body": "This PR does:\r\n\r\n- Add unit tests to detect collisions on the `rclcpp_action::GoalUUID` hashing algorithm.\r\n- Update the hashing algorithm to use the [FNV-1a algorithm](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function).\r\n\r\nThe unit tests were failing right away with the previous hashing algorithm, which produced the same output for different `GoalUUID`s, quite often.",
    "head_branch": "mauro/rolling-modify-guuid-hashing-algorithm",
    "is_a_fork": true,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20395)](http://ci.ros2.org/job/ci_linux/20395/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14805)](http://ci.ros2.org/job/ci_linux-aarch64/14805/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21144)](http://ci.ros2.org/job/ci_windows/21144/)",
      "New CI run to verify whether test failures are caused by this PR\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20400)](http://ci.ros2.org/job/ci_linux/20400/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14810)](http://ci.ros2.org/job/ci_linux-aarch64/14810/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21149)](http://ci.ros2.org/job/ci_windows/21149/)",
      "We just made a change to CI to make it run things sequentially for the CI jobs, at least for now.  So this should come out a lot more green now:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20423)](http://ci.ros2.org/job/ci_linux/20423/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14825)](http://ci.ros2.org/job/ci_linux-aarch64/14825/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21166)](http://ci.ros2.org/job/ci_windows/21166/)"
    ],
    "commit_messages": [
      "Modify rclcpp_action::GoalUUID hashing algorithm (#2441)\n\n* Add unit tests for hashing rclcpp_action::GoalUUID's\r\n\r\n* Use the FNV-1a hash algorithm for Goal UUID\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173da18912b45d36a708a",
    "number": 2440,
    "body": "`EXECUTOR` was missing.",
    "head_branch": "fix-register-node-docs",
    "is_a_fork": true,
    "comments": [
      "Since this is just a documentation change, I'm going to go ahead and merge this with just the Rpr job passing.  Thanks!"
    ],
    "commit_messages": [
      "Add EXECUTOR docs (#2440)\n\nSigned-off-by: Ruddick Lawrence <679360+mrjogo@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173db18912b45d36a708b",
    "number": 2439,
    "body": "These should also work with uncrustify 0.72.",
    "head_branch": "clalancette/uncrustify-cleanups",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20389)](http://ci.ros2.org/job/ci_linux/20389/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14799)](http://ci.ros2.org/job/ci_linux-aarch64/14799/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21139)](http://ci.ros2.org/job/ci_windows/21139/)",
      "Given that these are style fixes, and none of the failing tests are for style, I'm going to go ahead and merge this one in.  Thanks for the review."
    ],
    "commit_messages": [
      "Various cleanups to deal with uncrustify 0.78. (#2439)\n\nThese should also work with uncrustify 0.72.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173dc18912b45d36a708c",
    "number": 2438,
    "body": "Part of https://github.com/ros2/rcpputils/issues/164\r\n\r\nI split the PR into two commits: internal changes and API changes.",
    "head_branch": "christophebedard/switch-to-std-filesystem",
    "is_a_fork": false,
    "comments": [
      "I opened this as a draft because I'm not sure how to deal with the public API change for `rclcpp::get_logging_directory()`. I changed the return type from `rcpputils::fs::path` to `std::filesystem::path` because we can't have both, but they're functionally the same. I can't find any non-test calls to `rclcpp::get_logging_directory()` in the ROS 2 core.\r\n\r\nThe \"cleanest\" option is probably to deprecate the current function and create a new one with a different name, but that's unfortunate.",
      "Superseded by #2579"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173dd18912b45d36a708d",
    "number": 2434,
    "body": "I think @fujitatomoya  had a point: https://github.com/ros2/rclcpp/pull/2425#discussion_r1491699756\r\n\r\nSo this is the alternative to: https://github.com/ros2/rclcpp/pull/2425",
    "head_branch": "rule-of-five",
    "is_a_fork": true,
    "comments": [
      "@Timple It is preferred to update the old PR; that way the context of why we made the decision is preferred.  In #2425 , you can update both the patch (by force-pushing), and the issue title (the edit button).\r\n\r\nSo with that in mind, I'm going to close this one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173de18912b45d36a708e",
    "number": 2433,
    "body": "Currently, rclcpp::spin functions, `rclcpp::spin`, `rclcpp::spin_some`, and so on, use the default context.\r\nHowever they may occur errors when you use the custom context for the specified node of argument of spin functions.\r\n\r\nIn this pull-request, I set in-place executor to use context of node via executor options.\r\n\r\nThis is the only fix I found, but there may be other similar fixes.",
    "head_branch": "fix/spin_xx_with_context",
    "is_a_fork": true,
    "comments": [
      "The approach in the PR looks good to me.\r\n\r\nThere's several test failures.\r\nCan you take a look?\r\n\r\nWe should also add a unit-test to verify that the executor is using the correct context",
      "@HansRobo FYI, the feature freeze for Jazzy will be in ~2 weeks, would you be able to add tests before that date?\r\nOtherwise this PR will need to go in the next release.",
      "@HansRobo thanks for adding test, i have a question for test.",
      "@alsora since you are interested in this PR. can you take a look at this? i will leave this to you.",
      "https://build.ros2.org/job/Rpr__rclcpp__ubuntu_noble_amd64/106/ is unrelated failure.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20770)](http://ci.ros2.org/job/ci_linux/20770/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15068)](http://ci.ros2.org/job/ci_linux-aarch64/15068/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21450)](http://ci.ros2.org/job/ci_windows/21450/)",
      "Merging with green full CI (the github action failure is unrelated)",
      "@fujitatomoya \r\nI want to use rclcpp with this bug fix in Humble.\r\nCould you backport this to humble? (optionally, iron)\r\n\r\n(I'm not a maintainer so I wasn't sure if it was OK to use mergify.)",
      "@fujitatomoya friendly ping",
      "@HansRobo sorry, missed that. this does not break ABI, so i think we can do backport.\r\n\r\n@Mergifyio backport humble iron",
      "Mergifyio is not responding, and i see a couple of conflicts need to resolve there.",
      "@HansRobo since the code base difference, i created the iron backport PR with https://github.com/ros2/rclcpp/pull/2618. can you review that?",
      "@fujitatomoya  Thanks! I'll review it.\r\nBy the way, backporting to Humble is difficult?",
      "@HansRobo i do not think so, once https://github.com/ros2/rclcpp/pull/2618 is merged, we can backport it to humble.",
      "@HansRobo all backports including humble have been completed.",
      "Thank you!!"
    ],
    "commit_messages": [
      "Use the same context for the specified node in rclcpp::spin functions (#2433)\n\n* Use the same conext for the specified node in rclcpp::spin_xx functions\r\n\r\nSigned-off-by: GitHub <noreply@github.com>\r\n\r\n* Add test for spinning with non-default-context\r\n\r\nSigned-off-by: Kotaro Yoshimoto <pythagora.yoshimoto@gmail.com>\r\n\r\n* Format code\r\n\r\nSigned-off-by: Kotaro Yoshimoto <pythagora.yoshimoto@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: GitHub <noreply@github.com>\r\nSigned-off-by: Kotaro Yoshimoto <pythagora.yoshimoto@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173e018912b45d36a708f",
    "number": 2431,
    "body": "These have been deprecated since April 2021, so it is safe to remove them now.",
    "head_branch": "clalancette/remove-set-deprecated",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20334)](http://ci.ros2.org/job/ci_linux/20334/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14746)](http://ci.ros2.org/job/ci_linux-aarch64/14746/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21079)](http://ci.ros2.org/job/ci_windows/21079/)",
      "Should this still be mentioned in the release notes?",
      "> Should this still be mentioned in the release notes?\r\n\r\nYeah, that's a good idea.  To be perfectly honest, I'm not sure what the user-visible effect of this is.  Maybe @wjwwood can comment?",
      "I've opened up https://github.com/ros2/ros2_documentation/pull/4185 now, so I'm going to go ahead and merge this one."
    ],
    "commit_messages": [
      "Remove the set_deprecated signatures in any_subscription_callback. (#2431)\n\nThese have been deprecated since April 2021, so it is safe\r\nto remove them now.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173e118912b45d36a7090",
    "number": 2430,
    "body": "Added additional benchmarks for the executors\r\n\r\n@mjcarroll These are the benchmarks you requested in #2142.",
    "head_branch": "more_bechmarks",
    "is_a_fork": true,
    "comments": [
      "Should we add the events executor to this list of benchmarks?",
      "@alsora I added the events executor to the cascaded test. Its around 10x faster then the other executors...\r\n\r\nFeel free to add it to more tests. Note some benchmark tests don't make sense for the events executor, like waitset rebuild.\r\n",
      "Hi @jmachowinski, can you rebase your branch so we can start CI again and this merged? ",
      "rebased",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=21362)](http://ci.ros2.org/job/ci_linux/21362/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15670)](http://ci.ros2.org/job/ci_linux-aarch64/15670/)\r\n* Linux-rhel [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-rhel&build=873)](http://ci.ros2.org/job/ci_linux-rhel/873/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=22099)](http://ci.ros2.org/job/ci_windows/22099/)",
      "@jmachowinski I think this needs a pass on linting."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173e218912b45d36a7091",
    "number": 2428,
    "body": "No idea what doxygen does here (parser bug?), but the very extensive doxygen comments from the `NodeInterfaces` class doesn't make it into the HTML output currently, (see: https://docs.ros.org/en/rolling/p/rclcpp/generated/classrclcpp_1_1node__interfaces_1_1NodeInterfaces.html) and this fixes it...\r\n",
    "head_branch": "NodeInterfaces_doxygen_fix",
    "is_a_fork": true,
    "comments": [
      "this is only doc section fix, so i think we do not need to run CI."
    ],
    "commit_messages": [
      "fix doxygen syntax for NodeInterfaces (#2428)\n\nSigned-off-by: Jonas Otto <jonas@jonasotto.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173e318912b45d36a7092",
    "number": 2427,
    "body": "Change 'ROS2' to 'ROS 2' and update links to other quality declarations.",
    "head_branch": "christophebedard/update-quality-declaration-docs",
    "is_a_fork": true,
    "comments": [
      "Since this is only an update to the QUALITY_DECLARATION.md, I'm going to merge it with only the Rpr jobs passing."
    ],
    "commit_messages": [
      "Update quality declaration documents (#2427)\n\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173e418912b45d36a7093",
    "number": 2426,
    "body": "The comment in the commit explains the reasoning behind it.\r\n\r\nThis must be merged before https://github.com/ros2/ros2/pull/1524 ; see that pull request for more information about this change.",
    "head_branch": "clalancette/remove-python-cmake-module",
    "is_a_fork": false,
    "comments": [
      "This one can go in independently of the rest, so running CI on just this:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20306)](http://ci.ros2.org/job/ci_linux/20306/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14717)](http://ci.ros2.org/job/ci_linux-aarch64/14717/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21041)](http://ci.ros2.org/job/ci_windows/21041/)\r\n* Windows Debug [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21042)](http://ci.ros2.org/job/ci_windows/21042/)"
    ],
    "commit_messages": [
      "Set hints to find the python version we actually want. (#2426)\n\nThe comment in the commit explains the reasoning behind it.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173e518912b45d36a7094",
    "number": 2425,
    "body": "As per: [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c20-if-you-can-avoid-defining-default-operations-do):\r\n\r\n> C.20: If you can avoid defining default operations, do\r\n\r\nWe've had issues with our linters because of the missing move operator when adding a `Time` object to struct.",
    "head_branch": "rule-of-zero",
    "is_a_fork": true,
    "comments": [
      "I think we should do the [rule of five](https://en.cppreference.com/w/cpp/language/rule_of_three) here instead to not break the API.",
      "> curious how linters complain? since there is no move assignment operator, it should fall back to copy constructor which is defined by default?\r\n\r\nI think the complaining is twofold: \r\n1. Move would be more performant (it's a linter, not a compilation error).\r\n2. Since it's not a default constructor, it's unknown if it could throw exceptions. Which might need handling.\r\n\r\n> I think we should do the [rule of five](https://en.cppreference.com/w/cpp/language/rule_of_three) here instead to not break the API.\r\n\r\nDoes it break API though? One can still override the destructor right?",
      "Based on @fujitatomoya s comment and @audrow s concern: https://github.com/ros2/rclcpp/pull/2434",
      "I see `rclcpp::Time` as a lightweight data class. Users should not inherit from it (there is nothing to overwrite). So I'd prefer the rule of 0.\r\n\r\nIf that is not possible due to API breakage then the rule of 5 is also fine, but normally that is reserverd for classes that manage memory, so it's not appropriate for this class.",
      "So it boils down to: is Time expected to be inherited and have a destructor?\r\n\r\nThis is kind of a conceptual question. And in my opinion holds of all classes. \r\nWho has the authority to make these decisions? \r\n\r\nI'm happy to change this PR to the rule of five but I think we should be consistent and not too afraid of API changes in the rolling branch?",
      "> But this holds for all classes in all code right? I am wondering now why nobody is putting this as requirement in c++ code\r\n\r\ni do not think they can do that, this is the design provided by the standard.\r\nif this is our application code and we can be sure if `Time` class is not inherited, i WILL NOT add `virtual` here to avoid the overhead from vtable.\r\n\r\n> I see rclcpp::Time as a lightweight data class. Users should not inherit from it (there is nothing to overwrite). So I'd prefer the rule of 0.\r\n\r\ni think assumption of `should not` does not work for the user application. if `Time` is not allowed to be inherited, we should add `final` to protect the user space?\r\n\r\n> If that is not possible due to API breakage\r\n\r\nit is possible to break the API/ABI, but we enforce ABI compatibility for each distribution.\r\nthat is said, we cannot backport the fix to already-released distribution.\r\n\r\nplease see more details for https://docs.ros.org/en/rolling/The-ROS2-Project/Contributing/Developer-Guide.html#versioning\r\n\r\n> Who has the authority to make these decisions?\r\n\r\n@clalancette @wjwwood @mjcarroll \r\nCC: @audrow \r\n\r\nwhat do you think? i am okay with `rule of five` for solving the problem.",
      "> what do you think? i am okay with `rule of five` for solving the problem.\r\n\r\nThat is certainly the easiest thing to do.\r\n\r\nIf we want to go with rule of zero, then someone has to do the work of proving that nothing in the ecosystem is currently subclassing `Time`, and that further that is a thing that should never be done.  If we can convince ourselves of those things, then we could go with rule of zero and mark the class as `final`.",
      "> proving that nothing in the ecosystem is currently subclassing Time\r\n\r\nThis sounds rather impossible :slightly_smiling_face: . Switched to the rule of five.",
      "> This sounds rather impossible üôÇ .\r\n\r\nIt is not impossible, but it does take some work.  You'd have to clone all of the sources for Rolling (and probably Humble) using `rosinstall_generator`, and then grep through them all looking for places that subclass `rclcpp::Time`.  Given that there are several ways that this could be done (and it could be over multiple lines), it would probably take some playing around with regexes.  That said, I do not have the time to do this right now.\r\n\r\n> Switched to the rule of five.\r\n\r\nSo this is fine by me.",
      "Here's some CI to see how this goes:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20375)](http://ci.ros2.org/job/ci_linux/20375/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14793)](http://ci.ros2.org/job/ci_linux-aarch64/14793/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21134)](http://ci.ros2.org/job/ci_windows/21134/)",
      "It doesn't look like any of the test failures are related to this PR, so going ahead and merging.  Thanks for the contribution."
    ],
    "commit_messages": [
      "Rule of five: implement move operators (#2425)\n\nSigned-off-by: Tim Clephas <tim.clephas@nobleo.nl>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173e618912b45d36a7095",
    "number": 2424,
    "body": "Implement addition/subtraction assignment operators based on existing operators.\r\nResolves #2399 ",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "CI problem in [TestNodeGraph](https://github.com/ros2/rclcpp/blob/091f29fcd38461046520e3f5cabd396777df88f6/rclcpp/test/rclcpp/node_interfaces/test_node_graph.cpp#L114-L140).",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20312)](http://ci.ros2.org/job/ci_linux/20312/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14723)](http://ci.ros2.org/job/ci_linux-aarch64/14723/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21049)](http://ci.ros2.org/job/ci_windows/21049/)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173e718912b45d36a7096",
    "number": 2421,
    "body": "The original reason is that on Windows Debug, we were failing to compile because the compilation unit was too large.  But also this file was way too large (1200 lines), so it makes sense to split it up.\r\n\r\nThis is followup from #2375, which was the straw that broke the camel's back.  @alsora @mwcondino FYI.",
    "head_branch": "clalancette/split-test-executors",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20202)](http://ci.ros2.org/job/ci_linux/20202/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14622)](http://ci.ros2.org/job/ci_linux-aarch64/14622/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20916)](http://ci.ros2.org/job/ci_windows/20916/)\r\n* Windows Debug [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20917)](http://ci.ros2.org/job/ci_windows/20917/)",
      "@clalancette  thanks for the heads up, sorry that previous PR broke things!",
      "> @clalancette thanks for the heads up, sorry that previous PR broke things!\r\n\r\nNo worries.  Windows Debug isn't a \"gating\" change for us, so for anything that breaks we just do follow-up fixes."
    ],
    "commit_messages": [
      "Split test_executors up into smaller chunks. (#2421)\n\nThe original reason is that on Windows Debug, we were\r\nfailing to compile because the compilation unit was\r\ntoo large.  But also this file was way too large (1200\r\nlines), so it makes sense to split it up.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173e918912b45d36a7097",
    "number": 2420,
    "body": "An emerging responsibility of Waitables that wasn't explicitly declared before is that they should be ensuring guard conditions should stay ready between waits so long as the condition for them being triggered is still true.\r\n\r\nSome waitables will not need this, e.g. waitables that are used to only wake up an executor once, but don't have events tied to them don't need to be retriggered. But other waitables which use guard conditions to notify the executor of work to be done need to keep triggering those guard conditions on subsequent waits, so long as the work associated with them has not been completed.\r\n\r\nThis is still a WIP. I'll add more cross references and details here in the future.",
    "head_branch": "wjwwood/ensure_waitables_handle_guard_condition_retriggering",
    "is_a_fork": false,
    "comments": [
      "lgtm, execpt for the dummy stuff ;-)",
      "@wjwwood I went through and cleaned out the `dummy` functions here",
      "@wjwwood Looking at you const changes to the execute API, it occurred to me, that it might be way better to use a std::unique_ptr here.\r\n\r\nI got two motivations for this proposal:\r\n- Performance.\r\nShared_ptr are relative expensive to copy around, as they trigger a cache lock. And we are in a hot code path, that is executed with a real high frequency.\r\n- Cleaner semantics.\r\nThe waitable should drop the ownership of the taken data, and should have no way of changing it, after the take_data.\r\n",
      "I especially agree on the clearer semantics in this case.",
      "I will look into the feasibility of using `unique_ptr`, but I will point out that the performance shouldn't be an issue since we're not copying the shared ptr in the interface I'm touching, but by taking a const-ref to shared_ptr we allow for the function to copy it if needed.\r\n\r\nAlso for semantics, const-ref to shared_ptr implies copy is possible but not guaranteed (see: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-const), so the semantics are clear enough to me at least, but maybe unique_ptr is actually sufficient (which would imply taking ownership as you all said: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-uniqueptrparam)",
      "What was there before, non-const-ref to shared_ptr, is definitely not what we want to convey in the APIs semantics, i.e. that it might reset/reseat the given pointer (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam).",
      "> I will point out that the performance shouldn't be an issue since we're not copying the shared ptr in the interface I'm touching\r\n\r\nThe data pointer needs to be copied at least one time into the AnyExecutable.",
      "@mjcarroll to run CI on this.",
      "I think that this is actually ready for review.  I'm going to run CI to at least see where we are at on it.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20542)](http://ci.ros2.org/job/ci_linux/20542/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14932)](http://ci.ros2.org/job/ci_linux-aarch64/14932/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21290)](http://ci.ros2.org/job/ci_windows/21290/)",
      "I retargeted this onto https://github.com/ros2/rclcpp/pull/2142 temporarily until it is merged, then I'll retarget it to `rolling`.",
      "I'd like to merge https://github.com/ros2/rclcpp/pull/2467 before pushing this one for review.",
      "Now that https://github.com/ros2/rclcpp/pull/2467 is merged, I need to fix this pr up, which I will do asap.",
      "@wjwwood I rebase this on head an cleaned it up a bit : \r\nhttps://github.com/jmachowinski/rclcpp/tree/ensure_waitables_handle_guard_condition_retriggering\r\n\r\nNote, I removed the SubscriptionIntraProcess::add_to_wait_set as its already handled in the base class.",
      "Thanks, ~~but I don't see any changes yet. Still has conflicts, did you push? Either way I was already working on the fix up, sorry for the duplication of effort.~~\r\n\r\nEdit: I see you put it on a different branch, thanks. I'll compare what I had been working on.",
      "Trying to close and reopen the pr to fix the processing of new commits...",
      "It won't let me reopen it because the current target branch has been deleted, and I cannot edit it to change the target branch while closed, so I made a new pr: https://github.com/ros2/rclcpp/pull/2483"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ea18912b45d36a7098",
    "number": 2419,
    "body": "Hello @clalancette,\r\n\r\nThank you for the reply on issue #2399.\r\nThis is the first draft for implementing `operator+` and `operator-`.\r\nI follow what happens when performing add/minus on `rclcpp::Duration (lhs)` and `builtin_interfaces::msg::Time (rhs)`.\r\nFeel free to give me feedback when you have free time on this task.\r\nAnd discuss what we should do to document it.",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "Sure.",
      "**Not sure how to test `std::underflow_error`.**\r\n\r\nWe do not allow seconds to be negative (i.e., before 1970) when using `rclcpp::Time(int32_t sec, uint32_t nanosec)`. See\r\nhttps://github.com/ros2/rclcpp/blob/99f0fc938b2d0c441787113a3920c16d3614a197/rclcpp/src/rclcpp/time.cpp#L52-L54\r\nTherefore, a nonnegative time `int64_t` plus/minus a duration `int64_t` would always not underflow.\r\n\r\nThe `msg::Time` contains `int32_t sec` and `uint32_t nanosec` which means it is constrained in a range compared to `int64_t` nanoseconds. For the latter, constructing `rclcpp::Time(LLONG_MIN)` is valid but has no corresponding `msg::Time`.\r\nThat's why `std::underflow_error` can be tested in the original operators.\r\nhttps://github.com/ros2/rclcpp/blob/99f0fc938b2d0c441787113a3920c16d3614a197/rclcpp/test/rclcpp/test_time.cpp#L335-L339",
      "> Not sure how to test `std::underflow_error`.\r\n\r\nI think we can get by without that test for now.  Thanks for thinking about it.\r\n\r\n> over all, lgtm. are you going to add assignment operators as well?\r\n\r\nI'm going to suggest that we do that separately.  I think they are logically distinct from the addition and subtraction operators, and will keep the size of the PRs manageable.\r\n",
      "> over all, lgtm. are you going to add assignment operators as well?\r\n\r\n> I'm going to suggest that we do that separately. I think they are logically distinct from the addition and subtraction operators, and will keep the size of the PRs manageable.\r\n\r\nYes, it should be okay and I would create another PR.\r\nI believe that message headers are auto-generated and cannot be modified directly.\r\nSo the `operator+=` declaration also lies in duration.hpp (same as `operator+`).\r\nThe user should include duration.hpp (typically rclcpp.hpp) to use the feature.",
      "Could someone help me with the CI?\r\nI cannot find the failed tests that I caused.\r\nCpplint and uncrustify look fine.\r\n\r\nEdit: I just push a newer version that add suffix 'u' in the test\r\nEdit2: and it passes üòì\r\n",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20246)](http://ci.ros2.org/job/ci_linux/20246/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14662)](http://ci.ros2.org/job/ci_linux-aarch64/14662/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20968)](http://ci.ros2.org/job/ci_windows/20968/)",
      "Thanks, lgtm.",
      "@ros-pull-request-builder retest this please",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20286)](http://ci.ros2.org/job/ci_linux/20286/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14698)](http://ci.ros2.org/job/ci_linux-aarch64/14698/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21017)](http://ci.ros2.org/job/ci_windows/21017/)"
    ],
    "commit_messages": [
      "feat: add/minus for msg::Time and rclcpp::Duration (#2419)\n\n* feat: add/minus for msg::Time and rclcpp::Duration\r\n\r\nSigned-off-by: HuaTsai <huatsai.eed07g@nctu.edu.tw>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173eb18912b45d36a7099",
    "number": 2415,
    "body": "Resolves: #2414",
    "head_branch": "bugfix/2414-no-component-class-found",
    "is_a_fork": true,
    "comments": [
      "It just occurred to me that we should be able to completely remove the check to see if the class is in the available classes. Because if it is not there, then an exception will be thrown on `loader->createInstance`, which will then result in a log message from class loader (which doesn't conform to the ROS log format).\r\n\r\n```\r\nError:   class_loader.impl: No metaobject exists for class type rclcpp_components::NodeFactoryTemplate<test_rclcpp_components::DoesNotExist>.\r\n          at line 359 in /opt/ros/rolling/include/class_loader/class_loader/class_loader_core.hpp\r\n[ERROR] [1707491029.558037381] [test_component_does_not_exist_executable]: Failed to load library Could not create instance of type rclcpp_components::NodeFactoryTemplate<test_rclcpp_components::DoesNotExist>\r\n```\r\n\r\nWhile \"asking forgiveness before permission\" isn't necessarily standard in C++ (since exceptions have overhead), I think in this case it could make sense to simplify because as has been pointed out: this exception case should be very rare. Then we could just remove the check entirely, and just always attempt to call `createInstance`.",
      "@clalancette I have accepted your suggestions and believe all your comments have been addressed. Let me know if there is anything else.",
      "@ros-pull-request-builder retest this please",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20289)](http://ci.ros2.org/job/ci_linux/20289/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14700)](http://ci.ros2.org/job/ci_linux-aarch64/14700/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21019)](http://ci.ros2.org/job/ci_windows/21019/)"
    ],
    "commit_messages": [
      "crash on no class found (#2415)\n\n* crash on no class found\r\n\r\n* error on no class found instead of no callback groups\r\n\r\nSigned-off-by: Adam Aposhian <adam.aposhian@fireflyautomatix.com>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ec18912b45d36a709a",
    "number": 2413,
    "body": "This header was deprecated in [Iron](https://github.com/ros2/rclcpp/blob/iron/rclcpp/include/rclcpp/qos_event.hpp). It's save to remove it on Rolling",
    "head_branch": "ahcorde/trolling/removed_deprecated_header",
    "is_a_fork": false,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20133)](http://ci.ros2.org/job/ci_linux/20133/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14571)](http://ci.ros2.org/job/ci_linux-aarch64/14571/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20844)](http://ci.ros2.org/job/ci_windows/20844/)",
      "> @clalancette @ahcorde Do we want to add this to J release note?\r\n\r\nYeah, that's a good idea.  @ahcorde do you mind writing one for http://docs.ros.org/en/rolling/Releases/Release-Jazzy-Jalisco.html ?",
      "@fujitatomoya and @clalancette Added note here https://github.com/ros2/ros2_documentation/pull/4137"
    ],
    "commit_messages": [
      "Removed deprecated header (#2413)\n\nSigned-off-by: Alejandro Hern√°ndez Cordero <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ed18912b45d36a709b",
    "number": 2412,
    "body": "This allows the user to assign arbitrary fixed-priorities to events according to a user-defined function. It can be used like so:\r\n\r\n    auto extract_priority = [](const rclcpp::experimental::executors::ExecutorEvent & event) {\r\n         //Compute priority by examining event.entity_key\r\n         return priority;\r\n      };\r\n    EventsExecutor executor(std::make_unique<PriorityEventsQueue>(extract_priority));\r\n\r\nThe PriorityEventsQueue allows arbitrary scheduling policies to be built on the EventsExecutor. For instance, rate-monotonic scheduling can be done by examining the deadline parameter in an Executable's QoS settings and prioritizing smaller values. Adding these deadlines to the release time makes an earliest-deadline-first scheduler.\r\n\r\npinging @alsora \r\nI pitched this idea to you at ROSCon last year.",
    "head_branch": "priority_events",
    "is_a_fork": true,
    "comments": [
      "Hi @nightduck, \r\nthank you for the contribution.\r\n\r\nBefore we start with the review, could you please rebase your branch on top of `rolling` ? Currently there's a lot of conflicts and unrelated changes in the branch",
      "I'm unable to reproduce the failed TestNodeGraph unit test on my machine, so I can't debug it.",
      "Overall the changes look good to me.\r\nIt's a relatively simple change that allows user to implement important prioritization logic.\r\n\r\nI have a question for the other ROS 2 core maintainers (e.g. @wjwwood @clalancette @fujitatomoya etc).\r\nShould new queue implementations be part of rclcpp or should they live in separate repositories?\r\nBesides this one, we have a lock-free queue implementation (find it here https://github.com/irobot-ros/events-executor/tree/main/irobot_lock_free_events_queue) and we discussed about implementing a queue that would mimic the \"waitset\" behavior.",
      "> I have a question for the other ROS 2 core maintainers (e.g. @wjwwood @clalancette @fujitatomoya etc). Should new queue implementations be part of rclcpp or should they live in separate repositories?\r\n\r\nSo that basically depends.\r\n\r\nIf it is core functionality that really has to be in the core, it should be there.  If it is an optional feature but has widespread appeal and usecases, it can also be in the core.\r\n\r\nBut if those aren't true, and/or we don't know the answer to those, then we should always start outside of the core.  That allows it to a) iterate on its own schedule, without the constraints of being in the core, b) reduces the burden on the core maintainers, c) keeps our build and test times manageable, and d) makes sure this functionality isn't release-critical.  We spend a lot of time making these systems extensible, so we should lean on that as much as possible.",
      "This queue can certainly exist in its own package for now. But I've got a DAG scheduler in the pipeline that builds on it. And that requires additions/modifications to Node, SubscriptionBase, and TimerBase. If these are also left in their own package, I could work around it with subclassing, but it's clunky.\r\n\r\nOnce I can motivate a usecase and wider adoption for this work that would justify mainline-ing the priority queue and DAG scheduling executor, what would that process look like? Is there precedent for absorbing functionality from a child class into a parent class?",
      ">I've got a DAG scheduler in the pipeline that builds on it. And that requires additions/modifications to Node, SubscriptionBase, and TimerBase.\r\n\r\nWhether these changes can be included right now really depends on how generally useful they might be and how invasive/large they are.\r\nIf their use-case is niche and restricted to the new executor, we should first to ensure that there's community interest for them in order to justify having them in the core.\r\n\r\nThe process could be:\r\n - create  a new repository that depends on rclcpp and extends it with the new features.\r\n - make sure to include a design document and motivations for the changes\r\n - gather community interest with discussions on discourse, on github, working groups or other avenues\r\n - once you have community interest we can merge the changes in rclcpp\r\n\r\nThis process is not set in stone, and it really depends on the type of changes you are looking to push.\r\n\r\n\r\nHaving said that, I would like that the core had sufficient tools to enable all different sort of use-cases through generic APIs, allowing the implementation of such tools in separate repositories/packages.\r\nHowever, we need to keep the bloat of the ros 2 core under control.\r\nFor example, rather than adding new APIs, we should consider how to rework the existing ones to better serve a wider scope.\r\n\r\n\r\n\r\n",
      "I agree 100% with what @alsora said.",
      "Thanks everyone for your input and suggestions. But per @clalancette 's advice, I think I'm going to spin this off as a separate package and we can revisit this conversation next year.",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/the-ros-2-c-executors/38296/4\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ee18912b45d36a709c",
    "number": 2411,
    "body": "Suppresses some warnings with clang 14+",
    "head_branch": "mjcarroll/suppress_override_warnings",
    "is_a_fork": false,
    "comments": [
      "Duplicate of #2410 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173ef18912b45d36a709d",
    "number": 2410,
    "body": "This gets rid of a warning when building under clang.\r\n\r\nThis fixes the warning like we see in https://ci.ros2.org/view/nightly/job/nightly_linux_clang_libcxx/1776/clang/new/source.1b6aeccf-f9e7-4428-a820-7d012d9fdb12/#70 .\r\n\r\nThis is followup from #2303 .  @jefferyyjhsu @alsora FYI.",
    "head_branch": "clalancette/mark-ring-buffer-overrides",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20120)](http://ci.ros2.org/job/ci_linux/20120/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14561)](http://ci.ros2.org/job/ci_linux-aarch64/14561/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20834)](http://ci.ros2.org/job/ci_windows/20834/)\r\n* Clang [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux_clang_libcxx&build=56)](http://ci.ros2.org/job/ci_linux_clang_libcxx/56/)\r\n"
    ],
    "commit_messages": [
      "Make sure to mark RingBuffer methods as 'override'. (#2410)\n\nThis gets rid of a warning when building under clang.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f018912b45d36a709e",
    "number": 2409,
    "body": "This is necessary, most likely because of #2303 .  @alsora @jefferyyjhsu FYI\r\n\r\nWe've seen test failures from this already, see https://ci.ros2.org/job/ci_windows/20815/",
    "head_branch": "clalancette/increase-cppcheck-timeout",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20102)](http://ci.ros2.org/job/ci_linux/20102/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14544)](http://ci.ros2.org/job/ci_linux-aarch64/14544/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20817)](http://ci.ros2.org/job/ci_windows/20817/)",
      "@clalancette , the CI builds for #2303 didn't experience this though",
      "> @clalancette , the CI builds for #2303 didn't experience this though\r\n\r\nThose builds just got lucky (or unlucky, depending on your point of view).  If you look at https://ci.ros2.org/job/ci_windows/20812/consoleFull#console-section-1024 , you can see how close it was to the limit:\r\n\r\n```\r\n  2/121 Test   #2: cppcheck ...................................................   Passed  484.90 sec\r\n```\r\n\r\nGiven that Windows timings are extremely variable, it's not surprising that this is now failing sometimes."
    ],
    "commit_messages": [
      "Increase the cppcheck timeout to 600 seconds. (#2409)\n\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f118912b45d36a709f",
    "number": 2407,
    "body": "This is an automatic backport of pull request #2324 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2324",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20088)](http://ci.ros2.org/job/ci_linux/20088/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14535)](http://ci.ros2.org/job/ci_linux-aarch64/14535/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20808)](http://ci.ros2.org/job/ci_windows/20808/)"
    ],
    "commit_messages": [
      "Add missing header required by the rclcpp::NodeOptions type (#2324) (#2407)\n\nSigned-off-by: Ignacio Vizzo <ignacio@dexory.com>\r\n(cherry picked from commit d6bd8baac5bc050ab31e4e7e8ee8b482fd469c14)\r\n\r\nCo-authored-by: Ignacio Vizzo <ignaciovizzo@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f218912b45d36a70a0",
    "number": 2406,
    "body": "This is a pull request meant to address #1029 and may start as a draft depending on the issue actually needing to be addressed. It adds the `load_parameters` function to `NodeParametersInterface` and all of its children; a way to add parameters during runtime through a yaml file.",
    "head_branch": "load_params",
    "is_a_fork": true,
    "comments": [
      "> it would be nice if we can provide the consistent way to manage parameters?\r\n\r\nI would have to agree with this statement, I feel that too much separation will create inconsistency thus a worse DX. Furthermore, filing a free function doesn't seem clear right now, as right now in testing I just stuck it in `copy_all_parameter_values.hpp` and was planning on possibly renaming the file to make it more discoverable. That function declaration would look something like this:\r\n```\r\ntemplate<typename NodeT>\r\nstd::vector<rcl_interfaces::msg::SetParametersResult>\r\nload_parameters(\r\n  const std::string & yaml_filepath, \r\n  rclcpp::node_interfaces::NodeInterfaces<NodeT> node_interface)\r\n```\r\n\r\n\r\n\r\nThough the benefits of a free function would be its variability to take various NodeInterfaces, if we have a limited amount of nodes that we care about; for example if we only care about `Node` and `LifecycleNode` opposed to caring about 6 different nodes or whatnot.",
      "> I would have to agree with this statement, I feel that too much separation will create inconsistency thus a worse DX.\r\n\r\nLooking at this holistically, I think my other problem with this is that our developer experience around parameters is already poor.  We have too many node APIs that deal with parameters.  Right now we have (all from https://github.com/ros2/rclcpp/blob/c10764f4329f8c1494b68ff60ce55a3c74c8de9e/rclcpp/include/rclcpp/node.hpp#L374-L1254):\r\n\r\n1.  declare_parameter that takes a ParameterValue\r\n2.  declare_parameter that takes a ParameterType\r\n3.  declare_parameter that takes a templated default type\r\n4.  declare_parameter that is templated on just the type\r\n5.  declare_parameters that takes a std::map of <std::string, ParameterT>\r\n6.  declare_parameters that takes a std::map of <std::string, std::pair<ParameterT, ParameterDescriptor>>\r\n7.  undeclare_parameter\r\n8.  has_parameter\r\n9.  set_parameter\r\n10. set_parameters\r\n11. set_parameters_atomically\r\n12. get_parameter\r\n13. get_parameter, returning a bool if it was set\r\n14. get_parameter, returning a bool if set and coercing the output to the templated type\r\n15. get_parameter_or, which gets a parameter or a default value and returns a bool\r\n16. get_parameter_or, which returns a templated type\r\n17. get_parameters, which takes a vector of names and returns a vector of Parameter structures\r\n18. get_parameters, which, given a prefix returns all parameters with that prefix\r\n19. describe_parameter, which gets the ParameterDescriptor for a parameter\r\n20. describe_parameters, which gets the ParameterDescriptros for a vector of parameter names\r\n21. get_parameter_types, which gets the enum type for a vector of parameter names\r\n22. list_parameters, which gets all parameters up to a depth\r\n23. add_pre_set_parameters_callback, which registers a callback to be called before parameters are set\r\n24. add_on_set_parameters_callback, which registers a callback to accept/reject parameters before they are set\r\n25. add_post_set_parameters_callback, which registers a callback to be called after parameters are set\r\n26. remove_pre_set_parameters_callback, which unregisters a pre callback\r\n27. remove_on_set_parameters_callback, which unregisters an accept callback\r\n28. remove_post_set_parameters_callback, which unregisters a post callback\r\n\r\nAnd this list ignores the ParametersClient, ParameterEvents, ParameterEventsFilter, etc, that also revolve around parameters.\r\n\r\nI think we need to think long and hard before we add to this mess, because I don't think it is sustainable to keep adding APIs here.  Instead I'm leaning towards just documenting how to do this, since I think this is completely achievable with the current APIs.",
      "+1 on documenting and/or add utility functions (that take node interfaces as input) as opposed to add APIs to the node class itself",
      ">  NAK \r\n\r\nDoes this mean Negative Acknowledgement? I'm not familiar with the acronym.\r\n\r\nIf it does, I can see that point and would assume that in the context of:\r\n> +1 on documenting and/or add utility functions (that take node interfaces as input\r\n\r\nyou're mainly on board with just documentation. Though, how detrimental would a utility function - which uses `NodeInterfaces` - be to organization of the parameter API.  Especially if it's separated from `Nodes` and `ParameterClients` then it shouldn't get in the way of any restructoring. Furthermore, if we're just documenting this function, where would we put something like this? Would it be just denoted near [`AsyncParametersClient::load_parameters`](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/src/rclcpp/parameter_client.cpp#L290)\r\n\r\n\r\nThen, as a sidenote, would it be worth creating an issue for the long list of parameter APIs, if \r\n> We have too many node APIs that deal with parameters.\r\n\r\nIt sounds like, some of them may not be necessary, as suggested with this message. That issue would just highlight the process for removing certain methods.\r\n\r\n",
      "Hi, is there any update on where this should be put ? How about the documentation ? Should it be only added to ros2 documentation or to some rclcpp functions as well"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f418912b45d36a70a1",
    "number": 2405,
    "body": "This is a first version for a new executor, that saves ready executables per callback group. \r\nIn doing so, this executor should have the same behavior as the SingleThreaded executor in the \r\n\r\n### Current behavior of the SingleThreadedExecutor\r\nCurrently the SingleThreadedExecutor will collect all ready events by calling wait_for_work\r\nhttps://github.com/ros2/rclcpp/blob/c500695e21dd186981533bb6fb84624e4c4f752c/rclcpp/src/rclcpp/executor.cpp#L748\r\nThis will clear the global internal event queue (within AllocatorMemoryStrategy) and repopulate it with ready events.\r\n\r\nAfterwards, the SingleThreadedExecutor will process all  elements from the global internal event queue\r\nby calling\r\nhttps://github.com/ros2/rclcpp/blob/c500695e21dd186981533bb6fb84624e4c4f752c/rclcpp/src/rclcpp/executor.cpp#L894\r\nfollowed by\r\n\r\nhttps://github.com/ros2/rclcpp/blob/c500695e21dd186981533bb6fb84624e4c4f752c/rclcpp/src/rclcpp/executor.cpp#L538\r\nin a loop.\r\n\r\nNote, get_next_ready_executable returns the ready events in a prioritized way e.g Timers etc.\r\n\r\n\r\nIf  get_next_ready_executable returns false, the global event queue will be empty and wait_for_work will be called again.\r\n\r\nIn case that multiple events are ready at the time wait_for_work was called, this will lead to **prioritized first in first out pattern**, as events, that become ready while the processing happens are not added as wait_for_work will not be called, until all events have been processed.\r\n\r\n### Current behavior of the MultiThreadedExecutor\r\n\r\nThe MultiThreadedExecutor utilizes the same code as the SingleThreadedExecutor and also has a global internal event queue. It will also call wait_for_work https://github.com/ros2/rclcpp/blob/c500695e21dd186981533bb6fb84624e4c4f752c/rclcpp/src/rclcpp/executor.cpp#L748\r\nto clear and populate the internal queue. \r\n\r\nAfterwards, there will be multiple threads, calling https://github.com/ros2/rclcpp/blob/c500695e21dd186981533bb6fb84624e4c4f752c/rclcpp/src/rclcpp/executor.cpp#L894 on the queue and process the taken events by calling https://github.com/ros2/rclcpp/blob/c500695e21dd186981533bb6fb84624e4c4f752c/rclcpp/src/rclcpp/executor.cpp#L538\r\n\r\nIf  get_next_ready_executable returns false, wait_for_work will be called again. This will also block all other threads from calling get_next_ready_executable until wait_for_work returns. At this point, there is a subtle difference, that the global event queue is not guaranteed to empty. \r\n\r\nThe difference comes from the facts that get_next_ready_executable will not return any event, that belongs to a mutal exclusive callback group, that is marked as being currently executed (by another thread).\r\n\r\nTherefore we often see a pattern like this:\r\nWait for work is called, and multiple events of one callback group are ready and enqueued. One thread will take one event from the queue and start processing it. Meanwhile a second thread will come by and call get_next_ready_executable. As all events that are ready, belong to a callback group that is executing,  get_next_ready_executable will return false, and wait_for_work will be called. This will clear the global event queue.\r\n\r\nTo avoid a life loop, wait_for_work will mask the callback group in execution from the wait set and block the thread.\r\n\r\nAfter thread one has finished executing the event, it will mark the callback group as ready, and call a guard condition, that will wake up the thread blocked by wait_for_work.\r\n\r\nThread 2 will be woken up, by the guard condition, and collect all ready events. Mostly there will be no other event ready at this point, and get_next_ready_executable will return false, as wait_for_work cleared the event queue.\r\nAfterwards thread 2 will call wait_for_work again, this time with the callback group added to the waitset, as it is now ready. As events are still ready in the callback group, that was masked before, rcl_wait will return instantly. Note, if meanwhile new events became ready, they will also be added to the event queue. Thread 2 will take the highest priority event afterwards and execute it.\r\n\r\nThe result will be a different pattern of execution of the events, leaning hard towards **Priority first**, in case of events that take a long time.\r\n\r\nA really undesired behavior, that we observed a lot happens if you have a timer, that takes longer than its period. \r\nIn this case, on the timer will be executed in an endless loop, while no subscriptions, services etc will be processed any more by the executor. \r\n\r\nA second undesired behavior comes up in combination with guard conditions. Guard conditions will wake up the wait_for_work function only once after each trigger. This leads to problems with Waitables, that internally use guard conditions, as they need to be retriggerd any time the Waitable is added to a waitset and there is still data available for processing. Bugs related this have been observe with the interprocess communication and a fix is currently worked on (https://github.com/ros2/rclcpp/pull/2420)\r\n\r\nA third point would be, that wait_for_work is expensive to call and that the current logic calls it multiple times without a real need, thus increasing latency and CPU load.\r\n\r\n### Proposed solution\r\n\r\nInstead of using one global event queue, have one event queue per callback group.\r\n\r\nThis will lead to the identical execution pattern, per callback group as the SingleThreadedExecutor, thus avoiding the starvation issues we are seeing with the multithreaded executor.\r\n\r\nAs Waitables using guard conditions internally will also be guaranteed to be executed after a guard condition trigger, this would also solve the issue of the lost events and lower the pitfalls of implementing Waitables.\r\n\r\nLast, the CPU load and latency can be reduced, as we can safe a lot of unneeded calls to wait_for_work.\r\n\r\n### Proposed Implementation\r\n\r\nIn order, to be able to queue ready events by its callback group, we need to have a reverse mapping of rcl events in the waitset to the rclcpp Executable. This implementation archives this, by to extensions to rcl:\r\n- Per rcl event (rcl_client_s, rcl_subscription_s etc.) a user_data void ptr is added\r\n- rcl_wait_set_s is extended of counters of added events. E.g. nr_of_added_subscriptions etc.\r\n\r\nWhile adding the rcl events to the waitset, the user_data is set to a pointer to a std::variant.\r\nThe std::variant, contains the originating queue of the event, and the type of the event.\r\nThis is needed, as the source of every event is either [Subscription, Timer, Client, Service], or rclcpp:Waitable.\r\n\r\nFor timers, subscriptions, clients and services adding the mapping is straight forward.\r\n\r\nAs the executor has no way of knowing a prior what a Waitable will add, it safes the count of the added elements to the waitset before calling add_to_wait_set and computes the added elements from the count difference after the call. Afterwards every user_data pointer of the newly added elements will be set to a variant pointing to this Waitable.\r\n\r\nAfter the call to rcl_wait, all ready events will be collected, and added to their origin event queue. Note, Waitables will only be added once, even if multiple rcl events trigger for it.\r\n\r\n#### Wait_for_work\r\n\r\nHousekeeping\r\n- Sync added remove nodes\r\n- Regeneration of precomputed structures if needed\r\n\r\nAdds all callback groups with no unprocessed events to the waitset.\r\n\r\ncalls rcl_wait\r\n\r\nCollects all ready events\r\n\r\nCall notify one for each newly ready callback group, to wake up worker threads\r\n\r\n#### get_next_ready_executable\r\nThis function is now threadsafe\r\nReturns events in priority order from ready callback groups.\r\nE.g. timers first if any ready in any ready callback group.\r\n\r\n#### spin loop\r\nIf a thread has no work, it will call\r\nget_next_ready_executable\r\n- If work available execute\r\n-- execute\r\n-- If executed event was last in callback group\r\n--- wake up wait_for_work\r\n-  -> continue\r\n\r\nWill try to acquire the wait_for_work_mutex\r\n- If success wait on work, continue\r\n\r\nblock on a std::conditional_variable\r\n\r\n\r\n### Performance results\r\n\r\nThe performance of the executor in respect to the existing ones depends on the number of added elements.\r\nIn general it\r\n- is is slightly slower than the StaticSingeThreadedExecutor for spinning.\r\n- Is way slower on change of the callback group\r\n- Is around way faster then the SingleThreadedExecutor / MultiThreadedExecutor\r\n\r\nOn low numbers (10 Nodes, each 1 Sub and 1 Pub)\r\n```\r\nPerformanceTestExecutor/single_thread_executor_spin_some                                         42699 ns        42782 ns        16292\r\nPerformanceTestExecutor/static_single_thread_executor_spin_some                                  22656 ns        22723 ns        30703\r\nPerformanceTestExecutor/multi_thread_executor_spin_some                                          42745 ns        42820 ns        16310\r\nPerformanceTestExecutor/cbg_executor_spin_some                                                   26589 ns        26685 ns        26161\r\nPerformanceTestExecutor/single_thread_executor_wait_for_work                                     17207 ns        17137 ns        40609\r\nPerformanceTestExecutor/multi_thread_executor_wait_for_work                                      17343 ns        17261 ns        40778\r\nPerformanceTestExecutor/cbg_executor_wait_for_work                                                4247 ns         4183 ns       168615\r\nPerformanceTestExecutor/single_thread_executor_wait_for_work_rebuild                             24565 ns        24161 ns        28606\r\nPerformanceTestExecutor/multi_thread_executor_wait_for_work_rebuild                              24737 ns        24335 ns        28899\r\nPerformanceTestExecutor/cbg_executor_wait_for_work_rebuild                                      282876 ns       279871 ns         2502\r\nCascadedPerformanceTestExecutor/single_thread_executor_spin                                     173399 ns         3459 ns       100000\r\nCascadedPerformanceTestExecutor/static_single_thread_executor_spin                               88461 ns         3729 ns       100000\r\nCascadedPerformanceTestExecutor/multi_thread_executor_spin                                      186569 ns         2937 ns       100000\r\nCascadedPerformanceTestExecutor/cbg_executor_spin                                                93951 ns         2263 ns       100000\r\nPerformanceTestExecutorMultipleCallbackGroups/single_thread_executor_spin_some                   47279 ns        47357 ns        15353\r\nPerformanceTestExecutorMultipleCallbackGroups/static_single_thread_executor_spin_some            22489 ns        22550 ns        30039\r\nPerformanceTestExecutorMultipleCallbackGroups/multi_thread_executor_spin_some                    46441 ns        46527 ns        15106\r\nPerformanceTestExecutorMultipleCallbackGroups/cbg_executor_spin_some                             28717 ns        28808 ns        24270\r\n``` \r\n\r\nOn high numbers (10 Nodes, each 10 Subs and 10 Pubs)\r\n\r\n```\r\nPerformanceTestExecutor/single_thread_executor_spin_some                                        476171 ns       476278 ns         1460\r\nPerformanceTestExecutor/static_single_thread_executor_spin_some                                 155358 ns       155446 ns         4528\r\nPerformanceTestExecutor/multi_thread_executor_spin_some                                         479539 ns       479620 ns         1454\r\nPerformanceTestExecutor/cbg_executor_spin_some                                                  163037 ns       163165 ns         4320\r\nPerformanceTestExecutor/single_thread_executor_wait_for_work                                     59881 ns        59814 ns        11639\r\nPerformanceTestExecutor/multi_thread_executor_wait_for_work                                      60201 ns        60141 ns        11647\r\nPerformanceTestExecutor/cbg_executor_wait_for_work                                               13684 ns        13562 ns        51640\r\nPerformanceTestExecutor/single_thread_executor_wait_for_work_rebuild                             70280 ns        69854 ns        10043\r\nPerformanceTestExecutor/multi_thread_executor_wait_for_work_rebuild                              70488 ns        70066 ns        10035\r\nPerformanceTestExecutor/cbg_executor_wait_for_work_rebuild                                      296157 ns       295951 ns         2321\r\nCascadedPerformanceTestExecutor/single_thread_executor_spin                                     629502 ns         3192 ns        10000\r\nCascadedPerformanceTestExecutor/static_single_thread_executor_spin                              369457 ns         3498 ns        10000\r\nCascadedPerformanceTestExecutor/multi_thread_executor_spin                                      652901 ns         3143 ns        10000\r\nCascadedPerformanceTestExecutor/cbg_executor_spin                                               361602 ns         2369 ns        10000\r\nPerformanceTestExecutorMultipleCallbackGroups/single_thread_executor_spin_some                  833350 ns       833456 ns          806\r\nPerformanceTestExecutorMultipleCallbackGroups/static_single_thread_executor_spin_some           152967 ns       153077 ns         4547\r\nPerformanceTestExecutorMultipleCallbackGroups/multi_thread_executor_spin_some                   862221 ns       862330 ns          797\r\nPerformanceTestExecutorMultipleCallbackGroups/cbg_executor_spin_some                            188593 ns       188711 ns         3686\r\n\r\n```\r\n\r\nOn absurd high numbers (10 Nodes, each 30 Subs and 30 Pubs)\r\n```\r\nPerformanceTestExecutor/single_thread_executor_spin_some                                       2793936 ns      2794024 ns          248\r\nPerformanceTestExecutor/static_single_thread_executor_spin_some                                 581873 ns       581948 ns         1174\r\nPerformanceTestExecutor/multi_thread_executor_spin_some                                        2811405 ns      2811414 ns          248\r\nPerformanceTestExecutor/cbg_executor_spin_some                                                  614209 ns       614256 ns         1106\r\nPerformanceTestExecutor/single_thread_executor_wait_for_work                                    166914 ns       166823 ns         4194\r\nPerformanceTestExecutor/multi_thread_executor_wait_for_work                                     166769 ns       166697 ns         4185\r\nPerformanceTestExecutor/cbg_executor_wait_for_work                                               36011 ns        35882 ns        19464\r\nPerformanceTestExecutor/single_thread_executor_wait_for_work_rebuild                            227946 ns       227469 ns         3001\r\nPerformanceTestExecutor/multi_thread_executor_wait_for_work_rebuild                             233806 ns       233300 ns         3035\r\nPerformanceTestExecutor/cbg_executor_wait_for_work_rebuild                                      409781 ns       409542 ns         1699\r\nCascadedPerformanceTestExecutor/single_thread_executor_spin                                    1767707 ns         3736 ns        10000\r\nCascadedPerformanceTestExecutor/static_single_thread_executor_spin                             1133730 ns         3582 ns        10000\r\nCascadedPerformanceTestExecutor/multi_thread_executor_spin                                     1784937 ns         3222 ns        10000\r\nCascadedPerformanceTestExecutor/cbg_executor_spin                                              1072787 ns         3550 ns        10000\r\nPerformanceTestExecutorMultipleCallbackGroups/single_thread_executor_spin_some                 6043592 ns      6043685 ns          112\r\nPerformanceTestExecutorMultipleCallbackGroups/static_single_thread_executor_spin_some           580017 ns       580088 ns         1175\r\nPerformanceTestExecutorMultipleCallbackGroups/multi_thread_executor_spin_some                  6097011 ns      6096917 ns          112\r\nPerformanceTestExecutorMultipleCallbackGroups/cbg_executor_spin_some                            749972 ns       750076 ns          905\r\n```\r\n\r\nThe iRobot Benchmark results :\r\ntopology/white_mountain.json\r\n```\r\nStaticSingeThreadedExecutor\r\nSystem total:\r\nreceived_msgs  mean_us   late_msgs late_perc too_late_msgs  too_late_perc  lost_msgs lost_perc \r\n6127           12        0         0         0              0              0         \r\nSingleThreadedExecutor\r\nSystem total:\r\nreceived_msgs  mean_us   late_msgs late_perc too_late_msgs  too_late_perc  lost_msgs lost_perc \r\n6127           14        0         0         0              0              0         0    \r\nMultiThreadedExecutor\r\nSystem total:\r\nreceived_msgs  mean_us   late_msgs late_perc too_late_msgs  too_late_perc  lost_msgs lost_perc \r\n6127           24        0         0         0              0              0         0  \r\nCbgSingleThreadExecutor\r\nSystem total:\r\nreceived_msgs  mean_us   late_msgs late_perc too_late_msgs  too_late_perc  lost_msgs lost_perc \r\n7219           13        0         0         0              0              0         0  \r\nCbgMultiThreadExecutor\r\nreceived_msgs  mean_us   late_msgs late_perc too_late_msgs  too_late_perc  lost_msgs lost_perc \r\n7216           15        0         0         0              0              0         0\r\n```\r\nNote, there is something fishy going on, as the CbgExecutor receives more messages than the normal one, I am still locking into this.\r\n\r\n@mjcarroll @wjwwood @clalancette @fujitatomoya Can you have a short look at this ?\r\n\r\n",
    "head_branch": "cbg_executor",
    "is_a_fork": true,
    "comments": [
      "I worked further on this, and the executor is now usable and works stable in our system.\r\n\r\nI did a few performance measurements, and came our ahead of the SingleThreaded and the Multithreaded executors.\r\nFor comparison I used rclcpp:benchmark_executors and the irobot benchmark.\r\n\r\nRemoved benchmark results, as they were taken with the CPU frequency scheduler not in performance mode. Please referee to the ones above. ",
      "> Note, there is something fishy going on, as the CbgExecutor receives more messages than the normal one\r\n\r\nThe likely explanation is that publishers/timers are running faster (thanks to the improved performance of the new executor) so you are publishing more messages.\r\n\r\nI would be interested in seeing a performance comparison with the `EventsExecutor`, which is considerably faster than the other executors you tested with.\r\nIMO if this proposed executor does not have better performance than the `EventsExecutor`, we should not add it to rclcpp.\r\nWe are already looking to unify the existing executors because there's no reason to have so many, so a new executor should be added only if it's superior in terms of performance.\r\n\r\nMoreover, with a new executor proposal, we should have a detailed performance analysis and design document accompanying it.\r\nThe new executor should initially either be implemented in a separate repository or in the `experimental` namespace/directory.\r\n\r\nNOTE: I didn't look at the code yet.\r\nI'll try to do a review this week.\r\n",
      "> The likely explanation is that publishers/timers are running faster (thanks to the improved performance of the new executor) so you are publishing more messages.\r\n> \r\nThat would be nice, but I think something is broken with the shutdown.\r\n\r\n> I would be interested in seeing a performance comparison with the `EventsExecutor`, which is considerably faster than the other executors you tested with. \r\n\r\nDefine 'faster' :-). The latency of the EventsExecutor is way better.\r\n\r\n> IMO if this proposed executor does not have better performance than the `EventsExecutor`, we should not add it to rclcpp. \r\n\r\nThe main point of this executor is that it has similar behavior in single and multithreaded mode. Note, this is not the case for the current executors. That it is fast, and shows a reduction of CPU load is a nice addon.\r\n\r\n> Moreover, with a new executor proposal, we should have a detailed performance analysis and design document accompanying it. The new executor should initially either be implemented in a separate repository or in the `experimental` namespace/directory.\r\n\r\nI changes the design 4 times during the refinement of the approach... This started out as a request for feedback for an idea, and meanwhile evolved into a full blown reasonable stable executor. I would first like to discuss it, and if I can get the changes needed for it into rclcpp and rcl, before putting any work into design documents...\r\n\r\n> \r\n> NOTE: I didn't look at the code yet. I'll try to do a review this week.\r\n\r\nThat would be great, thanks\r\n",
      "> The main point of this executor is that it has similar behavior in single and multithreaded mode. Note, this is not the case for the current executors. That it is fast, and shows a reduction of CPU load is a nice addon.\r\n\r\nThis makes sense.\r\nHowever I think that the current landscape of executors is already quite confusing for a user.\r\n\r\nUsually the path forward for a new executor is the following\r\n - create a dedicated repository for this new executor (outside of rclcpp)\r\n - create design documents\r\n - gather community interest\r\n - eventually push to rclcpp if there's enough interest\r\n\r\nThis PR can stay open (maybe as a draft) to get initial feedbacks from the maintainers, but I would prefer to start with a design document to fully understand the theory of operation before diving into the code.\r\n\r\nIf the purpose of this executor is to \"fix\" a bug in the current single and multithreaded executors, I would rather ask to replace them and/or apply the changes to those executors themselves rather than creating a new one.\r\n\r\nOn the other hand, if \"having a similar behavior in single and multithreaded mode\" isn't really a bug-fix, but rather an alternative approach (similar to how the events executor processes events in a different order than the single threaded executor), we could consider adding this new executor after the community has showed enough interest in it (e.g. contributions, discourse discussions, etc)\r\n\r\n> Define 'faster' :-). The latency of the EventsExecutor is way better.\r\n\r\nI used \"faster\" on purpose as a very generic term. We showed how the events executor had better performance than the standard executor across a large number of tests and metrics (CPU usage, latency, throughput, accuracy of timers, and slightly even RAM usage).\r\nIf a similar case could be made for a new executor, I would recommend  the process described before with the goal to replace the events-executor (which is still marked as \"experimental\").\r\n\r\nWe currently have 4 executors in the repo. I really don't want to go to 5 unless there's a very strong reason.\r\nWe had plans to reduce the number of executors (fully deprecate the `StaticSingleThreadedExecutor`, move the `EventsExecutor` out of `::experimental` and make it the default, eventually remove the `SingleThreadedExecutor`), so it would be great if new executor proposals fit into this schema of \"reducing the complexity for users\".",
      "> This PR can stay open (maybe as a draft) to get initial feedbacks from the maintainers, but I would prefer to start with a design document to fully understand the theory of operation before diving into the code.\r\n\r\nI'll try to make some time to come up with a document.\r\n\r\n> If the purpose of this executor is to \"fix\" a bug in the current single and multithreaded executors, I would rather ask to replace them and/or apply the changes to those executors themselves rather than creating a new one.\r\n \r\nReplacing Static, Single and Multi threaded Executor with this one would be feasible, but also a bit drastic. My idea was to add it as a possible replacement for transition and testing.\r\nFrom my point of view this is a needed bugfix, as the MultiThreadedExecutor caused a lot of headaches for us in the past year. But it is also a new approach from the internal working of things.\r\n\r\nI had a short look at the EventsExecutor and would say, if we merge it with this approach, we will get something really nice. The EventsExecutor has the solution to how avoid the waitsets, which take ages to build. On the other side, the cbg executor has the logic, to schedule ready events in callback groups with priorized order by multiple threads. \r\n\r\nThe results should be fast, but behave similar to the current executor.\r\n",
      "@alsora I overworked the description, to contain a proposal and a detailed description of the issue that is should fix.\r\n\r\nI would be fine, with having this executor outside of rclcpp, but as mentioned above, I will need to adopt some APIs and structures slightly in rcl and rclcpp for this.\r\n\r\nAs for my idea on how to combine this and the EventsExecutor approach, its basically 'take out the wait for work stuff from the spin function and fill the event queues from callbacks from RWM'. The housekeeping might be challenging though. \r\n",
      "Many ideas here, thanks for doing the leg-work and sorry for taking so long to begin thinking about this.\r\n\r\nOne note, and something that @wjwwood keeps reminding me about our current implementation\r\n\r\n> This will clear the global internal event queue (within AllocatorMemoryStrategy) and repopulate it with ready events.\r\n\r\nThis isn't so much a _queue_ as a _set_.  Basically, everything has a boolean state of \"am I ready or not\" rather than \"how many things do I have ready\".  In the case that you had a subscription that received 1 message during the wait and one that received 100 messages, both will be processed equally (one callback per subscription).\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f518912b45d36a70a2",
    "number": 2400,
    "body": "Stop storing the context in the guard condition.\r\n    \r\nThis was creating a circular reference between GuardCondition\r\nand Context, so that Context would never be cleaned up.\r\nSince we never really need the GuardCondition to know\r\nabout its own Context, remove that part of the circular\r\nreference.\r\n    \r\nWhile we are in here, we also change the get_context()\r\nlambda to a straight weak_ptr; there is no reason for the\r\nindirection since the context for the guard condition\r\ncannot change at runtime.\r\n    \r\nWe also remove the deprecated version of the\r\nget_notify_guard_condition().  That's because there is\r\nno way to properly implement it in the new scheme, and\r\nit seems to be unused outside of rclcpp.\r\n    \r\nFinally, we add in a test that guarantees the use_count\r\nis what we expect when inside and leaving a scope, ensuring\r\nthat contexts will properly be destroyed.\r\n    \r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\n\r\n@mjcarroll @wjwwood FYI",
    "head_branch": "clalancette/remove-guard-condition-context",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20023)](http://ci.ros2.org/job/ci_linux/20023/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14487)](http://ci.ros2.org/job/ci_linux-aarch64/14487/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20746)](http://ci.ros2.org/job/ci_windows/20746/)",
      "I'm going to go ahead and merge this one in.  If there is any follow-up, I'm happy to do it in another PR.",
      "Hi! Do you think this PR fixes https://github.com/osrf/buildfarm-tools/issues/21#issuecomment-1883185244?"
    ],
    "commit_messages": [
      "Stop storing the context in the guard condition. (#2400)\n\n* Stop storing the context in the guard condition.\r\n\r\nThis was creating a circular reference between GuardCondition\r\nand Context, so that Context would never be cleaned up.\r\nSince we never really need the GuardCondition to know\r\nabout its own Context, remove that part of the circular\r\nreference.\r\n\r\nWhile we are in here, we also change the get_context()\r\nlambda to a straight weak_ptr; there is no reason for the\r\nindirection since the context for the guard condition\r\ncannot change at runtime.\r\n\r\nWe also remove the deprecated version of the\r\nget_notify_guard_condition().  That's because there is\r\nno way to properly implement it in the new scheme, and\r\nit seems to be unused outside of rclcpp.\r\n\r\nFinally, we add in a test that guarantees the use_count\r\nis what we expect when inside and leaving a scope, ensuring\r\nthat contexts will properly be destroyed.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173f618912b45d36a70a3",
    "number": 2395,
    "body": "Addressing occasional timeouts caused by cppcheck on `nightly_win_deb`,\r\n\r\nSee: https://github.com/osrf/buildfarm-tools-private/issues/20#issuecomment-1857230574 and https://github.com/ros2/rclcpp/pull/2392\r\n\r\nCI job to test:\r\n[![Build Status](https://ci.ros2.org/job/ci_windows/20709/badge/icon)](https://ci.ros2.org/job/ci_windows/20709/)",
    "head_branch": "blast545/increase_rclcpp_lifecycle_timeout",
    "is_a_fork": false,
    "comments": [
      "New check CI:\r\n[![Build Status](https://ci.ros2.org/job/ci_windows/20714/badge/icon)](https://ci.ros2.org/job/ci_windows/20714/)",
      "New CI check:\r\n[![Build Status](https://ci.ros2.org/job/ci_windows/20715/badge/icon)](https://ci.ros2.org/job/ci_windows/20715/)",
      "New CI:\r\n[![Build Status](https://ci.ros2.org/job/ci_windows/20736/badge/icon)](https://ci.ros2.org/job/ci_windows/20736/)",
      "@clalancette Can I ask you for help on this one? \r\n\r\nIIUC `cppcheck` is being added with `ament_lint_auto_find_test_dependencies`. \r\nSo adding `set_tests_properties(cppcheck PROPERTIES TIMEOUT 360)` should do the trick, However, efb7d4e failed because the `cppcheck` test wasn't found.\r\n\r\nWhen I tried to add it explicitly with 0fffa55, the package returns an error about the cppcheck test already being defined @_@",
      "> @clalancette Can I ask you for help on this one?\r\n\r\nSee 65e8e28, which I think should fix it.",
      "Windows CI: [![Build Status](https://ci.ros2.org/job/ci_windows/20741/badge/icon)](https://ci.ros2.org/job/ci_windows/20741/)",
      "There we go, CI is happier now.  I'm going to re-run CI for everything, then go ahead and merge this one.",
      "Full CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20021)](http://ci.ros2.org/job/ci_linux/20021/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14485)](http://ci.ros2.org/job/ci_linux-aarch64/14485/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20743)](http://ci.ros2.org/job/ci_windows/20743/)",
      "Thanks a lot! :bow: "
    ],
    "commit_messages": [
      "Increase timeout for rclcpp_lifecycle to 360 (#2395)\n\n* Increase timeout for rclcpp_lifecycle to 360\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f718912b45d36a70a4",
    "number": 2394,
    "body": "CC #2185",
    "head_branch": "humble",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19993)](http://ci.ros2.org/job/ci_linux/19993/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14459)](http://ci.ros2.org/job/ci_linux-aarch64/14459/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20702)](http://ci.ros2.org/job/ci_windows/20702/)"
    ],
    "commit_messages": [
      "Add missing stdexcept include (#2186) (#2394)\n\nSigned-off-by: √òystein Sture <os@skarvtech.com>\r\nSigned-off-by: gentoo90 <gentoo90@gmail.com>\r\nCo-authored-by: √òystein Sture <oysstu@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f818912b45d36a70a5",
    "number": 2392,
    "body": "This reverts commit d9b2744057b8fd230f2c71c739fcdf7e27219d85.\r\n\r\nThe PR I'm proposing to revert seems to be breaking the cppcheck, causing a timeout in `nightly_win_deb`.\r\n\r\nI'm opening this PR in draft to test with CI if this was actually the cause of the problem.\r\n\r\nReference failure we'll try to replicate: https://ci.ros2.org/view/nightly/job/nightly_win_deb/2942/ \r\n\r\nCI test, CI_Windows, debug, packages-up-to rclcpp_lifecycle\r\n[![Build Status](https://ci.ros2.org/job/ci_windows/20691/badge/icon)](https://ci.ros2.org/job/ci_windows/20691/)",
    "head_branch": "blast545/revert_rclcpp_209",
    "is_a_fork": false,
    "comments": [
      "Do we still need this PR?  It looks like the nightly_win_deb is generally passing without it: https://ci.ros2.org/view/nightly/job/nightly_win_deb/\r\n\r\nThat said, if we run into further problems here, my first thought would be to increase the cppcheck timeout.  We've done that elsewhere.",
      "I was exactly right now looking into the results of the PR. I never had any intention to merge this one, just wanted to check if the last PR to the repo had any influence in the appearance ratio of the issue.\r\n\r\nGiven the recent history of the job, it seems the problem has stopped appearing while it happened consecutively 4 times last week. After a manual check, I realized it has happened as well in the past. I'm starting to think that the capabilities of the agent might be the actual cause behind the yellows last week.\r\n\r\nDo you think increasing the timeout from 300s to something like 350s would be OK? It's a lot of time for just one linter. ",
      "> Do you think increasing the timeout from 300s to something like 350s would be OK? It's a lot of time for just one linter.\r\n\r\nYeah, I think that is OK for now (though I might suggest 360 seconds, just so it is an even number of minutes).\r\n\r\nI agree it is a long time, but Windows is the only platform where cppcheck still works.  Eventually maybe we should just disable it, but that is a larger discussion.",
      "Roger that, will open a PR to increase that timeout and close this PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173f918912b45d36a70a6",
    "number": 2388,
    "body": "This is an automatic backport of pull request #2349 done by [Mergify](https://mergify.com).\nCherry-pick of 411dbe8212dd753ee60871f8605d0a8beaae5e37 has failed:\n```\nOn branch mergify/bp/humble/pr-2349\nYour branch is up to date with 'origin/humble'.\n\nYou are currently cherry-picking commit 411dbe82.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   rclcpp/include/rclcpp/event_handler.hpp\n\tboth modified:   rclcpp/src/rclcpp/qos_event.cpp\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2349",
    "is_a_fork": false,
    "comments": [
      "`EventHandler` is not supported in humble, closing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173fa18912b45d36a70a7",
    "number": 2387,
    "body": "This is an automatic backport of pull request #2349 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2349",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19966)](http://ci.ros2.org/job/ci_linux/19966/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14436)](http://ci.ros2.org/job/ci_linux-aarch64/14436/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20676)](http://ci.ros2.org/job/ci_windows/20676/)",
      "CC: @clalancette @mauropasse @MiguelCompany "
    ],
    "commit_messages": [
      "Fix data race in EventHandlerBase (#2349) (#2387)\n\nBoth the EventHandler and its associated pubs/subs share\r\nthe same underlying rmw event listener.\r\nWhen a pub/sub is destroyed, the listener is destroyed.\r\nThere is a data race when the ~EventHandlerBase wants\r\nto access the listener after it has been destroyed.\r\n\r\nThe EventHandler stores a shared_ptr of its associated pub/sub.\r\nBut since we were clearing the listener event callbacks on the\r\nbase class destructor ~EventHandlerBase, the pub/sub was\r\nalready destroyed, which means the rmw event listener was also\r\ndestroyed, thus causing a segfault when trying to obtain it\r\nto clear the callbacks.\r\n\r\nClearing the callbacks on ~EventHandler instead of\r\n~EventHandlerBase avoids the race, since the pub/sub are still valid.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n(cherry picked from commit 411dbe8212dd753ee60871f8605d0a8beaae5e37)\r\n\r\nCo-authored-by: mauropasse <mauropasse@hotmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662173fb18912b45d36a70a8",
    "number": 2386,
    "body": "This PR addresses the #2383 issue.\r\n\r\nCurrently, `Clock::sleep_for()` is a wrapper for `Clock::sleep_until()` routine. Due-time once being calculated won't be changed if system or ROS-clock was shifted from one time (date) to another.\r\n\r\nThe suggested patch - is the re-implementation attempt of `Clock::sleep_for()` to have a resistance to time shifts.\r\nThe implementation considerations are:\r\n\r\n - For the cases when clock has system, steady or inactive ROS time, `sleep_for()` implementation could consider the sleep for a necessary amount of time, similar how does `rclcpp::sleep_for()` do it. For all of these cases, the speed of time flow will be normal, and be the same as how steady time flows. So, for these cases, we are using `chrono::steady_clock`, which will sleep for a necessary amount of time independently of system or ROS time changes.\r\n - For the case when clock has active ROS time (that is subscribed `/clock` topic for time corrections), `sleep_for()` should check the clock the same way as `sleep_until()` does it, but also respecting backwards time shifts in a clock jump callbacks. If updated ROS-time was jumped backwards than previous noted time, we are correcting until-point to fit actual sleep timings.\r\n\r\nOverall implementation scheme looks like following:\r\n```\r\nbool\r\nClock::sleep_for(Duration rel_time, Context::SharedPtr context)\r\n{\r\n  ...\r\n  if (this_clock_type == RCL_STEADY_TIME || this_clock_type == RCL_SYSTEM_TIME)\r\n  {\r\n    // Sleeping using std::chrono::steady_clock for time calculation\r\n  } else if (this_clock_type == RCL_ROS_TIME) {\r\n    if (!ros_time_is_active()) {\r\n      // RCL_ROS_TIME is not active. Time speed is normal.\r\n      // Sleeping using std::chrono::steady_clock for time calculation\r\n    } else {\r\n      // RCL_ROS_TIME is active. Need to sleep in respect to time jumps in the past.\r\n    }\r\n  }\r\n}\r\n```",
    "head_branch": "clock_sleep_for_time_shifts_resistant",
    "is_a_fork": true,
    "comments": [
      "@ros2/team for other's thoughts üßá ",
      "Closed for the reasons discussed in https://github.com/ros2/rclcpp/pull/2386#discussion_r1434316678 thread"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173fc18912b45d36a70a9",
    "number": 2384,
    "body": "Originally added in pull request #411 there is the following TODO:\r\n\r\n> TODO(dhood): determine this automatically from `RCLCPP_LOG_MIN_SEVERITY`\r\n\r\nreferencing the enabled of normal [loggers](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/logger.hpp#L39). This pull request is meant to solve that TODO, or at least get a grasp on what determining loggers based on severity should look like. This could be useful for giving the user more control over how loggers turn to dummies based on the extent of failure.",
    "head_branch": "logging_compile_time",
    "is_a_fork": true,
    "comments": [
      "After the rebuilt CI it seems to have no problems",
      "@CursedRock17 @Barry-Xu-2018 \r\n\r\nSo the user is expected to specify `RCLCPP_LOG_MIN_SEVERITY`, and that configure the logging macros for severity during build time. (basically this is for more performance.)\r\n\r\ni do not think this does not work anymore as expected (7 years ago, i wasn't here...) with current implementation of `Logger` class?\r\n\r\nfor example, if user application has something like this?\r\n\r\n```cpp\r\n  // pseudo code\r\n  rclcpp::Logger logger = rclcpp::get_logger(\"user_logger\");\r\n  logger.set_level(rclcpp::Logger::Level::Debug);  // generate RCLError exception if RCLCPP_LOGGING_ENABLED is 0\r\n  RCLCPP_DEBUG(logger, \"message %s\", \"debug\");\r\n  rclcpp::Logger::Level level = logger.get_effective_level();  // generate RCLInvalidArgument exception if RCLCPP_LOGGING_ENABLED is 0\r\n```\r\n\r\noriginally, i believe that this `TODO` is meant to achieve the null operation for logging macros and `Logger` methods.\r\ni think those methods need to be updated according to do the null operation without generating the exceptions if RCLCPP_LOGGING_ENABLED is 0?\r\n",
      "I can't seem to follow your train of thought all the way here, I would assume that we would want to throw an exception if `RCLCPP_LOGGING_ENABLED` is 0 as the user would be trying to reverse something they wanted at compile time. Take [set_level](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/logger.hpp#L165), it will take the `Level` that we give it all the way [through `rcutils`](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/src/rclcpp/logger.cpp#L114). We just have to ensure the user wants one setting (`RCLCPP_LOG_MIN_SEVERITY`), that isn't `NONE` before it gets passed down the stack.\r\n\r\nApart from where we should check for `RCLCPP_LOGGING_ENABLED`, what null operator are you talking about? Do you mean entirely removing the `Logger`, before getting to these functions in the first place?",
      "@CursedRock17 sorry for the confusion, let me try to rephrase it.\r\n\r\nfor user experience, with https://github.com/ros2/rclcpp/pull/2384#issuecomment-1955348527 sample code.\r\n\r\n- `RCLCPP_LOGGING_ENABLED=1` no problem, that works with configured `RCLCPP_LOG_MIN_SEVERITY`.\r\n- `RCLCPP_LOGGING_ENABLED=0`, all the sudden, user code will generate the exception here and there. i think this is not expected behavior, user expects all the null operation for the logger for the performance w/o these exceptions.\r\n\r\ni may be missing something, but it looks like originally this `TODO` was trying to address something like this?",
      "Oh, you're saying we don't want the `Logger` to be available at all, that way we won't have to worry about any incorrect exceptions. The only thing was throwing me off was the message in the TODO\n> determine this automatically from `RCLCPP_LOG_MIN_SEVERITY`\n\nAs I assumed that needed to be handled at compile time. \n\nSo, should we scrap what's already done in the PR, or should we just extend to these certain methods?",
      "> Oh, you're saying we don't want the Logger to be available at all, that way we won't have to worry about any incorrect exceptions.\r\n\r\nyeah, that is what i thought of this `TODO`.\r\n\r\n> or should we just extend to these certain methods?\r\n\r\ni think adding null operation for `set_level` and `get_effective_level` would be okay. lets keep this open to get more feedback?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173fd18912b45d36a70aa",
    "number": 2382,
    "body": "This commit adds external exception handling for the worker threads, allowing application code to implement custom exception handling.",
    "head_branch": "exception_handling",
    "is_a_fork": true,
    "comments": [
      "@wjwwood  @mjcarroll  @fujitatomoya Ping, I would like to see this merged for jazzy",
      "@alsora can you check and resolve your comments above?",
      "@jmachowinski can you rebase to rolling? i would like to make sure CI is green with current HEAD especially at this release moment.\r\n\r\nafter rebase, i need to start CI with https://gist.githubusercontent.com/fujitatomoya/fef2fe491b4f10fd5120cc3907fab525/raw/a05837c1b3c2ab1de927d222ef4fcb68fcd82850/ros2.repos",
      "Looks good to me",
      "> @jmachowinski can you rebase to rolling? i would like to make sure CI is green with current HEAD especially at this release moment.\r\n> \r\nrebased, note this currently fails the pipline, as it uncovered the bug reported in https://github.com/ros2/rclcpp/issues/2474\r\n",
      "@jmachowinski this is ready for CI with https://github.com/ros2/demos/pull/670? just chekcing.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20841)](http://ci.ros2.org/job/ci_linux/20841/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15144)](http://ci.ros2.org/job/ci_linux-aarch64/15144/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21527)](http://ci.ros2.org/job/ci_windows/21527/)",
      "rebased to rolling\r\n\r\nI don't know why the CI failed, it builds for me using this file:\r\nhttps://github.com/jmachowinski/build_desc/raw/exeception_handling/ros2.repos\r\n\r\n",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20859)](http://ci.ros2.org/job/ci_linux/20859/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15162)](http://ci.ros2.org/job/ci_linux-aarch64/15162/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21547)](http://ci.ros2.org/job/ci_windows/21547/)",
      "I need to make some changes before merging this, but I cannot push to this branch, so I'll be opening a new pr. Please don't merge this one.",
      "> but I really think that it would be preferable to have an exception handler callback as an optional part of the ExecutorOptions instead\r\n\r\n+1 for this.",
      "Another concern I've got after trying to shape this up for merge is that there's no way to indicate if an exception should cause the executor to stop or not. You can re-throw, but doing that in a thread will trigger termination, which by default will head towards `std::abort`, but can be overridden see: https://en.cppreference.com/w/cpp/error/set_terminate\r\n\r\nInstead, I'd like to have seen either a return value from the exception handler that can tell the executor to stop or throw from the main thread or something, and/or pass the executor into the exception handler so that it can cancel it if desired.",
      "Closing in favor of the updated version https://github.com/ros2/rclcpp/pull/2505"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662173fe18912b45d36a70ab",
    "number": 2381,
    "body": "This is an automatic backport of pull request #2363 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2363",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19914)](http://ci.ros2.org/job/ci_linux/19914/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14392)](http://ci.ros2.org/job/ci_linux-aarch64/14392/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20621)](http://ci.ros2.org/job/ci_windows/20621/)"
    ],
    "commit_messages": [
      "fix(rclcpp_components): increase the service queue sizes in component_container (#2363) (#2381)\n\n* fix(rclcpp_components): increase the service queue sizes in component_container\r\n\r\nSigned-off-by: M. Fatih Cƒ±rƒ±t <mfc@leodrive.ai>\r\n(cherry picked from commit 9c098e544ecf191b7c61f63f7f4fac6f6449cedd)\r\n\r\nCo-authored-by: M. Fatih Cƒ±rƒ±t <xmfcx@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740018912b45d36a70ac",
    "number": 2380,
    "body": "This is an automatic backport of pull request #2363 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2363",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19913)](http://ci.ros2.org/job/ci_linux/19913/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14391)](http://ci.ros2.org/job/ci_linux-aarch64/14391/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20620)](http://ci.ros2.org/job/ci_windows/20620/)",
      "New CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19916)](http://ci.ros2.org/job/ci_linux/19916/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14394)](http://ci.ros2.org/job/ci_linux-aarch64/14394/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20623)](http://ci.ros2.org/job/ci_windows/20623/)"
    ],
    "commit_messages": [
      "fix(rclcpp_components): increase the service queue sizes in component_container (backport #2363) (#2380)\n\n* fix(rclcpp_components): increase the service queue sizes in component_container (#2363)\r\n\r\n* Use rmw_qos_profile_t.\r\n\r\nHumble doesn't support create_service with the rclcpp::QoS object.\r\n\r\nSigned-off-by: M. Fatih Cƒ±rƒ±t <mfc@leodrive.ai>\r\n(cherry picked from commit 9c098e544ecf191b7c61f63f7f4fac6f6449cedd)\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740118912b45d36a70ad",
    "number": 2378,
    "body": "‚Ä¶_sim_time\"\r\n\r\naddress https://github.com/ros2/rclcpp/issues/2370",
    "head_branch": "fujitatomoya/rclcpp-issues-2370",
    "is_a_fork": false,
    "comments": [
      "CC: @Barry-Xu-2018 @iuhilnehc-ynos ",
      "Looks good to me. While reviewing this, I stumbled over \r\nhttps://github.com/ros2/rclcpp/blob/892cae99159597b85d3e569953ed67652a0c9eed/rclcpp/src/rclcpp/time_source.cpp#L400\r\n\r\nThis could also be simplified by just spinning. The future has no way of waking up the executor, and the cancel:\r\nhttps://github.com/ros2/rclcpp/blob/892cae99159597b85d3e569953ed67652a0c9eed/rclcpp/src/rclcpp/time_source.cpp#L433\r\nIs what stops the thread in the end...\r\nI really don't like this spin until future complete api, I have seen a lot of wrong usages...",
      "Pulls: ros2/rclcpp#2378\nGist: https://gist.githubusercontent.com/ahcorde/79e6ba5c051490b0daa01133625efc73/raw/0e41a6ea5e570ef85bb5bc4d62ab11b03e90532d/ros2.repos\nBUILD args:  --packages-above-and-dependencies rclcpp\nTEST args:  --packages-above rclcpp\nROS Distro: rolling\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/15636\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=23089)](http://ci.ros2.org/job/ci_linux/23089/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=17308)](http://ci.ros2.org/job/ci_linux-aarch64/17308/)\n* Linux-rhel [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-rhel&build=2566)](http://ci.ros2.org/job/ci_linux-rhel/2566/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=23966)](http://ci.ros2.org/job/ci_windows/23966/)",
      "@ahcorde @jmachowinski thanks for reviewing this. i need to rebase and take care of the failures.",
      "> Looks good to me. While reviewing this, I stumbled over\r\n> \r\n> https://github.com/ros2/rclcpp/blob/892cae99159597b85d3e569953ed67652a0c9eed/rclcpp/src/rclcpp/time_source.cpp#L400\r\n> \r\n> This could also be simplified by just spinning. The future has no way of waking up the executor, and the cancel:\r\n> \r\n> https://github.com/ros2/rclcpp/blob/892cae99159597b85d3e569953ed67652a0c9eed/rclcpp/src/rclcpp/time_source.cpp#L433\r\n> \r\n> \r\n> Is what stops the thread in the end...\r\n> I really don't like this spin until future complete api, I have seen a lot of wrong usages...\r\n\r\n@jmachowinski agree, i can patch that with another PR (and probably backports), because this one is dependent on current rolling only. i will include you once that is ready.",
      "Pulls: ros2/rclcpp#2378\nGist: https://gist.githubusercontent.com/fujitatomoya/5c5385f4f86450bdac3203a85de2770f/raw/0e41a6ea5e570ef85bb5bc4d62ab11b03e90532d/ros2.repos\nBUILD args:  --packages-above-and-dependencies rclcpp\nTEST args:  --packages-above rclcpp\nROS Distro: rolling\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/15661\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=23121)](http://ci.ros2.org/job/ci_linux/23121/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=17335)](http://ci.ros2.org/job/ci_linux-aarch64/17335/)\n* Linux-rhel [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-rhel&build=2593)](http://ci.ros2.org/job/ci_linux-rhel/2593/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=23993)](http://ci.ros2.org/job/ci_windows/23993/)",
      "windows failure is unrelated."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740218912b45d36a70ae",
    "number": 2377,
    "body": "This prevents a call to is_ready() using an uninitalised index to access wait_set->events that may occur before the event has been setup in add_to_wait_set().\r\n\r\nBackported to humble from https://github.com/ros2/rclcpp/pull/2376",
    "head_branch": "rclcpp_qos_event_init",
    "is_a_fork": true,
    "comments": [
      "I'm going to close this one for now; once we agree on #2376 and get it merged, we can ask the bot to do this for us."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740318912b45d36a70af",
    "number": 2376,
    "body": "This prevents a call to is_ready() using an uninitalised index to access wait_set->events that may occur before the event has been setup in add_to_wait_set().",
    "head_branch": "aosmw/rclcpp_event_hander_init",
    "is_a_fork": true,
    "comments": [
      "I ran into this while developing a rclcpp lifecycle node with a number of services, publishers and subscribers with ASAN enabled.  \r\nIt triggers a segfault when I use `ros2 lifecycle /mynode set configure`  \r\n\r\nI have made the change for rolling, but will also backport it to humble where I am really using it.\r\n\r\nIn humble the change will be performed in QOSEventBase which is in rclcpp/src/rclcpp/qos_event.cpp\r\n\r\nA more thorough validation could be done in the is_ready function to ensure that the pointer to `wait_set != nullptr && wait_set_event_index_ < wait_set->size_of_events`"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740418912b45d36a70b0",
    "number": 2375,
    "body": "## Background\r\nIt appears that with the experimental events executor, some usages of the rclcpp API cause broken behavior. Specifically, if multiple timers are configured in a node, and during runtime one of the timers is cancelled via the `TimerBase::cancel` method, this will result in all other timers failing to execute.\r\n\r\nA minimal working example of the bug is found here --\r\n[example_package.tar.gz](https://github.com/ros2/rclcpp/files/13494070/example_package.tar.gz)\r\n\r\nTo reproduce, build the package using `colcon build`, then run `USE_EVENTS_EXECUTOR=1 ros2 run example_package timer_node`. It is observable that both timers get cancelled after the first timer cancels itself:\r\n```\r\nroot@753c2035d766:/app/src# USE_EVENTS_EXECUTOR=1 ros2 run example_package timer_node\r\n[INFO] [1701211973.238745755] [timer_node]: Using EventsExecutor\r\n[INFO] [1701211974.239147118] [timer_node]: Timer 1!\r\n[INFO] [1701211974.239268496] [timer_node]: Timer 2!\r\n[INFO] [1701211975.239086741] [timer_node]: Timer 1!\r\n[INFO] [1701211975.239251090] [timer_node]: Timer 2!\r\n[INFO] [1701211976.239241288] [timer_node]: Timer 1!\r\n[INFO] [1701211976.239417539] [timer_node]: Timer 2!\r\n[INFO] [1701211977.239107783] [timer_node]: Timer 1!\r\n[INFO] [1701211977.239260069] [timer_node]: Timer 2!\r\n[INFO] [1701211978.239079416] [timer_node]: Timer 1!\r\n[INFO] [1701211978.239232915] [timer_node]: Timer 2!\r\n[INFO] [1701211979.239045079] [timer_node]: Timer 1!\r\n[INFO] [1701211979.239198617] [timer_node]: Timer cancelling itself!\r\n[INFO] [1701211979.239225057] [timer_node]: Timer 2!\r\n```\r\n\r\nMyself and @gusbrigantino  have tested this on latest `rolling` as well as `iron`.\r\n\r\n## Solution\r\nThe root cause is that there‚Äôs an edgecase within the `TimersManager` class which causes the thread to hang indefinitely if the ‚Äòhead‚Äô timer in an internal data structure gets cancelled. As a result, the method will block until timers are reset (the `timers_updated_` flag is set, which only occurs if the timers are reset. The underlying issue is that the `TimersManager` class is not properly checking for if a timer to be executed has actually been cancelled.\r\n\r\nThe implemented fix adds logic to the comparison used for the heap such that cancelled timers are always at the bottom of the heap. Furthermore,  `get_head_timeout_unsafe` is modified to return whether or not the current timer is invalid. This bool is then used to break out of the loop in `run_timers`.",
    "head_branch": "events-executor-timer-cancel",
    "is_a_fork": true,
    "comments": [
      "Looks like the build for `rolling` may be unhappy? I'm seeing a similar build failure for the latest merge into `rolling` - [link](https://github.com/ros2/rclcpp/pull/2374/commits)",
      "> Looks like the build for rolling may be unhappy? I'm seeing a similar build failure for the latest merge into rolling - [link](https://github.com/ros2/rclcpp/pull/2374/commits)\r\n\r\nYou can probably disregard `Rpr` jobs right now, we will run full CI on it.",
      "Is there any way that you can add your reproducible example as a test?",
      "> Is there any way that you can add your reproducible example as a test?\r\n\r\nSure, I can try to get it in the form of a unit test.",
      "OK I ended up adding two tests:\r\n1. `check_one_timer_cancel_doesnt_affect_other_timers` in `test_timers_manager.cpp` validates the behavior in the timers_manager object. Interestingly enough, this test **does not fail** on latest `iron`, which I did not expect given the example package's behavior\r\n2. `testOneTimerCancelledWithExecutorSpin` in `test_executors.cpp` validates the behavior when using a `rclcpp::Node` that adds and then cancels it's own timers. This example uses `rclcpp::spin`, and **does** reproduce the behavior. On this branch, this test should be passing.\r\n\r\nI can't figure out why there would be a difference in behavior between the two tests - as far as I can tell, when `spin` is called on the `EventsExecutor`, it makes a call to `start` it's own `timers_manager` object, so I would think that the behavior should be the same as when the `timers_manager` object is manually started and then the same sequence of waiting + cancelling is followed.",
      "@alsora @mjcarroll could someone please review whenever convenient? Thanks!",
      "@mwcondino FYI, besides unresolved comments, there are several failures you can find https://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/1272/testReport/",
      "> @mwcondino FYI, besides unresolved comments, there are several failures you can find https://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/1272/testReport/\r\n\r\nThank you, appreciate the heads up! I am new to contributing to ROS repos, so I was unsure of which failures were important (I think the main build is still messed up, but that seems unrelated to this PR).\r\n\r\nLinting should be fixed now.",
      "CI run \r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20074)](http://ci.ros2.org/job/ci_linux/20074/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14523)](http://ci.ros2.org/job/ci_linux-aarch64/14523/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20793)](http://ci.ros2.org/job/ci_windows/20793/)",
      "The fix and unit tests look good to me!",
      "windows are failing https://ci.ros2.org/job/ci_windows/20793/, i think that is because of timer accuracy. (e.g https://ci.ros2.org/job/ci_windows/20793/testReport/rclcpp/TestTimerCancelBehavior_SingleThreadedExecutor/testHeadTimerCancelThenResetBehavior/ timer does not get called as expected.)",
      "> windows are failing https://ci.ros2.org/job/ci_windows/20793/, i think that is because of timer accuracy. (e.g https://ci.ros2.org/job/ci_windows/20793/testReport/rclcpp/TestTimerCancelBehavior_SingleThreadedExecutor/testHeadTimerCancelThenResetBehavior/ timer does not get called as expected.)\r\n\r\nThanks for the callout -  I relaxed the timing constraints, hopefully that will fix things",
      "> Thanks for the callout - I relaxed the timing constraints, hopefully that will fix things\r\n\r\nThey should be a *lot* more relaxed than that, otherwise we are going to end up with flaky tests.\r\n\r\nIn general, on Windows, you should expect things to take 4x as long as on Linux.  We shouldn't even consider having timing tests with constraints of less than 200ms or so.",
      "> > Thanks for the callout - I relaxed the timing constraints, hopefully that will fix things\r\n> \r\n> They should be a _lot_ more relaxed than that, otherwise we are going to end up with flaky tests.\r\n> \r\n> In general, on Windows, you should expect things to take 4x as long as on Linux. We shouldn't even consider having timing tests with constraints of less than 200ms or so.\r\n\r\nThanks for the heads up @clalancette, I was unaware that Windows requires such a different order of precision for this type of test. I have relaxed the tests much further and validated that they still work as expected and pass on this branch while failing on current `iron`. I settled on 300ms waits, since I didn't want to increase the time required to run these tests too much more; already the full `test_executors` executable takes 18s to run on my machine with these changes.",
      "New build after changes in unit-tests:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20089)](http://ci.ros2.org/job/ci_linux/20089/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14536)](http://ci.ros2.org/job/ci_linux-aarch64/14536/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20809)](http://ci.ros2.org/job/ci_windows/20809/)\r\n\r\n\r\nIt's probably for a separate discussion, but I really feel unease with having so many unit-tests using wall-time clock.\r\nIMO unit-tests should always use a simulated time, to be robust to latency that happens in the server.",
      "> It's probably for a separate discussion, but I really feel unease with having so many unit-tests using wall-time clock.\r\n\r\nI agree to an extent.  We probably should have more tests that use some kind of simulated time.  The main reason we don't is that those are harder tests to write.\r\n\r\nBut I also think that we are always going to have to have tests that use system time.  They show problems that a simulated time won't, and they are what most of our users are using.",
      "Updated the test to use a simulated clock. For now, that is at .25 realtime, but we can update as necessary if the tests are still flaky and require a slower rate.",
      "@alsora could you please trigger a full CI run whenever convenient?",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20129)](http://ci.ros2.org/job/ci_linux/20129/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14568)](http://ci.ros2.org/job/ci_linux-aarch64/14568/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20841)](http://ci.ros2.org/job/ci_windows/20841/)",
      "Looks like there's still some windows failures, but they appear unrelated to this PR (unless I'm missing something):\r\n[projectroot.test_n_nodes__rmw_fastrtps_cpp](https://ci.ros2.org/job/ci_windows/20841/testReport/junit/(root)/projectroot/test_n_nodes__rmw_fastrtps_cpp/)\r\n[test_rclcpp.TestNNodes.test_10_nodes](https://ci.ros2.org/job/ci_windows/20841/testReport/junit/test_rclcpp/TestNNodes/test_10_nodes/)\r\n[test_rclcpp.TestNNodesAfterShutdown.test_10_nodes](https://ci.ros2.org/job/ci_windows/20841/testReport/junit/test_rclcpp/TestNNodesAfterShutdown/test_10_nodes/)\r\n",
      "> Looks like there's still some windows failures, but they appear unrelated to this PR (unless I'm missing something):\r\n\r\nWhile I generally agree with you (tests will only be using the events executor if they are explicitly configured to do so), it is kind of weird that these are failing.  We don't see those failures in the nightlies: https://ci.ros2.org/view/nightly/job/nightly_win_rel/ .\r\n\r\nI think we should re-run Windows, and if it comes back green this time we can go ahead with it.",
      "> I think we should re-run Windows, and if it comes back green this time we can go ahead with it.\r\n\r\nSounds good - is it possible for me to kick off the jobs? I feel bad bugging folks to start the CI, but I can't see any buttons on https://ci.ros2.org/job/ci_windows/ to start things, and I'm wondering if I'm missing anything (admittedly I have not used Jenkins in the past so this could definiely be a noob question)",
      "Currently only maintainers can trigger a job, and don't hesitate to ping if we forget to do it!\r\n\r\nWindowns-only job:\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20889)](http://ci.ros2.org/job/ci_windows/20889/)",
      "Windows CI is green, indicating that the previous failure is unrelated.\r\nMerging this PR"
    ],
    "commit_messages": [
      "[events executor] - Fix Behavior with Timer Cancel (#2375)\n\n* fix\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* add timer cancel tests\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* cleanup header include\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* reverting change to timer_greater function\r\n\r\nSigned-off-by: Gus Brigantino <gusbrig97@gmail.com>\r\n\r\n* use std::optional, and handle edgecase of 1 cancelled timer\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* clean up run_timers func\r\n\r\nSigned-off-by: Gus Brigantino <gusbrig97@gmail.com>\r\n\r\n* some fixes and added tests for cancel then reset of timers.\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* refactor and clean up. remove cancelled timer tracking.\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* remove unused method for size()\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* linting\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* relax timing constraints in tests\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* further relax timing constraints to ensure windows tests are not flaky.\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n* use sim clock for tests, pub clock at .25 realtime rate.\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Matt Condino <mwcondino@gmail.com>\r\nSigned-off-by: Gus Brigantino <gusbrig97@gmail.com>\r\nCo-authored-by: Gus Brigantino <gusbrig97@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621740518912b45d36a70b1",
    "number": 2374,
    "body": "That way we can hide more of the implementation by using the PRIVATE keyword.",
    "head_branch": "clalancette/target-link-libraries",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19869)](http://ci.ros2.org/job/ci_linux/19869/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14356)](http://ci.ros2.org/job/ci_linux-aarch64/14356/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20577)](http://ci.ros2.org/job/ci_windows/20577/)"
    ],
    "commit_messages": [
      "Switch to target_link_libraries. (#2374)\n\nThat way we can hide more of the implementation by using\r\nthe PRIVATE keyword.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740618912b45d36a70b2",
    "number": 2373,
    "body": "Howdy,\r\n\r\nPer a conversation with @JanStaschulat at ROSCon / in Nav2 https://github.com/ros-planning/navigation2/issues/3974: I think it would be dandy to be able to set increase thread prioritizations for soft-realtime in the Composable Node containers. Both to be able to set at launch-time instead of setting on a per-node basis in a stack. In Nav2, there are a couple of nodes we have set able to do this recently, but it would be great if there was a generic way that users could select prioritization more broadly and easily at run-time. \r\n\r\nThis PR implements a prototype of this behavior that I would like you feedback on to resolve necessary problems seen. I added a `setSoftRealTimePriority` to the ComponentManager that is used to set the prioritization when necessary. By default, I have the priority set to 49 after discussions with Bosch, but we could also make this configurable. Though, there's something to be said about simplicity and the suggestions in the RT workshop had the options of HIGH and LOW, so I think this might be OK to start off with. \r\n\r\nThe way that I see this workflow occurring is the following for **Isolated Component Manager**:\r\n- Users set in the `parameters` field of [`LoadComposableNodes`](https://github.com/ros2/launch_ros/blob/rolling/launch_ros/launch_ros/actions/load_composable_nodes.py#L301-L308) or from the parameters in [`CompositionNode`](https://github.com/ros2/launch_ros/blob/rolling/launch_ros/launch_ros/descriptions/composable_node.py#L167-L169) `use_soft_realtime_priority` to its value in their launch files for the nodes of interest\r\n- That is communicated in the `parameters` field of [`LoadNode`](https://github.com/ros2/rcl_interfaces/blob/humble/composition_interfaces/srv/LoadNode.srv#L27) service to the component container and sent to `override_parameters` in `NodeOptions`\r\n- When we create the thread for our executor, we check the parameter overrides for this value. If it exists & is `true` then we set the prioritization \r\n- This way, we can control which nodes are added to the higher priority threads and which are not individually\r\n\r\nQ: I believe all of the launch stuff (linked above) is setup already to be able to handle this workflow. Please I would appreciate making sure that's true since the launch_ros package is a little difficult to parse at times. \r\n\r\nThe way that I see this workflow occurring is the following for **Normal Component Manager**:\r\n- We declare `use_soft_realtime_priority` in the Component Manager constructor (`false`, for off default) \r\n- If true, we also set the priority\r\n- This way, we can control the single threaded & multithreaded containers to have thread prioritization as well for its nodes\r\n- Technically speaking, you could also set this to `true` in the Isolated case to increase the prioritization of the Isolated's load/unload/list services. While that's an odd choice, that's a perfectly valid option \r\n\r\nI have no questions on this one, I think this is good. ",
    "head_branch": "thread_prioritization",
    "is_a_fork": true,
    "comments": [
      "hi @SteveMacenski, glad to see this draft, I think that `sched_setscheduler` api is only for linux system, but for MacOS or Windows, they may have their own apis to set thread priority. Thus another 2 platforms should be taking considered.\r\n\r\nI think maybe we could visit the std::thread via the wrapper, and use `std::thread::native_handle()`  to get the native thread handle(which depends on platforms), and use specific api to set thread's real-time attributes.\r\n\r\nI am currently working on real time tuning on linux and qnx, If you have better ideas, feel free to let me know. üò∏ ",
      "> hi @SteveMacenski, glad to see this draft, I think that `sched_setscheduler` api is only for linux system, but for MacOS or Windows, they may have their own apis to set thread priority. Thus another 2 platforms should be taking considered.\r\n> \r\nThis [utility function](https://github.com/ros2/examples/blob/1d97c4fc7445554f6f85f63305d424fc017212a0/rclcpp/executors/cbg_executor/src/examples_rclcpp_cbg_executor/utilities.hpp#L73) supports thread configuration for Linux, Windows Mac. A similar version could be used here as well.\r\n\r\n",
      "> > hi @SteveMacenski, glad to see this draft, I think that `sched_setscheduler` api is only for linux system, but for MacOS or Windows, they may have their own apis to set thread priority. Thus another 2 platforms should be taking considered.\r\n> \r\n> This [utility function](https://github.com/ros2/examples/blob/1d97c4fc7445554f6f85f63305d424fc017212a0/rclcpp/executors/cbg_executor/src/examples_rclcpp_cbg_executor/utilities.hpp#L73) supports thread configuration for Linux, Windows Mac. A similar version could be used here as well.\r\n\r\nI took a look at this function, it supports QNX as well, very impressive üëç \r\n",
      "> This [utility function](https://github.com/ros2/examples/blob/1d97c4fc7445554f6f85f63305d424fc017212a0/rclcpp/executors/cbg_executor/src/examples_rclcpp_cbg_executor/utilities.hpp#L73) supports thread configuration for Linux, Windows Mac. A similar version could be used here as well.\r\n\r\nAgreed for the Isolated case. How do we handle this for the normal case where this is simply called while inside of a thread, not in creating one (e.g. we call `setSoftRealTimePriority` in the `ComponentManager` constructor)? \r\n\r\nIf that function can handle that and/or be made to handle that, then happy to try to find a home for it as part of this effort. ",
      "> > This [utility function](https://github.com/ros2/examples/blob/1d97c4fc7445554f6f85f63305d424fc017212a0/rclcpp/executors/cbg_executor/src/examples_rclcpp_cbg_executor/utilities.hpp#L73) supports thread configuration for Linux, Windows Mac. A similar version could be used here as well.\r\n> \r\n> Agreed for the Isolated case. How do we handle this for the normal case where this is simply called while inside of a thread, not in creating one (e.g. we call `setSoftRealTimePriority` in the `ComponentManager` constructor)?\r\n> \r\n> If that function can handle that and/or be made to handle that, then happy to try to find a home for it as part of this effort.\r\n\r\n[`int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);`](https://man7.org/linux/man-pages/man2/sched_setscheduler.2.html)\r\nIf pid equals zero, the scheduling policy and parameters of the calling thread will be set.\r\n\r\nThis is, however, not documented for [`pthread_setschedparam`](https://man7.org/linux/man-pages/man3/pthread_setschedparam.3.html). ",
      "Sure, but your method takes in a `T native_handle` that needs to implement a number of things to a number of `OS`'s. Can you just send that as `0`, I wouldn't have thought so. ",
      "> Sure, but your method takes in a `T native_handle` that needs to implement a number of things to a number of `OS`'s. Can you just send that as `0`, I wouldn't have thought so.\r\n\r\nFor windows, change \r\n[windows](https://github.com/ros2/examples/blob/1d97c4fc7445554f6f85f63305d424fc017212a0/rclcpp/executors/cbg_executor/src/examples_rclcpp_cbg_executor/utilities.hpp#L77)'s `native_handler to [GetCurrentThread()](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentthread)\r\n\r\nFor Mac, QNX, and linux,\r\nchange `native_handle` to `pthread_self()`\r\n[pthread_self(macos)](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/pthread_self.3.html)\r\n[pthread_self(qnx)](https://www.qnx.com/developers/docs/6.3.0SP3/neutrino/lib_ref/p/pthread_self.html#id7)\r\n[pthread_self(linux)](https://man7.org/linux/man-pages/man3/pthread_self.3.html)\r\n\r\nThus we don't need take `T handler` as parameter"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740718912b45d36a70b3",
    "number": 2371,
    "body": "Added a test, if a trigger event for a waitable was missed. \r\nAdded a test, if take_data was called two times in a row, without calling is_ready in between.\r\nThis is related to #2250.",
    "head_branch": "missing_event",
    "is_a_fork": true,
    "comments": [
      "@mjcarroll here is the merge request for the tests.\r\nNote, one of them currently fails !",
      "I got knocked out by a cold, I will take a look at this when I 'm recovered.",
      "I reworked the double take data test, it works not on the 'standard' multithreaded executor, showing the race that was introduces with https://github.com/ros2/rclcpp/pull/2109",
      "I think we ca drop this PR. We came to the conclusion, that loss events is intended, and its up the the waitables to deal with this. @wjwwood did a PR for this, so we should be fine on that front.\r\n\r\nAs for the double take data, the test was very specific to the old implementation, as the timing needed to be right for the test to trigger. The bug has also been fixed in jazzy / rolling, so I think its save to drop the test as well."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740918912b45d36a70b4",
    "number": 2366,
    "body": "Currently, EventsExecutor is in different namespace from other executors, so I modify node_main.cpp.in template to support EventsExecutor.",
    "head_branch": "support-events-executor-in-node-template",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19798)](http://ci.ros2.org/job/ci_linux/19798/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14302)](http://ci.ros2.org/job/ci_linux-aarch64/14302/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20522)](http://ci.ros2.org/job/ci_windows/20522/)"
    ],
    "commit_messages": [
      "feat(rclcpp_components): support events executor in node main template (#2366)\n\nSigned-off-by: wep21 <daisuke.nishimatsu1021@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740a18912b45d36a70b5",
    "number": 2365,
    "body": "This is an automatic backport of pull request #2335 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2335",
    "is_a_fork": false,
    "comments": [
      "CI for this is in https://github.com/ros2/rcl/pull/1117#issuecomment-1803817153"
    ],
    "commit_messages": [
      "Disable the loaned messages inside the executor. (#2335) (#2365)\n\n* Disable the loaned messages inside the executor.\r\n\r\nThey are currently unsafe to use; see the comment in the\r\ncommit for more information.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\n(cherry picked from commit f294488e17921034ebbbca75e8604a56684874e7)\r\n\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740b18912b45d36a70b6",
    "number": 2364,
    "body": "This is an automatic backport of pull request #2335 done by [Mergify](https://mergify.com).\nCherry-pick of f294488e17921034ebbbca75e8604a56684874e7 has failed:\n```\nOn branch mergify/bp/humble/pr-2335\nYour branch is up to date with 'origin/humble'.\n\nYou are currently cherry-picking commit f294488e.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   rclcpp/src/rclcpp/subscription_base.cpp\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/src/rclcpp/executor.cpp\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2335",
    "is_a_fork": false,
    "comments": [
      "CI for this is in https://github.com/ros2/rcl/pull/1116#issuecomment-1804449675"
    ],
    "commit_messages": [
      "Disable the loaned messages inside the executor. (backport #2335) (#2364)\n\n* Disable the loaned messages inside the executor. (#2335)\r\n\r\n* Disable the loaned messages inside the executor.\r\n\r\nThey are currently unsafe to use; see the comment in the\r\ncommit for more information.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\n(cherry picked from commit f294488e17921034ebbbca75e8604a56684874e7)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740c18912b45d36a70b7",
    "number": 2363,
    "body": "fixes: https://github.com/ros2/rclcpp/issues/2362",
    "head_branch": "fix/comp-manager-queue",
    "is_a_fork": true,
    "comments": [
      "Thank you for the reviews.\r\n\r\nI have also tested if it solves the problem on a fresh rolling workspace now.\r\n\r\nRunning the steps in the [issue](https://github.com/ros2/rclcpp/issues/2362) it is able to load all the nodes.\r\n\r\n```console\r\n$ ros2 component list\r\n/my_container\r\n  1  /talker_0\r\n  2  /talker_1\r\n  3  /talker_2\r\n  4  /talker_3\r\n  5  /talker_4\r\n  6  /talker_5\r\n  7  /talker_6\r\n  8  /talker_7\r\n  9  /talker_8\r\n  10  /talker_9\r\n  11  /talker_10\r\n  12  /talker_11\r\n  13  /talker_12\r\n  14  /talker_13\r\n  15  /talker_14\r\n  16  /talker_16\r\n  17  /talker_15\r\n  18  /talker_17\r\n  19  /talker_18\r\n  20  /talker_19\r\n  21  /talker_20\r\n  22  /talker_28\r\n  23  /talker_21\r\n  24  /talker_22\r\n  25  /talker_23\r\n  26  /talker_24\r\n  27  /talker_29\r\n  28  /talker_26\r\n  29  /talker_25\r\n  30  /talker_27\r\n```",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19761)](http://ci.ros2.org/job/ci_linux/19761/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14263)](http://ci.ros2.org/job/ci_linux-aarch64/14263/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20487)](http://ci.ros2.org/job/ci_windows/20487/)",
      "@clalancette would it be possible to backport this change to Humble and Iron? It shouldn't change existing behavior.",
      "@esteve while backporting, we will need to adjust the following for `humble` (not sure about `iron` yet):\r\n\r\n![Screenshot from 2023-11-09 17-51-45](https://github.com/ros2/rclcpp/assets/10751153/21c28073-7cf8-4649-acc5-f7e8427160a4)\r\n(left his humble, right is rolling)\r\n\r\nIt complains:\r\n```\r\ncannot convert\r\n‚Äòrclcpp::ServicesQoS(rclcpp::QoSInitialization::from_rmw(rmw_qos_profile_services_default)).rclcpp::ServicesQoS::<anonymous>.rclcpp::QoS::keep_last(200)‚Äô\r\n(type ‚Äòrclcpp::QoS‚Äô) to type ‚Äòconst rmw_qos_profile_t&‚Äô {aka ‚Äòconst rmw_qos_profile_s&‚Äô}\r\n```\r\n\r\nUsing `rclcpp::ServicesQoS().keep_last(200).get_rmw_qos_profile()` solves it for the `humble`.\r\n```\r\n  loadNode_srv_ = create_service<LoadNode>(\r\n    \"~/_container/load_node\",\r\n    std::bind(&ComponentManager::on_load_node, this, _1, _2, _3),\r\n    rclcpp::ServicesQoS().keep_last(200).get_rmw_qos_profile());\r\n  unloadNode_srv_ = create_service<UnloadNode>(\r\n    \"~/_container/unload_node\",\r\n    std::bind(&ComponentManager::on_unload_node, this, _1, _2, _3),\r\n    rclcpp::ServicesQoS().keep_last(200).get_rmw_qos_profile());\r\n```",
      "> @clalancette would it be possible to backport this change to Humble and Iron? It shouldn't change existing behavior.\r\n\r\nWe can consider doing this, yes.  However, I would like to let it sit in Rolling a little bit before we do that.",
      "@Mergifyio backport humble iron",
      "> backport humble iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2380 fix(rclcpp_components): increase the service queue sizes in component_container (backport #2363)](https://github.com/ros2/rclcpp/pull/2380) has been created for branch `humble`\n* [#2381 fix(rclcpp_components): increase the service queue sizes in component_container (backport #2363)](https://github.com/ros2/rclcpp/pull/2381) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "fix(rclcpp_components): increase the service queue sizes in component_container (#2363)\n\n* fix(rclcpp_components): increase the service queue sizes in component_container\r\n\r\nSigned-off-by: M. Fatih Cƒ±rƒ±t <mfc@leodrive.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740d18912b45d36a70b8",
    "number": 2360,
    "body": "Hello,\r\n\r\nwhile working on the multithreaded executor, I encountered a problem.\r\n\r\nTake the following configuration:\r\nOne node, with two timers, each timer with a period of 1000ms, and an execution time of 1000ms per timer. Both timers are in a mutually exclusive callback group.\r\nDue to the current structure of the multithreaded executor, only one timer will be executed, while the other one will never be executed.\r\nI suppose this is due to one thread updating the wait set, while the other one is blocked by the execution. By the time the thread that occupies the callback group is finished, the task of the just finished timer is ready again, and the second timer task is never executed.\r\n\r\nIn my changes, I updated the behavior of the multithreaded executor, so that the wait set is only updated once all the work that is available is done. This guarantees that all callbacks in a mutually exclusive callback group will be executed, even if some of them are ready again. This change should align the behavior of the multithreaded executor more with the behavior of the single threaded executor.\r\n\r\nIf you have any suggestions or feedback for this idea, please let me know.",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "@mjcarroll assigning you to review üßá ",
      "Hm, we ran into the same issue, but as this is a FIFO scheduler, this is intended design from my point of view.\r\nI would say the bug is more on the side, of your timer taking to long to compute.\r\nThe system should output a fat big warning in a case of a timer overrun though.\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621740e18912b45d36a70b9",
    "number": 2358,
    "body": "This PR depended on #2209.  \r\n\r\nThis interface is added for playing service in rosbag2.  \r\n\r\nhttps://github.com/ros2/rosbag2/pull/1481 depended on this PR.",
    "head_branch": "review/topic-generic-client-support",
    "is_a_fork": true,
    "comments": [
      "> https://github.com/ros2/rosbag2/pull/1480, and https://github.com/ros2/rosbag2/pull/1481 depended on this PR.\r\n\r\n@Barry-Xu-2018 this one too, we should close this?",
      "Ah sorry, this one is required to `play service`, right? is this still in `draft` or i can start the review?",
      "> Ah sorry, this one is required to play service, right? is this still in draft or i can start the review?\r\n\r\nYes.  \r\nThis PR was based on https://github.com/ros2/rclcpp/pull/2209 and 2209 isn't merged.  \r\nSo current changed files of this PR include changed file for 2209.  \r\nAfter 2209 is merged, the changes made in this PR can be displayed more clearly.  \r\nSo I set draft for this PR.  \r\n\r\n",
      "Now https://github.com/ros2/rclcpp/pull/2209 has been merged.   \r\nSo do rebase and ready to review.",
      "Build failure is because used rcl codes are old. \r\n\r\n```\r\n20:43:25 /tmp/ws/src/rclcpp/rclcpp/src/rclcpp/logger.cpp:84:9: error: ‚ÄòRCL_RET_NOT_FOUND‚Äô was not declared in this scope; did you mean ‚ÄòRCUTILS_RET_NOT_FOUND‚Äô?\r\n20:43:25    84 |     if (RCL_RET_NOT_FOUND == rcl_ret) {\r\n20:43:25       |         ^~~~~~~~~~~~~~~~~\r\n20:43:25       |         RCUTILS_RET_NOT_FOUND\r\n```",
      "@iuhilnehc-ynos can you do another review on this?",
      "@iuhilnehc-ynos \r\n\r\nThank you for your comments. I will handle them. ",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20034)](http://ci.ros2.org/job/ci_linux/20034/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14498)](http://ci.ros2.org/job/ci_linux-aarch64/14498/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20762)](http://ci.ros2.org/job/ci_windows/20762/)",
      "> lgtm, one comment needs to be resolved.\r\n\r\nSorry, I missed it. I will fix it.  ",
      "After checking log, the CI failure for Linux is related to CI system.    \r\nAbout the CI failure for Window, I will investigate it. ",
      "@fujitatomoya Please help re-run the CI.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20038)](http://ci.ros2.org/job/ci_linux/20038/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14501)](http://ci.ros2.org/job/ci_linux-aarch64/14501/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20765)](http://ci.ros2.org/job/ci_windows/20765/)",
      "For `Linux-aarch64`, the failure case 'ros2topic.ros2topic.test.test_cli.test_cli' is unrelated to this patch.  ",
      "@wjwwood  \r\nThank you for your advice.\r\n\r\n> One of the bigger issues I have with the implementation (as opposed to the concept) is that we're copy-pasting a lot of code from the client class for this new generic class, and especially for the tests it's a lot. I think the goal for the tests should be to (as often as possible) have the same tests run over both the normal and generic client classes and where it doesn't make sense it should be easy to see which tests don't apply to the generic client and why.\r\n\r\nYes. I will optimize test codes.",
      "Thanks, you can have a look at some of the executor tests for examples of tests that run over several different classes by parameterization of the test.",
      "https://github.com/ros2/rclcpp/blob/6f6b5f2e3608eafeadb908aa4f6eded5b38c3043/rclcpp/test/rclcpp/executors/test_executors.cpp#L121-L146",
      "@wjwwood \r\n\r\nI submitted changes https://github.com/ros2/rclcpp/pull/2358/commits/69145c492c29edf5f69d7a6531d8ddd8dc3f684e.  \r\n1. Move common tests for Client and GenericClient to test_client_common.cpp. \r\n2. Add new interface create_generic_client with NodeT parameter.  https://github.com/ros2/rclcpp/pull/2358#discussion_r1448088642\r\n3. Use function for common function https://github.com/ros2/rclcpp/pull/2358#discussion_r1446233703",
      "me and @iuhilnehc-ynos 's comments are resolved. i will start the Full CI.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20405)](http://ci.ros2.org/job/ci_linux/20405/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14815)](http://ci.ros2.org/job/ci_linux-aarch64/14815/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21154)](http://ci.ros2.org/job/ci_windows/21154/)",
      "> @wjwwood\r\n> \r\n> I submitted changes [69145c4](https://github.com/ros2/rclcpp/commit/69145c492c29edf5f69d7a6531d8ddd8dc3f684e).\r\n> \r\n> 1. Move common tests for Client and GenericClient to test_client_common.cpp.\r\n> 2. Add new interface create_generic_client with NodeT parameter.  [Implement generic client¬†#2358 (comment)](https://github.com/ros2/rclcpp/pull/2358#discussion_r1448088642)\r\n> 3. Use function for common function [Implement generic client¬†#2358 (comment)](https://github.com/ros2/rclcpp/pull/2358#discussion_r1446233703)\r\n\r\n@wjwwood can you review your comments?",
      "> \r\n> * Linux [![Build Status](https://camo.githubusercontent.com/531a2828374b40b2d313be2d247e7c3f39e2ad86f75560874bd42233e62768b9/687474703a2f2f63692e726f73322e6f72672f6275696c645374617475732f69636f6e3f6a6f623d63695f6c696e7578266275696c643d3230343035)](http://ci.ros2.org/job/ci_linux/20405/)\r\n> * Linux-aarch64 [![Build Status](https://camo.githubusercontent.com/07599995503c924a42b6b09e09cdb57d71d7dc6c9c849100ee78edbb67cbf352/687474703a2f2f63692e726f73322e6f72672f6275696c645374617475732f69636f6e3f6a6f623d63695f6c696e75782d61617263683634266275696c643d3134383135)](http://ci.ros2.org/job/ci_linux-aarch64/14815/)\r\n> * Windows [![Build Status](https://camo.githubusercontent.com/cd94cb6ac803fb3629d0df3facb8a00737a051f4a2367c1a632de8c9220730c2/687474703a2f2f63692e726f73322e6f72672f6275696c645374617475732f69636f6e3f6a6f623d63695f77696e646f7773266275696c643d3231313534)](http://ci.ros2.org/job/ci_windows/21154/)\r\n\r\nI checked failed cases. \r\nThe reason for the test failure is unrelated to this PR."
    ],
    "commit_messages": [
      "Implement generic client (#2358)\n\n* Implement generic client\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Fix the incorrect parameter declaration\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Deleted copy constructor and assignment for FutureAndRequestId\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Update codes after rebase\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Address review comments from iuhilnehc-ynos\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Correct an error in a description\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Fix window build errors\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Address review comments from William\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Add doc strings to create_generic_client\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621740f18912b45d36a70ba",
    "number": 2357,
    "body": null,
    "head_branch": "topic-align-with-rcl",
    "is_a_fork": true,
    "comments": [
      "CI for this is in https://github.com/ros2/rcl/pull/1115#issuecomment-1809415104"
    ],
    "commit_messages": [
      "aligh with rcl that a rosout publisher of a node might not exist (#2357)\n\n* aligh with rcl\r\n\r\n* keep same behavior with rclpy\r\n\r\n1. to not throw exception durning rcl_logging_rosout_remove_sublogger\r\n2. reset error message for RCL_RET_NOT_FOUND\r\n\r\n* test for a node with rosout disabled\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741018912b45d36a70bb",
    "number": 2356,
    "body": "fix spelling mistake when I was learnig this code üò∏ ",
    "head_branch": "1-fix-spelling",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19729)](http://ci.ros2.org/job/ci_linux/19729/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14235)](http://ci.ros2.org/job/ci_linux-aarch64/14235/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20455)](http://ci.ros2.org/job/ci_windows/20455/)"
    ],
    "commit_messages": [
      "fix (signal_handler.hpp): spelling (#2356)\n\nSigned-off-by: Zard-C <patrick.zhang5233@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621741218912b45d36a70bc",
    "number": 2355,
    "body": "This is an automatic backport of pull request #2352 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2352",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19726)](http://ci.ros2.org/job/ci_linux/19726/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14232)](http://ci.ros2.org/job/ci_linux-aarch64/14232/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20451)](http://ci.ros2.org/job/ci_windows/20451/)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741318912b45d36a70bd",
    "number": 2354,
    "body": "This is an automatic backport of pull request #2352 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2352",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19727)](http://ci.ros2.org/job/ci_linux/19727/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14233)](http://ci.ros2.org/job/ci_linux-aarch64/14233/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20452)](http://ci.ros2.org/job/ci_windows/20452/)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741418912b45d36a70be",
    "number": 2353,
    "body": "gcc 13.1.1 complains that these uses inhibit copy elision.",
    "head_branch": "clalancette/remove-std-move",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19723)](http://ci.ros2.org/job/ci_linux/19723/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14225)](http://ci.ros2.org/job/ci_linux-aarch64/14225/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20453)](http://ci.ros2.org/job/ci_windows/20453/)",
      "> I am not sure what exactly complains but that means the compiler can manage it, right?\r\n\r\nYeah, I believe it is the case that the compiler will remove the copies as necessary."
    ],
    "commit_messages": [
      "Updates to not use std::move in some places. (#2353)\n\ngcc 13.1.1 complains that these uses inhibit copy elision.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741518912b45d36a70bf",
    "number": 2352,
    "body": "address https://github.com/ros2/rclcpp/issues/2348",
    "head_branch": "fujitatomoya/rclcpp-issue-2348",
    "is_a_fork": false,
    "comments": [
      "CC: @clalancette ",
      "@fujitatomoya  LGTM. Thank you for implementing this!",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19717)](http://ci.ros2.org/job/ci_linux/19717/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14226)](http://ci.ros2.org/job/ci_linux-aarch64/14226/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20445)](http://ci.ros2.org/job/ci_windows/20445/)",
      "@Mergifyio backport humble iron",
      "> backport humble iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2354 rclcpp::Time::max() clock type support. (backport #2352)](https://github.com/ros2/rclcpp/pull/2354) has been created for branch `humble`\n* [#2355 rclcpp::Time::max() clock type support. (backport #2352)](https://github.com/ros2/rclcpp/pull/2355) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "rclcpp::Time::max() clock type support. (#2352)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621741618912b45d36a70c0",
    "number": 2351,
    "body": "In the type description service construction, we were previously passing the shared_ptr to the rcl_service_t with the assumption that rclcpp::Service would do the clean up.  This was an incorrect assumption, and so I have added a custom deleter to fini the service and delete when the shared_ptr is cleaned up.\r\n\r\nFixes leak introduced in #2344",
    "head_branch": "mjcarroll/delete_rcl_service",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19706)](http://ci.ros2.org/job/ci_linux/19706/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14215)](http://ci.ros2.org/job/ci_linux-aarch64/14215/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20435)](http://ci.ros2.org/job/ci_windows/20435/)",
      "New CI with uncrustify fixes:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19709)](http://ci.ros2.org/job/ci_linux/19709/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14219)](http://ci.ros2.org/job/ci_linux-aarch64/14219/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20438)](http://ci.ros2.org/job/ci_windows/20438/)"
    ],
    "commit_messages": [
      "Add a custom deleter when constructing rcl_service_t (#2351)\n\n* Add a custom deleter when constructing rcl_service_t\r\n\r\nIn the type description service construction, we were previously passing\r\nthe shared_ptr to the rcl_service_t with the assumption that\r\nrclcpp::Service would do the clean up.  This was an incorrect\r\nassumption, and so I have added a custom deleter to fini the service and\r\ndelete when the shared_ptr is cleaned up.\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741718912b45d36a70c1",
    "number": 2349,
    "body": "Both the `EventHandler` and its associated pubs/subs share the same underlying rmw event listener:\r\n\r\n`EventHandler --> rmw_event_listener <-- Pub/Sub` \r\n\r\nWhen a pub/sub is destroyed, that listener is destroyed.\r\nThere is a data race when the `~EventHandlerBase` calls  `clear_on_ready_callback()`, since it wants to access the listener that could have already been destroyed, thus causing a segfault.\r\n\r\nOn other hand, the derived `EventHandler` _does_ store a shared_ptr of its associated pub/sub (`parent_handle_`), thus clearing the callbacks on `~EventHandler` instead of `~EventHandlerBase` avoids the race, since the pub/sub are still valid on the `parent_handle_` so the listener is also still valid.\r\n\r\nI managed to reproduce the issue on Galactic/Humble/Iron using the example provided here: https://github.com/ros2/rmw_fastrtps/issues/717#issue-1923877969\r\n\r\nOn rolling, I only managed to reproduce using the EventsExecutor version on its [standalone repo](https://github.com/irobot-ros/events-executor). Even without being able to reproduce properly on rolling, I think this fix may be correct and could avoid future issues. What do you think?",
    "head_branch": "mauro/rolling-fix-data-race",
    "is_a_fork": true,
    "comments": [
      "```shell\r\n02:45:59 /tmp/ws/src/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_type_descriptions.cpp:89:77: error: cannot convert ‚Äòstd::__shared_ptr<rcl_service_s, __gnu_cxx::_S_atomic>::element_type*‚Äô {aka ‚Äòrcl_service_s*‚Äô} to ‚Äòrcl_node_t*‚Äô {aka ‚Äòrcl_node_s*‚Äô}\r\n02:45:59    89 |       rcl_ret_t rcl_ret = rcl_node_type_description_service_init(rcl_srv.get(), rcl_node);\r\n02:45:59       |                                                                  ~~~~~~~~~~~^~\r\n02:45:59       |                                                                             |\r\n02:45:59       |                                                                             std::__shared_ptr<rcl_service_s, __gnu_cxx::_S_atomic>::element_type* {aka rcl_service_s*}\r\n02:45:59 In file included from /tmp/ws/src/rclcpp/rclcpp/include/rclcpp/node_interfaces/node_base_interface.hpp:23,\r\n02:45:59                  from /tmp/ws/src/rclcpp/rclcpp/include/rclcpp/node_interfaces/node_type_descriptions.hpp:21,\r\n02:45:59                  from /tmp/ws/src/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_type_descriptions.cpp:19:\r\n```",
      "@Zard-C I think you may need to update `rcl` to include https://github.com/ros2/rcl/pull/1112",
      "Also I'd like to discuss the fact that the `EventHandler` holds a shared pointer of the pub/sub, so the lifetime of the latter is subjected to the former. So, for example:\r\n```\r\n auto sub = std::make_shared<Sub>...\r\n auto event_handler = std::make_shared<EventHandler>(sub)\r\n sub.reset();  // This wouldn't actually delete the subscription\r\n event_handler.reset(); // Now the subscription is deleted.\r\n```\r\nMaybe would be better if `EventHandler` stores a weak pointer of the pub/sub, and should lock it when needed.",
      "> Maybe would be better if EventHandler stores a weak pointer of the pub/sub, and should lock it when needed.\r\n\r\nGenerally, as a pattern I think this is safer, but it also incurs some cost of dealing with atomics every time you want to interact with the pub/sub",
      "> @Zard-C I think you may need to update `rcl` to include [ros2/rcl#1112](https://github.com/ros2/rcl/pull/1112)\r\n\r\nThx mjcarroll, I will try",
      "Hi, could someone please trigger CI including what's specified here? https://github.com/ros2/rclcpp/pull/2349#issuecomment-1790702795\r\nThanks!",
      "@ros-pull-request-builder retest this please",
      "CI seems to have succeeded. Anything else required to merge? ",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19774)](http://ci.ros2.org/job/ci_linux/19774/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14277)](http://ci.ros2.org/job/ci_linux-aarch64/14277/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20500)](http://ci.ros2.org/job/ci_windows/20500/)",
      "@Mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2387 Fix data race in ~EventHandlerBase (backport #2349)](https://github.com/ros2/rclcpp/pull/2387) has been created for branch `iron`\n* [#2388 Fix data race in ~EventHandlerBase (backport #2349)](https://github.com/ros2/rclcpp/pull/2388) has been created for branch `humble` but encountered conflicts\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Fix data race in EventHandlerBase (#2349)\n\nBoth the EventHandler and its associated pubs/subs share\r\nthe same underlying rmw event listener.\r\nWhen a pub/sub is destroyed, the listener is destroyed.\r\nThere is a data race when the ~EventHandlerBase wants\r\nto access the listener after it has been destroyed.\r\n\r\nThe EventHandler stores a shared_ptr of its associated pub/sub.\r\nBut since we were clearing the listener event callbacks on the\r\nbase class destructor ~EventHandlerBase, the pub/sub was\r\nalready destroyed, which means the rmw event listener was also\r\ndestroyed, thus causing a segfault when trying to obtain it\r\nto clear the callbacks.\r\n\r\nClearing the callbacks on ~EventHandler instead of\r\n~EventHandlerBase avoids the race, since the pub/sub are still valid.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621741818912b45d36a70c2",
    "number": 2347,
    "body": "This is an automatic backport of pull request #2345 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2345",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing 'enable_rosout' comments (#2345) (#2347)\n\nSigned-off-by: Jiaqi Li <ljq0831@qq.com>\r\n(cherry picked from commit fff009a75100f2afd8ef1c3863620bf5ebe67708)\r\n\r\nCo-authored-by: Jiaqi Li <ljq0831@qq.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741918912b45d36a70c3",
    "number": 2346,
    "body": "This is an automatic backport of pull request #2345 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2345",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing 'enable_rosout' comments (#2345) (#2346)\n\nSigned-off-by: Jiaqi Li <ljq0831@qq.com>\r\n(cherry picked from commit fff009a75100f2afd8ef1c3863620bf5ebe67708)\r\n\r\nCo-authored-by: Jiaqi Li <ljq0831@qq.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741a18912b45d36a70c4",
    "number": 2345,
    "body": "Add missing `enable_rosout = true` to node options default values comments ",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "https://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/1161/console is not related to this PR. since this is just a doc fix, i will go ahead to merge this.",
      "@Mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2346 Add missing 'enable_rosout' comments (backport #2345)](https://github.com/ros2/rclcpp/pull/2346) has been created for branch `iron`\n* [#2347 Add missing 'enable_rosout' comments (backport #2345)](https://github.com/ros2/rclcpp/pull/2347) has been created for branch `humble`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Add missing 'enable_rosout' comments (#2345)\n\nSigned-off-by: Jiaqi Li <ljq0831@qq.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741c18912b45d36a70c5",
    "number": 2344,
    "body": "In https://github.com/ros2/rcl/pull/1112, the API is updated to populate the service structure, rather than `init`, `get`, and `fini`.  This updates rclcpp to use the new API pattern.",
    "head_branch": "mjcarroll/fini_service",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Adjust rclcpp usage of type description service (#2344)\n\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741d18912b45d36a70c6",
    "number": 2343,
    "body": "This allows us to get the correct time of the timer callback as node->now() can\r\nreturn a later timestamp than 'expected' due to race conditions.\r\n\r\nThis commit depends on https://github.com/ros2/rcl/pull/1113",
    "head_branch": "timer_info_rolling",
    "is_a_fork": true,
    "comments": [
      "@clalancette : ping",
      "@wjwwood  @mjcarroll  @fujitatomoya Ping, I would like to see this merged for jazzy",
      "@fujitatomoya Thanks for the review, I'll update the PR accordingly. \r\n\r\n> besides, test would be ideal.\r\n\r\nHm, I'm not really sure what to test here, the only thing I can think of would be that the info contains somewhat expected values.\r\n",
      "@fujitatomoya  Added a simple test. And updated the commits.",
      "I haven't looked in this in too much detail, but I have to say that the use of (effectively) a `void *` pointer here is extremely suspicious.  It doesn't give us any type checking at all.  Can you give us more detail on exactly what this change is fixing?",
      "> I haven't looked in this in too much detail, but I have to say that the use of (effectively) a `void *` pointer here is extremely suspicious. It doesn't give us any type checking at all. Can you give us more detail on exactly what this change is fixing?\r\n\r\nSee https://github.com/ros2/rclcpp/pull/2343#discussion_r1495498430 for the concrete example, of what we are trying to fix here.\r\n\r\nThe pointer returned by take_data is void, as you need to assign it to the AnyExecutable here\r\nhttps://github.com/ros2/rclcpp/blob/10252e9f66ac87f3903f301b64320d32457f0658/rclcpp/include/rclcpp/any_executable.hpp#L50\r\nin order to pass it on inside of the Executor.\r\n\r\nThis is pretty much the standard in this area of the code, see \r\nhttps://github.com/ros2/rclcpp/blob/10252e9f66ac87f3903f301b64320d32457f0658/rclcpp/include/rclcpp/waitable.hpp#L158-L161\r\nfor reference.\r\n",
      "> I haven't looked in this in too much detail, but I have to say that the use of (effectively) a void * pointer here is extremely suspicious. It doesn't give us any type checking at all. \r\n\r\nThis is standard for the executor/waitable model.  The waitable is supposed to return a data handle that can be associated when the actual `execute` call happens.  This is because a single waitable can, by design, have multiple ready executables internally",
      "> This is standard for the executor/waitable model. The waitable is supposed to return a data handle that can be associated when the actual `execute` call happens. This is because a single waitable can, by design, have multiple ready executables internally\r\n\r\n@mjcarroll Do you think the approach I took is viable, or should I look into something more typesafe ?\r\nNote, this would mean, that we need to replace data in AnyExecutable by a std::variant,",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20588)](http://ci.ros2.org/job/ci_linux/20588/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14949)](http://ci.ros2.org/job/ci_linux-aarch64/14949/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21312)](http://ci.ros2.org/job/ci_windows/21312/)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20659)](http://ci.ros2.org/job/ci_linux/20659/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14990)](http://ci.ros2.org/job/ci_linux-aarch64/14990/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21362)](http://ci.ros2.org/job/ci_windows/21362/)",
      "reworked patch after merge of https://github.com/ros2/rclcpp/pull/2142",
      "CI (without https://github.com/ros2/examples/pull/375)\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20669)](http://ci.ros2.org/job/ci_linux/20669/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14996)](http://ci.ros2.org/job/ci_linux-aarch64/14996/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21370)](http://ci.ros2.org/job/ci_windows/21370/)",
      "I'm going to suggest we pause on these types of changes for the moment.  We have regressions right now that we need to track down, possibly related to either https://github.com/ros2/rcl/pull/1135 or https://github.com/ros2/rclcpp/pull/2142.\r\n\r\nSee * Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20668)](http://ci.ros2.org/job/ci_linux/20668/)",
      "@jmachowinski probably we want to rebase this before restarting CI since some fixes are merged in a week?",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20761)](http://ci.ros2.org/job/ci_linux/20761/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15060)](http://ci.ros2.org/job/ci_linux-aarch64/15060/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21440)](http://ci.ros2.org/job/ci_windows/21440/)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20762)](http://ci.ros2.org/job/ci_linux/20762/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15061)](http://ci.ros2.org/job/ci_linux-aarch64/15061/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21441)](http://ci.ros2.org/job/ci_windows/21441/)",
      "Can I somehow tell the auto CI, that this PR and https://github.com/ros2/examples/pull/375 belong together, and I should build using both ?",
      "The `Rpr` job isn't aware of cross-repo changes, but we can submit any arbitrary `ros2.repos` file to the other CI.  Is it just those two branches that need to be done together?",
      "> The `Rpr` job isn't aware of cross-repo changes, but we can submit any arbitrary `ros2.repos` file to the other CI. Is it just those two branches that need to be done together?\r\n\r\nYes, this and examples.",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20824)](http://ci.ros2.org/job/ci_linux/20824/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15128)](http://ci.ros2.org/job/ci_linux-aarch64/15128/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21511)](http://ci.ros2.org/job/ci_windows/21511/)",
      "Had a follow up to this one: https://github.com/ros2/rclcpp/pull/2501",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/ros-2-jazzy-jalisco-released/37862/1\n"
    ],
    "commit_messages": [
      "Added optional TimerInfo to timer callback (#2343)\n\nSigned-off-by: Alexis Tsogias <a.tsogias@cellumation.com>\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\nCo-authored-by: Alexis Tsogias <a.tsogias@cellumation.com>\r\nCo-authored-by: Janosch Machowinski <J.Machowinski@cellumation.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621741e18912b45d36a70c7",
    "number": 2342,
    "body": "This is an automatic backport of pull request #2329 done by [Mergify](https://mergify.com).\nCherry-pick of fcbe64cff4bea3109531254ceb2955dc4b1bb320 has failed:\n```\nOn branch mergify/bp/humble/pr-2329\nYour branch is up to date with 'origin/humble'.\n\nYou are currently cherry-picking commit fcbe64cf.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   rclcpp/src/rclcpp/context.cpp\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   rclcpp/src/rclcpp/rate.cpp\n\tboth modified:   rclcpp/test/rclcpp/test_rate.cpp\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2329",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19685)](http://ci.ros2.org/job/ci_linux/19685/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14191)](http://ci.ros2.org/job/ci_linux-aarch64/14191/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20415)](http://ci.ros2.org/job/ci_windows/20415/)"
    ],
    "commit_messages": [
      "address rate related flaky tests. (#2329) (#2342)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit fcbe64cff4bea3109531254ceb2955dc4b1bb320)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621741f18912b45d36a70c8",
    "number": 2341,
    "body": "This is an automatic backport of pull request #2329 done by [Mergify](https://mergify.com).\nCherry-pick of fcbe64cff4bea3109531254ceb2955dc4b1bb320 has failed:\n```\nOn branch mergify/bp/iron/pr-2329\nYour branch is up to date with 'origin/iron'.\n\nYou are currently cherry-picking commit fcbe64cf.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   rclcpp/src/rclcpp/context.cpp\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   rclcpp/src/rclcpp/rate.cpp\n\tboth modified:   rclcpp/test/rclcpp/test_rate.cpp\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2329",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19686)](http://ci.ros2.org/job/ci_linux/19686/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14192)](http://ci.ros2.org/job/ci_linux-aarch64/14192/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20416)](http://ci.ros2.org/job/ci_windows/20416/)"
    ],
    "commit_messages": [
      "address rate related flaky tests. (#2329) (#2341)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit fcbe64cff4bea3109531254ceb2955dc4b1bb320)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742018912b45d36a70c9",
    "number": 2339,
    "body": "1. Remove the default Logger copy constructor without copy assignment (rule of three -> rule of zero).\r\n2. Remove an unnecessary capture in a lambda.\r\n3. Mark a variable unused.\r\n4. Mark a method as override.",
    "head_branch": "clalancette/clang-fixes",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19675)](http://ci.ros2.org/job/ci_linux/19675/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14182)](http://ci.ros2.org/job/ci_linux-aarch64/14182/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20399)](http://ci.ros2.org/job/ci_windows/20399/)\r\n* Clang [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux_clang_libcxx&build=37)](http://ci.ros2.org/job/ci_linux_clang_libcxx/37/)\r\n",
      "All of the jobs that are yellow here are also yellow on nightly CI, with the same failures.  So I'm going to go ahead with this (the rest of the failing CI is likely due to a separate change).  Thanks for the review!"
    ],
    "commit_messages": [
      "Fixes pointed out by the clang analyzer. (#2339)\n\n1. Remove the default Logger copy constructor without copy\r\nassignment (rule of three -> rule of zero).\r\n2. Remove an unnecessary capture in a lambda.\r\n3. Mark a variable unused.\r\n4. Mark a method as override.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621742118912b45d36a70ca",
    "number": 2338,
    "body": "Adds a method in `PublisherBase` that returns the number of matched subscriptions that are not in the same context as the publisher.\r\n\r\nIt also makes inter-process publishing depend on this new method.\r\n\r\nDepends on https://github.com/ros2/rcl/pull/1111\r\n\r\nPart of https://github.com/ros2/rclcpp/issues/2202\r\n\r\nfull repos file [here](https://gist.github.com/MiguelCompany/c92eb293f97ad82ced4aa1f4b0c60d5e/raw/fe4f53f423377908cf2cebfd7bc666c3d67a356f/count_non_local_subscriptions_rolling.repos)",
    "head_branch": "feature/count_non_local_subscriptions",
    "is_a_fork": true,
    "comments": [
      "Can we add a couple of unit-tests?",
      "@MiguelCompany Friendly ping. Would you be willing to address @fujitatomoya's feedback?\r\n",
      "I've been testing the new feature enabled by:\r\n```\r\nbool inter_process_publish_needed = get_non_local_subscription_count() > 0;\r\n```      \r\nThis not only fixes the \"double delivery\" issue (local subscription receiving intra & inter process message), but also reduces CPU at startup and destruction of subscriptions.\r\n\r\nWhen creating a subscription, there is a short time gap in which the intra-process subscription has not yet been created, so messages come through inter-process (serialization/deserialization/etc) causing high CPU utillization. \r\nThe same happens when the subscription is destroyed, since first the intra-process subscription is destroyed, it'll receive messages through the DDS until the whole subscription is destroyed.\r\n\r\nThis is particularly noticeable for `/parameter_events` built in subscriptions: in a big system with many nodes using parameters, these subscriptions might receive thousands of inter-process messages at startup. \r\n",
      "Correction about my statement above:\r\n> This not only fixes the \"double delivery\" issue..\r\n\r\nThis PR _doesn't_ fix the double delivery issue. It _does_ avoid getting inter-process messages at creation/destruction of subscriptions.\r\n\r\nIs there anything missing to avoid the double delivery issue @MiguelCompany ? Or is that a separate effort?\r\n\r\n- Process1: `Sub_1 --> /topic <-- Pub` \r\n- Process2: `Sub_2 --> /topic`\r\n- Issue: `Sub_1` receives both inter and intra-process messages\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742218912b45d36a70cb",
    "number": 2337,
    "body": "- Depends from https://github.com/ros-tooling/libstatistics_collector/issues/168\r\n- Follow up on the https://github.com/ros-tooling/libstatistics_collector/issues/168 and prerequisite for the https://github.com/ros2/rclcpp/pull/2274\r\n- Untemlpatize the `rclcpp::topic_statistics::SubscriptionTopicStatistics` class. Now we will be using `message_info` instead of typed deserialized messages in the `handle_message` callbacks. \r\n- Perhaps it will also reduce total build time and final binary size since there will be less code generated per each pub/sub.\r\n\r\naction-ros-ci-repos-supplemental:¬†https://raw.githubusercontent.com/ros2/ros2/rolling/ros2.repos",
    "head_branch": "morlov/use_message_info_in_rclcpp_subscription_topic_statistics",
    "is_a_fork": true,
    "comments": [
      "Gist: https://gist.githubusercontent.com/MichaelOrlov/7f18255c0d8eaa5696c2c9452e1586b0/raw/53c61138ddf61b246cbd59be3f55175186a8a742/ros2.repos\nBUILD args:  --packages-above-and-dependencies rclcpp\nTEST args:  --packages-above rclcpp\nROS Distro: rolling\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12796\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19668)](http://ci.ros2.org/job/ci_linux/19668/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14175)](http://ci.ros2.org/job/ci_linux-aarch64/14175/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20392)](http://ci.ros2.org/job/ci_windows/20392/)",
      "@clalancette @wjwwood The CI is green and PR is ready for additional approval and merge to the rolling.\r\nNote: I don't have permissions to merge it myself.",
      "Oops, it seems that `rclcpp` package didn't pass build check: https://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/1146/console",
      "@Zard-C Rpr job failed because it's build against a binary version of dependencies. And new API that we are using in this PR is not available yet in `libstatistics_collector` binary versions.\r\nHowever, CI on the build farm which is building all packages from sources is passing green.\r\n\r\nI've created PR for `libstatistics_collector`  binary release https://github.com/ros-tooling/libstatistics_collector/pull/173 but it is in review yet.",
      "@ros-pull-request-builder retest this please\r\n"
    ],
    "commit_messages": [
      "Use message_info in SubscriptionTopicStatistics instead of typed message (#2337)\n\n* Use message_info in SubscriptionTopicStatistics instead of typed message\r\n\r\n- Untemplatize the rclcpp::topic_statistics::SubscriptionTopicStatistics\r\nclass. Now we will be using message_info instead of typed deserialized\r\nmessages in the handle_message callbacks.\r\n\r\n* Fix test_receive_stats_include_window_reset by using publisher emulator\r\n\r\n- Emulate publishing messages by directly calling\r\nrclcpp::Subscription::handle_message(msg_shared_ptr, message_info) and\r\nsettling up needed message_info.source_timestamp\r\n\r\nSigned-off-by: Michael Orlov <michael.orlov@apex.ai>\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621742318912b45d36a70cc",
    "number": 2336,
    "body": "Before this commit, the MessageMemoryPool would actually reuse messages in the pool, even if the user had taken additional shared_ptr copies.\r\n\r\nThis commit fixes things so that we properly handle that situation.  In particular, we only return shared_ptrs to the free pool once their use_count has dropped to 1 (meaning only this class still has a reference to it).  We also add in locks, since in a multi-threaded scenario we need to protect against multiple threads accessing the pool at the same time.\r\n\r\nWith this in place, things work as expected when users hold shared_ptr copies.  We also add in a test for this situation.\r\n\r\nOne note about performance: this update preserves the \"no-allocations-at-runtime\" aspect of the MessagePool.  However, there are some tradeoffs with CPU time here, particularly with very large message pools.  This could probably be optimized further to do less work when trying to add items back to the free_list, but I view that as a further enhancement.",
    "head_branch": "clalancette/fix-pool-strategy",
    "is_a_fork": false,
    "comments": [
      "I talked to @wjwwood about this in some detail.\r\n\r\nIn particular, we talked about the interface between Executor::execute_subscription and the memory pools.  The current interface is actually quite odd, in that we get a reference to a `shared_ptr` via `create_message`, but then have to \"return\" it with `return_message`.  But the thing is that this is already a shared_ptr; it should be enough at this point for the executor to drop the reference and let the shared_ptr machinery do the right thing (this right thing might include a custom deleter).\r\n\r\nSo what I'm going to do here is attempt to make it so that `return_message` doesn't actually do anything.  Instead, what I'm going to do is to try to make the pool a pool of raw memory pointers.  During `borrow_message`, we'll actually allocate a `shared_ptr` to wrap that raw memory.  And then we don't need to do any additional work in `return_message`; when the executor drops the reference, it will either be deleted (if the user has not taken a reference), or it will decrease the use_count (in which case it will be deleted later on when the user drops the reference).\r\n\r\nThis same idea works for the default allocation strategy as well; I'll likely open a separate PR for that later.  And beyond that, a similar strategy should also work for the loaned message interface.",
      "OK, I've implemented the latest idea in this PR, and it seems to work fine.  @wjwwood I'd appreciate a look at it to see what you think.",
      "Since I'm actually pretty happy with this implementation now, I'm going to mark it as \"Ready for Review\" and run CI on it as well.",
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19702)](http://ci.ros2.org/job/ci_linux/19702/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14210)](http://ci.ros2.org/job/ci_linux-aarch64/14210/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20403)](http://ci.ros2.org/job/ci_windows/20403/)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19705)](http://ci.ros2.org/job/ci_linux/19705/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14214)](http://ci.ros2.org/job/ci_linux-aarch64/14214/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20434)](http://ci.ros2.org/job/ci_windows/20434/)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19770)](http://ci.ros2.org/job/ci_linux/19770/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14272)](http://ci.ros2.org/job/ci_linux-aarch64/14272/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20496)](http://ci.ros2.org/job/ci_windows/20496/)"
    ],
    "commit_messages": [
      "Support users holding onto shared pointers in the message memory pool (#2336)\n\n* Support users holding onto shared pointers in the message memory pool\r\n\r\nBefore this commit, the MessageMemoryPool would actually\r\nreuse messages in the pool, even if the user had taken\r\nadditional shared_ptr copies.\r\n\r\nThis commit fixes things so that we properly handle that situation.  In particular, \r\nwe allocate memory during class initialization, and delete\r\nit during destruction.  We then run the constructor when\r\nwe hand the pointer out, and the destructor (only) when\r\nwe return it to the pool.  This keeps things consistent.\r\nWe also add in locks, since in a multi-threaded scenario we need\r\nto protect against multiple threads accessing the pool\r\nat the same time.\r\n\r\nWith this in place, things work as expected when users hold\r\nshared_ptr copies.  We also add in a test for this situation.\r\n\r\nOne note about performance: this update preserves the\r\n\"no-allocations-at-runtime\" aspect of the MessagePool.  However,\r\nthere are some tradeoffs with CPU time here, particularly with\r\nvery large message pools.  This could probably be optimized\r\nfurther to do less work when trying to add items back to the\r\nfree_list, but I view that as a further enhancement.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621742418912b45d36a70cd",
    "number": 2335,
    "body": "They are currently unsafe to use; see the comment in the commit for more information.\r\n\r\nThis was originally brought up by https://github.com/ros2/rmw_cyclonedds/issues/469 , but we also had another report of it from Nav2 (parts reproduced here for context):\r\n\r\nFrom @SteveMacenski \r\n```\r\n*    It looks like Fast-DDS returns the same shared pointer memory for multiple subscriber callbacks in a row\r\n*    We take the shared_ptr message from the callback and store it for use. So later on, the community member is identifying that Fast-DDS sets the same underlying memory in msg to the new message, even though we have stored the shared pointer in our code and just reusing it, wiping away our program's state\r\n```\r\n\r\nFrom @wjwwood:\r\n```\r\nThis is probably a bug in rclcpp: https://github.com/ros2/rclcpp/blob/rolling/rclcpp/src/rclcpp/executor.cpp#L626-L662\r\n```",
    "head_branch": "clalancette/disable-executor-loan",
    "is_a_fork": false,
    "comments": [
      "The users can still take loaned messages from subscriptions manually but it will effectively disable zero copy for callbacks until we make more changes. ",
      "Also we should cross reference the existing issue and add the context we got from the Nav2 users here so that future us knows what is going on üòÖ",
      "> which i do agree that is still unsafe, because user still would copy the message in the user callback. (i think that is your concern.)\r\n\r\nYes, that is the major concern.  The original issue mentioned here is https://github.com/ros2/rmw_cyclonedds/issues/469 , though we had another report on it today.\r\n\r\n> (i think you put this as draft because of this.) i am not sure if we can forcibly disable this feature on subscription, since it will disable entire zero copy feature with ROS 2. if we go that way, i feel like we should never have enabled `can_loan_message` on the subscription... üòì\r\n\r\nThe problem is that right now, shared_ptr subscriptions are super dangerous to use.  Users who take a reference to the shared_ptr inside the callback (rightly) expect that the object will persist, but that is not the case with this automatic loaning.  So I kind of think we *have* to make this change for now.\r\n\r\nThat said, we can talk about options for reenabling it in the future.  That's why this draft is just disabling the feature, not removing it.",
      "> Also we should cross reference the existing issue and add the context we got from the Nav2 users here so that future us knows what is going on üòÖ\r\n\r\nGood point.  I'll modify the initial comment to have that context.",
      "While playing around with this, I also noticed another nasty problem with loaned messages.  In particular, if you set a custom memory strategy in your subscription with the current code, like:\r\n\r\n```\r\n  auto msg_pool_strategy = std::make_shared<rclcpp::strategies::message_pool_memory_strategy::MessagePoolMemoryStrategy<pendulum_msgs::msg::JointState, 10>>();\r\n  auto sub = node->create_subscription<pendulum_msgs::msg::JointState>(\"myjointstate\", qos, callback, rclcpp::SubscriptionOptions(), msg_pool_strategy);\r\n```\r\n\r\nThat memory pool strategy will be utterly ignored by the loaned message interface here.  I guess it kind of makes sense, since the \"pool\" is coming from the underlying RMW.  But if that is the case, we should throw an exception or something when the user tries to set a custom one.  Otherwise it is confusing why the strategy is not being used.",
      "@clalancette @wjwwood thanks for the explanation. i am not happy with this üí¶  but so true...\r\n\r\nhow about this approach? cz forcibly and statically hard-code disabling can be surprising (current user who understands this constrain) and leaves us no choice instead of rebuilding.\r\n\r\n```c\r\ndiff --git a/rcl/src/rcl/subscription.c b/rcl/src/rcl/subscription.c\r\nindex 1ca6edd..9b24852 100644\r\n--- a/rcl/src/rcl/subscription.c\r\n+++ b/rcl/src/rcl/subscription.c\r\n@@ -233,7 +233,7 @@ rcl_subscription_get_default_options()\r\n   default_options.rmw_subscription_options = rmw_get_default_subscription_options();\r\n\r\n   // Load disable flag to LoanedMessage via environmental variable.\r\n-  bool disable_loaned_message = false;\r\n+  bool disable_loaned_message = true;\r\n   rcl_ret_t ret = rcl_get_disable_loaned_message(&disable_loaned_message);\r\n   if (ret == RCL_RET_OK) {\r\n     default_options.disable_loaned_message = disable_loaned_message;\r\n@@ -241,7 +241,7 @@ rcl_subscription_get_default_options()\r\n     RCUTILS_SAFE_FWRITE_TO_STDERR(\"Failed to get disable_loaned_message: \");\r\n     RCUTILS_SAFE_FWRITE_TO_STDERR(rcl_get_error_string().str);\r\n     rcl_reset_error();\r\n-    default_options.disable_loaned_message = false;\r\n+    default_options.disable_loaned_message = true;\r\n   }\r\n\r\n   return default_options;\r\n```\r\n\r\nthat said, if user want to use loaned interfaces on the subscription, user must set `export ROS_DISABLE_LOANED_MESSAGES=0`, originally this environmental variable is meant to `disable` but this can be option?",
      "@MiguelCompany @Barry-Xu-2018 @iuhilnehc-ynos you might want to keep eyes on this.",
      "So the latest commit undoes the work here. Instead, all this does now is to print a warning if loaned messages are enabled.  This now needs to go in with https://github.com/ros2/rcl/pull/1110 , which is where we actually do the disabling.",
      "Here is full CI on the pair, just to make sure things work as we expect:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19650)](http://ci.ros2.org/job/ci_linux/19650/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14158)](http://ci.ros2.org/job/ci_linux-aarch64/14158/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20374)](http://ci.ros2.org/job/ci_windows/20374/)",
      "> While I think we should outright disable it if its not safe (for the time being until it is safe), I think this is also reasonable if the performance hit on disabling it always is super significant.\r\n\r\nI ended up doing it this way because there *are* ways to use it safely.  In particular if you use the default message strategy and only use ConstRef callback types, it is safe to use.  That is a common use case, so users who really know what they are doing could opt-in to this to get slightly better performance.\r\n\r\nBut since there are a bunch of other scenarios that users could use (including using the shared_ptr callback type), it should be disabled by default (at least, until we fix it).",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2023-10-12/34178/1\n",
      "CI for this is in https://github.com/ros2/rcl/pull/1110#issuecomment-1791116916",
      "@Mergifyio backport humble iron",
      "> backport humble iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2364 Disable the loaned messages inside the executor. (backport #2335)](https://github.com/ros2/rclcpp/pull/2364) has been created for branch `humble` but encountered conflicts\n* [#2365 Disable the loaned messages inside the executor. (backport #2335)](https://github.com/ros2/rclcpp/pull/2365) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/preparing-for-humble-sync-and-patch-release-2023-11-17/34628/3\n",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/important-announcement-patch-release-3-and-new-packages-for-iron-irwini-2023-11-20/34742/1\n",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/preparing-for-iron-patch-and-sync-2023-11-17/34609/2\n"
    ],
    "commit_messages": [
      "Disable the loaned messages inside the executor. (#2335)\n\n* Disable the loaned messages inside the executor.\r\n\r\nThey are currently unsafe to use; see the comment in the\r\ncommit for more information.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742518912b45d36a70ce",
    "number": 2333,
    "body": null,
    "head_branch": "clalancette/backport-2186",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19634)](http://ci.ros2.org/job/ci_linux/19634/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14142)](http://ci.ros2.org/job/ci_linux-aarch64/14142/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20358)](http://ci.ros2.org/job/ci_windows/20358/)"
    ],
    "commit_messages": [
      "Add missing stdexcept include (#2186) (#2333)\n\nSigned-off-by: √òystein Sture <os@skarvtech.com>\r\nCo-authored-by: √òystein Sture <oysstu@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742618912b45d36a70cf",
    "number": 2332,
    "body": "The callback `on_parameter_event` was internally accessing `node_base_`, which could be already destroyed.\r\n\r\nhttps://github.com/ros2/rclcpp/blob/13abc1beed02a995863c5c115ef758d35485b46b/rclcpp/src/rclcpp/time_source.cpp#L475\r\n\r\nI reproduced this issue also on Galactic, Humble & Iron. It can be reproduced with the example present in this issue:\r\nhttps://github.com/ros2/rmw_fastrtps/issues/717#issue-1923877969\r\n\r\nThis PR stores the node name (which is what the callback wants to know), so we don't risk accessing a deleted node.\r\n\r\nSegfault backtrace:\r\n```C++\r\nThread 3 received signal SIGSEGV, Segmentation fault.\r\n\r\nrclcpp::TimeSource::NodeState::on_parameter_event (this=0x555555a3c950, event=std::shared_ptr<const rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >> (use count 5, weak count 0) = {...}) at rclcpp/rclcpp/src/rclcpp/time_source.cpp:482\r\n482     if (event->node != node_base_->get_fully_qualified_name()) {\r\n\r\n#0  rclcpp::TimeSource::NodeState::on_parameter_event (this=0x555555a3c950, \r\n    event=std::shared_ptr<const rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >> (use count 5, weak count 0) = {...})\r\n    at rclcpp/rclcpp/src/rclcpp/time_source.cpp:482\r\n#1  0x0.. in rclcpp::TimeSource::NodeState::attachNode(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeTopicsInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeGraphInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeLoggingInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeClockInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>)::{lambda(std::shared_ptr<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > const>)#1}::operator()(std::shared_ptr<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > const>) const (__closure=0x555555a2da68, \r\n    event=std::shared_ptr<const rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >> (use count 5, weak count 0) = {...})\r\n    at rclcpp/rclcpp/src/rclcpp/time_source.cpp:298\r\n...\r\n#6  0x0.. in rclcpp::AnySubscriptionCallback<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void> >::dispatch(std::shared_ptr<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > >, rclcpp::MessageInfo const&)::{lambda(auto:1&&)#1}::operator()<std::function<void (std::shared_ptr<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > const>)>&>(std::function<void (std::shared_ptr<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > const>)>&) const (__closure=0x7ffff4cc0190, callback=...)\r\n    at rclcpp/rclcpp/include/rclcpp/any_subscription_callback.hpp:556\r\n...\r\n#12 0x0.. in rclcpp::AnySubscriptionCallback<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void> >::dispatch (\r\n    this=0x555555a2da68, message=std::shared_ptr<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >> (use count 5, weak count 0) = {...}, \r\n    message_info=...) at rclcpp/rclcpp/include/rclcpp/any_subscription_callback.hpp:504\r\n#13 0x0.. in rclcpp::Subscription<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void>, rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void> > >::handle_message (this=0x555555a2d900, \r\n    message=std::shared_ptr<void> (use count 5, weak count 0) = {...}, message_info=...)\r\n    at rclcpp/rclcpp/include/rclcpp/subscription.hpp:343\r\n...\r\n#15 0x0.. in take_and_do_error_handling<rclcpp::Executor::execute_subscription(rclcpp::SubscriptionBase::SharedPtr)::<lambda()>, rclcpp::Executor::execute_subscription(rclcpp::SubscriptionBase::SharedPtr)::<lambda()> >(const char *, const char *, struct {...}, struct {...}) (\r\n    action_description=0x7ffff7cf3c50 \"taking a message from topic\", topic_or_service_name=0x555555aa75d0 \"/parameter_events\", take_action=..., \r\n    handle_action=...) at rclcpp/rclcpp/src/rclcpp/executor.cpp:581\r\n#16 0x0.. in rclcpp::Executor::execute_subscription (subscription=std::shared_ptr<rclcpp::SubscriptionBase> (use count 2, weak count 3) = {...})\r\n    at rclcpp/rclcpp/src/rclcpp/executor.cpp:657\r\n```\r\nFYI @alsora \r\n",
    "head_branch": "mauro/rolling-fix-data-race",
    "is_a_fork": true,
    "comments": [
      "@fujitatomoya yes, https://github.com/ros2/rclcpp/pull/2320 also addresses the issue. Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742818912b45d36a70d0",
    "number": 2331,
    "body": "The comment in the commit explains this clearly, but on Windows ERROR is a macro.  The reuse of it, even as an enum, causes compilation errors on downstream users.  Push the macro and undefine it so downstream consumers can freely include it.\r\n\r\nI found this while trying to get https://github.com/ros/bond_core/pull/83 integrated.  With this in place, I was able to successfully compile.",
    "head_branch": "clalancette/rclcpp-lifecycle-win-include",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19636)](http://ci.ros2.org/job/ci_linux/19636/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14144)](http://ci.ros2.org/job/ci_linux-aarch64/14144/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20360)](http://ci.ros2.org/job/ci_windows/20360/)"
    ],
    "commit_messages": [
      "Fix rclcpp_lifecycle inclusion on Windows. (#2331)\n\nThe comment in the commit explains this clearly, but\r\non Windows ERROR is a macro.  The reuse of it, even\r\nas an enum, causes compilation errors on downstream\r\nusers.  Push the macro and undefine it so downstream\r\nconsumers can freely include it.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742918912b45d36a70d1",
    "number": 2330,
    "body": "address https://github.com/ros2/rcutils/issues/431",
    "head_branch": "issue-rcutils-431",
    "is_a_fork": false,
    "comments": [
      "@clalancette minor fix as we talked, can you help me with review?"
    ],
    "commit_messages": [
      "remove invalid sized allocation test for SerializedMessage. (#2330)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742a18912b45d36a70d2",
    "number": 2329,
    "body": "https://ci.ros2.org/view/nightly/job/nightly_win_rep/3129/testReport/projectroot.test/rclcpp/test_rate/\r\n\r\n> C:\\ci\\ws\\src\\ros2\\rclcpp\\rclcpp\\test\\rclcpp\\test_rate.cpp(61): error: Value of: r.sleep()\r\n\r\nwe did not really change the test here.\r\n\r\nhttps://github.com/ros2/rclcpp/blob/rolling/rclcpp/test/rclcpp/test_rate.cpp#L61\r\n\r\noriginally if it did not miss the cycle, no matter it actually sleeps or not, it will return true.\r\ni think this is intention, since time goes by during calling `sleep` method. if that is racy, it actually does not sleep in here.\r\n\r\n> unknown file: error: C++ exception with description \"context is already initialized\" thrown in the test body.\r\n\r\ni think this is just a secondary problem because `ASSERT_TRUE(r.sleep());` will not get to `rclcpp::shutdown();`.\r\ni believe we should use texture to avoid these possible confusions...\r\n",
    "head_branch": "fujitatomoya/issue-2327",
    "is_a_fork": false,
    "comments": [
      "address https://github.com/ros2/rclcpp/issues/2327",
      "The initial problem is that the `rate_basics` testcase is being failed each time at the second `r.sleep()` call after waiting for some time less than rate period.\r\nFrom the logs it seem that the failure case took exactly 2 seconds:\r\n![consoleText1_marked](https://github.com/ros2/rclcpp/assets/60094858/ba8244ce-4f38-45d2-a675-e15bdfbf5aab)\r\nwhich means that `Rate::sleep()` implementation in both cases called `Clock::sleep_for(1 second)` (`sleep_until()` wrapper) and waited until the end of required period. However for some reasons, in second call it was returned false-state, which from looking in the `Clock::wait_until()` code might be related to situation when the context is not valid or time source was changed during the sleep.\r\n\r\nNow, testing it on Ubuntu, but it is extremely stable: 0 fails after ~700 runs in a row, so this requires some debugging on Windows platform. Unfortunately, I have no Windows setup yet, and according to Murphy's law, at the next week will be OOO without online connection :disappointed: Anyway, I am trying to make Windows local setup until the end of day to get more clues on this.\r\n\r\nAnd, yes, the problem with `context is already initialized` exception - is inducted problem after first assertion failure appeared.",
      "Some updates:\r\nI've prepared the Windows setup and reproduced the problem.\r\nTo get more clues, it was simply inserted print-debug messages to cover all corner cases where the `Rate.sleep()` could return false-state:\r\n```\r\ndiff --git a/rclcpp/src/rclcpp/clock.cpp b/rclcpp/src/rclcpp/clock.cpp\r\nindex f46649a7..e71fc7ad 100644\r\n--- a/rclcpp/src/rclcpp/clock.cpp\r\n+++ b/rclcpp/src/rclcpp/clock.cpp\r\n@@ -169,10 +169,21 @@ Clock::sleep_until(Time until, Context::SharedPtr context)\r\n     }\r\n   }\r\n \r\n+\r\n   if (!context->is_valid() || time_source_changed) {\r\n+    printf(\"ALEX: Clock::sleep_until() expected case ->\\n\"); fflush(stdout);\r\n+    if (!context->is_valid()) {\r\n+      printf(\"ALEX: Clock::sleep_until() context is not valid\\n\"); fflush(stdout);\r\n+    }\r\n+    if (time_source_changed) {\r\n+      printf(\"ALEX: Clock::sleep_until() time source changed\\n\"); fflush(stdout);\r\n+    }\r\n     return false;\r\n   }\r\n \r\n+  if (now() < until) {\r\n+    printf(\"ALEX: Clock::sleep_until() now() < until\\n\"); fflush(stdout);\r\n+  }\r\n   return now() >= until;\r\n }\r\n \r\ndiff --git a/rclcpp/src/rclcpp/rate.cpp b/rclcpp/src/rclcpp/rate.cpp\r\nindex cd071d2c..c9771863 100644\r\n--- a/rclcpp/src/rclcpp/rate.cpp\r\n+++ b/rclcpp/src/rclcpp/rate.cpp\r\n@@ -62,6 +62,7 @@ Rate::sleep()\r\n       last_interval_ = now + period_;\r\n     }\r\n     // Either way do not sleep and return false\r\n+    printf(\"ALEX: Rate::sleep() next_interval <= now\\n\"); fflush(stdout);\r\n     return false;\r\n   }\r\n   // Calculate the time to sleep\r\n```\r\n\r\nAnd here what I've got:\r\n```\r\nC:\\ci\\ws\\build\\rclcpp\\test\\rclcpp\\Release>test_rate.exe\r\nRunning main() from C:\\dev\\ros2_rolling\\src\\gtest_vendor\\src\\gtest_main.cc\r\n[==========] Running 6 tests from 1 test suite.\r\n[----------] Global test environment set-up.\r\n[----------] 6 tests from TestRate\r\n[ RUN      ] TestRate.rate_basics\r\nALEX: Rate::sleep() next_interval <= now\r\nC:\\ci\\ws\\src\\rclcpp\\rclcpp\\test\\rclcpp\\test_rate.cpp(61): error: Value of: r.sleep()\r\n  Actual: false\r\nExpected: true\r\n[  FAILED  ] TestRate.rate_basics (2045 ms)\r\n[ RUN      ] TestRate.wall_rate_basics\r\nunknown file: error: C++ exception with description \"context is already initialized\" thrown in the test body.\r\n[  FAILED  ] TestRate.wall_rate_basics (0 ms)\r\n[ RUN      ] TestRate.generic_rate\r\nC:\\ci\\ws\\src\\rclcpp\\rclcpp\\test\\rclcpp\\test_rate.cpp(254): error: Expected: (period * overrun_ratio) > (delta), actual: 8-byte object <00-00 00-00 00-C0 62-40> vs 8-byte object <70-F8 EA-0B 00-00 00-00>\r\n[  FAILED  ] TestRate.generic_rate (1110 ms)\r\n[ RUN      ] TestRate.from_double\r\n[       OK ] TestRate.from_double (0 ms)\r\n[ RUN      ] TestRate.clock_types\r\n[       OK ] TestRate.clock_types (0 ms)\r\n[ RUN      ] TestRate.incorrect_constuctor\r\n[       OK ] TestRate.incorrect_constuctor (0 ms)\r\n[----------] 6 tests from TestRate (3163 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 6 tests from 1 test suite ran. (3167 ms total)\r\n[  PASSED  ] 3 tests.\r\n[  FAILED  ] 3 tests, listed below:\r\n[  FAILED  ] TestRate.rate_basics\r\n[  FAILED  ] TestRate.wall_rate_basics\r\n[  FAILED  ] TestRate.generic_rate\r\n\r\n 3 FAILED TESTS\r\n\r\nC:\\ci\\ws\\build\\rclcpp\\test\\rclcpp\\Release>\r\n```\r\n\r\nIn other words, we are in case where the next calculated period of time to make a stop is in past, comparing to current time. This will give the following:\r\n\r\n* It seems like this is performance problem: when while sleeping 500ms (with rate period 1000ms), we are actually sleeping more than 1000ms. Other different problem reports, attached here, confirm that the the problem somewhere in actual vs. desired delays during the sleep:\r\n[Fail1.txt](https://github.com/ros2/rclcpp/files/12830917/Fail1.txt)\r\n[Fail2.txt](https://github.com/ros2/rclcpp/files/12830905/Fail3.txt)\r\n[Fail3.txt](https://github.com/ros2/rclcpp/files/12830906/Fail6.txt)\r\nHere is some performance problem on Windows, I suppose.\r\n* Ignoring the `sleep_for` return value in Rate won't resolve the situation, as we've seen it is most like related to incorrect timings while sleeping.\r\n* To sleep, in test it is used `rclcpp::sleep_for()` for wait. How about to play with `std::this_thread::sleep_for()` there instead. Maybe, whether it could give us more precise sleeps?",
      "CC: @Crola1702 ",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19683)](http://ci.ros2.org/job/ci_linux/19683/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14189)](http://ci.ros2.org/job/ci_linux-aarch64/14189/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20413)](http://ci.ros2.org/job/ci_windows/20413/)",
      "Note: we need to backport this to all distributions.",
      "CI failure https://ci.ros2.org/job/ci_linux/19683/testReport/junit/ros2lifecycle.ros2lifecycle.test/test_cli/test_cli/ is known problem from https://github.com/ros2/ros2cli/issues/861\r\n\r\nthis PR is ready to go merge with another review.",
      "@Mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2341 address rate related flaky tests. (backport #2329)](https://github.com/ros2/rclcpp/pull/2341) has been created for branch `iron` but encountered conflicts\n* [#2342 address rate related flaky tests. (backport #2329)](https://github.com/ros2/rclcpp/pull/2342) has been created for branch `humble` but encountered conflicts\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "address rate related flaky tests. (#2329)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742b18912b45d36a70d3",
    "number": 2326,
    "body": "This is the part of #2307 discussion to completely remove `ROSRate` inherited class, as we can not utilize its `clock` well without the subscription to `/clock` topic (which is being done by `rclcpp::TimeSource` attached to the node)",
    "head_branch": "remove-useless-api",
    "is_a_fork": true,
    "comments": [
      "On CI side, `test_executor` was crashed with SIGSEGV code. This might seem to be really strange (flaky situation or environment problem?), since I've tested RCLCPP both locally and on jammy Docker container (made `rclcpp` workspace there and compiled/tested it over rest rolling binaries). There were no testing failures in both cases.",
      "@mjcarroll FYI from waffle I assigned you for review!",
      "@AlexeyMerzlyakov the `test_executor` has some known flakiness in the `Rpr` jobs.  I'm going to run this through CI, and if that comes back green, this should be good to go.\r\n\r\nWe additionally discussed that dropping this API doesn't require a deprecation cycle as it is extremely unlikely that it is used, given that it was introduced after the `iron` release.",
      "Building on the built-in node in workspace /var/lib/jenkins/jobs/ci_launcher/workspace\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19658)](http://ci.ros2.org/job/ci_linux/19658/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14162)](http://ci.ros2.org/job/ci_linux-aarch64/14162/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20378)](http://ci.ros2.org/job/ci_windows/20378/)"
    ],
    "commit_messages": [
      "Remove useless ROSRate class (#2326)\n\nSigned-off-by: Alexey Merzlyakov <alexey.merzlyakov@samsung.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742c18912b45d36a70d4",
    "number": 2325,
    "body": "This is an automatic backport of pull request #2324 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2324",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19603)](http://ci.ros2.org/job/ci_linux/19603/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14113)](http://ci.ros2.org/job/ci_linux-aarch64/14113/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20327)](http://ci.ros2.org/job/ci_windows/20327/)"
    ],
    "commit_messages": [
      "Add missing header required by the rclcpp::NodeOptions type (#2324) (#2325)\n\nSigned-off-by: Ignacio Vizzo <ignacio@dexory.com>\r\n(cherry picked from commit d6bd8baac5bc050ab31e4e7e8ee8b482fd469c14)\r\n\r\nCo-authored-by: Ignacio Vizzo <ignaciovizzo@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742d18912b45d36a70d5",
    "number": 2324,
    "body": "If you guys need more description I'm happy to be more verbose, for the time being, this header file was missing and breaking some builds :+1: ",
    "head_branch": "nacho/fix_node_factory_missing_header",
    "is_a_fork": true,
    "comments": [
      "> Can you please retarget this to the `rolling` branch? Once it is there, we can then backport it to `iron`. Thanks!\r\n\r\ndone",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19594)](http://ci.ros2.org/job/ci_linux/19594/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14105)](http://ci.ros2.org/job/ci_linux-aarch64/14105/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20318)](http://ci.ros2.org/job/ci_windows/20318/)",
      "@Mergifyio backport iron",
      "> backport iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2325 Nacho/fix node factory missing header (backport #2324)](https://github.com/ros2/rclcpp/pull/2325) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->",
      "@clalancette I noticed that this affects Humble as well. Is it safe to backport?",
      "> @clalancette I noticed that this affects Humble as well. Is it safe to backport?\r\n\r\nYeah, we can do that.",
      "@Mergifyio backport humble",
      "> backport humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2407 Nacho/fix node factory missing header (backport #2324)](https://github.com/ros2/rclcpp/pull/2407) has been created for branch `humble`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Add missing header required by the rclcpp::NodeOptions type (#2324)\n\nSigned-off-by: Ignacio Vizzo <ignacio@dexory.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742e18912b45d36a70d6",
    "number": 2323,
    "body": "This is meant to address issue #2314 which adds a custom QoS to the `TopicStatisticsOptions` in `SubscriptionOptionsBase`. This will allow the `statistics` to always have a stable `QoS` even if the subscription may not.",
    "head_branch": "statistics_qos",
    "is_a_fork": true,
    "comments": [
      "That sounds correct to do, I'll go ahead and implement it. There shouldn't be anywhere else where QoS should be added.",
      "I added the tests, but I have two concerns:\r\n - Should the name `statistics_qos_configuration` be shortened to just `qos_configuration`, Since you already have to reference the `StatisticsTopicCollector`.\r\n - Should we use a custom/different QoS compared to `BestAvailableQoS`. I just assumed that the other test subjects in their, were quite random, so that it wouldn't matter too much.",
      "> Should the name statistics_qos_configuration be shortened to just qos_configuration, Since you already have to reference the StatisticsTopicCollector\r\n\r\ni am okay with either. `statistics_qos_configuration` is bit redundant, so it could be just `qos` or `statistics_qos`?\r\n\r\n> Should we use a custom/different QoS compared to BestAvailableQoS. I just assumed that the other test subjects in their, were quite random, so that it wouldn't matter too much.\r\n\r\ni do not think we need it. that would be the test cases for `rclcpp::QoS` class.",
      "@iuhilnehc-ynos requesting 2nd review on this.",
      "@iuhilnehc-ynos thanks for the review üëç (i though it would next week, since you are on vacation üòÖ thank you very much your contribution.) I will start CI.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19602)](http://ci.ros2.org/job/ci_linux/19602/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14112)](http://ci.ros2.org/job/ci_linux-aarch64/14112/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20325)](http://ci.ros2.org/job/ci_windows/20325/)",
      "Is there a reason that the Windows CI was aborted, I assume it didn't fail entirely if both Linux versions succeeded. I would assume that all of the tests failing due to timing out wasn't part of the run.",
      "> Is there a reason that the Windows CI was aborted, I assume it didn't fail entirely if both Linux versions succeeded. I would assume that all of the tests failing due to timing out wasn't part of the run.\r\n\r\nIt aborted because it ran for 15 hours and didn't show signs of finishing.  However, this isn't the first time we've seen this, so it may not be because of this PR.  I'll run it again to see what happens.",
      "* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20389)](http://ci.ros2.org/job/ci_windows/20389/)",
      "With a green CI and completed reviews, is this good to go?",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/ros-2-jazzy-jalisco-released/37862/1\n"
    ],
    "commit_messages": [
      "Adding QoS to subscription options (#2323)\n\n* Adding QoS to subscription options\r\n\r\nSigned-off-by: CursedRock17 <mtglucas1@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621742f18912b45d36a70d7",
    "number": 2322,
    "body": "This is an automatic backport of pull request #2316 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2316",
    "is_a_fork": false,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19600)](http://ci.ros2.org/job/ci_linux/19600/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14110)](http://ci.ros2.org/job/ci_linux-aarch64/14110/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20323)](http://ci.ros2.org/job/ci_windows/20323/)\r\n\r\nEdit: Fixed CI arguments",
      "Rerun windows:\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20326)](http://ci.ros2.org/job/ci_windows/20326/)",
      "Running again due to inconsistent test failures\r\n\r\nFirst run test failures:\r\nprojectroot.test.rclcpp.test_timers_manager\r\nprojectroot.test.test_get_type_description_service__rmw_cyclonedds_cpp\r\nrclcpp.TestTimersManager.timers_thread\r\nrcl.TestGetTypeDescSrvFixture__rmw_cyclonedds_cpp.test_service_init_and_fini_functions\r\n\r\nSecond run test failures:\r\nprojectroot.test.rclcpp.test_executor\r\nrclcpp.test_executor.gtest.missing_result\r\n\r\nRerunning again:\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20330)](http://ci.ros2.org/job/ci_windows/20330/)",
      "Fix for init_and_fini known flake: https://github.com/ros2/rcl/pull/1107 projectroot.test.test_get_type_description_service__rmw_cyclonedds_cpp\r\n\r\nAnd tests test_executor and projectroot.test.rclcpp.test_timers_manager are known flakey.\r\n\r\n\r\n"
    ],
    "commit_messages": [
      "Update SignalHandler get_global_signal_handler to avoid complex types in static memory (#2316) (#2322)\n\n* Update SignalHandler get_global_signal_handler to avoid complex types in static memory\r\n\r\nThis was flagged by msan as a problem.\r\n\r\nThere's a description of why this is a potential problem here: https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\r\n\r\nSigned-off-by: Tully Foote <tullyfoote@intrinsic.ai>\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\n(cherry picked from commit 7c1143dc1502d5dda99a3dfa17124a72dbaea90c)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743018912b45d36a70d8",
    "number": 2321,
    "body": "This is an automatic backport of pull request #2316 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2316",
    "is_a_fork": false,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19601)](http://ci.ros2.org/job/ci_linux/19601/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14111)](http://ci.ros2.org/job/ci_linux-aarch64/14111/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20324)](http://ci.ros2.org/job/ci_windows/20324/)"
    ],
    "commit_messages": [
      "Update SignalHandler get_global_signal_handler to avoid complex types in static memory (#2316) (#2321)\n\n* Update SignalHandler get_global_signal_handler to avoid complex types in static memory\r\n\r\nThis was flagged by msan as a problem.\r\n\r\nThere's a description of why this is a potential problem here: https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\r\n\r\nSigned-off-by: Tully Foote <tullyfoote@intrinsic.ai>\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\n(cherry picked from commit 7c1143dc1502d5dda99a3dfa17124a72dbaea90c)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743118912b45d36a70d9",
    "number": 2320,
    "body": "We need this because it is possible for one thread to be handling the on_parameter_event callback while another one is detaching the node.  This lock will protect that from happening.",
    "head_branch": "clalancette/timesource-locking",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19583)](http://ci.ros2.org/job/ci_linux/19583/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14092)](http://ci.ros2.org/job/ci_linux-aarch64/14092/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20306)](http://ci.ros2.org/job/ci_windows/20306/)",
      "The unstable CI has nothing to do with this PR (it is somewhere down in CycloneDDS), so I'm going to go ahead and merge this in."
    ],
    "commit_messages": [
      "Add locking to protect the TimeSource::NodeState::node_base_ (#2320)\n\nWe need this because it is possible for one thread to\r\nbe handling the on_parameter_event callback while another\r\none is detaching the node.  This lock will protect that\r\nfrom happening.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743318912b45d36a70da",
    "number": 2319,
    "body": "This is an automatic backport of pull request #2292 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2292",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19564)](http://ci.ros2.org/job/ci_linux/19564/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14077)](http://ci.ros2.org/job/ci_linux-aarch64/14077/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20288)](http://ci.ros2.org/job/ci_windows/20288/)"
    ],
    "commit_messages": [
      "Fix C++20 allocator construct deprecation (#2292) (#2319)\n\nSigned-off-by: Guilherme Rodrigues <guilherme.rodrigues@ait.ac.at>\r\n(cherry picked from commit fa732b9ee8000714831568e14486099f2714003d)\r\n\r\nCo-authored-by: AiVerisimilitude <133206333+AiVerisimilitude@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743418912b45d36a70db",
    "number": 2318,
    "body": "This is an automatic backport of pull request #2292 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2292",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19565)](http://ci.ros2.org/job/ci_linux/19565/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14078)](http://ci.ros2.org/job/ci_linux-aarch64/14078/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20292)](http://ci.ros2.org/job/ci_windows/20292/)"
    ],
    "commit_messages": [
      "Fix C++20 allocator construct deprecation (#2292) (#2318)\n\nSigned-off-by: Guilherme Rodrigues <guilherme.rodrigues@ait.ac.at>\r\n(cherry picked from commit fa732b9ee8000714831568e14486099f2714003d)\r\n\r\nCo-authored-by: AiVerisimilitude <133206333+AiVerisimilitude@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743518912b45d36a70dc",
    "number": 2316,
    "body": "This was flagged by msan as a problem. \r\n\r\nThere's a description of why this is a potential problem here: https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\r\n\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19557)](http://ci.ros2.org/job/ci_linux/19557/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14070)](http://ci.ros2.org/job/ci_linux-aarch64/14070/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20278)](http://ci.ros2.org/job/ci_windows/20278/)",
    "head_branch": "tfoote-signal-handler-static-memory",
    "is_a_fork": false,
    "comments": [
      "Not sure why the PR job isn't getting triggered. I'll try close and reopen.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19563)](http://ci.ros2.org/job/ci_linux/19563/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14076)](http://ci.ros2.org/job/ci_linux-aarch64/14076/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20287)](http://ci.ros2.org/job/ci_windows/20287/)",
      "Thanks for the thoughts. I will push this in as it's the best solution we're aware of.",
      "@mergifyio backport humble iron",
      "> backport humble iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2321 Update SignalHandler get_global_signal_handler to avoid complex types in static memory (backport #2316)](https://github.com/ros2/rclcpp/pull/2321) has been created for branch `humble`\n* [#2322 Update SignalHandler get_global_signal_handler to avoid complex types in static memory (backport #2316)](https://github.com/ros2/rclcpp/pull/2322) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Update SignalHandler get_global_signal_handler to avoid complex types in static memory (#2316)\n\n* Update SignalHandler get_global_signal_handler to avoid complex types in static memory\r\n\r\nThis was flagged by msan as a problem.\r\n\r\nThere's a description of why this is a potential problem here: https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\r\n\r\nSigned-off-by: Tully Foote <tullyfoote@intrinsic.ai>\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743618912b45d36a70dd",
    "number": 2315,
    "body": "This is meant to solve the documentation part of issue #721 since the testing part had already been seemingly completed.",
    "head_branch": "list_parameters_documentation",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19566)](http://ci.ros2.org/job/ci_linux/19566/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14079)](http://ci.ros2.org/job/ci_linux-aarch64/14079/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20290)](http://ci.ros2.org/job/ci_windows/20290/)"
    ],
    "commit_messages": [
      "Documentation for list_parameters  (#2315)\n\n* list_parameters documentation\r\n\r\nSigned-off-by: CursedRock17 <mtglucas1@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621743718912b45d36a70de",
    "number": 2313,
    "body": "So this is a PR in response to some TODOs:\r\n> TODO(brawner) remove when destroying Node for Connext is resolved\r\n\r\nThis pull requests just removes these older, stale tests which don't have a purpose. The discussion for this takes place in issue #1250, the pull request that these special tests were added was PR #1253. Then, it seems that [this pull request](https://github.com/ros2/rmw_connext/pull/473) in the old rmw_connext repository was responsible for fixing why these tests were added. \r\n\r\nI figured that since that pull request solved the issue, the TODO requirement was met and there is no reason to have special cases on the tests. I assume we should still keep the tests because they're generalized and still provide value.",
    "head_branch": "connext_tests",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19531)](http://ci.ros2.org/job/ci_linux/19531/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14051)](http://ci.ros2.org/job/ci_linux-aarch64/14051/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20251)](http://ci.ros2.org/job/ci_windows/20251/)\r\n* Linux repeated [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19532)](http://ci.ros2.org/job/ci_linux/19532/)\r\n* Windows repeated [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20252)](http://ci.ros2.org/job/ci_windows/20252/)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19557)](http://ci.ros2.org/job/ci_linux/19557/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14071)](http://ci.ros2.org/job/ci_linux-aarch64/14071/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20279)](http://ci.ros2.org/job/ci_windows/20279/)\r\n* Linux repeated [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19558)](http://ci.ros2.org/job/ci_linux/19558/)\r\n* Windows repeated [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20280)](http://ci.ros2.org/job/ci_windows/20280/)",
      "I rebased this onto the latest.  Here's another try at CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19574)](http://ci.ros2.org/job/ci_linux/19574/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14086)](http://ci.ros2.org/job/ci_linux-aarch64/14086/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20298)](http://ci.ros2.org/job/ci_windows/20298/)\r\n* Linux repeated [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19575)](http://ci.ros2.org/job/ci_linux/19575/)\r\n* Windows repeated [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20299)](http://ci.ros2.org/job/ci_windows/20299/)"
    ],
    "commit_messages": [
      "Removing Old Connext Tests (#2313)\n\n* Removing Old Connext Tests\r\n\r\nSigned-off-by: CursedRock17 <mtglucas1@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743818912b45d36a70df",
    "number": 2312,
    "body": "A small nit but to my understanding declaring a statically typed parameter with an uninitialized value is allowed, what is not allowed is having an uninitialized type, as the exception `InvalidParameterTypeException` also explains.\r\nUpdated the exception message to reflect this.",
    "head_branch": "luca/parameter_type_exception",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19524)](http://ci.ros2.org/job/ci_linux/19524/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14042)](http://ci.ros2.org/job/ci_linux-aarch64/14042/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20243)](http://ci.ros2.org/job/ci_windows/20243/)",
      "It seems not good to me without a test.\r\n\r\nBTW: \r\nhttps://github.com/ros2/rclcpp/blob/a7a9b78feebff603e5c7c5506ce31b89916bde36/rclcpp/test/rclcpp/test_node.cpp#L3436-L3439\r\nIt's the case to test the exception. I think `parameter with an uninitialized value` is good.",
      "> It's the case to test the exception. I think parameter with an uninitialized value is good.\r\n\r\nüëç ",
      "I'm not sure I follow, is the request to add a new test with a parameter named `parameter_with_uninitialized_value` or to change the name of the existing parameter in the test?",
      "Sorry to make you confused. I mean the original exception message seems good to me.\r\nI am not sure why we need this PR.",
      "@luca-della-vedova let me add more explanation here.\r\n\r\ni jumped on the fix and though this change aligns with the `InvalidParameterTypeException`. but as @iuhilnehc-ynos says, it actually checks if that is the `static` typing parameter, it can deduce the type from default value, and if default value is not provided, `InvalidParameterTypeException` will be generated here.\r\n\r\nSo after all, i believe `uninitialized value` is the correct message for user application, because it does not provide the default value to the static typed parameter. sorry i was mistaken too.\r\n\r\n@iuhilnehc-ynos my explanation above makes sense to you? and thanks for pointing that out.",
      "I agree that usually the type is inferred from the default value, however there is an API for `declare_parameter` that takes as an input the parameter type and leaves the value uninitialized [here](https://github.com/ros2/rclcpp/blob/c42745c5baea249ec6159f1100a9a0d745510872/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp#L599-L604).\r\nFrom what I understand if a user was to use it, the exception wouldn't be thrown, but technically in that case they wouldn't have initialized the value, just the type.\r\nFor this reason I thought that the exception message should warn users if they haven't set a type.\r\n\r\nSpecifically, in the tests, [this](https://github.com/ros2/rclcpp/blob/a7a9b78feebff603e5c7c5506ce31b89916bde36/rclcpp/test/rclcpp/test_node.cpp#L3423-L3424) does not throw."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743918912b45d36a70e0",
    "number": 2308,
    "body": "Noticed this got left behind in a branch.\r\n\r\nFor context, this was originally written in 2019 and didn't get reviewed at the time.  I expect that there will also be updates required to bring the document up to date with the current implementation.\r\n\r\nCC: @wjwwood ",
    "head_branch": "mjcarroll/components_architecture_doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743a18912b45d36a70e1",
    "number": 2304,
    "body": "Per discussion in slack CC @wjwwood \r\n\r\nTemplated to support rclcpp::LifecycleNode, nav2_utils::LifecycleNode, and rclcpp::Node interchangably. Unit tests cover the spanning set (e.g. new params added, ensuring old params remain untouched, has nested params). Its overall pretty straight forward. ",
    "head_branch": "copy_all_params_api",
    "is_a_fork": true,
    "comments": [
      "Nodes should be independent from one another (e.g. to allow deploy them in different processes and to allow having generic main.cpp), what's the use-case for this API?",
      "> what's the use-case for this API?\r\n\r\nWe have some situations where we have a node as a server with some plugins or behavior tree or other application that involves user-provided algorithms and systems. We have an internal node we pass onto those systems so that we protect users from making poor choices that deadlock the main server or cause other issues. This is not an issue for a company's internal systems where you control everything and can expect an engineer to have a relatively sophisticated understanding of the overall use of resources, but matters more for user customization of base frameworks. \r\n\r\nFor our example need, we have the BT navigator where we give a client node to the BT's blackboard for nodes to use to create interfaces and callback groups. We'd like those BT nodes to also be able to get the parameters of the BT navigator even though its a separate node technically ",
      "> Nodes should be independent from one another (e.g. to allow deploy them in different processes and to allow having generic main.cpp), what's the use-case for this API?\r\n\r\nThat's definitely the recommendation, but it's not the only way to use them.\r\n\r\nBut that brings up a good point. It would make sense to be able to do this with remote nodes (source, destination, or both) too. But if there's no one asking for that, then maybe we should wait on that version.",
      "@wjwwood @alsora this should meet your requests :smile: \r\n",
      "@fujitatomoya try this on for size \r\n\r\n@wjwwood @alsora anything else you desire?\r\n",
      "@fujitatomoya if this isn't done, I'll have to drive down to San Jose so we can pair program for an hour until its done :stuck_out_tongue: ",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19571)](http://ci.ros2.org/job/ci_linux/19571/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14083)](http://ci.ros2.org/job/ci_linux-aarch64/14083/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20295)](http://ci.ros2.org/job/ci_windows/20295/)",
      "@fujitatomoya this good to go? The test failures here are not related to this PR\r\n\r\n```\r\n23:37:10 The following tests FAILED:\r\n23:37:10 \t 22 - test_client (Failed)\r\n23:37:10 \t 61 - test_publisher (Failed)\r\n23:37:10 \t 78 - test_service (Failed)\r\n23:37:10 \t 80 - test_subscription (Failed)\r\n23:37:10 \t116 - test_rosout_subscription (Failed)\r\n```",
      "> @fujitatomoya this good to go? The test failures here are not related to this PR\r\n\r\nI'll point out that we have no failures on the nightlies, so either they come from this PR, or this PR needs to be rebased.  Either way they need to be solved, and CI re-run, before we can merge.",
      "@clalancette rebased\r\n\r\nEdit: git did something funky, please squash merge (if you don't usually) ",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19609)](http://ci.ros2.org/job/ci_linux/19609/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14117)](http://ci.ros2.org/job/ci_linux-aarch64/14117/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20333)](http://ci.ros2.org/job/ci_windows/20333/)",
      "Aarch failure seems unrelated:\r\n\r\n```\r\n18:18:26 Caused: hudson.remoting.ChannelClosedException: Channel \"hudson.remoting.Channel@21d03d09:JNLP4-connect connection from ip-10-0-2-42.ec2.internal/10.0.2.42:48068\": Remote call on JNLP4-connect connection from ip-10-0-2-42.ec2.internal/10.0.2.42:48068 failed. The channel is closing down or has closed down\r\n```",
      "* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14121)](http://ci.ros2.org/job/ci_linux-aarch64/14121/)",
      "@SteveMacenski i see many unrelated changes in this PR after rebase. is this good to go? CI is green though.",
      "The rebase did something odd - those are just the changed pulled in. I will not be using the git global config rebase-pull mechanism again and just rebase normally. Please squash merge"
    ],
    "commit_messages": [
      "Adding API to copy all parameters from one node to another (#2304)\n\nSigned-off-by: stevemacenski <stevenmacenski@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621743c18912b45d36a70e2",
    "number": 2303,
    "body": "Signed-off-by: Jeffery Hsu [jefferyyjhsu@gmail.com](mailto:jefferyyjhsu@gmail.com)\r\nThis PR adds transient local durability support to publishers and subscriptions when intra-process communication is used.\r\nAn intra-process buffer already existed on the subscription side. The PR adds the same style buffer to the publisher side and other supporting functions allowing intra process manager to publish saved messages for late joining subscriptions.",
    "head_branch": "add-transient-local-durability-to-intra-process-pub-sub",
    "is_a_fork": true,
    "comments": [
      "This might allow to revert those temporary fixes in TF2:\r\nhttps://github.com/ros2/geometry2/pull/572\r\nhttps://github.com/ros2/geometry2/pull/607",
      "CI\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19547)](http://ci.ros2.org/job/ci_linux/19547/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14061)](http://ci.ros2.org/job/ci_linux-aarch64/14061/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20264)](http://ci.ros2.org/job/ci_windows/20264/)",
      "New CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19550)](http://ci.ros2.org/job/ci_linux/19550/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14064)](http://ci.ros2.org/job/ci_linux-aarch64/14064/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20267)](http://ci.ros2.org/job/ci_windows/20267/)",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19553)](http://ci.ros2.org/job/ci_linux/19553/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14066)](http://ci.ros2.org/job/ci_linux-aarch64/14066/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20271)](http://ci.ros2.org/job/ci_windows/20271/)",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19560)](http://ci.ros2.org/job/ci_linux/19560/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14073)](http://ci.ros2.org/job/ci_linux-aarch64/14073/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20284)](http://ci.ros2.org/job/ci_windows/20284/)",
      "CI\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19584)](http://ci.ros2.org/job/ci_linux/19584/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14095)](http://ci.ros2.org/job/ci_linux-aarch64/14095/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20308)](http://ci.ros2.org/job/ci_windows/20308/)",
      "@wjwwood @fujitatomoya can you take a look at this PR?\r\nIt looks good to me",
      "@alsora i will try in next week.",
      "@fujitatomoya and @wjwwood , \r\nI know it's ROScon this week, but are there any updates?\r\nThanks!",
      "@jefferyyjhsu sorry i am really caught on ROSCon... at least i cannot allocate time for this week.",
      "Any update on reviewing this?",
      "@fujitatomoya @wjwwood \r\nKind bump!",
      "Build:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19778)](http://ci.ros2.org/job/ci_linux/19778/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14282)](http://ci.ros2.org/job/ci_linux-aarch64/14282/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20504)](http://ci.ros2.org/job/ci_windows/20504/)",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19796)](http://ci.ros2.org/job/ci_linux/19796/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14300)](http://ci.ros2.org/job/ci_linux-aarch64/14300/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20520)](http://ci.ros2.org/job/ci_windows/20520/)",
      "@fujitatomoya @wjwwood\r\nI made some small changes to the PR.\r\nKind bump again!",
      "Hi, can we get another review here?",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19927)](http://ci.ros2.org/job/ci_linux/19927/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14403)](http://ci.ros2.org/job/ci_linux-aarch64/14403/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20635)](http://ci.ros2.org/job/ci_windows/20635/)",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19949)](http://ci.ros2.org/job/ci_linux/19949/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14421)](http://ci.ros2.org/job/ci_linux-aarch64/14421/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20655)](http://ci.ros2.org/job/ci_windows/20655/)",
      "@fujitatomoya and @iuhilnehc-ynos,\r\nKind bump!",
      "@fujitatomoya and @iuhilnehc-ynos \r\nHappy New Year! Kind bump again to prevent this PR from sinking.",
      "@alsora I would like to 2nd approval on this.",
      "New build after rebase\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20073)](http://ci.ros2.org/job/ci_linux/20073/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14522)](http://ci.ros2.org/job/ci_linux-aarch64/14522/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20792)](http://ci.ros2.org/job/ci_windows/20792/)",
      "re-running windows\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20804)](http://ci.ros2.org/job/ci_windows/20804/)",
      "__@fujitatomoya @iuhilnehc-ynos ,\r\nDo you guys know why Windows CI is unstable with this CMake warning?\r\nIt's from tinyxml_vendor, so I don't understand why it only affects CI builds for my branch.\r\n\r\n> Starting >>> rosidl_dynamic_typesupport_fastrtps\r\n--- output: tinyxml_vendor\r\nNot searching for unused variables given on the command line.\r\n-- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.20348.\r\n-- The C compiler identification is MSVC 19.29.30153.0\r\n-- The CXX compiler identification is MSVC 19.29.30153.0\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - skipped\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe - skipped\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Found ament_cmake: 2.3.2 (C:/ci/ws/install/share/ament_cmake/cmake)\r\n-- Found Python3: C:/Python38/python.exe (found version \"3.8.3\") found components: Interpreter \r\n-- Could NOT find TinyXML (missing: TinyXML_LIBRARY TinyXML_INCLUDE_DIR) \r\nCMake Warning (dev) at C:/Program Files/CMake/share/cmake-3.24/Modules/ExternalProject.cmake:3074 (message):\r\n  The DOWNLOAD_EXTRACT_TIMESTAMP option was not given and policy CMP0135 is\r\n  not set.  The policy's OLD behavior will be used.  When using a URL\r\n  download, the timestamps of extracted files should preferably be that of\r\n  the time of extraction, otherwise code that depends on the extracted\r\n  contents might not be rebuilt if the URL changes.  The OLD behavior\r\n  preserves the timestamps from the archive instead, but this is usually not\r\n  what you want.  Update your project to the NEW behavior or specify the\r\n  DOWNLOAD_EXTRACT_TIMESTAMP option with a value of true to avoid this\r\n  robustness issue.\r\nCall Stack (most recent call first):\r\n  C:/Program Files/CMake/share/cmake-3.24/Modules/ExternalProject.cmake:4170 (_ep_add_download_command)\r\n  CMakeLists.txt:24 (ExternalProject_Add)\r\nThis warning is for project developers.  Use -Wno-dev to suppress it.",
      "> Do you guys know why Windows CI is unstable with this CMake warning?\r\n> It's from tinyxml_vendor, so I don't understand why it only affects CI builds for my branch.\r\n\r\nThe gist that is being used for CI is outdated; we've since dropped tinyxml_vendor, so the gist needs to be updated.",
      "Full CI with updated gist\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20092)](http://ci.ros2.org/job/ci_linux/20092/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14539)](http://ci.ros2.org/job/ci_linux-aarch64/14539/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20812)](http://ci.ros2.org/job/ci_windows/20812/)",
      "Merging with green CI and approvals",
      "@jefferyyjhsu - I noticed that as part of this PR, the ability to specify the type stored within the intra-process buffer for both the publisher and subscription was added. Is there a specific use case in mind for that option? It seems like setting it will circumvent the logic to minimize the number of necessary copies which are made when publishing a message.",
      "@thomasmoore-torc If I remember correctly, this was done to avoid having to duplicate those buffer classes.\r\nI need to double check the code though.\r\n\r\nIn any case, there should be some unit-tests that verify that ipc is doing the expected number of copies.",
      "@thomasmoore-torc,\r\nI only added that ability to the publisher side mostly to mirror how it was already implemented on the subscription side and to use the same buffer class as on the subscription side.\r\nhttps://github.com/ros2/rclcpp/blob/8230d15ef7ffa9e824d7e0f9c623537ae331dc73/rclcpp/include/rclcpp/subscription_options.hpp#L62\r\nI agree; there is a chance that this can result in unnecessary copies, but the default is set to\r\nhttps://github.com/ros2/rclcpp/blob/8230d15ef7ffa9e824d7e0f9c623537ae331dc73/rclcpp/include/rclcpp/publisher_options.hpp#L45\r\nto try to minimize user errors."
    ],
    "commit_messages": [
      "Add transient local durability support to publisher and subscriptions when using intra-process communication (#2303)\n\n* Add intra process transient local durability support to publisher and subscription\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Remove durability_is_transient_local_ from publisher_base\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Design changes that move most transient local publish functionalities out of\r\nintra process manager into intra process manager\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Move transient local publish to a separate function\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Remove publisher buffer weak ptr from intra process manager when it associated publisher is removed.\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Remove incorrectly placed RCLCPP_PUBLIC\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Add missing RCLCPP_PUBLIC\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Expand RingBufferImplementation beyond shared_ptr and unique_ptr\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Comment and format fix\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621743d18912b45d36a70e3",
    "number": 2302,
    "body": "The root README was updated to point to index.ros.org/p/rclcpp (#1620, #2071), but the individual package READMEs, which are displayed by index.ros.org, still link to docs.ros2.org.",
    "head_branch": "christophebedard/update-package-readmes",
    "is_a_fork": true,
    "comments": [
      "Rpr failed, but that's only because we consider any test failure a failure.  And for some reason the `test_executor` test failed.  Given that this is an update to the README only, I'm going to take that as good enough and merge this as-is.  Thanks for the update!"
    ],
    "commit_messages": [
      "Update API docs links in package READMEs (#2302)\n\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743e18912b45d36a70e4",
    "number": 2301,
    "body": "In a recent commit (bc435776a257fcf76c5b0124bec26f6824342e34), we reworked how the Rate class worked so it could be used with ROS time as well.  Unfortunately, we also accidentally broke the API of it by changing the return type of Rate::period to a Duration instead of a\r\nstd::chrono::nanoseconds .  Put this back to a std::chrono::nanoseconds; if we want to change it to a Duration, we'll have to add a new method and deprecate this one.\r\n\r\n@AlexeyMerzlyakov FYI",
    "head_branch": "clalancette/fix-rate-period-retval",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19487)](http://ci.ros2.org/job/ci_linux/19487/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14007)](http://ci.ros2.org/job/ci_linux-aarch64/14007/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20205)](http://ci.ros2.org/job/ci_windows/20205/)",
      "Yes, the solution works, as we could implicitly convert the return parameter from `std::chrono` -> to `rclcpp::Duration` back using its constructor, if it necessary. New method might be required in the future for performance reasons - to avoid duration->chrono->duration double conversion, but anyway it works for now. @clalancette, thank you for the quick solution on it!"
    ],
    "commit_messages": [
      "Fix the return type of Rate::period. (#2301)\n\nIn a recent commit (bc435776a257fcf76c5b0124bec26f6824342e34),\r\nwe reworked how the Rate class worked so it could be\r\nused with ROS time as well.  Unfortunately, we also\r\naccidentally broke the API of it by changing the return\r\ntype of Rate::period to a Duration instead of a\r\nstd::chrono::nanoseconds .  Put this back to a std::chrono::nanoseconds;\r\nif we want to change it to a Duration, we'll have to\r\nadd a new method and deprecate this one.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621743f18912b45d36a70e5",
    "number": 2300,
    "body": "Related to : https://github.com/ros2/rclpy/pull/1124/files#r1314262489",
    "head_branch": "leeminju531/rclcpp",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19486)](http://ci.ros2.org/job/ci_linux/19486/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14006)](http://ci.ros2.org/job/ci_linux-aarch64/14006/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20204)](http://ci.ros2.org/job/ci_windows/20204/)",
      "Probably, the test failure is related to https://github.com/ros2/system_tests/pull/529",
      "@leeminju531 can you check https://github.com/ros2/rclcpp/pull/2300#discussion_r1327470602?\r\n\r\nafter that one is addressed, i will restart the CI for this with https://github.com/ros2/system_tests/pull/529",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19527)](http://ci.ros2.org/job/ci_linux/19527/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14046)](http://ci.ros2.org/job/ci_linux-aarch64/14046/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20247)](http://ci.ros2.org/job/ci_windows/20247/)",
      "@clalancette i do not have commit permission for https://github.com/ros2/system_tests/pull/529, can you take both of them to `rolling`?"
    ],
    "commit_messages": [
      "fix the depth to relative in list_parameters (#2300)\n\n* fix the depth to relative in list_parameters\r\n\r\nSigned-off-by: leeminju531 <dlalswn531@naver.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744018912b45d36a70e6",
    "number": 2299,
    "body": "The timers_manager tests were relying too heavily on specific timings; this caused them to be flaky on the buildfarm, particularly on Windows.\r\n\r\nHere, we increase the timeouts, and remove one test which just relies too heavily on specific timeouts.  This should make this test much less flaky on the buildfarm.\r\n\r\n@alsora @mjcarroll FYI",
    "head_branch": "clalancette/remove-flaky-timers-manager-tests",
    "is_a_fork": false,
    "comments": [
      "I would argue that unit-test should not use wall-time, but always some sort of simulated/artificial time to have a deterministic execution.\r\nIs there any plan to do that in the ROS 2 testing stack? Or at least interest (we have an internal solution for that and we may open-source it).\r\n\r\n",
      "> Is there any plan to do that in the ROS 2 testing stack?\r\n\r\nThere are no current plans, no.\r\n\r\n> Or at least interest (we have an internal solution for that and we may open-source it).\r\n\r\nI will point out that we could do this today by setting `use_sim_time` and controlling the `/clock` topic from the tests.  The problem with that approach in general is that it is slightly different from the \"normal\" mechanisms, so it wouldn't necessarily be testing the same things.  Whether we actually want to do that in the unit tests is probably highly test-specific.\r\n\r\nAll of that is to say that I have some interest in it, but we'd have to carefully examine which tests we would switch over to that mechanism.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19467)](http://ci.ros2.org/job/ci_linux/19467/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13989)](http://ci.ros2.org/job/ci_linux-aarch64/13989/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20189)](http://ci.ros2.org/job/ci_windows/20189/)",
      "OK, I've fixed things from review, and also fixed the build warning on Linux.  Let's try CI again:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19481)](http://ci.ros2.org/job/ci_linux/19481/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14001)](http://ci.ros2.org/job/ci_linux-aarch64/14001/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20198)](http://ci.ros2.org/job/ci_windows/20198/)"
    ],
    "commit_messages": [
      "Cleanup flaky timers_manager tests. (#2299)\n\n* Cleanup flaky timers_manager tests.\r\n\r\nThe timers_manager tests were relying too heavily on\r\nspecific timings; this caused them to be flaky on the\r\nbuildfarm, particularly on Windows.\r\n\r\nHere, we increase the timeouts, and remove one test which\r\njust relies too heavily on specific timeouts.  This should\r\nmake this test much less flaky on the buildfarm.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744118912b45d36a70e7",
    "number": 2298,
    "body": "This is an automatic backport of pull request #2294 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2294",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19522)](http://ci.ros2.org/job/ci_linux/19522/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14040)](http://ci.ros2.org/job/ci_linux-aarch64/14040/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20240)](http://ci.ros2.org/job/ci_windows/20240/)",
      "[windows failure (timer manager)](https://ci.ros2.org/job/ci_windows/20240/testReport/junit/projectroot.test/rclcpp/test_timers_manager/) is unrelated."
    ],
    "commit_messages": [
      "Topic correct typeadapter deduction (#2294) (#2298)\n\n* fix TypeAdapter deduction\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n(cherry picked from commit 5e152d77d8144c074894de9a5bc7025aac7f5813)\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744218912b45d36a70e8",
    "number": 2297,
    "body": "This is an automatic backport of pull request #2294 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2294",
    "is_a_fork": false,
    "comments": [
      "@iuhilnehc-ynos i think we would want to give it some soak time for this like a week to make sure nothing happens to rolling. and then we can start the CI to merge. (the same goes to https://github.com/ros2/rclcpp/pull/2298)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19521)](http://ci.ros2.org/job/ci_linux/19521/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14039)](http://ci.ros2.org/job/ci_linux-aarch64/14039/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20239)](http://ci.ros2.org/job/ci_windows/20239/)",
      "CI(retry):\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20244)](http://ci.ros2.org/job/ci_windows/20244/)",
      "It would be nice to also backport https://github.com/ros2/rclcpp/pull/2292 as this PR breaks C++20 compatibility for humble. Is there any plan related this?"
    ],
    "commit_messages": [
      "Topic correct typeadapter deduction (#2294) (#2297)\n\n* fix TypeAdapter deduction\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n(cherry picked from commit 5e152d77d8144c074894de9a5bc7025aac7f5813)\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744418912b45d36a70e9",
    "number": 2296,
    "body": "The capture of the lambda held an copy of the shared_ptr to the goal handle. This lead to the behavior that the goal callbacks would be called, even though the user dropped the handle.\r\n\r\nNote, this will break the current tutorial, as it restores the documented behavior that a goal will be invalidated as soon as one drops the handle.",
    "head_branch": "do_not_copy_goal_handle",
    "is_a_fork": true,
    "comments": [
      "@iuhilnehc-ynos can you do 2nd review and start CI if looks good to you? i think we can backport this to iron and humble.",
      "> This lead to the behavior that the goal callbacks would be called, even though the user dropped the handle.\r\n\r\nFrom my point of view, this PR doesn't totally fix the issue that the user's callback could be called if the user dropped the handle.\r\n\r\n[goal_handle->set_result(wrapped_result);](https://github.com/ros2/rclcpp/blob/5870033007e27fd9f7940ba9bd5e83b47754a783/rclcpp_action/include/rclcpp_action/client.hpp#L743) -> [result_callback_(wrapped_result);](https://github.com/ros2/rclcpp/blob/bf1396b272782e007df7e0f89cb4c6d94452c848/rclcpp_action/include/rclcpp_action/client_goal_handle_impl.hpp#L77) if the user drop the goal_handle after [typename GoalHandle::SharedPtr goal_handle_ = goal_handles_[goal_id].lock();](https://github.com/ros2/rclcpp/blob/5870033007e27fd9f7940ba9bd5e83b47754a783/rclcpp_action/include/rclcpp_action/client.hpp#L725) is not nullptr.\r\n\r\nI think there is a method to fix the issue without this PR.\r\n`GoalHandle::SharedPtr` should be only managed on the user side, not in the https://github.com/ros2/rclcpp/blob/6815022909086487f2b8dc14c0540b00d4cf61a0/rclcpp_action/include/rclcpp_action/client.hpp#L757 since it could be held inside the `rclcpp_action`. The key is to use an extra level(object) of indirect in `rclcpp_action`, which member methods can be called in the destructor of `GoalHandle`.\r\n",
      "> > This lead to the behavior that the goal callbacks would be called, even though the user dropped the handle.\r\n> \r\n> From my point of view, this PR doesn't totally fix the issue that the user's callback could be called if the user dropped the handle.\r\n> \r\n> [goal_handle->set_result(wrapped_result);](https://github.com/ros2/rclcpp/blob/5870033007e27fd9f7940ba9bd5e83b47754a783/rclcpp_action/include/rclcpp_action/client.hpp#L743) -> [result_callback_(wrapped_result);](https://github.com/ros2/rclcpp/blob/bf1396b272782e007df7e0f89cb4c6d94452c848/rclcpp_action/include/rclcpp_action/client_goal_handle_impl.hpp#L77) if the user drop the goal_handle after [typename GoalHandle::SharedPtr goal_handle_ = goal_handles_[goal_id].lock();](https://github.com/ros2/rclcpp/blob/5870033007e27fd9f7940ba9bd5e83b47754a783/rclcpp_action/include/rclcpp_action/client.hpp#L725) is not nullptr.\r\n> \r\nThis is correct, see https://github.com/ros2/rclcpp/pull/2281\r\n\r\nAnyhow this fixes commit fixes a part of the issue and is obviously a bug. Therefore I would like to see it merged, before we continue the lengthy discussion on how to fix the complete issue for real.\r\n",
      "> Anyhow this fixes commit fixes a part of the issue and is obviously a bug. Therefore I would like to see it merged, before we continue the lengthy discussion on how to fix the complete issue for real.\r\n\r\nBut there still exists the bug after applying this PR.\r\nWhat if further discussion doesn't need this PR for this issue, why should we merge it first?\r\n\r\nI agree with clalancette on the `make this more automatic` mentioned at https://github.com/ros2/rclcpp/pull/2281#discussion_r1307354723, rather than calling `drop_goal_handle()` manually.\r\n",
      "> But there still exists the bug after applying this PR. What if further discussion doesn't need this PR for this issue, why should we merge it first?\r\n\r\nThis mostly comes down to it fixes 99% of the issue and is a step in the correct direction. This also restores the documented behaviour, that the user needs to hold the goal handle, in order for the action to succeed.\r\nBut if the consensus is that we need to get it perfect before merge, I am also fine with this.\r\n \r\n> \r\n> I agree with clalancette on the `make this more automatic` mentioned at [#2281 (comment)](https://github.com/ros2/rclcpp/pull/2281#discussion_r1307354723), rather than calling `drop_goal_handle()` manually.\r\n\r\nCan you then comment on https://github.com/ros2/rclcpp/pull/2281#discussion_r1307819954 ?\r\n\r\nIf I know the direction, this should go, I can implement it, and get it off my table ;-P\r\n",
      "@iuhilnehc-ynos \r\nCC: @jmachowinski \r\n\r\nthat was my suggestion to separate this PR to merge, i think this can be handled with another problem. actually i was thinking that we should backport this to iron and humble, for doing so separating PR would be much better to fix the specific problem w/o breaking ABI.\r\n\r\n> I agree with clalancette on the make this more automatic mentioned at https://github.com/ros2/rclcpp/pull/2281#discussion_r1307354723, rather than calling drop_goal_handle() manually.\r\n\r\nyeah, i think we all are on the same page. let's post the idea on https://github.com/ros2/rclcpp/pull/2281#discussion_r1307819954 instead.",
      "> that was my suggestion to separate this PR to merge, i think this can be handled with another problem. actually i was thinking that we should backport this to iron and humble, for doing so separating PR would be much better to fix the specific problem w/o breaking ABI.\r\n\r\nThat's true, but since this PR is breaking the tutorials, I'll argue it changes semantics.  Maybe we have to do that, but I think we should probably solve the problem completely in `rolling`, then decide what we want to backport.",
      "that also sounds good to me üëç ",
      "@fujitatomoya \r\n\r\nOK, Let's improve it step by step.\r\n\r\n@jmachowinski \r\n\r\nIt seems we can merge this PR into `rolling`. Before running CI, could you address https://github.com/ros2/demos/blob/bd49f4b64ee7f65616dccbe37e96fb64a9cad6ee/action_tutorials/action_tutorials_cpp/src/fibonacci_action_client.cpp#L76 and [the document](https://github.com/ros2/rclcpp/blob/6815022909086487f2b8dc14c0540b00d4cf61a0/rclcpp_action/include/rclcpp_action/client.hpp#L411) as well?\r\n",
      "@iuhilnehc-ynos \r\n> It seems we can merge this PR into `rolling`. Before running CI, could you address https://github.com/ros2/demos/blob/bd49f4b64ee7f65616dccbe37e96fb64a9cad6ee/action_tutorials/action_tutorials_cpp/src/fibonacci_action_client.cpp#L76\r\n\r\nDone\r\n\r\n> and [the document](https://github.com/ros2/rclcpp/blob/6815022909086487f2b8dc14c0540b00d4cf61a0/rclcpp_action/include/rclcpp_action/client.hpp#L411) as well?\r\n\r\nI don't see anything that is wrong with the documentation.\r\n\r\nI was wondering, if we should add [[nodiscard]] to async_send_goal\r\n\r\n",
      "The fact that we had to open up https://github.com/ros2/demos/pull/649 means we are breaking user semantics.  Because of that, I don't think we should merge this in until we know the full shape of the solution.\r\n\r\nPut another way, we *can* break API/semantics to fix bugs (though I will always push for a \"deprecation\" cycle if at all possible).  But what I don't think we should do is to break API/semantics for a partial fix, and then have to do it again once we have the full fix.  If we are going to have to break API/semantics, we should do it all in one go and let the community know.",
      "Closing in favor for https://github.com/ros2/rclcpp/pull/2281"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744518912b45d36a70ea",
    "number": 2294,
    "body": "to fix https://github.com/ros2/rclcpp/issues/2291\r\n\r\nBased on the document of [TypeAdapter](https://github.com/ros2/rclcpp/blob/bc435776a257fcf76c5b0124bec26f6824342e34/rclcpp/include/rclcpp/type_adapter.hpp#L23-L37), I'd like to update from `TypeAdapter<MessageT>` to `TypeAdapter<MessageT, ROSMessageType>`, rather than adding another if-block to deal with `TypeAdapter<MessageT, ROSMessageType>` as there are no cases in the existing test that could be failed.\r\n\r\nBTW: I think https://github.com/ros2/rclcpp/blob/bc435776a257fcf76c5b0124bec26f6824342e34/rclcpp/include/rclcpp/experimental/intra_process_manager.hpp#L397-L416 can be updated as well because of some unuseful code. (Maybe update it in the following PR.)\r\n\r\nI'd like to hear your opinions.",
    "head_branch": "topic-correct-typeadapter-deduction",
    "is_a_fork": true,
    "comments": [
      "@iuhilnehc-ynos thanks for the PR, i will take a look!",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19435)](http://ci.ros2.org/job/ci_linux/19435/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13961)](http://ci.ros2.org/job/ci_linux-aarch64/13961/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20159)](http://ci.ros2.org/job/ci_windows/20159/)",
      "i think we need to backport this to iron and humble.",
      "@Mergifyio backport humble iron",
      "> backport humble iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2297 Topic correct typeadapter deduction (backport #2294)](https://github.com/ros2/rclcpp/pull/2297) has been created for branch `humble`\n* [#2298 Topic correct typeadapter deduction (backport #2294)](https://github.com/ros2/rclcpp/pull/2298) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport humble iron\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Topic correct typeadapter deduction (#2294)\n\n* fix TypeAdapter deduction\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744618912b45d36a70eb",
    "number": 2293,
    "body": "Post C++20 will see automatic comparison operator creation, which leads to ambiguity errors on comparisons between rclcpp::Time and builtin_interfaces::msg::Time. \r\n\r\nA simple fix would be to cast the message type to rclcpp::Time. However, this equality comparison can be numerous within a codebase so this PR takes a different approach by instead providing an explicit equality operator between the two types thus fixing this issue codebase wide. Let me know if this is a desirable approach, or if we should instead require the explicit casts on these operations after migrating to C++20.\r\n\r\nOne liberty I took was to make this comparison independent of the clock type. My reasoning is that msg::Time does not have a clock type and rclcpp::Time constructor from msg::Time does not assume a fixed clock type (can be set).",
    "head_branch": "explicit_time_comparison",
    "is_a_fork": true,
    "comments": [
      "> Let me know if this is a desirable approach, or if we should instead require the explicit casts on these operations after migrating to C++20.\r\n\r\nWe discussed this a bit, and we think that to be clear users should have to cast it themselves.  That would make it clear which time source they are comparing against.  That is, users would have to explicitly do:\r\n\r\n```\r\nrclcpp_time == Time(my_msg_time, get_clock_type())\r\n```\r\n\r\nLooking at this code, one other thing we are noticing is that there is an `rclcpp::Time` constructor that takes a `builtin_interfaces::msg::Time`.  That should probably be marked `explicit`, though that might cause some downstream breakage.  Maybe we should instead delete the `==` comparison operator between `rclcpp::Time` and `builtin_msgs::msg::Time`?  Thoughts?",
      "Marking the constructor of ```rclcpp::Time``` that takes a ```builtin_interfaces::msg::Time``` would also fix it, since the issue stems from the different conversion options given by ```rclcpp::Time```. In C++20 the ambiguity comes from being able to use either the implicit constructor or the conversion operator.\r\n\r\nSo for this comparison:\r\n```\r\nrclcpp::Time time{};\r\nbuiltin_interfaces::msg::Time msg{};\r\n\r\nbool res = time == msg\r\n```\r\nIn C++17 the behavior will be to convert ```msg``` into ```rclcpp::Time``` using the implicit constructor and then use the comparison operator from ```rclcpp::Time``` while in C++20 a new option appears where he can instead use the conversion operator of ```time``` and then use the comparison operator of ```builtin_interfaces::msg::Time```.\r\n\r\nRegardless the outcome for this particular issue, I do think marking the constructor explicit is the way to go, but that raises issues with initializing assignments of the form ```rclcpp::Time A = builtin_interfaces::msg::Time{};``` since it does not use the assignment operator.\r\n\r\nComing back to this issue, I can indeed create the comparison operator between ```rclcpp::Time``` and ```builtin_interfaces::msg::Time``` as deleted, though this will cause some issues downstream as well. I will go around and fix them for ROS at least. Or do you think marking it as deprecated is enough until full removal on a LTS release? Would need to keep track of it, which could be error-prone.\r\n\r\n",
      "@AiVerisimilitude thank you for sharing good information.\r\n\r\n> Regardless the outcome for this particular issue, I do think marking the constructor explicit is the way to go, but that raises issues with initializing assignments of the form rclcpp::Time A = builtin_interfaces::msg::Time{};\r\n\r\ncorrect, this breaks the user application. IMO, this is the way to notify the user application that explicitly specify the clock source when they are creating `rclcpp::Time` object from `builtin_interfaces::msg::Time`.\r\n\r\n> In C++17 the behavior will be to convert msg into rclcpp::Time using the implicit constructor\r\n\r\nso that this can be avoided.\r\n\r\n> while in C++20 a new option appears where he can instead use the conversion operator of time and then use the comparison operator of builtin_interfaces::msg::Time.\r\n\r\ni think this process itself is okay, since it uses conversion operator 1st and user specifies so?\r\ni really do not have good practice for this option, could you share information about this option?",
      "> correct, this breaks the user application. IMO, this is the way to notify the user application that explicitly specify the clock source when they are creating rclcpp::Time object from builtin_interfaces::msg::Time\r\n\r\nJust to be clear, the issue with this code:\r\n```rclcpp::Time A = builtin_interfaces::msg::Time{};```\r\nwhich is in the context of construction is different from\r\n```\r\nrclcpp::Time A;\r\nA = builtin_interfaces::msg::Time{};\r\n```\r\nwhich uses the assignment operator and does not allow the user to specify the clock type, since it calls the constructor with the default clock:\r\n```\r\nTime &\r\nTime::operator=(const builtin_interfaces::msg::Time & time_msg)\r\n{\r\n  *this = Time(time_msg);\r\n  return *this;\r\n}\r\n```\r\nI think that with the direction that we are going with explicit clocks that I would need to remove/delete anyway, so the user has to specify the clock type. Otherwise, the clock type when using this assignment operator will always be set to the default one.\r\n\r\n> i think this process itself is okay, since it uses conversion operator 1st and user specifies so?\r\n\r\nSince the conversion is also implicit, you don't need to specify so. However, the conversion is to ```builtin_interfaces::msg::Time``` which does not have a clock type, so I guess it's not as bad?\r\n\r\nFor clarity, in C++20 with having the constructor of ```rclcpp::Time``` that takes a ```builtin_interfaces::msg::Time``` marked as ```explicit``` this comparison:\r\n```\r\nrclcpp::Time time{};\r\nbuiltin_interfaces::msg::Time msg{};\r\n\r\nbool res = time == msg\r\n```\r\nUses ```rclcpp::Time``` implicit conversion operator to ```builtin_interfaces::msg::Time``` to convert ```time``` to a msg and then make the comparison there. To avoid that, we would need to also mark the conversion operator explicit.\r\n\r\nAnother option would be to delete the comparison operator of ```builtin_interfaces::msg::Time == builtin_interfaces::msg::Time``` since that fixes the ambiguity and makes it so that all comparisons have to be of ```rclcpp::Time``` (we would still need to make the other changes), but I do not know how feasible that is (have not yet looked at that part of the codebase).\r\n\r\nI will make a couple of changes and see how it looks :)\r\n\r\nThanks for the discourse/engagement in this topic ^_^",
      "> Since the conversion is also implicit, you don't need to specify so. However, the conversion is to builtin_interfaces::msg::Time which does not have a clock type, so I guess it's not as bad?\r\n\r\nthat was what i meant here. conversion from `rclcpp::Time` to `builtin_interfaces::msg::Time`, because user knows that there is no clock type.\r\n\r\nand with \r\n\r\n> while in C++20 a new option appears where he can instead use the conversion operator of time and then use the comparison operator of builtin_interfaces::msg::Time.\r\n\r\ni was thinking this behavior is option that user can enable during compile time? i guess that was wrong assumption.\r\n\r\n> To avoid that, we would need to also mark the conversion operator explicit.\r\n\r\nIMO this is okay because user knows that they are comparing `builtin_interfaces::msg::Time`? but this still may be ambiguity.\r\n\r\n> Another option would be to delete the comparison operator of builtin_interfaces::msg::Time == builtin_interfaces::msg::Time since that fixes the ambiguity and makes it so that all comparisons have to be of rclcpp::Time\r\n\r\ni am inclined to take this path, so that there is no ambiguity for user application.\r\n\r\n@clalancette @alsora @wjwwood @ros2/team any thoughts?",
      "This would be my new proposal given the discussion so far.\r\n\r\n1. I've made the constructor of ```rclcpp::Time``` from ```builtin_interfaces::msg::Time``` explicit. This means there is no longer any implicit conversion support and assignments while constructing will also need to be changed. For now, I kept the behavior where there is a default clock. Let me know if this should also be made explicit.\r\n\r\nThis change means that this\r\n```\r\nbuiltin_interfaces::msg::Time msg;\r\n\r\nrclcpp::Time time = msg;\r\n```\r\nwill no longer be supported and can instead be:\r\n```\r\nrclcpp::Time time(msg);\r\n//or\r\nrclcpp::Time time(...);\r\ntime = msg;\r\n```\r\nsince I did not make the assignment operator explicit. If we want to make the assignment explicit, I would instead suggest not providing one and require the construction of a ```rclcpp::Time``` first and then assign it:\r\n```\r\nrclcpp::Time time(..);\r\n\r\ntime = rclcpp::Time(msg);\r\n```\r\n\r\n2. The assignment operator from ```builtin_interfaces::msg::Time``` no longer overrides the current clock type. I do not know why this is the default behavior, but let me know if I should revert it. I made this change in order to support a cached time object whose clock type is not overridden by assignment from a ```builtin_interfaces::msg::Time```. \r\n\r\nWith this change this comparison is now true:\r\n```\r\nbuiltin_interfaces::msg::Time msg();\r\n\r\nrclcpp::Time a(0, RCL_SYSTEM_TIME);\r\n\r\na = msg;\r\n\r\na.get_clock_type() == RCL_SYSTEM_TIME // is TRUE since clock type in not updated by assignment from message\r\n```\r\nHowever, if we decide to remove the assignment operator from ```builtin_interfaces::msg::Time``` none of this would be applicable/ a problem as the Time object needs to be constructed first.\r\n\r\n3. deleted comparison operators between ```rclcpp::Time``` and ```builtin_interfaces::msg::Time```. For compatibility with C++17 I created the 2 operators as non-member functions instead of 1 member one (which in C++20 would be automatically reversed).\r\n\r\nThe reasoning is that I don't want automatic decay of a ```rclcpp::Time``` to ```builtin_interfaces::msg::Time``` since we have a conversion operator. With the 2 comparison operators deleted the compiler will find them to be the best fit and correctly issue a compiler error (use of deleted function). The user can however make an explicit conversion and use the equality comparison between equal types:\r\n```\r\nrclcpp::Time time(..);\r\nbuiltin_interfaces::msg::Time msg(..);\r\n\r\ntime == msg // compiler error: use of deleted function\r\nmsg == time // compiler error: use of deleted function\r\n\r\ntime == rclcpp::Time(msg) // OK if clock_type of object time is the default and time in message is not negative\r\nmsg == static_cast<builtin_interfaces::msg::Time>(time) // OK comparison uses conversion operator and is clock_type agnostic\r\n```\r\n",
      "> If we want to make the assignment explicit, I would instead suggest not providing one and require the construction of a rclcpp::Time first and then assign it\r\n\r\nmakes sense to me.\r\n\r\n> deleted comparison operators between rclcpp::Time and builtin_interfaces::msg::Time\r\n\r\ni think this is good.\r\n\r\nyes, this requires application code change, and assignment operator from `builtin_interfaces::msg::Time` behavior changes.\r\n",
      "There has been a new version of this PR pushed for a while. I've re-requested a review, but not sure if I did it correctly since it's been a while without any feedback. Can anyone (@wjwwood @hidmic @ivanpauno  @clalancette @fujitatomoya) just give me a quick confirmation that this on the radar?\r\n\r\nOn the side I've been updating other packages to be compatible with these changes and will be submitting some PR's to those repos and linking this issue to them for traceability.",
      "@AiVerisimilitude this PR has been on my list for a long time, i will check this in this week.",
      "Sorry for joining this conversation late, but I wanted to clear up a something that was brought up several times, which is the idea that `builtin_interfaces::msg::Time` has no clock type, but it does at least have an implied epoch, which is the same as system time or ros time. So a few things should be enforced (imo):\r\n\r\n- when assigning a \"`msg::Time`\" into a `rclcpp::Time`, we should either ensure the clock type is one of system/ros, or explicitly assign it to be ros or system (I'm not sure which would be most correct)\r\n- similarly conversion constructors and conversion operators need to make sure that we don't end up with a steady clock based `rclcpp::Time` from a `msg::Time`\r\n- converting to a `msg::Time` from `rclcpp::Time`, for any reason including comparison, needs to make sure the source `rclcpp::Time` is not steady time\r\n- static casting a `rclcpp::Time` to a `msg::Time` needs to only be allowed when the clock type is not steady time (ensured by the conversion constructor/operator characteristics mentioned above)\r\n- if we have an explicit comparison between `rclcpp::Time` and `msg::Time` it need to ensure the `rclcpp::Time` is not steady clock based\r\n\r\nWith those in mind, I'll do a review of this pr soon, but in the meantime I just wanted to make that clearer.",
      "@wjwwood friendly poke for review feedback",
      "What is the status for review here? If there are any issues, just let me know what these are or if a larger discussion is needed, where to have it. Mostly want to know because if this will take a longer time I would like to create a separate PR that addresses **only** the C++20 compatibility (it would still be a bit of a workaround) so I can still dream a bit that the next release will be C++20 compatible",
      "@AiVerisimilitude this still waiting for the another review. CC: @wjwwood "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744718912b45d36a70ec",
    "number": 2292,
    "body": "Fixes c++20 construct function not available & volatile deprecation warning.\r\n\r\nThis will still compile in C++17.",
    "head_branch": "cpp20_support",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19433)](http://ci.ros2.org/job/ci_linux/19433/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13957)](http://ci.ros2.org/job/ci_linux-aarch64/13957/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20157)](http://[c](https://ci.ros2.org/job/ci_linux/)i.ros2.org/job/ci_windows/20157/)",
      "@AiVerisimilitude thanks for the contribution!",
      "@Mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2318 C++20 compatibility fixes (backport #2292)](https://github.com/ros2/rclcpp/pull/2318) has been created for branch `iron`\n* [#2319 C++20 compatibility fixes (backport #2292)](https://github.com/ros2/rclcpp/pull/2319) has been created for branch `humble`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Fix C++20 allocator construct deprecation (#2292)\n\nSigned-off-by: Guilherme Rodrigues <guilherme.rodrigues@ait.ac.at>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744818912b45d36a70ed",
    "number": 2290,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Yea that looks right, can you sign off the DCO check?",
      "> Yea that looks right, can you sign off the DCO check?\r\n\r\nDone, thanks for review!",
      "You should probably just do one more check to make sure there are no other comments that are related, that need to be moved. Once you're done with that can you  \n`git rebase HEAD~2 -i` squash that newer commit into the top, then force-push-with-lease like you did for the DCO check. Technically it's correct to make these changes, and I've seen PRs that just fix 1 word typos, but we probably want the commit tree to be as small as possible.",
      "> `git rebase HEAD~2 -i` squash that newer commit into the top, then force-push-with-lease like you did for the DCO check. Technically it's correct to make these changes, and I've seen PRs that just fix 1 word typos, but we probably want the commit tree to be as small as possible.\r\n\r\nIt's really not necessary as long as every commit has the DCO.  We \"Squash and merge\" as a matter of course anyway.",
      "Since this is just moving a comment, and the Rpr job passed, I'm going to go ahead and merge it without further CI."
    ],
    "commit_messages": [
      "Correct the position of a comment. (#2290)\n\nSigned-off-by: Jiaqi Li <ljq0831@qq.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744918912b45d36a70ee",
    "number": 2289,
    "body": "This was pointed out by compiling with clang.",
    "head_branch": "clalancette/remove-unnecessary-lambda-captures",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19407)](http://ci.ros2.org/job/ci_linux/19407/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13935)](http://ci.ros2.org/job/ci_linux-aarch64/13935/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20128)](http://ci.ros2.org/job/ci_windows/20128/)",
      "@#$! Windows.  Let's see if a static is happier.",
      "* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20129)](http://ci.ros2.org/job/ci_windows/20129/)",
      "Here's final CI on Linux, just to ensure that it likes static:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19415)](http://ci.ros2.org/job/ci_linux/19415/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13943)](http://ci.ros2.org/job/ci_linux-aarch64/13943/)"
    ],
    "commit_messages": [
      "Remove unnecessary lambda captures in the tests. (#2289)\n\n* Remove unnecessary lambda captures in the tests.\r\n\r\nThis was pointed out by compiling with clang.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744a18912b45d36a70ef",
    "number": 2288,
    "body": "This is an automatic backport of pull request #2277 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2277",
    "is_a_fork": false,
    "comments": [
      "this does not break ABI and provide the same feature for `LifecycleNode` with `Node`.",
      "Pulls: ros2/rclcpp#2288\nGist: https://gist.githubusercontent.com/fujitatomoya/7495dc1f142b7c399be8a957b0d43a18/raw/f3cf0e5d3440ba1d18d8a4fe2d82eea6e2d6426c/ros2.repos\nBUILD args:  --packages-up-to rclcpp_lifecycle\nTEST args:  --packages-select rclcpp_lifecycle\nROS Distro: iron\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/14785\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=22089)](http://ci.ros2.org/job/ci_linux/22089/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=16346)](http://ci.ros2.org/job/ci_linux-aarch64/16346/)\n* Linux-rhel [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-rhel&build=1608)](http://ci.ros2.org/job/ci_linux-rhel/1608/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=22828)](http://ci.ros2.org/job/ci_windows/22828/)",
      "The warning on RHEL is not related here, so going ahead and merging this one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744b18912b45d36a70f0",
    "number": 2287,
    "body": "ActionClient::wait_for_action_server never actually waits and always returns [here](https://github.com/ros2/rclcpp/blob/ba175922d3008704c67b10fe82a2f7c0cbee2be4/rclcpp/src/rclcpp/client.cpp#L154), (when waiting is actually necessary). Seems to me that the action client's reference to context never gets set.\r\n\r\ncorrected link: https://github.com/ros2/rclcpp/blob/fd58bddb05ee430f7124f5feff0add683db6f86f/rclcpp_action/src/client.cpp#L192\r\n",
    "head_branch": "action-client-gets-context",
    "is_a_fork": true,
    "comments": [
      " I think you're correct with this one, can you address the DCO signoff check?",
      "> ActionClient::wait_for_action_server never actually waits and always returns [here](https://github.com/ros2/rclcpp/blob/ba175922d3008704c67b10fe82a2f7c0cbee2be4/rclcpp/src/rclcpp/client.cpp#L154)\r\n\r\nisn't that here? according to your fix.\r\n\r\nhttps://github.com/ros2/rclcpp/blob/ba175922d3008704c67b10fe82a2f7c0cbee2be4/rclcpp_action/src/client.cpp#L192\r\n\r\nhttps://github.com/ros2/rclcpp/blob/ba175922d3008704c67b10fe82a2f7c0cbee2be4/rclcpp/src/rclcpp/client.cpp#L154\r\n\r\nseems to be no problem for me, since `context_` is stored here?\r\n\r\nhttps://github.com/ros2/rclcpp/blob/ba175922d3008704c67b10fe82a2f7c0cbee2be4/rclcpp/src/rclcpp/client.cpp#L43",
      "> seems to be no problem for me, since context_ is stored here?\r\n\r\nIsn't that just `ClientBase` for the regular client, not `ClientBaseImpl` for rclcpp_action? To be fair, when I set a basic action client/server system `wait_for_action_server` still waits like it should, but if I cancel the client before I connect to the server, rcl throws `rcl node's context is invalid` which I assume is from the client side.\r\n\r\nAlso there's an uncrustify error that needs to be fixed.",
      "@joncppl The link you provided is to the `rclcpp::ClientBase::wait_for_nanoseconds` method, which as far as I can tell is never invoked during `rclcpp_action::ActionClient::wait_for_action_server_nanoseconds`.  Or am I missing something?\r\n\r\nAlso, `wait_for_action_server` definitely waits at some points; if you run `ros2 run action_tutorials_cpp fibonacci_action_client`, it will wait around for the server for 10 seconds and quit if the server doesn't show up.\r\n\r\nAll of that said, it does seem like this patch fixes a problem.  But I think we need to understand the problem a bit more first.  Can you describe in detail the problem that caused you to look into this and submit the patch?  Thanks.",
      "> @joncppl The link you provided is to the `rclcpp::ClientBase::wait_for_nanoseconds` method, which as far as I can tell is never invoked during `rclcpp_action::ActionClient::wait_for_action_server_nanoseconds`. Or am I missing something?\r\n> \r\n> Also, `wait_for_action_server` definitely waits at some points; if you run `ros2 run action_tutorials_cpp fibonacci_action_client`, it will wait around for the server for 10 seconds and quit if the server doesn't show up.\r\n> \r\n> All of that said, it does seem like this patch fixes a problem. But I think we need to understand the problem a bit more first. Can you describe in detail the problem that caused you to look into this and submit the patch? Thanks.\r\n\r\nMy apologies, I had intended to link the [rclcpp_action client's equivalent. The code is very similar.](https://github.com/ros2/rclcpp/blob/fd58bddb05ee430f7124f5feff0add683db6f86f/rclcpp_action/src/client.cpp#L192).\r\n\r\nenvironment is ubuntu20.04/foxy w/ connextdds. \r\n\r\ntest is:\r\n- spawn action server\r\n- immediately spawn action client (programatically in another process, leaving little time for discovery)\r\n- immediately call `wait_for_action_server`, which immediately returns false, regardless of the timeout value. debugger indicates it is returning from the line I linked. \r\n- with the patch, wait_for_action_server indeed waits for about 1 second before returning true\r\n- alternatively, calling `action_server_is_ready` in an busy loop also takes about 1 second before it also returns true.\r\n\r\nIt appears to me the root cause has not changed since foxy, but yes I have not tested the problem/patch on rolling.",
      "I believe the reason the example works is because rclcpp::ok falls back to default context since pimpl->context is null, so this condition is true despite the null context.\r\n\r\nHowever my application is not using the default context.",
      "For example, it is replicated with this patch to example minimal_action_client\r\n\r\n```diff\r\ndiff --git a/rclcpp/actions/minimal_action_client/member_functions.cpp b/rclcpp/actions/minimal_action_client/member_functions.cpp\r\nindex f5c827e..f863095 100644\r\n--- a/rclcpp/actions/minimal_action_client/member_functions.cpp\r\n+++ b/rclcpp/actions/minimal_action_client/member_functions.cpp\r\n@@ -133,13 +133,21 @@ private:\r\n \r\n int main(int argc, char ** argv)\r\n {\r\n-  rclcpp::init(argc, argv);\r\n-  auto action_client = std::make_shared<MinimalActionClient>();\r\n+  auto context = rclcpp::Context::make_shared();\r\n+  context->init(argc, argv);\r\n+  rclcpp::NodeOptions node_options {};\r\n+  node_options.context(context);\r\n+  auto action_client = std::make_shared<MinimalActionClient>(node_options);\r\n+\r\n+  rclcpp::ExecutorOptions executor_options {};\r\n+  executor_options.context = context;\r\n+  rclcpp::executors::SingleThreadedExecutor executor(executor_options);\r\n+  executor.add_node(action_client);\r\n \r\n   while (!action_client->is_goal_done()) {\r\n-    rclcpp::spin_some(action_client);\r\n+    executor.spin();\r\n   }\r\n \r\n-  rclcpp::shutdown();\r\n+  context->shutdown(\"done\");\r\n   return 0;\r\n }\r\n\r\n```",
      "> However my application is not using the default context.\r\n\r\nFantastic, thanks.  That is what I suspected, but I wanted to be sure.\r\n\r\nCan you please add a test that shows that this change fixes the problem?  You can look at https://github.com/ros2/rclcpp/blob/fd58bddb05ee430f7124f5feff0add683db6f86f/rclcpp_action/test/test_client.cpp#L357-L368 for inspiration (though you may not want to reuse that test fixture, as the setup for this test is going to be very different)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744c18912b45d36a70f1",
    "number": 2285,
    "body": "This pull request is a larger one in response to issue #1666 which was to add Type Adaptations to Services/Clients, Type Adaptation were originally added to rclcpp with PR #1557 in 2021. Type Adaptations were a whole [design document](https://www.ros.org/reps/rep-2007.html), which is what I tried to follow when implementing this for services and clients, If we're able to do this we can also have a strong resource for the Actions side of things.\r\n\r\nAt the original time of this PR you can see it doesn't work, I wanted to figure out the direction we needed to take with how we implemented the Type Adaptations. In the documentation, the given example was:\r\n```\r\nusing MyAdaptedRequestType = TypeAdapter<std::string, std_msgs::msg::String>;\r\nusing MyAdaptedResponseType = TypeAdapter<bool, std_msgs::msg::Bool>;\r\n\r\nstruct MyServiceTypeAdapter {\r\n   using Request = MyAdaptedRequestType;\r\n   using Response = MyAdaptedResponseType;\r\n};\r\n\r\nauto client = node->create_client<MyServiceTypeAdapter>(\"service\");\r\n```\r\nwhere the original thought was to just make a `struct` that replicates a service with a Request and Response, that's what I applied. There are two spots, currently where this doesn't work -\r\n  - [rosidl_typesupport_cpp's method `get_service_type_support_handle`](https://github.com/CursedRock17/rclcpp/blob/c312b89e3cd2dc7d7b1939e44c237a23386650db/rclcpp/include/rclcpp/get_service_type_support_handle.hpp#L76)\r\n  - [node_type_description's GetTypeDescription__C](https://github.com/CursedRock17/rclcpp/blob/rolling/rclcpp/src/rclcpp/node_interfaces/node_type_descriptions.cpp#L27-L32)\r\n\r\nThese issues highlight the difficulties with using the strategies in the current design docs, which is: the proxy struct that you pass to be a service isn't actually a service. In the case of the rosidl_typesupport, currently [this generated method](https://github.com/ros2/rosidl_typesupport/blob/e5b976b73b4158d0c09d546faac3591cfc90598e/rosidl_typesupport_cpp/resource/srv__type_support.cpp.em#L140-L155) was what I found allowed any services to pass through with this:\r\n- @('::'.join([package_name] + list(interface_path.parents[0].parts)))::@(service.namespaced_type.name)\r\n\r\nbeing passed as the type, afaik there is only one to change this and enable it as a message which where `GetTypeDescription__C` comes into to play, it creates a different method:\r\n```\r\n// Helper function for C typesupport.\r\nnamespace rosidl_typesupport_cpp\r\n{\r\ntemplate<>\r\nrosidl_service_type_support_t const *\r\nget_service_type_support_handle<GetTypeDescription__C>()\r\n{\r\n  return ROSIDL_GET_SRV_TYPE_SUPPORT(type_description_interfaces, srv, GetTypeDescription);\r\n}\r\n}  // namespace rosidl_typesupport_cpp\r\n```\r\ncalling `ROSIDL_GET_SRV_TYPE_SUPPORT`. Circling back to `get_service_type_support_handle`, we don't where the user is going to get these services from, at least I don't think, so that we could apply this type. Then, GetTypeDescription__C doesn't pass to the Service it's used in because, the `Request` and `Response` aren't technically messages again, they are the generated type that the compiler deciphers, this was all added in the [Type Description](https://github.com/ros2/ros2/issues/1159) design and creation. There is also a similar version of type support in [rosidl_runtime_c](https://github.com/ros2/rosidl/blob/rolling/rosidl_runtime_c/include/rosidl_runtime_c/service_type_support_struct.h#L146)\r\n\r\n\r\nSo I submitted the pr early, to try and gain some sort of insight that I could just be missing and find out the direction we want to go. Technically speaking, we could work by creating another TypeAdaptation [`struct`](https://github.com/CursedRock17/rclcpp/blob/rolling/rclcpp/include/rclcpp/type_adapter.hpp) that could take in some form of `AdaptedStruct` and just do what TypeAdapter does know, but with Response and Request, but this isn't very effective because we're generating way more code, we'll have to do it with 3 things when we add Actions, and I don't even know if it will work entirely. Let me know what direction we want to take on this, anything I missed, and if anything needs to be cleared up\r\n",
    "head_branch": "service_type_adapt",
    "is_a_fork": true,
    "comments": [
      "We identified type adaptation as the main culprit for the build time increase between Galactic and Humble.\r\nI would strongly recommend to profile the build time changes caused by this build and NOT merge this PR if it's too large.",
      "@alsora could you quantify the time increase? ",
      "@roncapat please refer to this Discourse post: https://discourse.ros.org/t/compilation-bloat-issue/30345/7\r\nConsidering a relatively small example repository, the commit that introduced type adaptation caused an increase in build time of almost 20%.\r\nThis increase grows even more the larger the codebase being compiled is.\r\n\r\nIt's now too late to revert that commit, as too many things have been built on top of it, but we should not repeat the same mistake and carefully profile this type of changes.\r\n",
      "Clear, thanks. But it is my undestanding (and experience) that:\n\n- templates induce growing build times\n- type adaptation is I think one of the most powerful features of rclcpp\n\n... so I see the point of trying to optimize before merge, but not to the point of not implementing type adaptation for services and actions anytime soon. Just my two (maybe useless) cents here of course :)",
      " > templates induce growing build times\r\n\r\nAbsolutely! That's why we should be careful in how we use them.\r\n\r\n> type adaptation is I think one of the most powerful features of rclcpp\r\n\r\nI would say that this is debatable. Not everyone uses or will use type adaptation, but everyone needs to compile their applications that depend on rclcpp.\r\n\r\nIf we want ROS 2 to be become a mature and adopted software in the industry, we can't compromise on stability or allow major regressions for the sake of adding new features.\r\n\r\nAs a company using ROS 2 in production (iRobot), we can't move from Galactic to Humble due to the aforementioned build time increase, which would cost us huge amounts of money in infrastructure costs (building our software with ROS 2 Galactic takes 1h30m, which become 2h in ROS 2 Humble, with no changes to the source code, just a different version of ROS 2 being linked. Multiply that for hundreds of builds run every day and the $$$ adds up very quickly).\r\n\r\nThe solution will not be to \"not do type adaptation\", but rather to \"implement type adaptation in a different way\".\r\n\r\nHowever, before derailing this PR too much with \"philosophical discussions\", we should simply run extensive profiling of the proposed solution and then, depending on the results, evaluate what to do.\r\n",
      "> If we want ROS 2 to be become a mature and adopted software in the industry, we can't compromise on stability or allow major regressions for the sake of adding new features.\r\n\r\nI think we have to be measured in our response here.  We can't absolutely prevent new features because it might increase compile times.  While that is certainly \"a\" metric we should keep an eye on, it is (in my opinion) lower on the priority list than other things like runtime performance, user experience, and the like.\r\n\r\n> However, before derailing this PR too much with \"philosophical discussions\", we should simply run extensive profiling of the proposed solution and then, depending on the results, evaluate what to do.\r\n\r\nAnd this I totally agree with.  If we know how much this increases compile times, then we can make an informed decision on the utility of the change.",
      "Sorry for the delay, but I've got a solid chunk of the altered design implemented.\r\n\r\n<details> \r\n<summary> <h2> Build Times with Adapted Services \r\n </h2> </summary>\r\nThese were just quick build times from my local machine so they should be taken with a grain of salt.\r\n\r\n| Branch                           | Min (sec)    | Max (sec) | Mean   |\r\n| ---------------------   | ----------- | ---------- | ------- |\r\n| Service_Type_Adapt    | 188.94        | 219.26      | 199.90 |\r\n| Rolling                            | 174.87        | 200.63      | 192.57 |\r\n\r\nThat 7.33 seconds puts us at an increase in build time at 3.8% increase, certainly better that the ~18% jump from the original implementation of Type Adaptions, but still an increase, even though we expected it. Though any other additions in the methods that we change, may increase these compile times because they're so reliant on templates.\r\n\r\n####  Runtimes\r\nAnother issue that may arise are runtimes, while most of these services are passed by some form of `shared_ptr` it seems that PR #2199 and [this repository](https://github.com/clalancette/type_adapt_example) highlight the slowing of templating functions. These may not be directly related to this, but I figured it's best to acknowledge that damage could be inflicted. That being said, I didn't do any testing related to this so I cannot be perfectly sure how that will change.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary> <h2> Design Differences\r\n </h2> </summary>\r\n\r\nIf you take a look at [test_client_with_type_adapter](https://github.com/ros2/rclcpp/blob/34d8989822f8db84eada03b1a74a7ba14b8ab118/rclcpp/test/rclcpp/test_client_with_type_adapter.cpp) you'll notice how I changed from making a structure which takes in the `request` and `response` to just taking in the whole `service`.\r\n\r\n`struct rclcpp::TypeAdapter<CustomBool, rclcpp::srv::SetBool>`\r\n\r\nAdditionally, the custom structures now mimick services: \r\n```\r\nstruct CustomBool\r\n{\r\n  struct SetBoolResponse\r\n  {\r\n    bool success;\r\n    std::string message;\r\n  };\r\n\r\n  using Request = bool;\r\n  using Response = SetBoolResponse;\r\n};\r\n```\r\nWe also changed from converting to `custom_type` or `ros_type`, instead we can convert to a `ros_service_request`, `ros_service_response`, `custom_service_request`, and `custom_service_response` i.e:\r\n```\r\n  static void\r\n  convert_to_ros_service_request(\r\n    const custom_type::Request & source,\r\n    ros_message_type::Request & destination)\r\n  {\r\n    destination.data = source;\r\n  }\r\n```\r\n\r\nThe reason this occurred, was confirmed by my doubts earlier, we cannot create mimickable service requests and responses. There isn't type support to enable each `Request` and `Response` to be a message, while allowing the custom `Service` to be a service. Since ROS works by generating the Service through ROSIDL we would have to do that for each custom Service Request and Response by building a fake Service, which can't happen since we have no location information. The user would also have to override all the type traits like `is_message` for each each response and request, which might allow incorrect styles of code to pass through. I hope that I didn't explain that too incorrectly or weird.\r\n\r\nWhile the user does have to set up the Adapted Type Structure a bit differently, this does allow us to keep it more concise, gives us more control over the types, and should work better this way. A slight issue I should address is naming conventions, really just [`using ros_message_type`](https://github.com/ros2/rclcpp/blob/34d8989822f8db84eada03b1a74a7ba14b8ab118/rclcpp/test/rclcpp/test_client_with_type_adapter.cpp#L69) could become `ros_type` since that's how the custom side is already set up. This way we don't have to alter the `TypeAdapter` class. \r\n\r\n</details>\r\n\r\n<details>\r\n<summary> <h2> Callback Mixing\r\n </h2> </summary>\r\n\r\nAs of right now the entire `Service` side would be ready to go, with the able to call any combination of custom and ROS alongside request and response. Though, on the `Client` side, I'm trying to get this implementation just right, right now we can only support callbacks which totally share their type with the request or response. For example \r\n[async_send_request](https://github.com/ros2/rclcpp/blob/34d8989822f8db84eada03b1a74a7ba14b8ab118/rclcpp/include/rclcpp/client.hpp#L947-L990) which has both a request and some form of callback with a request type. The actual implementations don't work because of template specialization, the compiler (in my case Clang) recognizes that the function signature would be the same, although it wouldn't seem to be the case. Past these weird implementation details if we did get it to work, our callbacks cannot have different types than our [promises](https://github.com/ros2/rclcpp/blob/34d8989822f8db84eada03b1a74a7ba14b8ab118/rclcpp/include/rclcpp/client.hpp#L471). \r\n\r\nTo extend of that, converting between futures seems difficult to since many of them start out as [empty](https://en.cppreference.com/w/cpp/thread/shared_future/shared_future) and returning a different type than the user wants(i.e custom when they want ROS) is not something we want to do. \r\n\r\nFor now though, a lot of our cases are covered. One last thing that does come as a result of all these different cases is template specialization. While the compile times didn't increase absurdly, there is quite a bit of code that could be seen as bloat for those trying to work on the codebase and decipher where their types are coming from. There was a large increase in the original pull request that added adaption, but this would be another one, and this would be a repeated process if we add Type Adaptions for actions as well. I am looking for optimizations and places that we can remove code, such as conversion for futures, but in the mean time this would be a large piece of templated and specialized code.\r\n</details>\r\n\r\n",
      "@CursedRock17 thank you a lot for the analysis, I will need to take some time to digest it and give a more meaningful feedback.\r\nHowever, I want to point out something wrt the build time increase.\r\n\r\nWhat these type of changes really affect is not the build time of rclcpp (which yes, it is affected, but this is IMO a minor and unavoidable problem because you are adding new features), but rather the build time of C++ applications using rclcpp.\r\nThe more correct benchmark to run should consists of an application that creates a bunch of ROS 2 servers and clients which do not require type adaptation (for example a main.cpp creating 30 clients and 30 servers with a bunch of  different service types)\r\n\r\nWhat's important to minimize is the impact on those users that don't care about the new features being added.\r\n\r\nWe can also measure the impact when switching from the standard service type to type-adapted ones\r\n\r\n",
      "Ok, I went and did some testing using [ClangBuildAnalyzer](https://github.com/aras-p/ClangBuildAnalyzer) and [this repository](https://github.com/CursedRock17/type_adapt_example) if needed to recreate. During the testing I found that the previous iteration that I had didn't even work, as [`create_request`](https://github.com/CursedRock17/rclcpp/blob/service_type_adapt/rclcpp/include/rclcpp/service.hpp#L590) and [`handle_request`](https://github.com/CursedRock17/rclcpp/blob/service_type_adapt/rclcpp/include/rclcpp/service.hpp#602) used a voided type that then moves to a ROS type.\r\n\r\nAfter fixing those previous errors I have acquired the following testing results from ClangBuildAnalyzer\r\n\r\n<details> \r\n<summary> <h3> service_type_adapt branch client side no adapters\r\n </h3> </summary>\r\n**** Time summary:\r\nCompilation (2 times):\r\n  Parsing (frontend):            2.7 s\r\n  Codegen & opts (backend):      0.3 s\r\n\r\n**** Files that took longest to parse (compiler frontend):\r\n  2502 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n   159 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n\r\n**** Files that took longest to codegen (compiler backend):\r\n   282 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n\r\n**** Templates that took longest to instantiate:\r\n   143 ms: rclcpp::create_client<diagnostic_msgs::srv::AddDiagnostics> (2 times, avg 71 ms)\r\n   143 ms: rclcpp::create_client<std_srvs::srv::SetBool> (2 times, avg 71 ms)\r\n   141 ms: rclcpp::create_client<lifecycle_msgs::srv::ChangeState> (2 times, avg 70 ms)\r\n   141 ms: rclcpp::create_client<lifecycle_msgs::srv::GetState> (2 times, avg 70 ms)\r\n   137 ms: rclcpp::create_service<std_srvs::srv::Empty, std::__bind<void (Empty... (2 times, avg 68 ms)\r\n   128 ms: rclcpp::create_client<std_srvs::srv::Empty> (2 times, avg 64 ms)\r\n   127 ms: rclcpp::create_client<std_srvs::srv::Trigger> (2 times, avg 63 ms)\r\n   121 ms: rclcpp::create_service<lifecycle_msgs::srv::GetState, std::__bind<vo... (2 times, avg 60 ms)\r\n   118 ms: rclcpp::create_service<std_srvs::srv::SetBool, std::__bind<void (Set... (2 times, avg 59 ms)\r\n   108 ms: rclcpp::create_service<std_srvs::srv::Trigger, std::__bind<void (Tri... (2 times, avg 54 ms)\r\n   106 ms: rclcpp::create_service<lifecycle_msgs::srv::ChangeState, std::__bind... (2 times, avg 53 ms)\r\n   105 ms: rclcpp::create_service<diagnostic_msgs::srv::AddDiagnostics, std::__... (2 times, avg 52 ms)\r\n    71 ms: rclcpp::Node::create_client<diagnostic_msgs::srv::AddDiagnostics> (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Node::create_client<std_srvs::srv::SetBool> (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Client<diagnostic_msgs::srv::AddDiagnostics>::make_shared<rc... (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Client<std_srvs::srv::SetBool>::make_shared<rclcpp::node_int... (1 times, avg 71 ms)\r\n    71 ms: std::make_shared<rclcpp::Client<diagnostic_msgs::srv::AddDiagnostics... (1 times, avg 71 ms)\r\n    71 ms: std::make_shared<rclcpp::Client<std_srvs::srv::SetBool>, rclcpp::nod... (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Node::create_client<lifecycle_msgs::srv::ChangeState> (1 times, avg 71 ms)\r\n    71 ms: std::allocate_shared<rclcpp::Client<diagnostic_msgs::srv::AddDiagnos... (1 times, avg 71 ms)\r\n    70 ms: std::allocate_shared<rclcpp::Client<std_srvs::srv::SetBool>, std::al... (1 times, avg 70 ms)\r\n    70 ms: rclcpp::Node::create_client<lifecycle_msgs::srv::GetState> (1 times, avg 70 ms)\r\n    70 ms: rclcpp::Client<lifecycle_msgs::srv::ChangeState>::make_shared<rclcpp... (1 times, avg 70 ms)\r\n    70 ms: std::make_shared<rclcpp::Client<lifecycle_msgs::srv::ChangeState>, r... (1 times, avg 70 ms)\r\n    70 ms: rclcpp::Client<lifecycle_msgs::srv::GetState>::make_shared<rclcpp::n... (1 times, avg 70 ms)\r\n    70 ms: std::make_shared<rclcpp::Client<lifecycle_msgs::srv::GetState>, rclc... (1 times, avg 70 ms)\r\n    70 ms: std::allocate_shared<rclcpp::Client<lifecycle_msgs::srv::ChangeState... (1 times, avg 70 ms)\r\n    70 ms: std::allocate_shared<rclcpp::Client<lifecycle_msgs::srv::GetState>, ... (1 times, avg 70 ms)\r\n    69 ms: std::__shared_ptr_emplace<rclcpp::Client<std_srvs::srv::SetBool>, st... (1 times, avg 69 ms)\r\n    69 ms: std::__shared_ptr_emplace<rclcpp::Client<diagnostic_msgs::srv::AddDi... (1 times, avg 69 ms)\r\n\r\n**** Template sets that took longest to instantiate:\r\n   562 ms: std::make_shared<$> (28 times, avg 20 ms)\r\n   558 ms: std::allocate_shared<$> (28 times, avg 19 ms)\r\n   496 ms: std::__shared_ptr_emplace<$>::__shared_ptr_emplace<$> (13 times, avg 38 ms)\r\n   414 ms: rclcpp::Node::create_client<$> (6 times, avg 69 ms)\r\n   413 ms: rclcpp::create_client<$> (6 times, avg 68 ms)\r\n   411 ms: rclcpp::Client<$>::make_shared<$> (6 times, avg 68 ms)\r\n   397 ms: rclcpp::Client<$>::Client (6 times, avg 66 ms)\r\n   349 ms: rclcpp::Node::create_service<$> (6 times, avg 58 ms)\r\n   349 ms: rclcpp::create_service<$> (6 times, avg 58 ms)\r\n   285 ms: std::function<$>::function<$> (15 times, avg 19 ms)\r\n   283 ms: std::__function::__value_func<$>::__value_func<$> (15 times, avg 18 ms)\r\n   231 ms: std::__function::__func<$>::__func (15 times, avg 15 ms)\r\n   204 ms: std::unordered_map<$>::unordered_map (6 times, avg 34 ms)\r\n   197 ms: std::variant<$> (19 times, avg 10 ms)\r\n   180 ms: std::__hash_table<$>::~__hash_table (6 times, avg 30 ms)\r\n   180 ms: rclcpp::AnyServiceCallback<$>::set<$> (6 times, avg 30 ms)\r\n   179 ms: std::__hash_table<$>::__deallocate_node (6 times, avg 29 ms)\r\n   173 ms: std::__function::__alloc_func<$>::__alloc_func (45 times, avg 3 ms)\r\n   170 ms: std::unordered_map<$> (26 times, avg 6 ms)\r\n   166 ms: std::__variant_detail::__ctor<$>::__construct_alt<$> (19 times, avg 8 ms)\r\n   163 ms: rclcpp::Client<$>::handle_response (6 times, avg 27 ms)\r\n   156 ms: std::forward_as_tuple<$> (69 times, avg 2 ms)\r\n   146 ms: std::__hash_table<$> (26 times, avg 5 ms)\r\n   146 ms: std::tuple<$> (95 times, avg 1 ms)\r\n   145 ms: std::__variant_detail::__impl<$>::__assign<$> (6 times, avg 24 ms)\r\n   144 ms: std::__variant_detail::__assignment<$>::__assign_alt<$> (6 times, avg 24 ms)\r\n   130 ms: std::__hash_value_type<$> (11 times, avg 11 ms)\r\n   129 ms: std::pair<$> (21 times, avg 6 ms)\r\n   127 ms: std::__hash_node<$> (6 times, avg 21 ms)\r\n   125 ms: rclcpp::Service<$>::make_shared<$> (6 times, avg 20 ms)\r\n\r\n**** Functions that took longest to compile:\r\n     1 ms: main (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<std_srvs::srv::SetBool>::handle_response(std::__1::sh... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: TriggerClientNode::TriggerClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: SetBoolClientNode::SetBoolClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: GetStateClientNode::GetStateClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: EmptyClientNode::EmptyClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: ChangeStateClientNode::ChangeStateClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: AddDiagnosticsClientNode::AddDiagnosticsClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<diagnostic_msgs::srv::AddDiagnostics>::handle_respons... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<std_srvs::srv::Empty>::handle_response(std::__1::shar... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<lifecycle_msgs::srv::GetState>::handle_response(std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<lifecycle_msgs::srv::ChangeState>::handle_response(st... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<std_srvs::srv::Trigger>::handle_response(std::__1::sh... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: bool std::__1::__cxx_atomic_exchange[abi:v15006]<bool>(std::__1::__c... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_val... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n\r\n**** Function sets that took longest to compile / optimize:\r\n     4 ms: rclcpp::Client<$>::handle_response(std::__1::shared_ptr<$>, std::__1... (6 times, avg 0 ms)\r\n     3 ms: std::__1::pair<$> std::__1::__hash_table<$>::__emplace_unique_key_ar... (6 times, avg 0 ms)\r\n     0 ms: bool std::__1::__cxx_atomic_exchange[abi:v15006]<$>(std::__1::__cxx_... (1 times, avg 0 ms)\r\n     0 ms: std::__1::__hash_iterator<$> std::__1::__hash_table<$>::find<$>(long... (1 times, avg 0 ms)\r\n\r\n**** Expensive headers:\r\n825 ms: /Users/cursedrock17/documents/coding/cpp/ros2/rclcpp/install/rclcpp/include/rclcpp/rclcpp/rclcpp.hpp (included 1 times, avg 825 ms), included via:\r\n  1x: <direct include>\r\n\r\n160 ms: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/memory (included 1 times, avg 160 ms), included via:\r\n  1x: <direct include>\r\n\r\n35 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/change_state_node.hpp (included 1 times, avg 35 ms), included via:\r\n  1x: <direct include>\r\n\r\n33 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/set_bool_node.hpp (included 1 times, avg 33 ms), included via:\r\n  1x: <direct include>\r\n\r\n33 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/add_diagnostics_node.hpp (included 1 times, avg 33 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/get_state_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n27 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/trigger_node.hpp (included 1 times, avg 27 ms), included via:\r\n  1x: <direct include>\r\n\r\n26 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/empty_node.hpp (included 1 times, avg 26 ms), included via:\r\n  1x: <direct include>\r\n\r\n  done in 0.0s.\r\n\r\n</details>\r\n\r\n<details> \r\n<summary> <h3> rolling branch client side no adapters\r\n </h3> </summary>\r\n**** Time summary:\r\nCompilation (2 times):\r\n  Parsing (frontend):            2.5 s\r\n  Codegen & opts (backend):      0.2 s\r\n\r\n**** Files that took longest to parse (compiler frontend):\r\n  2350 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n   132 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n\r\n**** Files that took longest to codegen (compiler backend):\r\n   239 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n\r\n**** Templates that took longest to instantiate:\r\n   133 ms: rclcpp::create_client<std_srvs::srv::Trigger> (2 times, avg 66 ms)\r\n   115 ms: rclcpp::create_service<diagnostic_msgs::srv::AddDiagnostics, std::__... (2 times, avg 57 ms)\r\n   115 ms: rclcpp::create_service<lifecycle_msgs::srv::ChangeState, std::__bind... (2 times, avg 57 ms)\r\n   113 ms: rclcpp::create_client<lifecycle_msgs::srv::GetState> (2 times, avg 56 ms)\r\n   110 ms: rclcpp::create_client<std_srvs::srv::SetBool> (2 times, avg 55 ms)\r\n   109 ms: rclcpp::create_service<std_srvs::srv::SetBool, std::__bind<void (Set... (2 times, avg 54 ms)\r\n   107 ms: rclcpp::create_service<lifecycle_msgs::srv::GetState, std::__bind<vo... (2 times, avg 53 ms)\r\n   106 ms: rclcpp::create_service<std_srvs::srv::Empty, std::__bind<void (Empty... (2 times, avg 53 ms)\r\n   104 ms: rclcpp::create_client<diagnostic_msgs::srv::AddDiagnostics> (2 times, avg 52 ms)\r\n   103 ms: rclcpp::create_service<std_srvs::srv::Trigger, std::__bind<void (Tri... (2 times, avg 51 ms)\r\n   101 ms: rclcpp::create_client<lifecycle_msgs::srv::ChangeState> (2 times, avg 50 ms)\r\n    97 ms: rclcpp::create_client<std_srvs::srv::Empty> (2 times, avg 48 ms)\r\n    66 ms: rclcpp::Node::create_client<std_srvs::srv::Trigger> (1 times, avg 66 ms)\r\n    66 ms: rclcpp::Client<std_srvs::srv::Trigger>::make_shared<rclcpp::node_int... (1 times, avg 66 ms)\r\n    66 ms: std::make_shared<rclcpp::Client<std_srvs::srv::Trigger>, rclcpp::nod... (1 times, avg 66 ms)\r\n    66 ms: std::allocate_shared<rclcpp::Client<std_srvs::srv::Trigger>, std::al... (1 times, avg 66 ms)\r\n    64 ms: std::__shared_ptr_emplace<rclcpp::Client<std_srvs::srv::Trigger>, st... (1 times, avg 64 ms)\r\n    64 ms: rclcpp::Client<std_srvs::srv::Trigger>::Client (1 times, avg 64 ms)\r\n    57 ms: rclcpp::Node::create_service<diagnostic_msgs::srv::AddDiagnostics, s... (1 times, avg 57 ms)\r\n    57 ms: rclcpp::Node::create_service<lifecycle_msgs::srv::ChangeState, std::... (1 times, avg 57 ms)\r\n    56 ms: rclcpp::Node::create_client<lifecycle_msgs::srv::GetState> (1 times, avg 56 ms)\r\n    56 ms: rclcpp::Client<lifecycle_msgs::srv::GetState>::make_shared<rclcpp::n... (1 times, avg 56 ms)\r\n    56 ms: std::make_shared<rclcpp::Client<lifecycle_msgs::srv::GetState>, rclc... (1 times, avg 56 ms)\r\n    56 ms: std::allocate_shared<rclcpp::Client<lifecycle_msgs::srv::GetState>, ... (1 times, avg 56 ms)\r\n    55 ms: rclcpp::Node::create_client<std_srvs::srv::SetBool> (1 times, avg 55 ms)\r\n    55 ms: rclcpp::Client<std_srvs::srv::SetBool>::make_shared<rclcpp::node_int... (1 times, avg 55 ms)\r\n    54 ms: std::make_shared<rclcpp::Client<std_srvs::srv::SetBool>, rclcpp::nod... (1 times, avg 54 ms)\r\n    54 ms: rclcpp::Node::create_service<std_srvs::srv::SetBool, std::__bind<voi... (1 times, avg 54 ms)\r\n    54 ms: std::allocate_shared<rclcpp::Client<std_srvs::srv::SetBool>, std::al... (1 times, avg 54 ms)\r\n    54 ms: std::__shared_ptr_emplace<rclcpp::Client<lifecycle_msgs::srv::GetSta... (1 times, avg 54 ms)\r\n\r\n**** Template sets that took longest to instantiate:\r\n   451 ms: std::make_shared<$> (27 times, avg 16 ms)\r\n   447 ms: std::allocate_shared<$> (27 times, avg 16 ms)\r\n   401 ms: std::__shared_ptr_emplace<$>::__shared_ptr_emplace<$> (12 times, avg 33 ms)\r\n   331 ms: rclcpp::Node::create_client<$> (6 times, avg 55 ms)\r\n   330 ms: rclcpp::create_client<$> (6 times, avg 55 ms)\r\n   329 ms: rclcpp::Node::create_service<$> (6 times, avg 54 ms)\r\n   328 ms: rclcpp::create_service<$> (6 times, avg 54 ms)\r\n   328 ms: rclcpp::Client<$>::make_shared<$> (6 times, avg 54 ms)\r\n   314 ms: rclcpp::Client<$>::Client (6 times, avg 52 ms)\r\n   289 ms: std::function<$>::function<$> (15 times, avg 19 ms)\r\n   288 ms: std::__function::__value_func<$>::__value_func<$> (15 times, avg 19 ms)\r\n   239 ms: std::__function::__func<$>::__func (15 times, avg 15 ms)\r\n   186 ms: rclcpp::AnyServiceCallback<$>::set<$> (6 times, avg 31 ms)\r\n   178 ms: std::__function::__alloc_func<$>::__alloc_func (45 times, avg 3 ms)\r\n   168 ms: std::unordered_map<$> (26 times, avg 6 ms)\r\n   161 ms: std::variant<$> (19 times, avg 8 ms)\r\n   153 ms: std::forward_as_tuple<$> (69 times, avg 2 ms)\r\n   152 ms: std::unordered_map<$>::unordered_map (6 times, avg 25 ms)\r\n   147 ms: std::__variant_detail::__impl<$>::__assign<$> (6 times, avg 24 ms)\r\n   147 ms: std::__variant_detail::__ctor<$>::__construct_alt<$> (19 times, avg 7 ms)\r\n   146 ms: std::__variant_detail::__assignment<$>::__assign_alt<$> (6 times, avg 24 ms)\r\n   146 ms: std::tuple<$> (95 times, avg 1 ms)\r\n   136 ms: std::__hash_table<$> (26 times, avg 5 ms)\r\n   133 ms: rclcpp::Client<$>::handle_response (6 times, avg 22 ms)\r\n   129 ms: std::__hash_table<$>::~__hash_table (6 times, avg 21 ms)\r\n   128 ms: std::__hash_table<$>::__deallocate_node (6 times, avg 21 ms)\r\n   116 ms: std::__function::__func<$>::__clone (30 times, avg 3 ms)\r\n   104 ms: rclcpp::Client<$> (12 times, avg 8 ms)\r\n   100 ms: std::unique_ptr<$> (94 times, avg 1 ms)\r\n   100 ms: std::pair<$> (21 times, avg 4 ms)\r\n\r\n**** Functions that took longest to compile:\r\n     1 ms: main (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: TriggerClientNode::TriggerClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: ChangeStateClientNode::ChangeStateClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: GetStateClientNode::GetStateClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: SetBoolClientNode::SetBoolClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: AddDiagnosticsClientNode::AddDiagnosticsClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: EmptyClientNode::EmptyClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n\r\n**** Function sets that took longest to compile / optimize:\r\n     2 ms: std::__1::pair<$> std::__1::__hash_table<$>::__emplace_unique_key_ar... (5 times, avg 0 ms)\r\n\r\n**** Expensive headers:\r\n817 ms: /Users/cursedrock17/ros2_rolling/install/rclcpp/include/rclcpp/rclcpp/rclcpp.hpp (included 1 times, avg 817 ms), included via:\r\n  1x: <direct include>\r\n\r\n143 ms: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/memory (included 1 times, avg 143 ms), included via:\r\n  1x: <direct include>\r\n\r\n31 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/get_state_node.hpp (included 1 times, avg 31 ms), included via:\r\n  1x: <direct include>\r\n\r\n29 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/empty_node.hpp (included 1 times, avg 29 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/add_diagnostics_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/change_state_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/set_bool_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n26 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/trigger_node.hpp (included 1 times, avg 26 ms), included via:\r\n  1x: <direct include>\r\n\r\n  done in 0.0s.\r\n\r\n</details>\r\n\r\n<details> \r\n<summary> <h3> service_type_adapt branch server side no adapters\r\n </h3> </summary>\r\n>\r\n**** Time summary:\r\nCompilation (2 times):\r\n  Parsing (frontend):            2.5 s\r\n  Codegen & opts (backend):      0.2 s\r\n\r\n**** Files that took longest to parse (compiler frontend):\r\n  2409 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n   121 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n\r\n**** Files that took longest to codegen (compiler backend):\r\n   245 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n\r\n**** Templates that took longest to instantiate:\r\n   143 ms: rclcpp::create_client<lifecycle_msgs::srv::ChangeState> (2 times, avg 71 ms)\r\n   143 ms: rclcpp::create_client<lifecycle_msgs::srv::GetState> (2 times, avg 71 ms)\r\n   142 ms: rclcpp::create_client<std_srvs::srv::SetBool> (2 times, avg 71 ms)\r\n   141 ms: rclcpp::create_client<diagnostic_msgs::srv::AddDiagnostics> (2 times, avg 70 ms)\r\n   136 ms: rclcpp::create_service<std_srvs::srv::Empty, std::__bind<void (Empty... (2 times, avg 68 ms)\r\n   128 ms: rclcpp::create_client<std_srvs::srv::Empty> (2 times, avg 64 ms)\r\n   127 ms: rclcpp::create_client<std_srvs::srv::Trigger> (2 times, avg 63 ms)\r\n   119 ms: rclcpp::create_service<lifecycle_msgs::srv::GetState, std::__bind<vo... (2 times, avg 59 ms)\r\n   118 ms: rclcpp::create_service<std_srvs::srv::SetBool, std::__bind<void (Set... (2 times, avg 59 ms)\r\n   106 ms: rclcpp::create_service<lifecycle_msgs::srv::ChangeState, std::__bind... (2 times, avg 53 ms)\r\n   105 ms: rclcpp::create_service<std_srvs::srv::Trigger, std::__bind<void (Tri... (2 times, avg 52 ms)\r\n   105 ms: rclcpp::create_service<diagnostic_msgs::srv::AddDiagnostics, std::__... (2 times, avg 52 ms)\r\n    71 ms: rclcpp::Node::create_client<lifecycle_msgs::srv::ChangeState> (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Node::create_client<lifecycle_msgs::srv::GetState> (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Node::create_client<std_srvs::srv::SetBool> (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Client<lifecycle_msgs::srv::GetState>::make_shared<rclcpp::n... (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Client<lifecycle_msgs::srv::ChangeState>::make_shared<rclcpp... (1 times, avg 71 ms)\r\n    71 ms: std::make_shared<rclcpp::Client<lifecycle_msgs::srv::GetState>, rclc... (1 times, avg 71 ms)\r\n    71 ms: std::make_shared<rclcpp::Client<lifecycle_msgs::srv::ChangeState>, r... (1 times, avg 71 ms)\r\n    71 ms: rclcpp::Client<std_srvs::srv::SetBool>::make_shared<rclcpp::node_int... (1 times, avg 71 ms)\r\n    71 ms: std::make_shared<rclcpp::Client<std_srvs::srv::SetBool>, rclcpp::nod... (1 times, avg 71 ms)\r\n    70 ms: std::allocate_shared<rclcpp::Client<lifecycle_msgs::srv::GetState>, ... (1 times, avg 70 ms)\r\n    70 ms: std::allocate_shared<rclcpp::Client<lifecycle_msgs::srv::ChangeState... (1 times, avg 70 ms)\r\n    70 ms: std::allocate_shared<rclcpp::Client<std_srvs::srv::SetBool>, std::al... (1 times, avg 70 ms)\r\n    70 ms: rclcpp::Node::create_client<diagnostic_msgs::srv::AddDiagnostics> (1 times, avg 70 ms)\r\n    70 ms: rclcpp::Client<diagnostic_msgs::srv::AddDiagnostics>::make_shared<rc... (1 times, avg 70 ms)\r\n    70 ms: std::make_shared<rclcpp::Client<diagnostic_msgs::srv::AddDiagnostics... (1 times, avg 70 ms)\r\n    70 ms: std::allocate_shared<rclcpp::Client<diagnostic_msgs::srv::AddDiagnos... (1 times, avg 70 ms)\r\n    69 ms: std::__shared_ptr_emplace<rclcpp::Client<std_srvs::srv::SetBool>, st... (1 times, avg 69 ms)\r\n    69 ms: std::__shared_ptr_emplace<rclcpp::Client<lifecycle_msgs::srv::Change... (1 times, avg 69 ms)\r\n\r\n**** Template sets that took longest to instantiate:\r\n   560 ms: std::make_shared<$> (27 times, avg 20 ms)\r\n   556 ms: std::allocate_shared<$> (27 times, avg 20 ms)\r\n   508 ms: std::__shared_ptr_emplace<$>::__shared_ptr_emplace<$> (12 times, avg 42 ms)\r\n   413 ms: rclcpp::Node::create_client<$> (6 times, avg 68 ms)\r\n   413 ms: rclcpp::create_client<$> (6 times, avg 68 ms)\r\n   411 ms: rclcpp::Client<$>::make_shared<$> (6 times, avg 68 ms)\r\n   396 ms: rclcpp::Client<$>::Client (6 times, avg 66 ms)\r\n   347 ms: rclcpp::Node::create_service<$> (6 times, avg 57 ms)\r\n   346 ms: rclcpp::create_service<$> (6 times, avg 57 ms)\r\n   282 ms: std::function<$>::function<$> (15 times, avg 18 ms)\r\n   280 ms: std::__function::__value_func<$>::__value_func<$> (15 times, avg 18 ms)\r\n   228 ms: std::__function::__func<$>::__func (15 times, avg 15 ms)\r\n   202 ms: std::unordered_map<$>::unordered_map (6 times, avg 33 ms)\r\n   196 ms: std::variant<$> (19 times, avg 10 ms)\r\n   179 ms: std::__hash_table<$>::~__hash_table (6 times, avg 29 ms)\r\n   178 ms: std::__hash_table<$>::__deallocate_node (6 times, avg 29 ms)\r\n   178 ms: rclcpp::AnyServiceCallback<$>::set<$> (6 times, avg 29 ms)\r\n   171 ms: std::__function::__alloc_func<$>::__alloc_func (45 times, avg 3 ms)\r\n   170 ms: std::unordered_map<$> (26 times, avg 6 ms)\r\n   164 ms: std::__variant_detail::__ctor<$>::__construct_alt<$> (19 times, avg 8 ms)\r\n   164 ms: rclcpp::Client<$>::handle_response (6 times, avg 27 ms)\r\n   145 ms: std::__hash_table<$> (26 times, avg 5 ms)\r\n   143 ms: std::__variant_detail::__impl<$>::__assign<$> (6 times, avg 23 ms)\r\n   142 ms: std::__variant_detail::__assignment<$>::__assign_alt<$> (6 times, avg 23 ms)\r\n   129 ms: std::__hash_value_type<$> (11 times, avg 11 ms)\r\n   127 ms: std::tuple<$> (88 times, avg 1 ms)\r\n   126 ms: std::forward_as_tuple<$> (62 times, avg 2 ms)\r\n   126 ms: std::__hash_node<$> (6 times, avg 21 ms)\r\n   124 ms: rclcpp::Service<$>::make_shared<$> (6 times, avg 20 ms)\r\n   121 ms: std::pair<$> (10 times, avg 12 ms)\r\n\r\n**** Functions that took longest to compile:\r\n     4 ms: main (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<lifecycle_msgs::srv::GetState>::handle_request(std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<std_srvs::srv::SetBool>::handle_request(std::__1::sh... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<diagnostic_msgs::srv::AddDiagnostics>::handle_reques... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<std_srvs::srv::Trigger>::handle_request(std::__1::sh... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<lifecycle_msgs::srv::ChangeState>::handle_request(st... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<std_srvs::srv::Empty>::handle_request(std::__1::shar... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: std::__1::__shared_ptr_emplace<SetBoolServerNode, std::__1::allocato... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<std_srvs::srv::SetBool>::SharedPtr rclcpp::create_se... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: std::__1::shared_ptr<SetBoolServerNode> std::__1::shared_ptr<SetBool... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n\r\n**** Function sets that took longest to compile / optimize:\r\n     5 ms: rclcpp::Service<$>::handle_request(std::__1::shared_ptr<$>, std::__1... (6 times, avg 0 ms)\r\n     0 ms: std::__1::__shared_ptr_emplace<$>::__on_zero_shared() (1 times, avg 0 ms)\r\n     0 ms: rclcpp::Service<$>::SharedPtr rclcpp::create_service<$>(std::__1::sh... (1 times, avg 0 ms)\r\n     0 ms: std::__1::shared_ptr<$> std::__1::shared_ptr<$>::__create_with_contr... (1 times, avg 0 ms)\r\n\r\n**** Expensive headers:\r\n825 ms: /Users/cursedrock17/documents/coding/cpp/ros2/rclcpp/install/rclcpp/include/rclcpp/rclcpp/rclcpp.hpp (included 1 times, avg 825 ms), included via:\r\n  1x: <direct include>\r\n\r\n160 ms: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/memory (included 1 times, avg 160 ms), included via:\r\n  1x: <direct include>\r\n\r\n35 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/change_state_node.hpp (included 1 times, avg 35 ms), included via:\r\n  1x: <direct include>\r\n\r\n33 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/set_bool_node.hpp (included 1 times, avg 33 ms), included via:\r\n  1x: <direct include>\r\n\r\n33 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/add_diagnostics_node.hpp (included 1 times, avg 33 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/get_state_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n27 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/trigger_node.hpp (included 1 times, avg 27 ms), included via:\r\n  1x: <direct include>\r\n\r\n26 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/empty_node.hpp (included 1 times, avg 26 ms), included via:\r\n  1x: <direct include>\r\n\r\n  done in 0.0s\r\n</details>\r\n\r\n<details> \r\n<summary> <h3> rolling branch server side no adapters\r\n </h3> </summary>\r\n**** Time summary:\r\nCompilation (2 times):\r\n  Parsing (frontend):            2.4 s\r\n  Codegen & opts (backend):      0.2 s\r\n\r\n**** Files that took longest to parse (compiler frontend):\r\n  2249 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n   120 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n\r\n**** Files that took longest to codegen (compiler backend):\r\n   226 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n\r\n**** Templates that took longest to instantiate:\r\n   131 ms: rclcpp::create_client<std_srvs::srv::Trigger> (2 times, avg 65 ms)\r\n   115 ms: rclcpp::create_service<diagnostic_msgs::srv::AddDiagnostics, std::__... (2 times, avg 57 ms)\r\n   115 ms: rclcpp::create_service<lifecycle_msgs::srv::ChangeState, std::__bind... (2 times, avg 57 ms)\r\n   109 ms: rclcpp::create_client<std_srvs::srv::SetBool> (2 times, avg 54 ms)\r\n   109 ms: rclcpp::create_service<std_srvs::srv::SetBool, std::__bind<void (Set... (2 times, avg 54 ms)\r\n   106 ms: rclcpp::create_service<std_srvs::srv::Empty, std::__bind<void (Empty... (2 times, avg 53 ms)\r\n   105 ms: rclcpp::create_service<lifecycle_msgs::srv::GetState, std::__bind<vo... (2 times, avg 52 ms)\r\n   105 ms: rclcpp::create_client<diagnostic_msgs::srv::AddDiagnostics> (2 times, avg 52 ms)\r\n   103 ms: rclcpp::create_service<std_srvs::srv::Trigger, std::__bind<void (Tri... (2 times, avg 51 ms)\r\n   101 ms: rclcpp::create_client<lifecycle_msgs::srv::ChangeState> (2 times, avg 50 ms)\r\n   101 ms: rclcpp::create_client<lifecycle_msgs::srv::GetState> (2 times, avg 50 ms)\r\n    97 ms: rclcpp::create_client<std_srvs::srv::Empty> (2 times, avg 48 ms)\r\n    66 ms: rclcpp::Node::create_client<std_srvs::srv::Trigger> (1 times, avg 66 ms)\r\n    65 ms: rclcpp::Client<std_srvs::srv::Trigger>::make_shared<rclcpp::node_int... (1 times, avg 65 ms)\r\n    65 ms: std::make_shared<rclcpp::Client<std_srvs::srv::Trigger>, rclcpp::nod... (1 times, avg 65 ms)\r\n    65 ms: std::allocate_shared<rclcpp::Client<std_srvs::srv::Trigger>, std::al... (1 times, avg 65 ms)\r\n    63 ms: std::__shared_ptr_emplace<rclcpp::Client<std_srvs::srv::Trigger>, st... (1 times, avg 63 ms)\r\n    63 ms: rclcpp::Client<std_srvs::srv::Trigger>::Client (1 times, avg 63 ms)\r\n    57 ms: rclcpp::Node::create_service<diagnostic_msgs::srv::AddDiagnostics, s... (1 times, avg 57 ms)\r\n    57 ms: rclcpp::Node::create_service<lifecycle_msgs::srv::ChangeState, std::... (1 times, avg 57 ms)\r\n    55 ms: rclcpp::Node::create_client<std_srvs::srv::SetBool> (1 times, avg 55 ms)\r\n    54 ms: rclcpp::Node::create_service<std_srvs::srv::SetBool, std::__bind<voi... (1 times, avg 54 ms)\r\n    54 ms: rclcpp::Client<std_srvs::srv::SetBool>::make_shared<rclcpp::node_int... (1 times, avg 54 ms)\r\n    54 ms: std::make_shared<rclcpp::Client<std_srvs::srv::SetBool>, rclcpp::nod... (1 times, avg 54 ms)\r\n    54 ms: std::allocate_shared<rclcpp::Client<std_srvs::srv::SetBool>, std::al... (1 times, avg 54 ms)\r\n    53 ms: rclcpp::Node::create_service<std_srvs::srv::Empty, std::__bind<void ... (1 times, avg 53 ms)\r\n    53 ms: rclcpp::Node::create_service<lifecycle_msgs::srv::GetState, std::__b... (1 times, avg 53 ms)\r\n    52 ms: rclcpp::Node::create_client<diagnostic_msgs::srv::AddDiagnostics> (1 times, avg 52 ms)\r\n    52 ms: std::__shared_ptr_emplace<rclcpp::Client<std_srvs::srv::SetBool>, st... (1 times, avg 52 ms)\r\n    52 ms: rclcpp::Client<diagnostic_msgs::srv::AddDiagnostics>::make_shared<rc... (1 times, avg 52 ms)\r\n\r\n**** Template sets that took longest to instantiate:\r\n   445 ms: std::make_shared<$> (27 times, avg 16 ms)\r\n   441 ms: std::allocate_shared<$> (27 times, avg 16 ms)\r\n   394 ms: std::__shared_ptr_emplace<$>::__shared_ptr_emplace<$> (12 times, avg 32 ms)\r\n   328 ms: rclcpp::Node::create_service<$> (6 times, avg 54 ms)\r\n   328 ms: rclcpp::create_service<$> (6 times, avg 54 ms)\r\n   324 ms: rclcpp::Node::create_client<$> (6 times, avg 54 ms)\r\n   324 ms: rclcpp::create_client<$> (6 times, avg 54 ms)\r\n   322 ms: rclcpp::Client<$>::make_shared<$> (6 times, avg 53 ms)\r\n   308 ms: rclcpp::Client<$>::Client (6 times, avg 51 ms)\r\n   289 ms: std::function<$>::function<$> (15 times, avg 19 ms)\r\n   288 ms: std::__function::__value_func<$>::__value_func<$> (15 times, avg 19 ms)\r\n   238 ms: std::__function::__func<$>::__func (15 times, avg 15 ms)\r\n   186 ms: rclcpp::AnyServiceCallback<$>::set<$> (6 times, avg 31 ms)\r\n   177 ms: std::__function::__alloc_func<$>::__alloc_func (45 times, avg 3 ms)\r\n   167 ms: std::unordered_map<$> (26 times, avg 6 ms)\r\n   162 ms: std::variant<$> (19 times, avg 8 ms)\r\n   147 ms: std::__variant_detail::__impl<$>::__assign<$> (6 times, avg 24 ms)\r\n   146 ms: std::__variant_detail::__ctor<$>::__construct_alt<$> (19 times, avg 7 ms)\r\n   146 ms: std::__variant_detail::__assignment<$>::__assign_alt<$> (6 times, avg 24 ms)\r\n   146 ms: std::unordered_map<$>::unordered_map (6 times, avg 24 ms)\r\n   136 ms: std::tuple<$> (88 times, avg 1 ms)\r\n   135 ms: std::__hash_table<$> (26 times, avg 5 ms)\r\n   132 ms: std::forward_as_tuple<$> (62 times, avg 2 ms)\r\n   132 ms: rclcpp::Client<$>::handle_response (6 times, avg 22 ms)\r\n   123 ms: std::__hash_table<$>::~__hash_table (6 times, avg 20 ms)\r\n   122 ms: std::__hash_table<$>::__deallocate_node (6 times, avg 20 ms)\r\n   114 ms: std::__function::__func<$>::__clone (30 times, avg 3 ms)\r\n   104 ms: rclcpp::Client<$> (12 times, avg 8 ms)\r\n   100 ms: std::unique_ptr<$> (94 times, avg 1 ms)\r\n    98 ms: rclcpp::Service<$>::make_shared<$> (6 times, avg 16 ms)\r\n\r\n**** Functions that took longest to compile:\r\n     1 ms: main (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: std::__1::__function::__func<std::__1::__bind<void (EmptyServerNode:... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n\r\n**** Function sets that took longest to compile / optimize:\r\n     0 ms: std::__1::__function::__func<$>::__func[abi:v15006](std::__1::__bind... (1 times, avg 0 ms)\r\n\r\n**** Expensive headers:\r\n817 ms: /Users/cursedrock17/ros2_rolling/install/rclcpp/include/rclcpp/rclcpp/rclcpp.hpp (included 1 times, avg 817 ms), included via:\r\n  1x: <direct include>\r\n\r\n143 ms: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/memory (included 1 times, avg 143 ms), included via:\r\n  1x: <direct include>\r\n\r\n31 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/get_state_node.hpp (included 1 times, avg 31 ms), included via:\r\n  1x: <direct include>\r\n\r\n29 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/empty_node.hpp (included 1 times, avg 29 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/add_diagnostics_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/change_state_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n28 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/set_bool_node.hpp (included 1 times, avg 28 ms), included via:\r\n  1x: <direct include>\r\n\r\n26 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/trigger_node.hpp (included 1 times, avg 26 ms), included via:\r\n  1x: <direct include>\r\n\r\n  done in 0.0s.\r\n</details>\r\n\r\n<details> \r\n<summary> <h3> service_type_adapt branch client side adapters\r\n </h3> </summary>\r\n**** Time summary:\r\nCompilation (2 times):\r\n  Parsing (frontend):            3.2 s\r\n  Codegen & opts (backend):      0.3 s\r\n\r\n**** Files that took longest to parse (compiler frontend):\r\n  3014 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n   211 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n\r\n**** Files that took longest to codegen (compiler backend):\r\n   319 ms: build/type_adapt_example/CMakeFiles/client_node_process.dir/src/client_node_process.cpp.o\r\n\r\n**** Templates that took longest to instantiate:\r\n   239 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomChangeState, lifecy... (2 times, avg 119 ms)\r\n   213 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomAddDiagnostics, dia... (2 times, avg 106 ms)\r\n   212 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomChangeState, lifecyc... (2 times, avg 106 ms)\r\n   210 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomBool, std_srvs::srv:... (2 times, avg 105 ms)\r\n   208 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomGetState, lifecycle_... (2 times, avg 104 ms)\r\n   205 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomGetState, lifecycle... (2 times, avg 102 ms)\r\n   202 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomTrigger, std_srvs::... (2 times, avg 101 ms)\r\n   198 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomTrigger, std_srvs::s... (2 times, avg 99 ms)\r\n   192 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomAddDiagnostics, diag... (2 times, avg 96 ms)\r\n   192 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomBool, std_srvs::srv... (2 times, avg 96 ms)\r\n   191 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomEmpty, std_srvs::srv... (2 times, avg 95 ms)\r\n   189 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomEmpty, std_srvs::sr... (2 times, avg 94 ms)\r\n   120 ms: rclcpp::Node::create_service<rclcpp::TypeAdapter<CustomChangeState, ... (1 times, avg 120 ms)\r\n   106 ms: rclcpp::Node::create_service<rclcpp::TypeAdapter<CustomAddDiagnostic... (1 times, avg 106 ms)\r\n   106 ms: rclcpp::Node::create_client<rclcpp::TypeAdapter<CustomChangeState, l... (1 times, avg 106 ms)\r\n   106 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomChangeState, lifecycle_msgs... (1 times, avg 106 ms)\r\n   105 ms: std::make_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomChangeStat... (1 times, avg 105 ms)\r\n   105 ms: std::allocate_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomChange... (1 times, avg 105 ms)\r\n   105 ms: rclcpp::Node::create_client<rclcpp::TypeAdapter<CustomBool, std_srvs... (1 times, avg 105 ms)\r\n   104 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomBool, std_srvs::srv::SetBoo... (1 times, avg 104 ms)\r\n   104 ms: std::make_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomBool, std_... (1 times, avg 104 ms)\r\n   104 ms: rclcpp::Node::create_client<rclcpp::TypeAdapter<CustomGetState, life... (1 times, avg 104 ms)\r\n   104 ms: std::allocate_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomBool, ... (1 times, avg 104 ms)\r\n   104 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomGetState, lifecycle_msgs::s... (1 times, avg 104 ms)\r\n   104 ms: std::make_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomGetState, ... (1 times, avg 104 ms)\r\n   103 ms: std::allocate_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomGetSta... (1 times, avg 103 ms)\r\n   103 ms: std::__shared_ptr_emplace<rclcpp::Client<rclcpp::TypeAdapter<CustomC... (1 times, avg 103 ms)\r\n   103 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomChangeState, lifecycle_msgs... (1 times, avg 103 ms)\r\n   102 ms: rclcpp::Node::create_service<rclcpp::TypeAdapter<CustomGetState, lif... (1 times, avg 102 ms)\r\n   102 ms: std::__shared_ptr_emplace<rclcpp::Client<rclcpp::TypeAdapter<CustomB... (1 times, avg 102 ms)\r\n\r\n**** Template sets that took longest to instantiate:\r\n   892 ms: std::make_shared<$> (27 times, avg 33 ms)\r\n   888 ms: std::allocate_shared<$> (27 times, avg 32 ms)\r\n   840 ms: std::__shared_ptr_emplace<$>::__shared_ptr_emplace<$> (12 times, avg 70 ms)\r\n   622 ms: rclcpp::Node::create_service<$> (6 times, avg 103 ms)\r\n   621 ms: rclcpp::create_service<$> (6 times, avg 103 ms)\r\n   608 ms: rclcpp::Node::create_client<$> (6 times, avg 101 ms)\r\n   607 ms: rclcpp::create_client<$> (6 times, avg 101 ms)\r\n   605 ms: rclcpp::Client<$>::make_shared<$> (6 times, avg 100 ms)\r\n   591 ms: rclcpp::Client<$>::Client (6 times, avg 98 ms)\r\n   320 ms: std::variant<$> (19 times, avg 16 ms)\r\n   315 ms: std::unordered_map<$>::unordered_map (6 times, avg 52 ms)\r\n   297 ms: std::function<$>::function<$> (15 times, avg 19 ms)\r\n   296 ms: std::__function::__value_func<$>::__value_func<$> (15 times, avg 19 ms)\r\n   285 ms: std::__hash_table<$>::~__hash_table (6 times, avg 47 ms)\r\n   283 ms: std::__hash_table<$>::__deallocate_node (6 times, avg 47 ms)\r\n   261 ms: rclcpp::Service<$>::make_shared<$> (6 times, avg 43 ms)\r\n   248 ms: std::__function::__func<$>::__func (15 times, avg 16 ms)\r\n   245 ms: rclcpp::Client<$>::handle_response (6 times, avg 40 ms)\r\n   224 ms: rclcpp::AnyServiceCallback<$>::set<$> (6 times, avg 37 ms)\r\n   210 ms: std::pair<$> (21 times, avg 10 ms)\r\n   210 ms: std::__hash_value_type<$> (11 times, avg 19 ms)\r\n   206 ms: std::__hash_node<$> (6 times, avg 34 ms)\r\n   203 ms: std::__variant_detail::__ctor<$>::__generic_construct<$> (12 times, avg 16 ms)\r\n   193 ms: std::__variant_detail::__ctor<$>::__construct_alt<$> (18 times, avg 10 ms)\r\n   188 ms: std::__variant_detail::__visitation::__base::__make_dispatch<$> (236 times, avg 0 ms)\r\n   181 ms: std::unordered_map<$> (26 times, avg 6 ms)\r\n   181 ms: std::tuple<$> (107 times, avg 1 ms)\r\n   179 ms: std::__function::__alloc_func<$>::__alloc_func (45 times, avg 3 ms)\r\n   177 ms: std::__variant_detail::__dtor<$>::~__dtor (12 times, avg 14 ms)\r\n   176 ms: std::__variant_detail::__dtor<$>::__destroy (12 times, avg 14 ms)\r\n\r\n**** Functions that took longest to compile:\r\n     1 ms: main (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: AddDiagnosticsClientNode::AddDiagnosticsClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: GetStateClientNode::GetStateClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: SetBoolClientNode::SetBoolClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: TriggerClientNode::TriggerClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: ChangeStateClientNode::ChangeStateClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: EmptyClientNode::EmptyClientNode() (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomGetState, lifecycle_msgs::s... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomChangeState, lifecycle_msgs... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomTrigger, std_srvs::srv::Tri... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomBool, std_srvs::srv::SetBoo... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomAddDiagnostics, diagnostic_... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomEmpty, std_srvs::srv::Empty... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: rclcpp::FutureReturnCode rclcpp::Executor::spin_until_future_complet... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n     0 ms: std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/client_node_process.cpp)\r\n\r\n**** Function sets that took longest to compile / optimize:\r\n     4 ms: rclcpp::Client<$>::handle_response(std::__1::shared_ptr<$>, std::__1... (6 times, avg 0 ms)\r\n     3 ms: std::__1::pair<$> std::__1::__hash_table<$>::__emplace_unique_key_ar... (6 times, avg 0 ms)\r\n     0 ms: rclcpp::FutureReturnCode rclcpp::Executor::spin_until_future_complet... (1 times, avg 0 ms)\r\n\r\n**** Expensive headers:\r\n816 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/rclcpp/install/rclcpp/include/rclcpp/rclcpp/rclcpp.hpp (included 1 times, avg 816 ms), included via:\r\n  1x: <direct include>\r\n\r\n151 ms: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/memory (included 1 times, avg 151 ms), included via:\r\n  1x: <direct include>\r\n\r\n43 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/set_bool_node.hpp (included 1 times, avg 43 ms), included via:\r\n  1x: <direct include>\r\n\r\n42 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/trigger_node.hpp (included 1 times, avg 42 ms), included via:\r\n  1x: <direct include>\r\n\r\n41 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/change_state_node.hpp (included 1 times, avg 41 ms), included via:\r\n  1x: <direct include>\r\n\r\n40 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/get_state_node.hpp (included 1 times, avg 40 ms), included via:\r\n  1x: <direct include>\r\n\r\n40 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/add_diagnostics_node.hpp (included 1 times, avg 40 ms), included via:\r\n  1x: <direct include>\r\n\r\n36 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/empty_node.hpp (included 1 times, avg 36 ms), included via:\r\n  1x: <direct include>\r\n\r\n  done in 0.0s.\r\n</details>\r\n\r\n<details> \r\n<summary> <h3> service_type_adapt  branch server side adapters\r\n </h3> </summary>\r\n**** Time summary:\r\nCompilation (2 times):\r\n  Parsing (frontend):            3.0 s\r\n  Codegen & opts (backend):      0.3 s\r\n\r\n**** Files that took longest to parse (compiler frontend):\r\n  2754 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n   196 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n\r\n**** Files that took longest to codegen (compiler backend):\r\n   346 ms: build/type_adapt_example/CMakeFiles/server_node_process.dir/src/server_node_process.cpp.o\r\n\r\n**** Templates that took longest to instantiate:\r\n   226 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomChangeState, lifecy... (2 times, avg 113 ms)\r\n   217 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomAddDiagnostics, dia... (2 times, avg 108 ms)\r\n   214 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomBool, std_srvs::srv:... (2 times, avg 107 ms)\r\n   211 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomGetState, lifecycle... (2 times, avg 105 ms)\r\n   208 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomGetState, lifecycle_... (2 times, avg 104 ms)\r\n   207 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomChangeState, lifecyc... (2 times, avg 103 ms)\r\n   201 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomTrigger, std_srvs::... (2 times, avg 100 ms)\r\n   195 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomAddDiagnostics, diag... (2 times, avg 97 ms)\r\n   193 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomEmpty, std_srvs::sr... (2 times, avg 96 ms)\r\n   191 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomTrigger, std_srvs::s... (2 times, avg 95 ms)\r\n   188 ms: rclcpp::create_service<rclcpp::TypeAdapter<CustomBool, std_srvs::srv... (2 times, avg 94 ms)\r\n   183 ms: rclcpp::create_client<rclcpp::TypeAdapter<CustomEmpty, std_srvs::srv... (2 times, avg 91 ms)\r\n   113 ms: rclcpp::Node::create_service<rclcpp::TypeAdapter<CustomChangeState, ... (1 times, avg 113 ms)\r\n   108 ms: rclcpp::Node::create_service<rclcpp::TypeAdapter<CustomAddDiagnostic... (1 times, avg 108 ms)\r\n   107 ms: rclcpp::Node::create_client<rclcpp::TypeAdapter<CustomBool, std_srvs... (1 times, avg 107 ms)\r\n   107 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomBool, std_srvs::srv::SetBoo... (1 times, avg 107 ms)\r\n   107 ms: std::make_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomBool, std_... (1 times, avg 107 ms)\r\n   106 ms: std::allocate_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomBool, ... (1 times, avg 106 ms)\r\n   105 ms: rclcpp::Node::create_service<rclcpp::TypeAdapter<CustomGetState, lif... (1 times, avg 105 ms)\r\n   105 ms: std::__shared_ptr_emplace<rclcpp::Client<rclcpp::TypeAdapter<CustomB... (1 times, avg 105 ms)\r\n   104 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomBool, std_srvs::srv::SetBoo... (1 times, avg 104 ms)\r\n   104 ms: rclcpp::Node::create_client<rclcpp::TypeAdapter<CustomGetState, life... (1 times, avg 104 ms)\r\n   104 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomGetState, lifecycle_msgs::s... (1 times, avg 104 ms)\r\n   103 ms: std::make_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomGetState, ... (1 times, avg 103 ms)\r\n   103 ms: rclcpp::Node::create_client<rclcpp::TypeAdapter<CustomChangeState, l... (1 times, avg 103 ms)\r\n   103 ms: std::allocate_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomGetSta... (1 times, avg 103 ms)\r\n   103 ms: rclcpp::Client<rclcpp::TypeAdapter<CustomChangeState, lifecycle_msgs... (1 times, avg 103 ms)\r\n   103 ms: std::make_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomChangeStat... (1 times, avg 103 ms)\r\n   103 ms: std::allocate_shared<rclcpp::Client<rclcpp::TypeAdapter<CustomChange... (1 times, avg 103 ms)\r\n   101 ms: std::__shared_ptr_emplace<rclcpp::Client<rclcpp::TypeAdapter<CustomG... (1 times, avg 101 ms)\r\n\r\n**** Template sets that took longest to instantiate:\r\n   891 ms: std::make_shared<$> (27 times, avg 33 ms)\r\n   887 ms: std::allocate_shared<$> (27 times, avg 32 ms)\r\n   840 ms: std::__shared_ptr_emplace<$>::__shared_ptr_emplace<$> (12 times, avg 70 ms)\r\n   620 ms: rclcpp::Node::create_service<$> (6 times, avg 103 ms)\r\n   619 ms: rclcpp::create_service<$> (6 times, avg 103 ms)\r\n   601 ms: rclcpp::Node::create_client<$> (6 times, avg 100 ms)\r\n   600 ms: rclcpp::create_client<$> (6 times, avg 100 ms)\r\n   598 ms: rclcpp::Client<$>::make_shared<$> (6 times, avg 99 ms)\r\n   584 ms: rclcpp::Client<$>::Client (6 times, avg 97 ms)\r\n   315 ms: std::variant<$> (19 times, avg 16 ms)\r\n   307 ms: std::unordered_map<$>::unordered_map (6 times, avg 51 ms)\r\n   294 ms: std::function<$>::function<$> (15 times, avg 19 ms)\r\n   293 ms: std::__function::__value_func<$>::__value_func<$> (15 times, avg 19 ms)\r\n   278 ms: std::__hash_table<$>::~__hash_table (6 times, avg 46 ms)\r\n   277 ms: std::__hash_table<$>::__deallocate_node (6 times, avg 46 ms)\r\n   268 ms: rclcpp::Service<$>::make_shared<$> (6 times, avg 44 ms)\r\n   246 ms: rclcpp::Client<$>::handle_response (6 times, avg 41 ms)\r\n   240 ms: std::__function::__func<$>::__func (15 times, avg 16 ms)\r\n   216 ms: rclcpp::AnyServiceCallback<$>::set<$> (6 times, avg 36 ms)\r\n   206 ms: std::__variant_detail::__ctor<$>::__generic_construct<$> (12 times, avg 17 ms)\r\n   205 ms: std::__hash_value_type<$> (11 times, avg 18 ms)\r\n   202 ms: std::__hash_node<$> (6 times, avg 33 ms)\r\n   198 ms: std::pair<$> (10 times, avg 19 ms)\r\n   194 ms: std::__variant_detail::__ctor<$>::__construct_alt<$> (18 times, avg 10 ms)\r\n   188 ms: std::__variant_detail::__visitation::__base::__make_dispatch<$> (234 times, avg 0 ms)\r\n   182 ms: std::unordered_map<$> (26 times, avg 7 ms)\r\n   175 ms: std::__variant_detail::__dtor<$>::~__dtor (12 times, avg 14 ms)\r\n   175 ms: std::__variant_detail::__dtor<$>::__destroy (12 times, avg 14 ms)\r\n   173 ms: std::__function::__alloc_func<$>::__alloc_func (45 times, avg 3 ms)\r\n   168 ms: std::tuple<$> (100 times, avg 1 ms)\r\n\r\n**** Functions that took longest to compile:\r\n     1 ms: main (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<rclcpp::TypeAdapter<CustomAddDiagnostics, diagnostic... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<rclcpp::TypeAdapter<CustomGetState, lifecycle_msgs::... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<rclcpp::TypeAdapter<CustomTrigger, std_srvs::srv::Tr... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<rclcpp::TypeAdapter<CustomChangeState, lifecycle_msg... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<rclcpp::TypeAdapter<CustomBool, std_srvs::srv::SetBo... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n     0 ms: rclcpp::Service<rclcpp::TypeAdapter<CustomEmpty, std_srvs::srv::Empt... (/Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/src/server_node_process.cpp)\r\n\r\n**** Function sets that took longest to compile / optimize:\r\n     5 ms: rclcpp::Service<$>::handle_request(std::__1::shared_ptr<$>, std::__1... (6 times, avg 0 ms)\r\n\r\n**** Expensive headers:\r\n717 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/rclcpp/install/rclcpp/include/rclcpp/rclcpp/rclcpp.hpp (included 1 times, avg 717 ms), included via:\r\n  1x: <direct include>\r\n\r\n105 ms: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/memory (included 1 times, avg 105 ms), included via:\r\n  1x: <direct include>\r\n\r\n43 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/trigger_node.hpp (included 1 times, avg 43 ms), included via:\r\n  1x: <direct include>\r\n\r\n42 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/set_bool_node.hpp (included 1 times, avg 42 ms), included via:\r\n  1x: <direct include>\r\n\r\n39 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/change_state_node.hpp (included 1 times, avg 39 ms), included via:\r\n  1x: <direct include>\r\n\r\n38 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/get_state_node.hpp (included 1 times, avg 38 ms), included via:\r\n  1x: <direct include>\r\n\r\n36 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/add_diagnostics_node.hpp (included 1 times, avg 36 ms), included via:\r\n  1x: <direct include>\r\n\r\n35 ms: /Users/cursedrock17/Documents/Coding/CPP/ros2/type_adapt_example/include/type_adapt_example/empty_node.hpp (included 1 times, avg 35 ms), included via:\r\n  1x: <direct include>\r\n\r\n  done in 0.0s.\r\n</details>\r\n\r\nRoughly, it seems that this new branch is 12-20% more expensive than the previous branch, with size of the service not necessarily causing massive growth in build time (though there were no services that were large and extremly over the top). All of that comes with the making of so many types, not being able to just do a request and response, means that there are four types instead of two, where in `rolling` only one stood. \r\n\r\nSo, technically if we wanted a decrease in both the instantiation of the Client/Service we could limit users to only being able to make a Client/Service as entirely `ROS_Service` based or entirely `Custom_Service` based, instead of mix-matching. Though, I feel this isn't the correct way to go.",
      "@CursedRock17 i am not sure if you are still working on this. Just FYI, service type support part has been already implemented by https://github.com/ros2/rclcpp/pull/2358 during `rosbag2 service record/reply` feature development.",
      "Yeah I'm still working on this pull request, it just adds quite of bit of an increase to compile time, so I'm looking to bolster  my template metaprogramming skills to increase efficiency, without sacrifing features in order to get the time to compile down. As for the service type support I did see that #2209 resolved type support issues so I should be able to remove [get_type_support_handle.hpp](https://github.com/ros2/rclcpp/blob/50ec0073620fb9b8cc3493425c7f2cb8a46e0e14/rclcpp/include/rclcpp/get_service_type_support_handle.hpp)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744d18912b45d36a70f2",
    "number": 2284,
    "body": "It is depended on by rclcpp/src/rclcpp/logger.cpp, but the dependency was not explicitly declared (it was being inherited from rcl, I believe).  Fix that here.",
    "head_branch": "clalancette/add-rcl-logging-interface-dep",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19379)](http://ci.ros2.org/job/ci_linux/19379/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13903)](http://ci.ros2.org/job/ci_linux-aarch64/13903/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20099)](http://ci.ros2.org/job/ci_windows/20099/)"
    ],
    "commit_messages": [
      "Add rcl_logging_interface as an explicit dependency. (#2284)\n\nIt is depended on by rclcpp/src/rclcpp/logger.cpp, but\r\nthe dependency was not explicitly declared (it was\r\nbeing inherited from rcl, I believe).  Fix that here.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621744e18912b45d36a70f3",
    "number": 2283,
    "body": null,
    "head_branch": "clalancette/fix-comment-typo",
    "is_a_fork": false,
    "comments": [
      "@ros-pull-request-builder retest this please"
    ],
    "commit_messages": [
      "Fix a typo in a comment. (#2283)\n\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745018912b45d36a70f4",
    "number": 2282,
    "body": "1. Use constref for the loop variable.\r\n2. Do more work outside of the loop.\r\n3. Skip doing unnecessary work where we can inside the loop.\r\n\r\nWith this in place, I measured about a 7% performance improvement over the previous implementation.",
    "head_branch": "clalancette/revamp-list-parameters",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19373)](http://ci.ros2.org/job/ci_linux/19373/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13900)](http://ci.ros2.org/job/ci_linux-aarch64/13900/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20094)](http://ci.ros2.org/job/ci_windows/20094/)"
    ],
    "commit_messages": [
      "Revamp list_parameters to be more efficient and easier to read. (#2282)\n\n1. Use constref for the loop variable.\r\n2. Do more work outside of the loop.\r\n3. Skip doing unnecessary work where we can inside the loop.\r\n\r\nWith this in place, I measured about a 7% performance\r\nimprovement over the previous implementation.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745118912b45d36a70f5",
    "number": 2281,
    "body": "fixes https://github.com/ros2/rclcpp/issues/2265\r\n\r\nNote, this commit fixes a bug, that makes the current version of the tutorial \r\nnot work any more, as the code now acts according to its documentation.",
    "head_branch": "callback_after_cancel",
    "is_a_fork": true,
    "comments": [
      "Some more thoughts on this PR (also discussed in the last Client Library WG meeting).\r\n\r\n - I think that the expected behavior should be that the action client keeps the goals alive unless explicitly instructed to drop them.\r\n - As @wjwwood mentioned, it's ok that this behavior is different from what we do when creating ROS entities (e.g. if you create a subscription, you are responsible for keeping the subscription shared_ptr in scope)\r\n\r\nThis means that the documentation is wrong, but the demo code is correct.\r\n\r\nHaving to hold the future even if you don't do anything with it is a very strange user experience, since `std::future` is a standard C++ class with some expected usage and behavior, we shouldn't overload it with ROS-specific expectations.\r\n\r\nI proposed to fix the bug by:\r\n 1. Have the client class store `shared_ptr` rather than `weak_ptr` here https://github.com/ros2/rclcpp/blob/rolling/rclcpp_action/include/rclcpp_action/client.hpp#L757\r\n 2. do not capture the `goal_handle` as a shared_ptr in the lambdas, but rather only as a weak_ptr\r\n\r\nThis should ensure proper destruction of things ",
      "> * I think that the expected behavior should be that the action client keeps the goals alive unless explicitly instructed to drop them.\r\n\r\nNote, this will break the code of users not setting the callback. \r\n\r\nJust to make sure that we are all on the same page, the current behavior is:\r\nIf you give a callback to the result:\r\n- The goal will keep itself alive, as the share_ptr is caputred in the lambda to the result callback\r\n\r\nIf you don't set a result callback:\r\n- It works as documented, and the goal will terminate the second you drop the shared_ptr from the future\r\n\r\nWhatever we decide, we will break the code of someone...",
      "> Whatever we decide, we will break the code of someone...\r\n\r\nThis is true, that's why I think we should rather focus on what we think is the correct behavior.\r\n\r\n- **Current rolling code:**\r\n   - inconsistent behavior depending on whether you set a result callback or not described in https://github.com/ros2/rclcpp/pull/2281#issuecomment-2031709370\r\n   - has the bug described in https://github.com/ros2/rclcpp/issues/2265\r\n   - does not respect the documentation\r\n   - the demo examples are ok\r\n- **Proposal 1: require the users to keep the `std::shared_future` (and goal handle) in scope**\r\n   - this is the current state of this PR f574591c068d02af8945e34b83e4b770286549e9\r\n   - abuses the meaning of a `std::future`, which not only is used for waiting, but also to keep the goal alive\r\n   - fixes the bug\r\n   - respects the documentation\r\n   - breaks the demo examples (where the future is ignored)\r\n   - the [[no-discard]] attribute can produce a warning (in most compilers) if users don't hold the future, but this can be easily ignored.\r\n   - breaks the code for users that ignore the warning and do not keep the future alive. Goals will be unexpectedly cancelled under the users feet. \r\n- **Proposal 2: have the action client automatically keep goals alive and use a dedicated API to drop them**\r\n   - proposed in the Client Library WG meeting and summarized in https://github.com/ros2/rclcpp/pull/2281#issuecomment-2030340944\r\n   - fixes the bug\r\n   - does not respect the documentation\r\n   - the demo examples are ok\r\n   - breaks the code for users that were relying on dropping the future / goal handle to terminate the goal. These users now need to use the dedicated API \r\n\r\nI think that this is a good summary of the the current state and the two proposals\r\n\r\nMy vote is for \"proposal 2\"\r\n\r\n@clalancette @fujitatomoya @wjwwood @mjcarroll ",
      "I think @ros2/team is worth pinging here.",
      "I vote for 1, as users at least get a compile warning.\r\n\r\nAdditional I would propose, that we directly return the goal handle by the async_send_goal method, as this would also give us a way to drop the goal, before it was accepted. This is currently a second design flaw in the API.",
      "> > I think that the expected behavior should be that the action client keeps the goals alive unless explicitly instructed to drop them.\r\n\r\n> Note, this will break the code of users not setting the callback.\r\n\r\nCan you explain more of your thinking around this?\r\n\r\nToday, if users are not setting the result callback, then either:\r\n1. They are holding onto the `std::future`, and thus keeping it alive, or\r\n2. They are forgetting to hold onto the handle, and getting UB (though they may get lucky and this may work by accident)\r\n\r\nIf we change it so that the action client keeps the goals alive, then in case 1., they are unnecessarily holding the `std::future`, and may delay it from being destroyed, but things should still work.  We will fix case 2 for them, in that we'll hold onto the handle.  In both cases, I don't think we make things worse for users who are not setting the result callback.\r\n\r\nBut it is entirely possible I'm missing something here.",
      "> Can you explain more of your thinking around this?\r\n\r\nUsers that don't set the callback might rely on the fact, that the goal gets canceled the second they drop the handle.\r\nIf we change this to proposal 2, their code will silently break, as goals do not terminate any more after the handle gets dropped.\r\n",
      "> Users that don't set the callback might rely on the fact, that the goal gets canceled the second they drop the handle.\r\n> If we change this to proposal 2, their code will silently break, as goals do not terminate any more after the handle gets dropped.\r\n\r\nAh, right.  Thanks.\r\n\r\nSo I have a proposal, and then an opinion.\r\n\r\nThe proposal is option 3, where we add in a completely new API for sending goals (`async_send_goal2`, for lack of a better idea).  This API would implement behavior 2 as specified by @alsora , i.e. it would hold onto the handle and have a dedicated API to drop it.  Then we leave `async_send_goal` as it is, with a deprecation warning.  In that case, then, we would have a viable path to telling users that we are going to break their semantics, and we have a \"new\" way for users to change that they have to explicitly opt into.  It is entirely possible that it is difficult to implement both of these behaviors internally, but I think it at least deserves consideration.\r\n\r\nMy opinion is this: I like option 3 the best, as it is clear to users that changes to these APIs are coming.  If we don't want to do option 3 today, then I think we should go for option 1, as it is the least surprising for users.  In the future we can always decide to go for option 3 if we think that is better.\r\n\r\nThoughts?",
      "I don't think we can implement option 3 until the feature freeze next week. I would also go more into the direction of a whole API redesign, introducing two new client classes, that solve the common 'I called wait on the future and deadlocked' issue.",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/client-library-wg-meeting-april-5-2024/36998/1\n",
      "Edit: Sorry my vote is proposal-1.\r\n\r\nI second proposal-1. (from https://github.com/ros2/rclcpp/pull/2281#issuecomment-2032407192) I am okay with current implementation.\r\n\r\n(note, i do not think i can make it tomorrow meeting, depends on traffic.)",
      "Summary of the discussion:\r\nWe'll add \r\n```c++\r\nasync_send_goal_unowned()\r\n``` \r\nThis version will work as described in the documentation.\r\nWe will keep async_send_goal with the current broken behavior, but update the documentation.\r\nOpen for discussion : Will we add a [[deprecated, \"Deprecated, as the behavior bla bla bla\"]] prior to jazzy.\r\n\r\nMy vote is for adding the deprecated prior to jazzy, as users might then recognize a bug they were experiencing.\r\n",
      "> Open for discussion : Will we add a [[deprecated, \"Deprecated, as the behavior bla bla bla\"]] prior to jazzy.\r\n\r\njust checking. so the decision is, to keep `async_send_goal` at this moment with broken behavior, but eventually we will remove `async_send_goal`. and will be replaced with `async_send_goal_unowned`?\r\nOr do we keep both of them?",
      "> Or do we keep both of them?\r\n\r\nJazzy will have both of them.\r\nThe future is less set in stone =) ",
      "While implementing the proposed solution I rechecked the code and figured out, that the problem is different than described by me in this thread before. \r\n\r\nThe current behavior of the action client library is : \r\n\r\nasync_send_goal\r\n- Send a goal, that is fire & forget.  It will be executed regardless if you hold the handle or not.\r\n- The given handle only controls, if you will receive callbacks. \r\n- The need to keep the handle is inconsistent. \r\n  - If you only set the feedback callback, you will need to hold the handle, or you will receive no feedback.\r\n  - As soon as you set the result callback the handle is self referencing.\r\n\r\nUsing the current implementation of async_send_goal will create a memory leak, as the goal handle will not be deleted.\r\n- This can be patched for nominal cases, as we could delete the result callback after the result callback was called.\r\n\r\nI am undecided on what to do with the async_send_goal function, still migrate to a new version owned ?\r\n\r\nI would propose, to add a new function \r\n```c++\r\nvoid stop_callbacks(typename GoalHandle::SharedPtr goal_handle)\r\n``` \r\ninstead of\r\n```c++\r\nvoid drop_goal_handle(typename GoalHandle::SharedPtr goal_handle)\r\n``` \r\n\r\nI would also update the documentation.\r\n\r\nOpinions? @clalancette @fujitatomoya @alsora @mjcarroll @wjwwood ",
      "@alsora updated docs",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20837)](http://ci.ros2.org/job/ci_linux/20837/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15141)](http://ci.ros2.org/job/ci_linux-aarch64/15141/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21535)](http://ci.ros2.org/job/ci_windows/21535/)",
      "Thank you!\r\nLooks good to me with green CI",
      "rebased to rolling.\r\n\r\nCI seems to hang, can someone restart it ?",
      "I don't see where it's hung, but I restarted CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=20851)](http://ci.ros2.org/job/ci_linux/20851/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=15154)](http://ci.ros2.org/job/ci_linux-aarch64/15154/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=21537)](http://ci.ros2.org/job/ci_windows/21537/)",
      "Ready for merge ?"
    ],
    "commit_messages": [
      "Callback after cancel (#2281)\n\n* feat(Client): Added function to stop callbacks of a goal handle\r\n\r\nThis function allows us to drop the handle in a locked context.\r\nIf we do not do this within a lock, there will be a race condition between\r\nthe deletion of the shared_ptr of the handle and the result / feedback\r\ncallbacks.\r\n\r\n* fix: make Client goal handle recursive\r\n\r\nThis fixes deadlocks due to release of goal handles in callbacks etc.\r\n\r\n* fix(ActionGoalClient): Fixed memory leak for nominal case\r\n\r\nThis fixes a memory leak due to a self reference in the ClientGoalHandle.\r\nNote, this fix will only work, if the ClientGoalHandle ever receives\r\na result callback.\r\n\r\n* doc: Updated documentation of rclcpp_action::Client::async_send_goal\r\n* docs: Made the async_send_goal documentation more explicit\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\nCo-authored-by: Janosch Machowinski <J.Machowinski@cellumation.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621745218912b45d36a70f6",
    "number": 2280,
    "body": "This is an automatic backport of pull request #2276 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2276",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19432)](http://ci.ros2.org/job/ci_linux/19432/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13956)](http://ci.ros2.org/job/ci_linux-aarch64/13956/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20155)](http://ci.ros2.org/job/ci_windows/20155/)"
    ],
    "commit_messages": [
      "Do not crash Executor when send_response fails due to client failure. (#2276) (#2280)\n\n* Do not crash Executor when send_response fails due to client failure.\r\n\r\nRelated to https://github.com/ros2/ros2/issues/1253\r\n\r\nIt is not sane that a faulty client can crash our service Executor, as\r\ndiscussed in the referred issue, if the client is not setup properly,\r\nsend_response may return RCL_RET_TIMEOUT, we should not throw an error\r\nin this case.\r\n\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\n\r\n* Update rclcpp/include/rclcpp/service.hpp\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\n\r\n* address review comments.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nCo-authored-by: Zang MingJie <zealot0630@gmail.com>\r\n(cherry picked from commit fbe8f28cd13710c5c643a4e7149e509f3a952677)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745318912b45d36a70f7",
    "number": 2279,
    "body": "This is an automatic backport of pull request #2276 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2276",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19431)](http://ci.ros2.org/job/ci_linux/19431/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13955)](http://ci.ros2.org/job/ci_linux-aarch64/13955/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20154)](http://ci.ros2.org/job/ci_windows/20154/)"
    ],
    "commit_messages": [
      "Do not crash Executor when send_response fails due to client failure. (#2276) (#2279)\n\n* Do not crash Executor when send_response fails due to client failure.\r\n\r\nRelated to https://github.com/ros2/ros2/issues/1253\r\n\r\nIt is not sane that a faulty client can crash our service Executor, as\r\ndiscussed in the referred issue, if the client is not setup properly,\r\nsend_response may return RCL_RET_TIMEOUT, we should not throw an error\r\nin this case.\r\n\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\n\r\n* Update rclcpp/include/rclcpp/service.hpp\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\n\r\n* address review comments.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nCo-authored-by: Zang MingJie <zealot0630@gmail.com>\r\n(cherry picked from commit fbe8f28cd13710c5c643a4e7149e509f3a952677)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745418912b45d36a70f8",
    "number": 2277,
    "body": "address https://github.com/ros2/rclcpp/issues/2273",
    "head_branch": "fujitatomoya/lifecycle-node-loglevel-service",
    "is_a_fork": false,
    "comments": [
      "CC: @Barry-Xu-2018 @clalancette ",
      "> i do not want to add unnecessary test that could increase the test time. what do you think?\r\n\r\nYeah, it seems unnecessary for `lifecycle_node` to add the whole test similar to what the `node` did.\r\nI think we can just add a very simple test to check whether the two services(set_logger_levels and get_logger_levels) are enabled (if  node.option(`enable_logger_service`) is true ) or not (if using the default node.option), something like\r\n\r\nhttps://github.com/ros2/rclcpp/blob/a7a9b78feebff603e5c7c5506ce31b89916bde36/rclcpp_lifecycle/test/test_lifecycle_node.cpp#L670-L674\r\n\r\n",
      "@iuhilnehc-ynos requesting final review. i just added the test to check if the service is available or not as you suggested with https://github.com/ros2/rclcpp/pull/2277#issuecomment-1681803846",
      "@iuhilnehc-ynos thanks for the review.\r\n\r\nCI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19396)](http://ci.ros2.org/job/ci_linux/19396/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13925)](http://ci.ros2.org/job/ci_linux-aarch64/13925/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20117)](http://ci.ros2.org/job/ci_windows/20117/)",
      "@clalancette I will go ahead to merge this with @iuhilnehc-ynos 's approval.\r\n\r\nbtw, do we want to backport this to iron? originally this feature is introduced on iron and we can keep the ABI. personally i think it would be nicer for user, since `LifecycleNode` can have the same feature. what do you think?",
      "@Mergifyio backport to iron",
      "> backport to iron\n\n#### ‚ùå No backport have been created\n\n<details>\n\n* Backport to branch `to` failed\n\nGitHub error: ```Branch not found```\n* [#2288 add logger level service to lifecycle node. (backport #2277)](https://github.com/ros2/rclcpp/pull/2288) has been created for branch `iron`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport to iron\", \"conclusion\": \"failure\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "add logger level service to lifecycle node. (#2277)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745518912b45d36a70f9",
    "number": 2276,
    "body": "replace of https://github.com/ros2/rclcpp/pull/2215",
    "head_branch": "fujitatomoya/bugfix-ros2-issues-1253",
    "is_a_fork": false,
    "comments": [
      "There are only 2 comments need to be addressed.\r\n\r\n- https://github.com/ros2/rclcpp/pull/2215#discussion_r1270413035\r\n- https://github.com/ros2/rclcpp/pull/2215#discussion_r1269869178\r\n\r\nthese are addressed with https://github.com/ros2/rclcpp/pull/2276/commits/60fb512a0ce69a9fbce36128c0989c89f6ee0893",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19344)](http://ci.ros2.org/job/ci_linux/19344/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13871)](http://ci.ros2.org/job/ci_linux-aarch64/13871/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20065)](http://ci.ros2.org/job/ci_windows/20065/)",
      "Looks great, thanks very much !",
      "https://ci.ros2.org/job/ci_windows/20065/ is not related to the PR.\r\n\r\n@alsora thanks for the review, i will go ahead to merge this.",
      "@Mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2279 Do not crash Executor when send_response fails due to client failure. (backport #2276)](https://github.com/ros2/rclcpp/pull/2279) has been created for branch `iron`\n* [#2280 Do not crash Executor when send_response fails due to client failure. (backport #2276)](https://github.com/ros2/rclcpp/pull/2280) has been created for branch `humble`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Do not crash Executor when send_response fails due to client failure. (#2276)\n\n* Do not crash Executor when send_response fails due to client failure.\r\n\r\nRelated to https://github.com/ros2/ros2/issues/1253\r\n\r\nIt is not sane that a faulty client can crash our service Executor, as\r\ndiscussed in the referred issue, if the client is not setup properly,\r\nsend_response may return RCL_RET_TIMEOUT, we should not throw an error\r\nin this case.\r\n\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\n\r\n* Update rclcpp/include/rclcpp/service.hpp\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\n\r\n* address review comments.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Zang MingJie <zealot0630@gmail.com>\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nCo-authored-by: Zang MingJie <zealot0630@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745618912b45d36a70fa",
    "number": 2275,
    "body": "This is an automatic backport of pull request #2019 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2019",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19343)](http://ci.ros2.org/job/ci_linux/19343/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13870)](http://ci.ros2.org/job/ci_linux-aarch64/13870/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20064)](http://ci.ros2.org/job/ci_windows/20064/)",
      "That failing test on rclcpp is a bit concerning, but I don't know if that is a known flake on Humble or not.  Here is another run on Windows with this PR in place, and also one without this PR:\r\n\r\n* Windows with this PR [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20109)](http://ci.ros2.org/job/ci_windows/20109/)\r\n* Windows without this PR [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20110)](http://ci.ros2.org/job/ci_windows/20110/)"
    ],
    "commit_messages": [
      "check thread whether joinable before join (#2019) (#2275)\n\nSigned-off-by: uupks <uupks0325@gmail.com>\r\n(cherry picked from commit b9b1468d15c7ddc697c079e6934d54f183294280)\r\n\r\nCo-authored-by: uupks <uupks0325@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745718912b45d36a70fb",
    "number": 2274,
    "body": "This pull request was created to solve a [TODO](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/subscription.hpp#L328) that was added in pull request #1557, but there's no discussion on the topic. As per the title, the point was to allow the user to use topic statistics when handling a serialized message. I tried to follow the way the other two functions `handle_message` and `handle_loaned_message` handled their topic statistics, but assumed that one couldn't pass a serialized message through the statistics, so I set up a basic serialization process. We only need to make one copy of the message that we create and since `ROSMessageType` is a string in disguise, we can still get all the data from it. Additionally, we still just dispatch the message, before we get an information about the topic statistics, so there shouldn't be any timing issues.\r\n\r\nThe last time a topic statistics was added to one of them methods was PR #1927, where the author replicated a similar format and didn't add any tests. I don't necessarily know how the test would work, but I can add them if needed, and wanted this PR to be as concise as possible without adding extra messages.",
    "head_branch": "topic_stats_serialized",
    "is_a_fork": true,
    "comments": [
      "@CursedRock17 Out of curiosity in what cases the user might need to use statistics when handling serialized messages on strictly typed subscriptions?\r\n\r\nI would imagine it would be useful for `GenericSubscription`, but have a hard time imagining a use case with a regular subscription.\r\n ",
      "I just assumed it was a nice feature for the user to gain information on the message, similar to the other two methods. Also according to `GenericSubscription`'s documentation:\r\n> Since the type is not known at compile time\r\n\r\nand the Topic Statistics Concept page:\r\n>Each statistic set is calculated in constant time and constant memory \r\n\r\nI kind of figured that Topic Statistics would be much more difficult to handle at this point, but if you feel this should be handled within a serialized message type class then I can see that.\r\n\r\nAlso could not find any information in PR #1072 / Meta-ticket [901](https://github.com/ros2/ros2/issues/901), when trying to digger deeper for rationale behind the TODO",
      "@ros-pull-request-builder retest this please",
      "> Testing is not easy to implement in this case. It is going to be an integration type of test. When we will need to setup topic statistics for the node and subscription and get serialized messages from that subscription, then verify numbers in the topic statistics results. This is a cross package with publisher subscriber type of integration test. And it isn't worth it IMO.\r\n\r\nWe do have https://github.com/ros2/system_tests/ for exactly this kind of integration test.  Whether it is worth it, I'm not sure of.\r\n\r\nThat said, I have serious concerns with this PR, as it will make subscriptions far more expensive.  I'll leave a comment in a review.",
      "With the closing of ros-tooling/libstatistics_collector/issues/168 in `libstatistics_collector` we can now just use `rmw_message_info_t` as our argument for `OnMessageReceived`. The issue is [`handle_message`](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp#L107-L115) uses a custom typed `topic_statistics_collector::TopicStatisticsCollector`, therefore `OnMessageReceived` uses a typed message. \r\n\r\nNow obviously we are going to get rid of these types as they will cause warnings, but is this PR the appropriate place? Should we push this PR, then create a brand new pull request, maybe called \"Removing Topic Statistics Types\" or should we just rename this pull request and do it all in here?",
      "> Now obviously we are going to get rid of these types as they will cause warnings, but is this PR the appropriate place?\r\n\r\nIMO, either is fine. i would say it is up to you.\r\n\r\npersonally i would create PR dedicated issue or title, so it would be easier to understand and review. but this one is obviously related to this PR, after all either way you go, i am good to go with you.\r\n\r\nCC: @MichaelOrlov ",
      "> personally i would create PR dedicated issue or title\r\n\r\nI'm certainly on board with this, though if we do this I'm just going to comment out the logic of `handle_message` as it would have to keep the `DeserializedMessage` logic that we want to get rid of. I would uncomment it in the newly named pull request that I would make. So if that's alright I can pursue that route, especially if the PR removing all the warnings shouldn't be too rough since there's some discussion here.\r\n\r\nEdit:\r\nI only mean that this line would need to be commented out:\r\n ```\r\nsubscription_topic_statistics_->handle_message(deserialized_message, time);\r\n```",
      "@CursedRock17 I am a bit lost in your suggestions and don't quite understand why you want to comment out only \r\n```\r\nsubscription_topic_statistics_->handle_message(deserialized_message, time);\r\n```\r\n\r\nThe proper way to follow up on our resolved https://github.com/ros-tooling/libstatistics_collector/issues/168 would be to create and merge a separate PR first for making `rclcpp::topic_statistics::SubscriptionTopicStatistics` as non templated to force it using `libstatistics_collector::TopicStatisticsCollector`, `libstatistics_collector::ReceivedMessageAgeCollector`  and `libstatistics_collector::ReceivedMessagePeriodCollector` type aliases as underlying types and using `rclcpp::MessageInfo` in its [handle_message](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/topic_statistics/subscription_topic_statistics.hpp#L107-L115)\r\nIt will require bigger and unrelated changes to the current PR. \r\nPerhaps we can name those PR something like `Use message_info in rclcpp::topic_statistics::SubscriptionTopicStatistics instead of typed message`\r\n\r\nThen we can easily make changes in the `rclcpp::subscription::handle_serialized_message(..)` per this PR.",
      "@MichaelOrlov I was thinking of about merging this one first, to be clear you want to make a new PR with the correct untyped TopicStatistics first, merge that new one, then rebase this current PR on top of that? I would much rather do it this way if possible, it seems cleaner.",
      "@CursedRock17 Yes, this is correct.",
      "@CursedRock17 I have created a follow up PR [Use message_info in SubscriptionTopicStatistics instead of typed message](https://github.com/ros2/rclcpp/pull/2337)",
      "@MichaelOrlov sounds great üëç, I've run a slight review",
      "@CursedRock17 Th #2337 has been merged. We can easily finish this PR now, I think.",
      "That last commit should do it, do we need to do any sort of rebasing for the CI, or will it work with the latest branch?",
      "> That last commit should do it, do we need to do any sort of rebasing for the CI, or will it work with the latest branch?\r\n\r\nYou are definitely going to need to rebase, there's been some changes that have gone in to rcl in the meantime.",
      "I did the rebase, it seems now the current build check failure is related to `rcl` - specifically pull request #2344 - is there anything I can do on my end that would solve this or is it fine? As another check, the way we handle the message is synonymous to the other two `handle_x_message` methods.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19713)](http://ci.ros2.org/job/ci_linux/19713/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14223)](http://ci.ros2.org/job/ci_linux-aarch64/14223/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20442)](http://ci.ros2.org/job/ci_windows/20442/)",
      "@clalancette since you left some comments before, can we have review again?",
      "Oh, the latest commit needs to have a `Signed-off-by` line, then we can re-run one last CI on this.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19720)](http://ci.ros2.org/job/ci_linux/19720/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14228)](http://ci.ros2.org/job/ci_linux-aarch64/14228/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20447)](http://ci.ros2.org/job/ci_windows/20447/)",
      "@CursedRock17 thank you for the contribution."
    ],
    "commit_messages": [
      "Serialized Messages with Topic Statistics (#2274)\n\nSigned-off-by: CursedRock17 <mtglucas1@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745818912b45d36a70fc",
    "number": 2272,
    "body": "Fixing a previous TODO to add a custom error/exception handler, similar to PR #2256, relating to issue #2247. This is a really basic error handler to just specifies to the user, if there was an unknown type that was passed. ",
    "head_branch": "unknown_type_exception",
    "is_a_fork": true,
    "comments": [
      "I apologize, it was so minor that I completely forgot to test it, I'm fixing those minor errors and typos right now. ",
      "could you just squash the commits into one? This would resolve the DCO check failure.",
      "Testing `--packages-above rclcpp`:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19342)](http://ci.ros2.org/job/ci_linux/19342/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13869)](http://ci.ros2.org/job/ci_linux-aarch64/13869/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20063)](http://ci.ros2.org/job/ci_windows/20063/)",
      "CI looks good. I see the same `rosbag2` failures in other recent jobs. I'll let you merge @fujitatomoya. Thanks for the improvement @CursedRock17!"
    ],
    "commit_messages": [
      "Adding Custom Unknown Type Error (#2272)\n\nSigned-off-by: CursedRock17 <mtglucas1@gmail.com>\r\nCo-authored-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621745a18912b45d36a70fd",
    "number": 2270,
    "body": null,
    "head_branch": "clalancette/remove-unused-variable",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19327)](http://ci.ros2.org/job/ci_linux/19327/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13855)](http://ci.ros2.org/job/ci_linux-aarch64/13855/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20045)](http://ci.ros2.org/job/ci_windows/20045/)"
    ],
    "commit_messages": [
      "Remove an unused variable from the events executor tests. (#2270)\n\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745b18912b45d36a70fe",
    "number": 2267,
    "body": "This prevents deadlocks in cases, were e.g. get_status() would be called on the handle in a callback of the handle.\r\n\r\nFixes https://github.com/ros2/rclcpp/issues/2243",
    "head_branch": "deadlock_fix",
    "is_a_fork": true,
    "comments": [
      "I added the requested test. \r\nThe build server has some internal problem, can someone trigger a rerun ?",
      "So, can we merge this ?",
      "> So, can we merge this ?\r\n\r\nAs far as I can tell, we are still discussing the solution.",
      "> > So, can we merge this ?\r\n> \r\n> As far as I can tell, we are still discussing the solution.\r\n\r\nOkay, I was under the impression the discussion came to the result to not release the mutex....",
      "@jmachowinski can you fix DCO error?",
      "> @jmachowinski can you fix DCO error?\r\n\r\nDone",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19482)](http://ci.ros2.org/job/ci_linux/19482/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14002)](http://ci.ros2.org/job/ci_linux-aarch64/14002/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20199)](http://ci.ros2.org/job/ci_windows/20199/)"
    ],
    "commit_messages": [
      "fix(ClientGoalHandle): Made mutex recursive to prevent deadlocks (#2267)\n\n* fix(ClientGoalHandle): Made mutex recursive to prevent deadlocks\r\n\r\nThis prevents deadlocks in cases, were e.g. get_status() would\r\nbe called on the handle in a callback of the handle.\r\n\r\n* test(rclcpp_action): Added test for deadlocks during access of a goal handle\r\n\r\nThis test checks, if the code deadlocks, if methods on the goal handle are\r\ncalled from the callbacks.\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745c18912b45d36a70ff",
    "number": 2266,
    "body": "address part of https://github.com/ros2/rclcpp/issues/2242",
    "head_branch": "doc-server_goal_handle_canceled",
    "is_a_fork": true,
    "comments": [
      "@clalancette i dont think we need CI for this?",
      "> @clalancette i dont think we need CI for this?\r\n\r\nNo, the Rpr job is good enough in my opinion.  Going ahead and merging."
    ],
    "commit_messages": [
      "doc fix: call `canceled` only after goal state is in canceling. (#2266)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621745d18912b45d36a7100",
    "number": 2263,
    "body": "Similar to the `RCLCPP_*_STREAM` family of macros, which enable the use of C++'s stream-based output, these new logging macros allow users to conveniently invoke the new C++20 [`std::format()`](https://en.cppreference.com/w/cpp/utility/format/format) function for generating formatted text.\r\n\r\nIt should be noted that `rclcpp` (as of [Iron](https://www.ros.org/reps/rep-2000.html#iron-irwini-may-2023-november-2024)) still has a minimum requirement of C++17, which predates `std::format`. Moreover, many compilers only recently implemented support for this feature. (See the entry for P0645R10 [here](https://en.cppreference.com/w/cpp/compiler_support/20#C.2B.2B20_library_features).)\r\n\r\nTo account for this, the relevant standard library header is only included conditionally if it exists. This should guarantee that the include doesn't introduce errors for compilers without or with partial C++20 support, unless the user actually invokes the `RCLCPP_*_FORMAT` macros.\r\n\r\nThese macros are not strictly necessary. As seen in the implementation, one can mechanically replace any call to a `RCLCPP_*_FORMAT_*` macro with the corresponding printf-style `RCLCPP_*_*` macro, passing in the variadic arguments `\"%s\", std::format(...).c_str()`. However, this is less readable and more error prone.",
    "head_branch": "nwn/rclcpp-format-macros",
    "is_a_fork": true,
    "comments": [
      "My 2 cents is that we shouldn't take this PR until we can at least reasonably compile it (that is, we switch to C++20).  Otherwise this is just dead code.\r\n\r\nBut I'd like to hear opinions from @wjwwood @fujitatomoya @alsora @iuhilnehc-ynos, and anyone else on @ros2/team ",
      "> @clalancette: My 2 cents is that we shouldn't take this PR until we can at least reasonably compile it (that is, we switch to C++20). Otherwise this is just dead code.\r\n\r\nThat's fair. When you say \"switch to C++20\", does that mean upgrading the build system to be able to test the code in CI, or bumping the minimum language requirement to C++20? In either case, is there a timeline or idea for when that might happen? On Ubuntu at least, 24.04 (which I assume Jazzy will target) should ship with ~full C++20 support in GCC.",
      "> That's fair. When you say \"switch to C++20\", does that mean upgrading the build system to be able to test the code in CI, or bumping the minimum language requirement to C++20?\r\n\r\nBoth, essentially.\r\n\r\n> In either case, is there a timeline or idea for when that might happen? On Ubuntu at least, 24.04 (which I assume Jazzy will target) should ship with ~full C++20 support in GCC.\r\n\r\nUnfortunately I don't have a timeline for it.  While we almost certainly will target Ubuntu 24.04, there is always a bunch of work necessary to switch C++ versions, and there is no allocated time in the schedule for doing that right now.  If you are interested in trying to make it happen, I can probably come up with list of things that I think will need to happen in order to do it.",
      "> @clalancette: If you are interested in trying to make it happen, I can probably come up with list of things that I think will need to happen in order to do it.\r\n\r\nAt least I would be interested. Would it be possible to get such a list?",
      "> At least I would be interested. Would it be possible to get such a list?\r\n\r\nThe biggest issue is that while we will be switching to Ubuntu 24.04, which probably has good C++20 support, we still have to support older platforms.  In particular, we will still be supporting RHEL-9 (which has gcc 11.3.1), and Windows via MSVC 2019.  I have no idea what the C++20 support is like in those compilers.  So the list looks something like:\r\n\r\n1.  Try out C++20 mode in both MSVC 2019 and gcc 11.3.1, and see what doesn't work.\r\n2.  Potentially upgrade MSVC 2019 to MSVC 2022.\r\n3.  We can't update the compiler on RHEL-9, so if it doesn't support some C++20 features, we'll have to find other ways to workaround it.\r\n4.  Change the top stanza of all of the CMakeLists.txt in all 350 of the core packages to reference C++20 instead of C++17.\r\n5.  Compile the entire core with C++20, and fix all the new warnings and errors that will pop up, across all of the supported platforms.  This usually also involves updating at least some of our ~24 vendored dependencies.",
      "> ...\r\n>     3. We can't update the compiler on RHEL-9, so if it doesn't support some C++20 features, we'll have to find other ways to workaround it.\r\n>  ...\r\n\r\nAll of the C++20 language features are in GCC11, except full support for modules. The C++20 library features on the other hand are missing a few things. The C++20 format library is for example not available until GCC13. Using [fmtlib](https://github.com/fmtlib/fmt) for this PR would enable backwards compatibility with more or less the same API as the forthcoming standard without fragmenting the userbase.\r\n\r\nOn a side-note, C++20 also introduces the [feature test ](https://en.cppreference.com/w/cpp/feature_test) macros, which can be helpful when maintaining backwards compatibility with older compilers.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745e18912b45d36a7101",
    "number": 2261,
    "body": "This adds lifecycle timers which start when the node activates and cancel when the node deactivates.  There is a demo available at https://github.com/carmiac/demos/blob/lifecycle_timer/lifecycle/src/lifecycle_timer.cpp",
    "head_branch": "lifecycle_timer",
    "is_a_fork": true,
    "comments": [
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/lifecycle-node-improvements/32706/1\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621745f18912b45d36a7102",
    "number": 2259,
    "body": "This is an automatic backport of pull request #2255 done by [Mergify](https://mergify.com).\nCherry-pick of 5d6e5fa766b9ec1237a698b1eefa2733bcdeb506 has failed:\n```\nOn branch mergify/bp/humble/pr-2255\nYour branch is up to date with 'origin/humble'.\n\nYou are currently cherry-picking commit 5d6e5fa7.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/src/rclcpp/time_source.cpp\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2255",
    "is_a_fork": false,
    "comments": [
      "We do not need the fix to humble."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746018912b45d36a7103",
    "number": 2258,
    "body": "This is an automatic backport of pull request #2255 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2255",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19267)](http://ci.ros2.org/job/ci_linux/19267/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13809)](http://ci.ros2.org/job/ci_linux-aarch64/13809/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19997)](http://ci.ros2.org/job/ci_windows/19997/)",
      "Pulls: ros2/rclcpp#2258\r\nGist: https://gist.githubusercontent.com/fujitatomoya/b615dcd9f7c47ea8a86c03be8775876d/raw/937d73f65ffeb7a856dce11a5ce67833f48952fd/ros2.repos\r\nBUILD args:  --packages-above-and-dependencies rclcpp\r\nTEST args:  --packages-above rclcpp\r\nROS Distro: iron\r\nJob: ci_launcher\r\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/14784\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=22088)](http://ci.ros2.org/job/ci_linux/22088/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=16345)](http://ci.ros2.org/job/ci_linux-aarch64/16345/)\r\n* Linux-rhel [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-rhel&build=1607)](http://ci.ros2.org/job/ci_linux-rhel/1607/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=22834)](http://ci.ros2.org/job/ci_windows/22834/)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746118912b45d36a7104",
    "number": 2257,
    "body": "Fixes #2253 \r\n\r\nAs mentioned in the attached issue, using a `vector` makes it possible for the same clock to be stored multiple times in a `TimeSource`, this PR changes the storage to be `unordered_set` so duplicates are automatically avoided at insertion and removal is constant in time.\r\n\r\nI thought a bit about adding a regression test but it wasn't so immediate to me it would be a good idea, the test would have been adding the same clock twice, removing it once then making sure it is not updated anymore. I can add it if you folks think it's useful.\r\nThere is also no warning if a user adds a clock that was already added, but that can also be added if needed.\r\n\r\nI'll open a matching PR in `rclpy` once this is approved",
    "head_branch": "luca/unique_time_source_clocks",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19268)](http://ci.ros2.org/job/ci_linux/19268/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13810)](http://ci.ros2.org/job/ci_linux-aarch64/13810/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19998)](http://ci.ros2.org/job/ci_windows/19998/)"
    ],
    "commit_messages": [
      "Change associated clocks storage to unordered_set (#2257)\n\nSigned-off-by: Luca Della Vedova <lucadv@intrinsic.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746218912b45d36a7105",
    "number": 2256,
    "body": "Follow up of issue #2247 which is meant to address a range of TODOs specifically for `std::runtime_error` with the description of\r\n```\r\nthrow std::runtime_error(\"Cannot create something, group not in node.\");\r\n```\r\nAll of the errors follow that same format, so we can create a general class in `exceptions.hpp` that just take a `const std::string &` of whatever `something` is and runs the error in a much cleaner format.",
    "head_branch": "group_node_exceptions",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19293)](http://ci.ros2.org/job/ci_linux/19293/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13826)](http://ci.ros2.org/job/ci_linux-aarch64/13826/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20013)](http://ci.ros2.org/job/ci_windows/20013/)"
    ],
    "commit_messages": [
      "Adding Missing Group Exceptions (#2256)\n\n* Adding Missing Group Exceptions\r\n\r\nSigned-off-by: CursedRock17 <mtglucas1@gmail.com>\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621746418912b45d36a7106",
    "number": 2255,
    "body": "minor bug fix that missed acquiring the mutex lock for `associated_clocks_`.",
    "head_branch": "topic-associated_clock_protected",
    "is_a_fork": true,
    "comments": [
      "@clalancette minor bug fix, can you take a look? it would be probably better to backport this to iron and humble.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19265)](http://ci.ros2.org/job/ci_linux/19265/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13807)](http://ci.ros2.org/job/ci_linux-aarch64/13807/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19995)](http://ci.ros2.org/job/ci_windows/19995/)",
      "@clalancette @iuhilnehc-ynos thanks for the review, i will merge this to rolling.",
      "@mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2258 associated clocks should be protected by mutex. (backport #2255)](https://github.com/ros2/rclcpp/pull/2258) has been created for branch `iron`\n* [#2259 associated clocks should be protected by mutex. (backport #2255)](https://github.com/ros2/rclcpp/pull/2259) has been created for branch `humble` but encountered conflicts\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\", \"action_is_running\": true}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "associated clocks should be protected by mutex. (#2255)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746518912b45d36a7107",
    "number": 2254,
    "body": "This adds a LifecycleSubscriber class to lifecycle nodes.  In general, it is a mirror of LifecyclePublisher scheme, both for determining whether to process messages and in the factory methods.\r\n\r\nThere is a [linked PR](https://github.com/ros2/demos/pull/646) that provides a demo and test node.\r\n",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/lifecycle-node-improvements/32706/1\n",
      "Any progress on this? looks like a really useful feature üòÑ ",
      "AFAIK, no progress. @carmiac are you going to work on this?\r\n\r\ni think what we need to do is,\r\n\r\n- add lifecycle subscriber test in this PR.\r\n- add `TODO` for `Hold onto the data that arrives before activation, and deliver that on activation`, see https://github.com/ros2/rclcpp/pull/2254#discussion_r1290505034\r\n- and probably  we can add some explanation for https://docs.ros.org/en/rolling/Tutorials/Demos/Managed-Nodes.html?",
      "> AFAIK, no progress. @carmiac are you going to work on this?\r\n> \r\n> i think what we need to do is,\r\n> \r\n>     * add lifecycle subscriber test in this PR.\r\n> \r\n>     * add `TODO` for `Hold onto the data that arrives before activation, and deliver that on activation`, see [Add lifecycle subscriber to lifecycle nodes #2254 (comment)](https://github.com/ros2/rclcpp/pull/2254#discussion_r1290505034)\r\n> \r\n>     * and probably  we can add some explanation for [docs.ros.org/en/rolling/Tutorials/Demos/Managed-Nodes.html](https://docs.ros.org/en/rolling/Tutorials/Demos/Managed-Nodes.html)?\r\n\r\nHey, can I somehow continue this work and complete what's left?\r\n\r\nUPDATE: I have created #2715"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746618912b45d36a7108",
    "number": 2252,
    "body": "Since commit f87d548f95db4165525bd94e4d96b56b3c5478cc, rclcpp requires rcl_clock_time_started from rcl which is only availble since rcl version 5.3.4 for humble\r\n\r\nFixes issue #2249 for humble",
    "head_branch": "stan-guer/hotfix/rclcpp-gte-version-check-rcl",
    "is_a_fork": true,
    "comments": [
      "At a quick look, the approach seems syntactically correct.\r\nHowever if we do it for `rcl`, we should likely do it for a lot of other packages (and keep doing it in the future, I don't think that this is the first time that this happens).\r\n\r\nOverall, I think that this is a larger change than it looks, and it's probably not justified without a larger commitment and discussion on how to apply it project-wise.",
      "> However if we do it for `rcl`, we should likely do it for a lot of other packages (and keep doing it in the future, I don't think that this is the first time that this happens).\r\n\r\nNo, it is definitely not the first time.  That said, it is somewhat rare in stable distributions, as we don't often backport features that require changes across both `rcl` and `rclcpp`.\r\n\r\n> Overall, I think that this is a larger change than it looks, and it's probably not justified without a larger commitment and discussion on how to apply it project-wise.\r\n\r\nYes and no (in my opinion).  On the one hand, people taking piece-wise ROS package updates is a definite anti-pattern.  On the other hand, this is a relatively light-weight way to enforce it in the packages.  I don't think we should do this across the distribution (that would be way too much metadata to update all the time), but I'm OK doing it on a case-by-case basis.",
      "> On the one hand, people taking piece-wise ROS package updates is a definite anti-pattern.\r\n\r\nbasically this could be one of the anti-pattern from distributor perspective, but i do not take this minority. Once it comes to production phase, developer would update the necessary packages only to avoid the instability from other packages in their own CI/CD. in case of this issue, that is `rclcpp`.\r\n\r\nif we expect this is anti-pattern for user application, we need to add version dependencies to let the user know.",
      "> On the one hand, people taking piece-wise ROS package updates is a definite anti-pattern.\r\n\r\nTo shortly interject here: this was not done by a person, our CI/CD server ran `rosdep install ... --reinstall ...` and one of the steps decided to update rclcpp, since it's a c++ codebase. I understand though that putting versions everywhere where they're missing and maintaining that correctly is daunting. I'm not sure where this lands on the spectrum of stability vs continuous development of ROS2.   "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746718912b45d36a7109",
    "number": 2251,
    "body": "This pull request doesn't address a particular issue number, but it attempts to help with a todo [listed here:](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/guard_condition.hpp#L36)\r\n>   // TODO(wjwwood): support custom allocator, maybe restrict to polymorphic allocator\r\n\r\nThis is still a working pull request, but I implemented the start and have been noticing a trend in the rclcpp library where all of the rcl_some_type_options_t almost always have an `rcl_allocator_t` trait to them, so they could all have custom allocators.\r\n\r\n For this though, the original request was a `polymorphic_allocator` which I assumed meant [`std::pmr::polymorphic_allocator`](https://en.cppreference.com/w/cpp/memory/polymorphic_allocator) which is interesting because currently things like [publishers](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/publisher.hpp#L76) use the regular `std::allocator`. I couldn't get it to compile originally because I couldn't find the `memory_resource` header that it's in (the standard library), which might just be because of my machine. But I did want to bring up this discussion, to see if runtime dynamic allocation is even worth it compared to basic static allocation. ",
    "head_branch": "guard_custom_allocator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746818912b45d36a710a",
    "number": 2250,
    "body": "‚Ä¶data and execute\r\n\r\nSome background information: is_ready and take_data are guaranteed to be\r\ncalled in sequence without interruption from another thread.\r\nwhile execute is running, another thread may also call is_ready.\r\n\r\nThe problem was, that goal_request_ready_, cancel_request_ready_, result_request_ready_\r\nand goal_expired_ were accessed and written from is_ready and execute.\r\n\r\nThis commit fixed this by only using the mentioned variables in is_ready and take_data.\r\nexecute now only accesses the given pointer and works on this.\r\n\r\nSigned-off-by: Janosch Machowinski <J.Machowinski@cellumation.com>\r\n\r\nNote, this fixes https://github.com/ros2/rclcpp/issues/2242",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "I'm still a bit puzzled about the is_ready() function. When will it be called in relation to the take_data function ?\r\nFrom the code it looks like it should be a sequence of is_ready, take_data, is_ready etc. but this seems not to be the case...",
      "Looks like is_ready may be called multiple times before take_data is called.Therefore this patch needs a rewrite.",
      "@clalancette can you do a review of this ? The exact description of the issue this is fixing can be found here https://github.com/ros2/rclcpp/issues/2242#issuecomment-1687817219",
      "@ros2/team this patch is hanging here since July, is there anything that I can do to speed this up ?",
      "Hi, I've run into #2242 on my test setup, as well. I have a (intentionally) not too capable PC running a robot driver plus MoveIt and have it execute random collision-free motions forever (or as long as possible). Basically, I want to try (end demonstrate) whether a ROS 2 based application can reliably work in a 24/7 application.\r\n\r\nWe use a low-latency kernel and have our robot driver using FIFO-scheduling with a very high priority, so this could definitively be one of the reasons why we stumbled upon this.\r\n\r\nWithout the fix from this PR the driver crashed after about 1-2 hours, with this fix applied (merged into current `rolling`) we did not have any crashes for 4 days now. I did not have an in-depth look into this since I am not very familiar with rclcpp's code base, but I hope that a \"Solves a severe problem for me\" voice helps in bringing this PR forward.",
      "@clalancette  @wjwwood  I'm back from vacation, lets try to get this MR sorted next ;-)",
      "Is there any review going on?\r\n@jmachowinski can you meanwhile fix the DCO check (sign off in one commit message)?",
      "@tommy-erko fixed",
      "After a series of tests on our project, I feel I can confirm this PR fixes the issue for us.\r\n\r\nMy setup is based on ros:rolling docker image, with a local workspace containing this version of rclcpp_action, navigation2 stack and our stack for a mobile robot control system, using rclcpp_action in several places. So far I have 13 successful builds of our system tests since yesterday morning - each consisting of 10 separate scenarios ran in gazebo. Without the fix, every ~third build fails on at least one scenario.",
      "@wjwwood have a look at this post https://github.com/ros2/rclcpp/issues/2242#issuecomment-1803469362\r\n\r\nThis explains the wired double calls to we were seeing, I will update the patch.\r\n\r\nhttps://github.com/ros2/rclcpp/blob/9c098e544ecf191b7c61f63f7f4fac6f6449cedd/rclcpp/include/rclcpp/strategies/allocator_memory_strategy.hpp#L123-L127\r\n@wjwwood Would clearing  waitable_triggered_handles_ before the loop have any unintended side effects (like lost events) , or would this be a suitable fix ?  If I understand the code correctly, any ready waitable should be returned on every iteration from the waitset anyways.\r\n\r\n",
      "@wjwwood We found out, that for testing the 'stress' tool works wonders for reproducing the issue. Just load all your cores and it basically pops up instant.",
      "I reworked the patch back to the first iteration, and also added a fix for the double call to take_data. This is working for us using cycloneDDS. \r\n\r\nAs for the code introduced in https://github.com/ros2/rclcpp/pull/2109 this looks strange to me. Until now I was under the impression, that is_ready() must return true on consecutive calls, if there is data ready.",
      "> As for the code introduced in https://github.com/ros2/rclcpp/pull/2109 this looks strange to me. Until now I was under the impression, that is_ready() must return true on consecutive calls, if there is data ready.\r\n\r\n@jmachowinski thanks for putting the effort on this. although i did not catch up with everything (including discord conversation), i will ping the members from Sony. @Barry-Xu-2018 @iuhilnehc-ynos \r\n\r\nCC: @clalancette @mjcarroll @wjwwood ",
      "@jmachowinski \r\n\r\n> As for the code introduced in https://github.com/ros2/rclcpp/pull/2109 this looks strange to me.  \r\n\r\n#2109 addressed a trigger loss issue, which was mentioned at https://github.com/ros2/rclcpp/issues/2012#issuecomment-1238828464.  This fix does indeed have shortcomings for the action (It was mentioned at https://github.com/AivotRobotics/rclcpp/pull/1). I will further consider it.  ",
      "@Barry-Xu-2018 Just FYI, i think https://github.com/ros2/rclcpp/issues/2242#issuecomment-1803469362 summarizes the issue well.",
      "> Just FYI, i think https://github.com/ros2/rclcpp/issues/2242#issuecomment-1803469362 summarizes the issue well.\r\n\r\nYes. ",
      "![image](https://github.com/ros2/rclcpp/assets/43591679/14d70034-752c-4453-a288-96d0539c5247)\r\n\r\n`waitable_triggered_handles_.clear();` will lead to issue #2012 reoccurring.",
      "Due to the fix in #2212, in wait_for_work(), it is important to consider that waitable_triggered_handles_ cannot be cleared every time.   \r\n\r\nIf waitable_triggered_handles_ isn't cleared,  \r\n```c++\r\n  // next ready event for taking, will be set by is_ready and will be processed by take_data\r\n  std::atomic<size_t> next_ready_event;\r\n```\r\nBased on this situation, current modification only keep one ready event isn't enough.   \r\n\r\n```\r\nget_next_executable()\r\n{\r\n   get_next_ready_executable()\r\n      lock(mutex_)\r\n      -> get_next_ready_executable_from_map()\r\n           -> get_next_waitable()\r\n                 // If callback group is mutually exclusive and is being \r\n                 // used (any_executable is being executed), skip it\r\n                 //\r\n                 // If not, prepare any_exec and remove waitable from\r\n                 // waitable_triggered_handles_ \r\n           -> any_executable.waitable->take_data();\r\n           -> // callback group is set as used.\r\n           \r\n   \r\n   wait_for_work()\r\n     lock(mutex_)\r\n     -> remove_null_handles()\r\n           -> is_ready()\r\n              // If yes, add waitable to waitable_triggered_handles_\r\n   \r\n   get_next_ready_executable()\r\n      lock(mutex_)\r\n      -> get_next_ready_executable_from_map()\r\n           -> get_next_waitable()\r\n                 // If callback group is mutually exclusive and is being \r\n                 // used (any_executable is being executed), skip it\r\n                 //\r\n                 // If not, prepare any_exec and remove waitable from\r\n                 // waitable_triggered_handles_ \r\n           -> any_executable.waitable->take_data();\r\n           -> // callback group is set as used.   \r\n}\r\n```\r\n\r\nWhile callback group is mutually exclusive, and it is being used (other thread run execute_any_executable() with this callback group), we cannot make sure that take_data() must be called after calling is_ready(). For special case, is_ready() is called several times, take_data() is never call once.   \r\n\r\nSo we need to record all event type (feedback, status, goal_reponse, etc.). For these receive event types, place them into a FIFO queue in the order they are received.  (Note that take_data() is called as this order)\r\n\r\nAt take_data(), get the first event type from the above FIFO queue. We need to bind event type and event data together, so the data should be modified to include event type information as below:\r\n```\r\nstd::pair<EVENT_TYPE, std::tuple<rcl_ret_t, rmw_request_id_t, std::shared_ptr<void>>>\r\n```\r\n\r\nAt execute(), according to event type in data, do different process.   \r\n\r\nThis way can resolve this issue. \r\nI would like to hear your opinions. @jmachowinski @wjwwood @clalancette @fujitatomoya \r\n\r\n",
      "Putting a queue there could work, but would result in a weird mix of behaviors of the events. \r\nI also fear, that rmw_wait would not wake up / wake up delayed if we get the triggering wrong, in \r\ncases that waitables are ready. \r\n\r\nAs far as I understand the code, (@wjwwood Correct me if this assumption is wrong !) for everything\r\nexcept the conditionals, we have some sort of interrupt system going on, were the flag in the wait set will\r\nbe set on consecutive calls to rmw_wait, until the data was actually taken. Taking the data, implicitly clears the flag.\r\n\r\nTherefor I would suggest, to change the behavior of the conditionals in this ways:\r\n- Make them counting\r\n- Add an API to decrease the count\r\n- Don't touch them in RMW\r\n\r\nIf we would decrease the count of an associated conditional every time take_data is called, this should solve all of our problems.",
      "@jmachowinski I just tested the latest patch version with our system and I got an error in the first run, instead of the usual \"Taking data from action client...\", this time it is the \"Taking data from action **server** but nothing is ready\" version. I see it happens if\r\n`next_ready_event == std::numeric_limits<uint32_t>::max()` (line 654 in client.cpp). What are the circumstances that can lead to this, can there be an issue on our side? We never got this error with the original \"summer-version\" of this PR, or with the official unpatched version.",
      "> \"Taking data from action client...\", this time it is the \"Taking data from action **server** but nothing is ready\"\r\n\r\nI messed up the error message in client.cpp:654\r\n\r\nInteresting that you still get this error though, this means there is another way to trigger it, that I am not aware of yet.\r\nAnyway, there is no error on your side, the current state of the patch is known to not fully fix the issue. You should stay on the \"summer version\" for now.\r\n",
      "@tommy-erko I just did a test with the current version ontop of Iron, and it works without any issues for me. \r\n\r\nCan you try this version ? https://github.com/cellumation/rclcpp/tree/action_fix_final\r\nIts the same as this one, just as two commits.\r\n\r\nNote, this version of the patch will expose errors in waitables, and may introduce problems with interprocess communication.",
      "@Barry-Xu-2018 FYI I had a longer Q&A session with @wjwwood on discord. The outcome of it is, that by design it is the responsibility of a waitable, to trigger wakeups as long as it has data for processing. Therefore the patch from https://github.com/ros2/rclcpp/pull/2109 seems to be the wrong way to go, as it shifts the responsibility to the executioner.",
      "@jmachowinski \r\n\r\nThank you for sharing the results of the discussion.\r\n\r\n> The outcome of it is, that by design it is the responsibility of a waitable, to trigger wakeups as long as it has data for processing. Therefore the patch from https://github.com/ros2/rclcpp/pull/2109 seems to be the wrong way to go, as it shifts the responsibility to the executioner.\r\n\r\nWhile fixing this issue, I also had doubts about which module rclcpp or rmw should be responsible for addressing it.   \r\n\r\nIn RMW, the criteria for determining whether guard_conditions/events and subscriptions/clients/services have trigger condition are currently different.  For subscriptions/clients/services, having data available in buffer is considered a trigger condition. But guard_conditions/events have no 'data'.   \r\nRefer to \r\nhttps://github.com/ros2/rmw_fastrtps/blob/5b96503556302b47b4e4af96a44f6189355edf29/rmw_fastrtps_shared_cpp/src/rmw_wait.cpp#L56-L116\r\n\r\nFor guard_conditions, trigger condition will be cleared before leaving __rmw_wait().  The issue is that currently, the RMW layer cannot know whether the trigger has been handled by the upper layers.\r\n\r\nhttps://github.com/ros2/rmw_fastrtps/blob/5b96503556302b47b4e4af96a44f6189355edf29/rmw_fastrtps_shared_cpp/src/rmw_wait.cpp#L306-L315\r\n\r\nIf we fix this issue in the RMW layer, we would need to design a new mechanism that allows the upper layers to inform RMW that a guard condition has been handled and can be cleared.",
      "@Barry-Xu-2018 Is there another use case except the waitables that I am not aware of ?\r\nFor the waitables you can figure out if you got processed or not. E.g. if take_data() was not called your were not processed, and you need to retrigger your internal guard condition on the next call to add_to_wait_set.\r\n\r\n",
      "@clalancette @fujitatomoya @wjwwood I now pushed the version, that I would consider the correct fix for this issue. \r\n\r\nIf you are not in favor of the revert of \" Avoid losing waitable handles while using MultiThreadedExecut‚Ä¶\" before a fix for the issue https://github.com/ros2/rclcpp/issues/2012 is in place, I would remove it from this MR and just merge the first commit. \r\n\r\nI'm going to be in vacation now and might not be responsive for the rest of the year. ",
      "@jmachowinski \r\n\r\n> Is there another use case except the waitables that I am not aware of ?\r\n> For the waitables you can figure out if you got processed or not. E.g. if take_data() was not called your were not processed, and you need to retrigger your internal guard condition on the next call to add_to_wait_set.\r\n\r\nApologies for the delayed response.  \r\nFrom the information I known (mentioned in https://github.com/ros2/rclcpp/pull/2250#issuecomment-1844837750), there shouldn't be anymore.  ",
      "@wjwwood  @mjcarroll  @fujitatomoya Ping, I would like to see this merged for jazzy",
      "Is there a reason for this PR not getting merged? If there is anything a user from the community can do to help getting this merged. Let me know!\r\nEspecially in combination with ros2control (which uses a multithreaded executor) and the default JointTrajectoryController - which is used as a basic building block for many other components this issue can be encountered quite regularly. \r\nSo fixing this should be quite beneficial for many applications!\r\n\r\n\r\n",
      "@firesurfer This is now in the pipeline for merge. The plan is to merge https://github.com/ros2/rclcpp/pull/2420 and afterwards this PR. If you want to help out, you could retry this patch as soon as 2420 was merged, to verify, that it is still working, and we got no regressions."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746918912b45d36a710b",
    "number": 2248,
    "body": "‚Ä¶data and execute\r\n\r\nSome background information: is_ready and take_data are guaranteed to be called in sequence without interruption from another thread. while execute is running, another thread may also call is_ready.\r\n\r\nThe problem was, that goal_request_ready_, cancel_request_ready_, result_request_ready_ and goal_expired_ were accessed and written from is_ready and execute.\r\n\r\nThis commit fixed this by only using the mentioned variables in is_ready and take_data. execute now only accesses the given pointer and works on this.\r\n\r\nNote, this fixes parts of #2242",
    "head_branch": "iron",
    "is_a_fork": true,
    "comments": [
      "Can you please target this to the `rolling` branch first?  Our development practice is to get everything in `rolling` first, then backport it to stable distributions as necessary.  Thanks.",
      "I'll create a new merge request, should I leave this one just open ?",
      "I'll close this one for now.  Given the nature of this change, and the fact that we must maintain API/ABI in stable distributions, I think the final form that we would put into `iron` is going to be significantly different.",
      "API stability would be given (I only changed private functions) , I can modify it to be also ABI compatible.\r\n\r\nNote, we as a company are relying on this fix, and would like to see it merged ASAP. Therefore just tell me what to do, to speed the process up."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746a18912b45d36a710c",
    "number": 2246,
    "body": "Adds spin_all to `executors.hpp` to be accessible as such: \r\n\r\n```\r\n  auto node = std::make_shared<MyNode>();\r\n  rclcpp::spin_all(node, 1000ms);\r\n```\r\n\r\nShould I also add `spin_once`?",
    "head_branch": "add-spin-all-shortcuts",
    "is_a_fork": true,
    "comments": [
      "Thanks, I think that it makes sense to have `spin_all` in the global free-function API.  \r\n\r\nOn the other hand, `spin_once` probably doesn't make much sense due to the way that executors work.  In the case of `spin_once`, the executor would be created, populated with available work, one step of work (eg a single subscription) would be executed, and then the executor would be destroyed by going out of scope.  In some cases, this will be fine, as checking for available work has no side effects, but we cannot guarantee that every `Waitable` has the same safety.  In those cases, the act of populating the internal executor queue could mark those waitables as not ready without ever actually servicing them.",
      "> lgtm, test would be ideal.\r\n\r\nsure, but I don't see a specific test for `rclcpp::spin` and `rclcpp:spin_some` to extend on, can you point me to them or if they don't exist give some more guidance where that test should be?\r\n",
      "> > lgtm, test would be ideal.\r\n> \r\n> sure, but I don't see a specific test for `rclcpp::spin` and `rclcpp:spin_some` to extend on, can you point me to them or if they don't exist give some more guidance where that test should be?\r\n\r\nI've added a couple of tests, please let me know if more are needed and which ones",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19305)](http://ci.ros2.org/job/ci_linux/19305/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13835)](http://ci.ros2.org/job/ci_linux-aarch64/13835/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20025)](http://ci.ros2.org/job/ci_windows/20025/)",
      "@tonynajjar I think there are some issues with the tests you added on aarch64.  Do you think you can take a look?",
      "@mjcarroll should be fixed, can you rerun CI?",
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19312)](http://ci.ros2.org/job/ci_linux/19312/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13843)](http://ci.ros2.org/job/ci_linux-aarch64/13843/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20032)](http://ci.ros2.org/job/ci_windows/20032/)",
      "`Rpr` failures are unrelated here."
    ],
    "commit_messages": [
      "Add spin_all shortcut (#2246)\n\nSigned-off-by: Tony Najjar <tony.najjar@logivations.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621746b18912b45d36a710d",
    "number": 2245,
    "body": "This is a pull request meant to handle issue #1989 which wanted to add customization to allocators in services and clients. The change ended up being longer than I expected and the way I have it right now, may be too much for this pull request, it may need to be split into two.\r\n\r\nSo I did do what was originally asked and created the `ServiceOptionsBase`, `ClientsOptionsBase`, `ServiceOptionsWithAllocator`, and `ClientOptionsWithAllocator` classes. These classes ended up being smaller than the publisher/subscriber side because there are [no rmw options](https://github.com/ros2/rcl/blob/960bb4ad353a43abfde5ecb831bd87823454bfc0/rcl/include/rcl/publisher.h#L51). Then these implementations were handled correctly in their respective create methods, by passing default `std::allocator<void>` allocators, therefore there shouldn't have been any breaking changes, which was the goal. \r\n\r\nAccording to the [distributions page](https://docs.ros.org/en/rolling/Releases.html) \r\n>  Rolling is continuously updated and can have in-place updates that include breaking changes.\r\n\r\nTherefore, I created a breaking change when it game to how the user dealt with `qos`. Last July (2022), after the Humble release [this pull request](https://github.com/ros2/rclcpp/pull/1969/files) was made, which made services accept `rclcpp::QoS` and there are multiple sections of code with this deprecation warning: \r\n```\r\n[[deprecated(\"use rclcpp::QoS instead of rmw_qos_profile_t\")]]\r\n```\r\nbecause it's now been after the release of Iron, I figured that I would remove these functions, this is because in the `ServiceOptionsWithAllocator` class [`to_rcl_service_options`](https://github.com/CursedRock17/rclcpp/blob/f970c3aeb383e413802c87b24d905b60a448c5a9/rclcpp/include/rclcpp/service_options.hpp#L67-L75) takes in a qos object and by default sets the default value of the result.qos. \r\n\r\nTo be honest, I never thought about just adding another method that takes in a `rmw_qos_profile_t` beforehand, then just defaulting the `result.qos` that way, but if we need to prevent breaking change we can do that. Additionally if we need to prevent breaking change, I would restore the previous classes and just create symmetrical methods of those that we already have, except that they take in a `rmw_qos_profile_t` instead of a `rclcpp::QoS & qos`. Though I think removing the deprecating functions and doing this for the user makes the code base simpler, less error-prone, and more modern.\r\n\r\nAside from that concern, I began to follow up with the second part of the original issue \r\n> It may also be good to copy the Factory design pattern used on the publisher/subscriber implementation for consistency.\r\n\r\nby creating those separate files/classes/methods and adding the functions to the `NodeTopics` class. But I stopped going too far because I felt that adding a bunch settings for callbacks and even more methods moved too far away from the original issues of service/client allocators, just wanted to make sure that they had a decent foundation here. After this is solved, I can open an issue/pull request that finishes that.\r\n\r\nIn terms of testing, I didn't add any special unit/performance tests because the changes passed all the original tests and because these are default values, they shouldn't fail, but I can add custom allocator tests if need be. Sorry if it's confusing or long.",
    "head_branch": "service_client_allocators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746d18912b45d36a710e",
    "number": 2244,
    "body": "This is an automatic backport of pull request #2233 done by [Mergify](https://mergify.com).\nCherry-pick of 945d254e321381ecb618c680015ba2b38ce898eb has failed:\n```\nOn branch mergify/bp/iron/pr-2233\nYour branch is up to date with 'origin/iron'.\n\nYou are currently cherry-picking commit 945d254e.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp_lifecycle/src/lifecycle_node.cpp\n\tboth modified:   rclcpp_lifecycle/src/lifecycle_node_interface_impl.cpp\n\tboth modified:   rclcpp_lifecycle/src/lifecycle_node_interface_impl.hpp\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2233",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19222)](http://ci.ros2.org/job/ci_linux/19222/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13778)](http://ci.ros2.org/job/ci_linux-aarch64/13778/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19959)](http://ci.ros2.org/job/ci_windows/19959/)"
    ],
    "commit_messages": [
      "Switch lifecycle to use the RCLCPP macros. (backport #2233) (#2244)\n\n* Switch lifecycle to use the RCLCPP macros. (#2233)\r\n\r\nThis ensures that they'll go out to /rosout and the disk.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\n(cherry picked from commit 945d254e321381ecb618c680015ba2b38ce898eb)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746e18912b45d36a710f",
    "number": 2240,
    "body": "Just trigger the `rclcpp_publish` tracepoint for loaned message publications too.",
    "head_branch": "christophebedard/instrument-loaned-msg-pub-code-path",
    "is_a_fork": true,
    "comments": [
      "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19205)](http://ci.ros2.org/job/ci_linux/19205/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13764)](http://ci.ros2.org/job/ci_linux-aarch64/13764/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19944)](http://ci.ros2.org/job/ci_windows/19944/)",
      "CI looks good, I'll let you merge this @mjcarroll."
    ],
    "commit_messages": [
      "Instrument loaned message publication code path (#2240)\n\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621746f18912b45d36a7110",
    "number": 2239,
    "body": "This is a pull request targeting issue #689 (* Warning this is an older issue and the codebase has changed since then *). The point of that issue was just to expose the boolean for the intraprocess_comm subscription state, which looks like this:\r\n```\r\nenum class IntraProcessSetting\r\n{\r\n  /// Explicitly enable intraprocess comm at publisher/subscription level.\r\n  Enable,\r\n  /// Explicitly disable intraprocess comm at publisher/subscription level.\r\n  Disable,\r\n  /// Take intraprocess configuration from the node.\r\n  NodeDefault\r\n};\r\n```\r\nbut both the Publisher and Subscription have `protected` bools: `intra_process_is_enabled_` and `use_intra_process_` respectively, which showcase if state can be used for intraprocess communication.\r\n\r\nWhile this code was just meant to address the problem in the issue, the `create_publisher` and `create_subscription` functions have changed in the 4 years it's been since the original issue that the issue this PR addresses, was meant to fix. They no longer have `IntraProcessSetting use_intra_process_comm = IntraProcessSetting::NodeDefault);` in their function defintions, which makes adding the tests a bit more difficult for the context of the problem since it's not the same. I think the functions are still perfectly useful in the base classes and for querying, just don't know how to go about testing now, since they aren't complex functions.",
    "head_branch": "intraprocess_comm_enabled",
    "is_a_fork": true,
    "comments": [
      "Friendly Ping, was that `NodeDefault` Test enough, or should I extend it further?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747018912b45d36a7111",
    "number": 2238,
    "body": "Newer versions of google benchmark (1.8.2 in my case) warn that the compiler may optimize away the DoNotOptimize calls when using the constref version.  Get away from that here by explicitly *not* calling the constref version, casting where necessary.",
    "head_branch": "clalancette/fix-benchmark-warning",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19170)](http://ci.ros2.org/job/ci_linux/19170/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13740)](http://ci.ros2.org/job/ci_linux-aarch64/13740/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19924)](http://ci.ros2.org/job/ci_windows/19924/)"
    ],
    "commit_messages": [
      "Stop using constref signature of benchmark DoNotOptimize. (#2238)\n\n* Stop using constref signature of benchmark DoNotOptimize.\r\n\r\nNewer versions of google benchmark (1.8.2 in my case) warn\r\nthat the compiler may optimize away the DoNotOptimize calls\r\nwhen using the constref version.  Get away from that here\r\nby explicitly *not* calling the constref version, casting\r\nwhere necessary.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747118912b45d36a7112",
    "number": 2237,
    "body": "This was a whoopsie in #2224  - left out the implementation of this method in `LifecycleNode` so anybody who tried to compile against that method would get a linker error. Adds it in and a basic smoke test for both `Node` and `LifecycleNode` so that's caught. Already included in backport https://github.com/ros2/rclcpp/pull/2236",
    "head_branch": "implement-lifecycle-node-tdsrv-getter",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19128)](http://ci.ros2.org/job/ci_linux/19128/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13667)](http://ci.ros2.org/job/ci_linux-aarch64/13667/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19862)](http://ci.ros2.org/job/ci_windows/19862/)",
      "* Linux-aarch64 [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13692)](https://ci.ros2.org/job/ci_linux-aarch64/13692/)"
    ],
    "commit_messages": [
      "Implement get_node_type_descriptions_interface for lifecyclenode and add smoke test for it (#2237)\n\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621747218912b45d36a7113",
    "number": 2236,
    "body": "backports #2224 to Iron\r\n\r\nDepends on  ros2/rcl#1082\r\nLinked to ros2/system_tests#521\r\n\r\n* TypeDescriptions interface with readonly param configuration\r\n* Add parameter descriptor, to make read only\r\n* example of spinning in thread for get_type_description service\r\n* Add a basic test for the new interface\r\n* Fix tests with new parameter\r\n* Add comments about builtin parameters",
    "head_branch": "emersonknapp/iron-backport-2224",
    "is_a_fork": true,
    "comments": [
      "Using https://github.com/ros2/rclcpp/pull/2183/files as a reference for ABI-stable backport",
      "Pulls: ros2/rcl#1082, ros2/rclcpp#2236, ros2/system_tests#521\r\nGist: https://gist.githubusercontent.com/emersonknapp/c9f2e76b044e7842b85a6ac7bb40dce3/raw/54f8236b734b80bddc3b50b3786083c2304c3ebf/ros2.repos\r\nBUILD args:  --packages-above-and-dependencies rclcpp rclcpp_lifecycle test_rclcpp\r\nTEST args:  --packages-above rclcpp rclcpp_lifecycle test_rclcpp\r\nROS Distro: iron\r\nJob: ci_launcher\r\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12350\r\n* Linux [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19109)](https://ci.ros2.org/job/ci_linux/19109/) \r\n* Linux-aarch64 [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13631)](https://ci.ros2.org/job/ci_linux-aarch64/13631/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19851)](http://ci.ros2.org/job/ci_windows/19851/)\r\n  * [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19867)](https://ci.ros2.org/job/ci_windows/19867/)  (manual rerun, flaky check)\r\n",
      "Pulls: ros2/rcl#1082, ros2/rclcpp#2236, ros2/system_tests#521, ros2/rclpy#1140, ros2/ros2cli#839\r\nGist: https://gist.githubusercontent.com/emersonknapp/05bdac69737f3b9ead83ab407dacc401/raw/66da570b925141182d96d88ed28387f17f917899/ros2.repos\r\nBUILD args: \r\nTEST args: \r\nROS Distro: iron\r\nJob: ci_launcher\r\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12392\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19169)](http://ci.ros2.org/job/ci_linux/19169/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13739)](http://ci.ros2.org/job/ci_linux-aarch64/13739/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19922)](http://ci.ros2.org/job/ci_windows/19922/)"
    ],
    "commit_messages": [
      "[Iron] Add new node interface TypeDescriptionsInterface to provide GetTypeDescription service (backport #2224) (#2236)\n\n* Add new node interface TypeDescriptionsInterface to provide GetTypeDescription service (#2224)\r\n\r\n* TypeDescriptions interface with readonly param configuration\r\n\r\n* Add parameter descriptor, to make read only\r\n\r\n* example of spinning in thread for get_type_description service\r\n\r\n* Add a basic test for the new interface\r\n\r\n* Fix tests with new parameter\r\n\r\n* Add comments about builtin parameters\r\n\r\n* Hide new member for ABI stability\r\n\r\n* Add typedescription interface smoke test\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621747318912b45d36a7114",
    "number": 2235,
    "body": "According to the comment it is planned for I-turtle",
    "head_branch": "emersonknapp/iron-backport-2224",
    "is_a_fork": true,
    "comments": [
      "wrong `hub` command"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747418912b45d36a7115",
    "number": 2234,
    "body": "Backport of https://github.com/ros2/rclcpp/pull/2233. Tested on Humble, works as expected.",
    "head_branch": "lifecycle-use-rclcpp-macros",
    "is_a_fork": true,
    "comments": [
      "@tonynajjar Can you add a Signed-off-by line to the comment please?",
      "CI fails to build rclcpp. I had the same error locally, I had to clone rcl and rebuild rclcpp from scratch.",
      "Yeah, we need to do a release of `rcl` into Humble to fix that.  @audrow what are your plans for a full Humble patch release?",
      "Regardless, that doesn't block this PR; we can build everything from source and get confidence that way.  That said, I'm not going to do any of that until #2233 is merged into Rolling.",
      "> Regardless, that doesn't block this PR; we can build everything from source and get confidence that way. That said, I'm not going to do any of that until #2233 is merged into Rolling.\r\n\r\nMakes sense. I quickly checked that for Iron there are no conflicts, so it should be a smooth backport with mergify",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19214)](http://ci.ros2.org/job/ci_linux/19214/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13768)](http://ci.ros2.org/job/ci_linux-aarch64/13768/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19949)](http://ci.ros2.org/job/ci_windows/19949/)",
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/new-packages-and-patch-release-for-humble-hawksbill-2023-07-24/32523/6\n"
    ],
    "commit_messages": [
      "Switch lifecycle to use the RCLCPP macros Signed-off-by: Tony Najjar <tony.najjar.1997@gmail.com> (#2234)\n\nSigned-off-by: Tony Najjar <tony.najjar@logivations.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747518912b45d36a7116",
    "number": 2233,
    "body": "This ensures that they'll go out to /rosout and the disk.\r\n\r\nThis should fix #2221 ",
    "head_branch": "clalancette/lifecycle-use-rclcpp-macros",
    "is_a_fork": false,
    "comments": [
      "> Code is not compiling https://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/947/\r\n\r\nOh, that's because we need to do a release of `rcl` for this to compile against.  Honestly, we need to do that because all Rpr jobs are failing.  I'll try to get to it later this week.\r\n\r\nThat said, if we were to run CI from https://ci.ros2.org, this should compile.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19131)](http://ci.ros2.org/job/ci_linux/19131/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13681)](http://ci.ros2.org/job/ci_linux-aarch64/13681/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19865)](http://ci.ros2.org/job/ci_windows/19865/)",
      "@clalancette do we want to backport this to iron? or we should backport https://github.com/ros2/rclcpp/pull/2234 to iron?",
      "@Mergifyio backport iron",
      "> backport iron\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2244 Switch lifecycle to use the RCLCPP macros. (backport #2233)](https://github.com/ros2/rclcpp/pull/2244) has been created for branch `iron` but encountered conflicts\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron\", \"conclusion\": \"success\"}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "Switch lifecycle to use the RCLCPP macros. (#2233)\n\nThis ensures that they'll go out to /rosout and the disk.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747718912b45d36a7117",
    "number": 2232,
    "body": "Since this is a common idiom, especially under this name, we should define the `always_false_v` template within a namespace to avoid conflict with other libraries and user code. This could either be `rclcpp::detail` if it's intended only for internal use or just `rclcpp` if it's intended as a public helper. In this PR, I've initially chosen the former.",
    "head_branch": "nwn-hide-always-false",
    "is_a_fork": true,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19069)](http://ci.ros2.org/job/ci_linux/19069/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13599)](http://ci.ros2.org/job/ci_linux-aarch64/13599/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19818)](http://ci.ros2.org/job/ci_windows/19818/)"
    ],
    "commit_messages": [
      "Move always_false_v to detail namespace (#2232)\n\nSince this is a common idiom, especially under this name, we should\r\ndefine the `always_false_v` template within a namespace to avoid\r\nconflict with other libraries and user code. This could either be\r\n`rclcpp::detail` if it's intended only for internal use or just `rclcpp`\r\nif it's intended as a public helper. In this PR, I've initially chosen\r\nthe former.\r\n\r\nSigned-off-by: Nathan Wiebe Neufeldt <nwiebeneufeldt@clearpath.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747818912b45d36a7118",
    "number": 2228,
    "body": "This came up in some current Iron backports, that there is no good place to hide any new members. My understanding is that this is not used for the majority of features for execution performance (avoid one indirection), however a small amount is not an overall performance trend. This escape hatch should make for some better backports in future distros.",
    "head_branch": "emersonknapp/node-pimpl",
    "is_a_fork": true,
    "comments": [
      "@wjwwood we discussed this briefly, maybe you have further thoughts",
      "Yes, I will want to backport https://github.com/ros2/rclcpp/pull/2224 to Iron. But, there is no good place to put the new `NodeTypeDescriptions` interface object. I will have to make some global variable or something to store it.\r\n\r\nThis proposal is so that, after Jazzy, I could do that backport cleanly - the new feature in Rolling would change the ABI, but the backport could use the pimpl.",
      "Adding this PIMPL in the node class, will definitely allow to easily backport things like https://github.com/ros2/rclcpp/pull/2224, but IMO only a small subset of PRs are adding members to the node class.\r\nIf we do this, it would be an important precedent for adding hidden implementation pointers to a lot of other rclcpp classes and I don't think that it would be a good decision.\r\n\r\nI think that the backporting effort should focus on bug fixes rather than on new features.\r\n\r\n\r\n",
      "In my opinion, the PIMPL should not be used except for backports, feature or bugfix, i.e. we should prefer to put new members in the class directly rather than in the pimpl.\r\n\r\n> If we do this, it would be an important precedent for adding hidden implementation pointers to a lot of other rclcpp classes and I don't think that it would be a good decision.\r\n\r\nI think this is necessary to support backports in an ABI way, which includes bugfixes and not just features. So based on that, I would personally like to see pimpl pointers in most/all the classes, but have them unused except for backporting. This adds some conceptual and memory overhead (about one pointer per class), but has real value. There have been several times in the last few years where we've said something along the lines of \"if we had a pimpl we could fix this easily, but instead...\" and the \"instead...\" is always something less ideal.\r\n\r\nAnytime this topic comes up, I also think about about performance, and preferring to avoid the use of the pimpl except when required definitely helps, but there's also the \"fast pimpl\" pattern, which has less capacity for ABI breaks, but is faster so long as you don't exceed it: http://www.gotw.ca/gotw/028.htm\r\n\r\nAlso, @clalancette did we have a general tracking issue for adding pimpl's to classes in ROS 2? I know we talked about it on several occasions.",
      "I agree with @wjwwood points above, especially that bugfixes sometimes require new members or other ABI-incompatible changes, additionally\r\n\r\n> I think that the backporting effort should focus on bug fixes rather than on new features.\r\n\r\nI disagree with this. While I think that bugfixes and stability should be the _first_ priority, I think that ROS distros have frequently been too \"stuck\" in that users don't get the benefit of useful new features within the lifetime (up to 5 years!) of a distribution. There are many users who will not upgrade distros on their product unless they absolutely have to, but frequently come requesting features that already exist in the mainline. However, this is potentially a pretty big conversation, and I think this PR is not the right place for it.\r\n",
      "> Also, @clalancette did we have a general tracking issue for adding pimpl's to classes in ROS 2? I know we talked about it on several occasions.\r\n\r\nYeah, we've discussed it several times.  Ivan opened an issue a few years ago: https://github.com/ros2/rclcpp/issues/1142",
      "> > I think that the backporting effort should focus on bug fixes rather than on new features.\r\n\r\n> I disagree with this. ...\r\n\r\n> However, this is potentially a pretty big conversation, and I think this PR is not the right place for it.\r\n\r\nYeah, agreed that this is a large conversation and out of scope here.  If you'd like to discuss it further, I'll suggest adding an item to the ROS 2 weekly agenda.",
      "Based on discussion today, we move forward with this. Maybe the pattern gets extended to the node components - but this is a definitely useful start. Conditions for pimpl (mentioned in docstring comment on its implementation):\r\n* Left empty in Rolling, used only for backports\r\n* Left unallocated in Rolling, so no new allocation is performed",
      "Pulls: ros2/rclcpp#2228\nGist: https://gist.githubusercontent.com/emersonknapp/8942d3eb82c983a5829f6fbdad2e145e/raw/8b261ac93a516e824e6dfc1df08eab979bc8799a/ros2.repos\nBUILD args:  --packages-above-and-dependencies rclcpp\nTEST args:  --packages-above rclcpp\nROS Distro: rolling\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12366\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19139)](http://ci.ros2.org/job/ci_linux/19139/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13698)](http://ci.ros2.org/job/ci_linux-aarch64/13698/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19872)](http://ci.ros2.org/job/ci_windows/19872/)",
      "New CI after the rebase (so we can hopefully merge this):\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19331)](http://ci.ros2.org/job/ci_linux/19331/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13859)](http://ci.ros2.org/job/ci_linux-aarch64/13859/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20049)](http://ci.ros2.org/job/ci_windows/20049/)"
    ],
    "commit_messages": [
      "Add a pimpl inside rclcpp::Node for future distro backports (#2228)\n\n* Add a pimpl inside rclcpp::Node for future distro backports\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621747918912b45d36a7119",
    "number": 2227,
    "body": "The original motiviation to do this was a crash during teardown when using a newer version of gtest.  But while I was in here, I did a small overall cleanup, including:\r\n\r\n1.  Moving code closer to where it is actually used.\r\n2.  Getting rid of unused 'using' statements.\r\n3.  Adding in missing includes.\r\n4.  Properly tearing down and recreating the rclcpp context during test teardown (this fixed the actual bug).\r\n5.  Making class members private where possible.\r\n6.  Renaming class methods to our usual conventions.\r\n\r\nThis is the last remaining issue that is holding up https://github.com/ament/googletest/pull/21",
    "head_branch": "clalancette/minor-revamp-of-subscription-tests",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19026)](http://ci.ros2.org/job/ci_linux/19026/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13551)](http://ci.ros2.org/job/ci_linux-aarch64/13551/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19777)](http://ci.ros2.org/job/ci_windows/19777/)"
    ],
    "commit_messages": [
      "Revamp the test_subscription.cpp tests. (#2227)\n\nThe original motiviation to do this was a crash during\r\nteardown when using a newer version of gtest.  But while\r\nI was in here, I did a small overall cleanup, including:\r\n\r\n1.  Moving code closer to where it is actually used.\r\n2.  Getting rid of unused 'using' statements.\r\n3.  Adding in missing includes.\r\n4.  Properly tearing down and recreating the rclcpp\r\n    context during test teardown (this fixed the actual\r\n    bug).\r\n5.  Making class members private where possible.\r\n6.  Renaming class methods to our usual conventions.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747a18912b45d36a711a",
    "number": 2224,
    "body": "Part of ros2/ros2#1159\r\n\r\n<s>Depends on ros2/rcl#1052</s>\r\n\r\nLinked with https://github.com/ros2/system_tests/pull/520\r\n\r\nDefines and implements new node interface `TypeDescriptionsInterface`, which provides the `~/get_type_description` service from ros2/rcl#1052.\r\n\r\nUses parameter `start_type_description_service` to start the service - defaulting to true!\r\n\r\nThis will not be a trivial backport to Iron - I propose moving forward with this as the \"correct thing to build\", then the backport can dump most of it into `node.cpp` for Iron.",
    "head_branch": "emersonknapp/type_descriptions_interface",
    "is_a_fork": true,
    "comments": [
      "Pulls: ros2/rcl#1052, ros2/rclcpp#2224\nGist: https://gist.githubusercontent.com/emersonknapp/c4a4fc1d37b707ec959808ee6dd2d189/raw/f6081a66740b791e891c43d39ace0c33004c8312/ros2.repos\nBUILD args:  --packages-above-and-dependencies rcl rcl_action rclcpp rclcpp_lifecycle\nTEST args:  --packages-above rcl rcl_action rclcpp rclcpp_lifecycle\nROS Distro: rolling\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12306\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19047)](http://ci.ros2.org/job/ci_linux/19047/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13566)](http://ci.ros2.org/job/ci_linux-aarch64/13566/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19790)](http://ci.ros2.org/job/ci_windows/19790/)",
      "> Besides that, can you please explain the reasoning behind making this a Node interface?\r\n\r\nThis approach was suggested by @wjwwood who may be able to discuss with more detail/nuance/authority, but here's my understanding:\r\n\"Node interfaces\" could also be understood as \"node components\" as they are the architectural mechanism in `rclcpp` for composing several capabilities and APIs into the `Node`. This Type Description service is a new and self-contained capability that we want to attach to a node, so a new node interface is the way to go. It may get more methods later, such as interacting with the type cache, but with no immediate ask we won't design something ad hoc.",
      "@clalancette I've put up a new version with everything popped out of the pimpl, as suggested. Let me know what you thing. Note: it was necessary to expose the helper wrapper type more fully to support this",
      "Pulls: ros2/rcl#1052, ros2/rclcpp#2224\nGist: https://gist.githubusercontent.com/emersonknapp/e64c966d59d7e2081d4d296fa756a1e3/raw/f6081a66740b791e891c43d39ace0c33004c8312/ros2.repos\nBUILD args:  --packages-above-and-dependencies rcl rcl_action rclcpp rclcpp_lifecycle\nTEST args:  --packages-above rcl rcl_action rclcpp rclcpp_lifecycle\nROS Distro: rolling\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12316\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19059)](http://ci.ros2.org/job/ci_linux/19059/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13584)](http://ci.ros2.org/job/ci_linux-aarch64/13584/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19811)](http://ci.ros2.org/job/ci_windows/19811/)",
      "Pulls: ros2/rcl#1052, ros2/rclcpp#2224, ros2/system_tests#520\nGist: https://gist.githubusercontent.com/emersonknapp/b250eee074072eeb11c1a6d544866179/raw/e787e5a7cbeadb0ba5865e439578867d581b682d/ros2.repos\nBUILD args:  --packages-above-and-dependencies rcl rcl_action rclcpp rclcpp_lifecycle test_rclcpp\nTEST args:  --packages-above rcl rcl_action rclcpp rclcpp_lifecycle test_rclcpp\nROS Distro: rolling\nJob: ci_launcher\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12318\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19061)](http://ci.ros2.org/job/ci_linux/19061/)\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13587)](http://ci.ros2.org/job/ci_linux-aarch64/13587/)\n* [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13596)](https://ci.ros2.org/job/ci_linux-aarch64/13596/)\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19813)](http://ci.ros2.org/job/ci_windows/19813/)",
      "OK - I think it's a little awkward to expose the helpers, so I've re-hidden them with added comment",
      "Pulls: ros2/rcl#1052, ros2/rclcpp#2224, ros2/system_tests#520\r\nGist: https://gist.githubusercontent.com/emersonknapp/61666ed4bfef7aa7b2f349cd87122a42/raw/e787e5a7cbeadb0ba5865e439578867d581b682d/ros2.repos\r\nBUILD args:  --packages-above-and-dependencies rcl rcl_action rclcpp rclcpp_lifecycle test_rclcpp\r\nTEST args:  --packages-above rcl rcl_action rclcpp rclcpp_lifecycle test_rclcpp\r\nROS Distro: rolling\r\nJob: ci_launcher\r\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12324\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19071)](http://ci.ros2.org/job/ci_linux/19071/)\r\n  * [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19074)](https://ci.ros2.org/job/ci_linux/19074/)\r\n  * [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19076)](https://ci.ros2.org/job/ci_linux/19076/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13600)](http://ci.ros2.org/job/ci_linux-aarch64/13600/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19819)](http://ci.ros2.org/job/ci_windows/19819/)",
      "> Besides that, can you please explain the reasoning behind making this a Node interface?\r\n\r\n@emersonknapp summarized well, but I can add that when he and I were talking about it we first tried to put it into other components, and then it became clear after talking about it that it made the most sense as a separate component, much like how the time source has it's own component.",
      "RCL merged, now running against Rolling\r\n\r\nPulls: ros2/rclcpp#2224, ros2/system_tests#520\r\nGist: https://gist.githubusercontent.com/emersonknapp/b9846b6284a68dd8bca1ed8cfe794cda/raw/4093466b5841e4e38be559943d1e74e09f73cbe2/ros2.repos\r\nBUILD args:  --packages-above-and-dependencies rclcpp rclcpp_lifecycle test_rclcpp\r\nTEST args:  --packages-above rclcpp rclcpp_lifecycle test_rclcpp\r\nROS Distro: rolling\r\nJob: ci_launcher\r\nci_launcher ran: https://ci.ros2.org/job/ci_launcher/12339\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19094)](http://ci.ros2.org/job/ci_linux/19094/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13615)](http://ci.ros2.org/job/ci_linux-aarch64/13615/)\r\n  * [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13619)](https://ci.ros2.org/job/ci_linux-aarch64/13619/) \r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19834)](http://ci.ros2.org/job/ci_windows/19834/)\r\n"
    ],
    "commit_messages": [
      "Add new node interface TypeDescriptionsInterface to provide GetTypeDescription service (#2224)\n\n* TypeDescriptions interface with readonly param configuration\r\n\r\n* Add parameter descriptor, to make read only\r\n\r\n* example of spinning in thread for get_type_description service\r\n\r\n* Add a basic test for the new interface\r\n\r\n* Fix tests with new parameter\r\n\r\n* Add comments about builtin parameters\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621747b18912b45d36a711b",
    "number": 2223,
    "body": "This is an automatic backport of pull request #2219 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2219",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19017)](http://ci.ros2.org/job/ci_linux/19017/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13540)](http://ci.ros2.org/job/ci_linux-aarch64/13540/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19769)](http://ci.ros2.org/job/ci_windows/19769/)",
      "@clalancette can you do me a favor? i do not think we need a soak time for this one."
    ],
    "commit_messages": [
      "warning: comparison of integer expressions of different signedness (#2219) (#2223)\n\nhttps://github.com/ros2/rclcpp/pull/2167#issuecomment-1597197552\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit fe2e0e4c646545625ad9f82e929be651b3a5fd95)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747c18912b45d36a711c",
    "number": 2222,
    "body": "This is an automatic backport of pull request #2219 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2219",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19016)](http://ci.ros2.org/job/ci_linux/19016/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13539)](http://ci.ros2.org/job/ci_linux-aarch64/13539/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19768)](http://ci.ros2.org/job/ci_windows/19768/)",
      "https://ci.ros2.org/job/ci_windows/19768/testReport/projectroot.test/rclcpp/test_timers_manager/ is unrelated.",
      "CC: @clalancette "
    ],
    "commit_messages": [
      "warning: comparison of integer expressions of different signedness (#2219) (#2222)\n\nhttps://github.com/ros2/rclcpp/pull/2167#issuecomment-1597197552\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit fe2e0e4c646545625ad9f82e929be651b3a5fd95)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747d18912b45d36a711d",
    "number": 2219,
    "body": "address https://github.com/ros2/rclcpp/pull/2167#issuecomment-1597197552",
    "head_branch": "fujitatomoya/bugfix-20230620-rclcpp-warning-pr-2167",
    "is_a_fork": false,
    "comments": [
      "The related code was developed in https://github.com/ros2/rclcpp/pull/2164 and backport humble https://github.com/ros2/rclcpp/pull/2167 detected https://github.com/ros2/rclcpp/pull/2167#issuecomment-1597197552\r\n\r\n```bash\r\nIn file included from /tmp/ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:20:\r\n/tmp/ws/install_isolated/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h: In instantiation of ‚Äòtesting::AssertionResult testing::internal::CmpHelperEQ(const char*, const char*, const T1&, const T2&) [with T1 = unsigned int; T2 = int]‚Äô:\r\n/tmp/ws/install_isolated/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1554:23:   required from ‚Äòstatic testing::AssertionResult testing::internal::EqHelper::Compare(const char*, const char*, const T1&, const T2&) [with T1 = unsigned int; T2 = int; typename std::enable_if<((! std::is_integral<_Tp>::value) || (! std::is_pointer<_Dp>::value))>::type* <anonymous> = 0]‚Äô\r\n/tmp/ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:676:3:   required from ‚Äòvoid TestIntraprocessExecutors_testIntraprocessRetrigger_Test<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = rclcpp::executors::MultiThreadedExecutor]‚Äô\r\n/tmp/ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:654:1:   required from here\r\n/tmp/ws/install_isolated/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1527:11: warning: comparison of integer expressions of different signedness: ‚Äòconst unsigned int‚Äô and ‚Äòconst int‚Äô [-Wsign-compare]\r\n 1527 |   if (lhs == rhs) {\r\n      |       ~~~~^~~~~~\r\n/tmp/ws/install_isolated/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h: In instantiation of ‚Äòtesting::AssertionResult testing::internal::CmpHelperEQ(const char*, const char*, const T1&, const T2&) [with T1 = long unsigned int; T2 = int]‚Äô:\r\n/tmp/ws/install_isolated/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1554:23:   required from ‚Äòstatic testing::AssertionResult testing::internal::EqHelper::Compare(const char*, const char*, const T1&, const T2&) [with T1 = long unsigned int; T2 = int; typename std::enable_if<((! std::is_integral<_Tp>::value) || (! std::is_pointer<_Dp>::value))>::type* <anonymous> = 0]‚Äô\r\n/tmp/ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:697:3:   required from ‚Äòvoid TestIntraprocessExecutors_testIntraprocessRetrigger_Test<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = rclcpp::executors::MultiThreadedExecutor]‚Äô\r\n/tmp/ws/src/ros2/rclcpp/rclcpp/test/rclcpp/executors/test_executors.cpp:654:1:   required from here\r\n/tmp/ws/install_isolated/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1527:11: warning: comparison of integer expressions of different signedness: ‚Äòconst long unsigned int‚Äô and ‚Äòconst int‚Äô [-Wsign-compare]\r\n```\r\n\r\ni think it would be nicer to address this rolling then backporting to iron and humble.",
      "> This is really weird. We have both humble and rolling on the same underlying OS (Ubuntu 22.04), with the same code in place, and one of them has the warning and one does not.\r\n\r\nthat is what i though too. not sure who this can be detected by CI, cz i cannot reproduce this warning with humble source build.\r\ncould be related to https://github.com/ros2/rclcpp/pull/2121? and so https://github.com/ros2/rclcpp/pull/2167 generates the warning?\r\n\r\n> though I'll also say that we should change everywhere that deals with callback_count to use unsigned.\r\n\r\nmakes sense to me. will do that.",
      "> > \r\n> \r\n> that is what i though too. not sure who this can be detected by CI, cz i cannot reproduce this warning with humble source build.\r\n\r\nOh, I can reproduce the warning with humble locally.  But I cannot reproduce it with rolling, which is why I think this is super weird.\r\n\r\nRegardless, I'm fine with your change here (for both Rolling and Humble), so we can go forward and get this in and then backport it.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19012)](http://ci.ros2.org/job/ci_linux/19012/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13536)](http://ci.ros2.org/job/ci_linux-aarch64/13536/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19765)](http://ci.ros2.org/job/ci_windows/19765/)",
      "@Mergifyio backport to iron humble",
      "> backport to iron humble\n\n#### ‚ùå No backport have been created\n\n<details>\n\n* Backport to branch `to` failed\n\nGitHub error: ```Branch not found```\n* Backport to branch `iron` in progress\n* Backport to branch `humble` in progress\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport to iron humble\", \"conclusion\": \"failure\"}\n-*- Mergify Payload End -*-\n-->",
      "@Mergifyio backport iron humble",
      "> backport iron humble\n\n#### ‚úÖ Backports have been created\n\n<details>\n\n* [#2222 warning: comparison of integer expressions of different signedness (backport #2219)](https://github.com/ros2/rclcpp/pull/2222) has been created for branch `iron`\n* [#2223 warning: comparison of integer expressions of different signedness (backport #2219)](https://github.com/ros2/rclcpp/pull/2223) has been created for branch `humble`\n\n</details>\n\n\n<!---\nDO NOT EDIT\n-*- Mergify Payload -*-\n{\"command\": \"backport iron humble\", \"conclusion\": \"success\"}\n-*- Mergify Payload End -*-\n-->"
    ],
    "commit_messages": [
      "warning: comparison of integer expressions of different signedness (#2219)\n\n  https://github.com/ros2/rclcpp/pull/2167#issuecomment-1597197552\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747e18912b45d36a711e",
    "number": 2218,
    "body": "This simple code would hang forever:\r\n```\r\n  ExecutorType executor; // Any executor\r\n  auto executor_thread = std::thread([&](){ executor.spin();});\r\n  executor.cancel();\r\n  executor_thread.join();\r\n```\r\nIf `executor.cancel()` gets called before `executor.spin()`, cancel won't have any effect and the executor will keep spinning.\r\n\r\nIn this PR I add an extra bool to check if the executor was cancelled before blocking in `spin()`",
    "head_branch": "mauro/fix-cancel-executor",
    "is_a_fork": true,
    "comments": [
      "I'm not convinced by this approach.\r\nThe following code should result in the executor spinning\r\n```\r\nauto executor = std::make_shared<executor>();\r\nexecutor->cancel();\r\n.... do some stuff ...\r\nexecutor->spin(); // This should spin, the cancel that we called before should not affect it\r\n```\r\n\r\nThe problem that you describe is a race condition and I think that the already existing `executor->is_spinning()` method is the correct way to synchronize and avoid it.\r\n\r\n",
      "Makes sense, a `cancel()` call should only affect an spinning executor, so the user should make sure the executor is spinning before cancelling."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621747f18912b45d36a711f",
    "number": 2215,
    "body": "Related to https://github.com/ros2/ros2/issues/1253\r\n\r\nIt is not sane that a faulty client can crash our service Executor, as discussed in the referred issue, if the client is not setup properly, send_response may return RCL_RET_TIMEOUT, we should not throw an error in this case.",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "@kghost thank you for being patient on this.\r\n\r\nI will be checking the following and then start CI all together.\r\n\r\n- underlying tier 1 rmw implementation returns timeout when it detects the timeout? (unless, it will generate the exception)\r\n- `rclpy` counterpart PR against this `rclcpp`.",
      "> underlying tier 1 rmw implementation returns timeout when it detects the timeout? (unless, it will generate the exception)\r\n\r\nsee https://github.com/ros2/rcl/pull/1048#issuecomment-1613837733\r\n\r\n> rclpy counterpart PR against this rclcpp.\r\n\r\nsee https://github.com/ros2/rclpy/pull/1136",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19079)](http://ci.ros2.org/job/ci_linux/19079/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13606)](http://ci.ros2.org/job/ci_linux-aarch64/13606/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19825)](http://ci.ros2.org/job/ci_windows/19825/)",
      "I am experiencing the same kind of crash using the fastrtps RMW implementation with ros2 humble.\r\nHowever, the proposed patch does not avoid the crash, as the `RMW_RET_TIMEOUT` error code [returned by the fastrtps' `__rmw_send_response`](https://github.com/ros2/rmw_fastrtps/blob/humble/rmw_fastrtps_shared_cpp/src/rmw_response.cpp#L150) is changed to `RCL_RET_ERROR` in [`rcl_send_response`.](https://github.com/ros2/rcl/blob/humble/rcl/src/rcl/service.c#L315)\r\nThe same is done in rolling : https://github.com/ros2/rcl/blob/rolling/rcl/src/rcl/service.c#L403\r\n\r\nAm I missing somthing? or are there any other patches required for it to work?",
      "> Am I missing somthing? or are there any other patches required for it to work?\r\n\r\nYes, you also need https://github.com/ros2/rcl/pull/1048",
      "@kghost are you willing to work on this? see https://github.com/ros2/rclcpp/pull/2215#pullrequestreview-1516578021",
      "> @kghost are you willing to work on this? see https://github.com/ros2/rclcpp/pull/2215#pullrequestreview-1516578021\n\nno problem!",
      "@kghost thank you very much for the effort, can you address DCO error? see https://github.com/ros2/rclcpp/pull/2215/checks?check_run_id=14906339355",
      "@kghost this also need to be rebased on rolling, see https://ci.ros2.org/job/ci_linux/19079/console CI failed on building `rclcpp`.",
      "@fujitatomoya Yes, it is already rebased on rolling branch.",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19133)](http://ci.ros2.org/job/ci_linux/19133/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13693)](http://ci.ros2.org/job/ci_linux-aarch64/13693/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19869)](http://ci.ros2.org/job/ci_windows/19869/)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19156)](http://ci.ros2.org/job/ci_linux/19156/)\r\n\r\nwindows failure is unrelated.",
      "@clalancette This is ready to merge.",
      "Should changes in [`rclcpp/include/rclcpp/service.hpp`](https://github.com/ros2/rclcpp/pull/2215/files#diff-b8d1d4683b3d8d68d748a323b49d58eae6e699156197fc62a0785632f757b007) be also applied also here?:\r\n\r\nhttps://github.com/ros2/rclcpp/blob/c0d72c3ee0ac806379b49ed10cf17364a4bd443a/rclcpp_action/src/server.cpp#L340\r\nhttps://github.com/ros2/rclcpp/blob/c0d72c3ee0ac806379b49ed10cf17364a4bd443a/rclcpp_action/src/server.cpp#L482\r\nhttps://github.com/ros2/rclcpp/blob/c0d72c3ee0ac806379b49ed10cf17364a4bd443a/rclcpp_action/src/server.cpp#L539\r\nhttps://github.com/ros2/rclcpp/blob/c0d72c3ee0ac806379b49ed10cf17364a4bd443a/rclcpp_action/src/server.cpp#L672\r\n\r\nRelated to this topic, we're in conversations to set the timeout in DDS from an XML, so we can increase the timeout before returning `RCL_RET_TIMEOUT`. If the client is discovered before it, it will get the response from the service. Otherwise, it'll hang forever waiting a response (at least, that happens with actions). \r\n",
      "> I think that @mauropasse makes a good point and we should do the same thing for the action side of things as well. Once that is fixed I'm happy to approve this PR.\r\n\r\n@clalancette @mauropasse can we manage this with another issue before adding the implementation in this PR? i would like to check if that happens in detail.",
      "> > I think that @mauropasse makes a good point and we should do the same thing for the action side of things as well. Once that is fixed I'm happy to approve this PR.\r\n> \r\n> @clalancette @mauropasse can we manage this with another issue before adding the implementation in this PR? i would like to check if that happens in detail.\r\n\r\nhttps://github.com/ros2/ros2/issues/1462",
      "@clalancette @mauropasse friendly ping.",
      "> @fujitatomoya : i would like to check if that happens in detail.\r\n\r\nWhat do you mean with \"that happens in detail\"?\r\n\r\nI know it happens with actions since that's where we observed this issue first, and come with the temporary solution of increasing the timeout.\r\n\r\nWith regards of applying the action side of these fixes in a different PR, I'm OK with that. Maybe adding tests for these situations also.",
      "@mauropasse i was not sure if this problem can be actually reproducible with actions, thanks for the information.\r\n\r\n> With regards of applying the action side of these fixes in a different PR, I'm OK with that\r\n\r\nüëç @clalancette what do you think?",
      "> üëç @clalancette what do you think?\r\n\r\nYeah, that's fine.  Let's keep this one just about the service server, and we can do the follow-up with https://github.com/ros2/ros2/issues/1462 for action servers.\r\n\r\nI'll go ahead and re-review this.",
      "@kghost since you are not responding, i did create an another PR for this to proceed. I keep the all commits that you made. it would be appreciated if you can review it. see https://github.com/ros2/rclcpp/pull/2276",
      "@clalancette @kghost i will go ahead to close this, instead can we proceed with https://github.com/ros2/rclcpp/pull/2276?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748018912b45d36a7120",
    "number": 2214,
    "body": "Addresses: https://github.com/ros2/rclcpp/issues/2213\r\nDepends on: https://github.com/ros2/rcl_interfaces/pull/157\r\n[Demo Code](https://github.com/tgroechel/lifecycle_prac/tree/defer_cancel_user_transtion_callbacks)\r\n\r\nLifecycle re-architecture dependency: https://github.com/ros2/rclcpp/issues/2212 /  https://github.com/ros2/rclcpp/pull/2211\r\n\r\nThis is a proposed first-stage solution:\r\n- maintains backward compatibility (the core reason for not directly converting to a ROS 2 Action)\r\n- attempts to structure the code to allow for possible future transition to using a [ROS 2 Action](https://docs.ros.org/en/foxy/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.html) for `ChangeState`\r\n\r\n\r\n### Example Usage\r\n> Note code is collapsed / expandable so this post is more readable\r\n\r\n1. Simple usage by spawning a thread, note the `ChangeStateHandler` is similar to a `GoalHandle`\r\n2. Simple parameter request that works a lot like a coroutine (\"throws\" a future callback onto the executor thus it is the executors job to receive / call the future callback)\r\n3. Cancel example with polling. [Demo Code](https://github.com/tgroechel/lifecycle_prac/tree/defer_cancel_user_transtion_callbacks), [Demo video](https://github.com/tgroechel/lifecycle_prac/assets/15292506/691ae312-824a-48fb-a08c-1d4c04bf3225)\r\n4. BulkRequester: a wrapper to help with a set of async request (e.g., parameter requests) that can monitor for cancels.\r\n\r\n<details>\r\n\r\n<summary>Expand example 1 code</summary>\r\n\r\n```cpp\r\nvoid on_activate_async(\r\n     const rclcpp_lifecycle::State &state,\r\n     std::shared_ptr<rclcpp_lifecycle::ChangeStateHandler> change_state_hdl) {\r\n   std::thread t(&LifecycleTalker::defer_on_activate_work, this,change_state_hdl);\r\n   t.detach();\r\n} // Off Executor\r\n\r\nvoid defer_on_activate_work(\r\n   std::shared_ptr<rclcpp_lifecycle::ChangeStateHandler> change_state_hdl) {\r\n   /*DO WORK*/\r\n   LifecycleNode::on_activate(state); // activate ManagedEntities\r\n   change_state_hdl->send_callback_resp(CallbackReturn::SUCCESS);\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Expand example 2 code</summary>\r\n\r\n```cpp\r\nvoid on_configure_async(\r\n   const rclcpp_lifecycle::State &,\r\n   std::shared_ptr<rclcpp_lifecycle::ChangeStateHandler> change_state_hdl) {\r\n      \r\n   // Callback for future response of getting a parameter\r\n   auto response_received_callback =\r\n      [logger = this->get_logger(), change_state_hdl](ParamSharedFuture future) {\r\n         if (change_state_hdl->is_executing()) {\r\n           m_param1 = future.get();\r\n           change_state_hdl->send_callback_resp(CallbackReturn::SUCCESS);\r\n         }\r\n      };\r\n\r\n   // Sending the request and attaching the callback\r\n   auto request = std::make_shared<rcl_interfaces::srv::GetParameters::Request>();\r\n   request->names.push_back(\"param1\");\r\n   client_->async_send_request(request, std::move(response_received_callback));\r\n} // Off Executor\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Expand example 3 code</summary>\r\n\r\n```cpp\r\nvoid on_configure_async(\r\n   const rclcpp_lifecycle::State &,\r\n   std::shared_ptr<rclcpp_lifecycle::ChangeStateHandler> change_state_hdl) {\r\n   // Cancel monitoring\r\n   transition_cancel_monitoring_timer_ = create_wall_timer(\r\n      std::chrono::milliseconds{100}, [this, change_state_hdl]() {\r\n         if (!change_state_hdl->is_executing()) {\r\n           transition_cancel_monitoring_timer_.reset();\r\n           return;\r\n         } else if (change_state_hdl->is_canceling()) { /*handle cancel*/\r\n           size_t num_pruned_req = client_->prune_pending_requests();\r\n           change_state_hdl->handle_canceled(true);\r\n           transition_cancel_monitoring_timer_.reset();\r\n         }\r\n      });\r\n\r\n   // Callback for future response of getting a parameter\r\n   auto response_received_callback =\r\n      [logger = this->get_logger(), change_state_hdl](ParamSharedFuture future) {\r\n         if (change_state_hdl->is_executing()) {\r\n           m_param1 = future.get();\r\n           change_state_hdl->send_callback_resp(CallbackReturn::SUCCESS);\r\n         }\r\n      };\r\n\r\n   // Sending the request and attaching the callback\r\n   auto request = std::make_shared<rcl_interfaces::srv::GetParameters::Request>();\r\n   request->names.push_back(\"param1\");\r\n   client_->async_send_request(request, std::move(response_received_callback));\r\n} // Off executor\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>Expand example 4 code</summary>\r\n\r\n```cpp\r\nvoid on_configure_async(\r\n   const rclcpp_lifecycle::State &,\r\n   std::shared_ptr<rclcpp_lifecycle::ChangeStateHandler> change_state_hdl){\r\n\r\n   auto configure_param_req_done_cb = \r\n      [this, change_state_hdl](vector<AsyncReq> failed_requests){\r\n         if(failed_requests.empty()){\r\n           change_state_hdl->send_callback_resp(CallbackReturn::SUCCESS);\r\n         }\r\n         else if(change_state_hdl->is_cancelling()){\r\n         /*Clean up failed requests*/\r\n           change_state_hdl->handled_cancel(true);\r\n         }\r\n         else {\r\n         /*Clean up failed requests*/\r\n           change_state_hdl->send_callback_resp(CallbackReturn::FAILURE);\r\n         }\r\n      };\r\n   m_bulk_async_requester.register_change_state_hdl(change_state_hdl);\r\n   m_bulk_async_requester.register_completed_cb(std::move(configure_param_req_done_cb));\r\n   m_bulk_async_requester.add_param_req(\"t0/turtle_node\", \"use_sim_time\", m_t0_uses_sim_time);\r\n   m_bulk_async_requester.add_param_req(\"t1/turtle_node\", \"use_sim_time\", m_t1_uses_sim_time);\r\n   /*...*/\r\n   m_bulk_async_requester.send_requests();\r\n}\r\n```\r\n\r\n</details>\r\n\r\n> Additional details found within expandable sections below\r\n\r\n<details>\r\n\r\n<summary>Expand</summary>\r\n\r\n## ChangeStateHandler\r\nAn async transition follows the same flow as before but now passes a `ChangeState` handler that:\r\n- allows response deferral\r\n- allows for handling a cancel request\r\n\r\nThis is very similar to a `GoalHandler` within a ROS 2 Action. However, we want to maintain backward compatibility. \r\n\r\n### Async transition\r\n> Note the expansion blocks for images\r\n<details>\r\n\r\n<summary>Control flow of an async transition</summary>\r\n\r\n![image-20230531-133549](https://github.com/tgroechel/rclcpp/assets/15292506/99537ce2-7d3f-4bd4-aa6b-2c05e5220efd)\r\n\r\n</details>\r\n\r\nThe above image outlines the process. Only 1 request can be processed at a given time, all other requests are rejected. The `ChangeStateHandler` allows for the user to send a response whenever they are done with the transition (accomplished by passing a newly created `shared_ptr<ChangeStateHandler>` to the user).\r\n\r\n\r\n### Cancelling a transition\r\n\r\n<details>\r\n\r\n<summary>Reference for `Callback::FAILURE` paths of lifecycle nodes</summary>\r\n\r\n![theory_lc_state_machine](https://github.com/ros2/rclcpp/assets/15292506/a596df13-be54-491b-9ed3-32ee9cfd2c5a)\r\n\r\n(Note `RAISE_ERROR` is not currently merged having an open set of issues described here: https://github.com/ros2/design/pull/283#issuecomment-739729507)\r\n\r\n</details>\r\n\r\nGiven that the transition is async, it would be ideal if it could also have the potential to be cancelled. The goal would to attempt to recover the node into a valid primary state. With this:\r\n- only the user can handle a cancel safely so the `ChangeStateHandler` is \"marked\" as cancelled and waits until the user marks the cancel as completed\r\n- if handled successfully, the state follows a `CallbackReturn::Failure` path. This is desired to\r\n  - recover, mostly, to the last primary state (see reference diagram above)\r\n  - maintain `state_machine` validity/backward compatibility\r\n  - reuse the same code as `change_state`\r\n\r\n<details>\r\n\r\n<summary>Control flow of an async transition</summary>\r\n\r\n![cancel_no_timeout](https://github.com/tgroechel/rclcpp/assets/15292506/5b284a3f-5f00-4372-9e23-41d283499043)\r\n\r\n</details>\r\n\r\nThe example flow of a cancelled transition. Note this is all possible even on a `SingleThreadedExecutor` as the timer acts as a monitor for the transition. Note the rejection and failure criteria / reasons are passed back to the client within the `CancelTransition.srv`.\r\n\r\n<\\details>\r\n",
    "head_branch": "lc_defer_and_cancel_transitions",
    "is_a_fork": true,
    "comments": [
      "This issue has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/deferrable-canceleable-lifecycle-transitions/32318/1\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748118912b45d36a7121",
    "number": 2211,
    "body": "Addresses: https://github.com/ros2/rclcpp/issues/2212\r\nDepends on this: https://github.com/ros2/rclcpp/pull/2214\r\n",
    "head_branch": "lc_separation_of_concerns",
    "is_a_fork": true,
    "comments": [
      "This issue has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/deferrable-canceleable-lifecycle-transitions/32318/1\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748318912b45d36a7122",
    "number": 2210,
    "body": "This is an automatic backport of pull request #2040 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2040",
    "is_a_fork": false,
    "comments": [
      "Requires the backport for\r\n\r\nhttps://github.com/ros2/rcl/pull/1021\r\n\r\nTo be merged before this is merged!!",
      "Depends on https://github.com/ros2/rcl/pull/1078 (backports ros2/rcl#1021 to humble)",
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=18943)](http://ci.ros2.org/job/ci_linux/18943/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13474)](http://ci.ros2.org/job/ci_linux-aarch64/13474/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19693)](http://ci.ros2.org/job/ci_windows/19693/)",
      "@fujitatomoya @methylDragon friendly ping for merge at earliest convenience"
    ],
    "commit_messages": [
      "Implement validity checks for rclcpp::Clock (#2040) (#2210)\n\n(cherry picked from commit c091fe1a4538dbb370a31d0e590bd44ae4194483)\r\n\r\nCo-authored-by: methylDragon <methylDragon@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621748418912b45d36a7123",
    "number": 2209,
    "body": "to extend the type support for service\r\nrequired by https://github.com/ros2/rclcpp/pull/2358 \r\n",
    "head_branch": "topic-rosidl-typesupport-helper",
    "is_a_fork": true,
    "comments": [
      "@iuhilnehc-ynos just checking, this one is required to https://github.com/ros2/rosbag2/pull/1481? right?",
      "> @iuhilnehc-ynos just checking, this one is required to [ros2/rosbag2#1481](https://github.com/ros2/rosbag2/pull/1481)? right?\r\n\r\nYes, but not necessary. After checking, I think `rosbag2_cpp` can update its `get_typesupport_handle` to support getting `rosidl_service_type_support_t`. I mean this PR should not block https://github.com/ros2/rosbag2/pull/1481.",
      "@iuhilnehc-ynos @fujitatomoya \r\n\r\n> After checking, I think rosbag2_cpp can update its get_typesupport_handle to support getting rosidl_service_type_support_t. I mean this PR should not block https://github.com/ros2/rosbag2/pull/1481.\r\n\r\nYes. \r\nBut https://github.com/ros2/rosbag2/pull/1481 depended on rclcpp::GenericClient which used updated get_typesupport_handle() (Refer to https://github.com/Barry-Xu-2018/rclcpp/tree/review/topic-generic-client-support). ",
      "Got it.\r\n\r\nI think it's better to create a PR for https://github.com/Barry-Xu-2018/rclcpp/tree/review/topic-generic-client-support.\r\n\r\nNOTE: I update the comment https://github.com/ros2/rclcpp/pull/2209#issue-1751773675",
      "@iuhilnehc-ynos \r\n\r\n> I think it's better to create a PR for https://github.com/Barry-Xu-2018/rclcpp/tree/review/topic-generic-client-support.\r\n\r\nYes. I created a draft PR #2358. \r\nAfter this PR is merged, I will rebase that PR and remove draft label.   ",
      "CI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19735)](http://ci.ros2.org/job/ci_linux/19735/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14239)](http://ci.ros2.org/job/ci_linux-aarch64/14239/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20460)](http://ci.ros2.org/job/ci_windows/20460/)",
      "@fujitatomoya @clalancette @wjwwood \r\n\r\nCould you help me reivew this PR? Suggestions are welcome.",
      "@clalancette thanks and understood.\r\n\r\nFull CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=19929)](http://ci.ros2.org/job/ci_linux/19929/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=14404)](http://ci.ros2.org/job/ci_linux-aarch64/14404/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=20636)](http://ci.ros2.org/job/ci_windows/20636/)",
      "@iuhilnehc-ynos @fujitatomoya Would you mind adding a release note to http://docs.ros.org/en/rolling/Releases/Release-Jazzy-Jalisco.html about this deprecation?  Since it is an implementation detail, I don't think it will affect many users, but it is still good to have a note about it.",
      "@clalancette i can do that. i am gonna get back to you with PR.",
      "> @clalancette i can do that. i am gonna get back to you with PR.\r\n\r\nThank you, it is appreciated."
    ],
    "commit_messages": [
      "make type support helper supported for service (#2209)\n\n* make type support helper supported for service and action as well\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* not to use template and only add the necessary service type currently\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add deprecated cycle for `get_typesupport_handle`\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621748518912b45d36a7124",
    "number": 2208,
    "body": null,
    "head_branch": "clalancette/fix-receive-misspelling",
    "is_a_fork": false,
    "comments": [
      "CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=18902)](http://ci.ros2.org/job/ci_linux/18902/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13437)](http://ci.ros2.org/job/ci_linux-aarch64/13437/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19659)](http://ci.ros2.org/job/ci_windows/19659/)"
    ],
    "commit_messages": [
      "Fix up misspellings of \"receive\". (#2208)\n\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748618912b45d36a7125",
    "number": 2206,
    "body": "This test has had recent flakiness in CI as discussed here: \r\nhttps://github.com/ros2/rclcpp/pull/2187#issuecomment-1560543114\r\n\r\nIt also seems to have a related issue in the rclcpp::Waitset implementation: https://github.com/ros2/rclcpp/pull/2142\r\n\r\nI spent quite a bit of time trying to determine what is causing the test to flake, without much success.  I additionally couldn't conclude if it is an issue with the _test implementation_ or if it is something in our implementation.\r\n\r\nAfter discussion with @clalancette and @alsora, I think that the best way forward for now is to remove this test, and rethink our approach for what we are testing here.\r\n\r\nTrack the re-addition of this test (or a rewrite): https://github.com/ros2/rclcpp/issues/2207",
    "head_branch": "mjcarroll/remove_stress_test",
    "is_a_fork": false,
    "comments": [
      "\r\n```\r\nbuild --packages-up-to rclcpp\r\ntest --packages-select rclcpp\r\n```\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=18885)](http://ci.ros2.org/job/ci_linux/18885/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=13421)](http://ci.ros2.org/job/ci_linux-aarch64/13421/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=19642)](http://ci.ros2.org/job/ci_windows/19642/)"
    ],
    "commit_messages": [
      "Remove flaky stressAddRemoveNode test (#2206)\n\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748718912b45d36a7126",
    "number": 2205,
    "body": "This is a prototype implementation of RCLCPP for discussion about the thread configuration feature to receive and apply a set of scheduling parameters for the threads controlled by the ROS 2 executor.\r\n\r\nOur basic idea is as below.\r\n 1. Implement a new class rclcpp::thread and modify rclcpp to use it. This class has the same function set as the std::thread but also additional features to control its thread attributions.\r\n 2. Modify the rcl layer to receive a set of scheduling parameters. The parameters are described in YAML format and passed via command line parameters, environment variables, or files.\r\n 3. the rclcpp reads the parameters from rcl and applies them to each thread in the thread pool.\r\n\r\nThere have been some discussions about this pull request, as below. \r\n[ROS Discourse]\r\nhttps://discourse.ros.org/t/adding-thread-attributes-configuration-in-ros-2-framework/30701 \r\n\r\n[ROS 2 Real-Time Working Group]\r\nhttps://github.com/ros-realtime/ros-realtime.github.io/issues/18",
    "head_branch": "origin/sched_param_control_for_osrf",
    "is_a_fork": true,
    "comments": [
      "This pull request has been mentioned on **ROS Discourse**. There might be relevant details there:\n\nhttps://discourse.ros.org/t/adding-thread-attributes-configuration-in-ros-2-framework/30701/2\n",
      "https://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/902/\r\nThis error was caused by the dependency on the update included in the other pull request for rcl below.\r\nhttps://github.com/ros2/rcl/pull/1075\r\n",
      "This is a great feature, but I wonder if it should go somewhere else, e.g. rcpputils.\r\nin particular all the stuff that is OS-dependent.",
      "> This is a great feature, but I wonder if it should go somewhere else, e.g. rcpputils.\r\n\r\nAgree on both counts.  `rcpputils` seems like an ideal candidate here.",
      "@alsora, @mjcarroll \r\nThanks for your comments.\r\n\r\nI would like to confirm one thing below to reflect your point about this pull request.\r\n\r\n[Item to be confirmed]\r\nIs it acceptable in terms of the design aspect of ~~rclcpp~~rcpputils to add an additional package dependency on the rcl package?\r\n\r\n[Background]\r\nIn the pull request, the thread control code depends on the data structure (e.g. rcl_thread_attr_t) newly added to the rcl package in the pull request below. \r\n\r\nhttps://github.com/ros2/rcl/pull/1075\r\n\r\nOur team is concerned that if the package dependency of ~~rclcpp~~rcpputils cannot be changed due to its design policy, we will have to move the data structure to rcutils as you point out for this pull request.",
      "> Is it acceptable in terms of the design aspect of rclcpp to add an additional package dependency on the rcl package?\r\n\r\n`rclcpp` already depends (quite heavily) on `rcl`: https://github.com/ros2/rclcpp/blob/f8072f2fa265000a2a1be8f3dbe7e04d9dfb1c91/rclcpp/package.xml#L37",
      "> > Is it acceptable in terms of the design aspect of rclcpp to add an additional package dependency on the rcl package?\r\n> \r\n> `rclcpp` already depends (quite heavily) on `rcl`:\r\n> \r\n> https://github.com/ros2/rclcpp/blob/f8072f2fa265000a2a1be8f3dbe7e04d9dfb1c91/rclcpp/package.xml#L37\r\n\r\nThanks for your pointing out. And sorry for my misspelling.\r\n\r\nI didn't mean rclcpp, but rcpputils, and I modified the comment above. \r\n",
      "I think that part of the `rcl` PR (e.g. the new data structure) can go to the `rcutils` library (this is the C equivalent of `rccputils`",
      "> I didn't mean rclcpp, but rcpputils, and I modified the comment above.\r\n\r\nThat's fine, `rclcpp` already depends on `rcpputils` as well: https://github.com/ros2/rclcpp/blob/dab9c8acdc8bc79808255d27d36036c5f0f78e6b/rclcpp/package.xml#L39",
      "`rcpputils`, however, cannot depend on `rcl`.",
      "As the other said, I think this does not belong in `rcl` or `rclcpp` as it is not really ROS related, and ideally it would exist completely in user space, i.e. above `rclcpp`. If it needs to influence how `rclcpp` creates threads, then we can change `rclcpp` so that's possible, but not by adding this directly into it.\r\n\r\nAdding things to help implement this in `rcutils` or `rcpputils` is fine, but only if the things you're adding are truly reusable in other situations, otherwise it should go in some other package that's focused on this use case.",
      "Thanks for your suggestion.\r\n \r\n> Adding things to help implement this in `rcutils` or `rcpputils` is fine, but only if the things you're adding are truly reusable in other situations, otherwise it should go in some other package that's focused on this use case.\r\n\r\nAs you mentioned above, I've moved the proposed features from rcl and rclcpp to rcutils and rcpputils, respectively.\r\nAnd our current implementation includes some incomplete code for the Windows platform. So, I will soon remove the code so as to make the rclcpp::thread act the same as the original std::thread. \r\n",
      "@JanStaschulat  \r\n>What is your intention to assign different thread parameters (e.g. priority, core-affinity) to different threads?\r\n>Could you give an example how you intend to use the Multi-Threaded Executor with different thread priorities in your use-case?\r\n\r\nThere are some use cases assigning each thread to specific cores to limit the CPU usage of a particular node (e.g., a node should run on energy-efficient cores). But, as you mentioned, setting different priorities and scheduling policies for the threads is redundant and meaningless.\r\nSo, what if we modify the current modification to reject such a setting when it has multiple priorities or just punch out a warning message. **(Q1)**\r\n\r\n> It is also necessary to define a mapping of callbacks (of subscriptions, timers, services, etc.) to a particular thread configuration (e.g. priority).\r\n\r\nI agree that there are some cases like you mentioned. But still, I'm not sure if it is enough or not because there seem to be cases we should assign priorities for the event chain, not an event. I'd like to discuss this topic in the other thread.\r\n\r\n> create a thread outside ROS 2 and then let the Single-Threaded Executor run inside it.\r\n\r\nI agree that there might be cases that require such a style. On the other hand, there seem to be some users who want to delegate such a thread creation to the executor.\r\nAnd I understand the opinion of @alsora below that the executor must not alter the currently running threads and should create the threads it will use internally.\r\n\r\n> We should not have executors modify the attributes of the thread that they are running into. If users want to run a single-threaded executor in a thread with specific attributes, they can easily do it themselves, rather than having the executor change things under their feet.\r\n\r\nSo,  what if we modified the implementation to create all the thread(s) the executor uses only when there are thread attributes passed to rcl, or the user application constructs the executor with thread attributes as a parameter, as I mentioned below?  **(Q2)**\r\n\r\n@alsora \r\n> We shouldn't restrict to a single thread attribute per ROS context and the two concepts shouldn't be tied together.\r\n\r\nI could not understand what you meant to say above. Did you mean that we could have multiple executors per process, so we have to have multiple thread configuration sets for such cases? **(Q3)**\r\n\r\n> I would recommend to have all classes that deal with threads to take a rcutils_thread_attrs_t as input in the constructor\r\n\r\nI agree with you. So, what if we modify the single/multi-thread executor to accept the thread attributes (rcutils_thread_attrs_t) and use it to set each thread attribution? **(Q4)** \r\nThis is useful when we have multiple executors per process because we can create an application to get the global thread parameters for the process via the rcl_context_get_thread_attrs() and divide it to each executor.\r\nOn the other hand, it is usual that we have only one executor for the process. So, I want to have the single/thread executors get the thread attributes via rcl_context_get_thread_attrs() as the current implementation in the PR.\r\nThis option is useful because we can use the thread attribute configuration infrastructure with the existing executor's usage, and we can also apply the infrastructure for the multiple executor case.\r\n\r\nIncidentally, I'm going to implement the parameter passing mechanism above by modifying the ExecutorOption to have thread attributes configuration as below and also add a parameter overwriting method to set arbitrary thread attributes like NodeOptions.\r\n````\r\n// rclcpp/rclcpp/include/rclcpp/executor_options.hpp\r\nnamespace rclcpp\r\n{\r\n/// Options to be passed to the executor constructor.\r\nstruct ExecutorOptions\r\n{\r\n ...(snipped)...\r\n rclcpp::memory_strategy::MemoryStrategy::SharedPtr memory_strategy;\r\n rclcpp::Context::SharedPtr context;\r\n size_t max_conditions;\r\n std::vector<rcpputils::Thread::Attribute> thread_attrs; // <-Added \r\n};\r\n````",
      "TL;DR;\r\nIMO the ROS library should provide the tools (a thread attributes class) and the way for using them (constructors take thread attributes as argument), but it should try to not make assumptions on how people are going to use those, which inevitably penalize whoever wants to do things differently (e.g. let people create their threads, decide how to pass the thread attribute class to each executor and so on).\r\n\r\nMy thoughts on Q1/Q2.\r\nThe multi-threaded executor is IMO a quick/convenient utility, but it's far from ideal if someone is seriously interested about performance (there's several performance analysis that show how a multithreaded executor with N threads is often less efficient than N single-threaded executors).\r\nIf someone needs to do core-pinning or other \"advanced\" optimizations, IMO they would be better not using the multi-threaded executor and handle individual threads and callback groups on their own.\r\n\r\n> > create a thread outside ROS 2 and then let the Single-Threaded Executor run inside it.\r\n\r\n> I agree that there might be cases that require such a style. On the other hand, there seem to be some users who want to delegate such a thread creation to the executor.\r\n\r\nit's the first time I hear about a real need for this use-case (people really want to have ROS create threads under their feet, when they could just to it with a single line of code? If they know what a thread is and they also have interest in configuring it, then I'm sure they would be happy to have full control over it). Moreover, I would rather have an utility that creates a thread with an executor for you, rather than adding a lot of complexity to the executor class itself.\r\nAnd YES, I really mean a lot of complexity: handling exceptions thrown by user callbacks (could spin exit with the thread still running?), avoiding undefined behavior during destruction of the executor (can I safely destroy or is the thread running?), thread-safety, etc all become a lot harder if the executor class is internally creating a thread. We are facing this exact issue with the events-executor, which creates an additional thread internally. So I STRONGLY recommend to not make this change in the single-threaded executor, where it's absolutely not needed.\r\n\r\n> Did you mean that we could have multiple executors per process, so we have to have multiple thread configuration sets for such cases? (Q3)\r\n\r\nYes, having multiple nodes and executor per process is actually a common usage and it's encouraged by the presence of ROS 2 components.\r\n\r\n> So, what if we modify the single/multi-thread executor to accept the thread attributes (rcutils_thread_attrs_t) and use it to set each thread attribution? (Q4)\r\n\r\nYes, sounds good, but with some caveats.\r\nI don't see the point of having a \"global\" thread configuration, accessible via `rcl_context_get_thread_attrs()` or similar APIs.\r\nThis is usable only if you have a single thread in your process (which I would argue could be common for toy examples, but very unreasonable in a real C++ robotics application).\r\nIf you get a `std::vector<rcpputils::Thread::Attribute> thread_attrs` how are you going to know which config should be used for which thread?\r\nIMO the action of (quote) \"dividing attributes to each executors\" is something that really depends on the specifics of the application and it's not going to be useful to try to enforce a common pattern here (e.g. in one application I may want to use a map where each key is a thread name and each value is a thread configuration; in another I may have a special convention for which I have 10 threads and only 2 configurations: the first used by 5 and the second used by the other 5; all this to show that there may be countless of approaches to handle this)\r\n\r\nSo, I would say that we could expand the executor options with the new argument, but this should be a single value (not a vector/list/map). If the executor is going to create threads internally, then it's going to use this attribute for all its internal threads.\r\nThis means that multi-threaded executor and events-executor are going to use it, but the argument would be unused for single-threaded executor.",
      "Hi @smorita-esol, what's the current status of this PR?",
      "This PR is based on the other PRs and REP, which are still discussed in the real-time Working group. Particularly, the [REP-2017](https://github.com/ros-infrastructure/rep/pull/385) is important to be accepted before the related PRs below get reviewed and merged.\r\n\r\nhttps://github.com/ros2/rcl/pull/1075\r\nhttps://github.com/ros2/rcutils/pull/424\r\n\r\nWhile waiting for the acceptance, we might have to discuss the modification of the language binding layer (rclcpp) and/or create another REP related to this and rcpputils PR below.\r\n\r\nhttps://github.com/ros2/rcpputils/pull/179\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748818912b45d36a7127",
    "number": 2204,
    "body": "A fixed, rolling oriented version of https://github.com/ros2/rclcpp/pull/2200\r\n",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [
      "Note this PR is with humble in mind and i believe that some missing files in rolling may be critical as i've noticed a lot of issues when installing humble on arch and had to solve a lot of them by hand "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748918912b45d36a7128",
    "number": 2200,
    "body": "On Arch Linux the build was failing because some includes were missing this should fix the problem",
    "head_branch": "humble",
    "is_a_fork": true,
    "comments": [
      "Added a sign message",
      "@Imeguras can you redirect the PR towards the `rolling` branch? Then changes can be backported to old releases",
      "I redirected it, however i havent tested it i will try to do so now",
      "@alsora you meant chaging the base branch? or do you want me to go to rolling and then do the changes? \r\n",
      "rolling back as some conflicts appeared",
      "@Imeguras i changed the base target branch to `rolling`, there are many conflicts come up. can you check and rebase your branch based on `rolling`?",
      "Since fixing the conflict would probably do more harm than good i've decided to create a new PR to address the issue"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748a18912b45d36a7129",
    "number": 2198,
    "body": "Please see https://github.com/ament/ament_lint/blob/271f9bd8e8504309707101850be16caae6471d02/ament_cpplint/ament_cpplint/cpplint.py#L515,\r\n\r\nand https://github.com/ros2/rclcpp/blob/72c05ecee023b73f8bd687349c879d1d86df9f9e/rclcpp/include/rclcpp/any_service_callback.hpp#L18 has no `NO_LINT`.",
    "head_branch": "topic-remove-nolint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove nolint since ament_cpplint updated for the c++17 header (#2198)\n\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748c18912b45d36a712a",
    "number": 2197,
    "body": "This is a Pull Request meant to help issue #1699 by creating a new method called `take_loaned_message` to allow the user the ability to zero-copy passing of loaned_message. There currently wasn't many other options other than those described in the original issue, so this is a good start. I assumed that the solution will be to make a wrapper around the `rcl_take_loaned_message` function, to provide rclcpp the ability to handle these, and allowing a user to pass a loaned_message via reference or pointer.",
    "head_branch": "loaned_method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748d18912b45d36a712b",
    "number": 2195,
    "body": null,
    "head_branch": "emersonknapp/dynamic-serialized-sub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748e18912b45d36a712c",
    "number": 2194,
    "body": "This can be used to make sure that a timer is canceled before being registered with a node, avoiding the risk of race conditions if an executor tried to immediately trigger it\r\n\r\nConsider a situation where a user creates a timer but wants to activate it only at a later moment.\r\n\r\n```\r\nauto my_executor = std::make_shared<SingleThreadedExecutor>();\r\nstd::thread spin_thread([my_executor]() {\r\n    my_executor->spin();\r\n});\r\nmy_executor->add_node(my_node);\r\nauto timer = rclcpp::create_timer(my_node, ....);\r\ntimer->cancel();\r\n```\r\n\r\nAs soon as the timer object is created, the `rclcpp::create_timer` function would add it to the node timers interface, which would result in notifying the executor about this new entity.\r\nIn case of thread starvation and/or race conditions, the executor may try to trigger the timer before it has been cancelled.\r\n\r\nThis could result in problems or crashes if the users were expecting that timer to not be called at that time.\r\n\r\nThis PR adds a boolean flag to the `rclcpp::create_timer` functions in order to cancel the timer in a safe way before adding it to the node timers interface.",
    "head_branch": "asoragna/start_canceled_timer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621748f18912b45d36a712d",
    "number": 2193,
    "body": "This pull request is directly linked to issue #2073 which discusses the volubility of the the goal id in the async_send_goal. So far the thread has come to the conclusion that well-formed uuids should be implemented in accordance to [RFC 4122](https://www.ietf.org/rfc/rfc4122.txt) which may have been solved in pull request #1999, by converting to the appropriate string. Otherwise we must follow a representation of bit shifting seen in many [examples](https://www.cryptosys.net/pki/Uuid.c.html).\r\n\r\nSince the RFC issue may have already been addressed to formulate valuable UUIDs at version 4, I then added an overloaded function of `async_send_goal` which allows the user to add their own UUID. This is a double edged sword, depending on the way the user generates a UUID. Technically speaking, if the user has another UUID it could use a generator different from the one called in the method, so it is slightly dangerous to have both of these generators mix. This is only if the UUIDs end up being reserved already, but there so many combinations that this shouldn't happen, still a slight chance though. Conversely it can act very smoothly when the user continuesly uses their own generator for whatever reason they choose. In this case I feel that the unlikely chance of duplication in exchange for user comfortability justifies a overloaded method.",
    "head_branch": "goal_uuid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621749018912b45d36a712e",
    "number": 2191,
    "body": "This is an automatic backport of pull request #2177 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2177",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix race condition in events-executor (#2177) (#2191)\n\nThe initial implementation of the events-executor contained a bug where the executor\r\nwould end up in an inconsistent state and stop processing interrupt/shutdown notifications.\r\nManually adding a node to the executor results in a) producing a notify waitable event\r\nand b) refreshing the executor collections.\r\nThe inconsistent state would happen if the event was processed before the collections were\r\nfinished to be refreshed: the executor would pick up the event but be unable to process it.\r\nThis would leave the `notify_waitable_event_pushed_` flag to true, preventing additional\r\nnotify waitable events to be pushed.\r\nThe behavior is observable only under heavy load.\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n(cherry picked from commit 6e1fea14e1fdab856f31bba6c4030c321afa86f7)\r\n\r\nCo-authored-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621749218912b45d36a712f",
    "number": 2188,
    "body": "This pull request is meant to address issue #1473 which needs rcl_action functions exposed to the NodeGraph class. As mentioned:\r\n\r\n- rcl_action_get_client_names_and_types_by_node\r\n- rcl_action_get_server_names_and_types_by_node\r\n- rcl_action_get_names_and_types\r\n\r\nwere all meant to be exposed from [rcl](https://github.com/ros2/rcl/blob/a01d0951adbf346fe0acd4e4be24b896bc95bf50/rcl_action/src/rcl_action/graph.c#L135) to rclcpp, which based on the previous comment meant to make methods similar to rclpy. So each of the functions developed in this PR all follow a similar format of gaining access to the original rcl_action methods with a rcl_ret_t type and return a map of all the names and types.",
    "head_branch": "actions_exposed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621749318912b45d36a7130",
    "number": 2187,
    "body": "Add mutex to protect events_executor current entity collection and add unit-test.\r\n\r\nThe mutex is needed because the collection is essentially a list where `refresh_current_collection_from_callback_groups` can add/remove elements and `retrieve_entity` can read/remove elements.\r\n\r\nAdded a unit-test that without this PR was failing ~75% of the times and now succeeds.",
    "head_branch": "asoragna/events-executor-collection-thread-safe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add mutex to protect events_executor current entity collection (#2187)\n\n* add mutex to protect events_executor current entity collection and unit-test\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* be more precise with mutex locks; make stress test less stressfull\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* fix uncrustify error\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621749418912b45d36a7131",
    "number": 2186,
    "body": "Resolves the build error reported in #2185",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing stdexcept include (#2186)\n\nSigned-off-by: √òystein Sture <os@skarvtech.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621749518912b45d36a7132",
    "number": 2183,
    "body": "Implements #2172.\r\n\r\n- Backports the changes to `LifecycleNodeInterfaceImpl` from #1756. It's OK to apply these changes to Humble because they do not modify the public ABI.\r\n- Improve thread safety when using `State::state_handle_`:\r\n  - Add a new `MutexMap` class to associate a mutex with each instance of `State`.\r\n  - Add a private static `MutexMap` member to `State`. This type of change is allowed under [REP-0009](https://www.ros.org/reps/rep-0009.html).\r\n- Add a unit test based on the example code from #1746 which fails without the above changes.",
    "head_branch": "pr-backport-lifecycle-state-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix thread safety in LifecycleNode::get_current_state() for Humble (#2183)\n\n* add initially-failing test case\r\n\r\n* apply changes to LifecycleNodeInterfaceImpl from #1756\r\n\r\n* add static member to State for managing state_handle_ access\r\n\r\n* allow parallel read access in MutexMap\r\n\r\nSigned-off-by: Joe Schornak <joe.schornak@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621749618912b45d36a7133",
    "number": 2182,
    "body": "Depends on https://github.com/ros2/rmw_connextdds/pull/76",
    "head_branch": "enable_callback_group_test_for_connextdds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enable callback group tests for connextdds (#2182)\n\n* Enable callback group tests for connextdds\r\n\r\n* Enable executors and event executor tests for connextdds\r\n\r\n* Enable qos events tests for connextdds\r\n\r\n* Less flaky qos_event tests\r\n\r\nSigned-off-by: Christopher Wecht <cwecht@mailbox.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621749718912b45d36a7134",
    "number": 2181,
    "body": null,
    "head_branch": "mjcarroll/remove_stale_entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621749818912b45d36a7135",
    "number": 2179,
    "body": "These changes are a direct response to issue #1660 which calls for the simplification of common parameter_descriptor objects.\r\n\r\n- Firstly, this first commit attempted to initialize a builder class for the ParameterDescription class. The references were mainly [cpppatterns](https://cpppatterns.com/patterns/builder.html) and [refactoringguru](https://refactoring.guru/design-patterns/builder) to establish a correct definition of the builder class. \r\n- Target Intension: to solve redundancy in the creation of param_descriptor objects, specifically the float version which comes with a counter. The `ParameterDescription` class is meant to hold all of the standard information in [ParameterDescriptor](https://github.com/ros2/rcl_interfaces/blob/rolling/rcl_interfaces/msg/ParameterDescriptor.msg) and then build up classes around it that can alter that information.\r\n> It may be reasonable to create convenient tools which allow for the definition of such a variable in much fewer steps:\r\n\r\nand \r\n\r\n> I'd recommend a builder pattern (https://cpppatterns.com/patterns/builder.html) for the API, so that if we add more to the descriptor in the future we won't have to add/subtract/reorder arguments to a function.\r\n\r\nwere the main tasks assigned in the creation in this so, to follow builder protocol I created a general first class, then secondary classes that contain the details for a counter such as: `min, max, step`. Then I created a function to handle the setting of these functions, where there had to be an overloaded version meant to hold templates given in the example of `this->declare_parameter<double>(\"value\", 0.5, param_descriptor);` I assumed this had to be done because a Node must be initiated through this method, or a general version with a `rclcpp::ParameterValue.` Additionally, this was a function because the builder design patterns aims to stray away from massive constructors, which originally concerned me, because this PR was beginning to turn into that. \r\n\r\nThere are definetly improvements to be made to this PR, especially in the addition of more subclasses - at least an int version - but I wanted to get some early feedback.",
    "head_branch": "parameter_descriptor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621749a18912b45d36a7136",
    "number": 2178,
    "body": "This is an automatic backport of pull request #2175 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/iron/pr-2175",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix delivered message kind (#2175) (#2178)\n\nSigned-off-by: methylDragon <methylDragon@gmail.com>\r\n(cherry picked from commit 6ca1023ef77f19897d74b5864300125d92ac47b3)\r\n\r\nCo-authored-by: methylDragon <methylDragon@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621749b18912b45d36a7137",
    "number": 2177,
    "body": "The initial implementation of the events-executor contained a bug where the executor would end up in an inconsistent state and stop processing interrupt/shutdown notifications. \r\n\r\nManually adding a node to the executor results in a) producing a notify waitable event and b) refreshing the executor collections.\r\nThe notify waitable uses a `notify_waitable_event_pushed_` that is set to true when an event is pushed and to false when it is processed. This is used to prevent multiple events to be pushed while we still have something in the queue.\r\n\r\nThe inconsistent state would happen if the event was processed before the collections were finished to be refreshed: the executor would pick up the event but be unable to process it, because its associated entity wouldn't be part of the entities collection yet. The event would thus be discarded and this would leave the `notify_waitable_event_pushed_` flag to true, preventing additional notify waitable events to be pushed.\r\nThe behavior is observable only under heavy load.\r\n\r\nThe race condition could only happen during the first time the notify waitable is notified.\r\nThis PR fixes the problem by immediately adding the notify waitable to the collection to prevent races.\r\n\r\n\r\nFYI @mauropasse @mjcarroll ",
    "head_branch": "asoragna/fix-notify-waitable-race",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix race condition in events-executor (#2177)\n\nThe initial implementation of the events-executor contained a bug where the executor\r\nwould end up in an inconsistent state and stop processing interrupt/shutdown notifications.\r\nManually adding a node to the executor results in a) producing a notify waitable event\r\nand b) refreshing the executor collections.\r\nThe inconsistent state would happen if the event was processed before the collections were\r\nfinished to be refreshed: the executor would pick up the event but be unable to process it.\r\nThis would leave the `notify_waitable_event_pushed_` flag to true, preventing additional\r\nnotify waitable events to be pushed.\r\nThe behavior is observable only under heavy load.\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621749c18912b45d36a7138",
    "number": 2176,
    "body": "This PR is part of the runtime interface reflection subscription feature of REP-2011: https://github.com/ros2/ros2/issues/1374\r\n\r\nIt's a rebased (and slightly modified version of https://github.com/ros2/rclcpp/pull/2077)\r\n\r\n# Description\r\nThis PR includes support for runtime type subscriptions, including:\r\n- Edits to SubscriptionBase and executor code to allow for use of runtime type\r\n  - This includes new pure virtual methods for SubscriptionBase that have also been implemented in all child classes\r\n- A new DynamicTypeSubscription subscription class that handles a subscription callback using dynamic_data",
    "head_branch": "dynamic_subscription",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621749d18912b45d36a7139",
    "number": 2175,
    "body": "When adding the stubs (with changes to subscription base), we had changed the names of one of the new enums, but I didn't change the name for the getter method...\r\n\r\nSince it's new, and I'm treating this as a typo. Can we fix it?\r\n\r\n@wjwwood @clalancette ",
    "head_branch": "delivered_message_kind_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix delivered message kind (#2175)\n\nSigned-off-by: methylDragon <methylDragon@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621749e18912b45d36a713a",
    "number": 2174,
    "body": "address https://github.com/ros2/rclcpp/issues/2147",
    "head_branch": "fujitatomoya/bugfix-20230427-rclcpp-issue-2147",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Decouple rosout publisher init from node init. (#2174)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174a018912b45d36a713b",
    "number": 2173,
    "body": "We were in need to ensure that no messages are lost while intraprocess communication (something like acknowledge for interprocess communication). Therefore we've added method to the publisher to check if the buffers of the subscription have remaining capacity.\r\n\r\n- updated ipm buffer and manager\r\n- updated publisher\r\n- added unit tests for everything\r\n\r\nThank you for reviewing!",
    "head_branch": "feature/available_capacity_of_ipm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Feature/available capacity of ipm (#2173)\n\n* added available_capacity to get the lowest number of free capacity for intra-process communication for a publisher\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* added unit tests for available_capacity\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* fixed typos in comments\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* Updated warning\r\n\r\nCo-authored-by: Alberto Soragna <alberto.soragna@gmail.com>\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* returning 0 if ipm is disabled in lowest_available_ipm_capacity\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* return 0 if no subscribers are present in lowest_available_capacity\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* updated unit test\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* update unit test\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\n\r\n* moved available_capacity to a lambda function to be able to handle subscriptions which went out of scope\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* updated unit test to check subscriptions which went out of scope\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n---------\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\nCo-authored-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nCo-authored-by: Joshua Hampp <j.hampp@eu.denso.com>\r\nCo-authored-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174a118912b45d36a713c",
    "number": 2171,
    "body": "In particular, you should never have a \"bare\" string in a printf-like call; that could potentially access uninitialized memory. Instead, make sure to format the string with %s.",
    "head_branch": "clalancette/fix-format-security",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix a format-security warning when building with clang (#2171)\n\nIn particular, you should never have a \"bare\" string in a\r\nprintf-like call; that could potentially access uninitialized\r\nmemory. Instead, make sure to format the string with %s.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174a218912b45d36a713d",
    "number": 2170,
    "body": "Picked from #2142 ",
    "head_branch": "mjcarroll/rclcpp_waitset_executor_abi_only",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Picking ABI-incompatible executor changes (#2170)\n\n* Picking ABI-incompatible executor changes\r\n\r\n* Add PIMPL\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174a318912b45d36a713e",
    "number": 2169,
    "body": "Backport of [PR](https://github.com/ros2/rclcpp/pull/2159) to humble.\r\n* Support loaned messages in LifecyclePublisher\r\n\r\nCC @fujitatomoya @iuhilnehc-ynos @clalancette (since you reviewed the original PR).",
    "head_branch": "lifecycle_loaned_publish_humble",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174a418912b45d36a713f",
    "number": 2168,
    "body": "Follow-up to: https://github.com/ros2/rclcpp/pull/2165\r\n\r\nFrom further discussions, it was found that the `SubscriptionType` enum to change the behavior of the subscription was better thought of as a way to configure the \"category\" of message that is being delivered by a subscription (i.e. what is being passed in the subscription's handle function.)\r\n\r\nUnder that view, it is also possible to collapse the two dynamic message related enum options into one (and have the behavior change in the implementation of the take function.)",
    "head_branch": "delivered_message_kind",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement deliver message kind (#2168)\n\n* Implement deliver message kind\r\n\r\nSigned-off-by: methylDragon <methylDragon@gmail.com>\r\n\r\n* Add examples to docstring\r\n\r\nSigned-off-by: methylDragon <methylDragon@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: methylDragon <methylDragon@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174a518912b45d36a7140",
    "number": 2167,
    "body": "humble backport of https://github.com/ros2/rclcpp/pull/2164\r\n\r\nIf the intraprocess buffer still has data after taking, re-trigger the guard condition to ensure that the executor will continue to service it, even if incoming publications stop.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n(cherry picked from commit 5f9695afb02f178ec739fa1591bb018a9f9b2be0)",
    "head_branch": "mergify/bp/humble/pr-2164",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Trigger the intraprocess guard condition with data (#2164) (#2167)\n\nIf the intraprocess buffer still has data after taking, re-trigger the\r\nguard condition to ensure that the executor will continue to service it,\r\neven if incoming publications stop.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n(cherry picked from commit 5f9695afb02f178ec739fa1591bb018a9f9b2be0)\r\n\r\nCo-authored-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174a618912b45d36a7141",
    "number": 2165,
    "body": "This is a stubbed out version of: https://github.com/ros2/rclcpp/pull/2160\r\n\r\n- New classes are defined (stubbed out)\r\n- New virtual methods are set for SubscriptionBase\r\n- SubscriptionBase is using an enum to govern its behavior and execute_subscription behavior now uses that enum\r\n\r\n\r\nNote: I had to introduce (and stub out) the new dynamic typesupport classes in rclcpp since the virtual methods on SubscriptionBase use them\r\n\r\nI added the classes, then stubbed them out in a separate commit so it's clear what's being removed.\r\n\r\nStuff removed are:\r\n- Non-virtual constructors\r\n- Templated class methods\r\n- Normal class methods\r\n- The function implementations\r\n- Executor behavior surrounding dynamic subscriptions (inside a code branch in execute_subscription())",
    "head_branch": "dynamic_subscription_stubs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Dynamic Subscription (REP-2011 Subset): Stubs for rclcpp (#2165)\n\n* Implement subscription base changes\r\n\r\n* Add stubbed out classes\r\n\r\nSigned-off-by: methylDragon <methylDragon@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174a718912b45d36a7142",
    "number": 2164,
    "body": "If the intraprocess buffer still has data after taking, re-trigger the guard condition to ensure that the executor will continue to service it, even if incoming publications stop.\r\n\r\nI found this bug when working on #2142.  There is a situation where if an intraprocess publisher sends all of it's messages before the subscription starts servicing it, then the executor will fail to service the entire queue.\r\n\r\nNote that in the current `rclcpp` implementation, this really only impacts the `StaticSingleThreadedExecutor`, as the `SingleThreadedExecutor` and `MultiThreadedExector` both automatically trigger the waitset at the end of an executable cycle.  I discovered this because the rclcpp::Waitset based executor also does not recompute work.  I added the test to run against all executors to prevent regression.",
    "head_branch": "mjcarroll/retrigger_intraprocess",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Trigger the intraprocess guard condition with data (#2164)\n\nIf the intraprocess buffer still has data after taking, re-trigger the\r\nguard condition to ensure that the executor will continue to service it,\r\neven if incoming publications stop.\r\n\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174a818912b45d36a7143",
    "number": 2162,
    "body": "Part of https://github.com/ros2/ros2_tracing/issues/18\r\n\r\nRequires https://github.com/ros2/ros2_tracing/pull/56\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "christophebedard/add-namespace-prefix-tracetools-macros",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use TRACETOOLS_ prefix for tracepoint-related macros (#2162)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174a918912b45d36a7144",
    "number": 2160,
    "body": "See: https://github.com/ros2/ros2/issues/1405",
    "head_branch": "runtime_interface_reflection_allocators",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ab18912b45d36a7145",
    "number": 2159,
    "body": "## Problem\r\nRight now LifecyclePublisher doesn't support publishing `LoanedMessage`s. \r\n\r\n## Solution\r\nOverride publish for loaned message, implementation is the same as in other overloads, check if publisher is activated and if so, pass message to base publisher",
    "head_branch": "lifecycle_loanded_publish",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support publishing loaned messages in LifecyclePublisher (#2159)\n\n* Support loaned messages in LifecyclePublisher\r\n\r\nSigned-off-by: Michael Babenko <mbabenko@wayve.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174ac18912b45d36a7146",
    "number": 2158,
    "body": "Change the MultiThreadedExecutor::run method to be virtual in order to allow overriding of the functionality. This helps to add exception handling and other functionality not specific to the executor itself.\r\n\r\nissue: #2157",
    "head_branch": "issue_2157",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ad18912b45d36a7147",
    "number": 2156,
    "body": "Fix available qos policy kinds from [ros2/rmw/include/rmw/qos_policy_kind.h](https://github.com/ros2/rmw/blob/bb044d59df89fac9fed8706aa58a8d7092fa31a2/rmw/include/rmw/qos_policy_kind.h#L27)",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ae18912b45d36a7148",
    "number": 2155,
    "body": "This PR introduces the events-executor based on the design here https://github.com/ros2/design/pull/305 and the already-existing open-source implementation in https://github.com/irobot-ros/events-executor.\r\n\r\n\r\nFYI @clalancette @wjwwood @mjcarroll @mauropasse @bpwilcox \r\n\r\n\r\nThis PR currently targets Michael's branch as it depends on it. \r\nWill target the main branch after this PR is merged. \r\nhttps://github.com/ros2/rclcpp/pull/2143",
    "head_branch": "asoragna/events-executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add events-executor and timers-manager in rclcpp (#2155)\n\n* add events-executor and timers-manager in rclcpp\r\n\r\nfix check for execute_timers_separate_thread; ignore on_ready_callback if asked to execute a timer;  reduce usage of void pointers\r\n\r\n* have the executor notify waitable fiddle with guard condition callbacks only if necessary\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174af18912b45d36a7149",
    "number": 2153,
    "body": "This is an automatic backport of pull request #2152 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/foxy/pr-2152",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Revert \"extract the result response before the callback is is‚Ä¶ (backport #2152) (#2153)\n\n* Revert \"Revert \"extract the result response before the callback is issued. (#2133)\" (#2148)\" (#2152)\r\n\r\nThis reverts commit 19a666f1c9393e86f0f0cc5a8213cbd18b01fc03.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit b2b7bdeac16f6a3bd62d1f03fd18af32d1ba29f6)\r\n\r\n* address cpplint error.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174b018912b45d36a714a",
    "number": 2152,
    "body": "‚Ä¶sued. (#2133)\" (#2148)\"\r\n\r\nThis reverts commit 19a666f1c9393e86f0f0cc5a8213cbd18b01fc03.",
    "head_branch": "fujitatomoya/revert-pull-2148",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Revert \"extract the result response before the callback is issued. (#2133)\" (#2148)\" (#2152)\n\nThis reverts commit 19a666f1c9393e86f0f0cc5a8213cbd18b01fc03.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174b118912b45d36a714b",
    "number": 2149,
    "body": null,
    "head_branch": "yadu/fix_typo_node_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Minor grammar fix (#2149)\n\nSigned-off-by: Yadunund <yadunund@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174b218912b45d36a714c",
    "number": 2148,
    "body": "‚Ä¶2133)\"\r\n\r\nThis reverts commit c8ac675035a86ab7805900e556fd7ae04d4d3938.",
    "head_branch": "fujitatomoya/revert-pull-2133",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"extract the result response before the callback is issued. (#2133)\" (#2148)\n\nThis reverts commit c8ac675035a86ab7805900e556fd7ae04d4d3938.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174b418912b45d36a714d",
    "number": 2145,
    "body": "This is an automatic backport of pull request #2133 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/foxy/pr-2133",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174b518912b45d36a714e",
    "number": 2143,
    "body": "Broken off of #2142 so that it can be used as a base for #2140.\r\n\r\nThis introduces a few main structures:\r\n\r\n* ExecutorNotifyWaitable - an object used to collect node and callback group guard conditions from things associated with an executor.\r\n* ExecutorEntitiesCollector - an object to collect entities from executor-associated nodes and callback groups\r\n* ExecutorEntitiesCollection - a collection of entities that are associated with an executor via callback groups and nodes.\r\n\r\nCC: @alsora @mauropasse ",
    "head_branch": "mjcarroll/executor_structures",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Create common structures for executors to use (#2143)\n\n* Deprecate callback_group call taking context\r\n\r\n* Add base executor objects that can be used by implementors\r\n\r\n* Template common operations\r\n\r\n* Add callback to EntitiesCollector constructor\r\n* Make function to check automatically added callback groups take a list\r\n\r\n* Make executor own the notify waitable\r\n\r\n* Add pending queue to collector, remove from waitable\r\n\r\nAlso change node's get_guard_condition to return shared_ptr\r\n\r\n* Change interrupt guard condition to shared_ptr\r\n\r\nCheck if guard condition is valid before adding it to the waitable\r\n\r\n* Make get_notify_guard_condition follow API tick-tock\r\n\r\n* Improve callback group tick-tocking\r\n\r\n* Add thread safety annotations and make locks consistent\r\n\r\n* Remove the \"add_valid_node\" API\r\n\r\n* Only notify if the trigger condition is valid\r\n\r\n* Only trigger if valid and needed\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174b618912b45d36a714f",
    "number": 2142,
    "body": "Improve number of `rcl_wait_set` creations and deletions by making the default Single/Multithreaded executors work like the static single threaded executor in terms of entity collection rebuilding.\r\n\r\nTODOS\r\n\r\n- [x] The concepts of entity collector and notify waitable come from https://github.com/ros2/rclcpp/pull/2140, they need to be rectified with that pull request and iRobot copyright needs to be added to appropriate files\r\n- [x] restore static-single threaded files (removed for ease of testing)\r\n- [x] documentation/test coverage on some of the new structures",
    "head_branch": "mjcarroll/rclcpp_waitset_executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Utilize rclcpp::WaitSet as part of the executors (#2142)\n\n* Deprecate callback_group call taking context\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Add base executor objects that can be used by implementors\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Template common operations\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Address reviewer feedback:\r\n\r\n* Add callback to EntitiesCollector constructor\r\n* Make function to check automatically added callback groups take a list\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Lint\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Address reviewer feedback and fix templates\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Lint and docs\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Make executor own the notify waitable\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Add pending queue to collector, remove from waitable\r\n\r\nAlso change node's get_guard_condition to return shared_ptr\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Change interrupt guard condition to shared_ptr\r\n\r\nCheck if guard condition is valid before adding it to the waitable\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Lint and docs\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Utilize rclcpp::WaitSet as part of the executors\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Don't exchange atomic twice\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Fix add_node and add more tests\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Make get_notify_guard_condition follow API tick-tock\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Improve callback group tick-tocking\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Don't lock twice\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Address reviewer feedback\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Add thread safety annotations and make locks consistent\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* @wip\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Reset callback groups for multithreaded executor\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Avoid many small function calls when building executables\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Re-trigger guard condition if buffer has data\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Address reviewer feedback\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Trace points\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Remove tracepoints\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Reducing diff\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Reduce diff\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Uncrustify\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Restore tests\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Back to weak_ptr and reduce test time\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* reduce diff and lint\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Restore static single threaded tests that weren't working before\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Restore more tests\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Fix multithreaded test\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Fix assert\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Fix constructor test\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Change ready_executables signature back\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Don't enforce removing callback groups before nodes\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Remove the \"add_valid_node\" API\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Only notify if the trigger condition is valid\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Only trigger if valid and needed\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Fix spin_some/spin_all implementation\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Restore single threaded executor\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Picking ABI-incompatible executor changes\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Add PIMPL\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Additional waitset prune\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Fix bad merge\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Expand test timeout\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Introduce method to clear expired entities from a collection\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Make sure to call remove_expired_entities().\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\n\r\n* Prune queued work when callback group is removed\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Prune subscriptions from dynamic storage\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Styles fixes.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\n\r\n* Re-trigger guard conditions\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Condense to just use watiable.take_data\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Lint\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Address reviewer comments (nits)\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Lock mutex when copying\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Refactors to static single threaded based on reviewers\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* More small refactoring\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Lint\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Lint\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Add ready executable accessors to WaitResult\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Make use of accessors from wait_set\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Fix tests\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Fix more tests\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Tidy up single threaded executor implementation\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* Don't null out timer, rely on call\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\n\r\n* change how timers are checked from wait result in executors\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* peak -> peek\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix bug in next_waitable logic\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix bug in StaticSTE that broke the add callback groups to executor tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n---------\r\n\r\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>\r\nCo-authored-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174b718912b45d36a7150",
    "number": 2141,
    "body": "@clalancette @iuhilnehc-ynos could you do review when you have time?",
    "head_branch": "fujitatomoya/20230327-get-effective-level",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add Logger::get_effective_level(). (#2141)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174b818912b45d36a7151",
    "number": 2140,
    "body": "This PR introduces the events-executor based on the design here https://github.com/ros2/design/pull/305 and the already-existing open-source implementation in https://github.com/irobot-ros/events-executor.\r\n\r\n\r\nFYI @clalancette @wjwwood @mjcarroll @mauropasse @bpwilcox ",
    "head_branch": "irobot/events-executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174b918912b45d36a7152",
    "number": 2139,
    "body": "It was deprecated in H for removal in I\r\n\r\n@christophebedard ",
    "head_branch": "emersonknapp/remove-deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove deprecated header (#2139)\n\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ba18912b45d36a7153",
    "number": 2137,
    "body": "Part of ros2/ros2#1159\r\n\r\nFrom rep-2011 work, expose the new RMW endpoint info's type hash to the C++ endpoint struct.",
    "head_branch": "emersonknapp/endpoint-type-hash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add type_hash to cpp TopicEndpointInfo (#2137)\n\n* Add type_hash to cpp TopicEndpointInfo\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174bb18912b45d36a7154",
    "number": 2136,
    "body": null,
    "head_branch": "emersonknapp/type-description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174bc18912b45d36a7155",
    "number": 2135,
    "body": "std::function will allocate on every call of take_and_do_error_handling (at least with libstdc++ as in this implementation std::function's small buffer can only fit two pointers but most of the time, the lambdas will contain 3 pointers). This impose multiple heap allocations (and deallocations) on every callback.\r\n\r\nThis comes with the cost of increased binary size. But I suppose it's worth it as this change also enables better/easier inling and avoids indirect function calls through the std::function machinery.",
    "head_branch": "fix_unnecessary_allocations_in_executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix unnecessary allocations in executor.cpp (#2135)\n\nSigned-off-by: Christopher Wecht <cwecht@mailbox.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174bd18912b45d36a7156",
    "number": 2134,
    "body": "This PR is part of the runtime interface reflection subscription feature of REP-2011: https://github.com/ros2/ros2/issues/1374\r\nIt is a dependency of: https://github.com/ros2/rclcpp/pull/2077\r\n\r\nDepends on:\r\n- https://github.com/ros2/rosidl_dynamic_typesupport/pull/1\r\n  - Which depends on https://github.com/ros2/rosidl/pull/727\r\n\r\n# Description\r\nThis PR implements C++ wrapper classes for the rosidl_dynamic_typesupport dynamic type/type builder/data structs that help manage lifetime and type casting.\r\n\r\nThey also feature many templated functions to lessen the reading burden for any new users of dynamic typesupport.\r\n\r\n- `rclcpp::dynamic_typesupport::DynamicData`\r\n- `rclcpp::dynamic_typesupport::DynamicMessage`\r\n- `rclcpp::dynamic_typesupport::DynamicMessageType`\r\n- `rclcpp::dynamic_typesupport::DynamicSerializationSupport`\r\n- `rclcpp::dynamic_typesupport::DynamicTypeBuilder`\r\n- `rclcpp::dynamic_typesupport::DynamicType`\r\n\r\nI also created a typesupport wrapper class that wraps the `rosidl_message_type_support_t` that should be passed into a subscription. It'll manage all the necessary lifetimes.\r\n\r\n- `rclcpp::dynamic_typesupport::DynamicMessageTypeSupport`\r\n\r\nEverything builds nicely, though I don't have tests written yet...",
    "head_branch": "runtime_interface_reflection_wrappers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174bf18912b45d36a7157",
    "number": 2133,
    "body": "humble backport of https://github.com/ros2/rclcpp/pull/2132",
    "head_branch": "fujitatomoya/humble/bugfix-rclcpp-issues-2130",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "extract the result response before the callback is issued. (#2133)\n\nbackport of https://github.com/ros2/rclcpp/pull/2132\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c018912b45d36a7158",
    "number": 2132,
    "body": "address https://github.com/ros2/rclcpp/issues/2130",
    "head_branch": "fujitatomoya/bugfix-rclcpp-issues-2130",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "extract the result response before the callback is issued. (#2132)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c118912b45d36a7159",
    "number": 2131,
    "body": "This is an automatic backport of pull request #2129 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2129",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use allocator via init_options argument. (#2129) (#2131)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n(cherry picked from commit 1a796b5515cde3d8b6a64f8c53c7f49d8a742d32)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c218912b45d36a715a",
    "number": 2129,
    "body": "part of https://github.com/ros2/rcl/issues/1036, but independent bug fix.",
    "head_branch": "fujitatomoya/bugfix-rcl-issues-1036",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use allocator via init_options argument. (#2129)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c318912b45d36a715b",
    "number": 2128,
    "body": "The node guard condition was used to signal when publishers/subscriptions/timers/etc were added to a node previously.  This has been superceeded by the signal emitted from individual callback groups.  Anywhere that the node guard condition is signaled, we additionally signal the corresponding callback groups.\r\n\r\nGoing forward, using this method should be deprecated (and then removed).\r\n\r\nCurrently, the static single threaded executor still makes use of this guard condition, but I'm working on removing that usage as well.",
    "head_branch": "mjcarroll/deprecate_node_guard_condition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c418912b45d36a715c",
    "number": 2127,
    "body": "This does 2 separate things:\r\n\r\n* Adds (void)unused_variable things where needed.\r\n* Stops doing some checks on moved-from items in tests.\r\n\r\nWith this in place, most of the remaining clang static analysis warnings are gone.",
    "head_branch": "clalancette/fix-clang-warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixes to silence some clang warnings. (#2127)\n\nThis does 2 separate things:\r\n\r\n* Adds (void)unused_variable things where needed.\r\n* Stops doing some checks on moved-from items in tests.\r\n\r\nWith this in place, most of the remaining clang static analysis\r\nwarnings are gone.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c518912b45d36a715d",
    "number": 2126,
    "body": "Add remove_pending_request function and prune_pending_requests function like rolling version\r\n\r\nNo need to change the original way of using async_send_request\r\n\r\nThis may meet the requirement of #2100  ",
    "head_branch": "foxy-remove_pending_request",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c618912b45d36a715e",
    "number": 2125,
    "body": "Add documentation to a few undocumented methods.",
    "head_branch": "mjcarroll/executor_doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Documentation improvements on the executor (#2125)\n\nSigned-off-by: Michael Carroll <mjcarroll@intrinsic.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174c718912b45d36a715f",
    "number": 2123,
    "body": "This is the continue of [#1373] [discussion](https://github.com/ros2/rclcpp/pull/1373#discussion_r1118830044) and related to the https://github.com/ros-planning/navigation2/issues/3325 issue in Nav2\r\n\r\nThe initial idea is to make `rclcpp::Rate` to work with ROS-time (currently it works only with system and steady times).\r\n\r\nWhat was made:\r\n* Add `rclcpp::Clock` pointer to the `rclcpp::Rate` constructor to allow developer to specify the clock to work with (by-default it is still `RCL_SYSTEM_TIME` if no clock is specified)\r\n* Add `rclcpp::ROSRate` rate class, respective to ROS-time\r\n\r\nCurrent implementation points:\r\n* Getting rid of templates' structure allows developer to select the clock to work with in dynamics\r\n* Renamed `rclcpp::GenericRate` -> to `rclcpp::Rate` and gave it the default clock to work with\r\n* `rclcpp::Rate` and `rclcpp::WallRate` API remaining to be untouched as much as possible\r\n* Although there are some changes in API: `rclcpp::Duration` instead of `std::chrono::nanoseconds` in durations and `Rate::get_type()` routine instead of previously used `Rate::is_steady()`\r\n* New `rclcpp::ROSRate` class that working with ROS time",
    "head_branch": "ros-rate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make Rate to select the clock to work with (#2123)\n\n* Make Rate to select the clock to work with\r\nAdd ROSRate respective with ROS time\r\n\r\n* Make GenericRate class to be deprecated\r\n\r\n* Adjust test cases for new rates\r\n\r\nis_steady() to be deprecated\r\n\r\nSigned-off-by: Alexey Merzlyakov <alexey.merzlyakov@samsung.com>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174c818912b45d36a7160",
    "number": 2122,
    "body": null,
    "head_branch": "topic-logging_service",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for logging service. (#2122)\n\n* Add support for logging service.\r\n\r\n* Update to not modify interfaces and not change time_source\r\n\r\n* Use unique_ptr for NodeBuiltinExecutorImpl\r\n\r\n* Use user thread to run logger service\r\n\r\n* Update code for lifecycle_node\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\nSigned-off-by: Lei Liu <Lei.Liu.AP@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174ca18912b45d36a7161",
    "number": 2121,
    "body": "The main reason to do this is so that we can compile rclcpp with the clang static analyzer.  As of clang++-14 (what is in Ubuntu 22.04), the default still seems to be C++14, so we need to specify C++17 so that new things in the rclcpp headers work properly.\r\n\r\nFurther, due to reasons I don't fully understand, I needed to set CMAKE_CXX_STANDARD_REQUIRED in order for clang to really use that version.  So set this as well.",
    "head_branch": "clalancette/update-to-c++17",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update all rclcpp packages to C++17. (#2121)\n\nThe main reason to do this is so that we can compile rclcpp\r\nwith the clang static analyzer.  As of clang++-14 (what is in\r\nUbuntu 22.04), the default still seems to be C++14, so we need\r\nto specify C++17 so that new things in the rclcpp headers work\r\nproperly.\r\n\r\nFurther, due to reasons I don't fully understand, I needed to\r\nset CMAKE_CXX_STANDARD_REQUIRED in order for clang to really use\r\nthat version.  So set this as well.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174cb18912b45d36a7162",
    "number": 2119,
    "body": "to fix warning in https://ci.ros2.org/job/ci_windows/18828/msbuild/new/\r\n\r\n```\r\n'rclcpp_lifecycle::LifecycleNode::get_fully_qualified_name': inconsistent dll linkage\r\n```",
    "head_branch": "topic-inconsistent-dll-linkage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174cc18912b45d36a7163",
    "number": 2117,
    "body": "I believe this should avoid the warning we are seeing on Windows of \"inconsistent dll linkage\".  This looks like it was introduced by #2115.  FYI @mjcarroll @SteveMacenski @fujitatomoya \r\n\r\nWarning message for reference: https://ci.ros2.org/view/nightly/job/nightly_win_rel/2610/msbuild/",
    "head_branch": "clalancette/fix-lifecycle-public",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use the correct macro for LifecycleNode::get_fully_qualified_name (#2117)\n\nSigned-off-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174cd18912b45d36a7164",
    "number": 2116,
    "body": "Fix clang warning: `bugprone-use-after-move`\r\nhttps://clang.llvm.org/extra/clang-tidy/checks/bugprone/use-after-move.html\r\n\r\nThe fix is explicitly break from a for loop after the final message has been delivered.\r\nEven if it we know we will exit the for loop,since we check\r\nhttps://github.com/ros2/rclcpp/blob/399f4df7396d67b42ccaea651bbd87d66b0d62b3/rclcpp/include/rclcpp/experimental/intra_process_manager.hpp#L454\r\nthis is not enough for clang-tidy and it complains.",
    "head_branch": "mauro/fix-clang-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix clang warning: bugprone-use-after-move (#2116)\n\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ce18912b45d36a7165",
    "number": 2115,
    "body": "Self explanatory, directly lifted from the normal node to lifecycle",
    "head_branch": "lifecycle_full_name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add get_fully_qualified_name to rclcpp_lifecycle (#2115)\n\nSigned-off-by: stevemacenski <stevenmacenski@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174cf18912b45d36a7166",
    "number": 2114,
    "body": "Reverts ros2/rclcpp#2104",
    "head_branch": "revert-2104-christophebedard/fix-memory-leak-in-tracetools-get-symbol",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174d018912b45d36a7167",
    "number": 2112,
    "body": "This is an automatic backport of pull request #2108 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2108",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174d118912b45d36a7168",
    "number": 2111,
    "body": "I encounter the falky test about TestTimeSource.callbacks some times.\r\n```\r\n/tmp/ws/src/rclcpp/rclcpp/test/rclcpp/test_time_source.cpp:426\r\nExpected equality of these values:\r\n  3\r\n  cbo.last_precallback_id_\r\n    Which is: 2\r\n```\r\n\r\n\r\nFlaky test failure history:\r\nhttps://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/602/\r\nhttps://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/597/\r\nhttps://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/547/\r\nhttps://build.ros2.org/job/Rpr__rclcpp__ubuntu_jammy_amd64/530/\r\n\r\nLet me explain why the flaky test happened.\r\nIf https://github.com/ros2/rclcpp/blob/432bf21f0261bab209b37ccfe6da550f02751a22/rclcpp/test/rclcpp/test_time_source.cpp#L406 is called and\r\nthe `ros_clock` is set with 4.000001000s at this moment,\r\nWhile calling https://github.com/ros2/rclcpp/blob/432bf21f0261bab209b37ccfe6da550f02751a22/rclcpp/test/rclcpp/test_time_source.cpp#L425,\r\nand if the message published by `clock_pub` in https://github.com/ros2/rclcpp/blob/432bf21f0261bab209b37ccfe6da550f02751a22/rclcpp/test/rclcpp/test_time_source.cpp#L143 can't be immediately received by `clock_sub` in some situation, the `clock->now().nanoseconds() >= end_time.count()` will be always True and return so quick that the new callback https://github.com/ros2/rclcpp/blob/432bf21f0261bab209b37ccfe6da550f02751a22/rclcpp/test/rclcpp/test_time_source.cpp#L421 will not be called.",
    "head_branch": "topic-flaky-test-timesource-callbacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "to fix flaky test about TestTimeSource.callbacks (#2111)\n\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174d218912b45d36a7169",
    "number": 2109,
    "body": "Address #2012\r\n\r\nThis patch may not be the best fix.   \r\nBut I hope to find the best fix by discussing this patch.  ",
    "head_branch": "topic-fix-bug-rclcpp-2012",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid losing waitable handles while using MultiThreadedExecutor (#2109)\n\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174d418912b45d36a716a",
    "number": 2108,
    "body": "This PR avoids a runtime_error exception when trying to publish a `LoanedMessage` on a publisher that has intra-process enabled.\r\n\r\nThe changes make `can_loan_messages()` return false in that case, which in turn makes `borrow_loaned_message()` allocate a standard message.",
    "head_branch": "feature/intraprocess-loaned-messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow publishing borrowed messages with intra-process enabled (#2108)\n\nSigned-off-by: Miguel Company <MiguelCompany@eprosima.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174d518912b45d36a716b",
    "number": 2107,
    "body": "Fix https://github.com/ros2/rclcpp/issues/2106 . I also removed the reference to `rclcpp::init` as it does take in input a `Context`, I added instead the method to call to specify the context to use for a given node, please correct me if I was wrong on that.\r\n\r\nAs an alternative, we can also get rid of that sentence.",
    "head_branch": "fix2106",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix documentation of Context class (#2107)\n\nSigned-off-by: Silvio Traversaro <silvio@traversaro.it>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174d618912b45d36a716c",
    "number": 2105,
    "body": "Address ros2/rmw#330",
    "head_branch": "topic-add-matched-unmatched-event-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement matched event (#2105)\n\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174d718912b45d36a716d",
    "number": 2104,
    "body": "Part of https://github.com/ros2/ros2_tracing/issues/34\r\n\r\nRequires https://github.com/ros2/ros2_tracing/pull/43\r\n\r\nRequires https://github.com/ros2/ros2_tracing/pull/46 to help avoid memory allocations when the tracepoint isn't enabled.\r\n\r\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>",
    "head_branch": "christophebedard/fix-memory-leak-in-tracetools-get-symbol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix memory leak in tracetools::get_symbol() (#2104)\n\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174d818912b45d36a716e",
    "number": 2102,
    "body": "This PR contains a couple of small fixes:\r\n - reorder members declaration in `qos_event.hpp`. this follows the same logic applied in https://github.com/ros2/rclcpp/pull/2024\r\n - remove an unprotected read to `on_new_event_callback_`. the `clear_on_ready_callback` already checks if a callback exists and it does that under a mutex.\r\n\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/qos-event-callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fixes for rmw callbacks in qos_event class (#2102)\n\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174d918912b45d36a716f",
    "number": 2097,
    "body": "Address #2096 \r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>",
    "head_branch": "topic_fix_bug_on_shutdown_callback_order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bug on the disorder of calling shutdown callback (#2097)\n\n* Fix bug on the disorder of calling shutdown callback\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174da18912b45d36a7170",
    "number": 2094,
    "body": "This adds a default constructor. This allows a class to have an `interfaces` member that get's populated by an argument to it's constructor.",
    "head_branch": "sloretz__node_interfaces_default_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add default constructor to NodeInterfaces (#2094)\n\n* Add default constructor to NodeInterfaces\r\n\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\n\r\n* Remove unnecessary NOLINT\r\n\r\nSigned-off-by: Shane Loretz <sloretz@google.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\nSigned-off-by: Shane Loretz <sloretz@google.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174db18912b45d36a7171",
    "number": 2092,
    "body": "That is, in cache_last_msg(), we were just taking a shared_ptr reference.  While this is pretty fast, it also means that any changes to that message would be reflected internally. Instead, make a new shared pointer out of that message when it comes in, which essentially causes this to be a copy.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nThis should fix #2088 .  FYI @fujitatomoya and @mjcarroll .",
    "head_branch": "clalancette/fix-negative-time",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix clock state cached time to be a copy, not a reference. (#2092)\n\nThat is, in cache_last_msg(), we were just taking a shared_ptr\r\nreference.  While this is pretty fast, it also means that\r\nany changes to that message would be reflected internally.\r\nInstead, make a new shared pointer out of that message when\r\nit comes in, which essentially causes this to be a copy.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174dd18912b45d36a7172",
    "number": 2091,
    "body": "## Overview\r\nHi, I'm a member of [CARET](https://github.com/tier4/caret) development team. We would like to officially support some tracepoints added by caret in the rclcpp fork and LD_PRELOAD.\r\nThe current tracetools do not support intra-process communication. This Pull Request adds tracing instrumentation to calculate the processing time from `publish` to `subscription callback`. These trace points are important in performance analysis. Processing that may become a bottleneck, such as strict time constraints or handling large data, often uses intra-process communication.",
    "head_branch": "add-intra-process-tracepoint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "applied tracepoints for ring_buffer (#2091)\n\napplied tracepoints for intra_publish\r\nadd tracepoints for linking buffer and subscription\r\n\r\nSigned-off-by: Kodai Yamasaki <114902604+ymski@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174de18912b45d36a7173",
    "number": 2090,
    "body": "This pull request adds a feature that is useful for conditionally declaring parameters. https://github.com/locusrobotics/fuse/pull/307\r\n\r\nThe idea is you ask what parameter prefixes exist at a given prefix. See for example how [`unicycle_2d_ignition` is defined under `sensor_models` as `sensor_models.unicycle_2d_ignition`](https://github.com/locusrobotics/fuse/blob/d11e00fab6d8b4d06ecfd1836580a74bd7aafbdf/fuse_optimizers/test/config/struct/common_robot_config.yaml#L5). This PR allows you to ask \"what parameter prefixes exist under `sensor_models`?\". The answer to that question is `sensor_models.unicycle_2d_ignition`, `sensor_models.wheel_odometry`, and `sensor_models.laser_localization`. From there you can declare the actual parameters which are `sensor_models.unicycle_2d_ignition.type`, `sensor_models.unicycle_2d_ignition.motion_models`, etc.",
    "head_branch": "sloretz__list_parameter_overrides",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174df18912b45d36a7174",
    "number": 2087,
    "body": "`rclcpp::Time` forbids comparisons between objects with different clock types. It raises an exception when that happens. This makes sense for `<`, `<=`, etc, but I think `==` and `!=` could be defined by saying `Time` objects with different clock types are never equal to each other.\r\n\r\nI think this might simplify some of the logic for handling `Time` with different time sources here: https://github.com/locusrobotics/fuse/pull/307\r\n\r\n@ros2/team thoughts?",
    "head_branch": "sloretz__inequality_accross_time_sources",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174e018912b45d36a7175",
    "number": 2086,
    "body": "Directly related to `irobot/add-dynamic-network-notify-function` in `jakymiws/rcl`",
    "head_branch": "irobot/add-dynamic-interface-network-notify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174e118912b45d36a7176",
    "number": 2085,
    "body": "This eliminates a potential hang when the isolated container is being shutdown via the rclcpp::SignalHandler.\r\n\r\nPreviously, when the SignalHandler triggers the shutdown of the rest of the system, the ComponentManagerIsolated object would cancel and destroy the executor associated with each loaded component.\r\n\r\nPart of the cancel process checks if the executor is currently spinning as there may have been a race condition where `cancel_executor` is called before the thread is created.  While I didn't personally observe this condition, the comment indicates that it may happen.\r\n\r\n```\r\n    while (!executor_wrapper.executor->is_spinning()) {\r\n      // This is an arbitrarily small delay to avoid busy looping\r\n      rclcpp::sleep_for(std::chrono::milliseconds(1));\r\n    }\r\n```\r\n\r\nThe issue is that there is a race where the executor is already shutdown/cancelled (so is_spinning is always false), causing an infinite loop.\r\n\r\nThis code introduces a guard atomic to check that the loop has been started before continuing to check the `is_spinning` as well as checking the overall ROS context for shutdown.\r\n\r\nCloses #2083 \r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>",
    "head_branch": "mjcarroll/isolated_container_shutdown",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improve component_manager_isolated shutdown (#2085)\n\nThis eliminates a potential hang when the isolated container is being\r\nshutdown via the rclcpp SignalHandler.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174e218912b45d36a7177",
    "number": 2084,
    "body": "This adds a class `rclcpp::RosTime`, which inherits from `rclcpp::Time`. The value it adds is that the clock type can only be `RCL_ROS_TIME`. This prevents exceptions due to comparisons with default constructed objects. It can also be used to make it clear an API only accepts `RCL_ROS_TIME`.\r\n\r\n\r\nFor motivation see:\r\n* https://github.com/locusrobotics/fuse/pull/307",
    "head_branch": "sloretz__RosTime",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174e318912b45d36a7178",
    "number": 2082,
    "body": "If the user creates SystemDefaultsQoS setting, they are explicitly asking for SystemDefaults.  In that case, we should *not* warn, and just let the underlying RMW choose what it wants.  Implement that here by passing a boolean parameter through that decides when we should print out the warning, and then skip printing that warning when SystemDefaultsQoS is created.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/fix-system-defaults-warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix the keep_last warning when using system defaults. (#2082)\n\nIf the user creates SystemDefaultsQoS setting, they are\r\nexplicitly asking for SystemDefaults.  In that case, we should\r\n*not* warn, and just let the underlying RMW choose what it\r\nwants.  Implement that here by passing a boolean parameter\r\nthrough that decides when we should print out the warning,\r\nand then skip printing that warning when SystemDefaultsQoS\r\nis created.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174e418912b45d36a7179",
    "number": 2081,
    "body": "gcc 12 warns about this when compiling in release mode (i.e., with `-O2`):\r\n\r\n```\r\nIn file included from /usr/include/c++/12/unordered_map:46,\r\n                 from /usr/include/c++/12/functional:61,\r\n                 from /home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/include/rclcpp/context.hpp:19,\r\n                 from /home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/src/rclcpp/context.cpp:15:\r\nIn member function ‚Äòstd::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::iterator std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::_M_erase(size_type, __node_base_ptr, __node_ptr) [with _Key = std::shared_ptr<std::function<void()> >; _Value = std::shared_ptr<std::function<void()> >; _Alloc = std::allocator<std::shared_ptr<std::function<void()> > >; _ExtractKey = std::__detail::_Identity; _Equal = std::equal_to<std::shared_ptr<std::function<void()> > >; _Hash = std::hash<std::shared_ptr<std::function<void()> > >; _RangeHash = std::__detail::_Mod_range_hashing; _Unused = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<false, true, true>]‚Äô,\r\n    inlined from ‚Äòstd::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::size_type std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::_M_erase(std::true_type, const key_type&) [with _Key = std::shared_ptr<std::function<void()> >; _Value = std::shared_ptr<std::function<void()> >; _Alloc = std::allocator<std::shared_ptr<std::function<void()> > >; _ExtractKey = std::__detail::_Identity; _Equal = std::equal_to<std::shared_ptr<std::function<void()> > >; _Hash = std::hash<std::shared_ptr<std::function<void()> > >; _RangeHash = std::__detail::_Mod_range_hashing; _Unused = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<false, true, true>]‚Äô at /usr/include/c++/12/bits/hashtable.h:2372:15,\r\n    inlined from ‚Äòstd::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::size_type std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::erase(const key_type&) [with _Key = std::shared_ptr<std::function<void()> >; _Value = std::shared_ptr<std::function<void()> >; _Alloc = std::allocator<std::shared_ptr<std::function<void()> > >; _ExtractKey = std::__detail::_Identity; _Equal = std::equal_to<std::shared_ptr<std::function<void()> > >; _Hash = std::hash<std::shared_ptr<std::function<void()> > >; _RangeHash = std::__detail::_Mod_range_hashing; _Unused = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<false, true, true>]‚Äô at /usr/include/c++/12/bits/hashtable.h:973:24,\r\n    inlined from ‚Äòstd::unordered_set<_Value, _Hash, _Pred, _Alloc>::size_type std::unordered_set<_Value, _Hash, _Pred, _Alloc>::erase(const key_type&) [with _Value = std::shared_ptr<std::function<void()> >; _Hash = std::hash<std::shared_ptr<std::function<void()> > >; _Pred = std::equal_to<std::shared_ptr<std::function<void()> > >; _Alloc = std::allocator<std::shared_ptr<std::function<void()> > >]‚Äô at /usr/include/c++/12/bits/unordered_set.h:546:26,\r\n    inlined from ‚Äòbool rclcpp::Context::remove_shutdown_callback(ShutdownType, const rclcpp::ShutdownCallbackHandle&)‚Äô at /home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/src/rclcpp/context.cpp:443:34:\r\n/usr/include/c++/12/bits/hashtable.h:2330:9: warning: ‚Äòcallback_list_ptr‚Äô may be used uninitialized [-Wmaybe-uninitialized]\r\n 2330 |       --_M_element_count;\r\n      |         ^~~~~~~~~~~~~~~~\r\n/home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/src/rclcpp/context.cpp: In member function ‚Äòbool rclcpp::Context::remove_shutdown_callback(ShutdownType, const rclcpp::ShutdownCallbackHandle&)‚Äô:\r\n/home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/src/rclcpp/context.cpp:425:70: note: ‚Äòcallback_list_ptr‚Äô was declared here\r\n  425 |     std::shared_ptr<ShutdownCallbackHandle::ShutdownCallbackType>> * callback_list_ptr;\r\n      |                                                                      ^~~~~~~~~~~~~~~~~\r\nIn member function ‚Äòstd::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::__node_ptr std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::_M_begin() const [with _Key = std::shared_ptr<std::function<void()> >; _Value = std::shared_ptr<std::function<void()> >; _Alloc = std::allocator<std::shared_ptr<std::function<void()> > >; _ExtractKey = std::__detail::_Identity; _Equal = std::equal_to<std::shared_ptr<std::function<void()> > >; _Hash = std::hash<std::shared_ptr<std::function<void()> > >; _RangeHash = std::__detail::_Mod_range_hashing; _Unused = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<false, true, true>]‚Äô,\r\n    inlined from ‚Äòstd::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::const_iterator std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::begin() const [with _Key = std::shared_ptr<std::function<void()> >; _Value = std::shared_ptr<std::function<void()> >; _Alloc = std::allocator<std::shared_ptr<std::function<void()> > >; _ExtractKey = std::__detail::_Identity; _Equal = std::equal_to<std::shared_ptr<std::function<void()> > >; _Hash = std::hash<std::shared_ptr<std::function<void()> > >; _RangeHash = std::__detail::_Mod_range_hashing; _Unused = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<false, true, true>]‚Äô at /usr/include/c++/12/bits/hashtable.h:629:16,\r\n    inlined from ‚Äòstd::unordered_set<_Value, _Hash, _Pred, _Alloc>::const_iterator std::unordered_set<_Value, _Hash, _Pred, _Alloc>::begin() const [with _Value = std::shared_ptr<std::function<void()> >; _Hash = std::hash<std::shared_ptr<std::function<void()> > >; _Pred = std::equal_to<std::shared_ptr<std::function<void()> > >; _Alloc = std::allocator<std::shared_ptr<std::function<void()> > >]‚Äô at /usr/include/c++/12/bits/unordered_set.h:325:26,\r\n    inlined from ‚Äòstd::vector<std::function<void()> > rclcpp::Context::get_shutdown_callback(ShutdownType) const‚Äô at /home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/src/rclcpp/context.cpp:479:25:\r\n/usr/include/c++/12/bits/hashtable.h:466:62: warning: ‚Äòcallback_list_ptr‚Äô may be used uninitialized [-Wmaybe-uninitialized]\r\n  466 |       { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }\r\n      |                                                              ^\r\n/home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/src/rclcpp/context.cpp: In member function ‚Äòstd::vector<std::function<void()> > rclcpp::Context::get_shutdown_callback(ShutdownType) const‚Äô:\r\n/home/ahans/src/ros2_rolling/src/ros2/rclcpp/rclcpp/src/rclcpp/context.cpp:463:70: note: ‚Äòcallback_list_ptr‚Äô was declared here\r\n  463 |     std::shared_ptr<ShutdownCallbackHandle::ShutdownCallbackType>> * callback_list_ptr;\r\n```",
    "head_branch": "fix-gcc12-maybe-uninitialized-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix -Wmaybe-uninitialized warning (#2081)\n\n* Fix -Wmaybe-uninitialized warning\r\n\r\ngcc 12 warned about `callback_list_ptr` potentially being uninitialized\r\nwhen compiling in release mode (i.e., with `-O2`). Since `shutdown_type`\r\nis a compile-time parameter, we fix the warning by enforcing the\r\ndecision at compile time.\r\n\r\nSigned-off-by: Alexander Hans <ahans@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174e518912b45d36a717a",
    "number": 2079,
    "body": null,
    "head_branch": "irobot/add-dynamic-network-notify-function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174e618912b45d36a717b",
    "number": 2078,
    "body": "The content of this pull request ensures that threads in rclcpp will not experience priority inversions when using hard realtime scheduling, i.e. FIFO scheduling as defined in the POSIX standard. This is achieved by replacing std::mutex with rclcpp::PIMutex and std::recursive_mutex with rclcpp::RecursivePIMutex. To compile this pull request the following pull requests for rcutils and rcpputils are required:\r\nhttps://github.com/ros2/rcpputils/pull/174\r\nhttps://github.com/ros2/rcutils/pull/406\r\n\r\nThe code changes in this pull request should not effect the runtime behavior of existing ROS2 projects in a negative way. In case that a project uses ordinary fair/non-realtime thread scheduling it should behave as before.\r\n\r\nIn case this pull request gets accepted other ROS2 components can be made priority inversion safe in the manner which was demonstrated here. Refactoring all relevant ROS2 core components will make ROS2 more suitable for hard realtime scenarios.\r\n",
    "head_branch": "pimutex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174e818912b45d36a717c",
    "number": 2077,
    "body": "This PR is part of the runtime interface reflection subscription feature of REP-2011: https://github.com/ros2/ros2/issues/1374\r\n\r\n# Description\r\nThis PR includes support for runtime type subscriptions, including:\r\n- Edits to SubscriptionBase and executor code to allow for use of runtime type\r\n  - This includes new pure virtual methods for SubscriptionBase that have also been implemented in all child classes\r\n- A new RuntimeTypeSubscription subscription class that handles a subscription callback using ser_dynamic_data",
    "head_branch": "runtime_interface_reflection",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174e918912b45d36a717d",
    "number": 2076,
    "body": "This is an automatic backport of pull request #2044 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2044",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix SharedFuture from async_send_request never becomes valid (#2044) (#2076)\n\nSigned-off-by: Lei Liu <Lei.Liu.AP@sony.com>\r\n(cherry picked from commit 66b19448b0520b15a9e6c28483863b2a4351c2f6)\r\n\r\nCo-authored-by: Lei Liu <64953129+llapx@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ea18912b45d36a717e",
    "number": 2075,
    "body": "The addition of the NodeInterfaces class made it stop compiling with older compilers (such as gcc 9.4.0 on Ubuntu 20.04). The error has to do with calling the copy constructor on rclcpp::Node, which is deleted.  Work around this by just getting rid of the nullptr check; it isn't actually needed, I don't think.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nI'm honestly not sure that this is the best solution, but it definitely fixes the build on Ubuntu 20.04, and will likely fix the CI failures we are seeing in https://ci.ros2.org/view/nightly/job/nightly_linux-rhel_release/1370/ .  I could use further feedback from @methylDragon and @wjwwood .",
    "head_branch": "clalancette/fix-older-compilers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in a fix for older compilers. (#2075)\n\n* Add in a fix for older compilers.\r\n\r\nThe addition of the NodeInterfaces class made it stop compiling\r\nwith older compilers (such as gcc 9.4.0 on Ubuntu 20.04).\r\nThe error has to do with calling the copy constructor on\r\nrclcpp::Node, which is deleted.  Work around this by removing\r\nthe NodeInterfaces shared_ptr constructor, which isn't technically\r\nneeded.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174eb18912b45d36a717f",
    "number": 2074,
    "body": "to fix https://github.com/ros2/rclcpp/issues/2067",
    "head_branch": "topic-node-guard-condition-in-executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Topic node guard condition in executor (#2074)\n\n* add a test\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* rollback the node guard condition for exectuor\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174ec18912b45d36a7180",
    "number": 2072,
    "body": "This PR is for clients, service counts using it's name.\r\nRelated to https://github.com/ros2/ros2cli/pull/771\r\n\r\n\r\nSigned-off-by: leeminju531 <dlalswn531@naver.com>",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add clients & services count (#2072)\n\n* add clients & services count\r\n\r\n* add count clients,services tests\r\n\r\nSigned-off-by: leeminju531 <dlalswn531@naver.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174ed18912b45d36a7181",
    "number": 2071,
    "body": "Change README to point at the ROS Index for API \r\nCfr. PR https://github.com/ros2/rclcpp/pull/2058\r\n@clalancette ",
    "head_branch": "api-url",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "API url info fix (#2071)\n\n* Fixed API url info.\r\n\r\nSigned-off-by: jrutgeer <johan.rutgeerts@lancewood.eu>\r\n\r\n* Fix api url info in README\r\n\r\nSigned-off-by: jrutgeer <johan.rutgeerts@lancewood.eu>\r\n\r\nSigned-off-by: jrutgeer <johan.rutgeerts@lancewood.eu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ee18912b45d36a7182",
    "number": 2070,
    "body": "This is an automatic backport of pull request #2061 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2061",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "do not throw exception if trying to dequeue an empty intra-process buffer (#2061) (#2070)\n\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n(cherry picked from commit 3fb012e2e979475f5044ab0e0f9b91d336db5f46)\r\n\r\nCo-authored-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ef18912b45d36a7183",
    "number": 2069,
    "body": "This PR is part of https://github.com/ros2/ros2/issues/1361 .  In particular, what this does is take the inconsistent topic event as it comes from the rmw/rcl layer, and allows the user to register for a callback to find that out.\r\n\r\nAlong the way, some refactoring was in order.  In particular, rclcpp assumed that all events were QoS events, which is not really the case.  This PR does some renaming of things to make it clear that these events are not just for QoS, but can be for other things as well.  With that done, the last patch in the series actually implements the inconsistent topic callback.\r\n\r\nPart of https://github.com/ros2/ros2/issues/1361\r\n\r\nDepends on https://github.com/ros2/rmw/pull/339\r\nDepends on https://github.com/ros2/rcl/pull/1024",
    "head_branch": "clalancette/inconsistent-topic-event",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Hook up the incompatible type event inside of rclcpp (#2069)\n\n* Rename QOSEventHandler* to EventHandler.\r\n\r\nWe are going to be using it for more than just QOS events, so\r\nrename it to just EventHandler and EventHandlerBase for now.\r\nLeave the old names in place but deprecated.\r\n\r\n* Rename qos_event.hpp -> event_handler.hpp\r\n* Revamp incompatible_qos callback setting.\r\n* Add in incompatible type implementation.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174f018912b45d36a7184",
    "number": 2066,
    "body": "This de-duplicates some code",
    "head_branch": "ch3/bind-subscription-callbacks-in-base",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Move event callback binding to PublisherBase and SubscriptionBase (#2066)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174f218912b45d36a7185",
    "number": 2065,
    "body": "This is an automatic backport of pull request #2008 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2008",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix nullptr dereference in prune_requests_older_than (#2008) (#2065)\n\n* fix nullptr dereference in prune_requests_older_than\r\n\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\n\r\n* add tests for prune_requests_older_than\r\n\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\n\r\n* Update rclcpp/test/rclcpp/test_client.cpp\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\n\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>\r\n(cherry picked from commit 1ac37b692c4cce54f0ffeaad1f4fe3d5688322bd)\r\n\r\nCo-authored-by: andrei <akela1101@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174f318912b45d36a7186",
    "number": 2063,
    "body": "When I was building my project (CMAKE_CXX_STANDARD 20) with rclcpp on Windows, it failed with the same error as described in https://github.com/ros2/rclcpp/issues/1973 (c++17 + [permissive flag](https://learn.microsoft.com/en-us/cpp/build/reference/permissive-standards-conformance?view=msvc-170) added to MSVC). The same flag is set implicitly with C++20 because is required for C++20 Modules support.\r\n\r\nI was trying to investigate why the template in logging macro is not passing standards conformance, but I was not able to find it out. It seems to be an MSVC issue. A similar problem was reported in [Microsoft Developer Community](https://developercommunity.visualstudio.com/t/the-c2039-type-is-not-a-member-of-std-error-in-def/1562967) more than a year ago and has not been resolved yet.\r\n\r\nI used helper type aliases from `type_traits` instead of member types. This change makes rclcpp build successfully with MSVC and C++20.",
    "head_branch": "fix-msvc-build-with-cpp20",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix logging macros to build with msvc and cpp20 (#2063)\n\nSigned-off-by: Mateusz Szczygielski <mateusz.szczygielski@robotec.ai>\r\n\r\nSigned-off-by: Mateusz Szczygielski <mateusz.szczygielski@robotec.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174f418912b45d36a7187",
    "number": 2061,
    "body": "do not throw exception if trying to dequeue an empty intra-process buffer\r\n\r\nthis PR enforces the same behavior that we already follow for non-ipc messages: there, the `take_and_do_error_handling` function handles gracefully trying to get data when it's not available.\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/relax-ipc-buffer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "do not throw exception if trying to dequeue an empty intra-process buffer (#2061)\n\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174f518912b45d36a7188",
    "number": 2059,
    "body": "This is to fix seg-faults happening when compiling with `-O2` or `-O3` optimizations.\r\nThey happened because we did:\r\n\r\nhttps://github.com/ros2/rclcpp/blob/338eed0c060ab58608fc6e44c6936bde2c4e061e/rclcpp/include/rclcpp/client.hpp#L289\r\n\r\nassuming that `auto` was deduced to be a `std::function<void(size_t)>`. \r\n\r\nAnd then, to the trampoline, we say we were passing a function returning `void*` and with an arg of type `size_t`\r\nhttps://github.com/ros2/rclcpp/blob/338eed0c060ab58608fc6e44c6936bde2c4e061e/rclcpp/include/rclcpp/client.hpp#L314-L316\r\nBut when compiling with optimizations, the `auto new_callback = ...` signature seems to change to other type. So then the `trampoline` function failed when did the cast back:\r\nhttps://github.com/ros2/rclcpp/blob/338eed0c060ab58608fc6e44c6936bde2c4e061e/rclcpp/include/rclcpp/detail/cpp_callback_trampoline.hpp#L60\r\n\r\n\r\n",
    "head_branch": "mauro/fix-callback-signature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set explicitly callback type (#2059)\n\n* Set explicitly callback type\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Revert \"Set explicitly callback type\"\r\n\r\nThis reverts commit dfb4c54adb0580d976199738a8a6dcdb261a87b0.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Add type info to cpp_callback_trampoline\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174f618912b45d36a7189",
    "number": 2058,
    "body": "Changed README to point to the API doc via the rclcpp package info page at the ROS Index.",
    "head_branch": "fix-API-url",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174f718912b45d36a718a",
    "number": 2056,
    "body": "`to_rcl_subscription_options` no longer needs a template parameter, so I'm just removing it to trim bloat.",
    "head_branch": "ch3/refine-to-rcl-subscription-options",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove templating on to_rcl_subscription_options (#2056)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174f818912b45d36a718b",
    "number": 2055,
    "body": "Due to some requests in gscam2's upgrades to modern CMake, it would like to consume alias library targets for all its dependencies. This PR is to add them to rclcpp. \r\n\r\nSigned-off-by: Ryan Friedman <ryan_friedman@trimble.com>",
    "head_branch": "add_alias_libs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174f918912b45d36a718c",
    "number": 2052,
    "body": "address https://github.com/ros2/rclcpp/issues/2047\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "fujitatomoya/add-noexcept-to-get_parameter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174fa18912b45d36a718d",
    "number": 2050,
    "body": "I think `now()` can be marked as `const`. All it does is [call rcl_clock_get_now()](https://github.com/ros2/rclcpp/blob/91bc312190e61c8915b0152e5c927c987fc22d6c/rclcpp/src/rclcpp/clock.cpp#L71-L80) which [doesn't look like it modifies the clock to me](https://github.com/ros2/rcl/blob/e4f7e1367dfda83d3e309397f9201642ebe38618/rcl/src/rcl/time.c#L268-L280).\r\n\r\n* When `get_now` is `rcl_get_ros_time`: https://github.com/ros2/rcl/blob/e4f7e1367dfda83d3e309397f9201642ebe38618/rcl/src/rcl/time.c#L65-L73\r\n* When `get_now` is `rcl_get_system_time`: https://github.com/ros2/rcl/blob/e4f7e1367dfda83d3e309397f9201642ebe38618/rcl/src/rcl/time.c#L44-L48\r\n* When `get_now` is `rcl_get_steady_time`: https://github.com/ros2/rcl/blob/e4f7e1367dfda83d3e309397f9201642ebe38618/rcl/src/rcl/time.c#L36-L40",
    "head_branch": "sloretz__rclcpp__clock_now_const",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Mark rclcpp::Clock::now() as const (#2050)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662174fb18912b45d36a718e",
    "number": 2048,
    "body": "It really doesn't make much sense to have a KeepLast depth of 0; no data could possibly be stored.  Indeed, the underlying DDS implementations don't actually support this.  It currently \"works\" because a KeepLast depth of 0 is assumed to be system default, so the RMW layer typically chooses \"1\" instead.  But this isn't something we should be encouraging users to do, so add a warning.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nI'll note that I could easily be convinced to make this throw an exception instead.  That would be a much stronger warning to users not to do this, but it does break existing practice so has some risk of downstream breakage.  Happy to discuss it.",
    "head_branch": "clalancette/add-keeplast-warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in a warning for a KeepLast depth of 0. (#2048)\n\n* Add in a warning for a KeepLast depth of 0.\r\n\r\nIt really doesn't make much sense to have a KeepLast depth of 0;\r\nno data could possibly be stored.  Indeed, the underlying DDS\r\nimplementations don't actually support this.  It currently \"works\"\r\nbecause a KeepLast depth of 0 is assumed to be system default,\r\nso the RMW layer typically chooses \"1\" instead.  But this isn't\r\nsomething we should be encouraging users to do, so add a warning.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174fd18912b45d36a718f",
    "number": 2046,
    "body": "This is a rebase of \r\n- https://github.com/ros2/rclcpp/pull/1324\r\n\r\nI don't understand this code but would really like to be able to use asan in my tests.\r\n\r\nIf someone could explain this it might be helpful. My best guess from reading the other PR is that C++ allocators just don't work for some reason (or this implementation of them does not) and instead we are using some struct from rcl anyway.",
    "head_branch": "get_rcl_allocator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174fe18912b45d36a7190",
    "number": 2044,
    "body": "Signed-off-by: Lei Liu <Lei.Liu.AP@sony.com>",
    "head_branch": "topic-2039",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SharedFuture from async_send_request never becomes valid (#2044)\n\nSigned-off-by: Lei Liu <Lei.Liu.AP@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662174ff18912b45d36a7191",
    "number": 2043,
    "body": "This PR updates the maintainers and code owners. The maintainers are:\n* William Woodall (@wjwwood)\n* Ivan Paunovic (@ivanpauno)\n* Michel Hidalgo (@hidmic)\n\nThis PR was made with https://github.com/audrow/update-ros2-repos.",
    "head_branch": "audrow/update-maintainers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rolling] Update maintainers (#2043)\n\n* Update maintainers to Ivan Paunovic, Michel Hidalgo, and William Woodall\r\n\r\nSigned-off-by: Audrow Nash <audrow@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621750018912b45d36a7192",
    "number": 2041,
    "body": "Finally a longstanding quibble about Nodes and LifecycleNodes and node interfaces has a potential resolution.\r\n\r\n# Description\r\nThis PR introduces the concept of a `NodeInterfaces` class (that is, a unified adapter for any disparate collection of unique kinds of NodeInterfaces) that allows you to package interfaces into a single object. This is inspired by https://github.com/ros2/rclcpp/issues/831.\r\n\r\nThis allows you to write functions that take in a **single object** instead of a collection of node interfaces (or instead of a templated function...), and also supports both Nodes and LifecycleNodes, allowing you to quickly swap any place where you originally passed a Node with a NodeInterfaces. **This also means that the issue where Nodes and LifecycleNodes exist on separate inheritance trees can be mitigated a little by using this as a bridging class.**\r\n\r\nWhat's more, the template parameters allow you to select which interfaces are made available, **and also can serve as type hints to downstream users** for which interfaces a function requires.\r\n\r\nAdditionally, you can aggregate interfaces from different nodes (or mocked interfaces) too, which isn't something you could trivially do if you made your function a template function that takes in a NodeT!\r\n\r\n~~This PR also adds a new method for Nodes and LifecycleNodes to obtain their corresponding NodeInterfaces.~~\r\n\r\nTests have been implemented for ~~Nodes, LifecycleNodes, and~~ the NodeInterfaces template class itself.\r\n\r\n# Example\r\nThis is best explained with an example.\r\n\r\n```cpp\r\n// Suppose we have some function:\r\nvoid fn(NodeInterfaces<NodeBaseInterface, NodeClockInterface> interfaces);\r\n\r\n// Then we can, explicitly:\r\nrclcpp::Node node(\"some_node\");\r\nauto ni = NodeInterfaces<NodeBaseInterface, NodeClockInterface>(node);\r\nfn(ni);\r\n\r\n// But also, implicitly:\r\nfn(node);\r\n\r\n// Subsetting a NodeInterfaces object also works!\r\nauto ni_base = NodeInterfaces<NodeBaseInterface>(ni);\r\n\r\n// Or aggregate them (you could aggregate interfaces from disparate node-likes)\r\nauto ni_aggregated = NodeInterfaces<NodeBaseInterface, NodeClockInterface>(\r\n  node->get_node_base_interface(),\r\n  node->get_node_clock_interface()\r\n)\r\n\r\n// And then to access the interfaces:\r\n// Get with get<>\r\nauto base = ni.get<NodeBaseInterface>();\r\n\r\n// Or the appropriate getter\r\nauto clock = ni.get_clock_interface();\r\n```\r\n\r\nFor more info, [read the docstring](https://github.com/ros2/rclcpp/pull/2041/files#diff-41454f18fae63765fd951ef505f09b77ee1efe5f3945ee6d6a472f481a0b9ad3R67-R144).\r\n\r\n# Why is this useful?\r\n(Adapted from https://github.com/ros2/rclcpp/issues/831)\r\n\r\nBefore you would have to...\r\n```cpp\r\ncreate_service(\r\n  std::shared_ptr<NodeBaseInterface> node_base,\r\n  std::shared_ptr<NodeServicesInterface> node_services,\r\n  // ...\r\n\r\n// User calls with\r\nauto service = create_service(\r\n  my_node_class->get_node_base_interface(),\r\n  my_node_class->get_node_services_interface(),\r\n...\r\n```\r\n\r\nBut now you can:\r\n```cpp\r\ncreate_service(\r\n   NodeInterfaces<NodeBaseInterface, NodeServicesInterface> node_handle,\r\n   // ...\r\n\r\n// User calls with\r\nauto service = create_service(\r\n  NodeInterfaces<NodeBaseInterface, NodeServicesInterface>(my_node_or_lifecycle_node_class),\r\n  // ...\r\n```\r\n\r\nAnd in fact, implicit conversions should work too!\r\n```cpp\r\n// User calls with\r\nauto service = create_service(my_node_or_lifecycle_node_class,\r\n  // ...\r\n\r\n// This doesn't support pointers, remember to dereference!\r\n// See notes below!\r\n\r\n// INCREDIBLE!\r\n```\r\n\r\nAnd just like that you can support both Nodes and LifecycleNodes!\r\nThis also serves as an easy drop-in replacement for any method that takes in an `rclcpp::Node` or similar shared pointer!\r\n\r\n# Additional Notes\r\nThis uses C++14 compatible template metaprogramming constructs, for backportability. I'm pretty sure there are some C++17/C++20 constructs that would make the implementation more concise though.. For a future time.\r\n\r\nEDIT: I realized that fold expressions are C++17... We'll have to find some workaround when backporting. (Actually so is is_same_v :man_facepalming: )\r\n\r\n# Addendum\r\nBecause of https://github.com/ros2/rclcpp/pull/2075 , the NodeInterfaces object only accepts non-pointer node-like types. You must dereference any pointer arguments to the NodeInterfaces constructor.",
    "head_branch": "ch3/node-handle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement Unified Node Interface (NodeInterfaces class) (#2041)\n\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\nCo-authored-by: methylDragon <methylDragon@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750118912b45d36a7193",
    "number": 2040,
    "body": "This PR implements the analogues of the [isValid](https://docs.ros.org/en/latest/api/rostime/html/classros_1_1Time.html#a84cd12a499c70fb3eefce89cda2b6113) and [waitForValid](https://docs.ros.org/en/latest/api/rostime/html/classros_1_1Time.html#ab61825bb028f8c10c5e94aeca32bbfda) methods in rclcpp.\r\n\r\n~~I also added the necessary tests.~~\r\n\r\n~~Note: In this case, I added a special case for treating `RCL_CLOCK_UNINITIALIZED` as invalid as well, since there isn't an analogous clock type in the ROS 1 API.~~\r\n\r\nPinging @sloretz for visibility.\r\n\r\nEdit: Waiting on:\r\n- https://github.com/ros2/rcl/pull/1021",
    "head_branch": "ch3/clock-wait-for-valid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement validity checks for rclcpp::Clock (#2040)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750218912b45d36a7194",
    "number": 2036,
    "body": "to fix https://github.com/ros2/rclcpp/issues/2035 and https://github.com/ros2/rclcpp/issues/2038\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-fix-parameter_uninitialized_exception",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix a case that not throw ParameterUninitializedException (#2036)\n\n* fix a case that not throw ParameterUninitializedException\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* catch ParameterUninitializedException exception while calling get_parameters in service callback\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update doc\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add one more test\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* explicitly use this to call a method inside the class itself\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750318912b45d36a7195",
    "number": 2034,
    "body": "@clalancette minor doc fix, i think this is just missed from https://github.com/ros2/rclcpp/pull/2027?\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "tomoyafujita/miss_on_configure_comment_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "LifecycleNode on_configure doc fix. (#2034)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750418912b45d36a7196",
    "number": 2033,
    "body": "This is an automatic backport of pull request #1640 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-1640",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix bug that a callback not reached (#1640) (#2033)\n\n* Add a test case\r\n\r\na subscriber on a new executor with a callback group triggered to receive a message\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* fix flaky and not to use spin_some\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update for not using anti-pattern source code\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add a notify guard condition for callback group\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* Notify guard condition of Node not to be used in Executor\r\n\r\nit is only for the waitset of GraphListener\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* put code in the try catch\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* defer to create guard condition\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* use context directly for the create function\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* cpplint\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* fix that some case might call add_node after shutdown\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* nitpick and fix some potential bug\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add sanity check as some case might not create notify guard condition after shutdown\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* Cleanup includes.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* remove destroy method\r\n\r\nmake a callback group can only create one guard condition\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* remove limitation that guard condition can not be re-created in callback group\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>\r\n(cherry picked from commit d119157948720f5888d47898e1c59b56fe1f86c5)\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750518912b45d36a7197",
    "number": 2032,
    "body": "minor comment follow-up for https://github.com/ros2/rclcpp/pull/2030\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "tomoyafujita/default_thread_number_comment_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "MultiThreadExecutor number of threads is at least 2+ in default. (#2032)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621750718912b45d36a7198",
    "number": 2031,
    "body": "We should only need to update the current state when it changes, so we do that in the change_state method (which is not const). Then we can just return the current_state_ object in get_current_state, and then mark it as const.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n@fujitatomoya FYI.  Once we have this in, I think we can then rebase #1756 and it should make a lot more sense.",
    "head_branch": "clalancette/lifecycle-get-current-state-const",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make lifecycle impl get_current_state() const. (#2031)\n\nWe should only need to update the current state when it changes,\r\nso we do that in the change_state method (which is not const).\r\nThen we can just return the current_state_ object in\r\nget_current_state, and then mark it as const.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750818912b45d36a7199",
    "number": 2030,
    "body": "Signed-off-by: Alexis Paques <paa1ti@bosch.com>\r\n\r\nCloses https://github.com/ros2/rclcpp/issues/2029\r\n\r\nThis ensures the number of threads of a **Multi-threaded executor** is at least 2 unless defined explicitly as 1 (why not use the SingleThreadedExecutor?)\r\nIndeed, if we are calling a service from a callback and call the get function of the future directly, we effectively block until the service request resolves but it can't as the reply will not be processed, causing a deadlock. This is either solved by having a Multi-threaded executor and multiple callback groups for non time critical software (which has to wait for the result anyway).\r\n\r\nThe default number of threads is `std::thread::hardware_concurrency` which can be 1 for a VM or a small target. \r\nThis means those targets (or VM) will **not** be able to receive the message of an otherwise correct node, while working on everybody else's machine.\r\n\r\nThe second motivation is to solve the misconception a Multithreaded executor _always_ has multiple thread, by making it have _always_ multiple treads by default. ",
    "head_branch": "set_default_number_of_threads_to_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set the minimum number of threads of the Multithreaded executor to 2 (#2030)\n\n* Set the minimum number of threads of the Multithreaded executor to 2\r\n\r\nSigned-off-by: Alexis Paques <paa1ti@bosch.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621750918912b45d36a719a",
    "number": 2027,
    "body": "This series of patches cleans up the code that implements `LifecycleNodeInterfaceImpl`, the PIMPL interface for the `LifecycleNode` class.  In particular, it does the following things:\r\n\r\n1.  Moves the implementation from completely in a header file into a split header file/source file.  This class is not templated, so there is no reason the implementation has to be in the header file.\r\n2. Marks the `LifecycleNodeInterfaceImpl` class as `final` (nothing can possibly derive from it).\r\n3. Updates some documentation.\r\n4. Marks a number of methods inside of `LifecycleNodeInterfaceImpl` as `const`.\r\n5. Makes quite a bit of the internals of `LifecycleNodeInterfaceImpl` private.\r\n6. Disables copies of `LifecycleNodeInterfaceImpl`.\r\n7. Marks some methods from `LifecycleNode` as const.\r\n\r\nThe main goal here is cleanup, but this should also make PRs like https://github.com/ros2/rclcpp/pull/1756 more clear.\r\n\r\n@fujitatomoya please take a look when you get a chance.",
    "head_branch": "clalancette/cleanup-lifecycle-impl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup the lifecycle implementation (#2027)\n\n* Split lifecycle_node_interface_impl into header and implementation.\r\n\r\nThere is no reason it should all be in the header file.  No\r\nfunctional change.\r\n\r\n* Mark LifecycleNodeInterfaceImpl as final.\r\n\r\n* Update documentation about return codes.\r\n\r\n* Mark a bunch of LifecycleNodeInterfaceImpl methods as const.\r\n\r\n* Make most of LifecycleNodeInterfaceImpl private.\r\n\r\n* Mark some LifecycleNode methods as const.\r\n\r\n* Disable copies on LifecycleNodeInterfaceImpl.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750a18912b45d36a719b",
    "number": 2026,
    "body": "This is an automatic backport of pull request #1995 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-1995",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix mismatched issue if using zero_allocate (#1995) (#2026)\n\n* fix mismatched issue if uzing zero_allocated\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n(cherry picked from commit 978439191fdb3924af900a506dd35b68f8da725c)\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621750b18912b45d36a719c",
    "number": 2024,
    "body": "The PR https://github.com/ros2/rclcpp/pull/2002 has introduced a data race on entities destruction (which this PR fixes).\r\nFor example on destruction of a service, since the service is declared [first](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/service.hpp#L265), and the callback is declared [last](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/service.hpp#L273):\r\n```\r\nServiceBase::~ServiceBase() {\r\n  // Implicitly, the callback is destroyed before the rmw service, due order of declaration\r\n  ~on_new_request_callback_    \r\n  \r\n  // Before the service is destroyed, the rmw service callback points to a destroyed\r\n  // function, which if called causes a segmentation fault.\r\n  ~service_handle_\r\n}\r\n```\r\n\r\nSo this PR changes the order of declaration, ensuring callbacks are destroyed last on entities destruction, avoiding the gap in time in which rmw entities hold a reference to a destroyed function. So all works fine!\r\n\r\nI could just close the PR description here since issue is gone, but would be nice to discuss:\r\n\r\nWhat if we don't want to rely on this particular ordering of destruction? Because someone could unawarely change the ordering of declaration in the future.\r\n\r\nOne solution could be reverting https://github.com/ros2/rclcpp/pull/2002, i.e. clearing callbacks before destruction, which works for subscription/clients, but introduces again an issue on services, which should be fixed somehow:\r\n```\r\nServiceBase::~ServiceBase() {\r\n  clear_on_new_request_callback(); // Now rmw callback is set to null\r\n  // The function above internally tries to access the underlying service_handle_,\r\n  // which could have already been fini'ed, so seg-faults. \r\n}\r\n```\r\nThe issue is that there is a particular [Service constructor](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/service.hpp#L404-L420), which allows `rcl` to own the service, so even before the (implicit) call of `~ServiceBase()`, the underlying `rmw_service` has already been destroyed.\r\n\r\nI've been looking on how to check if the `rmw_service` has already been destroyed, but there is no currently way to do it. \r\nThere is a (currently unused) [owns_rcl_handle_](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/service.hpp#L266) bool, which could be leveraged to verify that. So if done, we could have something like:\r\n```\r\nServiceBase::~ServiceBase() {\r\n  if (owns_rcl_handle_) {\r\n    clear_on_new_request_callback(); \r\n  } else {\r\n    // callback_cleared_ could be a bool set to true when user assigns callback, and \r\n    // set to false when the user clears the callback\r\n    if (!callback_cleared_) {\r\n      throw(\"Owner of ServiceBase should have cleared the callback\");\r\n    }\r\n  }\r\n}\r\n```\r\n",
    "head_branch": "mauro/fix-data-race",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Declare rclcpp callbacks before the rcl entities (#2024)\n\nThis is to ensure callbacks are destroyed last\r\non entities destruction, avoiding the gap in time\r\nin which rmw entities hold a reference to a\r\ndestroyed function.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621750c18912b45d36a719d",
    "number": 2023,
    "body": "We removed unneeded includes where nothing is used from in the respective file. We made sure it compiles within ros2_foxy.",
    "head_branch": "foxy-opti",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621750d18912b45d36a719e",
    "number": 2022,
    "body": "Signed-off-by: Crola1702 <cristobal.arroyo@ekumenlabs.com>\r\n\r\nCpplint test is timing out on Windows machines. \r\n\r\n```\r\n  3/104 Test   #3: cpplint ................................................***Timeout 120.01 sec\r\n```\r\n\r\n| line | duration |\r\n| ----- | ---------- |\r\n|`3:  - C:/ci/ws/install/Scripts/ament_cpplint.exe --xunit-file C:/ci/ws/build/rclcpp/test_results/rclcpp/cpplint.xunit.xml` | +6 seconds |\r\n| `3: Done processing C:\\ci\\ws\\src\\ros2\\rclcpp\\rclcpp\\include\\rclcpp\\node_interfaces\\node_time_source_interface.hpp` [File](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/include/rclcpp/node_interfaces/node_time_source_interface.hpp) | +6 seconds |\r\n| `03:51:30.157  3: Done processing C:\\ci\\ws\\src\\ros2\\rclcpp\\rclcpp\\src\\rclcpp\\init_options.cpp` [File](https://github.com/ros2/rclcpp/blob/rolling/rclcpp/src/rclcpp/init_options.cpp) | +4 seconds |\r\n\r\nReference build: https://ci.ros2.org/view/nightly/job/nightly_win_deb/2503/\r\n\r\nRunning CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=17467)](http://ci.ros2.org/job/ci_linux/17467/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=11996)](http://ci.ros2.org/job/ci_linux-aarch64/11996/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=18002)](http://ci.ros2.org/job/ci_windows/18002/)\r\n",
    "head_branch": "Crola1702/fix-cpplint-timeout",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Set cpplint test timeout to 3 minutes (#2022)\n\nSigned-off-by: Crola1702 <cristobal.arroyo@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621750e18912b45d36a719f",
    "number": 2021,
    "body": "That is, make sure they are all listed in package.xml, found in the CMakeLists.txt, and properly included where they are used.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nThere should be no functional change from this PR; I just noticed all of this while reviewing other PRs touching the lifecycle stuff.",
    "head_branch": "clalancette/cleanup-rclcpp-lifecycle-deps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup the rclcpp_lifecycle dependencies. (#2021)\n\nThat is, make sure they are all listed in package.xml, found\r\nin the CMakeLists.txt, and properly included where they are\r\nused.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621750f18912b45d36a71a0",
    "number": 2019,
    "body": "If rclcpp is inited with rclcpp::SignalHandlerOptions::None,  signal_handler_thread will not be created.\r\n\r\nChecking thread whether is joinable before join is a solution to this little bug.",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "check thread whether joinable before join (#2019)\n\nSigned-off-by: uupks <uupks0325@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751118912b45d36a71a1",
    "number": 2018,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nThis may help the compile error we are seeing in https://github.com/ros2/geometry2/pull/555 .  Even if it doesn't, it is the right thing to do.",
    "head_branch": "clalancette/rclcpp-node-interface-includes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure to include-what-you-use in the node_interfaces. (#2018)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751218912b45d36a71a2",
    "number": 2017,
    "body": "This pull request is actually more meant as a question, rather than an actual request to merge or a bug report. But I am quite sure that something is fishy here, and that the proposed patch may at least help to mitigate the issue. So here it is:\r\n\r\n### What is the expected behavior of rclcpp in case of an exception raised in a user callback?\r\n\r\nI tried to find some information about this topic in the [documentation](https://docs.ros.org/en/rolling/Concepts/About-Executors.html), in the [code](https://github.com/ros2/rclcpp), on [GitHub](https://github.com/search?q=rclcpp+callback+exception&type=issues), on [Discourse](https://discourse.ros.org/search?q=rclcpp%20callback%20exception), on [ROS Answers](https://answers.ros.org/questions/), but failed to find something conclusive, or maybe used the wrong search terms. Only [this post](https://discourse.ros.org/t/my-ros2-minimal-examples-difficulties-coming-from-ros1/18705/13?u=johannesmeyer) and [this answer](https://answers.ros.org/question/356549/how-to-handle-exceptions-in-the-user-defined-callback-in-service-server-and-how-to-inform-service-client-about-the-failed-service-call-in-ros2-rclcpp/) seem to be related. For the special case of service callbacks I remember having seen a discussion/feature request to forward exceptions to the caller as a special response like in ROS 1, but did not find it anymore now.\r\n\r\n1. _User callbacks must never throw?_\r\n\r\n   They do. I triggered the case by using the [`ros1_bridge`](https://github.com/ros2/ros1_bridge) with a service server in ROS 1 and a client calling it from ROS 2: If the ROS 1 service is not available anymore, for example because the ROS 1 node died, the callback defined in [`ServiceFactory<ROS1_T, ROS2_T>::forward_2_to_1()`](https://github.com/ros2/ros1_bridge/blob/b9f1739fd84fc877a8ec6e5c416b65aa2d782f89/include/ros1_bridge/factory.hpp#L282-L293) throws a runtime error after the roscpp service call API returned false. Also any ROS 2 middleware can throw exceptions, I assume, when the user callback invokes a publisher or service client itself. Apparently it is even [recommended to handle errors by throwing exceptions](https://docs.ros.org/en/rolling/The-ROS2-Project/Contributing/Migration-Guide.html#use-of-service-objects).\r\n\r\n   So if the rule would be that user callbacks must handle exceptions internally, I guess `ros1_bridge` and numerous other node implementations would need to be fixed.\r\n\r\n2. _Did I miss a place where this is already handled within rclcpp?_\r\n\r\n   Even rclcpp code itself may throw exceptions in the `Executor` code path while spinning, for example [here](https://github.com/ros2/rclcpp/blob/6a8c61c0269187c9505632647f6a9f5698b523e8/rclcpp/src/rclcpp/executor.cpp#L536-L538).\r\n\r\n   If that is not the case yet, maybe a per executor, per node or per context flag would be nice-to-have, that decides whether exceptions are unhandled like it seems to be the case now, or whether rclcpp catches and logs them internally. Or some mechanism to register a user callback that receives an [`std::exception_ptr`](https://en.cppreference.com/w/cpp/error/exception_ptr) and whose return value decides whether the executor continuous or aborts...\r\n\r\n3. _Always catch exceptions when spinning?_\r\n\r\n    As a last resort, I wanted to patch the [main loop of the `dynamic_bridge`](https://github.com/ros2/ros1_bridge/blob/b9f1739fd84fc877a8ec6e5c416b65aa2d782f89/src/dynamic_bridge.cpp#L795-L799) (and other nodes), such that exceptions get logged, but the node does not terminate and continues to forward other topics and service calls. But that is not possible without the patch proposed here:\r\n\r\n   ```cpp\r\n   // ROS 2 spinning loop\r\n   rclcpp::executors::SingleThreadedExecutor executor;\r\n   while (ros1_node.ok() && rclcpp::ok()) {\r\n     try {\r\n       executor.spin_node_once(ros2_node);\r\n     } catch (std::exception& e) {\r\n       // Log the exception and continue spinning...\r\n     }\r\n   }\r\n   ```\r\n\r\n   The problem is that it triggers the \"Node has already been added to an executor\" exception [here](https://github.com/ros2/rclcpp/blob/6a8c61c0269187c9505632647f6a9f5698b523e8/rclcpp/src/rclcpp/executor.cpp#L256-L258) in the next cycle after the exception, and hence keeps logging in a loop. So maybe the executor needs to be recreated to recover? Or I could call `executor.remove_node(ros2_node)` in the catch body as a workaround? That was the point where I started to investigate the problem and ended up here.\r\n\r\n   The proposed patch would fix that, I think, by removing the node from the executor before the exception is rethrown to be handled in `main()` or whereever else `spin_once()` has been called from. I have not actually tested it yet by compiling rclcpp from source. I also may have missed other places where `add_node()` and `remove_node()` gets called in pairs. Maybe a better design would involve a [RAII-style class](https://en.cppreference.com/w/cpp/language/raii) that adds a node in its constructor and removes it again in its destructor? Seems like [`RCPPUTILS_SCOPE_EXIT()`](https://github.com/ros2/rcpputils/blob/358b62b672094470e61c2edf19ecda51845de8ec/include/rcpputils/scope_exit.hpp#L65-L66) is meant exactly for those use cases and should be applied instead of my try/catch block, but I only discovered it while writing this.\r\n\r\n   The same pattern that involves a loop with `rclcpp::ok()` and `rclcpp::spin_once()` directly in `main()` can be found in many other places, too, e.g. [here](https://github.com/ros2/rclcpp/issues/3#issuecomment-369365541). I am not sure whether rclpy is also affected, but in [ROS2 Python examples](https://github.com/ros2/examples/tree/rolling/rclpy) the equivalent pattern is [even dominant](https://github.com/ros2/examples/search?q=spin_once).\r\n\r\n   For the more simple `rclcpp::spin(node)` call an extra loop would need to be added to keep spinning after an exception.\r\n\r\nI can almost not believe that there is no foreseen or documented way to prevent that any minor fault terminates the whole process, or that this behavior is \"by design\"? I am sorry in case there is something more obvious, and I just missed it.\r\n\r\nIt is easy to reproduce the crash with the [`minimal_service` example](https://github.com/ros2/examples/blob/0410665143fd89b33e98b4c7d90829b32a6158f7/rclcpp/services/minimal_service/main.cpp) in [ros2/examples](https://github.com/ros2/examples), by adding a throw statement in the callback:\r\n\r\n```sh\r\n$ ros2 run examples_rclcpp_minimal_service service_main &\r\n[1] 353822\r\n$ ros2 service call /add_two_ints example_interfaces/srv/AddTwoInts \"{}\"\r\nrequester: making request: example_interfaces.srv.AddTwoInts_Request(a=0, b=0)\r\n\r\n[INFO] [1663789664.837616992] [minimal_service]: request: 0 + 0\r\nterminate called after throwing an instance of 'std::runtime_error'\r\n  what():  some error\r\n^C[1]+  Exit 250                ros2 run examples_rclcpp_minimal_service service_main\r\n$ \r\n```",
    "head_branch": "fix/remove-node-from-executor-on-exception-while-spinning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751318912b45d36a71a3",
    "number": 2016,
    "body": "This is an automatic backport of pull request #2013 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/foxy/pr-2013",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751418912b45d36a71a4",
    "number": 2015,
    "body": "This is an automatic backport of pull request #2013 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/galactic/pr-2013",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751518912b45d36a71a5",
    "number": 2014,
    "body": "This is an automatic backport of pull request #2013 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>",
    "head_branch": "mergify/bp/humble/pr-2013",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751618912b45d36a71a6",
    "number": 2013,
    "body": "related to https://github.com/ros2/rcl/issues/1009#issuecomment-1248946519\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-use-unique-ptr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use unique ptr and remove unuseful container (#2013)\n\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751718912b45d36a71a7",
    "number": 2010,
    "body": "... and fixes the bug introduced in the original PR.",
    "head_branch": "ivanpauno/fix-create-timer-bug",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Revert \"Add a create_timer method to Node and `LifecycleNode` classes (#1975)\" (#2009) (#2010)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621751918912b45d36a71a8",
    "number": 2009,
    "body": "This reverts #1975 because it seems to have caused a build error in `tf2_ros`.\r\n\r\nhttps://github.com/ros2/rclcpp/pull/1975#issuecomment-1231953781\r\n\r\n\r\nNext steps:\r\n\r\n* If the issue is a bug, then please open a PR again to rclcpp with a fix\r\n* If the issue is it changed an API used by tf2_ros, then please open a PR on rclcpp again plus open a PR on the [geometry2 repo](https://github.com/ros2/geometry2/) that updates its use of the API. \r\n\r\n\r\n@asymingt + @ivanpauno + @jacobperron  FYI",
    "head_branch": "sloretz__revert_1975",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Add a `create_timer` method to `Node` and `LifecycleNode` classes (#1975)\" (#2009)\n\nThis reverts commit 6167a575b3eb85c90240e20736f4e5823ac4c681.\r\n\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\n\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621751a18912b45d36a71a9",
    "number": 2008,
    "body": "Fixes #2007",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix nullptr dereference in prune_requests_older_than (#2008)\n\n* fix nullptr dereference in prune_requests_older_than\r\n\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\n\r\n* add tests for prune_requests_older_than\r\n\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\n\r\n* Update rclcpp/test/rclcpp/test_client.cpp\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\n\r\nSigned-off-by: akela1101 <akela1101@gmail.com>\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751b18912b45d36a71aa",
    "number": 2006,
    "body": "This PR addresses the #1990. Basically it gives the timers API the possibility to select the number of times the timer will be triggered and be canceled after that using a variable. This variable (`amount_of_callbacks`) have the default value of `0` which indicates that the timer will be triggered infinite times until it is 'manually' cancelled, i.e., the same behavior the times have at the moment. For example, initializing the timer with `amount_of_callbacks = 1`, would create an one shot timer, which would be triggered once and then would be canceled.",
    "head_branch": "voldivh/callback_counter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751c18912b45d36a71ab",
    "number": 2005,
    "body": "Signed-off-by: Voldivh <eloyabmfcv@gmail.com>\r\n\r\nThis PR addresses the issue #1980. Basically it gives the timers API a variable that enables or disables the start of the timer at initialization. The variable `autostart` is defaulted to `True` in order to avoid any breaks in current use of the API. In order to start the timer if `autostart = false` you can simply call the method `timer->reset()`. This PR is dependant on modifications on this [PR at the RCL package](https://github.com/ros2/rcl/pull/1004) and should be merged after that one.",
    "head_branch": "voldivh/autostart",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Modifies timers API to select autostart state (#2005)\n\n* Modifies timers API to select autostart state\r\n\r\n* Removes unnecessary variables\r\n\r\n* Adds autostart documentation and expands some timer test\r\n\r\nSigned-off-by: Voldivh <eloyabmfcv@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621751d18912b45d36a71ac",
    "number": 2004,
    "body": "This is an automatic backport of pull request #1657 done by [Mergify](https://mergify.com).\nCherry-pick of 0659d829cec5a39c6ad861d597b4aa9aee224a25 has failed:\n```\nOn branch mergify/bp/foxy/pr-1657\nYour branch is up to date with 'origin/foxy'.\n\nYou are currently cherry-picking commit 0659d829.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   rclcpp/test/rclcpp/test_intra_process_manager_with_allocators.cpp\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/include/rclcpp/publisher_options.hpp\n\tboth modified:   rclcpp/include/rclcpp/subscription_options.hpp\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1657",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Do not attempt to use void allocators for memory allocation. (backport #1657) (#2004)\n\n* Do not attempt to use void allocators for memory allocation. (#1657)\r\n\r\nKeep a rebound allocator for byte-sized memory blocks around\r\nfor publisher and subscription options.\r\n\r\nFollow-up after 1fc2d58799a6d4530522be5c236c70be53455e60\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n(cherry picked from commit 0659d829cec5a39c6ad861d597b4aa9aee224a25)\r\n\r\n# Conflicts:\r\n#\trclcpp/include/rclcpp/publisher_options.hpp\r\n#\trclcpp/include/rclcpp/subscription_options.hpp\r\n\r\n* fix conflicts\r\n\r\nSigned-off-by: Dharini Dutia <dharini@openrobotics.org>\r\n\r\n---------\r\n\r\nSigned-off-by: Dharini Dutia <dharini@openrobotics.org>\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>\r\nCo-authored-by: Dharini Dutia <dharini@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751e18912b45d36a71ad",
    "number": 2003,
    "body": "This is an automatic backport of pull request #1657 done by [Mergify](https://mergify.com).\nCherry-pick of 0659d829cec5a39c6ad861d597b4aa9aee224a25 has failed:\n```\nOn branch mergify/bp/galactic/pr-1657\nYour branch is up to date with 'origin/galactic'.\n\nYou are currently cherry-picking commit 0659d829.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   rclcpp/test/rclcpp/test_intra_process_manager_with_allocators.cpp\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/include/rclcpp/publisher_options.hpp\n\tboth modified:   rclcpp/include/rclcpp/subscription_options.hpp\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1657",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621751f18912b45d36a71ae",
    "number": 2002,
    "body": "Removing these not-necessary clearings of listener callbacks, since the objects are being destroyed anyway.\r\n\r\nThis also fixes a bug (use-after-free) happening during services destruction:\r\nhttps://github.com/ros2/rclcpp/blob/3d69031d2a614cf02dc10ea5db153471ea32b1f2/rclcpp/src/rclcpp/service.cpp#L35-L38\r\n\r\nOn detail:\r\n```\r\nServiceBase::~ServiceBase()\r\n{\r\n  // Here, implicitly, the deleter of service_handle_ was being called (*),\r\n  // freeing the service listener (**):\r\n  // ~service_handle_\r\n  \r\n  // Then, the following was called, which tries to access the freed mem (thus seg-fault) (***)\r\n  clear_on_new_request_callback();\r\n}\r\n```\r\n(*) https://github.com/ros2/rclcpp/blob/3d69031d2a614cf02dc10ea5db153471ea32b1f2/rclcpp/include/rclcpp/service.hpp#L316-L327\r\n\r\n(**) https://github.com/ros2/rmw_fastrtps/blob/dbee45ec67104db51b96da9693466f7a14e2f000/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L132\r\n\r\n(***) https://github.com/ros2/rmw_fastrtps/blob/dbee45ec67104db51b96da9693466f7a14e2f000/rmw_fastrtps_shared_cpp/src/rmw_service.cpp#L170\r\n\r\nFYI @alsora \r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>",
    "head_branch": "mauro/not-clear-callbacks-on-destruction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Do not clear entities callbacks on destruction (#2002)\n\n* Do not clear entities callbacks on destruction\r\n\r\nRemoving these clearings since they were not necessary,\r\nsince the objects are being destroyed anyway.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Fix CI\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Restore clear_on_ready_callback on ~QOSEventHandlerBase\r\n\r\nNeeded since QOSEventHandlerBase does not own\r\nthe pub/sub listeners. So the QOSEventHandler\r\ncan be destroyed while the corresponding listeners\r\nare still alive, so we need to clear these callbacks.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Add coment on clearing callback for QoS event\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752018912b45d36a71af",
    "number": 2001,
    "body": "We need to fix the type of allocator passed to a publisher and a subscriber, otherwise, extra memory space is allocated at various parts of `rcl`.\r\nFor instance, a memory area of size `sizeof(rcutils_string_map_impl_t) * sizeof(MessageT)` is allocated [here](https://github.com/ros2/rcutils/blob/galactic/src/string_map.c#L62).\r\n\r\nThis bug not only causes extra memory consumption, but also causes `std::bad_alloc` in the publisher (and subscriber) that handles the message type when a huge message (larger than a few hundred MB) such as static size array is defined.\r\n\r\nbackport  #1657\r\n\r\nSigned-off-by: Takahiro Ishikawa <sykwer@gmail.com>",
    "head_branch": "sykwer/galactic_backport_fix_memory_allocation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621752218912b45d36a71b0",
    "number": 2000,
    "body": "force  a compiler warning if callback handles are not captured. \r\nclarify documentation to show that not capturing returned handles\r\nwill result in callbacks immediately being unregistered\r\nsee issue https://github.com/ros2/rclcpp/issues/1998\r\nSigned-off-by: Jason Beach",
    "head_branch": "rolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "force compiler warning if callback handles not captured (#2000)\n\nclarify documentation to show that not capturing returned handles\r\nwill result in callbacks immediately being unregistered\r\n\r\nSigned-off-by: Jason Beach <jason.m.beach@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752318912b45d36a71b1",
    "number": 1999,
    "body": "Changes the string representation of `rclcpp_action::GoalUUID`s to match the canonical format described in [RFC 4122](https://www.rfc-editor.org/rfc/rfc4122.html#section-3). (The current representation doesn't contain hyphens and omits the leading zero in the hex of a byte.)",
    "head_branch": "fix-uuid-to-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the GoalUUID to_string representation (#1999)\n\n* Fix expected results of the goal_uuid_to_string test\r\n\r\nSigned-off-by: Nathan Wiebe Neufeldt <nwiebeneufeldt@clearpath.ai>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752418912b45d36a71b2",
    "number": 1995,
    "body": "to fix https://github.com/ros2/rclcpp/issues/1996\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-retyped_zero_allocate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix mismatched issue if using zero_allocate (#1995)\n\n* fix mismatched issue if uzing zero_allocated\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621752518912b45d36a71b3",
    "number": 1994,
    "body": "to fix https://github.com/ros2/rclcpp/issues/1993\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "toipc-memory-leak-param-client",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix memory leak (#1994)\n\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621752618912b45d36a71b4",
    "number": 1992,
    "body": "to implement https://github.com/ros2/rclcpp/issues/1997\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-parameter-client-params-file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "support regex match for parameter client (#1992)\n\n* support regex match for parameter client\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* address review that change behavior of a public method\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* remove an unnecessary comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update gmock compilation setting\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752718912b45d36a71b5",
    "number": 1991,
    "body": "address a part of https://github.com/ros2/rclcpp/issues/1970\r\n\r\nSigned-off-by: Lei Liu <Lei.Liu.AP@sony.com>",
    "head_branch": "issues-1970",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621752818912b45d36a71b6",
    "number": 1988,
    "body": "Signed-off-by: Tyler Weaver <maybe@tylerjw.dev>\r\n",
    "head_branch": "duration_operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "operator+= and operator-= for Duration (#1988)\n\n* operator+= and operator-= for Duration\r\n\r\nSigned-off-by: Tyler Weaver <maybe@tylerjw.dev>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752a18912b45d36a71b7",
    "number": 1987,
    "body": "This is an automatic backport of pull request #1839 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1839",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use regex for wildcard matching (backport #1839) (#1987)\n\n* use regex for wildcard matching (#1839)\r\n\r\n* use regex for wildcard matching\r\n\r\nCo-authored-by: Aaron Lipinski <aaron.lipinski@roboticsplus.co.nz>\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* use map to process the content of parameter file by order\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add more test cases\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* try to not decrease the performance and make the param win last\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update node name\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update document comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add more test for parameter_map_from\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nCo-authored-by: Aaron Lipinski <aaron.lipinski@roboticsplus.co.nz>\r\n(cherry picked from commit 6dd3a0377bbacd07fa6ed3c9e70c6de70931b45f)\r\n\r\n* not to break ABI\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752b18912b45d36a71b8",
    "number": 1986,
    "body": "This is an automatic backport of pull request #1839 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/humble/pr-1839",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use regex for wildcard matching (backport #1839) (#1986)\n\n* use regex for wildcard matching (#1839)\r\n\r\n* use regex for wildcard matching\r\n\r\nCo-authored-by: Aaron Lipinski <aaron.lipinski@roboticsplus.co.nz>\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* use map to process the content of parameter file by order\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add more test cases\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* try to not decrease the performance and make the param win last\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update node name\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update document comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add more test for parameter_map_from\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nCo-authored-by: Aaron Lipinski <aaron.lipinski@roboticsplus.co.nz>\r\n(cherry picked from commit 6dd3a0377bbacd07fa6ed3c9e70c6de70931b45f)\r\n\r\n* not to break ABI\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752c18912b45d36a71b9",
    "number": 1985,
    "body": "This PR is part of a prototype implementation for https://github.com/ros-infrastructure/rep/pull/360 https://github.com/ros2/ros2/issues/1285. \r\n\r\nDepends on: https://github.com/ros2/rcl/pull/997",
    "head_branch": "service_introspection",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Service introspection (#1985)\n\n* Implementation of service introspection.\r\n\r\nTo do this, we add a new method on the Client and\r\nService classes that allows the user to change the\r\nintrospection method at runtime.  These end up calling\r\ninto the rcl layer to do the actual configuration,\r\nat which point service introspection messages will be\r\nsent as configured.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nSigned-off-by: Brian Chen <brian.chen@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752d18912b45d36a71ba",
    "number": 1984,
    "body": "rebind is deprecated in c++17 and removed in c++20\r\n\r\nbackporting https://github.com/ros2/rclcpp/pull/1678 to galactic so it can build with c++20",
    "head_branch": "connor_1678_galactic_patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621752e18912b45d36a71bb",
    "number": 1982,
    "body": "Signed-off-by: Jeffery Hsu [jefferyyjhsu@gmail.com](mailto:jefferyyjhsu@gmail.com)\r\nThis PR adds the option for selecting clock source in Node/LifecycleNode thru NodeOptions.\r\nA similar option is already present in rclcpp::Timer but it is currently missing in Nodes/LifecycleNode. There's currently no way to set Node::now() and all other time-related functions to use clock sources other than ROS_TIME.",
    "head_branch": "Add-options-for-different-clock-type-in-ROS-2-node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add clock type to node_options (#1982)\n\n* add clock type to node_options and change node/lifecycle_node constructor accordingly\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Modify TimeSource::NodeState class to work with different clock types. Add test cases.\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Change on_parameter_event to output RCLCPP_ERROR and check\r\nros_time_active_ in ClocksState::attachClock()\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Remove a redundant include\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* Disallow setting use_sim_time to true if a clock_type can't support it.\r\nFollowing the reasoning in c54a6f1cd2b5bfbe530c362ad7e8fa22f753e325, on_set_parameters doesn't try to enforce use_sim_time to be of boolean type explicitly.\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* minior style change\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\n* remove reason string for successful result\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>\r\n\r\nSigned-off-by: Jeffery Hsu <jefferyyjhsu@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621752f18912b45d36a71bc",
    "number": 1981,
    "body": "I've been burned by ignoring the return value and so has a few others -- adding a note about the lifetime of the registered callback being tied to the returned callback handle further up the documentation should help others avoid making the same mistake.\r\n\r\nSigned-off-by: Brian Chen <brian.chen@openrobotics.org>",
    "head_branch": "brianc/on_post_set_docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[docs] add note about callback lifetime for {on, post}_set_parameter_callback (#1981)\n\n[docs] add note about {on, post, pre}_set_parameter_callback lifetime\r\n\r\nSigned-off-by: Brian Chen <brian.chen@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753018912b45d36a71bd",
    "number": 1979,
    "body": "Based on https://github.com/ros2/rcl/pull/995, this PR adds support for the \"on reset\" callback for timers.\r\n\r\nThe issue which originated this need, is to wake up an events based executor when a timer is reset (which could also be caused by a time jump).\r\n\r\n@alsora ",
    "head_branch": "mauro/add-timer-on-reset-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for timers on reset callback (#1979)\n\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\nCo-authored-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621753118912b45d36a71be",
    "number": 1978,
    "body": "Address #1967 ",
    "head_branch": "topic-parameter-qos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make ParameterService and Sync/AsyncParameterClient accept rclcpp::QoS (#1978)\n\n* Make ParameterService and Sync/AsyncParameterClient accept rclcpp::QoS\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Avoid deprecated function using another deprecated function\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621753218912b45d36a71bf",
    "number": 1976,
    "body": "I'm running humble on an older version of embedded linux thats stuck with gcc 7.5. For some reason it didn't like this auto declaration. Could we get this pushed into rolling and humble branches?\r\n\r\nThis should resolve https://github.com/ros2/rclcpp/issues/1963",
    "head_branch": "gcc7.5-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753418912b45d36a71c0",
    "number": 1975,
    "body": "## Problem\r\nRight now the `Node` and `LifecycleNode` classes only provide a method for creating a wall timer, even though the underlying functions for creating a generic timer (which respects ROS time via `/clock`) are available. This is a problem because those that write node implementations -- and especially those that come from a ROS1 background -- default to using `{Node, LifecycleNode}::create_wall_timer` not understanding the implications this decision has on timer behavior in replay, and especially when `ros2 bag play --rate` is used. The existing method of creating the correct timer type is opaque: it requires knowledge of free-functions in `rclcpp`.\r\n\r\nRelates to issues:\r\n- https://github.com/ros2/rclcpp/issues/465\r\n- https://github.com/ros2/rclcpp/issues/1259\r\n\r\nRelates to pull requests:\r\n- https://github.com/ros2/rclcpp/pull/1982\r\n\r\n## Fix\r\nThis PR adds the piping to allow a timer that respects `/clock` when `use_sim_time: True` node parameter is set. While it is possible to do this manually with `rclcpp::create_timer` it's much less convenient. An analogous function [already exists](https://github.com/ros2/rclpy/blob/rolling/rclpy/rclpy/node.py#L1485-L1514) in `rclpy`.\r\n\r\n## Progress\r\n- [x] Add the `create_timer` method to `Node` class.\r\n- [x] Take care of edge cases in `chrono::duration` casts.\r\n- [x] Add unit tests to `create_timer`, `timer_source` and `timer`.\r\n- [x] Debug `TestTimeSource.check_sim_time_updated_in_callback_if_use_clock_thread`.\r\n- [x] Update`LifecycleNode` to also support `create_timer`.\r\n- [x] Refactor `create_timer` to drop raw pointers and have common error checks. ",
    "head_branch": "asymingt/add-create-timer-function-to-node-class",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a `create_timer` method to `Node` and `LifecycleNode` classes (#1975)\n\nSigned-off-by: Andrew Symington <andrew.c.symington@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621753518912b45d36a71c1",
    "number": 1974,
    "body": "#1968 \r\nIt's not mandatory. I would like to keep consistent with the other two methods.\r\n\r\nSome other repositories are as follows,\r\n\r\nhttps://github.com/ros2/demos/pull/569\r\nhttps://gitlab.com/ros-tracing/ros2_tracing/-/merge_requests/298\r\n\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-shared-future",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753618912b45d36a71c2",
    "number": 1971,
    "body": "Related to https://github.com/ros2/rcl/pull/992.\r\n\r\nTo make callback dispatching work, I generalized `dispatch()` to work with both const and non-const messages. Maybe there is a better way.",
    "head_branch": "const_loaned_message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753718912b45d36a71c3",
    "number": 1969,
    "body": "Follow up to #1964, this allows using `rclcpp::QoS` with `create_service` and deprecates the version taking `rmw_qos_profile_t`",
    "head_branch": "sloretz__create_service_qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make create_service accept rclcpp::QoS (#1969)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621753818912b45d36a71c4",
    "number": 1965,
    "body": "That is, it returns false if shutdown has been called, and\r\ntrue in all other circumstances.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nAs pointed out by @jasonbeach in https://github.com/ros2/rclcpp/issues/3#issuecomment-1159486639",
    "head_branch": "clalancette/fix-rclcpp-ok-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix the documentation for rclcpp::ok to be accurate. (#1965)\n\nThat is, it returns false if shutdown has been called, and\r\ntrue in all other circumstances.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753918912b45d36a71c5",
    "number": 1964,
    "body": "This adds a version of `create_client` that accepts `rclcpp::QoS` instead of `rmw_qos_profile_t`. It's available via `rclcpp::create_client`, `rclcpp::Node::create_client`, and `rclcpp_lifecycle::LifecycleNode::create_client`.\r\n\r\nWhile here I also made the implementation of `rclcpp_lifecycle::LifecycleNode::create_client` use the free function `rclcppp::create_client`.",
    "head_branch": "sloretz__create_client_qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make create_client accept rclcpp::QoS (#1964)\n\n* Make create_client accept rclcpp::QoS\r\n\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\n\r\n* Deprecate passing rmw_qos_profile_t to create_client\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621753a18912b45d36a71c6",
    "number": 1958,
    "body": "Signed-off-by: Tyler Weaver <tylerjw@gmail.com>\r\n\r\nThis is in support of this PR: https://github.com/ros/class_loader/pull/199",
    "head_branch": "class_loader_api_changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753b18912b45d36a71c7",
    "number": 1957,
    "body": "Reverts ros2/rclcpp#1956\r\n\r\nAn un-revert of https://github.com/ros2/rclcpp/pull/1874, see https://github.com/ros2/rclcpp/pull/1874#issuecomment-1165811614.",
    "head_branch": "revert-1956-revert-1874-hliberacki/timeout",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753c18912b45d36a71c8",
    "number": 1956,
    "body": "Reverts ros2/rclcpp#1874\r\n\r\nSee the reason here: https://github.com/ros2/rclcpp/pull/1874#issuecomment-1165811614",
    "head_branch": "revert-1874-hliberacki/timeout",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Introduce executors new spin_for method, replace spin_until_future_complete with spin_until_complete. (#1821) (#1874)\" (#1956)\n\nThis reverts commit 3c8e89d17c5638450f55162a959307014385cbd2."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621753e18912b45d36a71c9",
    "number": 1951,
    "body": "depends https://github.com/ros2/rmw_fastrtps/pull/568.\r\nsince [that](https://github.com/ros2/rmw_fastrtps/pull/568) will enable rmw_fastrtps zero copy in default, this fix is required to pass the CI.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix/loaned_message_test_adjustment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test adjustment for LoanedMessage. (#1951)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621753f18912b45d36a71ca",
    "number": 1950,
    "body": "I think this was broken when support for type adaption was added.\r\nCurrently if you create a serialized subscription with a callback taking both the message and the message info, the executor throws an exception the first time a message is dispatched.\r\n\r\nThis fixes the issue.",
    "head_branch": "ivanpauno/fix-is-serialized-for-callback-with-info",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix subscription.is_serialized() for callbacks with message info (#1950)\n\n* Fix subscription.is_serialized() for callbacks with message info argument\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Add tests + please linters\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754018912b45d36a71cb",
    "number": 1947,
    "body": "This PR allows supporting `add_pre_set_parameter_callback` and `add_post_set_parameter_callback` in addition to the existing `add_on_set_parameter_callback`  for Node API. \r\n\r\n**Design document:**  https://github.com/ros2/rclcpp/blob/deepanshu/local-param-changed-callback-support/rclcpp/doc/proposed_node_parameter_callbacks.md\r\n**Demo node:** https://github.com/ros2/demos/pull/565\r\n**rclpy ticket:** https://github.com/ros2/rclpy/pull/966\r\n**Related discussion:** https://github.com/ros2/rclcpp/issues/1190, https://github.com/ros2/rclcpp/issues/609\r\n\r\ncc: @adityapande-1995 @jacobperron \r\n\r\nSigned-off-by: deepanshu <deepanshubansal01@gmail.com>",
    "head_branch": "deepanshu/local-param-changed-callback-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Support pre-set and post-set parameter callbacks in addition to on-set-parameter-callback. (#1947)\n\n* Support add_pre_set_parameter and add_post_set_parameter callbacks in addition to add_on_set_parameter_callback in Node API\r\n\r\nSigned-off-by: deepanshu <deepanshubansal01@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621754118912b45d36a71cc",
    "number": 1946,
    "body": "This PR tries find a way to allow monitoring changes for node's own parameter by supporting a registered callback for successful parameter set events and avoiding subscription to `rclcpp:ParameterEventHandler` used by all nodes. \r\n\r\nThe original requirement came in **gazebo_ros_pkgs** as part of Viper project. \r\n\r\nCurrently, the **add_on_set_paramters_callback** is used for doing any validation for parameters before setting the parameters successfully. Once, the parameters are validated `ParameterEventHandler` object is used to publish any changes to node parameters, which can be subscribed by any node to see the changed parameter. . The **/parameter_events** is a topic for all nodes on the network, and we have to rely on executors to process those. \r\n",
    "head_branch": "deepanshu/local-param-changed-callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754218912b45d36a71cd",
    "number": 1945,
    "body": "I could be wrong, but this callback seems to be obsolete ‚Äì there is no way to set it through the public API.",
    "head_branch": "remove-unused-on-parameters-set-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unused on_parameters_set_callback_ (#1945)\n\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754318912b45d36a71ce",
    "number": 1944,
    "body": "Same fix applied here: https://github.com/ros2/demos/pull/534/files.\r\n\r\nShould fix the test regression found currently in the benchmark jobs for Humble and Rolling.\r\n\r\nReference:\r\nhttps://build.ros2.org/view/Rci/job/Rci__benchmark_ubuntu_jammy_amd64/61/\r\nhttps://build.ros2.org/view/Hci/job/Hci__benchmark_ubuntu_jammy_amd64/8/\r\n\r\nRunning a performance test before merging.\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>",
    "head_branch": "blast545/fix_benchmark_jobs_jun_2022",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754418912b45d36a71cf",
    "number": 1943,
    "body": "In the pull request https://github.com/ros2/rclcpp/pull/1442 the ability\r\nto use `std::string` as the first argument to the logging functions was\r\n(rightfully) removed.\r\n\r\nThis commit just corrects the documentation of the macro, since it\r\nconfused me a bit ;)",
    "head_branch": "small-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix documentation of `RCLCPP_[INFO,WARN,...]` (#1943)\n\nIn the pull request https://github.com/ros2/rclcpp/pull/1442 the ability\r\nto use `std::string` as the first argument to the logging functions was\r\n(rightfully) removed.\r\n\r\nThis commit just corrects the documentation of the macro, since it\r\nconfused me a bit ;)\r\n\r\nSigned-off-by: Daniel Reuter <daniel.robin.reuter@googlemail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754518912b45d36a71d0",
    "number": 1940,
    "body": "related to https://github.com/ros2/rmw_fastrtps/pull/568#issuecomment-1134608778\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix/wait_for_subscribers_on_another_thread",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "wait for subscriptions on another thread. (#1940)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754718912b45d36a71d1",
    "number": 1939,
    "body": "Address merge issue #1394 ",
    "head_branch": "mergify/bp/foxy/pr-1927",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix merge conflicts (#1939)\n\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754818912b45d36a71d2",
    "number": 1938,
    "body": "Address #1933",
    "head_branch": "mergify/bp/galactic/pr-1927",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix merge conflicts (#1938)\n\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754918912b45d36a71d3",
    "number": 1937,
    "body": "This is an automatic backport of pull request #1926 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/humble/pr-1926",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Drop wrong template specialization (#1926) (#1937)\n\nThis fails with g++ -std=gnu++20.\r\n\r\nSigned-off-by: Jochen Sprickerhof <git@jochen.sprickerhof.de>\r\n(cherry picked from commit 02802bcc385c3d6d814add93618f3388d44adec7)\r\n\r\nCo-authored-by: Jochen Sprickerhof <github@jochen.sprickerhof.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621754a18912b45d36a71d4",
    "number": 1934,
    "body": "This is an automatic backport of pull request #1927 done by [Mergify](https://mergify.com).\nCherry-pick of 5c688303b3cb994969f448979f64c12971243295 has failed:\n```\nOn branch mergify/bp/foxy/pr-1927\nYour branch is up to date with 'origin/foxy'.\n\nYou are currently cherry-picking commit 5c688303.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/include/rclcpp/subscription.hpp\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1927",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add statistics for handle_loaned_message (backport #1927) (#1934)\n\n* Add statistics for handle_loaned_message (#1927)\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n(cherry picked from commit 5c688303b3cb994969f448979f64c12971243295)\r\n\r\n# Conflicts:\r\n#\trclcpp/include/rclcpp/subscription.hpp\r\n\r\n* Fix merge conflicts (#1939)\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621754b18912b45d36a71d5",
    "number": 1933,
    "body": "This is an automatic backport of pull request #1927 done by [Mergify](https://mergify.com).\nCherry-pick of 5c688303b3cb994969f448979f64c12971243295 has failed:\n```\nOn branch mergify/bp/galactic/pr-1927\nYour branch is up to date with 'origin/galactic'.\n\nYou are currently cherry-picking commit 5c688303.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/include/rclcpp/subscription.hpp\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1927",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add statistics for handle_loaned_message (backport #1927) (#1933)\n\n* Add statistics for handle_loaned_message (#1927)\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n(cherry picked from commit 5c688303b3cb994969f448979f64c12971243295)\r\n\r\n* Fix merge conflicts (#1938)\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621754c18912b45d36a71d6",
    "number": 1932,
    "body": "This is an automatic backport of pull request #1927 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/humble/pr-1927",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add statistics for handle_loaned_message (#1927) (#1932)\n\n* Add statistics for handle_loaned_message\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n(cherry picked from commit 5c688303b3cb994969f448979f64c12971243295)\r\n\r\nCo-authored-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621754d18912b45d36a71d7",
    "number": 1931,
    "body": "Enabling publishing rclcpp::SerializedMessage for IPM (rcl_serialized_message_t are not supported for IPM).\r\n\r\nGeneric publisher can be created now with rclcpp::Publisher<rclcpp::SerializedMessage>. Therefore GenericPublisher is not needed anymore.\r\n\r\nuses changes from: https://github.com/ros2/rclcpp/pull/1928",
    "head_branch": "feature/ipm_with_rclcpp_serialized_messages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621754e18912b45d36a71d8",
    "number": 1928,
    "body": "Added AnySubscriptionCallback support to GenericSubscription\r\nrefers to issue #1604",
    "head_branch": "feature/1604_any_subscription_callback_for_generic_subscription",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated GenericSubscription to AnySubscriptionCallback (#1928)\n\n* added rclcpp::SerializedMessage support for AnySubscriptionCallback\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\n\r\n* using AnySubscription callback for generic subscriptiion\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\n\r\n* updated tests\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\n\r\n* Remove comment\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nSigned-off-by: Joshua Hampp <j.hampp@eu.denso.com>\r\nCo-authored-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nCo-authored-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621755018912b45d36a71d9",
    "number": 1927,
    "body": "Add statistics for handle_loaned_message().   \r\nIf loan message is enabled,  some tests in test_subscription_topic_statistics fail.  This issue is found in https://github.com/ros2/rmw_fastrtps/pull/568#issuecomment-1123412147",
    "head_branch": "topic-statistics-for-handle-loaned-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add statistics for handle_loaned_message (#1927)\n\n* Add statistics for handle_loaned_message\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621755118912b45d36a71da",
    "number": 1926,
    "body": "This fails with g++ -std=gnu++20.",
    "head_branch": "drop_wrong_template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Drop wrong template specialization (#1926)\n\nThis fails with g++ -std=gnu++20.\r\n\r\nSigned-off-by: Jochen Sprickerhof <git@jochen.sprickerhof.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621755218912b45d36a71db",
    "number": 1923,
    "body": "Ttrigger guard condition waitset regardless of whether a trigger callback is present\r\nThis should address https://github.com/ros2/rclcpp/issues/1917\r\n\r\nAlso minor cleanup at the class (remove unneded lock and better use of if-else)\r\n\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/rclcpp-1917",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Always trigger guard condition waitset (#1923)\n\n* trigger guard condition waitset regardless of whether a trigger callback is present\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* restore mutex in guard_condition.cpp\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* remove whitespace\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* add unit-test\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* add documentation for trigger and set_on_trigger_callback\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621755318912b45d36a71dc",
    "number": 1922,
    "body": "Address #1921 \r\n\r\n",
    "head_branch": "topic-fix-get_parameter_from_event",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update get_parameter_from_event to follow the function description (#1922)\n\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755418912b45d36a71dd",
    "number": 1920,
    "body": "If users set a policy as 'best available', then the middleware will pick a policy\r\nthat is most compatible with the current set of discovered endpoints while maintaining\r\nthe highest level of service possible.\r\n\r\nFor details about the expected behavior, see connected changes:\r\n\r\n- https://github.com/ros2/rmw/pull/320\r\n- https://github.com/ros2/rmw_dds_common/pull/60",
    "head_branch": "jacob/qos_best_available",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add 'best available' QoS enum values and methods (#1920)\n\nIf users set a policy as 'best available', then the middleware will pick a policy\r\nthat is most compatible with the current set of discovered endpoints while maintaining\r\nthe highest level of service possible.\r\n\r\nFor details about the expected behavior, see connected changes:\r\n\r\n- https://github.com/ros2/rmw/pull/320\r\n- https://github.com/ros2/rmw_dds_common/pull/60\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621755518912b45d36a71de",
    "number": 1919,
    "body": "address https://github.com/ros2/rclcpp/issues/1915\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20220418-function-pointer-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use reinterpret_cast for function pointer conversion. (#1919)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755618912b45d36a71df",
    "number": 1918,
    "body": "Signed-off-by: Artem Shumov <agshumov@sberautotech.ru>\r\n\r\nThis PR prevents non string literal from being passed on to RCLCPP_@(severity) macros\r\n",
    "head_branch": "check-if-string-literal-in-logging-macros",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755818912b45d36a71e0",
    "number": 1914,
    "body": "a follow-up PR to remove this option, which was metioned at https://github.com/ros2/rclcpp/pull/1561#discussion_r841933383\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-remove-cft-cmake-option",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove DEFINE_CONTENT_FILTER cmake option (#1914)\n\n* remove DEFINE_CONTENT_FILTER cmake option\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* remove the macro CONTENT_FILTER_ENABLE as well\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621755918912b45d36a71e1",
    "number": 1913,
    "body": null,
    "head_branch": "humble_deprecations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove things that were deprecated during galactic (#1913)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621755a18912b45d36a71e2",
    "number": 1910,
    "body": "This is an automatic backport of pull request #1904 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1904",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add test-dep ament_cmake_google_benchmark (#1904) (#1910)\n\nSigned-off-by: Ga√´l √âcorchard <gael.ecorchard@cvut.cz>\r\n(cherry picked from commit eac006317692b7eff3aed671eadbff3d72cca098)\r\n\r\nCo-authored-by: Ga√´l √âcorchard <galou_breizh@yahoo.fr>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755b18912b45d36a71e3",
    "number": 1909,
    "body": "This is an automatic backport of pull request #1904 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1904",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add test-dep ament_cmake_google_benchmark (#1904) (#1909)\n\nSigned-off-by: Ga√´l √âcorchard <gael.ecorchard@cvut.cz>\r\n(cherry picked from commit eac006317692b7eff3aed671eadbff3d72cca098)\r\n\r\nCo-authored-by: Ga√´l √âcorchard <galou_breizh@yahoo.fr>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755c18912b45d36a71e4",
    "number": 1908,
    "body": "In `__check_parameters`, there are function-scoped parameter\r\ndescriptor structures generated by searching the `ParameterInfo`\r\nmap provided from other declaratory functions. This PR populates\r\nthis temporary structure with the parameter name information.\r\nThis way, the change does not show in other data structures, but the\r\nname field is also not empty when used to generate error messages in\r\n`__check_parameter_value_in_range`.\r\n\r\nSee this [demo node](https://github.com/aprotyas/ros2_playground/tree/master/rclcpp_1906) for testing purposes.\r\n\r\nFixes #1906.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>",
    "head_branch": "aprotyas/fix_InvalidParameterValueException_message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[NodeParameters] Set name in param info pre-check (#1908)\n\n* [NodeParameters] Set name if user didn't populate\r\n\r\nIf the user provided parameter descriptor already contains a name, then\r\nwe should not override said name, under the good faith assumption that\r\nthe user knows what they are doing.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755d18912b45d36a71e5",
    "number": 1904,
    "body": "Same as #1899 but based on master.\r\n\r\nSigned-off-by: Ga√´l √âcorchard <gael.ecorchard@cvut.cz>",
    "head_branch": "add-dep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add test-dep ament_cmake_google_benchmark (#1904)\n\nSigned-off-by: Ga√´l √âcorchard <gael.ecorchard@cvut.cz>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755e18912b45d36a71e6",
    "number": 1903,
    "body": "This package uses rcl_interfaces directly, and we've been getting away with the missing dependency because `rcl` has the entirety of `rcl_interfaces` as part of its link interface even tough it doesn't need to.\r\n\r\nIf (when) `rcl` scopes its dependency to only the c generator and drops the cpp generator from its link interface, this package will fail to find the cpp symbols at link time. This change remedies that.\r\n\r\nExample location where `rclcpp` references `rcl_interfaces` directly:\r\nhttps://github.com/ros2/rclcpp/blob/49c2dd481342333328ffacb5f949b89b95395e32/rclcpp/include/rclcpp/node.hpp#L35-L38\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=16412)](http://ci.ros2.org/job/ci_linux/16412/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=11022)](http://ci.ros2.org/job/ci_linux-aarch64/11022/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=16785)](http://ci.ros2.org/job/ci_windows/16785/)",
    "head_branch": "cottsay/rcl_interfaces_link",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing ament dependency on rcl_interfaces (#1903)\n\nThis package uses rcl_interfaces directly, and we've been getting away\r\nwith the missing dependency because `rcl` has the entirety of\r\n`rcl_interfaces` as part of its link interface even tough it doesn't\r\nneed to.\r\n\r\nIf (when) `rcl` scopes its dependency to only the c generator and drops\r\nthe cpp generator from its link interface, this package will fail to\r\nfind the cpp symbols at link time. This change remedies that.\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621755f18912b45d36a71e7",
    "number": 1901,
    "body": "This PR updates a unit test for the `wait_for_acknowledgments()` API by increasing the timeout from 500ms to 6s.\r\n\r\nThis change allows the test to successfully and reliably pass when run with `rmw_connextdds`. The reason for this change is that Connext DDS usese a 3s periodic heartbeat by default, so it may take quite longer than 500ms to detect and repair a missed sample. 6s guarantees that at least one heartbeat will be published while waiting for all samples to be acknowledged.\r\n\r\nThe failure of the test was identified while working on ros2/rmw_connextdds#76, after running the Linux CI with only `rmw_connextdds` enabled.",
    "head_branch": "asorbini/wait-for-ack-longer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Increase timeout for acknowledgments to account for slower Connext settings. (#1901)\n\nSigned-off-by: Andrea Sorbini <asorbini@rti.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756118912b45d36a71e8",
    "number": 1900,
    "body": "This PR updates some unit tests related to the data callbacks for subscriptions, clients, and services, to make them more robust when run on different RMWs.\r\n\r\nThe changes were identified while investigating [some failures observed when running the tests with `rmw_connextdds`](https://github.com/ros2/rmw_connextdds/pull/76#issuecomment-1071783755) as part of ros2/rmw_connextdds#76.\r\n\r\nIn particular, all tests at one point try to publish 3 messages and subsequently expect all 3 samples to be notified via callback.\r\nFor this to happen reliably, the endpoints should all be using a History depth of at least 3. Moreover, the tests should wait for the counter variable to be increased up to 3 before making any further assertion.",
    "head_branch": "asorbini/fix-callback-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update data callback tests to account for all published samples. (#1900)\n\n* Update data callback tests to account for all published samples.\r\n\r\nSigned-off-by: Andrea Sorbini <asorbini@rti.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756218912b45d36a71e9",
    "number": 1899,
    "body": "Signed-off-by: Ga√´l √âcorchard <gael.ecorchard@cvut.cz>",
    "head_branch": "galactic-add-dep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756318912b45d36a71ea",
    "number": 1898,
    "body": "This PR enables selection of executor type in `rclcpp_components_register_node` in `CMakeLists.txt`. \r\nSo far, `SingleThreadedExecutor` is hard-coded.\r\n\r\nFYI, I need this option to use of `MultiThereadedExecutor` because my node contains nested callback. ",
    "head_branch": "select_executor_in_node_registration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Select executor in node registration (#1898)\n\n* Select executor\r\n\r\nSigned-off-by: Hirokazu Ishida <h-ishida@jsk.imi.i.u-tokyo.ac.jp>\r\n\r\n* Fix indent\r\n\r\nSigned-off-by: Hirokazu Ishida <h-ishida@jsk.imi.i.u-tokyo.ac.jp>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756418912b45d36a71eb",
    "number": 1897,
    "body": "There are a smattering of problems in here:\r\n\r\n1.  We weren't properly using PREDEFINE for all of our macros.\r\n2.  The Doxyfiles were referencing tag files that may not exist\r\n(this will be handled by rosdoc2 automatically).\r\n3.  The C++ parser in doxygen can't handle \"friend classname\",\r\nbut can handle \"friend class classname\"; it shouldn't matter\r\none way or the other to the compiler.\r\n4.  There were a couple of parameters that were not documented.\r\n5.  The doxygen C++ parser can't handle decltype in all situations.\r\n6.  There was a structure using a C-style declaration.\r\n\r\nThis patch fixes all of the above issues.  We still aren't totally\r\nclean on a rosdoc2 build, but we are a lot closer.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/rclcpp-fix-rosdoc2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix a bunch more rosdoc2 issues in rclcpp. (#1897)\n\n* Fix a bunch more rosdoc2 issues in rclcpp.\r\n\r\nThere are a smattering of problems in here:\r\n\r\n1.  We weren't properly using PREDEFINE for all of our macros.\r\n2.  The Doxyfiles were referencing tag files that may not exist\r\n(this will be handled by rosdoc2 automatically).\r\n3.  The C++ parser in doxygen can't handle \"friend classname\",\r\nbut can handle \"friend class classname\"; it shouldn't matter\r\none way or the other to the compiler.\r\n4.  There were a couple of parameters that were not documented.\r\n5.  The doxygen C++ parser can't handle decltype in all situations.\r\n6.  There was a structure using a C-style declaration.\r\n\r\nThis patch fixes all of the above issues.  We still aren't totally\r\nclean on a rosdoc2 build, but we are a lot closer.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621756518912b45d36a71ec",
    "number": 1896,
    "body": "While doing some profiling of the rclcpp code, I noticed a few different places where we were unnecessarily doing work.  This PR has 3 commits that address each of these problems.\r\n\r\n1. The first patch adds a new method to the `CallbackGroup` class that collects all of the pointers at once.  This avoids the overhead of taking and dropping the mutex inside of `CallbackGroup` over and over.  I incidentally don't love the name `collect_all_ptrs`, so I'm happy to rename that to something else.\r\n2. The second patch changes the API of the `MemoryStrategy` class to pass the shared_ptrs as const-ref in the APIs.  Since the default implementation doesn't need to hold an additional reference, this reduces overhead for creating and destroying the shared_ptr class quite a bit.  If a subclass were written that *does* need to hold onto an additional reference, they can explicitly do that by invoking the shared_ptr copy constructor.\r\n3. The last patch changes a bunch of loops to use const-ref to shared_ptr instead of copying the shared_ptr.  As with the second point, this reduces overhead in creating and destroying the shared_ptr's that we don't need to hold a reference to.\r\n\r\nThere are more details about each of these points in the individual commits.  In the program I was profiling, the changes here (along with a couple of other minor changes to rcl and rmw_fastrtps which will be coming up) reduced overhead by about 20%.",
    "head_branch": "clalancette/optimizations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Micro-optimizations in rclcpp (#1896)\n\n* Use a single call to collect all CallbackGroup pointers.\r\n\r\nBelieve it or not, the taking and releasing of mutex_ within\r\nthe CallbackGroup class shows up in profiles.  However, when\r\ncollecting entities we really don't need to take it and drop\r\nit between each of subscriptions, services, clients, timers,\r\nand waitables.  Just take it once at the beginning, collect\r\neverything, and then return, which removes a lot of unnecessary\r\nwork with that mutex.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Pass shared_ptr as constref in the MemoryStrategy class.\r\n\r\nThat way, in the case that the callee doesn't need to take\r\na reference, we avoid creating and destroying a shared_ptr\r\nclass.  This reduces the overhead in using these functions,\r\nand seems to work fine in the default case.  If a user wants\r\nto subclass the MemoryStrategy class, then they can explicitly\r\ncreate a shared_ptr copy by using the copy constructor.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Use constref shared_ptr when iterating.\r\n\r\nBelieve it or not, the creation and destruction of the\r\nshared_ptr class itself shows up in profiles in these loops.\r\nSince we don't need to hold onto a reference while iterating\r\n(the class is already doing that), just use constref wherever\r\nwe can which drastically reduces the overhead.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621756618912b45d36a71ed",
    "number": 1895,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1890",
    "head_branch": "asoragna/components-clang-tidy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix bugprone-exception-escape in node_main.cpp.in (#1895)\n\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756718912b45d36a71ee",
    "number": 1894,
    "body": "draft for https://github.com/ros2/rclcpp/issues/1890\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "20220228-bugprone-exception-escape",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756818912b45d36a71ef",
    "number": 1893,
    "body": "This PR changes `rclcpp::TimerBase::time_until_trigger` to return `std::chrono::nanoseconds::max()` if the timer is canceled, since is does not seem correct to return the `rcl_timer_get_time_until_next_call` if the timer won't be called at that time.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>",
    "head_branch": "mauro/rclcpp-timer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "time_until_trigger returns max time if timer is cancelled (#1893)\n\n* time_until_trigger returns max time if timer is cancelled\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621756918912b45d36a71f0",
    "number": 1892,
    "body": "Signed-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\nThis PR is a follow-up to https://github.com/ros2/rclcpp/pull/1579 and it adds the last API required to implement executors based on RMW listeners.\r\n\r\nSince these executors wouldn't use a waitset, they need an alternative way to select which entities are ready to do work inside a waitable (which potentialyl can be made up of multiple entities).\r\nThe `on_ready_callback` listener API already includes an entity ID, which then can be used to call the new `take_data_by_entity_id()` function.",
    "head_branch": "asoragna/take-data-by-id",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add take_data_by_entity_id API to waitable (#1892)\n\n* add take_data_by_entity_id API to waitable\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* use size_t for entity id\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621756a18912b45d36a71f1",
    "number": 1891,
    "body": "Signed-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\nThis PR splits the static executor entities collector class into a base and a derived class.\r\nThis allows to reuse most of the functionalities when creating new executors.\r\n\r\nBoth classes are moved to a `detail` subfolder.",
    "head_branch": "asoragna/entities-collector-base",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756b18912b45d36a71f2",
    "number": 1889,
    "body": "Small improvements identified by clang tidy for the `node_main.cpp.in` file.\r\n\r\n```\r\nwarning: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy]\r\n1:   for (auto clazz : classes) {\r\n```\r\nand\r\n\r\n```\r\nwarning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]\r\n1:     if (!(name.compare(class_name))) {\r\n```\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/improve-components-main",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1889 from ros2/asoragna/improve-components-main\n\nsmall improvements to node_main.cpp.in"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756d18912b45d36a71f3",
    "number": 1888,
    "body": "Part of ros2/ros2#1150 - this installs headers into a unique directory to prevent include directory search order issues when overriding packages from a merged workspace.",
    "head_branch": "sloretz__rclcpp__include_projectname",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Install headers to include/${PROJECT_NAME} (#1888)\n\n* initial attempt, problems with ament_gen_version_h\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* remove blank line\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756e18912b45d36a71f4",
    "number": 1887,
    "body": "This PR removes the custom code paths that were checking `rmw_get_implementation_identifier()` on events-related tests.\r\n\r\nConnected to ros2/rmw_fastrtps#583 ",
    "head_branch": "feature/rmw_fastrtps/complete-event-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove fastrtps customization on tests (#1887)\n\nSigned-off-by: Miguel Company <MiguelCompany@eprosima.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621756f18912b45d36a71f5",
    "number": 1886,
    "body": "Part of https://github.com/ament/ament_cmake/pull/377 - this uses `ament_generate_version_header` instead of `ament_cmake_gen_version_h` to generate the version header. The installed header is identical.",
    "head_branch": "sloretz__ament_generate_version_header",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use ament_generate_version_header (#1886)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757018912b45d36a71f6",
    "number": 1885,
    "body": "address https://github.com/ros2/rclcpp/issues/1884\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20220204-managed-entity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "LifecycleNode::on_deactivate deactivate all managed entities. (#1885)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757118912b45d36a71f7",
    "number": 1883,
    "body": "proposal to address https://github.com/ros2/rclcpp/issues/1876\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "proposal-20220202-universal-reference",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use universal reference to support rvalue. (#1883)\n\n* use universal reference to support rvalue.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757218912b45d36a71f8",
    "number": 1881,
    "body": "Replace `spin_until_future_complete` with `spin` in `component_manager_isolated.hpp`.\r\n\r\n`spin_until_future_complete()` is more inefficient as it needs to check the state of the future and the timeout after every work iteration.\r\n\r\nThis PR addresses the race-condition issues mentioned in https://github.com/ros2/rclcpp/pull/1781 by using the recently added `is_spinning()` API\r\n\r\nTests on the navigation stack show 10% less CPU usage when using `spin()` rather than `spin_until_future_complete()`\r\n\r\nFYI @SteveMacenski @gezp @ivanpauno ",
    "head_branch": "asoragna/spin-component-isolated",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use spin() in component_manager_isolated.hpp (#1881)\n\n* replace spin_until_future_complete with spin in component_manager_isolated.hpp\r\n\r\nspin_until_future_complete() is more inefficient as it needs to check the state of the future and the timeout after every work iteration\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* fix uncrustify error\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621757318912b45d36a71f9",
    "number": 1878,
    "body": "address https://github.com/ros2/rclcpp/issues/1825\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "feature-20220125-spin_all_timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "spin_all with a zero timeout. (#1878)\n\n* spin_all with a zero timeout.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621757418912b45d36a71fa",
    "number": 1875,
    "body": "Precisely what the title says. Connected to https://github.com/ros2/rosidl/pull/647. \r\n\r\nInteroperability with `std::vector<bool>` is kept in all cases but when an explicit `std::vector<bool>` reference is requested e.g. `const std::vector<bool> & param = rclcpp::ParameterValue{...}.get<std::vector<bool>>();` will no longer compile. ",
    "head_branch": "hidmic/fix-nested-types-introspection",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757618912b45d36a71fb",
    "number": 1874,
    "body": "Introduce executors new spin_for method, replace spin_until_future_complete with spin_until_complete. (#1821)\r\n    \r\n    * Introduce spin_for method.\r\n    * Introduce spin_until_complete.\r\n    * Deprecate spin_until_future_complete.\r\n    * Replace usage of deprecated method.\r\n    * Update unit-tests.\r\n    \r\n    Signed-off-by: Hubert Liberacki <hliberacki@gmail.com>\r\n",
    "head_branch": "hliberacki/timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Introduce executors new spin_for method, replace spin_until_future_complete with spin_until_complete. (#1821) (#1874)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621757718912b45d36a71fc",
    "number": 1873,
    "body": "Signed-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20220120-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757818912b45d36a71fd",
    "number": 1872,
    "body": "Subscription callbacks of types `ConstSharedPtrCallback` and `ConstSharedPtrWithInfoCallback` were not getting registered.\r\n\r\nSee: https://gitlab.com/ros-tracing/tracetools_analysis/-/issues/47#note_817008890\r\n\r\nSwitching to something like this (in `galactic`) would be better, but the change would be less minimal: https://github.com/ros2/rclcpp/blob/468cbab1aa9efb0f18b8d3f5cd410d2a9f21b3c6/rclcpp/include/rclcpp/any_subscription_callback.hpp#L372-L384\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "christophebedard/fix-sub-instrumentation-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix subscription instrumentation for ConstSharedPtr[WithInfo]Callback (#1872)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757918912b45d36a71fe",
    "number": 1871,
    "body": "This PR addresses a problem I recently noticed when you start an executor in a separate thread.\r\nFor example:\r\n\r\n```\r\nauto executor = std::make_shared<SingleThreadedExecutor>();\r\nstd::thread executor_thread([&](){\r\n    executor->spin();\r\n});\r\n\r\n//// When I reach this line I don't have any way to know whether the executor is already spinning or not.\r\nexecutor->cancel(); // This call may be uneffective as it may get executed before the executor starts to spin\r\n/// Similarly, if I have to do an operation that requires the executor to be spinning\r\n```\r\n\r\nThere are hacky solutions to this, for example I added a node with a one shot timer with period 0 to the executor such that I can guarantee that after that timer triggers the executor is definitely spinning.\r\nHowever this looks very bad and it could be done in a much nicer way thanks to the addition of this new API.",
    "head_branch": "asoragna/executor-is-spinning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1871 from ros2/asoragna/executor-is-spinning\n\nadd is_spinning() method to executor base class"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621757a18912b45d36a71ff",
    "number": 1870,
    "body": "to fix https://github.com/ros2/rclcpp/issues/1864\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-fix-wait-for-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix one subscription can wait_for_message twice (#1870)\n\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757b18912b45d36a7200",
    "number": 1867,
    "body": "Previously, we were managing a bunch of internal objects with shared_ptr/weak_ptr.  But this was an unnecessary abstraction, and also lead to flaky tests as in #1861 .\r\n\r\nInstead, simplify this quite a lot and just use normal C++ object lifetimes.  This is easier to understand, is less code, and also fixes the flaky test.\r\n\r\nSupersedes #1865.\r\n\r\nFixes #1861 \r\n\r\n@Barry-Xu-2018 @ralph-lange FYI.",
    "head_branch": "clalancette/time-source-cleanups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup time source object lifetimes (#1867)\n\n* Small cleanups in TimeSource.\r\n\r\nSimplify some code, and also make sure to throw an exception\r\nwhen use_sim_time is not of type bool.  Also add a test for\r\nthe latter.\r\n\r\n* Remove the sim_time_cb_handler.\r\n\r\nIt was originally used to make sure that someone didn't change\r\nthe 'use_sim_time' type from boolean to something else.  But\r\nsince the parameters interface now does that automatically for\r\nus, we don't need the explicit check here.\r\n\r\nI can think of one situation that this allows that wasn't allowed\r\nbefore.  If the user defined 'use_sim_time' as a parameter override\r\nwhen constructing a node, and the type is bool, and they also\r\ndefined the parameters as 'dynamic_typing', then this callback\r\nwill still have effect.  But presumably if the user went out of\r\ntheir way to change the parameter to dynamic_typing, they are\r\ntrying to do something esoteric and so we should just let them.\r\n\r\n* ClocksState does not need to be a pointer.\r\n\r\nInstead, make it a regular member variable.  That lets us get\r\nrid of all of the special handling for when it is a weak_ptr\r\nor not.  It's lifetime is now just that of NodeState.\r\n\r\n* Stop using NodeState as a weak_ptr in the captures.\r\n\r\nThis ended up causing the lifetime of the object to be weird.\r\nInstead, just capture 'this' which is sufficient.\r\n\r\n* Make sure destroy_clock_sub is first.\r\n\r\n* Switch to using just a regular object.\r\n\r\nWindows objects to trying to do \"make_shared\" in the RCLCPP\r\nmacro, so just switch to a normal object here.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757c18912b45d36a7201",
    "number": 1865,
    "body": "Address issue #1861 ",
    "head_branch": "topic-fix-resource-deadlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621757e18912b45d36a7202",
    "number": 1863,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1846.\r\nSimilar to what was done in rclpy: https://github.com/ros2/rclpy/pull/865.\r\nDemo: https://github.com/ros2/demos/pull/552.",
    "head_branch": "ivanpauno/lifecycle-automatically-transition-entities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Automatically transition lifecycle entities when node transitions (#1863)\n\n* Automatically transition LifecyclePublisher(s) between activated and inactive\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Fix: Add created publishers to the managed entities vector\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* enabled_ -> activated_\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Continue setting should_log_ as before\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Fix visibility attributes so it works on Windows\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621757f18912b45d36a7203",
    "number": 1862,
    "body": "Renames the std::stringstream in the logging stream macros from ss to something more unique.",
    "head_branch": "rename-logging-stringstream",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename stringstream in macros to a more unique name (#1862)\n\n* Rename stringstream in macros to a more unique name\r\n\r\nSigned-off-by: Doug Smith <douglas.smith@swri.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758018912b45d36a7204",
    "number": 1859,
    "body": "Relates to https://github.com/ament/ament_lint/pull/324",
    "head_branch": "jacob/update_cpplint_fork",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix include order and relative paths for cpplint (#1859)\n\n* Fix include order and relative paths for cpplint\r\n\r\nRelates to https://github.com/ament/ament_lint/pull/324\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Use double-quotes for other includes\r\n\r\nThis is backwards compatible with older versions of cpplint.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758118912b45d36a7205",
    "number": 1858,
    "body": "They had a bunch of unnecessary infrastructure, so just simplify them to what they actually need.  This also makes them run with less warnings, which is a nice side benefit.",
    "head_branch": "clalancette/test-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup the TypeAdapt tests (#1858)\n\n* Cleanup test_publisher_with_type_adapter.\r\n\r\nIt had a lot of infrastructure that it didn't need, so remove\r\nmost of that.  Also move the creation of the node to open-coded,\r\nsince we weren't really saving anything.  Finally make sure\r\nto reset the node pointers as appropriate, which cleans up\r\nerrant error messages.\r\n\r\n* Cleanup test_subscription_with_type_adapter.\r\n\r\nIt had a lot of infrastructure that it didn't need, so remove\r\nmost of that.  Also move the creation of the node to open-coded,\r\nsince we weren't really saving anything.  Finally make sure\r\nto reset the node pointers as appropriate, which cleans up\r\nerrant error messages.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758218912b45d36a7206",
    "number": 1857,
    "body": "Remove ones that aren't needed, and add in ones that are\r\nactually needed in the respective files.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/rclcpp-includes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup includes. (#1857)\n\nRemove ones that aren't needed, and add in ones that are\r\nactually needed in the respective files.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758318912b45d36a7207",
    "number": 1856,
    "body": "The implementation for #1837 ",
    "head_branch": "topic-generic-publish-loaned-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add publish by loaned message in GenericPublisher (#1856)\n\n* Add publish by loaned message in GenericPublisher\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\nCo-authored-by: Alban Tamisier <alban.tamisier@apex.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621758418912b45d36a7208",
    "number": 1855,
    "body": "Currently any rclcpp component is forced to depend on and link against the component manager. Plugins actually just need access to `rclcpp_component`'s headers which themselves use `rclcpp` and `class_loader`. This adds and exports a new CMake interface library `rclcpp_components::component` that can be depended upon by components.\r\n\r\nPart of ament/ament_cmake#365",
    "head_branch": "rclcpp_components_export_component_target",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add rclcpp_components::component (#1855)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758518912b45d36a7209",
    "number": 1853,
    "body": "Follow-up PR for https://github.com/ros2/rclcpp/pull/1833.\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-publisher-not-hold-callback-group",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758618912b45d36a720a",
    "number": 1850,
    "body": "Signed-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n\r\nThis PR contains the force-set-parameter functionality first introduced in https://github.com/ros2/rclcpp/pull/1824.\r\nIt addresses #1762\r\n\r\nWe can use this separate PR to discuss whether we want this API or not.\r\n\r\n@wjwwood wrote\r\n\r\n> I actually don't think we should have \"set\" functions that override the read_only flag. One of the reasons for introducing the read_only flag was so that the storage could be static (imagine a read_only sequence stored as a std::array). We're not taking advantage of this in rclcpp but I know of people using it in their own forks in that way. It was one of the purposes. Undeclaring it would just be removing it from the list of declared parameters or marking it as inaccessible, but changing the value, especially if you ignore the dynamic_typing flag and/or let the size of a sequence change would be a problem.\r\n\r\nCan you elaborate on why this is a problem?\r\nWe all agree that a node should be always allowed to undeclare a parameter it already declared.\r\nNothing prevents the node from declaring this parameter again with a different size.\r\n\r\nIMO this function is just a very convenient utility that allows to do in a single atomic operation what users would otherwise do in two separate operations (undeclare + declare different), thus reducing complexity in user code and saving them from having to handle concurrency issues.",
    "head_branch": "asoragna/force-parameters-set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758818912b45d36a720b",
    "number": 1849,
    "body": "Signed-off-by: Gonzalo de Pedro <gonzalo@depedro.com.ar>\r\n",
    "head_branch": "gonzo/non-transform-intra-process-working-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add non transform capabilities for intra-process (#1849)\n\nThat is, make it so that if both a publisher and a subscriber using intra-process\r\nand using TypeAdaptation are the same type, we don't need to convert to\r\na ROS Message type on the publisher and from a ROS Message type before\r\ndelivering to the subscriber.  Instead, we store the original message type\r\nin the subscription buffer, and deliver it straight through to the subscriber.\r\n\r\nThis has two main benefits:\r\n1. It is better for performance; we are eliding unnecessary work.\r\n2. We can use TypeAdaptation to pass custom handles (like hardware accelerator\r\n    handles) between a publisher and subscriber.  That means we can avoid\r\n    unnecessary overhead when using a hardware accelerator, like synchronizing\r\n    between the hardware accelerator and the main CPU.\r\n\r\nThe main way this is accomplished is by causing the SubscriptionIntraProcessBuffer\r\nto store messages of the Subscribed Type (which in the case of a ROS message type\r\nsubscriber is a ROS message type, but in the case of a TypeAdapter type is the\r\ncustom type).  When a publish with a Type Adapted type happens, it delays conversion\r\nof the message, and passes the message type from the user down into the IntraProcessManager.\r\n\r\nThe IntraProcessManager checks to see if it can cast the SubscriptionBuffer\r\nto the custom type being published first.  If it can, then it knows it can deliver the message directly\r\ninto the SubscriptionBuffer with no conversion necessary.  If it can't, it then sees if\r\nthe SubscriptionBuffer is of a ROS message type.  If it is, then it performs the conversion\r\nas necessary, and then stores it.  In all cases, the Subscription is then triggered underneath\r\nso that the message will eventually be delivered by an executor.\r\n\r\nWe also add tests to ensure that in the case where the publisher and subscriber\r\nand using the same type adapter, no conversion happens when delivering the\r\nmessage.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nSigned-off-by: Gonzalo de Pedro <gonzalo@depedro.com.ar>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621758918912b45d36a720c",
    "number": 1847,
    "body": "These changes extend the intra-process capabilities to support intra-process client/services communication, so no need to go through the DDS when sending client requests / services responses, when they belong to the same process.\r\n\r\nMissing: Add unit tests.\r\nDesign: https://github.com/mauropasse/design/blob/mauro/gh-pages-ipc-clients-services/articles/intraprocess_communication.md\r\n\r\n@clalancette \r\n@alsora \r\n\r\n",
    "head_branch": "mauro/ipc-cli-serv-qos-getters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758a18912b45d36a720d",
    "number": 1845,
    "body": "minor fix, corresponding to `Publisher` constructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20211214-use-private-member",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use private member to keep the all reference underneath. (#1845)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758b18912b45d36a720e",
    "number": 1844,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nLinks to https://github.com/ament/uncrustify_vendor/pull/27 ; see that PR for more information and CI.",
    "head_branch": "clalancette/uncrustify-0.72",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixes for uncrustify 0.72 (#1844)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758c18912b45d36a720f",
    "number": 1843,
    "body": "Signed-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nPR #1781 make windows ci failed.\r\nAcooding to suggestion from @SteveMacenski , try to fix it by instantiating template class `ComponentManagerIsolated`.",
    "head_branch": "fix_pr1781_windows_ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove RCLCPP_COMPONENTS_PUBLIC in class ComponentManagerIsolated (#1843)\n\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621758d18912b45d36a7210",
    "number": 1842,
    "body": "I am building a feature in rosbag2 for playback using ros-time. (https://github.com/ros2/rosbag2/pull/935 is the first PR). The build fails on windows because this constructor is not `dllexport`ed. See https://ci.ros2.org/job/ci_windows/15999/console\r\n",
    "head_branch": "emersonknapp/expose-jump-handler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758e18912b45d36a7211",
    "number": 1841,
    "body": null,
    "head_branch": "gonzo/intra-process-any-subscription-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621758f18912b45d36a7212",
    "number": 1840,
    "body": "Opening this to test if indeed #1781  is causing the windows regression.\r\n\r\nThis reverts commit 321c74c2b3ae0336528f561a039fd554a28f4543.",
    "head_branch": "blast545/revert_rclcpp_PR_1871",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759118912b45d36a7213",
    "number": 1839,
    "body": "to fix https://github.com/ros2/rcl/issues/954\r\n\r\nMy intent is to use regex for supporting some complicated wildcard, such as `/**/a/b/*/c/d/*/node`.\r\n\r\nI think that the same param name in a node of param file parsed by order seems more reasonable than the order(`/**`, `specific_node`).  Because if there are more wildcards items, such `/**/node`, `/ns/**/node`, etc, I don't think users would like to memory these special rules.\r\n\r\nNote: I can also use a 'std::set<..,std::less>' to store the node keys(`*` < `/` < `alpha/num`), and then move all the relative items iterator into `{specific_node, {}}`\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-wildcard-use-regex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use regex for wildcard matching (#1839)\n\n* use regex for wildcard matching\r\n\r\nCo-authored-by: Aaron Lipinski <aaron.lipinski@roboticsplus.co.nz>\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* use map to process the content of parameter file by order\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add more test cases\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* try to not decrease the performance and make the param win last\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update node name\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update document comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add more test for parameter_map_from\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nCo-authored-by: Aaron Lipinski <aaron.lipinski@roboticsplus.co.nz>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621759218912b45d36a7214",
    "number": 1836,
    "body": "Implement the service request filtering function\r\nbased on managed node's requirements in\r\nhttps://design.ros2.org/articles/node_lifecycle.html\r\n\r\nSigned-off-by: Wonguk Jeong <huchijwk@gmail.com>",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759318912b45d36a7215",
    "number": 1834,
    "body": "This is an automatic backport of pull request #1799 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1799",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add node_waitables_ to copy constructor. (backport #1799) (#1834)\n\n* add node_waitables_ to copy constructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add node_time_source_ to copy constructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add construction_and_destruction_sub_node for action server.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\nCo-authored-by: Abrar Rahman Protyasha <abrar@openrobotics.org>\r\n(cherry picked from commit 301957515a0448de22def36559087b3338c76700)\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759418912b45d36a7216",
    "number": 1833,
    "body": "keep consistency with other cases to not hold callback group in subscription\r\n\r\nhttps://github.com/ros2/rclcpp/pull/1832#discussion_r761027390\r\n<details><summary> The above link can jump but not show the correct location. Copy comments</summary>\r\n\r\n> Because I want to make the subscription keep consistent behavior with other entities.\r\nI found other entities not to hold the callback group, refer to #1754 (comment), so I think it's better not to hold a callback group in the subscription.\r\n\r\nThat sounds fine, but it doesn't seem to be needed in this PR (which seems to be a replacement of https://github.com/ros2/rclcpp/pull/1754).\r\nI would rather see this done in another PR if it's not needed here.\r\n\r\n</details>\r\n\r\nNOTE:\r\nthe callback group for subscription is needed (kept) here, \r\nhttps://github.com/ros2/rclcpp/blob/536df11ee0fdac3e4753754d11052068983c4d5c/rclcpp/include/rclcpp/create_subscription.hpp#L137\r\nnot in the subscription\r\nhttps://github.com/ros2/rclcpp/blob/536df11ee0fdac3e4753754d11052068983c4d5c/rclcpp/include/rclcpp/subscription.hpp#L146",
    "head_branch": "topic-subscription-not-hold-callback-group",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759518912b45d36a7217",
    "number": 1832,
    "body": "It's intent to use another way to fix https://github.com/ros2/rclcpp/pull/1754 to prevent the separation of `rcl_node_init` and `rcl_node_fini`.\r\n\r\n<del>and changing the creation behavior of subscription that not holding callback group to keep the consistency of other entities to make the test passed.</del>\r\n",
    "head_branch": "topic-make-node-base-sharable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make node base sharable (#1832)\n\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621759618912b45d36a7218",
    "number": 1830,
    "body": "Fixes #1829\r\n\r\nThe rcl and std::chrono steady clocks need to be synchronized because they may have different epoch's. This also warns about some gcc bugs, the discussion of which has happened before here: ros2/ros2#1080 . ",
    "head_branch": "rclcpp_1829__fix_sleep_until_basic_steady",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Synchronize rcl and std::chrono steady clocks in Clock::sleep_until (#1830)\n\n* Synchronize RCL and std::chrono steady clocks\r\n\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\n\r\n* Warn about gcc steady clock bugs\r\n\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\n\r\n* Try to make warning message clearer\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759718912b45d36a7219",
    "number": 1828,
    "body": "Resolves #1730\r\n\r\nThis PR adds a new method`Clock::sleep_for()`. Internally it calls `sleep_until()`. This pattern of reusing the `_until()` method matches [`gcc`'s implementation of `condition_variable::wait_for()` using `condition_variable::wait_until()`](https://github.com/gcc-mirror/gcc/blob/a6e0d593707ae44dec0bdf2bcdc4f539050b46db/libstdc%2B%2B-v3/include/std/condition_variable#L158-L165).",
    "head_branch": "rclcpp_clock_sleep_for",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add Clock::sleep_for() (#1828)\n\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621759818912b45d36a721a",
    "number": 1826,
    "body": "Update maintainers to Ivan Paunovic (@ivanpauno), Jacob Perron (@jacobperron), and William Woodall (@wjwwood).",
    "head_branch": "update-maintainers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759a18912b45d36a721b",
    "number": 1824,
    "body": "This PR addresses https://github.com/ros2/rclcpp/issues/1762\r\n\r\nIt adds new APIs to the `node_parameters` interface that allow to bypass `read_only` and `dynamic_typing` restrictions.\r\nThese APIs are used by the node that owns the parameters, while parameter servers (which control changes coming from external nodes) still use old APIs.\r\n\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/force-parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759b18912b45d36a721c",
    "number": 1823,
    "body": "This is an automatic backport of pull request #1820 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1820",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use parantheses around logging macro parameter (#1820) (#1823)\n\n* Use parantheses around logging macro parameter\r\n\r\nThis allows the macro to expand \"correctly\", i.e. macro argument\r\nexpression is fully evaluated before use.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Remove redundant parantheses around macro param\r\n\r\n`decltype(X)` already provides sufficient \"scoping\" to the macro\r\nparameter `X`.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Add test case for expressions as logging param\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n(cherry picked from commit f7bb88fc8fabcaf5008dfe87b5aec7d2269ba147)\r\n\r\nCo-authored-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759c18912b45d36a721d",
    "number": 1822,
    "body": "This is an automatic backport of pull request #1820 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1820",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use parantheses around logging macro parameter (#1820) (#1822)\n\n* Use parantheses around logging macro parameter\r\n\r\nThis allows the macro to expand \"correctly\", i.e. macro argument\r\nexpression is fully evaluated before use.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Remove redundant parantheses around macro param\r\n\r\n`decltype(X)` already provides sufficient \"scoping\" to the macro\r\nparameter `X`.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Add test case for expressions as logging param\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n(cherry picked from commit f7bb88fc8fabcaf5008dfe87b5aec7d2269ba147)\r\n\r\nCo-authored-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759d18912b45d36a721e",
    "number": 1820,
    "body": "This allows the logger macro to expand \"correctly\", i.e. macro\r\nargument expression is fully evaluated before use.\r\n\r\nAddresses #1819.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>",
    "head_branch": "aprotyas/fix/1819/logger_macro",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use parantheses around logging macro parameter (#1820)\n\n* Use parantheses around logging macro parameter\r\n\r\nThis allows the macro to expand \"correctly\", i.e. macro argument\r\nexpression is fully evaluated before use.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Remove redundant parantheses around macro param\r\n\r\n`decltype(X)` already provides sufficient \"scoping\" to the macro\r\nparameter `X`.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Add test case for expressions as logging param\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759e18912b45d36a721f",
    "number": 1818,
    "body": "Re https://github.com/ros2/rclcpp/pull/1817#issuecomment-963517787",
    "head_branch": "jacob/update_authors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove author by request (#1818)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621759f18912b45d36a7220",
    "number": 1817,
    "body": "Adding Jacob, removing Mabel.",
    "head_branch": "update_maintainers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update maintainers (#1817)\n\nAdding Jacob, removing Mabel.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175a018912b45d36a7221",
    "number": 1816,
    "body": "fixes https://github.com/space-ros/space-ros/issues/8\r\n\r\n~~I might come back and try to de-duplicate some of the code, but I couldn't find a nice solution yet.~~",
    "head_branch": "clang_tidy_fix_virtual_dispatch_issues",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix virtual dispatch issues identified by clang-tidy (#1816)\n\n* fix virtual dispatch issues identified by clang-tidy\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix up to reduce code duplication\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* uncrustify\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid returning temporaries\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* uncrustify\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add docs about overriding methods used in constructors\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175a118912b45d36a7222",
    "number": 1815,
    "body": "Required by ros2/rcl#948\r\nPart of fixing ros2/rcl#947",
    "head_branch": "rcl_947_time_jump_callbacks_not_disabled",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "min_forward & min_backward thresholds must not be disabled (#1815)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175a218912b45d36a7223",
    "number": 1814,
    "body": "Part of #1730\r\nThis revives #1748 which was reverted in #1793 with a couple changes.\r\n\r\nOriginally the PR caused 5 test failures on OSX. The tests themselves passed, but the return code of the test processes would either be -11,\r\n\r\n```\r\n1: -- run_test.py: return code -11\r\n```\r\n\r\nor it had an error message and a return code of -6.\r\n\r\n```\r\n1: libc++abi.dylib: terminating with uncaught exception of type std::__1::system_error: mutex lock failed: Invalid argument\r\n1: -- run_test.py: return code -6\r\n```\r\n\r\nAll the failing tests created `Clock` instances but never initialized the global default context. The cause of the failures probably had something to do with `Clock` removing its shutdown callback from the global default context in its destructor.\r\n\r\nThis ties into another problem with the PR: the `Clock::sleep_until` would wake on shutdown of the global default context, but it can't be assumed that context is the one being used. This PR makes `Clock::sleep_until()` take a context as the second argument, and has it default to the global default context for convenience.\r\n\r\nThis new API [overlaps with `Context::sleep_for()`](https://github.com/ros2/rclcpp/blob/94264320b4a2fde8999b895824d2c85cf0e4d2ac/rclcpp/src/rclcpp/context.cpp#L493-L495). Maybe that method should be deprecated?\r\n\r\nI haven't yet reviewed a lot of the other code, so I'm leaving this as a draft while I do that.",
    "head_branch": "clock_sleep_for",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Re-add Clock::sleep_until (#1814)\n\n* Revert \"Revert \"Add Clock::sleep_until method (#1748)\" (#1793)\"\r\n\r\nThis reverts commit d04319a4381909c871b062e73b5975689126fbb6.\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Context, Shutdown Callback, Condition Var per call\r\n\r\nThe `Clock` doesn't have enough information to know which Context should\r\nwake it on shutdown, so this adds a Context as an argument to\r\nsleep_until().\r\n\r\nSince the context is per call, the shutdown callback is also registered\r\nper call and cannot be stored on impl_.\r\n\r\nThe condition_variable is also unique per call to reduce spurious\r\nwakeups when multiple threads sleep on the same clock.\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Throw if until has wrong clock type\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* unnecessary newline\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Shorten line\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Fix time jump thresholds and add ROS time test\r\n\r\nUse -1 and 1 thresholds because 0 and 0 is supposed to disable the\r\ncallbacks\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Shorten line\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* rclcpp::ok() -> context->is_valid()\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* No pre-jump handler instead of noop handler\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* If ros_time_is_active errors, let it throw\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Get time source change from callback to avoid race if ROS time toggled quickly\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Fix threshold and no  pre-jump callback\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Use RCUTILS_MS_TO_NS macro\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Explicit cast for duration to system time\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Throws at the end of docblock\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Add tests for invalid and non-global contexts\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175a318912b45d36a7224",
    "number": 1813,
    "body": "I think it's useful if we can use the return value version of `get_parameter_or` because we can make the variable const.\r\n\r\nNormally, we can get the parameter value by `declare_parameter`, but I guess it can't be used when we use `automatically_declare_parameters_from_overrides`.\r\n\r\nIs it possible to add this or are there any other ways?",
    "head_branch": "add-return-value-version-of-get-parameter-or",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add return value version of get_parameter_or (#1813)\n\n* Add return value version of get_parameter_or\r\n\r\n* Add test case\r\n\r\nSigned-off-by: Kenji Miyake <kenji.miyake@tier4.jp>\r\nCo-authored-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175a518912b45d36a7225",
    "number": 1811,
    "body": "This is an automatic backport of pull request #1658 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1658",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix returning invalid namespace if sub_namespace is empty (#1658) (#1811)\n\n* Create valid effective namespace when sub-namespace is empty\r\n\r\nFix #1656.\r\n\r\nSigned-off-by: Markus Hofstaetter <markus.hofstaetter@ait.ac.at>\r\n\r\n* Add regression test for effective namespace and empty sub-namespace\r\n\r\nAdds regression test for #1656.\r\n\r\nSigned-off-by: Markus Hofstaetter <markus.hofstaetter@ait.ac.at>\r\n(cherry picked from commit 3cddb4edab317758dc8a8cac94b90794641c7488)\r\n\r\nCo-authored-by: M. Hofst√§tter <markus.hofstaetter@gmx.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175a618912b45d36a7226",
    "number": 1810,
    "body": "This is an automatic backport of pull request #1658 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1658",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix returning invalid namespace if sub_namespace is empty (#1658) (#1810)\n\n(cherry picked from commit 3cddb4edab317758dc8a8cac94b90794641c7488)\r\n\r\nSigned-off-by: Markus Hofstaetter <markus.hofstaetter@ait.ac.at>\r\nCo-authored-by: M. Hofst√§tter <markus.hofstaetter@gmx.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175a718912b45d36a7227",
    "number": 1808,
    "body": "Otherwise, since the `message_` field of the Rvalue reference\r\npassed into the move constructor of `LoanedMessage` was not set\r\nto `nullptr`, the underlying message would be double-free'd.\r\n\r\nFixes #1806.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>",
    "head_branch": "aprotyas/fix/1806/LoanedMessage_destructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Take message ownership from moved LoanedMessage (#1808)\n\n* Take message ownership from moved LoanedMessage\r\n\r\nOtherwise, since the rvalue reference passed into the move\r\nconstructor of `LoanedMessage` was not set to `nullptr`, the\r\nunderlying message would be double-free'd.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Add unit test for LoanedMessage move construction\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n\r\n* Include <utility> header to satisfy cpplint\r\n\r\n`std::move` was being used without including said header,\r\nwhich made cpplint unhappy.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175a818912b45d36a7228",
    "number": 1807,
    "body": "Mostly a backport of #1771 but the default behavior for handling SIGINT is not enabled to preserve backwards compatibility.\r\n\r\nThe PR was done in three steps:\r\n * Backport #1771 7c1bd17\r\n * Turn off the default for SIGINT 03267bf\r\n\r\nIn a final step, I realized that adding a new parameter we will be kiling the ABI of `rclcpp::init` which sounds to me not a nice thing to do. I tried to avoid it by keeping the current signature of `rclcpp::init,`making it to call a new signature that includes the `SignalHandlerOptions` with the option of only enabling SigTerm. Hopefully the change in e0dad49 will make the `rclcpp::init` options in the same way but keeping ABI stable.",
    "head_branch": "jrivero/galactic_backport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175a918912b45d36a7229",
    "number": 1805,
    "body": "Calls the `ament_cmake_gen_version_h` function to generate and\r\ninstall a header file containing `rclcpp` version information.\r\n\r\nProvides compile-time version information for `rclcpp`.\r\n\r\nCloses #1804.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>\r\n",
    "head_branch": "aprotyas/rclcpp_generate_version_header",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Call CMake function to generate version header (#1805)\n\nProvides compile-time version information for `rclcpp`.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <aprotyas@u.rochester.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175aa18912b45d36a722a",
    "number": 1802,
    "body": "clang static analysis complains that there are dead stores in\r\nmost of the benchmark tests, which is technically correct.\r\nWe use an idiom like:\r\n\r\nfor (auto _ : state) {\r\n}\r\n\r\nAnd never access _.  Silence clang here by doing (void)_;\r\nall of the places this is seen.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/suppress-clang-dead-store",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Suppress clang dead-store warnings in the benchmarks. (#1802)\n\nclang static analysis complains that there are dead stores in\r\nmost of the benchmark tests, which is technically correct.\r\nWe use an idiom like:\r\n\r\nfor (auto _ : state) {\r\n}\r\n\r\nAnd never access _.  Silence clang here by doing (void)_;\r\nall of the places this is seen.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175ab18912b45d36a722b",
    "number": 1801,
    "body": "This is a followup to the discussion in https://github.com/ros2/rclcpp/pull/1375.",
    "head_branch": "clock_qos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix unused QoS profile for clock subscription and make ClockQoS the default (#1801)\n\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175ad18912b45d36a722c",
    "number": 1799,
    "body": "address https://github.com/ros2/rclcpp/issues/1798\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20211011-node_waitables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add node_waitables_ to copy constructor. (#1799)\n\n* add node_waitables_ to copy constructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add node_time_source_ to copy constructor.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add construction_and_destruction_sub_node for action server.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\nCo-authored-by: Abrar Rahman Protyasha <abrar@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175ae18912b45d36a722d",
    "number": 1796,
    "body": "My attempt at fixing https://github.com/ros2/rclcpp/issues/731. The tldr of the change here is when a sub node is created, the pointer to the new node creates a new pointer to a `NodeParameters` object instead of being given the \"parent\" nodes pointer. This results in the following behavior change from parameters,\r\n\r\n- Parameters are scoped into the node/sub node\r\n- When a callback is registered via the `add_on_set_parameters_callback` call, it will only be triggered when a parameter registered to that particular node or sub node is modified, i.e. if `node_a` has a sub node `sub_node_a` and a parameter of `sub_node_a` is modified, callbacks registered to `node_a` will not be called\r\n- Node options are still past down to sub nodes, so parameter relevant options such as `allow_undeclared_parameters` will apply to any sub nodes\r\n\r\nI feel like the fix to this issue can't be this simple; however, I have been unable to find any test failures or problems that result from this change. I did add unit tests that failed prior to making this modification and then pass after the change.\r\n\r\nSigned-off-by: Jordan Lack <jlack@houstonmechatronics.com>",
    "head_branch": "feature/731",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175af18912b45d36a722e",
    "number": 1794,
    "body": "Signed-off-by: George Stavrinos gstavrinos@protonmail.com",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Foxy README now points to foxy docs (#1794)\n\nSigned-off-by: George Stavrinos <gstavrinos@protonmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175b018912b45d36a722f",
    "number": 1793,
    "body": "This reverts commit 81df5843f321b08db621c17502ff94193ffd3657.\r\n\r\nAttempts to address `nighly_osx_debug` test regressions.",
    "head_branch": "blast545_revert1748",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Add Clock::sleep_until method (#1748)\" (#1793)\n\nThis reverts commit 81df5843f321b08db621c17502ff94193ffd3657.\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175b118912b45d36a7230",
    "number": 1791,
    "body": "Signed-off-by: George Stavrinos <gstavrinos@protonmail.com>",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Galactic README now points to galactic docs (#1791)\n\nSigned-off-by: George Stavrinos <gstavrinos@protonmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175b218912b45d36a7231",
    "number": 1790,
    "body": "just a typo fix.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20210929-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "typo fix. (#1790)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175b318912b45d36a7232",
    "number": 1789,
    "body": "This PR aims to add a way to set parameters from inside another parameter's callback. \r\n\r\n## Current approach : \r\n* Maintain a separate vector container for callbacks passed using the ``allowRecursion`` boolean flag to ``add_on_set_parameters`` method.\r\n* Maintain a loop counter and a context tracker to allow only recursive container callbacks to be called when ``set_parameters_atomically`` is called from inside another parameter's callback.\r\n\r\n## TODO for current approach : \r\n* Manage loop counter and recursive access to ``add_on_set_parameters``, ``remove_on_set_parameters``, ``undeclare_parameters``\r\n* Clean up code, remove debug prints\r\n\r\n## Concerns\r\n* Complicated locking and overall approach \r\n* Thread safety\r\n* Order in which callbacks are run can be difficult to understand for the user, which may lead to unexpected behavior of parameter actions\r\n\r\n## Suggested alternatives\r\n* Have a new action called ``update_parameters`` which would update the parameters without triggering their callbacks. This would not solve the overall problem exactly, but would be much simpler to debug and understand.\r\n* Maybe have this action inside ``get_parameters`` ?\r\n\r\n## Original model :\r\n\r\n![image](https://user-images.githubusercontent.com/18661155/135154602-c60d9e92-b893-4b73-8ec8-0fa46bb78b03.png)\r\n\r\n## Current approach : \r\n\r\n![image](https://user-images.githubusercontent.com/18661155/135154731-6714110e-fe44-48e7-9011-d7a89fceaf2c.png)\r\n",
    "head_branch": "aditya/param_set_inside_callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175b418912b45d36a7233",
    "number": 1788,
    "body": "Connected to https://github.com/ros2/rcl/pull/938.",
    "head_branch": "hidmic/fix-rcl_lifecycle-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update forward declarations of `rcl_lifecycle` types (#1788)\n\n* Include rcl_lifecycle and drop forward declarations\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175b618912b45d36a7234",
    "number": 1784,
    "body": "Blocked by:\r\nhttps://github.com/ros2/rcl/pull/941\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>",
    "head_branch": "mauro/add-qos-getters-cli-serv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add client/service QoS getters (#1784)\n\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175b718912b45d36a7235",
    "number": 1783,
    "body": "I'm not sure why our cppcheck test does not catch these, but in my editor it pointed them out and they were worth addressing in my opinion.",
    "head_branch": "fixup_cppcheck_extra_warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fixup some small things that cppcheck noticed in my editor (#1783)\n\n* fixup some small things that cppcheck noticed in my editor\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix implementation too\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175b818912b45d36a7236",
    "number": 1782,
    "body": "This pull request addresses clang-tidy warnings about explicit constructors.\r\n\r\nCloses https://github.com/space-ros/space-ros/issues/9",
    "head_branch": "clang_tidy_explicit_constructors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "clang-tidy: explicit constructors (#1782)\n\n* mark some single-argument constructors explicit that should have been\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* suppress clang-tidy [google-explicit-constructor] in some cases where it is a false-positive\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Revert \"suppress clang-tidy [google-explicit-constructor] in some cases where it is a false-positive\"\r\n\r\nThis reverts commit eb6bf7e2df0dd27c945e97584ba9902ef9f61305.\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175b918912b45d36a7237",
    "number": 1781,
    "body": "Signed-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nRelated to https://github.com/ros2/rclcpp/issues/1774\r\n\r\nit offer an ‚Äúexecutor per component‚Äù behavior for container, we can use `use_dedicated_thread` parameter to enable this.\r\n",
    "head_branch": "use_dedicated_executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "create component_container_isolated (#1781)\n\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175ba18912b45d36a7238",
    "number": 1779,
    "body": "Precisely what the title says.There's a long list of issues, in Doxygen and Exhale, yet to be addressed or worked around.",
    "head_branch": "hidmic/fix-rclcpp-docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix rclcpp documentation build (#1779)\n\n* Update Doxyfile\r\n* Update docblocks with warnings\r\n* Use leading * instead of trailing [] for pointer types\r\n* Help Doxygen parse std::enable_if<> condition\r\n* Add documentation-only SFINAE functions' declarations\r\n* Avoid function pointer type syntax in function arguments.\r\n* Add documentation-only SFINAE function traits.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175bb18912b45d36a7239",
    "number": 1777,
    "body": "Fixes #1775\r\n\r\nConnext takes significantly longer for discovery to happened compared to the other RMWs, and so the previous 2 seconds of waiting was not enough.\r\nLocal observation shows it takes about 3 seconds to get a message from the subscription. This change bumps the timeout to 10 seconds to be conservative.\r\n\r\n**Edit:** Rather than increasing the timeout, I've instead modified the tests to wait for the publisher and subscription to match before publishing a message.\r\n\r\n---\r\n\r\n~~Though this seems to alleviate the issue, I've still observed the test sometimes hits the 10 second timeout and fails; as if the published message never reaches the subscription. Even though the publisher and subscription are created by the same node (and participant), perhaps we still need to wait for discovery to happen (or use transient local durability).~~\r\n\r\n@asorbini FYI, this is one of many cases where Connext has bit us as it takes much longer to perform discovery.",
    "head_branch": "jacob/fix_1775",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Wait for publisher and subscription to match (#1777)\n\nFix #1775\r\n\r\nConnext takes significantly longer for discovery to happened compared to the other RMWs.\r\nSo, waiting an arbitrary amount of time for a message to be received is brittle.\r\n\r\nBy instead waiting for the publisher and subscription to match, the tests become more robust.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175bc18912b45d36a723a",
    "number": 1776,
    "body": "Signed-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nrelated to https://github.com/ros2/rclcpp/issues/978#. \r\n\r\ni'm trying to implement composed bringup for Nav2, but it can't work as expected. the reason is that internal nodes (like `local_costmap`, `global_costmap`) in Nav2 couldn't  load parameters from param's file(`use_global_arguments` is setting `false`) https://github.com/ros2/rclcpp/blob/f30329fbec79cb699f41a37cc27c0c475de3edc1/rclcpp_components/src/component_manager.cpp#L164\r\n\r\naccording to @wjwwood opinion( https://github.com/ros2/rclcpp/issues/978#issuecomment-593718794 ),    `allow_undeclared_parameters` and `use_global_arguments` shouldn't be a parameter,  but the `use_global_arguments`  does have a legitimate use case here (for Nav2), and i think it's useful when we have a large params file to configure all nodes (or component nodes).\r\n\r\n`use_global_arguments = true` is default behavior for all other situations so its strange that we cannot set it to true at all due to \"its generally bad\" advise for the component container. It creates a situations where component container nodes have a different behavior from everywhere else and it silently fails if a user is clever enough to know that that is the problem. \r\n\r\nI still offer a warning to tell people not to do it but gives the flexibility to get the behavior that is expected every where else from the component container if explicitly called out in the extra parameters.\r\n\r\nsome extra details here: https://github.com/ros2/rclcpp/issues/978#issuecomment-920398249",
    "head_branch": "add_use_global_arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add use_global_arguments for node options of component nodes (#1776)\n\n* add use_global_arguments for node options of component nodes\r\n\r\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nkeep use_global_arguments false default\r\n\r\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nupdate warning message\r\n\r\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nupdate warnning message\r\n\r\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nadd test\r\n\r\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\n* use forward_global_arguments instead of use_global_arguments\r\n\r\nSigned-off-by: zhenpeng ge <zhenpeng.ge@qq.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175bd18912b45d36a723b",
    "number": 1773,
    "body": "Signed-off-by: zhenpeng ge <zhenpeng.ge@qq.com>\r\n\r\nrelated to https://github.com/ros2/rclcpp/issues/1772. make `component_container` more flexible.\r\n\r\nWith these changes, we could choose `SingleThreadedExecutor`,  `MultiThreadedExecutor`, or a bunch of `SingleThreadedExecutor` to spin component nodes by setting parameters (`use_multi_executors` and `use_multi_threads`) for `component_container` .\r\n\r\nin addition, `component_container_mt` should be deprecated in the future.",
    "head_branch": "support_multi_executors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175be18912b45d36a723c",
    "number": 1771,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1704.\r\n\r\nDone:\r\n- Cleanup previous code.\r\n- Refactor code to be able to handle more than one signal type.\r\n  This could be improved though, maybe storing a map from signal numbers to old signal handlers and using the same handler for all signals (?).\r\n- Handle sigterm.\r\n\r\nTODO:\r\n\r\n- [x] Add option, so users can decide if the want to install the rclcpp default sigint handler, sigterm handler, or both.\r\n  Currently it's only possible to install both or nothing.\r\n  - Done in https://github.com/ros2/rclcpp/pull/1771/commits/7f86095c2b9196a18bf736741f0a83152efb35dc.\r\n- [x] Discuss what's the desired default: installing only a sigint handler (previous behavior), or both sigint and sigterm (current behavior of this PR).\r\n  - Agreed on install a sigterm handler by default, made post in ros discourse https://discourse.ros.org/t/change-in-rclcpp-rclpy-shutting-down-gracefully-on-sigterm/22333/1.\r\n- [x] Add a launch test to verify that it works correctly.\r\n       No problem was detected while manually testing (with the `demo_nodes_cpp` `listener` executable).\r\n  - See https://github.com/ros2/system_tests/pull/485.",
    "head_branch": "ivanpauno/handle-sigterm",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Handle sigterm, in the same way we handle sigint (#1771)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175c018912b45d36a723d",
    "number": 1770,
    "body": "The implementation of the `ParameterEventHandler` object, in `parameter_event_handler.cpp`, has an instance of a `std::bind` capture that is dangerous. On line 178, the event subscription callback is set up like this:\r\n\r\n```\r\n  event_subscription_ = rclcpp::create_subscription<rcl_interfaces::msg::ParameterEvent>(\r\n      node_topics, \"/parameter_events\", qos,\r\n      std::bind(&ParameterEventHandler::event_callback, this, std::placeholders::_1));\r\n```\r\n\r\nThis could lead to a race condition if the destruction of the `ParameterEventHandler` is interleaved with processing of a parameter event in another thread.\r\n\r\nThis PR fixes the potential race condition by moving the state that needs to be accessed in the `event_callback` function, and the function itself, into a private `struct`. The `ParameterEventHandler` class holds a shared pointer to this struct, and the `std::bind` is replaced with a lambda function that captures a copy of that shared pointer. This means that as long as the lambda exists, the lifetime of the state data used by the callback is protected.\r\n\r\nFor additional context on why the race condition could occur, see [this presentation](https://docs.google.com/presentation/d/1FPUOh85col-KyczN2fpxafwcvUJYT1bnStcrxYS5KFQ/edit#slide=id.p) from @mxgrey. Specifically [the slides from this point](https://docs.google.com/presentation/d/1FPUOh85col-KyczN2fpxafwcvUJYT1bnStcrxYS5KFQ/edit#slide=id.ge5a9a1248e_0_189) describe how to use lambda and bind captures safely.\r\n\r\nNote that a lambda of the form `[this]() { ... }` is equivalent to `std::bind(..., this, ...)`. This is the pattern found in `ParameterEventHandler`.",
    "head_branch": "gbiggs/fix-bad-std-bind-capture-in-parameter-event-handler",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dangerous std::bind capture in ParameterEventHandler implementation (#1770)\n\nSigned-off-by: Geoffrey Biggs <gbiggs@killbots.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175c118912b45d36a723e",
    "number": 1768,
    "body": "The implementation of the `TimeSource` object, in `time_source.cpp`, has two instances of a `std::bind` capture that is dangerous:\r\n\r\n1. On line 132: `std::bind(&TimeSource::on_parameter_event, this, std::placeholders::_1));`\r\n2. On line 280: `std::bind(&TimeSource::clock_cb, this, std::placeholders::_1),`\r\n\r\nThese captures are dangerous because they capture `this` as a raw pointer. This does not protect the lifetime of the pointer, potentially leading to a race condition if the bound function is called after the class instance is destructed in any way.\r\n\r\nThe first instance above leads to a race condition and a segmentation fault in [one of the tests in OpenRMF](https://github.com/open-rmf/rmf_ros2/blob/87ce942d534b24da202c77efea5daf0fce47fe25/rmf_fleet_adapter/rmf_rxcpp/test/test_Transport.cpp#L110). In short, what happens is that the test ends and begins shutting down the ROS infrastructure. This shuts down the node, which detaches it from the `TimeSource`. However, just after that happens a context switch occurs and a parameter event begins being handled by [the `on_parameter_event` function](https://github.com/ros2/rclcpp/blob/665e37784a6f1772e0efd2685c10fb0c17fdac96/rclcpp/src/rclcpp/time_source.cpp#L297) of TimeSource - the destination of that first `std::bind` call, above. The first line of that function tries to use the `node_base_` pointer which has just been [reset by the other thread in `detach_node()`](https://github.com/ros2/rclcpp/blob/665e37784a6f1772e0efd2685c10fb0c17fdac96/rclcpp/src/rclcpp/time_source.cpp#L140). The result is a segmentation fault.\r\n\r\nThe fix is to shift the `TimeSource` object's internal state into a private structure that can be managed with a shared pointer, and passing a weak pointer to a lambda that calls the callback. The lambda first locks the weak pointer. If it cannot lock the weak pointer then it knows the state has gone and so the callback should not be executed. If it does lock the weak pointer, then even resetting it in another thread won't result in immediate deletion of the state. This allows the life time of the internal state to be extended to cover the callback when necessary, removing the race condition.\r\n\r\nRunning the test in question fails with a segmentation fault about 10% of the time. Fixing the bad capture eliminates the segmentation fault. Along with fixing the bad capture that caused the segmentation fault, this PR also fixes the other bad capture in `TimeSource`.\r\n\r\nThis PR splits the internal state of `TimeSource` into two separate objects that can be managed individually. This is done to allow the mostly-independent states to have their life times managed independently, maintaining the ability to attach and detach nodes independently of attaching and detaching clocks.",
    "head_branch": "gbiggs/fix-bad-std-bind-capture-in-time-source",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix dangerous std::bind capture in TimeSource implementation (#1768)\n\n* Convert internal state into shareable structs\r\n* Add documentation\r\n* PIMPL the class\r\n* Use a weak_ptr to avoid a potential dangling reference\r\n* Comply with the rule of 5\r\n\r\nSigned-off-by: Geoffrey Biggs <gbiggs@killbots.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175c218912b45d36a723f",
    "number": 1765,
    "body": "I got a stack-overflow error recently, this is a fix for it.\r\n\r\n<details><summary>see logs:</summary>\r\n<p>\r\n\r\n```\r\nplanner_server:\r\n[INFO] [1630557460.544698554] [planner_server]: \r\n\tplanner_server lifecycle node launched. \r\n\tWaiting on external lifecycle transitions to activate\r\n\tSee https://design.ros2.org/articles/node_lifecycle.html for more information.\r\n[INFO] [1630557460.563051134] [planner_server]: Creating\r\n[INFO] [1630557460.631254833] [global_costmap.global_costmap]: \r\n\tglobal_costmap lifecycle node launched. \r\n\tWaiting on external lifecycle transitions to activate\r\n\tSee https://design.ros2.org/articles/node_lifecycle.html for more information.\r\n[INFO] [1630557460.634697324] [global_costmap.global_costmap]: Creating Costmap\r\n[INFO] [1630557460.884957265] [planner_server]: Configuring\r\n[INFO] [1630557460.885066349] [global_costmap.global_costmap]: Configuring\r\n[INFO] [1630557460.896676654] [global_costmap.global_costmap]: Using plugin \"static_layer\"\r\n[INFO] [1630557460.902167490] [global_costmap.global_costmap]: Subscribing to the map topic (/map) with transient local durability\r\n[INFO] [1630557460.904731528] [global_costmap.global_costmap]: Initialized plugin \"static_layer\"\r\n[INFO] [1630557460.904796399] [global_costmap.global_costmap]: Using plugin \"obstacle_layer\"\r\n[INFO] [1630557460.907484730] [global_costmap.global_costmap]: Subscribed to Topics: scan\r\n[INFO] [1630557460.915886612] [global_costmap.global_costmap]: Initialized plugin \"obstacle_layer\"\r\n[INFO] [1630557460.915957409] [global_costmap.global_costmap]: Using plugin \"voxel_layer\"\r\n[INFO] [1630557460.918197528] [global_costmap.global_costmap]: Subscribed to Topics: pointcloud\r\n[INFO] [1630557460.932229600] [global_costmap.global_costmap]: Initialized plugin \"voxel_layer\"\r\n[INFO] [1630557460.932300644] [global_costmap.global_costmap]: Using plugin \"inflation_layer\"\r\n[INFO] [1630557460.936340679] [global_costmap.global_costmap]: Initialized plugin \"inflation_layer\"\r\n[INFO] [1630557460.959851122] [planner_server]: Created global planner plugin GridBased of type nav2_navfn_planner/NavfnPlanner\r\n[INFO] [1630557460.960006794] [planner_server]: Configuring plugin GridBased of type NavfnPlanner\r\n[INFO] [1630557460.973075750] [planner_server]: Planner Server has GridBased  planners available.\r\n[INFO] [1630557461.289557540] [planner_server]: Activating\r\n[INFO] [1630557461.289675011] [global_costmap.global_costmap]: Activating\r\n[INFO] [1630557461.289768116] [global_costmap.global_costmap]: Checking transform\r\n[INFO] [1630557461.290241669] [global_costmap.global_costmap]: start\r\n[WARN] [1630557461.290766620] [nav2_costmap_2d]: Robot is out of bounds of the costmap!\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==47293==ERROR: AddressSanitizer: stack-overflow on address 0x7fd0cb841ff8 (pc 0x7fff4104fac4 bp 0x7fd0cb842000 sp 0x7fd0cb842000 T15)\r\nLLVMSymbolizer: error reading file: No such file or directory\r\n    #0 0x7fff4104fac4  (linux-vdso.so.1+0xac4)\r\n    #1 0x7fd0db63b234 in clock_gettime /build/glibc-eX1tMB/glibc-2.31/time/../sysdeps/unix/sysv/linux/clock_gettime.c:38:10\r\n    #2 0x44273a in clock_gettime (/home/r1/ros2_nav_fuzz/build/nav2_planner/planner_server+0x44273a)\r\n    #3 0x7fd0db991c24 in std::chrono::_V2::steady_clock::now() (/lib/x86_64-linux-gnu/libstdc++.so.6+0xcdc24)\r\n    #4 0x7fd0dbeed0f7 in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb0f7)\r\n    #5 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #6 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #7 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #8 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #9 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #10 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #11 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #12 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #13 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #14 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #15 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #16 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #17 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #18 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #19 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #20 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #21 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #22 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #23 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #24 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #25 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #26 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #27 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #28 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #29 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #30 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #31 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #32 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #33 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #34 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #35 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #36 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #37 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #38 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #39 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #40 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #41 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #42 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #43 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #44 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #45 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #46 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #47 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #48 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #49 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #50 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #51 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #52 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #53 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #54 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #55 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #56 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #57 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #58 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #59 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #60 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #61 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #62 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #63 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #64 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #65 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #66 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #67 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #68 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #69 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #70 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #71 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #72 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #73 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #74 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #75 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #76 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #77 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #78 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #79 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #80 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #81 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #82 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #83 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #84 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #85 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #86 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #87 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #88 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #89 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #90 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #91 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #92 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #93 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #94 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #95 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #96 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #97 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #98 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #99 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #100 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #101 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #102 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #103 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #104 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #105 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #106 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #107 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #108 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #109 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #110 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #111 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #112 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #113 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #114 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #115 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #116 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #117 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #118 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #119 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #120 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #121 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #122 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #123 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #124 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #125 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #126 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #127 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #128 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #129 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #130 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #131 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #132 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #133 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #134 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #135 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #136 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #137 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #138 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #139 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #140 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #141 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #142 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #143 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #144 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #145 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #146 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #147 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #148 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #149 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #150 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #151 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #152 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #153 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #154 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #155 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #156 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #157 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #158 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #159 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #160 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #161 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #162 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #163 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #164 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #165 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #166 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #167 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #168 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #169 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #170 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #171 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #172 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #173 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #174 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #175 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #176 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #177 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #178 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #179 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #180 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #181 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #182 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #183 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #184 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #185 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #186 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #187 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #188 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #189 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #190 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #191 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #192 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #193 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #194 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #195 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #196 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #197 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #198 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #199 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #200 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #201 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #202 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #203 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #204 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #205 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #206 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #207 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #208 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #209 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #210 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #211 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #212 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #213 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #214 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #215 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #216 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #217 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #218 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #219 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #220 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #221 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #222 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #223 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #224 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #225 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #226 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #227 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #228 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #229 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #230 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #231 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #232 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #233 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #234 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #235 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #236 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #237 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #238 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #239 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #240 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #241 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #242 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #243 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #244 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #245 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #246 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #247 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n    #248 0x7fd0dbeed1ec in rclcpp::Context::sleep_for(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) (/opt/ros/foxy/lib/librclcpp.so+0xcb1ec)\r\n\r\nSUMMARY: AddressSanitizer: stack-overflow (linux-vdso.so.1+0xac4) \r\nThread T15 created by T0 here:\r\n    #0 0x481b7a in pthread_create (/home/r1/ros2_nav_fuzz/build/nav2_planner/planner_server+0x481b7a)\r\n    #1 0x7fd0db99b0a8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib/x86_64-linux-gnu/libstdc++.so.6+0xd70a8)\r\n    #2 0x7fd0dcd51213 in nav2_costmap_2d::Costmap2DROS::on_activate(rclcpp_lifecycle::State const&) /home/r1/ros2_nav_fuzz/src/navigation2/nav2_costmap_2d/src/costmap_2d_ros.cpp:224:28\r\n    #3 0x7fd0ddba9fda in nav2_planner::PlannerServer::on_activate(rclcpp_lifecycle::State const&) /home/r1/ros2_nav_fuzz/src/navigation2/nav2_planner/src/planner_server.cpp:148:17\r\n    #4 0x7fd0dda42c27 in rclcpp_lifecycle::LifecycleNode::LifecycleNodeInterfaceImpl::execute_callback(unsigned int, rclcpp_lifecycle::State const&) (/opt/ros/foxy/lib/librclcpp_lifecycle.so+0x2bc27)\r\n\r\n==47293==ABORTING\r\n\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nReplace recursion with do-while to avoid potential stack-overflow.\r\n\r\nSigned-off-by: zouyonghao <yonghaoz1994@gmail.com>",
    "head_branch": "fix_sleep_for",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace recursion with do-while (#1765)\n\nto avoid potential stack-overflow.\r\n\r\nSigned-off-by: zouyonghao <yonghaoz1994@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175c318912b45d36a7240",
    "number": 1764,
    "body": "The documentation for std::string::front() says that calling it\r\non an empty string is undefined behavior.  It actually seems to\r\nwork on all platforms except Windows Debug, where it throws an\r\nerror.  Make sure to check for empty first.\r\n\r\nWe also notice that there is no reason to check the\r\nexisting_sub_namespace for empty; the rest of the code handles\r\nthat fine.  So remove that check.\r\n\r\nFinally, we add an anonymous namespace so that these functions do\r\nnot pollute the global namespace.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nThis should fix the Windows Debug test failure as seen in https://ci.ros2.org/view/nightly/job/nightly_win_deb/2099/testReport/junit/projectroot.test/rclcpp/test_node/",
    "head_branch": "clalancette/fix-sub-namespaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure to check for empty extension before accessing front. (#1764)\n\nThe documentation for std::string::front() says that calling it\r\non an empty string is undefined behavior.  It actually seems to\r\nwork on all platforms except Windows Debug, where it throws an\r\nerror.  Make sure to check for empty first.\r\n\r\nWe also notice that there is no reason to check the\r\nexisting_sub_namespace for empty; the rest of the code handles\r\nthat fine.  So remove that check.\r\n\r\nFinally, we add an anonymous namespace so that these functions do\r\nnot pollute the global namespace.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175c418912b45d36a7241",
    "number": 1761,
    "body": "Backport #1584 to Foxy.",
    "head_branch": "jacob/foxy_backport_1584",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Guard against integer overflow in duration conversion (#1584) (#1761)\n\n* Guard against integer overflow in duration conversion (#1584)\r\n\r\nGuard against overflow when converting from rclcpp::Duration to builtin_interfaces::msg::Duration,\r\nwhich is a unsigned to signed conversion.\r\n\r\nUse non-std int types for consistency\r\n\r\nHandle large negative values\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Fix test\r\n\r\nrclcpp::Duration::from_nanoseconds is not available in Foxy.\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175c518912b45d36a7242",
    "number": 1760,
    "body": "Backport #1534 to Foxy.",
    "head_branch": "jacob/foxy_backport_1534",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update for checking correct variable (#1534) (#1760)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175c618912b45d36a7243",
    "number": 1759,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175c718912b45d36a7244",
    "number": 1756,
    "body": "fix https://github.com/ros2/rclcpp/issues/1746",
    "head_branch": "bugfix-20210810-get_current_state",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bugfix 20210810 get current state (#1756)\n\n* protect state_machine_ with mutex lock.\r\n\r\nprotect state_handle_ with mutex lock.\r\n\r\nreconsider mutex lock scope.\r\n\r\nremove mutex lock from constructors.\r\n\r\nlock just once during initialization of LifecycleNodeInterfaceImpl.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* Move updating of current_state to right after initialization.\r\n\r\nThis is slightly more correct in the case that registering one\r\nof the services fails.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175c818912b45d36a7245",
    "number": 1754,
    "body": "Currently it is possible for a `rclcpp::Context` to destruct while dependent objects (e.g. `rclcpp::Publisher`, `rclcpp::Subscription`) are still alive. This can lead to segmentation faults, exceptions, or other problems in the RMW layer.\r\n\r\nThis PR fixes that problem by tying the lifetime of contexts to the lifetimes of the node handles that depend on them. Since the objects that depend on nodes (like Publisher and Subscriber) hold a counted reference to their node handle, we just need to ensure that contexts remain alive as long as any of their dependent node handles are alive. This PR accomplishes that by distributing `std::shared_ptr<rcl_node_t>` instances that are actually an alias for a `std::shared_ptr<NodeHandleWithContext>` which bundles together a `std::shared_ptr<rclcpp::Context>` with a `rcl_node_t*`, and whose destructor will delete the `rcl_node_t*`.\r\n\r\nBy using an aliased `std::shared_ptr`, we get the benefit of the corrected lifetime without any modification to API or even ABI of `rclcpp`. It should be possible to squash this PR and then cherry-pick the commit onto other branches of rclcpp without any harmful effects.\r\n\r\nI've also added a unit test that will result in a seg fault if it gets run without the fix provided by this PR.",
    "head_branch": "fix/node_lifecycle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix lifetime of context so it remains alive while its dependent node handles are still in use (#1754)\n\n* Fix lifetime of context so it remains alive while its dependent node handles are still in use\r\n\r\nSigned-off-by: Michael X. Grey <grey@openrobotics.org>\r\n\r\n* Explicitly delete moving and assigning\r\n\r\nSigned-off-by: Michael X. Grey <grey@openrobotics.org>\r\n\r\n* Satisfy uncrustify\r\n\r\nSigned-off-by: Michael X. Grey <grey@openrobotics.org>\r\n\r\n* Fix more spacing complaints\r\n\r\nSigned-off-by: Michael X. Grey <grey@openrobotics.org>\r\n\r\n* Fixing style\r\n\r\nSigned-off-by: Michael X. Grey <grey@openrobotics.org>\r\n\r\n* Provide a safe move constructor to avoid double-allocation\r\n\r\nSigned-off-by: Michael X. Grey <grey@openrobotics.org>\r\n\r\n* Fix uncrustify\r\n\r\nSigned-off-by: Michael X. Grey <grey@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175c918912b45d36a7246",
    "number": 1752,
    "body": "Fixes #1742 \r\n@ivanpauno ",
    "head_branch": "qnx-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove can_be_nullptr assignment check for QNX case (#1752)\n\nSigned-off-by: Ahmed Sobhy <asobhy@blackberry.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175cb18912b45d36a7247",
    "number": 1751,
    "body": "PR makes clear what the `automatically_declare_parameters_from_overrides` flag does and emphasizes that the user should check if parameter already exists on the potential parameter declaration.\r\n\r\nPR tackles #1749.",
    "head_branch": "livanov/param_docs_prop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve documentation for auto declaration from overrides (#1751)\n\n* Improve documentation for auto declaration from overrides.\r\n\r\nSigned-off-by: voodoo <lovro.ivanov@gmail.com>\r\n\r\n* Fix spelling.\r\n\r\nSigned-off-by: voodoo <lovro.ivanov@gmail.com>\r\n\r\n* Extend description.\r\n\r\nSigned-off-by: voodoo <lovro.ivanov@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175cc18912b45d36a7248",
    "number": 1748,
    "body": "Part of #1730 \r\nRelated to ros2/rosbag2#694\r\n\r\nAdd a `Clock::sleep_until` method. Handle all 3 clock types, and edge cases for shutdown and enabling/disabling ROS time.\r\n\r\nAdds test cases for enable/disable ROStime, and `rclcpp::shutdown` - which needed special interrupts. Tests ROS time via `/clock` messages, and has basic testing for steady/system times, though those are much simpler cases.",
    "head_branch": "emersonknapp/clock-sleep-until",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add Clock::sleep_until method (#1748)\n\n* Add Clock::sleep_until method\r\n\r\nHandle all 3 clock types, and edge cases for shutdown and enabling/disabling ROS time\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175cd18912b45d36a7249",
    "number": 1747,
    "body": "This test is only for simple types (no arrays) mentioned in documentation chapter \"[About parameters in ROS 2](https://docs.ros.org/en/galactic/Concepts/About-ROS-2-Parameters.html)\". It's a follow up of #1743 since not all types with function templates are tested yet. The type mappings can be found [here](https://docs.ros.org/en/foxy/Concepts/About-ROS-Interfaces.html#field-types).",
    "head_branch": "test_function_templates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tests for function templates of declare_parameter (#1747)\n\n* Add function template tests for all defined types of declare_parameter\r\n\r\nSigned-off-by: Nico Neumann <nico.neumann@iosb.fraunhofer.de>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175ce18912b45d36a724a",
    "number": 1745,
    "body": "`rclcpp` implicitly depends on `FindPythonInterp` being found in `ament_cmake_core`. It fails to build when using a branch that switches `ament_cmake` to use `FindPython3`. This PR makes the dependency on a python interpreter explicit, and uses `FindPython3`.\r\n\r\nRelated to ros2/python_cmake_module#6\r\nBlocks ament/ament_cmake#355",
    "head_branch": "use_FindPython3_rclcpp",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use FindPython3 and make python3 dependency explicit (#1745)\n\n* Use FindPython3 and make python3 dependency explicit\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Need CMake 3.12 for FindPython3\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175cf18912b45d36a724b",
    "number": 1744,
    "body": "this PR is related to #1743 but does not compile at the moment as discussed in the issue.",
    "head_branch": "function_template_declare_param",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175d018912b45d36a724c",
    "number": 1741,
    "body": "This PR aims takle https://github.com/ros-simulation/gazebo_ros_pkgs/issues/1296 by backporting https://github.com/ros2/rclcpp/pull/1723 to galactic without breaking ABI. To do this, I added a new non virtual function in node_base class, and added static members to it to keep track of a global map of mutexes. This map stores the mutexes for each node_base instance. However, while using the new ```for_each_callback_group``` method, the pointer of type ```NodeBaseInterface``` has to be typecasted to ```NodeBase```. The global map of mutexes is written as a separate class and access to it is protected by an internal mutex.\r\n\r\n# TODO \r\n* General code cleanup, linting issues\r\n* Modify ```static_executor_entities_collector```\r\n* Modify the corresponding test cases",
    "head_branch": "aditya/thread-safe-cb",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Galactic: for_each_callback_group backport (#1741)\n\nAdded thread safe for_each_callback_group method\r\n\r\nSigned-off-by: Aditya Pande <aditya050995@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175d218912b45d36a724d",
    "number": 1740,
    "body": "backport of #1705",
    "head_branch": "galactic_wait_for_message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "wait for message (#1705) (#1740)\n\n* wait for message\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* move to own header file\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* linters\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* add gc for shutdown interrupt\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* mention behavior when shutdown is called\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* check gc\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175d318912b45d36a724e",
    "number": 1739,
    "body": "This PR fixes an issue with StaticSingleThreadedExecutor not reseting the timers, so they were always ready and executing callbacks continuosly.\r\n\r\nhttps://github.com/ros2/rclcpp/pull/1692#issuecomment-891791168\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n",
    "head_branch": "mauro/fix-timers-static-executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reset timer trigger time before execute. (#1739)\n\nThis PR fixes an issue with StaticSingleThreadedExecutor\r\nnot reseting the timers, so they were always ready\r\nand executing callbacks continuosly.\r\n\r\nhttps://github.com/ros2/rclcpp/pull/1692\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175d418912b45d36a724f",
    "number": 1738,
    "body": "This adds tracing instrumentation for message taking and the main \"phases\" of the executor. This instrumentation completes the loop from `rclcpp::publish()` down to DDS & the network and then back up all the way to the execution of the subscription callback.\r\n\r\nI also removed a field from the `rclcpp_publish` tracepoint since it's redundant (we'll know which publisher is publishing thanks to the `rcl_publish` tracepoint, and it's better to have it in `rcl_publish` instead of `rclcpp_publish` so that we can support all client libraries and not just rclcpp).\r\n\r\nRequires https://gitlab.com/ros-tracing/ros2_tracing/-/merge_requests/254\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "instrumentation-executor-take",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tracing instrumentation for executor and message taking (#1738)\n\n* Add tracing instrumentation for executor and message taking\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>\r\n\r\n* Move publisher handle argument to rcl_publish tracepoint\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>\r\n\r\n* Keep publisher handle arg for rclcpp_publish tracepoint but use nullptr\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175d518912b45d36a7250",
    "number": 1737,
    "body": "Backport of #1705 ",
    "head_branch": "foxy_wait_for_message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[Foxy backport] wait for message (#1705) (#1737)\n\n* wait for message (#1705)\r\n\r\n* wait for message\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* move to own header file\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* linters\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* add gc for shutdown interrupt\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* mention behavior when shutdown is called\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* check gc\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* change to on_shutdown API for foxy\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* Update rclcpp/include/rclcpp/wait_for_message.hpp\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175d618912b45d36a7251",
    "number": 1736,
    "body": "This is an automatic backport of pull request #1469 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1469",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix SEGV caused by order of destruction of Node sub-interfaces (#1469) (#1736)\n\n* added tear-down of node sub-interfaces in reverse order of their creation (#1469)\r\n\r\nSigned-off-by: Colin MacKenzie <colin@flyingeinstein.com>\r\n\r\n* added name of service to log message for leak detection. Previously it gave no indication of what node is causing the memory leak (#1469)\r\n\r\nSigned-off-by: Colin MacKenzie <colin@flyingeinstein.com>\r\n(cherry picked from commit b9ffd72f42ae44352256f2eab585299bf85c6346)\r\n\r\nCo-authored-by: Colin MacKenzie <guru-florida@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175d718912b45d36a7252",
    "number": 1734,
    "body": "Replaces https://github.com/ros2/rclcpp/pull/1728 (which was accidentally merged and requested).\r\nThe last two commits implement the change suggested here, to make this change more backwards compatible.",
    "head_branch": "ivanpauno/modified-client-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update client API to be able to remove pending requests (#1734)\n\n* Revert \"Revert \"Updating client API to be able to remove pending requests (#1728)\" (#1733)\"\r\n\r\nThis reverts commit d5f3d35fbe3127e30d4ee9d40f57c42584eeb830.\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Address peer review comments\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Fix tests in rclcpp_components, rclcpp_lifecycle\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175d818912b45d36a7253",
    "number": 1733,
    "body": "Reverts ros2/rclcpp#1728.\r\nI clicked the merge button in the wrong window, sorry.",
    "head_branch": "revert-1728-ivanpauno/modified-client-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Updating client API to be able to remove pending requests (#1728)\" (#1733)\n\nThis reverts commit bf752c75f57f95cff31bbd0a345751b5850782cc.\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175d918912b45d36a7254",
    "number": 1732,
    "body": "Fixes #1731",
    "head_branch": "for_each_callback_group_dll_linkage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "RCLCPP_PUBLIC -> RCLCPP_LIFECYCLE_PUBLIC (#1732)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175db18912b45d36a7255",
    "number": 1729,
    "body": "Part of ros2/rosidl#606 which deprecates `rosidl_target_interfaces()` in favor of `rosidl_get_typesupport_target()`",
    "head_branch": "use_rosidl_get_typesupport_target",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use rosidl_get_typesupport_target() (#1729)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175dc18912b45d36a7256",
    "number": 1728,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1697.\r\n\r\nThis modifies a few things in the client API:\r\n\r\n- Modifies the async_send_request() methods that take a callback as a second argument to not return a future anymore.\r\n  Though this breaks API, nobody was actually using that in the ROS 2 core.\r\n  If someone wants to have both a callback and a future, they can capture the future in a lambda and set it.\r\n  - Alternative: create a `SharedFutureAndRequestID` class, similar to the `FutureAndRequestID` class introduced here.\r\n  - I'm planning to deprecate the current callback signatures that accept a `Future`, and instead have the two listed below.\r\n    That wasn't done here to avoid having to create simultaneous PRs in other repos.\r\n    - void (SharedResponse)\r\n    - void (SharedRequest, SharedResponse)\r\n- Modifies the async_send_request() methods that take only one argument to return a `FutureAndRequestID`.\r\n  - This is a future like class.\r\n    Though it breaks ABI, it has some implicit conversions to `std::future` to not break API.\r\n    The implicit conversion by value was only added to not break existing code and generates a deprecation warning.\r\n- Adds a `remove_pending_request()` method, the return value of any of the async_send_request() overloads can be passed to it.\r\n\r\nExamples:\r\n\r\n```cpp\r\nauto future = client->async_send_request(request);\r\nauto result = executor->spin_until_complete(future, timeout);\r\nif (result == timeout) {\r\n  client->remove_request(future);\r\n  // handle timeout\r\n}\r\n```\r\n\r\nWhen using callbacks, you need to combine the client with a Timer to prune the old ones:\r\n\r\n```cpp\r\n  // this example supposes you're only waiting for one response at a time\r\n  //\r\n  // setup timer\r\n  this->timer = this->create_wall_timer(prune_old_requests, [this] () {\r\n    if (this->client->remove_request(this->last_request_id)) {\r\n      // handle timeout\r\n    }\r\n  };\r\n  this->timer.cancel();\r\n\r\n  // when sending a request\r\n  this->last_request_id = client->send_async_request(request, [this] (SharedResponse response) {\r\n    this->handle_response(response);\r\n    this->timer.cancel();\r\n  }\r\n  this->timer.reset();\r\n```",
    "head_branch": "ivanpauno/modified-client-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updating client API to be able to remove pending requests (#1728)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175dd18912b45d36a7257",
    "number": 1727,
    "body": "Closes #1725\r\n\r\nRequires https://github.com/ros2/system_tests/pull/479 to be merged before this, since some packages in system_tests use the `rclcpp/scope_exit.hpp` header.\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "use-rcpputils-scope-exit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use rcpputils/scope_exit.hpp and remove rclcpp/scope_exit.hpp (#1727)\n\n* Use rcpputils/scope_exit.hpp and remove rclcpp/scope_exit.hpp\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>\r\n\r\n* Remove RCLCPP_STRING_JOIN() since it's unused & also provided by rcutils\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>\r\n\r\n* Revert \"Remove RCLCPP_STRING_JOIN() since it's unused & also provided by rcutils\"\r\n\r\nThis reverts commit 072dabd4700b6ba22411b64a56bb2142d3939312.\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>\r\n\r\n* Re-add but deprecate rclcpp/scope_exit.hpp\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175de18912b45d36a7258",
    "number": 1726,
    "body": "https://github.com/ros2/rclcpp/pull/1709 broke `rclcpp_components` on Windows nighties, e.g.: https://ci.ros2.org/view/nightly/job/nightly_win_rel/2002/.\r\nI think this is a bug on Windows implementation of `std::bind`, as the previous code really should work.\r\n\r\nThis does some `if constexpr` magic using function traits to workaround the issue.\r\nI'm surprised we didn't hit a similar issue when using `std::variant` in `AnySubscriptionCallback` implementation, I have no idea of what's the difference.",
    "head_branch": "ivanpauno/fix-windows-any-service-callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix windows CI (#1726)\n\nFix bug in AnyServiceCallback introduced in #1709.\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175df18912b45d36a7259",
    "number": 1723,
    "body": "The main reason to add this method in is to make accesses to the\r\ncallback_groups_ vector thread-safe.  By having a\r\ncallback_groups_for_each that accepts a std::function, we can\r\njust have the callers give us the callback they are interested\r\nin, and we can take care of the locking.\r\n\r\nThe rest of this fairly large PR is cleaning up all of the places\r\nthat use get_callback_groups() to instead use\r\ncallback_groups_for_each().\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nThis is the solution to the problem identified in https://github.com/ros-simulation/gazebo_ros_pkgs/issues/1296 .  In short, when using a thread to deal with `use_sim_time`, it is the case that the callbacks_group_ vector can be accessed by two threads simultaneously.  In certain circumstances (particularly startup time), this can lead to a crash.  By doing proper locking, we avoid the crash.\r\n\r\nThere are two other things that I'd like to discuss in relation to this:\r\n\r\n1. Should we remove the now-unsafe `get_callback_groups()` method?  I have not done that here, but I really think we should.  It is not currently possible to access the `callback_groups_` vector in a thread-safe way.  Alternatively we could deprecate it, but given that there is really no safe way to use it I'd rather just remove it.\r\n2. When adding the `callback_groups_for_each()` method, I replicated the previous structure where there is a method on both the `NodeBase` and `Node` objects.  The latter is a thin wrapper around the former.  But it seems redundant; `Node` has a public method to get the `NodeBase`, and `NodeBase` has the public method `callback_groups_for_each()`.  So anyplace that currently does `node->callback_groups_for_each()` could be trivially changed to `node->node_base()->callback_groups_for_each()`.  I'd opt for removing the method from the `Node` class, but I'm interested in what others think\r\n\r\nQuestions, comments, and reviews are all very welcome.",
    "head_branch": "clalancette/thread-safe-callback-groups",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove unsafe get_callback_groups API.\n\nCallers should change to using for_each_callback_group(), or\nstore the callback groups they need internally.\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e018912b45d36a725a",
    "number": 1721,
    "body": "This is an automatic backport of pull request #1719 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1719",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix documentation bug (#1719) (#1721)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n(cherry picked from commit 86c079de3111631d8ae1a42eb40e1dd2f96c016f)\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e118912b45d36a725b",
    "number": 1720,
    "body": "This is an automatic backport of pull request #1719 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1719",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix documentation bug (#1719) (#1720)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n(cherry picked from commit 86c079de3111631d8ae1a42eb40e1dd2f96c016f)\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e218912b45d36a725c",
    "number": 1719,
    "body": "Signed-off-by: William Woodall <william@osrfoundation.org>",
    "head_branch": "fix_get_service_names_and_types_by_node_doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix documentation bug (#1719)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e418912b45d36a725d",
    "number": 1717,
    "body": "use new APIs based on https://github.com/ros2/rcl/pull/921\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-get-child-to-create-sublogger",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "to create a sublogger while getting child of Logger (#1717)\n\n* to create a sublogger while getting child of Logger\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e518912b45d36a725e",
    "number": 1716,
    "body": "As a follow-up to #1702, this PR renames the methods to use snake_case so they will be consistent with the other ROS 2 core packages.\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>",
    "head_branch": "fix-style-issues",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate method names that use CamelCase in rclcpp_components (#1716)\n\n* Rename methods in ComponentManager to use snake_case\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>\r\n\r\n* Deprecate old method names\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e618912b45d36a725f",
    "number": 1715,
    "body": "De-activating a lifecycle publisher while the function that was invoking `publish` is still running floods the log of useless warning messages.\r\nThis requires to add a boolean check around the publish call, thus making useless the choice of a lifecycle publisher over a regular publisher.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change log level for lifecycle_publisher (#1715)\n\n* Change log level for lifecycle_publisher\r\n\r\nDe-activating a lifecycle publisher while the function that was invoking `publish` is still running floods the log of useless warning messages.\r\nThis requires to add a boolean check around the publish call, thus making useless the choice of a lifecycle publisher\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* change lifecycle publisher to log warning only once per transition\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* rework lifecycle publisher log mechanism to use an helper function\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* change doxygen format to use implicit brief\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\nCo-authored-by: Alberto Soragna <asoragna@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e718912b45d36a7260",
    "number": 1714,
    "body": "This commit is to add the process for pre-shutdown callback.   \r\nMentioned at https://github.com/ros2/rclcpp/issues/1706#issuecomment-872613908  \r\n\r\nThis implementation follow existing interfaces as below:\r\nadd_on_shutdown_callback  \r\nremove_on_shutdown_callback   \r\nget_on_shutdown_callbacks   \r\n\r\nAdd interfaces as below: \r\nadd_pre_shutdown_callback\r\nremove_pre_shutdown_callback\r\nget_pre_shutdown_callbacks\r\n\r\nIf add new interface for post_shutdown, current implementation have to introduce new interfaces.  \r\nI think we can use one interface for different type of shutdown callback.  \r\ne.g.\r\n```c++\r\n  enum class ShutdownType\r\n  {\r\n    pre_shutdown,\r\n    on_shutdown\r\n  };\r\n\r\n  add_shutdown_callback(\r\n    ShutdownType shutdown_type,\r\n    ShutdownCallback callback);\r\n```\r\nBut this will obsolete current interface.   \r\nCould you share your opinion ?\r\n",
    "head_branch": "topic-add-pre-shutdown-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add the interface for pre-shutdown callback (#1714)\n\n* Add the interface for pre-shutdown callback\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e818912b45d36a7261",
    "number": 1713,
    "body": "Addresses #1619.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <abrar@openrobotics.org>",
    "head_branch": "aprotyas/deprecate-shared-ptr-sub-callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate the `void shared_ptr<MessageT>` subscription callback signatures (#1713)\n\n* Deprecated `shared_ptr<MessageT>` sub callbacks\r\n\r\nAddresses #1619.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <abrar@openrobotics.org>\r\n\r\n* Resolve deprecated subscription callbacks in tests\r\n\r\nSpecifically, `void shared_ptr<MessageT>` subscription callbacks have\r\nbeen migrated to `void shared_ptr<const MessageT>` subscription\r\ncallbacks.\r\n\r\nThis change has been performed only on the test files that do\r\nnot actually house unit tests for the `AnySubscriptionCallback` class.\r\nFor unit tests that actually target the deprecated `set` functions,\r\nthe deprecation warnings have to be avoided. This patch will be\r\nintroduced in a separate commit.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <abrar@openrobotics.org>\r\n\r\n* Suppress deprecation warnings in unit tests\r\n\r\nThis commit specifically introduces suppression of the deprecation\r\nwarnings produced while compiling unit tests for the\r\n`AnySubscriptionCallback` class.\r\n\r\nThe macro mechanics to conditionally include the `deprecated` attribute\r\nis not ideal, but the diagnostic pragma solution (`# pragma GCC\r\ndiagnostic ignored`) did not work for these unit tests, possibly because\r\nof the way gtest is initializing the necessary `InstanceContext`\r\nobjects.\r\n\r\nA `TODO` directive has been left to figure out a better way to address\r\nthis warning suppression.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <abrar@openrobotics.org>\r\n\r\n* Fix shared ptr callback in wait_for_message\r\n\r\nMoving away from deprecated signatures.\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <abrar@openrobotics.org>\r\n\r\n* `rclcpp_action`: Fix deprecated subscr. callbacks\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <abrar@openrobotics.org>\r\n\r\n* `rclcpp_lifecycle`: Fix deprecated sub callbacks\r\n\r\nSigned-off-by: Abrar Rahman Protyasha <abrar@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175e918912b45d36a7262",
    "number": 1711,
    "body": "Leftover from https://github.com/ros2/rclcpp/pull/1622\r\n\r\n@marcoag fyi, thanks for pointing it out :)",
    "head_branch": "remove_is_initialized_impl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove left over is_initialized() implementation (#1711)\n\nLeftover from https://github.com/ros2/rclcpp/pull/1622\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175ea18912b45d36a7263",
    "number": 1709,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1707, https://github.com/ros2/rclcpp/issues/491.\r\n\r\nTODO: add tests",
    "head_branch": "ivanpauno/support-defered-response-in-services",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Support to defer to send a response in services (#1709)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175ec18912b45d36a7264",
    "number": 1708,
    "body": "",
    "head_branch": "feature/add-param-for-thread-num",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add parameter to configure number of thread (#1708)\n\n* Add parameter to configure number of thread\r\n\r\nSigned-off-by: wep21 <border_goldenmarket@yahoo.co.jp>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175ed18912b45d36a7265",
    "number": 1705,
    "body": "Introducing \"wait_for_message\". Similar to ROS1, given either a node & topic or a previously instantiated subscription object, the function waits for the next incoming message until either received or timed out.\r\nI could further see some more overlays to this explicitly taking some QOS parameters, even though one could achieve this as-is by initializing the subscription explicitly. \r\n\r\nI am using it within some ros control functionality and it'd be great to have this backported to existing distros.",
    "head_branch": "wait_for_message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "wait for message (#1705)\n\n* wait for message\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* move to own header file\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* linters\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* add gc for shutdown interrupt\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* mention behavior when shutdown is called\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* check gc\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175ee18912b45d36a7266",
    "number": 1702,
    "body": "This PR adds a new container that creates an instance of the domain bridge on startup. The user must pass in a YAML config file specifying the domain IDs and topics to be bridged.\r\n\r\nThis PR also adds an extra argument to specify domain IDs when loading in components.\r\n\r\nFixes ros2/domain_bridge#31",
    "head_branch": "domain_bridge_container",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add hook to generate node options in ComponentManager (#1702)\n\n* Add domain bridge container and `domain` argument for components\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>\r\n\r\n* Fix linter errors\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>\r\n\r\n* Move domain_bridge_container to domain_bridge package\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>\r\n\r\n* Remove domain id argument and add getters/setters to ComponentManager\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>\r\n\r\n* Add SetNodeOptions function\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>\r\n\r\n* Rename SetNodeOptions -> CreateNodeOptions and refactor\r\n\r\nSigned-off-by: Rebecca Butler <rebecca@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175ef18912b45d36a7267",
    "number": 1700,
    "body": "This is still a WIP, just opening as draft to share.",
    "head_branch": "fix_wait_set",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175f018912b45d36a7268",
    "number": 1696,
    "body": "Signed-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-declareparameter-int-vector",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "to support declare parameter with int and float vector (#1696)\n\n* to support declare parameter with int vector\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update for float vector\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175f118912b45d36a7269",
    "number": 1695,
    "body": "This PR brings minor improvements to the intra-process-manager component:\r\n - use `rclcpp::QoS` and the new `qos_check_compatibility` API\r\n - remove not needed `PublihserInfo` and `SubscriberInfo` structures to reduce space requirements.\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/cleanup-ipc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup intra-process-manager (#1695)\n\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175f218912b45d36a726a",
    "number": 1693,
    "body": "This PR enables to configure number of threads in `component_container_mt` as below.\r\n```\r\n    container = ComposableNodeContainer(\r\n            name='my_container',\r\n            namespace='',\r\n            package='rclcpp_components',\r\n            executable='component_container_mt',\r\n            composable_node_descriptions=[component],\r\n            output='screen',\r\n            arguments=['-t', '5'],\r\n    )\r\n```",
    "head_branch": "feature/configurable_thread_num_for_container_mt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175f318912b45d36a726b",
    "number": 1692,
    "body": "I haven't seen issues related to this since https://github.com/ros2/rclcpp/pull/1516, but I think that's still a fragile approach.\r\nThis takes a simular approach to https://github.com/ros2/rclcpp/pull/1241 for timers:\r\n\r\n- rcl_timer_call() is called when getting the timer executable.\r\n  This is done in a mutually exclusive fashion, thus preventing a different thread from taking the same timer again.\r\n- execute() will only execute the timer callback, as `rcl_timer_call()` was called before.\r\n\r\nI think this approach is simpler and I expect it to work better, though I want to do some more testing to confirm that before merging.",
    "head_branch": "ivanpauno/timers-and-mtexecutor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use a different mechanism to avoid timers being scheduled multiple times by the MultiThreadedExecutor (#1692)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175f518912b45d36a726c",
    "number": 1690,
    "body": "This is a fix for a `StaticSingleThreadedExecutor` bug, which fails when adding a new node while the executor is spinning.\r\nThis happens due the `spin()` thread tries to add the new node's guard condition to the waitset, but the waitset has not been resized yet (so fails).\r\n\r\n0. `StaticSingleThreadedExecutor` created and spinning in its own thread.\r\n1. Node is added to executor, guard condition stored:\r\nhttps://github.com/ros2/rclcpp/blob/master/rclcpp/src/rclcpp/executors/static_executor_entities_collector.cpp#L330\r\n2. Spin thread tries to add the new guard condition to a _not-yet-resized_ wait set\r\nhttps://github.com/ros2/rclcpp/blob/master/rclcpp/src/rclcpp/executors/static_executor_entities_collector.cpp#L270\r\n3. Resize of the wait set happens when some guard condition of the executor has been triggered (this can happen after 2)\r\nhttps://github.com/ros2/rclcpp/blob/master/rclcpp/src/rclcpp/executors/static_executor_entities_collector.cpp#L110\r\n\r\nThe workaround in this PR is adding the new nodes' guard condition AFTER the wait set has been resized, so it can accept the guard condition.\r\n\r\nWasn't there a test for adding nodes while executor spinning? Couldn't find it.",
    "head_branch": "mauro/fix-static-executor-add-node-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bug: Add node while spinning\n\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175f618912b45d36a726d",
    "number": 1689,
    "body": "A previous commit (fd8cfa8fe3e61c9dc2bf2e7918a24c883982b6b6) introduced `InvalidParameterTypeException` which was an improved version of `ParameterTypeException` in the sense that it also included parameter name in the error message.\r\n\r\nOne of the places that raised this exception was `declare_parameter` function. Now as you can see in [this git-blame piece](https://github.com/ros2/rclcpp/blame/master/rclcpp/include/rclcpp/node_impl.hpp#L201-L230), a later commit (24bb65305d47bf8562e2b38432bfb5ed248d9047) added a second version of `declare_parameter` but the author forgot to use `InvalidParameterTypeException` there which leads to less useful messages. This PR fixes the issue.",
    "head_branch": "UseInvalidParameterTypeException",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use UninitializedStaticallyTypedParameterException (#1689)\n\n* Use UninitializedStaticallyTypedParameterException\r\n\r\nSigned-off-by: Mohammad Farzan <m2_farzan@yahoo.com>\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175f718912b45d36a726e",
    "number": 1687,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/fix-comment-typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change the word \"Attack\" -> \"Attach\". (#1687)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175f818912b45d36a726f",
    "number": 1686,
    "body": "I'm trying to debug an issue in rviz2 where it crashes with this warning and it would be really nice to know the name of the specific node that's giving me trouble. I half expect to just see \"rviz\" which won't be very helpful, but this isn't the first time I've run into the hunt for \"which node am I?\".\r\n\r\nIn general, when new software is ported to ROS2 (and folks are learning about spinning mechanisms in ROS2), this error comes up **alot** and it would be really helpful in debugging to know where to look when launching a large system. ",
    "head_branch": "throw_info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "adding node name to the executor runtime_error (#1686)\n\n* adding node name to the executor runtime_error\r\n\r\nSigned-off-by: Steve Macenski <stevenmacenski@gmail.com>\r\n\r\n* changing get_name() to get_fully_qualified_name() + linting\r\n\r\nSigned-off-by: Steve Macenski <stevenmacenski@gmail.com>\r\n\r\n* changing print format for tests\r\n\r\nSigned-off-by: Steve Macenski <stevenmacenski@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175f918912b45d36a7270",
    "number": 1685,
    "body": "* lock before rcl_set_ros_time_override\r\n\r\nSigned-off-by: Daisuke Sato <daisukes@cmu.edu>",
    "head_branch": "foxy-backport-1267",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix clock thread issue (#1266) (#1267) (#1685)\n\nSigned-off-by: Daisuke Sato <daisukes@cmu.edu>\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\nCo-authored-by: Daisuke Sato <43101027+daisukes@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175fa18912b45d36a7271",
    "number": 1684,
    "body": "experimental draft for https://github.com/ros2/rclcpp/issues/1679\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "experimental-20210524-should-check-response",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662175fb18912b45d36a7272",
    "number": 1683,
    "body": "* Fix occasionally missing goal result caused by race condition\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* Take action_server_reentrant_mutex_ out of the sending result loop\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* add note for explaining the current locking order in server.cpp\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>",
    "head_branch": "galactic-backport-1677",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix occasionally missing goal result caused by race condition (#1677) (#1683)\n\n* Fix occasionally missing goal result caused by race condition\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* Take action_server_reentrant_mutex_ out of the sending result loop\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* add note for explaining the current locking order in server.cpp\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\nCo-authored-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175fc18912b45d36a7273",
    "number": 1682,
    "body": "* Fix occasionally missing goal result caused by race condition\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* Take action_server_reentrant_mutex_ out of the sending result loop\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* add note for explaining the current locking order in server.cpp\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>",
    "head_branch": "foxy-backport-1677",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix occasionally missing goal result caused by race condition (#1677) (#1682)\n\n* Fix occasionally missing goal result caused by race condition\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* Take action_server_reentrant_mutex_ out of the sending result loop\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* add note for explaining the current locking order in server.cpp\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\nCo-authored-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175fd18912b45d36a7274",
    "number": 1681,
    "body": "Backport #1673 to Galactic.\r\n\r\nI've released this change into Rolling and haven't noticed any regressions. The only code I found that this affects is in navigation2 and I've got a patch there: https://github.com/ros-planning/navigation2/pull/2347",
    "head_branch": "jacob/backport_1673",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Declare parameters uninitialized (#1673) (#1681)\n\n* Declare parameters uninitialized\r\n\r\nFixes #1649\r\n\r\nAllow declaring parameters without an initial value or override.\r\nThis was possible prior to Galactic, but was made impossible since we started enforcing the types of parameters in Galactic.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Remove assertion\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Throw NoParameterOverrideProvided exception if accessed before initialized\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Add test getting static parameter after it is set\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Do not throw on access of uninitialized dynamically typed parameter\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Rename exception type\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Remove unused exception type\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Uncrustify\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662175fe18912b45d36a7275",
    "number": 1680,
    "body": "This makes it so that all QoS options can be overridden.",
    "head_branch": "audrow/make-override-all-qos-policies",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760018912b45d36a7276",
    "number": 1678,
    "body": "Addresses #1655",
    "head_branch": "rebind_deprecated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove use of std::allocator<>::rebind (#1678)\n\nrebind is deprecated in c++17 and removed in c++20\r\n\r\nSigned-off-by: Petter Nilsson <pettni@umich.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760118912b45d36a7277",
    "number": 1677,
    "body": "Fix occasionally missing goal result when a action finished quickly (one thread enter to `execute_result_request_received` and the other enter to `publish_result`).\r\n\r\n",
    "head_branch": "fix-occasionally-missing-goal-result",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix occasionally missing goal result caused by race condition (#1677)\n\n* Fix occasionally missing goal result caused by race condition\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* Take action_server_reentrant_mutex_ out of the sending result loop\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n\r\n* add note for explaining the current locking order in server.cpp\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621760218912b45d36a7278",
    "number": 1676,
    "body": "This is an automatic backport of pull request #1675 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1675",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix destruction order in lifecycle benchmark (#1676)\n\n(cherry picked from commit 56f68f9c44f26a4bd07d45caf39aad5d9945939c)\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>\r\nCo-authored-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760318912b45d36a7279",
    "number": 1675,
    "body": "This should be the last issue to get the benchmark jobs green, and I intend to backport it to Galactic as well.\r\n\r\nBefore: [![Build Status](https://build.ros2.org/buildStatus/icon?job=Rci__overlay_ubuntu_focal_amd64&build=25)](https://build.ros2.org/view/Rci/job/Rci__overlay_ubuntu_focal_amd64/25/)\r\nAfter: [![Build Status](https://build.ros2.org/buildStatus/icon?job=Rci__overlay_ubuntu_focal_amd64&build=26)](https://build.ros2.org/view/Rci/job/Rci__overlay_ubuntu_focal_amd64/26/)",
    "head_branch": "cottsay/lifecycle_benchmark",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix destruction order in lifecycle benchmark (#1675)\n\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760418912b45d36a727a",
    "number": 1674,
    "body": "required for https://github.com/ros2/demos/pull/482\r\n\r\nI tried a few solutions from the referenced SO post about this, but for various reasons, none of them work for us. So we'll just have to document that this macro must be used outside of any namespace to work properly.",
    "head_branch": "audrow/type-masquerading",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix syntax issue with gcc (#1674)\n\n* fix syntax issue with gcc\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* uncrustify\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621760518912b45d36a727b",
    "number": 1673,
    "body": "Fixes #1649\r\n\r\nAllow declaring parameters without an initial value or override.\r\nThis was possible prior to Galactic, but was made impossible since we started enforcing the types of parameters in Galactic.\r\n\r\n---\r\n\r\nOpening for early feedback. I still need to test this more thoroughly for my use-case and add documentation.",
    "head_branch": "jacob/fix_1649",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Declare parameters uninitialized (#1673)\n\n* Declare parameters uninitialized\r\n\r\nFixes #1649\r\n\r\nAllow declaring parameters without an initial value or override.\r\nThis was possible prior to Galactic, but was made impossible since we started enforcing the types of parameters in Galactic.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Remove assertion\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Throw NoParameterOverrideProvided exception if accessed before initialized\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Add test getting static parameter after it is set\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Do not throw on access of uninitialized dynamically typed parameter\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Rename exception type\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Remove unused exception type\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Uncrustify\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621760618912b45d36a727c",
    "number": 1672,
    "body": "This is an automatic backport of pull request #1671 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1671",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump the benchmark timeout for benchmark_action_client (#1672)\n\nPausing and resuming the measurement inside the timing loop can cause\r\nthe initial run duration calculation to underestimate how long the\r\nbenchmark is taking to run, which results in the recorded run taking a\r\nlot longer than it should. This is a known issue in libbenchmark.\r\n\r\nThis test is affected by that behavior, and typically takes a bit longer\r\nthan the others. The easiest thing to do right now is to just bump the\r\ntimeout. My tests show that 180 seconds is typically sufficient for this\r\ntest, so 240 should be a safe point to conclude that the test is\r\nmalfunctioning.\r\n\r\n(cherry picked from commit f245b4cc8107c2702c7edd1486e6025427ade57d)\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>\r\nCo-authored-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760718912b45d36a727d",
    "number": 1671,
    "body": "Pausing and resuming the measurement inside the timing loop can cause the initial run duration calculation to underestimate how long the benchmark is taking to run, which results in the recorded run taking a lot longer than it should. This is a known issue in libbenchmark.\r\n\r\nThis test is affected by that behavior, and typically takes a bit longer than the others. The easiest thing to do right now is to just bump the timeout. My tests show that 180 seconds is typically sufficient for this test, so 240 should be a safe point to conclude that the test is malfunctioning.\r\n\r\nThis test has been timing out for the past 121 consecutive attempts in Rolling: https://build.ros2.org/view/Rci/job/Rci__benchmark_ubuntu_focal_amd64/370/testReport/junit/projectroot.test/benchmark/benchmark_action_client/\r\n\r\n[![Build Status](https://build.ros2.org/buildStatus/icon?job=Rci__overlay_ubuntu_focal_amd64&build=24)](https://build.ros2.org/view/Rci/job/Rci__overlay_ubuntu_focal_amd64/24/)",
    "head_branch": "cottsay/benchmark_timeout",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump the benchmark timeout for benchmark_action_client (#1671)\n\nPausing and resuming the measurement inside the timing loop can cause\r\nthe initial run duration calculation to underestimate how long the\r\nbenchmark is taking to run, which results in the recorded run taking a\r\nlot longer than it should. This is a known issue in libbenchmark.\r\n\r\nThis test is affected by that behavior, and typically takes a bit longer\r\nthan the others. The easiest thing to do right now is to just bump the\r\ntimeout. My tests show that 180 seconds is typically sufficient for this\r\ntest, so 240 should be a safe point to conclude that the test is\r\nmalfunctioning.\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760818912b45d36a727e",
    "number": 1670,
    "body": "This is an automatic backport of pull request #1668 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1668",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[service] Don't use a weak_ptr to avoid leaking (#1668) (#1670)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n(cherry picked from commit d488535f366f9f59d3f72f6e15d1b5258c7d63c6)\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760a18912b45d36a727f",
    "number": 1669,
    "body": "This is an automatic backport of pull request #1668 done by [Mergify](https://mergify.io).\nCherry-pick of d488535f366f9f59d3f72f6e15d1b5258c7d63c6 has failed:\n```\nOn branch mergify/bp/foxy/pr-1668\nYour branch is up to date with 'origin/foxy'.\n\nYou are currently cherry-picking commit d488535f.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/include/rclcpp/service.hpp\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://help.github.com/articles/checking-out-pull-requests-locally/\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1668",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[service] Don't use a weak_ptr to avoid leaking (#1668) (#1669)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n(cherry picked from commit d488535f366f9f59d3f72f6e15d1b5258c7d63c6)\r\n\r\n# Conflicts:\r\n#\trclcpp/include/rclcpp/service.hpp\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760b18912b45d36a7280",
    "number": 1668,
    "body": "Fixes https://github.com/ros2/rmw_connextdds/issues/40.\r\n\r\nI don't see why we were using a weak_ptr, and that causes unexpected bugs when something external (e.g. the executor) is holding the rcl service handle but not the rcl node handle.\r\n\r\n-----\r\n\r\nOwnership diagram:\r\n\r\nparent =====> child\r\nweak_parent -----> weak_child\r\n\r\n```\r\n                                   (through a rclcpp::Node weak_ptr)\r\nrclcpp::Executor --------------------------------------------\r\n                                 |                          |\r\n                                 |                          |\r\n                                 V  (captured by deleter)   |\r\nrclcpp::Service =======> rcl_service handle=======||        |\r\n      ||                                          ||        |\r\n      ||                                          VV        V\r\n      ||=======================================> rcl_node handle\r\n```\r\n\r\nBased on the diagram above, I don't see any problem with keeping a shared_ptr instead of a weak_ptr in the deleter.\r\nI will run some tests with valgrind just in case.",
    "head_branch": "ivanpauno/service-avoid-leaking",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[service] Don't use a weak_ptr to avoid leaking (#1668)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760c18912b45d36a7281",
    "number": 1663,
    "body": "Noticed while reviewing documentation.",
    "head_branch": "jacob/fix_doc_typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix doc typo (#1663)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760d18912b45d36a7282",
    "number": 1662,
    "body": "Related to ros2/rmw#295",
    "head_branch": "topic-wait_for_all_acked-feature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add wait_for_all_acked support (#1662)\n\n* Add wait_for_all_acked support\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Update the description of wait_for_all_acked\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n* Use rcpputils::convert_to_nanoseconds() for time conversion\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621760e18912b45d36a7283",
    "number": 1661,
    "body": "Related to ros2/rmw#295",
    "head_branch": "topic-wait_for_all_acked-feature",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621760f18912b45d36a7284",
    "number": 1659,
    "body": "foxy backport for #1641.\r\n\r\nSigned-off-by: Kaven Yau kavenyau@foxmail.com",
    "head_branch": "foxy-backport-PR1641",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Returns CancelResponse::REJECT while goal handle failed to transit to CANCELING state (#1641) (#1659)\n\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761018912b45d36a7285",
    "number": 1658,
    "body": "Fixes #1656 . Instead of returning the node namespace with a slash (unless it was passed with one) we do not add one and rather return the unmodified namespace if the sub_namespace is empty.",
    "head_branch": "fix/1656-node-get_effective_namespace-returns-invalid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix returning invalid namespace if sub_namespace is empty (#1658)\n\n* Create valid effective namespace when sub-namespace is empty\r\n\r\nFix #1656.\r\n\r\nSigned-off-by: Markus Hofstaetter <markus.hofstaetter@ait.ac.at>\r\n\r\n* Add regression test for effective namespace and empty sub-namespace\r\n\r\nAdds regression test for #1656.\r\n\r\nSigned-off-by: Markus Hofstaetter <markus.hofstaetter@ait.ac.at>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761118912b45d36a7286",
    "number": 1657,
    "body": "Void allocators are not supposed to even have `allocate` nor `deallocate` methods (see [cppreference](https://en.cppreference.com/w/cpp/memory/allocator)). `allocator::get_rcl_allocator` has an [specialization](https://github.com/ros2/rclcpp/blob/1fc2d58799a6d4530522be5c236c70be53455e60/rclcpp/include/rclcpp/allocator/allocator_common.hpp#L85-L94) to bypass itself if `Allocator` is `std::allocator<void>`, but it doesn't cover custom void allocators (which shouldn't have `allocate` nor `deallocate` methods to begin with).\r\n\r\nThis patch amends this, keeping a rebound allocator for byte-sized memory blocks around for publisher and subscription options.\r\n\r\nFollow-up after 1fc2d58799a6d4530522be5c236c70be53455e60.\r\n",
    "head_branch": "hidmic/allocator-void-cannot-allocate",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Do not attempt to use void allocators for memory allocation. (#1657)\n\nKeep a rebound allocator for byte-sized memory blocks around\r\nfor publisher and subscription options.\r\n\r\nFollow-up after 1fc2d58799a6d4530522be5c236c70be53455e60\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761318912b45d36a7287",
    "number": 1654,
    "body": "foxy backport for #1635.\r\n\r\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>",
    "head_branch": "foxy-backport-PR1635",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix action server deadlock issue that caused by other mutexes locked in CancelCallback (#1635) (#1654)\n\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761418912b45d36a7288",
    "number": 1653,
    "body": "This is an automatic backport of pull request #1641 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1641",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Returns CancelResponse::REJECT while goal handle failed to transit to CANCELING state (#1641) (#1653)\n\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>\r\n(cherry picked from commit d051b8aa20fa263b1480945aebd1a8e5df315b67)\r\n\r\nCo-authored-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761518912b45d36a7289",
    "number": 1651,
    "body": "This is an automatic backport of pull request #1639 done by [Mergify](https://mergify.io).\nCherry-pick of 6806cdf825d9fcdbb4bfe2c6e2a74c4cb8bc5e11 has failed:\n```\nOn branch mergify/bp/foxy/pr-1639\nYour branch is up to date with 'origin/foxy'.\n\nYou are currently cherry-picking commit 6806cdf8.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   rclcpp/include/rclcpp/context.hpp\n\tmodified:   rclcpp/src/rclcpp/context.cpp\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/include/rclcpp/executor.hpp\n\tboth modified:   rclcpp/src/rclcpp/executor.cpp\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://help.github.com/articles/checking-out-pull-requests-locally/\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1639",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761618912b45d36a728a",
    "number": 1650,
    "body": "This is an automatic backport of pull request #1639 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1639",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use OnShutdown callback handle instead of OnShutdown callback (#1639) (#1650)\n\n1. Add remove_on_shutdown_callback() in rclcpp::Context\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n2. Add add_on_shutdown_callback(), which returns a handle that can be removed by remove_on_shutdown_callback().\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n(cherry picked from commit 6806cdf825d9fcdbb4bfe2c6e2a74c4cb8bc5e11)\r\n\r\nCo-authored-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621761718912b45d36a728b",
    "number": 1648,
    "body": "Yield CPU for graph changes to propagate. This is a shot in the dark, in hopes we can deal with flakes like [this](https://ci.ros2.org/view/nightly/job/nightly_win_rep/lastCompletedBuild/testReport/rclcpp/TestNode/get_publishers_subscriptions_info_by_topic/).\r\n\r\nRepeated Windows CI on `rclcpp`: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=14626)](https://ci.ros2.org/job/ci_windows/14626/)",
    "head_branch": "hidmic/fix-flaky-test_node-test-case",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix get_publishers_subscriptions_info_by_topic test in test_node.cpp (#1648)\n\n* Wait on graph guard condition for graph changes to propagate\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761818912b45d36a728c",
    "number": 1647,
    "body": "Also, enforce an allocator bound to void is used to avoid surprises. Connected to #1643.\r\n\r\nI used `mutable` and kept `MessageT` as template parameter to keep changes local (i.e. not force a change all the way up the call stack due template signature and `const`-ness changes).\r\n\r\nCI up to `rclcpp` and `demo_nodes_cpp`:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=14524)](http://ci.ros2.org/job/ci_linux/14524/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=9281)](http://ci.ros2.org/job/ci_linux-aarch64/9281/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=12190)](http://ci.ros2.org/job/ci_osx/12190/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=14627)](http://ci.ros2.org/job/ci_windows/14627/)\r\n\r\nthough I don't think we can easily write a regression test for this (i.e. in a way that's accurate and cross-platform). \r\n\r\nFixes https://github.com/ros2/rclcpp/issues/1339",
    "head_branch": "hidmic/keep-pubsub-allocator-alive",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Keep custom allocator in publisher and subscription options alive. (#1647)\n\n* Keep custom allocator in publisher and subscription options alive.\r\n\r\nAlso, enforce an allocator bound to void is used to avoid surprises.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Avoid sizeof(void) in MyAllocator implementation.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Address peer review comment\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Use a lazely initialized private field when 'allocator' is not initialized\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621761918912b45d36a728d",
    "number": 1646,
    "body": "This is an automatic backport of pull request #1635 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1635",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix action server deadlock issue that caused by other mutexes locked in CancelCallback (#1635) (#1646)\n\n* Fix deadlock issue that caused by other mutexes locked in CancelCallback\r\n\r\nSigned-off-by: Kaven Yau <love29881460@qq.com>\r\n\r\n* Add unit test for rclcpp action server deadlock\r\n\r\nSigned-off-by: Kaven Yau <love29881460@qq.com>\r\n\r\n* Update rclcpp_action/test/test_server.cpp\r\n\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\n\r\nCo-authored-by: Kaven Yau <love29881460@qq.com>\r\nCo-authored-by: Jacob Perron <jacob@openrobotics.org>\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\n(cherry picked from commit fba080cf34256243705e45b1eadc1c49057b5896)\r\n\r\nCo-authored-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761a18912b45d36a728e",
    "number": 1645,
    "body": "This is an automatic backport of pull request #1643 done by [Mergify](https://mergify.io).\nCherry-pick of 79c2dd8e8b3e73366c59474b91271a2fd57954bc has failed:\n```\nOn branch mergify/bp/foxy/pr-1643\nYour branch is up to date with 'origin/foxy'.\n\nYou are currently cherry-picking commit 79c2dd8e.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   rclcpp/test/rclcpp/CMakeLists.txt\n\tmodified:   rclcpp/test/rclcpp/test_intra_process_manager.cpp\n\tnew file:   rclcpp/test/rclcpp/test_intra_process_manager_with_allocators.cpp\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   rclcpp/include/rclcpp/experimental/intra_process_manager.hpp\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://help.github.com/articles/checking-out-pull-requests-locally/\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/foxy/pr-1643",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use dynamic_pointer_cast to detect allocator mismatch in intra process manager (backport #1643) (#1645)\n\n* use dynamic_pointer_cast to detect allocator mismatch in intra process manager (#1643)\r\n\r\n* use dynamic_pointer_cast to detect allocator mismatch in intra process manager\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add test case for mismatched allocators\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* forward template arguments to avoid mismatched types in intra process manager\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* refactor to test message address and count, more DRY\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* update copyright\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n(cherry picked from commit 79c2dd8e8b3e73366c59474b91271a2fd57954bc)\r\n\r\n# Conflicts:\r\n#\trclcpp/include/rclcpp/experimental/intra_process_manager.hpp\r\n\r\n* fix conflicts\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* cpp14 compatibility\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* More cpp14 compat\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* fix\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Fix bug\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761b18912b45d36a728f",
    "number": 1644,
    "body": "This is an automatic backport of pull request #1643 done by [Mergify](https://mergify.io).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.io/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.io/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.io/\n</details>\n",
    "head_branch": "mergify/bp/galactic/pr-1643",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use dynamic_pointer_cast to detect allocator mismatch in intra process manager (#1643) (#1644)\n\n* use dynamic_pointer_cast to detect allocator mismatch in intra process manager\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add test case for mismatched allocators\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* forward template arguments to avoid mismatched types in intra process manager\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* refactor to test message address and count, more DRY\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* update copyright\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n(cherry picked from commit 79c2dd8e8b3e73366c59474b91271a2fd57954bc)\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761c18912b45d36a7290",
    "number": 1643,
    "body": "We believe this is the root cause of https://github.com/ros2/demos/issues/501",
    "head_branch": "wjwwood/dynamic_cast_detect_allocator_mismatch_intra_process",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use dynamic_pointer_cast to detect allocator mismatch in intra process manager (#1643)\n\n* use dynamic_pointer_cast to detect allocator mismatch in intra process manager\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add test case for mismatched allocators\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* forward template arguments to avoid mismatched types in intra process manager\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* refactor to test message address and count, more DRY\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* update copyright\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761e18912b45d36a7291",
    "number": 1641,
    "body": "For fixing #1599. Some conversations in https://github.com/ros2/rclcpp/pull/1635 are helpful to this PR.",
    "head_branch": "checking-goal-handle-is-cancelable-before-transiting-to-canceling-state",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Returns CancelResponse::REJECT while goal handle failed to transit to CANCELING state (#1641)\n\nSigned-off-by: Kaven Yau <kavenyau@foxmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621761f18912b45d36a7292",
    "number": 1640,
    "body": "a subscriber on a new executor with a callback group triggered to receive a message\r\n\r\nrelated to https://github.com/ros2/rclcpp/issues/1611\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>",
    "head_branch": "topic-subscriber-triggered-to-receive-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bug that a callback not reached (#1640)\n\n* Add a test case\r\n\r\na subscriber on a new executor with a callback group triggered to receive a message\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* fix flaky and not to use spin_some\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update for not using anti-pattern source code\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add a notify guard condition for callback group\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* Notify guard condition of Node not to be used in Executor\r\n\r\nit is only for the waitset of GraphListener\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* put code in the try catch\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* defer to create guard condition\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* use context directly for the create function\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* cpplint\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* fix that some case might call add_node after shutdown\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* nitpick and fix some potential bug\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add sanity check as some case might not create notify guard condition after shutdown\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* Cleanup includes.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* remove destroy method\r\n\r\nmake a callback group can only create one guard condition\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* remove limitation that guard condition can not be re-created in callback group\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621762018912b45d36a7293",
    "number": 1639,
    "body": "1. Add remove_on_shutdown_callback() for the context\r\n2. on_shutdown_callback is removed by remove_on_shutdown_callback() while\r\n   the destructor of executor is executed.",
    "head_branch": "topic-fix-bug-on-shutdown-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use OnShutdown callback handle instead of OnShutdown callback (#1639)\n\n1. Add remove_on_shutdown_callback() in rclcpp::Context\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>\r\n\r\n2. Add add_on_shutdown_callback(), which returns a handle that can be removed by remove_on_shutdown_callback().\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621762118912b45d36a7294",
    "number": 1636,
    "body": "This is a backport of #1516 \r\n\r\nThis change is somewhat aggressive, but this change will greatly improve MultiThreadedExecutor performance.\r\nI added static variables, so it should be ABI compatible.\r\nI would appreciate any comments.\r\n\r\nrelated issues: #1618, https://github.com/ros-controls/ros2_control/pull/275 \r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>",
    "head_branch": "foxy_backport_mutex_two_priorities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow timers to keep up the intended rate in MultiThreadedExecutor #1516 (#1636)\n\nBackports #1516 and follow-up fix #1628\r\n\r\nPatched to keep ABI compatibility by using static class variables to store the mutex two priorities instances.\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621762218912b45d36a7295",
    "number": 1635,
    "body": "Resolves the deadlock issue mentioned in https://github.com/ros-planning/navigation2/issues/2273 and https://github.com/ros-planning/navigation2/pull/2304\r\n\r\nThe unit test which I added could also reproduce the issue.",
    "head_branch": "fix-goal_handle-race-condition-issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix action server deadlock issue that caused by other mutexes locked in CancelCallback (#1635)\n\n* Fix deadlock issue that caused by other mutexes locked in CancelCallback\r\n\r\nSigned-off-by: Kaven Yau <love29881460@qq.com>\r\n\r\n* Add unit test for rclcpp action server deadlock\r\n\r\nSigned-off-by: Kaven Yau <love29881460@qq.com>\r\n\r\n* Update rclcpp_action/test/test_server.cpp\r\n\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\n\r\nCo-authored-by: Kaven Yau <love29881460@qq.com>\r\nCo-authored-by: Jacob Perron <jacob@openrobotics.org>\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762318912b45d36a7296",
    "number": 1634,
    "body": "Resolves #1633 by increasing the timeout",
    "head_branch": "sloretz_bump_cppcheck_500s",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase cppcheck timeout to 500s (#1634)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762418912b45d36a7297",
    "number": 1632,
    "body": "While creating multiple SingleThreadedExecturors in different thread I ran in crashes.\r\nBy adding a lock for \"on_shutdown_callbacks_\" in \"on_shutdown\" which is called in the constructor of SingleThreadedExecturors I solved the issue.",
    "head_branch": "dnae_adas/bugfix_racecondition_in_context_creation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762518912b45d36a7298",
    "number": 1631,
    "body": "Set and initialize seem redundant.\r\nUpdate the doc brief to match the equivalent in node.hpp.",
    "head_branch": "jacob/clarify_docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clarify node parameters docs (#1631)\n\nSet and initialize seem redundant.\r\nUpdate the doc brief to match the equivalent in node.hpp.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621762618912b45d36a7299",
    "number": 1629,
    "body": "While testing ros2/rmw_fastrtps#523 I saw the following error message several times during the execution of `test_communication`\r\n\r\n```\r\n[ERROR] [rclcpp]: rcl_return_loaned_message_from_subscription() failed for subscription on topic '/test_message_BasicTypes': loaned_message argument is null\r\n```\r\n\r\nI discovered that `Executor::execute_subscription` was trying to return a loaned message, even when none was obtained (i.e. there was no data available)",
    "head_branch": "bugfix/avoid-returning-null-loan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid returning loan when none was obtained. (#1629)\n\nSigned-off-by: Miguel Company <MiguelCompany@eprosima.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762818912b45d36a729a",
    "number": 1628,
    "body": "Fixes #1008 \r\n\r\nThe naive implementation added in https://github.com/ros2/rclcpp/pull/1516 doesn't work as well as I expected.\r\nEven though only one \"low priority thread\" can be waiting in the \"data mutex\", it's still pretty likely to find the following behavior:\r\n\r\n- low priority thread releases data mutex and then the \"barrier\" mutex\r\n- another low priority thread releases takes the barrier mutex and then also takes the \"data\" mutex, even when there was a \"high priority\" thread waiting.\r\n\r\ni.e.: the \"high priority\" take isn't always as \"high priority\" as we wanted.\r\n\r\nInvestigating https://github.com/ros2/rclcpp/issues/1008, I realized that the problem was that the executor was taking too long to schedule a timer callback (see investigation in https://github.com/ros2/rclcpp/pull/1624).\r\nAfter some further investigation, I realized that the problem is that one of the \"worker threads\" is taking too long to remove the timer from the scheduled timers map, so a new timer callback can't be scheduled:\r\n\r\nhttps://github.com/ros2/rclcpp/blob/a62287bf8d1eab0f146394ff0efdd4da44d4ef34/rclcpp/src/rclcpp/executors/multi_threaded_executor.cpp#L109-L113\r\n\r\nEsentially, that's the same problem we observed in https://github.com/ros2/rclcpp/pull/1516, but the \"MutexTwoPriorities\" implementation wasn't good enough.\r\n\r\nWith this patch, I cannot reproduce the issue locally anymore.\r\n\r\n---\r\n\r\nSteps to reproduce the issue (on linux):\r\n\r\n```basj\r\nstress --cpu 8 &  # use number of cores instead of 8\r\nfor i in {1..100}; do ./test_multi_threaded_executor; if [ $? -ne 0 ]; then break;fi;clear; done\r\n```\r\n\r\nThat should sometimes fails with the old implementation, and shouldn't fail at all with the new one.\r\n\r\n---\r\n\r\nThe new implementation of \"MutexTwoPriorities\" is way trickier than the previous one, it should be reviewed with care.\r\n\r\nhttps://www.modernescpp.com/index.php/c-core-guidelines-be-aware-of-the-traps-of-condition-variables",
    "head_branch": "ivanpauno/improve-mutex-two-priorities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use a different implementation of mutex two priorities (#1628)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762918912b45d36a729b",
    "number": 1627,
    "body": "Based on @jacobperron comment:\r\n\r\n```cpp\r\nnode->declare_parameter(\"my_int\", 42);\r\nnode->add_on_set_parameters_callback([](const std::vector<rclcpp::Parameter> & params) {\r\n  for (const auto & param : params) {\r\n    if (param.get_name() == \"my_int\") {\r\n      param.as_int();\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThis could throw as the parameter type was checked after calling the user provided \"on set\" parameters callback.\r\nInver the order so parameter type is checked first (integer/floating point range will also be checked before user callbacks now).\r\n\r\nThis is also consistent with the current `rclpy` behavior: https://github.com/ros2/rclpy/blob/e938f92933a6919b8f277b17e5cd7deb18d75da1/rclpy/rclpy/node.py#L795-L811.",
    "head_branch": "ivanpauno/params-apply-type-range-enforcement-before-calling-user-callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check first parameter type and range before calling the user validation callbacks (#1627)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762a18912b45d36a729c",
    "number": 1626,
    "body": "The history qos policy of endpoints is not necessarely shared during discovery.\r\ncyclonedds does seem to share it, but fastrtps/connext don't and it's not guaranteed by the standard.\r\n\r\nTest the value of the `reliability` policy instead of `history`, which is shared during discovery by all the implementations.\r\n\r\nSee https://github.com/ros2/rmw_connextdds/pull/22#discussion_r610672597.",
    "head_branch": "ivanpauno/do-not-test-history-policy-test_node_graph-get_info_by_topic",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Do not test the value of the history policy when testing the get_publishers/subscriptions_info_by_topic() methods (#1626)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762b18912b45d36a729d",
    "number": 1625,
    "body": "This PR restores an exception for Connext in test `TestAllocatorMemoryStrategy::number_of_entities_with_subscription` which was [deleted](https://github.com/ros2/rclcpp/pull/1595/files#diff-4e1d578c35ec70e95e1a61099f536a316415483223a17061108a1a4e3f379a5bL514) in the process of replacing `rmw_connext_cpp` with `rmw_connextdds`.\r\n\r\nThe fix will enable `rmw_connextdds` to pass the test, as discovered while working on [rmw_connextdds#22](https://github.com/ros2/rmw_connextdds/pull/22).",
    "head_branch": "asorbini/test_alloc_mem_strategy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore test exception for Connext (#1625)\n\nSigned-off-by: Andrea Sorbini <asorbini@rti.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762c18912b45d36a729e",
    "number": 1624,
    "body": "Related to https://github.com/ros2/rclcpp/issues/1008.\r\n\r\nThis test has been failing since a while ago, and doesn't seem to be easy to solve.\r\nMarking it as xfail until a solution is found to avoid confusions.\r\n\r\n---\r\n\r\nWhat I think is happening is that the executor is being slow to execute the timer callback sometimes, and then the measured period is sometimes smaller than expected.\r\n\r\ne.g.: period = 1000ms\r\ntimer ready at t1\r\ncallback executed at t1 + 500ms (executor delayed to schedule the callback)\r\ntimer ready again at t1 + 1000ms\r\ncallback executed at t1 + 1100ms\r\nmeasured period of 1100ms - 500ms = 600ms\r\n\r\nI remember experiencing something like that a lot ago, though I should try again to confirm.",
    "head_branch": "ivanpauno/mark-test-multi-threaded-executor-as-xfail",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762d18912b45d36a729f",
    "number": 1623,
    "body": "This patch hopefully (as I cannot even locally reproduce CI failures) fixes what appears to be a race condition introduced by #1556, which is causing [test timeouts in CI](https://ci.ros2.org/view/nightly/job/nightly_linux_repeated/lastCompletedBuild/testReport/projectroot.test/rclcpp/test_time_source/). See https://github.com/ros2/rclcpp/pull/1556#issuecomment-814255120 for further reference.\r\n\r\nRepeated CI up to `rclcpp`:\r\n\r\n* Linux [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=14267)](https://ci.ros2.org/job/ci_linux/14267/)",
    "head_branch": "hidmic/fix-clock-sub-race",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix race condition in TimeSource clock thread setup (#1623)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621762e18912b45d36a72a0",
    "number": 1622,
    "body": "I went through all mentions of `deprecated` in rclcpp and checked if they existed on the foxy branch and generally investigated each.\r\n\r\nSince they already had deprecation warnings, downstream stuff really should not be broken, but CI will tell.\r\n\r\nSomeone please check my work.",
    "head_branch": "remove_deprecated_stuff_from_foxy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove deprecated code which was deprecated in foxy and should be removed in galactic (#1622)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621762f18912b45d36a72a1",
    "number": 1621,
    "body": "Wrapping the rcl API introduced in https://github.com/ros2/rcl/pull/907\r\n\r\n---\r\n\r\nThere are some issues with this change. Opening as a draft for visibility.\r\n\r\nThe issue boils down to using the node's graph guard condition in multiple wait sets concurrently.\r\n\r\nThe `rcl_wait_for_*` API uses the graph guard condition in a wait set as part of it's implementation.\r\nThe `rclcpp::GraphListener` also uses the graph guard condition, running in a separate thread:\r\n\r\nhttps://github.com/ros2/rclcpp/blob/091a8bcf86ca2697df8b94f485d62fc5687cc19c/rclcpp/src/rclcpp/graph_listener.cpp#L175-L180\r\n\r\nThis means that if a users try to use the `GraphListener`, which is [lazily started](https://github.com/ros2/rclcpp/blob/091a8bcf86ca2697df8b94f485d62fc5687cc19c/rclcpp/src/rclcpp/node_interfaces/node_graph.cpp#L377-L380), and then try to call one of the `rcl_wait_for_*` functions we get [undefined behavior](https://github.com/ros2/rcl/blob/b5a6c1831114e6fdaeaeb0995679f5715c8db168/rcl/include/rcl/wait.h#L458-L459).\r\n\r\nOut of curiosity, I've tried to replicate this undefined behavior scenario and I didn't notice anything unexpected:\r\n\r\n```c++\r\n#include <rclcpp/rclcpp.hpp>\r\n\r\nint main(void)\r\n{\r\n  rclcpp::init(0, nullptr);\r\n  auto node = std::make_shared<rclcpp::Node>(\"my_node\");\r\n  auto graph = node->get_node_graph_interface();\r\n\r\n  // This starts the GraphListener\r\n  auto event = graph->get_graph_event();\r\n\r\n  // Concurrently access the node's graph guard condition\r\n  bool wait_result = graph->wait_for_publishers(\"/foo\", 2, std::chrono::seconds(10));\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n---\r\n\r\nI think rather than wrapping the rcl functions, we could add similar implementations based on the `rclcpp::GraphListener`. This way we avoid undefined behavior.\r\n\r\nWe could additionally expose the `rcl` functions, but we should \"guard\" against using the same guard condition as the GraphListener (e.g. detect that they are both being used concurrently and throw an informative exception).\r\n\r\nAlternatively, we could add support to `rcl` (and `rmw`?) for multiple graph guard conditions. Then, the `rcl` functions could use a different guard condition than the `rclcpp::GraphListener`. I think this approach is more involved and is probably not worth the added complexity.\r\n\r\n",
    "head_branch": "jacob/wait_for",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763018912b45d36a72a2",
    "number": 1620,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/fix-index-links",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change index.ros.org -> docs.ros.org. (#1620)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763218912b45d36a72a3",
    "number": 1617,
    "body": "address https://github.com/ros2/rclcpp/pull/1556#issuecomment-812256630\r\n\r\nthis is bugfix introduced originally from https://github.com/ros2/rclcpp/pull/1556\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20210402-use-node-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use context from `node_base_` for clock executor. (#1617)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763318912b45d36a72a4",
    "number": 1616,
    "body": "Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52",
    "head_branch": "foxy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "updating quality declaration links (re: ros2/docs.ros2.org#52) (#1616)\n\nSigned-off-by: Simon Honigmann <shonigmann@blueorigin.com>\r\n\r\nCo-authored-by: Simon Honigmann <shonigmann@blueorigin.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763418912b45d36a72a5",
    "number": 1615,
    "body": "Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "updating quality declaration links (re: ros2/docs.ros2.org#52) (#1615)\n\nSigned-off-by: Simon Honigmann <shonigmann@blueorigin.com>\r\n\r\nCo-authored-by: Simon Honigmann <shonigmann@blueorigin.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763518912b45d36a72a6",
    "number": 1613,
    "body": "Requires https://github.com/ament/googletest/pull/15\r\n\r\nDraft, because @audrow has a similar change and is seeing failures in `rqt_gui_cpp`",
    "head_branch": "use_tgt_compile_features",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763618912b45d36a72a7",
    "number": 1612,
    "body": "This PR makes **rclcpp** to not handle directly `rcl_guard_condition_t`, but to use the `rclcpp::GuardCondition` class which takes care of creation/init/delete of it, which makes the code cleaner and less error prone. \r\n\r\nThe work being done in https://github.com/ros2/rmw/pull/286 assigns listener callbacks to RMW entities, and originally also assigned a callback to the RMW guard conditions, since many events are generated from the triggering of a guard condition. The listener callback for guard conditions is now removed, so this PR sets the ground for a possible implementation where the guard condition callback is called directly from `rclcpp::GuardCondition` (instead of the originall call from RMW guard conditions).\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>",
    "head_branch": "mauro/master-use-rclcpp-guard-cond",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use rclcpp::guard_condition (#1612)\n\n* Use rclcpp::GuardCondition\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Pass GuardCondition ptr instead of ref to remove_guard_condition\r\n\r\nBefore the api was taking a reference to a guard condition,\r\nthen getting the address of it. But if a node had expired,\r\nwe can't get the orig gc dereferencing a pointer,\r\nnor can we get an address of an out-of-scope guard condition.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Address PR comments\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621763718912b45d36a72a8",
    "number": 1610,
    "body": "Zero-initialize variables, otherwise the test may fail.\r\nThis can happen in release builds.\r\n\r\nI think this should fix: https://ci.ros2.org/job/nightly_linux_release/1870/testReport/junit/rclcpp/TestNode/SameParameterDifferentNode/",
    "head_branch": "jacob/fix_test_in_release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763818912b45d36a72a9",
    "number": 1609,
    "body": "Likely fixes https://ci.ros2.org/view/nightly/job/nightly_linux_release/1870/testReport/junit/projectroot.test/rclcpp/test_parameter_event_handler/\r\n\r\nI have only see that once, it's probably flaky due to the variables not being initialized.",
    "head_branch": "ivanpauno/test_parameter_event_handler_init_vars",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Initialize integers in test_parameter_event_handler.cpp to avoid undefined behavior (#1609)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763918912b45d36a72aa",
    "number": 1608,
    "body": "2nd try for #1603 / #1607\r\n\r\nThe upstream ros2_tracing MR has been merged: https://gitlab.com/ros-tracing/ros2_tracing/-/merge_requests/229\r\n\r\nThis makes the hundreds of deprecation warnings go away.\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "namespace-tracetools-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Namespace tracetools C++ functions (#1608)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621763b18912b45d36a72ab",
    "number": 1607,
    "body": "Reverts ros2/rclcpp#1603",
    "head_branch": "revert-1603-namespace-tracetools-functions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Namespace tracetools C++ functions (#1603)\" (#1607)\n\nThis reverts commit 3ab65715933fda37be06f14d3d6522161a1f1928.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621763c18912b45d36a72ac",
    "number": 1606,
    "body": "Apparently, the topics and services that LifecycleNode provides are not\r\navailable immediately after creating a node.\r\n\r\nFix flaky tests by accounting for some delay between the LifecycleNode\r\nconstructor and queries about its topics and services.\r\n\r\nFixes #1605 ",
    "head_branch": "jacob/fix_1605",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix flaky lifecycle node tests (#1606)\n\nApparently, the topics and services that LifecycleNode provides are not\r\navailable immediately after creating a node.\r\n\r\nFix flaky tests by accounting for some delay between the LifecycleNode\r\nconstructor and queries about its topics and services.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763d18912b45d36a72ad",
    "number": 1603,
    "body": "Requires https://gitlab.com/ros-tracing/ros2_tracing/-/merge_requests/229\r\n\r\nRelates to https://gitlab.com/ros-tracing/ros2_tracing/-/issues/119\r\n\r\nSee discussion under issue above.\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "namespace-tracetools-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Namespace tracetools C++ functions (#1603)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621763e18912b45d36a72ae",
    "number": 1602,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1601.\r\n\r\nlol",
    "head_branch": "ivanpauno/oh-yeah-destructuro",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Delete debug messages (#1602)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621763f18912b45d36a72af",
    "number": 1600,
    "body": "This adds publishing instrumentation, with the goal being to be able to track a message across all the layers.\r\n\r\nNote that we're only supporting \"normal,\" inter-process publishing for now.\r\n\r\nRequires https://gitlab.com/ros-tracing/ros2_tracing/-/merge_requests/227\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "add-publishing-instrumentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add publishing instrumentation (#1600)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764018912b45d36a72b0",
    "number": 1598,
    "body": "This pull request refactors `AnySubscriptionCallback` to use C++17's new `std::variant`.\r\nThis has the benefit of making the \"dispatch\" functions evaluate what to do at compile time using `constexpr`, avoiding runtime checks for which callback is set and therefore should be called.\r\n\r\nAlso refactoring it into the variant has side-effects needed for @audrow's work on supporting the new `TypeAdapter`s with `Subscription`s.\r\n\r\nAdditionally, I added some new subscription callback signatures and deprecated one other.\r\nI'm wanting a RFC (from anyone, but also @ros2/team) on these changes, specifically:\r\n\r\n- added a `const MessageT &` versions\r\n- removed redundant `const` statements on pass-by-value versions\r\n  - for example:\r\n      `std::function<void (const std::shared_ptr<const MessageT>)>` ->\r\n      `std::function<void (std::shared_ptr<const MessageT>)>`\r\n- added a `const std::shared_ptr<const MessageT> &` versions\r\n- ~~deprecated the `std::shared_ptr<MessageT>` versions~~\r\n  - We decided to not deprecate this right now, but discourage it in documentation and deprecate later (h-turtle?)\r\n\r\nDetails on each change below...\r\n\r\nHere's an exhaustive list of the callback signatures now:\r\n\r\n- `std::function<void (const MessageT &)>` (new)\r\n- `std::function<void (const MessageT &, const rclcpp::MessageInfo &)>` (new)\r\n- `std::function<void (std::unique_ptr<MessageT, MessageDeleter>)>`\r\n- `std::function<void (std::unique_ptr<MessageT, MessageDeleter>, const rclcpp::MessageInfo &)>`\r\n- `std::function<void (std::shared_ptr<const MessageT>)>` (removed redundant `const`)\r\n- `std::function<void (std::shared_ptr<const MessageT>, const rclcpp::MessageInfo &)>` (removed redundant `const`)\r\n- `std::function<void (const std::shared_ptr<const MessageT> &)>` (new)\r\n- `std::function<void (const std::shared_ptr<const MessageT> &, const rclcpp::MessageInfo &)>` (new)\r\n- `std::function<void (std::shared_ptr<MessageT>)>` (~~deprecated~~ we decided to push this until later)\r\n- `std::function<void (std::shared_ptr<MessageT>, const rclcpp::MessageInfo &)>` (~~deprecated~~ we decided to push this until later)\r\n\r\n----\r\n\r\nI think the new `const MessageT &` should be preferred unless you are doing something with the `unique_ptr` signature (trying to get zero-copy).\r\nI actually don't know what the use case for receiving a `shared_ptr` is over `const &`, to be honest.\r\n@mjcarroll didn't we discuss this at some point when refactoring the `publish()` signatures? Maybe we have notes?\r\n\r\n----\r\n\r\nI removed the redundant `const` statements, because they don't really make sense, and the compiler doesn't use them to differentiate types.\r\nFor example, if you put `std::function<void (const std::shared_ptr<const MessageT>)>` and `std::function<void (std::shared_ptr<const MessageT>)>` in a `std::variant` it will result in a ambiguous call when you try to assign one of those into the variant.\r\nThis example demonstrates this:\r\n\r\n```c++\r\n#include <functional>\r\n#include <memory>\r\n#include <variant>\r\n\r\nint main() {\r\n  using variant_type = std::variant<\r\n    // comment out either of these to get it to work\r\n    std::function<void (std::shared_ptr<const int>)>,\r\n    std::function<void (const std::shared_ptr<const int>)>\r\n  >;\r\n\r\n  {\r\n    std::function<void (std::shared_ptr<const int>)> cb1 =\r\n      [](std::shared_ptr<const int>) {};\r\n    variant_type v = cb1;\r\n  }\r\n\r\n  {\r\n    std::function<void (const std::shared_ptr<const int>)> cb2 =\r\n      [](const std::shared_ptr<const int>) {};\r\n    variant_type v = cb2;\r\n  }\r\n}\r\n```\r\n\r\nRemoving the `const` statements will not affect users who have them in their callbacks right now.\r\n\r\n----\r\n\r\nI added `const shared_ptr<...> &` versions because I felt it better reflected that the C++ Core Guidelines suggests, since the user is indicating they `\"might\" retain refcount`:\r\n\r\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-owner\r\n\r\nBut I'm looking for feedback on that decision too.\r\n\r\nEdit: we're keeping this one and the `shared_ptr<const MessageT>` one\r\n\r\n----\r\n\r\nI proposed to deprecate the `shared_ptr<MessageT>` versions of the callbacks, because to do it safely it will require that we make a unique copy of the shared pointer for each subscription that asks for that signature. Otherwise one callback could mutate MessageT before or during another callback that is reading it. Also, if the user really wants a `shared_ptr<MessageT>` at the end of the day, they can make their own from `const MessageT &` or `unique_ptr<MessageT>`.\r\n\r\nBut this deprecation will likely hit many people and that might not be what we want, even if the required change is small, e.g.:\r\n\r\n```diff\r\n--- void my_callback(std::shared_ptr<MessageT> msg)\r\n+++ (clipboard)\r\n@@ -1 +1 @@\r\n-void my_callback(std::shared_ptr<MessageT> msg)\r\n+void my_callback(std::shared_ptr<const MessageT> msg)\r\n```\r\n\r\nEdit: we decided to delay this until after Galactic\r\n\r\n----\r\n\r\nI still need to fix all the deprecation warnings (~~here~~ and in downstream packages) and add a few tests, but I wanted to open this now to unblock @audrow on https://github.com/ros2/rclcpp/pull/1557 and to get feedback from @ros2/team.",
    "head_branch": "refactor_any_subscription",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor AnySubscriptionCallback and add/deprecate callback signatures (#1598)\n\n* refactor AnySubscriptionCallback to...\r\n\r\nuse std::variant and make the dispatch functions constexpr,\r\navoiding runtime dispatching.\r\n\r\nAlso, deprecate the std::function<void (std::shared_ptr<MessageT>)> signature,\r\nas it is unsafe to share one shared_ptr when multiple subscriptions take it,\r\nbecause they could mutate MessageT while others are using it. So you'd have to\r\nmake a copy for each subscription, which is no different than the\r\nstd::unique_ptr<MessageT> signature or the user making their own copy in a\r\nshared_ptr from the const MessageT & signature or the\r\nstd::shared_ptr<const MessageT> signature.\r\n\r\nAdded a std::function<void (const std::shared_ptr<const MessageT> &)> signature\r\nto go along side the existing\r\nstd::function<void (std::shared_ptr<const MessageT>)> signature.\r\n\r\nRemoved redundant 'const' before pass-by-value signatures, e.g.\r\nstd::function<void (const shared_ptr<const MessageT>)> became\r\nstd::function<void (shared_ptr<const MessageT>)>.\r\nThis will not affect API or any users using the old style.\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix use of std::bind, free functions, etc. using new function_traits::as_std_function<>\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix use of const MessageT & callbacks by fixing subscriptin_traits\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix deprecation warnings\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use target_compile_features to require c++17 for downstream users of rclcpp\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* uncrustify\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* cpplint\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use target_compile_features(... cxx_std_17)\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Keep both std::shared_ptr<const MessageT> and const std::shared_ptr<const MessageT> & signatures.\r\n\r\nThe const std::shared_ptr<const MessageT> & signature is being kept because it\r\ncan be more flexible and efficient than std::shared_ptr<const MessageT>, but\r\ncosts realtively little to support.\r\n\r\nThe std::shared_ptr<const MessageT> signature is being kept because we want to\r\navoid deprecating it and causing disruption, and because it is convenient to\r\nwrite, and in most cases will not materially impact the performance.\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* defer deprecation of the shared_ptr<MessageT> sub callbacks\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix unused variable warning\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* small fixups to AnySubscriptionCallback\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add check for unset AnySubscriptionCallback in dispatch methods\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* update dispatch methods to handle all scenarios\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* updated tests for AnySubscriptionCallback, include full parameterized i/o matrix\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup test with changed assumption\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove use of std::unary_function, which was removed in c++17\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* silence c++17 warnings on windows for now\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621764118912b45d36a72b1",
    "number": 1596,
    "body": "RP to implement #1586 ",
    "head_branch": "delete_and_load_params",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create load_parameters and delete_parameters methods (#1596)\n\n* Create delete_parameters method\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* cleaner way to delete\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* add delete_parameters TEST\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* fix uncrustify\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* create load_parameter method\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* create load_parameters TEST\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* add comments\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* fix exceptions\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* fix const auto\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* fix param node check\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* Change TEST to use remote_node_name_\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* change comment style\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* parameter_map_from_yaml_file\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* Fix comments\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* fix sign-compare warning\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* use c style\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621764218912b45d36a72b2",
    "number": 1595,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/remove-rmw-connext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove rmw_connext_cpp references. (#1595)\n\n* Remove rmw_connext_cpp references.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764318912b45d36a72b3",
    "number": 1594,
    "body": "This PR tries to implement #1589\r\n\r\nIt adds the `automatically_add_executor_with_node` option when creating a callback_group for a LifecycleNode.",
    "head_branch": "Add_lifecycle_callback_group_option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add automatically_add_executor_with_node option (#1594)\n\n* add automatically_add_executor_with_node option\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* Fix typo\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* add option usage in test\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>\r\n\r\n* Document parameter\r\n\r\nSigned-off-by: Brice <brice.renaudeau@wyca.fr>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621764518912b45d36a72b4",
    "number": 1593,
    "body": "Clang is complaining about the looping variable being referenced as `const val` but should rather be `const ref`.\r\n\r\n```\r\n/Users/karsten/workspace/ros2/ros2_master/src/ros2/rclcpp/rclcpp/src/rclcpp/parameter_service.cpp:46:25: error: loop variable 'param' of type 'const rclcpp::Parameter' creates a copy from type 'const rclcpp::Parameter' [-Werror,-Wrange-loop-construct]\r\n        for (const auto param : parameters) {\r\n                        ^\r\n/Users/karsten/workspace/ros2/ros2_master/src/ros2/rclcpp/rclcpp/src/rclcpp/parameter_service.cpp:46:14: note: use reference type 'const rclcpp::Parameter &' to prevent copying\r\n        for (const auto param : parameters) {\r\n             ^~~~~~~~~~~~~~~~~~\r\n                        &\r\n1 error generated.\r\n```",
    "head_branch": "const_auto_ref",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use const auto & to iterate over parameters (#1593)\n\nClang is complaining about the looping variable being referenced as `const val` but should rather be `const ref`.\r\n\r\n```\r\n/Users/karsten/workspace/ros2/ros2_master/src/ros2/rclcpp/rclcpp/src/rclcpp/parameter_service.cpp:46:25: error: loop variable 'param' of type 'const rclcpp::Parameter' creates a copy from type 'const rclcpp::Parameter' [-Werror,-Wrange-loop-construct]\r\n        for (const auto param : parameters) {\r\n                        ^\r\n/Users/karsten/workspace/ros2/ros2_master/src/ros2/rclcpp/rclcpp/src/rclcpp/parameter_service.cpp:46:14: note: use reference type 'const rclcpp::Parameter &' to prevent copying\r\n        for (const auto param : parameters) {\r\n             ^~~~~~~~~~~~~~~~~~\r\n                        &\r\n1 error generated.\r\n```\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764618912b45d36a72b5",
    "number": 1592,
    "body": "related to ros2/design#282\r\n\r\n`/parameter_events` enhancement\r\naction `feedback` enhancement\r\n",
    "head_branch": "topic-content_filtered_topic-action-parameterevent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764718912b45d36a72b6",
    "number": 1590,
    "body": "Related to https://github.com/ros2/rclcpp/issues/1587",
    "head_branch": "jacob/doc_misuse_of_param_callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Document misuse of parameters callback (#1590)\n\n* Document misuse of parameters callback\r\n\r\nRelated to https://github.com/ros2/rclcpp/issues/1587\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Remove bad example\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764818912b45d36a72b7",
    "number": 1588,
    "body": "While we could conditionally declare a parameter by using a second\r\nparameter, we can also just catch the expected exception in the\r\ncase that no parameter override is provided.\r\n\r\nI think this makes for a better user experience.",
    "head_branch": "jacob/doc_alt_for_optional_param",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764918912b45d36a72b8",
    "number": 1584,
    "body": "Guard against overflow when converting from rclcpp::Duration to builtin_interfaces::msg::Duration,\r\nwhich is a unsigned to signed conversion.\r\n\r\n---\r\n\r\nI discovered this bug when making a copy of a `rclcpp::QoS` object with default duration values. Since default durations are max int64 values, they end up overflowing during the copy which uses `rclcpp::Duration::from_rmw_time()` internally.\r\n\r\nWe can easily see the issue with this reproduction, where we would expect `foo` and `baz` to be equivalent, but they are not:\r\n\r\n```c++\r\n  auto foo = rclcpp::Duration::from_nanoseconds(9223372036854775807u);\r\n  auto bar = foo.to_rmw_time();\r\n  rclcpp::Duration baz = rclcpp::Duration::from_rmw_time(bar);\r\n\r\n  std::cerr << \"foo: \" << foo.nanoseconds() << std::endl;\r\n  std::cerr << \"baz: \" << baz.nanoseconds() << std::endl;\r\n```",
    "head_branch": "jacob/guard_against_overflow",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Guard against integer overflow in duration conversion (#1584)\n\nGuard against overflow when converting from rclcpp::Duration to builtin_interfaces::msg::Duration,\r\nwhich is a unsigned to signed conversion.\r\n\r\nUse non-std int types for consistency\r\n\r\nHandle large negative values\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764a18912b45d36a72b9",
    "number": 1583,
    "body": "This change should be **fast-forward** merged after approval.",
    "head_branch": "release/6.4.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "7.0.0\n\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764b18912b45d36a72ba",
    "number": 1582,
    "body": "Noticed while doing something else.",
    "head_branch": "jacob/callback_group_doc_typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix doc typo in CallbackGroup constructor (#1582)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621764c18912b45d36a72bb",
    "number": 1579,
    "body": "This PR replaces https://github.com/ros2/rclcpp/pull/1416 and contains the changes necessary in order to add support for RMW listener APIs in rclcpp.\r\nThe events executor will be re-proposed as a follow-up PR\r\n\r\n@mauropasse @wjwwood @ivanpauno ",
    "head_branch": "irobot/add-rmw-listener-apis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add RMW listener APIs (#1579)\n\n* Add RMW listener APIs\r\n\r\nSigned-off-by: Alberto Soragna <asoragna@irobot.com>\r\n\r\n* split long log into two lines\r\n\r\nSigned-off-by: Alberto Soragna <asoragna@irobot.com>\r\n\r\n* Remove use_previous_event\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Do not set gc listener callback\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* significant refactor to make callbacks type safe\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Add on_ready callback to waitables, add clear_* functions, add unit-tests\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* add mutex to set and clear listener APIs\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* allow to set ipc sub callback from regular subscription\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* fix minor failures\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* fix typos and errors in comments\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* fix comments\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* expose qos listener APIs from pub and sub; add unit-tests\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* add qos event unit-test for invalid callbacks\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* Use QoS depth to limit callbacks count\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* fix ipc-subscription\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* Rename CallbackMessageT -> ROSMessageType\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Set callbacks to Actions\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* changes from upstream\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Unset callback on entities destruction\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* fix rebase errors\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* fix unit-tests\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* Add GuardCondition on trigger callback\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Add tests for new GuardCondition APIs\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Fix windows CI\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Action unset callbacks only if were set\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* add missing include rcl event callback include directive\r\n\r\nSigned-off-by: Alberto Soragna <alberto.soragna@gmail.com>\r\n\r\n* typos\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove listener reference\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove references to listener and move a method closer to impl\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* cpplint\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Fix qos history check in subscription_intra_process.hpp\r\n\r\nCo-authored-by: Mauro Passerino <mpasserino@irobot.com>\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Alberto Soragna <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621764d18912b45d36a72bc",
    "number": 1578,
    "body": "@Blast545 ",
    "head_branch": "1323",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Made 'Context::shutdown_reason' function a const function (#1578)\n\nSigned-off-by: Abhinav Singh <singhabhinav9051571833@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621764f18912b45d36a72bd",
    "number": 1577,
    "body": "It is redundant.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/fix-time-jump-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove 'struct' from the rcl_time_jump_t. (#1577)\n\nIt is redundant.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765018912b45d36a72be",
    "number": 1576,
    "body": "#491 \r\n\r\nnaive prevention of `handle_request` from calling `send_response`.  Instead let the client do it, when the result is available.",
    "head_branch": "async",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765118912b45d36a72bf",
    "number": 1575,
    "body": "Add tests checking that declaring an statically typed parameter when undeclared parameters are allowed works as described in https://github.com/ros2/rclcpp/pull/1568#discussion_r588763935.\r\n\r\nPending: add test case for https://github.com/ros2/rclcpp/pull/1568#discussion_r589713118.",
    "head_branch": "ivanpauno/add-tests-for-allow-undeclared-parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add tests for declaring statically typed parameters when undeclared parameters are allowed (#1575)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765218912b45d36a72c0",
    "number": 1574,
    "body": "This PR removes all references to `rmw_connext_cpp`, so that it may be replaced by `rmw_connextdds`.\r\n\r\nChanges mostly involved getting rid of several comments about \"long running tests\", and re-enabling a test in `test_allocator_memory_strategy.cpp`.\r\n\r\nThe PR also includes a fix for `test_multi_threaded_executor.cpp`, to avoid an implicit conversion from integer to double which was causing the test to fail.\r\n\r\nSee [rticommunity/rmw_connextdds #9](https://github.com/rticommunity/rmw_connextdds/issues/9) for a list of related PRs, and an overview of all the changes required to replace [ros2/rmw_connext](https://github.com/ros2/rmw_connext) (`rmw_connext_cpp`) with [rticommunity/rmw_connextdds](https://github.com/rticommunity/rmw_connextdds) in the ROS2 source tree.",
    "head_branch": "asorbini/rmw_connextdds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for rmw_connextdds (#1574)\n\n* Replace stale reference to Connext\r\n\r\n* Restore exceptions for ros2/rmw_connext to ease transition to rticommunity/rmw_connextdds\r\n\r\nSigned-off-by: Andrea Sorbini <asorbini@rti.com>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765318912b45d36a72c1",
    "number": 1573,
    "body": "This is a re-application of #829 which was merged but then reverted in #1572 due to issues building on Windows. ",
    "head_branch": "re-apply-829/add_parameter_event_subscriber",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Re-apply #829: Add ParameterEventsSubscriber class (#1573)\n\nAlso add the following fixes for CI:\r\n\r\n* Fix symbol visibility error on Windows\r\n* Remove an unused parameter to quiet a clang-tidy warning on MacOS\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621765418912b45d36a72c2",
    "number": 1572,
    "body": "Reverts ros2/rclcpp#829 which introduced build failures on Windows [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=13880)](https://ci.ros2.org/job/ci_windows/13880/)",
    "head_branch": "revert-829-add_parameter_event_subscriber",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Add ParameterEventsSubscriber class (#829)\" (#1572)\n\nThis reverts commit c8713edbe404d38ec893f9aeb2e54eab20473439."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621765518912b45d36a72c3",
    "number": 1571,
    "body": "When building rclcpp under clang static analysis, it complains\r\nthat the \"DoNotOptimize\" function from Google benchmark can\r\ncause a memory leak.  I can't see how this is possible, so I\r\ncan only assume that the inline assembly that is used to implement\r\n\"DoNotOptimize\" is causing a false positive.  Just quite the\r\nwarning here when building under clang static analysis.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/quiet-clang-false-positive",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Quiet clang memory leak warning on \"DoNotOptimize\". (#1571)\n\nWhen building rclcpp under clang static analysis, it complains\r\nthat the \"DoNotOptimize\" function from Google benchmark can\r\ncause a memory leak.  I can't see how this is possible, so I\r\ncan only assume that the inline assembly that is used to implement\r\n\"DoNotOptimize\" is causing a false positive.  Just quite the\r\nwarning here when building under clang static analysis.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765618912b45d36a72c4",
    "number": 1568,
    "body": "Document some of the decisions that were made in https://github.com/ros2/rclcpp/pull/1522, https://github.com/ros2/rclpy/pull/683.\r\n\r\nThere's also a question in the document.",
    "head_branch": "ivanpauno/add-docs-about-statically-typed-parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Document design decisions that were made for statically typed parameters (#1568)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765718912b45d36a72c5",
    "number": 1567,
    "body": "When working on https://github.com/ros2/rclpy/pull/683 I realized of a few problems in https://github.com/ros2/rclcpp/pull/1522:\r\n\r\n- The `NoParameterOverrideProvided` exception was being thrown in some cases where it shouldn't. See [this](https://github.com/ros2/rclcpp/blob/2036857e92a1c0a96c4626272724be3e0f267964/rclcpp/test/rclcpp/test_node.cpp#L625-L628) new test case.\r\n- `node->declare_parameter(\"my_param\", rclcpp::ParameterType::PARAMETER_INTEGER, descriptor_dynamic_typing_on` shouldn't be valid. Discussion in [rclpy PR](https://github.com/ros2/rclpy/pull/683#discussion_r585039574). See [this other](https://github.com/ros2/rclcpp/blob/2036857e92a1c0a96c4626272724be3e0f267964/rclcpp/test/rclcpp/test_node.cpp#L632-L637) new test case.\r\n\r\nAnd when working on this, I find a super old bug which [this commit] fixes ....\r\nI will rebase-merge so that fix can be backported alone. ",
    "head_branch": "ivanpauno/static-parameter-type-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "When a parameter change is rejected, the parameters map shouldn't be updated.\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765918912b45d36a72c6",
    "number": 1565,
    "body": "foxy backport for https://github.com/ros2/rclcpp/pull/1562, address https://github.com/ros2/rclcpp/issues/1545.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "foxy-bugfix-20210225-memory-leak-1545",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "node_handle must be destroyed after client_handle to prevent memory leak (#1562) (#1565)\n\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765a18912b45d36a72c7",
    "number": 1564,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1563#event-4377746517.",
    "head_branch": "ivanpauno/fix-parameter-client-benchmark",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix benchmark test failure introduced in #1522 (#1564)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765b18912b45d36a72c8",
    "number": 1562,
    "body": "address https://github.com/ros2/rclcpp/issues/1545\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20210225-memory-leak-1545",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "node_handle must be destroyed after client_handle to prevent memory leak (#1562)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765c18912b45d36a72c9",
    "number": 1561,
    "body": "Related to https://github.com/ros2/design/pull/282 to add content-filtered-topic interfaces.",
    "head_branch": "topic-content_filtered_topic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add content-filtered-topic interfaces (#1561)\n\n* to support a feature of content filtered topic\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* update for checking memory allocated\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* set expression parameter only if filter is valid\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add test\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* use a default empty value for expresion parameters\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* remove std_msgs dependency\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* use new rcl interface\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* remove unused include header files and fix unscrutify\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update comment\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* rename\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* refactor test\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* relate to `rcutils_string_array_t expression_parameters` changed in rmw\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* remove the implementation temporary, add them with fallback in the feature\r\n\r\n1. add DEFINE_CONTENT_FILTER with default(ON) to build content filter interfaces\r\n2. user need a compile option(CONTENT_FILTER_ENABLE) to turn on the feature\r\nto set the filter or call the interfaces\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update comments and check the option to build content filter test\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add DDS content filter implementation\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* address review\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* rcl api changed\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* increase the filter propagation time\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* add rclcpp::ContentFilterOptions and use it as the return type of get_content_filter\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* increase the maximun time to wait message event and content filter propagation\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* cft member should be defined in the structure.\r\n\r\nto check the macro for interfaces is enough.\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* set test timeout to 120\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* update doc\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621765d18912b45d36a72ca",
    "number": 1560,
    "body": "Backport #1558 to Dashing.",
    "head_branch": "jacob/dashing_backport_1558",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix documented example in create_publisher (#1558) (#1560)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621765f18912b45d36a72cb",
    "number": 1559,
    "body": "Backport #1558 to Foxy.",
    "head_branch": "jacob/foxy_backport_1558",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix documented example in create_publisher (#1558) (#1559)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766018912b45d36a72cc",
    "number": 1558,
    "body": "`volatile()` is not the name of the method.",
    "head_branch": "jacob/fix_doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix documented example in create_publisher (#1558)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766118912b45d36a72cd",
    "number": 1557,
    "body": "This feature, a.k.a. Type Masquerading, is still a WIP.\r\n\r\n----\r\n\r\nRelated:\r\n\r\n- [x] https://github.com/ros-infrastructure/rep/pull/303\r\n- [x] ros2/examples#300\r\n- [x] ros2/demos#482\r\n- [x] https://github.com/ros2/demos/pull/497\r\n\r\n----\r\n\r\nThis is part of the Type Masquerading project.\r\n\r\n- [x] Add H-turtle release note (see, https://github.com/ros2/demos/pull/497)",
    "head_branch": "type_adaption",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp] Type Adaptation feature (#1557)\n\n* initial version of type_adaptor.hpp\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* initial version of rclcpp::get_message_type_support_handle()\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* initial version of rclcpp::is_ros_compatible_type check\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup include statement order in publisher.hpp\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use new rclcpp::get_message_type_support_handle() and check in Publisher\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* update adaptor->adapter, update TypeAdapter to use two arguments, add implicit default\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* move away from shared_ptr<allocator> to just allocator, like the STL\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixes to TypeAdapter and adding new publish function signatures\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* bugfixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* more bugfixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Add nullptr check\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Remove public from struct inheritance\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Add tests for publisher with type adapter\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Update packages to C++17\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Revert \"Update packages to C++17\"\r\n\r\nThis reverts commit 4585605223639bbd9d18053e5ef39725638512b4.\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Begin updating AnySubscriptionCallback to use the TypeAdapter\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Use type adapter's custom type\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Correct which AnySubscriptionCallbackHelper is selected\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Setup dispatch function to work with adapted types\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Improve template logic on dispatch methods\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* implement TypeAdapter for Subscription\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Add intraprocess tests with all supported message types\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Add intra process tests\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Add tests for subscription with type adapter\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Fix null allocator test\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Handle serialized message correctly\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Fix generic subscription\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Fix trailing space\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* fix some issues found while testing type_adapter in demos\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add more tests, WIP\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Improve pub/sub tests\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Apply uncrustify formatting\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* finish new tests for any subscription callback with type adapter\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix adapt_type<...>::as<...> syntax\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix explicit template instantiation of create_subscription() in new test\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* cpplint fix\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Fix bug by aligning allocator types on both sides of ipm\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\n* Fix intra process manager tests\r\n\r\nSigned-off-by: Audrow Nash <audrow@hey.com>\r\n\r\nCo-authored-by: Audrow Nash <audrow@hey.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621766318912b45d36a72ce",
    "number": 1556,
    "body": "Good morning,\r\n\r\nthis pull request is motivated by the #1540 issue. In short, we would like the node's clock behavior to be consistent, independently from the `use_sim_time` parameter value. Currently, if using simulation time, the node's clock time won't be updated within callbacks. \r\n\r\nTo always keep node's clock time up to date, we added a callback group to the existing clock subscription's options and make this callback group spins in its own thread, in [`TimeSource::create_clock_sub` method](https://github.com/wyca-robotics/rclcpp/blob/10ae308afd4194aab65b0dc9fd30d118425e272e/rclcpp/src/rclcpp/time_source.cpp#L249). The thread is cleanly finished in the [class destructor](https://github.com/wyca-robotics/rclcpp/blob/10ae308afd4194aab65b0dc9fd30d118425e272e/rclcpp/src/rclcpp/time_source.cpp#L182). ",
    "head_branch": "clock_sub_callback_group",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clock subscription callback group spins in its own thread (#1556)\n\n* Clock subscription callback group spins in its own thread\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* fix line length\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* fix code style divergence\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* fix code style divergence\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Initialize only once clock_callbackgroup\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Check if thread joinable before start a new thread\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Cancel executor and join thread in destroy_clock_sub\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Check if clock_thread_ is joinable before cancel executor and join\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Add use_clock_thread as an option\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Fix code style divergence\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Fix code style divergence\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Fix code style divergence\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* Add TimeSource tests\r\n\r\nSigned-off-by: anaelle-sw <anaelle.sarazin@wyca.fr>\r\n\r\n* update use_clock_thread value in function attachNode\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* join clock thread in function detachNode\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* TimeSource tests: fixes + comments + more tested cases\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* clean destroy_clock_sub()\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* flag to ensure clock_executor is cancelled\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* Always re-init clock_callback_group when creating a new clock sub\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* spin_until_future_complete() to cleanly cancel executor\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* fix tests warnings\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* fix test error: cancel clock executor\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* clean comments\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>\r\n\r\n* fix precision loss\r\n\r\nSigned-off-by: anaelle <anaelle.sarazin@wyca.fr>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621766418912b45d36a72cf",
    "number": 1554,
    "body": "Depends on https://github.com/ros2/rmw/pull/299\r\n\r\n---\r\n\r\nTo do:\r\n- [ ] Add Galactic release note",
    "head_branch": "jacob/compatible_qos_api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add API for checking QoS profile compatibility (#1554)\n\n* Add API for checking QoS profile compatibility\r\n\r\nDepends on https://github.com/ros2/rmw/pull/299\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Refactor as free function\r\n\r\nReturns a struct containing the compatibility enum value and string for the reason.\r\n\r\nUpdated tests to reflect behavior changes upstream.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621766518912b45d36a72d0",
    "number": 1551,
    "body": "When running the rclcpp tests under UBSAN, it complained that\r\nthe AnySubscriptionCallback tests were using an uninitialized\r\nallocator.\r\n\r\nReviewing the code there, it also looks like the AnySubscriptionCallback\r\nconstructor wasn't checking for a null allocator.\r\n\r\nFix this by doing 3 things:\r\n\r\n1.  Add a check for a null allocator in the AnySubscriptionCallback\r\nconstructor.\r\n2.  Add a new test to test_any_subscription_callback that tests the new\r\nnullptr handling.\r\n3.  Fix the test fixture to initialize the allocator before trying to\r\ncall the AnySubscriptionCallback constructor.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/any-sub-null-allocator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix UBSAN warnings in any_subscription_callback. (#1551)\n\nWhen running the rclcpp tests under UBSAN, it complained that\r\nthe AnySubscriptionCallback tests were using an uninitialized\r\nallocator.\r\n\r\nReviewing the code there, it also looks like the AnySubscriptionCallback\r\nconstructor wasn't checking for a null allocator.\r\n\r\nFix this by doing 3 things:\r\n\r\n1.  Add a check for a null allocator in the AnySubscriptionCallback\r\nconstructor.\r\n2.  Add a new test to test_any_subscription_callback that tests the new\r\nnullptr handling.\r\n3.  Fix the test fixture to initialize the allocator before trying to\r\ncall the AnySubscriptionCallback constructor.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766618912b45d36a72d1",
    "number": 1549,
    "body": "Depends on ros2/rmw#298\n\nUse new rmw_duration_t instead of rmw_time_t for QoS policies and rmw_wait",
    "head_branch": "emersonknapp/deprecate-rmw-time-t",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766718912b45d36a72d2",
    "number": 1548,
    "body": "foxy backport of https://github.com/ros2/rclcpp/pull/1547 (original issue is https://github.com/ros2/rclcpp/issues/1544)",
    "head_branch": "foxy-bugfix-20210209-issue-1544",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Fix runtime error: reference binding to null pointer of type (#1547) (#1548)\n\n* Fix runtime error: reference binding to null pointer of type\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* delete cppcheck v1.89 workaround\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766818912b45d36a72d3",
    "number": 1547,
    "body": "address https://github.com/ros2/rclcpp/issues/1544",
    "head_branch": "bugfix-20210209-issue-1544",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Fix runtime error: reference binding to null pointer of type (#1547)\n\n* Fix runtime error: reference binding to null pointer of type\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* delete cppcheck v1.89 workaround\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766918912b45d36a72d4",
    "number": 1546,
    "body": "I'll FF-merge this into `master` and push the tag once approved.",
    "head_branch": "release/6.3.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "6.3.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766a18912b45d36a72d5",
    "number": 1543,
    "body": "The CMake `install` command should never be used to copy content from the source tree to the build directory like this. The destination directory is affected by the `DESTDIR` variable on UNIX platforms, which will get prefixed onto the destination directory and we'll end up installing the test resources into the target install space.\r\n\r\nThis change will eliminate the excess test collateral present in the rclcpp deb packages being installed to `/tmp/binarydeb`:\r\n```\r\n$ dpkg-query -L ros-rolling-rclcpp\r\n/.\r\n/opt\r\n/opt/ros\r\n/opt/ros/rolling\r\n\r\n...\r\n\r\n/tmp\r\n/tmp/binarydeb\r\n/tmp/binarydeb/ros-rolling-rclcpp-6.3.0\r\n/tmp/binarydeb/ros-rolling-rclcpp-6.3.0/obj-x86_64-linux-gnu\r\n/tmp/binarydeb/ros-rolling-rclcpp-6.3.0/obj-x86_64-linux-gnu/test\r\n/tmp/binarydeb/ros-rolling-rclcpp-6.3.0/obj-x86_64-linux-gnu/test/resources\r\n/tmp/binarydeb/ros-rolling-rclcpp-6.3.0/obj-x86_64-linux-gnu/test/resources/test_node\r\n/tmp/binarydeb/ros-rolling-rclcpp-6.3.0/obj-x86_64-linux-gnu/test/resources/test_node/test_parameters.yaml\r\n```\r\n\r\nOn RPM builds, it is a fatal build error for a ROS package to install files outside of `/opt/ros/foo`.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=13619)](http://ci.ros2.org/job/ci_linux/13619/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=8501)](http://ci.ros2.org/job/ci_linux-aarch64/8501/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=11334)](http://ci.ros2.org/job/ci_osx/11334/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=13679)](http://ci.ros2.org/job/ci_windows/13679/)",
    "head_branch": "cottsay/dont_install_test_stuff",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Reference test resources directly from source tree (#1543)\n\nThe CMake 'install' command should never be used to copy content from\r\nthe source tree to the build directory like this. The destination\r\ndirectory is affected by the 'DESTDIR' variable on UNIX platforms, which\r\nwill get prefixed onto the destination directory and we'll end up\r\ninstalling the test resources into the target install space.\r\n\r\nThis change will eliminate the excess test collateral present in the\r\nrclcpp deb packages being installed to '/tmp/binarydeb'.\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766c18912b45d36a72d6",
    "number": 1541,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/topic-stat-test-string-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix a minor string error in the topic_statistics test. (#1541)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766d18912b45d36a72d7",
    "number": 1538,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/avoid-object-copy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Avoid an object copy in parameter_value.cpp. (#1538)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766e18912b45d36a72d8",
    "number": 1537,
    "body": "If we just EXPECT it, then we continue running tests below\r\nand eventually dereference an empty list.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/assert-list-size",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Assert that the publisher_list size is 1. (#1537)\n\nIf we just EXPECT it, then we continue running tests below\r\nand eventually dereference an empty list.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621766f18912b45d36a72d9",
    "number": 1536,
    "body": "According to the documentation at\r\nhttps://en.cppreference.com/w/cpp/utility/move,\r\nthe \"moved-from\" objects are \"in a valid but unspecified\r\nstate\" after the move.  Thus, we shouldn't assume anything\r\nabout them, since it could be implementation-defined behavior.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/dont-access-moved-object",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't access objects after they have been std::move (#1536)\n\nAccording to the documentation at\r\nhttps://en.cppreference.com/w/cpp/utility/move,\r\nthe \"moved-from\" objects are \"in a valid but unspecified\r\nstate\" after the move.  Thus, we shouldn't assume anything\r\nabout them, since it could be implementation-defined behavior.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767018912b45d36a72da",
    "number": 1535,
    "body": "Closes #1531 \r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>",
    "head_branch": "clear-statistics-after-window-updating",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "clear statistics after window reset (#1531) (#1535)\n\n* clear statistics after window reset (#1531)\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* move ClearCurrentMeasurements just after GetStatisticsResults\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* refactor publish_message to publish_and_reset_message\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* rename function name\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* rename function name\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* add unit test to check window reset\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* pass measured == offset case\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* modify comment\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* add received message size test\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* rename test parameter names\r\n\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\n* set statistics collector's collection period explicitly to defaultStatisticsPublishPeriod\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\nCo-authored-by: Miaofei <miaofei@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621767118912b45d36a72db",
    "number": 1534,
    "body": "Signed-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-check-correct-variable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update for checking correct variable (#1534)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767218912b45d36a72dc",
    "number": 1532,
    "body": "This is a bit complex because the final qos profile is needed before a parameters node interface is created.\r\n\r\nFor `/rosout` it will even be more complex, because the final profile is needed even before a `rcl_node_t` is written!! (it's possible, but it requires some surgery probably involving `rcl`).\r\nI'm not sure what's the best way to handle that one, opinions welcomed!",
    "head_branch": "ivanpauno/parameter-event-qos-overrides",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enable qos parameter overrides for the /parameter_events topic  (#1532)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621767318912b45d36a72dd",
    "number": 1530,
    "body": "Fixes #1519 \r\n\r\nNOTE: To reproduce the issue, please refer to https://github.com/ros2/rclcpp/issues/1519#issuecomment-768817649.\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-use-weakptr-avoid-deadlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid `Resource deadlock avoided` if use intra_process_comms (#1530)\n\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621767418912b45d36a72de",
    "number": 1529,
    "body": "Fixes #1528.\r\n\r\nSigned-off-by: y-okumura-isp <y-okumura@isp.co.jp>",
    "head_branch": "issues_1528",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Finalize rcl_handle to prevent leak (#1528) (#1529)\n\nSigned-off-by: y-okumura-isp <y-okumura@isp.co.jp>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767518912b45d36a72df",
    "number": 1527,
    "body": "Fixes #1526.\r\n\r\nAs action_server_ depends on clock_, we declare clock_ first.\r\nThen the order of deletion becomes action_server_, clock_.\r\n\r\nThere are still errors in the following test, but we have solved errors for test_server.\r\n- test_client\r\n- test_server_goal_handle\r\n\r\n",
    "head_branch": "issues_1526",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix #1526. (#1527)\n\n* Fix #1526.\r\n\r\nAs action_server_ depends on clock_, we declare clock_ first.\r\nThen the order of deletion becomes action_server_, clock_.\r\n\r\nSigned-off-by: y-okumura-isp <y-okumura@isp.co.jp>\r\n\r\n* Add comments about declaration order (#1526)\r\n\r\nSigned-off-by: y-okumura-isp <y-okumura@isp.co.jp>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767618912b45d36a72e0",
    "number": 1522,
    "body": "Alternative to https://github.com/ros2/rclcpp/pull/1436.\r\n\r\nThe following declarations will be valid:\r\n\r\n```cpp\r\n// declares an int parameter that cannot change of type\r\nnode->declare_parameter(\"my_param\", 5);\r\n\r\n// declares an int parameter that cannot change of type, but no default value is provided.\r\n// if no param override is provided, it will start with type PARAMETER_NOT_SET\r\nnode->declare_parameter(\"my_param\", rclcpp::PARAMETER_INTEGER);\r\n\r\n// declares an int parameter that cannot change of type with a descriptor\r\nnode->declare_parameter(\"my_param\", 5, descriptor);\r\n\r\n// declares an int parameter that cannot change of type, no default value provided, and descriptor.\r\nnode->declare_parameter(\"my_param\", rclcpp::PARAMETER_INTEGER, descriptor);\r\n\r\n// dynamically typed parameter, no default value\r\nnode->declare_parameter(\"my_param\", rclcpp::PARAMETER_NOT_SET);\r\n\r\n// dynamically typed parameter, no default value, descriptor\r\nnode->declare_parameter(\"my_param\", rclcpp::PARAMETER_NOT_SET, descriptor);\r\n\r\n// dynamically typed parameter, default value\r\nnode->declare_parameter(\"my_param\", 5, rclcpp::ParameterDescriptor{false});\r\n\r\n// dynamically typed parameter, default value, descriptor\r\nnode->declare_parameter(\"my_param\", 5, {descriptor, false});\r\n```\r\n\r\nThe `rcl_interfaces::msg::ParameterDescriptor` wrapper I wrote (rclcpp::ParameterDescriptor) is probably not a great idea.\r\nIf we delete that we can make the last two lines look like:\r\n\r\n```cpp\r\n// dynamically typed parameter, default value\r\nnode->declare_parameter(\"my_param\", 5, rcl_interfaces::msg::ParameterDescriptor{}, false, true);  // name, default, descriptor, ignore_overrides, dynamically typed\r\n\r\n// dynamically typed parameter, default value, descriptor\r\nnode->declare_parameter(\"my_param\", 5, descriptor, false, true);  // name, default, descriptor, ignore_overrides, dynamically typed\r\n```\r\n\r\nI don't mind either way.\r\n\r\nThe only case this PR will break:\r\n\r\n```cpp\r\nnode->declare_parameter(\"my_param\");\r\n```\r\n\r\nI can make that work like `node->declare_parameter(\"my_param\", rclcpp::PARAMETER_NOT_SET);` and deprecate it.\r\nThe issue is cases like `node->declare_parameter(\"my_param\", rclcpp::ParameterValue{});`, which typically happens on wrappers over rclcpp API using default values. That will start throwing an exception.",
    "head_branch": "ivanpauno/enforce-parameter-type-allowed-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enforce static parameter types (#1522)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621767818912b45d36a72e1",
    "number": 1520,
    "body": "Currently trying to use IPC with the **StaticSingleThreadExecutor** yields:\r\n```\r\nterminate called after throwing an instance of 'std::runtime_error'\r\n  what():  'data' is empty\r\nAborted (core dumped)\r\n```\r\nThis is because the new API `execute(data)` for waitables requires `data` to be non `nullptr`. This PR makes the waitable to take the data (the message itself, on a intra-process subscription) before using it as the `execute` parameter on the static executor.\r\n\r\nTaking the oportunity also fixing here a `cppcheck` which was failing:\r\n```\r\n[static_executor_entities_collector.cpp:327]: (error: deallocuse) Dereferencing 'node_ptr' after it is deallocated / released\r\n```\r\n",
    "head_branch": "mauro/fix-ipc-static-executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix error when using IPC with StaticSingleThreadExecutor (#1520)\n\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767918912b45d36a72e2",
    "number": 1518,
    "body": "This is a backport of #1313\r\nI didn't include 8c8c268aad3e243ddb7e2717b5c46044db34e055 and 543a3c39c16fdeb3f0109d0e906105870f547fe1, but 579e9d01d6810e5f60a76f896f440b191514aab5 and modified ca3ad7da2fa62f089ff00661ac24295019d946f0.",
    "head_branch": "foxy-deadlock-fix-backport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix action server deadlock (#1285) (#1313)  (#1518)\n\n* Add missing locking to the rclcpp_action::ServerBase. (#1421)\r\n\r\nThis patch actually does 4 related things:\r\n\r\n1.  Renames the recursive mutex in the ServerBaseImpl class\r\nto action_server_reentrant_mutex_, which makes it a lot\r\nclearer what it is meant to lock.\r\n2.  Adds some additional error checking where checks were missed.\r\n3.  Adds a lock to publish_status so that the action_server\r\nstructure is protected.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* [backport] Fix action server deadlock (#1285, #1313)\r\n\r\nSigned-off-by: Daisuke Sato <daisukes@cmu.edu>\r\n\r\n* revert comment\r\n\r\nSigned-off-by: Daisuke Sato <daisukes@cmu.edu>\r\n\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767a18912b45d36a72e3",
    "number": 1517,
    "body": "clang static analysis suggested that there was a possible memory\r\nleak here, and it is right.  The test is expecting to throw during\r\nthe constructor, in which case the memory would be automatically\r\nfreed.  However, if the test did *not* throw for some reason,\r\nwe would leak the memory.  Switch to using a unique_ptr here\r\nwhich will free the memory in all cases at the end of the scope.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/fix-potential-memory-leak",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change to using unique_ptrs for DummyExecutor. (#1517)\n\n* Change to using unique_ptrs for DummyExecutor.\r\n\r\nclang static analysis suggested that there was a possible memory\r\nleak here, and it is right.  The test is expecting to throw during\r\nthe constructor, in which case the memory would be automatically\r\nfreed.  However, if the test did *not* throw for some reason,\r\nwe would leak the memory.  Switch to using a unique_ptr here\r\nwhich will free the memory in all cases at the end of the scope.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767b18912b45d36a72e4",
    "number": 1516,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1487.\r\n\r\nSomething in between https://github.com/ros2/rclcpp/pull/621 and https://github.com/ros2/rclcpp/pull/1168.\r\nThe whole idea of the `scheduled_timers_` container seems wrong, but this works around the issue.",
    "head_branch": "ivanpauno/timers-executor-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow timers to keep up the intended rate in MultiThreadedExecutor (#1516)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621767c18912b45d36a72e5",
    "number": 1515,
    "body": "The graph_listener thread is started in the background in some of the tests and this thread is killed by Windows prior to executing global destructors if it is still running when leaving main().  This then corrupts state because the RMW layer is blocking in a waitset and causes Cyclone to hang trying to destroy the waitset.\r\n\r\nThis fixes the issue mentioned in https://github.com/ros2/rmw/pull/293#issuecomment-758322651 (for me locally anyway!)",
    "head_branch": "test-node-rclcpp-shutdown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Call rclcpp::shutdown in test_node for clean shutdown on Windows (#1515)\n\nThe graph_listener thread is started in the background in some of the tests and\r\nthis thread is killed by Windows prior to executing global destructors if it is\r\nstill running when leaving main().  This then corrupts state because the RMW\r\nlayer is blocking in a waitset and causes Cyclone to hang trying to destroy the\r\nwaitset.\r\n\r\nSigned-off-by: Erik Boasson <eb@ilities.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767d18912b45d36a72e6",
    "number": 1514,
    "body": "address https://github.com/ros2/rclcpp/issues/1510",
    "head_branch": "topic-20210113-parameter-services",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "get_parameters_service_ should return empty if allow_undeclared_ is false (#1514)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621767e18912b45d36a72e7",
    "number": 1513,
    "body": "This should be safe to reapply now that https://github.com/ros2/rcpputils/pull/118 went in.",
    "head_branch": "ivanpauno/reapply-#1509",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Reapply \"Add get_logging_directory method to rclcpp::Logger (#1509)\" (#1513)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621767f18912b45d36a72e8",
    "number": 1512,
    "body": "We should probably document what policies are reconfigurable for built-in topics somewhere ...",
    "head_branch": "ivanpauno/allow-reconfiguring-clock-qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow reconfiguring 'clock' topic qos (#1512)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768018912b45d36a72e9",
    "number": 1511,
    "body": "Revert #1509.\r\n\r\nReverting as the inclusion of `windows.h` broke downstream code.",
    "head_branch": "ivanpauno/revert-#1509",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Add get_logging_directory method to rclcpp::Logger (#1509)\" (#1511)\n\nThis reverts commit 7a31d7c01b034949b03a140b53dd8f967a58b91c.\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768118912b45d36a72ea",
    "number": 1509,
    "body": "",
    "head_branch": "ivanpauno/add-method-to-get-logging-dir",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add get_logging_directory method to rclcpp::Logger (#1509)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768318912b45d36a72eb",
    "number": 1508,
    "body": "When I learned ROS2, this was one of the things that annoyed me, so I hope to spare others the experience. There is a tutorial, but I think it's best to keep documentation close to the code.\r\n\r\nBTW, I think it would be great to link to hpp & cpp files in Doxygen. That would make having sparse documentation much more bearable.",
    "head_branch": "qos_docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Better documentation for the QoS class (#1508)\n\n* Better documentation for the QoS class\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* PR Review suggestions\r\n\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Shorter brief\r\n\r\nSigned-off-by: nnmm <nnmmgit@gmail.com>\r\n\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768418912b45d36a72ec",
    "number": 1507,
    "body": "connects to #1506 ",
    "head_branch": "optional_com_interface",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "make rcl_lifecyle_com_interface optional in lifecycle nodes (#1507)\n\n* make rcl_com_interface optional\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* Update rclcpp_lifecycle/test/mocking_utils/patch.hpp\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* line break\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* use state_machine_options\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\nCo-authored-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768518912b45d36a72ed",
    "number": 1505,
    "body": "This PR makes `Executor::add_node()` and `Executor::remove_node()` thread safe.\r\n`memory_strategy_mutex_` was renamed to `mutex_` and now it's used to protect all internal collections.\r\nThread safety annotations were added mainly because of documentation purposes, we're not running the thread sanitizer in CI.",
    "head_branch": "ivanpauno/executor-thread-safety",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow to add/remove nodes thread safely in rclcpp::Executor  (#1505)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768618912b45d36a72ee",
    "number": 1504,
    "body": "In particular, we don't know for sure that the graph will only\r\nhave 1 user; we just know that it should have *at least* one\r\nuser.  So change that check to be more robust.  This also\r\nlets us get rid of the slightly strange call to 'notify_graph_change'\r\nthat was being used to cleanup graph users.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nThis is a followup to #1503 ",
    "head_branch": "clalancette/fix-graph-count",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make the test of graph users more robust. (#1504)\n\nIn particular, we don't know for sure that the graph will only\r\nhave 1 user; we just know that it should have *at least* one\r\nuser.  So change that check to be more robust.  This also\r\nlets us get rid of the slightly strange call to 'notify_graph_change'\r\nthat was being used to cleanup graph users.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621768718912b45d36a72ef",
    "number": 1503,
    "body": "While debugging something else, I came across this fairly rare\r\nflake in the test_node_graph tests.  Essentially, it may take\r\nsome time for node changes to propagate into the graph.  If\r\nthe NodeGraph client asks for data before the changes are\r\nin the graph, they may get something they don't expect.  The\r\nfix is to wait for an event on the NodeGraph to happen, and\r\nthen look for the data you are interested in.\r\n\r\nBefore this change, I could get the flake to happen on a loaded\r\naarch64 system fairly regularly.  After this change, I can no\r\nlonger make the flake happen on a loaded system.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n@eboasson FYI, this should fix the aarch64 failures we are seeing in the tests in https://github.com/ros2/rmw/pull/293 .",
    "head_branch": "clalancette/fix-node-graph-flake",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure to wait for graph change events in test_node_graph. (#1503)\n\n* Make sure to wait for graph change events in test_node_graph.\r\n\r\nWhile debugging something else, I came across this fairly rare\r\nflake in the test_node_graph tests.  Essentially, it may take\r\nsome time for node changes to propagate into the graph.  If\r\nthe NodeGraph client asks for data before the changes are\r\nin the graph, they may get something they don't expect.  The\r\nfix is to wait for an event on the NodeGraph to happen, and\r\nthen look for the data you are interested in.\r\n\r\nBefore this change, I could get the flake to happen on a loaded\r\naarch64 system fairly regularly.  After this change, I can no\r\nlonger make the flake happen on a loaded system.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621768818912b45d36a72f0",
    "number": 1502,
    "body": "I was looking into updating `rcpputils::fs` to be more compliant with `std::filesystem` for an eventual C++17 migration and found the current functionality includes a `path::exists()` method which [doesn't exist](https://en.cppreference.com/w/cpp/filesystem/path) in `std::filesystem`. This simply changes usage to the non-member function and can be merged regardless of any future changes to `rcpputils`.",
    "head_branch": "fix/std-filesystem-compliance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use std compliant non-method std::filesystem::exists function (#1502)\n\nSigned-off-by: Josh Langsfeld <josh.langsfeld@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621768918912b45d36a72f1",
    "number": 1501,
    "body": "This adds an option to the `NodeOptions` data structure to specify the type of the default callback group when constructing a node. Currently, it is hardcoded to be mutually exclusive. The intention is to make things easier for developers who would prefer a reentrant group to do things like call a service from within a callback and wait for the response (along with a `MultiThreadedExecutor`). This enables them to not have to worry about creating or keeping track of other callback groups.\r\n\r\nThis was prompted from the discussion in https://github.com/ros2/ros2_documentation/issues/901. I'll be happy to incorporate any feedback or thoughts.\r\n\r\nThanks,\r\nJosh",
    "head_branch": "feature/default-cb-group-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621768a18912b45d36a72f2",
    "number": 1500,
    "body": "Relates to https://gitlab.com/ros-tracing/tracetools_analysis/-/issues/41\r\n\r\nRelates to https://gitlab.com/ros-tracing/ros2_tracing/-/issues/111\r\n\r\nRequires https://gitlab.com/ros-tracing/ros2_tracing/-/merge_requests/219\r\n\r\nThis adds instrumentation for linking a timer to a node.\r\n\r\nAs mentioned in the linked `tracetools_analysis` issue, from my understanding, timers don't belong to a node in the same way that a publisher/subscriber belongs to a node, at least at the `rcl` level. We can only get the \"link\" between a node and a timer in `rclcpp`.",
    "head_branch": "add-instrumentation-link-timer-node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add instrumentation for linking a timer to a node (#1500)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621768b18912b45d36a72f3",
    "number": 1499,
    "body": "@brawner could you take a look at this? follow-up for https://github.com/ros2/rclcpp/issues/1354\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20201223-use-describe_parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use describe_parameters of parameter client for test (#1499)\n\n* use describe_parameters of parameter client for test\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621768c18912b45d36a72f4",
    "number": 1497,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1475.\r\n\r\nThe test was passing with fastrtps, because it does nothing in that case :smile: (fastrtps doesn't implement the incompatible qos event).",
    "head_branch": "ivanpauno/fix-test_publisher-run_event_handlers-wrong-expectations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix wrong test expectations (#1497)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621768d18912b45d36a72f5",
    "number": 1496,
    "body": "This PR implements unique network flows for publishers and subscribers in communicating nodes. \r\n\r\nAssociated pull-requests:\r\n- [design](https://github.com/ros2/design/pull/304)\r\n- [examples](https://github.com/ros2/examples/pull/296)\r\n- [rcl](https://github.com/ros2/rcl/pull/880)\r\n- [rmw](https://github.com/ros2/rmw/pull/294)\r\n- [rmw_implementation](https://github.com/ros2/rmw_implementation/pull/170)\r\n- [rmw_fastrtps](https://github.com/ros2/rmw_fastrtps/pull/502)\r\n- [rmw_cyclonedds](https://github.com/ros2/rmw_cyclonedds/pull/282)\r\n- [rmw_connext](https://github.com/ros2/rmw_connext/pull/484) (NB: This repository is soon to be deprecated)\r\n- [rmw_connextdds](https://github.com/ros2/rmw_connextdds/pull/13)\r\n- [Fast DDS](https://github.com/eProsima/Fast-DDS/pull/1682)\r\n\r\nInitial contributions stem from Ericsson and eProsima.\r\n\r\nSigned-off-by: Ananya Muddukrishna ananya.x.muddukrishna@ericsson.com",
    "head_branch": "unique_network_flows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Unique network flows (#1496)\n\n* Add option to enable unique network flow\r\n\r\n- Option enabled for publishers and subscriptions\r\n- TODO: Discuss error handling if not supported\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Get network flows of publishers and subscriptions\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Use new unique network flow option\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Rename files for clarity\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Rename API for clarity and add DSCP option\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Convert integer to string prior to streaming\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Uncrustify\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Fix linkage error thrown by MSVC compiler\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Use updated rmw interface\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Improve readability\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\n* Forward declare friend functions\r\n\r\nSigned-off-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>\r\n\r\nCo-authored-by: Ananya Muddukrishna <ananya.x.muddukrishna@ericsson.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768e18912b45d36a72f6",
    "number": 1495,
    "body": "https://github.com/ros2/rclcpp/pull/1311 broke the goal response callback signature, this adds a compatibility shim so we affect less users in the next galactic release (see [this comment](https://github.com/ros2/rclcpp/pull/1311#issuecomment-728841765)).\r\n\r\nI think this is a good idea, but there's a minor caveat: `goal_response_callback` was before a `std::function<>`, with the full `std::function` API available, and now there are a few things that the shim type doesn't implement (e.g.: `assign`, `swap`), though we could try to implement all of them.",
    "head_branch": "ivanpauno/goal_response_callback_compatibility_shim",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Goal response callback compatibility shim with deprecation of old signature (#1495)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621768f18912b45d36a72f7",
    "number": 1494,
    "body": "Addresses [this comment](https://github.com/ros2/rclcpp/pull/1465#discussion_r545395921).",
    "head_branch": "ivanpauno/update-create-publisher-subscription-documentation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update create_publisher/subscription documentation, clarifying when a parameters interface is required (#1494)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621769118912b45d36a72f8",
    "number": 1493,
    "body": "address https://github.com/ros2/rclcpp/issues/360",
    "head_branch": "topic-20201218-sync_param_timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add timeout to SyncParametersClient methods (#1493)\n\n* add timeout to SyncParametersClient methods\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* update parameter client test with timeout.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* use template thin interface to keep the implementations in library.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* test duration should be long enough not to detect unnecessary timeout\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769218912b45d36a72f9",
    "number": 1492,
    "body": "Closes #1491\r\nChange the execution order of callback dispatch and topic statistic calculating\r\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>\r\n\r\nCurrent topic statistics include callback duration.\r\nTo measure communication latency, this patch moves topic statics calculation before callback execution.\r\nIt excludes callback duration from statistics results and enables finding whether a specific callback duration is a bottleneck or not.",
    "head_branch": "issue_1491_topic_statistics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Modify excluding callback duration from topic statistics (#1492)\n\nSigned-off-by: hsgwa <hasegawa@isp.co.jp>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769318912b45d36a72fa",
    "number": 1489,
    "body": "Backport #1464 to Foxy.",
    "head_branch": "jacob/foxy_backport_1464",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Reserve vector capacities and use emplace_back for constructing vectors (#1464) (#1489)\n\n* Reserve vector capacities and use emplace_back for constructing vectors\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Use resize instead of reserve\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove push_back\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\nCo-authored-by: brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769418912b45d36a72fb",
    "number": 1488,
    "body": "Backport #1461 to Foxy.",
    "head_branch": "jacob/foxy_backport_1461",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_lifecycle] Change uint8_t iterator variables to size_t (#1461) (#1488)\n\n* Change uint8_t iterator variables to size_t\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Change to unsigned int\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\nCo-authored-by: brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769518912b45d36a72fc",
    "number": 1486,
    "body": "clang static analysis gets a bit confused going through the\r\ngtest macros, so switch from ASSERT_NE to ASSERT_TRUE as\r\nwe've done elsewhere.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/fix-clang-static-warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change nullptr checks to use ASSERT_TRUE. (#1486)\n\n* Change nullptr checks to use ASSERT_TRUE.\r\n\r\nclang static analysis gets a bit confused going through the\r\ngtest macros, so switch from ASSERT_NE to ASSERT_TRUE as\r\nwe've done elsewhere.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769618912b45d36a72fd",
    "number": 1484,
    "body": "address https://github.com/ros2/rclcpp/issues/1483",
    "head_branch": "feature-20201130-node-graph",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "NodeGraph exposure with test cases (#1484)\n\n* add NodeGraph::get_node_names_and_namespaces()\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add test for NodeGraph::get_node_names_and_namespaces\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add NodeGraph::get_client_names_and_types_by_node()\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add test for NodeGraph::get_client_names_and_types_by_node\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add NodeGraph::get_publisher/subscriber_names_and_types_by_node()\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add test for NodeGraph::get_publisher/subscriber_names_and_types_by_node\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* fix comments.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* use make_scope_exit and update comments.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* comment fix.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* minor fixes.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add comments for enclaves.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add URL about ROS 2 Security Enclaves.\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* Deprecated `shared_ptr<MessageT>` sub callbacks\r\n\r\nSigned-off-by: Tomoya Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621769718912b45d36a72fe",
    "number": 1481,
    "body": "https://github.com/ros2/rclcpp/issues/1392",
    "head_branch": "issues-1392",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769818912b45d36a72ff",
    "number": 1480,
    "body": "",
    "head_branch": "brawner/foxy-ql-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[foxy] Update QD to QL 1 (#1480)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769918912b45d36a7300",
    "number": 1479,
    "body": "Cherry-picked from #1476\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=13176)](http://ci.ros2.org/job/ci_linux/13176/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=8107)](http://ci.ros2.org/job/ci_linux-aarch64/8107/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10892)](http://ci.ros2.org/job/ci_osx/10892/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=13190)](http://ci.ros2.org/job/ci_windows/13190/)",
    "head_branch": "cottsay/component_benchmark",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add benchmarks for components (#1479)\n\nCherry-picked from 08963df92644a5de963d80bd206b4185de77d822\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769a18912b45d36a7301",
    "number": 1477,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/ql-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update QDs to QL 1 (#1477)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769c18912b45d36a7302",
    "number": 1476,
    "body": "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=13175)](http://ci.ros2.org/job/ci_linux/13175/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=8106)](http://ci.ros2.org/job/ci_linux-aarch64/8106/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10891)](http://ci.ros2.org/job/ci_osx/10891/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=13189)](http://ci.ros2.org/job/ci_windows/13189/)",
    "head_branch": "cottsay/component_benchmark",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add benchmarks for components (#1476)\n\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769d18912b45d36a7303",
    "number": 1474,
    "body": "Windows debug has been complaining about dereferencing a value initialized map/set iterator, which just meant it was dereferencing `std::map::end()` after the find. This PR adds logic to check the result of find, dereference, then erase. This issue existed on other platforms as well, windows just had the particular assert statement enabled during debug. \r\n\r\nExample failure:\r\nhttps://ci.ros2.org/view/nightly/job/ci_windows/13158/testReport/junit/projectroot.test/rclcpp/test_executors/\r\n\r\nFixes #1456 \r\n\r\nBuild with debug, testing `--packages-select rclcpp`\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=13160)](http://ci.ros2.org/job/ci_linux/13160/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=8091)](http://ci.ros2.org/job/ci_linux-aarch64/8091/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10875)](http://ci.ros2.org/job/ci_osx/10875/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=13166)](http://ci.ros2.org/job/ci_windows/13166/)\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-iterator-dereference-error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Adjust logic around finding and erasing guard_condition (#1474)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621769e18912b45d36a7304",
    "number": 1472,
    "body": "address https://github.com/ros2/rclcpp/issues/1460\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20201122-get_transition_graph",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add LifecycleNode::get_transition_graph to match services. (#1472)\n\n* add LifecycleNode::get_transition_graph along with service.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* add concrete test cases for get_available_transitions with each primary state.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621769f18912b45d36a7305",
    "number": 1471,
    "body": "This backports the lifecycle benchmarks from #1462. This should probably wait for merging until `performance_test_fixture` is released into foxy as merging this PR will break rpr jobs.\r\n\r\n\r\n\r\n* Benchmark lifecycle features\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/backport-1462",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Benchmark lifecycle features (#1462) (#1471)\n\n* Benchmark lifecycle features\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Cleanup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176a018912b45d36a7306",
    "number": 1470,
    "body": "Backport of #1444 and #1463 from Rolling to Foxy.",
    "head_branch": "cottsay/benchmark_backport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add performance tests for parameter transport (#1470)\n\nNote that these tests are written without using\nperformance_test_fixture. Because the parameter server is running in the\nsame process, any allocations happening in the spin thread for the\nserver get picked up by the allocation statistics even though those\nfunctions aren't invoked in the tests.\n\nIf we can find a way to turn off the memory tracking on a per-thread\nbasis, we can enable memory tracking. Until then, leaving the memory\nstatistics enabled could be misleading.\n\nCherry-picked from f5e35bda86c1d95cf0296bb4f756d3bb63781d97\n\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176a118912b45d36a7307",
    "number": 1469,
    "body": "I think this is high impact but may have gone somewhat unnoticed since most ROS setups probably only tear-down Nodes on termination. Please see description and related issues in #1468.\r\n\r\n> SEGV is caused due to some sub-iface destructor code expecting living references to the node base or other interface but it was already released earlier in the Node destructor. Memory corruption occurs and eventually malloc checks abort later in the execution, usually somewhere in malloc_consolidate, FastRTPS library or waitfor collection resizing.\r\n\r\nI have based this fix to foxy branch as I think it should be applied there and then brought forward to master. I can rebase to master though if you want.\r\n\r\nThis fix explicitly releases the shared_ptrs to sub interfaces in the reverse order of creation. This ensures that the heavy dependencies between the sub-interfaces exist during tear-down. Especially the base interface, but also true of many others such as topics, waitables, graph, services, clock and logging interfaces.",
    "head_branch": "bugfix/node-destructor-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix SEGV caused by order of destruction of Node sub-interfaces (#1469)\n\n* added tear-down of node sub-interfaces in reverse order of their creation (#1469)\r\n\r\nSigned-off-by: Colin MacKenzie <colin@flyingeinstein.com>\r\n\r\n* added name of service to log message for leak detection. Previously it gave no indication of what node is causing the memory leak (#1469)\r\n\r\nSigned-off-by: Colin MacKenzie <colin@flyingeinstein.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176a218912b45d36a7308",
    "number": 1467,
    "body": "This will be useful in things like https://github.com/ros2/demos/pull/474.",
    "head_branch": "ivanpauno/add-getters-to-qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add getters to rclcpp::qos and rclcpp::*Policy enum classes (#1467)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176a318912b45d36a7309",
    "number": 1466,
    "body": "Backports #1376.",
    "head_branch": "ivanpauno/dashing-node-options-copy-constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix NodeOptions copy constructor (#1376) (#1466)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176a418912b45d36a730a",
    "number": 1465,
    "body": "Reapply #1408.\r\n\r\nFixes:\r\n- Windows visibility issues.\r\n- Windows ABI issues.\r\n  Structs with public members that are from `std` generate a lot of warnings on Windows, so `QosOverridingOptions` is now a `class`.\r\n- Fixes bug in `check_if_stringified_policy_is_null`.\r\n\r\nCosmetic changes:\r\n- `QosOverridingOptions::with_default_policies(...)` instead of `QosOverridingOptions{QosOverridingOptions::kDefaultPolicies, ...}`\r\n\r\nI will try to run CI in the correct branch this time :joy:",
    "head_branch": "ivanpauno/qos-configurability-take-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Qos configurability (take 2) (#1465)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176a618912b45d36a730b",
    "number": 1464,
    "body": "While benchmarking, I noticed some good performance improvements with `get_available_states` and `get_available_transitions`. By reserving, allocations can be reduced and using emplace_back where possible can save a duplicate construction. The biggest benefits are in the `get_available_states()` and `get_available_transitions()` method, where there is a 3-5x performance increase.\r\n\r\nTarget branch benchmarks:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=13075)](http://ci.ros2.org/job/ci_linux/13075/)\r\n\r\nThis branch:\r\n* Linux [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=13077)](https://ci.ros2.org/job/ci_linux/13077/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=8021)](http://ci.ros2.org/job/ci_linux-aarch64/8021/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10798)](http://ci.ros2.org/job/ci_osx/10798/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=13056)](http://ci.ros2.org/job/ci_windows/13056/)\r\n\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/lifecycle-node-optimizations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Reserve vector capacities and use emplace_back for constructing vectors (#1464)\n\n* Reserve vector capacities and use emplace_back for constructing vectors\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Use resize instead of reserve\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove push_back\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176a718912b45d36a730c",
    "number": 1463,
    "body": "Note that these tests are written without using performance_test_fixture. Because the parameter server is running in the same process, any allocations happening in the spin thread for the server get picked up by the allocation statistics even though those functions aren't invoked in the tests.\r\n\r\nIf we can find a way to turn off the memory tracking on a per-thread basis, we can enable memory tracking. Until then, leaving the memory statistics enabled could be misleading.",
    "head_branch": "cottsay/benchmark_param_client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add performance tests for parameter transport (#1463)\n\nNote that these tests are written without using\r\nperformance_test_fixture. Because the parameter server is running in the\r\nsame process, any allocations happening in the spin thread for the\r\nserver get picked up by the allocation statistics even though those\r\nfunctions aren't invoked in the tests.\r\n\r\nIf we can find a way to turn off the memory tracking on a per-thread\r\nbasis, we can enable memory tracking. Until then, leaving the memory\r\nstatistics enabled could be misleading.\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176a818912b45d36a730d",
    "number": 1462,
    "body": "This PR adds benchmarks for lifecycle node features, including rclcpp::LifecycleNode construction/destruction, state machine methods, and construction+destruction for State/Transition types.\r\n\r\nMuch of the API of rclcpp::LifecycleNode calls the node interface's API, which are benchmarked elsewhere, so I did not include those here.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_lifecycle-benchmarks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Benchmark lifecycle features (#1462)\n\n* Benchmark lifecycle features\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Cleanup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176a918912b45d36a730e",
    "number": 1461,
    "body": "This is a small theoretical issue I found. The type of `states_size` and `transitions_size` is `unsigned int`, but the for loop int type is `uint8_t`. While `default_state_machine` has only 11 states and 25 transitions, looping with a small integer type that is compared to a larger type could lead to an infinite loop. While `size_t` here is large enough to avoid problems, I'd also be happy to use also `unsigned int`.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/for-loop-uint8_t-unsigned-int",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_lifecycle] Change uint8_t iterator variables to size_t (#1461)\n\n* Change uint8_t iterator variables to size_t\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Change to unsigned int\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176aa18912b45d36a730f",
    "number": 1459,
    "body": "Reverts #1408, which introduced a build failure on Windows.\r\n\r\nhttps://github.com/ros2/rclcpp/pull/1458 tried to fix it, but there are lots of Warnings too.",
    "head_branch": "ivanpauno/revert-#1408",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Qos configurability (#1408)\" (#1459)\n\nThis reverts commit 4c5986aa2da9f8623cdb1c1d1f7fd864c6daffba.\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176ab18912b45d36a7310",
    "number": 1458,
    "body": "It seems that I ran CI in https://github.com/ros2/rclcpp/pull/1408 using master instead of the appropriate branch :man_facepalming: .\r\n\r\nI think this fixes the [Windows issues](https://ci.ros2.org/job/ci_windows/13050/), if not I'm going to revert:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=13073)](http://ci.ros2.org/job/ci_linux/13073/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=8018)](http://ci.ros2.org/job/ci_linux-aarch64/8018/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10795)](http://ci.ros2.org/job/ci_osx/10795/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=13053)](http://ci.ros2.org/job/ci_windows/13053/)",
    "head_branch": "ivanpauno/fix-windows",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176ac18912b45d36a7311",
    "number": 1457,
    "body": "**What:** Implemented the feature in https://github.com/ros-tooling/roadmap/issues/1 of Meta-Ticket https://github.com/ros2/ros2/issues/917\r\n\r\n**Why:** Instead requiring a user to manually enable and configure Topic Statistics via NodeOptions, allow them to enable and configure Topic Statistics through Parameters. It would greatly simplify the ability to use the Topic Statistics feature so that users don't have to modify their subscription options in code.\r\n\r\nThe following should be configurable at runtime:\r\n- enable / disable\r\n- publish period\r\n- published statistics topic\r\n\r\n**How:** For any subscriber, run \r\n```\r\nros2 run package_name executable_name [--ros-args -p stats_enabled:=\"a_bool_value\"] [-p stats_period:=\"a_double_value\"] [-p stats_topic:=\"a_string_value\"]\r\n```\r\n\r\n**Examples with Nodes in [Topic Statistics Tutorial](https://index.ros.org/doc/ros2/Tutorials/Topics/Topic-Statistics-Tutorial/):** \r\n```\r\nros2 run cpp_pubsub listener --ros-args -p stats_enabled:=true -p stats_period:=0.5 -p stats_topic:=new_statistics_topic\r\nros2 run cpp_pubsub listener_with_topic_statistics --ros-args -p stats_enabled:=false\r\n```\r\n\r\n**Note:** \r\n\r\n1. The run-time configuration through Parameters has prioirty over code-configuration via NodeOptions. If the Parameters is not given, the default NodeOptions in code will be used if there is.\r\n2. The type double is used for publish-period since I want to make the period smaller als 1 also possible.\r\n\r\n \r\n**Feedback wanted:** It's my first time to try to contribute an open-source project. Any Feedback is appreciated! @dabonnie\r\n\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176ae18912b45d36a7312",
    "number": 1453,
    "body": "address https://github.com/ros2/rclcpp/issues/1354\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "feature-20201112-describe-parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "support describe_parameters methods to parameter client. (#1453)\n\n* support describe_parameters methods to parameter client.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176af18912b45d36a7313",
    "number": 1452,
    "body": "## What this is\r\nThis is a modified version of `GenericPublisher` and `GenericSubscription` from the `rosbag2` repo with the goal of serving as a basis for the port of `topic_tools` to ROS2 (and `rosbag2` in the future as well as other libraries). See https://github.com/ros2/ros2/issues/857 for more detail.\r\n\r\n## What was modified\r\nI made the pub/sub standalone since I don't want to force the user to inherit from some node, meaning it now stores a library and can be created just from the topic name and type name.\r\n\r\n## Reviewer notes\r\nI know this is a very large PR. If you prefer, I'm happy to split it into several smaller ones ‚Äì but it's actually only a moderate (okay, still large-ish) diff from the rosbag2 sources, as you can see by looking at the second commit.\r\n\r\nI don't have all the context of the original source code, and I'll highlight the things that I am uncertain about in comments. It's one of my first contributions here, so please don't hesitate to let me know if I'm not following best practices or the design is awkward.\r\n\r\nI didn't sign-off the first commit as the contributing guidelines demand ‚Äì I don't know what to do with it since it isn't really from me. What do you recommend?",
    "head_branch": "rclcpp_generic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add generic publisher and generic subscription for serialized messages (#1452)\n\n* Copying files from rosbag2\r\n\r\nThe generic_* files are from rosbag2_transport\r\ntypesupport_helpers incl. test is from rosbag2_cpp\r\nmemory_management.hpp is from rosbag2_test_common\r\ntest_pubsub.cpp was renamed from test_rosbag2_node.cpp from rosbag2_transport\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Rebrand into rclcpp_generic\r\n\r\nAdd package.xml, CMakeLists.txt, Doxyfile, README.md and CHANGELOG.rst\r\nRename namespaces\r\nMake GenericPublisher and GenericSubscription self-contained by storing shared library\r\nNew create() methods that return shared pointers\r\nAdd docstrings\r\nInclude only what is needed\r\nMake linters & tests pass\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Review feedback\r\n\r\n* Delete CHANGELOG.rst\r\n* Enable cppcheck\r\n* Remove all references to rosbag2/ros2bag\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Move rclpp_generic into rclcpp\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Rename namespace rclcpp_generic to rclcpp::generic\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Free 'create' functions instead of static functions in class\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Remove 'generic' subdirectory and namespace hierarchy\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Order includes according to style guide\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Remove extra README.md\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Also add brief to class docs\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Make ament_index_cpp a build_depend\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Add to rclcpp.hpp\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Remove memory_management, use rclcpp::SerializedMessage in GenericPublisher::publish\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Clean up the typesupport_helpers\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Use make_shared, add UnimplementedError\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Add more comments, make member variable private, remove unnecessary include\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Rename test\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Update copyright and remove ament_target_dependencies for test\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Accept PublisherOptions and SubscriptionOptions\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Remove target_include_directories\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Add explanatory comment to SubscriptionBase\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Use kSolibPrefix and kSolibExtension from rcpputils\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Fix downstream build failure by making ament_index_cpp a build_export_depend\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Use path_for_library(), fix documentation nitpicks\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Improve error handling in get_typesupport_handle\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Accept SubscriptionOptions in GenericSubscription\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Make use of PublisherOptions in GenericPublisher\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Document typesupport_helpers\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Improve documentation\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Use std::function instead of function pointer\r\n\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Minimize vertical whitespace\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Add TODO for callback with message info\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Link issue in TODO\r\n\r\nSigned-off-by: Nikolai Morin <nikolai.morin@apex.ai>\r\n\r\n* Add missing include for functional\r\n\r\nSigned-off-by: nnmm <nnmmgit@gmail.com>\r\n\r\n* Fix compilation\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Fix lint\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Address review comments (#1)\r\n\r\n* fix redefinition of default template arguments\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* address review comments\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* rename test executable\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* add functionality to lifecycle nodes\r\n\r\nSigned-off-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* Refactor typesupport helpers\r\n\r\n* Make extract_type_identifier function private\r\n* Remove unused extract_type_and_package function\r\n* Update unit tests\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Remove note about ament from classes\r\n\r\nThis comment only applies to the free functions.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Fix formatting\r\n\r\nCo-authored-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* Fix warning\r\n\r\nPossible loss of data from double to rcutils_duration_value_t\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Add missing visibility macros\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\nCo-authored-by: William Woodall <william+github@osrfoundation.org>\r\nCo-authored-by: Jacob Perron <jacob@openrobotics.org>\r\nCo-authored-by: Karsten Knese <Karsten1987@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176b018912b45d36a7314",
    "number": 1451,
    "body": "Backport #1376 to Foxy.",
    "head_branch": "jacob/foxy_backport_1376",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix NodeOptions copy constructor (#1376) (#1451)\n\n* Fix NodeOptions copy constructor (#1376)\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Remove rosout_qos assignment\r\n\r\nNot applicable in Foxy.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b118912b45d36a7315",
    "number": 1450,
    "body": "Backport #1301 to Foxy.",
    "head_branch": "jacob/foxy_backport_1301",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Avoid reference cycle to fix memory leak (#1301) (#1450)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\nCo-authored-by: Chen Lihui <lihui.chen@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b218912b45d36a7316",
    "number": 1449,
    "body": "CentOS7 has been having test failures for a while; see https://ci.ros2.org/view/nightly/job/nightly_linux-centos_debug/589/#showFailuresLink for the latest example.\r\n\r\nThe problem ends up being that the mocking_utils `inject_on_return` doesn't work on CentOS7 (https://github.com/ros2/rclcpp/blob/06465ba827da0ce018199fb0f80d15ffe6fc26fd/rclcpp/test/mocking_utils/patch.hpp#L550).  This PR addresses that by changing to `patch_and_return` (which does work on CentOS7), and doing a slight class refactoring so we can stop abusing `inject_on_return` to do partial initialization.  In my testing on CentOS7, this fixes all of the current crashes we are seeing (in rclcpp and rclcpp_action, at least).",
    "head_branch": "clalancette/fix-centos-crashes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix test crashes on CentOS 7 (#1449)\n\n* Refactor graph listener tests to work on CentOS.\r\n\r\ninject_on_return doesn't work on CentOS.  To fix this, we\r\ndo two separate things:\r\n\r\n1.  Where applicable, replace calls to inject_on_return with\r\npatch_and_return (which does work).\r\n2.  We were sort of abusing inject_on_return to do partial\r\ninitialization for us for some of the tests.  Instead, make\r\nthe class under test (GraphListener) have a protected method\r\nthat we can call to do initialization.  With this in place,\r\nwe can now get rid of the problematic inject_on_return.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b318912b45d36a7317",
    "number": 1448,
    "body": "I noticed this allocation while running benchmark tests with updated pause/resume heap allocations. Creating a std::vector and appending to it allocates on the heap. There is a way of removing these items while iterating through the map to erase from. \r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-remove-node-allocation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove allocation from executor::remove_node() (#1448)\n\n* Remove allocation from remove_node\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix uncrustify\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b418912b45d36a7318",
    "number": 1447,
    "body": "This switches calls of `benchmark::State::PauseTiming` and `ResumeTiming` to proposed `pause_performance_measurements` and `resume_performance_measurements`. This should help keep allocations more accurate for the code under test.\r\n\r\nTesting with benchmarks and `--packages-select rclcpp`\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12992)](http://ci.ros2.org/job/ci_linux/12992/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7944)](http://ci.ros2.org/job/ci_linux-aarch64/7944/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10719)](http://ci.ros2.org/job/ci_osx/10719/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12972)](http://ci.ros2.org/job/ci_windows/12972/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-benchmarks-pause",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b618912b45d36a7319",
    "number": 1446,
    "body": "Backport #1445",
    "head_branch": "chapulina/foxy/ql2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump rclcpp packages to Quality Level 2 (#1445) (#1446)\n\nSigned-off-by: Louise Poubel <louise@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b718912b45d36a731a",
    "number": 1445,
    "body": "All dependencies are QL2 or higher, so all rclcpp packages can be bumped as well.\r\n\r\nNote that `libstatistics_collector` needs this PR merged first: https://github.com/ros-tooling/libstatistics_collector/pull/64\r\n\r\nAll that's missing for level 1 are performance tests, which are in the works (see #1036, #1037, #1038, #1039).",
    "head_branch": "chapulina/ql2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump rclcpp packages to Quality Level 2 (#1445)\n\nSigned-off-by: Louise Poubel <louise@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b818912b45d36a731b",
    "number": 1444,
    "body": "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12987)](http://ci.ros2.org/job/ci_linux/12987/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7939)](http://ci.ros2.org/job/ci_linux-aarch64/7939/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10715)](http://ci.ros2.org/job/ci_osx/10715/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12965)](http://ci.ros2.org/job/ci_windows/12965/)\r\n\r\n```\r\n--------------------------------------------------------------------------------------------------\r\nBenchmark                                        Time             CPU   Iterations UserCounters...\r\n--------------------------------------------------------------------------------------------------\r\nParameterTest/declare_undeclare              67395 ns        67391 ns        12021 heap_allocations=11.9871\r\nParameterTest/has_parameter_hit                154 ns          154 ns      4527755 heap_allocations=0\r\nParameterTest/has_parameter_miss               158 ns          158 ns      4417476 heap_allocations=0\r\nParameterTest/set_parameters                134521 ns       134471 ns         4470 heap_allocations=21.981\r\nParameterTest/set_parameters_atomically      71012 ns        70992 ns         9742 heap_allocations=7.99825\r\nParameterTest/set_parameters_callback       174112 ns       174052 ns         4038 heap_allocations=21.9745\r\nParameterTest/get_parameter                   3392 ns         3392 ns       205079 heap_allocations=1\r\nParameterTest/list_parameters_hit             9193 ns         9193 ns        75276 heap_allocations=5\r\nParameterTest/list_parameters_miss             858 ns          858 ns       813431 heap_allocations=0\r\n```",
    "head_branch": "cottsay/benchmark_parameter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add benchmarks for node parameters interface (#1444)\n\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176b918912b45d36a731c",
    "number": 1443,
    "body": "This test has been failing consistently on Windows debug for a long time (#1282).\r\n\r\nSee the history here:\r\n\r\nhttps://ci.ros2.org/view/nightly/job/nightly_win_deb/1799/testReport/junit/projectroot.test/rclcpp/test_executors/history/\r\n\r\nI suggest disabling that test case until it can be fixed. Otherwise it's just making the build yellow with little benefit.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12984)](http://ci.ros2.org/job/ci_linux/12984/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7936)](http://ci.ros2.org/job/ci_linux-aarch64/7936/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10712)](http://ci.ros2.org/job/ci_osx/10712/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12962)](http://ci.ros2.org/job/ci_windows/12962/)",
    "head_branch": "chapulina/1282/disable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176ba18912b45d36a731d",
    "number": 1442,
    "body": "This PR fixes the `-Wformat-nonliteral` warnings seen in #1406 and #1405 by changing the generated macros in `rclcpp` for logging. This approach will force changes to several tests, specifically in [`test_logging.cpp`](https://github.com/ros2/rclcpp/blob/d9d67e68131bb0c815dd7494846da390b6c12648/rclcpp/test/rclcpp/test_logging.cpp).\r\n\r\nI've made this a draft PR to make it easier to discuss the changes and tradeoffs of this approach and to make a spot for recording CI runs.",
    "head_branch": "audrow/rclcpp_components-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix string literal warnings (#1442)\n\n* Add warnings\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Fix nonliteral string warnings\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Fix compile error from new logging functions in rclcpp_components\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Use \"%s\" to make log string evaluation secure\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Fix logging warnings in rclcpp\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Fix coding style to pass linter\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Get the c_str of streams\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Remove test to check string logging\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Add in stream logging tests\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176bb18912b45d36a731e",
    "number": 1441,
    "body": "This backports rclcpp_action benchmarks for both action_client and action_server. I included #1256 for easy merging.\r\n\r\nThis PR will be rebase merged instead of squash merged.",
    "head_branch": "brawner/rclcpp-backport-1429",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add rclcpp_action action_server benchmarks (#1433)\n\n* Add rclcpp_action action_server benchmarks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address cancel bug\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix errors\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix clang error\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176bc18912b45d36a731f",
    "number": 1440,
    "body": "Backport executor benchmarks from #1413",
    "head_branch": "brawner/rclcpp-backport-1413",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added executor benchmark tests (#1413)\n\n* Added executor benchmark tests\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* make linters happy\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* initialize callback_count\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feddback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added add_node and remove_node benchmark tests\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Add/remove node in static_single_thread_executor\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Make linters happy\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added StaticSingleThreadedExecutor add/remove node tests\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* make linters happy\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176bd18912b45d36a7320",
    "number": 1439,
    "body": "Add service and client benchmarks",
    "head_branch": "brawner/rclcpp-backport-1425",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add service and client benchmarks (#1425)\n\n* Add service and client benchmarks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Style\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Uncrustify\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176be18912b45d36a7321",
    "number": 1438,
    "body": "Adding two commits here, the initial benchmarks and the followup commit that sets the benchmarks to only be tested on the default rmw_implementation.",
    "head_branch": "brawner/rclcpp-backport-1411",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Set CMakeLists to only use default rmw for benchmarks (#1427)\n\n* Set CMakeLists to only use default rmw for benchmarks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add comment\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c018912b45d36a7322",
    "number": 1437,
    "body": "I combined these two backports since #1422 introduces a bug and #1424 addresses it. The commit for #1424 had to be adjusted to work in this commit order, since #1424 is later on rolling.",
    "head_branch": "brawner/rclcpp-backport-1422",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[foxy backport] Refactor test CMakeLists.txt (#1422) and moving rosidl_generate_interfaces_call (#1424)  (#1437)\n\n* Refactor test CMakeLists in prep for benchmarks (#1422)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address #1423 by moving rosidl_generate_interfaces call (#1424)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove rolling-only tests\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c118912b45d36a7323",
    "number": 1436,
    "body": "See https://github.com/ros2/rcl_interfaces/pull/115.",
    "head_branch": "ivanpauno/enforce-parameter-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c218912b45d36a7324",
    "number": 1435,
    "body": "Older versions of MSVC 2019 can't figure out the correct namespace.\r\nJust to keep them happy, add a fully-qualified namespace.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/weak-cb-groups-namespace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add fully-qualified namespace to WeakCallbackGroupsToNodesMap (#1435)\n\nOlder versions of MSVC 2019 can't figure out the correct namespace.\r\nJust to keep them happy, add a fully-qualified namespace.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c318912b45d36a7325",
    "number": 1434,
    "body": "",
    "head_branch": "improve-lookup-time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c418912b45d36a7326",
    "number": 1433,
    "body": "This PR adds benchmarks for rclcpp_action's action server.\r\n\r\nBuilding with benchmarks and testing `--packages-select rclcpp_action`\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12930)](http://ci.ros2.org/job/ci_linux/12930/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7882)](http://ci.ros2.org/job/ci_linux-aarch64/7882/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10649)](http://ci.ros2.org/job/ci_osx/10649/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12880)](http://ci.ros2.org/job/ci_windows/12880/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_action-benchmark-service",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add rclcpp_action action_server benchmarks (#1433)\n\n* Add rclcpp_action action_server benchmarks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address cancel bug\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix errors\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix clang error\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c518912b45d36a7327",
    "number": 1432,
    "body": "[ros::Duration::Duration(double seconds)](http://docs.ros.org/en/latest/api/rostime/html/classros_1_1Duration.html#ab097cc53395335730c081b6a13d0a12e) provides a constructor from a floating point number, which equivalent in ROS 2 is an static method [rclcpp::Duration::from_seconds](https://github.com/ros2/rclcpp/blob/2309811814b80ad241448aebf51eebd8db17d826/rclcpp/include/rclcpp/duration.hpp#L129-L130).\r\n\r\nThe only provided constructor from numeric values in rclcpp is [rclcpp::Duration::Duration(rcl_duration_value_t)](https://github.com/ros2/rclcpp/blob/2309811814b80ad241448aebf51eebd8db17d826/rclcpp/include/rclcpp/duration.hpp#L42) (`rcl_duration_value_t -> int64_t`).\r\n\r\nThe lack of a constructor accepting a `double seconds` together with cpp implicit narrowing conversions might make the user think that `rclcpp::Duration(1.3)` is doing the correct thing, though that's probably not what they want\r\nIn gcc or clang, `-Wfloat-conversion` or `-Wconversion` should trigger a warning in this case, but not everybody use that.\r\n\r\n[This comment](https://github.com/ros2/rclcpp/blob/2309811814b80ad241448aebf51eebd8db17d826/rclcpp/include/rclcpp/duration.hpp#L41) also provides a bit of extra confusion.\r\n\r\nPossible solutions to avoid the issue:\r\n- Add an `rclcpp::Duration::Duration(double seconds)` constructor.\r\n  I'm not a fan of `rclcpp::Duration(1.3)` being 1.3 seconds and `rclcpp::Duration(1)` being 1ns.\r\n- Deprecate `rclcpp::Duration::Duration(rcl_duration_value_t nanoseconds)` in favor of `rclcpp::Duration::from_nanoseconds(rcl_duration_value_t nanoseconds)`.\r\n  This is the approach taken by this drat PR.\r\n- Delete the confusing comment and do nothing.",
    "head_branch": "ivanpauno/duration",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rclcpp::Duration constructors might be confusing to users migrating from ROS 1 (#1432)\n\n* Deprecate Duration(rcl_duration_value_t) in favor of static Duration::from_nanoseconds(rcl_duration_value_t)\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176c618912b45d36a7328",
    "number": 1430,
    "body": "Signed-off-by: Christophe Bedard <bedard.christophe@gmail.com>",
    "head_branch": "ahcorde/backport/1428",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update tracetools' QL in rclcpp's QD (#1428) (#1430)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>\r\n\r\nCo-authored-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c718912b45d36a7329",
    "number": 1429,
    "body": "This PR adds benchmarks for the action client against a trivial fibonacci action server.\r\n\r\nExample results\r\n```\r\n----------------------------------------------------------------------------------------------------------------------------\r\nBenchmark                                                                  Time             CPU   Iterations UserCounters...\r\n----------------------------------------------------------------------------------------------------------------------------\r\nActionClientPerformanceTest/construct_client_without_server           406986 ns       405404 ns         1895 heap_allocations=607.852\r\nActionClientPerformanceTest/construct_client_with_server              445265 ns       437031 ns         1442 heap_allocations=701.658\r\nActionClientPerformanceTest/destroy_client                            296199 ns       252146 ns         2873 heap_allocations=607.326\r\nActionClientPerformanceTest/async_send_goal_only                        9721 ns         6593 ns       111837 heap_allocations=6.99786\r\nActionClientPerformanceTest/async_send_goal_rejected                  153292 ns        54992 ns        12823 heap_allocations=64.799\r\nActionClientPerformanceTest/async_send_goal_get_accepted_response     633245 ns       486516 ns         2547 heap_allocations=110.916\r\nActionClientPerformanceTest/async_get_result                          455398 ns       309215 ns         5410 heap_allocations=183.366\r\nActionClientPerformanceTest/async_cancel_goal                         535698 ns       387064 ns         3465 heap_allocations=195.695\r\nActionClientPerformanceTest/async_cancel_all_goals                   1234952 ns      1079082 ns         1000 heap_allocations=1.19876k\r\n```\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_action-benchmark-client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Benchmark rclcpp_action action_client (#1429)\n\n* Benchmark rclcpp_action action_client\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Bump timeout\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c818912b45d36a732a",
    "number": 1428,
    "body": "QL was just bumped to 1: https://gitlab.com/ros-tracing/ros2_tracing/-/merge_requests/213",
    "head_branch": "update-tracetools-quality-level-to-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update tracetools' QL in rclcpp's QD (#1428)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176c918912b45d36a732b",
    "number": 1427,
    "body": "After discussions with @cottsay @clalancette @chapulina and @ahcorde it was decided to run these benchmarks only for the default rmw implementation.\r\n\r\nRunning with benchmarks on and testing `--packages-select rclcpp`\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12893)](http://ci.ros2.org/job/ci_linux/12893/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7847)](http://ci.ros2.org/job/ci_linux-aarch64/7847/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10609)](http://ci.ros2.org/job/ci_osx/10609/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12835)](http://ci.ros2.org/job/ci_windows/12835/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-benchmark-use-default-rmw-only",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Set CMakeLists to only use default rmw for benchmarks (#1427)\n\n* Set CMakeLists to only use default rmw for benchmarks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add comment\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176cb18912b45d36a732c",
    "number": 1426,
    "body": "",
    "head_branch": "ahcorde/foxy/qd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "udpate QD links to foxy\n\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176cc18912b45d36a732d",
    "number": 1425,
    "body": "PR for adding high-level client and service benchmarks. These services use a `test_msg::srv::Empty` as I couldn't find any performance difference between `Empty` and something more complicated like a ListParameters service type. \r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-benchmark-client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add service and client benchmarks (#1425)\n\n* Add service and client benchmarks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Style\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Uncrustify\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176cd18912b45d36a732e",
    "number": 1424,
    "body": "These interfaces are needed by the test_subscription_topic_statistics test, but somehow generating them at a different scope than where the `rosidl_target_interfaces` call occurs doesn't correctly target the libraries.\r\n\r\nFixes #1423 \r\n\r\nTesting `--packages-select rclcpp`\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12861)](http://ci.ros2.org/job/ci_linux/12861/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7816)](http://ci.ros2.org/job/ci_linux-aarch64/7816/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10572)](http://ci.ros2.org/job/ci_osx/10572/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12804)](http://ci.ros2.org/job/ci_windows/12804/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-address-1423",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Address #1423 by moving rosidl_generate_interfaces call (#1424)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176ce18912b45d36a732f",
    "number": 1422,
    "body": "This PR refactors the CMakeLists in rclcpp/test for easier maintenance as more benchmarks are added. It's a prerequisite for #1411 \r\n\r\nBuilding without benchmark flags and testing `--packages-select rclcpp`\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12843)](http://ci.ros2.org/job/ci_linux/12843/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7797)](http://ci.ros2.org/job/ci_linux-aarch64/7797/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10554)](http://ci.ros2.org/job/ci_osx/10554/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12786)](http://ci.ros2.org/job/ci_windows/12786/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-refactor-test-cmakelists",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor test CMakeLists in prep for benchmarks (#1422)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176cf18912b45d36a7330",
    "number": 1421,
    "body": "This patch actually does 4 related things:\r\n\r\n1.  Renames the recursive mutex in the ServerBaseImpl class\r\nto action_server_reentrant_mutex_, which makes it a lot\r\nclearer what it is meant to lock.\r\n2.  Adds some additional error checking where checks were missed.\r\n3.  Moves the mutex in execute_check_expired_goals out of the\r\nloop so we aren't constantly locking and unlocking it.\r\n4.  Adds a lock to publish_status so that the action_server\r\nstructure is protected.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nI found this problem while trying to reproduce https://github.com/ros2/rclcpp/pull/1313 .  It manifested as a segfault that happened sometimes when running a client over and over against a server.  Before this patch, that test would crash within minutes.  With this patch in place, it has been running for several hours without a crash.\r\n\r\n@daisukes @fujitatomoya FYI.",
    "head_branch": "clalancette/fix-action-missing-locks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing locking to the rclcpp_action::ServerBase. (#1421)\n\nThis patch actually does 4 related things:\r\n\r\n1.  Renames the recursive mutex in the ServerBaseImpl class\r\nto action_server_reentrant_mutex_, which makes it a lot\r\nclearer what it is meant to lock.\r\n2.  Adds some additional error checking where checks were missed.\r\n3.  Adds a lock to publish_status so that the action_server\r\nstructure is protected.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176d018912b45d36a7331",
    "number": 1420,
    "body": "",
    "head_branch": "ahcorde/backport/test/rclcpp_lifecycle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix race in test_lifecycle_service_client (#1204)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176d118912b45d36a7332",
    "number": 1419,
    "body": "",
    "head_branch": "ahcorde/backport/test/rclcpp_action",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase coverage rclcpp_action to 95% (#1290)\n\n* Increase coverage rclcpp_action to 95%\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\n\n* PR fixup\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\n\n* Address PR Feedback\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\n\n* Rebase onto #1311\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\n\n* rcutils test depend\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\n\n* Cleaning up\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176d218912b45d36a7333",
    "number": 1416,
    "body": "This PR introduces the changes required to implement the `EventsExecutor` design in rclcpp.\r\nSee [design](https://github.com/ros2/design/pull/305) and [Discourse post](https://discourse.ros.org/t/ros2-middleware-change-proposal/15863).\r\n\r\nThe new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.\r\n\r\nThis new executor greatly reduces CPU usage of a ROS 2 application.\r\nThese are the CPU and latency measurements on a RaspberryPi 2 for a 20 nodes system.\r\nSee the blog post for more details on the tests that we run.\r\n\r\n![Screenshot from 2020-10-21 15-39-07](https://user-images.githubusercontent.com/49500531/96735651-b0ba3880-13b3-11eb-89b9-dab8688fc982.png)\r\n\r\n\r\nThe bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..\r\nWe currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.\r\n\r\nThe current implementation does not support ROS 2 actions, which will be added in a follow up PR.\r\n\r\nDeveloped by iRobot\r\nMauro Passerino\r\nLenny Story\r\nAlberto Soragna\r\n\r\n----\r\n\r\nConnects to:\r\n\r\n- design:\r\n  - https://github.com/ros2/design/pull/305",
    "head_branch": "irobot/add-events-executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176d318912b45d36a7334",
    "number": 1415,
    "body": "Fixes #1412\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-avoid-parsing-arg-twice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid parsing arguments twice (#1415)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176d518912b45d36a7335",
    "number": 1414,
    "body": "Add missing backport of commit 6ef2384: Fix typo in action client logger name (#937) to branch `dashing`.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in action client logger name (#1414)\n\nBackport of commit 6ef2384 from #937.\r\n\r\nSigned-off-by: Seulbae Kim <squizz617@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176d618912b45d36a7336",
    "number": 1413,
    "body": "This PR buils in top of this other PR https://github.com/ros2/rclcpp/pull/1411\r\n\r\nThis one includes benchmark tests for executors\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/rclcpp-benchmark-executors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added executor benchmark tests (#1413)\n\n* Added executor benchmark tests\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* make linters happy\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* initialize callback_count\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feddback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added add_node and remove_node benchmark tests\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Add/remove node in static_single_thread_executor\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Make linters happy\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added StaticSingleThreadedExecutor add/remove node tests\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* make linters happy\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176d718912b45d36a7337",
    "number": 1411,
    "body": "This PR adds some basic benchmarks and reorganizes the test CMakeLists.txt a bit. I added a new CMakeLists.txt for the benchmark directory and separated out one for the test/rclcpp directory.\r\n\r\nEdit: Reorganization and refactoring was moved to #1422. This just now adds new benchmarks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-benchmark-init-create-node",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Initial benchmark tests for rclcpp::init/shutdown create/destroy node (#1411)\n\n* Initial benchmark tests for rclcpp::init/shutdown create/destroy node\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Pr feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fixes to cmakelists\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove quotes\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Move find_package calls\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Skip create/destroy node for rmw_connext_cpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* SKIP TEST in cmakelists\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add warmup loops\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* remove for loop\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* reset_heap_counters\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Change to make_shared\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176d818912b45d36a7338",
    "number": 1410,
    "body": "Follow-up of https://github.com/ros2/rcl/pull/835#issue-505063024.\r\nPrerequisite of https://github.com/ros2/rclcpp/pull/1408.",
    "head_branch": "ivanpauno/add-node-resolve-name-method",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add methods in topic and service interface to resolve a name (#1410)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176d918912b45d36a7339",
    "number": 1409,
    "body": "close https://github.com/ros2/rclcpp/issues/1399\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20201018-rclcpp-issue-1399",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176da18912b45d36a733a",
    "number": 1408,
    "body": "Prototype of https://github.com/ros2/design/pull/300.\r\n\r\nDepends on https://github.com/ros2/rclcpp/pull/1410.\r\nDiff omitting #1410: https://github.com/ros2/rclcpp/pull/1408/files/ec90cb53091e355dcf194c944fcaf239c5fa6699..9197a8f2bfe9da6e54f3e30779b3b1c0236339f2.\r\n\r\n---\r\nNot quite ready yet.\r\nThings to solve before merging:\r\n\r\n1. Get the final topic name before creating a publisher/subscription\r\n   - [x] [rcl support](https://github.com/ros2/rcl/pull/835#issue-505063024) for expand and remap.\r\n   - [x] Wrap the rcl function in an `rclcpp` method for `Node` ([PR](https://github.com/ros2/rclcpp/pull/1410)).\r\n1. `create_subscription` and `create_publisher` can be called without a parameters interface\r\n\r\n   I'm not quite sure what to do about this.\r\n   If the user wants to only provide a topics interface (without using qos overrides), that should be ok.\r\n   Maybe fail when qos overrides are enabled and a parameters interface isn't provided?\r\n\r\n     - [x] Add create_publisher/create_subscription overload taking both a topics interface and a parameters interface (https://github.com/ros2/rclcpp/pull/1408/commits/4d6ad65be53a2beb1f4a7a48d27a07cb5ca97f11).\r\n     - [x] Handle error when qos overrides are enabled and a parameters interface isn't provided: A warning is being logged in this case.\r\n     - [ ] See places that need special handling in `rclcpp` code in `create_publisher.hpp`/`create_subscription.hpp` comments.\r\n       Added notes, this can be resolved in a follow-up.\r\n1. Improve QosOverridingOptions API\r\n\r\n   Not a blocker for merging this, but we should have minimal API that won't be deprecated.\r\n   Maybe QosOverridingOptions could use the builder pattern or the parameter idiom to make things easier.\r\n   I definitely also want either builder pattern/parameters idiom in `PublisherOptions`/`SubscriptionOptions`, but that can be done in a follow up.\r\n1. Test coverage\r\n\r\n   - [x] Improve test coverage (note: this can still be improved)\r\n1. Move things that can be shared between rclcpp/rclpy to rcl/rmw\r\n\r\n   - [x] Conversions between policy values and strings ([PR](https://github.com/ros2/rmw/pull/284)).\r\n   - [x] Extend [rmw_qos_policy_kind_t](https://github.com/ros2/rmw/blob/e02978028f1756cc4c057d06f462ceac8acafcab/rmw/include/rmw/events_statuses/incompatible_qos.h#L28) to cover all possible policies (and move that to a more appropriate header). Define `rclcpp::QosPolicyKind` values based on that. Conversions to/from strings can be implemented there ([PR](https://github.com/ros2/rmw/pull/285)).\r\n   - [x] Use the new rmw functions in this PR (https://github.com/ros2/rclcpp/pull/1408/commits/77eec6d5d703182a624f7b0656e4de16c924b8c4).\r\n1. Support in other client libraries\r\n\r\n   - [X] Support in `rclpy` ([PR](https://github.com/ros2/rclpy/pull/635))\r\n",
    "head_branch": "ivanpauno/qos-configurability",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Qos configurability (#1408)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176db18912b45d36a733b",
    "number": 1407,
    "body": "This backports #1303 to the main foxy unit test backport PR #1383, where it's being staged to make sure test failures are minimized before final merging onto foxy.",
    "head_branch": "brawner/rclcpp-backport-1303",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clear members for StaticExecutorEntitiesCollector to avoid shared_ptr dependency (#1303)\n\n* Clear members for StaticExecutorEntitiesCollector to avoid shared_ptr dependency\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176dc18912b45d36a733c",
    "number": 1406,
    "body": "This PR enables `-Wformat=2`, `-Wconversion`, `-Wshadow`, `-Wsign-conversion`, `-Wold-style-cast`, and `-Wcast-qual` in `rclcpp_components`. This PR relies on using gtest v1.10.0, see https://github.com/ament/googletest/pull/8.",
    "head_branch": "audrow/rclcpp_components",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176dd18912b45d36a733d",
    "number": 1405,
    "body": "This PR enables `-Wformat=2`, `-Wconversion`, `-Wshadow`, `-Wsign-conversion`, and `-Wcast-qual` in `rclcpp_action`. This PR relies on using gtest v1.10.0, see https://github.com/ament/googletest/pull/8.",
    "head_branch": "audrow/add-warnings-rclcpp_action",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] Add warnings (#1405)\n\n* Add warnings\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Simplify for loop in test_client.cpp\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Fix conversion warning in test_client static cast to size_t\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Fix new warnings after rebasing on master\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Fix shadowing in the benchmark action server\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Static cast goal order to size_t\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>\r\n\r\n* Remove unnecessary include\r\n\r\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176de18912b45d36a733e",
    "number": 1404,
    "body": "Ownership of the shutdown guard conditions used by the graph_listener and the executor base class was in rclcpp::Context, which would lead to memory errors if the context was cleaned up first. \r\n\r\nThis moves ownership of the guard_condition to the executor and graph_listener classes, and removes the guard_condition API from Context.\r\n\r\nI'm marking this as a draft PR so I can get some initial review on it since I'm not terribly familiar with rclcpp's API.\r\n\r\nAddresses #1391 and #1340\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-change-ownership-shutdown-gc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Move ownership of shutdown_guard_condition to executors/graph_listener (#1404)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176df18912b45d36a733f",
    "number": 1401,
    "body": "The unit test `error_run_graph_listener_destroy_context` (copied below) was added in #1330 which tests destroying a context before calling `run()` on the graph_listener (and ultimately shutdown). This was leading to a memory read error in the `shutdown_guard_condition_` when trying to finalize it. A special case was added in #906, which would try to finalize this guard_condition in the event that the context was already destroyed. \r\n\r\nThis addresses https://github.com/ros2/rclcpp/issues/1391\r\n\r\nHowever, I'm not sure if this PR is the correct solution. In #906, this situation was specifically called out in (https://github.com/ros2/rclcpp/pull/906#issuecomment-556238265) and its reply.\r\n\r\n@wjwwood \r\n> @ivanpauno well... there may still be a resource ownership issue here. The context owns the guard condition and the wait set in the graph listener uses the guard condition. So by removing strong ownership of the context from the graph listener, the graph listener no longer has ownership of the guard condition it is using. This could lead to the context cleaning up the guard condition during its destruction and then later the graph listener trying to continue to use the guard condition in correctly...\r\n\r\n@ivanpauno \r\n> The shutdown_guard_condition_ should still be valid, as the context only clears it if you call release_interrupt_guard_condition.\r\nIt's true that in case you can't call release_interrupt_guard_condition, rcl_guard_condition_fini should be manually called.\r\n\r\nIn fact, there is a memory leak in the `error_run_graph_listener_destroy_context` test with this PR (but no memory errors).\r\n```c++\r\nTEST_F(TestGraphListener, error_run_graph_listener_destroy_context) {\r\n  auto context_to_destroy = std::make_shared<rclcpp::contexts::DefaultContext>();\r\n  context_to_destroy->init(0, nullptr);\r\n  auto graph_listener_error =\r\n    std::make_shared<TestGraphListenerProtectedMethods>(context_to_destroy);\r\n  context_to_destroy.reset();\r\n  EXPECT_NO_THROW(graph_listener_error->run_protected());\r\n}\r\n```\r\n\r\n```\r\n==2997306== \r\n==2997306== HEAP SUMMARY:\r\n==2997306==     in use at exit: 48,592 bytes in 102 blocks\r\n==2997306==   total heap usage: 9,040 allocs, 8,938 frees, 4,426,257 bytes allocated\r\n==2997306== \r\n==2997306== 144 (56 direct, 88 indirect) bytes in 1 blocks are definitely lost in loss record 23 of 35\r\n==2997306==    at 0x483D7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==2997306==    by 0x566120C: __default_allocate (allocator.c:37)\r\n==2997306==    by 0x5B2BF4E: __rcl_guard_condition_init_from_rmw_impl (guard_condition.c:73)\r\n==2997306==    by 0x5B2C15E: rcl_guard_condition_init (guard_condition.c:108)\r\n==2997306==    by 0x4FCD7BC: rclcpp::Context::get_interrupt_guard_condition(rcl_wait_set_t*) (context.cpp:404)\r\n==2997306==    by 0x5025903: rclcpp::graph_listener::GraphListener::GraphListener(std::shared_ptr<rclcpp::Context>) (graph_listener.cpp:57)\r\n==2997306==    by 0x5080E3D: std::shared_ptr<rclcpp::graph_listener::GraphListener> rclcpp::Context::get_sub_context<rclcpp::graph_listener::GraphListener, std::shared_ptr<rclcpp::Context> >(std::shared_ptr<rclcpp::Context>&&) (context.hpp:325)\r\n==2997306==    by 0x5078DAB: rclcpp::node_interfaces::NodeGraph::NodeGraph(rclcpp::node_interfaces::NodeBaseInterface*) (node_graph.cpp:41)\r\n==2997306==    by 0x505A7A4: rclcpp::Node::Node(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::NodeOptions const&) (node.cpp:108)\r\n==2997306==    by 0x167C19: void __gnu_cxx::new_allocator<rclcpp::Node>::construct<rclcpp::Node, char const (&) [5], char const (&) [3]>(rclcpp::Node*, char const (&) [5], char const (&) [3]) (new_allocator.h:147)\r\n==2997306==    by 0x167188: void std::allocator_traits<std::allocator<rclcpp::Node> >::construct<rclcpp::Node, char const (&) [5], char const (&) [3]>(std::allocator<rclcpp::Node>&, rclcpp::Node*, char const (&) [5], char const (&) [3]) (alloc_traits.h:484)\r\n==2997306==    by 0x1661BA: std::_Sp_counted_ptr_inplace<rclcpp::Node, std::allocator<rclcpp::Node>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<char const (&) [5], char const (&) [3]>(std::allocator<rclcpp::Node>, char const (&) [5], char const (&) [3]) (shared_ptr_base.h:548)\r\n==2997306== \r\n==2997306== 144 (56 direct, 88 indirect) bytes in 1 blocks are definitely lost in loss record 24 of 35\r\n==2997306==    at 0x483D7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==2997306==    by 0x566120C: __default_allocate (allocator.c:37)\r\n==2997306==    by 0x5B2BF4E: __rcl_guard_condition_init_from_rmw_impl (guard_condition.c:73)\r\n==2997306==    by 0x5B2C15E: rcl_guard_condition_init (guard_condition.c:108)\r\n==2997306==    by 0x4FCD7BC: rclcpp::Context::get_interrupt_guard_condition(rcl_wait_set_t*) (context.cpp:404)\r\n==2997306==    by 0x5025903: rclcpp::graph_listener::GraphListener::GraphListener(std::shared_ptr<rclcpp::Context>) (graph_listener.cpp:57)\r\n==2997306==    by 0x1609BB: TestGraphListenerProtectedMethods::TestGraphListenerProtectedMethods(std::shared_ptr<rclcpp::Context>) (test_graph_listener.cpp:120)\r\n==2997306==    by 0x1684E8: void __gnu_cxx::new_allocator<TestGraphListenerProtectedMethods>::construct<TestGraphListenerProtectedMethods, std::shared_ptr<rclcpp::contexts::DefaultContext>&>(TestGraphListenerProtectedMethods*, std::shared_ptr<rclcpp::contexts::DefaultContext>&) (new_allocator.h:147)\r\n==2997306==    by 0x16794B: void std::allocator_traits<std::allocator<TestGraphListenerProtectedMethods> >::construct<TestGraphListenerProtectedMethods, std::shared_ptr<rclcpp::contexts::DefaultContext>&>(std::allocator<TestGraphListenerProtectedMethods>&, TestGraphListenerProtectedMethods*, std::shared_ptr<rclcpp::contexts::DefaultContext>&) (alloc_traits.h:484)\r\n==2997306==    by 0x166E44: std::_Sp_counted_ptr_inplace<TestGraphListenerProtectedMethods, std::allocator<TestGraphListenerProtectedMethods>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::shared_ptr<rclcpp::contexts::DefaultContext>&>(std::allocator<TestGraphListenerProtectedMethods>, std::shared_ptr<rclcpp::contexts::DefaultContext>&) (shared_ptr_base.h:548)\r\n==2997306==    by 0x165BD2: std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<TestGraphListenerProtectedMethods, std::allocator<TestGraphListenerProtectedMethods>, std::shared_ptr<rclcpp::contexts::DefaultContext>&>(TestGraphListenerProtectedMethods*&, std::_Sp_alloc_shared_tag<std::allocator<TestGraphListenerProtectedMethods> >, std::shared_ptr<rclcpp::contexts::DefaultContext>&) (shared_ptr_base.h:679)\r\n==2997306==    by 0x164E8B: std::__shared_ptr<TestGraphListenerProtectedMethods, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<TestGraphListenerProtectedMethods>, std::shared_ptr<rclcpp::contexts::DefaultContext>&>(std::_Sp_alloc_shared_tag<std::allocator<TestGraphListenerProtectedMethods> >, std::shared_ptr<rclcpp::contexts::DefaultContext>&) (shared_ptr_base.h:1344)\r\n==2997306== \r\n==2997306== LEAK SUMMARY:\r\n==2997306==    definitely lost: 112 bytes in 2 blocks\r\n==2997306==    indirectly lost: 176 bytes in 4 blocks\r\n==2997306==      possibly lost: 0 bytes in 0 blocks\r\n==2997306==    still reachable: 48,304 bytes in 96 blocks\r\n==2997306==         suppressed: 0 bytes in 0 blocks\r\n==2997306== Reachable blocks (those to which a pointer was found) are not shown.\r\n==2997306== To see them, rerun with: --leak-check=full --show-leak-kinds=all\r\n==2997306== \r\n==2997306== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)\r\n\r\n\r\n```\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-fix-graph-listener",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove finalization of guard_condition from GraphListener::__shutdown() (#1401)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e118912b45d36a7340",
    "number": 1400,
    "body": "There are several tests in rclcpp that timeout with rmw_connext_cpp. This PR increases the timeouts and adds hopefully helpful comments to the offending tests.\r\n\r\n\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-increase-test-timeouts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase test timeouts of slow running tests with rmw_connext_cpp (#1400)\n\n* Increase test timeouts of slow running tests with rmw_connext_cpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix other issues with connext\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e218912b45d36a7341",
    "number": 1398,
    "body": "This is the last (hopefully) of PRs to backport commits for increased coverage into foxy. This will be rebase and merged onto #1383 before ultimate being rebase and merged onto foxy.\r\n\r\nBug fix PRs: #1317\r\nCoverage PRs: #1364, #1365, #1352, #1366, #1369, #1368, #1296",
    "head_branch": "brawner/rclcpp-backport-tests-part10",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure to clean the external client/service handle. (#1296)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e318912b45d36a7342",
    "number": 1397,
    "body": "More tests and minor code fixes for backporting into foxy. This will be rebased and merged into #1383 before ultimate rebase and merging onto foxy.\r\n\r\nCoverage PRs: #1358, #1359, #1360, #1361, #1363, #1347, #1355",
    "head_branch": "brawner/rclcpp-backport-tests-part9",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add test for ParameterService (#1355)\n\n* Add test for ParameterService\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e418912b45d36a7343",
    "number": 1396,
    "body": "This backports more PRs for coverage in foxy. This PR will be rebase and merged onto #1383 before final rebase and merging onto foxy.\r\n\r\nA couple of the commits were slightly modified to remove tests for API that does not exist in foxy ( primarily https://github.com/ros2/rclcpp/commit/a513dc6b4e0cf4e6015e9621d5b92edc27b1c22e, https://github.com/ros2/rclcpp/commit/c7cde75a5ddf84ebc89834eb87e66fba0d0222c5)\r\n\r\nCoverage PRs: #1330, #1346, #1343, #1350, #1349, #1344, #1342, #1353 ",
    "head_branch": "brawner/rclcpp-backport-tests-part8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in more tests for init_options coverage. (#1353)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e518912b45d36a7344",
    "number": 1395,
    "body": "This backports #1336 for foxy. This will be squash merged into #1384, which will in turn be rebase and merged onto foxy.\r\n\r\nEdit: I meant #1336 not #1331 (which likely won't be backported)",
    "head_branch": "brawner/rclcpp-backport-tests-part7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[foxy backport] Add executor unit tests #1336 (#1395)\n\n* Improve the error messages in the Executor class.\r\n\r\nIn particular, make sure to use 'throw_from_rcl_error'\r\nas much as possible.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Allow mimick patching of methods with up to 9 arguments.\r\n\r\nThis will be needed by the executor tests.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Add in unit tests for the Executor class.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Adjust test_executor for foxy\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176e618912b45d36a7345",
    "number": 1394,
    "body": "This backports #1332 and #1329 for foxy. This will be rebase and merged into #1383 for final staging before rebase and merging onto foxy.",
    "head_branch": "brawner/rclcpp-backport-tests-part6",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage for client API (#1329)\n\n* Add coverage for client API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e718912b45d36a7346",
    "number": 1393,
    "body": "This backports the unit test introduced it #1327 without removing the deprecation warning.\r\n\r\nThis will be squash merged into #1383, which will be ultimate be rebase merged back into foxy ",
    "head_branch": "brawner/rclcpp-backport-tests-part5",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[foxy backport] Add ostream test for FutureReturnCode (#1327) (#1393)\n\n* Remove deprecated executor::FutureReturnCode APIs. (#1327)\r\n\r\nWhile we are here, add in another test for the stream operator for future_return_code.cpp\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Revert removing deprecated API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e818912b45d36a7347",
    "number": 1390,
    "body": "This continues the PRs for coverage. They are unchanged except for the commit for #1322, where I had to make a small change in `test_node_graph.cpp` for API compatibility (`count_graph_users()` is not const in foxy)\r\n\r\nCoverage PRs: #1322, #1321, #1326, #1325",
    "head_branch": "brawner/rclcpp-backport-tests-part4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase coverage of publisher/subscription API (#1325)\n\n* Increase coverage of publisher/subscription API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176e918912b45d36a7348",
    "number": 1389,
    "body": "This PR backports various commits containing unit tests for increased coverage. It only contains changes for files in the test directory.\r\n\r\nBug fixes: #1270, #1274, #1281, #1291, #1310, \r\nCoverage PRs: #1308, #1316",
    "head_branch": "brawner/rclcpp-backport-tests-part3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage for wait_set_policies (#1316)\n\n* Add mocking utils for rclcpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add coverage for wait_set_policies\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix windows issues\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add test comment\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176eb18912b45d36a7349",
    "number": 1388,
    "body": "This PR backports the init_options test from #1165 and #1272. It does not include the API changes and excludes the get/set_domain_id unit test.\r\n\r\n",
    "head_branch": "brawner/rclcpp-backport-1272",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "initialize_logging_ should be copied. (#1272)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176ec18912b45d36a734a",
    "number": 1387,
    "body": "This backports another chunk of PRs for unit test coverage. It also includes several test failure bug fixes.\r\n\r\nCoverage PRs: #1221, #1189\r\nNew testing features: #1232\r\nBug fix PRs: #1245, #1246, #1251, #1253, #1252",
    "head_branch": "brawner/rclcpp-backport-tests-part2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Simplify and fix allocator memory strategy unit test for connext (#1252)\n\n* Fix allocator memory strategy for connext\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176ed18912b45d36a734b",
    "number": 1386,
    "body": "This backports `test_executors.cpp` and modifies the parametrized test to remove the tests for non-foxy API.",
    "head_branch": "brawner/rclcpp-backport-1222",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[foxy backport] Parameterize test executors for all executor types (#1222) (#1386)\n\n* Parameterize test executors for all executor types (#1222)\r\n\r\n* Relocate test_executor to executors directory\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Parametrize test_executors for all executor types\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* More fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Adding issue for tracking\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove tests for non-foxy API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176ee18912b45d36a734c",
    "number": 1385,
    "body": "This PR replaces #1229 in favor of a solution that doesn't affect ABI compatibility, but accomplishes a similar result.\r\n\r\nEdit: This backports #1220 to foxy",
    "head_branch": "brawner/rclcpp-backport-1220",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[foxy backport] Derive and throw exception in spin_some spin_all for StaticSingleThreadedExecutor (#1385)\n\n* Derive and throw exception in spin_some spin_all for StaticSingleThreadedExecutor (#1220)\r\n\r\n* Derive and throw exception in spin_some spin_all\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix style and add unit test\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove header changes and throw exceptions in .cpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176ef18912b45d36a734d",
    "number": 1384,
    "body": "",
    "head_branch": "ivanpauno/update-maintainers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update maintainers (#1384)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176f018912b45d36a734e",
    "number": 1383,
    "body": "This is the start of PRs to backport unit tests and some associated bug fixes. This PR will be \"rebased and merged\", so commit history and hashes can be linked.\r\n\r\nEdit: This PR will act as the feature branch, and I'll merge other backports for tests into this one. Either rebase and merging if the commits can be taken as is, or squashed if changes are needed to each backport commit. If squashed, I will only be squashing the required changes into the original commit (not squashing multiple backport commits together)\r\n\r\nBackported PRs\r\nBug fix PRs: #1179, #1178, #1211, #1245, #1246, #1251, #1253, #1252, #1270, #1274, #1281, #1291, #1310,\r\nNew testing features: #1232\r\nUnit test PRs: #1184, #1181, #1202, #1197, #1198, #1221, #1189, #1222, #1165, #1272, #1308, #1316, #1322, #1321, #1326, #1325",
    "head_branch": "brawner/rclcpp-backport-tests-part1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clear members for StaticExecutorEntitiesCollector to avoid shared_ptr dependency (#1303)\n\n* Clear members for StaticExecutorEntitiesCollector to avoid shared_ptr dependency\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176f118912b45d36a734f",
    "number": 1382,
    "body": "**Experimental for Linux**, this can fix  https://github.com/ros2/ros2/issues/1035",
    "head_branch": "experimental-20201006-change-thread-priority",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176f218912b45d36a7350",
    "number": 1380,
    "body": "Backports #1314 for rclcpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-backport-1314",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Call vector.erase with end iterator overload (#1314) (#1380)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176f318912b45d36a7351",
    "number": 1379,
    "body": "Backports #1315 for rclcpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-backport-1315",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check waitable for nullptr during constructor (#1315) (#1379)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176f418912b45d36a7352",
    "number": 1378,
    "body": "Backports #1297 for foxy",
    "head_branch": "brawner/rclcpp_lifecycle-backport-1297",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[backport foxy] Log error instead of throwing exception in Transition and State reset() mark no except (#1297) (#1378)\n\n* Log error instead of throwing exception in Transition and State reset(), mark no except (#1297)\r\n\r\n* Catch potential exception in destructor and log\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove thrown error from reset and mark it no except\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove noexcept for ABI compatibility\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176f518912b45d36a7353",
    "number": 1377,
    "body": "* Remove rmw-dependent unit-test checks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_lifecycle-backport-1293",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove rmw-dependent unit-test checks (#1293) (#1377)\n\n* Remove rmw-dependent unit-test checks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176f618912b45d36a7354",
    "number": 1376,
    "body": "",
    "head_branch": "ivanpauno/node-options-copy-constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix NodeOptions copy constructor (#1376)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176f818912b45d36a7355",
    "number": 1375,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1318.\r\n\r\nI will open a similar PR in `rclpy`.\r\n\r\n(edit) Edited title, as this is allowing to configure the clock qos and not the rosout qos.",
    "head_branch": "ivanpauno/rosout-qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add clock qos to node options (#1375)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176f918912b45d36a7356",
    "number": 1373,
    "body": "Not sure if this is the best place to start a discussion, but this PR might result in some discussion anyway.\r\n\r\n- So far `rclcpp::WallRate` has been based on [`std::chrono::steady_clock`](https://en.cppreference.com/w/cpp/chrono/steady_clock).\r\n- In ROS1, [`ros::WallRate`](https://github.com/ros/roscpp_core/blob/noetic-devel/rostime/src/rate.cpp#L101) is based on [`ros::WallTime`](https://github.com/ros/roscpp_core/blob/noetic-devel/rostime/src/time.cpp#L438), which ends up using [`clock_gettime(CLOCK_REALTIME, [..])`](https://man7.org/linux/man-pages/man3/clock_gettime.3.html) to get time, which returns the wall time (including time jumps and slew).\r\n\r\nTo me the name `WallRate` is misleading, since it's not actually using the wall time, but a clock that is typically not related to wall time at all. On top of that, it has different semantics than what it used to be in ROS1.\r\n\r\nMy suggestion is to change the names of the specific Rate like this:\r\n- `WallRate` should use `system_clock` instead of `steady_clock`, to be consistent with the ROS1 behavior.\r\n- `SteadyRate` is introduced for `steady_clock`.\r\n- I've made Rate an alias for `WallRate`, to not change it's behavior, i.e. make it use `system_clock`.\r\n  Personally I see only very limited use for a `Rate` based on `system_clock`, so I would fine having `Rate` be an alias for `SteadyRate` instead.\r\n  On another note: maybe it should become based on ROS time in case `use_sime_time` is enabled?",
    "head_branch": "using_rate_names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176fa18912b45d36a7357",
    "number": 1372,
    "body": "Backport #1176 to Foxy.",
    "head_branch": "jacob/backport_foxy_1176",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix implementation of NodeOptions::use_global_arguments() (#1176) (#1372)\n\n`this->node_options_` might still be `nullptr` for a default initialized NodeOptions instance.\r\n`use_global_arguments()` must return `this->use_global_arguments_`, in analogy to `NodeOptions::enable_rosout()`.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\nCo-authored-by: Johannes Meyer <johannes@intermodalics.eu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176fb18912b45d36a7358",
    "number": 1371,
    "body": "Backport #1188 to Foxy.",
    "head_branch": "jacob/backport_foxy_1188",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix conversion of negative durations to messages (#1188) (#1371)\n\n* Fix conversion from negative Duration or Time to the respective message type and throw in Duration::to_rmw_time() if the duration is negative.\r\nrmw_time_t cannot represent negative durations.\r\n\r\nConstructors and assignment operators can be just defaulted.\r\n\r\nOther changes are mainly cosmetical, to make conversions between signed\r\nand unsigned types and between 32-bit and 64-bit types more explicit.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add -Wconversion compiler option and fix implicit conversions that might alter the value\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Fix usage of fixture class in some unit tests by using gtest macro TEST_F() instead of TEST().\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add compiler option -Wno-sign-conversion to fix build with Clang on macOS\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\nCo-authored-by: Johannes Meyer <johannes@intermodalics.eu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662176fc18912b45d36a7359",
    "number": 1370,
    "body": "Update `INSTANTIATE_TEST_CASE_P` to `INSTANTIATE_TEST_SUITE_P` and `TYPED_TEST_CASE` to `TYPED_TEST_SUITE`.\n",
    "head_branch": "audrow/update-gtest",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update deprecated gtest macros (#1370)\n\nSigned-off-by: Audrow Nash <audrow.nash@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176fd18912b45d36a735a",
    "number": 1369,
    "body": "This PR adds coverage for the error cases in `guard_condition.cpp`\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-guard-condition-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase coverage of guard_condition.cpp to 100% (#1369)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176fe18912b45d36a735b",
    "number": 1368,
    "body": "This adds another test to `test_wait_set.cpp` to test the situation when subscriptions have event handlers. I noticed some event_callbacks were rmw implementation dependent, so I hope I only included the ones that are available for each implementation. \r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-wait-set-template",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase coverage of WaitSetTemplate (#1368)\n\n* Increase coverage of WaitSetTemplate\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662176ff18912b45d36a735c",
    "number": 1367,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/qod-95-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage statement (#1367)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770018912b45d36a735d",
    "number": 1366,
    "body": "This PR adds coverage for LoanedMessage. Importantly it sets up with mocking a publisher that \"supports\" loaned messages, so some of the more important parts of this class are actually tested.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-loaned_message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Tests for LoanedMessage with mocked loaned message publisher (#1366)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770118912b45d36a735e",
    "number": 1365,
    "body": "publisher.hpp and publisher_base.cpp were missing a couple of methods from coverage. These unit tests are very rudimentary as I couldn't find a simple way to test these methods.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-publisher-api-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Finish coverage of publisher API (#1365)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770218912b45d36a735f",
    "number": 1364,
    "body": "In particular, add API coverage for spin_node_until_future_complete,\r\nspin_until_future_complete, and spin_node_once.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/test-executor-api-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Finish API coverage on executors. (#1364)\n\nIn particular, add API coverage for spin_node_until_future_complete,\r\nspin_until_future_complete, and spin_node_once.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770418912b45d36a7360",
    "number": 1363,
    "body": "Add a few missing API tests and coverage tests for missing error throws.\r\n\r\nCommit ace8406 reformats the error reporting style to match most recent API usage, let me know if I'm missing something there.",
    "head_branch": "blast545/timer_cov_tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add timer coverage tests (#1363)\n\n* Add missing tests API\r\n* Reformat style error throw\r\n* Add internal errors tests\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621770518912b45d36a7361",
    "number": 1361,
    "body": "This small PR adds some additional tests to the parameter client, and brings us up to 96% line coverage on that file.  It also fixes two very small issues in parameter_server.cpp",
    "head_branch": "clalancette/parameter-client-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in additional tests for parameter_client.cpp coverage.\n\nThis gets us to 96% line coverage.\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770618912b45d36a7362",
    "number": 1360,
    "body": "covered one more line\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/test/zero_depth_exception",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improved test publisher - zero qos history depth value exception (#1360)\n\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770718912b45d36a7363",
    "number": 1359,
    "body": "Covered resolve_use_intra_process. Invalid use_intra_process_comm\r\n\r\n![Selecci√≥n_056](https://user-images.githubusercontent.com/1933907/94674307-4401d000-0318-11eb-9499-cd289593e652.png)\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/test/resolve_use_intra_process",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Covered resolve_use_intra_process (#1359)\n\n* Covered resolve_use_intra_process\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* used RCLCPP_EXPECT_THROW_EQ in test_subscription_throws_intraprocess\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770818912b45d36a7364",
    "number": 1358,
    "body": "I runned lcov locally, some lines are missing here:\r\n\r\n![Selecci√≥n_055](https://user-images.githubusercontent.com/1933907/94672064-0780a500-0315-11eb-8f41-77759bba3c1b.png)\r\n\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/test/subscription_options",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improved test_subscription_options (#1358)\n\n* Improved test_subscription_options\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* used RCLCPP_EXPECT_THROW_EQ in test_subcription_options\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* make linters happy\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770918912b45d36a7365",
    "number": 1357,
    "body": "Fixes #1356\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-failed-to-fini-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "reset rcl_context shared_ptr after calling rcl_init sucessfully (#1357)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770a18912b45d36a7366",
    "number": 1355,
    "body": "This increases the coverage of ParameterService to 100% with simple tests to just check basic functionality of the parameter services. \r\n\r\nI'm not sure if describe_parameters is intentionally left out of the ParameterClient, but I opened a related issue here:\r\nhttps://github.com/ros2/rclcpp/issues/1354\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-parameter_service-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add test for ParameterService (#1355)\n\n* Add test for ParameterService\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770b18912b45d36a7367",
    "number": 1353,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nThis gets us to 100% code coverage.",
    "head_branch": "clalancette/test-init-options",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in more tests for init_options coverage. (#1353)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770c18912b45d36a7368",
    "number": 1352,
    "body": "This PR add coverage for the remaining lines and functions in qos.hpp, qos.cpp, qos_event.hpp, qos_event.cpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-qos-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add unit tests for qos and qos_event files (#1352)\n\n* Add unit tests for qos and qos_event files\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix windows CI\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621770d18912b45d36a7369",
    "number": 1350,
    "body": "This gets us to 100% line coverage.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/finish-expand-topic-or-service-name-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in two more tests for expand_topic_or_service_name. (#1350)\n\nThis gets us to 100% line coverage.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621770f18912b45d36a736a",
    "number": 1349,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nWe get to 100% code coverage with these tests in place.",
    "head_branch": "clalancette/test-utilities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in more tests for the utilities. (#1349)\n\n* Add in more tests for the utilities.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771018912b45d36a736b",
    "number": 1347,
    "body": "As the title says",
    "head_branch": "blast545/time_coverage_tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add time API coverage tests (#1347)\n\n* Change value used as max representation\r\n* Add coverage tests time\r\n* Add call to detach clock\r\n* Add tests time\r\n* Add duration construction tests\r\n* Add const qualifier to constants\r\n* Add check clock stays the same\r\n* Make operator RCLCPP_PUBLIC\r\n* Add tests exceptions duration\r\n* Fix division by 0 on windows\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621771118912b45d36a736c",
    "number": 1346,
    "body": "This gets this file up to 97% coverage.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/expand-topic-or-service-name-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in more coverage for expand_topic_or_service_name. (#1346)\n\nThis gets this file up to 97% coverage.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771218912b45d36a736d",
    "number": 1345,
    "body": "Make sure that spin_until_future_complete throws an exception\r\nif we are already spinning.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/one-more-executor-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Test exception in spin_until_future_complete. (#1345)\n\nMake sure that spin_until_future_complete throws an exception\r\nif we are already spinning.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771318912b45d36a736e",
    "number": 1344,
    "body": "This PR adds several more tests to complete the testing of Parameter's and ParameterValue's API. Tests were added for the `<<` operator for both types and a vector of parameters, as well as the `==` and `!=` operators for Parameters. \r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-parameter-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Complete coverage of Parameter and ParameterValue API (#1344)\n\n* Complete coverage of Parameter and ParameterValue API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Adding comments\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771418912b45d36a736f",
    "number": 1343,
    "body": "This adds simple tests for the API in node_options. It doesn't check that nodes created with modified node_options are created properly, but those may be better suited for larger integration tests. \r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-node-options-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add tests for node_options API (#1343)\n\n* Add tests for node_options API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove c-style casts\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771518912b45d36a7370",
    "number": 1342,
    "body": "This adds tests for the remaining public API in node.hpp/node.cpp.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-node-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Test the remaining node public API (#1342)\n\n* Test the remaining node public API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add comment\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771618912b45d36a7371",
    "number": 1338,
    "body": "Signed-off-by: Mauro <mpasserino@irobot.com>",
    "head_branch": "mauro/add-spin-some-static-executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add spin_some support to the StaticSingleThreadedExecutor (#1338)\n\n* spin_some/spin_all/spin_once support: static executor\r\n\r\nSigned-off-by: Mauro <mpasserino@irobot.com>\r\n\r\n* Use spin_once instead of spin_once_impl\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Fix memory leak\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* revert spinSome change\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\n* Override spin_once_impl only\r\n\r\nThis way the StaticSingleThreadedExecutor uses spin_once and\r\nspin_until_future_complete APIs from the base executor class,\r\nbut uses its own overrided version of spin_once_impl.\r\n\r\nSigned-off-by: Mauro Passerino <mpasserino@irobot.com>\r\n\r\nCo-authored-by: Mauro <mpasserino@irobot.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621771718912b45d36a7372",
    "number": 1337,
    "body": "Add spin_some support to the StaticSingleThreadedExecutor",
    "head_branch": "mauro/add-spin-some-static-executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771918912b45d36a7373",
    "number": 1336,
    "body": "This PR adds in unit tests for the Executor class.  With this change in place, I'm seeing 91% line coverage of the executor.cpp file.\r\n\r\nBesides a handful of single lines that aren't being covered, there is a big chunk of missing coverage in the `execute_subscription` method.  I think this is going to be a lot of work to cover, so I figured I would open what I have so far and we can iterate on that later.",
    "head_branch": "clalancette/test-executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add in unit tests for the Executor class.\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771a18912b45d36a7374",
    "number": 1334,
    "body": "Do three different things in here:\r\n\r\n1.  Use const references on the StaticExecutorEntityCollector APIs wherever possible.  This avoids the copy constructor.\r\n1.  Use `const auto` everywhere possible within the StaticExecutorEntityCollector class.\r\n1.  Make more of the StaticExecutorEntityCollector class private.\r\n\r\nThis was broken out of #1331 .  @brawner @Blast545 FYI.",
    "head_branch": "clalancette/static-executor-api-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make more of the static entity collector API private.\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621771b18912b45d36a7375",
    "number": 1333,
    "body": "So far, the component manager has no parameters anyway, so no need for\r\nservices to configure them or topics to publish events.\r\n\r\nAn attempt to limit the number of services / topics.\r\n(https://discourse.ros.org/t/ros2-default-behavior-wifi/13460/35)\r\n\r\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>",
    "head_branch": "limit_parameter_services",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ComponentManager: switch off parameter services and event publisher (#1333)\n\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771c18912b45d36a7376",
    "number": 1332,
    "body": "This PR adds coverage for rclcpp::Service API. It should fully cover service.hpp and service.cpp nearly 100%. It's just missing one protected function :(\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-server-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase service coverage (#1332)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771d18912b45d36a7377",
    "number": 1331,
    "body": "This PR adds in tests for the `StaticSingleThreadedExecutor` and a helper class, `StaticExecutorEntitiesCollector`.  With this PR in place, I see 97% line coverage on static_single_threaded_executor.cpp and 97% line coverage on static_executor_entities_collector.cpp.\r\n\r\nAlong the way, I found a few bugs and other problems that I've fixed:\r\n1.  There were some typos in comments.\r\n1.  There were a bunch of places where we could add `const` to variables to give the compiler a bit more of a hint.\r\n1.  There were a couple of places where we were calling the copy constructor when passing a map into a method.\r\n1.  There was a bug when calculating whether to add a guard condition after adding a new node.\r\n\r\nNote that this is still in draft because I want to run CI on it (particularly for Windows).  I'll pull it out of draft once CI comes back clean.",
    "head_branch": "clalancette/test-static-executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add more tests for the static single threaded executor.\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621771f18912b45d36a7378",
    "number": 1330,
    "body": "Checking with CI coverage, I think I have a coverage issue with my local environment at the moment:\r\n* Linux coverage [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux_coverage&build=207)](http://ci.ros2.org/job/ci_linux_coverage/207/)\r\n",
    "head_branch": "blast545/graph_listener_cov",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage tests graph_listener (#1330)\n\n* Add file to test graph_listener\r\n* Add tests start graph listener\r\n* Add tests errors run graph listener\r\n* Add tests add/remove node\r\n* Remove dynamic cast\r\n* Remove repeated line\r\n* Remove comment\r\n* Add reset to avoid warning\r\n* Add checks construction graph listener\r\n* Add tests shutdown\r\n* Change node_graph definition\r\n* Remove test failing MacOS\r\n* Remove test not working on Windows\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772018912b45d36a7379",
    "number": 1329,
    "body": "Adding some small coverage for client.hpp/client.cpp. It adds missing coverage for take_response and one async_send_request that was missing.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-client-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage for client API (#1329)\n\n* Add coverage for client API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772118912b45d36a737a",
    "number": 1328,
    "body": "~Fixes https://github.com/ros2/rclcpp/issues/1374 by adding a mutex in `Timer` class, that makes `is_ready` and `execute` methods mutually exclusive.~\r\n\r\nFixes https://github.com/ros2/rclcpp/issues/1487.\r\n\r\nIt deletes the old \"scheduled timers\" mechanism, that has a long history of being error prone.",
    "head_branch": "ivanpauno/fix-timer-multithreaded-executor-race",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772218912b45d36a737b",
    "number": 1327,
    "body": "While we are here, add in another test for the stream operator for future_return_code.cpp\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "clalancette/test-future-return-code",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove deprecated executor::FutureReturnCode APIs. (#1327)\n\nWhile we are here, add in another test for the stream operator for future_return_code.cpp\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772318912b45d36a737c",
    "number": 1326,
    "body": "This adds coverage for most of the missing API that I've been able to identify, which were for the most part simple methods. There is still a largish chunk related to executors that is to come.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-api-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage for missing API (except executors) (#1326)\n\n* Add coverage for missing API (except executors\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Do not check state\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772418912b45d36a737d",
    "number": 1325,
    "body": "This increases the test coverage of the publisher/subscription API. It also adds coverage for missing public API functions.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-publisher-subscription-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase coverage of publisher/subscription API (#1325)\n\n* Increase coverage of publisher/subscription API\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772618912b45d36a737e",
    "number": 1324,
    "body": "As explained in #1254, there's conceptually no way to implement RCL\r\nallocators in terms of C++ allocators. In order to fix this behavior, we\r\nhave to delete the generic version of get_rcl_allocator. Since some ROS\r\ncode depends on this, we need to allow users to write their own version\r\nof get_rcl_allocator for allocators that support the C-style interface (most\r\ndo).\r\n\r\nSo this CL changes get_rcl_allocator from a template function into a\r\nfamily of (potentially templated) functions, which allows users to add their\r\nown overloads and rely on the \"most specialized\" mechanism for function\r\nspecialization to select the right one. See http://www.gotw.ca/publications/mill17.htm\r\nfor details. This also allows us to return get_rcl_default_allocator for *all*\r\nspecializations of std::allocator (previously, only for std::allocator<void>),\r\nwhich will already fix #1254 for pretty much all clients. I'll continue to work\r\non deleting the generic version, though, to make sure that nobody is accidentally\r\nbitten by it.\r\n\r\nI've tried to test this by doing a full ROS compilation following the\r\nDockerfile of the source Docker image, and all packages compile.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772718912b45d36a737f",
    "number": 1322,
    "body": "This PR boosts the coverage of the node_interface classes to about 96%. It follows up #1202.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-node-interfaces-mocking",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase coverage of node_interfaces, including with mocking rcl errors (#1322)\n\n* Increase coverage of node_interfaces, including with mocking rcl errors\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772818912b45d36a7380",
    "number": 1321,
    "body": "",
    "head_branch": "blast545/context_coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage tests context functions (#1321)\n\n* Add basic tests context access\r\n* Add expected interrupt_guard get/release\r\n* Add mocking utilities to rclcpp\r\n* Add tests interrupt_guard_condition\r\n* Add tests ini/fini error context\r\n* Add destructor test error\r\n* Create context directly in block* Use scope exit to clean context\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772918912b45d36a7381",
    "number": 1320,
    "body": "The method `count_graph_users()` only calls `std::atomic_size_t::load()` which is const, so this method can be made const as well.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-count_graph_users-const",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make node_graph::count_graph_users() const (#1320)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621772a18912b45d36a7382",
    "number": 1319,
    "body": "Backport #1203 to Foxy.",
    "head_branch": "jacob/foxy_backport_1203",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix pub/sub count API tests. (#1203) (#1319)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nCo-authored-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621772b18912b45d36a7383",
    "number": 1317,
    "body": "`SubscriptionBase::exchange_in_use_by_wait_set_state` does not allow nullptr's, but `SubscriptionWaitSetMask` defaults to true so an exception will be thrown in WaitSet::remove_subscription in a simple use case:\r\n\r\n```\r\nrclcpp::WaitSet wait_set;\r\n\r\nauto subscription = node->create_subscription<test_msgs::msg::Empty>(\r\n    \"topic\", 10, [](test_msgs::msg::Empty::SharedPtr) {});\r\n\r\nwait_set.add_subscription(subscription);\r\nwait_set.remove_subscription(subscription);  // throws here\r\n```\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-exchange-waitable-if-nonnull",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Only exchange intra_process waitable if nonnull (#1317)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772c18912b45d36a7384",
    "number": 1316,
    "body": "This adds testing coverage for wait_set policies and a couple of functions missing from WaitResult. It depends on #1314, #1315 and #1317 which were discovered while writing these tests. This adds `patch.hpp` from `rcl` (commit https://github.com/ros2/rclcpp/pull/1316/commits/bea209957b800413cd669ccf2b5ff21f5312db82), which has already been reviewed. The only change to that file is noted below\r\n\r\nCommit to review: https://github.com/ros2/rclcpp/pull/1316/commits/dff5378a0fc61b8d3d3ed78abeb39b893962e710",
    "head_branch": "brawner/rclcpp-wait_set-test-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add coverage for wait_set_policies (#1316)\n\n* Add mocking utils for rclcpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add coverage for wait_set_policies\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix windows issues\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add test comment\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621772d18912b45d36a7385",
    "number": 1315,
    "body": "Construction of `StoragePolicyCommon` checks shared_ptr for null during `storage_rebuild_rcl_wait_set_with_sets`, which works fine, except for waitables which are also iterated and accessed. This adds a nullptr check similar to those in `storage_rebuild_rcl_wait_set_with_sets` where appropriate.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/check-waitable-nullptr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check waitable for nullptr during constructor (#1315)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621772f18912b45d36a7386",
    "number": 1314,
    "body": "In the case where the predicate `p` is false for all elements or these vectors are empty, these calls to std::remove_if will return the `std::vector::end()`, which is not a valid iterator position to `std::vector::erase(std::iterator)` and in turn an exception will be thrown. However, passing two `end()` iterators to `std::vector::erase` is ok.\r\n\r\nTesting this PR, which doesn't include the failing unit test. Those will be added separately (`--packages-select rclcpp`)\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12330)](http://ci.ros2.org/job/ci_linux/12330/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7299)](http://ci.ros2.org/job/ci_linux-aarch64/7299/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=10043)](http://ci.ros2.org/job/ci_osx/10043/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12233)](http://ci.ros2.org/job/ci_windows/12233/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-dynamic-storage-erase-remove-if",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Call vector.erase with end iterator overload (#1314)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773018912b45d36a7387",
    "number": 1313,
    "body": "To fix the issue https://github.com/ros2/rclcpp/issues/1285\r\n\r\nI think the problem is that the server can let the next goal accept during processing `on_terminal_state` callback.\r\nIt can be solved by putting them in a single `reentrant_mutex_` context.\r\n\r\nThis does not make any deadlock with [my test code](https://gist.github.com/daisukes/46298b083a48e5db7016f3c0efba7e2d) so far.",
    "head_branch": "foxy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix action server deadlock (#1285) (#1313)\n\n* unlock action_server_reentrant_mutex_ before calling user callback functions\r\nadd an additional lock to keep previous behavior broken by deadlock fix\r\n\r\nAlso add a test case to reproduce deadlock situation in rclcpp_action\r\n\r\nSigned-off-by: Daisuke Sato <daisukes@cmu.edu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773118912b45d36a7388",
    "number": 1312,
    "body": "This PRs proposes changing the default QoS profile for `/clock` subscriptions.\r\nThe reasons:\r\n- `history_depth = 10` doesn't seem to make sense, if a newer message was received it seems ok to use it directly.\r\n- reliable communication is typically problematic in high hz problems, like clock is.\r\n  - Repair traffic will increase jitter and likely congest the network\r\n  - If nodes are depending on /clock for their event loops, things are likely to a grinding halt.\r\n\r\nI'm not quite sure what would the effect of this change in all users, so this need some discussion before being merged.",
    "head_branch": "ivanpauno/clock-qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use best effort, keep last, history depth 1 QoS Profile for '/clock' subscriptions (#1312)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773218912b45d36a7389",
    "number": 1311,
    "body": "This resolves an issue where `promise->set_value` is called before a potential call to `promise->set_exception`.\r\nIf there is an issue sending a result request, set the exception on the future to the result in the goal handle, instead of the future to the goal handle itself.\r\n\r\nAlternative to https://github.com/ros2/rclcpp/pull/1292.",
    "head_branch": "jacob/actions_refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Pass goal handle to goal response callback instead of a future (#1311)\n\n* Pass goal handle to goal response callback instead of a future\r\n\r\nThis resolves an issue where `promise->set_value` is called before a potential call to `promise->set_exception`.\r\nIf there is an issue sending a result request, set the exception on the future to the result in the goal handle, instead of the future to the goal handle itself.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Do not remove goal handle from list if result request fails\r\n\r\nThis way the user can still interact with the goal (e.g. send a cancel request).\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Set the result awareness to false if goal handle is invalidated\r\n\r\nThis will cause an exception when trying to get the future to result, in addition to the exception when trying to access values for existing references to the future.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Revert \"Set the result awareness to false if goal handle is invalidated\"\r\n\r\nThis reverts commit d444e09131c42d6eece1338443b8ffb4f5f17370.\r\n\r\n* Throw from Client::async_get_result if the goal handle was invalidated due to a failed result request\r\n\r\nPropagate error message from a failed result request.\r\n\r\nAlso set result awareness to false if the result request fails so the user can also check before\r\nbeing hit with an exception.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Guard against mutliple calls to invalidate\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621773318912b45d36a738a",
    "number": 1310,
    "body": "Without this change, I am unable to build locally.\r\nstd_msgs is not declared as a test dependency or find_package'd anywhere, so\r\nI'm not sure why CI ever passed the build phase. @brawner any ideas?",
    "head_branch": "jacob/rm_std_msgs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace std_msgs with test_msgs in executors test (#1310)\n\nWithout this change, I am unable to build locally.\r\nstd_msgs is not declared as a test dependency or find_package'd anywhere, so\r\nI'm not sure why CI ever passed the build phase.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773418912b45d36a738b",
    "number": 1309,
    "body": "The method was deprecated in Foxy.",
    "head_branch": "jacob/rm_deprecated_action_client_api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove deprecated client goal handle method for getting result (#1309)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621773518912b45d36a738c",
    "number": 1308,
    "body": "As the title says. Also adds a `service_fini` that I missed in #1291 ",
    "head_branch": "blas545/coverage_tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add tests type_support module (#1308)\n\n* Add tests getters msg type support\r\n* Add missing fini\r\n* Add tests type_support services\r\n* Reformat to re use test structure\r\n* Remove not needed headers\r\n* Improve teardown test cases\r\n* Add nullptr checks to type_support tests\r\n* Reformat type_support testing\r\n* Replace expect tests with asserts\r\n* \"Improve error msg for rcl_service_ini/fini fail\"\r\n* Improve test readability\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773618912b45d36a738d",
    "number": 1307,
    "body": "",
    "head_branch": "topic_fix_memory_leak_for_SubscriptionIntraProcess",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Not finalize guard condition while destructing SubscriptionIntraProcess (#1307)\n\n* Finalize guard condition while destructing SubscriptionIntraProcess\r\n\r\nSigned-off-by: Barry Xu <barry.xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773718912b45d36a738e",
    "number": 1305,
    "body": "Fixes #1304\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-destroy-loaned-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Destroy msg extracted from LoanedMessage. (#1305)\n\n* Destroy msg extracted from LoanedMessage.\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* Remove the release method of LoadedMessage and a related test case\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* Revert \"Remove the release method of LoadedMessage and a related test case\"\r\n\r\nThis reverts commit b9825251d148198cb63dc841139e88e77ac02aff.\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* Use unique_ptr as return type for release method of LoanedMessage\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* Update based on review.\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* Update description for the release method\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* update based on suggestion and revert some changes.\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* Use explicit capture\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\n* Use unique_ptr as argument type and update exist test\r\n\r\nSigned-off-by: Chen Lihui <lihui.chen@sony.com>\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621773818912b45d36a738f",
    "number": 1303,
    "body": "Fixes #1302\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-member-depend-on-entities-collector",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clear members for StaticExecutorEntitiesCollector to avoid shared_ptr dependency (#1303)\n\n* Clear members for StaticExecutorEntitiesCollector to avoid shared_ptr dependency\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\nCo-authored-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621773a18912b45d36a7390",
    "number": 1301,
    "body": "\r\nFixes #1300\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "toipc-weak-ptr-avoid-self-dependency",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid self dependency that not destoryed (#1301)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773b18912b45d36a7391",
    "number": 1298,
    "body": "This PR increases the test coverage of rclcpp_lifecycle to about 96% across both the include and src directories. \r\n\r\nIt directly depends on #1297\r\n\r\n`patch.hpp` contributes about 50% of the additions and that's pretty much unmodified except where indicated.\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_lifecycle-test-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase test coverage of rclcpp_lifecycle to 96% (#1298)\n\n* Increase test coverage of rclcpp_lifecycle to 96%\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* test_depend\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* rcutils test_depend\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* More windows warnings\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621773c18912b45d36a7392",
    "number": 1297,
    "body": "This was discovered during fault injection testing, but if for some reason `rcl_lifecycle_state_fini` fails during `rclcpp::Transition::reset()` or `rclcpp::State::reset()`, these destructors will throw an uncatchable exception because destructors are `noexcept` by default.\r\n\r\nThere are other potential resolutions to this issue, like marking these destructors `noexcept(false)`, but that has performance side effects by poisoning the chain of destructors that eventually call these.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_lifecycle-catch-exception-destructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Log error instead of throwing exception in Transition and State reset(), mark no except (#1297)\n\n* Catch potential exception in destructor and log\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove thrown error from reset and mark it no except\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773d18912b45d36a7393",
    "number": 1296,
    "body": "Fixes #1295\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-fix-memory-leak-client-service",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make sure to clean the external client/service handle. (#1296)\n\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773e18912b45d36a7394",
    "number": 1294,
    "body": "This function `group_in_node` is declared private, but is otherwise unused. This is a PR for removing it, but I can also move it to protected or public if it's inclusion might be helpful.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_lifecycle-remove-unused-private-methods",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove unused private function (rclcpp::Node and rclcpp_lifecycle::Node) (#1294)\n\n* Remove unused private function\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove group_in_node from rclcpp::Node\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621773f18912b45d36a7395",
    "number": 1293,
    "body": "It looks some rmw-dependent checks made it into this unit test and has started showing up on build.ros2.org.\r\n\r\nExample failure:\r\nhttp://build.ros2.org/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/181/testReport/(root)/rclcpp_lifecycle/test_lifecycle_node_gtest_missing_result/\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_lifecycle-rmw-dependent-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove rmw-dependent unit-test checks (#1293)\n\n* Remove rmw-dependent unit-test checks\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774018912b45d36a7396",
    "number": 1292,
    "body": "This PR fixes a potential issue, where `promise->set_value` is called before a potential call to `promise->set_exception`. Only one can be called, otherwise a `std::future_error` is thrown. This was the original ordering in https://github.com/ros2/rclcpp/pull/594, but it was rearranged in https://github.com/ros2/rclcpp/pull/738. @jacobperron @hidmic if this is breaking something unintentionally, please let me know. It should pass current unit tests as is. This patch is required in order to pass tests in #1290.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_action-set-value-after-exception",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774118912b45d36a7397",
    "number": 1291,
    "body": "First round of tests for increasing coverage of `rclcpp`, those are tackling some basic getter functions, let me know if you think I can easily improve those tests.\r\n\r\nIn particular, I added this test:\r\n\r\n``` cpp\r\nsize_t publisher_queue_size = publisher->get_queue_size();\r\n// TODO(blast545): get default rmw qos options to compare here\r\nEXPECT_NE(800u, publisher_queue_size);\r\n```\r\n\r\nIf you guys know to get default QOS configuration please let me know, otherwise I'll check this out before merging.",
    "head_branch": "blast545/tests_cov",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Adding tests basic getters (#1291)\n\n* Add tests serialize functions\r\n* Add test getter const get_service_handle\r\n* Add basic tests getters publisher\r\n* Add == operator tests\r\n* Improve check on QOS depth\r\n* Remove extra line, copy directly string\r\n* Expect specific error throws\r\n\r\nSigned-off-by: Jorge Perez <jjperez@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774318912b45d36a7398",
    "number": 1290,
    "body": "This adds unit tests for rclcpp_action and increases the coverage to just bit over 95%. As part of this work, an issue was found with the client implementation, which is potentially addressed in #1292. This branch is currently targeting that PR branch for easy review.\r\n\r\nTesting `--packages-select rclcpp_action`\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=12240)](http://ci.ros2.org/job/ci_linux/12240/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=7218)](http://ci.ros2.org/job/ci_linux-aarch64/7218/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9960)](http://ci.ros2.org/job/ci_osx/9960/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=12134)](http://ci.ros2.org/job/ci_windows/12134/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_action-test-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase coverage rclcpp_action to 95% (#1290)\n\n* Increase coverage rclcpp_action to 95%\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Rebase onto #1311\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* rcutils test depend\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Cleaning up\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621774418912b45d36a7399",
    "number": 1286,
    "body": "This small PR adds the topic name to the console warning about QoS mismatch, to help debugging this type of thing.\r\n\r\nSigned-off-by: Morgan Quigley <morgan@osrfoundation.org>",
    "head_branch": "add_topic_name_to_incompatible_qos_warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include topic name in QoS mismatch warning messages (#1286)\n\n* Include topic name in QoS mismatch warning messages\r\n\r\nSigned-off-by: Morgan Quigley <morgan@osrfoundation.org>\r\nCo-authored-by: Chris Lalancette <clalancette@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774518912b45d36a739a",
    "number": 1284,
    "body": "Close #1166\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>",
    "head_branch": "topic-set-logger-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add set_level for rclcpp::Logger (#1284)\n\n* Add set_logger_level for rclcpp::Logger\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\n\r\n* Update based on suggestions\r\n\r\nSigned-off-by: Chen Lihui <Lihui.Chen@sony.com>\r\nCo-authored-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\nCo-authored-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621774618912b45d36a739b",
    "number": 1281,
    "body": "As discussed in #1274 [(here)](https://github.com/ros2/rclcpp/pull/1274#discussion_r469641061), update topic statistics test to be correct and refactor duplicate logic.",
    "head_branch": "dabonnie/refactor-topic-statistics-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactor Subscription Topic Statistics Tests (#1281)\n\n* Add check for the correct number of messages received\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Refactor duplicate code into functions\r\nAdd random jitter to generate non-zero standard deviation values\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix warning\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix conversion warnings\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix style issues\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621774718912b45d36a739c",
    "number": 1280,
    "body": "Addresses #1265 \r\nI'd like to add tests but adding wildcards to params via arguments returns an error.  Alternative is to add a .yml file, but im not sure about adding a filesystem dependency to the tests",
    "head_branch": "node-namespace-wildcards",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774818912b45d36a739d",
    "number": 1279,
    "body": "Backports https://github.com/ros2/rclcpp/pull/1236.\r\n\r\nThis is an addition, not a bug fix.\r\nIt makes sense to me to backport this for consistency. It's weird to have all comparison operators except !=.",
    "head_branch": "ivanpauno/eloquent-duration-neq",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774918912b45d36a739e",
    "number": 1278,
    "body": "Backports https://github.com/ros2/rclcpp/pull/1236.\r\n\r\nThis is an addition, not a bug fix.\r\nIt makes sense to me to backport this for consistency. It's weird to have all comparison operators except !=.",
    "head_branch": "ivanpauno/foxy-duration-neq",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add operator!= for duration (#1236) (#1278)\n\nSigned-off-by: Jannik Abbenseth <jannik.abbenseth@ipa.fraunhofer.de>\r\n\r\nCo-authored-by: Jannik Abbenseth <ipa-jba@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774a18912b45d36a739f",
    "number": 1277,
    "body": "Backports https://github.com/ros2/rclcpp/pull/1236.\r\n\r\nThis is an addition, not a bug fix.\r\nIt makes sense to me to backport this for consistency. It's weird to have all comparison operators except !=.",
    "head_branch": "ivanpauno/dashing-duration-neq",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add operator!= for duration (#1236) (#1277)\n\nSigned-off-by: Jannik Abbenseth <jannik.abbenseth@ipa.fraunhofer.de>\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\nCo-authored-by: Jannik Abbenseth <ipa-jba@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774b18912b45d36a73a0",
    "number": 1276,
    "body": "Adds a document for discussing how the `MultiThreadedExecutor` should be redesigned to avoid calling execute more than one time on one executable object. This discussion was prompted by #1241 and #1275.",
    "head_branch": "audrow/multi-threaded-executor-redesign-doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774c18912b45d36a73a1",
    "number": 1275,
    "body": "This ensures that executing is a noop if there's nothing to be executed.\r\n\r\nAlternative to https://github.com/ros2/rclcpp/pull/1241.",
    "head_branch": "ivanpauno/fix-entities-being-executed-twice",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774d18912b45d36a73a2",
    "number": 1274,
    "body": "Fixes #1273.\r\n\r\nBefore: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11887)](https://ci.ros2.org/job/ci_linux/11887/)\r\nAfter: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11891)](https://ci.ros2.org/job/ci_linux/11891/)\r\n\r\n@prajakta-gokhale @dabonnie FYI",
    "head_branch": "dirk-thomas/fix-topic-stats-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix topic stats test, wait for more messages, only check the ones with samples (#1274)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621774e18912b45d36a73a3",
    "number": 1272,
    "body": "closes https://github.com/ros2/rclcpp/issues/1258\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "bugfix-20200811-auto_initialize_logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "initialize_logging_ should be copied. (#1272)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775018912b45d36a73a4",
    "number": 1271,
    "body": "Signed-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\nfollow-up PR after https://github.com/ros2/rclcpp/pull/1165.",
    "head_branch": "feature-20200811-context-domain-id",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add get_domain_id method to rclcpp::Context (#1271)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621775118912b45d36a73a5",
    "number": 1270,
    "body": "Addresses #1268 and #1269\r\n\r\nDefault build/test testing `--packages-select rclcpp`\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11863)](http://ci.ros2.org/job/ci_linux/11863/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6915)](http://ci.ros2.org/job/ci_linux-aarch64/6915/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9667)](http://ci.ros2.org/job/ci_osx/9667/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11806)](http://ci.ros2.org/job/ci_windows/11806/)\r\n\r\n* Linux cyclonedds only [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11864)](https://ci.ros2.org/job/ci_linux/11864/)\r\n* Linux connext only [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11865)](https://ci.ros2.org/job/ci_linux/11865/)\r\n\r\nDebug builds\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11866)](http://ci.ros2.org/job/ci_linux/11866/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6916)](http://ci.ros2.org/job/ci_linux-aarch64/6916/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9668)](http://ci.ros2.org/job/ci_osx/9668/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11807)](http://ci.ros2.org/job/ci_windows/11807/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/cyclonedds-unit-test-fixes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixes for unit tests that fail under cyclonedds (#1270)\n\nAddresses #1268 and #1269\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775218912b45d36a73a6",
    "number": 1267,
    "body": "Fixes #1266 ",
    "head_branch": "time-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix clock thread issue (#1266) (#1267)\n\n* lock before rcl_set_ros_time_override\r\n\r\nSigned-off-by: Daisuke Sato <daisukes@cmu.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775318912b45d36a73a7",
    "number": 1263,
    "body": "Some stricter linters prefer this instead of C-style casts in C++.",
    "head_branch": "tracepoints-use-static-cast-instead-of-c-style-cast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use static_cast instead of C-style cast for instrumentation (#1263)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775418912b45d36a73a8",
    "number": 1262,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/backport-1173",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Reorganize test directory and split CMakeLists.txt (#1173) (#1262)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775518912b45d36a73a9",
    "number": 1261,
    "body": "Backport #1257 to Foxy.\r\n\r\nThis changes default behavior and could consequently break application code that is relying on the assumption that the parameter events subscription uses a relative namespace (but the publisher is using a global namespace), therefore I'm hesitant about backporting. On the other hand, without the patch it can lead to buggy behavior when trying to use parameter events for the first time in Foxy.\r\n\r\nDashing and Eloquent don't have the same problem since both the publisher and subscription are using relative namespaces.\r\n\r\n@ros2/team I'm looking for opinions on whether this fix should be backported or not.",
    "head_branch": "jacob/foxy_backport_1257",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use global namespace for parameter events subscription topic (#1257) (#1261)\n\nSimilar to https://github.com/ros2/rclcpp/pull/929, but for the subscription.\r\n\r\nThis fixes an issue listening to parameter events from a remote node when the local node has a different namespace.\r\nOriginally reported here: https://answers.ros.org/question/358170/parameter-events-on-foxy/\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775618912b45d36a73aa",
    "number": 1257,
    "body": "Similar to https://github.com/ros2/rclcpp/pull/929, but for the subscription.\r\n\r\nThis fixes an issue listening to parameter events from a remote node when the local node has a different namespace.\r\nOriginally reported here: https://answers.ros.org/question/358170/parameter-events-on-foxy/",
    "head_branch": "jacob/fqn_parameter_events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use global namespace for parameter events subscription topic (#1257)\n\nSimilar to https://github.com/ros2/rclcpp/pull/929, but for the subscription.\r\n\r\nThis fixes an issue listening to parameter events from a remote node when the local node has a different namespace.\r\nOriginally reported here: https://answers.ros.org/question/358170/parameter-events-on-foxy/\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775718912b45d36a73ab",
    "number": 1256,
    "body": "Before: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11746)](https://ci.ros2.org/job/ci_linux/11746/)\r\nAfter: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11747)](https://ci.ros2.org/job/ci_linux/11747/)",
    "head_branch": "dirk-thomas/extend-test-timeout-for-connext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "increase test timeout necessary for Connext (#1256)\n\n* increase test timeout necessary for Connext\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* revert changes overlapping with another PR\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775818912b45d36a73ac",
    "number": 1253,
    "body": "Destroying nodes takes upwards of 3 seconds, which can cause many unit tests to take inordinate amount of time (#1250) with rmw_connext_cpp. Currently only `test_executors` and `test_allocator_memory_strategy` timeout, so the timeout is being increased here.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/increase-test-timeouts-rmw-connext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase timeouts for connext for long tests (#1253)\n\n* Increase timeouts for connext for long tests\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix cmakelists\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775a18912b45d36a73ad",
    "number": 1252,
    "body": "Due to a difference between connext and other rmw implementations, this unit test was failing. I decided to modify this test so that all callback groups are set so `group->can_be_taken_from()` is set to false before adding one callback group and the associated entities. This let me remove the logic that tracks how many entities are in the basic nodes, since the memory strategy will only ever find those that belong to the callback_group that can be taken from.\r\n\r\nFailing example:\r\nhttps://ci.ros2.org/job/ci_linux/11735/testReport/junit/projectroot/test/test_allocator_memory_strategy/\r\n\r\nFastRTPS (plus others)\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11737)](http://ci.ros2.org/job/ci_linux/11737/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6819)](http://ci.ros2.org/job/ci_linux-aarch64/6819/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9575)](http://ci.ros2.org/job/ci_osx/9575/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11677)](http://ci.ros2.org/job/ci_windows/11677/)\r\n\r\nConnext only:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11738)](http://ci.ros2.org/job/ci_linux/11738/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6820)](http://ci.ros2.org/job/ci_linux-aarch64/6820/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9576)](http://ci.ros2.org/job/ci_osx/9576/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11678)](http://ci.ros2.org/job/ci_windows/11678/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/fix-allocator_memory_strategy-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Simplify and fix allocator memory strategy unit test for connext (#1252)\n\n* Fix allocator memory strategy for connext\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775b18912b45d36a73ae",
    "number": 1251,
    "body": "It turns out rmw_connext_cpp adds a default waitable that other rmw implementations do not. Adjusting the unit test to take this into account, but in a non-rmw specific manner.\r\n\r\nNon connext rmw implementations (testing `--packages-select` rclcpp)\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11734)](http://ci.ros2.org/job/ci_linux/11734/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6815)](http://ci.ros2.org/job/ci_linux-aarch64/6815/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9572)](http://ci.ros2.org/job/ci_osx/9572/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11672)](http://ci.ros2.org/job/ci_windows/11672/)\r\n\r\nconnext only rmw implementation\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11735)](http://ci.ros2.org/job/ci_linux/11735/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6816)](http://ci.ros2.org/job/ci_linux-aarch64/6816/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9573)](http://ci.ros2.org/job/ci_osx/9573/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11674)](http://ci.ros2.org/job/ci_windows/11674/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/fix-static-executor-entities-collector-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Adjust test_static_executor_entities_collector for rmw_connext_cpp (#1251)\n\nIt turns out rmw_connext_cpp adds a default waitable that other rmw\r\nimplementations do not. Adjusting the unit test to take this into\r\naccount in a non-rmw specific manner.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775c18912b45d36a73af",
    "number": 1249,
    "body": "Fixes #855 for both synchronous or asynchronous parameter clients. ",
    "head_branch": "audrow/template-parameter-client-constructors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make parameter clients use template constructors (#1249)\n\n* Make Parameter Clients use template constructors\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>\r\n\r\n* Remove `RCLCPP_PUBLIC` macro from template functions\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621775d18912b45d36a73b0",
    "number": 1247,
    "body": "Related issue [581](https://github.com/ros2/rcl/issues/581)\r\nMerge this after PR [722](https://github.com/ros2/rcl/pull/722)\r\n\r\nSigned-off-by: Ada-King <Bingtao.Du@sony.com>",
    "head_branch": "topic-expose-qos-setting-plus",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose qos setting for /rosout (#1247)\n\n* Expose qos setting for /rosout\r\n\r\nSigned-off-by: Ada-King <Bingtao.Du@sony.com>\r\n\r\n* For re-trigger CI job\r\n\r\nSigned-off-by: Ada-King <Bingtao.Du@sony.com>\r\n\r\n* Modify code based on comments\r\n\r\nSigned-off-by: Ada-King <Bingtao.Du@sony.com>\r\n\r\n* Remove redundant parameter\r\n\r\nSigned-off-by: Ada-King <Bingtao.Du@sony.com>\r\n\r\n* Simplify Test\r\n\r\nSigned-off-by: Ada-King <Bingtao.Du@sony.com>\r\n\r\n* Modify Test as suggested\r\n\r\nSigned-off-by: Ada-King <Bingtao.Du@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621775e18912b45d36a73b1",
    "number": 1246,
    "body": "The failing test was introduced by #1202.\r\n\r\nFailing tests:\r\n\r\n* Connext: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/29/testReport/rclcpp/TestNodeGraph/get_service_names_and_types_by_node/",
    "head_branch": "dirk-thomas/fix-test-with-connext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix failing test with Connext since it doesn't wait for discovery (#1246)\n\n* fix failing test with Connext since it doesn't wait for discovery\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* Check for added service in the node graph\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\nCo-authored-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621775f18912b45d36a73b2",
    "number": 1245,
    "body": "The failing test was introduced by #1202.\r\n\r\nFailing tests:\r\n* Connext: http://build.ros2.org/view/Rci/job/Rci__nightly-connext_ubuntu_focal_amd64/29/testReport/rclcpp/TestNodeGraph/get_info_by_topic/\r\n* Cyclone DDS: http://build.ros2.org/view/Rci/job/Rci__nightly-cyclonedds_ubuntu_focal_amd64/31/testReport/rclcpp/TestNodeGraph/get_info_by_topic/",
    "head_branch": "dirk-thomas/fix-node-graph-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix node graph test with Connext and CycloneDDS returning actual data (#1245)\n\n* fix node graph test with Connext and CycloneDDS returning actual data\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* use ADD_FAILURE()\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776018912b45d36a73b3",
    "number": 1244,
    "body": "Backport #1238 to Foxy\r\n\r\nIf the user doesn't retain a reference to the returned shared pointer there will be zero references and their callback will be unregistered.",
    "head_branch": "jacob/foxy_backport_1238",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Warn about unused result of add_on_set_parameters_callback (#1238) (#1244)\n\nIf the user doesn't retain a reference to the returned shared pointer there will be zero references and their callback will be unregistered.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776118912b45d36a73b4",
    "number": 1243,
    "body": "Backport #1238 to Eloquent.\r\n\r\nIf the user doesn't retain a reference to the returned shared pointer there will be zero references and their callback will be unregistered.",
    "head_branch": "jacob/eloquent_backport_1238",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Warn about unused result of add_on_set_parameters_callback (#1238) (#1243)\n\nIf the user doesn't retain a reference to the returned shared pointer there will be zero references and their callback will be unregistered.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776218912b45d36a73b5",
    "number": 1241,
    "body": "Fixes #1212.  This PR extends the `Waitable` class with a `take_data` method and the `AnyExecutable` struct with a `data` field.  `take_data` places the data to be executed in `AnyExecutable.data`, which is then used in the `execute` method.",
    "head_branch": "audrow/add-take-data-to-waitable--any-exec",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add `take_data` to `Waitable` and `data` to `AnyExecutable` (#1241)\n\nSigned-off-by: Audrow <audrow.nash@gmail.com>\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621776418912b45d36a73b6",
    "number": 1240,
    "body": " - remove_on_set_parameters_callback\r\n - notify_graph_change\r\n - get_service_names_and_types_by_node\r\n\r\nRelated to this https://ci.ros2.org/job/nightly_linux_coverage/lastBuild/cobertura/src_ros2_rclcpp_rclcpp_lifecycle_src/lifecycle_node_cpp/lifecycle_node_cpp/\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/test/add_missing_rclcpp_lifecycle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added missing tests for rclcpp lifecycle (#1240)\n\n* Added missing test rclcpp lifecycle\r\n - remove_on_set_parameters_callback\r\n - notify_graph_change\r\n - get_service_names_and_types_by_node\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* omit the name of the argument in lambda function\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Removed extra line\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776518912b45d36a73b7",
    "number": 1238,
    "body": "If the user doesn't retain a reference to the returned shared pointer there will be zero references and their callback will be unregistered.\r\n\r\nI think it would be good to backport this change to Foxy and Eloquent.",
    "head_branch": "jacob/warn_unused_add_param_callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Warn about unused result of add_on_set_parameters_callback (#1238)\n\nIf the user doesn't retain a reference to the returned shared pointer there will be zero references and their callback will be unregistered.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776618912b45d36a73b8",
    "number": 1237,
    "body": "This should let `cppcheck` pass with v2.x.\r\n\r\nI deliberately opted against the approach taken in https://github.com/ros2/rclpy/pull/577 as it'd increase testing time quite dramatically - it always timeout after 3mins. ",
    "head_branch": "suppress_cppcheck_inline",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776718912b45d36a73b9",
    "number": 1236,
    "body": "I'm not sure why it wasn't there in the first place and couldn't find an (obvious) reason.\r\n\r\nUnfortunately I cannot build/test the current master branch (still running melodic and eloquent) so PR against \"eloquent\" ",
    "head_branch": "feature/not_equal_duration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add operator!= for duration (#1236)\n\nSigned-off-by: Jannik Abbenseth <jannik.abbenseth@ipa.fraunhofer.de>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776818912b45d36a73ba",
    "number": 1235,
    "body": "A partial fix for #1212.  This PR extends the `Waitable` class with a `take_data` method that stores `unique_ptr` messages in a map that uses thread ID as a key.  That thread ID is then used to retrieve the message when it is time to execute.\r\n\r\nCurrently, I've left the `take_data` method empty in classes other than `SubscriptionIntraProcess` that inherit from `Waitable`.\r\n\r\n~~I am still getting a couple segmentation faults, although they are hard to reproduce.  Backtraces are below:~~\r\n\r\n<details><summary><s>Message pointer points to a null address (0x0)</s></summary>\r\n\r\n```\r\n#0  <lambda(test_rclcpp::msg::UInt32_<std::allocator<void> >::SharedPtr)>::operator()(test_rclcpp::msg::UInt32_<std::allocator<void> >::SharedPtr) const (__closure=0x55a60f59de10, \r\n    msg=std::shared_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >> (empty) = {...})\r\n    at /root/ros2_foxy/src/ros2/system_tests/test_rclcpp/test/v2_test.cpp:87\r\n#1  0x000055a60d900bb6 in std::_Function_handler<void(std::shared_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> > >), test_to_run()::<lambda(test_rclcpp::msg::UInt32_<std::allocator<void> >::SharedPtr)> >::_M_invoke(const std::_Any_data &, std::shared_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> > > &&) (\r\n    __functor=..., __args#0=...)\r\n    at /usr/include/c++/9/bits/std_function.h:300\r\n#2  0x000055a60d94afbf in std::function<void (std::shared_ptr<test--Type <RET> for more, q to quit, c to continue without paging--c\r\n_rclcpp::msg::UInt32_<std::allocator<void> > >)>::operator()(std::shared_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> > >) const (this=0x55a60f59de10, __args#0=std::shared_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >> (empty) = {...}) at /usr/include/c++/9/bits/std_function.h:688\r\n#3  0x000055a60d94aba9 in rclcpp::AnySubscriptionCallback<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::allocator<void> >::dispatch_intra_process (this=0x55a60f59de10, message=std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >> = {...}, message_info=...) at /root/ros2_foxy/install/rclcpp/include/rclcpp/any_subscription_callback.hpp:213\r\n#4  0x000055a60d949103 in rclcpp::experimental::SubscriptionIntraProcess<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::allocator<void>, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > >, test_rclcpp::msg::UInt32_<std::allocator<void> > >::execute_impl<test_rclcpp::msg::UInt32_<std::allocator<void> > > (this=0x55a60f59dd50) at /root/ros2_foxy/install/rclcpp/include/rclcpp/experimental/subscription_intra_process.hpp:181\r\n#5  0x000055a60d946f92 in rclcpp::experimental::SubscriptionIntraProcess<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::allocator<void>, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > >, test_rclcpp::msg::UInt32_<std::allocator<void> > >::execute (this=0x55a60f59dd50) at /root/ros2_foxy/install/rclcpp/include/rclcpp/experimental/subscription_intra_process.hpp:130\r\n#6  0x00007fcfe31ba81f in rclcpp::Executor::execute_any_executable (this=0x7ffe15e83f10, any_exec=...) at /root/ros2_foxy/src/ros2/rclcpp/rclcpp/src/rclcpp/executor.cpp:324\r\n#7  0x00007fcfe31c4279 in rclcpp::executors::MultiThreadedExecutor::run (this=0x7ffe15e83f10) at /root/ros2_foxy/src/ros2/rclcpp/rclcpp/src/rclcpp/executors/multi_threaded_executor.cpp:103\r\n#8  0x00007fcfe31c7fec in std::__invoke_impl<void, void (rclcpp::executors::MultiThreadedExecutor::*&)(unsigned long), rclcpp::executors::MultiThreadedExecutor*&, unsigned long&> (__f=@0x55a60f5a0228: (void (rclcpp::executors::MultiThreadedExecutor::*)(rclcpp::executors::MultiThreadedExecutor * const, unsigned long)) 0x7fcfe31c3fc2 <rclcpp::executors::MultiThreadedExecutor::run(unsigned long)>, __t=@0x55a60f5a0240: 0x7ffe15e83f10) at /usr/include/c++/9/bits/invoke.h:73\r\n#9  0x00007fcfe31c7eea in std::__invoke<void (rclcpp::executors::MultiThreadedExecutor::*&)(unsigned long), rclcpp::executors::MultiThreadedExecutor*&, unsigned long&> (__fn=@0x55a60f5a0228: (void (rclcpp::executors::MultiThreadedExecutor::*)(rclcpp::executors::MultiThreadedExecutor * const, unsigned long)) 0x7fcfe31c3fc2 <rclcpp::executors::MultiThreadedExecutor::run(unsigned long)>) at /usr/include/c++/9/bits/invoke.h:95\r\n#10 0x00007fcfe31c7de4 in std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>::__call<void, , 0ul, 1ul>(std::tuple<>&&, std::_Index_tuple<0ul, 1ul>) (this=0x55a60f5a0228, __args=...) at /usr/include/c++/9/functional:400\r\n#11 0x00007fcfe31c7d3b in std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>::operator()<, void>() (this=0x55a60f5a0228) at /usr/include/c++/9/functional:484\r\n#12 0x00007fcfe31c7ce3 in std::__invoke_impl<void, std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>>(std::__invoke_other, std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60\r\n#13 0x00007fcfe31c7c78 in std::__invoke<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>>(std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>&&) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95\r\n#14 0x00007fcfe31c7c0a in std::thread::_Invoker<std::tuple<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)> > >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x55a60f5a0228) at /usr/include/c++/9/thread:244\r\n#15 0x00007fcfe31c7bc7 in std::thread::_Invoker<std::tuple<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)> > >::operator()() (this=0x55a60f5a0228) at /usr/include/c++/9/thread:251\r\n#16 0x00007fcfe31c7b98 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)> > > >::_M_run() (this=0x55a60f5a0220) at /usr/include/c++/9/thread:195\r\n#17 0x00007fcfe2aabcb4 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#18 0x00007fcfe2611609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#19 0x00007fcfe28e8103 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\n</details>\r\n<details><summary><s>Problem inserting the callback into a map</s></summary>\r\n\r\n```\r\n#0  0x00007f25068c456a in std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#1  0x0000559bea48c964 in std::_Rb_tree<std::thread::id, std::pair<std::thread::id const, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > >, std::_Select1st<std::pair<std::thread::id const, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > > >, std::less<std::thread::id>, std::allocator<std::pair<std::thread::id const, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > > > >::_M_insert_node (this=0x559bec701e00, __x=0x0, __p=0x7f24e0000b60, \r\n    __z=0x7f24ec000b60)\r\n    at /usr/include/c++/9/bits/stl_tree.h:2361\r\n#2  0x0000559bea48b68d in std::_Rb_tree<std::thread::id, std::pair<std::thread::id const, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > >, std::_Select1st<std::pair<std::thread::id const, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > > >, std::less<std::thread::id>, std::allocator<std::pair<std::thread::id const, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > > > >::_M_emplace_unique<std::pair<std::thread::id, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > > > (this=0x559bec701e00)\r\n    at /usr/include/c++/9/bits/stl_tree.h:2415\r\n#3  0x0000559bea489f7c in std::map<std::thread::id, std::unique_pt--Type <RET> for more, q to quit, c to continue without paging--c\r\nr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > >, std::less<std::thread::id>, std::allocator<std::pair<std::thread::id const, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > > > >::insert<std::pair<std::thread::id, std::unique_ptr<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > > > > > (this=0x559bec701e00, __x=...) at /usr/include/c++/9/bits/stl_map.h:815\r\n#4  0x0000559bea487f15 in rclcpp::experimental::SubscriptionIntraProcess<test_rclcpp::msg::UInt32_<std::allocator<void> >, std::allocator<void>, std::default_delete<test_rclcpp::msg::UInt32_<std::allocator<void> > >, test_rclcpp::msg::UInt32_<std::allocator<void> > >::take_data (this=0x559bec701c50) at /root/ros2_foxy/install/rclcpp/include/rclcpp/experimental/subscription_intra_process.hpp:122\r\n#5  0x00007f2506fea243 in rclcpp::Executor::get_next_ready_executable (this=0x7ffc28c26880, any_executable=...) at /root/ros2_foxy/src/ros2/rclcpp/rclcpp/src/rclcpp/executor.cpp:612\r\n#6  0x00007f2506fea3d6 in rclcpp::Executor::get_next_executable (this=0x7ffc28c26880, any_executable=..., timeout=...) at /root/ros2_foxy/src/ros2/rclcpp/rclcpp/src/rclcpp/executor.cpp:653\r\n#7  0x00007f2506ff114f in rclcpp::executors::MultiThreadedExecutor::run (this=0x7ffc28c26880) at /root/ros2_foxy/src/ros2/rclcpp/rclcpp/src/rclcpp/executors/multi_threaded_executor.cpp:83\r\n#8  0x00007f2506ff4fec in std::__invoke_impl<void, void (rclcpp::executors::MultiThreadedExecutor::*&)(unsigned long), rclcpp::executors::MultiThreadedExecutor*&, unsigned long&> (__f=@0x559bec703db8: (void (rclcpp::executors::MultiThreadedExecutor::*)(rclcpp::executors::MultiThreadedExecutor * const, unsigned long)) 0x7f2506ff0fc2 <rclcpp::executors::MultiThreadedExecutor::run(unsigned long)>, __t=@0x559bec703dd0: 0x7ffc28c26880) at /usr/include/c++/9/bits/invoke.h:73\r\n#9  0x00007f2506ff4eea in std::__invoke<void (rclcpp::executors::MultiThreadedExecutor::*&)(unsigned long), rclcpp::executors::MultiThreadedExecutor*&, unsigned long&> (__fn=@0x559bec703db8: (void (rclcpp::executors::MultiThreadedExecutor::*)(rclcpp::executors::MultiThreadedExecutor * const, unsigned long)) 0x7f2506ff0fc2 <rclcpp::executors::MultiThreadedExecutor::run(unsigned long)>) at /usr/include/c++/9/bits/invoke.h:95\r\n#10 0x00007f2506ff4de4 in std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>::__call<void, , 0ul, 1ul>(std::tuple<>&&, std::_Index_tuple<0ul, 1ul>) (this=0x559bec703db8, __args=...) at /usr/include/c++/9/functional:400\r\n#11 0x00007f2506ff4d3b in std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>::operator()<, void>() (this=0x559bec703db8) at /usr/include/c++/9/functional:484\r\n#12 0x00007f2506ff4ce3 in std::__invoke_impl<void, std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>>(std::__invoke_other, std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>&&) (__f=...) at /usr/include/c++/9/bits/invoke.h:60\r\n#13 0x00007f2506ff4c78 in std::__invoke<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>>(std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)>&&) (__fn=...) at /usr/include/c++/9/bits/invoke.h:95\r\n#14 0x00007f2506ff4c0a in std::thread::_Invoker<std::tuple<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)> > >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x559bec703db8) at /usr/include/c++/9/thread:244\r\n#15 0x00007f2506ff4bc7 in std::thread::_Invoker<std::tuple<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)> > >::operator()() (this=0x559bec703db8) at /usr/include/c++/9/thread:251\r\n#16 0x00007f2506ff4b98 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (rclcpp::executors::MultiThreadedExecutor::*(rclcpp::executors::MultiThreadedExecutor*, unsigned long))(unsigned long)> > > >::_M_run() (this=0x559bec703db0) at /usr/include/c++/9/thread:195\r\n#17 0x00007f25068d8cb4 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#18 0x00007f250643e609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#19 0x00007f2506715103 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\n</details>\r\n\r\n",
    "head_branch": "audrow/add-take-data-to-waitable--map",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776a18912b45d36a73bb",
    "number": 1234,
    "body": "Backports https://github.com/ros2/rclcpp/pull/1188.\r\n\r\nI will run CI before merging, as I've solved a bunch of conflicts in the middle.",
    "head_branch": "ivanpauno/dashing/fix/time-duration-conversion-to-msg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776b18912b45d36a73bc",
    "number": 1233,
    "body": "Backport of https://github.com/ros2/rclcpp/pull/906.\r\n\r\nThis change breaks ABI of the `GraphListener` class.\r\n\r\nThat class is never used directly by an user.\r\nIn the internal places where that class is being used, it's being stored as a `shared_ptr`.\r\ni.e.: ABI of other objects shouldn't be affected, and thus the user shouldn't be affected.\r\n\r\nI'm not quite sure if we should backport a fix like this or not as it's hard to verify if it actually breaks \"user\" ABI or not.\r\nIf the answer is no, I will delete this from Dashing and Eloquent patch release board.",
    "head_branch": "ivanpauno/dashing/topic-fix-not-delete-context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776c18912b45d36a73bd",
    "number": 1232,
    "body": "Based on feedback from @clalancette in #1189, I'm introducing a couple of macros for checking the equality of a thrown exception with its actual type and contents. This supports std::exceptions, rclcpp::exceptions and non-standard throwables (as much as it can). \r\n\r\nLike the gtest macros, `EXPECT_THROW` and `ASSERT_THROW`, this ensures that both the type and the contents are identical. \r\n\r\nOne issue that it would be cool to resolve is how to get the demangled name of the actual type that is caught when it doesn't match the expected throwable type. But I'm not familiar enough with demangling for a good general solution.\r\n\r\nSome examples of the formatted output are below:\r\n\r\nExpected std::invalid_argument, but contents didn't match:\r\n```\r\n/home/brawner/workspace/ros2_master/src/ros2/rclcpp/rclcpp/test/utils/test_gtest_macros.cpp:48: Failure\r\nValue of: is_the_result_of_the_throwing_expression_equal_to_the_expected_throwable\r\n  Actual: false (\r\nThe contents of the std::exception thrown by the expression\r\n'throw std::invalid_argument(\"some invalid argument error\")':\r\n\te.what(): 'some invalid argument error'\r\n\r\ndo not match the contents of the expected std::exception\r\n'std::invalid_argument(\"some different invalid argument error\")'\r\n\te.what(): 'some different invalid argument error'\r\n)\r\nExpected: true\r\n```\r\n\r\nExpected std::invalid_argument, but threw std::runtime instead\r\n```\r\n/home/brawner/workspace/ros2_master/src/ros2/rclcpp/rclcpp/test/utils/test_gtest_macros.cpp:52: Failure\r\nValue of: is_the_result_of_the_throwing_expression_equal_to_the_expected_throwable\r\n  Actual: false (\r\nExpected the expression:\r\n\t'throw std::invalid_argument(\"some invalid argument error\")'\r\nto throw: \r\n\t'std::runtime_error(\"some different invalid argument error\")'\r\nbut it threw:\r\n\tType: St16invalid_argument\r\n\te.what(): 'some invalid argument error'\r\n)\r\n```\r\n\r\nExpected rclcpp::exception::InvalidArgument doesn't match actual\r\n```\r\n/home/brawner/workspace/ros2_master/src/ros2/rclcpp/rclcpp/test/utils/test_gtest_macros.cpp:122: Failure\r\nValue of: is_the_result_of_the_throwing_expression_equal_to_the_expected_throwable\r\n  Actual: false ('\r\nThe contents of the RCLError thrown by the expression\r\n'throw rclcpp::exceptions::RCLInvalidArgument( 11, &rcl_error_state, \"exception_prefix\")':\r\n\trcl_ret_t: 11\r\n\tmessage: 'this is some error message'\r\n\r\ndo not match the contents of the expected RCLError\r\n'rclcpp::exceptions::RCLInvalidArgument( 11, &rcl_error_state2, \"exception_prefix\")'\r\n\trcl_ret_t: 11\r\n\tmessage: 'this is some other error message'\r\n)\r\nExpected: true\r\n```\r\n\r\nExpected rclcpp::exception but threw std::runtime_error instead\r\n```\r\n/home/brawner/workspace/ros2_master/src/ros2/rclcpp/rclcpp/test/utils/test_gtest_macros.cpp:112: Failure\r\nValue of: is_the_result_of_the_throwing_expression_equal_to_the_expected_throwable\r\n  Actual: false (\r\nExpected the expression:\r\n\t'throw std::runtime_error(\"some std::exception\")'\r\nto throw: \r\n\t'rclcpp::exceptions::RCLError(1, &rcl_error_state, \"exception_prefix\")'\r\nbut it threw:\r\n\tType: St13runtime_error\r\n\te.what(): 'some std::exception'\r\n)\r\nExpected: true\r\n```\r\n\r\nExpected std::runtime_error, but did not throw\r\n```\r\n/home/brawner/workspace/ros2_master/src/ros2/rclcpp/rclcpp/test/utils/test_gtest_macros.cpp:36: Failure\r\nValue of: is_the_result_of_the_throwing_expression_equal_to_the_expected_throwable\r\n  Actual: false (\r\nExpected the expression:\r\n\t'printf(\"hello world\")'\r\nto throw: \r\n\t'std::runtime_error(\"some runtime error\")'\r\nbut it did not throw.\r\n)\r\nExpected: true\r\n```\r\n\r\nExpected std::runtime_error, but it threw a non-exception\r\n```\r\n/home/brawner/workspace/ros2_master/src/ros2/rclcpp/rclcpp/test/utils/test_gtest_macros.cpp:40: Failure\r\nValue of: is_the_result_of_the_throwing_expression_equal_to_the_expected_throwable\r\n  Actual: false (\r\nExpected the expression:\r\n\t'throw 42'\r\nto throw: \r\n\t'std::runtime_error(\"some runtime error\")'\r\nbut it threw an unrecognized throwable type.\r\n)\r\nExpected: true\r\n```\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/gtest-throw-equal-macros",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "EXPECT_THROW_EQ and ASSERT_THROW_EQ macros for unittests (#1232)\n\n* EXPECT_THROW_EQ and ASSERT_THROW_EQ macros for unittests\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621776d18912b45d36a73be",
    "number": 1229,
    "body": "This backports just changes to the headers, not the unit test.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/backport-foxy-1220",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621776e18912b45d36a73bf",
    "number": 1228,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/foxy-backport-1227",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing RCLCPP_PUBLIC to ~StaticExecutorEntitiesCollector (#1227) (#1228)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621776f18912b45d36a73c0",
    "number": 1227,
    "body": "The destructor for StaticExecutorEntitiesCollector needs the RCLCPP_PUBLIC flag otherwise it fails to build on Windows when it's used.\r\n\r\nExample:\r\n[![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11309)](https://ci.ros2.org/job/ci_windows/11309/)\r\n\r\nUnit test is being added in #1221.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp_public-static-executor_entities_collector",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing RCLCPP_PUBLIC to ~StaticExecutorEntitiesCollector (#1227)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621777018912b45d36a73c1",
    "number": 1226,
    "body": "",
    "head_branch": "audrow/add-take-data-to-waitable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777118912b45d36a73c2",
    "number": 1225,
    "body": "resolves #1174 by adding documentation that graph functions do not apply remap rules.",
    "head_branch": "sloretz-graph_functions_dont_remap",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Document graph functions don't apply remap rules (#1225)\n\nSigned-off-by: Shane Loretz<sloretz@openrobotics.org>\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621777218912b45d36a73c3",
    "number": 1224,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/backport-rclcpp-1217",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove recreation of entities_collector (#1217) (#1224)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777318912b45d36a73c4",
    "number": 1223,
    "body": "* Include original exception in ComponentManagerException\r\n\r\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>\r\n\r\n* Update rclcpp_components/src/component_manager.cpp\r\n\r\nCo-authored-by: tomoya <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>\r\n\r\nCo-authored-by: tomoya <Tomoya.Fujita@sony.com>",
    "head_branch": "cherry-pick-1157",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include original exception in ComponentManagerException (#1157) (#1223)\n\n* Include original exception in ComponentManagerException\r\n\r\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>\r\n\r\n* Update rclcpp_components/src/component_manager.cpp\r\n\r\nCo-authored-by: tomoya <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>\r\n\r\nCo-authored-by: tomoya <Tomoya.Fujita@sony.com>\r\n\r\nCo-authored-by: Martijn Buijs <Martijn.buijs@gmail.com>\r\nCo-authored-by: tomoya <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777418912b45d36a73c5",
    "number": 1222,
    "body": "This PR moves the `test_executor.cpp` file into the executors directory (https://github.com/ros2/rclcpp/commit/71f36bad72c6fff538d5e983487f872d6dacedb8) and parametrizes it for executor implementations (https://github.com/ros2/rclcpp/commit/93ee9c6b68a7b77ba956197137e56c801ff97a57). For the sake of coverage, several new spin_until_future_complete tests were added.\r\n\r\nThis PR won't pass CI until #1217 is merged.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/parameterize-test-executors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Parameterize test executors for all executor types (#1222)\n\n* Relocate test_executor to executors directory\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Parametrize test_executors for all executor types\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* More fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Adding issue for tracking\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621777518912b45d36a73c6",
    "number": 1221,
    "body": "This adds a unit test for StaticSingleThreadedExecutor's StaticExecutorEntityCollector class. Between this and the expanded executors test, this adds gets coverage to 90-95% for this class.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/test-static-executor-entities-collector",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add unit test for static_executor_entities_collector (#1221)\n\n* Add unit test for static_executor_entities_collector\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777718912b45d36a73c7",
    "number": 1220,
    "body": "As a quick-resolution to #1219 this PR proposes to derive and throw a new exception of type \"UnimplementedError\" in `spin_some`, `spin_all` and `spin_once` for StaticSingleThreadedExecutor. These derived methods currently don't function correctly and so this will help notify users that it is a known issue. I'm happy to take a different approach on this if people have other suggestions.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/derive-spin-variants-static-executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Derive and throw exception in spin_some spin_all for StaticSingleThreadedExecutor (#1220)\n\n* Derive and throw exception in spin_some spin_all\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix style and add unit test\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621777818912b45d36a73c8",
    "number": 1218,
    "body": "",
    "head_branch": "peterpena/cbg-executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Adding callback groups in executor (#1218)\n\n* Initial version of callback-group-based Executor.\r\n\r\nSigned-off-by: Ralph Lange <ralph.lange@de.bosch.com>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* removed RealTimeClass\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* can add multiple cbgs and check if callback is owned by another exec before adding\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* cbg var for option to add to executor\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* getter for callback groups in executor\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* test\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* add many nodes and callback groups together\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* test for map of callback groups and nodes\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* added a test for map and callback group duplication\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* add cbg that are not assign and allow to do so, only iterate through groups in maps\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* memory strat should only add handles that belong to it\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed executor deconstructor seg fault bug\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed remove node and guard condition bug\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed uncrustify\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* cpplint\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* remove line break and add static executor in cmakelist\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* enabled static executor and added add callback group feature\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed test_allocator_memory_strategy\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* test allocator\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* test mem strat with cbg feat\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* remove cbg in static executor\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* adapted guard conditions\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* collector deconstructor and remove cbg when remove node in static\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed invalid group ptr seg fault introduced in wait for work\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* passes the test allocator mem strat\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* added weak node check in memory strategy; passes brawner unit tests\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* uncrustify for tests\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* lint and uncrustify\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* exposed allowable state at the node level and added unit tests\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* unit test to add one node mult executors\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* frixed allow executor reset bug\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* code block for callback group and executor\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* add code block for add/remove cbg\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* add comments for add/remove callback group\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* changed from atomic to const\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed test different cbgs for nodes\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* lint\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* added disabled nodes in services and map\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* changed var name to suggestion\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* comment for callback group constructor\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* header ordering\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* removed const ref and made protected\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* removing internals in comments\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Apply suggestions from code review\r\n\r\ngeneral fixes\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* remove white space\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Apply suggestions from code review\r\n\r\ngeneral fix\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fix comments\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fix comments\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fix comments\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* general fixes\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* clang tidy and llvm deprecation and overriden fixes\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* made typedtests\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* add has callback method for static executor\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* removed map function and added comment about remove callback group\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* adding two different data structures for add_node and add_callback_group\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* nitpick changes to documentation\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* move implementation out of header\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* use const &\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* splitting add node and add cbg in static executro\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* get cbgs for static executor and collector\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* add weak nodes for nodes\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* get next ready executable with two maps\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* passes tests\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed has node function\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed collect entities\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* added unit tests for removal and added 3rd data struct\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* eliminated cbs vector\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* reusing same functions and added comments\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* documentation, more exceptions, and name changes\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Apply suggestions from code review\r\n\r\nchanges for review\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed deconstructor, first remove cbgs, then nodes\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* fixed remove node issue\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* throw an exception in remove node of collector\r\n\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\n* Update rclcpp/include/rclcpp/executor.hpp\r\n\r\nCo-authored-by: William Woodall <william@osrfoundation.org>\r\nSigned-off-by: Pedro Pena <peter.a.pena@gmail.com>\r\n\r\nCo-authored-by: Ralph Lange <ralph.lange@de.bosch.com>\r\nCo-authored-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621777918912b45d36a73c9",
    "number": 1217,
    "body": "In the implementation of `spin_until_future_complete` in static_single_threaded_executor, it recreated the entities_collector. However, due to the logic of the class, this removed the nodes from being considered for work. It's my understanding of this code that the entities collector should only be created in the constructor.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/remove-recreation-entities-collector",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove recreation of entities_collector (#1217)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777a18912b45d36a73ca",
    "number": 1216,
    "body": "Fixes #1215\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777b18912b45d36a73cb",
    "number": 1214,
    "body": "Backport of #1210.",
    "head_branch": "dirk-thomas/backport-foxy-1210",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "link against thread library where necessary (#1210) (#1214)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777c18912b45d36a73cc",
    "number": 1213,
    "body": "Fixes #1007, but there is a logical race condition that results in the same error, see #1212.",
    "head_branch": "audrow/fix-ring-race-in-ring-buffer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make ring buffer thread-safe (#1213)\n\n* Add recursive mutexs to ring buffer to avoid race conditions\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>\r\n\r\n* Replace recursive_mutex with shared_timed_mutex\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>\r\n\r\n* Replace shared_timed_mutex with regular mutex\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>\r\n\r\n* Document the ring buffer\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>\r\n\r\n* Remove trailing whitespace\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>\r\n\r\n* Fix typo in has_data() document string\r\n\r\nSigned-off-by: Audrow <audrow.nash@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621777d18912b45d36a73cd",
    "number": 1211,
    "body": "Tiny bug I came across with while reviewing another PR.\r\n\r\nCI up to `rclcpp`:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11360)](http://ci.ros2.org/job/ci_linux/11360/)\r\n* Linux-aarch64 [![Build Status](https://ci.ros2.org/job/ci_linux-aarch64/6597/badge/icon)](https://ci.ros2.org/job/ci_linux-aarch64/6597/)\r\n* OSX [![Build Status](https://ci.ros2.org/job/ci_osx/9320/badge/icon)](https://ci.ros2.org/job/ci_osx/9320/)\r\n* Windows  [![Build Status](https://ci.ros2.org/job/ci_windows/11259/badge/icon)](https://ci.ros2.org/job/ci_windows/11259/)",
    "head_branch": "hidmic/fix-node-options-assignment",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix rclcpp::NodeOptions::operator= (#1211)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777e18912b45d36a73ce",
    "number": 1210,
    "body": "Add missing link against the thread library which fails: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=nightly_linux_clang_libcxx&build=467)](https://ci.ros2.org/view/nightly/job/nightly_linux_clang_libcxx/467/)\r\n\r\nClang-libcxx build (also skipping `intra_process_demo` from ros2/ci#491): [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11351)](https://ci.ros2.org/job/ci_linux/11351/)\r\n\r\nThe usual set of CI builds:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11354)](http://ci.ros2.org/job/ci_linux/11354/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6584)](http://ci.ros2.org/job/ci_linux-aarch64/6584/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9309)](http://ci.ros2.org/job/ci_osx/9309/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11245)](http://ci.ros2.org/job/ci_windows/11245/)",
    "head_branch": "dirk-thomas/fix-clang-libcxx",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "link against thread library where necessary (#1210)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621777f18912b45d36a73cf",
    "number": 1209,
    "body": "* Fix type conversions\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Add static_casts\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Address PR comments\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Remove one time use variable\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>",
    "head_branch": "hidmic/dashing/backport-901",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[dashing backport] Type conversions fixes (#901) (#1209)\n\n* Type conversions fixes (#901)\r\n\r\n* Fix type conversions\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Add static_casts\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Address PR comments\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Remove one time use variable\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Please cpplint\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nCo-authored-by: Monika Idzik <monika.idzik@apex.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621778118912b45d36a73d0",
    "number": 1208,
    "body": "Backport to Dashing original PR https://github.com/ros2/rclcpp/pull/1163\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/bakcport/1163",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[Backport Dashing]Fixed doxygen warnings (#1163) (#1208)\n\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621778218912b45d36a73d1",
    "number": 1207,
    "body": "* Fix conversion from negative Duration or Time to the respective message type and throw in Duration::to_rmw_time() if the duration is negative.\r\nrmw_time_t cannot represent negative durations.\r\n\r\nConstructors and assignment operators can be just defaulted.\r\n\r\nOther changes are mainly cosmetical, to make conversions between signed\r\nand unsigned types and between 32-bit and 64-bit types more explicit.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add -Wconversion compiler option and fix implicit conversions that might alter the value\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Fix usage of fixture class in some unit tests by using gtest macro TEST_F() instead of TEST().\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add compiler option -Wno-sign-conversion to fix build with Clang on macOS\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>",
    "head_branch": "hidmic/dashing/backport-1188",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[dashing backport] Fix conversion of negative durations to messages (#1188) (#1207)\n\n* Fix conversion of negative durations to messages (#1188)\r\n\r\n* Fix conversion from negative Duration or Time to the respective message type and throw in Duration::to_rmw_time() if the duration is negative.\r\nrmw_time_t cannot represent negative durations.\r\n\r\nConstructors and assignment operators can be just defaulted.\r\n\r\nOther changes are mainly cosmetical, to make conversions between signed\r\nand unsigned types and between 32-bit and 64-bit types more explicit.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add -Wconversion compiler option and fix implicit conversions that might alter the value\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Fix usage of fixture class in some unit tests by using gtest macro TEST_F() instead of TEST().\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add compiler option -Wno-sign-conversion to fix build with Clang on macOS\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Drop tests for future API.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nCo-authored-by: Johannes Meyer <johannes@intermodalics.eu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621778318912b45d36a73d2",
    "number": 1206,
    "body": "`this->node_options_` might still be `nullptr` for a default initialized NodeOptions instance.\r\n`use_global_arguments()` must return `this->use_global_arguments_`, in analogy to `NodeOptions::enable_rosout()`.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>",
    "head_branch": "hidmic/dashing/backport-1176",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix implementation of NodeOptions::use_global_arguments() (#1176) (#1206)\n\n`this->node_options_` might still be `nullptr` for a default initialized NodeOptions instance.\r\n`use_global_arguments()` must return `this->use_global_arguments_`, in analogy to `NodeOptions::enable_rosout()`.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\nCo-authored-by: Johannes Meyer <johannes@intermodalics.eu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621778418912b45d36a73d3",
    "number": 1205,
    "body": "This code isn't doing anything:\r\n\r\n- https://github.com/ros2/rcl/blob/b9cfc243bf018091b5c5bcb5585d19591daf4ae6/rcl/src/rcl/node_options.c#L32\r\n- https://github.com/ros2/rcl/blob/b9cfc243bf018091b5c5bcb5585d19591daf4ae6/rcl/src/rcl/node.c#L257-L264\r\n\r\nI'm planning to completely remove domain id from `node options`, and use the one in `init options` instead.\r\nThat was agreed during the implementation of https://github.com/ros2/rmw/issues/183, but we never finished that API change.\r\n\r\nIt isn't much of an issue currently, as there's no API in `rclpy` or `rclcpp` to modify the domain id.",
    "head_branch": "ivanpauno/delete-node-options-domain-id",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove usage of domain id in node options (#1205)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621778518912b45d36a73d4",
    "number": 1204,
    "body": "Fixes a race between one thread spinning and calling `rclcpp::shutdown()` from another thread by making the critical sections mutually exclusive.\r\n\r\nThe test has been failing since the first nightly build (https://ci.ros2.org/view/nightly/job/nightly_osx_repeated/1939/testReport/(root)/projectroot/test_lifecycle_service_client/) after being added in #1045.\r\n\r\nBefore: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9267)](https://ci.ros2.org/job/ci_osx/9267/)\r\nAfter: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9275)](https://ci.ros2.org/job/ci_osx/9275/)",
    "head_branch": "dirk-thomas/fix-race-in-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix race in test_lifecycle_service_client (#1204)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621778618912b45d36a73d5",
    "number": 1203,
    "body": "These tests [have been failing consistently in OSX nightlies](https://ci.ros2.org/view/nightly/job/nightly_osx_debug/1586/testReport/(root)/projectroot/test_publisher_subscription_count_api/), due to non-shutdown `rclcpp::Context` instances being held in test parameter values with static storage. This pull request refactors these tests to avoid running into that issue in the first place.\r\n\r\nCI up to `rclcpp` building for Debug\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9271)](http://ci.ros2.org/job/ci_osx/9271/) (`xmllint` timed out and jenkins connection was lost)\r\n ",
    "head_branch": "hidmic/fix-pub-sub-count-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix pub/sub count API tests. (#1203)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621778718912b45d36a73d6",
    "number": 1202,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/unittest-node-interfaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Unit tests for node interfaces (#1202)\n\n* Unit tests for node interfaces\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Adjusting comment\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621778818912b45d36a73d7",
    "number": 1201,
    "body": "The `build_doc.sh` script in https://github.com/ros2/docs.ros2.org/ is trying to build the documentation of this package for Dashing, but there is not Doxyfile. Backporting the commit.\r\n\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n",
    "head_branch": "ahcorde/backport/doxyfile_components_dashing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added rclcpp_components Doxyfile (#1091) (#1201)\n\n* Added rclcpp components Doxyfile\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621778918912b45d36a73d8",
    "number": 1200,
    "body": "The `build_doc.sh` script in https://github.com/ros2/docs.ros2.org/ is trying to build the documentation of this package for Eloquent, but there is not Doxyfile. Backporting the commit.\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/backport/doxyfile_components_eloquent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added rclcpp_components Doxyfile (#1091) (#1200)\n\n* Added rclcpp components Doxyfile\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621778a18912b45d36a73d9",
    "number": 1199,
    "body": "as title says. closes #1129 ",
    "head_branch": "claire/deprecate_set_params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove deprecated set_on_parameters_set_callback function (#1199)\n\nSigned-off-by: claireyywang <22240514+claireyywang@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621778c18912b45d36a73da",
    "number": 1198,
    "body": "This adds the remaining tests for allocator_memory_strategy.hpp and is directly dependent on #1197. The new commit is https://github.com/ros2/rclcpp/commit/5a88b09bfe0ad7f068f5d53b7f6de04f69f58a65\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11300)](http://ci.ros2.org/job/ci_linux/11300/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6546)](http://ci.ros2.org/job/ci_linux-aarch64/6546/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9258)](http://ci.ros2.org/job/ci_osx/9258/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11204)](http://ci.ros2.org/job/ci_windows/11204/)",
    "head_branch": "brawner/allocator-memory-strategy-tests-p2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Unit tests for allocator_memory_strategy.cpp part 2 (#1198)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621778d18912b45d36a73db",
    "number": 1197,
    "body": "Part 1 of 2 for this file, but part 2 of 3 for memory strategies overall.\r\n\r\nThis adds unit tests for src/rclcpp/allocator_memory_strategy.hpp, except for `get_next_*` functions which is separated out. This is related, but not dependent on #1189. However, there might be conflicts when that PR is merged first.\r\n\r\nThis PR also adds a testing depend to `osrf_testing_tools_cpp` for rcl related cleanup in the test file. This dependency is relied on by dependencies of this package, so the graph is not significantly changed. Nor should build times up to rclcpp be affected.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/allocator-memory-strategy-tests-p1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Unit tests for allocator_memory_strategy.hpp (#1197)\n\n* Unit tests for allocator_memory_strategy.hpp\r\n\r\nPart 1 of 2 for this file, but part 2 of 3 for memory strategies\r\noverall\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove find_package\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Remove ref to osrf_testing_tools\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621778e18912b45d36a73dc",
    "number": 1196,
    "body": "Adds unit tests better coverage of node_interfaces.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11286)](http://ci.ros2.org/job/ci_linux/11286/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6535)](http://ci.ros2.org/job/ci_linux-aarch64/6535/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9236)](http://ci.ros2.org/job/ci_osx/9236/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11191)](http://ci.ros2.org/job/ci_windows/11191/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/test-node-interfaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621778f18912b45d36a73dd",
    "number": 1195,
    "body": "https://github.com/ros2/rclcpp/pull/1182 backport to dashing.",
    "head_branch": "topic-20200618-fix-message-dashing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[dashing] backport #1182 (#1195)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779018912b45d36a73de",
    "number": 1194,
    "body": "https://github.com/ros2/rclcpp/pull/1182 backport to eloquent.",
    "head_branch": "topic-20200618-fix-message-eloquent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix exception message on rcl_clock_init. (#1194)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779118912b45d36a73df",
    "number": 1193,
    "body": "https://github.com/ros2/rclcpp/pull/1182 backport to foxy.",
    "head_branch": "topic-20200618-fix-message-foxy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix exception message on rcl_clock_init (#1182) (#1193)\n\n* fix exception message on rcl_clock_init.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* error messages start with lower case.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779218912b45d36a73e0",
    "number": 1192,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/foxy-create-subscription-includes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add create_publisher include to create_subscription (#1180) (#1192)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779318912b45d36a73e1",
    "number": 1191,
    "body": "Signed-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/backport/1163",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixed doxygen warnings (#1163) (#1191)\n\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621779418912b45d36a73e2",
    "number": 1189,
    "body": "Adds several tests for memory strategy. I will likely split this up into a couple of PRs. I still need to add coverage for memory_strategy.cpp.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-memory-strategy-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Unittests for memory strategy files, except allocator_memory_strategy (#1189)\n\n* Unit tests for memory_strategy classes (part 1)\r\n\r\nAdds unit tests for:\r\n* strategies/message_pool_memory_strategy.hpp\r\n* memory_strategy.cpp\r\n* message_memory_strategy.cpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR Feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Update with new macros\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621779518912b45d36a73e3",
    "number": 1188,
    "body": "This pull request is a follow-up on https://github.com/ros2/rclcpp/pull/901, to fix conversions of negative `Duration` (and `Time`) instances to the respective message times in `builtin_interfaces`, where the `nanosec` part is represented as an unsigned `uint32` integer type.\r\n\r\nThe implicit conversion from `rclcpp::Duration` to `builtin_interfaces::msg::Duration` was actually wrong for negative values, because the default integer division in C/C++ rounds towards zero and the modulo operator returns a negative remainder for negative numerators. With the previous implementation this negative remainder was then cast to `uint32_t` without a range check, which then results in timestamps that are 2¬≥¬≤ nanoseconds or 4.294967296 seconds too big if converted back to `rclcpp::Duration`.\r\n\r\nFor\r\n```cpp\r\nrclcpp::Duration duration(-1);\r\nbuiltin_interfaces::msg::Duration msg_duration = duration;\r\nstd::cout\r\n  << \"sec: \" << msg_duration.sec << '\\n'\r\n  << \"nanosec: \" << msg_duration.nanosec << '\\n'\r\n  << \"back to Duration(msg_duration).nanoseconds(): \" << Duration(msg_duration).nanoseconds() << '\\n';\r\n```\r\nthe output was\r\n```\r\nsec: 0\r\nnanosec: 4294967295\r\nback to Duration(msg_duration).nanoseconds(): 4294967295\r\n```\r\ninstead of\r\n```\r\nsec: -1\r\nnanosec: 999999999\r\nback to Duration(msg_duration).nanoseconds(): -1\r\n```\r\n\r\nThe conversion from `rclcpp::Duration` to `rmw_time_t` had a similar problem. In `rmw_time_t` both, the `sec` and `nsec` parts are unsigned 64 bit types:\r\n```cpp\r\ntypedef struct RMW_PUBLIC_TYPE rmw_time_t\r\n{\r\n  uint64_t sec;\r\n  uint64_t nsec;\r\n} rmw_time_t;\r\n```\r\nSo the type cannot represent negative values. Was it intentional to represent `rmw_time_t` with 128 bits in total, or should it have been `uint32_t` instead? I added a check that throws `std::runtime_error` when trying to call `Duration::to_rmw_time()` for negative values.\r\n\r\nFor `rclcpp::Time` I am not sure whether it is supposed to have negative values (times before the epoch) or not. There was a discussion about that in https://github.com/ros2/rclcpp/issues/525. Some constructors and assignment operators throw, others don't. For example it is possible to construct a negative `rclcpp::Time` instance from a negative `int64_t` nanosecond value:\r\n\r\nhttps://github.com/ros2/rclcpp/blob/79d1ba1cceab26791496b3ead9873dee5232ea9a/rclcpp/src/rclcpp/time.cpp#L60-L64\r\n\r\nBecause of that, and because also the internal storage type `rcl_time_point_value_t` and [`builtin_interfaces/Time`](https://github.com/ros2/rcl_interfaces/blob/5a4a3bd4da4cfc35ad377f2966714321b2951c89/builtin_interfaces/msg/Time.msg) can also hold negative values, I applied the same patch for the conversion to the message type as in `rclcpp::Duration`. If negative values should be forbidden for `rclcpp::Time`, which is the conclusion of https://github.com/ros2/rclcpp/issues/525#issuecomment-414425011 if I understand correctly, then in my opinion this should be addressed in a separate pull request and the added checks (and unit test) can be removed again.\r\n\r\nAll other changes are mainly cosmetic, either to make implicit casts between signed and unsigned integer types explicit, or to match the implementation of constructors and respective assignment operators. In order to at least emit a warning and to avoid similar problems with unintended integer or floating point conversions that may alter the value, I suggest to add `-Wconversion` to the compiler options of `rclcpp`. It is not included in `-Wall` or `-Wextra`. But this warning option would not have helped in case of the buggy `Duration` conversions because the bad casts without checking for over- or underflow were explicit. Also the explicit casts added in https://github.com/ros2/rclcpp/pull/901 might hide problems in case the argument is out of range of the target type.\r\n\r\nThe copy constructors and assignment operators are equivalent to the default implementations, in the sense that they just copy the one and only member of the `Duration` or `Time` instance. Maybe this used to be different in an earlier version? The assignment of `rcl_time_.nanoseconds = rhs.rcl_time_.nanoseconds` in the copy constructor `Time::Time(const Time &)` was redundant because `rcl_time_` is already copied in the initializer list.\r\n\r\nThere is another problem with the definition of time-related macros defined in [rcutils/time.h](https://github.com/ros2/rcutils/blob/8c1d190fc5e6425f83c3e8716a5ee861bbf82cf1/include/rcutils/time.h) which are also indirectly used for the `Duration` and `Time` implementations in `rclcpp`: They don't have parentheses around the macro argument:\r\n\r\n```cpp\r\n/// Convenience macro to convert seconds to nanoseconds.\r\n#define RCUTILS_S_TO_NS(seconds) (seconds * (1000LL * 1000LL * 1000LL))\r\n/// Convenience macro to convert milliseconds to nanoseconds.\r\n#define RCUTILS_MS_TO_NS(milliseconds) (milliseconds * (1000LL * 1000LL))\r\n/// Convenience macro to convert microseconds to nanoseconds.\r\n#define RCUTILS_US_TO_NS(microseconds) (microseconds * 1000LL)\r\n\r\n/// Convenience macro to convert nanoseconds to seconds.\r\n#define RCUTILS_NS_TO_S(nanoseconds) (nanoseconds / (1000LL * 1000LL * 1000LL))\r\n/// Convenience macro to convert nanoseconds to milliseconds.\r\n#define RCUTILS_NS_TO_MS(nanoseconds) (nanoseconds / (1000LL * 1000LL))\r\n/// Convenience macro to convert nanoseconds to microseconds.\r\n#define RCUTILS_NS_TO_US(nanoseconds) (nanoseconds / 1000LL)\r\n```\r\n\r\nSo `RCUTILS_S_TO_NS(1 + 1)` is not `2000000000LL` as one might expect, but `1000000001LL`, because of operator precedence rules. This case is not triggered in `rclcpp`. I will open a separate pull request in https://github.com/ros2/rcutils for that.\r\n\r\nLast but not least, new unit test cases have been added to `test_duration.cpp` and `test_time.cpp` to cover all the conversions and potential failure cases above. Without the patches in `time.cpp` and `duration.cpp` the new tests would fail as follows:\r\n```\r\nroot@c610b7e4c97e:/ros2_ws# ./build/rclcpp/test/test_duration \r\nRunning main() from /opt/ros/foxy/src/gtest_vendor/src/gtest_main.cc\r\n[==========] Running 8 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 8 tests from TestDuration\r\n[ RUN      ] TestDuration.operators\r\n[       OK ] TestDuration.operators (0 ms)\r\n[ RUN      ] TestDuration.chrono_overloads\r\n[       OK ] TestDuration.chrono_overloads (0 ms)\r\n[ RUN      ] TestDuration.overflows\r\n[       OK ] TestDuration.overflows (1 ms)\r\n[ RUN      ] TestDuration.negative_duration\r\n[       OK ] TestDuration.negative_duration (0 ms)\r\n[ RUN      ] TestDuration.maximum_duration\r\n[       OK ] TestDuration.maximum_duration (0 ms)\r\n[ RUN      ] TestDuration.from_seconds\r\n[       OK ] TestDuration.from_seconds (0 ms)\r\n[ RUN      ] TestDuration.std_chrono_constructors\r\n[       OK ] TestDuration.std_chrono_constructors (0 ms)\r\n[ RUN      ] TestDuration.conversions\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:203: Failure\r\nExpected equality of these values:\r\n  duration_msg.sec\r\n    Which is: 0\r\n  -1\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:204: Failure\r\nExpected equality of these values:\r\n  duration_msg.nanosec\r\n    Which is: 3794967296\r\n  HALF_SEC_IN_NS\r\n    Which is: 500000000\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:205: Failure\r\nExpected equality of these values:\r\n  rclcpp::Duration(duration_msg).nanoseconds()\r\n    Which is: 3794967296\r\n  -HALF_SEC_IN_NS\r\n    Which is: -500000000\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:207: Failure\r\nExpected: duration.to_rmw_time() throws an exception of type std::overflow_error.\r\n  Actual: it throws nothing.\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:220: Failure\r\nExpected: duration.to_rmw_time() throws an exception of type std::overflow_error.\r\n  Actual: it throws nothing.\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:229: Failure\r\nExpected equality of these values:\r\n  duration_msg.sec\r\n    Which is: -1\r\n  -2\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:230: Failure\r\nExpected equality of these values:\r\n  duration_msg.nanosec\r\n    Which is: 3794967296\r\n  HALF_SEC_IN_NS\r\n    Which is: 500000000\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:231: Failure\r\nExpected equality of these values:\r\n  rclcpp::Duration(duration_msg).nanoseconds()\r\n    Which is: 2794967296\r\n  -ONE_AND_HALF_SEC_IN_NS\r\n    Which is: -1500000000\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_duration.cpp:233: Failure\r\nExpected: duration.to_rmw_time() throws an exception of type std::overflow_error.\r\n  Actual: it throws nothing.\r\n[  FAILED  ] TestDuration.conversions (1 ms)\r\n[----------] 8 tests from TestDuration (2 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 8 tests from 1 test case ran. (2 ms total)\r\n[  PASSED  ] 7 tests.\r\n[  FAILED  ] 1 test, listed below:\r\n[  FAILED  ] TestDuration.conversions\r\n\r\n 1 FAILED TEST\r\n\r\nroot@c610b7e4c97e:/ros2_ws# ./build/rclcpp/test/test_time\r\nRunning main() from /opt/ros/foxy/src/gtest_vendor/src/gtest_main.cc\r\n[==========] Running 8 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 8 tests from TestTime\r\n[ RUN      ] TestTime.clock_type_access\r\n[       OK ] TestTime.clock_type_access (0 ms)\r\n[ RUN      ] TestTime.clock_jump_callback_destruction_order\r\n[       OK ] TestTime.clock_jump_callback_destruction_order (0 ms)\r\n[ RUN      ] TestTime.time_sources\r\n[       OK ] TestTime.time_sources (0 ms)\r\n[ RUN      ] TestTime.conversions\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_time.cpp:167: Failure\r\nExpected equality of these values:\r\n  time_msg.sec\r\n    Which is: 0\r\n  -1\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_time.cpp:168: Failure\r\nExpected equality of these values:\r\n  time_msg.nanosec\r\n    Which is: 3794967296\r\n  HALF_SEC_IN_NS\r\n    Which is: 500000000\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_time.cpp:171: Failure\r\nExpected: { rclcpp::Time negative_time(time_msg); } throws an exception.\r\n  Actual: it doesn't.\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_time.cpp:193: Failure\r\nExpected equality of these values:\r\n  time_msg.sec\r\n    Which is: -1\r\n  -2\r\n/ros2_ws/src/rclcpp/rclcpp/test/rclcpp/test_time.cpp:194: Failure\r\nExpected equality of these values:\r\n  time_msg.nanosec\r\n    Which is: 3794967296\r\n  HALF_SEC_IN_NS\r\n    Which is: 500000000\r\n[  FAILED  ] TestTime.conversions (2 ms)\r\n[ RUN      ] TestTime.operators\r\n[       OK ] TestTime.operators (1 ms)\r\n[ RUN      ] TestTime.overflow_detectors\r\n[       OK ] TestTime.overflow_detectors (0 ms)\r\n[ RUN      ] TestTime.overflows\r\n[       OK ] TestTime.overflows (1 ms)\r\n[ RUN      ] TestTime.seconds\r\n[       OK ] TestTime.seconds (0 ms)\r\n[----------] 8 tests from TestTime (4 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 8 tests from 1 test case ran. (4 ms total)\r\n[  PASSED  ] 7 tests.\r\n[  FAILED  ] 1 test, listed below:\r\n[  FAILED  ] TestTime.conversions\r\n\r\n 1 FAILED TEST\r\n ```\r\n",
    "head_branch": "fix/time-duration-conversion-to-msg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix conversion of negative durations to messages (#1188)\n\n* Fix conversion from negative Duration or Time to the respective message type and throw in Duration::to_rmw_time() if the duration is negative.\r\nrmw_time_t cannot represent negative durations.\r\n\r\nConstructors and assignment operators can be just defaulted.\r\n\r\nOther changes are mainly cosmetical, to make conversions between signed\r\nand unsigned types and between 32-bit and 64-bit types more explicit.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add -Wconversion compiler option and fix implicit conversions that might alter the value\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Fix usage of fixture class in some unit tests by using gtest macro TEST_F() instead of TEST().\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>\r\n\r\n* Add compiler option -Wno-sign-conversion to fix build with Clang on macOS\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621779618912b45d36a73e4",
    "number": 1187,
    "body": "`tracetools`' QL was just bumped to 2: https://gitlab.com/micro-ROS/ros_tracing/ros2_tracing/-/merge_requests/179",
    "head_branch": "update-tracetools-quality-level",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update tracetools' QL to 2 in rclcpp's QD (#1187)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779718912b45d36a73e5",
    "number": 1185,
    "body": "Backport #988 to Foxy",
    "head_branch": "jacob/backport_988",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix get_node_time_source_interface() docstring (#988) (#1185)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621779818912b45d36a73e6",
    "number": 1184,
    "body": "This adds a missing test for logger.cpp, and completes the coverage for all logging related files (logger.hpp, logging.hpp, logger.cpp) without adding a second librclcpp.so with `RCLCPP_LOGGING_ENABLED` set to false. `logging_mutex.hpp/cpp` is also covered as well as possible.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/rclcpp-logger-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add unit tests for logging functionality (#1184)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779a18912b45d36a73e7",
    "number": 1183,
    "body": "fix https://github.com/ros2/ros2/issues/644\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20200618-callback-forward",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "callback should be perfectly-forwarded. (#1183)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779b18912b45d36a73e8",
    "number": 1182,
    "body": "Signed-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20200618-fix-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix exception message on rcl_clock_init. (#1182)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779c18912b45d36a73e9",
    "number": 1181,
    "body": "This adds tests for:\r\nAdds coverage for:\r\n  * any_service_callback.hpp\r\n  * any_subscription_callback.hpp\r\n  * create_subscription.hpp\r\n\r\nDirectly depends on #1180 ",
    "head_branch": "brawner/rclcpp-include-tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Unit tests for some header-only functions/classes (#1181)\n\n* Unit tests for header-only functions/classes\r\n\r\nAdds coverage for:\r\n  * any_service_callback.hpp\r\n  * any_subscription_callback.hpp\r\n  * create_subscription.hpp\r\n  * create_timer.hpp\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address PR feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779d18912b45d36a73ea",
    "number": 1180,
    "body": "This header file needs to include `create_publisher.hpp` for the statistics publisher. Otherwise it can't be included by itself in a test or other source file.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/create-subscription-includes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add create_publisher include to create_subscription (#1180)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779e18912b45d36a73eb",
    "number": 1179,
    "body": "This is the second PR related to https://github.com/ros2/rclcpp/issues/1177. I believe along with #1178 the issue will be sufficiently addressed. \r\n\r\nBecause the initialized `rcl_timer_t` is invalid, no other function calls in TimerBase will be successful. the destructor of `GenericTimer` in fact calls cancel, which will fail. Therefore, I think it's best to just throw the exception up front in the constructor of TimerBase.\r\n\r\nThe test conflicts with the test in #1178 and whichever is merged second will need to be updated beforehand.",
    "head_branch": "brawner/timer-init-neg-period",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Throw exception if rcl_timer_init fails (#1179)\n\n* Throw exception if rcl_timer_init fails\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add bad-argument tests for GenericTimer\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Add comments\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Address feedback\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621779f18912b45d36a73ec",
    "number": 1178,
    "body": "This is the first of the fixes related to #1177. It adds checks for negative duration values and duration values larger than nanoseconds::max(). As described in the included comment, it's difficult to solve the general problem of comparing one duration value to another for safe casting. I intend to follow up with a PR, (though not immediately) to rcpputils to provide a more general solution.\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/timer-period-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check period duration in create_wall_timer (#1178)\n\n* Check period duration in create_wall_timer\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Adding comments\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a018912b45d36a73ed",
    "number": 1176,
    "body": "`this->node_options_` might still be `nullptr` for a default initialized NodeOptions instance. Calling `use_global_arguments()` triggers a segmentation fault.\r\n\r\n`use_global_arguments()` must return `this->use_global_arguments`, in analogy to [`NodeOptions::enable_rosout()`](https://github.com/meyerj/rclcpp/blob/543d6d18b153ff136c81da312833aee14c58cdf0/rclcpp/src/rclcpp/node_options.cpp#L190-L194):\r\n\r\nhttps://github.com/ros2/rclcpp/blob/543d6d18b153ff136c81da312833aee14c58cdf0/rclcpp/src/rclcpp/node_options.cpp#L190-L194",
    "head_branch": "fix_node_options_use_global_arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix implementation of NodeOptions::use_global_arguments() (#1176)\n\n`this->node_options_` might still be `nullptr` for a default initialized NodeOptions instance.\r\n`use_global_arguments()` must return `this->use_global_arguments_`, in analogy to `NodeOptions::enable_rosout()`.\r\n\r\nSigned-off-by: Johannes Meyer <johannes@intermodalics.eu>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a118912b45d36a73ee",
    "number": 1173,
    "body": "As part of the push toward more coverage in rclcpp, which I'll be working toward over the next couple of weeks, I thought this would be a good time to cleanup the organization of the rclcpp testing directory.\r\n\r\nThis PR moves the CMakeLists.txt test logic into a subdirectory CMakeLists.txt file and puts all the test source files into `test/rclcpp`. This is similar to the test directory organization of `rcl`. \r\n\r\nThis will likely force many open PRs to rebase and make appropriate changes to test files.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11112)](http://ci.ros2.org/job/ci_linux/11112/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6418)](http://ci.ros2.org/job/ci_linux-aarch64/6418/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=9068)](http://ci.ros2.org/job/ci_osx/9068/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=11039)](http://ci.ros2.org/job/ci_windows/11039/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/separate-testing-cmake-lists",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Reorganize test directory and split CMakeLists.txt (#1173)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a218912b45d36a73ef",
    "number": 1172,
    "body": "Backport of #1151 \r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n",
    "head_branch": "dabonnie/foxy-backport-topic-stats-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add check for invalid topic statistics publish period (#1151) (#1172)\n\n* Add check for invalid topic statistics publish period\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Update documentation\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address doc formatting comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Update doc spacing\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a318912b45d36a73f0",
    "number": 1171,
    "body": "This PR will be merged with `--ff-only`, to preserve commit hashes.\r\nBackports #1023 #1167.\r\n\r\n#1167 was modified, as https://github.com/ros2/rclcpp/pull/844 wasn't backported to eloquent.\r\nI don't think it's a good idea to backport #844, as it introduces a behavior change that can affect some use cases (see discussion in https://github.com/ros2/rclcpp/pull/1156).",
    "head_branch": "ivanpauno/dashing-#1023-#1167",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check if context is valid when looping in spin_some (#1167)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a518912b45d36a73f1",
    "number": 1170,
    "body": "This PR will be merged with `--ff-only`, to preserve commit hashes.\r\nBackports #1023 #1167.\r\n\r\n#1167 was modified, as https://github.com/ros2/rclcpp/pull/844 wasn't backported to eloquent.\r\nI don't think it's a good idea to backport #844, as it introduces a behavior change that can affect some use cases (see discussion in https://github.com/ros2/rclcpp/pull/1156).",
    "head_branch": "ivanpauno/eloquent-#1023-#1167",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check if context is valid when looping in spin_some (#1167)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a618912b45d36a73f2",
    "number": 1169,
    "body": "This PR will be merged with `--ff-only`, to preserve commit hashes.\r\nBackports #1023 #1167.\r\n\r\nI will wait until tomorrow to merge, so all nightly jobs were ran once with these changes in.",
    "head_branch": "ivanpauno/foxy-#1023-#1167",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check if context is valid when looping in spin_some (#1167)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a718912b45d36a73f3",
    "number": 1168,
    "body": "This PR tries to fix issue #1148. An independent mutex is added to protect the `scheduled_timer_` set. This enables one thread to remove a timer from `scheduled_timer_` while the other thread asynchronously tries to find the next executable. This removes the issue where one thread cannot remove the timer while the other thread keeps waking up and tries to get the timer but cannot execute it because the other thread is locked by the mutex. I ran tests to verify single and multi threaded executors can run the timer callbacks without any issues:\r\n\r\n```\r\n-- run_test.py: extra environment variables to append:\r\n - LD_LIBRARY_PATH+=/home/peter/ros2_foxy/build/rclcpp\r\n-- run_test.py: invoking following command in '/home/peter/ros2_foxy/build/rclcpp':\r\n - /home/peter/ros2_foxy/build/rclcpp/test_wait_mutex --gtest_output=xml:/home/peter/ros2_foxy/build/rclcpp/test_results/rclcpp/test_wait_mutex.gtest.xml\r\n\r\nRunning main() from /home/peter/ros2_foxy/install/gtest_vendor/src/gtest_vendor/src/gtest_main.cc\r\n[==========] Running 2 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 2 tests from TestWaitMutex\r\n[ RUN      ] TestWaitMutex.set_timer_wait_mutex_multi_threaded\r\n[       OK ] TestWaitMutex.set_timer_wait_mutex_multi_threaded (12031 ms)\r\n[ RUN      ] TestWaitMutex.set_timer_wait_mutex_single_threaded\r\n[       OK ] TestWaitMutex.set_timer_wait_mutex_single_threaded (12024 ms)\r\n[----------] 2 tests from TestWaitMutex (24055 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 2 tests from 1 test case ran. (24062 ms total)\r\n[  PASSED  ] 2 tests.\r\n\r\n\r\n-- run_test.py: return code 0\r\n-- run_test.py: inject classname prefix into gtest result file '/home/peter/ros2_foxy/build/rclcpp/test_results/rclcpp/test_wait_mutex.gtest.xml'\r\n-- run_test.py: verify result file '/home/peter/ros2_foxy/build/rclcpp/test_results/rclcpp/test_wait_mutex.gtest.xml'\r\n```",
    "head_branch": "peterpena/timer-mutex",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a818912b45d36a73f4",
    "number": 1167,
    "body": "Taken from https://github.com/ros2/rclcpp/pull/1156#discussion_r438432897, so we can backport this change.",
    "head_branch": "ivanpauno/spin-some-check-ok",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check if context is valid when looping in spin_some (#1167)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177a918912b45d36a73f5",
    "number": 1165,
    "body": "closes https://github.com/ros2/rclcpp/issues/910\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20200611-domain-id-InitOptions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ability to configure domain_id via InitOptions. (#1165)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177aa18912b45d36a73f6",
    "number": 1164,
    "body": "See https://github.com/ros2/rmw/issues/226.",
    "head_branch": "ivanpauno/add-message-lost-event",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add message lost subscription event (#1164)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ab18912b45d36a73f7",
    "number": 1163,
    "body": "Fixed doxygen warnings\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/doxygen/warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixed doxygen warnings (#1163)\n\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177ac18912b45d36a73f8",
    "number": 1162,
    "body": "This pull request is related to #1021. Triggering a guard condition is only necessary when the executor is multithreaded and has at least one non-empty `MutualExclusive` callback group. In this PR I added a virtual function with a `trigger_guard_condition_` boolean that by default is set to false and is overriden by the `MultiThreadedExecutor` to set it to true when the conditions are met. The executor sets the trigger when `add_node` or `remove_node` is invoked. \r\n\r\nThe tests verify the `SingleThreadedExecutor` sets the trigger to false when `add_node` and `remove_node` are called and `MultiThreadedExecutor` sets it to true when there is a non-empty `MutualExclusive` callback group and false when the node is removed and executor no longer has a node to process:\r\n```\r\n-- run_test.py: extra environment variables to append:\r\n - LD_LIBRARY_PATH+=/home/peter/ros2_foxy/build/rclcpp\r\n-- run_test.py: invoking following command in '/home/peter/ros2_foxy/build/rclcpp':\r\n - /home/peter/ros2_foxy/build/rclcpp/test_guard_condition_trigger --gtest_output=xml:/home/peter/ros2_foxy/build/rclcpp/test_results/rclcpp/test_guard_condition_trigger.gtest.xml\r\n\r\nRunning main() from /home/peter/ros2_foxy/install/gtest_vendor/src/gtest_vendor/src/gtest_main.cc\r\n[==========] Running 2 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 2 tests from TestGuardConditionTrigger\r\n[ RUN      ] TestGuardConditionTrigger.set_trigger_guard_condition_multi_threaded\r\n[       OK ] TestGuardConditionTrigger.set_trigger_guard_condition_multi_threaded (21 ms)\r\n[ RUN      ] TestGuardConditionTrigger.set_trigger_guard_condition_single_threaded\r\n[       OK ] TestGuardConditionTrigger.set_trigger_guard_condition_single_threaded (8 ms)\r\n[----------] 2 tests from TestGuardConditionTrigger (29 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 2 tests from 1 test case ran. (39 ms total)\r\n[  PASSED  ] 2 tests.\r\n\r\n\r\n-- run_test.py: return code 0\r\n-- run_test.py: inject classname prefix into gtest result file '/home/peter/ros2_foxy/build/rclcpp/test_results/rclcpp/test_guard_condition_trigger.gtest.xml'\r\n-- run_test.py: verify result file '/home/peter/ros2_foxy/build/rclcpp/test_results/rclcpp/test_guard_condition_trigger.gtest.xml'\r\n```",
    "head_branch": "peterpena/guard-condition-trigger",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ad18912b45d36a73f9",
    "number": 1161,
    "body": "I assume it was simply copy-pasted from `rcl`'s QD: https://github.com/ros2/rcl/blob/9e5bcd2965626b04e5ccc626d97b83b73231e913/rcl/QUALITY_DECLARATION.md#L186 ",
    "head_branch": "fix-rclcpp-mention-qd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix reference to rclcpp in its QD (#1161)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ae18912b45d36a73fa",
    "number": 1160,
    "body": "Reverts #1159.\r\n\r\nAfter https://github.com/ros-visualization/interactive_markers/pull/72, we can safely apply #1113 again.\r\n\r\nAs commented in https://github.com/ros2/rclcpp/pull/1113#issuecomment-641298905, we can also consider an API compatible version, though I consider breaking API preferred in this case (the non-breaking API version is a bit unclean).\r\n\r\n",
    "head_branch": "ivanpauno/revert-#1113",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Revert \"Allow spin_until_future_complete to accept std::future (#1113)\" (#1159)\" (#1160)\n\nThis reverts commit bba9dce253d98a31a3069218504d26c4be9fb8b8.\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177af18912b45d36a73fb",
    "number": 1159,
    "body": "This reverts commit 898a30e0e25ddb0742436c71f5eb18681280aad3 since it fails to build: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=11064)](https://ci.ros2.org/job/ci_linux/11064/)",
    "head_branch": "revert-1113-feature/spin-until-future-complete",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Allow spin_until_future_complete to accept std::future (#1113)\" (#1159)\n\nThis reverts commit 898a30e0e25ddb0742436c71f5eb18681280aad3."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177b118912b45d36a73fc",
    "number": 1158,
    "body": "Update quality level and links to doc\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/qd/update",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump to QD to level 3 and fixed links (#1158)\n\n* Update quality level and links to doc\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Fixed wording and links\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Bump QD to level 3 and fixed links\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added missing dependency rcpputils to rclcpp_components\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added missing dependency rmw to rclcpp_lifecycle\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* changed ci_linux_coverage to nightly_linux_coverage\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177b218912b45d36a73fd",
    "number": 1157,
    "body": "When a component throws an exception in the constructor (e.g. when declaring a parameter) during loading, there's no other feedback than `Component constructor threw an exception`. This change introduces a similar construction to what is done earlier in the same file for constructing `class_loader::ClassLoader`: try to catch `std::exception` and append it's `what()` to the new `ComponentManagerException`.",
    "head_branch": "print_component_constructor_exception",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include original exception in ComponentManagerException (#1157)\n\n* Include original exception in ComponentManagerException\r\n\r\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>\r\n\r\n* Update rclcpp_components/src/component_manager.cpp\r\n\r\nCo-authored-by: tomoya <Tomoya.Fujita@sony.com>\r\nSigned-off-by: Martijn Buijs <martijn.buijs@gmail.com>\r\n\r\nCo-authored-by: tomoya <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177b318912b45d36a73fe",
    "number": 1156,
    "body": "This is a midpoint between the old implementation of `spin_some` and the one after https://github.com/ros2/rclcpp/pull/844.\r\n\r\nThe old `spin_some` implementation waited on entities when getting each executable.\r\nThat created starvation and other problems as described in https://github.com/ros2/rclcpp/pull/844.\r\n\r\nNow, it only collects entities once and then executes all the ones that are ready.\r\nThe problem is that executing \"all ready\" entities doesn't actually execute all of them.\r\n\r\ne.g.: If a subscription have a queue of 100 messages ready, it will only take one.\r\n\r\nThis proposes to wait on entities and execute all the ready executables repeatedly, until all of them are executed or the specified time has elapsed.",
    "head_branch": "ivanpauno/fix-spin-some",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add spin_all method to Executor (#1156)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177b418912b45d36a73ff",
    "number": 1155,
    "body": "part of https://github.com/ros2/rclcpp/issues/910\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20200604-domain-id-NodeOptions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177b518912b45d36a7400",
    "number": 1153,
    "body": "Further improvements on top of #1043.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=10976)](http://ci.ros2.org/job/ci_linux/10976/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=6314)](http://ci.ros2.org/job/ci_linux-aarch64/6314/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=8937)](http://ci.ros2.org/job/ci_osx/8937/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=10882)](http://ci.ros2.org/job/ci_windows/10882/)\r\n* Coverage [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux_coverage&build=138)](https://ci.ros2.org/job/ci_linux_coverage/138/)",
    "head_branch": "hidmic/rclcpp_action-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Increase rclcpp_action test coverage (#1153)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177b618912b45d36a7401",
    "number": 1151,
    "body": "Resolves #1147 \r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>",
    "head_branch": "dabonnie/check-topic-stat-publish-period",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add check for invalid topic statistics publish period (#1151)\n\n* Add check for invalid topic statistics publish period\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Update documentation\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address doc formatting comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Update doc spacing\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177b718912b45d36a7402",
    "number": 1150,
    "body": "Precisely what the title says, as RMW implementation may but are not bound to support it. This is making these tests fail on nightlies running with RMW implementations other than Fast-RTPS (see http://build.ros2.org/view/Fci/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/128/testReport/junit/(root)/rclcpp/test_subscription_topic_statistics_gtest_missing_result/)",
    "head_branch": "hidmic/no-multiple-type-topic",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Avoid multiple type topics in tests. (#1150)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177b818912b45d36a7403",
    "number": 1149,
    "body": "Recently, we detected a missing virtual dtor in [QOSEventHandlerBase](https://github.com/ros2/rclcpp/pull/1119#discussion_r428216447).\r\nIt sounded like something that the compiler could catch, and after looking a bit I found:\r\n\r\n>        -Wnon-virtual-dtor (C++ and Objective-C++ only)\r\n>           Warn when a class has virtual functions and an accessible non-virtual destructor itself or in > an accessible polymorphic base class, in which case it is possible but unsafe to delete an instance\r\n>           of a derived class through a pointer to the class itself or base class.  This warning is automatically enabled if -Weffc++ is specified.\r\n\r\ni.e.: if the class has a public non virtual dtor and virtual methods, the compiler will warn.\r\n\r\nThe new compiler option detected missing virtual dtors in `RateBase` and `TimerBase`, which are fixed in this PR too.\r\n\r\n---\r\n\r\nI propose also adding `-Woveloaded-virtual`:\r\n\r\n>        -Woverloaded-virtual (C++ and Objective-C++ only)\r\n>           Warn when a function declaration hides virtual functions from a base class.\r\n\r\nWe should probably add both warnings to all cpp packages.\r\n\r\n---\r\n\r\nI'm planning to rebase and merge, one commit adding the warnings and the other fixing the missing virtual dtors.",
    "head_branch": "ivanpauno/add-missing-virtual-dtors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing virtual destructors (#1149)\n\n* Add -Wnon-virtual-dtor -Woverloaded-virtual compiler options\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* Add missing virtual dtors\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\n* please linter\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177b918912b45d36a7404",
    "number": 1146,
    "body": "Test rate is sometimes failing on Windows, e.g.: https://ci.ros2.org/job/ci_windows/10825/testReport/junit/(root)/projectroot/test_rate/.\r\n\r\nWe've been fixing lately several issues we had on time based test on Windows, where the problem usually is that the test is using a small error-margin/period/etc (compared with the OS time slice).\r\n\r\nIn this case, the error message isn't clear:\r\n\r\n```\r\nC:\\ci\\ws\\src\\ros2\\rclcpp\\rclcpp\\test\\test_rate.cpp(36): error: Value of: period < delta\r\n  Actual: false\r\nExpected: true\r\n```\r\n\r\nThis will improve the error message when the test fails.",
    "head_branch": "ivanpauno/improve-test-error-msgs-in-test-rate",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make test_rate more reliable on Windows and improve error output when it fails (#1146)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ba18912b45d36a7405",
    "number": 1145,
    "body": "Addresses good observation in https://github.com/ros2/rclcpp/pull/1125#discussion_r432203724.",
    "head_branch": "ivanpauno/add-missing-logging-mutex-header",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing header in logging_mutex.cpp (#1145)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177bb18912b45d36a7406",
    "number": 1141,
    "body": "According to the cpp core guidelines (which imo is the best guideline about smart pointer signatures), if the function always retains shared ownership of a `std::shared_ptr`, then it must be passed by value.\r\nSee [R.34](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r34-take-a-shared_ptrwidget-parameter-to-express-that-a-function-is-part-owner) and [R.36](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r36-take-a-const-shared_ptrwidget-parameter-to-express-that-it-might-retain-a-reference-count-to-the-object-).\r\n\r\nThis breaks ABI and not API, so I don't think there are much chances of breaking downstream packages (this functionality is also pretty new and there is not much external usage, it was never part of a ros distribution).",
    "head_branch": "ivanpauno/pass-shared-ptr-by-value-when-possible",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Pass shared pointer by value instead than by const & when possible (#1141)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177bd18912b45d36a7407",
    "number": 1140,
    "body": "In https://github.com/ros2/rclcpp/pull/431, `const rcl_subscription_t *` was incorrectly modified to `const std::shared_ptr<rcl_subscription_t>`.\r\n\r\nThis fixes the issue.",
    "head_branch": "ivanpauno/get-subscription-handle-const",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "`SubscriptionBase::get_subscription_handle() const` should return a shared pointer to const value (#1140)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177be18912b45d36a7408",
    "number": 1138,
    "body": "Signed-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20200528-dashing-lock-inversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix lock-order-inversion (potential deadlock) (#1135) (#1138)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177bf18912b45d36a7409",
    "number": 1137,
    "body": "Signed-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>",
    "head_branch": "topic-20200528-eloquent-lock-inversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix lock-order-inversion (potential deadlock) (#1135) (#1137)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177c018912b45d36a740a",
    "number": 1136,
    "body": "",
    "head_branch": "ivanpauno/fix-failure-lifecycle-node-param-callback-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix test_lifecycle_node.cpp:check_parameters (#1136)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177c118912b45d36a740b",
    "number": 1135,
    "body": "Signed-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\nfix https://github.com/ros2/rclcpp/issues/1121.",
    "head_branch": "topic-20200527-fix-tasn-warning-deadlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix lock-order-inversion (potential deadlock) (#1135)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177c218912b45d36a740c",
    "number": 1134,
    "body": "Part of the effort to deprecate `set_on_parameters_set_callback` function in #1123 . It adds `add_on_set_parameters_callback` and `remove_on_set_parameters_callback` to `lifecycle_node`",
    "head_branch": "claire/add_missing_fn_lifecyle_node",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1134 from ros2/claire/add_missing_fn_lifecyle_node\n\nadd add_on and remove_on fns to deprecate set_on_param fn"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177c318912b45d36a740d",
    "number": 1133,
    "body": "fix https://github.com/ros2/rclcpp/issues/1118.",
    "head_branch": "topic-20200522-fix-1118-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add rcl_action_client_options when creating action client. (#1133)\n\n* add rcl_action_client_options for create_client.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* Capitalize comments and keep the default rcl_action_client_options.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\n* delete unnecessary default rcl_action_client_options_t.\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177c418912b45d36a740e",
    "number": 1132,
    "body": "I had this idea after working on https://github.com/ros2/rclcpp/pull/1125 ...\r\n\r\nNot a great deal, but it would be nice to merge this before Foxy release.",
    "head_branch": "ivanpauno/fix-potential-construction-destruction-order-problem-global-contexts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix potential Construction/Destruction order problem between global contexts vector and Context of static lifetime (#1132)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177c518912b45d36a740f",
    "number": 1131,
    "body": "Required to resolve ros2/ros1_bridge#265.",
    "head_branch": "dirk-thomas/fix-removing-service-bridges",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "expose get_service_names_and_types_by_node from rcl in rclcpp (#1131)\n\n* expose get_service_names_and_types_by_node from rcl in rclcpp\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* fix spelling\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* zero initialize\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* check return value and cleanup\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* use throw_from_rcl_error\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* cleanup error handling\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177c618912b45d36a7410",
    "number": 1130,
    "body": "This PR adds a link to REP-2006 (the Security Vulnerability Declaration) to the Quality Declaration for this repository.\r\n\r\nConnects to ros2/ros2#924.",
    "head_branch": "clalancette/rep-2006",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add Security Vulnerability Policy pointing to REP-2006. (#1130)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177c718912b45d36a7411",
    "number": 1128,
    "body": "Fix regression from #897.",
    "head_branch": "dirk-thomas/remove-empty-lines-within-signature",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove empty lines within method signatures (#1128)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177c918912b45d36a7412",
    "number": 1127,
    "body": ":factory_worker: \r\n\r\nImproved rclcpp docblock:\r\n\r\n - returns\r\n - params\r\n - throws\r\n - descriptions\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/improve/rclcpp_docblock",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improved rclcpp docblock (#1127)\n\n* Improved rclcpp docblock\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Improved docblock\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Included feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177ca18912b45d36a7413",
    "number": 1126,
    "body": "fix https://github.com/ros2/rclcpp/issues/1118.",
    "head_branch": "topic-20200522-fix-1118",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177cb18912b45d36a7414",
    "number": 1125,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/1042.\r\nReplaces https://github.com/ros2/rclcpp/pull/1124.\r\nKind of a continuation of the work done in https://github.com/ros2/rcl/issues/551.\r\n\r\nDepends on https://github.com/ros2/rcl/pull/660 (merged).\r\nDepends on https://github.com/ros2/rcutils/pull/253 (merged).\r\n\r\nAs far as I can tell this completely fixes the thread safety issue, but it needs a thorough review.",
    "head_branch": "ivanpauno/fix-logging-thread-safety-issue",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix thread safety issues related to logging (#1125)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177cc18912b45d36a7415",
    "number": 1124,
    "body": "fix candidate for https://github.com/ros2/rclcpp/issues/1042",
    "head_branch": "topic-20200521-fix-candidate-1042",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177cd18912b45d36a7416",
    "number": 1123,
    "body": "This PR deprecates `set_on_parameters_set_callback` and replaces it with the new `add_on_set_parameters_callback` and `remove_on_set_parameters_callback` functions. Closes #791 . \r\n\r\nP.S. I added `add_on_set_parameters_callback` and `remove_on_set_parameters_callback` to `lifecycle_node` cuz they weren't there, and I assumed we'd want to deprecate `set_on_parameters_set_callback` in there as well. #1134 needs to merged first.",
    "head_branch": "claire/deprecate_set_on_param_fn",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate set_on_parameters_set_callback (#1123)\n\n* add deprecate statement\r\n* replace tests to use add_on_param fn\r\n* deprecate set_on_pram fn in node_parameters\r\n* deprecate in lifecycle_node and add replacement fn\r\n* update documentation\r\n* add warning suppression to test_node.cpp\r\n* correct namespace in lifecycle_node.cpp\r\n* remove whitespace fix line length in lifecycle_node\r\n* move reset fn to below add_on\r\n* deprecate set_on in test_lifecycle_node\r\n* suppress deprecation warning in node.cpp\r\n* suppress warning in lifecycle_node.cpp\r\n\r\nSigned-off-by: claireyywang <22240514+claireyywang@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177ce18912b45d36a7417",
    "number": 1122,
    "body": "Fixes #861\r\n\r\nIt is against the design of ROS actions to rely on the status topic for the core implementation,\r\ninstead it should just be used for introspection.\r\n\r\nRather than relying on the status topic to remove references to goal handles, the action client\r\ninstead holds weak pointers to the goal handles. This way, as long as a user holds a reference to\r\nthe goal handle they can use it to interact with the action client.\r\n\r\n~~Draft PR for now as I try to determine if this actually fixes the issue (hopefully with a reliable reproduction of the bug).~~\r\n\r\nFor a reproduction, see https://github.com/ros2/rclcpp/issues/861#issuecomment-631762189",
    "head_branch": "jacob/client_holds_weak_goal_handles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] Action client holds weak pointers to goal handles (#1122)\n\n* [rclcpp_action] Action client holds weak pointers to goal handles\r\n\r\nFixes #861\r\n\r\nIt is against the design of ROS actions to rely on the status topic for the core implementation,\r\ninstead it should just be used for introspection.\r\n\r\nRather than relying on the status topic to remove references to goal handles, the action client\r\ninstead holds weak pointers to the goal handles. This way as long as a user holds a reference to\r\nthe goal handle they can use it to interact with the action client.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Move cleanup logic to the end of the function\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Add TODO\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Log debug messages when dropping a weak references to goal handles\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Improve documentation\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177cf18912b45d36a7418",
    "number": 1120,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/955\r\n\r\nThere are currently two public APIs for users to get the result of a goal.\r\nThis change deprecates one of the APIs, which was considered to be unsafe as\r\nit may result in a race with user-code and raise an exception.",
    "head_branch": "jacob/deprecate_action_api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate ClientGoalHandle::async_result() (#1120)\n\nFixes https://github.com/ros2/rclcpp/issues/955\r\n\r\nThere are currently two public APIs for users to get the result of a goal.\r\nThis change deprecates one of the APIs, which was considered to be unsafe as\r\nit may result in a race with user-code and raise an exception.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177d018912b45d36a7419",
    "number": 1119,
    "body": "This PR aims to fix a crash that can be seen while using the code in https://github.com/clalancette/rclcpp_event_crash.   That code creates a node, then creates a thread to create publishers in the thread.  The default executor is then run in the main thread.  If you build that code against latest master, put a lot of CPU stress on the machine, and run that code using Connext, it will crash almost every time.\r\n\r\nAfter some debugging, some advice from @wjwwood and @ivanpauno below, we determined that the problem is that the publisher handle (`rcl_publisher_t`, via `PublisherBase` class) could be freed while the executor was still working on QOSEvent handles.  The fix here is to hold onto a shared pointer to the underlying `rcl_{publisher,subscription}_t` structure in QOSEvent, which keeps those structures around until the executor is done with them.\r\n\r\nThe downside to this change is that it changes the API of `rclcpp`, making `get_publisher_handle` return a shared_ptr rather than a raw pointer.  This also requires https://github.com/ros2/demos/pull/448 and https://github.com/ros2/rosbag2/pull/420 to compile successfully.",
    "head_branch": "clalancette/waitable-lifetime-extend",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure the Waitable class has a virtual destructor.\n\nNoticed while reviewing this issue.\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177d118912b45d36a741a",
    "number": 1117,
    "body": "Signed-off-by: Sarthak Mittal <sarthakmittal2608@gmail.com>\r\n\r\nCloses #1104",
    "head_branch": "add-preempt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177d218912b45d36a741b",
    "number": 1116,
    "body": "  - Fixed REP 2004 links\r\n  - Added more details in the Dependencies section\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/qd/improve",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[Quality Declaration] Fixed rep links and added more details to dependencies (#1116)\n\n* Fixed rep links and added more details to dependencies\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Fixed rep link\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177d418912b45d36a741c",
    "number": 1115,
    "body": "Signed-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "brawner/update-qd",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update QDs to reflect version 1.0 (#1115)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177d518912b45d36a741d",
    "number": 1114,
    "body": "`rosidl_default_generators` are only used in tests and should be included only when building tests.",
    "head_branch": "only_use_generatos_in_test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use rosidl_default_generators dependency in test (#1114)\n\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177d618912b45d36a741e",
    "number": 1113,
    "body": "Signed-off-by: Sarthak Mittal <sarthakmittal2608@gmail.com>\r\n\r\ncloses #972 ",
    "head_branch": "feature/spin-until-future-complete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow spin_until_future_complete to accept std::future (#1113)\n\nSigned-off-by: Sarthak Mittal <sarthakmittal2608@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177d718912b45d36a741f",
    "number": 1112,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nIt won't build for me on Windows without this.  I'm not sure why my Windows VM is different than CI in this instance, but in any case this is the more correct thing to do.",
    "head_branch": "include-what-you-use",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure to include what you use. (#1112)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177d818912b45d36a7420",
    "number": 1109,
    "body": "Use the label introduced in https://github.com/ament/ament_cmake/pull/240 to skip this flaky test on CI. The test has been [failing](http://build.ros2.org/job/Eci__nightly-connext_ubuntu_bionic_amd64/307/testReport/rclcpp/TestMultiThreadedExecutor/timer_over_take/history/) almost as often as it passes. The attempt at #1105 didn't solve the problem.\r\n\r\nAlso see this discussion: https://github.com/ros2/rclcpp/pull/907#discussion_r418649282\r\n\r\nCI:\r\n\r\n* [![Build Status](https://ci.ros2.org/job/ci_linux/10661/badge/icon)](https://ci.ros2.org/job/ci_linux/10661/)\r\n* [![Build Status](https://ci.ros2.org/job/ci_linux/10668/badge/icon)](https://ci.ros2.org/job/ci_linux/10668/) - new attempt without `--retest-until-fail`\r\n* [![Build Status](https://ci.ros2.org/job/ci_linux/10691/badge/icon)](https://ci.ros2.org/job/ci_linux/10691/) `--event-handlers console_direct+ --executor sequential --retest-until-pass 2 --ctest-args -LE xfail --pytest-args -m \"not xfail\" --packages-select rclcpp `",
    "head_branch": "test_over_take_xfail",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Mark flaky test with xfail: TestMultiThreadedExecutor (#1109)\n\nSigned-off-by: Louise Poubel <louise@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177d918912b45d36a7421",
    "number": 1108,
    "body": "I got a deprecation warning when building on OSX.",
    "head_branch": "avoid_deprecation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "avoid callback_group deprecation (#1108)\n\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177da18912b45d36a7422",
    "number": 1107,
    "body": "See https://github.com/ros2/rmw/pull/227.",
    "head_branch": "ivanpauno/remove-manual-by-node-liveliness",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove MANUAL_BY_NODE liveliness API (#1107)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177dc18912b45d36a7423",
    "number": 1106,
    "body": "The ones that have the API available in docs.ros2.org are pointing to this site to avoid duplicate the features\r\n \r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/features",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added features to rclcpp packages (#1106)\n\n* Added features to rclcpp packages\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback and improved lifecycle docblock\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added ffedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Fixing error\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177dd18912b45d36a7424",
    "number": 1105,
    "body": "Address comments https://github.com/ros2/rclcpp/pull/907#discussion_r418675307 and https://github.com/ros2/rclcpp/pull/907#discussion_r420482419.",
    "head_branch": "ivanpauno/make-test-multi-threaded-executor-more-reliable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make test multi threaded executor more reliable (#1105)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177de18912b45d36a7425",
    "number": 1103,
    "body": "Added docblock to some undocumented classes and methods in rclcpp\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/dockblock/rclcpp",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added docblock in rclcpp (#1103)\n\n* Added docblock in rclcpp\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177df18912b45d36a7426",
    "number": 1102,
    "body": "Added dockblock to ComponentManager class\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/docblock/rclcpp_components",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added dockblock to ComponentManager class (#1102)\n\n* Added dockblock to ComponentManager class\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177e018912b45d36a7427",
    "number": 1101,
    "body": "Sounds like a typo/bug.\r\n\r\n`rcl_take_request` for reference:\r\nhttps://github.com/ros2/rcl/blob/47501d17c526ab6e1e133f9899b60a6049630cdc/rcl/src/rcl/service.c#L306.\r\n\r\nShould solve https://ci.ros2.org/view/nightly/job/nightly_linux_release/1529/testReport/junit/(root)/projectroot/test_services_cpp__rmw_cyclonedds_cpp/ and similar failures in other nightlies.\r\n\r\n[taken=false](https://github.com/ros2/rmw_cyclonedds/blob/40ba599462277dd5601a71b5ddb034e92ad6b565/rmw_cyclonedds_cpp/src/rmw_node.cpp#L3063-L3064) seems to be something more likely to happen after https://github.com/ros2/rmw_cyclonedds/pull/176. @eboasson It might worth investigating the why, but this fixes the issue.",
    "head_branch": "ivanpauno/rcl-ret-service-take-failed-is-an-acceptable-failure",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use RCL_RET_SERVICE_TAKE_FAILED and not RCL_RET_CLIENT_TAKE_FAILED when checking a request take (#1101)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177e118912b45d36a7428",
    "number": 1100,
    "body": "Added QD to:\r\n - rclcpp\r\n - rclcpp_action\r\n - rclcpp_components\r\n - rclcpp_lfecycle\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/quality_declaration",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added Quality declaration: rclcpp, rclpp_action, rclcpp_components andrclcpp_lifecycle (#1100)\n\n* Added Quality declaration: rclcpp, rclpp_action, rclcpp_components, rclcpp_lifecycle\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177e218912b45d36a7429",
    "number": 1099,
    "body": "In function `to_rcl_publisher_options`, the member `rmw_publisher_options` of `rcl_publisher_options_t result` is not initialized to default. This will cause the problem for rmw layer to parse `rmw_specific_publisher_payload`, because I don't know whether the payload is available or not.",
    "head_branch": "bugfix_publisher_options_init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make sure rmw_publisher_options is initialized in to_rcl_publisher_options. (#1099)\n\nSigned-off-by: ChenYing Kuo <evshary@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177e318912b45d36a742a",
    "number": 1097,
    "body": "Aims at resolving test failures reported in here: https://ci.ros2.org/job/nightly_win_rel/1533/\r\nNamely, `test_communication.TestMessageSerialization.serialized_callback`:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=10541)](http://ci.ros2.org/job/ci_linux/10541/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=5997)](http://ci.ros2.org/job/ci_linux-aarch64/5997/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=8587)](http://ci.ros2.org/job/ci_osx/8587/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=10414)](http://ci.ros2.org/job/ci_windows/10414/)\r\n\r\nIt's a bit of a search in the dark as I can't reproduce the test failures locally (tried on OSX as well as Ubuntu 18.04). However, I could see some memory loss with the help of `valgrind`.",
    "head_branch": "serialized_message_move_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Serialized message move constructor (#1097)\n\n* correct use of move semantics\r\n\r\nSigned-off-by: Knese Karsten <karsten@openrobotics.org>\r\n\r\n* more tests\r\n\r\nSigned-off-by: Knese Karsten <karsten@openrobotics.org>\r\n\r\n* make error message more exact\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use std::exchange\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177e418912b45d36a742b",
    "number": 1096,
    "body": "Related to ros2/ros2#904.",
    "head_branch": "dirk-thomas/use-targets-over-interfaces-over-classic-vars-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "export targets in a addition to include directories / libraries (#1096)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177e618912b45d36a742c",
    "number": 1095,
    "body": "Compiling theora_image_transport resulted in a compile error where SerializedMessage was not a member of rclcpp.\r\n\r\n```\r\nfrom /home/brawner/workspace/ros2_ws/src/ros-perception/image_transport_plugins/theora_image_transport/src/theora_subscriber.cpp:35:\r\n/home/brawner/workspace/ros2_master/install/rclcpp/include/rclcpp/message_memory_strategy.hpp:49:71: error: ‚ÄòSerializedMessage‚Äô is not a member of ‚Äòrclcpp‚Äô\r\n   using SerializedMessageAllocTraits = allocator::AllocRebind<rclcpp::SerializedMessage, Alloc>;\r\n```\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "fix_message_memory_strategy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add serialized_message.hpp header (#1095)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177e718912b45d36a742d",
    "number": 1094,
    "body": "Fixes #953.",
    "head_branch": "hidmic/param-wildcard-precedence",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enforce a precedence for wildcard matching in parameter overrides. (#1094)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177e818912b45d36a742e",
    "number": 1093,
    "body": "This is a workaround so that interfaces generated in rclcpp can use a target name\r\nmatching the project name.\r\n\r\nUnblocks https://github.com/ros2/rclcpp/pull/1080\r\n\r\n@dirk-thomas FYI",
    "head_branch": "jacob/rename_library_target",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177e918912b45d36a742f",
    "number": 1092,
    "body": "connects to https://github.com/ros2/rclcpp/pull/1090\r\n\r\nThis PR makes sure that the regression listed in the tickets above are noted during compile time.",
    "head_branch": "serialized_message_follow_up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "adapt subscription traits to rclcpp::SerializedMessage (#1092)\n\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ea18912b45d36a7430",
    "number": 1091,
    "body": "Added Doxyfile to rcl_lifecycle in the process of reaching Quality Level 1.\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/doc/add_rclcpp_components_doxyfile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added rclcpp_components Doxyfile (#1091)\n\n* Added rclcpp components Doxyfile\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Added feedback\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177eb18912b45d36a7431",
    "number": 1090,
    "body": "Reverts #1081.\r\n\r\nRequires https://github.com/ros2/rosbag2/pull/389 and https://github.com/ros2/demos/pull/443.\r\n\r\nLots of jobs hanging in `test_communication`:\r\n\r\n* https://ci.ros2.org/job/ci_osx/8507/\r\n* https://ci.ros2.org/job/ci_osx/8506\r\n* https://ci.ros2.org/job/ci_windows/10309\r\n* https://ci.ros2.org/job/ci_windows/10316",
    "head_branch": "ivanpauno/revert-#1081",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ec18912b45d36a7432",
    "number": 1089,
    "body": "Added Doxyfile to rcl_lifecycle in the process of reaching Quality Level 1.\r\n\r\nIn the repo [docs.ros2.org](https://github.com/ros2/docs.ros2.org/) branch `gen_doc`. The [documentation](https://github.com/ros2/docs.ros2.org/blob/doc_gen/Makefile#L12) of `rclcpp_lifecycle` is trying to be build but there is no Doxyfile.\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/doc/add_rclcpp_lifecycle_doxyfile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added rclcpp lifecycle Doxyfile (#1089)\n\n* Added rclcpp lifecycle Doxyfile\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>\r\n\r\n* Fixed doxyfile\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ed18912b45d36a7433",
    "number": 1088,
    "body": "Related to ros2/ros2#904.",
    "head_branch": "dirk-thomas/export-targets",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "export targets in a addition to include directories / libraries (#1088)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ee18912b45d36a7434",
    "number": 1087,
    "body": "Related to https://github.com/ros2/rclcpp/pull/1072#issuecomment-618144438\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>",
    "head_branch": "dabonnie/remove-unused-variable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unused test variable (#1087)\n\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177f018912b45d36a7435",
    "number": 1086,
    "body": "#1069 wasn't rebased and didn't have the latest changes, namely this: https://github.com/ros2/rclcpp/pull/1079/files\r\n\r\n",
    "head_branch": "Karsten1987-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix rclcpp interface traits test (#1086)\n\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177f118912b45d36a7436",
    "number": 1085,
    "body": "Goes back to when `get_next_ready_executable()` was changed to return a `bool` instead of a `SharedPtr` here: https://github.com/ros2/rclcpp/commit/1610fc3973541d7064d2592ba5555ee99b45e128#diff-97193a162153796658f8e485ff3f9d5aR563",
    "head_branch": "update-comment-get-next-ready-executable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update comment about return value in Executor::get_next_ready_executable (#1085)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177f218912b45d36a7437",
    "number": 1084,
    "body": "@dabonnie @prajakta-gokhale \r\n\r\ni was looking at the current code for topic statistics(https://github.com/ros2/rclcpp/pull/1050), found this  one. could you check and help to merge?",
    "head_branch": "topic-20200422-statistics-collectors-MTsafe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "protect subscriber_statistics_collectors_ with a mutex (#1084)\n\n* subscriber_statistics_collectors_ should be protected with mutex.\r\n\r\nCo-Authored-By: William Woodall <william+github@osrfoundation.org>\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177f318912b45d36a7438",
    "number": 1083,
    "body": "I collected most of the API breaking changes I came across while working on the executor changes. This pull request primarily deprecates old namespaces that we've been wanting to get rid of for a while.\r\n\r\nIt also moves some classes into their own files and renames one class (with deprecation).\r\n\r\nConnected pull requests:\r\n\r\n- https://github.com/ros2/demos/pull/442\r\n- https://github.com/ros2/examples/pull/267\r\n- https://github.com/ros2/realtime_support/pull/92\r\n- https://github.com/ros2/system_tests/pull/426",
    "head_branch": "executor_refactor/deprecate_extra_namespaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "deprecate redundant namespaces (#1083)\n\n* deprecate redundant namespaces, move classes to own files, rename some classes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* address review comments\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix ups since rebase\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid deprecation warnings from deprecated functions\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* more fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* another fixup, after another rebase\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177f418912b45d36a7439",
    "number": 1082,
    "body": "As \"requested\" in https://github.com/ros2/rclcpp/pull/1075#discussion_r412243859\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=10370)](http://ci.ros2.org/job/ci_linux/10370/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=5885)](http://ci.ros2.org/job/ci_linux-aarch64/5885/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=8445)](http://ci.ros2.org/job/ci_osx/8445/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=10266)](http://ci.ros2.org/job/ci_windows/10266/)",
    "head_branch": "serialized_message_composition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use composition for serialized message (#1082)\n\n* use composition over inheritance\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* make parameter names equal\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* address review comments\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177f518912b45d36a743a",
    "number": 1081,
    "body": "The the changes introduced in #1075 I think it makes sense to apply this to the serialized callbacks. \r\n\r\nThat is, the callback signature for a serialized callback changes from \r\n\r\n`void (const std::shared_pointer<rcl_serialized_message_t> msg)`\r\n\r\nto\r\n\r\n`void (const std::shared_pointer<rclcpp::SerializedMessage> msg)`\r\n",
    "head_branch": "use_serialized_message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use serialized message (#1081)\n\n* use serialized message in callback\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* introduce resize method for serialized message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* introduce release for serialized message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* address review comments\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* correct typo\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* fix interface traits test\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177f618912b45d36a743b",
    "number": 1080,
    "body": "Waiting on #1072 for unit testing. \r\n\r\nUpdate: This includes part of changes from #1072 for unit tests. Once #1072 gets merged this will be rebased for CI.\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>",
    "head_branch": "prajaktg/add-msg-age",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add received message age metric to topic statistics (#1080)\n\n* Add received message age metric to topic statistics\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Add unit tests\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Add IMU messages in unit test\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Use system time instead of steady time\r\nTest received message age stats values are greater than 0\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix test warnings\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Replace IMU messages with new dummy messages\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Remove outdated TODO and unused test variables\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Re-add message with header for unit testing\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Address message review feedback\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Remove extra newline\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Address more review feedback\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix Windows failure\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Only set append_library_dirs once\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177f718912b45d36a743c",
    "number": 1079,
    "body": "Fixes CI breakage from https://github.com/ros2/rclcpp/pull/1074\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>",
    "head_branch": "prajaktg/fix-broken-ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Reflect changes in rclcpp API (#1079)\n\n* Reflect changes in rclcpp API\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Revert earlier fix made in rclcpp\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177f818912b45d36a743d",
    "number": 1078,
    "body": "Hot fix for broken public API from #1074.",
    "head_branch": "dirk-thomas/fix-regression-1074",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix build regression (#1078)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177fa18912b45d36a743e",
    "number": 1077,
    "body": "using SerializedMessage and support in intraprocess manager to create a generic subscriber / publisher without previously known message type",
    "head_branch": "dnae_adas/generic_subscriber_and_publisher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177fb18912b45d36a743f",
    "number": 1076,
    "body": "added support for serialized messages in intraprocess manager, allowing on demand serialization/deserialization",
    "head_branch": "dnae_adas/intraprocess_manager_support_for_serialized_message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177fc18912b45d36a7440",
    "number": 1075,
    "body": "added serialized message class\r\n\r\n@Karsten1987 I got rid off the raw pointers and updated the unit test a little.",
    "head_branch": "dnae_adas/serialized_message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Dnae adas/serialized message (#1075)\n\n* Addes SerializedMessage and helper class for serialization to rcl_serialized_message\r\n\r\n@Karsten1987 Thank you for your support\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* Updateds subscription traits for SerializedMessage\r\n\r\n@Karsten1987 Thank you for your support\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* Addes tests SerializedMessage and subscription traits\r\n\r\n@Karsten1987 Thank you for your support\r\n\r\nSigned-off-by: Joshua Hampp <j.hampp@denso-adas.de>\r\n\r\n* Update rclcpp/include/rclcpp/serialization.hpp\r\n\r\nCo-Authored-By: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* Update rclcpp/test/test_serialized_message.cpp\r\n\r\nCo-Authored-By: Karsten Knese <Karsten1987@users.noreply.github.com>\r\n\r\n* fix windows compilation\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* cosmetic touchups\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\nCo-authored-by: Joshua Hampp <j.hampp@denso-adas.de>\r\nCo-authored-by: Karsten Knese <Karsten1987@users.noreply.github.com>\r\nCo-authored-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177fd18912b45d36a7441",
    "number": 1074,
    "body": "* Add a `NodeDefault` option to enable topic statistics per-node\r\n* Add unit test for the new option\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>",
    "head_branch": "prajaktg/node-default-topic-stats",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add NodeDefault option for enabling topic statistics (#1074)\n\n* Add NodeDefault option for enabling topic statistics\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Remove unnecessary if statement\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662177fe18912b45d36a7442",
    "number": 1073,
    "body": "Attempting to run the `test_publisher_subscription_count_api` and `test_subscription_publisher_count_api` with the following gtest flags\r\n\r\n- --gtest_repeat=-1\r\n- --gtest_break_on_failure\r\n\r\nfailed. Manually verified on Linux that adding the `TearDownTestCase` allows the tests to be repeated.\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>",
    "head_branch": "dabonnie/fix-test-teardown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix tests that were not properly torn down (#1073)\n\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662177ff18912b45d36a7443",
    "number": 1072,
    "body": "~~This is currently a draft PR and is blocked by https://github.com/ros2/rclcpp/pull/1050 (when #1050 is merged this can come out of draft), where the PR uses components introduced there.~~\r\n\r\n~~Unit tests are a work in progress, but I've manually verified that Topic Statistics can be published via the `demo_nodes_cpp` talker + listener demo on Linux (Ubuntu 18.04).~~\r\n\r\nThis is ready for review.",
    "head_branch": "integrate-topic-statistics",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Integrate topic statistics (#1072)\n\n* Add SubscriberTopicStatistics class\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Add SubscriberTopicStatistics Test\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Modify constructor to allow a node to create necessary components\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix docstring style\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Remove SetPublisherTimer method\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Change naming style to match rclcpp\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address style issues\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Use rclcpp:Time\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Remove unnecessary check for null publisher timer\r\nMove anonymous namespace function to private class method\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Update message dependency\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Initial integration of Subscriber Topic Statistics\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix nanoseconds used for Topic Stats\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Add simple publishing test\r\nMinor fixes\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Add test utils header\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Integrate with Topic Statistics options\r\nFixes after rebasing with master\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Update after rebasing\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address minor review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Move Topic Statistics instantiation to create_subscription\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix rebase issue\r\nFix topic statistics enable flag usage\r\nAddress minor formatting\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Move new timer creation method to relevant header\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Add timers interface to topic interface\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Use new create timer method\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621780018912b45d36a7444",
    "number": 1070,
    "body": "Exporting the component manger library and the dependency to composition interfaces is missing.",
    "head_branch": "export_component_manager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Export component manager (#1070)\n\n* Export component manager library\r\n\r\nSigned-off-by: Fabian K√∂nig <f.koenig@eu.denso.com>\r\n\r\n* Export composition interfaces dependency\r\n\r\nSigned-off-by: Fabian K√∂nig <f.koenig@eu.denso.com>\r\n\r\nCo-authored-by: Fabian K√∂nig <f.koenig@eu.denso.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780118912b45d36a7445",
    "number": 1069,
    "body": "Based on https://github.com/ros2/rclcpp/compare/node_interfaces_traits. Alternative to #1035. Forces explicit shared ownership of interfaces.",
    "head_branch": "hidmic/node_interfaces_gen",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Generate node interfaces' getters and traits. (#1069)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\nCo-authored-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621780218912b45d36a7446",
    "number": 1068,
    "body": "Fixes new nightly test failures in ros2/build_farmer#272\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>",
    "head_branch": "install_component_manager",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Install the component_manager library (#1068)\n\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780418912b45d36a7447",
    "number": 1067,
    "body": "This is to synchronize `rclcpp` with the change being made to `rclpy` in https://github.com/ros2/rclpy/pull/544.",
    "head_branch": "miaofei/remove-warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove warning message from failing to register default callback (#1067)\n\nSigned-off-by: Miaofei <miaofei@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780518912b45d36a7448",
    "number": 1065,
    "body": "closes #1010 \r\n\r\nThe first commit https://github.com/ros2/rclcpp/pull/1065/commits/d81d494ba6af5a8f8dc8c41a6311619eebb5ffa1 basically just turns the `component manager` into public API.\r\n\r\nThe second commit https://github.com/ros2/rclcpp/pull/1065/commits/156ff16a3722ce671bb655f341f5c32347e41a81 is enhancing the CMake macros for registering nodes with a new option `RESOURCE_INDEX` to specify under which index the file should be written.\r\n\r\nWith respect to the upcoming work in ros-control (https://github.com/ros-controls/roadmap/pull/7) that enables to not duplicate the CMake macros to adopt to ros-controls, but simply call the existing rclcpp_components macros with a proper resource index, e.g.:\r\n```\r\nrclcpp_components_register_node(timers_library\r\n  PLUGIN \"demo_nodes_cpp::OneOffTimerNode\"\r\n  EXECUTABLE one_off_timer\r\n  RESOURCE_INDEX \"some_proper_index\")\r\n```\r\n\r\nThe controller manager can then look into this exact index to only fetch controllers and no other components.",
    "head_branch": "public_component_manager",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make Component Manager public (#1065)\n\n* make functions public & virtual\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* flexible resource index for cmake macros\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* review comments\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* remove superfluous include\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* remove wrong dllexort\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* check for empty plugin & executable args\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* remove commented lines\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* relax macro constraints\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621780618912b45d36a7449",
    "number": 1064,
    "body": "This PR (built on top of required PRs [ros2/rcl_interfaces#97](https://github.com/ros2/rcl_interfaces/pull/97) and [ros2/rcl#618](https://github.com/ros2/rcl/pull/618)) provides convenience functions for lifecycle nodes to self-trigger the error transitions created in the previous PRs.\r\n\r\nThis also addresses issue #547 ",
    "head_branch": "lifecycle_primary_state_error_transitions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780718912b45d36a744a",
    "number": 1063,
    "body": "Fix CI breakages in at least test_rclcpp and rosbag2_transport. It seems upstream CI was never run.\nAs per https://github.com/osrf/osrf_testing_tools_cpp/pull/36#issuecomment-591088977\n\nThis reverts commit aaf8b3828cb4da7e5dd3f017e653f132e5b0ba8c.\n\nSigned-off-by: Dan Rose <dan@digilabs.io>\n",
    "head_branch": "revert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780818912b45d36a744b",
    "number": 1062,
    "body": "Related to ros2/rosidl#458.",
    "head_branch": "dirk-thomas/rename-namespaces2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename rosidl_generator_c namespace to rosidl_runtime_c (#1062)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780918912b45d36a744c",
    "number": 1060,
    "body": "Related to ros2/rosidl#456.",
    "head_branch": "dirk-thomas/rename-namespaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename rosidl_generator_cpp namespace to rosidl_runtime_cpp (#1060)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780a18912b45d36a744d",
    "number": 1059,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nFor reasons I don't understand, I could not build on Windows without these includes, even though CI seems OK with it.  Regardless, this seems to be the right thing to do, and with this in place I can now build on Windows again.",
    "head_branch": "include-what-you-use",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure to include what you use. (#1059)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780b18912b45d36a744e",
    "number": 1057,
    "body": "Related to https://github.com/ros-tooling/aws-roadmap/issues/225\r\n\r\n* Add a new struct for topic statistics parameters inside SubscriptionOptions\r\n* The struct has 3 options needed for topic statistics\r\n* Added a unit test for new options in `subscription_options`\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>",
    "head_branch": "prajaktg/topic_stats_options",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add SubscriptionOptions for topic statistics (#1057)\n\n* Add SubscriptionOptions for topic statistics\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Add more options and unit test\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>\r\n\r\n* Make default publish period 1sec\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621780c18912b45d36a744f",
    "number": 1056,
    "body": "This is an alternative PR to https://github.com/ros2/rclcpp/pull/999\r\nThe code in this one is less nice, but it is ABI-safe.  Thus,\r\nit can be used as a short-term workaround for users hurt by\r\nthe problem now, and/or used as the solution for Eloquent.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nI'm still testing this, so consider this a request for comment on the approach.  Once I run a full CI on it, I'll be more confident in it.",
    "head_branch": "clalancette/global-clock-lock-split",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780e18912b45d36a7450",
    "number": 1055,
    "body": "These variables should be `constexpr`.\r\n\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/constexpr-endpoint-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "use constexpr for endpoint type name (#1055)\n\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621780f18912b45d36a7451",
    "number": 1054,
    "body": "This fixes an issue where max() and min() are treated as macros defined in windows.h\r\n\r\nAlternative to https://github.com/ros2/rclcpp/pull/1053\r\n\r\nWindows: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=9921)](https://ci.ros2.org/job/ci_windows/9921/)",
    "head_branch": "jacob/avoid_max_min-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781018912b45d36a7452",
    "number": 1053,
    "body": "Previously Windows CI was failing: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=9903)](https://ci.ros2.org/job/ci_windows/9903/)\r\nWith this change: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=9920)](https://ci.ros2.org/job/ci_windows/9920/)",
    "head_branch": "jacob/avoid_max_min",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781118912b45d36a7453",
    "number": 1052,
    "body": "as per https://github.com/ament/ament_lint/pull/174\n",
    "head_branch": "uncrustify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781218912b45d36a7454",
    "number": 1051,
    "body": "Closes https://github.com/ros2/rclcpp/issues/1048\r\n\r\nThis pull request adds a default callback for incompatible offered/requested QoS events. In the case that the underlying middleware doesn't support such type of events, the default callback will not be registered and a warning will be emitted.",
    "head_branch": "miaofei/default-incompatible-qos-callback",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create a default warning for qos incompatibility (#1051)\n\nSigned-off-by: Miaofei <miaofei@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621781318912b45d36a7455",
    "number": 1050,
    "body": "This PR is part of [aws-roadmap/#225](https://github.com/ros-tooling/aws-roadmap/issues/225) to implement Topic Statistics in ROS2. This PR adds the relevant class and dependencies in order to calculate and publish Topic Statistics for a node's subscription. \r\n\r\nCurrently a work in progress while I'm adding unit tests.\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>",
    "head_branch": "dabonnie/add-topic-statistics-classes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Topic Statistics: Add SubscriptionTopicStatistics class (#1050)\n\n* Add SubscriberTopicStatistics class\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Add SubscriberTopicStatistics Test\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Modify constructor to allow a node to create necessary components\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix docstring style\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Remove SetPublisherTimer method\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Change naming style to match rclcpp\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address style issues\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Fix rebase issue\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Use rclcpp:Time\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Remove unnecessary check for null publisher timer\r\nMove anonymous namespace function to private class method\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Update message dependency\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Revert constructor changes\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Address review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621781418912b45d36a7456",
    "number": 1049,
    "body": "Some of the values in our QoS profiles only affect local behavior, or choice of topic names. These don't affect whether a publisher and subscription are compatible. Add a utility check on `rclcpp::QoS` that compares only the compatibility-affecting QoS policies for equality \r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>",
    "head_branch": "emersonknapp/compatibility-equal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781518912b45d36a7457",
    "number": 1047,
    "body": "This closes https://github.com/ros2/rclcpp/issues/520 or at the very least lays the ground work for closing it. This pull request adds a few new `rclcpp::*WaitSet` classes which can be used with all the \"waitable\" entities to wait on sets of them at the same time, using `rcl_wait_set_t` under the hood.\r\n\r\nThis pull request does these things:\r\n\r\n- add guard condition class\r\n  - replaces use of rcl_guard_condition_t directly\r\n  - this pull request will probably not update all instances just yet, but examples can use it\r\n- add message info class\r\n  - replaces use of rmw_message_info_t, and updated all cases where it was being used before\r\n- add wait set classes\r\n  - main wait set class has synchronization and storage policies as template arguments\r\n    - Policy based design, see: https://en.wikipedia.org/wiki/Modern_C%2B%2B_Design#Policy-based_design\r\n  - add static and dynamic storage policy options\r\n  - add thread-safe and sequential (not thread-safe) synchronization policy options\r\n- update `Subscription` to have `take`, `take_type_erased`, and `take_serialized`\r\n  - update `Executor` to use these rather than call rcl directly\r\n  - user can now use these to take data without an executor\r\n- update `Client` to have `take_response`\r\n  - update `Executor` to use this instead\r\n- update `Service` to have `take_request` and `send_response`\r\n  - update `Executor` to use this instead\r\n\r\nOne thing mentioned in https://github.com/ros2/rclcpp/issues/520, which may not be in the first pass, is the ability to mix use of the executor and waitset together (like some subscriptions from a node are in an executor while others are not and instead use a waitset directly). This will be part of my other pull request to address https://github.com/ros2/rclcpp/issues/519.\r\n\r\nWhat this pull request will _not_ do:\r\n\r\n- update executor to use new wait set classes\r\n  - I will do that in a follow up pr which also incorporates the use of time stamps from rcl\r\n- change executors so more than one can be used with a node at a time\r\n\r\nThings I would like to do, but will most likely have to be follow up work:\r\n\r\n- add \"algorithms\" (utility functions) for working with `rclcpp::WaitSetResult`\r\n  - in the spirit of `#include <algorithm>`, like `rclcpp::find_next_ready_subscription` kind of stuff\r\n- support an allocator argument for the wait set\r\n  - I spent a lot of time trying to integrate it, but it's complicated to support, but if we fell back to only supporting the polymorphic allocator it would be easier, but since we don't have c++17 and we haven't back ported the polymorphic allocator API to c++14 I couldn't easily do that yet.\r\n\r\n----\r\n\r\nTODO:\r\n\r\n- [x] update to support client and service\r\n- [x] finish thread-safe policy\r\n- [x] add check to ensure entities are only added to one wait set at a time\r\n\r\nI'm going move this out of draft mode so reviews can start while I finish the last few sets of changes.\r\n\r\nAlso, test coverage is missing in a few places, but I do have this example to exercise the main use cases:\r\n\r\nhttps://github.com/ros2/examples/pull/262\r\n\r\nI would appreciate help with adding more tests, but they are also something that I can add after the API freeze, so I'm de-prioritizing them now, as much as I hate to do that.",
    "head_branch": "executor_refactor/add_wait_set",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp] add WaitSet class and modify entities to work without executor (#1047)\n\n* add rclcpp::GuardCondition wrapping rcl_guard_condition_t\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* WIP second wait set refactor, just guard conditions so far\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* removing a question/todo, I think this is fine as is\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* added subscriptions and waitable to wait sets\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* improve usability with subscriptions and wait sets\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* adding take to subscription so it can be used without the executor\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add rclcpp::MessageInfo to replace use of rmw_message_info_t\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* refactor Subscription and Executor so they can be used separately\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style and cpplint\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup take_serialized() and add tests for it\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add support for client and service to wait set\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix review comment\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add thread-safe wait set policy\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add check for use with multiple wait set\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup visibility macro usage\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove vestigial test case\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* move visibility macro fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove vestigial TODO\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621781618912b45d36a7458",
    "number": 1045,
    "body": "As with #1043 and #1044, this PR increases the test coverage for rclcpp_lifecycle. The test coverage increases from 61% to 100% of the `include` files and 87% of the `src` files (88% combined)\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=9864)](http://ci.ros2.org/job/ci_linux/9864/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=5480)](http://ci.ros2.org/job/ci_linux-aarch64/5480/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=8024)](http://ci.ros2.org/job/ci_osx/8024/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=9720)](http://ci.ros2.org/job/ci_windows/9720/)\r\n* Coverage [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux_coverage&build=78)](https://ci.ros2.org/job/ci_linux_coverage/78/)\r\n\r\nDepends on #1043, #1044\r\nNew commit: https://github.com/ros2/rclcpp/commit/7441e1da2454b1e82aa1bbf9a095df766f129382",
    "head_branch": "tests_rclcpp_part1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Increasing test coverage of rclcpp_lifecycle (#1045)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621781818912b45d36a7459",
    "number": 1044,
    "body": "Similar to #1043, this adds tests to increase the test coverage of rclcpp_components as part of the effort to bring it to QL 1. This additions bring the coverage from 88% to 100% of the `include` files and 95% of the `src` files (96% combined).\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=9863)](http://ci.ros2.org/job/ci_linux/9863/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=5479)](http://ci.ros2.org/job/ci_linux-aarch64/5479/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=8023)](http://ci.ros2.org/job/ci_osx/8023/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=9719)](http://ci.ros2.org/job/ci_windows/9719/)\r\n* Coverage [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux_coverage&build=78)](https://ci.ros2.org/job/ci_linux_coverage/78/)\r\n\r\nDepends on #1043 \r\nNew commit: https://github.com/ros2/rclcpp/commit/85193e60c7b0fcd88f3bcb09d9167d2c424cbb73",
    "head_branch": "tests_rclcpp_components",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Increasing test coverage of rclcpp_components (#1044)\n\n* Increasing test coverage of rclcpp_components\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Removing throws test for now\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781918912b45d36a745a",
    "number": 1043,
    "body": "As part of the effort to bring the rclcpp packages up to Quality Level 1, this introduces many more tests of the rclcpp_action api. This brings the coverage from 76% to 83% of the `src` files and 94% of the `include` files (87% combined). \r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=9862)](http://ci.ros2.org/job/ci_linux/9862/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=5478)](http://ci.ros2.org/job/ci_linux-aarch64/5478/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=8022)](http://ci.ros2.org/job/ci_osx/8022/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=9718)](http://ci.ros2.org/job/ci_windows/9718/)\r\n* Coverage [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux_coverage&build=78)](https://ci.ros2.org/job/ci_linux_coverage/78/)\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>",
    "head_branch": "tests_rclcpp_action",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Increasing test coverage of rclcpp_action (#1043)\n\n* Increasing test coverage of rclcpp_action\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Increasing test coverage of rclcpp_action\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR Fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* Fix warnings\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781a18912b45d36a745b",
    "number": 1041,
    "body": "Added a bunch of unit-tests for the executors, in particular to make sure that the waitset is correctly updated to reflect changes in the nodes.\r\n\r\nThese are `TYPED_TEST_P` to allow testing these basic executor functionalities on all the different classes `SingleThreadedExecutor, StaticSingleThreadedExecutor, MultiThreadedExecutor`\r\n\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>",
    "head_branch": "asoragna/static-executor-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781b18912b45d36a745c",
    "number": 1040,
    "body": "See: https://github.com/ros2/rclcpp/pull/1034#discussion_r400553599",
    "head_branch": "fixup_clang_warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fixup clang warning (#1040)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781c18912b45d36a745d",
    "number": 1035,
    "body": "This pull requests indirectly addresses https://github.com/ros2/geometry2/issues/244 by adding more and safer node interfaces' getters, and then using them where applicable (e.g. in `rclcpp_action::create_*()`, indirectly solving the aforementioned issue).\r\n\r\nI'm opening this as a draft PR for @Karsten1987 to weigh in and for @wjwwood to comment on how this may or may not be in line with the ongoing `rclcpp` API review.",
    "head_branch": "hidmic/safe-node-interface-getters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781d18912b45d36a745e",
    "number": 1034,
    "body": "This is my rebase of #873, which needed fixup, but I didn't want to push to their fork since they had issues and pull requests on the fork. I can close this and go back to that pull request if possible in the future.",
    "head_branch": "wjwwood/nobleo/feature/static_executor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp] adding a \"static\" single threaded executor (#1034)\n\n* Added static single threaded executor functionality\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\nexecutor enhanced to run clients and waitable\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\ntested executor\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\nadded semi-dynamic feature to the executor\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\nJenkins error fixes\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\nAdded static single threaded executor functionality\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\n* Added semi-dynamic feature and made changes based on review comments\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\n* re-added accidentally deleted code in node.hpp, fixed static_single_threaded_executor.cpp w.r.t. intra-process change since last commit\r\n\r\nSigned-off-by: MartinCornelis2 <martin.cornelis@nobleo.nl>\r\n\r\n* Remove not needed comparison\r\n\r\nwait_set_.size_of_* is always different than '0'\r\nif we are inside the for loop\r\n\r\nSigned-off-by: Mauro <mpasserino@irobot.com>\r\n\r\n* If new entity added to a node: re-collect entities\r\n\r\nNow we check ONLY node guard_conditions_\r\n\r\nSome possible guard conditions to be triggered HERE are:\r\n1. Ctrl+C guard condition\r\n2. Executor interrupt_guard_condition_\r\n3. Node guard_conditions_\r\n4. Waitables guard conditions\r\n5. ..more\r\n\r\nThe previous approach was only checking if NOT (1 & 2),\r\nso if a Waitable was triggered, it would re-collect all\r\nentities, even if no new node entity was added. This was the case\r\nof the intra process manager, who relies on waitables.\r\nEvery time a subscriber got a message, all the entities\r\nwere collected.\r\n\r\nSigned-off-by: Mauro <mpasserino@irobot.com>\r\n\r\n* Implement static executor entities collector\r\n\r\nSigned-off-by: Mauro <mpasserino@irobot.com>\r\n\r\n* fixup and style\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* mark new classes as final, with non-virtual destructors\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* adding copyright to static executor files\r\n\r\nSigned-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\n* fixup\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* cpplint fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\nCo-authored-by: Ishu Goel <ishu.goel@nobleo.nl>\r\nCo-authored-by: MartinCornelis2 <martin.cornelis@nobleo.nl>\r\nCo-authored-by: Mauro <mpasserino@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621781e18912b45d36a745f",
    "number": 1033,
    "body": "In the efforts of reducing CPU usage for embedded platforms, this PR is created to give the option to start or not the parameter event subscriber.\r\n\r\nBenchmarks on RPi1 (single core running at 700Mhz) shows that CPU is reduced about 2% when this parameter event subscriber is not created.\r\n\r\nGiven that currently we have the option to NOT start the parameter event publisher, makes sense to have also the option to not start the parameter event subscriber.\r\n\r\n@alsora @dgoel",
    "head_branch": "mauro/rclcpp/add_start-parameter-event-subcriber_option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621781f18912b45d36a7460",
    "number": 1032,
    "body": "Utility operator that is specifically needed for rosbag2 right now but should be useful in general\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>",
    "head_branch": "emersonknapp/qos-equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add equality operators for QoS profile (#1032)\n\n* Add equality operators for QoS profile\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>\r\n\r\n* Use == operator for rmw_time_t as well\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>\r\n\r\n* Add visibility macros for the new functions\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>\r\n\r\n* Add tests for every member of the profile\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>\r\n\r\n* Remove dangling space\r\n\r\nSigned-off-by: Emerson Knapp <emerson.b.knapp@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621782018912b45d36a7461",
    "number": 1031,
    "body": "Record of API review process for `rclcpp`.\r\n\r\nFor external observers, we're doing this review in stages. I will circulate for public feedback after the core team has had a few rounds with it to avoid unnecessarily repeating suggestions (better to say \"please add to this\" rather than \"just send me suggestions\").",
    "head_branch": "api_review_march_2020",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp] API review March 2020 (#1031)\n\n* API review part 1\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* update pre second meeting\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* notes from 2020-03-23 meeting\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* online review comments\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782118912b45d36a7462",
    "number": 1030,
    "body": "Noticed while perusing the code.",
    "head_branch": "jacob/rm_vertical_whitespace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove extra vertical whitespace (#1030)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621782318912b45d36a7463",
    "number": 1028,
    "body": "In the efforts of reducing CPU usage for embedded platforms, this PR is created to give the option to start or not the parameter event subscriber.\r\n\r\nBenchmarks on RPi1 (single core running at 700Mhz) shows that CPU is reduced about 2% when this parameter event subscriber is not created.\r\n\r\nGiven that currently we have the option to NOT start the parameter event publisher, makes sense to have also the option to not start the parameter event subscriber.\r\n\r\n@alsora @dgoel\r\n",
    "head_branch": "mauro/add_start-parameter-event-subcriber_option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782418912b45d36a7464",
    "number": 1027,
    "body": "Connected to #979 \r\n\r\nUsed to wrap the `ParameterTypeException` coming from `ParameterValue::get()` for improving the error message.",
    "head_branch": "jacob/param_type_exception_msg-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add InvalidParameterTypeException (#1027)\n\n* Add InvalidParameterTypeException\r\n\r\nUsed to wrap the ParameterTypeException coming from ParameterValue::get() for improving the error message.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Describe new exception\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Update tests\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621782518912b45d36a7465",
    "number": 1026,
    "body": "Related to https://github.com/ros2/ros2/issues/822\r\n\r\nThe underlying `rcl_publisher_event_init()` and `rcl_subscription_event_init()` functions can now return the `RCL_RET_UNSUPPORTED` error code to indicate that the `event_type` that was passed in is unsupported by the underlying middleware. `rclcpp`'s `create_publisher()` and `create_subscription()` should notify the user of the error more precisely in this case.",
    "head_branch": "miaofei/check-event-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add new type of exception that may be thrown during creation of publisher/subscription (#1026)\n\nSigned-off-by: Miaofei <miaofei@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782618912b45d36a7466",
    "number": 1024,
    "body": "Fixes #979.\r\n\r\nWhen constructing integer ParameterValue objects, also set the double member.\r\nWhen requesting a double value for ParameterValue objects of type integer, do not throw an exception.",
    "head_branch": "jacob/int_as_double_param",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782718912b45d36a7467",
    "number": 1023,
    "body": "‚Ä¶h executor is cancaled\r\n\r\nSigned-off-by: Donghee Ye <donghee.ye@samsung.com>\r\n\r\n\r\nrclcpp::executor::spin_until_future_complete is also finished when executor is canceled.\r\n\r\nRelated to #1022 \r\n",
    "head_branch": "parameter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix spin_until_future_complete: check spinning value (#1023)\n\nSigned-off-by: Donghee Ye <donghee.ye@samsung.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782818912b45d36a7468",
    "number": 1020,
    "body": "Expose the `std::chrono::nanoseconds get_period()` and `set_period(std::chrono::nanoseconds)` functions of the rcl timers to rclcpp.\r\n\r\nreset behaves similar to the reset parameter of ros::Timer::setPeriod",
    "head_branch": "feature/eloquent/set_get_period",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782918912b45d36a7469",
    "number": 1019,
    "body": "FIx to push results to wrong variable.\r\n\r\nRelated issue #1018 ",
    "head_branch": "parameter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix get_parameter_tyeps of AsyncPrameterClient results are always empty (#1019)\n\nSigned-off-by: Donghee Ye <donghee.ye@samsung.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782a18912b45d36a746a",
    "number": 1017,
    "body": "IntraProcessMessage is unused, except in several tests as a dummy message. In another pull request (https://github.com/ros2/rcl_interfaces/pull/89), I remove IntraProcessMessage and replace it with a Dummy message in test_msgs. This PR switches rclcpp's tests over to Dummy message and removes any reference of IntraProcessMessage from rclcpp.",
    "head_branch": "remove_intraprocessmessage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Switch IntraProcessMessage to test_msgs/Empty (#1017)\n\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621782b18912b45d36a746b",
    "number": 1016,
    "body": "Some headers were being included even though they are not required and other headers were being included transitively.",
    "head_branch": "jacob/cleanup_node_interfaces_includes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cleanup node interfaces includes (#1016)\n\nSome headers were being included even though they are not required and other headers were being included transitively.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782c18912b45d36a746c",
    "number": 1015,
    "body": "Backport #952 to Dashing.\r\n\r\nFYI @theseankelly ",
    "head_branch": "jacob/dashing_backport_952",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't specify calling convention in std::_Binder template (#952) (#1015)\n\nFix for a build error on 32-bit Windows. Member functions use the\r\n__thiscall convention by default which is incompatible with __cdecl.\r\n\r\nSigned-off-by: Sean Kelly <sean@seankelly.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782d18912b45d36a746d",
    "number": 1014,
    "body": "Some headers are now located in rosidl_runtime_c/cpp such as:\r\n\r\nhttps://github.com/ros2/rclcpp/blob/master/rclcpp/include/rclcpp/type_support_decl.hpp#L18\r\nhttps://github.com/ros2/rclcpp/blob/master/rclcpp_action/include/rclcpp_action/server.hpp#L19\r\n\r\nthe new location is this one:\r\n\r\nhttps://github.com/ros2/rosidl/tree/ahcorde/feature/splitted_rosidl_generator/rosidl_runtime_c/include/rosidl_generator_c\r\n\r\nhttps://github.com/ros2/rosidl/tree/ahcorde/feature/splitted_rosidl_generator/rosidl_runtime_cpp/include/rosidl_generator_cpp\r\n\r\n----\r\n\r\nrosidl_generator_c/cpp are not needed because the CMakeLists.txt doesn't make use of any of the macros for generating the messages.\r\n\r\n-----\r\n\r\nSigned-off-by: ahcorde <ahcorde@gmail.com>",
    "head_branch": "ahcorde/rosidl_runtime",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Changed rosidl_generator_c/cpp to rosidl_runtime_c/cpp (#1014)\n\nSigned-off-by: ahcorde <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621782f18912b45d36a746e",
    "number": 1013,
    "body": "Signed-off-by: Donghee Ye <donghee.ye@samsung.com>\r\n\r\nRelated to https://github.com/ros2/rclcpp/issues/1012\r\n\r\nTo reset wait_set after reset a cancelled timer, there is needed node handle or context handle. When constructing a timer, there are context handle parameter. To trigger guard condition to reset wait_set, save context handle in constructor and trigger when reset timer.\r\n",
    "head_branch": "dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783018912b45d36a746f",
    "number": 1011,
    "body": "This fixes a cppcheck error that was detected when including the rclcpp headers in rclcpp_action and rclcpp_lifecycle.\r\nIt is not clear to me why cppcheck does not report the unitialized member when testing rclcpp directly.",
    "head_branch": "jacob/fix_cppcheck_error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Zero initialize publisher GID in subscription intra process callback (#1011)\n\nThis fixes a cppcheck error that was detected when including the rclcpp headers in rclcpp_action and rclcpp_lifecycle.\r\nIt is not clear to me why cppcheck does not report the unitialized member when testing rclcpp directly.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783118912b45d36a7470",
    "number": 1006,
    "body": "Fix for a build error on 32-bit Windows. Member functions use the\r\n__thiscall convention by default which is incompatible with __cdecl.\r\n\r\nSigned-off-by: Sean Kelly <sean@seankelly.dev>",
    "head_branch": "eloquent_uwp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't specify calling convention in std::_Binder template (#952) (#1006)\n\nFix for a build error on 32-bit Windows. Member functions use the\r\n__thiscall convention by default which is incompatible with __cdecl.\r\n\r\nSigned-off-by: Sean Kelly <sean@seankelly.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783218912b45d36a7471",
    "number": 1005,
    "body": "Related issue #861 ",
    "head_branch": "topic-get-action-result",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783318912b45d36a7472",
    "number": 1004,
    "body": "Backport of #986 to Eloquent.",
    "head_branch": "backport-986",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing service callback registration tracepoint (#986) (#1004)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783418912b45d36a7473",
    "number": 1003,
    "body": "I'm not sure why this is not showing up yet on ci.ros2.org, but cppcheck fails to find some macros in rclcpp_action and rclcpp_lifecycle. This sets the appropriate ament_cmake variable to find their definitions.\r\n\r\nExample failure:\r\nhttp://build.ros2.org/view/Fci/job/Fci__nightly-debug_ubuntu_focal_amd64/lastCompletedBuild/testReport/\r\n\r\nrclcpp_action\r\nhttps://ci.ros2.org/view/nightly/job/nightly_windows-container_release/4/testReport/(root)/projectroot/cppcheck_3/\r\n\r\nrclcpp_lifecycle\r\nhttps://ci.ros2.org/view/nightly/job/nightly_windows-container_release/4/testReport/(root)/projectroot/cppcheck_4/\r\n\r\nBuilds with this PR\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=9439)](http://ci.ros2.org/job/ci_linux/9439/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=5127)](http://ci.ros2.org/job/ci_linux-aarch64/5127/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=7719)](http://ci.ros2.org/job/ci_osx/7719/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=9366)](http://ci.ros2.org/job/ci_windows/9366/)\r\n* Windows-container [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows-container&build=211)](http://ci.ros2.org/job/ci_windows-container/211/)",
    "head_branch": "cppcheck_include_dirs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783518912b45d36a7474",
    "number": 1002,
    "body": "Similar to changes in https://github.com/ros2/rcl/pull/571\r\nFixes CI issue http://build.ros2.org/user/rotu/my-views/view/CycloneDDS/job/Fci__nightly-cyclonedds_ubuntu_focal_amd64/31/testReport/rclcpp/TestNode/get_publishers_subscriptions_info_by_topic/\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n",
    "head_branch": "pr-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't check lifespan on publisher QoS (#1002)\n\nSigned-off-by: Dan Rose <dan@digilabs.io>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783618912b45d36a7475",
    "number": 1001,
    "body": "While it's not the default value, `TRACETOOLS_DISABLED` can be defined through `ros2_tracing`/`tracetools` to remove all `TRACEPOINT` calls. However, we never applied this logic to some other tracing-related function calls.\r\n\r\n~~Based on #986 because it was just simpler this way.~~ Rebased",
    "head_branch": "ifndef-out-tracing-calls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ifdefs to remove tracing-related calls if tracing is disabled (#1001)\n\n* Add ifdefs to remove tracing-related calls if tracing is disabled\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>\r\n\r\n* Move ifndefs inside register_callback_for_tracing\r\n\r\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621783718912b45d36a7476",
    "number": 1000,
    "body": "It was complaining about an unknown macro RCLCPP_SMART_PTR_DEFINITIONS.\r\nPassing rclcpp include directories to cppcheck resolves the errors\r\nreported in rclcpp_action and rclcpp_lifecycle.",
    "head_branch": "jacob/cppcheck_macro_errors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix unknown macro errors reported by cppcheck 1.90 (#1000)\n\nIt was complaining about an unknown macro RCLCPP_SMART_PTR_DEFINITIONS.\r\nPassing rclcpp include directories to cppcheck resolves the errors\r\nreported in rclcpp_action and rclcpp_lifecycle.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783818912b45d36a7477",
    "number": 999,
    "body": "Precisely what the title says. Before this patch, both `rclcpp::Clock` and `rclcpp::TimerBase` (though indirectly through `rcl`) would access non thread-safe `rcl_clock_*` API without locking, leading to internal state corruption on concurrent access in multi-threaded applications.\r\n\r\nThis change is ABI breaking w.r.t. to previous distro releases (e.g. Eloquent) but sets the scene for future non ABI breaking changes using a PIMPL.",
    "head_branch": "hidmic/clock-thread-safety",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Ensure all rclcpp::Clock accesses are thread-safe.\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621783918912b45d36a7478",
    "number": 998,
    "body": "Alternative to ros2/rcl#560, based on https://github.com/ros2/rcl/pull/560#discussion_r373282259.\r\n\r\nI didn't find a solution that:\r\n- Doesn't break ABI.\r\n- Doesn't have problems if somebody creates a global context in another library (both order of inizialization and order of destruction).\r\n\r\nI chose to break ABI, and avoid the second problem (though that unfortunatelly will block this from being backported as-is).\r\nI'm avoiding to finish the logger when all context were shut down, and I'm calling `rcl_logging_fini` when all the contexts were finished (not shutdown).\r\n\r\nP.S.: The current `g_contexts_mutex` might cause both initialization/destruction order problems if somebody creates a global context in another library, but that's subject of another PR.\r\n\r\nConnects to ros2/rcl#579",
    "head_branch": "ivanpauno/move-logging-configure-fini-to-upper-layer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Ensure logging is initialized just once (#998)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621783b18912b45d36a7479",
    "number": 996,
    "body": "See https://github.com/ros2/rmw/pull/196.",
    "head_branch": "ivanpauno/endpoint-topic-info-count-to-size",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename rmw_topic_endpoint_info_array count to size (#996)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783c18912b45d36a747a",
    "number": 995,
    "body": "The header is needed wherever RCLCPP_* logging macros are used.",
    "head_branch": "jacob/missing_logging_includes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing includes of logging.hpp (#995)\n\nThe header is needed wherever RCLCPP_* logging macros are used.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783d18912b45d36a747b",
    "number": 994,
    "body": "",
    "head_branch": "jacob/node_graph_missing_header",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Include missing header in node_graph.cpp (#994)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783e18912b45d36a747c",
    "number": 993,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nPart of https://github.com/ros2/rcutils/pull/196",
    "head_branch": "log_to_stderr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Switch to using new rcutils_strerror. (#993)\n\n* Switch to using new rcutils_strerror.\r\n\r\nAlso increase timeouts for test_logging, which should reduce flakes on Windows.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621783f18912b45d36a747d",
    "number": 992,
    "body": "After discussing yesterday with @wjwwood we think that these dependencies are not needed anymore here.\r\n\r\nI compiled from sources master and I executed the action examples and it's working\r\n\r\n```\r\nros2 run examples_rclcpp_minimal_action_server action_server_member_functions\r\nros2 run  examples_rclcpp_minimal_action_client action_client_not_composable\r\n```",
    "head_branch": "ahcorde/dependency/rclcpp_action",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] removed rosidl_generator_c dependency (#992)\n\n* rclcpp_action removed rosidl_generator_cpp and rosidl_generator_c dependencies\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>\r\n\r\n* rclcpp_action restored rosidl_generator_c dependency\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>\r\n\r\n* rclcpp action alpha order CMakeLists.txt\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784018912b45d36a747e",
    "number": 991,
    "body": "rmw implementation was declared as a `build_depend` and `exec_depend` but I think this is not needed anymore",
    "head_branch": "ahcorde/dependency/rclcpp_lifecycle_remove_rmw_implemenetation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp lifecycle] removed rmw_implementation from package.xml (#991)\n\n* rclcpp lifecycle removed rmw_implementation from package.xml\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>\r\n\r\n* rclcpp lifecycle added rmw depend in package.xml\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784118912b45d36a747f",
    "number": 990,
    "body": "rmw implementation is used in the CMakeLists.txt to `find_package` but then it's no used\r\n\r\nI think we can remove this ",
    "head_branch": "ahcorde/dependency/remove_rmw_implemenetation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp] replace rmw_implementation for rmw dependency in package.xml (#990)\n\n* rclcpp removed rmw_implementation\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>\r\n\r\n* rclcpp added rmw as a depend in package.xml\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>\r\n\r\n* rclcpp alpha order package.xml\r\n\r\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784218912b45d36a7480",
    "number": 989,
    "body": "I have been checking the package.xml and CMakeLists.txt. `ament_cmake` is defined as a `<build_type>`. In this package was defined as a `<exec_depend>` which I think it doesn't make any sense. \r\n\r\nshould be defined here as a `<buildtool_depend>` or `<buildtool_export_depend>` ? o including one of this tag is redundant?",
    "head_branch": "ahcorde/dependency/remove_ament_cmake",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "removed ament_cmake from package and cmakelists.txt (#989)\n\nSigned-off-by: Alejandro HernaÃÅndez <ahcorde@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784318912b45d36a7481",
    "number": 988,
    "body": "",
    "head_branch": "jacob/fix_docstring",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix get_node_time_source_interface() docstring (#988)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621784518912b45d36a7482",
    "number": 987,
    "body": "use `rcutils_get_env` instead of `getenv()` in `node_options.cpp`\r\nfixes https://github.com/ros2/ros2/issues/856",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784618912b45d36a7483",
    "number": 986,
    "body": "This was an oversight on my part when writing the instrumentation. See https://gitlab.com/micro-ROS/ros_tracing/tracetools_analysis/issues/25#note_284822856.\r\n\r\nI've updated the `ros2_tracing` tests to cover this: https://gitlab.com/micro-ROS/ros_tracing/ros2_tracing/-/merge_requests/138\r\n\r\nI'd like for this to be considered for a backport to eloquent (https://github.com/ros2/ros2/issues/859)!",
    "head_branch": "add-missing-service-callback-registration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing service callback registration tracepoint (#986)\n\nSigned-off-by: Christophe Bedard <bedard.christophe@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784718912b45d36a7484",
    "number": 984,
    "body": "Fixes issue:\r\nhttps://github.com/ros2/rclcpp/issues/983",
    "head_branch": "add-musl-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784818912b45d36a7485",
    "number": 981,
    "body": "Backport of #970 to ROS Eloquent",
    "head_branch": "eloquent_backport_970",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow node clock use in logging macros (#969) (#970) (#981)\n\nCapturing a cached reference allows a clock object that is not a local\r\n(e.g. the one returned by Node::get_clock()) to be passed to the throttle\r\nlogging macro.\r\n\r\nSigned-off-by: Matt Schickler <mschickler@gmail.com>\r\nCo-Authored-By: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\nCo-authored-by: mschickler <mschickler@users.noreply.github.com>\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784918912b45d36a7486",
    "number": 977,
    "body": "Style update to match the ROS 2 development guide and pass with the updated linter configuration from ament/ament_lint#210.",
    "head_branch": "dirk-thomas/nl_func_call_start_multi_line",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "code style only: wrap after open parenthesis if not in one line (#977)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784a18912b45d36a7487",
    "number": 973,
    "body": "Description:\r\nExtended rclcpp to allow serialized intra process communication. Therefore, we added a second connection to the intraprocess manager to the publisher and subscriber for serialized messages. To ease up the memory management, the rcl_serialized_message_t is wrapped in SerializedContainer with a delete to prevent memory loss. To prevent double free the ownership of the serialized message is passed to the publisher. The conversion between serialized and deserialized messages is done in the SubscriptionIntraProcess on demand. The changes also allow general purpose publisher and subscriber as needed e. g. for rosbag2.\r\n\r\nPossible applications:\r\n‚Ä¢\tdirect recording of serialized data without serialization (with IPM)\r\n‚Ä¢\tnon-templated publisher of serialized messages (with IPM)\r\n\r\nFeatures:\r\n‚Ä¢\tadded serialization and deserialization functions in intraprocess manager\r\n‚Ä¢\timplemented publish of serialized messages (call by value and unique pointer) in Publisher and PublisherLifecycle\r\n‚Ä¢\tclaiming ownership of serialized messages by publish(rcl_serialized_message_t)\r\n‚Ä¢\tcreate_publisher and create_subscription support now general message type of rcl_serialized_message_t by passing message_type (so non-templated version is possible)\r\n‚Ä¢\tadded unit tests: test_intra_process_communication\r\n\r\n",
    "head_branch": "dnae_adas/serialized_ipm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784b18912b45d36a7488",
    "number": 971,
    "body": "I don't see a reason why not (`wait`, `wait_for`, `wait_until`, `valid` are all const methods).\r\nIn this way, a temporal is admitted.\r\n\r\nAnother question:\r\nWhy not accepting a `std::future` by value too?\r\n\r\nthat would transform:\r\n```cpp\r\nstd::future<RET_TYPE> future = ...;\r\n...\r\nrclcpp::spin_until_future_complete(node, future.share());\r\n```\r\n\r\nin:\r\n```cpp\r\nstd::future<RET_TYPE> future = ...;\r\n...\r\nrclcpp::spin_until_future_complete(node, std::move(future));\r\n```",
    "head_branch": "ivanpauno/spin-until-future-complete-accept-rvalue",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Accept taking an rvalue ref future in spin_until_future_complete (#971)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784c18912b45d36a7489",
    "number": 970,
    "body": "Capturing a cached reference allows a clock object that is not a local\r\n(e.g. the one returned by Node::get_clock()) to be passed to the throttle\r\nlogging macro.\r\n\r\nSigned-off-by: Matt Schickler <mschickler@gmail.com>",
    "head_branch": "mschickler/log_throttle_969",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow node clock use in logging macros (#969) (#970)\n\nCapturing a cached reference allows a clock object that is not a local\r\n(e.g. the one returned by Node::get_clock()) to be passed to the throttle\r\nlogging macro.\r\n\r\nSigned-off-by: Matt Schickler <mschickler@gmail.com>\r\nCo-Authored-By: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784d18912b45d36a748a",
    "number": 968,
    "body": "~~Clang won't compile if the c++14 deprecated attribute is used next to visibility attributes.~~\r\nChanging the order resolves a compilation issue with Clang.\r\n\r\nAddressing https://github.com/ros2/rclcpp/pull/967#issuecomment-577393163",
    "head_branch": "jacob/clang_deprecated_workaround",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Change order of deprecated and visibility attributes (#968)\n\nThis fixes a build issue with Clang.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621784e18912b45d36a748b",
    "number": 967,
    "body": "The function was previously documented as being deprecated, but this change adds compiler warnings if it is used.\r\nIgnore compiler warnings where the function is being tested and change to the preferred usage elsewhere.\r\n\r\nIt doesn't look like where using `is_initialized()` in any other `ros2` packages, but running a build for all of them just in case: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=9099)](https://ci.ros2.org/job/ci_linux/9099/) (edit: rebuild with connected PR)",
    "head_branch": "jacob/deprecate_is_initialized",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecated is_initialized() (#967)\n\nThe function was previously documented as being deprecated, but this change adds compiler warnings if it is used.\r\nIgnore compiler warnings where the function is being tested and change to the preferred usage elsewhere.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785018912b45d36a748c",
    "number": 966,
    "body": "Backport #928 to Eloquent.",
    "head_branch": "jacob/backport_928",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Complete published event message when declaring a parameter (#928) (#966)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>\r\n\r\nCo-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785118912b45d36a748d",
    "number": 965,
    "body": "Backport #914 to Eloquent.",
    "head_branch": "jacob/backport_914",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Intra-process subscriber should use RMW actual qos. (ros2#913) (#914) (#965)\n\n* Intra-process subscriber should use RMW actual qos. (ros2#913)\r\n\r\nSigned-off-by: Todd Malsbary <todd.malsbary@intel.com>\r\n\r\nCo-authored-by: Todd Malsbary <todd.malsbary@intel.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785218912b45d36a748e",
    "number": 964,
    "body": "Including just `logging.hpp` and using the new stream macros (#926) is causing the following error:\r\n```\r\nerror: aggregate ‚Äòstd::stringstream ss‚Äô has incomplete type and cannot be defined\r\nRCLCPP_INFO_STREAM(logger, \"Test\");\r\n```\r\nI added the required include line to fix this.",
    "head_branch": "fix-logging-missing-include",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "logging.hpp: Added missing include (#964)\n\nSigned-off-by: Dino H√ºllmann <dino.huellmann@bam.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785318912b45d36a748f",
    "number": 963,
    "body": "This PR addresses issue #961, where std::make_shared was marked as `[[nodiscard]]` in the latest MS VC buildtools. This PR only affects test files, which caused the warnings.\r\n\r\nExample on most up-to-date buildtools (Windows) without this PR\r\n[![Windows without PR](https://citest.ros2.org/buildStatus/icon?job=ci_windows&build=100)](https://citest.ros2.org/job/ci_windows/100/)\r\nWith this PR\r\n[![Build Status](https://citest.ros2.org/buildStatus/icon?job=ci_windows&build=103)](https://citest.ros2.org/job/ci_windows/103/)\r\n\r\nTests on current ci.ros2.org\r\nMac\r\n[![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_osx&build=7374)](https://ci.ros2.org/job/ci_osx/7374/)\r\nLinux\r\n[![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=9004)](https://ci.ros2.org/job/ci_linux/9004/)\r\nWindows\r\n[![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=8939)](https://ci.ros2.org/job/ci_windows/8939/)",
    "head_branch": "issue_961",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Assigning make_shared result to variables in test (#963)\n\n* Assigning make_shared result to variables in test\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>\r\n\r\n* PR fixup\r\n\r\nSigned-off-by: Stephen Brawner <brawner@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785418912b45d36a7490",
    "number": 962,
    "body": "Signed-off-by: Mikael Arguedas <mikael.arguedas@gmail.com>\r\n\r\n```\r\n--- stderr: rclcpp\r\n/opt/ros2_ws/src/ros2/rclcpp/rclcpp/src/rclcpp/detail/utilities.cpp: In function ‚Äòstd::vector<std::__cxx11::basic_string<char> > rclcpp::detail::get_unparsed_ros_arguments(int, const char* const*, rcl_arguments_t*, rcl_allocator_t)‚Äô:\r\n/opt/ros2_ws/src/ros2/rclcpp/rclcpp/src/rclcpp/detail/utilities.cpp:34:7: warning: unused parameter ‚Äòargc‚Äô [-Wunused-parameter]\r\n   int argc, char const * const argv[],\r\n       ^~~~\r\n---\r\n\r\n```",
    "head_branch": "fix_warning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix unused parameter warning (#962)\n\nSigned-off-by: Mikael Arguedas <mikael.arguedas@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785518912b45d36a7491",
    "number": 960,
    "body": "Signed-off-by: Barry Xu <Barry.Xu@sony.com>",
    "head_branch": "topic-get-topic-info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement functions to get publisher and subcription informations like QoS policies from topic name (#960)\n\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\nCo-authored-by: Miaofei Mei <ameision@hotmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621785618912b45d36a7492",
    "number": 959,
    "body": "For addressing https://github.com/ros2/rclcpp/issues/943#issuecomment-570355568\r\n\r\nThis is similar to https://github.com/ros2/rclpy/pull/454, but for `rclcpp` and will have no implementation right now.",
    "head_branch": "miaofei/stub_qos_in_topic_info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785718912b45d36a7493",
    "number": 954,
    "body": "Probably fixes https://github.com/ros2/rclcpp/issues/938.\r\n\r\nAnyways, \"possible UB\" should never be part of a TODO comment.",
    "head_branch": "ivanpauno/fix-#938",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Avoid possible UB in Clock jump callbacks (#954)\n\n* Avoid possible UB in Clock jump callbacks\r\n\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621785918912b45d36a7494",
    "number": 952,
    "body": "This change addresses a build problem on x86 Windows machines. Member functions use the `__thiscall` calling convention on x86 (as opposed to `__cdecl` on x64), and so the compiler is unable to resolve the `function_traits` template.\r\n\r\nIt seems there's no need to specify the calling convention in the helper templates and the compiler can properly resolve on both x86 and amd64.",
    "head_branch": "x86_call",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't specify calling convention in std::_Binder template (#952)\n\nFix for a build error on 32-bit Windows. Member functions use the\r\n__thiscall convention by default which is incompatible with __cdecl.\r\n\r\nSigned-off-by: Sean Kelly <sean@seankelly.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785a18912b45d36a7495",
    "number": 951,
    "body": "Follow up PR after https://github.com/ros2/rclcpp/pull/842, for the exact same set of reasons. We should probably backport this on the next Eloquent patch release.",
    "head_branch": "hidmic/handle-unknown-global-ros-args",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Handle unknown global ROS arguments. (#951)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785b18912b45d36a7496",
    "number": 950,
    "body": "Backport #948 to Eloquent\r\n\r\n---\r\n\r\nOtherwise, rclcpp_components_register_node() fails if used from a fat archive.",
    "head_branch": "jacob/eloquent_backport_948",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove absolute path from installed CMake code (#948) (#950)\n\nOtherwise, rclcpp_components_register_node() fails if used from a fat archive.\r\n\r\nRelated to https://github.com/ros2/ros2/issues/606.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785c18912b45d36a7497",
    "number": 949,
    "body": "Backport #948 to Dashing\r\n\r\n---\r\n\r\nOtherwise, rclcpp_components_register_node() fails if used from a fat archive.",
    "head_branch": "jacob/dashing_backport_948",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove absolute path from installed CMake code (#948) (#949)\n\nOtherwise, rclcpp_components_register_node() fails if used from a fat archive.\r\n\r\nRelated to https://github.com/ros2/ros2/issues/606.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785d18912b45d36a7498",
    "number": 948,
    "body": "Otherwise, rclcpp_components_register_node() fails if used from a fat archive.\r\n\r\nRelated to https://github.com/ros2/ros2/issues/606.\r\n\r\nThis fix is similar to that done in https://github.com/ros2/test_interface_files/pull/9.",
    "head_branch": "jacob/rclcpp_components_relocatable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove absolute path from installed CMake code (#948)\n\nOtherwise, rclcpp_components_register_node() fails if used from a fat archive.\r\n\r\nRelated to https://github.com/ros2/ros2/issues/606.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785e18912b45d36a7499",
    "number": 947,
    "body": "Fixes ros2/build_cop#254.\r\n\r\nSee ros2/build_cop#254 (comment).\r\n\r\nThis PR fixes ros2/build_cop#254 independently of https://github.com/ros2/rclcpp/pull/946, though both aren't exclusive.",
    "head_branch": "ivanpauno/clear-sub-contexts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clear sub contexts when starting another init-shutdown cycle (#947)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621785f18912b45d36a749a",
    "number": 946,
    "body": "Fixes https://github.com/ros2/build_cop/issues/254.\r\n\r\nSee https://github.com/ros2/build_cop/issues/254#issuecomment-566160083.",
    "head_branch": "ivanpauno/fix-ros2/build_cop#254",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Stop retaining ownership of the rcl context in GraphListener (#946)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786018912b45d36a749b",
    "number": 945,
    "body": "Address the comments on https://github.com/ros2/rclcpp/pull/935#discussion_r354449152 and https://github.com/ros2/rclcpp/pull/935#discussion_r354611621.",
    "head_branch": "dirk-thomas/pr935comments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix function docblock, check for unparsed arguments (#945)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786118912b45d36a749c",
    "number": 942,
    "body": "It's a bit sparse; is there anything important missing? Happy to add more.",
    "head_branch": "maryaB/readme",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "New README (#942)\n\n* New README\r\n\r\n* dashing to eloquent for api docs\r\n\r\n* remove \"accepted\"\r\n\r\nCo-Authored-By: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* components > APIs\r\n\r\nCo-Authored-By: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786218912b45d36a749d",
    "number": 939,
    "body": "I'll be grateful for review here as I am just doing what messieurs Compiler and Cppcheck tell me to do.\r\n\r\nIn https://github.com/ros2/rclcpp/pull/897 when removing `virtual` a blank line was left in. I'm not sure if there's a reason for that and if I should follow that convention here or not.",
    "head_branch": "nuclearsandwich/clock-override",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Mark get_clock() as override to fix clang warnings. (#939)\n\nSigned-off-by: Steven! Ragnar√∂k <steven@nuclearsandwich.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621786418912b45d36a749e",
    "number": 937,
    "body": "Linux: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=8811)](https://ci.ros2.org/job/ci_linux/8811/)",
    "head_branch": "jacob/fix_typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix typo in action client logger name (#937)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786518912b45d36a749f",
    "number": 936,
    "body": "[ARMHF build is triggering a warning](https://ci.ros2.org/view/nightly/job/nightly_linux-armhf_debug/302/consoleFull) \"comparison between signed and unsigned integer expressions\"\r\n\r\n\r\n```\r\n00:38:40.142 In file included from /home/jenkins-agent/workspace/nightly_linux-armhf_debug/ws/src/ros2/rclcpp/rclcpp/test/test_intra_process_buffer.cpp:19:0:\r\n00:38:40.142 /home/jenkins-agent/workspace/nightly_linux-armhf_debug/ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h: In instantiation of ‚Äòtesting::AssertionResult testing::internal::CmpHelperEQ(const char*, const char*, const T1&, const T2&) [with T1 = unsigned int; T2 = long int]‚Äô:\r\n00:38:40.142 /home/jenkins-agent/workspace/nightly_linux-armhf_debug/ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1495:23:   required from ‚Äòstatic testing::AssertionResult testing::internal::EqHelper<lhs_is_null_literal>::Compare(const char*, const char*, const T1&, const T2&) [with T1 = unsigned int; T2 = long int; bool lhs_is_null_literal = false]‚Äô\r\n00:38:40.142 /home/jenkins-agent/workspace/nightly_linux-armhf_debug/ws/src/ros2/rclcpp/rclcpp/test/test_intra_process_buffer.cpp:76:3:   required from here\r\n00:38:40.142 /home/jenkins-agent/workspace/nightly_linux-armhf_debug/ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1467:11: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n00:38:40.142    if (lhs == rhs) {\r\n```\r\n\r\nThis is possibly caused by [shared_ptr::use_count returning a long](https://en.cppreference.com/w/cpp/memory/shared_ptr/use_count).\r\n\r\n### Changes\r\n* asserts in `test_intra_process_buffer.cpp` now compare against signed int literals.\r\n\r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>",
    "head_branch": "zmichaels11/fix-asserts-on-shared_ptr-use_count",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix asserts on shared_ptr::use_count; expects long, got uint32 (#936)\n\n* Fix asserts on shared_ptr::use_count; expects long, got uint32\r\n\r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>\r\n\r\n* Add suffix to integer literals to make them longs\r\n\r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>\r\n\r\n* Add missing L\r\n\r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786618912b45d36a74a0",
    "number": 935,
    "body": "Backport #784, #790, #795 to Dashing for the CMake macro `rclcpp_components_register_node`. These 3 PRs are everything in the history of `rclcpp_components_register_node.cmake`.\r\n\r\nhttps://github.com/ros2/rclcpp/commits/eloquent/rclcpp_components/cmake/rclcpp_components_register_node.cmake",
    "head_branch": "dashing_backport_register_node",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[Dashing] backport rclcpp_components_register_node (#935)\n\n* Cmake infrastructure for creating components (#784)\r\n\r\n*cmake macro to create components for libraries with multiple nodes\r\n\r\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\n\r\n* fix for multiple nodes not being recognized (#790)\r\n\r\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>\r\n\r\n* fix linter issue (#795)\r\n\r\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>\r\nSigned-off-by: Shane Loretz <sloretz@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786718912b45d36a74a1",
    "number": 934,
    "body": "Backport of #920.\r\n",
    "head_branch": "ivanpauno/dashing-backport-#920",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "issue-919 Fixed \"memory leak\" in action clients (#920) (#934)\n\nWhenever a call is made to `rclcpp_action::Client::wait_for_action_server`\r\na weak pointer to an Event object gets added to the graph_event_ vector\r\nof the NodeGraph interface. This vector will be cleared on a node graph\r\nchange event, but if no such event occurs the weak pointer will be stuck\r\nin the vector.  Furthermore, if client code issues repeated calls to\r\n`wait_for_action_server` the vector will keep growing.\r\n\r\nThe fix moves the Event object creation right after the early return from\r\n`wait_for_action_server` so that the Event object is not created in the\r\ncase that the server is known to be present and therefore there is no\r\nneed to wait for a node graph change event to occur.\r\n\r\nSigned-off-by: Adrian Stere <astere@clearpath.ai>\r\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786818912b45d36a74a2",
    "number": 932,
    "body": "Adding const qualifier to the `now()` member function, so that it is easier to use.",
    "head_branch": "miaofei/node-now-const",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786918912b45d36a74a3",
    "number": 931,
    "body": "",
    "head_branch": "add-basic-test-of-services",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786a18912b45d36a74a4",
    "number": 930,
    "body": "Fix linting error found via the [nightly build](https://ci.ros2.org/view/nightly/job/nightly_linux_debug/1388/testReport/junit/rclcpp/uncrustify/src_rclcpp_duration_cpp/) test results.\r\n\r\n",
    "head_branch": "duration-lint-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duration.cpp lint error (#930)\n\n* Fix duration.cpp lint error\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Apply review format suggestion\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786b18912b45d36a74a5",
    "number": 929,
    "body": "Currently, we're creating one parameter events topic in each namespace, which IMO doesn't have much sense.\r\n\r\nI think that having only one topic for this would be better.\r\nPrevious discussion here: https://github.com/ros2/rclcpp/pull/829#issuecomment-557660967.\r\n\r\nSame about [rosout](https://github.com/ros2/rcl/blob/fbe299af7f96d2d530d55e633ab82a4514d045db/rcl/src/rcl/logging_rosout.c#L36).\r\n\r\n@ros2/team @hidmic I would like to hear your opinion (I think we have talked once offline about this ...).",
    "head_branch": "ivanpauno/absolute-parameter-events-topic",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use absolute topic name for parameter events (#929)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786d18912b45d36a74a6",
    "number": 928,
    "body": "Found this while checking another thing.",
    "head_branch": "ivanpauno/declare-parameter-event-message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Complete published event message when declaring a parameter (#928)\n\nSigned-off-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621786e18912b45d36a74a7",
    "number": 926,
    "body": "Fixes #915. Requires ros2/rcutils#192.\r\n\r\nThe changes to the `logging.hpp.em` template only result in additional lines and don't change/remove any existing lines.\r\n\r\nSince the `STREAM` macros only differ in the vargs / stream_arg handling the new test only covers one of the feature combinations.\r\n\r\nThe first commit is a pure refactoring without changing the expanded template. The second commit adds `stream` to the feature combinations.\r\n\r\nThe following details show the added lines for the `DEBUG` log level:\r\n\r\n<details>\r\n<summary>New empty STREAM macros for all existing feature combinations in case logging has been disabled.</summary>\r\n\r\n> /// Empty logging macro due to the preprocessor definition of RCLCPP_LOG_MIN_SEVERITY.\r\n> #define RCLCPP_DEBUG_STREAM(...)\r\n> /// Empty logging macro due to the preprocessor definition of RCLCPP_LOG_MIN_SEVERITY.\r\n> #define RCLCPP_DEBUG_STREAM_ONCE(...)\r\n> /// Empty logging macro due to the preprocessor definition of RCLCPP_LOG_MIN_SEVERITY.\r\n> #define RCLCPP_DEBUG_STREAM_EXPRESSION(...)\r\n> /// Empty logging macro due to the preprocessor definition of RCLCPP_LOG_MIN_SEVERITY.\r\n> #define RCLCPP_DEBUG_STREAM_FUNCTION(...)\r\n> /// Empty logging macro due to the preprocessor definition of RCLCPP_LOG_MIN_SEVERITY.\r\n> #define RCLCPP_DEBUG_STREAM_SKIPFIRST(...)\r\n> /// Empty logging macro due to the preprocessor definition of RCLCPP_LOG_MIN_SEVERITY.\r\n> #define RCLCPP_DEBUG_STREAM_THROTTLE(...)\r\n> /// Empty logging macro due to the preprocessor definition of RCLCPP_LOG_MIN_SEVERITY.\r\n> #define RCLCPP_DEBUG_STREAM_SKIPFIRST_THROTTLE(...)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>New STREAM macros for all existing feature combinations.</summary>\r\n\r\n> // The RCLCPP_DEBUG_STREAM macro is surrounded by do { .. } while (0)\r\n> // to implement the standard C macro idiom to make the macro safe in all\r\n> // contexts; see http://c-faq.com/cpp/multistmt.html for more information.\r\n> /**\r\n>  * \\def RCLCPP_DEBUG_STREAM\r\n>  * Log a message with severity DEBUG.\r\n>  * \\param logger The `rclcpp::Logger` to use\r\n>  * \\param stream_arg The argument << into a stringstream\r\n>  */\r\n> #define RCLCPP_DEBUG_STREAM(logger, stream_arg) \\\r\n>   do { \\\r\n>     static_assert( \\\r\n>       ::std::is_same<typename std::remove_cv<typename std::remove_reference<decltype(logger)>::type>::type, \\\r\n>       typename ::rclcpp::Logger>::value, \\\r\n>       \"First argument to logging macros must be an rclcpp::Logger\"); \\\r\n>  \\\r\n>     std::stringstream ss; \\\r\n>     ss << stream_arg; \\\r\n>     RCUTILS_LOG_DEBUG_NAMED( \\\r\n>       logger.get_name(), \\\r\n>       \"%s\", rclcpp::get_c_string(ss.str())); \\\r\n>   } while (0)\r\n> \r\n> // The RCLCPP_DEBUG_STREAM_ONCE macro is surrounded by do { .. } while (0)\r\n> // to implement the standard C macro idiom to make the macro safe in all\r\n> // contexts; see http://c-faq.com/cpp/multistmt.html for more information.\r\n> /**\r\n>  * \\def RCLCPP_DEBUG_STREAM_ONCE\r\n>  * Log a message with severity DEBUG with the following conditions:\r\n>  * All subsequent log calls except the first one are being ignored.\r\n>  * \\param logger The `rclcpp::Logger` to use\r\n>  * \\param stream_arg The argument << into a stringstream\r\n>  */\r\n> #define RCLCPP_DEBUG_STREAM_ONCE(logger, stream_arg) \\\r\n>   do { \\\r\n>     static_assert( \\\r\n>       ::std::is_same<typename std::remove_cv<typename std::remove_reference<decltype(logger)>::type>::type, \\\r\n>       typename ::rclcpp::Logger>::value, \\\r\n>       \"First argument to logging macros must be an rclcpp::Logger\"); \\\r\n>  \\\r\n>     std::stringstream ss; \\\r\n>     ss << stream_arg; \\\r\n>     RCUTILS_LOG_DEBUG_ONCE_NAMED( \\\r\n>       logger.get_name(), \\\r\n>       \"%s\", rclcpp::get_c_string(ss.str())); \\\r\n>   } while (0)\r\n> \r\n> // The RCLCPP_DEBUG_STREAM_EXPRESSION macro is surrounded by do { .. } while (0)\r\n> // to implement the standard C macro idiom to make the macro safe in all\r\n> // contexts; see http://c-faq.com/cpp/multistmt.html for more information.\r\n> /**\r\n>  * \\def RCLCPP_DEBUG_STREAM_EXPRESSION\r\n>  * Log a message with severity DEBUG with the following conditions:\r\n>  * Log calls are being ignored when the expression evaluates to false.\r\n>  * \\param logger The `rclcpp::Logger` to use\r\n>  * \\param expression The expression determining if the message should be logged\r\n>  * \\param stream_arg The argument << into a stringstream\r\n>  */\r\n> #define RCLCPP_DEBUG_STREAM_EXPRESSION(logger, expression, stream_arg) \\\r\n>   do { \\\r\n>     static_assert( \\\r\n>       ::std::is_same<typename std::remove_cv<typename std::remove_reference<decltype(logger)>::type>::type, \\\r\n>       typename ::rclcpp::Logger>::value, \\\r\n>       \"First argument to logging macros must be an rclcpp::Logger\"); \\\r\n>  \\\r\n>     std::stringstream ss; \\\r\n>     ss << stream_arg; \\\r\n>     RCUTILS_LOG_DEBUG_EXPRESSION_NAMED( \\\r\n>       expression, \\\r\n>       logger.get_name(), \\\r\n>       \"%s\", rclcpp::get_c_string(ss.str())); \\\r\n>   } while (0)\r\n> \r\n> // The RCLCPP_DEBUG_STREAM_FUNCTION macro is surrounded by do { .. } while (0)\r\n> // to implement the standard C macro idiom to make the macro safe in all\r\n> // contexts; see http://c-faq.com/cpp/multistmt.html for more information.\r\n> /**\r\n>  * \\def RCLCPP_DEBUG_STREAM_FUNCTION\r\n>  * Log a message with severity DEBUG with the following conditions:\r\n>  * Log calls are being ignored when the function returns false.\r\n>  * \\param logger The `rclcpp::Logger` to use\r\n>  * \\param function The functions return value determines if the message should be logged\r\n>  * \\param stream_arg The argument << into a stringstream\r\n>  */\r\n> #define RCLCPP_DEBUG_STREAM_FUNCTION(logger, function, stream_arg) \\\r\n>   do { \\\r\n>     static_assert( \\\r\n>       ::std::is_same<typename std::remove_cv<typename std::remove_reference<decltype(logger)>::type>::type, \\\r\n>       typename ::rclcpp::Logger>::value, \\\r\n>       \"First argument to logging macros must be an rclcpp::Logger\"); \\\r\n>  \\\r\n>     std::stringstream ss; \\\r\n>     ss << stream_arg; \\\r\n>     RCUTILS_LOG_DEBUG_FUNCTION_NAMED( \\\r\n>       function, \\\r\n>       logger.get_name(), \\\r\n>       \"%s\", rclcpp::get_c_string(ss.str())); \\\r\n>   } while (0)\r\n> \r\n> // The RCLCPP_DEBUG_STREAM_SKIPFIRST macro is surrounded by do { .. } while (0)\r\n> // to implement the standard C macro idiom to make the macro safe in all\r\n> // contexts; see http://c-faq.com/cpp/multistmt.html for more information.\r\n> /**\r\n>  * \\def RCLCPP_DEBUG_STREAM_SKIPFIRST\r\n>  * Log a message with severity DEBUG with the following conditions:\r\n>  * The first log call is being ignored but all subsequent calls are being processed.\r\n>  * \\param logger The `rclcpp::Logger` to use\r\n>  * \\param stream_arg The argument << into a stringstream\r\n>  */\r\n> #define RCLCPP_DEBUG_STREAM_SKIPFIRST(logger, stream_arg) \\\r\n>   do { \\\r\n>     static_assert( \\\r\n>       ::std::is_same<typename std::remove_cv<typename std::remove_reference<decltype(logger)>::type>::type, \\\r\n>       typename ::rclcpp::Logger>::value, \\\r\n>       \"First argument to logging macros must be an rclcpp::Logger\"); \\\r\n>  \\\r\n>     std::stringstream ss; \\\r\n>     ss << stream_arg; \\\r\n>     RCUTILS_LOG_DEBUG_SKIPFIRST_NAMED( \\\r\n>       logger.get_name(), \\\r\n>       \"%s\", rclcpp::get_c_string(ss.str())); \\\r\n>   } while (0)\r\n> \r\n> // The RCLCPP_DEBUG_STREAM_THROTTLE macro is surrounded by do { .. } while (0)\r\n> // to implement the standard C macro idiom to make the macro safe in all\r\n> // contexts; see http://c-faq.com/cpp/multistmt.html for more information.\r\n> /**\r\n>  * \\def RCLCPP_DEBUG_STREAM_THROTTLE\r\n>  * Log a message with severity DEBUG with the following conditions:\r\n>  * Log calls are being ignored if the last logged message is not longer ago than the specified duration.\r\n>  * \\param logger The `rclcpp::Logger` to use\r\n>  * \\param clock rclcpp::Clock that will be used to get the time point.\r\n>  * \\param duration The duration of the throttle interval\r\n>  * \\param stream_arg The argument << into a stringstream\r\n>  */\r\n> #define RCLCPP_DEBUG_STREAM_THROTTLE(logger, clock, duration, stream_arg) \\\r\n>   do { \\\r\n>     static_assert( \\\r\n>       ::std::is_same<typename std::remove_cv<typename std::remove_reference<decltype(logger)>::type>::type, \\\r\n>       typename ::rclcpp::Logger>::value, \\\r\n>       \"First argument to logging macros must be an rclcpp::Logger\"); \\\r\n> \\\r\n>     auto get_time_point = [&clock](rcutils_time_point_value_t * time_point) -> rcutils_ret_t { \\\r\n>       try { \\\r\n>         *time_point = clock.now().nanoseconds(); \\\r\n>       } catch (...) { \\\r\n>         RCUTILS_SAFE_FWRITE_TO_STDERR( \\\r\n>         \"[rclcpp|logging.hpp] RCLCPP_DEBUG_STREAM_THROTTLE could not get current time stamp\\n\"); \\\r\n>         return RCUTILS_RET_ERROR; \\\r\n>       } \\\r\n>         return RCUTILS_RET_OK; \\\r\n>     }; \\\r\n>  \\\r\n>     std::stringstream ss; \\\r\n>     ss << stream_arg; \\\r\n>     RCUTILS_LOG_DEBUG_THROTTLE_NAMED( \\\r\n>       get_time_point, \\\r\n>       duration, \\\r\n>       logger.get_name(), \\\r\n>       \"%s\", rclcpp::get_c_string(ss.str())); \\\r\n>   } while (0)\r\n> \r\n> // The RCLCPP_DEBUG_STREAM_SKIPFIRST_THROTTLE macro is surrounded by do { .. } while (0)\r\n> // to implement the standard C macro idiom to make the macro safe in all\r\n> // contexts; see http://c-faq.com/cpp/multistmt.html for more information.\r\n> /**\r\n>  * \\def RCLCPP_DEBUG_STREAM_SKIPFIRST_THROTTLE\r\n>  * Log a message with severity DEBUG with the following conditions:\r\n>  * The first log call is being ignored but all subsequent calls are being processed.\r\n>  * Log calls are being ignored if the last logged message is not longer ago than the specified duration.\r\n>  * \\param logger The `rclcpp::Logger` to use\r\n>  * \\param clock rclcpp::Clock that will be used to get the time point.\r\n>  * \\param duration The duration of the throttle interval\r\n>  * \\param stream_arg The argument << into a stringstream\r\n>  */\r\n> #define RCLCPP_DEBUG_STREAM_SKIPFIRST_THROTTLE(logger, clock, duration, stream_arg) \\\r\n>   do { \\\r\n>     static_assert( \\\r\n>       ::std::is_same<typename std::remove_cv<typename std::remove_reference<decltype(logger)>::type>::type, \\\r\n>       typename ::rclcpp::Logger>::value, \\\r\n>       \"First argument to logging macros must be an rclcpp::Logger\"); \\\r\n> \\\r\n>     auto get_time_point = [&clock](rcutils_time_point_value_t * time_point) -> rcutils_ret_t { \\\r\n>       try { \\\r\n>         *time_point = clock.now().nanoseconds(); \\\r\n>       } catch (...) { \\\r\n>         RCUTILS_SAFE_FWRITE_TO_STDERR( \\\r\n>         \"[rclcpp|logging.hpp] RCLCPP_DEBUG_STREAM_SKIPFIRST_THROTTLE could not get current time stamp\\n\"); \\\r\n>         return RCUTILS_RET_ERROR; \\\r\n>       } \\\r\n>         return RCUTILS_RET_OK; \\\r\n>     }; \\\r\n>  \\\r\n>     std::stringstream ss; \\\r\n>     ss << stream_arg; \\\r\n>     RCUTILS_LOG_DEBUG_SKIPFIRST_THROTTLE_NAMED( \\\r\n>       get_time_point, \\\r\n>       duration, \\\r\n>       logger.get_name(), \\\r\n>       \"%s\", rclcpp::get_c_string(ss.str())); \\\r\n>   } while (0)\r\n\r\n</details>\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=8648)](http://ci.ros2.org/job/ci_linux/8648/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=4491)](http://ci.ros2.org/job/ci_linux-aarch64/4491/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=7055)](http://ci.ros2.org/job/ci_osx/7055/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=8567)](http://ci.ros2.org/job/ci_windows/8567/)\r\n  * unrelated linter failures",
    "head_branch": "dirk-thomas/logging-streams",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      " add support for STREAM logging macros (#926)\n\n* refactor template logic around feature combinations\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* add support for STREAM logging macros\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621786f18912b45d36a74a8",
    "number": 924,
    "body": "**_Depends on [ros2/rcl:535](https://github.com/ros2/rcl/pull/535)_**\r\n\r\nRelated to [this](https://github.com/ros2/ros2/issues/822) feature request. The design and implementation details can also be found there.\r\n\r\n- Added support for `incompatible_qos` event in publisher and subcription\r\n\r\nSigned-off-by: Jaison Titus <jaisontj92@gmail.com>",
    "head_branch": "jaisontj/incompatible_qos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events (#924)\n\nSigned-off-by: Jaison Titus <jaisontj92@gmail.com>\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\nCo-authored-by: Miaofei <miaofei@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621787018912b45d36a74a9",
    "number": 922,
    "body": "Per this issue: ros-planning/navigation2#844\r\n\r\nIn navigation-land we'd like to make more const methods and this is the link stopping us.\r\n\r\nSorry about that, something in my branching got messed up briefly ",
    "head_branch": "clock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Create node clock calls const (try 2) (#922)\n\n* create node clock calls const\r\n\r\nSigned-off-by: stevemacenski <stevenmacenski@gmail.com>\r\n\r\n* two methods for get clock, one const\r\n\r\nSigned-off-by: stevemacenski <stevenmacenski@gmail.com>\r\n\r\n* changing APIs for NodeClock and NodeClockInterface\r\n\r\nSigned-off-by: stevemacenski <stevenmacenski@gmail.com>\r\n\r\n* changing RCLCPP_LIFECYCLE_PUBLIC from RCLCPP_PUBLIC for rclcpp lifecycle node get_clock const method\r\n\r\nSigned-off-by: stevemacenski <stevenmacenski@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621787118912b45d36a74aa",
    "number": 921,
    "body": "Per this issue: https://github.com/ros-planning/navigation2/issues/844\r\n\r\nIn navigation-land we'd like to make more const methods and this is the link stopping us. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787218912b45d36a74ab",
    "number": 920,
    "body": "Whenever a call is made to `rclcpp_action::Client::wait_for_action_server`\r\na weak pointer to an Event object gets added to the graph_event_ vector\r\nof the NodeGraph interface. This vector will be cleared on a node graph\r\nchange event, but if no such event occurs the weak pointer will be stuck\r\nin the vector.  Furthermore, if client code issues repeated calls to\r\n`wait_for_action_server` the vector will keep growing.\r\n\r\nThe fix moves the Event object creation right after the early return from\r\n`wait_for_action_server` so that the Event object is not created in the\r\ncase that the server is known to be present and therefore there is no\r\nneed to wait for a node graph change event to occur.",
    "head_branch": "issue-919",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "issue-919 Fixed \"memory leak\" in action clients (#920)\n\nWhenever a call is made to `rclcpp_action::Client::wait_for_action_server`\r\na weak pointer to an Event object gets added to the graph_event_ vector\r\nof the NodeGraph interface. This vector will be cleared on a node graph\r\nchange event, but if no such event occurs the weak pointer will be stuck\r\nin the vector.  Furthermore, if client code issues repeated calls to\r\n`wait_for_action_server` the vector will keep growing.\r\n\r\nThe fix moves the Event object creation right after the early return from\r\n`wait_for_action_server` so that the Event object is not created in the\r\ncase that the server is known to be present and therefore there is no\r\nneed to wait for a node graph change event to occur.\r\n\r\nSigned-off-by: Adrian Stere <astere@clearpath.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787318912b45d36a74ac",
    "number": 918,
    "body": "Signed-off-by: Christophe Bedard <christophe.bedard@apex.ai>\r\n\r\nAlternative to #916, following discussion at https://github.com/ros2/rclcpp/pull/916#discussion_r345920151\r\n\r\nIn order to get a valid `AnySubscriptionCallback` address for tracing, we can have `SubscriptionIntraProcess` call the tracepoints/perform the registration instead (if it is enabled).\r\n\r\nThe only downside is that I have to pass the subscription handle through to `SubscriptionIntraProcess`. I think this is the simplest fix, but we can always revisit later (as intra-process subscription is considered experimental anyway).",
    "head_branch": "fix-new-intraprocess-comms-instrumentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Put subscription callback tracepoints in intraprocess subscription too (#918)\n\n* Put subscription callback tracepoints in intraprocess subscription too\r\n\r\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>\r\n\r\n* Add missing tracetools header\r\n\r\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>\r\n\r\n* Move Subscription tracepoints back to outside of intra-process condition\r\n\r\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>\r\n\r\n* Revert API change by adding new tracepoint as an intermediate\r\n\r\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787418912b45d36a74ad",
    "number": 917,
    "body": "Precisely what the title says. Should solve flakes seen in nightlies, e.g. http://build.ros2.org/view/Eci/job/Eci__nightly-connext_ubuntu_bionic_amd64/lastCompletedBuild/testReport/",
    "head_branch": "hidmic/bump-rclcpp-action-test-timeouts",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] Bump test_client timeout. (#917)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787518912b45d36a74ae",
    "number": 916,
    "body": "Signed-off-by: Christophe Bedard <christophe.bedard@apex.ai>\r\n\r\n`ros2_tracing` and the analysis tools use pointers in order to link a subscription to its `AnySubscriptionCallback` object(s) and callback instances. See the [`Subscription` constructor](https://github.com/ros2/rclcpp/blob/2ed445647400bacbff6420cfb8ccc7bee86ee469/rclcpp/include/rclcpp/subscription.hpp#L163-L170).\r\n\r\nThe new intraprocess comms (https://github.com/ros2/rclcpp/pull/778) changed this by having the `AnySubscriptionCallback` object actually used by `SubscriptionIntraProcess`. However, the problem is that it creates a copy for itself, and thus we can't link the callback back to the original subscription. I wrote a longer explanation [over on the `ros2_tracing` repo](https://gitlab.com/micro-ROS/ros_tracing/ros2_tracing/issues/55#note_243141152).\r\n\r\nThis makes it clear that the `AnySubscriptionCallback` object belongs to the `Subscription` and not `SubscriptionIntraProcess`, even if it used by the latter. However, this could of course be changed. Let me know if that would be preferable.\r\n\r\nI'm hoping this can get in in time for eloquent!",
    "head_branch": "new-intraprocess-comms-fix-anysubcallback-copy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787618912b45d36a74af",
    "number": 914,
    "body": "Signed-off-by: Todd Malsbary <todd.malsbary@intel.com>",
    "head_branch": "fix_intra_process_subscriber_qos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Intra-process subscriber should use RMW actual qos. (ros2#913) (#914)\n\n* Intra-process subscriber should use RMW actual qos. (ros2#913)\r\n\r\nSigned-off-by: Todd Malsbary <todd.malsbary@intel.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787818912b45d36a74b0",
    "number": 909,
    "body": "This PR (built on top of required PR https://github.com/ros2/rcl/pull/533) allows for parameter descriptions to be parsed from the yaml parameter file (_proposed syntax described in above PR link_) into the `parameter_overrides` when declaring a parameter via `declare_parameter`. This enables users to describe the parameter constraints at run-time to fill a `ParameterDescriptor.msg` for parameter validation and documentation. As mentioned in https://github.com/ros2/rclcpp/issues/807#issuecomment-521391965, this feature may be particularly useful for a \"parameter blackboard\" or for dynamic parameter tuning.\r\n\r\nMatching modifications can be made to enable this feature for `rclpy`.",
    "head_branch": "add_parameter_descriptors_from_yaml",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787918912b45d36a74b1",
    "number": 907,
    "body": "Address issue #904.\r\nReview by @jacobperron requested.\r\n\r\nSigned-off-by: Anas Abou Allaban <aabouallaban@pm.me>",
    "head_branch": "allabana/relax-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Relax multithreaded test constraint (#907)\n\nSigned-off-by: Anas Abou Allaban <aabouallaban@pm.me>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787a18912b45d36a74b2",
    "number": 906,
    "body": "",
    "head_branch": "topic-fix-not-delete-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use weak_ptr to store context in GraphListener (#906)\n\n* Use weak_ptr to store context in graph listener\r\n\r\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787b18912b45d36a74b3",
    "number": 905,
    "body": "Backport #888 to Crystal\r\n\r\nAs documented in rcl_action, a return code of RCL_RET_ACTION_CLIENT_TAKE_FAILED does not mean that an error occurred.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=8730)](http://ci.ros2.org/job/ci_linux/8730/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=4561)](http://ci.ros2.org/job/ci_linux-aarch64/4561/)\r\n* macOS [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_osx&build=7136)](https://ci.ros2.org/job/ci_osx/7136/)\r\n* Windows [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=8648)](https://ci.ros2.org/job/ci_windows/8648/)",
    "head_branch": "jacob/backport_888_crystal",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] Do not throw exception in action client if take fails (#888) (#905)\n\nAs documented in rcl_action, a return code of RCL_RET_ACTION_CLIENT_TAKE_FAILED does not mean that\r\nan error occurred.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787c18912b45d36a74b4",
    "number": 903,
    "body": "As the title says, this just extends the timeout for the test_node that it was failing for opensplice.",
    "head_branch": "BMarchi/extend_test_node_timeout",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787d18912b45d36a74b5",
    "number": 902,
    "body": "3 small fixes, they are unrelated to each other, but I didn't want to create separate PRs for such small changes, please let me know if it's fine;\r\nImprovements are (as in commits):\r\n- Removing reference from nanoseconds parameter in sleep_for function\r\n- Removing unnecessary parameter in function description in `lifecycle_node.hpp`",
    "head_branch": "rclcpp-apex-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787e18912b45d36a74b6",
    "number": 901,
    "body": "Couple of improvements in terms of type conversions; mostly adding `static_casts`.",
    "head_branch": "type-conversions-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Type conversions fixes (#901)\n\n* Fix type conversions\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Add static_casts\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Address PR comments\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>\r\n\r\n* Remove one time use variable\r\n\r\nSigned-off-by: Monika Idzik <monika.idzik@apex.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621787f18912b45d36a74b7",
    "number": 900,
    "body": "",
    "head_branch": "topic-rosout-node-options",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add enable_rosout into NodeOptions. (#900)\n\n* Add disable_rosout into NodeOptions.\r\n\r\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>\r\n\r\n* Update comments\r\n\r\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>\r\n\r\n* keep implementation consistency by using enable_rosout name\r\n\r\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>\r\n\r\n* fix error comment\r\n\r\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>\r\n\r\n* add test case for node options\r\n\r\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>\r\n\r\n* fix source about copy value and reset rcl_node_options, add more test cases\r\n\r\nSigned-off-by: Barry Xu <Barry.Xu@sony.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621788018912b45d36a74b8",
    "number": 899,
    "body": "The `test_node` tests take a bit longer to execute on Connext, so this\r\n\r\n- Removes some duplicated test logic\r\n- Increases the timeout for the test (it took approx 200 seconds to execute locally)\r\n\r\n",
    "head_branch": "deflake_connext",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "De-flake tests for rmw_connext (#899)\n\n* Remove duplicate tests\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Expand test timeout to 240 seconds for Connext\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788218912b45d36a74b9",
    "number": 897,
    "body": "This pull request is about\r\n- removing \"virtual\" keywords and \r\n- adding \"override\" keywords where necessary",
    "head_branch": "upstream-apex-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #897 from monidzik/upstream-apex-changes\n\nRemoving \"virtual\", adding \"override\" keywords in the package"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621788318912b45d36a74ba",
    "number": 896,
    "body": "connects to https://github.com/ros2/rclcpp/pull/864#discussion_r336714833\r\n\r\nThis PR also touches up on some doc review comments and renames `rclcpp::Publisher::loan_message()` into `rclcpp::Publisher::borrow_loaned_message()`",
    "head_branch": "return_loaned_message",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename return functions for loaned messages (#896)\n\n* fix up documentation for zero copy api\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* rename loan_message to borrow_loaned_message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use return_loaned_message_from\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621788418912b45d36a74bb",
    "number": 895,
    "body": "cc @wjwwood @mjcarroll \r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "zero_copy_doc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788518912b45d36a74bc",
    "number": 894,
    "body": "Follow-up PR after https://github.com/ros2/rcl/pull/518.",
    "head_branch": "hidmic/no-args-to-remove-is-not-an-error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Drop rclcpp remove_ros_arguments_null test case. (#894)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788618912b45d36a74bd",
    "number": 892,
    "body": "~Addresses #846~ and has the `rclcpp::Node` as the default template argument so it shouldn't break users of it.\r\n\r\nI'd add a second test to work with lifecycle nodes, but I didn't want to add lifecycle as a dependency to actions.",
    "head_branch": "template_action_node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "template node type for rclcpp action server and clients (#892)\n\nSigned-off-by: stevemacenski <stevenmacenski@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788718912b45d36a74be",
    "number": 891,
    "body": "Backport #888 to Dashing\r\n\r\nAs documented in rcl_action, a return code of RCL_RET_ACTION_CLIENT_TAKE_FAILED does not mean that\r\nan error occurred.",
    "head_branch": "jacob/backport_888",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] Do not throw exception in action client if take fails (#888) (#891)\n\nAs documented in rcl_action, a return code of RCL_RET_ACTION_CLIENT_TAKE_FAILED does not mean that\r\nan error occurred.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788818912b45d36a74bf",
    "number": 890,
    "body": "",
    "head_branch": "instrumentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788918912b45d36a74c0",
    "number": 888,
    "body": "Fixes #886 \r\n\r\nAs documented in rcl_action, a return code of RCL_RET_ACTION_CLIENT_TAKE_FAILED does not mean that an error occurred.",
    "head_branch": "jacob/handle_non_error_rc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] Do not throw exception in action client if take fails (#888)\n\nAs documented in rcl_action, a return code of RCL_RET_ACTION_CLIENT_TAKE_FAILED does not mean that\r\nan error occurred.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788b18912b45d36a74c1",
    "number": 887,
    "body": "Preparing release.\r\n\r\nWill rebase-merge and push tag after merging this.",
    "head_branch": "ivanpauno/dashing-0.7.11",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "0.7.11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788c18912b45d36a74c2",
    "number": 885,
    "body": "Might address #863?",
    "head_branch": "dirk-thomas/rclcpp_components-tests-shutdown",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788d18912b45d36a74c3",
    "number": 884,
    "body": "This gives the option to cancel an active goal from the action server implementation.\r\nIn the context of action servers with a single-goal policy, this let's the server trigger\r\na cancel event upon receiving a new goal request.\r\n\r\nSee related discussion in #759 ",
    "head_branch": "jacob/server_goal_handle_cancel",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621788e18912b45d36a74c4",
    "number": 883,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/859\r\n\r\n----\r\n\r\nConnected pull requests:\r\n\r\n- https://github.com/ros2/demos/pull/395\r\n- https://github.com/ros2/ros2_documentation/pull/348",
    "head_branch": "get_actual_qos_return_cpp_qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "make get_actual_qos return a rclcpp::QoS (#883)\n\n* make get_actual_qos return a rclcpp::QoS\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* make simpler following suggestion from review\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621788f18912b45d36a74c5",
    "number": 882,
    "body": "This feature was motivated by a use case that ApexAI has, where they want to pass settings and/or pre-fabricated objects as input to the creation of publishers and subscriptions. It's already possible with the \"native\" API pattern (demonstrated in the `demo_nodes_cpp_native` package) to influence the rmw implementation in a non-portable way before and after a publisher or subscription is created. However, without this feature it's difficult to use this to affect creation of publishers and subscriptions.\r\n\r\nThe way it works is that there is a new \"payload\" field in the Publisher/SubscriptionOptions classes which has the opportunity to inject arbitrary data into the `rcl_{publisher,subscription}_options_t` and/or the newly added `rmw_{publisher,subscription}_options_t` structures which are then passed all the way into the rmw implementation, where the payload can be introspected to extract existing objects or configurations needed during construction.\r\n\r\nExample uses cases might be like:\r\n\r\n- pass custom QoS settings to the middleware that cannot be set via the ROS QoS\r\n  - for example, special resource limit settings or unexposed DDS QoS settings\r\n- pass a specific DDS Publisher/Subscriber object to be used in the creation of a datawriter/datareader\r\n- pass an existing datareader or datawriter to be used directly\r\n- and so on...\r\n\r\nThis is an advanced and non-portable feature, and it's up to the user and rmw middleware implementation developers to agree on the structure, its contents, and how it interacts with other ROS entities.\r\n\r\nHere's a snippet of a demo which sets custom QoS settings, bypassing the ROS QoS completely, using a customized version of the rclcpp payload class:\r\n\r\n```c++\r\n    auto payload = std::make_unique<dds_direct_access::SubscriptionPayload>();\r\n    DDS_DataReaderQos datareader_qos;\r\n    datareader_qos.resource_limits.max_instances = 100;\r\n    datareader_qos.resource_limits.max_samples = 100;\r\n    datareader_qos.resource_limits.max_samples_per_instance = 100;\r\n    datareader_qos.history.kind = DDS_KEEP_LAST_HISTORY_QOS;\r\n    datareader_qos.history.depth = 10;\r\n    payload->set_qos(datareader_qos);\r\n    rclcpp::SubscriptionOptions options;\r\n    options.rmw_implementation_payload = std::move(payload);\r\n    // Use a different topic name to avoid interference with demo_nodes_cpp\r\n    sub_ = create_subscription<std_msgs::msg::String>(\r\n      \"chatter_with_custom_qos\",\r\n      dds_direct_access::SubscriptionPayload::get_placeholder_qos(),\r\n      [this](std_msgs::msg::String::ConstSharedPtr msg) {\r\n        RCLCPP_INFO(this->get_logger(), \"I heard: %s\", msg->data.c_str());\r\n      },\r\n      options);\r\n```\r\n\r\n----\r\n\r\nConnected prs:\r\n\r\n- https://github.com/ros2/rcl/pull/513\r\n- https://github.com/ros2/rmw/pull/187\r\n- https://github.com/ros2/rmw_implementation/pull/74\r\n- https://github.com/ros2/rmw_fastrtps/pull/329\r\n- https://github.com/ros2/rmw_connext/pull/368\r\n- https://github.com/ros2/rmw_opensplice/pull/284\r\n- https://github.com/ros2/ros2_documentation/pull/345",
    "head_branch": "rmw_specific_payload_for_pub_sub_creation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add mechanism to pass rmw impl specific payloads during pub/sub creation (#882)\n\n* add mechanism to pass rmw impl specific payloads during pub/sub creation\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use class instead of struct\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* narrow API of rmw payload to just use rmw_*_options_t's\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup after recent change\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621789018912b45d36a74c6",
    "number": 881,
    "body": "Fixes a compiler warning on Windows 10.\r\n\r\n```\r\nwarning C4456: declaration of 'ret' hides previous local declaration \r\n```",
    "head_branch": "allenh1-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix Compiler Warning (#881)\n\nSigned-off-by: Hunter L. Allen <hunterlallen@protonmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789118912b45d36a74c7",
    "number": 879,
    "body": "Fixes #797. As the title says, enables throttling logs.\r\n\r\n- Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=8497)](https://ci.ros2.org/job/ci_linux/8497/)\r\n- Arch [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=4382)](https://ci.ros2.org/job/ci_linux-aarch64/4382/)\r\n- Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=8350)](https://ci.ros2.org/job/ci_windows/8350/)\r\n- OSX [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=6913)](https://ci.ros2.org/job/ci_osx/6913/)\r\n",
    "head_branch": "BMarchi/enable_throttling_logs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enable throttling logs (#879)\n\n* Enable throttling logs\r\n\r\nSigned-off-by: Brian Ezequiel Marchi <brian.marchi65@gmail.com>\r\n\r\n* Change time source macro parameter generation\r\n\r\nSigned-off-by: Brian Ezequiel Marchi <brian.marchi65@gmail.com>\r\n\r\n* Modify only throttle parameters for logging\r\n\r\nSigned-off-by: Brian Ezequiel Marchi <brian.marchi65@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789218912b45d36a74c8",
    "number": 878,
    "body": "This is a fix for the following TODO,\r\n\r\nhttps://github.com/ros2/rclcpp/blob/4afd1cd5ad2d0f8ac44e9bdd08860d52c9d73009/rclcpp/src/rclcpp/time_source.cpp#L101-L102\r\n\r\nconfirmed that use_sim_time can be controlled via parameter interface.\r\n\r\n```\r\n[Process-A]\r\nroot@6cc2c62d0dd0:~/ros2_colcon_ws# ros2 run demo_nodes_cpp parameter_blackboard \r\n[INFO] [parameter_blackboard]: Parameter blackboard node named '/parameter_blackboard' ready, and serving '1' parameters already!\r\n\r\n[Process-B]\r\nroot@6cc2c62d0dd0:~/ros2_colcon_ws# ros2 param get /parameter_blackboard use_sim_time\r\nBoolean value is: False\r\nroot@6cc2c62d0dd0:~/ros2_colcon_ws# ros2 param set /parameter_blackboard use_sim_time true\r\nSet parameter successful\r\nroot@6cc2c62d0dd0:~/ros2_colcon_ws# ros2 param get /parameter_blackboard use_sim_time\r\nBoolean value is: True\r\n```",
    "head_branch": "topic-20191001-use-latest-parameter-interface",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789318912b45d36a74c9",
    "number": 876,
    "body": "Connected to #863. Not very proud of it but it'll get us back to green in CI till races are actually solved.",
    "head_branch": "hidmic/change-components-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Aggregate all component manager API tests. (#876)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789418912b45d36a74ca",
    "number": 875,
    "body": "Fixes #802. As the title says, it adds a parameter callback to the node's parameter when a node is attached to a TimeSource.\r\n\r\n- Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=8248)](https://ci.ros2.org/job/ci_linux/8248/)\r\n- Arch [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=4189)](https://ci.ros2.org/job/ci_linux-aarch64/4189/)\r\n- Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=8101)](https://ci.ros2.org/job/ci_windows/8101/)\r\n- OSX [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=6699)](https://ci.ros2.org/job/ci_osx/6699/)",
    "head_branch": "BMarchi/catch_use_sim_time_bad_values",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add callback handler for use_sim_time parameter #802 (#875)\n\n* Add callback handler for use_sim_time parameter #802\r\n\r\nSigned-off-by: Brian Ezequiel Marchi <brian.marchi65@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789618912b45d36a74cb",
    "number": 873,
    "body": "Signed-off-by: Ishu Goel <ishu.goel@nobleo.nl>\r\n\r\nThis pull request aims to provide a static alternative to the existing single-threaded executor. In response to a  [question](https://answers.ros.org/question/327477/ros2-uses-6-times-more-cpu-than-fastrtps/) posted on ROS answers, we did research on the high CPU overhead of the existing implementation. The results of the research are [here](https://github.com/nobleo/ros2_performance). Based on the results we started a discussion on ROS discourse [here](https://discourse.ros.org/t/singlethreadedexecutor-creates-a-high-cpu-overhead-in-ros-2/) and we posted an [issue](https://github.com/ros2/rclcpp/issues/825) on the rclcpp GitHub. \r\n\r\nWe contribute this static executor as an intermediate solution until another alternative is present or the existing executor is optimized. Our executor can be used by ROS users that have a static system to reduce CPU overhead. \r\n\r\nAn explanation of our static single-threaded executor is not included in this pull request but can instead be found [here](https://github.com/nobleo/rclcpp-static-executor). This is an older Dashing version we made for testing. The README provides an overview in the form of a flowchart with a short description of functionality. \r\n",
    "head_branch": "nobleo/feature/static_executor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789718912b45d36a74cc",
    "number": 872,
    "body": "This pull request reformats `rclcpp` using `ament_clang_format` with the configuration in [this patch](https://github.com/ament/ament_lint/compare/hidmic/clang-format). It attempts to minimize the diff to comply with the linter. \r\n\r\nIt remains to be confirmed whether `ament_uncrustify` configuration can be updated to accept these changes.\r\n\r\nConnected to https://github.com/ament/ament_lint/issues/146.",
    "head_branch": "hidmic/clang-format",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789818912b45d36a74cd",
    "number": 871,
    "body": "Look for a 'use_intra_process_comms' boolean in extra_arguments.",
    "head_branch": "hidmic/intra-process-comm-for-components",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_components] Enable intra-process comm via LoadNode request. (#871)\n\nLook for a 'use_intra_process_comms' boolean in extra_arguments.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789918912b45d36a74ce",
    "number": 870,
    "body": "Backports #821 ",
    "head_branch": "ivanpauno/backport-#821",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix get_node_interfaces functions taking a pointer (#821) (#870)\n\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621789a18912b45d36a74cf",
    "number": 869,
    "body": "Backports #836.",
    "head_branch": "ivanpauno/backport-#836",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix hang with timers in MultiThreadedExecutor (#835) (#836) (#869)\n\nSigned-off-by: Todd Malsbary <todd.malsbary@intel.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789b18912b45d36a74d0",
    "number": 867,
    "body": "After removing deprecated signatures for Eloquent, it's now possible to streamline the process of creating a publisher and subscription.\r\n\r\nI need these changes to make the next pr I'm going to open much less invasive, and in general this should make adding QoS, options, and other similar things to the process much easier.",
    "head_branch": "clean_up_pub_sub_creation_code",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "clean up publisher and subscription creation logic (#867)\n\n* streamline creation of publishers after removing deprecated API\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use deduced template arguments to cleanup create_subscription\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add missing file\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* streamline creation of subscriptions after removing deprecated API\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* small subscription code cleanup to match publisher's style\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* some fixes to rclcpp_lifecycle to match rclcpp\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add README to the rclcpp/detail include directory\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup SubscriptionBase's use of visibility macros\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* reapply function to create default options, as it is still needed on Windows\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* address review comments\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* workaround cppcheck 1.89 syntax error\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621789c18912b45d36a74d1",
    "number": 866,
    "body": "Backport of PR #854 \r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>",
    "head_branch": "dashing-backport-#854",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "reset error message before setting a new one, embed the original one (#854) (#866)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621789d18912b45d36a74d2",
    "number": 865,
    "body": "This pull request delegates all parameter parsing to `rcl`, as introduced in https://github.com/ros2/rcl/pull/508.",
    "head_branch": "hidmic/take-param-overrides",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Take parameter overrides provided through the CLI. (#865)\n\n* Take parameter overrides provided through the CLI.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Address peer review comments.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Do not 'find_package' rcpputils twice.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621789f18912b45d36a74d3",
    "number": 864,
    "body": "connects to https://github.com/ros2/ros2/issues/785",
    "head_branch": "zero_copy_api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Zero copy api (#864)\n\n* loaned message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\nwip\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\nloaned message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use publisher allocator\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use unique_ptr inside LoanedMessage\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* can_loan_messages for subscription_base\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use correct rcl_publish function\r\n\r\n* default move constructor not allowed in gcc\r\n\r\nSigned-off-by: Knese Karsten (CR/RTC-HMI4) <karsten.knese@us.bosch.com>\r\n\r\n*  remove get_instance and make LoanedMessage constructor public\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* some more api doc\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* rebase ontop of master\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* warn when not being able to loan message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* first draft loaned_message_sequence\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* rmw_take_loaned_message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* address review comments\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* introduce rmw_publish_loaned_message\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* const correct publish\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* placement new\r\n\r\nSigned-off-by: Knese Karsten <karsten@openrobotics.org>\r\n\r\n* disable deleter for callback\r\n\r\nSigned-off-by: Knese Karsten <karsten@openrobotics.org>\r\n\r\n* print info once\r\n\r\nSigned-off-by: Knese Karsten <karsten@openrobotics.org>\r\n\r\n* uncrustify\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178a018912b45d36a74d4",
    "number": 862,
    "body": "* timeout was not required since the request will fail if the node is not found\r\n\r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>",
    "head_branch": "remove-timeout-on-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178a118912b45d36a74d5",
    "number": 858,
    "body": "Helpful when the exception happens to know what the two clock types actually are.",
    "head_branch": "dirk-thomas/add-exception-detail",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add more context to exception message (#858)\n\n* add more context to exception message\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* fix linter warnings\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178a218912b45d36a74d6",
    "number": 857,
    "body": "Signed-off-by: Zachary Michaels <zmichaels11@gmail.com>",
    "head_branch": "zmichaels11/backport-#837",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add mutex in add/remove_node and wait_for_work to protect concurrent use/change of memory_strategy_ (#837) (#857)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\nSigned-off-by: Zachary Michaels <zmichaels11@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178a318912b45d36a74d7",
    "number": 856,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nNo CI: this is just adding one letter to a string, and there don't seem to be tests that look for this exact error message.",
    "head_branch": "typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix UnknownGoalHandle error string. (#856)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178a418912b45d36a74d8",
    "number": 854,
    "body": "Related to ros2/rcl#501.\r\n\r\nEmbed the error string and reset it since the callers don't check (maybe they should in the future?).",
    "head_branch": "dirk-thomas/lifecycle-error-msgs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "reset error message before setting a new one, embed the original one (#854)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178a518912b45d36a74d9",
    "number": 853,
    "body": "Adds test coverage for the changes in ros2/rosidl#412.\r\n\r\nCurrently, `action_msgs` are required in order to be able to generate action, so the tests are here to prevent any sort of circular dependency in `rosidl_generator_cpp`.  ",
    "head_branch": "convert_with_traits",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Trait tests for generated actions (#853)\n\n* Trait tests for generated actions\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Address reviewer feedback\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178a618912b45d36a74da",
    "number": 852,
    "body": "> 21 additions and 1,069 deletions.\r\n\r\nüéâ ",
    "head_branch": "remove_deprecated_features_for_eloquent",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove features and related code which were deprecated in dashing (#852)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178a718912b45d36a74db",
    "number": 850,
    "body": "The `shutdown_on_sigint` is used select the behavior of the interrupt signal, if the node should be shutdown or not. It's set as true as default on the `InitOptions` class. The code below should supress the shutdown behavior.\r\n```\r\nInitOptions init_options;\r\ninit_options.shutdown_on_sigint = false;\r\nrclcpp::init(arc, arv, node_options);\r\n```\r\nSome change on the InitOptions file should have ignored this variable. This commit corrects the copy constructors and the function to pass the object as a reference.\r\n\r\nWith this, a custom signal handler could be implemented like in ROS 1 ([roscpp/Overview/Initialization and Shutdown](http://wiki.ros.org/roscpp/Overview/Initialization%20and%20Shutdown)).\r\n\r\n```\r\nvoid mySigintHandler(int sig)\r\n{\r\n    // Implement custom signal interrupt behavior\r\n\r\n    rclcpp::contexts::default_context::get_global_default_context()->shutdown(\r\n        \"custom signal handler\"\r\n    );\r\n}\r\n\r\nint main(int argc, char** argv)\r\n{\r\n    signal(SIGINT, mySigintHandler);\r\n    rclcpp::InitOptions init_options;\r\n    init_options.shutdown_on_sigint = false;\r\n    rclcpp::init(argc, argv, init_options);\r\n\r\n    // Implement rest of the code\r\n    rclcpp::shutdown();\r\n}\r\n```\r\n\r\n",
    "head_branch": "dashing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bug fix on shutdown_on_sigint (not set on InitOptions constructors) (#850)\n\nSigned-off-by: Alex Fernandes Neves <alexfneves@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178a818912b45d36a74dc",
    "number": 848,
    "body": "Hi all,\r\n\r\nJust a small typo that I incurred in while building other packages, \"it's\" instead of \"its\".\r\n\r\nCheers,\r\n/Luca",
    "head_branch": "fix_deprecated_typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in deprecated warning. (#848)\n\n\"it's\" instead of its\r\n\r\nSigned-off-by: Luca Della Vedova <luca@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178a918912b45d36a74dd",
    "number": 847,
    "body": "Backport #777",
    "head_branch": "jacob/backport_777",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixe error messages not printing to terminal (#777) (#847)\n\n* Uncommented catch exception code to print error\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* put back the e\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* uncommented error printing in exception handling\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* Removed \"/n\" characters.\r\nUpdate lifecycle_node_interface_impl.hpp\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* Fix CI issue and remove TODO\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ab18912b45d36a74de",
    "number": 845,
    "body": "Precisely what the title says. Follow-up after https://github.com/ros2/rclcpp/pull/816 and https://github.com/ros2/rclpy/pull/405#discussion_r319069482. Necessary for https://github.com/ros2/rcl/pull/493 considering https://github.com/ros2/rclcpp/pull/784.",
    "head_branch": "hidmic/explicit-ros-args",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Force explicit --ros-args in NodeOptions::arguments(). (#845)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178ac18912b45d36a74df",
    "number": 844,
    "body": "The goal of this change is to allow `spin_some` to only queue work items once at the start of an execution, without adversely affecting other spin methods.\r\n\r\nPreviously, work could come either from `get_next_timer`, which would always return a ready timer, even if it were not previously ready; or from the `wait_for_work` method, which was called when no work was currently ready, regardless of whether existing work had been completed or not.\r\n\r\nThis change modifies `get_next_timer` to instead pull from a list of cached timers which were ready at the previous call to `wait_for_work`. `wait_for_work` itself is still called from `get_next_executable`, but is now guarded by an `allow_wait` flag. By default, this flag is true, (nearly) maintaining current behavior. However, `spin_some` will set this flag true on its first iteration only, setting the flag to false for subsequent calls until `spin_some` itself returns. This causes the list of ready timers to be cached only once, and other waitables to be collected only once. The list is not refreshed during execution of `spin_some`, allowing the method to return when its workload is complete.\r\n\r\nNote:\r\n\r\n1. If `spin_some` does not complete its workload, a subsequent call will resume where it left off, without refreshing the workload available. While this may mean that a call will not pick up newly available work for that execution, it also means that tasks which are perpetually at the end of the list of executables will not be starved.\r\n\r\n2. The \"nearly\" exception above refers to this same behavior, but in the context of `spin_once`. Previously, if `spin_once` were called with a very short duration timer, that timer may be executed to the exclusion of other work. `spin_once` will now follow the same logic regarding caching of timers and other work, so that all executables are eventually serviced.\r\n\r\nI have attempted to create some unit tests to cover the `spin_some` behavior in the ros2/system_tests repo, and successfully ran the timer test, but have not gotten a publish/subscribe test working yet, possibly due to faults in my development environment. If possible, I'd love to push those up and get feedback on how to make those tests work, but I'm not sure the best approach just yet.",
    "head_branch": "471_executor_spin_some",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Only check for new work once in spin_some (#471) (#844)\n\nTo prevent the Executor::spin_some() method for potentially running\r\nindefinitely long.\r\n\r\nDistribution Statement A; OPSEC #2893\r\n\r\nSigned-off-by: Roger Strain <rstrain@swri.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ad18912b45d36a74e0",
    "number": 842,
    "body": "Precisely what the title says. This pull request makes `rclcpp` throw if either an invalid or an unknown ROS argument is found.",
    "head_branch": "hidmic/handle-bad-arguments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fail on invalid and unknown ROS specific arguments (#842)\n\n* Fail on invalid and unknown ROS specific arguments.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Revert changes to utilities.hpp in rclcpp\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Fully revert change to utilities.hpp\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178ae18912b45d36a74e1",
    "number": 841,
    "body": "related to the following discussion for SingleThreadedExecutor CPU consumption,\r\nhttps://discourse.ros.org/t/singlethreadedexecutor-creates-a-high-cpu-overhead-in-ros-2/10077/6\r\n\r\ntimer_handler_ should be checked if it is valid or not at the 1st entry. this is done for other objects such as subscriptions etc...but not for timer.\r\n\r\nconfirmed the following optimization result with typical case using ros2_performance nopub.\r\n\r\n[Before]\r\n```\r\nroot@2e44b65b8217:~/docker_colcon_ws# top | grep nopub\r\n 7301 root      20   0 3220996  79812  17116 S  18.3  0.5   0:07.10 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  17.3  0.5   0:07.62 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  17.3  0.5   0:08.14 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  18.7  0.5   0:08.70 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  19.0  0.5   0:09.27 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  17.6  0.5   0:09.80 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  15.7  0.5   0:10.27 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  16.9  0.5   0:10.78 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  15.0  0.5   0:11.23 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  16.7  0.5   0:11.73 nopub        \r\n```\r\n\r\n[After]\r\n```\r\nroot@2e44b65b8217:~/docker_colcon_ws# top | grep nopub\r\n11847 root      20   0 3221000  80312  17272 S  13.3  0.5   0:00.57 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.0  0.5   0:00.93 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.3  0.5   0:01.30 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.3  0.5   0:01.67 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.3  0.5   0:02.01 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.3  0.5   0:02.35 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.7  0.5   0:02.70 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 R  10.6  0.5   0:03.02 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.0  0.5   0:03.38 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.0  0.5   0:03.71 nopub                                               \r\n```\r\n\r\n",
    "head_branch": "topic-20190830-check-valid-timer-handle-first",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "check valid timer handler 1st to reduce the time window for scan. (#841)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178af18912b45d36a74e2",
    "number": 840,
    "body": "related to the following discussion for SingleThreadedExecutor CPU consumption,\r\nhttps://discourse.ros.org/t/singlethreadedexecutor-creates-a-high-cpu-overhead-in-ros-2/10077/6\r\n\r\ntimer_handler_ should be checked if it is valid or not at the 1st entry. this is done for other objects such as subscriptions etc...but not for timer.\r\n\r\nconfirmed the following optimization result with typical case using ros2_performance nopub.\r\n\r\n[Before]\r\n```\r\nroot@2e44b65b8217:~/docker_colcon_ws# top | grep nopub\r\n 7301 root      20   0 3220996  79812  17116 S  18.3  0.5   0:07.10 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  17.3  0.5   0:07.62 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  17.3  0.5   0:08.14 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  18.7  0.5   0:08.70 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  19.0  0.5   0:09.27 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  17.6  0.5   0:09.80 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  15.7  0.5   0:10.27 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  16.9  0.5   0:10.78 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  15.0  0.5   0:11.23 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  16.7  0.5   0:11.73 nopub        \r\n```\r\n\r\n[After]\r\n```\r\nroot@2e44b65b8217:~/docker_colcon_ws# top | grep nopub\r\n11847 root      20   0 3221000  80312  17272 S  13.3  0.5   0:00.57 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.0  0.5   0:00.93 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.3  0.5   0:01.30 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.3  0.5   0:01.67 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.3  0.5   0:02.01 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.3  0.5   0:02.35 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.7  0.5   0:02.70 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 R  10.6  0.5   0:03.02 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.0  0.5   0:03.38 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.0  0.5   0:03.71 nopub                                               \r\n```\r\n\r\n",
    "head_branch": "topic-20190830-check-valid-timer-handle-first",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178b018912b45d36a74e3",
    "number": 839,
    "body": "related to the following discussion for SingleThreadedExecutor CPU consumption,\r\nhttps://discourse.ros.org/t/singlethreadedexecutor-creates-a-high-cpu-overhead-in-ros-2/10077/6\r\n\r\ntimer_handler_ should be checked if it is valid or not at the 1st entry. this is done for other objects such as subscriptions etc...but not for timer.\r\n\r\nconfirmed the following optimization result with typical case using [ros2_performance](https://github.com/nobleo/ros2_performance) nopub.\r\n\r\n[Before]\r\n```\r\nroot@2e44b65b8217:~/docker_colcon_ws# top | grep nopub\r\n 7301 root      20   0 3220996  79812  17116 S  18.3  0.5   0:07.10 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  17.3  0.5   0:07.62 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  17.3  0.5   0:08.14 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  18.7  0.5   0:08.70 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  19.0  0.5   0:09.27 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  17.6  0.5   0:09.80 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 R  15.7  0.5   0:10.27 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  16.9  0.5   0:10.78 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  15.0  0.5   0:11.23 nopub                                               \r\n 7301 root      20   0 3220996  79812  17116 S  16.7  0.5   0:11.73 nopub                 \r\n```\r\n\r\n[After]\r\n```\r\nroot@2e44b65b8217:~/docker_colcon_ws# top | grep nopub\r\n11847 root      20   0 3221000  80312  17272 S  13.3  0.5   0:00.57 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.0  0.5   0:00.93 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.3  0.5   0:01.30 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.3  0.5   0:01.67 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.3  0.5   0:02.01 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.3  0.5   0:02.35 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.7  0.5   0:02.70 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 R  10.6  0.5   0:03.02 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  12.0  0.5   0:03.38 nopub                                               \r\n11847 root      20   0 3221000  80312  17272 S  11.0  0.5   0:03.71 nopub                                               \r\n```\r\n",
    "head_branch": "topic-20190830-check-valid-timer-handle-first",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178b118912b45d36a74e4",
    "number": 837,
    "body": "Fixes race condition reported in https://github.com/ros-planning/navigation2/issues/1079#issuecomment-526230684\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=8037)](http://ci.ros2.org/job/ci_linux/8037/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=4044)](http://ci.ros2.org/job/ci_linux-aarch64/4044/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=6544)](http://ci.ros2.org/job/ci_osx/6544/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=7892)](http://ci.ros2.org/job/ci_windows/7892/) (the other test failures are already present on master)\r\n\r\nThe `cpplint` warning has been addressed, see the retriggered Linux build for `rclcpp`: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=8038)](http://ci.ros2.org/job/ci_linux/8038/)",
    "head_branch": "dirk-thomas/mutex-memory-strategy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add mutex in add/remove_node and wait_for_work to protect concurrent use/change of memory_strategy_ (#837)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178b218912b45d36a74e5",
    "number": 836,
    "body": "Signed-off-by: Todd Malsbary <todd.malsbary@intel.com>",
    "head_branch": "fix_timer_hang",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix hang with timers in MultiThreadedExecutor (#835) (#836)\n\nSigned-off-by: Todd Malsbary <todd.malsbary@intel.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178b318912b45d36a74e6",
    "number": 834,
    "body": "Precisely what the title says.\r\n\r\nConnected to https://github.com/ros2/rcl/pull/491.",
    "head_branch": "hidmic/use-cli-remap-flags",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use of -r/--remap flags where appropriate. (#834)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178b518912b45d36a74e7",
    "number": 833,
    "body": "Continuing https://github.com/ros2/rclcpp/pull/815, as I break the original branch",
    "head_branch": "cvbn127/add-throwing-parameter-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add throwing parameter name if parameter is not set (#833)\n\n* added throwing parameter name if parameter is not set\r\n\r\nSigned-off-by: Alex <cvbn127@gmail.com>\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178b618912b45d36a74e8",
    "number": 830,
    "body": "This makes the code examples easier to read in the generated documentation.",
    "head_branch": "jacob/code_block_docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Wrap documentation examples in code blocks (#830)\n\nThis makes the code examples easier to read in the generated documentation.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178b718912b45d36a74e9",
    "number": 829,
    "body": "This PR adds a new class `ParameterEventsSubscriber` which provides function interfaces to handle parameter events.\r\n\r\nThe aim of this class is to address shortcomings and one of the unimplemented features (see https://design.ros2.org/articles/ros_parameters.html#unimplemented) for parameter events. Namely, this class:\r\n- can register multiple custom callbacks by parameter name and node (either your own or remote)\r\n- ~~register a parameter to automatically update a reference variable~~\r\n- add a custom event callback by namespace (same behavior as `on_parameter_event()` in `AsyncParametersClient`) \r\n- can track different namespaces for parameter events (I believe the subscription created in the parameter client doesn't necessarily subscribe to parameter events on the namespace of the remote node passed in but of its own node)\r\n\r\nIn my opinion, this class would separate the parameter event subscriptions created in the parameter client (I'd remove the `on_parameter_event` in the future)",
    "head_branch": "add_parameter_event_subscriber",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add ParameterEventsSubscriber class (#829)\n\n* add ParameterEventsSubscriber class and tests\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* test improvements, path name fixes, and more documentation\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* fix lint and uncrustify issues\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* add try-catch and warning around getting parameter value\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* pass rclcpp::Parameter object to callback, rename functions, get param from event\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* use unordered map with string pair, add test for different nodes same parameter, address feedback\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* address feedback (wjwwood) part 1\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\nuse const string & for node name\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* add RCLCPP_PUBLIC macro\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* address feedback part 1: static get_parameter method, remove register_parameter_update, mutex for thread-safety\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* map parameters to list of callbacks\r\n\r\nfunctions to remove parameter callbacks\r\n\r\nadd functions to remove event callbacks, remove subscriptions, allow subscribing event callback to many namespaces, additional test coverage\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* use absolute parameter event topic for parameter event subscriber\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* support multiple parameter event callbacks\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* use get_child for parameter event subscriber logger\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* update utility function description\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* address feedback: move HandleCompare, test exceptions, reference code source\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* address feedback: replace ParameterEventsFilter dependency, fix copyright, add get_node_logging_interface, modify constructor\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\n* Get rid of a few compiler warnings; add test to build\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Remove some unneeded code\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Remove a stray debug trace\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Add a function to get all parameter values from a parameter event\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Address code review feedback\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Another name change; using Handler instead of the more passive term, Monitor\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Pass SharedPtrs callback remove functions instead of bare pointers\r\n\r\nPer William's review feedback.\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Add a comment block describing usage\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* Address review feedback\r\n\r\n* Remove unused interfaces\r\n* Document LIFO order for invoking callbacks\r\n* Add test cases to verify LIFO order for callbacks\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\n* A couple more doc fixes from review comments\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>\r\n\r\nCo-authored-by: Michael Jeronimo <michael.jeronimo@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178b818912b45d36a74ea",
    "number": 823,
    "body": "there is a discussion SingleThreadedExecutor CPU consumption,\r\nhttps://discourse.ros.org/t/singlethreadedexecutor-creates-a-high-cpu-overhead-in-ros-2/10077/6\r\n\r\ni think that this is an unnecessary call for get_node_by_group\r\n\r\nthis seems to be able to reduce a few percent cpu consumption but not an exactly counter-measure.",
    "head_branch": "topic-20190813-delete-redundant-iteration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Delete unnecessary call for get_node_by_group (#823)\n\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178b918912b45d36a74eb",
    "number": 822,
    "body": "Smart pointers are inappropriate for these callbacks, as they imply the recipient is responsible for the lifespan of the object (https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r30-take-smart-pointers-as-parameters-only-to-explicitly-express-lifetime-semantics). In most cases, the request / response objects are ephemeral and the caller should treat them as such.\nAlso, the constness of the pointers is prone to mistakes. For instance, a service callback can modify the request object since it is a `const shared_ptr<Request>`, not the `const shared_ptr<const Request>` that was probably intended.\n",
    "head_branch": "callback_refs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ba18912b45d36a74ec",
    "number": 821,
    "body": "Replaces https://github.com/ros2/rclcpp/pull/809",
    "head_branch": "ivanpauno/fix-get-node-interfaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix get_node_interfaces functions taking a pointer (#821)\n\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178bb18912b45d36a74ed",
    "number": 820,
    "body": "type trait order matters\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=7841)](http://ci.ros2.org/job/ci_linux/7841/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=3909)](http://ci.ros2.org/job/ci_linux-aarch64/3909/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=6398)](http://ci.ros2.org/job/ci_osx/6398/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=7679)](http://ci.ros2.org/job/ci_windows/7679/)\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "fix_679",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow passing logger by const ref (#820)\n\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178bc18912b45d36a74ee",
    "number": 819,
    "body": "Description:\r\nExtended rclcpp to allow serialized intra process communication. Therefore, we extended mapped ring buffer to allow to handle the message type and the (possible custom) deleter of the serialized data. If the subscription or publisher are not serialized the serialized message is converted on demand.\r\n\r\nPossible applications:\r\n * direct recording of serialized data without serialization (with IPM)\r\n * non-templated publisher of serialized messages (with IPM)\r\n\r\nFeatures:\r\n* extended mapped_ring_buffer to handle serialized data (including deleter)\r\n* added serialization and deserialization functions in intraprocess manager\r\n* converting data content if needed (if non/serialized subscription vs. publisher)\r\n* moved publish(rcl_serialized_message_t) from Publisher<T> to PublisherBase to make it more generic\r\n* added unit tests: test_intra_process_communication",
    "head_branch": "dnae_adas/serialized_intra_process_communication",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178bd18912b45d36a74ef",
    "number": 818,
    "body": "",
    "head_branch": "add_target_compile_definitions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178be18912b45d36a74f0",
    "number": 817,
    "body": "This is a type trait to check whether a parameter is a pointer. This is essentially an extension to `std::is_pointer<T>` which also checks for `std::shared_ptr<T>` as well as `std::unique_ptr<T>`.\r\n\r\nThe use case for this is to pass in a pointer to a node independently whether it's a shared pointer or a raw pointer. Motivation for this see here: https://github.com/ros/diagnostics/pull/112/files#r310801219\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "pointer_type_traits",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178c018912b45d36a74f1",
    "number": 816,
    "body": "Precisely what the title says. Connected to https://github.com/ros2/rcl/pull/477.",
    "head_branch": "hidmic/ros-args-extraction",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Adapt to '--ros-args ... [--]'-based ROS args extraction (#816)\n\n* Use --ros-args to deal with node arguments in rclcpp.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Document implicit --ros-args flag in NodeOptions::arguments().\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Add missing size_t to int cast.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Only add implicit --ros-args flag if not present already.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Add some rclcpp::NodeOptions test coverage.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Address peer review comments.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Please cpplint and uncrustify.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178c118912b45d36a74f2",
    "number": 815,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178c218912b45d36a74f3",
    "number": 814,
    "body": "1. Mutually exclusive callback group hangs\r\n  The root cause for this issue is due to a combination between the multithreaded executor and the mutually exclusive callback group used for all the ROS topics.\r\nWhen the executor collects all the references to the subscriptions, timers and services, it skips the mutually exclusive callback_groups which are currently locked (ie: being processed by another thread).\r\nThis cause the resulting waitset to only contain the guard pointers.\r\nIf there is no activity on those guards, the thread will wait for work forever in the get_next_executable and block all other threads.\r\n  The resolution is to simply add a timeout for the multithreaded get_next_executable call ensuring the calling thread will eventually return.\r\n\r\n2. Memory leak in callback group weak reference vectors\r\n  There is leak in the callback group weak reference vectors that occurs when a weak reference becomes invalid (subscription is dropped, service deleted, etc).\r\nThe now obsolete weak pointer reference is never deleted from the callback group pointer vector causing the leak.\r\n  The resolution of this problem is implemented by scanning and deleting expired weak pointer at the time of insertion of a new weak pointer into the callback group vectors.\r\nThis approach is the lowest computational cost to purging obsolete weak pointers.\r\n\r\n3. Crash in iterator for callback group pointer vectors\r\n  This problem exists because a reference to the callback group pointer vector is provided as a return value to facilitate loop iterator.\r\nThis is a significant crash root cause with a multithreaded executor where a thread is able to add new subscription to the callback group.\r\nThe crash is caused by a concurrent modification of the weak pointer vector while another thread is iterating over that same vector resulting in a crash.\r\n\r\nTesting:\r\n  These changes where implemented and tested using a test application which creates / publish / deletes thousands of topics (up to 100,000) from a separate standalone thread while the ROS2 layer is receiving data on the topics deleted.\r\nThe muiltithreaded was setup to contain 10 separate executor threads on a single mutually exclusive callback group containing thousands of topics.\r\n\r\nissue: #813",
    "head_branch": "issue_813",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Crash in callback group pointer vector iterator (#814)\n\nSigned-off-by: Guillaume Autran <gautran@clearpath.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178c318912b45d36a74f4",
    "number": 811,
    "body": "Currently, the `AsyncParametersClient` doesn't support a `rclcpp::callback_group::CallbackGroup` other than the default (set as `nullptr`). This limits from some special use cases, such as using the `rclcpp::callback_group::CallbackGroup::Reentrant` with a multithreaded executor to enable parameter client requests/response handling while the node is spinning.\r\n\r\nThis PR adds the callback group as a member variable and constructor argument (with default `nullptr`).",
    "head_branch": "add_callback_group_member_param_client",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add callback group as member variable and constructor arg (#811)\n\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\nremove callback group as member variable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178c418912b45d36a74f5",
    "number": 810,
    "body": "not exactly sure if this was on purpose, but it looks to me like a typo",
    "head_branch": "backport_770",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178c518912b45d36a74f6",
    "number": 809,
    "body": "Currently the on_parameter_event function can't be called from a class that derives from `node`.\r\n\r\nThe following fails\r\n```\r\nclass MyNode : public rclcpp::Node\r\n{\r\n   MyNode() : Node(\"my_node\")\r\n   {\r\n     auto AsyncParameterClient::OnParameterEvent(this, callback);\r\n   }\r\n}\r\n```",
    "head_branch": "alsora/on_parameter_events_update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178c618912b45d36a74f7",
    "number": 808,
    "body": "This fixes a runtime error caused by a race condition when making consecutive requests for the\r\nresult.\r\nSpecifically, this happens if the user provides a result callback when sending a goal and then\r\ncalls async_get_result shortly after.\r\n\r\nResolves #783\r\n\r\nAlternative to #806",
    "head_branch": "jacob/fix_783",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Guard against making multiple result requests for a goal handle (#808)\n\nThis fixes a runtime error caused by a race condition when making consecutive requests for the\r\nresult.\r\nSpecifically, this happens if the user provides a result callback when sending a goal and then\r\ncalls async_get_result shortly after.\r\n\r\nResolves #783\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178c718912b45d36a74f8",
    "number": 806,
    "body": "Solve #783\r\n\r\nAs @ipa-mdl said, `make_result_aware` might get called twice. This happens because of setting `promise` value before `is_result_aware_` isn't set properly.\r\n\r\nSigned-off-by: vinnamkim <vinnam.kim@gmail.com>",
    "head_branch": "fix_promise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178c818912b45d36a74f9",
    "number": 805,
    "body": "This is a backport of #762 for Dashing.\r\n\r\n---\r\nThe short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.\r\n\r\nFuture work is to support all wildcard syntax in node names in parameter YAML files.",
    "head_branch": "wildcard_param_yaml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use params from node '/**' from parameter YAML file (#805)\n\nThe short-term goal of this change is to enable the creation of a\r\nparameter YAML file which is applied to each node, regardless of node\r\nname or namespace.\r\n\r\nFuture work is to support all wildcard syntax in node names in\r\nparameter YAML files.\r\n\r\nThis is a backport of #762 for Dashing.\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178c918912b45d36a74fa",
    "number": 804,
    "body": "This is a backport of #771 for Dashing.",
    "head_branch": "Wsign-compare",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix a comparison with a sign mismatch (#804)\n\nThis is a backport of #771 for Dashing.\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ca18912b45d36a74fb",
    "number": 803,
    "body": "Signed-off-by: Michel Hidalgo <michel@ekumenlabs.com>",
    "head_branch": "dashing_backport_799",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make TimeSource ignore use_sim_time events coming from other nodes. (#799) (#803)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178cb18912b45d36a74fc",
    "number": 801,
    "body": "Backport of #755.",
    "head_branch": "dashing-backport-pr755",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add default value to options in LifecycleNode construnctor. Update API documentation. (#775) (#801)\n\nSigned-off-by: Esteve Fernandez <esteve@apache.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178cd18912b45d36a74fd",
    "number": 800,
    "body": "Given that the `test_msgs` are part of the dependency tree for `rclcpp`, there is no need to create separate `mock_msgs` any longer. \r\n\r\nCI (build up to rclcpp, test only rclcpp):\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=7687)](http://ci.ros2.org/job/ci_linux/7687/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=3790)](http://ci.ros2.org/job/ci_linux-aarch64/3790/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=6291)](http://ci.ros2.org/job/ci_osx/6291/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=7535)](http://ci.ros2.org/job/ci_windows/7535/)\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "remove_mock_msgs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove mock msgs from rclcpp (#800)\n\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ce18912b45d36a74fe",
    "number": 799,
    "body": "Fixes #746.",
    "head_branch": "hidmic/filter-use-sim-time-events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make TimeSource ignore use_sim_time events coming from other nodes. (#799)\n\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178cf18912b45d36a74ff",
    "number": 798,
    "body": "changed qos profile to rmw_qos_profile_parameter_events\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>",
    "head_branch": "dashing_backport_774",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "changed on_parameter_event qos profile to rmw_qos_profile_parameter_events (#774) (#798)\n\nSigned-off-by: alberto <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178d018912b45d36a7500",
    "number": 796,
    "body": "Backport #763",
    "head_branch": "jacob/backport_763",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added support for const member functions (#763)\n\n* Added support for const member functions\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>\r\n\r\n* Added signature for Windows\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>\r\n\r\n* Fix style\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>\r\n\r\n* Attempt at fixing function_traits for macOS\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178d118912b45d36a7501",
    "number": 795,
    "body": "Signed-off-by: Siddharth Kucheria <kucheria@usc.edu>",
    "head_branch": "macro_linter_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix linter issue (#795)\n\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178d218912b45d36a7502",
    "number": 794,
    "body": "* use default parameter descriptor in parameters interface\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use default parameter for value\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "dashing_backport_765",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use default parameter descriptor in parameters interface (#765) (#794)\n\n* use default parameter descriptor in parameters interface\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use default parameter for value\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178d318912b45d36a7503",
    "number": 793,
    "body": "blocks ament/ament_cmake#180",
    "head_branch": "sloretz/fix-not-packags-accepted",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove non-package from ament_target_dependencies() (#793)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178d418912b45d36a7504",
    "number": 792,
    "body": "Clarify that SUCCESS does not mean the future has a value.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Explain return value of spin_until_future_complete (#792)\n\nSigned-off-by: Dan Rose <dan@digilabs.io>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178d518912b45d36a7505",
    "number": 790,
    "body": "",
    "head_branch": "register_node_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix for multiple nodes not being recognized (#790)\n\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178d618912b45d36a7506",
    "number": 789,
    "body": "This is the first part of the instrumentation for the work described at https://discourse.ros.org/t/alpha-release-of-ros-2-tracing-tools/9833",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Instrumentation update (#789)\n\n* Add initial instrumentation\r\n* Rename function registration method and elaborate on object copy issue\r\n* Rely on get_symbol overload instead of using enable_if\r\n\r\nSigned-off-by: Christophe Bedard <fixed-term.christophe.bourquebedard@de.bosch.com>\r\nSigned-off-by: Christophe Bedard <christophe.bedard@apex.ai>\r\nSigned-off-by: Ingo Luetkebohle <ingo.luetkebohle@de.bosch.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178d718912b45d36a7507",
    "number": 788,
    "body": "Equivalent to the free function for creating a service.\r\nResolves #768\r\n",
    "head_branch": "jacob/create_client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add free function for creating service clients (#788)\n\nEquivalent to the free function for creating a service.\r\nResolves #768\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178d918912b45d36a7508",
    "number": 787,
    "body": "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=7614)](http://ci.ros2.org/job/ci_linux/7614/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=3733)](http://ci.ros2.org/job/ci_linux-aarch64/3733/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=6226)](http://ci.ros2.org/job/ci_osx/6226/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=7434)](http://ci.ros2.org/job/ci_windows/7434/)",
    "head_branch": "jacob/tear_down",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix typo in test fixture tear down method name (#787)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178da18912b45d36a7509",
    "number": 786,
    "body": "We weren't allowing using intraprocess comm with non-volatile durability policy.\r\nBut we were actually breaking it, as `inter_process_publish_needed` calculation was wrong.",
    "head_branch": "ivanpauno/transient-local-bug",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178db18912b45d36a750a",
    "number": 785,
    "body": "as per developer guide:\nhttps://index.ros.org/doc/ros2/Contributing/Developer-Guide/#open-versus-cuddled-braces\nsee https://github.com/ament/ament_lint/pull/148\n\nSigned-off-by: Dan Rose <dan@digilabs.io>\n",
    "head_branch": "dev_guide",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add line break after first open paren in multiline function call (#785)\n\n* Add line break after first open paren in multiline function call\r\n\r\nas per developer guide:\r\nhttps://index.ros.org/doc/ros2/Contributing/Developer-Guide/#open-versus-cuddled-braces\r\nsee https://github.com/ament/ament_lint/pull/148\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nFix dedent when first function argument starts with a brace\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nLine break with multiline if condition\r\nRemove line breaks where allowed.\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nFixup after rebase\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nFixup again after reverting indent_paren_open_brace\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\n* Revert comment spacing change, condense some lines\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178dc18912b45d36a750b",
    "number": 784,
    "body": "Addressing https://github.com/ros2/rclcpp/issues/114\r\n",
    "head_branch": "kucheria/cmake_composition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Cmake infrastructure for creating components (#784)\n\n*cmake macro to create components for libraries with multiple nodes\r\n\r\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178dd18912b45d36a750c",
    "number": 782,
    "body": "This pull requests pulls in missing `rcl` headers and stops relying on transitive dependencies. \r\n\r\nConnected to https://github.com/ros2/rcl/pull/470.",
    "head_branch": "hidmic/use-rcutils-on-yaml-parser",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Include missing rcl headers in use. (#782)\n\nAnd stop relying on transitive dependencies.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178de18912b45d36a750d",
    "number": 781,
    "body": "This is so that the on_set_parameter_callback can successfully\r\ncall other parameter methods (like get_parameter) without\r\ndeadlocking.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "parameter-recursive-mutex",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Switch the NodeParameters lock to recursive. (#781)\n\n* Switch the NodeParameters lock to recursive.\r\n\r\nThis is so that the on_set_parameter_callback can successfully\r\ncall other parameter methods (like get_parameter) without\r\ndeadlocking.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Make sure that modifications can't happen within a callback.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Review fixes.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Set parameter_modification_enabled_ in calls that make modifications.\r\n\r\nThis will prevent any modification from within modification,\r\nwhich is a good thing.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Fix windows errors.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Switch to an RAII-style recursion guard.\r\n\r\nAlso update the documentation.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178df18912b45d36a750e",
    "number": 778,
    "body": "# New Intra-Process Communication \r\n\r\nThis (big) PR implements a new Intra-Process Communication mechanism, as described in [this design document](https://github.com/ros2/design/pull/239).\r\n\r\nThe PR does not completely implement the design, i.e. it does not add support for `KEEP_ALL` and `TRANSIENT_LOCAL` quality of service.\r\n\r\n## The general idea\r\n\r\nThe core idea is that every time a `Subscription` that uses intra-process communication is created, also an object of type `SubscriptionIntraProcess` is created. \r\nThis new object is stored in the `IntraProcessManager` and it contains a buffer where messages can be inserted from intra-process `Publisher`s.\r\nThe object itself is `rclcpp::Waitable` so it can be added to a callback group.\r\n\r\nWhen a `Publisher` that uses intra-process communication publishes a message, this is passed to the `IntraProcessManager`.\r\nThis class knows how many `Subscriptions` require this message and can deliver the message to all of them, by adding it to their buffers.\r\n\r\nMore details in the design document.\r\n\r\n## Simplified flow\r\n\r\n - User calls `Node->create_subscription`.\r\n - The `NodeTopics` interface, if the `use_intra_process` flag is enabled, will take care of creating the `SubscriptionIntraProcess` object, adding it to the `IntraProcessManager` and to register it in the callback group.\r\n - The `IntraProcessManager`, through its implementation, stores utilities for getting an `IntraProcessSubscription` given its id.\r\n\r\nFrom the publisher side, the flow is almost unchanged with respect to the previous one, the only difference is that intra-process messages are not stored in the mapped ring buffers (not needed anymore), but direclty delivered to the subscriptions.\r\n\r\n\r\n## How the buffers work\r\n\r\nFrom the `IntraProcessManager` point of view, a buffer is an instance of the `IntraProcessBuffer` class.\r\nAn `IntraProcessBuffer` is templated by a `MessageT` type. This can be something like `std_msgs::msg:Int`.\r\nThe `IntraProcessBuffer` provides methods for adding/consuming different variants of `MessageT` from an underlying `BufferImplementation`.\r\nThe `BufferImplementation` is the actual buffer object.\r\n\r\nAn `IntraProcessBuffer` can have a `BufferImplementation` that stores `ConstSharedPtrMessageT` or `UniquePtrMessageT`, i.e. the `BufferT` typename.\r\n\r\nFor example: an `IntraProcessBuffer` with `MessageT = std_msgs::msg:Int` can have a `BufferImplementation` with a `BufferT = std::unique_ptr<std_msgs::msg::Int>>`.\r\nRegardless of the `BufferT` the `IntraProcessBuffer` provides method for adding shared pointer messages or unique pointer messages.\r\n\r\nWhen a message is added to the `IntraProcessBuffer`, it is responsibility of the `IntraProcessManager` to make a copy if needed, in order to match the type of the underlying `BufferImplementation`.\r\nThe reason is that the `IntraProcessManager` can do a minimal number of copies since it knows all the `Subscriptions`.\r\n\r\nBy default, the type stored in the `BufferImplementation` is the one that fits better with the callback function assigned to its `Subscription`.\r\nI.e. if the `Subscription` has a callback that does not require ownership, a `ConstSharedPtrMessageT` buffer will be created.\r\nNote that it is possible to change that using a new `SubscriptionOption` named `IntraProcessBufferType`.\r\nA possible use case where you want to have a type in the buffer that is different from the callback one is when the callback require ownership and the messages are big.\r\nHaving a buffer that requires ownership too means that every time a message is published, it can potentially be copied. However, if the `Subscription` is not consuming it, the copy is wasted.\r\nUsing a `BufferImplementation` that stores shared pointers allows to delay the copy to the moment when the message is extracted from the buffer.\r\n\r\nA `BufferImplementationBase` class exists that provides an interface to the minimal methods that a Buffer has to provide (i.e. add/consume for the different data types).\r\nThe presence of the interface allows to add different `BufferImplementation`s, for example depending on the quality of service or on the intended behavior of an application.\r\n\r\n## Future works \r\n\r\n - In order to support KEEP_ALL it's sufficient to use an appropriate `BufferImplementation`.\r\n - In order to support TRANSIENT_LOCAL it's sufficient to store a `PublisherIntraProcess` in the `IntraProcessManager` as it's done for the subscription. This will contain only a buffer where published messages are stored. When a TRANSIENT_LOCAL subscription is added to the `IntraProcessManager`, it can retrieve old stored messages.\r\n\r\n## Testing\r\n\r\nThe performances of this intra-process communication mechanism have been tested by us for almost a month, finding significant improvements (as discussed in the design document).\r\n\r\nSome unit-tests are already presents, mainly to ensure that the number of copies of the messages is correct.\r\nI was waiting for some initial feedback to add more tests.\r\n\r\n\r\n@dgoel @raghaprasad",
    "head_branch": "alsora/simplified_ipc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "New Intra-Process Communication (#778)\n\n* basic ipc implementation from alsora/new_ipc_proposal\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nbetter use of node_topic create subscription\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded intra process manager test\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nfixed ring buffer and added test\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded intra process buffer test\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded intra process buffer test\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nremoved intra-process methods from subscription base\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nusing lock_guard instead of unique_lock, renamed var without camel case\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nusing unordered set and references in intra process manager\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nsubscription intra-process does not depend anymore on subscription, but has a copy of the callback\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nchanged buffer API to use rvo\r\n\r\nSigned-off-by: Alberto <alberto.soragna@gmail.com>\r\n\r\navoid copying shared_ptr\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nrevert not needed changes to create_subscription\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nupdated tests according to new buffer APIs\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nupdated types in ring buffer implementation avoid using uint32_t\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nusing unique ptr for buffers in subscription_intra_process\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded missing std::move in subscription_intra_process constructor\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nuse consisting names for ring_buffer_implementation members\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\naddressing typos, one-liners and similar from ivanpauno review\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nmoved subscription_intra_process_base to its own files and moved non templated method from derived class\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nremoved forward declarations, fixed include subscription_intra_process_base\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nremoved member variable from do_intra_process_publish signature\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\ndeclare public before private in intra_process_manager_impl\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nmade matches_any_intra_process_publishers const\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nusing const reference in get_all_matching_publishers\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded deleter and alloc templates in intra_process_buffer\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded RCLCPP_WARN to intra_process_manager_impl\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\npassing context from node to subscription_intra_process\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nusing allocators in intra_process_manager\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nuse size_t instead of int in ring buffer indices\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\ncreating buffer inside subscription_intra_process constructor\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nfix lint errors\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nthrow error if trying to dequeue when buffer empty; remove duplicated methods in intra_process_buffer\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded todo for creating an rmw function for checking qos compatibility\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\ntest fixes\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nrefactored intra_process_manager, removed ipm impl\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\nadded mutex in intra_process_manager add_* methods\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nadded allocator to intra_process_buffer\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nadded invalid intra_process qos test for subscription\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nthrow error if history size is 0 with keep last and ipc\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nusing allocator when creating unique_ptr from shared_ptr\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nadding deleter template argument to intra_process buffer\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nfix linter\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nthrow error with callbackT different from messageT\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nupdated deleter template argument in subscription factory\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nFix typo in test fixture tear down method name (#787)\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\nAdd free function for creating service clients (#788)\r\n\r\nEquivalent to the free function for creating a service.\r\nResolves #768\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\nCmake infrastructure for creating components (#784)\r\n\r\n*cmake macro to create components for libraries with multiple nodes\r\n\r\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>\r\n\r\nAllow registering multiple on_parameters_set_callback (#772)\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\nfix for multiple nodes not being recognized (#790)\r\n\r\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>\r\n\r\nRemove non-package from ament_target_dependencies() (#793)\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\nfix linter issue (#795)\r\n\r\nSigned-off-by: Siddharth Kucheria <kucheria@usc.edu>\r\n\r\nMake TimeSource ignore use_sim_time events coming from other nodes. (#799)\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\npassing deleter template parameter\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nsmall fixes for failing tests\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nfixed imports in test_intra_process_manager\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nusing RCLCPP_SMART_PTR_ALIASES_ONLY and RCLCPP_PUBLIC macros\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nadded RCLCPP_PUBLIC macros and virtual destructor to sub intra_process base\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nadded unique_ptr alias to macros\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nupdated test_intra_process_manager.cpp\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\nremove mock msgs from rclcpp (#800)\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\nAdd line break after first open paren in multiline function call (#785)\r\n\r\n* Add line break after first open paren in multiline function call\r\n\r\nas per developer guide:\r\nhttps://index.ros.org/doc/ros2/Contributing/Developer-Guide/#open-versus-cuddled-braces\r\nsee https://github.com/ament/ament_lint/pull/148\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nFix dedent when first function argument starts with a brace\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nLine break with multiline if condition\r\nRemove line breaks where allowed.\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nFixup after rebase\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nFixup again after reverting indent_paren_open_brace\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\n* Revert comment spacing change, condense some lines\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nAdapt to '--ros-args ... [--]'-based ROS args extraction (#816)\r\n\r\n* Use --ros-args to deal with node arguments in rclcpp.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Document implicit --ros-args flag in NodeOptions::arguments().\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Add missing size_t to int cast.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Only add implicit --ros-args flag if not present already.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Add some rclcpp::NodeOptions test coverage.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Address peer review comments.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Please cpplint and uncrustify.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nGuard against making multiple result requests for a goal handle (#808)\r\n\r\nThis fixes a runtime error caused by a race condition when making consecutive requests for the\r\nresult.\r\nSpecifically, this happens if the user provides a result callback when sending a goal and then\r\ncalls async_get_result shortly after.\r\n\r\nResolves #783\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\nExplain return value of spin_until_future_complete (#792)\r\n\r\nSigned-off-by: Dan Rose <dan@digilabs.io>\r\n\r\nAllow passing logger by const ref (#820)\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\nDelete unnecessary call for get_node_by_group (#823)\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\nFix get_node_interfaces functions taking a pointer (#821)\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\nadd callback group as member variable and constructor arg (#811)\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>\r\n\r\nremove callback group as member variable\r\n\r\nWrap documentation examples in code blocks (#830)\r\n\r\nThis makes the code examples easier to read in the generated documentation.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\nCrash in callback group pointer vector iterator (#814)\r\n\r\nSigned-off-by: Guillaume Autran <gautran@clearpath.ai>\r\n\r\nadd mutex in add/remove_node and wait_for_work to protect concurrent use/change of memory_strategy_ (#837)\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\nFix hang with timers in MultiThreadedExecutor (#835) (#836)\r\n\r\nSigned-off-by: Todd Malsbary <todd.malsbary@intel.com>\r\n\r\nUse of -r/--remap flags where appropriate. (#834)\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nForce explicit --ros-args in NodeOptions::arguments(). (#845)\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nFail on invalid and unknown ROS specific arguments (#842)\r\n\r\n* Fail on invalid and unknown ROS specific arguments.\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Revert changes to utilities.hpp in rclcpp\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\n* Fully revert change to utilities.hpp\r\n\r\nSigned-off-by: Michel Hidalgo <michel@ekumenlabs.com>\r\n\r\nFix typo in deprecated warning. (#848)\r\n\r\n\"it's\" instead of its\r\n\r\nSigned-off-by: Luca Della Vedova <luca@openrobotics.org>\r\n\r\nAdd throwing parameter name if parameter is not set (#833)\r\n\r\n* added throwing parameter name if parameter is not set\r\n\r\nSigned-off-by: Alex <cvbn127@gmail.com>\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\ncheck valid timer handler 1st to reduce the time window for scan. (#841)\r\n\r\nSigned-off-by: Tomoya.Fujita <Tomoya.Fujita@sony.com>\r\n\r\nremove features and related code which were deprecated in dashing (#852)\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\nreset error message before setting a new one, embed the original one (#854)\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\nrestored virtual destructor in publisher_base\r\n\r\nSigned-off-by: Soragna, Alberto <alberto.soragna@gmail.com>\r\n\r\n* fixup a few things after rebase\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* refactor some API's and get code compiling again\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* docs and style changes (whitespace)\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* move new intra process internals into experimental namespace\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* uncrustify\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix issues with LoanedMessages after rebase\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* more fixups\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* readd logic for avoiding in compatible QoS\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid an error when intra process is disabled\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* change intra process to preserve pointer in cyclic_pipeline\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix issue matching topics in intra process\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix some issues with the tests after latest behavior change\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* address review feedback\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix the initialization order\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid possible loss of data warning\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* more fixes related to initialization\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix use of custom allocators\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178e018912b45d36a750f",
    "number": 777,
    "body": "Currently, some ROS2 node exception handling error messages are not being printed to the terminal because the print command was commented out. I have removed the comments and it is working in my system (Ubuntu 18.04, with ROS2).\r\nThis will help the debugging process since now, the error messages will be visible.",
    "head_branch": "fix_error_print",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixe error messages not printing to terminal (#777)\n\n* Uncommented catch exception code to print error\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* put back the e\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* uncommented error printing in exception handling\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* Removed \"/n\" characters.\r\nUpdate lifecycle_node_interface_impl.hpp\r\n\r\nSigned-off-by: Yathartha Tuladhar <yathartha3@gmail.com>\r\n\r\n* Fix CI issue and remove TODO\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178e118912b45d36a7510",
    "number": 775,
    "body": "This PR updates the constructor to match that of `Node` (i.e. `options` should be optional). I also removed part of the API documentation that was no longer relevant.",
    "head_branch": "node_options_optional",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add default value to options in LifecycleNode construnctor. Update API documentation. (#775)\n\nSigned-off-by: Esteve Fernandez <esteve@apache.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178e318912b45d36a7511",
    "number": 774,
    "body": "The current `Subscription` used for paramter events has `rmw_qos_profile_default` as default qos profile.\r\nOn the other hand its corresponding `Publisher` uses `rmw_qos_profile_parameter_events`.\r\n\r\nThis PR changes the `Subscription` profile to match the `Publisher` one.\r\nThis is particularly helpful for the bigger depth of the queue: a common scenario consists in creating a bunch of nodes and then, after all have been created, they start to spin.\r\nParameters declared during node creation (as the time source one) can fill the queues being overwritten.",
    "head_branch": "alsora/fix_parameter_subscription_qos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "changed on_parameter_event qos profile to rmw_qos_profile_parameter_events (#774)\n\nSigned-off-by: alberto <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178e418912b45d36a7512",
    "number": 772,
    "body": "(Edit)\r\n\r\nFixes https://github.com/ros2/rclcpp/issues/722.\r\n\r\nThe API looks like this:\r\n\r\n```cpp\r\n  OnSetParametersCallbackHandle::SharedPtr\r\n  add_on_set_parameters_callback(OnParametersSetCallbackType callback);\r\n```\r\n```cpp\r\n  void\r\n  remove_on_set_parameters_callback(const OnSetParametersCallbackHandle * const handler);\r\n```\r\n\r\n----\r\n(Original comment)\r\n\r\nBased in discussion in https://github.com/ros2/rclcpp/issues/769 (TL;DR see [this comment](https://github.com/ros2/rclcpp/issues/769#issuecomment-505107740)), it would be nice to allow registering multiple callbacks with `set_on_parameters_set_callback`.\r\n\r\nMy idea was the following:\r\n\r\n- Calling `set_on_parameters_set_callback` adds a new callback to a vector. It returns a lambda which emulates the behavior of calling all the previous registered callbacks (before, it was returning the previous callback and overriding it). If no callback was registered before, it returns `nullptr`.\r\n- Calling `set_on_parameters_set_callback` with `nullptr` as argument clear all the registered callbacks.\r\n\r\nMaybe it would be better to return the vector of all the callbacks instead of a lambda, but that would add a new signature (probably deprecating the old method).\r\n\r\nMaybe, we want to implement this in a different way, or not implement it at all.\r\nThis is just a proposal of a possible implementation.",
    "head_branch": "ivanpauno/allow-multiple-on-parameters-set-callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow registering multiple on_parameters_set_callback (#772)\n\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178e518912b45d36a7513",
    "number": 771,
    "body": "",
    "head_branch": "Wsign-compare",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix a comparison with a sign mismatch (#771)\n\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178e618912b45d36a7514",
    "number": 770,
    "body": "not exactly sure if this was on purpose, but it looks to me like a typo",
    "head_branch": "Karsten1987-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "delete superfluous spaces (#770)\n\nnot exactly sure if this was on purpose, but it looks to me like a typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178e718912b45d36a7515",
    "number": 767,
    "body": "Closes https://github.com/ros2/rclcpp/issues/750.\r\n\r\nI also thought about adding:\r\n```cpp\r\n  template<typename ParameterT>\r\n  std::vector<ParameterT>\r\n  declare_parameters(\r\n    const std::string & namespace_,\r\n    const std::map<\r\n      std::string,\r\n      std::tuple<ParameterT, rcl_interfaces::msg::ParameterDescriptor, bool>\r\n    > & parameters);\r\n```\r\n\r\nWhere the last element of the tuple is a bool indicating if the override of that parameter is ignored or not.\r\n\r\nBut this:\r\nhttps://github.com/ros2/rclcpp/blob/f4a979df0bb7162fcde8b6b50fead9a2c020dcf7/rclcpp/test/test_node.cpp#L510-L513\r\nended up with an ambiguous overload error:\r\n```\r\ncall of overloaded ‚Äòdeclare_parameters(const char [1], <brace-enclosed initializer list>)‚Äô is ambiguous\r\n```\r\n\r\nI didn't find a workaround, so I simple deleted that option.",
    "head_branch": "ivanpauno/add-ignore-override-declare-parameter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add ignore override argument to declare parameter (#767)\n\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178e818912b45d36a7516",
    "number": 765,
    "body": "When working only with node interfaces, having a default parameter descriptor is convenient and resembles the API on the node\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=7400)](http://ci.ros2.org/job/ci_linux/7400/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=3556)](http://ci.ros2.org/job/ci_linux-aarch64/3556/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=6073)](http://ci.ros2.org/job/ci_osx/6073/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=7228)](http://ci.ros2.org/job/ci_windows/7228/)\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "default_parameter_descriptor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use default parameter descriptor in parameters interface (#765)\n\n* use default parameter descriptor in parameters interface\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* use default parameter for value\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178e918912b45d36a7517",
    "number": 764,
    "body": "To deal with thread cleanup issues upon destruction in https://github.com/ros2/geometry2/pull/114, for example, we needed to stop spinning the node in the thread before it could be joined. Having realized this change using `spin_some` led to high cpu usage, the pattern in https://github.com/ros-planning/navigation2/pull/866 and https://github.com/ros2/geometry2/pull/119 was proposed. \r\n\r\nTo consolidate this pattern in `rclcpp`, this PR adds an interface to enable the user to pass in a reference to an Executor to spin the node. This change would allow for the user to manage the executor in order to do things such as call `executor.cancel()` to end the spin before joining a thread.\r\n\r\nSigned-off-by: bpwilcox <bpwilcox@eng.ucsd.edu>",
    "head_branch": "param_in_executor_spin",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ea18912b45d36a7518",
    "number": 763,
    "body": "Addresses #761 ",
    "head_branch": "const-member-function-traits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added support for const member functions (#763)\n\n* Added support for const member functions\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>\r\n\r\n* Added signature for Windows\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>\r\n\r\n* Fix style\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>\r\n\r\n* Attempt at fixing function_traits for macOS\r\n\r\nSigned-off-by: Esteve Fernandez <esteve@apache.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178eb18912b45d36a7519",
    "number": 762,
    "body": "The short-term goal of this change is to enable the creation of a parameter YAML file which is applied to each node, regardless of node name or namespace.\r\n\r\nFuture work is to support all wildcard syntax in node names in parameter YAML files.",
    "head_branch": "wildcard_param_yaml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use params from node '/**' from parameter YAML file (#762)\n\nThe short-term goal of this change is to enable the creation of a\r\nparameter YAML file which is applied to each node, regardless of node\r\nname or namespace.\r\n\r\nFuture work is to support all wildcard syntax in node names in\r\nparameter YAML files.\r\n\r\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178ec18912b45d36a751a",
    "number": 760,
    "body": "",
    "head_branch": "patch-release-1-backport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Ignore parameters overrides in set parameter methods when allowing undeclared parameters (#756)\n\n* Ignore parameters overrides in set parameter methods when allowing undeclared parameters\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Address reviewer comment\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ee18912b45d36a751b",
    "number": 758,
    "body": "Addresses https://github.com/ros2/rclcpp/issues/114",
    "head_branch": "kucheria/114",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ef18912b45d36a751c",
    "number": 757,
    "body": "This is a convenience PR that I'm hoping to get in the first Dashing patch release. It adds `rclcpp::create_timer()` that contains the boilerplate for creating a timer with any clock, [not just wall time](https://github.com/ros2/rclcpp/blob/4532d9cf784a85c899161a9b82e7d65814269f92/rclcpp/include/rclcpp/node.hpp#L335).",
    "head_branch": "sloretz/create_timer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add rclcpp::create_timer() (#757)\n\n* Add rclcpp::create_timer()\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Friendly overload with node-like object\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* forward<CallbackT>\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Make sure test with NodeWrapper compiles\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178f018912b45d36a751d",
    "number": 756,
    "body": "See https://github.com/ros2/rclcpp/issues/730#issuecomment-496215079 and https://github.com/ros2/rclcpp/issues/730#issuecomment-496676163.\r\nPartially solves https://github.com/ros2/rclcpp/issues/750.",
    "head_branch": "ivanpauno/ignore-overrides-when-using-undeclared-parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Ignore parameters overrides in set parameter methods when allowing undeclared parameters (#756)\n\n* Ignore parameters overrides in set parameter methods when allowing undeclared parameters\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Address reviewer comment\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178f118912b45d36a751e",
    "number": 754,
    "body": "Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.",
    "head_branch": "get_actual_qos_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add get_actual_qos() feature to subscriptions (#754)\n\nSigned-off-by: Miaofei <miaofei@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178f218912b45d36a751f",
    "number": 753,
    "body": "This PR fixes the following scenario.\r\n\r\nThere are two processes. In the first process there are a `Publisher` and a `Subscription` to `/MyTopic`. Both have intra-process communication enabled. In the second process there is a `Subscription` to `/MyTopic` and it has intra-process communication enabled.\r\n\r\nThe `Publisher` sends an intra-process meta-message through the RMW on the `/MyTopic/_intra` topic. Also, the `Subscription` in the second process will be listening to that topic. This results in that the meta-message will be delivered to both `Subscription`s. \r\n\r\nThe one in the second topic will still try to use the meta-message to retrieve something from the `IntraProcessManager`.\r\n\r\nMore details https://github.com/irobot-ros/ros2-performance/pull/1",
    "head_branch": "alsora/fix_intra_process_dispatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "checking origin of intra-process msg before taking them (#753)\n\nSigned-off-by: alberto <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178f318912b45d36a7520",
    "number": 749,
    "body": "Fixes https://github.com/ros2/demos/issues/362.\r\n\r\nThe comment in the code is self-explanatory.",
    "head_branch": "ivanpauno/avoid_intra_process_warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Avoid 'Intra process message no longer being stored when trying to ha‚Ä¶ (#749)\n\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178f418912b45d36a7521",
    "number": 748,
    "body": "",
    "head_branch": "assign_modify_operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add addition/subtraction assignment operators to Time (#748)\n\nSigned-off-by: Scott K Logan <logans@cottsay.net>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178f518912b45d36a7522",
    "number": 745,
    "body": "Connects to ros2/ros2_documentation#242",
    "head_branch": "rename_parameter_options",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename parameter options (#745)\n\n* rename initial_parameters in NodeOptions to parameter_overrides\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* rename automatically_declare_initial_parameters to automatically_declare_parameters_from_overrides\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* some additional renames I missed\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add test for setting after declaring with parameter overrides\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup NodeOptions docs\r\n\r\nSigned-off-by: William Woodall <william+github@osrfoundation.org>\r\n\r\nCo-Authored-By: chapulina <louise@openrobotics.org>\r\n\r\n* clarify relationship between allow_undeclared_parameters and parameter_overrides\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662178f618912b45d36a7523",
    "number": 742,
    "body": "Since API 23 Android Bionic uses the GNU convention for strerror_r.\r\n\r\nFollowing the string.h definition in bionic/libc, line 96\r\n  https://android.googlesource.com/platform/bionic.git/+/refs/heads/master/libc/include/string.h\r\nI suggest to add the API variant to select between the GNU or XSI variant.",
    "head_branch": "rkoehle/strerror_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bionic use of strerror_r (#742)\n\nSince API 23 Android Bionic uses the GNU convention for strerror_r.\r\nFollowing bionic/libc line 96,\r\n  https://android.googlesource.com/platform/bionic.git/+/refs/heads/master/libc/include/string.h\r\n\r\nSigned-off-by: roderick-koehle <50633232+roderick-koehle@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178f818912b45d36a7524",
    "number": 741,
    "body": "Fixes #272.\r\n\r\nThe first commit changes the API of the memory strategy from taking a vector of nodes to list of nodes. While this change is not strictly necessary it simplifies the logic in the executor notably.\r\n\r\nThe second commit stores the guard condition point for each node so that the guard condition can be removed from the memory strategy when the node expires.",
    "head_branch": "dirk-thomas/fix272",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ensure removal of guard conditions of expired nodes from memory strategy (#741)\n\n* change memory strategy API from vector of nodes to list of nodes\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* store guard_condition of node in executor and ensure that it is removed from the memory strategy\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>\r\n\r\n* add unit test\r\n\r\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178f918912b45d36a7525",
    "number": 740,
    "body": "From https://github.com/ros2/rclcpp/pull/688 the `parameter_client_` is not used anymore from the `TimeSource` class.\r\n\r\nHowever, the pointer was still there. \r\nRemoving it with this PR.",
    "head_branch": "alsora/fix_parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "removed not used parameter client (#740)\n\n* removed not used parameter client\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>\r\n\r\n* moved parameter include directives to time source cpp file\r\n\r\nSigned-off-by: alberto <alberto.soragna@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178fa18912b45d36a7526",
    "number": 739,
    "body": "Should fix https://github.com/ros2/rclcpp/issues/730.\r\n\r\nI think I missed this case when testing because I tested `declare_parameter` in combination with `allow_undeclared_parameters` AND `rclcpp::NodeOptions::initial_parameters`, but for `get_parameter` I only tested with and without `allow_undeclared_parameters` but not in conjunction with `rclcpp::NodeOptions::initial_parameters`.\r\n\r\n@chapulina I don't know how easy it is for you to try this pr out, but hopefully it should make your porting only _require_ switching the `allows_undeclared_parameter` flag to `true`, even if you decide to do more changes and use `declare_parameters`.",
    "head_branch": "fix_get_parameter_with_allow_undeclared_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178fb18912b45d36a7527",
    "number": 738,
    "body": "Also make sure to invoke the goal response callback before the result callback.\r\n\r\nAddresses review comment https://github.com/ros2/rclcpp/pull/701#pullrequestreview-233076772.",
    "head_branch": "jacob/fix_action_client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Guard against calling null goal response callback (#738)\n\nAlso make sure to invoke the goal response callback before the result callback.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178fc18912b45d36a7528",
    "number": 737,
    "body": "",
    "head_branch": "jacob/fix_typo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix typo in log warning message (#737)\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178fd18912b45d36a7529",
    "number": 736,
    "body": "Fixes ros2/demos#346.",
    "head_branch": "dirk-thomas/fix-demos-346",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "don't use global arguments for components loaded into the manager (#736)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178fe18912b45d36a752a",
    "number": 735,
    "body": "Closes #728.\r\n\r\nAs discussed in #728, I'm not applying type enforcement. Commits https://github.com/ros2/rclcpp/commit/4661bf3cc69e1f2125178c1f1072d120269ad260 and https://github.com/ros2/rclcpp/commit/479940c17acdce29d563d5d684b862078e727800 are reverting type enforcement (I started implementing it).\r\n\r\nI have to add more test cases, but it would be good to get an early review.",
    "head_branch": "ivanpauno/enforce-parameter-ranges-rclcpp",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Enforce parameter ranges (#735)\n\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662178ff18912b45d36a752b",
    "number": 729,
    "body": "Closes #727.\r\n\r\nI did't do the checking inside `setup_intra_process` because the mapped ring buffer is created before.\r\n\r\nThe other option, is to create the mapped ring buffer inside `setup_intra_process` method (call `ipm->add_publisher(publisher)` inside the function and stop taking `intra_process_publisher_id` as an argument). In this way all the errors because of incompatible qos settings with intra process comm are thrown from the same place.",
    "head_branch": "ivanpauno/rclcpp#727",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Throw nice errors when creating a publisher with intraprocess communication and incompatible qos policy (#729)\n\n* Throw nice errors when creating a publisher with intraprocess communication and history keep all or history depth 0.\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790118912b45d36a752c",
    "number": 725,
    "body": "I realize why the original was spelled wrong, volatile is a c++ keyword, so https://github.com/ros2/rclcpp/pull/724 was a bad change. Modify to not require learning a misspelling, and note why it can't have that name\r\n\r\nSo sorry about that @dirk-thomas, I was overeager and didn't verify the build properly.\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>",
    "head_branch": "volatile-is-a-keyword",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "I realize why the original was spelled wrong, volatile is a c++ keyword. Modify to not require learning a misspelling, and note why it can't have that name (#725)\n\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621790218912b45d36a752d",
    "number": 724,
    "body": "Signed-off-by: Emerson Knapp <eknapp@amazon.com>",
    "head_branch": "volitile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "volitile -> volatile (#724)\n\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621790318912b45d36a752e",
    "number": 723,
    "body": "Fixes https://ci.ros2.org/view/nightly/job/nightly_linux_clang_libcxx/55/warningsResult/\r\n\r\nLinux `clang` build testing `rclcpp` before: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=7131)](https://ci.ros2.org/job/ci_linux/7131/)\r\nLinux `clang` build testing `rclcpp` after: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=7132)](https://ci.ros2.org/job/ci_linux/7132/)",
    "head_branch": "dirk-thomas/fix-clang-warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix clang warning (#723)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790418912b45d36a752f",
    "number": 720,
    "body": "When undeclaring a parameter, the current implementation\r\nacccesses already freed memory. This commit contains the\r\nminimal change to solve this isue.\r\n\r\nBefore this fix:\r\n\r\n```\r\nRunning main() from ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest_main.cc\r\nNote: Google Test filter = TestNode.set_parameter_undeclared_parameters_not_allowed\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from TestNode\r\n[ RUN      ] TestNode.set_parameter_undeclared_parameters_not_allowed\r\n=================================================================\r\n==14634==ERROR: AddressSanitizer: heap-use-after-free on address 0x614000008070 at pc 0x7f90d5eb2733 bp 0x7ffc79e38d00 sp 0x7ffc79e384a8\r\nREAD of size 12 at 0x614000008070 thread T0\r\n    #0 0x7f90d5eb2732  (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x79732)\r\n    #1 0x555823664ce8 in void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0xface8)\r\n    #2 0x7f90d57c70d3 in rclcpp::Parameter::Parameter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::ParameterValue const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/parameter.cpp:49\r\n    #3 0x7f90d577fbe6 in rclcpp::node_interfaces::NodeParameters::set_parameters_atomically(std::vector<rclcpp::Parameter, std::allocator<rclcpp::Parameter> > const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp:499\r\n    #4 0x7f90d573d8b9 in rclcpp::Node::set_parameters_atomically(std::vector<rclcpp::Parameter, std::allocator<rclcpp::Parameter> > const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node.cpp:271\r\n    #5 0x7f90d573d4ac in rclcpp::Node::set_parameter(rclcpp::Parameter const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node.cpp:259\r\n    #6 0x5558235e1c0d in TestNode_set_parameter_undeclared_parameters_not_allowed_Test::TestBody() ../../src/ros2/rclcpp/rclcpp/test/test_node.cpp:694\r\n    #7 0x5558236fc2cf in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #8 0x5558236eed3b in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #9 0x55582369c94b in testing::Test::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2522\r\n    #10 0x55582369dd76 in testing::TestInfo::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2703\r\n    #11 0x55582369e91a in testing::TestCase::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2825\r\n    #12 0x5558236b9a2b in testing::internal::UnitTestImpl::RunAllTests() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:5216\r\n    #13 0x5558236fed74 in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #14 0x5558236f1004 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #15 0x5558236b67bf in testing::UnitTest::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:4824\r\n    #16 0x555823689d0e in RUN_ALL_TESTS() ../../../install-asan/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:2370\r\n    #17 0x555823689c54 in main ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest_main.cc:36\r\n    #18 0x7f90d4768b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n    #19 0x5558235b07d9 in _start (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0x467d9)\r\n\r\n0x614000008070 is located 48 bytes inside of 416-byte region [0x614000008040,0x6140000081e0)\r\nfreed by thread T0 here:\r\n    #0 0x7f90d5f1a2d0 in operator delete(void*) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe12d0)\r\n    #1 0x7f90d57abd0f in __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::deallocate(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >*, unsigned long) /usr/include/c++/7/ext/new_allocator.h:125\r\n    #2 0x7f90d57a8908 in std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > > >::deallocate(std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >&, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >*, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:462\r\n    #3 0x7f90d57a133c in std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::_M_put_node(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >*) /usr/include/c++/7/bits/stl_tree.h:592\r\n    #4 0x7f90d5796abd in std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::_M_drop_node(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >*) /usr/include/c++/7/bits/stl_tree.h:659\r\n    #5 0x7f90d579d3d4 in std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::_M_erase_aux(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >) /usr/include/c++/7/bits/stl_tree.h:2477\r\n    #6 0x7f90d5792213 in std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::erase[abi:cxx11](std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >) /usr/include/c++/7/bits/stl_tree.h:1125\r\n    #7 0x7f90d5789f68 in std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::node_interfaces::ParameterInfo, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::erase[abi:cxx11](std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/install-asan/rclcpp/lib/librclcpp.so+0x491f68)\r\n    #8 0x7f90d577fb2a in rclcpp::node_interfaces::NodeParameters::set_parameters_atomically(std::vector<rclcpp::Parameter, std::allocator<rclcpp::Parameter> > const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp:497\r\n    #9 0x7f90d573d8b9 in rclcpp::Node::set_parameters_atomically(std::vector<rclcpp::Parameter, std::allocator<rclcpp::Parameter> > const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node.cpp:271\r\n    #10 0x7f90d573d4ac in rclcpp::Node::set_parameter(rclcpp::Parameter const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node.cpp:259\r\n    #11 0x5558235e1c0d in TestNode_set_parameter_undeclared_parameters_not_allowed_Test::TestBody() ../../src/ros2/rclcpp/rclcpp/test/test_node.cpp:694\r\n    #12 0x5558236fc2cf in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #13 0x5558236eed3b in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #14 0x55582369c94b in testing::Test::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2522\r\n    #15 0x55582369dd76 in testing::TestInfo::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2703\r\n    #16 0x55582369e91a in testing::TestCase::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2825\r\n    #17 0x5558236b9a2b in testing::internal::UnitTestImpl::RunAllTests() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:5216\r\n    #18 0x5558236fed74 in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #19 0x5558236f1004 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #20 0x5558236b67bf in testing::UnitTest::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:4824\r\n    #21 0x555823689d0e in RUN_ALL_TESTS() ../../../install-asan/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:2370\r\n    #22 0x555823689c54 in main ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest_main.cc:36\r\n    #23 0x7f90d4768b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n\r\npreviously allocated by thread T0 here:\r\n    #0 0x7f90d5f19458 in operator new(unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0458)\r\n    #1 0x7f90d57aceba in __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111\r\n    #2 0x7f90d57a9c4c in std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > > >::allocate(std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >&, unsigned long) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/install-asan/rclcpp/lib/librclcpp.so+0x4b1c4c)\r\n    #3 0x7f90d57a3f6e in std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::_M_get_node() (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/install-asan/rclcpp/lib/librclcpp.so+0x4abf6e)\r\n    #4 0x7f90d5799770 in std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::_M_create_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/install-asan/rclcpp/lib/librclcpp.so+0x4a1770)\r\n    #5 0x7f90d578f382 in std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> >, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) /usr/include/c++/7/bits/stl_tree.h:2398\r\n    #6 0x7f90d5788eba in std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::node_interfaces::ParameterInfo, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /usr/include/c++/7/bits/stl_map.h:493\r\n    #7 0x7f90d577bc88 in __declare_parameter_common(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::ParameterValue const&, rcl_interfaces::msg::ParameterDescriptor_<std::allocator<void> > const&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::node_interfaces::ParameterInfo, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::node_interfaces::ParameterInfo> > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::ParameterValue, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, rclcpp::ParameterValue> > > const&, std::function<rcl_interfaces::msg::SetParametersResult_<std::allocator<void> > (std::vector<rclcpp::Parameter, std::allocator<rclcpp::Parameter> > const&)>, rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >*) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp:250\r\n    #8 0x7f90d577c4f7 in rclcpp::node_interfaces::NodeParameters::declare_parameter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::ParameterValue const&, rcl_interfaces::msg::ParameterDescriptor_<std::allocator<void> > const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp:287\r\n    #9 0x7f90d573d1ec in rclcpp::Node::declare_parameter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::ParameterValue const&, rcl_interfaces::msg::ParameterDescriptor_<std::allocator<void> > const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node.cpp:241\r\n    #10 0x555823645b6b in auto rclcpp::Node::declare_parameter<int>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int const&, rcl_interfaces::msg::ParameterDescriptor_<std::allocator<void> > const&) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0xdbb6b)\r\n    #11 0x5558235e14ee in TestNode_set_parameter_undeclared_parameters_not_allowed_Test::TestBody() ../../src/ros2/rclcpp/rclcpp/test/test_node.cpp:689\r\n    #12 0x5558236fc2cf in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #13 0x5558236eed3b in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #14 0x55582369c94b in testing::Test::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2522\r\n    #15 0x55582369dd76 in testing::TestInfo::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2703\r\n    #16 0x55582369e91a in testing::TestCase::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2825\r\n    #17 0x5558236b9a2b in testing::internal::UnitTestImpl::RunAllTests() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:5216\r\n    #18 0x5558236fed74 in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #19 0x5558236f1004 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #20 0x5558236b67bf in testing::UnitTest::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:4824\r\n    #21 0x555823689d0e in RUN_ALL_TESTS() ../../../install-asan/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:2370\r\n    #22 0x555823689c54 in main ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest_main.cc:36\r\n    #23 0x7f90d4768b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n\r\nSUMMARY: AddressSanitizer: heap-use-after-free (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x79732)\r\nShadow bytes around the buggy address:\r\n  0x0c287fff8fb0: 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa\r\n  0x0c287fff8fc0: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd\r\n  0x0c287fff8fd0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c287fff8fe0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c287fff8ff0: fd fd fd fd fd fd fd fd fd fd fd fd fa fa fa fa\r\n=>0x0c287fff9000: fa fa fa fa fa fa fa fa fd fd fd fd fd fd[fd]fd\r\n  0x0c287fff9010: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c287fff9020: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x0c287fff9030: fd fd fd fd fd fd fd fd fd fd fd fd fa fa fa fa\r\n  0x0c287fff9040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c287fff9050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n==14634==ABORTING\r\n```\r\n\r\nAfter this fix:\r\n\r\n```\r\nRunning main() from ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest_main.cc\r\nNote: Google Test filter = TestNode.set_parameter_undeclared_parameters_not_allowed\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from TestNode\r\n[ RUN      ] TestNode.set_parameter_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.set_parameter_undeclared_parameters_not_allowed (51 ms)\r\n[----------] 1 test from TestNode (51 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test case ran. (51 ms total)\r\n[  PASSED  ] 1 test.\r\n\r\n=================================================================\r\n==8511==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 64 byte(s) in 1 object(s) allocated from:\r\n    #0 0x7f49af480458 in operator new(unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0458)\r\n    #1 0x7f49aecb6b21 in rclcpp::NodeOptions::get_rcl_node_options() const ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node_options.cpp:84\r\n    #2 0x7f49aeca1e63 in rclcpp::Node::Node(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::NodeOptions const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node.cpp:115\r\n    #3 0x7f49aeca1a34 in rclcpp::Node::Node(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, rclcpp::NodeOptions const&) ../../src/ros2/rclcpp/rclcpp/src/rclcpp/node.cpp:103\r\n    #4 0x55ee8e2e4473 in void __gnu_cxx::new_allocator<rclcpp::Node>::construct<rclcpp::Node, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(rclcpp::Node*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, rclcpp::NodeOptions&) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_no\r\nde+0x10e473)\r\n    #5 0x55ee8e2de58f in void std::allocator_traits<std::allocator<rclcpp::Node> >::construct<rclcpp::Node, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(std::allocator<rclcpp::Node>&, rclcpp::Node*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, rclcpp::NodeOptions&) (/home/ANT.AMAZON.C\r\nOM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0x10858f)\r\n    #6 0x55ee8e2da516 in std::_Sp_counted_ptr_inplace<rclcpp::Node, std::allocator<rclcpp::Node>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(std::allocator<rclcpp::Node>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, rclcpp::NodeOp\r\ntions&) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0x104516)\r\n    #7 0x55ee8e2d25b2 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<rclcpp::Node, std::allocator<rclcpp::Node>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(std::_Sp_make_shared_tag, rclcpp::Node*, std::allocator<rclcpp::Node> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::alloc\r\nator<char> >&&, rclcpp::NodeOptions&) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0xfc5b2)\r\n    #8 0x55ee8e2c84da in std::__shared_ptr<rclcpp::Node, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<rclcpp::Node>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(std::_Sp_make_shared_tag, std::allocator<rclcpp::Node> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, rcl\r\ncpp::NodeOptions&) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0xf24da)\r\n    #9 0x55ee8e2bfd60 in std::shared_ptr<rclcpp::Node>::shared_ptr<std::allocator<rclcpp::Node>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(std::_Sp_make_shared_tag, std::allocator<rclcpp::Node> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, rclcpp::NodeOptions&) (/home/ANT.AM\r\nAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0xe9d60)\r\n    #10 0x55ee8e2b6b18 in std::shared_ptr<rclcpp::Node> std::allocate_shared<rclcpp::Node, std::allocator<rclcpp::Node>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(std::allocator<rclcpp::Node> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, rclcpp::NodeOptions&) (/home/ANT.AMAZ\r\nON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0xe0b18)\r\n    #11 0x55ee8e2ad89e in std::shared_ptr<rclcpp::Node> std::make_shared<rclcpp::Node, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, rclcpp::NodeOptions&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, rclcpp::NodeOptions&) (/home/ANT.AMAZON.COM/tmoulard/ros2_ws/build-asan/rclcpp/test_node+0xd789e)\r\n    #12 0x55ee8e245438 in TestNode_set_parameter_undeclared_parameters_not_allowed_Test::TestBody() ../../src/ros2/rclcpp/rclcpp/test/test_node.cpp:607\r\n    #13 0x55ee8e35d111 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #14 0x55ee8e34fb7d in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #15 0x55ee8e2fd78d in testing::Test::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2522\r\n    #16 0x55ee8e2febb8 in testing::TestInfo::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2703\r\n    #17 0x55ee8e2ff75c in testing::TestCase::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2825\r\n    #18 0x55ee8e31a86d in testing::internal::UnitTestImpl::RunAllTests() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:5216\r\n    #19 0x55ee8e35fbb6 in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2447\r\n    #20 0x55ee8e351e46 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:2483\r\n    #21 0x55ee8e317601 in testing::UnitTest::Run() ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest.cc:4824\r\n    #22 0x55ee8e2eab50 in RUN_ALL_TESTS() ../../../install-asan/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:2370\r\n    #23 0x55ee8e2eaa96 in main ../../../install-asan/gtest_vendor/src/gtest_vendor/src/gtest_main.cc:36\r\n    #24 0x7f49adccfb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n\r\nSUMMARY: AddressSanitizer: 64 byte(s) leaked in 1 allocation(s).\r\n```\r\n\r\nNote: after this fix, get_rcl_node_options() still leak. This is a\r\nproblem independent from this issue and will be solved independently.\r\n\r\nSigned-off-by: Thomas Moulard <tmoulard@amazon.com>",
    "head_branch": "thomas-moulard/fix_asan_node_parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790518912b45d36a7530",
    "number": 719,
    "body": "Fix AddressSanitizer errors reported by test_node.cpp unit test.\r\n\r\n#### This change fixes 2 errors reported by AddressSanitizer:\r\n1. heap-use-after-free\r\n```bash\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from TestNode\r\n[ RUN      ] TestNode.set_parameter_undeclared_parameters_not_allowed\r\n\r\n=================================================================\r\n==16060==ERROR: AddressSanitizer: heap-use-after-free on address 0x614000006270 at pc 0x7f8ac7cc5733 bp 0x7ffef1b1ae50 sp 0x7ffef1b1a5f8\r\nREAD of size 11 at 0x614000006270 thread T0\r\n    ...snip...\r\n\r\n0x614000006270 is located 48 bytes inside of 416-byte region [0x614000006240,0x6140000063e0)\r\nfreed by thread T0 here:\r\n    ...snip...\r\n\r\npreviously allocated by thread T0 here:\r\n    ...snip...\r\n\r\nSUMMARY: AddressSanitizer: heap-use-after-free (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x79732) \r\n    ...snip...\r\n\r\n==16060==ABORTING\r\n```\r\n\r\n2. Detected memory leaks\r\n```bash\r\nRunning main() from /home/ANT.AMAZON.COM/prajaktg/ros2_ws/install-asan/gtest_vendor/src/gtest_vendor/src/gtest_main.cc\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from TestNode\r\n[ RUN      ] TestNode.set_parameter_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.set_parameter_undeclared_parameters_not_allowed (27 ms)\r\n[----------] 1 test from TestNode (27 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test case ran. (27 ms total)\r\n[  PASSED  ] 1 test.\r\n\r\n=================================================================\r\n==17914==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 64 byte(s) in 1 object(s) allocated from:\r\n    ...snip...\r\n\r\nSUMMARY: AddressSanitizer: 64 byte(s) leaked in 1 allocation(s).\r\n```\r\n\r\nAfter this commit, no sanitizer errors are reported\r\n```bash\r\n[==========] Running 30 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 30 tests from TestNode\r\n[ RUN      ] TestNode.construction_and_destruction\r\n[       OK ] TestNode.construction_and_destruction (52 ms)\r\n[ RUN      ] TestNode.get_name_and_namespace\r\n[       OK ] TestNode.get_name_and_namespace (521 ms)\r\n[ RUN      ] TestNode.subnode_get_name_and_namespace\r\n[       OK ] TestNode.subnode_get_name_and_namespace (215 ms)\r\n[ RUN      ] TestNode.subnode_construction_and_destruction\r\n[       OK ] TestNode.subnode_construction_and_destruction (292 ms)\r\n[ RUN      ] TestNode.get_logger\r\n[       OK ] TestNode.get_logger (180 ms)\r\n[ RUN      ] TestNode.get_clock\r\n[       OK ] TestNode.get_clock (39 ms)\r\n[ RUN      ] TestNode.now\r\n[       OK ] TestNode.now (38 ms)\r\n[ RUN      ] TestNode.declare_parameter_with_no_initial_values\r\n[       OK ] TestNode.declare_parameter_with_no_initial_values (39 ms)\r\n[ RUN      ] TestNode.declare_parameter_with_initial_values\r\n[       OK ] TestNode.declare_parameter_with_initial_values (39 ms)\r\n[ RUN      ] TestNode.declare_parameters_with_no_initial_values\r\n[       OK ] TestNode.declare_parameters_with_no_initial_values (40 ms)\r\n[ RUN      ] TestNode.undeclare_parameter\r\n[       OK ] TestNode.undeclare_parameter (39 ms)\r\n[ RUN      ] TestNode.has_parameter\r\n[       OK ] TestNode.has_parameter (38 ms)\r\n[ RUN      ] TestNode.set_parameter_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.set_parameter_undeclared_parameters_not_allowed (40 ms)\r\n[ RUN      ] TestNode.set_parameter_undeclared_parameters_allowed\r\n[       OK ] TestNode.set_parameter_undeclared_parameters_allowed (39 ms)\r\n[ RUN      ] TestNode.set_parameters_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.set_parameters_undeclared_parameters_not_allowed (41 ms)\r\n[ RUN      ] TestNode.set_parameters_undeclared_parameters_allowed\r\n[       OK ] TestNode.set_parameters_undeclared_parameters_allowed (39 ms)\r\n[ RUN      ] TestNode.set_parameters_atomically_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.set_parameters_atomically_undeclared_parameters_not_allowed (40 ms)\r\n[ RUN      ] TestNode.set_parameters_atomically_undeclared_parameters_allowed\r\n[       OK ] TestNode.set_parameters_atomically_undeclared_parameters_allowed (39 ms)\r\n[ RUN      ] TestNode.get_parameter_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.get_parameter_undeclared_parameters_not_allowed (38 ms)\r\n[ RUN      ] TestNode.get_parameter_undeclared_parameters_allowed\r\n[       OK ] TestNode.get_parameter_undeclared_parameters_allowed (38 ms)\r\n[ RUN      ] TestNode.get_parameter_or_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.get_parameter_or_undeclared_parameters_not_allowed (39 ms)\r\n[ RUN      ] TestNode.get_parameter_or_undeclared_parameters_allowed\r\n[       OK ] TestNode.get_parameter_or_undeclared_parameters_allowed (38 ms)\r\n[ RUN      ] TestNode.get_parameters_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.get_parameters_undeclared_parameters_not_allowed (81 ms)\r\n[ RUN      ] TestNode.get_parameters_undeclared_parameters_allowed\r\n[       OK ] TestNode.get_parameters_undeclared_parameters_allowed (39 ms)\r\n[ RUN      ] TestNode.describe_parameter_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.describe_parameter_undeclared_parameters_not_allowed (39 ms)\r\n[ RUN      ] TestNode.describe_parameter_undeclared_parameters_allowed\r\n[       OK ] TestNode.describe_parameter_undeclared_parameters_allowed (37 ms)\r\n[ RUN      ] TestNode.describe_parameters_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.describe_parameters_undeclared_parameters_not_allowed (39 ms)\r\n[ RUN      ] TestNode.describe_parameters_undeclared_parameters_allowed\r\n[       OK ] TestNode.describe_parameters_undeclared_parameters_allowed (39 ms)\r\n[ RUN      ] TestNode.get_parameter_types_undeclared_parameters_not_allowed\r\n[       OK ] TestNode.get_parameter_types_undeclared_parameters_not_allowed (39 ms)\r\n[ RUN      ] TestNode.get_parameter_types_undeclared_parameters_allowed\r\n[       OK ] TestNode.get_parameter_types_undeclared_parameters_allowed (39 ms)\r\n[----------] 30 tests from TestNode (2275 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 30 tests from 1 test case ran. (2276 ms total)\r\n[  PASSED  ] 30 tests.\r\n```\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>",
    "head_branch": "fix_asan_bugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix heap-use-after-free and memory leaks reported from test_node.cpp (#719)\n\nFix AddressSanitizer errors reported by test_node.cpp unit test.\r\n\r\nSigned-off-by: Prajakta Gokhale <prajaktg@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790618912b45d36a7531",
    "number": 718,
    "body": "Fixes #705.\r\n\r\nIf the set_parameters() call fails, it's nice to be able to return a partial result.\r\nSince there is no convenient method to obtain a partial result, we call set_parameters()\r\nonce for each parameter.",
    "head_branch": "jacob/rclcpp705",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Guard against ParameterNotDeclaredException in parameter service callbacks (#718)\n\nFixes #705.\r\n\r\nIf the set_parameters() call fails, it's nice to be able to return a partial result.\r\nSince there is no convenient method to obtain a partial result, we call set_parameters()\r\nonce for each parameter.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790718912b45d36a7532",
    "number": 714,
    "body": "Setting `start_parameter_event_publisher` to false causes a segmentation fault because a check for nullptr is missing before publishing.\r\n\r\n@raghaprasad",
    "head_branch": "alsora/fix_parameter_event_pub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "check for nullptr before publishing event (#714)\n\nSigned-off-by: alberto <asoragna@irobot.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790818912b45d36a7533",
    "number": 713,
    "body": "This pr does a few things:\r\n\r\n- Improves `rclcpp::Duration` so that specifying things like `deadline` and `lifespan` are more natural.\r\n- Adds an rclcpp version of QoS, which requires the history depth to be specified if using \"keep last\".\r\n- Deprecates `create_*` signatures that allow you to create something without specifying history depth or \"keep all\".\r\n- Add signatures that take the new `rclcpp::QoS` as the recommended alternative to the deprecated methods.\r\n- Updates NodeOptions to include new QoS and PublisherOptions for the parameter event topic.\r\n- Changes to NodeBase to avoid dependency on NodeOptions to avoid settings that apply to Node but not NodeBase.\r\n- Changes to `rclcpp::create_publisher` and `rclcpp::create_subscription` free functions to make them easier to use.\r\n  - And improve them so that even less code is duplicated between `rclcpp::Node` and `rclcpp_lifecycle::LifecycleNode`.\r\n- Update the `rclcpp_lifecycle` code to match.\r\n- Updates tests and related code to avoid now deprecated signatures.\r\n\r\nI'll also summarize the changes to the signatures and what that means for the existing code that uses this.\r\n\r\nForthcoming is a set of pr's to update downstream packages to avoid deprecation warnings.\r\n\r\nUnfortunately, this is still not finished yet, as I am now stuck on template deduction problems on Windows. I am somewhat hopeful, that I can fix those problems with only small changes, and so this would be good to review already, but there might be changes for Windows still...\r\n\r\nThe goal was to get this in for the API freeze, but the unforeseen Windows issues may have derailed that. So I put it in the TODO column just in case there is time.\r\n\r\nI've been trying to reproduce it in a minimal example in compiler explorer, with no luck yet. In case you're curious: https://godbolt.org/z/Gu0hMC\r\n\r\n### Publishers\r\n\r\nFor publishers, this is a summary of what will have changed from Crystal to Dashing (including this pr):\r\n\r\n```c++\r\n// Completely new signature.\r\ntemplate<\r\n  typename MessageT,\r\n  typename AllocatorT = std::allocator<void>,\r\n  typename PublisherT = ::rclcpp::Publisher<MessageT, AllocatorT>>\r\nstd::shared_ptr<PublisherT>\r\ncreate_publisher(\r\n  const std::string & topic_name,\r\n  const rclcpp::QoS & qos,\r\n  const PublisherOptionsWithAllocator<AllocatorT> & options = (\r\n    PublisherOptionsWithAllocator<AllocatorT>()));\r\n```\r\n\r\n```diff\r\n   typename MessageT,\r\n   typename Alloc = std::allocator<void>,\r\n   typename PublisherT = ::rclcpp::Publisher<MessageT, Alloc>>\r\n+[[deprecated(\"use create_publisher(const std::string &, const rclcpp::QoS &, ...) instead\")]]\r\n std::shared_ptr<PublisherT>\r\n create_publisher(\r\n   const std::string & topic_name,\r\n   size_t qos_history_depth,\r\n-  std::shared_ptr<Alloc> allocator = nullptr);\r\n+  std::shared_ptr<Alloc> allocator);\r\n \r\n template<\r\n   typename MessageT,\r\n   typename Alloc = std::allocator<void>,\r\n   typename PublisherT = ::rclcpp::Publisher<MessageT, Alloc>>\r\n+[[deprecated(\"use create_publisher(const std::string &, const rclcpp::QoS &, ...) instead\")]]\r\n std::shared_ptr<PublisherT>\r\n create_publisher(\r\n   const std::string & topic_name,\r\n   const rmw_qos_profile_t & qos_profile = rmw_qos_profile_default,\r\n   std::shared_ptr<AllocatorT> allocator = nullptr);\r\n\r\n```\r\n\r\nThis is a list of all of the API calls possible in Crystal and what happens to each of them:\r\n\r\n- `create_publisher(\"\")`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_publisher(\"\", rmw_qos_profile_t, allocator)` and uses the default arguments for the rmw qos profile and allocator\r\n- `create_publisher(\"\", size_t)`:\r\n  - still works, invokes `create_publisher(\"\", QoS, PublisherOptions)` and `QoS`'s conversion constructor for `size_t` and gets the default argument for the publisher options\r\n- `create_publisher(\"\", size_t, allocator)`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_publisher(\"\", size_t, allocator)`\r\n- `create_publisher(\"\", rmw_qos_profile_t)`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_publisher(\"\", rmw_qos_profile_r, allocator)` and uses the default argument for the allocator\r\n- `create_publisher(\"\", rmw_qos_profile_t, allocator)`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_publisher(\"\", rmw_qos_profile_r, allocator)`\r\n\r\nThe qos settings are removed from the new `PublisherOptions`, preferring to always explicitly pass the QoS separately. This also allows the `PublisherOptions` to be default-constructable (unlike `rclcpp::QoS`) and avoids an additional signature where depth is provided as well as the parameter options, for which the internal depth value would be ignored, creating a strange behavior.\r\n\r\n### Subscriptions\r\n\r\nFor subscriptions, this is a summary of what will have changed from Crystal to Dashing (including this pr):\r\n\r\n```c++\r\n// Completely new signature.\r\ntemplate<\r\n  typename MessageT,\r\n  typename CallbackT,\r\n  typename AllocatorT = std::allocator<void>,\r\n  typename SubscriptionT = rclcpp::Subscription<\r\n    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, AllocatorT>>\r\nstd::shared_ptr<SubscriptionT>\r\ncreate_subscription(\r\n  const std::string & topic_name,\r\n  const rclcpp::QoS & qos,\r\n  CallbackT && callback,\r\n  const SubscriptionOptionsWithAllocator<AllocatorT> & options = (\r\n    SubscriptionOptionsWithAllocator<AllocatorT>()\r\n  ),\r\n  typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\r\n    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, AllocatorT\r\n  >::SharedPtr\r\n  msg_mem_strat = nullptr);\r\n```\r\n\r\n```diff\r\n template<\r\n   typename MessageT,\r\n   typename CallbackT,\r\n   typename Alloc = std::allocator<void>,\r\n   typename SubscriptionT = rclcpp::Subscription<\r\n     typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>>\r\n+[[deprecated(\r\n+  \"use create_subscription(const std::string &, CallbackT, const rclcpp::QoS &, ...) instead\"\r\n+)]]\r\n std::shared_ptr<SubscriptionT>\r\n create_subscription(\r\n   const std::string & topic_name,\r\n   CallbackT && callback,\r\n   const rmw_qos_profile_t & qos_profile = rmw_qos_profile_default,\r\n   rclcpp::callback_group::CallbackGroup::SharedPtr group = nullptr,\r\n   bool ignore_local_publications = false,\r\n   typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\r\n     typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>::SharedPtr\r\n   msg_mem_strat = nullptr,\r\n   std::shared_ptr<Alloc> allocator = nullptr);\r\n\r\n template<\r\n   typename MessageT,\r\n   typename CallbackT,\r\n   typename Alloc = std::allocator<void>,\r\n   typename SubscriptionT = rclcpp::Subscription<\r\n     typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>>\r\n+[[deprecated(\r\n+  \"use create_subscription(const std::string &, CallbackT, const rclcpp::QoS &, ...) instead\"\r\n+)]]\r\n std::shared_ptr<SubscriptionT>\r\n create_subscription(\r\n   const std::string & topic_name,\r\n   CallbackT && callback,\r\n   size_t qos_history_depth,\r\n-  rclcpp::callback_group::CallbackGroup::SharedPtr group = nullptr,\r\n+  rclcpp::callback_group::CallbackGroup::SharedPtr group,\r\n   bool ignore_local_publications = false,\r\n   typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\r\n     typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>::SharedPtr \r\n   msg_mem_strat = nullptr,\r\n   std::shared_ptr<Alloc> allocator = nullptr);\r\n\r\n```\r\n\r\nThis is a list of all of the API calls possible in Crystal and what happens to each of them:\r\n\r\n- `create_subscription(\"\", callback)`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_subscription(\"\", callback, rmw_qos_profile_t, ...)` and uses the default arguments for the qos profile, and so on\r\n- `create_subscription(\"\", callback, rmw_qos_profile_t)`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_subscription(\"\", callback, rmw_qos_profile_t, ...)` and uses the default arguments for the rest\r\n- `create_subscription(\"\", callback, rmw_qos_profile_t, ...)`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_subscription(\"\", callback, rmw_qos_profile_t, ...)` and uses the default arguments for the arguments not provided, if any\r\n- `create_subscription(\"\", callback, size_t)`:\r\n  - still works,\r\n  - invokes the new `create_subscription(\"\", callback, rclcpp::QoS, ...)` using the `rclcpp::QoS` conversion constructor for `size_t`\r\n- `create_subscription(\"\", callback, size_t, group, ...)`:\r\n  - still works, but generates deprecation warning\r\n  - because it invokes `create_subscription(\"\", callback, size_t, group, ...)` and uses the default arguments for the arguments not provided, if any\r\n\r\nLike the `PublisherOptions`, the qos settings are removed from the new `SubscriptionOptions`, preferring to always explicitly pass the QoS separately.",
    "head_branch": "require_history_depth",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "change API to encourage users to specify history depth always (#713)\n\n* improve interoperability with rclcpp::Duration and std::chrono\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add to_rmw_time to Duration\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add new QoS class to rclcpp\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* changes to NodeBase, NodeTopics, etc in preparation for changes to pub/sub\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* refactor publisher creation to use new QoS class\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* refactor subscription creation to use new QoS class\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixing fallout from changes to pub/sub creation\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixed Windows error: no appropriate default constructor available\r\n\r\nwhy? who knows\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixed Windows error: could not deduce template argument for 'PublisherT'\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix missing vftable linker error on Windows\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix more cases of no suitable default constructor errors...\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* prevent msvc from trying to interpret some cases as functions\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* uncrustify\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* cpplint\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add C++ version of default action qos\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixing lifecycle subscription signatures\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix allocators (we actually use this already in the pub/sub factory)\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* suppress cppcheck on false positive syntax error\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix more cppcheck syntax error false positives\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix case where sub-type of QoS is used\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup get_node_topics_interface.hpp according to reviews and tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* additional fixes based on local testing and CI\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* another trick to avoid 'no appropriate default constructor available'\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix compiler error with clang on macOS\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* disable build failure tests until we can get Jenkins to ignore their output\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* suppress more cppcheck false positives\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add missing visibility macros to default QoS profile classes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix another case of 'no appropriate default constructor available'\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* unfortunately this actaully fixes a build error on Windows...\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix typos\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621790918912b45d36a7534",
    "number": 712,
    "body": "Follow up to ros2/rcl#255\r\n\r\nRebased from #615 \r\n\r\nMost of the content was duplicated in #662 this catches one other improvement from @rarvolt \r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=6861)](http://ci.ros2.org/job/ci_linux/6861/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=3151)](http://ci.ros2.org/job/ci_linux-aarch64/3151/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=5638)](http://ci.ros2.org/job/ci_osx/5638/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=6680)](http://ci.ros2.org/job/ci_windows/6680/)",
    "head_branch": "pr_615_cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add rcl_node_get_fully_qualified_name (ros2/rcl#255) (#712)\n\nSigned-off-by: RARvolt <rarvolt@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790b18912b45d36a7535",
    "number": 711,
    "body": "Connects to ros2/rmw#159",
    "head_branch": "rmw_preallocate",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "API updates for rmw preallocation work (#711)\n\n* API updates for rmw preallocation work.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Adjust for allocation in serialized message method.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Fix extra take call.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790c18912b45d36a7536",
    "number": 710,
    "body": "Refactored the callback signature for canceling one goal. Now it is the same as the other cancel methods.\r\nThis makes it easier to communicate the error code to the user.\r\n\r\nConnects to https://github.com/ros2/rcl_interfaces/issues/63",
    "head_branch": "cancel_goal_response_code",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add return code to CancelGoal service response (#710)\n\n* Populate return code of CancelGoal service response\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Throw if there is an error processing a cancel goal request\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Make cancel callback signature consistent across cancel methods and add tests\r\n\r\nRefactored the callback signature for canceling one goal. Now it is the same as the other cancel methods.\r\nThis makes it easier to communicate the error code to the user.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>\r\n\r\n* Address review\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621790d18912b45d36a7537",
    "number": 709,
    "body": "See https://github.com/ros2/rclcpp/pull/690#discussion_r279109760 https://github.com/ros2/rclcpp/pull/690#issuecomment-487664648\r\n\r\nDepends on #690",
    "head_branch": "ivanpauno/deprecate-shared-ptr-publish",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Deprecate shared ptr publish (#709)\n\n* Deprecate publish methods with shared_ptr signature\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Corrected with PR comments. Deprecated similar methods in lifecycle publisher\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Removed reference in unique_ptr publish call\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Corrected with PR comments. Corrected warning problem in lifecycle_publisher\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Deprecate publish call taking a raw ptr. Stop deprecating publish methods in LifecyclePublisher.\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Pleased linter\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Corrected mac warning\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Corrected serialized publish methods\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Avoid windows warning\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Not deprecate on windows\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621790e18912b45d36a7538",
    "number": 708,
    "body": "The allow_undeclared_parameters and automatically_declare_initial_parameters fields of\r\nthe node options class were not assigned in the assignment operator, resulting in\r\nan incorrect copy of the node options object, which also indirectly affects the\r\ncopy constructor.\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@intel.com>",
    "head_branch": "fix-node-options-assignment-op",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add assignment of parameter-related fields in node options constructor (#708)\n\n* Add assignment of missing parameter-related fields in node options copy constructor.\r\n\r\nThe allow_undeclared_parameters and automatically_declare_initial_parameters fields of\r\nthe node options class were not assigned in the assignment operator, resulting in\r\nan incorrect copy of the node options object, which also indirectly affects the\r\ncopy constructor.\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@intel.com>\r\n\r\n* Run linters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621790f18912b45d36a7539",
    "number": 707,
    "body": "Recent changes to the node_parameters interface was accompanied by additions to the node.hpp header and implementation files. However, these additions were not also made to the corresponding lifecycle node files. This PR includes the changes required for the lifecycle node.\r\n\r\nSigned-off-by: michael.jeronimo@intel.com\r\n\r\nI suggest that template methods that supplement the basic node interfaces should either be factored out into a separate header that both node and lifecycle_node include or included in the basic node interface header, if possible. Also, any regular methods added to the node class that are convenience wrappers for calls to the interfaces should also be added to the lifecycle_node class. That way we can avoid node and lifecycle_node getting out of sync, making porting code from node to lifecycle node easier. ",
    "head_branch": "add-missing-parameter-templates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing template functionality to lifecycle_node. (#707)\n\n* Add missing template functionality to lifecycle_node.\r\n\r\nRecent changes to the node_parameters interface was accompanied by additions to the\r\nnode.hpp header and implementation files. However, these additions were not also made\r\nto the corresponding lifecycle node files. This PR includes the changes required for\r\nthe lifecycle node.\r\n\r\nGoing forward, I suggest that any code like this that supplements the basic node interfaces\r\nshould either be factored out into a separate header that both node and lifecycle_node\r\ninclude, or that the supplemental code simply be included in the appropriate node_interface\r\nfile directly, if possible. That way we can avoid code duplication and its symptoms which\r\nis node and lifecycle_node getting out of sync (which they have several times).\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@intel.com>\r\n\r\n* consolidate documentation to just be in rclcpp/node.hpp\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix visibility macros\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* deprecation methods that were also deprecated in rclcpp::Node\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup variable name\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add missing template method implementations\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add more methods that were not ported to lifecycle node originally\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix cpplint\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791018912b45d36a753a",
    "number": 704,
    "body": "Reimplement the fix to correct a concurrency problem in the multithreaded executor.\r\nThis time, the AnyExecutable class has a boolean flag to reset / not reset the callback group `can_be_taken_from_` variable on destruction.\r\nThe multithreaded executor initializes the executor with that flag set to false.\r\n\r\nIssue: #702",
    "head_branch": "issue_702b",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621791118912b45d36a753b",
    "number": 703,
    "body": "Both, the `Executor::execute_any_executable` and the destructor for the `AnyExecutable` object used by the multithreaded executor, reset the `can_be_taken_from_` flag on a MutuallyExclusive group. This cause the variable to get out of sync and threads to process executables out of sequence.\r\n\r\nThis fix clears the callback group variable of the `AnyExecutable` instance effectively preventing its destructor from modifying the variable at the wrong time.\r\n\r\nIssue: #702",
    "head_branch": "issue_702",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a concurrency problem in the multithreaded executor (#703)\n\nBoth, the `Executor::execute_any_executable` and the destructor for the `AnyExecutable` object used by the multithreaded executor, reset the `can_be_taken_from_` flag on a MutuallyExclusive group. This cause the variable to get out of sync and threads to process executables out of sequence.\r\n\r\nThis fix clears the callback group variable of the `AnyExecutable` instance effectively preventing its destructor from modifying the variable at the wrong time.\r\n\r\nIssue: #702\r\nSigned-off-by: Guillaume Autran <gautran@clearpath.ai>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621791218912b45d36a753c",
    "number": 701,
    "body": "Resolves #635.\r\nThis also makes it easier to incorporate action clients in composable nodes since we don't have to rely on waiting on futures.",
    "head_branch": "action_client_callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add optional cancel callback to asynchronous cancel goal methods\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791318912b45d36a753d",
    "number": 700,
    "body": "fixes ros2/rclcpp#699\r\n\r\nThis PR allows to create an action server within a constructor inheriting from node and therefore composition of these nodes.\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "fix_699",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "overload for node interfaces (#700)\n\n* overload for node interfaces\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* remove new line\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>\r\n\r\n* overload client for node iterfaces\r\n\r\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791518912b45d36a753e",
    "number": 698,
    "body": "This is a re-opening of pull request #669 after I accidentally deleted it. This pull request is intended to fix the issue outlined in issue #643.\r\n\r\nIn order for this pull request to work, modifications have to be made in other repositories (mainly system_tests). I will link that pull request once it is made.\r\n**EDIT** Pull request is at https://github.com/ros2/system_tests/pull/345",
    "head_branch": "issue_643",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[WIP / Re-Opened] Add functions to return formatted Node Name-Namespace strings (#698)\n\n* Add functions to return formatted Node Name-Namespace strings\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Changed get_node_names to return fully qualified names, removed namespace method\r\nSigned-off-by: Oswin So <oswinso@gmail.com>\r\n\r\n* Removed unnecessary capture-by-reference\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Added first draft of tests\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Fixed bug creating phantom empty name/namespaces\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Re-ordered includes\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Swap checks to see if name is in set\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Fixed style errors from uncrustify\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Swapped to unordered_set\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Re-ordered includes again\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* nitpick: minimize vertical whitespace\r\n\r\nsee: https://google.github.io/styleguide/cppguide.html#Vertical_Whitespace\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Add API documentation for added get_node_names function\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Revert to last known semi-working point\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Modified expected test results\r\n\r\nA fully-qualified name is \"namespace\"/\"name\". If namespace is set to be \"/\" (as they are in these tests), we would expect a qualified name of \"//name\"\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Have get_node_names determine if central slash needed or not\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Corrected tests to not accept double slashes\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Undo changes to .gitignore\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Change qualified string construction to better handle invalid slashes\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Removed debugging statements\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Simplified slash-checking logic\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791618912b45d36a753f",
    "number": 697,
    "body": "Add method to read timer cancellation\r\nAdd relevant unit tests\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>",
    "head_branch": "timer_cancel_state",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add method to read timer cancellation (#697)\n\n* Add method to read timer cancellation\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Add improved documentation\r\nAdd improved and more unit tests\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Add missing include\r\nAdd override for inherited methods\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>\r\n\r\n* Addressed review comments\r\n\r\nSigned-off-by: Devin Bonnie <dbbonnie@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791718912b45d36a7540",
    "number": 696,
    "body": "PR contains\r\n* fix uninitalized bool in clock.cpp\r\n* fix missing nullptr check after static_cast in clock.cpp\r\n* add documentation, most notably for exceptions\r\n* add warning for possible UB when clock leaves scope before of its JumpHandlers",
    "head_branch": "fixup-clock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixup clock (#696)\n\n* Fix uninitialized bool in clock.cpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Fixup includes of clock.hpp/cpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Add documentation for exceptions to clock.hpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Adjust function signature of getters of clock.hpp/cpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Remove raw pointers Clock::create_jump_callback\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Remove unnecessary rclcpp namespace reference from clock.cpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Change exception to bad_alloc on JumpHandler allocation failure\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Fix missing nullptr check in Clock::on_time_jump\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Add JumpHandler::callback types\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Add warning for lifetime of Clock and JumpHandler\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Incorporate review\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Incorporate review\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791818912b45d36a7541",
    "number": 695,
    "body": "This PR adds the ability for a client application to specify callback functions that are called when liveliness and/or deadline events occur. The client application will also be able to manually `assert_liveliness()` of a specific node or publisher.\r\n\r\nConnects to ros2/rmw#171",
    "head_branch": "qos-impl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement callbacks for liveliness and deadline QoS events (#695)\n\n* implement deadline and liveliness qos callbacks\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\n* fix windows build\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\n* address feedback from pull request\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\n* update formatting to be compatible with ros2 coding style and ament_uncrustify\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\n* make QOSEventHandlerBase::add_to_wait_set() throw\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\n* mark throw_from_rcl_error as [[noreturn]]\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\n* fix windows compilation error\r\n\r\nSigned-off-by: Miaofei <miaofei@amazon.com>\r\n\r\n* Ignore uncrustify for single [[noreturn]] syntax instance\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791918912b45d36a7542",
    "number": 694,
    "body": "MR cleans up the time/duration\r\n* it fixes a minor bug in the Duration::Duration(const builtin_interfaces::msg::Duration &)\r\n* provides several commonly used functions for time/duration to simplify over/underflow and other checks:\r\n[!]\r\nHere it changes the handling of Foo(sec, nanosec) style c'tors: it will cast nanosec only to affect times smaller then seconds, allowing consistent behavior between Time/Duration and builtin_interfaces::msg::Time/Duration\r\n* Adds missing documentation about exceptions allowing to write clients exception save code",
    "head_branch": "fixup-time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621791a18912b45d36a7543",
    "number": 693,
    "body": "Clean up minor issues in the timer.hpp/cpp\r\n\r\nMost notably:\r\n* possible exception in the d'tor of the GenericTimer\r\n* missing virtual keywork in the d'tor of the BaseTimer\r\n* move from custom exception raising to the generic interface of 'throw_from_rcl_error'\r\n\r\n[!] Someone with the right permissions must trigger the ci",
    "head_branch": "fixup-timer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621791b18912b45d36a7544",
    "number": 692,
    "body": "Cleans up some minor issues in utility.hpp/cpp\r\n",
    "head_branch": "fixup-utilities",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixup utilities (#692)\n\n* Fixed dependencies in the utility.hpp/cpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Add missing documentation for exceptions in utility.hpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Add rclcpp namespace to the utility.cpp\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Add check for a non-negative nonros_argc value\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Simplify syntax for the return_arguments\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>\r\n\r\n* Incorporate Review\r\n\r\nSigned-off-by: Dmitrij Dorezyuk <dmitrij.dorezyuk@hotmail.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621791c18912b45d36a7545",
    "number": 691,
    "body": "Some new fields are being added to rmw_qos_profile_t, and this package needs to be updated to be compatible with the newer definition of the struct.\r\n\r\nConnects to ros2/rmw#173",
    "head_branch": "qos-iface-only-rmw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "correct initialization of rmw_qos_profile_t struct instances (#691)\n\nSigned-off-by: Miaofei <miaofei@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621791e18912b45d36a7546",
    "number": 690,
    "body": "This is an enhancement of the IntraProcessManager, that allows storing both unique_ptr<T> and shared_ptr<const T>. Design draft [here](https://docs.google.com/document/d/1dM8O34GM-SbFps1vd1rocPMAg_7O9_-OG4NF4axOz7E/edit#heading=h.3q18ubcdx3fd).\r\nIt shows a better performance, specially in the case of many subscriptions sharing ownership of the same const message. Document with performance results [here](https://docs.google.com/document/d/1XldfcBP0C8Zb8e4wMcks4zcfvzzE8CRhDPKwn-ZGGNs/edit).\r\n\r\n##### List of changes\r\n- MappedRingBuffer can store both kind of smart pointers. push_and_replace, get, and pop methods for both signature.\r\n- MappedRingBuffer updated, covering the new implementation.\r\n- Added store_intra_process_message and take_intra_process_message methods with both signatures to the IntraProcessManager.\r\n- Modified Publisher publish methods to use this new IntraProcessManager.\r\n- Modified Subscription handle_intra_process_message method.\r\n- Modified AnySubscriptionCallback dispatch_intra_process method.\r\n- Stopped bounding intra-process related methods from SubscriptionFactory and PublisherFactory in Subscription and Publisher class.\r\n- Split publisher.h and subscriber.h in two files, one with the base class and the other with the derived.\r\n  The idea is to avoid a circular inclusion with intra_process_manager.h\r\n\r\n##### To do\r\n- The intra_process_manager test has been corrected only to make it pass, because of the api changes. But it's actually not covering all the new IPM methods (which are well tested at mapped_ring_buffer level).",
    "head_branch": "ivanpauno/new_intra_process_manager",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "New IntraProcessManager capable of storing shared_ptr<const T> (#690)\n\n* Changed mapped_ring_buffer class to store both shared_ptr or unique_ptr\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Changed the IPM store and take methods\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Changed publish methods to take advantage of the new IPM\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Change how subscriptions handle intraprocess messages\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Modified publish method signatures\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Renamed 'publisher.cpp' and 'subscription.cpp' to 'publisher_base.cpp' and 'subscription_base.cpp'\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Updated lifecycle_publisher publish methods\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621791f18912b45d36a7547",
    "number": 688,
    "body": "Currently, the `TimeSource` class creates an object of type `AsyncParametersClient` with the only purpose of subscribing to the parameter events using the `on_parameter_event` method.\r\n\r\nHowever, the `AsyncParametersClient` is not necessary for doing this, as the `on_parameter_event` creates a regular subscription.\r\n\r\nIn this PR I added a static implementation for `on_parameter_event` that allows to not create the `AsyncParameterClient` object.\r\nThere may be different alternative implementation for decoupling the `on_parameter_event` from the ParameterClient... Let me know if you think that something else would be better than the static methods I used.\r\n\r\nIf we agree on this change and on how to implement it, I will look into the code if there are other places where to propagate it.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Created `on_parameter_event` static function (#688)\n\n* created static functions\r\n\r\nSigned-off-by: alsora <alberto.soragna@gmail.com>\r\nSigned-off-by: alberto soragna <alberto.soragna@gmail.com>\r\n\r\n* updated on_parameter_event to new subscriber api\r\n\r\nSigned-off-by: alberto soragna <alberto.soragna@gmail.com>\r\n\r\n* Update parameter_client.hpp\r\n\r\nReorderd typenames in template\r\n\r\nSigned-off-by: alberto soragna <alberto.soragna@gmail.com>\r\n\r\n* updated API also for Synchronous client and fixed linter errors\r\n\r\nSigned-off-by: alberto soragna <alberto.soragna@gmail.com>\r\n\r\n* added empty line at the end of files\r\n\r\nSigned-off-by: alberto soragna <alberto.soragna@gmail.com>\r\n\r\n* fixed linter error\r\n\r\nSigned-off-by: alsora <alberto.soragna@gmail.com>\r\n\r\n* added parameter client tests\r\n\r\nSigned-off-by: alsora <alberto.soragna@gmail.com>\r\n\r\n* added missing includes in unit test\r\n\r\nSigned-off-by: alsora <alberto.soragna@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621792018912b45d36a7548",
    "number": 686,
    "body": "Resolves #683 ",
    "head_branch": "backport-637",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Backport #637 - Wait for action server before sending goal (#686)\n\nResolves #638\r\n\r\nCo-authored-by: Shane Loretz <shane.loretz@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792118912b45d36a7549",
    "number": 685,
    "body": "This should address #683 once backported to `crytsal`",
    "head_branch": "jacob/wait_for_server",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792218912b45d36a754a",
    "number": 684,
    "body": "Solves [windows ci warning](https://ci.ros2.org/job/ci_windows/6441/warnings43Result/), as requested [here](https://github.com/ros2/rclcpp/pull/671#issuecomment-480141337).",
    "head_branch": "ivanpauno/fix-windows-build-6441",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replaced strncpy with memcpy (#684)\n\n* Replaced strncpy with memcpy\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792318912b45d36a754b",
    "number": 682,
    "body": "Fix destruction order of static variables which leads to numerous test failures on Windows in Debug.\r\n\r\nCredit for the patch belongs to @wjwwood.\r\n\r\nCI builds only running the `rclcpp` tests:\r\nBefore: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=6421)](https://ci.ros2.org/job/ci_windows/6421/)\r\nAfter: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_windows&build=6422)](https://ci.ros2.org/job/ci_windows/6422/)",
    "head_branch": "signal_handler_logger",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor SignalHandler logger to avoid race during destruction (#682)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792418912b45d36a754c",
    "number": 681,
    "body": "Based on https://answers.ros.org/question/319004/rclcpp-logging-macros-not-a-single-expression/\r\n\r\nSame as in [rcutils](https://github.com/ros2/rcutils/blob/9e1f5593763cfdc64f2e590dbafb0c316926f628/resource/logging_macros.h.em#L66-L75).\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=6584)](http://ci.ros2.org/job/ci_linux/6584/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=2922)](http://ci.ros2.org/job/ci_linux-aarch64/2922/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=5401)](http://ci.ros2.org/job/ci_osx/5401/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=6404)](http://ci.ros2.org/job/ci_windows/6404/)",
    "head_branch": "do_while_logging_macro",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use do { .. } while(0) around content of logging macros (#681)\n\nSigned-off-by: Dirk Thomas <dirk-thomas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621792518912b45d36a754d",
    "number": 680,
    "body": "This change removes the const value from the logger before\r\ncomparing with std::is_same.",
    "head_branch": "logging-const-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "logging, remove_const before comparison (#680)\n\n* logging, remove_const before comparison\r\n\r\nThis change removes the const value from the logger before\r\ncomparing with std::is_same.\r\n\r\nSigned-off-by: V√≠ctor Mayoral Vilches <v.mayoralv@gmail.com>\r\n\r\n* logging template, replace remove_const by remove_cv\r\n\r\nSigned-off-by: V√≠ctor Mayoral Vilches <v.mayoralv@gmail.com>\r\n\r\n* Append typename\r\n\r\nLocated after compiling rclcpp_action from source\r\n\r\nSigned-off-by: V√≠ctor Mayoral Vilches <v.mayoralv@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792618912b45d36a754e",
    "number": 678,
    "body": "The only way I found to send along exceptions was to make the function wrap the generated exception in a pointer. Which means that you'd have to use std::rethrow_exception instead of just a simple throw to use it.\r\n\r\nStill, is this about what you were looking for? And do you have any specific areas that need this functionality?\r\n\r\nConnects to issue #647 \r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n",
    "head_branch": "issue_647",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[WIP] Exception Generator function for implementing \"from_rcl_error\" (#678)\n\n* Created function to generate exception objects\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Created function to generate exception objects\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Fixed typo\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Fixed typo\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Throw exceptions not created by ret\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Throw exceptions not created by ret\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* convert throw_from_rcl_error to use from_rcl_error\r\n\r\nMostly just a convenience function\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Updated .gitignore\r\n\r\nPlease ignore\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Re-ordered functions to allow compilation\r\n\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* Revert \"Updated .gitignore\"\r\n\r\nThis reverts commit bee0ee13ce687bc56bdc7ad1e8382506d9aef428.\r\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\r\n\r\n* restore .gitignore to original state\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* oops, actually restore .gitignore\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792718912b45d36a754f",
    "number": 677,
    "body": "Now using active verbs as described in the design doc:\r\n\r\nhttp://design.ros2.org/articles/actions.html#goal-states\r\n\r\nConnects to ros2/rcl#399.",
    "head_branch": "jacob/rename_action_events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename action state transitions (#677)\n\n* Rename action state transitions\r\n\r\nNow using active verbs as described in the design doc:\r\n\r\nhttp://design.ros2.org/articles/actions.html#goal-states\r\n\r\nConnects to ros2/rcl#399.\r\n\r\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621792818912b45d36a7550",
    "number": 676,
    "body": "Solve https://github.com/ros2/rclcpp/issues/640\r\nSigned-off-by: Pham Van Thong <thongpv87@gmail.com>",
    "head_branch": "crystal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792a18912b45d36a7551",
    "number": 675,
    "body": "Solve https://github.com/ros2/rclcpp/issues/640",
    "head_branch": "crystal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792b18912b45d36a7552",
    "number": 674,
    "body": "Follow up of https://github.com/ros2/rclcpp/pull/664/commits\r\nWhich was unintentionally merged into https://github.com/ros2/rclcpp/pull/667/",
    "head_branch": "ivanpauno/skip-interprocess-publish-when-possible-follow-up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check QoS policy when configuring intraprocess, skip interprocess publish when possible (#674)\n\n* Only setup intraprocess if 'durability' qos policy is 'volatile'.\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Skip interprocess publish when only having intraprocess subscriptions.\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Add intraprocess configuration option at publisher/subscription level\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Use get_actual_qos when setting-up intraprocess. Add test.\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621792c18912b45d36a7553",
    "number": 673,
    "body": "Adds new PublisherOptions and SubscriptionOptions classes, with new Publisher and Subscriber constructors to accept them.\r\n\r\nQoS event callbacks will be put into these Options structs - so this is the only API change needed for QoS event callbacks.\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>",
    "head_branch": "qos-iface-only",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Options-struct interfaces for creating publishers/subscribers (pre-QoS, standalone) (#673)\n\n* Options-based create_publisher and create_subscription interfaces\r\n\r\nIntroduce new Options structs for creating publishers and subscribers. Deprecate existing interfaces for checking in CI how often they are used.\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>\r\n\r\n* Remove default params that resulted in ambiguous declarations.\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>\r\n\r\n* Remove one deprecation to limit upstream impact, add documentation on pub/sub options, slim down test lambdas character count\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>\r\n\r\n* Un-abbreviate Allocator in new interfaces/types, define a common Options specialization that doesn't need empty brackets\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>\r\n\r\n* Suppress cppcheck syntaxError for the one function\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621792d18912b45d36a7554",
    "number": 672,
    "body": "Signed-off-by: Karsten Knese <karsten@openrobotics.org>",
    "head_branch": "fix_linter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix linter errors in rclcpp_lifecycle (#672)\n\nSigned-off-by: Karsten Knese <karsten@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792e18912b45d36a7555",
    "number": 671,
    "body": "Closes #668\r\n\r\n## Changes\r\n\r\nReplaces the `const char *` key in IDTopicMap with a std::array<char, TOPIC_NAME_LENGTH> key. A copy of the string is forced.\r\n\r\n## Problem description\r\n\r\nAfter some debugging, I realized what this random error was.\r\nSometimes, the topic name  wasn't found in the subscription_ids_by_topic_ map here:\r\nhttps://github.com/ros2/rclcpp/blob/cb20529e5e218cde0106c59b12067a9ca9f43022/rclcpp/include/rclcpp/intra_process_manager_impl.hpp#L266-L270\r\nAnd a 0 subscription count was returned.\r\n\r\nThe problem is that a `const char *` was used as a key, an the liveliness of that raw pointer was the liveliness of the subscription:\r\nhttps://github.com/ros2/rclcpp/blob/cb20529e5e218cde0106c59b12067a9ca9f43022/rclcpp/include/rclcpp/intra_process_manager_impl.hpp#L98-L104\r\nWhen another subscription was registered in the same topic, and the first subscription was already out of scope, it sometimes resulted in the correct behavior and sometimes failed silently. The OS usually not raise a segfault when accessing a recently freed block of memory, but data could be already corrupted at that moment.\r\n\r\n## Bug reproduction\r\n\r\nThe error is not easy to reproduce. Here is the script I've used:\r\n```bash\r\n#!/bin/bash\r\n\r\nset -e\r\nmkdir -p logs_test_intra\r\nfor run in {1..50}; do\r\n    echo \"Starting test #\" $run\r\n    out=$(colcon test --packages-select rclcpp --ctest-arg -R test_publisher_subscription_count_api)\r\n    echo \"$out\"\r\n    substring=\"stderr\"\r\n    error_list=()\r\n    if [ \"${out/$substring}\" != \"$out\" ]; then\r\n        error_list+=($run)\r\n    fi\r\n    cp -L log/latest \"logs_test_intra/test_${run}\" -R\r\n    echo\r\n    echo \"Finished test #\" $run\r\n    echo\r\n    echo\r\ndone\r\n\r\necho ${error_list[*]}\r\n```\r\nBefore I found one error per about 20 runs. I haven't found it again in 100 runs after this change.\r\n\r\n## Closes 668\r\n\r\nThis is not syncing intra-process-subscription count and subscription count as requested in #668.\r\nBut it solves the bug, and syncing them is probably not a good idea as has been already discussed in the issue.",
    "head_branch": "ivanpauno/fix_issue_#668",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace const char * with a std::array<char, TOPIC_NAME_LENGTH> as the key of IPM IDTopicMap (#671)\n\nUse std::array<char, TOPIC_NAME_LENGTH> and not const char * as key in IPM IDTopicMap\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621792f18912b45d36a7556",
    "number": 670,
    "body": "Connects to ros2/ros2#677",
    "head_branch": "message_namespace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793018912b45d36a7557",
    "number": 669,
    "body": "Implements functions to add formatted node name and namespace strings. Still needs unit tests. Design tips and suggestions for useful tests is greatly appreciated!\n\nSigned-off-by: Jacob Hassold <jhassold@dcscorp.com>\n\nConnects to ros2/rclcpp#643",
    "head_branch": "issue_643",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793118912b45d36a7558",
    "number": 667,
    "body": "Implements https://github.com/ros2/rmw/pull/169 at rclcpp level.\nRelated rcl implementation: https://github.com/ros2/rcl/pull/406\n\nConnects to ros2/rmw#169",
    "head_branch": "ivanpauno/publisher_get_actual_qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add function to get publisher actual qos settings (#667)\n\n* Added get_actual_qos method to publisher.\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621793218912b45d36a7559",
    "number": 666,
    "body": "Not sure if this is complete, but existing demo nodes work again",
    "head_branch": "qos-min",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793418912b45d36a755a",
    "number": 665,
    "body": "This introduces `rclcpp_components` and drops the composition CMake macros from `rclcpp`.",
    "head_branch": "rclcpp_components",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Introduce rclcpp_components to implement composition (#665)\n\n* Introduce rclcpp_components package\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Keep pointer to NodeWrapper vs NodeInterface.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Remove component registration from rclcpp\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Make topics names private-prefix.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Handle name and namespace with remap rules.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Linting.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Address reviewer feedback.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Change to smart pointers for managing memory.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Update to use rcpputils filesystem/split.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Address reviewer feedback and add docs.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Add tests around ComponentManager.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Lint.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Address reviewer feedback and add overflow check.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Fix CI.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621793518912b45d36a755b",
    "number": 664,
    "body": "This is part of the intraprocess comm improvement (https://github.com/ros2/ros2/issues/649, https://docs.google.com/document/d/1dM8O34GM-SbFps1vd1rocPMAg_7O9_-OG4NF4axOz7E/edit#)\r\n\r\nAs the current and proposed IPM doesn't complain with a non-volatile 'Durability' QoS policy, intraprocess comm shouldn't be configured in those cases. \r\n- Advantage: Solves compliance issues with QoS policies.\r\n  e.g.: If a publisher and subscriber in the same process had been configured with QoS policy  \r\n  'durability=transient_local\" and \"history=keep_last\", a late subscriber would receive the last message \r\n  published, as this was not supported by the intra process manager.\r\n- Disadvantage: Intraprocess comm is not supported in those cases.\r\n\r\nPreviously, interprocess publish was always done. Now, it is skipped when only having intraprocess subscriptions.\r\n- Advantage: Less publish-to-subscribe latency, cpu usage, memory usage when the topic is only used for intraprocess comm.\r\n- Disadvantage: Probably, the time it takes to recognize a interprocess subscription done just before the publishing is longer than before. \r\n   e.g.:    Process B subscribes to topic /topic.\r\n              Process A publishes to topic /topic just after process B subscriber.\r\n              Since maybe the count updating time it's not the same as how the publish method checks its subscribers, a message is not received when before it was.  \r\n           (This hasn't been checked, it's only a possible drawback of this change)",
    "head_branch": "ivanpauno/skip-interprocess-publish-when-possible",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Throw error when setting intraprocess with incompatible qos settings\n\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793618912b45d36a755c",
    "number": 662,
    "body": "This exposes `rcl_node_get_fully_qualified_name` (https://github.com/ros2/rcl/blob/99630cb66dc90644266e34ce6987c2b36b3a7602/rcl/include/rcl/node.h#L302) in the C++ API",
    "head_branch": "add_fq_node_name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Expose get_fully_qualified_name in NodeBase API. (#662)\n\nSigned-off-by: Michael Carroll <michael@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621793718912b45d36a755d",
    "number": 659,
    "body": "Partially targets ros2/ros2#658",
    "head_branch": "ivanpauno/ros2#658",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Using ament_target_dependencies where possible (#659)\n\n* Modified rclcpp CMakeLists.txt to use ament_target_dependencies\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Modified rclcpp_lifecycle CMakeLists.txt to use ament_target_dependencies\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Corrected with PR comment\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793818912b45d36a755e",
    "number": 658,
    "body": "Fixes #642\r\nAdded templates in lifecycle node:\r\n- set_parameter_if_not_set\r\n- set_parameters_if_not_set\r\n- get_parameters\r\n- get_parameters_or\r\n- get_parameters_or_set\r\n\r\nTODO:\r\n- add tests",
    "head_branch": "ivanpauno/fixes_issue_#642",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793918912b45d36a755f",
    "number": 657,
    "body": "when call wait_for_service in a loop, the get graph event will leak memory.\r\nwe fix it by, when service is ok, there's no need to create a new one.",
    "head_branch": "bouncy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793a18912b45d36a7560",
    "number": 656,
    "body": "* when call wait for service in an while loop, the event will be make forever and never release\r\n* fix it by: creating it when we need",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix wait for service memory leak bug (#656)\n\n* when call wait for service in an while loop, the event will be make forever and never release\r\n* fix it by: creating it when we need\r\n\r\nSigned-off-by: reed-lau <geoliuwei@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793b18912b45d36a7561",
    "number": 655,
    "body": "Implementation for Deadline, Liveliness, and Lifespan QoS. The design is at ros2/design#212\r\n\r\nThis change adds ability to register application callbacks for QoS events (interface with the user application) and the ability to wait on QoS events in `rcl_wait_set_t` (interface with `rcl`).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793c18912b45d36a7562",
    "number": 653,
    "body": "Similar to https://github.com/ament/ament_lint/pull/129 and https://github.com/ros2/rcl/pull/394.\n\nI've adapted the text for this repository (and ROS 2).\n\nThis is part of the trial started by the members of the software quality working group trying to get more people involved in maintainership and increase community participation in these processes.\n\nConnects to ros2/rcl#394",
    "head_branch": "add_pr_template_sqwg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621793d18912b45d36a7563",
    "number": 652,
    "body": "There are getters for the other interfaces, but the logging interface appears to have been overlooked.\r\n\r\nFixes #649",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a method to the LifecycleNode class to get the logging interface (#652)\n\nThere are getters for the other interfaces, but the logging interface\r\nappears to have been overlooked.\r\n\r\nSigned-off-by: Michael Jeronimo <michael.jeronimo@intel.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621793e18912b45d36a7564",
    "number": 651,
    "body": "This commit is related to the issue #641.\r\n\r\nIn the pull request #608,  rclcpp::NodeTimeSource is introduced to rclcpp::Node. But, not included in rclcpp::LifeCycleNode. \r\n\r\nSigned-off-by: vinnamkim <vinnam.kim@gmail.com>",
    "head_branch": "time_source",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix use_sim_time issue on LifeCycleNode (#651)\n\nSigned-off-by: vinnamkim <vinnam.kim@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621794018912b45d36a7565",
    "number": 650,
    "body": "",
    "head_branch": "improve_rclcpp_action_docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add documentation to rclcpp_action\n\nSigned-off-by: Jacob Perron <jacob@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621794118912b45d36a7566",
    "number": 648,
    "body": "In LLVM's `libcxx`, `int64_t` doesn't match chrono literals. See example below. To compile, run  `clang++-6.0 -stdlib=libc++ -std=c++14 TEST.cpp`\r\n\r\nTEST.cpp\r\n```\r\nusing namespace std::chrono_literals;\r\n\r\ntemplate<typename RatioT = std::milli>\r\nbool\r\nwait_for_service(\r\n   std::chrono::duration<int64_t, RatioT> timeout\r\n)\r\n{\r\n   return timeout == std::chrono::nanoseconds(0);\r\n}\r\n\r\nint main() {\r\n   wait_for_service(2s);\r\n   return 0;\r\n}\r\n\r\n```\r\n\r\nResult of compilation\r\n```\r\nTEST.cpp:14:4: error: no matching function for call to 'wait_for_service'\r\n   wait_for_service(2s);\r\n   ^~~~~~~~~~~~~~~~\r\nTEST.cpp:6:1: note: candidate template ignored: could not match 'long' against 'long long'\r\nwait_for_service(\r\n^\r\n1 error generated.\r\n```\r\n\r\nRelated to ros2/ros2#664",
    "head_branch": "durationtype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't hardcode int64_t for duration type representations (#648)\n\nIn LLVM's `libcxx`, `int64_t` doesn't match chrono literals. See example below. To compile, run  `clang++-6.0 -stdlib=libc++ -std=c++14 TEST.cpp`\r\n\r\n```\r\nusing namespace std::chrono_literals;\r\n\r\ntemplate<typename RatioT = std::milli>\r\nbool\r\nwait_for_service(\r\n   std::chrono::duration<int64_t, RatioT> timeout\r\n)\r\n{\r\n   return timeout == std::chrono::nanoseconds(0);\r\n}\r\n\r\nint main() {\r\n   wait_for_service(2s);\r\n   return 0;\r\n}\r\n\r\n```\r\n\r\nResult of compilation\r\n```\r\nTEST.cpp:6:1: note: candidate template ignored: could not match 'long' against 'long long'\r\nwait_for_service(\r\n```\r\n\r\nSigned-off-by: Emerson Knapp <eknapp@amazon.com>\r\nSigned-off-by: Steven! Ragnar√∂k <steven@nuclearsandwich.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621794218912b45d36a7567",
    "number": 646,
    "body": "\r\nconnects to ros2/rmw_connext#348\r\n\r\nros2/build_cop#172",
    "head_branch": "cppcheck_fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Attempt to fix cppcheck (#646)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794318912b45d36a7568",
    "number": 645,
    "body": "This commit is related to issue #642\r\n\r\nSigned-off-by: vinnamkim <vinnam.kim@gmail.com>",
    "head_branch": "parameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add parameter-related templates to LifecycleNode (#645)\n\n* Add parameter-related templates to LifecycleNode\r\n\r\nSigned-off-by: vinnamkim <vinnam.kim@gmail.com>\r\n\r\n* Update rclcpp_lifecycle/include/rclcpp_lifecycle/lifecycle_node.hpp\r\n\r\nCo-Authored-By: vinnamkim <vinnam.kim@gmail.com>\r\n\r\n* Update rclcpp_lifecycle/include/rclcpp_lifecycle/lifecycle_node.hpp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621794418912b45d36a7569",
    "number": 639,
    "body": "We had a lot of trouble with this test recently.  The way to repro the issue was to do something like:\r\n\r\n```\r\nterminal 1>colcon build --packages-up-to rclcpp\r\nterminal 1>while ./build/rclcpp/test_time_source ; do :; done\r\n```\r\nIf you let it run long enough, eventually you'd see it fail.  To make it fail faster, do\r\n```\r\nterminal 2> stress -c 12  # Where 12 is the number of cores on my computer\r\nterminal 3> stress -m 12\r\n```\r\nThere were a few different failures that would sometimes happen:\r\nFailure 1 (more common):\r\n```\r\n27: rclcpp/rclcpp/test/test_time_source.cpp:334: Failure   \r\n27: Value of: ros_clock->ros_time_is_active()                                                                         \r\n27:   Actual: false                                                                                                   \r\n27: Expected: true      \r\n```\r\n\r\nFailure 2 (less common):\r\n```\r\n27: [ RUN      ] TestTimeSource.callbacks                                                                             \r\n27: rclcpp/rclcpp/test/test_time_source.cpp:249: Failure   \r\n27: Value of: ros_clock->ros_time_is_active()                                                                         \r\n27:   Actual: false                                                                                                   \r\n27: Expected: true                                                                                                    \r\n27: rclcpp/rclcpp/test/test_time_source.cpp:255: Failure   \r\n27: Expected: (0L) != (t_out.nanoseconds()), actual: 0 vs 0                                                           \r\n27: rclcpp/rclcpp/test/test_time_source.cpp:256: Failure   \r\n27: Expected: (t_low.nanoseconds()) < (t_out.nanoseconds()), actual: 1000000000 vs 0                                  \r\n```\r\n\r\n## Cause of problem(s)\r\n\r\nThe call to spin_once [here](https://github.com/ros2/rclcpp/blob/master/rclcpp/test/test_time_source.cpp#L76) is meant to run the subscriber callbacks of the ros_clock's subscription to the \"clock\" topic, but that's far from guaranteed.  If you printed out the simulated time at the end of the test, you'd expect it to be 4s + 1000ns, but the majority of the time it was 1s + 1000ns.  Sometimes it was 0s + 1000ns, and sometimes it was 0s + 0ns.\r\n\r\nAlso, the call to spin_some [here](https://github.com/ros2/rclcpp/blob/master/rclcpp/test/test_time_source.cpp#L96) is largely ineffectual.  Using GDB, I was able to tell that almost 100% of the time, this spin_some returned without processing any executable actions from the node's queue.\r\n\r\n## Fixes\r\n@wjwwood has some ideas about infrastructure changes to make this test easier to write.  Short term, I'm working around the issue by having the test spin until it sees the action it's waiting for instead of spinning once and hoping the action it's waiting for is first in the queue of things to be processed",
    "head_branch": "fix_time_source_test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix test_time_source test (#639)\n\n* Fix flakey test\r\n\r\nSigned-off-by: Pete Baughman <pete.baughman@apex.ai>\r\n\r\n* Fix lint and uncrustify issues\r\n\r\nSigned-off-by: Pete Baughman <pete.baughman@apex.ai>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794518912b45d36a756a",
    "number": 638,
    "body": "Enabling symbol visibility feature in gcc and clang compilers.\r\nThis will hep find symbol export related issues in linux and\r\npotentially reduce compile times.\r\n\r\nDiscourse topic link:\r\nhttps://discourse.ros.org/t/set-symbol-visibility-to-hidden-for-rmw-and-rcl-packages/7981\r\n\r\nSigned-off-by: Sachin Suresh Bhat <bhatsach@amazon.com>\r\n\r\nConnects to ros2/rcl#391",
    "head_branch": "hide-visibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794618912b45d36a756b",
    "number": 637,
    "body": "Wait for discovery before trying to send goal. This is one of the failing tests in ros2/build_cop#166\r\n\r\nSee https://github.com/ros2/build_cop/issues/166#issuecomment-466365666\r\n\r\nCI (testing only rclcpp)\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=6262)](http://ci.ros2.org/job/ci_linux/6262/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=2688)](http://ci.ros2.org/job/ci_linux-aarch64/2688/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=5146)](http://ci.ros2.org/job/ci_osx/5146/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=6100)](http://ci.ros2.org/job/ci_windows/6100/)\r\n\r\n~~In progress while CI runs~~ Ready for review",
    "head_branch": "wait_for_action_server",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Wait for action server before sending goal (#637)\n\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794718912b45d36a756c",
    "number": 636,
    "body": "This targets the first task of https://github.com/ros2/rclcpp/issues/634\r\n\r\nThis package adds three executables:\r\n1. Script for running some predefined tests, and then do the post-processing and plotting of all of them.\r\n   Example usage: ros2 run  rclcpp_performance performance_test -d output_dir [--skip]\r\n   - output_dir: Directory where the logging files will be created.\r\n   - -s|--skip: Don't run the tests again, only post-process and plot results.\r\n\r\n2. communication_performance: Which logs the timestamps.\r\n   Example usage: ros2 run communication_performance [-d output_dir] [-p publish_period_ms] [-m M][-n N][-unique] [-intra]\r\n   - output_dir: directory where the log files will be created (it should be created before running). Default: ./logs\r\n   - -p publish_period_ms: Publish period in ms. Default: 100ms\r\n   - -m M: Number of messages that will be published by each publisher before exiting. Default: 1000\r\n   - -n N: Number of publisher/subscriber pairs created. Defualt: 100.\r\n   - -unique: If option exists, the publish method taking an unique_ptr reference is used. If not, shared_ptr publish method is used.\r\n   - -intra: Set intra process comm.\r\n\r\n3. posprocess_logging: Plot results.\r\nExample usage: ros2 run posprocess_logging -d output_dir\r\nWhere output_dir contains the logged file.\r\nIt plots three things:\r\n   - The measured average publish period of each publisher.\r\n   - The measured average publish period of each subscriber.\r\n   - The measured latencys of each publish-subscriber pair.\r\nIn all the cases, y axes is in ms and x axes is the result of one of the parts (one publisher, one subscriber, or one publisher-subscriber pair).\r\n\r\nMy results:\r\nhttps://docs.google.com/document/d/1YRpWajYvXF_RA7nIH3Qe8RFUyVJwJoxVTSpQFJKN18U/edit?usp=sharing\r\nOld results (https://github.com/ros2/rclcpp/pull/636/commits/841e206942eed33d7396eeacdf042ecd53d3143e):\r\nhttps://docs.google.com/document/d/11RBqAjcjQ4FBYkwfVtudOaHJSP_wz_TW9AGneo1_ePE/edit?usp=sharing\r\n\r\nTODO:\r\n- It needs a general cleaning, and add some error handling.",
    "head_branch": "ivanpauno/rclcpp-performance",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794818912b45d36a756d",
    "number": 630,
    "body": "I found some call by value in the for loop codes but they are preferred to replace to call by reference.\r\nThis PR simply solves it.\r\n\r\nSigned-off-by: Yutaka Kondo <yutaka.kondo@youtalk.jp>",
    "head_branch": "zero-copy-foreach",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "replace 'auto' to 'const auto &' (#630)\n\nSigned-off-by: Yutaka Kondo <yutaka.kondo@youtalk.jp>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794918912b45d36a756e",
    "number": 629,
    "body": "I found some call by value in the for loop codes but they are preferred to replace to call by reference.\r\nThis PR simply solves it.",
    "head_branch": "zero-copy-foreach",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794a18912b45d36a756f",
    "number": 628,
    "body": "Related with the second task of https://github.com/ros2/ros2/issues/649\r\n\r\nI have added:\r\n- Public api in publishers to get the subscriber count\r\n- Internal method in publishers, to get intra-process subscriber count.\r\n- Added method in the intra-process manager, related with the previous point.\r\n- Modified setup intrapocess method in publishers.\r\n- Added public api for publisher count in subscribers.\r\n- Tests checking all the counts\r\n- Added code to remove subscribers and publisher from the intraprocess manager",
    "head_branch": "ivanpauno/match-count-api-and-intraprocess-subscribers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Added count matching api and intra-process subscriber count (#628)\n\n* Added count matching api to publishers. Also, internal method to count intra-process subscriptions\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Addressed PR comments\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Corrected error checking in publisher interprocess subscription count api. Minimal modifications in test\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Moved intraprocess subscription count api to public. Started removing publishers and subscribers from ipm.\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Added publisher count api in subscription class\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Addressed PR comments\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Addressed PR comments\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>\r\n\r\n* Solved Wreorder\r\n\r\nSigned-off-by: ivanpauno <ivanpauno@ekumenlabs.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621794c18912b45d36a7570",
    "number": 626,
    "body": "Not sure why it was there in the first place...\r\n\r\nIt has been there since the original commit adding lifecycle stuff.",
    "head_branch": "wjwwood-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove dependency on rclpy (#626)\n\nNot sure why it was there in the first place...\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794d18912b45d36a7571",
    "number": 622,
    "body": "Creates a NodeOptions object to pass all of the necessary options to the node constructor.\r\n\r\nConnects to #492 ",
    "head_branch": "node_arguments_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace node constructor arguments with NodeOptions (#622)\n\n* Start work on creaating NodeOptions structure.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Continue work on NodeOptions.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Update tests for NodeOptions impl.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Update documentation and copy/assignment.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Update rclcpp_lifecycle to conform to new API.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Use builder pattern with NodeOptions.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Documentation updates.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* Update rclcpp_lifecycle to use NodeOptions.\r\n\r\nSigned-off-by: Michael Carroll <michael@openrobotics.org>\r\n\r\n* change to parameter idiom only, from builder pattern\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Update rclcpp/include/rclcpp/node_options.hpp\r\n\r\nCo-Authored-By: wjwwood <william+github@osrfoundation.org>\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* follow up with more resets of the rcl_node_options_t\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* todo about get env\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621794e18912b45d36a7572",
    "number": 621,
    "body": "We are experiencing sporadic failures of `TestMultiThreadedExecutor.timer_over_take` in our CI, where the measured time difference between two timer executions is close to zero.\r\n\r\nLooking at the code there is a subtle opportunity for a race condition in `rclcpp/src/rclcpp/executors/multi_threaded_executor.cpp`:\r\n```c\r\n      ...\r\n      if (!get_next_executable(any_exec)) {                                                                                                                                                    \r\n        continue;                                                                                                                                                                              \r\n      }  \r\n                                                                                                                                                                                      \r\n      /* \r\n        IMAGINE OR INSERT A SHORT FEW MILLISECOND SLEEP HERE \r\n      */\r\n\r\n      if (any_exec.timer) {                                                                                                                                                                    \r\n        // Guard against multiple threads getting the same timer.                                                                                                                              \r\n        std::lock_guard<std::mutex> lock(scheduled_timers_mutex_);                                                                                                                             \r\n        if (scheduled_timers_.count(any_exec.timer) != 0) {                                                                                                                                    \r\n          continue;                                                                                                                                                                            \r\n        }                                                                                                                                                                                      \r\n        scheduled_timers_.insert(any_exec.timer);                                                                                                                                              \r\n      }\r\n      ...                                                                                                                                                                                      \r\n```\r\n\r\nThe race condition is triggered if:\r\n- a thread gets an already scheduled timer\r\n- acquiring the second lock_guard is slightly delayed\r\n\r\nIn this case a previously fetched and scheduled timer handle could be removed from the list of scheduled timers by the thread that first got the timer before the delayed check. This results in a second execution of the timer callback.\r\n\r\nFor me replacing the above comment with \r\n```\r\nstd::this_thread::sleep_for(std::chrono::milliseconds(5));\r\n```\r\ncauses the test to always fail.\r\n\r\nTo mitigate, `get_next_executable` and `if (scheduled_timers_.count ... )` have to be protected by one `lock_guard`. This pull request takes this requirement into account and removes the now redundant second `lock_guard`.",
    "head_branch": "fix_multi_thread_timer_race",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid race that triggers timer too often (#621)\n\nThe two distinct operations of acquiring and subsequent checking of a\r\ntimer have to be protected by one lock_guard against races with other\r\nthreads. The releasing of a timer has to be protected by the same lock.\r\n\r\nGiven this requirement there is no use for a second mutex.\r\n\r\nSigned-off-by: Marko Durkovic <marko@ternaris.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621794f18912b45d36a7573",
    "number": 619,
    "body": "This is the backport of 99dd0313ab0f0396dd01a37b827ab6963075ee41 onto the crystal branch, since I'd like to get it into the 2nd crystal sync https://github.com/ros2/ros2/issues/647 .  There are no differences between this change and the one that was merged onto master, and this change only adds an API, so there is no API break.\r\n\r\n\r\n\r\n* Add in the ability to get parameters in a map.\r\n\r\nAny parameters that have a \".\" in them will be considered to\r\nbe part of a \"map\" (though they can also be get and set\r\nindividually).  This PR adds two new template specializations\r\nto the public node API so that it can take a map, and store\r\nthe list of values (so setting the parameter with a name of\r\n\"foo\" and a key of \"x\" will end up with a parameter of \"foo.x\").\r\nIt also adds an API to get all of the keys corresponding to\r\na prefix, and returing that as a map (so a get of \"foo\" will\r\nget all parameters that begin with \"foo.\").  Note that all\r\nparameters within the map must have the same type, otherwise\r\nan rclcpp::ParameterTypeException will be thrown.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Fix style problems pointed out by uncrustify/cpplint.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Move tests for set_parameter_if_not_set/get_parameter map to rclcpp.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Rename get_parameter -> get_parameters.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Add in documentation from review.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>",
    "head_branch": "crystal-backport-575",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Get parameter map (#575) (crystal-backport) (#619)\n\n* Get parameter map (#575)\r\n\r\n* Add in the ability to get parameters in a map.\r\n\r\nAny parameters that have a \".\" in them will be considered to\r\nbe part of a \"map\" (though they can also be get and set\r\nindividually).  This PR adds two new template specializations\r\nto the public node API so that it can take a map, and store\r\nthe list of values (so setting the parameter with a name of\r\n\"foo\" and a key of \"x\" will end up with a parameter of \"foo.x\").\r\nIt also adds an API to get all of the keys corresponding to\r\na prefix, and returing that as a map (so a get of \"foo\" will\r\nget all parameters that begin with \"foo.\").  Note that all\r\nparameters within the map must have the same type, otherwise\r\nan rclcpp::ParameterTypeException will be thrown.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Fix style problems pointed out by uncrustify/cpplint.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Move tests for set_parameter_if_not_set/get_parameter map to rclcpp.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Rename get_parameter -> get_parameters.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Add in documentation from review.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Use list_parameters instead of get_parameters_by_prefix.\r\n\r\nThis way, we don't break ABI in crystal.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Fix style problems.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621795018912b45d36a7574",
    "number": 618,
    "body": "The namespace of the __bind function in llvm is now in std and not std::__1",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Bind is no longer in std::__1 (#618)\n\nSigned-off-by: kuzai <kuzai@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621795118912b45d36a7575",
    "number": 617,
    "body": "Connects to ros2/rmw#163",
    "head_branch": "context_followup_2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "pass context to wait set (#617)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621795218912b45d36a7576",
    "number": 616,
    "body": "Since #612 breaks ABI and won't be released in Crystal #613 needs to be cherry-picked.",
    "head_branch": "crystal-backport-613",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #616 from ros2/crystal-backport-613\n\nBackport #613 to crystal branch."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621795418912b45d36a7577",
    "number": 615,
    "body": "This fixes ros2/rcl#255",
    "head_branch": "fq_node_name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621795518912b45d36a7578",
    "number": 614,
    "body": "This PR adds the ability to disable Parameter Event Publisher and to set its QoS mentioned in #591 ",
    "head_branch": "config_parameter_events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Set Parameter Event Publisher settings #591 (#614)\n\n* Add ability to disable Parameter Event Publisher and change its QoS settings\r\n\r\nSigned-off-by: RARvolt <rarvolt@gmail.com>\r\n\r\n* address review comments\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use NodeOptions struct\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove vestigial doc strings and improve docs\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix lifecycle node constructor\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621795618912b45d36a7579",
    "number": 613,
    "body": "Connects to ros2/rosidl#340\r\nConnects to ament/uncrustify_vendor#3",
    "head_branch": "uncrustify_v68",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix errors from uncrustify v0.68 (#613)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621795718912b45d36a757a",
    "number": 612,
    "body": "\r\nFollowing issue https://github.com/ros2/rclcpp/issues/599\r\n\r\nAllows to create SyncParameterClient in a class which inherits from rclcpp::Node",
    "head_branch": "sync_client_base_node_constructor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added new constructors for SyncParameterClient (#612)\n\n* added new constructors for sync parameter client\r\n\r\n* sync param client now has raw ptr member instead of shared ptr\r\n\r\n* fixed pointer style\r\n\r\n* allow objects which do not inherit from node to create a sync parameters client"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621795818912b45d36a757b",
    "number": 611,
    "body": "Linux CI: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=5886)](https://ci.ros2.org/job/ci_linux/5886/)",
    "head_branch": "wjwwood/separate_time_source",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "move destructors to top of class (#611)\n\n* move destructors to top of class"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621795918912b45d36a757c",
    "number": 608,
    "body": "Fixes #595 \r\n\r\nA race condition at startup was identified in #595 where the clock and parameter interfaces needed each other to initialize and since they could not rely on both being initialized the loop was closed through sending and receiving ROS messages. This however meant that initialization was dependent on messages being passed through ROS topics before time would be initialized correctly. The solution to this is to break apart the clock dependency into the time source and clock separately, like we already do for the underlying data and this breaks the cycle.\r\n\r\nWhen reviewing this there's an extension which would be a good improvement to not rely on parameter events being published but use the internal node interface API to get the events in a callback. However as we're late in the release cycle I'm going to hold off on fixing that is this is functional just not optimal and would require a noteably large API change. Along with that change if there was a more fully featured API for registering callbacks for parameter changes locally, the parameter event publishing could also be split out into a separate component that could obviate the need for a parameter to turn that functionality on and off in the constructor of the parameter, and avoid the dependencies on the clock and topics interface for the core parameter API.",
    "head_branch": "separate_time_source",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Resolve startup race condition for sim time (#608)\n\nResolves #595 \r\n\r\n* Separate the Node Time Source from the Node Clock\r\n* Implement initial value checking of use_sim_time parameter parameter\r\n* Be sure to update all newly attached clocks\r\n* Homogenizing the behavior to use the last received value otherwise zero time when enabling sim time.\r\n* Add virtual destructors to interface classes"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621795a18912b45d36a757d",
    "number": 607,
    "body": "This is a follow up of this comment: https://github.com/ros2/rclcpp/pull/605#discussion_r240439968\r\n\r\nThis is API and ABI neutral so we can merge it at anytime, but my preference would be after https://github.com/ros2/rclcpp/pull/605 but in for Crystal.",
    "head_branch": "wjwwood/signal_safe_notify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use signal safe synchronization with platform specific semaphores (#607)\n\n* use signal safe synchronization with platform specific semaphores\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* addressed feedback and refactored into separate files\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-Authored-By: wjwwood <william+github@osrfoundation.org>\r\n\r\n* include what you use (cpplint)\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid redundant use of SignalHandler::\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Update rclcpp/src/rclcpp/signal_handler.hpp\r\n\r\nCo-Authored-By: wjwwood <william+github@osrfoundation.org>\r\n\r\n* fix Windows build\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* actually fix Windows\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621795b18912b45d36a757e",
    "number": 605,
    "body": "Fixes #604",
    "head_branch": "hidmic/defer-signal-handling",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "defer signal handling to a singleton thread (#605)\n\n* [WIP] Refactor signal handling.\r\n\r\n* fix deadlock\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* finished fixing signal handling and removing more global state\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add missing include of <condition_variable>\r\n\r\n* use unordered map in signal handling class\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use consistent terminology\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use emplace in map\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid throwing in destructor\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* words\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid throwing from destructors in a few places\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* make install/uninstall thread-safe\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621795c18912b45d36a757f",
    "number": 603,
    "body": "Makes use of rcl_action_goal_handle_is_cancelable() for one less rcl_action call.\r\n\r\nFollow up from #593.\r\nThis PR does not require immediate attention.",
    "head_branch": "refactor_server_goal_handle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor server goal handle's try_canceling() function (#603)\n\nMakes use of rcl_action_goal_handle_is_cancelable() for one less rcl_action call."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621795d18912b45d36a7580",
    "number": 602,
    "body": "Connects to ros2/rcl_interfaces#49\r\n\r\nChanges are from ros2/rosidl#332",
    "head_branch": "change_uuid_type_in_action_msgs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "adapt to action implicit changes (#602)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621795f18912b45d36a7581",
    "number": 601,
    "body": "Connected to ros2/rosidl#334.",
    "head_branch": "idl-stage-7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update to use separated action types (#601)\n\n* match renamed action types\r\n\r\n* fix action type casting\r\n\r\n* rename type/field to use correct term\r\n\r\n* rename custom GoalID type to avoid naming collision, update types using unique_identifier_msgs\r\n\r\n* remove obsolete comments\r\n\r\n* change signature of set_succeeded / set_canceled\r\n\r\n* change signature of     on_terminal_state_(uuid_, result_msg);set_succeeded / set_canceled\r\n\r\n* change signature of set_aborted\r\n\r\n* change signature of publish_feedback\r\n\r\n* update another test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796018912b45d36a7582",
    "number": 598,
    "body": "This is based on a glob of changes needed for me to write the action tests in `test_communication`. It will have to be rebased when https://github.com/ros2/rclcpp/pull/594 and https://github.com/ros2/rclcpp/pull/593 are merged.\r\n\r\nc7c1738 is the only commit that is \"new\" to this pr.\r\n\r\nConnects to ros2/system_tests#316",
    "head_branch": "wjwwood/actions_test_communication",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add wait_for_action_server() for action clients (#598)\n\n* add wait_for_action_server() for action clients\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Handle negative timeouts in wait_for_service() and wait_for_action_server() methods.\r\n\r\n* Fix uncrustify errors.\r\n\r\n* Ignore take failure on services for connext"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796118912b45d36a7583",
    "number": 597,
    "body": "Adds API to `CallbackGroup` and `NodeWaitablesInterface` to remove a waitable from a node. This will be used by an  action server and action client to remove themselves when they're destroyed.",
    "head_branch": "remove_waitable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow removing a waitable (#597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796218912b45d36a7584",
    "number": 596,
    "body": "**First commit:** passing `rclcpp::ParameterType::PARAMETER_NOT_SET` to the `rclcpp::ParameterValue` constructor is wrong since it interprets the parameter as an integer value. This currently results in the test to print the following error message:\r\n\r\n```\r\n[ERROR] []: use_sim_time parameter set to something besides a bool\r\n```\r\n\r\nThis happened in the Windows builds for an OpenSplice contribution: https://ci.ros2.org/job/ci_windows/5590/\r\n\r\nBeside that error message the test still timed out.\r\n\r\n**Second commit:** adds a call to `rclcpp::shutdown()` in the tests tear down function.\r\n\r\nWith these changes doesn't time out anymore and doesn't print any error message for invalid parameters anymore: https://ci.ros2.org/job/ci_windows/5596/",
    "head_branch": "fix_wrong_use_of_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #596 from ros2/fix_wrong_use_of_constructor\n\nfix wrong use of constructor and hanging test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621796318912b45d36a7585",
    "number": 594,
    "body": "This pull requests adds the first `rclcpp` implementation of an action client.",
    "head_branch": "sservulo_hidmic/rclcpp_action_client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp_action] Action client implementation (#594)\n\n* WIP\r\n\r\n* Removed async_cancel from action ClintGoalHandle API\r\n\r\n* Added status handler to action client goal handler\r\n\r\n* Added result handler to action client goal handler\r\n\r\n* Identation fix\r\n\r\n* Added get/set for action client goal handler\r\n\r\n* Changed action client goal handler attrs from rcl to cpp versions\r\n\r\n* Added check methods to action client goal handler\r\n\r\n* Removed rcl_client pointer from action client goal handler\r\n\r\n* Added basic waitable interface to action client\r\n\r\n* Updated waitable execute from action client\r\n\r\n* Added throw for rcl calls in action client\r\n\r\n* Removed duplicated ready flags from action client\r\n\r\n* Minor fix\r\n\r\n* Added header to action ClientBaseImpl execute\r\n\r\n* Mich's update to action client interface\r\n\r\n* Added trailing suffix to client pimpl attrs\r\n\r\n* Towards a consistent action client\r\n\r\n* Misc fixes for the action client\r\n\r\n* Yet more misc fixes for the action client\r\n\r\n* Few more fixes and shortcuts to deal with missing type support.\r\n\r\n* Fixed lint errors in action headers and client\r\n\r\n* Fixes to action client internal workflow.\r\n\r\n* Misc fixes to get client example to build\r\n\r\n* More misck client fixes\r\n\r\n* Remove debug print\r\n\r\n* replace logging with throw_from_rcl_error\r\n\r\n* Wrap result object given by client to user\r\n\r\n* Fix a couple bugs trying to cancel goals\r\n\r\n* Use unique_indentifier_msgs\r\n\r\n* create_client accepts group and removes waitable\r\n\r\n* Uncrustify fixes\r\n\r\n* [rclcpp_action] Adds tests for action client.\r\n\r\n* [WIP] Failing action client tests.\r\n\r\n* [rclcpp_action] Action client tests passing.\r\n\r\n* Spin both executors to make tests pass on my machine\r\n\r\n* Feedback callback uses shared pointer\r\n\r\n* comment about why make_result_aware is called\r\n\r\n* Client documentation\r\n\r\n* Execute one thing at a time\r\n\r\n* Return nullptr instead of throwing RejectedGoalError\r\n\r\n* ClientGoalHandle worries about feedback awareness\r\n\r\n* cpplint + uncrustify\r\n\r\n* Use node logging interface\r\n\r\n* ACTION -> ActionT\r\n\r\n* Make ClientBase constructor protected\r\n\r\n* Return types on different line\r\n\r\n* Avoid passing const reference to temporary\r\n\r\n* Child logger rclcpp_action\r\n\r\n* Child logger rclcpp_action\r\n\r\n* possible windows fixes\r\n\r\n* remove excess space\r\n\r\n* swap argument order\r\n\r\n* Misc test additions\r\n\r\n* Windows independent_bits_engine can't do uint8_t\r\n\r\n* Windows link issues"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796418912b45d36a7586",
    "number": 593,
    "body": "The example server in PR ros2/examples#216 has been updated to work with this PR https://github.com/ros2/examples/blob/75e3f7d4c1d4f26853fe5c894d3940e7cd7af1b1/rclcpp/minimal_action_server/not_composable.cpp\r\n\r\nThis PR requires ros2/rclcpp#594 in a convoluted way: checkout that branch and merge this one into it.\r\n\r\nrequires ros2/rcl#343",
    "head_branch": "rclcpp_action_server",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rclcpp_action Server implementation (#593)\n\n* Commiting to back up work, does not function\r\n\r\n* Can call user callback when goal request received\r\n\r\n* fini action server in destructor\r\n\r\n* rename user callback virtual functions\r\n\r\n* handle_execute test passes\r\n\r\n* Remove out of date comment\r\n\r\n* Refactor execute into three functions\r\n\r\n* Remove unused file\r\n\r\n* Add failing cancel test\r\n\r\n* Cancel test passes\r\n\r\n* Remove out of date comments\r\n\r\n* Make sure server publishes status when accepting a goal\r\n\r\n* Send status when goals transition to cancelling\r\n\r\n* Refactored sending goal request to its own function\r\n\r\n* Refactor cancel request into it's own function\r\n\r\n* Comment with remaining tests\r\n\r\n* Executing and terminal state statuses\r\n\r\n* publish feedback works\r\n\r\n* server sends result to clients that request it\r\n\r\n* Remove out of date comment\r\n\r\n* Add ServerGoalHandle::is_active()\r\n\r\n* Cleanup when goals expire\r\n\r\n* Can pass in action server options\r\n\r\n* cpplint and uncrustify fixes\r\n\r\n* Fix clang warnings\r\n\r\n* Copy rcl goal handle\r\n\r\n* Fix clang warning\r\n\r\n* Use intermediate value to avoid left shift on 32bit integer\r\n\r\n* RCLCPP_ACTION_PUBLIC everwhere\r\n\r\n* Change callback parameter from C type to C++\r\n\r\n* Add accessors for request and uuid\r\n\r\n* Feedback must include goal id\r\n\r\n* Document Server<> and ServerBase<>\r\n\r\n* handle_execute -> handle_accepted\r\n\r\n* Test deferred execution\r\n\r\n* only publish feedback if goal is executing\r\n\r\n* Documentation for ServerGoalHandle\r\n\r\n* document msg parameters\r\n\r\n* remove unnecessary fini\r\n\r\n* notify_goal_done only takes server\r\n\r\n* Use unique_indentifier_msgs\r\n\r\n* create_server accepts group and removes waitable\r\n\r\n* uncrustify\r\n\r\n* Use weak ptr to avoid crash if goal handle lives longer than server\r\n\r\n* Handle goal callback const message\r\n\r\n* Goal handle doesn't have server pointer anymore\r\n\r\n* Lock goal_handles_ on Server<>\r\n\r\n* rcl_action_server_t protected with mutex\r\n\r\n* ServerBase results protected with mutex\r\n\r\n* protect rcl goal handle with mutex\r\n\r\n* is_cancel_request -> is_canceling\r\n\r\n* Add missing include\r\n\r\n* use GoalID and change uuid -> goal_id\r\n\r\n* Keep rcl goal handle alive until it expires on server\r\n\r\n* uncrustify\r\n\r\n* Move UUID hash\r\n\r\n* Log messages in server\r\n\r\n* ACTION -> ActionT\r\n\r\n* Cancel abandoned goal handles\r\n\r\n* Add convert() for C and C++ goal id\r\n\r\n* Remove unused variable\r\n\r\n* Constant reference\r\n\r\n* Move variable declaration down\r\n\r\n* is_ready if goal expired\r\n\r\n* map[] default constructs if it doesn't exist\r\n\r\n* Use rcl_action_get_goal_status_array()\r\n\r\n* Array -> GoalID\r\n\r\n* Use reentrant mutex for everything\r\n\r\n* comment\r\n\r\n* scope exit to fini cancel response\r\n\r\n* using GoalID"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796518912b45d36a7587",
    "number": 589,
    "body": "Provides a virtual API for interacting with wait sets.\r\n\r\nCloses #588 ",
    "head_branch": "jacob/waitable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "[rclcpp] Add class Waitable (#589)\n\n* [rclcpp] Add class Waitable\r\n\r\nProvides a virtual API for interacting with wait sets.\r\n\r\n* [rclcpp] Add node interface for Waitables\r\n\r\n* [rclcpp] Implement node interface for Waitables\r\n\r\n* [rclcpp] Integrate Waitable entities with executor\r\n\r\n* Implement remaining logic for integrating Waitables\r\n\r\n* Add visibility macros and other refactoring to Waitable class\r\n\r\n* Return zero size for entities in a Waitable by default\r\n\r\n* Bugfix: Clear list of waitable handles\r\n\r\n* Bugfix: update Waitable handle list based on readiness\r\n\r\n* Bugfix: update for loop condition\r\n\r\n* Give node a node_waitables_\r\n\r\n* Give lifecycle node a node_waitables"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796618912b45d36a7588",
    "number": 587,
    "body": "Connects to ros2/rmw#154",
    "head_branch": "refactor_init",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor init to allow for non-global init (#587)\n\n* refactor init to allow for non-global init\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Update rclcpp/include/rclcpp/utilities.hpp\r\n\r\nCo-Authored-By: wjwwood <william+github@osrfoundation.org>\r\n\r\n* Update rclcpp/include/rclcpp/utilities.hpp\r\n\r\nCo-Authored-By: wjwwood <william+github@osrfoundation.org>\r\n\r\n* Update rclcpp/include/rclcpp/utilities.hpp\r\n\r\nCo-Authored-By: wjwwood <william+github@osrfoundation.org>\r\n\r\n* Update rclcpp/src/rclcpp/utilities.cpp\r\n\r\nCo-Authored-By: wjwwood <william+github@osrfoundation.org>\r\n\r\n* refactor state into context objects and fix signal handling\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid nullptr access in error messages\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid exception in publish after shutdown was called\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix missing and unused headers\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* cpplint\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixes found during testing\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* address bug found in review comment\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixes and warnings fixed during testing\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* addressing review comments\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* ensure new ExecutorArgs are used everywhere"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796718912b45d36a7589",
    "number": 586,
    "body": "Connects to ros2/rcl#335\r\n\r\nNow the functions take an optional output index argument.\r\nRefactored the graph listener usage of rcl_wait_set_add_guard_condition() to take advantage of the new API.",
    "head_branch": "jacob/wait_set_index",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update rcl_wait_set_add_* calls (#586)\n\nNow the functions take an optional output index argument.\r\nRefactored the graph listener usage of rcl_wait_set_add_guard_condition() to take advantage of the new API."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621796818912b45d36a758a",
    "number": 585,
    "body": "Towards getting the examples defined in ros2/examples#216 to compile and run.",
    "head_branch": "jacob/rclcpp_action",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Export rcl_action dependency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621796a18912b45d36a758b",
    "number": 584,
    "body": "Connects to ros2/rcl_interfaces#51\r\n\r\nThis PR follows my pull request in rcl_interfaces:  https://github.com/ros2/rcl_interfaces/pull/51 which adds a node name field and timestamp field to the ParameterEvents.msg. This pull request fills those fields.",
    "head_branch": "add_node_info_events",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "adding node path and time stamp to parameter event message (#584)\n\nmodify adding clock for rclcpp_lifestyle"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621796b18912b45d36a758c",
    "number": 582,
    "body": "Connects to ros2/rcl#327\r\n\r\n## Summary\r\nThis change is part of a set of changes for new logging features. These changes include the following features:\r\n\r\n### rcutils\r\n- Slight refactor to the buffer used in logging to make it more generic and reusable\r\n- A new output handler that allows multiple output handlers to be set (default is still only the console output function). This includes the following three output handlers: 1) The console output handler 2) The external logging lib output handler 3) The rosout output handler\r\n- Change to the output format to accept only the log string instead of the format and vargs. The log will be formatted before being sent to the output so that there will be a consistent format across all the outputs\r\n- Added an interface for an external logging library, an output handler function for sending logs to this library, and cmake changes so that the external logging lib can be specified (default is rc_logging_log4cxx)\r\n\r\n### rcl\r\n- Added new command line parameters for disabling various logging output handlers\r\n- Added new command line parameter for passing in a config file to the external logging library\r\n- Called the new configuration function in the rcutils logging to configure the logging during the ROS init process\r\n\r\n### rclcpp\r\n- Fixing a broken unit test\r\n\r\n### rc_logging_log4cxx\r\n- An external logging implementation that uses log4cxx under the hood\r\n- Sets up a default FileAppender  logger to forward logs to files\r\n- Uses the process Id as the filename by default\r\n\r\n## Remaining Feature Work\r\n- The rosout handlers is stubbed out in rcutils right now, but more work will need to be done to actually support sending logs to a rosout topic on a node. This will likely include moving the rosout handler up to rcl so that it can use the node interfaces to publish. \r\n\r\n## Links\r\nhttps://discourse.ros.org/t/ros2-logging/6469\r\nhttps://github.com/nburek/rc_logging_log4cxx\r\n\r\n### Pull requests for change\r\nrclcpp: https://github.com/ros2/rclcpp/pull/582\r\nrcl: https://github.com/ros2/rcl/pull/327\r\nrcutils: https://github.com/ros2/rcutils/pull/127\r\n\r\n",
    "head_branch": "logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621796c18912b45d36a758d",
    "number": 581,
    "body": "Hi, \r\n\r\nThis PR is related to issue #531 . There is a previous PR (#578), and this PR is an alternative to it.\r\n\r\nBest",
    "head_branch": "get_node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Sub Node alternative (#581)\n\n* Sub Node alternative\r\n\r\n* Sub Node alternative\r\n\r\n* Test // characters in namespaces\r\n\r\n* Sub Node alternative\r\n\r\n* Test // characters in namespaces\r\n\r\n* Fixing style and warning in the order of initalizing members\r\n\r\n* Fixing cases with / in different positions, and adding new tests\r\n\r\n* Removing commented methods\r\n\r\n* Changing extended_namespace to sub_namespace\r\n\r\n* Fixed a bug when merging\r\n\r\n* Fixed a bug when merging\r\n\r\n* Sub Node alternative\r\n\r\n* Sub Node alternative\r\n\r\n* Test // characters in namespaces\r\n\r\n* Fixing style and warning in the order of initalizing members\r\n\r\n* Fixing cases with / in different positions, and adding new tests\r\n\r\n* Removing commented methods\r\n\r\n* Changing extended_namespace to sub_namespace\r\n\r\n* Fixed a bug when merging\r\n\r\n* Merge with origin to update branch\r\n\r\n* improvements to API and documentation\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style and fixing tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup subnode specific tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove vestigial function\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* improve documentation\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add test to check interaction between ~ and sub-nodes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796d18912b45d36a758e",
    "number": 579,
    "body": "This is the start of C++ code matching the API in ros2/examples#216 ",
    "head_branch": "rclcpp_action_prototype",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Skeleton for Action Server and Client (#579)\n\n* Skeleton for ActionServer and ActionClient"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621796e18912b45d36a758f",
    "number": 578,
    "body": "Hi all,\r\n\r\nThis PR is related to issue #531 , providing a SubNode class (implemented as a Proxy Pattern). This let to have code like:\r\n\r\n``` \r\n auto node_ptr = std::make_shared<rclcpp::Node>(\"my_node\", \"/my_ns\");\r\n\r\n  auto sub_node = node_ptr->create_sub_node(\"/foo_ns\");\r\n  auto another_sub_node = sub_node->create_sub_node(\"/bar_ns\");\r\n\r\n  // topic would be '/my_ns/foo_ns/bar_ns/chatter'\r\n  auto sub0 = node_ptr->create_subscription<std_msgs::msg::String>(\"chatter0\",topic_callback);\r\n  auto sub1 = sub_node->create_subscription<std_msgs::msg::String>(\"chatter1\",topic_callback);\r\n  auto sub2 = another_sub_node->create_subscription<std_msgs::msg::String>(\"chatter2\",topic_callback);\r\n```\r\nwhich produces these topics:\r\n\r\n```\r\n/my_ns/chatter0\r\n/my_ns/foo_ns/bar_ns/chatter2\r\n/my_ns/foo_ns/chatter1\r\n```\r\n\r\nThis is a possible starting point to have the desired functionality. \r\n\r\nBest",
    "head_branch": "sub_node",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621796f18912b45d36a7590",
    "number": 577,
    "body": "Connects to ros2/rcutils#121",
    "head_branch": "dynamic_memory_free_error_handling",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use new error handling API from rcutils (#577)\n\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797018912b45d36a7591",
    "number": 576,
    "body": "fixes ros2/rcl#309\r\n\r\nThere's one extra remark on this one:\r\n\r\nI added a little check when invoking a transition service call. It checks that when an `id` as well as `label` for the transition is given, it fetches the transition given the label and not the id.\r\nThis enables service calls like\r\n```\r\nros2 service call <node>/change_state lifecycle_msgs/ChangeState \"{transition: {label: shutdown}}\"\r\n```\r\n\r\nI can't sanity check the ids after I fetching the transition by label because `ros2 service call ...` defaults all values, in that case the `id` to zero.",
    "head_branch": "lifecycle_cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "delete TRANSITION_SHUTDOWN (#576)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797118912b45d36a7592",
    "number": 575,
    "body": "This PR adds the ability to get a `std::map` set of key-value pairs of parameters.  In this case, parameters that form part of a map are all of the form:\r\n\r\n```\r\nparam.x\r\nparam.y\r\n```\r\n\r\nAssuming `param.x` has value 0.1 and `param.y` has value 1.5, then calling this API like:\r\n\r\n```\r\nstd::map<std::string, double> params;\r\nnode->get_parameter(\"param\", params);\r\n```\r\n\r\nWould fill in the `params` map with keys of `x` and `y` with values of `0.1` and `1.5`, respectively.  There is also a `set_parameter_if_not_set` that works much in the same way for setting values.  Tests for this new functionality are added in a new test file; I'll move the rest of the \"local\" parameter tests from system_tests once this is in.  This should solve https://github.com/ros2/rclcpp/issues/529 , and will unblock https://github.com/ros2/teleop_twist_joy/pull/8\r\n\r\nconnects to ros2/rclcpp#529",
    "head_branch": "get-parameter-map",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Get parameter map (#575)\n\n* Add in the ability to get parameters in a map.\r\n\r\nAny parameters that have a \".\" in them will be considered to\r\nbe part of a \"map\" (though they can also be get and set\r\nindividually).  This PR adds two new template specializations\r\nto the public node API so that it can take a map, and store\r\nthe list of values (so setting the parameter with a name of\r\n\"foo\" and a key of \"x\" will end up with a parameter of \"foo.x\").\r\nIt also adds an API to get all of the keys corresponding to\r\na prefix, and returing that as a map (so a get of \"foo\" will\r\nget all parameters that begin with \"foo.\").  Note that all\r\nparameters within the map must have the same type, otherwise\r\nan rclcpp::ParameterTypeException will be thrown.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Fix style problems pointed out by uncrustify/cpplint.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Move tests for set_parameter_if_not_set/get_parameter map to rclcpp.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Rename get_parameter -> get_parameters.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Add in documentation from review.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621797218912b45d36a7593",
    "number": 574,
    "body": "Hi all,\r\n\r\nIssue #552 seems to be blocked. @Myzhar did not a PR with his work. This is a PR with his changes.\r\n\r\nThis PR provides the machanism to issue a WARN when publishing on a not active publisher.\r\n\r\nBest",
    "head_branch": "warning_inactive_publisher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "issue a warning if publishing on a not active publisher (#574)\n\n* issue a warning if publishing on a not active publisher\r\n\r\n* Adding a logger private member in LifecyclePublisher for avoiding creating a new one echa call"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621797418912b45d36a7594",
    "number": 573,
    "body": "Hi all,\r\n\r\nThis commit provides a way to use logging macros with std::string. \r\n\r\nI hope it is ok for you :)\r\n\r\nBest\r\nFrancisco\r\n\r\nConnects to #570",
    "head_branch": "logging_string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Providing logging macro signature that accepts std::string (#573)\n\n* Providing logging macro signature that accepts std::string\r\n\r\n* - RCLCPP_ prefix to macros Add\r\n- New tests added\r\n\r\n* - Added doc to the functions and macros\r\n- Functions declared as RCLCPP_PUBLIC\r\n\r\n* - Small typo in doc corrected\r\n\r\n* Fixed error when compiling with clang\r\n\r\n* touch up docs"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621797518912b45d36a7595",
    "number": 569,
    "body": "fixes ros2/rclcpp#568",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add SMART_PTRS_DEF to LifecyclePublisher (#569)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797618912b45d36a7596",
    "number": 567,
    "body": "There are many places in the ROS codebase where a time duration is\r\nspecified as a floating point number of seconds. A factory function\r\nto create a Duration object from these values makes the code a\r\nbit simpler in many cases.\r\n\r\nSorry this change is based off the 0.5.1 tag. I was having trouble building\r\nthe tip of master. I will rebase this properly if you want to implement this\r\nfunctionality this way.",
    "head_branch": "durationfromsec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding a factory method to create a Duration from seconds (#567)\n\n* Adding a factory method to create a Duration from seconds\r\n\r\nThere are many places in the ROS codebase where a time duration is\r\nspecified as a floating point number of seconds. A factory function\r\nto create a Duration object from these values makes the code a\r\nbit simpler in many cases.\r\n\r\nSigned-off-by: Carl Delsey <carl.r.delsey@intel.com>\r\n\r\n* Adding some comments to clarify which constructors get matched.\r\n\r\nSigned-off-by: Carl Delsey <carl.r.delsey@intel.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797718912b45d36a7597",
    "number": 566,
    "body": "This fixes the build on MacOS High Sierra and later, and\r\nis the more correct thing to do anyway.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nfixes https://github.com/ros2/rclcpp/issues/563",
    "head_branch": "fix-virtual-destructors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add virtual destructors to classes with virtual functions. (#566)\n\nThis fixes the build on MacOS High Sierra and later, and\r\nis the more correct thing to do anyway.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621797818912b45d36a7598",
    "number": 565,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nConnects to https://github.com/ros2/rcutils/issues/113",
    "head_branch": "add-macro-semicolons",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add semicolons to all RCLCPP and RCUTILS macros. (#565)\n\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797918912b45d36a7599",
    "number": 562,
    "body": "Fixes https://github.com/ros2/rclcpp/issues/552",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797a18912b45d36a759a",
    "number": 561,
    "body": "This pull request removes an inherit of `std::binary_function` for the struct `strcmp_wrapper`, a C-style string comparator.\r\n\r\nThe struct `strcmp_wrapper` is used by the IDTopicMap typedef (line 276) which is a std::map, and std::map requires strcmp_wrapper to fulfill the [Compare named requirement](https://en.cppreference.com/w/cpp/named_req/Compare). The inherit of `std::binary_function` only defines 3 types: `first_argument_type`, `second_argument_type` and `result_type` (typedefs of types passed in argument), which is useless here because they are not part of the requirement.\r\n\r\n `std::binary_function` has been deprecated in C++11, removed in C++17. This change may seem useless, but this change enables us to compile C++17 ROS2 packages using rclcpp (or at least some of them), which may be useful.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removing std::binary_function usage (#561)\n\nDeprecated in C++11, removed in C++17"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797b18912b45d36a759b",
    "number": 560,
    "body": "",
    "head_branch": "PrototypeMorgan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797c18912b45d36a759c",
    "number": 559,
    "body": "closes #514 and #515\r\n\r\nPreviously, the clock subscription was always created. When messages were received on the clock topic, ROS time was set to active (#514), even if `use_sim_time` was set to false (#515).\r\n\r\nNow, ROS time will only be set active if the `use_sim_time` parameter is explicitly set true. The subscription is only created if the parameter is set (can be set after node startup).\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=5218)](http://ci.ros2.org/job/ci_linux/5218/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1980)](http://ci.ros2.org/job/ci_linux-aarch64/1980/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=4338)](http://ci.ros2.org/job/ci_osx/4338/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=5196)](http://ci.ros2.org/job/ci_windows/5196/)\r\n\r\nIn progress because CI might uncover things relying on the previous behaviour (the /chatter topic won't appear by default now)",
    "head_branch": "avoid_using_ros_time",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't auto-activate ROS time if clock topic is being published (#559)\n\n* Don't auto-activate ROS time if clock topic is being published\r\n\r\n* Destroy subscription when not needed, avoid re-creating it\r\n\r\n* Additional tests\r\n\r\n* Always reset pointer\r\n\r\n* Initialise sub in initialiser list"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797d18912b45d36a759d",
    "number": 558,
    "body": "This adds a parameter to `spin_some()` for the maximum duration to spend executing work. It prevents `spin_some()` from blocking forever if there are always callbacks ready. The reason for adding it is to allow rviz to execute all callbacks without being limited by the gui or blocking it.\r\n\r\nconnects to ros2/ros1_bridge#133\r\nBlocks ros2/rviz#354\r\n\r\nCI https://github.com/ros2/rviz/pull/354#issuecomment-421519940",
    "head_branch": "rviz2_tf_lag",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add max_duration to spin_some() (#558)\n\nWith max_duration spin_some will execute work until it has spent more\r\ntime than the elapsed duration."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621797f18912b45d36a759e",
    "number": 557,
    "body": "Now it'll give something like:\r\n\r\n```\r\nterminate called after throwing an instance of 'std::runtime_error'\r\n  what():  Failed to parse parameters from file '/tmp/launch_params_1dz53yuw': Sequence should be of same type. Value type 'integer' do not belong at line_num 8, at /home/dhood/ros2_ws/src/ros2/rcl/rcl_yaml_param_parser/src/parser.c:914\r\n```\r\n\r\nfor linters: [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=5190)](https://ci.ros2.org/job/ci_linux/5190/)",
    "head_branch": "print_parser_error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Output rcl error message when yaml parsing fails (#557)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798018912b45d36a759f",
    "number": 556,
    "body": "It looks like there is a false positive cpplint violation on xenial (ros2/build_cop#147).\r\n\r\nI'm guessing it either had an issue with the same variable name being used in the shared pointer deleter, or it didn't recognize execution stops at `throw_from_rcl_error` above.\r\n\r\nFirst attempt: change variable name in lambda.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=5182)](http://ci.ros2.org/job/ci_linux/5182/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1954)](http://ci.ros2.org/job/ci_linux-aarch64/1954/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=4306)](http://ci.ros2.org/job/ci_osx/4306/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=5162)](http://ci.ros2.org/job/ci_windows/5162/)\r\n\r\nconnects to ros2/build_cop#147",
    "head_branch": "false_positive_cpplint",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix cpplint on xenial (#556)\n\n* Change variable name to fix cpplint on xenial\r\n\r\n* Set variable to null to satisfy cpplint\r\n\r\n* additional null"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798118912b45d36a75a0",
    "number": 555,
    "body": "fixes https://github.com/ros2/rclcpp/issues/550\r\n\r\nThe biggest change (this will break existing API) here is that a `rcl_lifecycle_transition_key_t` now is a struct has thus has `label` and `id`. This label will then be presented when calling `get_available_transitions`. There is a second service introduced called `get_transition_graph` which yields all available transitions within the state machine. This is then helpful when introspecting the state machine.\r\n\r\nI am not feeling a hundred percent convinced that the naming here is perfect, so I'd ask for feedback between the following separation:\r\n\r\n* Transition: A unique transition within the state machine is labeled as i.e. `configure_to_shutdown` or `configure_to_configuring`.\r\n* Key: A transition key is used here to trigger the change of state, i.e. `configure` or `shutdown` and one key can be used to trigger different individual transitions. The example here could be `shutdown` which can be used to trigger `configure_to_shutdown` or `inactive_to_shutdown`.\r\n\r\nAny feedback on naming here?  ",
    "head_branch": "lifecycle_refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "service for transition graph (#555)\n\n* service for transition graph\r\n\r\n* remove keys, transition id unique, label ambiguous\r\n\r\n* semicolon for macro call"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621798218912b45d36a75a1",
    "number": 553,
    "body": "This PR makes sure timers are finalized before clocks. Since a timer uses a clock, the clock must be valid longer than the timer.\r\n\r\nI suspect this will fix the windows test failures in ros2/rcl#286. That PR adds a time jump callback to the clock in `rcl_timer_init()`, and removes it in `rcl_timer_fini()`. If the clock is finalized before the timer then the attempt to remove the jump callback results in trying to access an `rcl_clock_t` after it has been freed.\r\n\r\n`TimerBase` already has a shared pointer to `Clock` for this purpose, but this is insufficient. `TimerBase::get_timer_handle()` [returns an `std::shared_ptr<rcl_timer_t>`](https://github.com/ros2/rclcpp/blob/8c6f38a0fa91749f1896b0ac462e9e90b5a31b17/rclcpp/include/rclcpp/timer.hpp#L65-L67) with a deleter that [calls `rcl_timer_fini()`](https://github.com/ros2/rclcpp/blob/8c6f38a0fa91749f1896b0ac462e9e90b5a31b17/rclcpp/src/rclcpp/timer.cpp#L29-L39). This handle can live longer than `TimerBase` in an [executor's memory strategy](https://github.com/ros2/rclcpp/blob/8c6f38a0fa91749f1896b0ac462e9e90b5a31b17/rclcpp/include/rclcpp/executor.hpp#L350). Specifically `AllocatorMemoryStrategy` keeps a [list of `std::shared_ptr<rcl_timer_t>`](https://github.com/ros2/rclcpp/blob/8c6f38a0fa91749f1896b0ac462e9e90b5a31b17/rclcpp/include/rclcpp/strategies/allocator_memory_strategy.hpp#L385). If the `NodeClock` and `TimerBase` are destroyed before an `Executor` then the clock is finalized before the timer handle which may result in a crash.\r\n\r\nCI\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=5150)](http://ci.ros2.org/job/ci_linux/5150/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1927)](http://ci.ros2.org/job/ci_linux-aarch64/1927/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=4275)](http://ci.ros2.org/job/ci_osx/4275/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=5130)](http://ci.ros2.org/job/ci_windows/5130/)\r\n\r\nblocks ros2/rcl#286",
    "head_branch": "clock_fini_after_timer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make sure timer is fini'd before clock (#553)\n\n* Make sure timer is fini'd before clock"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798318912b45d36a75a2",
    "number": 551,
    "body": "This is syntactic sugar to allow the user to get a parameter.\r\nIf the parameter is already set on the node, it gets the value\r\nof the parameter.  If it is not set, then it gets the alternative\r\nvalue and sets it on the node, ensuring that it exists.\r\n\r\nI personally think that the name makes some sense, but I'm definitely open to other ideas for the API.  If approved and merged, this will be used in https://github.com/ros2/teleop_twist_joy/pull/8 .  Test for this new functionality is in https://github.com/ros2/system_tests/pull/296",
    "head_branch": "get-parameter-or-set-default",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement get_parameter_or_set_default. (#551)\n\n* Implement get_parameter_or_set_default.\r\n\r\nThis is syntactic sugar to allow the user to get a parameter.\r\nIf the parameter is already set on the node, it gets the value\r\nof the parameter.  If it is not set, then it gets the alternative\r\nvalue and sets it on the node, ensuring that it exists.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Review fixes (one sentence per line).\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Rename get_parameter_or_set_default -> get_parameter_or_set\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621798418912b45d36a75a3",
    "number": 546,
    "body": "These are some issues raised by doxygen that were pointed out to me.",
    "head_branch": "doc_fixup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Doc fixups (#546)\n\n* add missing docs for number_of_threads parameter\r\n\r\n* add missing docs for start_parameter_services parameter\r\n\r\n* add missing docs for parameters, rename short variable name\r\n\r\n* doc fixups"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621798518912b45d36a75a4",
    "number": 545,
    "body": "Add a new method to return a vector of pair to get both node names and namespaces.\r\n\r\nConnects to ros2/rmw#142",
    "head_branch": "get_node_names_and_namespaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Get node names and namespaces (#545)\n\n* Rework to account for new get_node_names signiture.\r\n\r\n* cpplint.\r\n\r\n* Address reviewer feedback."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621798618912b45d36a75a5",
    "number": 543,
    "body": "Relieves rclcpp::TimeSource responsibility of calling jump callbacks.\r\n\r\n(Changed branch name to disconnect PRs)\r\n\r\nRequires ros2/rcl#284",
    "head_branch": "rclcpp_time_jump_callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use rcl_clock_t jump callbacks (#543)\n\n* Use rcl_clock_t jump callbacks\r\n\r\nRelieves rclcpp::TimeSource responsibility of calling jump callbacks."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621798718912b45d36a75a6",
    "number": 542,
    "body": "Relieves rclcpp::TimeSource responsibility of calling jump callbacks. They get called from the time jump callbacks on `rcl_clock_t` instead.\r\n\r\nconnects to ros2/rcl#284",
    "head_branch": "rcl_time_jump_callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798818912b45d36a75a7",
    "number": 541,
    "body": "fixes ros2/rclcpp#532",
    "head_branch": "fix_532",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "publish shared_ptr of rcl_serialized_message (#541)\n\n* publish shared_ptr of rcl_serialized_message\r\n\r\n* const parameter"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798918912b45d36a75a8",
    "number": 540,
    "body": "connects to ros2/rcl#285",
    "head_branch": "rcl_consolidate_wait_set_functions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rcl consolidate wait set functions (#540)\n\n* Use consolidated rcl_wait_set_clear()\r\n\r\n* Use consolidated rcl_wait_set_resize()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798b18912b45d36a75a9",
    "number": 538,
    "body": "Related to issue #524 .\r\n\r\n-> I am not sure about the tests which I added to validate the functions.Would require some help in them.\r\n-> I have done the linting checks locally in my workstation.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add TIME_MAX and DURATION_MAX functions (#538)\n\n* Add TIME_MAX and DURATION_MAX functions\r\n\r\n* Fix Linting Errors\r\n\r\n* change funtion name as per coding style\r\n\r\n* change function name as per coding style\r\n\r\n* Update duration.cpp\r\n\r\n* Update time.cpp\r\n\r\n* Update test_duration.cpp\r\n\r\n* Update time.hpp\r\n\r\n* remove extra empty line"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621798c18912b45d36a75aa",
    "number": 536,
    "body": "These are two getters which I found helpful (and missing) while porting more robot web tools packages.",
    "head_branch": "time_duration_getter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add Time::is_zero and Duration::seconds (#536)\n\nadd Duration::seconds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621798d18912b45d36a75ab",
    "number": 535,
    "body": "fixes ros2/rclcpp#534",
    "head_branch": "fix_534",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "log error message instead of throwing exception in destructor (#535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798e18912b45d36a75ac",
    "number": 533,
    "body": "Should reduce flakiness of this test on OS X.\r\n\r\nfixes https://github.com/ros2/rclcpp/issues/457",
    "head_branch": "fix_now_flakiness",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Relax tolerance of now test because timing affected by OS scheduling (#533)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621798f18912b45d36a75ad",
    "number": 530,
    "body": "## Description\r\n- Courtesy of @serge-nikulin \r\n- This PR fixes warning generated when building with:\r\n\r\n```\r\n-Wall\r\n-Wextra\r\n-pedantic\r\n-Wcast-align\r\n-Wunused\r\n-Wconversion\r\n-Wsign-conversion\r\n-Wdouble-promotion\r\n-fvisibility=hidden\r\n```\r\n\r\n- Related to ros2/rcl#276 and ros2/rcutils#114\r\n\r\nconnects to ros2/rcutils#114",
    "head_branch": "compile-flag-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799018912b45d36a75ae",
    "number": 527,
    "body": "Discussion in #525 \r\n\r\nThis removes a thrown exception that appears to be a copy/paste error from `rclcpp::Time`.\r\n\r\n~~Requires ros2/rcl_interfaces#38~~",
    "head_branch": "negative_duration",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove incorrect exception on sec < 0 (#527)\n\n* Remove incorrect exception on sec < 0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799118912b45d36a75af",
    "number": 526,
    "body": "~~(edit) ros2/rclcpp#482~~ Edit oops, this doesn't fix 482.  That ticket is about duration types.\r\n\r\nThis adds `seconds()` which returns the seconds since epoch as a double.\r\n\r\nConnects to ros2/geometry2#67",
    "head_branch": "use_ros2_time",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add rclcpp::Time::seconds() (#526)\n\n* Get seconds since epoch as double"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621799218912b45d36a75b0",
    "number": 523,
    "body": "Extend the Timer API to take a Clock.\r\n\r\nRequires ros2/rcl#272.",
    "head_branch": "timer-with-clock",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "construct TimerBase/GenericTimer with Clock (#523)\n\n* construct TimerBase/GenericTimer with Clock\r\n\r\n* pass rcl_time_point_value_t to rcl_clock_get_now\r\n\r\n* update docblocks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621799318912b45d36a75b1",
    "number": 522,
    "body": "Addresses https://github.com/ros2/rclcpp/issues/518.\r\n\r\n* Named the function `is_initialized` instead of `isInitialized` because that seemed to be the style throughout the utilities\r\n* It turns out that `rcl_ok` was already doing what was desired, so `rclcpp::is_initialized` is just a wrapper around that.\r\n* Added new test file so it could run isolated",
    "head_branch": "is_initialized",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement rclcpp::is_initialized() (#522)\n\n* Implement rclcpp::is_initialized()\r\n\r\n* linter"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621799518912b45d36a75b2",
    "number": 517,
    "body": "We are assuming both pre- and post-jump callback are set for a JumpHandler, which can lead to `bad_function_call` exceptions.\r\n\r\nTo me it seems reasonable that only one is provided and not the other, so I took the approach of checking before calling them, but if we think they should both be required and users have to put noops as appropriate, we can add a check to the constructor instead.",
    "head_branch": "partial_jump_handlers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Support jump handlers with only pre- or post-jump callback (#517)\n\n* Add failing tests for partial jump handlers\r\n\r\n* Code deduplication\r\n\r\n* Check callbacks before calling them"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799618912b45d36a75b3",
    "number": 513,
    "body": "To be backported in bouncy https://github.com/ros2/ros2/issues/537\r\n\r\nAllows to release the `rclcpp` repo without needing to release `common_interfaces` first\r\n\r\nConnects to https://github.com/ros2/rcl/pull/270\r\nCI at https://github.com/ros2/rcl/pull/270#issue-201414918",
    "head_branch": "use_test_msgs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "nothing uses std_msgs anymore (#513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799718912b45d36a75b4",
    "number": 512,
    "body": "When building with `--warn-uninitialized` the variable is being flagged so it can be safely removed.",
    "head_branch": "remove_use_of_uninitialized_var2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove use of uninitialized CMake var (#512)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799818912b45d36a75b5",
    "number": 511,
    "body": "When building with `--warn-uninitialized` the variable is being flagged so it can be safely removed.\r\n\r\n[![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=4885)](https://ci.ros2.org/job/ci_linux/4885/)",
    "head_branch": "remove_use_of_uninitialized_var",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove use of uninitialized CMake var (#511)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799918912b45d36a75b6",
    "number": 510,
    "body": "Connects to ament/uncrustify#24",
    "head_branch": "uncrustify_0.67",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Uncrustify 0.67 (#510)\n\n* fix indentation to comply with uncrusity 0.67\r\n\r\n* fix spacing before opening brackets\r\n\r\n* space between reference and variable name in signature\r\n\r\n* questionable space between pointer marker and variable name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621799a18912b45d36a75b7",
    "number": 508,
    "body": "Exposing get_node_names API from node interfaces rather than node_graph ones. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose get_node_names API from node. (#508)\n\n* Exposing get_node_names from node handle\r\n\r\nSigned-off-by: Sriram Raghunathan <rsriram7@visteon.com>\r\n\r\n* Exposing get_node_names from node handle for lifecycle_nodes\r\n\r\nSigned-off-by: Sriram Raghunathan <rsriram7@visteon.com>\r\n\r\n* Fix stray demangle type"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799b18912b45d36a75b8",
    "number": 507,
    "body": "This package does not generate any message so it doesnt need to depend on the generators, instead it should link against the libraries that provide the symbols it uses (in this case rosidl_typesupport_cpp)\r\n\r\nConnects to ros2/demos#264",
    "head_branch": "remove_unused_deps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix rosidl dependencies (#507)\n\n* [rclcpp_lifecycle] remove rosidl deps as this package doesnt generate any messages\r\n\r\n* depend on rosidl_typesupport_cpp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799c18912b45d36a75b9",
    "number": 505,
    "body": "Should fix https://github.com/ros2/examples/issues/209 and fix https://github.com/ros2/examples/issues/211, and it should also make https://github.com/ros2/examples/pull/210 unnecessary, but I would leave https://github.com/ros2/examples/pull/210 because it is more correct in my opinion.\r\n\r\nAfter thinking about this a long time and doing some targeted testing, I'm still not completely convinced myself that this change is correct.  If we choose to merge it, we should be very suspicious of it and review it closely.\r\n\r\nSo I think we should not merge this and instead I'll keep looking into it. But we'll need to make a decision to risk this workaround or leave the error output.",
    "head_branch": "fix_node_handle_destroyed_before_sub_error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "keep shared pointer reference to rcl_node handle for subscription fini (#505)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799d18912b45d36a75ba",
    "number": 504,
    "body": "A do_inter_process_publish is always called when publishing unique_ptr, even for the intra-process situation.\r\nIt will cause the performance of intra-process publishing degrade as the inter-process situation.\r\nSince other cases of intra-process publishing (i.e. publishing shared_ptr, publishing message reference, and publishing message pointer) all call this version of publish method, it will basically affect all intra-process publishing performance.\r\n\r\nThis fix will bring the expected intra-process low-latency performance.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799e18912b45d36a75bb",
    "number": 503,
    "body": "Referencing https://github.com/ros2/rclcpp/pull/388#discussion_r173047624",
    "head_branch": "switch-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621799f18912b45d36a75bc",
    "number": 502,
    "body": "",
    "head_branch": "wjwwood-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "typo (#502)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179a018912b45d36a75bd",
    "number": 501,
    "body": "I tested this on mini3 with the expanded tolerance and a Debug build, and it corrects it.  The failures were right outside of the tolerance (by a few milliseconds), so it may have been some jitter in the timers causing the tests to fail.\r\n\r\nI have also changed the assertions to be more informative if it fails again.",
    "head_branch": "expand_multi_executor_tolerance",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Further expand test tolerance to address flakiness. (#501)\n\n* Further expand test tolerance to address flakiness.\r\n\r\n* Remove newline."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179a118912b45d36a75be",
    "number": 500,
    "body": "As we are currently not using any subscriptions with the lifecycle nodes, the build farm didn't notice this.",
    "head_branch": "fix_lifecycle_subscription",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "comply to new subscription template (#500)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179a318912b45d36a75bf",
    "number": 498,
    "body": "I noticed this when implementing launch, that the name you get from `rclcpp` was not respecting the remapping.",
    "head_branch": "fix_service_name_getter",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "always get service name from rcl to account for remapping (#498)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179a418912b45d36a75c0",
    "number": 497,
    "body": "Connects to ros2/demos#185",
    "head_branch": "wjwwood/expose_cdr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use size_t (#497)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179a618912b45d36a75c1",
    "number": 495,
    "body": "This adds `Node::create_parameter()` and a boolean `allow_undeclared_parameters` to the node's constructor. Parameters may be given a type, a default value, and a bool indicating whether or not they're read only. Read only parameters are initialized, but may not be changed after initialization.\r\n\r\nThe features work except for a test failure in `test_time_source.cpp`, and I have no idea why. The failure symptom is the `on_parameter_event` callback in `TimeSource` does not get called.\r\n\r\nThe time_source test passes if I step through the problem area in GDB. That is, I set a breakpoint at the start of the failing test then set a break point inside `TimeSource::on_parameter_event`. If I hit 'c' for continue the test fails and the breakpoint is not reached. If I instead hit `n` repeatedly then the breakpoint is reached in the `spin()` call and the test passes.\r\n\r\nThere are a couple missing features. Since this PR adds the concept of declaring parameters, it should be possible for a node to error if a run-time user tries to set an undeclared parameter. This could be done with a method that throws if any undeclared parameters where provided, but a node-author would be responsible for calling this method after all parameters have been declared.\r\n\r\nOther nodes may allow undeclared parameters (like the observation source parameters in obstacle layer in costmap 2d). If they pass `allow_undeclared_parameters = true` to the constructor then the initial parameters provided by a run-time user are immediately set on a node. A future enhancement could let a node say parameters starting with `foo.bar.` may be undeclared.\r\n\r\nrequires ros2/rclcpp#488",
    "head_branch": "read_only_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Read only parameters (#495)\n\n* in progress broken test_time_source\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* style\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* test undeclared params\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* Only get parameter if it is set\r\n\r\nSigned-off-by: Shane Loretz <sloretz@osrfoundation.org>\r\n\r\n* doc fixup\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use override rather than virtual in places\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* rename ParameterInfo_t to ParameterInfo and just use struct, no typedef\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add method to access ParameterValue within a Parameter\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* enable get<Parameter> and get<ParameterValue> on Parameter class\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid const pass by value\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* match type of enum in C++ to type used in message definition\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup after rebase\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* more fixup after rebase\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* replace create_parameter with declare_parameter\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* provide implementation for templated declare_parameter method\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* style\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* do not use const reference when it's a primitive (like bool)\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* typo\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* follow to bool change that wasn't staged\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* added lots of docs, alternative API signatures, and some of the tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* more tests and associated fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* address documentation feedback\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup previously added tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add tests and fixes for describe_parameter(s) and get_parameter_types\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove old parameter tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* use const reference where possible\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* address comments\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix tests for deprecated methods\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* address feedback\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* significantly improve the reliability of the time_source tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* uncrustify, cpplint, and cppcheck fixes\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* Revert \"significantly improve the reliability of the time_source tests\"\r\n\r\nThis reverts commit 3ef385d8419c3f71cba91e622138583a91b2682a.\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* only declare use_sim_time parameter if not already declared\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup rclcpp_lifecycle\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fixup tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add missing namespace scope which fails on Windows\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* extend deprecation warning suppression to support Windows too\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix compiler warnings and missing visibility macro\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove commented left over tests\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix compiler warning on Windows\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* suppress deprecation warning on include of file in Windows\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* avoid potential loss of data warning converting int64_t to int\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* trying to fix more loss of data warnings\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* fix test_node\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* add option to automatically declare parameters from initial parameters (yaml file)\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>\r\n\r\n* remove redundant conditional\r\n\r\nSigned-off-by: William Woodall <william@osrfoundation.org>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179a718912b45d36a75c2",
    "number": 494,
    "body": "The parameter server creates the following service servers:\r\n```\r\ndescribe_parameters\r\nget_parameters\r\nget_parameter_types\r\nlist_parameters,\r\nset_parameters\r\nset_parameters_atomically\r\n```\r\n\r\nThe parameter client creates all but `set_parameters_atomically`.\r\n\r\nIs it intentional ?\r\n\r\nAssuming it's not, this PR adds the missing one.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=4572)](http://ci.ros2.org/job/ci_linux/4572/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1483)](http://ci.ros2.org/job/ci_linux-aarch64/1483/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=3759)](http://ci.ros2.org/job/ci_osx/3759/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=4659)](http://ci.ros2.org/job/ci_windows/4659/)\r\n\r\nLeaving this in progress until CI comes back green",
    "head_branch": "param_client_set_atomically",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add missing set_parameters_atomically client (#494)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179a918912b45d36a75c3",
    "number": 493,
    "body": "Parameters that are queried but don't exist on the node should return a value with type NOT_SET to comply with the service definition in `rcl_interfaces`.\r\n\r\nThis PR only changes the behavior of the `get_parameters` service. The C++ API doesn't have the same problem (it returns both the name and the value of the parameter), so this PR adds documentation to it instead.\r\n\r\nFixes ros2/rclcpp#490\r\nconnects to ros2/rclcpp#490",
    "head_branch": "get_not_set_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Get parameters that aren't set (#493)\n\n* Document get_parameters()\r\n\r\n* Return NOT_SET params in get params service"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179aa18912b45d36a75c4",
    "number": 489,
    "body": "Fixes #487.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=4515)](http://ci.ros2.org/job/ci_linux/4515/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1435)](http://ci.ros2.org/job/ci_linux-aarch64/1435/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=3707)](http://ci.ros2.org/job/ci_osx/3707/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=4591)](http://ci.ros2.org/job/ci_windows/4591/)",
    "head_branch": "fully_delete_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fully delete parameters (#489)\n\n* allow ParameterValue class to be copy constructed with type not-set\r\n\r\n* actually remove deleted parameters from the map"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179ab18912b45d36a75c5",
    "number": 488,
    "body": "Blocks ros2/rclcpp#477\r\nRequires ros2/rclcpp#485\r\nRequires ros2/rclcpp#486\r\nRequires ros2/rcl#253\r\n\r\nThis initializes the parameters on a node from yaml files. Since there are multiple sources of initial values passed to a node (multiple yaml files on the command line, multiple yaml files on node specific CLI arugments, explicit `initial_values` passed to constructor) this PR merges all the sources such that constructor `initial_values` overwrites constructor `arguments` which overwrites global command line arguments. Within CLI arguments Yaml files specified later overwrite ones specified earlier.\r\n\r\ni.e. this works\r\n```\r\nros2 run demo_nodes_cpp talker __params:=generic-default-values.yaml __params:=more-specific-values.yaml\r\n```\r\n\r\n~~The only commit is 2cb890e. This PR needs to be rebased when #485 and #486 are merged. Also this PR needs tests.~~",
    "head_branch": "init_params_via_yaml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Initialize params via yaml from command line (#488)\n\n* Initialize params from yaml files"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179ac18912b45d36a75c6",
    "number": 486,
    "body": "~~PR complete, waiting for #481 to be merged first, then this needs to be targeted at `master`.~~\r\n\r\nThis allows the initial parameter values for a node to be passed in via it's constructor. These parameters are then immediately set on the node.\r\n\r\n~~edit: invoked CI wrong, will wait to run until #481 is in.~~\r\n\r\nblocks ros2/rclcpp#477\r\nrequires ros2/rclcpp#481",
    "head_branch": "init_params_via_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Pass initial parameter values to node constructor (#486)\n\n* Pass parameter values to node constructor"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179ad18912b45d36a75c7",
    "number": 485,
    "body": "~~PR complete, waiting for #481 to be merged first, then this needs to be targeted at `master`.~~ Ready to review\r\n\r\nThis allows the initial parameter values for a node to be passed in via it's constructor. These parameters are then immediately set on the node.\r\n\r\n~~edit: invoked CI wrong, will wait to run until #481 is in.~~\r\n\r\nblocks ros2/rclcpp#477\r\nrequires ros2/rclcpp#481",
    "head_branch": "params_from_yaml_parser",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Convert rcl_params_t to ParameterMap (#485)\n\nConvert from rcl_params_t to map of node parameters\r\n\r\nAdds rclcpp::parameter_map_from(const rcl_params_t * const)\r\nAdds rclcpp::parameter_value_from(const rcl_variant_t * const)\r\nAdds dependency on rcl_yaml_param_parser"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179ae18912b45d36a75c8",
    "number": 484,
    "body": "Connects to #479",
    "head_branch": "gtest-traits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Relax template matching rules for std::bind and GNU C++ >= 7.1 (#484)\n\n* Relax template matching rules for std::bind and GNU C++ >= 7.1\r\n\r\n* Document reason test was added"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179af18912b45d36a75c9",
    "number": 483,
    "body": "This is a fix for a possible cause of a test failure described by [this comment](https://github.com/ros2/rclcpp/pull/478#issuecomment-393228080).\r\n\r\nDuring the test the `ros_clock->ros_time_is_active()` method is expected to return false, but sometimes it returns true. \"Ros Time\" on a clock is activated or deactivated in a subscription callback on the `parameter_events` topic. A `SyncParametersClient` calls `spin_node_until_future_complete` with an `std::shared_future` that completes when a response to a request to set parameters has been received. It looks like it is possible for the client response to be received before the `parameter_events` subscription callback is called.\r\n\r\nWithout this PR I see a test failure on my ubuntu xenial machine ~50% of the time using `--retest-until-fail 100`. With this PR `--retest-until-fail 1800` completed without failing.\r\n\r\nI don't know why the change in #478 made this test flaky.\r\n\r\nCI (only test rclcpp since only code change is in a test)\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=4498)](http://ci.ros2.org/job/ci_linux/4498/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1423)](http://ci.ros2.org/job/ci_linux-aarch64/1423/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=3685)](http://ci.ros2.org/job/ci_osx/3685/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=4575)](http://ci.ros2.org/job/ci_windows/4575/)",
    "head_branch": "race_condition_time_source_test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Spin before checking if clock changed (#483)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179b018912b45d36a75ca",
    "number": 481,
    "body": "In progress while CI runs\r\n\r\nThis PR looks large, but most of the changed lines in this PR are due to renaming `ParameterVariant` to `Parameter`. I can split it into smaller PRs if need be.\r\n\r\nChanges\r\n* Renamed `ParameterVariant` to `Parameter`\r\n* Removed `rclcpp::parameter` namespace (as was done for other namespaces in #416)\r\n* Moved functions related to getting a parameter value into new `ParameterValue` class.\r\n* Raise `ParameterTypeException` instead of `std::runtime_error` when there is a type mismatch\r\n* Rename `Parameter::get_parameter_value()` to `Parameter::get_value_message()`\r\n* Added `const` to `Parameter::to_parameter()`",
    "head_branch": "split_parametervariant",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Split ParameterVariant into Parameter and ParameterValue (#481)\n\n* Split ParametrVariant into Parameter and ParameterValue\r\n* Test expects ParameterTypeException\r\n* get_parameter_value() -> get_value_message()\r\n* Make to_parameter() const and rename to to_parameter_msg()"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179b218912b45d36a75cb",
    "number": 480,
    "body": "Highlights https://github.com/ros2/rclcpp/issues/479 (https://github.com/ros2/rclcpp/commit/9d5b0359c75ef3987389ddb105ed64a48b136864 does not compile with gcc7)",
    "head_branch": "decltype_gcc7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Subscription tests using bind in member callback (#480)\n\n* Add tests for member callbacks\r\n\r\n* Add tests for member callback in Test class (not working with gcc7)\r\n\r\n* Uncomment test that was failing\r\n\r\n* Linter fixup"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179b318912b45d36a75cc",
    "number": 478,
    "body": "This automatically starts parameter services when a node is constructed. This is one step closer to a future where the services are created by `rcl`. If the user doesn't have to start the services, then they won't notice when `rcl` is starting them instead of `rclcpp`.\r\n\r\nI  refactored `create_service()` to get rid of `ParameterServices` requiring a pointer to `Node` so that it could be started by `NodeParameters`.",
    "head_branch": "auto_start_parameter_service",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Autostart parameter services (#478)\n\n* Autostart parameter services\r\n* Add bool start_parameter_services"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179b418912b45d36a75cd",
    "number": 477,
    "body": "Work in progress towards initializing parameters.\r\n## Current state:\r\nWhen the node is constructed yaml files passed as CLI args are parsed, and the parameters within are set on the node. \r\n\r\n## RCL\r\n- [x] need yaml parameter parser (ros2/rcl#235)\r\n- [x] need `rcl` function to get yaml file name from command line arguments (ros2/rcl#253)\r\n\r\n## Questions/Assumptions\r\n* Assuming `rclcpp` needs to call methods to parse yaml because `rcl` doing it would cause a circular dependency between it and `rcl_yaml_parse_params`\r\n* ~~Assuming `rcl` will have a method for getting a path to a yaml file from an `rcl_arguments_t`~~ Has method for getting all yaml paths specified\r\n* ~~Does `rcl_yaml_param_parser` dependency need to be exported?~~ Yes\r\n* Should `rcl_yaml_param_parser` namespace + nodename include a leading slash? currently it does not\r\n* What was the idea of `ParameterInitializationMap` for? Why not `std::vector<ParameterVariant>`?\r\n\r\n## TODO\r\nBare minimum:\r\n- [x] `NodeParameters` should start parameter services in its constructor (#478)\r\n  * Need to pass full `Node` instance to `NodeParameters` to give to `ParameterService`\r\n- [x] `NodeParameters` needs to get yaml file from CLI arguments (#488)\r\n  1. If `rcl_arguments_t` passed to node options is not zero initialized, then get yaml files from it\r\n  2. if `node options `use_global_arguments` is `True` then get yaml files from global arguments.\r\n\r\nDesired:\r\n- [x] Split `ParameterVariant` into `Parameter` which has a `ParameterValue` (#481)\r\n- [x] `rclcpp` method to convert `rcl_params_t` to `std::vector<Parameter>` (or `std::map<string, ParameterValue>` or `std::map<string, Parameter>` ? ) (#485)\r\n- [x] Allow passing `std::vector<Parameter>` into `NodeParameters` constructor. (#486)\r\n    * Needed to initialize a node with parameters generated by roslaunch after it merges multiple yaml files together.\r\n- [ ] `node::create_parameter(name, value)`\r\n   * Declares a parameter is known by a node\r\n- [ ] `std::vector<Parameter> node::unknown_initial_parameters()`\r\n   * Returns a list of parameters that are in the yaml file but not known to the node\r\n   * To be called by a user after all parameters have been created\r\n- [ ] `void node::raise_if_unknown_initial_parameters()`\r\n   * Raises exception if there is an unknown initial parameter\r\n   * To be called by a user after all parameters have been created",
    "head_branch": "rclcpp_parameter_initialization",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179b518912b45d36a75ce",
    "number": 476,
    "body": "Fixes https://github.com/ros2/rmw_connext/issues/280\r\n\r\nWe already have a workaround in the implementation of `wait_for_service_nanoseconds` to accommodate a race condition in connext between when the graph condition is triggered and when the service is reported as being available (https://github.com/ros2/rclcpp/pull/262).\r\n\r\nWhile that workaround works, it can be slow if there are no other graph events coincidentally happening at the same time. Currently, when we are hit by that race condition, we get stuck waiting the full duration of the remaining `time_to_wait` before the wait set wakes up again and we notice the service is now available.\r\n\r\nThis PR changes the behaviour to put a max wait in the `wait_for_graph_change` so that in the event we are hit by the race condition, we recover from it in a limited amount of time (I chose 100ms arbitrarily).\r\n\r\nI didn't find where the race condition is coming from yet. I have an idea which I'll put on https://github.com/ros2/rmw_connext/issues/201\r\n\r\nThis adds overhead of graph wakeups and `service_is_ready` checks. We can only add that if connext is being used if we think it's worthwhile.\r\n\r\nStandard CI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=4448)](http://ci.ros2.org/job/ci_linux/4448/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1383)](http://ci.ros2.org/job/ci_linux-aarch64/1383/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=3630)](http://ci.ros2.org/job/ci_osx/3630/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=4513)](http://ci.ros2.org/job/ci_windows/4513/)\r\n\r\nCI repeating `test_client_scope_cpp` 100 times [with its timeout lowered from 60s to 10s](https://github.com/ros2/system_tests/commit/e798ee8976b922656f547148b8e3702ccaac7458): [![Build Status](https://ci.ros2.org/buildStatus/icon?job=ci_linux&build=4447)](https://ci.ros2.org/job/ci_linux/4447/) (used to be regularly [flaky with a 30s timeout](https://github.com/ros2/system_tests/pull/259/files))",
    "head_branch": "wfs_connext_race",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Workaround for wait_for_service lasting the full timeout with connext (#476)\n\n* Limit wait_for_graph_change timeout as alternative workaround for connext\r\n\r\n* Increase max wait time to 100ms"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179b618912b45d36a75cf",
    "number": 474,
    "body": "Addresses issue #473 \r\nUse `rosgraph_msgs/Clock` message for `/clock` topic instead of `builtin_interfaces/Time` to be compatible with ROS1.\r\nThis is needed for the `ros1_bridge` to effectively map `/clock` message when using Gazebo.\r\n\r\nconnects to #473 ",
    "head_branch": "use_rosgraph_clock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use rosgraph_msgs/Clock for /clock topic. (#474)\n\n* Use rosgraph_msgs/Clock for /clock topic.\r\n\r\n* Update the test cases."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179b718912b45d36a75d0",
    "number": 472,
    "body": "Added batching functionality where all pending executables are\r\ncollected prior to being executed. This should prevent\r\nlong running executables from backing up the processing when calling\r\nspin_some().\r\n\r\nConnects to #471",
    "head_branch": "prevent_spin_some_deadlock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179b818912b45d36a75d1",
    "number": 470,
    "body": "It looks like using the `std::shared_ptr` in the `std::bind` was causing the refcount to get incremented, so you end up with a dependency loop, and the object never gets properly cleaned up.\r\n\r\nFixes ros2/rclcpp#469 ",
    "head_branch": "bugfix/hanging_lifecycle_test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix bug when mixing shared_ptr and bind. (#470)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179b918912b45d36a75d2",
    "number": 468,
    "body": "Always finalize arguments because caller is responsible for freeing memory used by node options.\r\n\r\nreplaces ros2/rclcpp#467\r\n\r\nconnects to ros2/rcl#231",
    "head_branch": "rcl_node_init_arguments_copy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fini arguments passed to rcl_node_init() (#468)\n\n* Fix memory leak in node_base\r\n* Always free arguments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179ba18912b45d36a75d3",
    "number": 467,
    "body": "Connects to https://github.com/ros2/rclcpp/pull/461#issuecomment-385476452\r\n\r\nRunning valgrind with the proposed fix cleans up the memory leaked in the referenced `test_node`.",
    "head_branch": "Karsten1987-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179bb18912b45d36a75d4",
    "number": 466,
    "body": "Follow up of #439 \r\n\r\nOtherwise we may forget to update to the logging macros if we decide to uncomment that piece of code",
    "head_branch": "fprintf_in_comments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update to rcutils logging in commented code as well (#466)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179bc18912b45d36a75d5",
    "number": 463,
    "body": "We've been trying to eliminate steady-state memory allocation, and this was identified as one of the easiest things we could change to avoid an unnecessary memory allocation and customization point.\r\n\r\nCI:\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=4232)](http://ci.ros2.org/job/ci_linux/4232/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1271)](http://ci.ros2.org/job/ci_linux-aarch64/1271/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=3502)](http://ci.ros2.org/job/ci_osx/3502/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=4341)](http://ci.ros2.org/job/ci_windows/4341/)",
    "head_branch": "any_executable_by_reference",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "pass AnyExecutable objects as reference to avoid memory allocation (#463)\n\n* pass AnyExecutable objects as reference to avoid memory allocation\r\n\r\n* remove style change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179be18912b45d36a75d6",
    "number": 461,
    "body": "This adds a parameter for command line arguments to `Node`, and a parameter to ignore global CLI arguments. I think roslaunch might need something like this to dynamically compose nodes without their arguments affecting other nodes, though I'm not sure if there is another strategy planned.\r\n\r\n\r\nKind of related to ros2/examples#200 and ros2/ros2#450",
    "head_branch": "pass_cli_args_to_node",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add CLI args to Node constructor (#461)\n\n* Add CLI args to Node constructor\r\n\r\nAdds arguments and use_global_arguments to NodeBase\r\n\r\n* Check for integer overflow"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179bf18912b45d36a75d7",
    "number": 459,
    "body": "Clean up the arguments structure, which was previously leaking.\r\n\r\nConnects to ros2/rclcpp#458",
    "head_branch": "fix_issue_458",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Correctly clean up arguments structure. (#459)\n\n* Correctly clean up arguments structure.\r\n* Use zero-initialized structure."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179c018912b45d36a75d8",
    "number": 456,
    "body": "This is still a work in progress, but I wanted to capture the test case.\r\n\r\nConnected to ros2/rclcpp#392",
    "head_branch": "fix_single_thread_timer_starvation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179c118912b45d36a75d9",
    "number": 454,
    "body": "Addresses rclcpp component of ros2/rcl#219\r\n\r\nConnects to ros2/rcl#219",
    "head_branch": "remove_ros_arguments",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove ros arguments (#454)\n\n* Mark arguments vector as const.\r\n\r\n* Add C++ version of rcl_remove_ros_arguments"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179c218912b45d36a75da",
    "number": 453,
    "body": "Obviously it mean RCL_SYSTEM_TIME but not RCL_ROS_TIME in some test cases\r\n\r\nSigned-off-by: jwang <jing.j.wang@intel.com>",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix time type issue in time unittest (#453)\n\nObviously it mean RCL_SYSTEM_TIME but not RCL_ROS_TIME in some test cases\r\n\r\nSigned-off-by: jwang <jing.j.wang@intel.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179c318912b45d36a75db",
    "number": 452,
    "body": "Connects to ros2/rcutils#85\r\n\r\nReplaces https://github.com/ros2/rclcpp/pull/434",
    "head_branch": "timestamp_console_logging",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix tests due to changes in rcutils (#452)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179c418912b45d36a75dc",
    "number": 451,
    "body": "Connects to ros2/rcutils#97",
    "head_branch": "const_log_location",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "make log location parameter const (#451)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179c518912b45d36a75dd",
    "number": 450,
    "body": "Converts all rcl_*_t types in the memory allocation strategy to shared pointers to prevent crash happening when a subscriber is reset.\r\n\r\nIssue: #349",
    "head_branch": "issue-349-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixups"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179c618912b45d36a75de",
    "number": 449,
    "body": "Reverts ros2/rclcpp#448\r\n\r\n@guillaumeautran and @deng02 FYI.",
    "head_branch": "revert-448-revert-431-issue-349",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Revert \"Store the subscriber, client, service and timer\"\" (#449)\n\n* Revert \"Revert \"Store the subscriber, client, service and timer (#431)\" (#448)\"\r\n\r\nThis reverts commit 168d75cf1ec29ac92ce0e1dfc224c6db96b67167.\r\n\r\n* Convert all rcl_*_t types to shared pointers\r\n\r\nConverts all rcl_*_t types in the memory allocation strategy to shared pointers to prevent crash happening when a subscriber is reset.\r\n\r\nIssue: #349\r\n\r\n* fixups"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179c818912b45d36a75df",
    "number": 448,
    "body": "Reverts ros2/rclcpp#431\r\n\r\nUnfortunately this caused a regression in our tests that I misinterpreted as unrelated, see: https://github.com/ros2/build_cop/issues/96#issuecomment-372805876\r\n\r\n@guillaumeautran and @deng02 FYI. I'll open a revert of this revert after merging where we can discuss the way to get that test passing again.",
    "head_branch": "revert-431-issue-349",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Store the subscriber, client, service and timer (#431)\" (#448)\n\nThis reverts commit 36526469c7ef1a760ea4f236a7ba51ddcdb1272a."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179c918912b45d36a75e0",
    "number": 446,
    "body": "Connect to ros2/ros2#468.",
    "head_branch": "export_order",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "change export order for static linking (#446)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179ca18912b45d36a75e1",
    "number": 445,
    "body": "Connect to ~~ament/uncrustify#20~~. Connect to ament/uncrustify#21.\r\n\r\nReady for review.",
    "head_branch": "uncrustify_master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update style (#445)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179cb18912b45d36a75e2",
    "number": 444,
    "body": "Revival of https://github.com/ros2/rclcpp/pull/390\r\n\r\nConnects to ros2/ros2#306 but hasn't been tested with static linking ourselves\r\n\r\n- removed `rmw` dependency addition that seemed unrelated\r\n- updated to include `rclcpp_lifecycle`\r\n- [removed](https://github.com/ros2/rclcpp/commit/a346c90e92e08b9a1a10207613b94d170aeada90) the change from `exec_depend`ing on `ament_cmake` to `ament_cmake_ros` because from [this PR]() I inferred the dependency is for `normalize_path` from `ament_cmake` itself.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3978)](http://ci.ros2.org/job/ci_linux/3978/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=1091)](http://ci.ros2.org/job/ci_linux-aarch64/1091/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=3315)](http://ci.ros2.org/job/ci_osx/3315/) (unrelated linter errors)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=4080)](http://ci.ros2.org/job/ci_windows/4080/) (unrelated linter errors)",
    "head_branch": "use_ament_cmake_ros",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use ament_cmake_ros (#444)\n\n* Control shared/static linking via BUILD_SHARED_LIBS\r\n\r\n* Remove rmw dependency\r\n\r\n* Add for rclcpp_lifecycle too\r\n\r\n* exec depend on ament_cmake is for normalize_path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179cc18912b45d36a75e3",
    "number": 443,
    "body": "To go with https://github.com/ros2/rcl_interfaces/pull/32.\r\n\r\nThis PR includes the following:\r\n\r\n* Addition of parameter variants for byte arrays, bool arrays, int arrays, double arrays, and string arrays\r\n* Some method rearranging to match the enumeration in [ParameterType.msg](https://github.com/ros2/rcl_interfaces/blob/master/rcl_interfaces/msg/ParameterType.msg)\r\n* Added a common method for printing arrays of values. Booleans print as `true`/`false`, and bytes are printed as hexadecimal with a `0x` prefix.\r\n* I added tests for each parameter variant\r\n\r\nConnects to ros2/rcl_interfaces#32",
    "head_branch": "parameter-arrays",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding parameter array support (#443)\n\n* Adding parameter array support\r\n\r\n* PR feedback\r\n\r\n* Matching changes in upstream branch\r\n\r\n* EXPECT_EQ takes expected value a first argument and actual as second"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179cd18912b45d36a75e4",
    "number": 442,
    "body": "Resolves #441 ",
    "head_branch": "441-make-thread-count-configurable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add argument for thread count to multithreaded executor (#442)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179ce18912b45d36a75e5",
    "number": 439,
    "body": "Remove all printf log lines and replace with RCLUTILS_LOG_XXX macros.\r\n\r\nIssue: #438",
    "head_branch": "issue-438",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "rclcpp logging still uses fprintf all over the place. (#439)\n\n* rclcpp logging still uses fprintf all over the place.\r\n\r\nRemove all printf log lines and replace with RCLUTILS_LOG_XXX macros.\r\n\r\nIssue: #438\r\n\r\n* fixup include order"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179cf18912b45d36a75e6",
    "number": 437,
    "body": "Duration scale is a convinient operation which had supported in ROS.\r\nThis commit make ROS2 support it.\r\n\r\nSigned-off-by: jwang <jing.j.wang@intel.com>",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179d118912b45d36a75e7",
    "number": 436,
    "body": "Occurred when updating to `cppcheck` to 1.82 on macOS.\r\n\r\nSee: https://github.com/ros2/build_cop/issues/74#issuecomment-362724075",
    "head_branch": "fix_invalid_iterator_cppcheck",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "avoid using invalid iterator when erasing items using an iterator in a loop (#436)\n\n* avoid using invalid iterator when erasing items using an iterator in a loop\r\n\r\n* do not overwrite iterator in cases where it will be unused"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179d218912b45d36a75e8",
    "number": 435,
    "body": "Necessary since each item can potentially contain a `nullptr`.\r\n\r\nConnect to ros2/ros2#438.",
    "head_branch": "node_name_in_user_data",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "handle node names which are null (#435)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179d318912b45d36a75e9",
    "number": 434,
    "body": "Connects to ros2/rcutils#85",
    "head_branch": "timestamp_console_logging",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179d418912b45d36a75ea",
    "number": 433,
    "body": "connects to ros2/rcl#212\r\n\r\nI have a question on this PR. Which approach is more appropriate in the context of node interfaces:\r\n\r\n1. logging interface directly calling through to rcl using the node handle [(this commit)](https://github.com/ros2/rclcpp/commit/c440b0857c0cf97a5c2349c4ffdb74a75a71e712), or\r\n1. going through node_base [(this commit)](https://github.com/ros2/rclcpp/commit/88af1f2e39157f26257e30bf2826c0c063407355)?\r\n\r\nIt's not clear to me since on one hand the logger name is used (only) by the logging interface, but on the other hand at the rcl level it is tightly coupled to what seems to be the node \"base\".",
    "head_branch": "node_logger_name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Get node's logger name from rcl (#433)\n\n* Get logger name from rcl [direct]\r\n\r\n* Get logger name from rcl [indirect]\r\n\r\n* Update tests\r\n\r\n* fixup on variable usage\r\n\r\n* Move get_logger_name to NodeLogging interface"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179d518912b45d36a75eb",
    "number": 431,
    "body": "objects as shared pointers (#349)\r\n\r\nTo prevent an object from being deleted while the rcl_wait_set is\r\nusing raw pointers to internal members, we store them as shared\r\npointers.\r\n\r\nThe subscriptions are stored as a pair because a single\r\nsubscription handle can have both an intra and non-intra\r\nprocess handle being used by the wait set.  In order to\r\nremove objects based on null wait set handles, we need both.",
    "head_branch": "issue-349",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Store the subscriber, client, service and timer (#431)\n\n* Convert all rcl_*_t types to shared pointers\r\n\r\nConverts all rcl_*_t types in the memory allocation strategy to shared pointers to prevent crash happening when a subscriber is reset.\r\n\r\nIssue: #349\r\n\r\n* fixup! Convert all rcl_*_t types to shared pointers\r\n\r\n* fix { use on function definitions\r\n\r\nWe always put the { on a new line for function definitions and class declarations."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179d618912b45d36a75ec",
    "number": 429,
    "body": "closes ros2/rcutils#79\r\n\r\n@wjwwood, FYI\r\n",
    "head_branch": "ROS2time",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "change rcutils_time_point_value_t type from uint64_t to int64_t (#429)\n\n* change rcutils_time_point_value_t type from uint64_t to int64_t\r\n\r\n* small style changes\r\n\r\n* fix test time datatype\r\n\r\n* Update time primatives to int64_t\r\n\r\n* change time primitive datatype to signed\r\n\r\n* A few more instances of UL to L"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179d718912b45d36a75ed",
    "number": 428,
    "body": "Connects to ros2/rcl_interfaces#33",
    "head_branch": "byte_array_parameter_rename",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Byte array parameter rename (#428)\n\n* rename bytes_value to byte_values\r\n\r\n* adapt enum to new names\r\n\r\n* rename byte_values to byte_array_values\r\n\r\n* linters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179d818912b45d36a75ee",
    "number": 427,
    "body": "Current code do clear wait set after rcl_wait, it is not respond latency\r\nfriendly. In fact, clear wait set operation is not urgent, making sure it is\r\ndone before next rcl_wait should be fine. With this commit, ready task\r\nwill get executed more quickly \r\n\r\nSigned-off-by: jwang <jing.j.wang@intel.com>",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move clear wait set from after rcl_wait to ahead (#427)\n\n* Move clear wait set from after rcl_wait to ahead\r\n\r\nCurrent code clear wait set after rcl_wait, it is not respond latency\r\nfriendly. In fact, clear wait set operation is not urgent, making sure it is\r\ndone before next rcl_wait should be fine.\r\n\r\nSigned-off-by: jwang <jing.j.wang@intel.com>\r\n\r\n* remove trailing whitespace"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179d918912b45d36a75ef",
    "number": 426,
    "body": "`get_topic_name` and `rcl_service_get_service_name` may return NULL\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>",
    "head_branch": "nullderef",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the potential application crash issues (#426)\n\n* err msg\r\n\r\n* err msg\r\n\r\n* Fix the potential application crash issues\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>\r\n\r\n* minor tweak the code structure\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179da18912b45d36a75f0",
    "number": 425,
    "body": "Change rmw_count_publishers API to rcl equivalent rcl_count_publishers and remove the TODO comment from the source. \r\n\r\nSigned-off-by: Sriram Raghunathan <rsriram7@visteon.com>",
    "head_branch": "sriram_ardent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change rmw_count_publishers API, to rcl equivalent rcl_count_publishe‚Ä¶ (#425)\n\n* Change rmw_count_publishers API, to rcl equivalent rcl_count_publishers and remove the TODO line.\r\n\r\nSigned-off-by: Sriram Raghunathan <rsriram7@visteon.com>\r\n\r\n* Remove rmw_handle and refer to rcl_node_handle, change the API signature to topic_names.\r\n\r\nSigned-off-by: Sriram Raghunathan <rsriram7@visteon.com>\r\n\r\n* Use rcl_* specific functions to derive the fully qualified topic name.\r\n\r\nSigned-off-by: Sriram Raghunathan <rsriram7@visteon.com>\r\n\r\n* [nitpick] remove unnecessary variable storage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179dc18912b45d36a75f1",
    "number": 424,
    "body": "Connects to https://github.com/ros2/rcl/issues/199",
    "head_branch": "lifecycle_fini_follow_up",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "deallocate state and transition handles after call to fini (#424)\n\n* deallocate state and transition handles after call to fini\r\n\r\n* deallocate also when error occured"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179dd18912b45d36a75f2",
    "number": 423,
    "body": "Otherwise when captured by a lambda as in https://github.com/ros2/demos/pull/205/files#diff-f3c8fd029db528b5408e0a785999636eR135 it does not pass the `rclcpp::Logger` type check because it is `rclcpp::Logger &`\r\n\r\nCI windows including the logger usage in https://github.com/ros2/demos/pull/205: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3838)](http://ci.ros2.org/job/ci_windows/3838/) (`image_tools` testing passed)",
    "head_branch": "fix_windows_logger_ref",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow logger to be passed into macros as a reference (#423)\n\n* Remove reference for logger so it can be rclcpp::Logger &\r\n\r\nThis is the type when captured by reference in a lambda; windows can't\r\nresolve it without.\r\n\r\n* Wrap lines"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179de18912b45d36a75f3",
    "number": 422,
    "body": "I think there might be some linter failures the _just_ started appearing on master.. still checking it's not just from my PR; opening to avoid duplicating efforts.\r\n\r\n[![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=891)](http://ci.ros2.org/job/ci_linux-aarch64/891/)",
    "head_branch": "fix_linters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179df18912b45d36a75f4",
    "number": 420,
    "body": "This is a workaround for https://github.com/ros2/rmw_opensplice/issues/216 if we can't resolve it for the pending release this should make things work. \r\n\r\nIn local testing I'm seeing some general overall timeouts with opensplice.\r\n",
    "head_branch": "rcl_interfaces_time_fallback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179e018912b45d36a75f5",
    "number": 419,
    "body": "Connects to https://github.com/ros2/rclcpp/issues/394\r\n\r\nThis is a redo of https://github.com/ros2/rclcpp/pull/395 split up into each individual issue, which is associated to it. This should help the review process.\r\n\r\nThis can only be merged after #418 has been merged.",
    "head_branch": "fix-394",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix 394 (#419)\n\n* copy and assignment operator for state\r\n\r\ncopy and assignment operator for transition\r\n\r\nremove unused const_casts\r\n\r\naddress comments\r\n\r\ncheck for null in copy constructor\r\n\r\nup\r\n\r\nuse init and fini functions from rcl\r\n\r\nremove unused include\r\n\r\n* explicitly zero initialize state and transitions\r\n\r\n* add todo comment for follow up"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179e118912b45d36a75f6",
    "number": 418,
    "body": "Connects to https://github.com/ros2/rclcpp/issues/393\r\n\r\nThis is a redo of https://github.com/ros2/rclcpp/pull/395 split up into each individual issue, which is associated to it. This should help the review process.\r\n\r\nRegarding https://github.com/ros2/rclcpp/pull/395#discussion_r154537015:\r\nThe `label` stays a `const char *` and get deallocated with a const cast. This is then the same practice as https://github.com/ros2/rmw_fastrtps/blob/master/rmw_fastrtps_cpp/src/rmw_node.cpp#L142\r\n",
    "head_branch": "fix-393",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix 393 (#418)\n\n* correctly copy state label\r\n\r\n* correctly copy transition label\r\n\r\n* uncrustify\r\n\r\n* address comments\r\n\r\n* up\r\n\r\n* use init and fini functions from rcl"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179e218912b45d36a75f7",
    "number": 417,
    "body": "Follow up to #407 for symmetry of the API.\r\n\r\nLinux: [![Build Status](http://ci.ros2.org/job/ci_linux/3718/badge/icon)](http://ci.ros2.org/job/ci_linux/3718/)\r\nLinux Aarch64: [![Build Status](http://ci.ros2.org/job/ci_linux-aarch64/876/badge/icon)](http://ci.ros2.org/job/ci_linux-aarch64/876/)\r\nOSX: [![Build Status](http://ci.ros2.org/job/ci_osx/3054/badge/icon)](http://ci.ros2.org/job/ci_osx/3054/)\r\nWindows: [![Build Status](http://ci.ros2.org/job/ci_windows/3814/badge/icon)](http://ci.ros2.org/job/ci_windows/3814/)",
    "head_branch": "lifecycle_clock",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Mirror clock API from Node to LifecycleNode (#417)\n\n* Mirror clock API from Node to LifecycleNode\r\n\r\nFollow up to #407\r\n\r\n* adding headers for completeness"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179e318912b45d36a75f8",
    "number": 416,
    "body": "This is following a decision we made Nov '16 but hadn't followed up on. Summary in https://github.com/ros2/rclcpp/pull/410#issuecomment-348305379.\r\n\r\nThe reasoning for doing it now is because doing it while in beta we won't have to deprecate the old format. If that's too aggressive we can look into the suggestion in https://github.com/ros2/rclcpp/pull/410#issuecomment-348361651.\r\n\r\nMy opinion on the priority is that this should be in before we tag but doesn't necessarily need to be in before testing since it will be clear from compilation whether or not it's been done correctly. I have a bunch of changes to other packages ready.\r\n\r\nSo far I've removed namespaces that only had classes. They are not always exactly matching the class name e.g. `parameter_client::` had `AsyncParamtersClient` and `SyncParametersClient`, so let me know if I went too extreme and we can easily revert individual commits.\r\n- `publisher::`\r\n- `subscription::`\r\n- `client::`\r\n- `service::`\r\n- `parameter_client::`\r\n- `paramter_service::`\r\n- `rate::`\r\n- `timer::`\r\n- `node::`\r\n- `any_service_callback::`\r\n- `any_subscription_callback::`\r\n- `context::`\r\n- `event::`\r\n- `executors::single_threaded_executor::SingleThreadedExecutor` -> `executors::SingleThreadedExecutor`\r\n- `executors::multi_threaded_executor::MultiThreadedExecutor` -> `executors::MultiThreadedExecutor`\r\n\r\nI removed the now-unnecessary namespace escalations from `rclcpp/rclcpp.hpp` but left the includes for those files because FWIU we still want users to not have to include the headers themselves.\r\n\r\n---\r\n\r\nThere are some namespaces that have more than just classes so I wanted to check what to do with them:\r\n\r\n- `executor::` has `executor::Executor` the class, but also:\r\n  - `executor::AnyExecutable` a struct\r\n  - `executor::FutureReturnCode` an enum\r\n  - `executor::ExecutorArgs` a struct\r\n\r\n- `parameter::` has\r\n  - `parameter::ParameterVariant` class\r\n  - `parameter::ParameterType` an enum\r\n  - `parameter::operator<<`\r\n\r\nPerhaps just move `rclcpp::executor::Executor` -> `rclcpp:Executor` and leave the others as is?",
    "head_branch": "remove_ns_escalation",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove namespaces and namespace escalation e.g. `node::` (#416)\n\n* Remove publisher:: namespace\r\n\r\n* Remove subscription:: namespace\r\n\r\n* Remove client:: namespace\r\n\r\n* Remove service:: namespace\r\n\r\n* Remove parameter_client:: namespace\r\n\r\n* Remove parameter_service:: namespace\r\n\r\n* Remove rate:: namespace\r\n\r\n* Remove timer:: namespace\r\n\r\n* Remove node:: namespace\r\n\r\n* Remove any_service_callback:: namespace\r\n\r\n* Remove any_subscription_callback:: namespace\r\n\r\n* Remove event:: namespace\r\n\r\n* Remove ContextSharedPtr escalation\r\n\r\nUsers can use the  directive themselves if they want\r\n\r\n* Remove single_threaded_executor:: namespace\r\n\r\n* Remove multi_threaded_executor:: namespace\r\n\r\n* Remove context:: namespace\r\n\r\n* node:: removal from new logger additions\r\n\r\n* Fix linter issues that has been triggered with uncrustify\r\n\r\n* Remove utilities:: namespace"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179e518912b45d36a75f9",
    "number": 415,
    "body": "In https://github.com/ros2/demos/pull/203/files#diff-a5a151889abb3214250ba9db05358e4bR83 I was trying to call `set_parameters()` on an async parameter client in the callback of another `set_parameters` call, but it would never send the request.\r\n\r\n@wjwwood helped me realise it had deadlocked waiting for the mutex.",
    "head_branch": "recursive_client_call",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow client to trigger another service call from its callback (#415)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179e618912b45d36a75fa",
    "number": 414,
    "body": "Async parameter clients have an optional callback in the `set_parameters` method, but it's not used in the demos.\r\n\r\nI tried to use it in https://github.com/ros2/demos/pull/203/files#diff-a5a151889abb3214250ba9db05358e4bR92 but it caused a segfault because the callback was being captured as a reference that became invalid by the time it was called from the callback of the parameter clients's internal client.",
    "head_branch": "parameter_client_callback_ref",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Prevent callback from being captured as a reference (#414)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179e718912b45d36a75fb",
    "number": 413,
    "body": "Closes ros2/rclcpp#409\r\n\r\nI only did this for parameter clients: parameter services still need to be created outside of the constructor, but this is not something that we expect users to have to do manually in the long term.",
    "head_branch": "parameter_client_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow creating parameter client from constructor of Node subclass (#413)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179e818912b45d36a75fc",
    "number": 412,
    "body": "connects to ros2/rcutils#77",
    "head_branch": "severity_threshold",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename severity_threshold -> level (#412)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179e918912b45d36a75fd",
    "number": 411,
    "body": "_This code change is one step in the higher-level Logging feature, see: https://github.com/ros2/ros2/issues/425 for others_\r\n\r\nThis adds a `Logger` class, the `node->get_logger()` method, and the `rclcpp::get_logger(name)` free function for non-node loggers.\r\n\r\nLogging macros _must_ now have a logger object passed as the first argument (instead of a name as previously accepted). I added https://github.com/ros2/rclcpp/blob/ed590ad41e722e7c4015136d956416b6ce1b44a3/rclcpp/resource/logging.hpp.em#L47 to give something more useful than a wall of macro errors if users try to pass a string: open to other implementation suggestions.\r\n\r\nThe Logger class is based off a rough implementation initially by @wjwwood. The node's logger is implemented as an interface on @Karsten1987's suggestion to support the use case of composing a lightweight Node that does not include or \"pay for\" the logger interface. Additionally, even if using the logger interface, logging functionality can be minimised with the preprocessor directive `RCLCPP_LOGGING_ENABLED` set to false.\r\n\r\nTodo before merge:\r\n- [x] remove logger namespace following https://github.com/ros2/rclcpp/pull/410#issuecomment-348305379\r\n- [x] do whatever needs to be done for lifecycle_nodes to have a logger (haven't investigated yet)\r\n\r\nOther todos listed in the code are planned as follow-up PRs.\r\n\r\nci windows [![Build Status](http://ci.ros2.org/job/ci_windows/3748//badge/icon)](http://ci.ros2.org/job/ci_windows/3748/)",
    "head_branch": "node_loggers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add Logger class and give one to nodes (#411)\n\n* Add Logger class and give one to nodes\r\n\r\n* Try to improve compiler errors when non-Logger is passed to macros\r\n\r\n* Add define for 'disabling' loggers\r\n\r\n* Add/update tests\r\n\r\n* Linter fix\r\n\r\n* Documentation\r\n\r\n* Windows fix\r\n\r\n* Move free functions to source file (windows was upset)\r\n\r\n* Fix windows by changing prototype ordering\r\n\r\n* Store node logger in NodeBase\r\n\r\n* Windows is not happy with this EXPECT_ANY_THROW\r\n\r\n* Move get_logger to a NodeLogger interface\r\n\r\n* Move Logger into 'logger' namespace\r\n\r\n* Move helper function for macro errors into macro header\r\n\r\n* Remove 'logger' namespace\r\n\r\n* Return type on separate line\r\n\r\n* Update copyright year\r\n\r\n* Give lifecycle nodes a logger\r\n\r\n* Add test for lifecycle node logger\r\n\r\nMove the default_state_machine tests to another file because having\r\ndifferent test fixtures was causing init to be called twice.\r\n\r\n* Switch to static_assert for logger check\r\n\r\n* global ns scope in macro calls\r\n\r\njust in case\r\n\r\n* Revert \"Add test for lifecycle node logger\" (make diff smaller)\r\n\r\ndemos use the loggers and we don't test other node stuff in lifecycle_node\r\n\r\n* Update for rcutils function name change\r\n\r\n* Add reference to Node::get_logger() in doxygen\r\n\r\n* Rename NodeLoggerInterface to NodeLoggingInterface"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179ea18912b45d36a75fe",
    "number": 410,
    "body": "Publishers and subscribers had been escalated but not services and clients. This was causing inconsistent usage in demos\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3646)](http://ci.ros2.org/job/ci_linux/3646/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=826)](http://ci.ros2.org/job/ci_linux-aarch64/826/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2982)](http://ci.ros2.org/job/ci_osx/2982/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3747)](http://ci.ros2.org/job/ci_windows/3747/)",
    "head_branch": "escalated_namespaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Escalate more namespaces e.g. rclcpp::Service (#410)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179eb18912b45d36a75ff",
    "number": 408,
    "body": "connects to ros2/rmw#131",
    "head_branch": "wait_set_two_words",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "waitset -> wait_set (#408)\n\n* waitset -> wait_set\r\n\r\n* cpplint\r\n\r\n* use wait set in doc\r\n\r\n* doc fixup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179ec18912b45d36a7600",
    "number": 407,
    "body": "This is adding a `get_clock` and `now` methods to the Node API.\r\n\r\nLinux: [![Build Status](http://ci.ros2.org/job/ci_linux/3609/badge/icon)](http://ci.ros2.org/job/ci_linux/3609/)\r\nLinux Aarch64: [![Build Status](http://ci.ros2.org/job/ci_linux-aarch64/796/badge/icon)](http://ci.ros2.org/job/ci_linux-aarch64/796/)\r\nOSX: [![Build Status](http://ci.ros2.org/job/ci_osx/2943/badge/icon)](http://ci.ros2.org/job/ci_osx/2943/)\r\nWindows: [![Build Status](http://ci.ros2.org/job/ci_windows/3699/badge/icon)](http://ci.ros2.org/job/ci_windows/3699/)",
    "head_branch": "time_interface_node",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a clock interface to the Node API (#407)\n\nnode clock interface lower level abstraction\r\nUpdate node and node interface to expose get_clock and now.\r\nadd unit tests to cover node clock API"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179ed18912b45d36a7601",
    "number": 406,
    "body": "Fixes #401 \r\n\r\nLinux: [![Build Status](http://ci.ros2.org/job/ci_linux/3584/badge/icon)](http://ci.ros2.org/job/ci_linux/3584/)\r\nLinux aarch64: [![Build Status](http://ci.ros2.org/job/ci_linux-aarch64/779/badge/icon)](http://ci.ros2.org/job/ci_linux-aarch64/779/)\r\nOSX: [![Build Status](http://ci.ros2.org/job/ci_osx/2926/badge/icon)](http://ci.ros2.org/job/ci_osx/2926/)\r\nWIndows: [![Build Status](http://ci.ros2.org/job/ci_windows/3676/badge/icon)](http://ci.ros2.org/job/ci_windows/3676/)",
    "head_branch": "clock_callback_erase",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Resolve erase race condition. (#406)\n\nFixes #401\r\n\r\nExtend time source tests to allocate and deallocate callback handlers."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179ef18912b45d36a7602",
    "number": 405,
    "body": "`rmw_*_validation_result_string(validation_result)` may return NULL,\r\nand it's dereferenced by passing arg to `NameValidationError`, this \r\nleads unexpected behaviors and NULL is deprecated to use in C++ now.\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>\r\n\r\nConnects to ros2/rmw#130",
    "head_branch": "bugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix the dereference to NULL (#405)\n\n* Fix the dereference to NULL\r\nrmw_*_validation_result_string(validation_result) may return NULL,\r\nand it's dereferenced by passing arg to NameValidationError\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>\r\n\r\n* address NULL case of undefined type\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>\r\n\r\n* Address the issue to deference to NULL with adapt\r\nto the change of API rmw_*_validation_result_string\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>\r\n\r\n* revise the typo\r\n\r\n* throw exception when valid rmw check but invalid rcl check\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179f018912b45d36a7603",
    "number": 404,
    "body": "I ran into this exception when writing unit tests for time_source. The nodes should be cleared from being associated with the executor when the executor is destructing. Otherwise the node can never be reused.\r\n\r\nLinux: [![Build Status](http://ci.ros2.org/job/ci_linux/3581/badge/icon)](http://ci.ros2.org/job/ci_linux/3581/)\r\nLinux aarch64 [![Build Status](http://ci.ros2.org/job/ci_linux-aarch64/777/badge/icon)](http://ci.ros2.org/job/ci_linux-aarch64/777/)\r\nOSX: [![Build Status](http://ci.ros2.org/job/ci_osx/2921/badge/icon)](http://ci.ros2.org/job/ci_osx/2921/)\r\nWIndow:  [![Build Status](http://ci.ros2.org/job/ci_windows/3674/badge/icon)](http://ci.ros2.org/job/ci_windows/3674/)",
    "head_branch": "detach_nodes_from_executors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "detach nodes from executors in destruction. (#404)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179f118912b45d36a7604",
    "number": 403,
    "body": "It seems the interface for `std::count` has been modified. This fixes the following compiler error.\r\n\r\n```\r\n+++ Building 'rclcpp'\r\nRunning cmake because arguments have changed.\r\n==> '. /home/allenh1/ros2_ws/build/rclcpp/cmake__build.sh && /usr/bin/cmake /home/allenh1/ros2_ws/src/ros2/rclcpp/rclcpp -DBUILD_TESTING=0 -DAMENT_CMAKE_SYMLINK_INSTALL=1 -DPYTHON_INSTALL_DIR=install/lib/python3.5/site-packages -DCMAKE_CXX_COMPILER=g++ -DCMAKE_COMPILER=gcc -DCMAKE_INSTALL_PREFIX=/home/allenh1/ros2_ws/install' in '/home/allenh1/ros2_ws/build/rclcpp'\r\n-- The C compiler identification is GNU 6.4.0\r\n-- The CXX compiler identification is GNU 8.0.0\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /home/allenh1/bin/g++\r\n-- Check for working CXX compiler: /home/allenh1/bin/g++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Found ament_cmake: 0.0.3 (/home/allenh1/ros2_ws/install/share/ament_cmake/cmake)\r\n-- Found PythonInterp: /usr/bin/python3 (found suitable version \"3.5.4\", minimum required is \"3\") \r\n-- Using PYTHON_EXECUTABLE: /usr/bin/python3\r\n-- Override CMake install command with custom implementation using symlinks instead of copying resources\r\n-- Found builtin_interfaces: 0.0.3 (/home/allenh1/ros2_ws/install/share/builtin_interfaces/cmake)\r\n-- Found rcl: 0.0.3 (/home/allenh1/ros2_ws/install/share/rcl/cmake)\r\n-- Found rmw_implementation_cmake: 0.0.3 (/home/allenh1/ros2_ws/install/share/rmw_implementation_cmake/cmake)\r\n-- Using RMW implementation 'rmw_fastrtps_cpp' as default\r\n-- Found rmw_fastrtps_cpp: 0.0.3 (/home/allenh1/ros2_ws/install/share/rmw_fastrtps_cpp/cmake)\r\n-- Found fastrtps_cmake_module: 0.0.3 (/home/allenh1/ros2_ws/install/share/fastrtps_cmake_module/cmake)\r\n-- Found FastRTPS: /home/allenh1/ros2_ws/install/include  \r\n-- Configuring done\r\n-- Generating done\r\nCMake Warning:\r\n  Manually-specified variables were not used by the project:\r\n\r\n    CMAKE_COMPILER\r\n    PYTHON_INSTALL_DIR\r\n\r\n\r\n-- Build files have been written to: /home/allenh1/ros2_ws/build/rclcpp\r\n==> '. /home/allenh1/ros2_ws/build/rclcpp/cmake__build.sh && /usr/bin/make -j8 -l8' in '/home/allenh1/ros2_ws/build/rclcpp'\r\n[  2%] Expanding logging.hpp.em\r\nScanning dependencies of target rclcpp\r\n[  5%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/any_executable.cpp.o\r\n[  7%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/callback_group.cpp.o\r\n[ 10%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/client.cpp.o\r\n[ 15%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/context.cpp.o\r\n[ 15%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/clock.cpp.o\r\n[ 17%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/duration.cpp.o\r\n[ 20%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/contexts/default_context.cpp.o\r\n[ 23%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/event.cpp.o\r\n[ 25%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/exceptions.cpp.o\r\n[ 28%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/executor.cpp.o\r\n[ 30%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/executors.cpp.o\r\n[ 33%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/expand_topic_or_service_name.cpp.o\r\n[ 35%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/executors/multi_threaded_executor.cpp.o\r\n[ 38%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/executors/single_threaded_executor.cpp.o\r\n[ 41%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/graph_listener.cpp.o\r\n[ 43%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/intra_process_manager.cpp.o\r\n[ 46%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/intra_process_manager_impl.cpp.o\r\n[ 48%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/memory_strategies.cpp.o\r\n[ 51%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/memory_strategy.cpp.o\r\n[ 53%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/node.cpp.o\r\n[ 56%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/node_interfaces/node_base.cpp.o\r\n[ 58%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/node_interfaces/node_graph.cpp.o\r\n[ 61%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/node_interfaces/node_parameters.cpp.o\r\n[ 64%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/node_interfaces/node_services.cpp.o\r\n[ 66%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/node_interfaces/node_timers.cpp.o\r\n[ 69%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/node_interfaces/node_topics.cpp.o\r\n/home/allenh1/ros2_ws/src/ros2/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp: In lambda function:\r\n/home/allenh1/ros2_ws/src/ros2/rclcpp/rclcpp/src/rclcpp/node_interfaces/node_parameters.cpp:217:86: error: lvalue required as unary ‚Äò&‚Äô operand\r\n             (static_cast<uint64_t>(std::count(substr.begin(), substr.end(), separator)) < depth);\r\n                                                                                      ^\r\n[ 71%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/parameter.cpp.o\r\n[ 74%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/parameter_client.cpp.o\r\n[ 76%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/parameter_service.cpp.o\r\n[ 79%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/publisher.cpp.o\r\n[ 82%] Building CXX object CMakeFiles/rclcpp.dir/src/rclcpp/service.cpp.o\r\nmake[2]: *** [CMakeFiles/rclcpp.dir/build.make:596: CMakeFiles/rclcpp.dir/src/rclcpp/node_interfaces/node_parameters.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[1]: *** [CMakeFiles/Makefile2:100: CMakeFiles/rclcpp.dir/all] Error 2\r\nmake: *** [Makefile:130: all] Error 2\r\n\r\n<== Command '. /home/allenh1/ros2_ws/build/rclcpp/cmake__build.sh && /usr/bin/make -j8 -l8' failed in '/home/allenh1/ros2_ws/build/rclcpp' with exit code '2'\r\n<== Command '. /home/allenh1/ros2_ws/build/rclcpp/cmake__build.sh && /usr/bin/make -j8 -l8' failed in '/home/allenh1/ros2_ws/build/rclcpp' with exit code '2'\r\n```",
    "head_branch": "fix-gcc8-compile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove const modifier to prevent compiler error for GCC 8. (#403)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179f218912b45d36a7605",
    "number": 402,
    "body": "Fixing regression flagged here: https://github.com/ros2/rclcpp/pull/371#issuecomment-345148104\r\n\r\nI'm tracking a full fix in #401\r\n\r\nWindows Debug Build: [![Build Status](http://ci.ros2.org/job/ci_windows/3657/badge/icon)](http://ci.ros2.org/job/ci_windows/3657/)",
    "head_branch": "fix_windows_debug",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "work around windows failing debug test. Ticketing full debugging separately. (#402)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179f318912b45d36a7606",
    "number": 400,
    "body": "",
    "head_branch": "wjwwood-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "small doc touchup (#400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179f418912b45d36a7607",
    "number": 399,
    "body": "fixes #398 \r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3563)](http://ci.ros2.org/job/ci_linux/3563/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=761)](http://ci.ros2.org/job/ci_linux-aarch64/761/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2906)](http://ci.ros2.org/job/ci_osx/2906/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3655)](http://ci.ros2.org/job/ci_windows/3655/)",
    "head_branch": "fix_398",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "include cstdlib for std::abs function (#399)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179f518912b45d36a7608",
    "number": 396,
    "body": "[edit dhood] connect to ros2/rclcpp#397\r\n\r\nWhen the return value of rcl_take_response() is not equal to RCL_RET_OK,\r\nwe need reset the error to avoid being overwritten.",
    "head_branch": "reset-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179f618912b45d36a7609",
    "number": 395,
    "body": "fixes ros2/rclcpp#393\r\nfixes #394\r\n\r\n@gaoethan fyi\r\n\r\nCI:\r\n\r\nWinD: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3553)](http://ci.ros2.org/job/ci_windows/3553/)\r\nLinux: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3504)](http://ci.ros2.org/job/ci_linux/3504/)\r\nOSX: ",
    "head_branch": "constructors_and_assignment",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179f718912b45d36a760a",
    "number": 391,
    "body": "This came out of review of https://github.com/ros2/rclcpp/pull/371#discussion_r146718046\r\n",
    "head_branch": "parameter_event_zipper",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "provide a class to filter parameter events conveniently based on name and type of parameter event (#391)\n\nadding test for parameter events filter"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179f918912b45d36a760b",
    "number": 390,
    "body": "Not ready for review, just submitted this so that it's added to ros2/ros2#306",
    "head_branch": "honor-build-shared-libs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179fa18912b45d36a760c",
    "number": 389,
    "body": "~Requires ros2/ament_cmake_ros#2~\r\n\r\nThese are wrappers around rcutils' logging macros (see details below) ~that inject the package name as the default name/prefix name, based on the decision in https://github.com/ros2/demos/pull/184~",
    "head_branch": "logging_macros",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Implement rclcpp-specific logging macros [taking name not object] (#389)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179fb18912b45d36a760d",
    "number": 388,
    "body": "Connects to ros2/demos#185",
    "head_branch": "expose_cdr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "*_raw function (#388)\n\n* publish_raw function\r\n\r\n* subscription traits\r\n\r\n* listener raw\r\n\r\n* rebased\r\n\r\n* cleanup and linters\r\n\r\n* explicit test for deleter in unique_ptr\r\n\r\n* add missing copyright\r\n\r\n* cleanup\r\n\r\n* add rmw_serialize functions\r\n\r\n* linters\r\n\r\n* explicit differentiation between take and take_raw\r\n\r\n* cleanup debug messages\r\n\r\n* rename to rmw_message_init`\r\n\r\n* address comments\r\n\r\n* address review comments\r\n\r\n* raw->serialized\r\n\r\n* use size_t (#497)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179fc18912b45d36a760e",
    "number": 387,
    "body": "connects to ros2/rclcpp#385\r\n\r\nci:\r\nlinux: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3339)](http://ci.ros2.org/job/ci_linux/3339/)\r\nosx: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2669)](http://ci.ros2.org/job/ci_osx/2669/)\r\nwin: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3389)](http://ci.ros2.org/job/ci_windows/3389/) (unrelated test failures)",
    "head_branch": "move_callback",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "move callback (#387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662179fd18912b45d36a760f",
    "number": 386,
    "body": "As per subject.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "macros: fix two minor typos in doxygen. (#386)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179fe18912b45d36a7610",
    "number": 384,
    "body": "As per subject.\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "lifecycle: fix minor typo in LC pub Doxygen (#384)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662179ff18912b45d36a7611",
    "number": 383,
    "body": "@sloretz pointed this issue out to me when he was working on the Python executor. This is an issue that only occurs when the multi-threaded executor and reentrant callback groups are used together.\r\n\r\nIf you imagine each thread in the multi-threaded executor doing this:\r\n\r\n- acquire lock\r\n- wait for work\r\n- release lock\r\n- take (or \"claim\") work (`rcl_take` for subscribers, call for timers)\r\n- pass work to user callback\r\n- loop\r\n\r\nIf a context switch happens directly after releasing the lock, it's possible another thread can take the same work. This is because of how the \"wait for work\" part works, which is to:\r\n\r\n- for each callback group, if it can be taken from, loop over its items\r\n  - items include subscriptions, timers, and client/servers for services\r\n- add each item to the wait set\r\n- wait\r\n- return the next thing that is ready when wait wakes up\r\n\r\nSo if all of this happens in the other thread again, before the original thread can take or claim the work to be done, then a second thread would try to take or claim the same work.\r\n\r\nFor subscriptions and clients/servers of services this is protected by some form of `rcl_take` which can fail if called twice on the same subscription and only one piece of data is available. However timers could be called multiple times, since whether or not a timer should be called and calling it are decoupled.\r\n\r\nIn this pr I was able to expose this issue by adding an option for the multithreaded executor to yield after releasing the lock and using a test which has a reentrant callback group and timer. Reproducing it with a subscription would be a good bit harder I think due to the asynchronous nature of the process.\r\n\r\nI'm opening this as a work in progress for visibility, but I'm on the right track to having a reproducible test failure.\r\n\r\nFor the fix, which has not been made yet, it will require taking or claiming the work to be done inside of the multithreading lock, which might require a change to the executor API.",
    "head_branch": "fix_executor_extra_take",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "executor could take more than once incorrectly (#383)\n\n* Baseline test and force threads to yield.\r\n\r\n* Add timer tracking for executor.\r\n\r\n* Add locking and test happy-path exit conditions.\r\n\r\n* Move logic to multi_threaded_executor\r\n\r\n* Address reviewer feedback by reducing scope of set.\r\n\r\n* Expand tolerance on testing.\r\n\r\n* comment fixup\r\n\r\nOtherwise it seemed to me like it would yield twice."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a0018912b45d36a7612",
    "number": 382,
    "body": "Connect to ament/uncrustify#18.",
    "head_branch": "remove_indent_off",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #382 from ros2/remove_indent_off\n\nremove obsolete INDENT-OFF usage"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0118912b45d36a7613",
    "number": 381,
    "body": "Connect to ament/uncrustify#18.",
    "head_branch": "uncrustify_master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #381 from ros2/uncrustify_master\n\nupdate style to match latest uncrustify"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a0318912b45d36a7614",
    "number": 380,
    "body": "connects to ros2/rclcpp#365\r\n\r\nci:\r\nwin: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3318)](http://ci.ros2.org/job/ci_windows/3318/)  warnings unrelated\r\nlinux: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3277)](http://ci.ros2.org/job/ci_linux/3277/)\r\nosx: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2611)](http://ci.ros2.org/job/ci_osx/2611/)\r\n",
    "head_branch": "remote_node_sync_parameter_client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "sync parameter takes optional remote node name (#380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0418912b45d36a7615",
    "number": 379,
    "body": "This makes sure an allocator given to an `std::map` has the correct type.\r\n\r\nTesting not yet in progress, resolving random CI issues so I have an OSX machine to test on first.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3269)](http://ci.ros2.org/job/ci_linux/3269/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=554)](http://ci.ros2.org/job/ci_linux-aarch64/554/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2604)](http://ci.ros2.org/job/ci_osx/2604/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3313)](http://ci.ros2.org/job/ci_windows/3313/)\r\n\r\nConnects to ros2/rclcpp#378",
    "head_branch": "static_assert_intra_process_manager",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix static assertion on xcode 9 (#379)\n\n* Change allocator type to match map key"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0518912b45d36a7616",
    "number": 376,
    "body": "Just something I noticed while debugging.",
    "head_branch": "throw_fixup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use throw_from_rcl_error() for error state cleanup (#376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0618912b45d36a7617",
    "number": 375,
    "body": "I found these while working on the rviz port.\r\n\r\n- Provide a default argument for the single argument constructor, making the class trivially constructible (? not sure if that's the correct term, or maybe trivially default constructible)\r\n  - This is needed to allow it to be used with Qt's signals and slots\r\n- Change the `operator=` methods to return `Time &`\r\n  - https://stackoverflow.com/questions/9072169/why-should-the-assignment-operator-return-a-reference-to-the-object\r\n- Added the `operator!=`",
    "head_branch": "rviz_features/time_improvements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improvements to rclcpp::Time (#375)\n\n* enable Time to be trivially constructible\r\n\r\nThis is required to use it in a Qt Signal/Slot.\r\n\r\n* operator= should return T &\r\n\r\nSee: https://stackoverflow.com/questions/9072169/why-should-the-assignment-operator-return-a-reference-to-the-object\r\n\r\n* add operator!="
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0718912b45d36a7618",
    "number": 374,
    "body": "In https://github.com/ros2/demos/issues/170 I noticed the error message would have the location appended each time it occurred. This resets the error message after all occurrences of `rcl_get_error_string_safe` in the file.\r\n\r\nThis doesn't need to be merged before beta3.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3218)](http://ci.ros2.org/job/ci_linux/3218/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=538)](http://ci.ros2.org/job/ci_linux-aarch64/538/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2574)](http://ci.ros2.org/job/ci_osx/2574/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3285)](http://ci.ros2.org/job/ci_windows/3285/)",
    "head_branch": "reset_errors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Reset rcl errors (#374)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0818912b45d36a7619",
    "number": 373,
    "body": "follow up of https://github.com/ros2/rclcpp/pull/271\r\n\r\nthis is the minimum change required to fix https://github.com/ros2/demos/issues/170. As in https://github.com/ros2/rclcpp/issues/263, the code doesn't actually get into an error state, so it would be safe for us to defer this change to after beta3, but I am proposing it for merge to prevent questions from users who see the error message.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3217)](http://ci.ros2.org/job/ci_linux/3217/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=537)](http://ci.ros2.org/job/ci_linux-aarch64/537/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2573)](http://ci.ros2.org/job/ci_osx/2573/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3284)](http://ci.ros2.org/job/ci_windows/3284/)",
    "head_branch": "fix_take_response_error",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Check for the client error code, not server (#373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0918912b45d36a761a",
    "number": 372,
    "body": "Follow up of https://github.com/ros2/rclcpp/pull/367#issuecomment-328581361\r\n\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3216)](http://ci.ros2.org/job/ci_linux/3216/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=536)](http://ci.ros2.org/job/ci_linux-aarch64/536/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2572)](http://ci.ros2.org/job/ci_osx/2572/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3283)](http://ci.ros2.org/job/ci_windows/3283/)",
    "head_branch": "restore_dot_separator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "restore . as parameter separator (#372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0a18912b45d36a761b",
    "number": 371,
    "body": "Connects to ros2/rcl#164\r\nContinuing to follow up ros2/design#144\r\n\r\nThis implements a TimeSource in rclcpp, adds the Clock class. \r\n\r\nThis still has many of the in progress commits, I'd suggest focusing on the overall diff. I'll clean up the history later.\r\n\r\n@wjwwood Do you still have the Time/Duration updates pending?\r\n\r\nAnother question that is not resolved yet is how to make setting a Clock up easily with a Node. The current design is very modular but requires overhead to connect the TimeSource, node, and Clock all together. Suggestions for integrating them into the Node API would be appreciated, however I will probably hold off on that for this round and just say use the modular API. \r\n`Clock clock; TimeSource ts(node); ts.associateClock(clock);`\r\n\r\nBefore this passes CI a set of coordinated changes to all usages of rclcpp::Time::now() like above.",
    "head_branch": "time_source",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update rclcpp to use the refactored TimeSource Clock logic (#371)\n\nThis implements a TimeSource in rclcpp, adds the Clock class."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a0b18912b45d36a761c",
    "number": 369,
    "body": "",
    "head_branch": "fix-test-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #369 from csukuangfj/fix-test-typo\n\nfix a typo."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0d18912b45d36a761d",
    "number": 368,
    "body": "I had to refactor the constructor of the AsyncParameterClient in order to create an instance of it from a lifecycle node.\r\n\r\nThe current implementation keeps a handle on the original node pointer: \r\nhttps://github.com/ros2/rclcpp/blob/b1ed15ebc7e120b7e4e95df4caaf7f942fccbf15/rclcpp/src/rclcpp/parameter_service.cpp#L29\r\nWhy is that the case?",
    "head_branch": "interface_constructor_for_parameter_client",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "parameter client takes node interfaces (#368)\n\n* parameter client takes node interfaces\r\n\r\n* correct wrong copy paste\r\n\r\n* correctly fetch node name\r\n\r\n* use node_topics_interface for creating parameter event\r\n\r\n* fix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0e18912b45d36a761e",
    "number": 367,
    "body": "changes:\r\n\r\n- change parameter separator from dot (`.`) to forward slash `/`\r\n- exclude lambda condition for visibility\r\n- use rcutils logging macros for warning\r\n\r\nwhy?\r\n\r\nthis allows to correctly use the prefix when calling `list_parameters`\r\n\r\nThere are currently no unit-tests for rclcpp parameters (AFAICT). This should be ticketed separately. ",
    "head_branch": "list_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "change parameter separator to forward slash (#367)\n\n* change parameter separator to forward slash\r\n\r\n* add separator to prefix\r\n\r\n* const char separator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a0f18912b45d36a761f",
    "number": 366,
    "body": "Fixes ros2/rcl#162.",
    "head_branch": "reset_error_code_init_failed",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #366 from ros2/reset_error_code_init_failed\n\nreset error code before throwing in rclcpp::utilities::init"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1018912b45d36a7620",
    "number": 364,
    "body": "The current parameter service and client implementation still use double underscores. I believe this has been forgotten to change when namespacing was introduced.\r\n\r\nlinux: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3119)](http://ci.ros2.org/job/ci_linux/3119/)\r\nOSX: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2488)](http://ci.ros2.org/job/ci_osx/2488/)\r\nWindows: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3177)](http://ci.ros2.org/job/ci_windows/3177/) (test failures unrelated)",
    "head_branch": "forward_slashes_for_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use forward slashes instead of double underscores (#364)\n\n* use forward slashes instead of double underscores\r\n\r\n* define parameter service suffixes in commonly shared header\r\n\r\n* style\r\n\r\n* forgot list_parameters\r\n\r\n* correct license year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1118912b45d36a7621",
    "number": 363,
    "body": "Signed-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nrelates to ros2/ros2#393\r\n\r\nSee CI in ros2/rosidl#231",
    "head_branch": "rosidl_runtime_cpp-package",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1218912b45d36a7622",
    "number": 362,
    "body": "Connects to ros2/rclcpp#357\r\n\r\nadd a copy constructor to the rclcpp::Time class which is necessary to fix the windows debug tests.\r\nI tested it locally on my windows machine.\r\n\r\nCI:\r\n[![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3141)](http://ci.ros2.org/job/ci_windows/3141/)",
    "head_branch": "fix_win_debug",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "freeing Time members in destructor, adding copy constructor / assignment operator (#362)\n\n* copy constructor for fixing windows debug\r\n\r\n* remove debug prints\r\n\r\n* style\r\n\r\n* correctly free resources in destructor\r\n\r\n* correct copy and assignment operators\r\n\r\n* explicit call to copy constructor"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1318912b45d36a7623",
    "number": 361,
    "body": "Connect to ros2/demos#164.\r\n\r\nReady for review.",
    "head_branch": "demo_nodes_cpp_native",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #361 from ros2/demo_nodes_cpp_native\n\nexpose rcl handles"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a1418912b45d36a7624",
    "number": 359,
    "body": "static constexpr aliases for lifecycle_msgs. This is mainly a convenience change.\r\n\r\n\r\nci:\r\n[![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3032)](http://ci.ros2.org/job/ci_linux/3032/)\r\n[![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2438)](http://ci.ros2.org/job/ci_osx/2438/)\r\n[![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3110)](http://ci.ros2.org/job/ci_windows/3110/)",
    "head_branch": "lifecycle_constants",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1518912b45d36a7625",
    "number": 358,
    "body": "The first commit (https://github.com/ros2/rclcpp/commit/bf3314ccaeb279b8f711f6f28c5da61c670ece76) prevents the following valgrind error on `test_local_parameters__rmw_fastrtps_cpp.set_parameter_if_not_set` in `test_rclcpp`\r\n\r\n```\r\ndhood@osrf-esteve:~/ros2_ws/src/ros2/system_tests [system_tests (master=)]$ valgrind -v ~/ros2_ws/build_isolated/test_rclcpp/gtest_local_parameters__rmw_fastrtps_cpp --gtest_filter=test_local_parameters__rmw_fastrtps_cpp.set_parameter_if_not_set\r\n==3009== Memcheck, a memory error detector\r\n==3009== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\r\n==3009== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\r\n==3009== Command: /home/dhood/ros2_ws/build_isolated/test_rclcpp/gtest_local_parameters__rmw_fastrtps_cpp --gtest_filter=test_local_parameters__rmw_fastrtps_cpp.set_parameter_if_not_set\r\n==3009== \r\n--3009-- Valgrind options:\r\n--3009--    -v\r\n--3009-- Contents of /proc/version:\r\n--3009--   Linux version 4.4.0-87-generic (buildd@lcy01-31) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ) #110-Ubuntu SMP Tue Jul 18 12:55:35 UTC 2017\r\n--3009-- \r\n--3009-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-rdtscp-sse3-avx\r\n--3009-- Page sizes: currently 4096, max supported 4096\r\n--3009-- Valgrind library directory: /usr/lib/valgrind\r\n--3009-- Reading syms from /home/dhood/ros2_ws/build_isolated/test_rclcpp/gtest_local_parameters__rmw_fastrtps_cpp\r\n...\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from test_local_parameters__rmw_fastrtps_cpp\r\n[ RUN      ] test_local_parameters__rmw_fastrtps_cpp.set_parameter_if_not_set\r\n--3009-- REDIR: 0x5c941a0 (libc.so.6:__GI_strcpy) redirected to 0x4c31110 (__GI_strcpy)\r\n--3009-- REDIR: 0x5c948c0 (libc.so.6:strnlen) redirected to 0x4c30ee0 (strnlen)\r\n--3009-- REDIR: 0x5ca8520 (libc.so.6:__GI_strncpy) redirected to 0x4c31310 (__GI_strncpy)\r\n--3009-- REDIR: 0x5c8daa0 (libc.so.6:memalign) redirected to 0x4c2ff20 (memalign)\r\n--3009-- REDIR: 0x5c98890 (libc.so.6:__GI_stpcpy) redirected to 0x4c33f80 (__GI_stpcpy)\r\n--3009-- Reading syms from /home/dhood/ros2_ws/install_isolated/rcl_interfaces/lib/librcl_interfaces__rosidl_typesupport_introspection_cpp.so\r\n==3009== Conditional jump or move depends on uninitialised value(s)\r\n==3009==    at 0x7B8AEEF: rmw_fastrtps_cpp::TypeSupport<rosidl_typesupport_introspection_cpp::MessageMembers>::serializeROSmessage(eprosima::fastcdr::Cdr&, rosidl_typesupport_introspection_cpp::MessageMembers const*, void const*) (TypeSupport_impl.hpp:323)\r\n==3009==    by 0x7B8B122: rmw_fastrtps_cpp::TypeSupport<rosidl_typesupport_introspection_cpp::MessageMembers>::serializeROSmessage(eprosima::fastcdr::Cdr&, rosidl_typesupport_introspection_cpp::MessageMembers const*, void const*) (TypeSupport_impl.hpp:373)\r\n==3009==    by 0x7B8B3F5: rmw_fastrtps_cpp::TypeSupport<rosidl_typesupport_introspection_cpp::MessageMembers>::serializeROSmessage(eprosima::fastcdr::Cdr&, rosidl_typesupport_introspection_cpp::MessageMembers const*, void const*) (TypeSupport_impl.hpp:440)\r\n==3009==    by 0x7B89F1A: rmw_fastrtps_cpp::TypeSupport<rosidl_typesupport_introspection_cpp::MessageMembers>::serializeROSmessage(void const*, eprosima::fastcdr::Cdr&) (TypeSupport_impl.hpp:836)\r\n==3009==    by 0x7B880D5: _serialize_ros_message(void const*, eprosima::fastcdr::Cdr&, void*, char const*) (ros_message_serialization.cpp:30)\r\n==3009==    by 0x7B7BDB0: rmw_publish (rmw_publish.cpp:47)\r\n==3009==    by 0x65EFC0E: rmw_publish (functions.cpp:252)\r\n==3009==    by 0x67FDB67: rcl_publish (publisher.c:206)\r\n==3009==    by 0x5377F7C: rclcpp::publisher::Publisher<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void> >::do_inter_process_publish(rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > const*) (publisher.hpp:282)\r\n==3009==    by 0x5375856: rclcpp::publisher::Publisher<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void> >::publish(std::shared_ptr<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > > const&) (publisher.hpp:217)\r\n==3009==    by 0x5372629: rclcpp::node_interfaces::NodeParameters::set_parameters_atomically(std::vector<rclcpp::parameter::ParameterVariant, std::allocator<rclcpp::parameter::ParameterVariant> > const&) (node_parameters.cpp:107)\r\n==3009==    by 0x53720EA: rclcpp::node_interfaces::NodeParameters::set_parameters(std::vector<rclcpp::parameter::ParameterVariant, std::allocator<rclcpp::parameter::ParameterVariant> > const&) (node_parameters.cpp:57)\r\n==3009== \r\n[       OK ] test_local_parameters__rmw_fastrtps_cpp.set_parameter_if_not_set (2466 ms)\r\n[----------] 1 test from test_local_parameters__rmw_fastrtps_cpp (2476 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test case ran. (2521 ms total)\r\n[  PASSED  ] 1 test.\r\n==3009== \r\n==3009== HEAP SUMMARY:\r\n==3009==     in use at exit: 94,393 bytes in 45 blocks\r\n==3009==   total heap usage: 6,981 allocs, 6,936 frees, 31,776,851 bytes allocated\r\n==3009== \r\n==3009== Searching for pointers to 45 not-freed blocks\r\n==3009== Checked 486,560 bytes\r\n==3009== \r\n==3009== LEAK SUMMARY:\r\n==3009==    definitely lost: 8 bytes in 1 blocks\r\n==3009==    indirectly lost: 48 bytes in 1 blocks\r\n==3009==      possibly lost: 0 bytes in 0 blocks\r\n==3009==    still reachable: 94,337 bytes in 43 blocks\r\n==3009==         suppressed: 0 bytes in 0 blocks\r\n==3009== Rerun with --leak-check=full to see details of leaked memory\r\n==3009== \r\n==3009== Use --track-origins=yes to see where uninitialised values come from\r\n==3009== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\r\n==3009== \r\n```\r\n\r\nThe second commit (https://github.com/ros2/rclcpp/commit/5b93dfe76eebfcaf0753188114ff027cd245ed9f) explicitly initialises some messages in other locations that I saw but I can't say for sure if it's necessary or not.\r\n\r\nIt might be more appropriate for us to set default values in the message definitions themselves: I can adapt this PR if that's the case.\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=3023)](http://ci.ros2.org/job/ci_linux/3023/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=436)](http://ci.ros2.org/job/ci_linux-aarch64/436/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2433)](http://ci.ros2.org/job/ci_osx/2433/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3107)](http://ci.ros2.org/job/ci_windows/3107/)",
    "head_branch": "initialise_param_msgs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1718912b45d36a7626",
    "number": 356,
    "body": "* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=2993)](http://ci.ros2.org/job/ci_linux/2993/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=424)](http://ci.ros2.org/job/ci_linux-aarch64/424/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2419)](http://ci.ros2.org/job/ci_osx/2419/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3094)](http://ci.ros2.org/job/ci_windows/3094/)",
    "head_branch": "sync_param_wait_for_service",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add wait_for_service and service_is_ready for SyncParametersClient (#356)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1818912b45d36a7627",
    "number": 355,
    "body": "This fixes a race condition in the following use case:\r\n\r\n* two subscribers are waiting for the received message\r\n* two threads are handling callbacks\r\n* thread A calls the `take_intra_process_message` function\r\n  * returning a handle for the buffer\r\n  * setting `target_subs_size` to > 0 (since there is another subscriber waiting for the same message)\r\n* now thread A gets interrupted\r\n* thread B calls the `take_intra_process_message` function\r\n  * returning a handle for the same buffer\r\n  * setting `target_subs_size` to 0 (since there is no other subscriber waiting for the same message anymore)\r\n  * continues with calling `pop_at_key`\r\n* now thread A continues\r\n  * continues with calling `get_copy_at_key` but can't get the message anymore\r\n\r\nTherefore the call to `take_intra_process_message` and the following call to either `get_copy_at_key` or `pop_at_key` needs to be wrapped in a mutex.\r\n\r\nThis fixes part of this flaky test: `test_multithreaded__rmw_fastrtps_cpp.multi_consumer_intra_process` (see ros2/build_cop#41).\r\n\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=2984)](http://ci.ros2.org/job/ci_linux/2984/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=420)](http://ci.ros2.org/job/ci_linux-aarch64/420/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2410)](http://ci.ros2.org/job/ci_osx/2410/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3090)](http://ci.ros2.org/job/ci_windows/3090/)",
    "head_branch": "fix_race_condition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #355 from ros2/fix_race_condition\n\nlock around taking the buffer and deciding to get a copy of the message or popping it"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1918912b45d36a7628",
    "number": 354,
    "body": "connects to ros2/ros2#387\r\n\r\nCI is in the above issue",
    "head_branch": "cl-memory-leak-fix",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix memory leaks in rclcpp (#354)\n\n* Make sure to delete service_handle when in the Service() destructor.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Make sure to delete the allocated rcl_node on error paths.\r\n\r\nThis all happens *before* we setup the shared_ptr destructor,\r\nso we have to hand delete in the error paths.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\n* Move delete rcl_node up.\r\n\r\nIt turns out that we are always going to throw in that block,\r\nand we never access rcl_node, so just delete it very early\r\non.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1a18912b45d36a7629",
    "number": 353,
    "body": "connects to ros2/rmw_implementation#25\r\n\r\nThis PR makes two main changes:\r\n1. the original signal handler is restored in an on_shutdown callback. This allows the original signal handler to be called even after rclcpp::shutdown has been called within a process\r\n1. ~~during shutdown, ignore sigints from interrupting the shutdown process. otherwise deadlocks described in https://github.com/ros2/rmw_implementation/issues/25 can occur~~\r\n\r\nThis has been done to fix flaky tests caused by the deadlock described in https://github.com/ros2/rmw_implementation/issues/25. For it to take effect, it has to be combined with a change such as https://github.com/ros2/demos/commit/190d2f5e14dbcd84600b18e9356e53d254ebff68 so the processes call shutdown. ~~If we were to instead call shutdown in the rclcpp signal handler, that change wouldn't be necessary. Is it appropriate to replace [this block of code](https://github.com/ros2/rclcpp/blob/d090ddc35859901f9e07dac8eeaa1ce262e7a1fc/rclcpp/src/rclcpp/utilities.cpp#L86..L99) with a call to shutdown?~~\r\n\r\nI have tried to maintain the preference for sigaction where available, following existing code, but please keep in mind that there may be subtleties of signal handlers that I'm likely to overlook\r\n\r\nStandard CI\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=2962)](http://ci.ros2.org/job/ci_linux/2962/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=407)](http://ci.ros2.org/job/ci_linux-aarch64/407/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2390)](http://ci.ros2.org/job/ci_osx/2390/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3077)](http://ci.ros2.org/job/ci_windows/3077/)\r\n\r\nrepeating the list_paramters* tests (usually very flaky): [![Build Status](http://ci.ros2.org/job/ci_linux/2963/badge/icon)](http://ci.ros2.org/job/ci_linux/2963/) (passed 60 times, failed on 60th because of [startup issue](http://ci.ros2.org/job/ci_linux/2963/testReport/junit/(root)/projectroot/test_tutorial_list_parameters__rmw_fastrtps_cpp/) that I understand to be unrelated)",
    "head_branch": "restore_old_signal_handler",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #353 from ros2/restore_old_signal_handler\n\nRestore old signal handler after shutdown"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1b18912b45d36a762a",
    "number": 351,
    "body": "connects to ros2/rclcpp#352",
    "head_branch": "time_operators",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "time operators (#351)\n\n* time operators\r\n\r\n* explicitely cast to uint64_t and prevent overflow\r\n\r\n* check for negative seconds .. again\r\n\r\n* split into hpp/cpp\r\n\r\n* export symbols\r\n\r\n* change test macro\r\n\r\n* fix unsigned comparison\r\n\r\n* address comments\r\n\r\n* test for specific exception\r\n\r\n* Fix typo"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1c18912b45d36a762b",
    "number": 350,
    "body": "while refactoring the return types, I've missed that one. It's a short obvious fix, thus I decided not running CI for it.",
    "head_branch": "fix_service_call_return_value",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix return value when calling lifecycle service (#350)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1d18912b45d36a762c",
    "number": 348,
    "body": "connects to ros2/rclcpp#347\r\n\r\nNot sure about the design of this, but it's using only rcl api. \r\nI put this in review directly to gather feedback.",
    "head_branch": "use_rcl_time",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use rcl api for rclcpp time (#348)\n\n* use rcl api for rclcpp time\r\n\r\n* address comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1e18912b45d36a762d",
    "number": 346,
    "body": "GCC changed the internal implementation of `std::bind`, this PR updates `function_traits` to match their current signature.\r\n\r\nConnects to #343 ",
    "head_branch": "function_traits_gcc_7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added support to function_traits for std::bind in GCC >= 7.1 (#346)\n\n* Added support to function_traits for std::bind in GCC >= 7.1\r\n\r\n* linter fixup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a1f18912b45d36a762e",
    "number": 345,
    "body": "connects to ros2/demos#155",
    "head_branch": "rename_data_types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename RCL_LIFECYCLE_RET_T to lifecycle_msgs::msgs::Transition::TRANSITION_CALLBACK_* (#345)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a2118912b45d36a762f",
    "number": 344,
    "body": "two changes in this PR:\r\n\r\n1.) remove `fprintf`s and replace them with `RCUTILS_LOG..`\r\n2.) every state change has now an additional parameter to see whether the action went to an erroneous state while transitioning. \r\n\r\nCI:\r\nlinux: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=2917)](http://ci.ros2.org/job/ci_linux/2917/)\r\nosx: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2361)](http://ci.ros2.org/job/ci_osx/2361/)\r\nwindows: [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=3041)](http://ci.ros2.org/job/ci_windows/3041/)\r\n ",
    "head_branch": "error_handling",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "expose error handling for state changes (#344)\n\n* remove fprintf, use logging\r\n\r\n* expose lifecycle error code\r\n\r\n* address comments"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2218912b45d36a7630",
    "number": 342,
    "body": "Rebased version of #337.",
    "head_branch": "asirobots_master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "added wait method to AsyncParametersClient (#342)\n\n* added wait and ready methods to AsyncParametersClient\r\n\r\n* style only\r\n\r\n* style only\r\n\r\n* remove RCLCPP_PUBLIC from template methods\r\n\r\n* style"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2318912b45d36a7631",
    "number": 341,
    "body": "Connects to ros2/ros2#370",
    "head_branch": "update_docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add rcutils tag file reference (#341)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2418912b45d36a7632",
    "number": 340,
    "body": "There are currently no paths that lead to it, and it has\r\na bug anyway; if a large enough value is passed into sec,\r\nthen we will overflow sec on the multiply.  Just remove it\r\nsince we can't reach the code anyway.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>\r\n\r\nCI:\r\n* Linux [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=2772)](http://ci.ros2.org/job/ci_linux/2772/)\r\n* Linux-aarch64 [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux-aarch64&build=305)](http://ci.ros2.org/job/ci_linux-aarch64/305/)\r\n* macOS [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=2246)](http://ci.ros2.org/job/ci_osx/2246/)\r\n* Windows [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=2913)](http://ci.ros2.org/job/ci_windows/2913/)",
    "head_branch": "remove-bad-constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove a constructor that we can't test. (#340)\n\nThere are currently no paths that lead to it, and it has\r\na bug anyway; if a large enough value is passed into sec,\r\nthen we will overflow sec on the multiply.  Just remove it\r\nsince we can't reach the code anyway.\r\n\r\nSigned-off-by: Chris Lalancette <clalancette@openrobotics.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2518912b45d36a7633",
    "number": 339,
    "body": "Connects to ros2/ros2#361",
    "head_branch": "refactor_get_topic_names_and_types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor to support multiple types and no_demangle (#339)\n\n* refactor to support multiple types and no_demangle\r\n\r\n* add get_service_names_and_types"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a2618912b45d36a7634",
    "number": 338,
    "body": "connects to ros2/rcutils#6",
    "head_branch": "split_allocator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "string array takes allocator (#338)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2718912b45d36a7635",
    "number": 337,
    "body": "This is to help me with CoreDX where its clients/services are not ready immediately upon creation. See https://github.com/ros2/rclcpp/issues/330",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2818912b45d36a7636",
    "number": 336,
    "body": "connects to ros2/rcl#142",
    "head_branch": "rcutils_allocator",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "comply with rcl allocator (#336)\n\n* comply with rcl allocator\r\n\r\n* do not throw exception in destructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2918912b45d36a7637",
    "number": 334,
    "body": "",
    "head_branch": "explicit_transaction_trigger",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "expose explicit transition calls (#334)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2a18912b45d36a7638",
    "number": 333,
    "body": "follow up of #332 \r\nWithout this change rclcpp doesn't compile on my machine with a bunch of \"not declared in this scope\" errors",
    "head_branch": "missing_time_include",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "include rcutils/time (#333)\n\n* include rcutils/time\r\n\r\n* include rcl/time for time source enum"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2b18912b45d36a7639",
    "number": 332,
    "body": "Connect to ros2/rcutils#25.\r\n\r\nPlease review.",
    "head_branch": "move_time",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #332 from ros2/move_time\n\nuse time from rcutils"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a2d18912b45d36a763a",
    "number": 331,
    "body": "connects to ros2/rmw_fastrtps#114\r\n\r\nwill expand the topic name before asking `count_publisher` and `count_subscriber`. \r\nWhile doing, I noticed there is no cpp function for getting the node namespace, which is added in this PR as well. However, I am fine with removing that commit from this PR and open another one.",
    "head_branch": "topic_names",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Topic names (#331)\n\n* expand topic name before invoking count pub/sub\r\n\r\n* convenience function for get_namespace()\r\n\r\n* uncrustify\r\n\r\n* typo\r\n\r\n* add get_namespace() test\r\n\r\n* add get_namespace() for lifecycle"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a2e18912b45d36a763b",
    "number": 328,
    "body": "Connects to ros2/rcl#137\r\n\r\nExamples of it in use:\r\n\r\n```\r\n% talker -t /foo/3bar\r\nlibc++abi.dylib: terminating with uncaught exception of type rclcpp::exceptions::InvalidTopicNameError: Invalid topic name: topic name token must not start with a number:\r\n  '/foo/3bar'\r\n        ^\r\n\r\n[1]    82558 abort      talker -t /foo/3bar\r\n```\r\n\r\n\"full\" topic name check (post expansion check):\r\n\r\n```\r\n% talker -t /foo/{ns}/bar\r\nlibc++abi.dylib: terminating with uncaught exception of type rclcpp::exceptions::InvalidTopicNameError: Invalid topic name: topic name must not contain repeated '/':\r\n  '/foo///bar'\r\n        ^\r\n\r\n[1]    82579 abort      talker -t /foo/{ns}/bar\r\n```\r\n\r\nServices:\r\n\r\n```\r\n% add_two_ints_client -s foo/3bar\r\nlibc++abi.dylib: terminating with uncaught exception of type rclcpp::exceptions::InvalidServiceNameError: Invalid service name: topic name token must not start with a number:\r\n  'foo/3bar'\r\n       ^\r\n\r\n[1]    82599 abort      add_two_ints_client -s foo/3bar\r\n```\r\n\r\n```\r\n% add_two_ints_client -s foo/3bar\r\nlibc++abi.dylib: terminating with uncaught exception of type rclcpp::exceptions::InvalidServiceNameError: Invalid service name: topic name token must not start with a number:\r\n  'foo/3bar'\r\n       ^\r\n\r\n[1]    82599 abort      add_two_ints_client -s foo/3bar\r\n```\r\n\r\nNode name (locally modified):\r\n\r\n```\r\n% talker\r\nlibc++abi.dylib: terminating with uncaught exception of type rclcpp::exceptions::InvalidNodeNameError: Invalid node name: node name must not contain characters other than alphanumerics or '_':\r\n  'invalid_talker?'\r\n                 ^\r\n\r\n[1]    83140 abort      talker\r\n```\r\n\r\nNamespace (locally modified):\r\n\r\n```\r\n% talker\r\nlibc++abi.dylib: terminating with uncaught exception of type rclcpp::exceptions::InvalidNamespaceError: Invalid namespace: namespace must not contain characters other than alphanumerics, '_', or '/':\r\n  '/invalid_ns?'\r\n              ^\r\n\r\n[1]    83509 abort      talker\r\n```",
    "head_branch": "use_namespaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use namespaces (#328)\n\n* add expand_topic_or_service_name()\r\n\r\n* use namespace in intra process\r\n\r\n(actual change to topic names in next commit)\r\n\r\n* catch and report name issues\r\n\r\nfor node names, namespaces, and topic/service names\r\n\r\n* address comment"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a2f18912b45d36a763c",
    "number": 327,
    "body": "fixes flakiness ",
    "head_branch": "warn_unused",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Warn unused (#327)\n\n* comply with unused warnings\r\n\r\n* fix flakiness and add test for transitions\r\n\r\n* mark flaky test\r\n\r\n* duplicate const char * in State constructor\r\n\r\n* linters\r\n\r\n* correct year in license\r\n\r\n* mark flaky test"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3018912b45d36a763d",
    "number": 326,
    "body": "I added this method to expose existing functionality in `rcl` and to support a use case described in https://github.com/ros2/rclcpp/issues/315.\r\n\r\nFixes https://github.com/ros2/rclcpp/issues/315",
    "head_branch": "add_timer_base_reset",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add method to reset a timer in TimerBase (#326)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3118912b45d36a763e",
    "number": 325,
    "body": "Starting from flaky requester-replier tests (e.g., http://ci.ros2.org/view/nightly/job/nightly_linux-aarch64_debug/61/testReport/(root)/test_requester_replier__Empty__rclcpp__rclpy__rmw_fastrtps_cpp_Debug/test_requester_replier/),  @wjwwood and I debugged apparent race conditions in handling of guard conditions in rclcpp. There are three distinct but related changes here:\r\n\r\n1. In [wait_for_service_nanoseconds](https://github.com/ros2/rclcpp/pull/325/files#diff-180df0c4318bfcfeab012a93ee002f71R73), create the graph event structure before checking whether the service is ready, to avoid the chance that it becomes ready between checking and event creation.\r\n1. In [get_graph_event](https://github.com/ros2/rclcpp/pull/325/files#diff-ee33863795cb4ee8c58ca586c8a54d62R208), update the node's list of graph users before adding the node to the graph listener, to avoid missing the event because our node doesn't report having any graph users (https://github.com/ros2/rclcpp/blob/fix_guard_races/rclcpp/src/rclcpp/graph_listener.cpp#L151-L153).\r\n1. In [wait_for_graph_change](https://github.com/ros2/rclcpp/pull/325/files#diff-ee33863795cb4ee8c58ca586c8a54d62R241), check the predicate condition that we want to have wake us up one time before going to sleep (the docs for `std::condition_variable::wait_until()` suggest that this isn't necessary, but it's not entirely clear).\r\n\r\nBased on our testing, the second change is absolutely required, the first change is very likely required, and the third change is likely just defensive.",
    "head_branch": "fix_guard_races",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix race conditions in guard condition handling (#325)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3218912b45d36a763f",
    "number": 323,
    "body": "tiny fixup I noticed while poking around",
    "head_branch": "spin_error_msg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update spin error message to match function name (#323)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3318912b45d36a7640",
    "number": 322,
    "body": "Connects to ros2/c_utilities#17",
    "head_branch": "rename_c_utilities_to_rcutils",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rename {c_}utilities to rcutils (#322)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3418912b45d36a7641",
    "number": 321,
    "body": "Connects to ros2/c_utilities#16",
    "head_branch": "allocator_and_error_handling_in_c_utilities",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor to pass allocator to some functions in rcl (#321)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3518912b45d36a7642",
    "number": 320,
    "body": "connects to ros2/rmw#100",
    "head_branch": "utilities_string_array",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use string_array_t from c_utilities package (#320)\n\n* use c_utilities package\r\n\r\n* compare return value to utilities_ret_ok\r\n\r\n* fix error handling\r\n\r\n* better error handling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3618912b45d36a7643",
    "number": 316,
    "body": "Connects to ros2/rmw#95",
    "head_branch": "node_namespace",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "expose node namespace in API and pass to rcl (#316)\n\n* expose node namespace in API and pass to rcl\r\n\r\n* name_space -> namespace_"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a3718912b45d36a7644",
    "number": 314,
    "body": "",
    "head_branch": "fix_unsigned_warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3818912b45d36a7645",
    "number": 313,
    "body": "I think this should fix the warning I've seen in some CI jobs (at least I think so, since I couldn't reproduce it, might be build type), e.g.: http://ci.ros2.org/job/ci_linux/2341/warnings22Result/",
    "head_branch": "fix_warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "compare unsigned to unsigned (#313)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3a18912b45d36a7646",
    "number": 311,
    "body": "connects to https://github.com/ros2/rclcpp/issues/310\r\n\r\nprototype of `rclcpp::Time::now()`\r\n\r\nFor now it's mainly a convenience function, but may be object to further helper classes.\r\nI introduced a new c++ class called Time, which by itself has a static member function `now` which returns basically a wrapper around `rcl_time_point_value_t`. In order to assign it to a message header, the same function can be called, but gets converter via the casting operator.\r\n\r\n ",
    "head_branch": "rclcpp_time",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rclcpp time (#311)\n\n* initial commit for rclcpp::time::now()\r\n\r\n* switch between times\r\n\r\n* introduce time class\r\n\r\n* add rclcpp/time.hpp to rclcpp/rclcpp.hpp\r\n\r\n* throw exceptions on time error\r\n\r\n* fix test_time to catch exceptions\r\n\r\n* explicit one-parameter constructor\r\n\r\n* fix msvc compiler warnings\r\n\r\n* address review comments\r\n\r\n* cleanup includes\r\n\r\n* re-add todo for fixing test once ros-time is there"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3b18912b45d36a7647",
    "number": 309,
    "body": "I ran into needing something like this when converting `map_server`. And I think it's useful, but I'm not sure about a few details.\r\n\r\nFirst, If the parameter is not set, so it be set to the default value or not? Put another way:\r\n\r\n```c++\r\nint foo;\r\nASSERT_FALSE(node->get_parameter(\"foo\", foo, 42));  // this is the new signature\r\nbool result = node->get_parameter(\"foo\", foo);  // Should result be true or false?\r\n```\r\n\r\n---\r\n\r\nThis new API is meant to replicate ROS 1's API (http://docs.ros.org/kinetic/api/roscpp/html/classros_1_1NodeHandle.html#a05941572641a453fd416c6603b91d39f):\r\n\r\n```c++\r\n// ROS 1\r\nstd::string frame_id;\r\nnode_handle.param(\"frame_id\", frame_id, std::string(\"map\"));\r\n```\r\n\r\nThis is what it would look like with this pr:\r\n\r\n```c++\r\n// ROS 2\r\nstd::string frame_id;\r\nnode->get_parameter(\"frame_id\", frame_id, std::string(\"map\"));\r\n```\r\n\r\n---\r\n\r\nSeparately, we could choose to support the other API provided by ROS 1 which is similar but it returns `T` (http://docs.ros.org/kinetic/api/roscpp/html/classros_1_1NodeHandle.html#aa9b23d4206216ed13b5833fb1a090f1a):\r\n\r\n```c++\r\n// ROS 1 alternative\r\nstd::string frame_id = node_handle.param(\"frame_id\", std::string(\"map\"));\r\n```\r\n\r\nWe could do this, but it begins to get a little confusing when you have one signature that takes `T &, const T &` and another that takes just `const T &`. The `const` should prevent you from getting into strange situations, but it might be the case that having fewer options would be better.\r\n\r\n---\r\n\r\nFinally, the Google style guide says you should pass `T *` rather than `T &` when you intend to modify the variable because it is easier to see what's going on from the calling code. In this case, I think that might be worth following. I consider this snippet from the `map_server` to be clearer with the rule applied:\r\n\r\n```c++\r\n// ROS 1 with pass by reference\r\nprivate_nh.param(\"negate\", negate, 0);\r\nprivate_nh.param(\"occupied_thresh\", occ_th, 0.65);\r\nprivate_nh.param(\"free_thresh\", free_th, 0.196);\r\n```\r\n\r\nVersus:\r\n\r\n```c++\r\n// ROS 1 with pass by pointer\r\nprivate_nh.param(\"negate\", &negate, 0);\r\nprivate_nh.param(\"occupied_thresh\", &occ_th, 0.65);\r\nprivate_nh.param(\"free_thresh\", &free_th, 0.196);\r\n```\r\n\r\nNovice users will probably lament that they have to add a `&` and they don't know why, but I think that it is easier to infer what is happening here if you know C++ well enough.\r\n\r\n---\r\n\r\nAnyways, I'd appreciate anyone who's interested in giving some feedback on this.",
    "head_branch": "get_parameter_with_default",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add a new Node::get_parameter() with a default value (#309)\n\n* add a new Node::get_parameter() with a default value\r\n\r\n* update function parameter name (signature)\r\n\r\n* update function parameter name (definition)\r\n\r\n* rename new function to get_parameter_or\r\n\r\n* rename arg \"parameter\" to \"value\" and fix get_parameter\r\n\r\n* add set_parameter_if_not_set\r\n\r\n* add some comments to clarify logic in set_parameters_atomically\r\n\r\n* uncrustify\r\n\r\n* address comments\r\n\r\n* add some docs for get_parameter*"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a3c18912b45d36a7648",
    "number": 307,
    "body": "I found this useful in some prototyping I was doing over Christmas break and this change was hanging around in my local git repo. Not urgent.",
    "head_branch": "const_ptr_publish",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add a publish method with the const MessageT * signature (#307)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a3d18912b45d36a7649",
    "number": 306,
    "body": "See https://github.com/ros2/ros2/issues/305",
    "head_branch": "pedantic",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use -Wpedantic (#306)\n\n* add /W4 flag for windows\r\n\r\n* use uint8 like defined in messages: fix warning C4244\r\n\r\n* fix sign size_t comparison\r\n\r\n* add only pedantic, not W4, deal with windows another day\r\n\r\n* another sign compare warning"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a3e18912b45d36a764a",
    "number": 304,
    "body": "Connect to ros2/cli_tools#1",
    "head_branch": "rosnode_list",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rosnode list (#304)\n\n* expose list of nodes\r\n\r\n* uncrustify\r\n\r\n* review comments\r\n\r\n* warn for memory leak\r\n\r\n* extend year of copyright"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a3f18912b45d36a764b",
    "number": 303,
    "body": "I think there is a typo with the comparison of the return value from rcl_take",
    "head_branch": "rcl_take_ret",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4018912b45d36a764c",
    "number": 302,
    "body": "Connect to ros2/rcl#106",
    "head_branch": "use_rmw_impl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #302 from ros2/use_rmw_impl\n\nuse rmw implementation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4118912b45d36a764d",
    "number": 301,
    "body": "now that the typesupport refactor is done (https://github.com/ros2/ros2/issues/253#issuecomment-270202324) we can reorder dependencies properly\r\n\r\nsee https://github.com/ros2/demos/pull/104 for CI",
    "head_branch": "dependency_order",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "dependency order (#301)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4218912b45d36a764e",
    "number": 300,
    "body": "fixes https://github.com/ros2/ci/issues/24 with https://github.com/ros2/rcl/pull/104",
    "head_branch": "cmake_flags",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix cmake for appending c/cxx flags (#300)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4418912b45d36a764f",
    "number": 299,
    "body": "Connect to ros2/rmw_fastrtps#85",
    "head_branch": "single_ts_shortcut",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #299 from ros2/single_ts_shortcut\n\nfix dependencies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4518912b45d36a7650",
    "number": 298,
    "body": "Connect to ros2/rosidl_typesupport#6",
    "head_branch": "typesupport_c_reloaded",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #298 from ros2/typesupport_c_reloaded\n\nuse rosidl_typesupport_c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4618912b45d36a7651",
    "number": 297,
    "body": "We should throw instead of silently overwriting the old callback",
    "head_branch": "throw_multiple_callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Warn on second call of register_param_change_callback (#297)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4718912b45d36a7652",
    "number": 293,
    "body": "This pull request sets up Doxygen and fixes the documentation to look correct when rendered and to reference external data, like cppreference.com (where appropriate), rcl, and rmw.\r\n\r\nI've pushed the current state up to [http://docs.ros2.org/beta1/api/rclcpp/index.html](http://docs.ros2.org/beta1/api/rclcpp/index.html).\r\n\r\nThis still needs a main page.",
    "head_branch": "doxygen_setup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Doxygen setup (#293)\n\n* basic doxygen configuration\r\n\r\n* fix up documentation\r\n\r\n* change default value of PROJECT_NUMBER\r\n\r\n* more generalization\r\n\r\n* fixup\r\n\r\n* fixup\r\n\r\n* avoid displaying RCLCPP_PUBLIC on all functions\r\n\r\n* main page"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a4818912b45d36a7653",
    "number": 292,
    "body": "@wjwwood initial import for lifecycle_subscriber and the respective fixes for the subscription factory.\r\n\r\nThis is work in progress.",
    "head_branch": "lifecycle_subscriber",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4918912b45d36a7654",
    "number": 291,
    "body": "Just something I noticed while working yesterday.",
    "head_branch": "unused_include",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove unused include (#291)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4a18912b45d36a7655",
    "number": 290,
    "body": "Follow up to #277, thanks to @Karsten1987 for pointing it out.\r\n\r\nCI:\r\n\r\n- Linux:\r\n  - [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=2030)](http://ci.ros2.org/job/ci_linux/2030/)\r\n- OS X:\r\n  - [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_osx&build=1559)](http://ci.ros2.org/job/ci_osx/1559/)\r\n- Windows:\r\n  - [![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_windows&build=2017)](http://ci.ros2.org/job/ci_windows/2017/)",
    "head_branch": "fix_create_subscription_return_type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix the return type of create_subscription (#290)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4b18912b45d36a7656",
    "number": 287,
    "body": "connects to ros2/ros2#294",
    "head_branch": "cpp14",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "c++14 (#287)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4c18912b45d36a7657",
    "number": 286,
    "body": "This PR removes the need to specify twice the type of a created subscription by deducing the message type from the callback.\r\n\r\nThis is a quick hack that came up from the discussion in https://discourse.ros.org/t/rfc-using-c-14/921/10",
    "head_branch": "simplified-templates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4d18912b45d36a7658",
    "number": 285,
    "body": "Connect to ros2/rosidl#182.",
    "head_branch": "typesupport_reloaded",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #285 from ros2/typesupport_reloaded\n\nuse rosidl_typesupport_cpp"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a4f18912b45d36a7659",
    "number": 284,
    "body": "Following the discussion from https://github.com/ros2/rclcpp/issues/282#issuecomment-263966403\r\n\r\nThere are 3 commits:\r\n\r\n1. The first one is not supposed to break the examples and tests.\r\n2. The second one \"depollutes\" the global namespace, **this one require the example and tests to be updated.**\r\n  The tests and examples will come in separate pull requests.\r\n3. The third one, uses a constexpr implementation  as seen on cppreference.com\r\n\r\nConnects to ros2/rclcpp#282",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "move user-defined literals in their own namespace (#284)\n\n* isolate chrono literals in literals.hpp\r\n\r\n* rclcpp.hpp: remove 'using namespace rclcpp::literals'\r\n\r\nThe examples have been migrated to the new namespace.\r\n\r\n* literals: constexpr, make return types consistent with function body\r\n\r\n_ms returned nanoseconds instead of milliseconds.\r\n\r\nA few return types where using integral return type\r\nfor floating point literals.\r\n\r\n* remove literals in favor of std::chrono_literals"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5018912b45d36a765a",
    "number": 283,
    "body": "This is a work in progress from a while back.",
    "head_branch": "cmdline_params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5118912b45d36a765b",
    "number": 279,
    "body": "this PR enables a wrapping around a rcl_service_t which is externally initialized. The goal here is to instantiate a service on the rcl level and still be able to add it into a rclcpp executor. \r\n\r\nOn the flipside, I have to have a boolean flag stating whether we own ownership over this service or not. This becomes important when trying to destroy the service. ",
    "head_branch": "service_refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "construct service from existing rcl_service_t (#279)\n\n* (dev) construct service from existing rcl_service_t\r\n\r\n* (refactor) extract method for adding a service to a node\r\n\r\n* (fix) stop mock msgs from being installed\r\n\r\n* service takes rcl_node_t*\r\n\r\n* correct typo\r\n\r\n* add_service has to be public\r\n\r\n* uncrustify\r\n\r\n* correctly initialize service_handle\r\n\r\n* (fix) address review comments\r\n\r\n* (fix) pass shared pointer by value\r\n\r\n* (fix) return to shared node handle pointer\r\n\r\n* (fix) make find_package(rmw) required\r\n\r\n* style\r\n\r\n* (revert) leave c++11 flags within CXX flags\r\n\r\n* (fix) unused variable warning\r\n\r\n* (fix) remove unnecessary if in cmake"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5218912b45d36a765c",
    "number": 278,
    "body": "This is a quick hack to allow `std::bind` functors that have custom arguments to be passed as callbacks. These changes involve relaxing the rules of `function_traits::same_arguments` to only check if the first N arguments of the `std::bind` functor match the callback signatures, so this has the problem that the `std::bind` might be invalid (e.g. the N+1 argument is a placeholder), the compiler won't complain, but there will be a runtime error.\r\n\r\nI've also made a couple of cleanups and implemented two classes for concatenating and slicing `std::tuple`s at compile time.\r\n\r\nPR is marked as open, so feel free to edit it to adapt it to your needs.\r\n\r\nAddresses #273\r\nConnects to #273 ",
    "head_branch": "bind-traits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5318912b45d36a765d",
    "number": 277,
    "body": "This is a work in progress, I've only converted some of the most basic functionality to what I'm calling the \"NodeBaseInterface\". This is a preview of what I'm doing for the other parts, for which I've sketched out \"NodeTopicInterface\", \"NodeServiceInterface\", \"NodeGraphInterface\", and \"NodeParameterInterface\".\r\n\r\nI've run into a few issues, but specifically I have some work to do to resolve the ownership issues. This is demonstrated by this:\r\n\r\nhttps://github.com/ros2/rclcpp/compare/node_interfaces?expand=1#diff-14f85fa16e78532d255620f1d3529debR52\r\n\r\nWhere the comment reads \"These are used to keep the scope on the containing items\" and I had to comment out the Node pointer. Had we gone with inheritance, the NodeBase pointer this class would have access to would have been enough, but given the composition nature, I cannot just hold that part of the interface and maintain the same guarantee. That's ok though, I never liked how we have so much \"ownership spaghetti\" (for lack of a better phrase) anyways. I just have to resolve how to handle this now. I've got the options and arguments for one way versus another partially written out, I'll try to post those soon. @Karsten1987 recently ran into this in a related situation and thinks (if I can speak for him a bit) that moving away from scoped objects would help a little bit because it could ensure the lifetime of the entities created by a node do not outlive it (using a proxy or handle pattern instead).",
    "head_branch": "node_interfaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "break Node into several separate interfaces (#277)\n\n* add the NodeBaseInterface and impl NodeBase\r\n\r\n* refactor rclcpp to use NodeBaseInterface\r\n\r\n* triggering a guard condition is not const\r\n\r\n* remove unnecessary pure virtual destructor\r\n\r\n* remove unused private member, style\r\n\r\n* create NodeTopics interface, refactor pub/sub\r\n\r\n* add convenience functions to fix API breaks\r\n\r\n* fix compilation errors from NodeTopics refactor\r\n\r\n* move \"Event\" based exceptions to exceptions.hpp\r\n\r\n* add the NodeGraphInterface and related API's\r\n\r\n* update node and graph_listener to use NodeGraph API\r\n\r\n* initialize node_topics_ and node_graph_ in Node\r\n\r\n* remove methods from Node and reorganize the order\r\n\r\nthe removed methods are really low level and still\r\navailable via their respective Node*Interface class\r\n\r\n* add the NodeServices API and implementation\r\n\r\n* add the NodeParameters API and refactor Node\r\n\r\n* mixups\r\n\r\n* fixup NodeParameters constructor\r\n\r\n* added NodeTimers API and refactor Node\r\n\r\n* make new create_publisher and create_subscription free template functions\r\n\r\n* fixup\r\n\r\n* fixup\r\n\r\n* fixup\r\n\r\n* fixup share pointer to node in any_executable\r\n\r\n* free env value before throwing on Windows\r\n\r\n* uncrustify and cpplint\r\n\r\n* address constness issues\r\n\r\n* do not store the topic name as a std::string in subscription\r\n\r\n* fixes to support const char * topic name\r\n\r\n* fix incomplete type specification, which fails on Windows\r\n\r\n* refactor after rebase from type support changes\r\n\r\n* fixup Windows build\r\n\r\n* fix template issues on Windows\r\n\r\n* uncrustify\r\n\r\n* remove the unnecessary callback group argument from the add_publisher func\r\n\r\n* remove unnecessary using = directive\r\n\r\n* do not store node name in C++\r\n\r\n* fix client and service creation in Node constructor\r\n\r\n* fix include orders"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a5418912b45d36a765e",
    "number": 276,
    "body": "Opening this just for visibility, it is a work in progress.\r\n\r\nConnects to ros2/rcl#54",
    "head_branch": "c_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5518912b45d36a765f",
    "number": 275,
    "body": "This is a first step toward creating tests which can assert the expected values of parameters in json for easy debugging and comparison. ",
    "head_branch": "test_parameters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5618912b45d36a7660",
    "number": 271,
    "body": "Connect to #263.\r\n\r\nThe conditions for services were just wrong. They need to be the same as e.g. subscriptions, see https://github.com/ros2/rclcpp/blob/4c876d5966dfa220581cb2141d6d9a62e5c0c9a6/rclcpp/src/rclcpp/executor.cpp#L245-L252\r\n\r\n[![Build Status](http://ci.ros2.org/buildStatus/icon?job=ci_linux&build=1910)](http://ci.ros2.org/job/ci_linux/1910/) http://ci.ros2.org/job/ci_linux/1910/testReport/(root)/test_add_two_ints_server_add_two_ints_client__rmw_connext_cpp_/test_executable/",
    "head_branch": "fix_error_reporting",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #271 from ros2/fix_error_reporting\n\nfix error reporting for services"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5718912b45d36a7661",
    "number": 270,
    "body": "Otherwise this code fails the stricter static assertion added in libc++ 3.9.\r\n\r\n```\r\nIn file included from /Users/osrf/jenkins/workspace/ci_osx/ws/src/ros2/rclcpp/rclcpp/include/rclcpp/intra_process_manager_impl.hpp:22:\r\n/usr/local/Cellar/llvm/3.9.0/bin/../include/c++/v1/map:820:5: error: static_assert failed \"Allocator::value_type must be same type as value_type\"\r\nstatic_assert((is_same<typename allocator_type::value_type, value_type>::value),\r\n```",
    "head_branch": "composition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #270 from ros2/composition\n\nfix allocator type"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5918912b45d36a7662",
    "number": 269,
    "body": "follow up of #268 lint cmake to match maximum line length",
    "head_branch": "lint_cmake",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "line length (#269)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5a18912b45d36a7663",
    "number": 268,
    "body": "",
    "head_branch": "composition",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #268 from ros2/composition\n\nadd rclcpp_register_node_plugins macro"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5b18912b45d36a7664",
    "number": 266,
    "body": "Fixes #264/\r\n\r\nMy copy of the master for ROS 2 doesn't currently compile so I worked against Alpha8. The changes apply cleanly to master, however.\r\n\r\nThe need to call `rclcpp::init()` in the tests so that nodes can be created is a bit ugly. I'd welcome suggestions on how to improve that. (Making `Node` an interface so that mocks can be easily created would be a good approach, but also a significant change to the code base; I'm happy to do that work if there is interest.)",
    "head_branch": "has_invalid_weak_nodes_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix has_invalid_weak_nodes (#266)\n\n* Fix #264\r\n\r\n* Corrected test comment"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5c18912b45d36a7665",
    "number": 265,
    "body": "up for design review! \r\nNot crustified yet. Not tested yet (except the demo). First prototype of a lifecycle node demo.\r\n\r\n- `rcl_lifecycle` contains a C based state machine with primary states and transitions as depicted in [design.ros2.org](design.ros2.org). \r\n\r\n- `rclcpp_lifecycle` contains the higher level c++ implementation of a managed node. A managed node has a `rcl_state_machine_t` object as member for keeping track of the state and possible transitions. Further, it has the same API as a `rclcpp::Node` for creating publishers etc. However, each managed node has a handle to all pub/sub/srv/clients in order to activate/deactivate them.\r\n\r\n- `lifecycle_talker.cpp` is a first demo application. Missing here is any kind of container which opens services for calling the transition functions such as `on_configure()` or `on_activate()`, etc.\r\n\r\nFirst commits are equal to https://github.com/ros2/rclcpp/pull/258",
    "head_branch": "lifecycle_impl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add rclcpp lifecycle\n\n* initial state machine implementation\r\n\r\n(fix) correctly initialize default state machine\r\n\r\nuncrustify\r\n\r\n(dev) first high level api interface\r\n\r\nsrc/default_state_machine.c\r\n\r\n(fix) correctly initialize arrays in statemachine\r\n\r\n(dev) deactivate/activate publisher demo\r\n\r\n(dev) initial state machine implementation in rcl\r\n\r\n* (dev) demo application for a managed lifecycle node\r\n\r\n* add visibility control\r\n\r\n* correct install of c-library\r\n\r\n* fix compilation on windows\r\n\r\n* refactoring of external/internal api\r\n\r\n* (dev) generate static functions for c-callback\r\n\r\n* (fix) correct typo\r\n\r\n* (dev) cleanup for c-statemachine\r\n\r\n(dev) cleanup for c-statemachine\r\n\r\n* (dev) cpp callback map\r\n\r\n* (dev) mv source file into project folders\r\n\r\n* (dev) more helper functions for valid transition\r\n\r\n* (dev) pimpl implementation for cpp lifecyclemanager\r\n\r\n* (dev) register non-default callback functions\r\n\r\n* (dev) cleanup lifecycle node to serve as base class\r\n\r\n* (dev) new my_node child of lifecyclenode for demo purpose\r\n\r\nupdate\r\n\r\nstuff\r\n\r\n(cleanup) remove unused comments\r\n\r\n(fix) correct dllexport in windows\r\n\r\n(fix) correctly install libraries\r\n\r\n(fix) uncrustify\r\n\r\n(dev) composition over inheritance\r\n\r\n(dev) publish notification in state_machine transition\r\n\r\n (dev) lifecycle talker + listener demo for notification\r\n\r\n(dev) custom transition message generation\r\n\r\n(dev) publish transition message on state change\r\n\r\n(dev) correctly malloc/free c data structures\r\n\r\n(fix) use single thread executor\r\n\r\n(dev) use services for get state\r\n\r\n(fix) set freed pointer to NULL\r\n\r\n(dev) add change state service\r\n\r\n(dev) introduce services: get_state and change_state in LM\r\n\r\n(dev) asynchronous caller script for service client\r\n\r\n(fix) correct dllexport for pimpl\r\n\r\n(dev) correct constness\r\n\r\n(dev) concatenate function for topic\r\n\r\n(fix) uncrustify\r\n\r\nprepare new service api\r\n\r\n(tmp) refactor stash\r\n\r\n(fix) correctly concatenate topics\r\n\r\n(fix) correctly initialize Service wo/ copy\r\n\r\n(dev) call both service types\r\n\r\nextract demo files\r\n\r\n(fix) remove debug prints\r\n\r\n(dev) change to lifecycle_msgs\r\n\r\n(refactor) extract rcl_lifecycle package\r\n\r\n(refactor) extract lifecycle demos\r\n\r\n(fix) address review comments\r\n\r\n(fix) address review comments\r\n\r\n(fix) pass shared_ptr by value\r\n\r\n(fix) make find_package(rmw) required\r\n\r\n(fix) return to shared node handle pointer\r\n\r\n(refactor) attach sm to lifecycle node and disable lc_manager\r\n\r\n(dev) construct service from existing rcl_service_t\r\n\r\n(refactor) extract method for adding a service to a node\r\n\r\n(fix) stop mock msgs from being installed\r\n\r\nservice takes rcl_node_t*\r\n\r\ncorrect typo\r\n\r\nadd_service has to be public\r\n\r\nuncrustify\r\n\r\ninitial state machine implementation\r\n\r\n(fix) correctly initialize default state machine\r\n\r\nuncrustify\r\n\r\n(dev) first high level api interface\r\n\r\nsrc/default_state_machine.c\r\n\r\n(fix) correctly initialize arrays in statemachine\r\n\r\n(dev) deactivate/activate publisher demo\r\n\r\n(dev) initial state machine implementation in rcl\r\n\r\n(dev) demo application for a managed lifecycle node\r\n\r\nadd visibility control\r\n\r\ncorrect install of c-library\r\n\r\nfix compilation on windows\r\n\r\nrefactoring of external/internal api\r\n\r\n(dev) generate static functions for c-callback\r\n\r\n(fix) correct typo\r\n\r\n(dev) cleanup for c-statemachine\r\n\r\n(dev) cleanup for c-statemachine\r\n\r\n(dev) cpp callback map\r\n\r\n(dev) mv source file into project folders\r\n\r\n(dev) more helper functions for valid transition\r\n\r\n(dev) pimpl implementation for cpp lifecyclemanager\r\n\r\n(dev) register non-default callback functions\r\n\r\n(dev) cleanup lifecycle node to serve as base class\r\n\r\n(dev) new my_node child of lifecyclenode for demo purpose\r\n\r\nupdate\r\n\r\nstuff\r\n\r\n(cleanup) remove unused comments\r\n\r\n(fix) correct dllexport in windows\r\n\r\n(fix) correctly install libraries\r\n\r\n(fix) uncrustify\r\n\r\n(dev) composition over inheritance\r\n\r\n(dev) publish notification in state_machine transition\r\n\r\n (dev) lifecycle talker + listener demo for notification\r\n\r\n(dev) custom transition message generation\r\n\r\n(dev) publish transition message on state change\r\n\r\n(dev) correctly malloc/free c data structures\r\n\r\n(fix) use single thread executor\r\n\r\n(dev) use services for get state\r\n\r\n(fix) set freed pointer to NULL\r\n\r\n(dev) add change state service\r\n\r\n(dev) introduce services: get_state and change_state in LM\r\n\r\n(dev) asynchronous caller script for service client\r\n\r\n(fix) correct dllexport for pimpl\r\n\r\n(dev) correct constness\r\n\r\n(dev) concatenate function for topic\r\n\r\n(fix) uncrustify\r\n\r\nprepare new service api\r\n\r\n(tmp) refactor stash\r\n\r\n* (dev) construct service from existing rcl_service_t\r\n\r\n* service takes rcl_node_t*\r\n\r\n* correct typo\r\n\r\n* add_service has to be public\r\n\r\n* uncrustify\r\n\r\n* (fix) correctly concatenate topics\r\n\r\n* (fix) correctly initialize Service wo/ copy\r\n\r\n* (dev) call both service types\r\n\r\n* extract demo files\r\n\r\n* (fix) remove debug prints\r\n\r\n* (dev) change to lifecycle_msgs\r\n\r\n* (refactor) extract rcl_lifecycle package\r\n\r\n* (refactor) extract lifecycle demos\r\n\r\n* (fix) address review comments\r\n\r\n(fix) address review comments\r\n\r\n* (fix) make find_package(rmw) required\r\n\r\n* (refactor) attach sm to lifecycle node and disable lc_manager\r\n\r\n* (fix) adjust code to rcl_test refactor\r\n\r\n* (dev) remove unused deps\r\n\r\n* (rebase) merge commit\r\n\r\n* (bugfix) correct rcl_ret_t error handling\r\n\r\n* (fix) depedencies\r\n\r\n* (refactor) change to lifecycle_msgs\r\n\r\n* (fix) correct find_rcl\r\n\r\n* (refactor) comply for new state machine\r\n\r\n* visibility control and test api\r\n\r\n* (rebase) change to new typesupport\r\n\r\n* uncrustify'\r\n\r\n* fix visibility control\r\n\r\n* (fix) correct whitespace\r\n\r\n* (fix) unused variable\r\n\r\n* comparison signed and unsigned\r\n\r\n* get_state returns complete state\r\n\r\n* get_available_states service\r\n\r\n* new service msgs\r\n\r\n* get available states and transitions api\r\n\r\n* (broken) state after rebase, does not compile demos\r\n\r\n* fix the way lifecycle node impl is included\r\n\r\n* fixed rebase compilation errors\r\n\r\n* remove copy&paste comment\r\n\r\n* remove empty line\r\n\r\n* (test) register custom callbacks\r\n\r\n* (dev) return codes\r\n\r\n* style\r\n\r\n* test for exception handling\r\n\r\n* refacotr new state machine\r\n\r\n* c++14\r\n\r\n* change exception message for windows ci bug\r\n\r\nchange exception message for windows ci bug"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a5d18912b45d36a7666",
    "number": 262,
    "body": "This is needed to avoid the race condition that is specific to our Connext code, outlined in this issue:\n\nhttps://github.com/ros2/rmw_connext/issues/201\n\nBasically the assumption \"we only need to check the service is available function after a graph event because the state can only change after the graph event is triggered\" does not hold. As there is apparently a race between setting the graph event and the underlying state reflecting the full change.\n\nConnects to ros2/rmw_connext#168\n",
    "head_branch": "local_graph_changes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "always check if the service is available, even if the graph event wasn't triggered (#262)\n\n* always check if the service is available, even if the graph event wasn't triggered\r\n\r\n* more descriptive comment\r\n\r\n* Even more descriptive in case the link ever breaks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5e18912b45d36a7667",
    "number": 261,
    "body": "It was not possible to shutdown a service when there\nwas a shared pointer preventing destructor from being called.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "CallbackGroup keeps now WeakPtrs to Services. (#261)\n\nIt was not possible to shutdown a service when there\r\nwas a shared pointer preventing destructor from being called."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a5f18912b45d36a7668",
    "number": 260,
    "body": "connects to https://github.com/ros2/rcl/pull/85\n",
    "head_branch": "zero_init_topic_names_and_types",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Zero init topic names and types (#260)\n\n* use zero init topic_names_and_type struct\r\n\r\n* use the right arguments\r\n\r\n* line length"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6018912b45d36a7669",
    "number": 258,
    "body": "change:\n- `Node::create_publisher` function has a new template parameter for publisher type (`rclcpp::publisher::Publisher` by default)\n- all `publish` functions are virtual for being able to inherit from",
    "head_branch": "lifecycle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "open Node/Publisher API for allowing inheritance (#258)\n\n* (dev) template create_publisher with publisher type\r\n\r\n* (dev) template publisher type for dynamic publisher type instantiation\r\n\r\n* (dev) make Publisher::publish function virtual\r\n\r\n* (fix) uncrustify\r\n\r\n* different indentation of long template declaration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a6118912b45d36a766a",
    "number": 255,
    "body": "Update style to pass new cpplint check (ament/ament_lint#59).\n\nhttp://ci.ros2.org/job/ci_linux/1763/\n",
    "head_branch": "fix_cpplint",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #255 from ros2/fix_cpplint\n\ncomply with stricter cpplint rules"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6218912b45d36a766b",
    "number": 254,
    "body": "I added two simple templates for initializing a node with a single publisher or subscriber.\nA node can easily be instantiated and added to the executor. The user only has to implement the constructor and the `publish` or `callback` function respectively. \n\nexample publisher: https://github.com/Karsten1987/my_ros2_demos/blob/master/src/laser_publisher_node.hpp\n\nexample subscriber:\nhttps://github.com/Karsten1987/my_ros2_demos/blob/master/src/laser_subscriber_node.hpp\n\nIf such an example would I make sense, I iterate more over it (test, style, etc.)\n\nconnects to https://github.com/ros2/examples/issues/129\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6318912b45d36a766c",
    "number": 253,
    "body": "removed some warnings when compiling with -Wpedantic with g++ (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "removed extra semi-colon (#253)\n\n* removed extra semi-colon\r\n\r\n* added -Wpedantic flag for GCC\r\n\r\n* added same warnings for clang\r\n\r\n* simplified CMake command"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a6518912b45d36a766d",
    "number": 252,
    "body": "Replaces https://github.com/ros2/rclcpp/pull/251\nCloses https://github.com/ros2/rclcpp/issues/250\n",
    "head_branch": "issue_251_wjwwood",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Issue 251 wjwwood (#252)\n\n* removed warning in windows\r\n\r\n* removed warning in windows\r\n\r\n* fixup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6618912b45d36a766e",
    "number": 251,
    "body": "https://github.com/ros2/rclcpp/issues/250\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6718912b45d36a766f",
    "number": 245,
    "body": "Added an API for getting a single parameter.\n\nNote: this PR is based on master, and might conflict with my other PR\n",
    "head_branch": "get_parameter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Get single parameter (#245)\n\n* added function to get parameter by exact name\r\n\r\n* added ros1 style get_parameter for parameter variant\r\n\r\n* added ros1 style get_param for non-variant types\r\n\r\n* Make the get_parameter functions call a private base function\r\n\r\n* Parameter Variant requires name in constructor\r\n\r\n* Cleaned up to no longer need private function\r\n\r\n* Made exception message more clear"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6818912b45d36a7670",
    "number": 244,
    "body": "See #243\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added basic hook for parameter changes (#244)\n\n* Added basic hook for parameter changes\r\n\r\n* Rename hook and add docblock"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a6918912b45d36a7671",
    "number": 242,
    "body": "",
    "head_branch": "setparameters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #242 from SantiagoMunoz/setparameters\n\nAdded missing variable initialization in Node constructor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6a18912b45d36a7672",
    "number": 237,
    "body": "This is a replacement for #233, with the same diff (because I once again went into the weeds while attempting to rebase; I'll get the hang of that eventually).\n- Linux:\n  - [![Build Status](http://ci.ros2.org/job/ci_linux/1648//badge/icon)](http://ci.ros2.org/job/ci_linux/1648/) \n- OS X:\n  - [![Build Status](http://ci.ros2.org/job/ci_osx/1237//badge/icon)](http://ci.ros2.org/job/ci_osx/1237/)\n",
    "head_branch": "param_helpers2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add parameter helpers (redo of #233) (#237)\n\n* add parameter helpers\r\n\r\n* respond to comments\r\n\r\n* remove unnecessary indent comments\r\n\r\n* replace temp variable assignment with explicit constructor invocation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6b18912b45d36a7673",
    "number": 236,
    "body": "We have a parameter qos profile (https://github.com/ros2/rmw/blob/master/rmw/include/rmw/qos_profiles.h#L33-L39), but we're not using it in the param service or client creation. This PR uses it.\n\nA future extension to consider would be exposing the qos setting through the parameter service/client creation API, to allow the user to change it.\n\n(This came up while working on eProsima/ROS-RMW-Fast-RTPS-cpp#46, wherein it was identified that the history depth was too shallow.)\n- Linux:\n  - [![Build Status](http://ci.ros2.org/job/ci_linux/1640//badge/icon)](http://ci.ros2.org/job/ci_linux/1640/) \n- OS X:\n  - [![Build Status](http://ci.ros2.org/job/ci_osx/1229//badge/icon)](http://ci.ros2.org/job/ci_osx/1229/)\n",
    "head_branch": "use_param_profile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "use the param profile for param services (#236)\n\n* use the param profile for param services\r\n\r\n* expose qos to users of param clients / services"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6c18912b45d36a7674",
    "number": 234,
    "body": "Before: http://ci.ros2.org/job/ci_windows/1589/warnings35Result/new/package.-1592860977/\nAfter: http://ci.ros2.org/job/ci_windows/1593/\n",
    "head_branch": "param_helpers2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix warnings (#234)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6d18912b45d36a7675",
    "number": 233,
    "body": "Add features that are handy when working with params:\n- Check for existence of param: `bool exists = client.has_parameter(\"foo\")`\n- Get value of one param: `double bar = client.get_parameter<double>(\"foo\")` (throws if the param isn't set)\n- Get value of one param, with default: `double bar = client.get_parameter(\"foo\", 4.2)` (returns 4.2 if the param isn't set)\n\nTests are in ros2/system_tests#149.\n- Linux:\n  - [![Build Status](http://ci.ros2.org/job/ci_linux/1622//badge/icon)](http://ci.ros2.org/job/ci_linux/1622/) \n- OS X:\n  - [![Build Status](http://ci.ros2.org/job/ci_osx/1221//badge/icon)](http://ci.ros2.org/job/ci_osx/1221/)\n",
    "head_branch": "param_helpers",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a6f18912b45d36a7676",
    "number": 231,
    "body": "This PR implements `std::to_string` for Android, which does not exist on the NDK.\n\nAlso, `bionic`, the C library for Android uses the standard signature for `strerror_r`, not the GNU extension, despite `GNU_SOURCE` being defined.\n\nI don't know if `utilities.hpp` is the best place to put `std::to_string`, so I'm open to suggestions.\n",
    "head_branch": "android",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement std::to_string for Android (#231)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7018912b45d36a7677",
    "number": 230,
    "body": "Connects to https://github.com/ros2/rclcpp/issues/196\n",
    "head_branch": "issue196-again",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Allow empty prefix list to get all params; check depth correctly. (#230)\n\n* Allow empty prefix list to get all params; check depth correctly.\r\n\r\n* use enum instead of constant"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7118912b45d36a7678",
    "number": 229,
    "body": "Fix style errors introduced in #226. I ran the linter tests locally with this change and they passed.\n",
    "head_branch": "make_that_damned_linter_happy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix style (#229)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7218912b45d36a7679",
    "number": 228,
    "body": "This enables building on UWP, which does not implement `_dupenv_s`:\n\nhttps://msdn.microsoft.com/en-us/library/windows/apps/jj606124.aspx\n",
    "head_branch": "uwp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7318912b45d36a767a",
    "number": 227,
    "body": "Connect to ament/ament_cmake#72\n",
    "head_branch": "cmake35",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #227 from ros2/cmake35\n\nrequire CMake 3.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7418912b45d36a767b",
    "number": 226,
    "body": "Fix #225 by returning a different guard condition for each waitset, to avoid having one condition reused across waitsets.\n\n@wjwwood, this isn't the implementation that you suggested, but I found it to be the most straightforward way to fix the problem. What do you think?\n\n(I'll run CI after I get consensus on the implementation.)\n",
    "head_branch": "global_guard",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Give a different signal guard condition for each waitset (#226)\n\nFixes #225."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a7518912b45d36a767c",
    "number": 224,
    "body": "Connect to ros2/rmw_connext#173\n",
    "head_branch": "export_link_flags",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7618912b45d36a767d",
    "number": 223,
    "body": "Test failures such as:\n- http://ci.ros2.org/view/nightly/job/nightly_osx_repeated/339/testReport/%28root%29/projectroot/gtest_executor__rmw_fastrtps_cpp/\n- http://ci.ros2.org/view/nightly/job/nightly_win_rel/105/testReport/%28root%29/projectroot/gtest_executor__rmw_opensplice_cpp/\n\ncan be traced to concurrent access to the various vectors of pointers in `CallbackGroup`. For example, if you have a single-threaded executor spinning a node and you call `create_wall_timer()` on that node from another thread, then you can be pushing the new timer onto `CallbackGroup::timer_ptrs_` while the executor is reading the same vector.\n\nThis PR adds a single mutex to protect all of the vectors. If we observe contention, we could consider making the protection more granular.\n- Linux:\n  - [![Build Status](http://ci.ros2.org/job/ci_linux/1409/badge/icon)](http://ci.ros2.org/job/ci_linux/1409/)\n- OSX:\n  - [![Build Status](http://ci.ros2.org/job/ci_osx/1093/badge/icon)](http://ci.ros2.org/job/ci_osx/1093/)\n- Windows:\n  - [![Build Status](http://ci.ros2.org/job/ci_windows/1417/badge/icon)](http://ci.ros2.org/job/ci_windows/1417/)\n",
    "head_branch": "mutex_callbackgroup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #223 from ros2/mutex_callbackgroup\n\nAdd mutex to protect vectors of pointers in callbackgroup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7718912b45d36a767e",
    "number": 222,
    "body": "Replacement for https://github.com/ros2/rclcpp/pull/221\n\nConnects to ros2/ros2#215\n",
    "head_branch": "wait_for_service2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add wait_for_service() and service_is_ready() to Client (#222)\n\n* add wait_for_service() and service_is_ready() to Client\r\n\r\n* fix compile on Linux (maybe Windows)\r\n\r\n* use visibility macros for Windows\r\n\r\n* prevent unreasonable uncrustify change\r\n\r\n* fixup comment\r\n\r\n* add GraphListener::is_shutdown()\r\n\r\n* disable copy on GraphListener\r\n\r\n* use weak_ptr<Node> in client, throw if invalid\r\n\r\n* ensure blocking wait_for_service wakes on rclcpp::shutdown/sigint\r\n\r\n* rethrow exceptions after reporting them in thread\r\n\r\n* lock ~Node() against notify_graph_change()\r\n\r\nthis essentially protects the notify_guard_condition_\r\n\r\n* adjust thread sync strategy\r\n\r\n* style\r\n\r\n* moving initialization of wait set around, fix double free\r\n\r\n* only fini wait set if started\r\n\r\n* use rclcpp::shutdown to ensure graph listener resources clean up before static destruction\r\n\r\n* uncrustify"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a7918912b45d36a767f",
    "number": 221,
    "body": "Connects to ros2/ros2#215\n\nThis is still a WIP.\n",
    "head_branch": "wait_for_service",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7a18912b45d36a7680",
    "number": 220,
    "body": "Check rmw implementation used matches what's expected\nConnects to ros2/examples#96\n",
    "head_branch": "test-linking-runtime",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #220 from dhood/test-linking-runtime\n\nRegression test for #213"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7b18912b45d36a7681",
    "number": 215,
    "body": "Connect to ament/ament_cmake#68\n",
    "head_branch": "ctest_build_testing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #215 from ros2/ctest_build_testing\n\nuse CTest BUILD_TESTING"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7c18912b45d36a7682",
    "number": 213,
    "body": "See https://github.com/ros2/rclcpp/pull/182/files#r61188395\n\nWithout this fix it failed for me similar to ros2/rcl#52 when using the evaluation version of Connext (x64Linux3gcc4.8.2).\n",
    "head_branch": "fix_wrong_link_library",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #213 from ros2/fix_wrong_link_library\n\nfix wrong link library for test_rate gtest"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a7d18912b45d36a7683",
    "number": 212,
    "body": "In #207 I broke the packaging job by messing with the virtual destructor of `PublisherBase`. This caused the ros1bridge to fail because of a dynamic_cast from PublisherBase to Publisher.\n\nPackaging test:\nhttp://ci.ros2.org/view/packaging/job/packaging_linux/226/\n\nNormal CI:\nhttp://ci.ros2.org/job/ci_linux/1219/\nhttp://ci.ros2.org/job/ci_osx/984/\nhttp://ci.ros2.org/job/ci_windows/1266/\n",
    "head_branch": "fix_bridge_build",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Virtual destructors (#212)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a7e18912b45d36a7684",
    "number": 210,
    "body": "Fixes #209 \nalso connects to ros2/rcl#33\n",
    "head_branch": "fixed_guard_conditions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove fixed guard conditions, add notify guard conditions\n\n* No more fixed guard conditions.\r\n\r\n* Add notify guard condition to nodes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a7f18912b45d36a7685",
    "number": 208,
    "body": "rcl currently does not expose the clock type for timers; it assumes a steady clock.\n\nAdditionally, in our current implementation of rclcpp, specializing the GenericTimer type with a non-steady clock type results in undefined behavior.\n\nExposing the clock type for rcl and adding logic to handle non-monotonic timers will take a little more forethought and design (to be done when @tfoote continues pushing on ROS time features). In the meantime, this pull request disables the GenericTimer specialization if the Clock type is not steady (luckily `std::chrono` provides a constant boolean for Clock types for this kind of thing).\n\n@wjwwood, we discussed this change but I'm now unsure how to write a test for this because I've disabled the specialization at compile time, let me know if you have any ideas.\n",
    "head_branch": "timer_specialization",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8118912b45d36a7686",
    "number": 207,
    "body": "TODO:\n- [x] address problems linking to all rmw implementations\n- [x] address intra process test failure\n- [x] address multithreaded test failure\n- [x] services hang (connext and connext dynamic only)\n",
    "head_branch": "use_rcl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor to use rcl (#207)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a8218912b45d36a7687",
    "number": 202,
    "body": "This pr does two things, first it adds a way to print out a meaningful string for a given FutureReturnCode (which I needed when debugging). You can now get an output like this:\n\n```\n/Users/william/ros2_ws/src/ros2/system_tests/test_rclcpp/test/test_subscription.cpp:80: Failure\nValue of: future_ret\n  Actual: INTERRUPTED (1)\nExpected: FutureReturnCode::SUCCESS\nWhich is: SUCCESS (0)\n```\n\nSecond it refactors the `executor.spin_until_future_complete` which was, imo, not working correctly before and which I needed when addressing some flaky-ness of one of the tests in `test_rclcpp`. Before this patch, I believe it would pass the full `timeout` value to `spin_once` even if it had spent some time spinning a previous time through the while loop. The changes to fix up the test (and use these changes) is forthcoming.\n\nConnects to ros2/system_tests#108\n",
    "head_branch": "fix_flaky_subscription_and_spinning_test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 82139f1a12c29f84211b7119268fc546eaae505d into 249b7d80d8f677edcda05052f598de84f4c2181c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a8318912b45d36a7688",
    "number": 199,
    "body": "Connects to ros2/rmw#57\n",
    "head_branch": "request_header",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f6ce2d8dc5525e5a2c45f626bda53cefb45a3115 into 69f7bca85d523ee8647c2051651184023ad1c6ad"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8418912b45d36a7689",
    "number": 198,
    "body": "I added the remote node name to the constructor of the SyncParametersClient and passed it to the internal used AsyncParametersClient\n",
    "head_branch": "sync_parameter_client",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8518912b45d36a768a",
    "number": 197,
    "body": "Connects to ros2/rclcpp#196 and ros2/system_tests#107.\n\nAdd the ability to retrieve the list of all parameters by passing an empty list of prefixes. In that case, the depth argument is ignored. This is one way to do it; other ideas for calling semantics to get the desired behavior?\n",
    "head_branch": "issue196",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8618912b45d36a768b",
    "number": 194,
    "body": "based on comments on a file copy/pasted from this repo in ros2/rcl#21.\n",
    "head_branch": "get_rclcpp_info_cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 9f84273467f0e5665cc10f122b32a08eb842c7b8 into 9d754a70a24d10cbb30ce2efd18f06c42c0286f5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8718912b45d36a768c",
    "number": 193,
    "body": "Connects to #192\n\nI'm not sure if this is a good strategy, do we need to manage the state of the client somehow?\n\n@esteve what are your thoughts?\n",
    "head_branch": "issue_192",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 4a04fe8b4ad56e52919af9b393735c2ce5106a96 into 6fbf3f8c5f993dd17b8fcf5bdce97b542dd5830a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8918912b45d36a768d",
    "number": 191,
    "body": "Fixes failures like this:\n\nhttp://ci.ros2.org/view/nightly/job/nightly_osx/163/testReport/%28root%29/projectroot/test_rate/\n\nThe problem was that we were requiring the time elapsed between the first and second calls to sleep to be greater than or equal to the period. That's not guaranteed, in particular if the first call to sleep ran long. Instead we should check that the time elapsed between the creation of the rate object and the nth call to sleep is greater than or equal to n periods.\n\nWith that fix, we no longer need to allow `epsilon` underrun (because underrun should **never** occur on a properly working timer).\n\nWhile I was in there, I updated the `WallRate` tests to use the `steady_clock` instead of the `system_clock`, because that's what's being used in the underlying classes (in fact, it's the only difference between `Rate` and `WallRate`).\n",
    "head_branch": "fix_rate_test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge be0be759ec9040372a79a80c0b991c200cbe4074 into 4d47ef30aeb612e77aa7ee291954b6c891912d76"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8a18912b45d36a768e",
    "number": 188,
    "body": "Use move semantics to store callback and perfect forwarding to pass it down to GenericTimer\n",
    "head_branch": "move_callback_timer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8b18912b45d36a768f",
    "number": 187,
    "body": "Connects to ros2/realtime_support#16\n\nCorrect an error message and pass the same allocator to the `AllocSet` (a set of uint64_t) that is stored in a map in IntraProcessManager. This is to avoid reinitializing an allocator on each call to store_intra_process_message. This is useful if the default constructor of an allocator has to preallocate memory, but the copy constructor of an allocator does not.\n",
    "head_branch": "set_allocations",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 16da43e1f074c9211947da83cbfe240c12337a4b into c878e966e324fa1c1af4938beb78e36216a02e9d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8c18912b45d36a7690",
    "number": 186,
    "body": "CI: \n- http://ci.ros2.org/job/ci_linux/760 (expected)\n- http://ci.ros2.org/job/ci_osx/640/\n- http://ci.ros2.org/job/ci_windows/825/\n  \n  identified in #169\n",
    "head_branch": "remove_sleep",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge a7a61119fd749aae2464fe444c920b2c9915c404 into 300c7ca137bd6dc03e2802537237e492a3ecacb9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8d18912b45d36a7691",
    "number": 185,
    "body": "@tfoote\n",
    "head_branch": "rate_tests_wjwwood",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8e18912b45d36a7692",
    "number": 184,
    "body": "This adds support for free functions, which were missing in the previous `std::bind` PR (https://github.com/ros2/rclcpp/pull/183)\n",
    "head_branch": "std_bind_function_traits_free_functions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 1577ab29921847744edbda7221109b3b7dd003c1 into 534ae69ed5a811d0146584cdcb5dea447c7e7e49"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a8f18912b45d36a7693",
    "number": 183,
    "body": "This PR adds support for std::bind in function_traits\n\nExtends #175 \n\nConnects to #173\n",
    "head_branch": "std_bind_function_traits",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge b22fca578024ec5e09750209806a9b75e80932b7 into 4f9f152ce8631a5c10770831f36aeab0e2c38640"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9018912b45d36a7694",
    "number": 182,
    "body": "Connects to #181 \n\nFirst adding unit tests for coverage. Next debug problem. \n\nThe problem from 181 is reproduced in these unit tests: \n\nCI: http://ci.ros2.org/job/ci_osx/602/\n\n```\n08:42:55 In file included from /Users/osrf/jenkins/workspace/ci_osx/ws/src/ros2/rclcpp/rclcpp/test/test_rate.cpp:19:\n08:42:55 /Users/osrf/jenkins/workspace/ci_osx/ws/src/ros2/rclcpp/rclcpp/include/rclcpp/rate.hpp:74:20: error: no viable overloaded '+='\n08:42:55     last_interval_ += period_;\n08:42:55     ~~~~~~~~~~~~~~ ^  ~~~~~~~\n08:42:55 /Users/osrf/jenkins/workspace/ci_osx/ws/src/ros2/rclcpp/rclcpp/test/test_rate.cpp:32:5: note: in instantiation of member function 'rclcpp::rate::GenericRate<std::__1::chrono::system_clock>::sleep' requested here\n08:42:55   r.sleep();\n08:42:55     ^\n08:42:55 /Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/chrono:782:79: note: candidate function not viable: no known conversion from 'duration<[...], ratio<[...], 1000000000>>' to 'const duration<[...], ratio<[...], 1000000>>' for 1st argument\n08:42:55     __attribute__ ((__visibility__(\"hidden\"), __always_inline__)) time_point& operator+=(const duration& __d) {__d_ += __d; return *this;}\n08:42:55                                                                               ^\n08:42:55 In file included from /Users/osrf/jenkins/workspace/ci_osx/ws/src/ros2/rclcpp/rclcpp/test/test_rate.cpp:19:\n08:42:55 /Users/osrf/jenkins/workspace/ci_osx/ws/src/ros2/rclcpp/rclcpp/include/rclcpp/rate.hpp:81:24: error: no viable overloaded '='\n08:42:55         last_interval_ = now + period_;\n08:42:55         ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n08:42:55 /Users/osrf/jenkins/workspace/ci_osx/ws/src/ros2/rclcpp/rclcpp/test/test_rate.cpp:32:5: note: in instantiation of member function 'rclcpp::rate::GenericRate<std::__1::chrono::system_clock>::sleep' requested here\n08:42:55   r.sleep();\n08:42:55     ^\n08:42:55 /Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/chrono:750:56: note: candidate function (the implicit copy assignment operator) not viable: no known conversion from 'time_point<[...], duration<[...], ratio<[...], 1000000000>>>' to 'const time_point<[...], duration<[...], ratio<[...], 1000000>>>' for 1st argument\n08:42:55 class __attribute__ ((__type_visibility__(\"default\"))) time_point\n08:42:55                                                        ^\n08:42:55 /Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/chrono:750:56: note: candidate function (the implicit move assignment operator) not viable: no known conversion from 'time_point<[...], duration<[...], ratio<[...], 1000000000>>>' to 'time_point<[...], duration<[...], ratio<[...], 1000000>>>' for 1st argument\n08:42:55 class __attribute__ ((__type_visibility__(\"default\"))) time_point\n```\n",
    "head_branch": "rate_tests",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8af64b95e55b2b5fdfde5ed6dbb206c3f86ee03e into 496c3e1798261c4e493cba73975b8edd9f825682"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9118912b45d36a7695",
    "number": 180,
    "body": "Connects to ros2/rcl#5\n",
    "head_branch": "rcl_refactor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge a8d9d894c3cc816da5c6df4f9e22714f77bcf0cf into 1fe47b717f2993fea42ca1708207a8d96f9f38ce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9218912b45d36a7696",
    "number": 178,
    "body": "Retargeting #176 against master\nCI:\n\nhttp://ci.ros2.org/job/ci_linux/716/\nhttp://ci.ros2.org/job/ci_osx/593/\nhttp://ci.ros2.org/job/ci_windows_opensplice/782/\nhttp://ci.ros2.org/job/ci_windows_connext_static/57\nhttp://ci.ros2.org/job/ci_windows_connext_dynamic/47\n",
    "head_branch": "inline_helper_functions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 6fd373d274f59ec83800f24bd97f5d398a08f538 into 51a14baae2152ce336f35f430591387b73f426aa"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9418912b45d36a7697",
    "number": 177,
    "body": "This is left over from the early node component demos and is no longer used.\n",
    "head_branch": "remove_old_files",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 46d18d56273d451d4ebbc7640b83e49e24a0b629 into 9cd129c70f6b25a39d265a42951b13b93f7fbbf1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9518912b45d36a7698",
    "number": 176,
    "body": "There are a few functions which need inlining from #174 not caught in the refactor.  This adds them to the refactor branch. This extends #172 \n",
    "head_branch": "inline_helper_functions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9618912b45d36a7699",
    "number": 175,
    "body": "This PR adds support for `std::bind` in `function_traits`\n\n`std::_Bind<std::_Mem_fn<...>>` should be replace with `decltype(std::bind(...))`, but I couldn't get that to compile.\n\nConnects to #173 \n",
    "head_branch": "std_bind_function_traits",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9718912b45d36a769a",
    "number": 174,
    "body": "These were causing multiple definitions when building a library and an executable which used rclcpp. \n",
    "head_branch": "inline_methods",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9818912b45d36a769b",
    "number": 172,
    "body": "Connect to ros2/rmw_implementation#9\n",
    "head_branch": "refactor_typesupport",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge e38ac73c69ac6b09c9260e85e68a01768397c6d5 into 3688bb321508bd75a5c5de36f71cf73c1d792ebb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9918912b45d36a769c",
    "number": 171,
    "body": "Possible fix for deadlock introduced by deleting a mutex in Publisher.\n\nsome code complexity is introduced, but the mutex is delegated to a subclass of MappedRingBufferBase. An alternative lock-free implementation could use a lock-free data structure instead of the default MappedRingBuffer implementation.\n",
    "head_branch": "add_additional_mutex",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 4f929bd2570f05dfdf7cc82acd0e2c1e72af0ff9 into c2554d61bc22df3a2d4a78cbf016f296b9e5dcac"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9a18912b45d36a769d",
    "number": 170,
    "body": "I've determined this mutex is unnecessary because the shared state accessed by the `store_intra_process_message_` callback is locked by mutexes internal to `IntraProcessManager`.\n\nI've run the relevant multithreaded pub/sub intra-process test case over 600 times with Opensplice without seeing a segfault.\n",
    "head_branch": "remove_extraneous_mutex",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 6d2f8ae634aeaa2ffa9e5f7bf251c63726f80f40 into 67dcd9fe4923c4cfef1977d33073f7690697f498"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217a9b18912b45d36a769e",
    "number": 169,
    "body": "A small change to optimize the performance of MultiThreadedExecutor. Currently the parent thread in MultiThreadedExecutor simply waits for the `n` execution threads to finish. This change ensures that the parent thread executes work and launches n-1 child threads.\n\n~~I'll wait on some pending improvements to the multithreaded test before launching Jenkins jobs for this.~~\n",
    "head_branch": "multithreaded_idle_thread",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge dd1f38b4c86c4890e8b6a662f2fbac34d1b88a1c into 8abdf6f670b2f2305dac3373e0c908fe3b911d1b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9d18912b45d36a769f",
    "number": 168,
    "body": "This makes sure that the returned value of `strerror_r` is used.\n",
    "head_branch": "avoid_compiler_warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge f0fd292ccb2ed6bbaf5cffcdb79a465e11313dce into 13d36a1bde49721a2167234cbe1e6f47b2f8c656"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9e18912b45d36a76a0",
    "number": 167,
    "body": "Potential fix for currently broken Windows build.\n\nI use a local Context in the multithreaded test, to make sure the IntraProcessManager gets cleaned up between test cases.\n\nThe Context constructor does not use the RCLCPP_PUBLIC macro.\n\nI believe we previously didn't test this constructor anywhere in user code.\n",
    "head_branch": "fix_windows_context",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217a9f18912b45d36a76a1",
    "number": 166,
    "body": "Connects to ros2/rmw#49\n\nTODO:\n- [ ] Expose `max_conditions` argument to the user-facing API in a graceful way.\n- [ ] Synchronization.\n",
    "head_branch": "waitset_handle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 4b0ad21b3dd465da4da7907b56aebd724907267e into 6ec5e8e9744edab1f5fe497ddf86320ab81daaa9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217aa018912b45d36a76a2",
    "number": 165,
    "body": "To implement a lock-free IntraProcessManagerImpl in the future, I will extend from IntraProcessManagerImplBase and use lock-free structures instead of mutexes.\n",
    "head_branch": "intra_process_lock",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 67151def413b836c036250d3ea05d05fbcb59192 into f5e5acd06eeb02be2425f3e2a76c936539b7cd2f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aa118912b45d36a76a3",
    "number": 164,
    "body": "In progress.\n\nPotential fix for the weird pointer corruption bugs in ros2/system_tests#72 (still testing).\n\nI broke AnyExecutable into a State class so that I can use a pure POD type for the lock-free queue in LockFreeExecutor. I can revert this part of the PR and create the class in LockFreeExecutor if need be.\n",
    "head_branch": "any_executable",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aa218912b45d36a76a4",
    "number": 163,
    "body": "In order to write an Executor in a library outside of rclcpp, scope_exit needs to be installed to the include directory.\n\nThe fact that it wasn't already doing this suggests to me that there is a problem with this approach (possibly on Windows)... @wjwwood, any comments?\n",
    "head_branch": "export_scope_exit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aa318912b45d36a76a5",
    "number": 162,
    "body": "The current code requires the type `MessageT` to have a type `SharedPtr` / `ConstSharedPtr` defined within.\n\nWith the patch this requirement i gone and the code uses std::shared_ptr directly (that is also explicitly embedded in the signature of the function being invoked next).\n",
    "head_branch": "plain_shared_ptr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aa418912b45d36a76a6",
    "number": 161,
    "body": "Potential fix for recently broken Windows build.\n",
    "head_branch": "fix_import_symbols",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 481d58bb6e4c74b7462042ae0aab8f96ec4e8aae into 2f6fc44d43564f97ee72dfbd4fb0b65ad853f327"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aa518912b45d36a76a7",
    "number": 160,
    "body": "This adds `return_type` as a member of the `function_traits` structure.\n",
    "head_branch": "function-traits-return-type",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge eff6500aca1dbc54584a4bfe4ac64b997484ea60 into 03697d149a8f89337c2da3acd385c0945547f96c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aa718912b45d36a76a8",
    "number": 159,
    "body": "~~As discussed with @wjwwood offline. This PR changes the Timer callback signature to return a bool, which signals the Executor to cancel the timer if true.~~\n\nCreate an alternative callback signature to Timer that accepts a Timer object. This enables the user to implement timers that fire any number greater than 1 times by capturing a variable to keep track of the number of callbacks triggered and conditionally cancelling the timer. It could also allow the user to change the loop rate in the future.\n",
    "head_branch": "finite_timer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 3a5bbffc656b818d6367198e1c898cdc417d2567 into 82d895c749c7f0620bc96335b6a4c03f538829d5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217aa818912b45d36a76a9",
    "number": 158,
    "body": "this is a very messy piece of code that I wanted to rework. It's particularly important because instantiating a vector instantiates a new allocator, which is really bad if your allocator constructor is, say, not RT-safe.\n",
    "head_branch": "redundant_allocator_constructions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge ff9b4920413583104e2a2e9c8567f4bf1e178242 into 10ce7a3bd6a2a9e45f11a2a56ac3af0aa8e4aa96"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217aa918912b45d36a76aa",
    "number": 157,
    "body": "Connects to #35 \n",
    "head_branch": "return-request",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 26d52d949ec63eabe365b088e77a51f1290b51bd into 39c663ea644d8469abe97e19a01e5359f2955e93"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aaa18912b45d36a76ab",
    "number": 156,
    "body": "Known issues:\n\nto reproduce:\n\n./build/test_rclcpp/gtest_multithreaded__rmw_opensplice_cpp --gtest_filter=*publisher_intra_process --gtest_repeat=-1\n\nIssues only seem to occur in Opensplice in the intra process test cases, and much more frequently in the multi_access_publisher_intra_process case.\n- AnyExecutable occasionally gets garbage in a few of its shared_ptr fields.\n\n```\ntimer: {_M_ptr = 0x106cbf8, _M_refcount = {_M_pi = 0x106cbe0}}, <No data fields>}\nsubscription: {_M_ptr = 0x0, _M_refcount = {_M_pi = 0x2}}, <No data fields>}\nsubscription_intra_process: {_M_ptr = 0x100003b31, _M_refcount = {_M_pi = 0x0}}\n```\n\nIt looks to me like:\ntimer is a valid shared_ptr. The pointer value changes between runs but it always looks like a valid shared_ptr.\nsubscription is a null pointer with a refcount of 2 (not good). These values stay the same in every occurrence of the bug.\nsubscription_intra_process is an invalid pointer (value evaluates to 2^32+15153 in decimal) with no ref count. The ref count is always 0, the pointer value changes between runs (but it's always over 2^32 aka 0x100000000).\n\nTimer is not always set, sometimes the error occurs when the any_executable already has null ptr fields and it's trying to set `subscription`. However, it segfaults because it sees that `subscription` has a non-zero refcount and tries to release already null memory.\n- Random deadlock.\n- Random segfaults due to ownership issues of an rmw_guard_condition (probably have to extend locking of the interrupt_guard_condition in Executor).\n",
    "head_branch": "multithreaded",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aab18912b45d36a76ac",
    "number": 155,
    "body": "@jacquelinekay as we discussed off-line.\n",
    "head_branch": "cancel_wjwwood",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 5bd71c1f8096d39a9b2c3b3f8bcd54065f51f25a into 0a478e52333238bb4bbcbeaab7216f4970175e69"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217aac18912b45d36a76ad",
    "number": 153,
    "body": "implement state and logic for cancelling out of Executor::spin or Executor::spin_some.\n",
    "head_branch": "cancel",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 1c9eb0b36798cc202bc584cae5c0bce78d2ca307 into fabea6b4b63fd007d210ae7b0657a08a0b376314"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217aad18912b45d36a76ae",
    "number": 152,
    "body": "`shutdown` should be the inverse function of `init`. This PR sets state that is set in `shutdown` back to what its starting value should be in `init`, to make the functions more symmetric.\n\nIdeally, calling `init, shutdown, init` should have the same effect as calling `init` once.\n",
    "head_branch": "reset_signal",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aae18912b45d36a76af",
    "number": 151,
    "body": "",
    "head_branch": "qos_services",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aaf18912b45d36a76b0",
    "number": 149,
    "body": "Executor now contains `spin_once` and `spin_until_future_complete` functions, which are then called by `spin_node_once` and `spin_node_until_future_complete`. This is a small optimization to prevent the additional overhead of adding a node to an executor every time these functions are to be called. It will help my upcoming allocator test for services/clients.\n\nThis PR also changes the namespace of `FutureReturnCode` from `rclcpp::executors` to `rclcpp::executor`, a subtle change. PRs changing the namespace throughout the codebase forthcoming.\n\nThis change may relate to our upcoming discussion about the rcl/rclc API.\n",
    "head_branch": "executor_spin_future",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 660d76207283d83cdce5c65ea3fb27b1e43ccbe4 into f4a094afc8dbb0703efc4f42f8089c704aea83d2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ab118912b45d36a76b1",
    "number": 148,
    "body": "Fix cpplint warnings\n\nConnects to ros2/ros2#12\n",
    "head_branch": "cpplint",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 39b66fa0b5da33e1f12941d5a8f04326258b3659 into 361faf650da9a7a7b346a1616e6dca6b19f0f958"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ab218912b45d36a76b2",
    "number": 147,
    "body": "This PR uses universal references for callbacks.\n",
    "head_branch": "perfect-forwarding",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8c47f6151bd5c68bd7b2a31e375c114ad8ba087e into e42d7d7044b470de1529f894d3dbee6308447cb5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ab318912b45d36a76b3",
    "number": 146,
    "body": "Fixes ros2/system_tests#36\n\nBased on the discussion in ros2/system_tests#66\n\nPreviously, timers would fire on the very first call to spin, no matter how much time passed between their construction and the call to spin.\n\nThis PR will change the behavior of timers so that the timer will fire one period after being created, or on the first call to spin IF that call happens after one period.\n",
    "head_branch": "fix_timer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge dcd5117f896d3850318090a1e3dfe59a739c1c4c into ca64af31452078e165136860511a911d0ff0b0d0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ab418912b45d36a76b4",
    "number": 145,
    "body": "Before http://ci.ros2.org/view/packaging/job/ros2_packaging_linux/41/warnings17Result/package.-340390346/\nAfter http://ci.ros2.org/view/packaging/job/ros2_packaging_linux/42/\n",
    "head_branch": "fix_warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ab518912b45d36a76b5",
    "number": 144,
    "body": "On Windows this issue is most prenounced, but apparently it is possible on all platforms that `std::condition_variable::wait_for` can be spuriously interrupted and return `std::cv_status::no_timeout` even when not notified.\n\nThis logic attempts to deal with this by adding an additional bool to indicate when the system has been interrupted either by ctrl-c or `rclcpp::shutdown` and will recurse if the specified duration has not yet been exceeded.\n",
    "head_branch": "fix_sleep_for_windows",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 426b77bcd97a4e660fd2a42f172c804537b8945e into 91e78406ce82971c79e5489aff57ecff3c81b7ce"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ab618912b45d36a76b6",
    "number": 143,
    "body": "This removes a reference, lambdas can't be passed otherwise.\n",
    "head_branch": "support-lambdas",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ab718912b45d36a76b7",
    "number": 142,
    "body": "Pass vector by reference\n\nFixes #141 \n",
    "head_branch": "pass-vector-references",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ab818912b45d36a76b8",
    "number": 140,
    "body": "Connects to ros2/rclcpp#48\n\nThis pr currently builds on https://github.com/ros2/rclcpp/pull/137, but I'll rebase it against master once that is merged. In the mean time you can review changes specific to this pr with this link: https://github.com/ros2/rclcpp/compare/allocator_template...rclcpp_library\n\nI have not reenabled the intra process manager tests because it was using a somewhat peculiar method of mocking the classes within rclcpp and I'll have to come up with an alternative approach.\n\nOn Windows this relies on the unresolved library symbols workaround. The Windows CI job will need to be updated before it can handle the new limitations this puts on Windows, see: https://github.com/ros2/rclcpp/issues/48#issuecomment-150714947\n",
    "head_branch": "rclcpp_library",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 36cd6e3cddf31e6d7611bd962ce6fcceb4ea6d60 into 26aab4fceb6e0353d11cc4fe10544586f64b7118"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217aba18912b45d36a76b9",
    "number": 139,
    "body": "Replace unsigned long with uint32_t\n\nConnects to ament/ament_lint#34\n",
    "head_branch": "cpplint-int",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 1b2e171261bdbf99f433ad0f2c93f1c7b95799ff into dbe0f9e501cb7c37f21672b29c9054c912a44bc8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217abb18912b45d36a76ba",
    "number": 138,
    "body": "This is to make adding allocator templates to stdlib structures in the executor easier.\n",
    "head_branch": "remove_friends",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 0e5094693e1f78898cf20f8667ae80cac3ea8c85 into f50d8c452587f6266c5f73886991644529451b1f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217abc18912b45d36a76bb",
    "number": 137,
    "body": "This pull request exposes template arguments to Publisher, Subscription, AnySubscriptionCallback, and MappedRingBuffer so that a custom allocator can be passed to these entities.\n- [x] Memory leaks in classes with Allocators. Should change raw pointer to shared pointer to handle ownership.\n- [x] Style cleanup to make templated names less scary-looking. (I would appreciate more feedback on this; I'm considering writing macros since I repeat similar type aliases in several files.)\n- [x] Pass allocator to shared_ptrs instantiated during runtime so that their copies and control blocks use the custom allocator.\n- [x] Figure out how to pass allocator to shared pointers and other stdlib structures in: CallbackGroup, Executor, IntraProcessManager (add allocator to Context?)\n\nAfter this PR is merged, both the intra-process and inter-process pipelines should be set up for real-time safe allocation.\n",
    "head_branch": "allocator_template",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 142c9abbaab3d382d86e3e8e3887533f9b04469e into c76d3afbd3b5638cef906bd59f741dfb20ac4401"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217abd18912b45d36a76bc",
    "number": 136,
    "body": "Pass a weak pointer instead of a shared pointer to avoid circular references.\n",
    "head_branch": "weak-ptr-node",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 808d54c6135f33941f61b4ad405e67b541eb6076 into dba12cba94ebc25346a51f3d4878664bfa641d42"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217abe18912b45d36a76bd",
    "number": 135,
    "body": "This PR cleans up `function_traits`, makes the templates more uniform, adds a few comments and adds a new template (`same_arguments`) that checks that two functors have the same arguments.\n",
    "head_branch": "function-traits-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217abf18912b45d36a76be",
    "number": 134,
    "body": "This PR moves the logic for dispatching messages from the `Subscription` class to `AnySubscriptionCallback`\n",
    "head_branch": "delegate-subscription-dispatch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge e3f095de0416422aab603e8b617a00eacc04be8b into ad609d79d4eb77dad470a742ccadb24668e5d512"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ac018912b45d36a76bf",
    "number": 133,
    "body": "Moved `rmw_qos_profile` argument around to make it optional.\n\nConnects to ros2/ros2#80\n",
    "head_branch": "optional-qos-profile",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge c845e9bd45e2913493b37ecd86cf1ee530e8685b into 1d5720f964df9f24801382a6df69fef52e62b745"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ac118912b45d36a76c0",
    "number": 132,
    "body": "This PR simplifies the `Node::create_service` API and delegates SFINAE to `AnyServiceCallback`.\n",
    "head_branch": "sfinae-service",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 01a6741ea73dc296d04968168c86eb1e2bf56cc5 into b8cd675cac5459a798ef16dc045bb169cceb75c6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ac318912b45d36a76c1",
    "number": 131,
    "body": "This PR removes `create_subscription_with_unique_ptr_callback` and delegates the logic of storing `std::unique_ptr` to `AnySubscriptionCallback`, unifying the `create_subscription` API\n\nDepends on #130 \n",
    "head_branch": "callback-unique-ptr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 3061ec0ad58678359c2c241410f7a5d9fc24c65b into e2ade1f624cbb12a317c34e1572880cb7692cd02"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ac418912b45d36a76c2",
    "number": 130,
    "body": "This PR adds a new template (`check_argument_types`) that checks both the arity and the types of the arguments of a given functor. There's no need to check the arity explicitly any more.\n",
    "head_branch": "cleaner-sfinae",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge d0ebdb239ca8830c8aa67f3ac1e0998190f1410d into a0f1db1187cc19225aa4f4e1ba40bec61eb0c726"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ac518912b45d36a76c3",
    "number": 129,
    "body": "Connects to #5 \n",
    "head_branch": "redundant_allocs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 4fa974d96f94effe3702007f1fb30c4bcf8e080a into a61e375436934c36aa5b11fa946d181d67dab275"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ac618912b45d36a76c4",
    "number": 128,
    "body": "Connects to ros2/design#56.\n",
    "head_branch": "create_subscription_with_queue_size",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 09dc78eafad234516a9edcebae94311e325f6e21 into a2592d5d89c6973113775f95db2db4819eaa90d5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ac718912b45d36a76c5",
    "number": 127,
    "body": "Connects to ros2/design#56\n",
    "head_branch": "publish_const_reference",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge bdf2ac80c17b27a3cec6475b57ab34d78a798203 into c78ff7f422b34d1d73e12569a9421ccf71945ed2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ac818912b45d36a76c6",
    "number": 126,
    "body": "This wasn't necessary before because the function, not the publisher, was templated on the message type, and this function would specialize for a `const` type. The pattern now seems to be templating on the message type without const, and having specializations of publish based on the message passed to the Publisher. `rmw_publish` already takes the message as `const`, so I think requiring the message to be const in this function is an improvement.\n\nhttp://ci.ros2.org/job/ros2_batch_ci_linux/434/\nhttp://ci.ros2.org/job/ros2_batch_ci_osx/344/\nhttp://ci.ros2.org/job/ros2_batch_ci_windows/486/\n",
    "head_branch": "fix_build",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ac918912b45d36a76c7",
    "number": 125,
    "body": "See: https://github.com/ros2/design/issues/56#issue-100899698\n\nConnects to ros2/design#56\n",
    "head_branch": "create_publisher_with_queue_size",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge b3a88a9974704f16eca84add99a1c96fb6274799 into c8e127b3127aa1bc1f0088ae1395e3a4b7dd91d6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217aca18912b45d36a76c8",
    "number": 123,
    "body": "Fixes #118 \n\nCI:\n\nhttp://ci.ros2.org/job/ros2_batch_ci_linux/431/\nhttp://ci.ros2.org/job/ros2_batch_ci_osx/341/\nhttp://ci.ros2.org/job/ros2_batch_ci_windows/483/\n",
    "head_branch": "publish_const_shared_ptr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 581e5213f2c90d0daeb3b6c9e2c3c0be554ecaee into ae682baf1ca43025feb68840370694d627475ee6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217acb18912b45d36a76c9",
    "number": 122,
    "body": "This works around VS2015's broken support for expression SFINAE and adds tests for `function_traits`\n",
    "head_branch": "expression-sfinae-windows",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge ea9d3306d7ae1a3cde2b4838b3af73abc9cf7d60 into 57958610090e53fcc693b22e4925a7a54bf5095a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217acd18912b45d36a76ca",
    "number": 121,
    "body": "This changes the Publisher to be templated on its message type.\n\nThis came up while I was designing the allocator template interface. If the Allocator is the only template argument to the Publisher, and there is a default argument to the Allocator, then the default Publisher must be instantiated with brackets (ugly). It's a bit safer to associate a Publisher with a message type at compile time (especially since publishers are created with a message type in mind). Additionally, separate the templated and non-templated parts of Publisher puts more parts of rclcpp into the shared library (when it gets separate) and less in the headers.\n",
    "head_branch": "publisher_template",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 743d9d0e76d2d530b85cfca4ce67dcac12736d78 into 89541ea10fea021b0245ff08c9702d307e393c77"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ace18912b45d36a76cb",
    "number": 120,
    "body": "While exposing the allocator template in rclcpp, I noticed our macro definitions have trouble when there are commas in a type (i.e. when there are multiple template arguments). I decided to change all the macro definitions to variadic macros, which will allow commas in the type names.\n",
    "head_branch": "use_variadic_macros",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 383f7c863cf41dea39b275adbe3e24c8e6999429 into b84caa8e45a6f6d5a9b0268200cc7c9aa42e6283"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217acf18912b45d36a76cc",
    "number": 119,
    "body": "I noticed this was missing in #118. This should enable us to set up a subscription callback with `ConstSharedPtr`.\n",
    "head_branch": "const_shared_ptr",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 00daba2726015961a3770a44bfb05867766ceade into 8e4cc7c626b3dd6f02414761a747da668bb910ad"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad018912b45d36a76cd",
    "number": 117,
    "body": "Not ready for full review yet, but I'm opening this PR to get feedback about the approach.\n\nAn ament repo with an alternative allocator is available here:\n\nhttps://github.com/ros2/tlsf_cpp\n",
    "head_branch": "rt_intra_process",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad118912b45d36a76ce",
    "number": 116,
    "body": "This was done in my attempt to reduce pagefaults in Executor::spin. Several vectors that were being instantiated on the stack in Executor::spin have been moved into the MemoryStrategy, so that they can be preallocated (with `vector::reserve`) on construction.\n",
    "head_branch": "fix_uninitialized_vectors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge af9d64106b28e15ccb769652454424aca0914053 into d8b7ce8e13ef23be40a2b8841eaf432d59a489d8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66217ad218912b45d36a76cf",
    "number": 113,
    "body": "I made the API change to pass a timeout to `spin_node_until_future_complete` but forgot to pass it to `spin_until_future_complete`.\n\nConnects to #111\n",
    "head_branch": "spin_until_future_complete",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad318912b45d36a76d0",
    "number": 112,
    "body": "This PR removes references to shared pointers.\n\nConnects to ros2/ros2#120\n",
    "head_branch": "fix-crash-windows",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad518912b45d36a76d1",
    "number": 107,
    "body": "This is a proposed API change to make `spin_until_future_complete` less prone to blocking errors.\n\nThe previous behavior of the function was to block until the future was complete or if rclcpp was interrupt (i.e. by ctrl-C), and return the future object it was waiting on when complete.\n\nThis led to ros2/rmw_connext#97, where the user could not ctrl-C out of the client//service example because accessing the future object caused the thread to block. However, after a ctrl-C the future would never complete because the executor stopped executing.\n\nInstead of returning a `shared_future` object, the new behavior is to return a return code indicating SUCCESS, INTERRUPTED, or TIMEOUT. If SUCCESS, the future is safe to access without blocking. Also, this PR implements a timeout for the function.\n\nThis PR also checks the future before calling a potentially blocking `spin` function, to prevent indefinite blocking on `rmw_wait` in case a response already came in before `spin_node_until_future_complete` was called.\n",
    "head_branch": "fix_future",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad618912b45d36a76d2",
    "number": 106,
    "body": "What was previously known as \"StaticMemoryStrategy\" is now \"HeapPoolMemoryStrategy\".\n\n\"StackPoolMemoryStrategy\" is a new memory strategy that only allocates static memory.\n\nChanges due to API breakage in forthcoming PRs to `examples` and `demos`.\n",
    "head_branch": "rt_memory_strategy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad718912b45d36a76d3",
    "number": 102,
    "body": "Needed to support https://github.com/ros2/rmw_opensplice/pull/81\n\nConnects to ros2/rmw_opensplice#81\n",
    "head_branch": "opensplice_dynamic_ros_domain_id",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad818912b45d36a76d4",
    "number": 100,
    "body": "Connects to ros2/ros2#94\n",
    "head_branch": "remove_reference_for_smart_pointer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ad918912b45d36a76d5",
    "number": 99,
    "body": "It must be declared correctly in order to not break isolated builds.\n",
    "head_branch": "fix_missing_dependency",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217adb18912b45d36a76d6",
    "number": 98,
    "body": "This does a few things:\n- Adds a `publish(std::unique_ptr<MessageT>)` like method.\n- Allows the user's subscription callback to look like any of these:\n  - `void cb(const std::shared_ptr<MessageT>)`\n  - `void cb(const std::shared_ptr<MessageT>, const rmw_message_info_t &)`\n  - `void cb(const std::unique_ptr<MessageT>)`\n  - `void cb(const std::unique_ptr<MessageT>, const rmw_message_info_t &)`\n\nIt also adds (along with ros2/rmw#36) a `from_intra_process` bool to the `rmw_message_info_t` struct. This allows better tests and demonstrating intra process is being used in demos.\n\nConnects to ros2/demos#12\n",
    "head_branch": "intra_process_img",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217adc18912b45d36a76d7",
    "number": 97,
    "body": "With a focus on functions and members used in the demos, such as executors, publish/subscribe and memory strategy classes.\n",
    "head_branch": "document_user_fns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217add18912b45d36a76d8",
    "number": 96,
    "body": "This was causing a segfault in the realtime demo, which does not use intra-process messaging.\n",
    "head_branch": "intra_process_segfault",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ade18912b45d36a76d9",
    "number": 94,
    "body": "Connects to ros2/ros2#91.\n\nMakes use of publisher gid's in rmw to filter duplicate inter process messages when using intra process too.\n",
    "head_branch": "rmw_gid_support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217adf18912b45d36a76da",
    "number": 93,
    "body": "Check before we try to malloc something of size 0 and short-circuit the call.\n\nThanks to @codebot for discovering this and doing the work to make it actually compile.\n",
    "head_branch": "malloc_experiment",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae018912b45d36a76db",
    "number": 92,
    "body": "Connect to ros2/ros2#86\n",
    "head_branch": "qos-xml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae118912b45d36a76dc",
    "number": 91,
    "body": "This is a helper function I wrote when debugging the parameters I found it very useful to be able to print all 3 pieces of info to the screen quickly. I think it would be helpful to have similar functionality. Maybe a single line json style encoding would be more reuseable than this current one with newlines. \n\nI know it's an expansion of the API but I think this will save people time down the line. \n\nThe current one isn't polished but I wanted people's feedback. \n\nThoughts?\n",
    "head_branch": "parameter_to_yaml",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae318912b45d36a76dd",
    "number": 90,
    "body": "Connects to ros2/system_tests#10\n",
    "head_branch": "parameter_cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae418912b45d36a76de",
    "number": 89,
    "body": "Fixes 164 warnings: http://ci.ros2.org/job/ros2_batch_ci_windows/201/warnings34Result/fixed/\n\nConnects to ros2/ros2#53\n",
    "head_branch": "use_secure_functions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae518912b45d36a76df",
    "number": 88,
    "body": "Depends on #87 \n\nConnects to ros2/ros2#85\n",
    "head_branch": "typedef-using",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae618912b45d36a76e0",
    "number": 87,
    "body": "The macros are now more modular and there they include weak pointer and unique pointer definitions.\n\nOn classes which are not copy constructible we cannot make a `make_unique` definition, so there are two main entry point macros now, `RCLCPP_SMART_PTR_DEFINITIONS` and `RCLCPP_SMART_PTR_DEFINITIONS_NOT_COPYABLE`. Where the latter is used on classes which are not copyable. I worked with @esteve to come up with an automatic solution to this using `enable_if` or something similar, but it doesn't seem to be possible with only one macro inside the class definition. So I made two macros instead. It will not compile if you use the wrong macro, so that should be ok.\n",
    "head_branch": "refactor_smart_ptr_macros",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae718912b45d36a76e1",
    "number": 84,
    "body": "Add `spin_some`, which executes all available executors until none are available without blocking. Similar to `spin_node_some` but without the messy add/remove node logic.\n",
    "head_branch": "spin_some",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217ae918912b45d36a76e2",
    "number": 83,
    "body": "This PR fixes the code style, see http://ci.ros2.org/job/ros2_batch_ci_linux/184/testReport/rclcpp/uncrustify/include_rclcpp_strategies_static_memory_strategy_hpp/\n",
    "head_branch": "fix-style",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aea18912b45d36a76e3",
    "number": 82,
    "body": "there were some mistakes made in #81 that weren't caught because Jenkins doesn't test the `StaticMemoryStrategy`. This PR makes some improvements to that and the executor:\n\nRevert omission of `guard_condition_handles` in `StaticMemoryStrategy`; we still need that for the interrupt guard condition.\nIntroduce a `Subscription::return_message` class to ensure that memory allocated or borrowed by `create_message` is always returned.\nConsolidate `get_next_ready_executable` functions.\nStore `AnyExecutable` pool in `StaticMemoryStrategy` as shared pointers.\nUse `new` instead of `malloc` in `StaticMemoryStrategy`.\n",
    "head_branch": "revert_borrow_handles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aeb18912b45d36a76e4",
    "number": 81,
    "body": "A bit of cleanup for performance and ease of use.\n- Hardcoded values in `StaticMemoryStrategy` are now template arguments.\n- Rename many instances of \"subscriber\" to \"subscription\", for consistency.\n- Use `auto &` instead of `auto` in range-based for loops.\n- Check several pointers before dereferencing.\n",
    "head_branch": "realtime_cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aec18912b45d36a76e5",
    "number": 80,
    "body": "Fixes a segfault with the bridge when a subscription goes out-of-scope and gets removed.\n\nhttp://ci.ros2.org/job/ros2_batch_ci_linux/152/\nhttp://ci.ros2.org/job/ros2_batch_ci_osx/80/\n",
    "head_branch": "fix_erase_while_iterating",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aed18912b45d36a76e6",
    "number": 79,
    "body": "fixes #75\n",
    "head_branch": "charstar_params",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aef18912b45d36a76e7",
    "number": 78,
    "body": "Connects to ros2/rmw#28\n",
    "head_branch": "domain_id",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af018912b45d36a76e8",
    "number": 74,
    "body": "This is necessary to fix ros2/system_tests#26. Before the callback group was always keeping subscriptions and timer alive even when they ran out-of-scope in the user land code.\n",
    "head_branch": "subscriber_not_deregistering",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af118912b45d36a76e9",
    "number": 73,
    "body": "This is a work in progress and isn't ready for review, but feedback about the approach is ok.\n\nConnects to ros2/ros2#59\n\nThings left to do (in no particular order):\n- [x] Write unit tests for the \"mapped\" ring buffer.\n- [x] Write (figure out how to make) integration/system tests for the entire intra process pipeline.\n- [x] More acceptance testing of the intra process pub/sub in a single node.\n- [x] Review message memory management through the pipeline (print out pointers and instrument [copy] constructors).\n- [x] Investigate cause of memory corruption (maybe?) in the message data (related to previous item).\n- [x] Consider thread safety of intra process manager, ring buffer, other parts of the intra process chain. (https://github.com/ros2/ros2/issues/92)\n- [x] Refactor RCLCPP_MAKE_SHARED_DEFINITIONS macros.\n- [x] Write a theory of operation for the intra process system, describing how it works.\n- [x] Make intra process comms optional and off by default (for now).\n\nOpen issues:\n- How to prevent subscriptions from receiving redundant messages through the non-intra process topic.\n- How to size the ring buffer in order to minimize subscribers asking for intra process messages which no longer are being buffered.\n\nThings that I think are out of scope:\n- Considering real-time safety\n- Considering memory strategy integration\n",
    "head_branch": "intra_process",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af218912b45d36a76ea",
    "number": 72,
    "body": "Connects to ros2/ros1_bridge#3\n",
    "head_branch": "topic_information",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af318912b45d36a76eb",
    "number": 71,
    "body": "Connects to ros2/ros2#66\n",
    "head_branch": "qos",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af418912b45d36a76ec",
    "number": 70,
    "body": "",
    "head_branch": "fix_busy_loop",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af518912b45d36a76ed",
    "number": 69,
    "body": "Connects to #6 \n\nDepends on ros2/rclcpp/pull/66 and related PRs\n\nRemoves the 1 thread, 1 guard condition per timer scheme. Instead, the executor checks if a timer callback is eligible to be executed in `get_next_timer` based on the timer period and the last time the callback was triggered.\n\nInitial CI run builds for all, and tests pass for all but Windows:\n\nhttp://ci.ros2.org/job/ros2_batch_ci_linux/104/\nhttp://ci.ros2.org/job/ros2_batch_ci_osx/45/\nhttp://ci.ros2.org/job/ros2_batch_ci_windows/78/\n\nI'm open to feedback regarding any tests that should be added to check timing correctness.\n",
    "head_branch": "wait_thread",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af718912b45d36a76ee",
    "number": 68,
    "body": "",
    "head_branch": "fix_warnings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af818912b45d36a76ef",
    "number": 67,
    "body": "For some reason, passing the static member function `MessageMemoryStrategy::create_default` as a default argument to `Node::create_subscription` causes a compilation error on Windows. This is a workaround to fix the build until we figure out what the heck is happening\n",
    "head_branch": "fix_windows_bad_token",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217af918912b45d36a76f0",
    "number": 66,
    "body": "Connects to ros2/ros2#73\n",
    "head_branch": "wait_timeout",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217afa18912b45d36a76f1",
    "number": 65,
    "body": "For real-time performance completeness, there should be an alternative to instantiating and allocating dynamically sized data structures in `Executor::wait_for_work`, even if they contain small objects like shared pointers. This pull request abstracts out the vectors instantiated in `wait_for_work` and replaces them with a `SharedPtrContainer` interface. In the default memory strategy, this interface is implemented with a `std::vector`, and in the `StaticMemoryStrategy`, it is implemented with a `std::array`.\n",
    "head_branch": "stl_roundup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217afb18912b45d36a76f2",
    "number": 64,
    "body": "To avoid `new` whenever a message is received by the subscriber, abstract out the memory strategy for subscribers. `MessageMemoryStrategy` is templated on the message type and gets passed to the subscriber constructor.\n\nExample usage in https://github.com/ros2/examples/pull/39\n",
    "head_branch": "msg_memory_strategy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217afc18912b45d36a76f3",
    "number": 63,
    "body": "",
    "head_branch": "check_rmw_return_codes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217afd18912b45d36a76f4",
    "number": 62,
    "body": "I noticed when I ran the `listener_memory` example that the static memory strategy actually wasn't working. I hadn't tested the StaticMemoryStrategy when I added the `instantiate_next_executable` function. It's a small fix.\n",
    "head_branch": "fix_static_memory_strategy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217aff18912b45d36a76f5",
    "number": 61,
    "body": "Connects to ros2/ros2#71\n",
    "head_branch": "raise_warning_level",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0018912b45d36a76f6",
    "number": 60,
    "body": "This is now needed for https://github.com/ros2/examples/pull/37\n",
    "head_branch": "executor_inherit_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0118912b45d36a76f7",
    "number": 59,
    "body": "~~Regression in #51.~~\n\nActually the code change is not mandatory. It only separates the rmw invocation, the error checking and the shared pointer creation with the deleter from each other.\n\nThe stacktrace is just awful anyway...\n",
    "head_branch": "fix_node_constructor",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0218912b45d36a76f8",
    "number": 58,
    "body": "",
    "head_branch": "fix_spin_once_and_some",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0318912b45d36a76f9",
    "number": 57,
    "body": "",
    "head_branch": "more_checks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0418912b45d36a76fa",
    "number": 56,
    "body": "This pull request introduces the `MemoryStrategy` class to delegate memory management on the execution path of `Executor`.\n\nBy default, `MemoryStrategy` is stateless and handles all delegated functions with dynamic memory management (malloc, free, new), but all functions are overrideable. An example subclass of `MemoryStrategy`, `StaticMemoryStrategy`, shows how these functions can be overridden and state can be added to implement fully static memory management.\n\nThe following functions are delegated to `MemoryStrategy`:\n\n`borrow_handles`: returns a pointer to memory reserved for subscription, service, client or guard condition handles.\n`return_handles`: cleans up memory instantiated in `borrow_handles`, by deleting it or resetting to NULL.\n`instantiate_next_executable`: instantiates the next `AnyExecutable` object and passes it as a shared pointer.\n\nIn order to manage circular dependencies, I moved the `AnyExecutable` struct from a protected member of `Executor` to its own header file.\n\nAn example of how the memory strategy can be specified dynamically is in the `examples/memory_dependency_injection`:\nhttps://github.com/ros2/examples/blob/memory_dependency_injection/rclcpp_examples/src/topics/listener_exec.cpp\n",
    "head_branch": "memory_dependency_injection",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0518912b45d36a76fb",
    "number": 55,
    "body": "This PR places the `malloc` and `free` calls in `Executor::wait_for_work()` in two new virtual functions, `get_allocated_handles` and `remove_allocated_handles`. It also creates an example executor, `StaticMemoryExecutor`, which overrides the functions to provide statically allocated arrays for the handles.\n",
    "head_branch": "executor_memory",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0618912b45d36a76fc",
    "number": 53,
    "body": "This was necessary to debug ros2/system_tests#14.\n\nThe change could be rolled into #51 or this change should be updated to use the new function `rmw_get_error_string_safe` introduced with #51.\n",
    "head_branch": "check_return_codes",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0818912b45d36a76fd",
    "number": 51,
    "body": "While prototyping the intra-process system I ran into some blocking teardown issues that manifested in my multi node examples during runtime. So I had to fix them. This will be matched with pr's on rmw and the implementations.\n\nConnects ros2/ros2#69\n",
    "head_branch": "memory_audit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0918912b45d36a76fe",
    "number": 50,
    "body": "Adds support for `on_parameter_event` to the `SyncParametersClient`\n\nConnects to ros2/rclcpp#49\n",
    "head_branch": "sync-parameter-events-callbacks",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0a18912b45d36a76ff",
    "number": 47,
    "body": "This PR makes sure that promises are not destroyed too early, adds more cases to the list_parameters verb and fixes the parameters service to listen on the appropriate topic.\n\nFixes #44 \n",
    "head_branch": "broken-promise",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0b18912b45d36a7700",
    "number": 46,
    "body": "Required for ros2/ros1_bridge#1\n\nPlease review.\n",
    "head_branch": "ignore_local_publications",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0c18912b45d36a7701",
    "number": 45,
    "body": "Is being used by ros2/ros1_bridge#1.\n\nPlease review.\n",
    "head_branch": "spin_once",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0d18912b45d36a7702",
    "number": 43,
    "body": "If any `rmw` function return null which indicates an error `rclcpp` now throws a `runtime_error`.\n\nPlease review.\n",
    "head_branch": "throw_if_rmw_fails",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0e18912b45d36a7703",
    "number": 42,
    "body": "This was done to enable more concise parameter examples.\n\nI'm open to suggestion on a more elegant way to do the bytes to_string within a switch statement.\n\nConnects to ros2/examples#4\n",
    "head_branch": "refactor_examples_and_interfaces",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b0f18912b45d36a7704",
    "number": 41,
    "body": "@ros2/owners FYI\n\nThis PR implements the changes defined by ros2/design#33.\n\nConnects to ros2/design#33\n",
    "head_branch": "update_message_api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1118912b45d36a7705",
    "number": 40,
    "body": "Fixes to get this compiling after ros2/rcl_interfaces#4\n\nConnects to ros2/ros2#46\n\n@dirk-thomas @jacquelinekay @tfoote @wjwwood please review\n",
    "head_branch": "parameters-roundup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1218912b45d36a7706",
    "number": 39,
    "body": "This PR publishes events whenever a parameters are updated, created or deleted.\n\nI wasn't sure if this was only intended for `Node::set_parameters_atomically` or for any method that modifies parameters. See comment about \"atomic\" in https://github.com/ros2/rcl_interfaces/blob/master/rcl_interfaces/msg/ParameterEvent.msg\n\nConnects to ros2/ros2#28\n\n@dirk-thomas @jacquelinekay @tfoote @wjwwood \n",
    "head_branch": "external-parameters-api-events",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1318912b45d36a7707",
    "number": 38,
    "body": "VS2015 still fails to compile when callbacks have only two arguments, as it insists on checking for a non-existent third argument (causing an index out of bounds error on `std::tuple_element`).\n\nThis change just moves the check to a `static_assert` in the body of the method.\n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "windows-sfinae-workaround",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1418912b45d36a7708",
    "number": 37,
    "body": "Fixes warning\n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "fix-warning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1518912b45d36a7709",
    "number": 36,
    "body": "Connects to ros2/ros2#48.\n",
    "head_branch": "refactor_msg_gen",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1618912b45d36a770a",
    "number": 34,
    "body": "Adds the service-based parameter API.\n\nConnects to ros2/ros2#28\n\nDepends on #31 \n\n@dirk-thomas @tfoote @wjwwood please review\n",
    "head_branch": "external-parameters-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1718912b45d36a770b",
    "number": 33,
    "body": "This is a quick hack to add support for lambdas.\n\nConnects to #29 \n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "function-traits-lambda",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1918912b45d36a770c",
    "number": 32,
    "body": "This will add the check of the type for the third argument of the `create_service_internal` method.\n\nRequired for ros2/rclcpp#29.\n\nPasses on the farm (at least for the platforms which currently work):\n- http://54.183.26.131:8080/view/ros2/job/ros2_batch_ci_linux/116/\n- http://54.183.26.131:8080/view/ros2/job/ros2_batch_ci_osx/122/\n\n@esteve @tfoote @wjwwood Please review.\n",
    "head_branch": "service_check_third_arg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1a18912b45d36a770d",
    "number": 31,
    "body": "Depends on #30 \n\nConnects to ros2/ros2#11\n\nConnects to ros2/ros2#28\n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "developer-parameters-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1b18912b45d36a770e",
    "number": 30,
    "body": "This adds the API acting on parameters on instances of nodes.\n\nConnects to ros2/ros2#11\n\nConnects to ros2/ros2#28\n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "internal-parameters-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1c18912b45d36a770f",
    "number": 28,
    "body": "Connects to ros2/ros2#28\n\n@dirk-thomas @tfoote @wjwwood\n",
    "head_branch": "parameters-api-review-sync",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1d18912b45d36a7710",
    "number": 27,
    "body": "Workaround for http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132 in Windows\n\nConnects to ros2/examples#20\n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "callable-compatible",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1e18912b45d36a7711",
    "number": 26,
    "body": "Connects to ros2/ros2#28\n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "parameters-api-review",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b1f18912b45d36a7712",
    "number": 25,
    "body": "@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "spin-node-until-future-complete",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2018912b45d36a7713",
    "number": 24,
    "body": "Connects to ros2/ros2#28\n\nDepends on #23 \n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "developer-parameters-api-describe",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2218912b45d36a7714",
    "number": 23,
    "body": "Adds support for the `list_parameters`\n\nDepends on #20 \n\nConnects to ros2/ros2#28\n",
    "head_branch": "developer-parameters-api-list",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2318912b45d36a7715",
    "number": 22,
    "body": "Connects to #21 \n",
    "head_branch": "request-header",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2418912b45d36a7716",
    "number": 20,
    "body": "Added developer API methods.\n\nConnects to ros2/ros2#28\n\nDepends on #19 \n",
    "head_branch": "developer-parameters-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2518912b45d36a7717",
    "number": 19,
    "body": "This PR adds the internal infrastructure for the parameters API.\n\nConnects ros2/ros2#11\n\nConnects ros2/ros2#28\n\n@dirk-thomas @tfoote @wjwwood \n",
    "head_branch": "internal-parameters-api",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2618912b45d36a7718",
    "number": 18,
    "body": "Connects to ros2/ros2#21.\n",
    "head_branch": "code_style_uncrustify",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2718912b45d36a7719",
    "number": 17,
    "body": "Connects to ros2/ros2#4\n\nRequired for ros2/examples#7.\n",
    "head_branch": "launch_package",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2818912b45d36a771a",
    "number": 16,
    "body": "This PR updates `rclcpp` to use the new type support infrastructure.\n\n@dirk-thomas @tfoote @wjwwood please review.\n",
    "head_branch": "type-support-handle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2a18912b45d36a771b",
    "number": 15,
    "body": "Connects to ros2/ros2#18\n",
    "head_branch": "disambiguate-linking",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2b18912b45d36a771c",
    "number": 14,
    "body": "This pull request fixes some warnings and compiler errors on Windows.\n\nThis pull request is a work in progress.\n\nConnects to ros2/ros2#9\n",
    "head_branch": "windows",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2c18912b45d36a771d",
    "number": 12,
    "body": "Connects to ros2/ros2#3\n",
    "head_branch": "use_ament_lint_auto",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2d18912b45d36a771e",
    "number": 11,
    "body": "This branch adds support for services in `rclcpp`. The big changes are:\n- Use the C API functions\n- Whenever there's a `request_header` in a function (e.g. rmw_take_request), it'll come before the rest of the data. This makes the order of the arguments uniform across all the API funcions, so \"metadata\" (request_header) will come first and the actual data (request, response).\n\nFixes ros2/rclcpp#8\n",
    "head_branch": "services-post-api-review",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2e18912b45d36a771f",
    "number": 7,
    "body": "Adds support for clients and services in RCLCPP and integrates them with the executor infrastructure.\n",
    "head_branch": "request_reply",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66217b2f18912b45d36a7720",
    "number": 1,
    "body": "This pull request replaces the current Node.h with a larger interface which includes executors, groups, timers, and some other common utilities which are required to implement the `ros1_like` examples in https://github.com/ros2/examples/pull/1.\n",
    "head_branch": "executors",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]