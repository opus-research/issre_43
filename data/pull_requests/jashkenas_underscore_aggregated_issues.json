[
  {
    "_id": "661e041e3a21fa1e1f1aab4b",
    "number": 2993,
    "body": null,
    "head_branch": "my-branch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e041f3a21fa1e1f1aab4c",
    "number": 2991,
    "body": "This PR bumps GitHub workflow actions to their latest versions, thus avoiding error messages and deprecation warnings as seen e.g. [here](https://github.com/jashkenas/underscore/actions/runs/8077342941).",
    "head_branch": "bump-github-workflow-actions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2991 from deining/bump-github-workflow-actions\n\nBump GitHub workflow actions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04203a21fa1e1f1aab4d",
    "number": 2990,
    "body": "A simple cleanup by alphabetizing all the exports in underscore.js.\r\n\r\n![Group 870](https://github.com/jashkenas/underscore/assets/51898351/7e3c6787-e72a-485a-862d-f31cbdaf704c)\r\n",
    "head_branch": "alphabetize-exports-in-underscore",
    "is_a_fork": true,
    "comments": [
      "Sorry, my added spaces and it was being a pain to get all the spaces back. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04213a21fa1e1f1aab4e",
    "number": 2986,
    "body": "The is DataView check relies on DataView being a constructor like it is natively. However, if an application overrides DataView from the window this ends up throwing an error when underscore is included. This here will check if DataView is the native implementation before trying to use the constructor on it. If it is not native it will fallback on the same heuristic used on older IE versions for checking if something is a DataView or not.\r\n\r\nI wasn't really sure what to do for tests here since we don't seem to be testing any of the supports or native methods. We still have the tests for isDataView and those seem to pass in a standard browser as well as in the case of you overriding the native data view.\r\n\r\nThis is to resolve https://github.com/jashkenas/underscore/issues/2985",
    "head_branch": "native-data-view",
    "is_a_fork": true,
    "comments": [
      "> Thanks for taking the extra step to address this yourself!\r\n> \r\n> You can test this as follows:\r\n> \r\n>     1. Define new tests for the hypothetical scenario that `DataView` has been overridden, which only run when this is the case.\r\n> \r\n>     2. Run the test suite to verify that your new tests don't run.\r\n> \r\n>     3. Adjust the guards on the existing tests related to `DataView`, so they don't run if `DataView` has been overridden.\r\n> \r\n>     4. Run the test suite to verify that the latter tests still run.\r\n> \r\n>     5. Write a new module inside the `test/` directory that actually overrides `DataView`.\r\n> \r\n>     6. Add the overriding module to `test/index.html` and the `files` field in `karma.conf.js` and `karma.conf-sauce.js`.\r\n> \r\n>     7. Run the tests; verify that your new tests are included and that the tests that should be excluded are skipped. Try `npm run test-node` and `npm run test-browser` as well as opening the `test/index.html` in all browsers you have installed locally.\r\n> \r\n>     8. Fiddle with your code as necessary until your new tests pass everywhere.\r\n> \r\n>     9. Remove the overriding module from the `test/index.html` again.\r\n> \r\n>     10. Adjust the `karma.conf.js` and the `karma.conf-sauce.js` so that the overriding module is included randomly, once every three runs on average.\r\n> \r\n>     11. ...?\r\n> \r\n>     12. profit!\r\n\r\nAwesome, thanks for the testing suggestion here. I had investigated 1-5 but wasn't sure how much value was in those types of tests in comparison to the new module suggestion you had. I will go ahead and look at adding both types of tests.",
      "@jgonggrijp I have gone ahead and added a module that will override dataview in the browser that makes the tests fails without my corresponding change to supportsDataView. Let me know what you think, sorry it took a bit longer to get back to this than I intended.",
      "@jgonggrijp Okay I think I addressed all of your comments, thanks for that!",
      "Yeah I will make it work to test those with both the wrong order and the right order. Also I will take care of those style things too. ",
      "@jgonggrijp I was going through and making those changes and testing on IE when I realized I have created an odd combination sometimes where you would normally have the stringTagBug and you can't rely on the string tag to know if an object is a DataView and you also have overriden the native DataView to be something else. I think I am going to try to rework the check, basically instead of it just being \"hasStringTagBug\" I would like to change it to more of a check of whether or not you need to use an alternate isDataView check. This will result in the renaming of a few things so after my next commit there might be a little bit more to review.",
      "@jgonggrijp okay I went ahead and pushed the changes to those test files as well as the rework for the DataView check that isolates a bit more the problem. The biggest thing for me right now is the naming structure. It made sense to not leave it as \"hasStringTagBug\" to me but I am not sure if you agree or agree with the new name for that function so please review and let me know what you think.\r\n\r\nAlso I went ahead and tested my old version before this rework and then my new version after the rework against IE10 and the new version actually passed all of the tests. The old version meant it would rely on `tagTester('DataView')` which didn't work in IE10 where as this new version will just use the alternate data view check for IE10 and for overriden DataView",
      "@jgonggrijp Thank you for that last comment, I was also in a place where I wanted to change the name but naming is hard and I wasn't perfectly happy with what I had. I think I have everything taken care of now (no more docs changes). I think I had the docs changes because I had used build so that I could get the minified changes deployed to a site for testing on older browsers and then accidentally committed them.",
      "Well done and thanks again!",
      "no problem thanks for your guidance along the way!",
      "Released in 1.13.7. Sorry for the delay!",
      "@jgonggrijp that is alright, thank you for helping get this out there!"
    ],
    "commit_messages": [
      "Merge pull request #2986 from colingm/native-data-view\n\nAdd nativeDataView check to isDataView"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04223a21fa1e1f1aab4f",
    "number": 2984,
    "body": "A common issue with debounced API calls is that when the user closes the browser tab, the debounced function may not have run yet. This is a frequent cause of data loss. The debounce implementation now prevents this issue by running the trailing debounce immediately if the tab is closed prior to the trailing timeout.\r\n\r\nThe code detects whether it's running in an environment with access to the DOM. In runtimes where this function is unavailable (e.g. Node.js) the new functionality is ignored since would not be relevant in that context.\r\n\r\nResolves #2983 @jashkenas ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I appreciate your willingness to contribute, but unfortunately, I have to reject this change. There are two main reason for rejecting.\r\n\r\n**Firstly**, changes of this type are highly problematic. The implementation of `debounce` and `throttle` is extremely tricky to get right, as shown by the large number of changes that went into them and the large number of tests dedicated to just those two functions. At the same time, literally millions of developers rely on these functions working correctly every day. Unless the behavior of `debounce` is clearly broken, which is not the case here, I cannot justify risking new bugs by making \"feature additions\" that are arguably somewhat arbitrary. The use case you're trying to address is extremely specific, and I'm not even fully convinced that your suggested changes will address it completely.\r\n\r\n**Secondly**, you can realize the suggested behavior without changing the implementation of `debounce` at all. Instead of using a debounced function directly as an event handler, like in the example below,\r\n\r\n```js\r\nvar handler = _.debounce(expensiveAPICall);\r\ndocument.querySelector('#button').addEventListener(handler);\r\n```\r\n\r\nyou can define a new, reusable wrapper function that manages a debounced version of the callback as well as a `visibilitychange` event handler:\r\n\r\n```js\r\nfunction debounceUntilHidden(callback) {\r\n    var bound = false, debounced = _.debounce(callback);\r\n    \r\n    function handleHidden() {\r\n        if (document.visibilityState !== 'hidden') return;\r\n        debounced.cancel();\r\n        document.removeEventListener('visibilitychange', handleHidden, {\r\n            capture: true,\r\n        });\r\n        bound = false;\r\n        callback();\r\n    }\r\n    \r\n    return function() {\r\n        if (!bound) {\r\n            document.addEventListener('visibilitychange', handleHidden, {\r\n                capture: true,\r\n                passive: true,\r\n            });\r\n            bound = true;\r\n        }\r\n        debounced();\r\n    };\r\n}\r\n\r\nvar handler = debounceUntilHidden(expensiveAPICall);\r\ndocument.querySelector('#button').addEvenListener('click', handler);\r\n```\r\n\r\nThis will give you a clean separation of concerns and responsibilities. Your `debounceUntilHidden` can do exactly what you need it to do, and you can reuse it everywhere. At the same time, you can rely on `_.debounce` to behave the same way it has always done.\r\n\r\nI release the above example code under the [unlicense](https://opensource.org/license/unlicense/); you are free to adjust and use it, without attribution, at your own risk. I hope this addresses your use case sufficiently.\r\n\r\nI will now close this pull request, but you can still reply if you wish."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04233a21fa1e1f1aab50",
    "number": 2982,
    "body": "* Change typeof equaltiy (==) with strict equality (===)\r\n\r\nWhy;\r\nhttps://www.measurethat.net/Benchmarks/Show/19/0/which-equals-operator-vs-is-faster\r\nhttps://www.measurethat.net/Benchmarks/Show/26565/0/typeof-eqeq-vs-typeof-eqeqeq",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04243a21fa1e1f1aab51",
    "number": 2980,
    "body": "I have added dark mode button and it is able to change the state ON and OFF.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04253a21fa1e1f1aab52",
    "number": 2978,
    "body": "Fix the documentation for range step which changed behaviour in 1.10 to automatically set step to -1 if start is after stop.",
    "head_branch": "fix/range-step-docs",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/54635289/badge)](https://coveralls.io/builds/54635289)\n\nCoverage remained the same at 95.024% when pulling **383d9fad746ae8de1050db5f6abde64fb5a7889c on stevenh:fix/range-step-docs** into **7860d11ca75ee9371b21c6ab68b9597efd74d29e on jashkenas:master**.\n",
      "That change was introduced in a595fe10, which was already included in the 1.9.0 release. That said, you are right to correct the documentation. Thanks for contributing!",
      "Now online and will be included in the next release."
    ],
    "commit_messages": [
      "Merge pull request #2978 from stevenh/fix/range-step-docs\n\nfix(range): step documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04263a21fa1e1f1aab53",
    "number": 2977,
    "body": "FYI @stevespages",
    "head_branch": "doc-links",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/54158616/badge)](https://coveralls.io/builds/54158616)\n\nCoverage remained the same at 95.024% when pulling **a40790f7d001f65c3a4253be71792cf795f5f2dc on jgonggrijp:doc-links** into **60835dc13d8354397f68607af3051a559d971645 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Add source links to all functions in documentation (close #2976)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04273a21fa1e1f1aab54",
    "number": 2974,
    "body": "patch-package is a dev dependency and should not be required by users of underscore.js\r\n\r\nThis hotfix removes the postinstall script which is causing multiple build failures across the ecosystem.\r\n\r\nSee #2967, #2968, #2969, #2970, #2971, #2973",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/52725729/badge)](https://coveralls.io/builds/52725729)\n\nCoverage remained the same at 95.024% when pulling **2edcdc18b64db878b887a6047300e724995481e4 on paulsmithkc:patch-1** into **66ee70d746399b3446a700492bc62f4117d4a21b on jashkenas:master**.\n",
      "@jashkenas *bump*",
      "Thank you!",
      "Will publish as 1.13.6 in a few minutes, hang tight.",
      "@jashkenas I think I outran you.",
      "With publishing to NPM, at least.",
      "I'm preparing a website update now, please let me know where you stand.",
      "Thanks for jumping in @jgonggrijp — I'll leave things in your hands as to avoid crossing wires. (npm had me locked out on this new laptop, so thanks for pushing the button)",
      "Alright I'll finish the job."
    ],
    "commit_messages": [
      "Merge pull request #2974 from paulsmithkc/patch-1\n\nHotfix for broken builds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04283a21fa1e1f1aab55",
    "number": 2972,
    "body": "I'm not sure this is the correct fix (don't have the setup to do js development here) but it looks like a viable direction.\r\n\r\nThis should help with #2967 #2968 #2969 #2970 #2971",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/52725064/badge)](https://coveralls.io/builds/52725064)\n\nCoverage remained the same at 95.024% when pulling **becb32abeef415c8f7c89100c5efc6457afb9d75 on iglosiggio:patch-1** into **66ee70d746399b3446a700492bc62f4117d4a21b on jashkenas:master**.\n",
      "Thanks for the patch and sorry for the trouble I have caused. I'm going to hotfix this first by simply throwing the postinstall script out of the package.json; I'm not sure what is the right place to run patch-package yet, but it is not required for end users in any case.",
      "I chose a slightly different, but similar approach: run it before building the annotated sources, rather than before running the tests. That's because the patched package is docco, which we use for the annotated sources. Thanks again for the fast action!",
      "(Oh, and also #2974 was merged first by @jashkenas, while I was doing the same thing locally.)",
      "> I chose a slightly different, but similar approach: run it before building the annotated sources, rather than before running the tests. That's because the patched package is docco, which we use for the annotated sources. Thanks again for the fast action!\r\n\r\nThank you for your swift resolution of the issue! <3"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04293a21fa1e1f1aab56",
    "number": 2966,
    "body": "This release mostly serves to prevent duplicate copies of Underscore in bundles created with recent versions of `@rollup/plugin-node-resolve`.",
    "head_branch": "prepare-1.13.5",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/52721048/badge)](https://coveralls.io/builds/52721048)\n\nCoverage remained the same at 95.024% when pulling **bef7ee3125855be61740b383ea6c1cd3bfe3e2ba on jgonggrijp:prepare-1.13.5** into **7459b8d550ab1393b4f8f3302bccb5623479996d on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2966 from jgonggrijp/prepare-1.13.5\n\nPrepare 1.13.5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e042a3a21fa1e1f1aab57",
    "number": 2965,
    "body": "I was warned by Sauce Labs that they are deprecating some older versions of their API, which made me realize I probably needed to upgrade `karma-sauce-launcher`. I decided to grasp the opportunity to upgrade more devDependencies. I'll be pushing the commits one by one to check that everything still works after every change.",
    "head_branch": "upgrade-sauce",
    "is_a_fork": false,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/52496962/badge)](https://coveralls.io/builds/52496962)\n\nCoverage decreased (-0.2%) to 95.024% when pulling **6d93d6faf89f3b70dc03b3bfbe452d37a79efb1f on upgrade-sauce** into **a15d1afc708ec23894880b2ec4c1eb309447a906 on master**.\n",
      "Browser tests through Sauce Labs intermittently fail, for three reasons:\r\n\r\n- Full page reloads in Firefox 11 for unknown reasons (probably a test framework compatibility issue).\r\n- Temporary failure to establish a connection with Sauce Labs.\r\n- The well-known, highly sporadic failure of the throttle/debounce reentrant tests, usually in old Edge or old Firefox.\r\n\r\nThe first reason is by far the most common, and I'll be documenting it in a new issue. The upgrades otherwise seem unproblematic and are quite necessary, so I'm still going to merge this."
    ],
    "commit_messages": [
      "Merge pull request #2965 from jgonggrijp/upgrade-sauce\n\nUpgrade testing-related dependencies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e042b3a21fa1e1f1aab58",
    "number": 2964,
    "body": "#2909 ",
    "head_branch": "dark-mode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e042b3a21fa1e1f1aab59",
    "number": 2963,
    "body": "#2853 ",
    "head_branch": "double-chaining",
    "is_a_fork": true,
    "comments": [
      "Thank you @j0pgrm for making a contribution! The approach you took is not quite right, as it breaks functionality. I'll help you find a better solution.\r\n\r\nI suggest you take the following steps:\r\n\r\n- [ ] Inside the root directory of your local clone of the Underscore project, on your own `double-chaining` branch, run `npm install`. This will install all the tools we use during Underscore development.\r\n- [ ] Run `npm run test`. You will see that six tests fail, due to your changes.\r\n- [ ] Run `git revert HEAD`. This will create a new commit that restores the situation before your change.\r\n- [ ] Run `npm run test` again. Now, all the tests pass (although we know there is a bug, which is #2853 and which you are trying to fix).\r\n- [ ] Add a *new* test which exposes the bug. It should do something like `var testValue = _.chain(1).chain()` and then assert that `testValue.value()` is equal to `1`. Since the bug is not solved yet, we expect this test to fail initially. Commit this change.\r\n- [ ] Run `npm run test` again and verify that your new test fails, while all other tests pass.\r\n- [ ] Open `test/index.html` in your browser. This will run the tests in the browser and should give you the same result.\r\n- [ ] Use the developer tools of your browser to set a breakpoint at the start of your new test. If you have not done this before, [here](https://dzone.com/articles/how-to-debug-javascript-in-firefox-in-7-easy-steps) is a tutorial for Firefox and [here](https://developer.chrome.com/docs/devtools/javascript/) is one for Chrome. Step through the code to see what is causing the bug. Do this repeatedly until you fully understand what is going on.\r\n- [ ] Post a comment here to explain what you observed and what you think is causing the bug.\r\n\r\nAfter the above steps, we'll discuss your findings and possible solutions."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e042c3a21fa1e1f1aab5a",
    "number": 2962,
    "body": "Adding more entities to `_escapeMap.js` doesn't hurt",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Yes it does.\r\n\r\nNext time you make a contribution, make sure that the change actually solves a problem, respect existing tests and add new tests."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e042d3a21fa1e1f1aab5b",
    "number": 2961,
    "body": "Hi there!\r\nLet's add function `set` to underscore.\r\n #2948\r\n",
    "head_branch": "feature/set",
    "is_a_fork": true,
    "comments": [
      "Thank you for quick reviewing, @jgonggrijp ",
      "\n[![Coverage Status](https://coveralls.io/builds/51335034/badge)](https://coveralls.io/builds/51335034)\n\nCoverage increased (+0.08%) to 95.299% when pulling **b5f481a30eba7fb0c3d171a31dc41cc1c4c7a84b on AzatCoder:feature/set** into **a15d1afc708ec23894880b2ec4c1eb309447a906 on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e042e3a21fa1e1f1aab5c",
    "number": 2959,
    "body": "fixes https://github.com/jashkenas/underscore/issues/2958",
    "head_branch": "module-federation-version",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/49358045/badge)](https://coveralls.io/builds/49358045)\n\nCoverage remained the same at 95.217% when pulling **46d77d3aabc897dd3e2fe069c5ffaacc1fd2ab02 on petschki:module-federation-version** into **da06656712e023ed40198310bab29634a7170ec2 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2959 from petschki/module-federation-version\n\nFix for webpack module federation \"No version\" error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e042f3a21fa1e1f1aab5d",
    "number": 2956,
    "body": "fixes #2887",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Stop sending me emails please\r\n\r\nRonald Steffens\r\n\r\n\r\nOn Apr 25, 2022, at 11:15, Zack Schuster ***@***.***> wrote:\r\n\r\n﻿\r\n\r\nfixes #2887<https://github.com/jashkenas/underscore/issues/2887>\r\n\r\n________________________________\r\nYou can view, comment on, or merge this pull request online at:\r\n\r\n  https://github.com/jashkenas/underscore/pull/2956\r\n\r\nCommit Summary\r\n\r\n  *   46af674<https://github.com/jashkenas/underscore/pull/2956/commits/46af674b7fa25a21809a2c5ffd336d0b2d9d773e> add fsck error workaround to contributing.md #2887\r\n\r\nFile Changes\r\n\r\n(1 file<https://github.com/jashkenas/underscore/pull/2956/files>)\r\n\r\n  *   M CONTRIBUTING.md<https://github.com/jashkenas/underscore/pull/2956/files#diff-eca12c0a30e25b4b46522ebf89465a03ba72a03f540796c979137931d8f92055> (3)\r\n\r\nPatch Links:\r\n\r\n  *   https://github.com/jashkenas/underscore/pull/2956.patch\r\n  *   https://github.com/jashkenas/underscore/pull/2956.diff\r\n\r\n—\r\nReply to this email directly, view it on GitHub<https://github.com/jashkenas/underscore/pull/2956>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AGOZNMO3W7E7MDTEEXIHUI3VG3ALPANCNFSM5UJCSPVA>.\r\nYou are receiving this because you are subscribed to this thread.Message ID: ***@***.***>\r\n",
      "github is sending you these emails; i'm merely contributing to the `jashkenas/underscore` repo. you'll need to update your subscription / notification settings in the website. apologies for the noise!",
      "\n[![Coverage Status](https://coveralls.io/builds/48714079/badge)](https://coveralls.io/builds/48714079)\n\nCoverage remained the same at 95.217% when pulling **adf88386f37d514f573f0c24219948682cc1194e on zackschuster:patch-1** into **c7ce0d746ccce997b3056b778565d69f39c77541 on jashkenas:master**.\n",
      "Thanks again!"
    ],
    "commit_messages": [
      "Merge pull request #2956 from zackschuster/patch-1\n\nadd fsck error workaround to contributing.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04303a21fa1e1f1aab5e",
    "number": 2955,
    "body": "As usual, I'm submitting this PR just to leave a trace and to trigger CI.",
    "head_branch": "prepare-1.13.3",
    "is_a_fork": false,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/48511627/badge)](https://coveralls.io/builds/48511627)\n\nCoverage remained the same at 95.217% when pulling **0a531f1141f742802dfbec7ce645783543165589 on prepare-1.13.3** into **b112c23327df5d09aaf7a94972ff222927b87aed on master**.\n",
      "The Travis build reports \"failed\", but the situation is not as bleak as it seems. The first failure was a fluke, one of those `throttle` tests that fails every 1000 runs or so. It passed in the second run, but that one failed because Coveralls cannot stand it when you attempt to run it twice on the same commit. Which reminds me once again not to do PRs from the main repository.\r\n\r\nLong story short: everything is fine."
    ],
    "commit_messages": [
      "Merge branch 'prepare-1.13.3'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04313a21fa1e1f1aab5f",
    "number": 2953,
    "body": "ExtendScript apparently gives equal precedence to the || and && operators, so when the || appears before the &&, we need to anchor the order of evaluation with an extra pair of parentheses. See #2949.\r\n\r\n@RaymondClr Could you test whether all of your code works correctly in ExtendScript with https://github.com/jgonggrijp/underscore/raw/extendscript-precedence/underscore-umd.js?",
    "head_branch": "extendscript-precedence",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/48511124/badge)](https://coveralls.io/builds/48511124)\n\nCoverage remained the same at 95.217% when pulling **c4e092059604ae965583d2a8eff4d1cfdee5ce2d on jgonggrijp:extendscript-precedence** into **0557e331e065249421ff43c42ed00787df26c657 on jashkenas:master**.\n",
      "Some thoughts (feel free to ignore if they don't seem helpful):\n\nIf we want to support this long term, there's probably an ESLint rule we could/should enable to ensure we don't regress.\n\nAnother option here would be to add these as part of our build step. I know we try to keep our build step as minimal as possible, so I can also understand the value of doing it in the code itself. This thought occurred to me because, presumably our minified bundle will strip these new parentheses.\n\n\n\n",
      "Excellent comments, thanks @captbaritone! In one short post, you mentioned three things I didn't think of:\r\n\r\n- [x] Try whether parentheses can be added in a build step.\r\n- [x] Failing that, try to enforce them through an eslint rule.\r\n- [x] Parentheses must not be stripped during minification (though if we can't prevent this, I guess ExtendScript users can fall back to the unminified code).\r\n\r\nI plan to go through the above list within the current PR.",
      "@captbaritone Outcome of our discussion:\r\n\r\n- The obvious way to add the parentheses in a build step would be by applying the `fix` option of the `eslint` plugin for the Rollup bundler. That basically means that `eslint` comes into play in any case and that the question remains whether the rule can be automatically fixed.\r\n- The rule in question is `no-mixed-operators`, which unfortunately `eslint` cannot fix automatically. Nevertheless, I added the rule and configured it such that only mixes of `&&` and `||` are disallowed. CI will fail if people submit PRs with mixed expressions.\r\n- It turns out that `terser` was already adding parentheses to mixed expressions, so nothing needs to change with respect to minification.",
      "@RaymondClr I'm just going to merge this now on the assumption that this solves #2949. However, please still double-check that the issue is solved on your end when you find the time. Thanks in advance!",
      "Awesome. Thanks for the write up! Sounds like a great solution.",
      "It might be worth adding a comment to the ESLint config explaining why the rule is enabled. Otherwise we might opt to remove in the future assuming it's purely stylistic without realizing it's load bearing.",
      "Oops, good point. I assumed this wouldn't be allowed because the config is in JSON, but according to the eslint docs, it is allowed. I'll add it it in a separate commit on `master`.",
      "gsdg54sdg5s4d5gドっぱくラバニラサダウのブはとてもおいしそうなりんかマカョ♂"
    ],
    "commit_messages": [
      "Merge pull request #2953 from jgonggrijp/extendscript-precedence\n\nParenthesize mixed expressions of || and &&"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04323a21fa1e1f1aab60",
    "number": 2951,
    "body": "Follows-up c9b4b63fd08847281260205b995ae644f6f2f4d2 and 13f71bc9711b3617dd0fd5f1f085655df8505cf8.\r\n\r\nContrary to the commit message, it actually restored the older QUnit 2.6, and not the newer QUnit 2.10 version from package.json.\r\n\r\nThe oldest Node.js LTS is currently Node 12.\r\nThe latest QUnit 2.18 supports Node 10+.\r\nThis repo currently has a Node 8 CI job.\r\n\r\nWhile at it, update both to 2.10.1, the last version to support Node 8 ([changelog](https://github.com/qunitjs/qunit/blob/2.18.1/History.md#2110--2020-08-16)), and pin it to avoid \"npm install\" from expanding it and saving it to the lock file which Node 8 would see. Hopefully also avoiding e.g. using a newer method which would then fail on the website version later.",
    "head_branch": "same-version",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/47949942/badge)](https://coveralls.io/builds/47949942)\n\nCoverage remained the same at 95.217% when pulling **7312895ae1dce8e87c12600f97190a87aaec8221 on Krinkle:same-version** into **596a7f2d63bbd8a55d07ee18b804619d727e779f on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2951 from Krinkle/same-version\n\nTest: Use same QUnit version in CI as on website"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04333a21fa1e1f1aab61",
    "number": 2950,
    "body": "Remove the \"xvfb\" service. This was no longer used since browser testing was moved to SauceLabs. Also, for Firefox Headless or PhantomJS, Xvfb wouldn't be needed (mainly for pre-headless era of browser testing.)",
    "head_branch": "xvfb",
    "is_a_fork": true,
    "comments": [
      "gsdg54sdg5s4d5gドっぱくラバニラサダウのブはとてもおいしそうなりんかマカョ♂",
      "\n[![Coverage Status](https://coveralls.io/builds/47949934/badge)](https://coveralls.io/builds/47949934)\n\nCoverage remained the same at 95.217% when pulling **dcec4d2bbfa3ac7f47dbf3a63539389328db7ccc on Krinkle:xvfb** into **596a7f2d63bbd8a55d07ee18b804619d727e779f on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2950 from Krinkle/xvfb\n\nRemove unneeded Xvfb from Travis config"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04343a21fa1e1f1aab62",
    "number": 2946,
    "body": "I'm going to release this, but first I'm going to sleep.",
    "head_branch": "prepare-1.13.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2946 from jgonggrijp/prepare-1.13.2\n\nPrepare 1.13.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04353a21fa1e1f1aab63",
    "number": 2944,
    "body": "This fixes #2927, a regression that resulted from #2158. The change is trivial and obvious: `_.toArray` is our single trusted way to reliably produce arrays from values.\r\n\r\nI'm not expecting a review (although reviews are welcome); this pull request is just to leave a trace.",
    "head_branch": "fix-sample-string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2944 from jgonggrijp/fix-sample-string\n\nProperly convert _.sample input collection to array"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04363a21fa1e1f1aab64",
    "number": 2943,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Closing this because it seems that you accidentally resubmitted #2920."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04373a21fa1e1f1aab65",
    "number": 2941,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hey @Felichz, thank you for going out of your way to contribute to Underscore.\r\n\r\nUnfortunately I have to reject this proposal, for a couple of reasons:\r\n\r\n- The change does not solve a problem or add new functionality (modern syntax is nice, but it is never a goal in itself).\r\n- The change is not consistent (you updated only one module, while similar changes could apply to most other modules).\r\n- The change introduces a dependency on new syntax that will break the library for many existing users.\r\n\r\nSuccessful pull requests generally include the following elements:\r\n\r\n- a very descriptive title;\r\n- a short explanation of the goal of the PR;\r\n- a short explanation of the overall approach;\r\n- changes to both logic and tests if fixing a problem or adding functionality;\r\n- changes to documentation if adding functionality or improving documentation;\r\n- a small increase in code size for a large increase in functionality, if adding functionality;\r\n- no changes that would break the library for existing users.\r\n\r\nIf you have any questions or comments, please feel free to reply."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04383a21fa1e1f1aab66",
    "number": 2939,
    "body": "Thanks for all the work done on this project.\r\n\r\nI've been trying to use tree-shacking with the module. Looks that the current convention among bundler is to assume all code has side effects (cannot be removed, even if not used directly), unless there is `sideEffect: false` set on `package.json` (https://github.com/evanw/esbuild/issues/50#issuecomment-634107700)\r\n\r\nThe solution I'm proposing here can be see in action here:\r\n* https://github.com/marcin-wosinek/underscore-tree-shaking/commit/ec894eb66d0d20b4f32048e128f800fd21cbed31 build has **19.7 KiB**:\r\n```sh\r\n$ npm ci; npm run webpack\r\n\r\n...\r\n\r\nasset main.js 19.7 KiB [emitted] [minimized] (name: main)\r\norphan modules 83.1 KiB [orphan] 161 modules\r\nruntime modules 670 bytes 3 modules\r\n./src/index.js + 161 modules 83.2 KiB [built] [code generated]\r\nwebpack 5.50.0 compiled successfully in 1252 ms\r\n```\r\n\r\nwhile https://github.com/marcin-wosinek/underscore-tree-shaking/commit/9a52666b8cdbe2dc9f8939ef9361fffdc11d05a3 build to **2.9 KiB**:\r\n```sh\r\n$ npm ci; npm run webpack\r\n\r\n...\r\n\r\nasset main.js 2.9 KiB [emitted] [minimized] (name: main)\r\norphan modules 83.1 KiB [orphan] 161 modules\r\n./src/index.js + 26 modules 12.4 KiB [built] [code generated]\r\nwebpack 5.50.0 compiled successfully in 754 ms\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Sorry but no. This will actually break things because of https://underscorejs.org/docs/modules/index-default.html (note \"Add all of the Underscore functions to the wrapper object\"). In other words, the fully composed Underscore cannot be tree-shaken because all functions are mixed into `_`.\r\n\r\nYou can have perfect \"treeshaking\" by composing your own Underscore. I extensively documented how to do that in https://juliangonggrijp.com/article/introducing-modular-underscore.html (which is also linked from the Underscore website). If you prefer a video introduction, refer to https://www.telerik.com/react-wednesdays/what-i-learned-modularizing-underscore-with-julian-gonggrijp or https://www.youtube.com/watch?v=d4ORLdr3vWE."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04393a21fa1e1f1aab67",
    "number": 2937,
    "body": "for the issue #2936 Conceivable _.throttle bug goes undetected in /test/functions.js",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks @zheng-kai!\r\n\r\nI'm going to merge this, but I need to arrange something with the CI first because it isn't kicking off. You'll see it in your notifications when it's done.",
      "Thank you @jgonggrijp!\r\nI'm very excited to hear that!"
    ],
    "commit_messages": [
      "Merge pull request #2937 from zheng-kai/master\n\nadd test unit 'throttle three times'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e043a3a21fa1e1f1aab68",
    "number": 2935,
    "body": "Tried to resolved issue #2780 to make documentation site mobile responsive and change font little bit for better readability.",
    "head_branch": "issue-2780",
    "is_a_fork": true,
    "comments": [
      "Hey @itsdeekay thanks for getting back here!\r\n\r\nI'm going to review this soon, but right now, I can't easily preview the code on a mobile device because Statically.io has changed its policies. You now need to opt in to the HTML service. Would you mind doing that? If you fork this gist: https://gist.github.com/jgonggrijp/be0da2723ee944d5746a81bdfe3c6bac, I can take it from there (the second and final step is a tweet to the maintainer of Statically.io). The whole \"procedure\" is explained over here: https://statically.io/docs/using-staticzap/.",
      "Just realized I could do a workaround by copying the branch to my own fork. I reviewed again based on the following comparison: [before](https://cdn.statically.io/gh/jashkenas/underscore/1.13.1/index.html), [after](https://cdn.statically.io/gh/jgonggrijp/underscore/eb921fb/index.html). I'm happy with the end result. I'll just restore some of the whitespace changes, which in my opinion don't need to be there, and then merge this branch.\r\n\r\nThanks for your contribution, @itsdeekay!"
    ],
    "commit_messages": [
      "Improving design for Mobile"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e043b3a21fa1e1f1aab69",
    "number": 2934,
    "body": "Hi \r\n\r\nI have fixed the typo as suggested in issue resolves #2925 . Please review it and merge it.",
    "head_branch": "issue-2925",
    "is_a_fork": true,
    "comments": [
      "I have performed the steps as you mentioned except the fourth which was giving error so I did this instead `git push origin issue-2925 --force` and created a pull request. Seems like commit history is still there. Is there something I missed? ",
      "GitHub sometimes still shows the old commits for a while after you've updated the branch by force-push. No worries, it seems everything went the way it should. You can see this for yourself in the \"Commits\" and \"Files changed\" tabs.\r\n\r\nMerging now. Congratulations with your first contribution!",
      "Thanks @jgonggrijp for your guidance. I hope to work on more problems. If you have any open work where I can work please let me know.",
      "@itsdeekay You are welcome to work on any open issue that doesn't have the \"contrib\", \"breaking change\" or \"fixed\" label. (If it does have one of those labels, you're welcome too, but I'm much more likely to reject the PR.)\r\n\r\nIn addition, if you run into anything while using Underscore yourself, feel free to submit a new issue ticket and/or submit a PR to address it.",
      "That's the case, most of the issues are related to these flags only and others are already assigned or are discussion pending. I am open to work on other open source projects if there is requirement. Thanks",
      "That still leaves at least #2909, #2853 and #2780. If you're up to the challenge, you can also ignore my assignment and try your hand at #2927. If none of that suits you, I can also use help in https://github.com/documentcloud/underscore-contrib, for example https://github.com/documentcloud/underscore-contrib/issues/133 or any of the [issues with a \"docs\" label](https://github.com/documentcloud/underscore-contrib/issues?q=is%3Aopen+is%3Aissue+-label%3A%22after+modules%22+label%3Adocs).",
      "Thanks, created pull request for #2780 "
    ],
    "commit_messages": [
      "Merge pull request #2934 from itsdeekay/issue-2925"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e043c3a21fa1e1f1aab6a",
    "number": 2930,
    "body": "The faster algorithm on sorted array will not work for `_.uniq` with an iteratee, if the iteratee is not a one-to-one function. Because of that it was disabled for all iteratees, even for those producing one-to-one functions, such as `String` and `Array` iteratees (handled by `property()` function). This PR introduces the code that checks the iteratee type and enables faster algorithm if possible.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/40149806/badge)](https://coveralls.io/builds/40149806)\n\nCoverage increased (+0.005%) to 95.223% when pulling **5e5e9b0f8baea87d3b66383430937f224a8400be on afanasy:master** into **3d2f17a62b2987c2b7f93880edb0d4e48ce61f10 on jashkenas:master**.\n",
      "@jgonggrijp Thank you for the detailed and prompt response. I agree that \r\n```js\r\nvar faster = isSorted && !isFunction(iteratee);\r\n```\r\nlooks much better. However, I'm failing to understand the main point here - why is it a breaking change and how the `_.property` iteratees are able to produce not \"one-to-one\" values, unsuitable for the fast algorithm? Could you provide an example? And just as a side note, introducing `Set` will \"dramatically reduce the performance difference between the fast and the slow algorithms\" only for smaller arrays. For larger arrays the fast algorithm `O(n)` will still be much faster than the slow one `O(n^2)`. ",
      "Thank you for sharing your doubts.\r\n\r\n> (...) I'm failing to understand the main point here - why is it a breaking change and how the `_.property` iteratees are able to produce not \"one-to-one\" values, unsuitable for the fast algorithm? Could you provide an example?\r\n\r\nI think this part of the unittests illustrates the one-to-one issue quite well:\r\n\r\nhttps://github.com/jashkenas/underscore/blob/3d2f17a62b2987c2b7f93880edb0d4e48ce61f10/test/arrays.js#L169-L171\r\n\r\nThe discrepancy arises because the criterion the array was originally sorted by (magnitude) is not the same criterion as the array is being uniqued by (magnitude of the square). You can get into a similar situation with `_.property` iteratees as follows. Let's say the array was sorted by the `rank` property and is now being uniqued by the `flavor` property:\r\n\r\n```js\r\nvar theArray = [{rank: 1, flavor: 'vanilla'}, {rank: 2, flavor: 'strawberry'}, {rank: 3, flavor: 'vanilla'}];\r\nvar result = _.uniq(theArray, true, 'flavor');\r\n```\r\n\r\nMy \"acceptable change\" number 3 above rests on the semantic change of expecting users to only pass `isSorted === true` when the sort criterion and the unique criterion are the same. Your confusion may stem from the assumption that this is already the case, but it isn't.\r\n\r\n> And just as a side note, introducing `Set` will \"dramatically reduce the performance difference between the fast and the slow algorithms\" only for smaller arrays. For larger arrays the fast algorithm `O(n)` will still be much faster than the slow one `O(n^2)`.\r\n\r\nThe standard dictates that `Set` must provide a faster-than-linear lookup mechanism. Generally, that's either O(k) with small k for hash tables or O(log n) for binary search trees. The slow algorithm then becomes O(nk) or O(n log n) overall, which is not quite  as fast as the fast algorithm yet, but *way* faster than the current slow algorithm, *especially* for large arrays.",
      "@jgonggrijp This all makes sense, yes, I assumed users know what they are doing, when passing the `isSorted === true`, but that may not always be the case. And you are right about `Set`, it should provide the boost from using internal uniqueness check. Thank you for taking the time to clarify my misunderstanding.  "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e043d3a21fa1e1f1aab6b",
    "number": 2928,
    "body": "The old code for contains: when we check 'toString' inherited from Object.prototype, the contains return Object.prototype.toString;In this case, it prevent us to add obj's own 'toString' to its keys.",
    "head_branch": "my-commit",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/39720543/badge)](https://coveralls.io/builds/39720543)\n\nCoverage remained the same at 95.217% when pulling **f5c02bcdaf1b54663bce08b6af5230aaafa8060a on anfengchen:my-commit** into **943977e34e2279503528a71ddcc2dd5f96483945 on jashkenas:master**.\n",
      "Looks good to me. Thanks for the fix!"
    ],
    "commit_messages": [
      "Merge pull request #2928 from anfengchen/my-commit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e043e3a21fa1e1f1aab6c",
    "number": 2921,
    "body": "There are no code changes and I'm not really looking for a review (though reviews are welcome). I'm mostly just creating the PR to trigger CI and to leave a trace.",
    "head_branch": "prepare-1.13.0",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/38687707/badge)](https://coveralls.io/builds/38687707)\n\nCoverage remained the same at 95.217% when pulling **5511d129881253807d728cc6a21fff55953ae4f9 on jgonggrijp:prepare-1.13.0** into **97f4cb42a1125e160f8aac1bedcd4969745dffec on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2921 from jgonggrijp/prepare-1.13.0\n\nPrepare 1.13.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e043f3a21fa1e1f1aab6d",
    "number": 2920,
    "body": "Statistical Functions added as a part of library\r\n\r\n- Standard Deviation\r\n- Variance\r\n- Standard Error\r\n- Statistical Range\r\n- Mean\r\n- Median\r\n- Mode\r\n- Percentile",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/38845195/badge)](https://coveralls.io/builds/38845195)\n\nCoverage decreased (-0.05%) to 95.17% when pulling **e0bc2c83a93740e7c4b39e0c8006dd034e98a511 on kpkalwa:master** into **7054a54d63af2ed1c99eb3707836da709b5e625e on jashkenas:master**.\n",
      "The changes has been made and pushed to the master branch of the repository can you review and close the pull request @jgonggrijp ",
      "The changes has been made and pushed to the master branch of the repository can you review and close the pull request @jgonggrijp",
      "@jgonggrijp I was still working on the changes all the changes has been completed you can review the code.\r\n\r\nMigrating to Underscore-contrib will take time for me as the the structure is totally different and not modularized.",
      "@jgonggrijp The changes has been Implemented with the two white spaces"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04403a21fa1e1f1aab6e",
    "number": 2919,
    "body": "Statistical Functions added as a part of library\r\n\r\n- Standard Deviation\r\n- Variance\r\n- Standard Error\r\n- Statistical Range\r\n- Mean\r\n- Median\r\n- Mode",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/38590789/badge)](https://coveralls.io/builds/38590789)\n\nCoverage decreased (-8.3%) to 86.922% when pulling **6e3baf206b4352080c078ae17125b82d51ccf9cc on kpkalwa:master** into **b713f5a6d75b12c8c57fb3f410df029497c2a43f on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04413a21fa1e1f1aab6f",
    "number": 2917,
    "body": "This branch contains my test and fix for the security issue of #2915. The changes visible here were published to NPM as version 1.12.1. Also related to #2911.",
    "head_branch": "template-variable-parameter",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/38340914/badge)](https://coveralls.io/builds/38340914)\n\nCoverage increased (+0.02%) to 95.217% when pulling **7e3d4042a0b9bb76e70da62204c283d1530f7a44 on jgonggrijp:template-variable-parameter** into **798eafa190ebab8de53fcc559201e741c73ec54a on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge branch 'template-variable-parameter'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04423a21fa1e1f1aab70",
    "number": 2914,
    "body": "_tl;dr: you have come to the right place to share your experiences with using the `underscore@preview` release. The text below describes the changes in detail, but you can skip reading it if you just came to report your findings._\r\n\r\nI have postponed this feature until now, because having to use `.cjs`/`.mjs` extensions, pitfalls regarding state that might not be shared between CJS and ESM users, and the `exports` field that might break a lot of things all seemed rather rough and daunting to me. I'm biting the bullet now because I noticed that a lot of users found this disappointing, and the native ESM support is marked as \"stable\" as of Node.js version 15.\r\n\r\nThe main new feature is that in Node.js version 12 and later, you can now directly do named imports from the package entry point, as well as deep imports from the source modules:\r\n\r\n```js\r\n// default and named imports from package entry (monolithic)\r\nimport _, { groupBy } from 'underscore';\r\n\r\n// deep imports (modular)\r\nimport groupBy from 'underscore/modules/groupBy.js';\r\n```\r\n\r\n(The default import was already possible in Node.js 8+ due to the CommonJS interop.)\r\n\r\nI had to jump some burning hoops to make this work. The package entry points for Node.js 12+ are newly created custom Rollup bundles: `underscore-node-f.cjs`, `underscore-node.cjs` and `underscore-node.mjs`. The `underscore-node.mjs` is a thin wrapper that takes its default export from `underscore-node.cjs` and its named exports from `underscore-node-f.cjs`. The reason for this is that CommonJS users and ESM users would otherwise see separate `_` functions with different sets of mixed in functions, different values of `_.templateSettings`, different values of `partial.placeholder`, etcetera. The `modules/` directory contains an extra package.json which declares that particular directory to be `type: module`.\r\n\r\nNote that the new entry point bundles for Node.js do not import from `modules/` or `cjs/` in any way; all the functions are bundled in `underscore-node-f.cjs` for efficiency. **I still recommend to use monolithic imports everywhere** _except_ when you are implementing extension functions or you are creating a custom Underscore.\r\n\r\nWith that out of the way, the `exports` field adds a mapping so that in theory, you can now also do this in Node.js 12+:\r\n\r\n```js\r\nconst groupBy = require('underscore/modules/groupBy.js');\r\n```\r\n\r\nFor consistency with the other bundles, and looking forward to a future Underscore 2.0 that might be ESM-first, I have **renamed** the browser-, AMD and Node.js<12-oriented **UMD bundle to `underscore-umd.js`.** The package however still contains a copy by the old name `underscore.js` in order to not break existing import paths.\r\n\r\nIn theory, this is a non-breaking change; all the modules and bundles that previously existed are still there and all files published to NPM are also represented at least once in the new `exports` field. The `main` and `modules` field are also still there and still point to the regular UMD bundle and `modules/index-all.js`, respectively.\r\n\r\nI figured I needed to test this \"from the outside\", so I created a separate repository that tests all flavors of imports with several tools on Node.js LTS versions 8-14 against Underscore as an installed NPM package:\r\n\r\nhttps://gitlab.com/jgonggrijp/underscore-import-tests\r\n\r\nThe CI pipeline can be observed to pass against the changes in this PR over here:\r\n\r\nhttps://gitlab.com/jgonggrijp/underscore-import-tests/-/merge_requests/1\r\n\r\nTheory and pipelines aside, the real proof of the pudding is in the tasting. For this reason, I decided to do something slightly unusual. **By way of review, I will publish these changes to NPM with the `preview` tag** and invite people to install it and check that their existing setups still work and that they can use the new features.\r\n\r\n```\r\nnpm i underscore@preview  # or an equivalent command with another package manager\r\n```\r\n\r\nIf that is what brought you here: thanks for being here and please don't hesitate to comment!",
    "head_branch": "node-native-esm",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/38436447/badge)](https://coveralls.io/builds/38436447)\n\nCoverage remained the same at 95.217% when pulling **62c6ad01f4a24ae4a6bf995e6166c37174d13f8b on jgonggrijp:node-native-esm** into **c627e3847981e0f573f43d6ef6c9c10ab5891d50 on jashkenas:master**.\n",
      "The Travis build is failing because I upgraded to Rollup 2, which doesn't work with Node.js version 8. I'll address that tomorrow.\r\n\r\n*Update: fixed.*",
      "Tagged a new preview release (1.13.0-1) because the aliases were missing in the new Node.js native ESM build.",
      "The latest Travis build failed because the throttle arguments test seems to have become more brittle lately. It happens on master as well so I don't think it is related to the changes in this branch.\r\n\r\nThe preview releases have been up for three weeks. They were downloaded over 800 times and nobody reported any problems so far. Next week (when I have more time), I'll merge this and release version 1.13.0. For real! 🎈 "
    ],
    "commit_messages": [
      "Merge branch 'node-native-esm' (PR #2914)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04423a21fa1e1f1aab71",
    "number": 2913,
    "body": "✅ Closes: #2883\r\n\r\n### Changes\r\nTests only:\r\n* Monkey patch `Date.prototype.getTime` and `Date.prototype.valueOf` methods and `Date.now` method in `_.debounce` and `_.throttle` test cases,\r\n* Provide additional test case asserting the outputs before and after monkey patching,\r\n* Remove the reference to `_.now` method in test cases as the underlying implementation of library methods don't reference the methods from the `_` object but rather call dependent methods directly.\r\n\r\n### Checklist\r\nAfter the changes I ensured that:\r\n * no stylistic or unwanted errors are present, by running `npm run lint`,\r\n * no tests are failing, by running `npm run test`,\r\n * build passes with no issues, by running `npm run bundle`.\r\n\r\n### Done\r\n- [x] Added/updated unit tests for this change\r\n- [x] Included links to related issues/PRs\r\n\r\n### Additional notes\r\nThe underlying changes could've been done by monkey patching the native `Date` and `Date.prototype` methods in `before` (or `beforeEach`) and `after` (or `afterEach`) hooks in the *Functions* QUnit module. However, that would require a minor changes in two other test cases from the same module (as the `valueOf` method of the `Date.prototype` would be changed for all test cases and always return the same value which would cause certain test cases to hang to the operations `new Date - date < amount` as that will always result in the `false` value in the `while` loop).\r\n\r\nI can provide the change if necessary using `before` and `after` hooks instead.\r\nI just wanted to assure that the implementation of `_.throttle` and `_.debounce` methods will **not** break, if the system time would be tempered (monkey patched).\r\nI guess the test cases can be safely omitted as they're redundant @jgonggrijp?\r\nIf so, I can provide another commit to the same PR removing the obsolete test cases.",
    "head_branch": "test/time-tampering-tests",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/37733967/badge)](https://coveralls.io/builds/37733967)\n\nCoverage remained the same at 95.197% when pulling **3a5c878f41575300fa9f6afb12ea314cfa245d57 on ognjenjevremovic:test/time-tampering-tests** into **a4cc7c065517f0fa132217161794b015ca537a5d on jashkenas:master**.\n",
      "Hey @jgonggrijp, thank you so much for such an in depth review.\r\nI really appreciate it!\r\n\r\n> I have a few very minor change requests about the assertion comments, otherwise everything looks excellent.\r\n\r\nYou're right; the messages should definitely be more concise.\r\nTo be honest, I wasn't sure how to structure the assertion comments. I wanted to somehow diversify the messages between `_.debounce` and `_.throttle` but I'm not that good with the wording; I thought prefixing the assertion comments with the method name could help.\r\nI'll be sure to address these with the suggested changes.\r\n\r\n\r\n> Out of curiosity: why is there a ring emoji in the commit title? Is it some kind of cultural reference?\r\n\r\nI apologize for this 😄 .\r\nI usually like to structure the commit messages in a descriptive manner, using the format: *intention:* + *summary* of the change (as a commit message head) followed by a *long description*. I use [`git-cz`](https://www.npmjs.com/package/git-cz) to make such formated commit messages.\r\nI think the latest `major` version of the tool included the emojis and automatically prepends them to every commit message (made using the tool).\r\nI can change the commit message and remove the emoji if you'd like?\r\n\\* *(Just to assure you, the emoji does not represents a symbol of any sort and it was unintentional as it does not really provide any meaningful value to the actual commit message).*\r\n\r\nThank you for noticing such a detail 🙂 .\r\n\r\n\r\n> Which test cases are obsolete?\r\n\r\nJust wanted to check if adding these 2 new test cases provided value to the overall tests and didn't include redundancy.\r\nAlso, I wanted to check if it is ok to keep the altered tests now that they use `Date.prototype` methods instead of `_.now`.\r\nI think you already answered my question in your review; we want to keep all the tests.\r\n\r\n\r\n> I'm fine with the current solution, but if you want to refactor things a little bit, I'm fine with that, too.\r\n\r\nIf code duplication in tests is not too big of a trouble and doesn't introduce the confusion in the test cases by any means, I'm fine with the current implementation as well.\r\nUsing `beforeEach` and `beforeAll` would require certain changes and might be different from all other scenarios in the tests.",
      "Congratulations with your first contribution! Please feel welcome to make more contributions.\r\n\r\n(A suggestion, if you feel up to it: I have a big PR waiting (#2908) which requires multiple reviews by different people. If you could take a look at the diff and leave some comments, or if you know other, seasoned Underscore users who might be willing to do a code review (or contribute a real-world benchmark), that would be great.)"
    ],
    "commit_messages": [
      "Merge pull request #2913 from ognjenjevremovic/test/time-tampering-tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04433a21fa1e1f1aab72",
    "number": 2912,
    "body": "See #2911.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/37512548/badge)](https://coveralls.io/builds/37512548)\n\nCoverage remained the same at 95.197% when pulling **a4cc7c065517f0fa132217161794b015ca537a5d on jgonggrijp:master** into **745e9b7314064e66a7257f9b361030e6055980b8 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Add a test to confirm we are not vulnerable to CVE-2021-23337 (#2911)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04443a21fa1e1f1aab73",
    "number": 2910,
    "body": "Updating project and then implementing findkeys function.",
    "head_branch": "2850",
    "is_a_fork": true,
    "comments": [
      "These are the same changes as in #2904. Closing in favor of #2897."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04453a21fa1e1f1aab74",
    "number": 2908,
    "body": "This is a substantial refactoring of the Underscore source code, which I've been working on since shortly after the modularization (#2849). Before merging, I would like this to be reviewed extensively, by multiple people, in multiple ways and in multiple stages. Please see the final third of this post for review details.\r\n\r\n*Edit: I need help from people who can contribute benchmarks based on real-world applications. Please leave a comment if you think you might be able to help!*\r\n\r\n\r\n## Goals\r\n\r\n- Over the years, the source code has lost a substantial portion of its [former elegance](https://cdn.rawgit.com/jashkenas/underscore/0.4.0/underscore.js). This is partly due to bugfixes and feature additions, but also substantially due to micro-optimizations of which the added value is often questionable. I wanted to bring back some of that former elegance, prioritizing a clean, readable, DRY code style over absolute maximum performance.\r\n- Making the code more DRY and more functional would also contribute to a smaller bundle size (#2060), so I made this an explicit goal as well.\r\n- Preparing the source code for future code sharing with Underscore-contrib and Underscore Fusion. I theorized that some of Underscore's internal logic could be factored out. Once factored out, it could potentially be made public, or at least be made stable enough to enable reuse in Underscore's sister projects.\r\n- Preparing the source code for adding new core collection types in the future, in particular `Map`, `Set` and iterators in Underscore 2.0. This can only be done in a maintainable way if there is a single source of truth about how to iterate any given collection. More about this below.\r\n\r\n\r\n## Principles\r\n\r\n- **No interface changes** (yet), in order to keep distractions at a minimum. While the code changes contain some seeds for possible future interface changes (mostly additions), I wanted this branch to focus entirely on the implementation of the existing interface.\r\n- **No assumptions**. I measured the effect on minified+gzipped UMD bundle weight after every change and did extensive microbenchmarking in order to assess impact on performance.\r\n- **Only meaningful changes**. If, after measurement, it turns out that a change benefits neither readability nor bundle size nor performance, don't make the change. There are quite a few changes that I reverted for this reason. I have interactively rebased this branch several times in order to clean up history.\r\n- **Mild performance degradations are acceptable**. 99% of application code is not performance-critical; programmer productivity and code size are usually much more important. Neither of those interests is served by trying to squeeze every drop of performance out of the hardware. In the remaining 1% of cases, if a slight slowdown is really a problem (i.e., fairly trivial code in a hot loop), users can replace their call to an Underscore function by a simple hand-written loop and easily achieve much better performance than they ever could with a library function.\r\n\r\n\r\n## Approach\r\n\r\nI started by asking myself which existing Underscore function should be the single source of truth about collection iteration. Initially, I considered `_.reduce`. It is a very general function and many other collection functions can be cleanly expressed in terms of it, for example `_.map`, `_.filter` and `_.min`/`_.max`. I also considered `_.each`, because it doesn't use an accumulator by default. `_.each` and `_.reduce` are equally powerful, in the sense that either can be cleanly expressed in terms of the other.\r\n\r\nI soon realized, however, that there is a function that *can't* be cleanly expressed in terms of `_.each` or `_.reduce`: `_.find`. Like the procedural `for`-`in` loop with a `break` option, `_.find` may stop iteration early. Otherwise, it basically does the same thing as `_.each`. *All* Underscore collection functions can be cleanly expressed using `_.find`, including not only `_.each`, `_.reduce`, `_.map` and `_.min` but also `_.some`, `_.every` and `_.contains`. For this reason, I have chosen `_.find` to be the one function that defines how to iterate a collection.\r\n\r\nConveniently, `_.find` was already implemented by branching over the collection types: it calls `_.findIndex` on arrays and `_.findKey` on objects. These latter functions, in turn, are the single sources of truth about iterating arrays and objects, respectively (although the situation is a bit more nuanced with regard to arrays; more on this shortly). In Underscore 2.0, I plan to add `_.findEntry` for `Map`/`Set` and `_.findIteration` for iterators. By including these in `_.find` and implementing all other collection functions in terms of `_.find`, all collection functions would automatically support all five collection types in a consistent way.\r\n\r\nBesides using `_.find` in all collection functions, one of the first things I did was factoring out very general `linearSearch` and `binarySearch` functions. These are the *actual* single sources of truth on how to iterate/search arrays; `_.findIndex`, `_.findLastIndex`, `_.indexOf`, `_.lastIndexOf` and `_.sortedIndex` are all implemented using `linearSearch` and/or `binarySearch` under the hood.\r\n\r\n`linearSearch` is so general that I was able to substitute it for nearly all hand-written `for`/`while` loops in the source code. This proved very effective in both producing cleaner code and reducing the bundle size. However, I have reverted this in many places because function call overhead turned out to be costlier than I expected. It seems that even modern JS engines rarely perform inlining, if ever. After discovering this, I adopted the following \"safe\" rule to choose between `linearSearch` and a hand-written loop: if the loop body didn't previously involve any function call, keep the hand-written loop; otherwise, replace it by `linearSearch` or another Underscore function. In this way, the extra function call introduced by using an Underscore function can never slow down the loop by more than a factor two. I expect the slowdown to be less in real-world scenarios, because a loop body that purely consists of two function calls (i.e., with functions that don't *do* anything) is trivial. Also, loops that already involved a function call often already involved *multiple* function calls.\r\n\r\nI wrote an extensive [microbenchmark suite](https://gist.github.com/jgonggrijp/a14513817e24ea30ec3d729522704666) to measure performance, in which each operation is repeated at least 3.6 million times and during at least a whole second. Please follow that link for details. All performance claims in the current post are informed by repeated measurements in Node.js 10, mobile Safari 14 and desktop Firefox 84 (on macOS) with those microbenchmarks. However, I believe that a final performance impact assessment should be made by comparing execution time in real-world applications and across a wider range of engines. More on this in the review section at the bottom of this post.\r\n\r\nWith this overall approach in mind, I made several passes over all the source modules, looking for opportunities to make the code cleaner, DRYer and more functional. The code I'm presenting today is the result of this effort and the subject of the first round of reviews. Once I have received and processed the first round of reviews, I plan to make one more pass over the source code, in order to make function parameter names more consistent and to fix the linear order of the bundles. After that, I'll take one smaller, final review before finally merging the branch.\r\n\r\n\r\n## Results (stage 1)\r\n\r\n- All collection functions except for `_.find` are now written in a collection-agnostic way, i.e., they use `_.find` or another Underscore function to abstract over the collection type.\r\n- New generic functions: `linearSearch`, `binarySearch`, `extremum`, `greater`, `less`, `lessEqual`. I believe that `linearSearch` and `binarySearch` should remain internal, in favor of the more user-friendly `_.*index*` family of functions (which can however expand parameters to support more options from the underlying primitives); the others could potentially be made public in a future update.\r\n- It is trivial to add `_.sortedLastIndex` in the future (in fact it's implemented but not added to the `index.js` yet) as well as an `isSorted` option for `_.lastIndexOf` (which is manually disabled for now).\r\n- Hand-written loops have in many cases been replaced by a call to `linearSearch` or another Underscore function. Besides `linearSearch`, the main loop primitives are `_.findKey` and `_.times`. Besides those primitives, 20 functions (out of the original 38) still contain hand-written loops for performance reasons.\r\n- While factoring out `extremum`, I fixed #2688 and opened the possibility of making `_.min` and `_.max` work with non-numbers in the future. This is also how I uncovered the \"crazy comparison semantic\" that I discuss in the next bullet.\r\n- I was able to deduplicate the slow path of `_.min` and `_.max`, which transforms the elements through an `iteratee` before comparing, through the outfactoring of `extremum`. I couldn't deduplicate the fast path (without `iteratee`) yet, because, for historical reasons, they currently have a rather crazy comparison semantic; they do something that is wildly different from just the builtin `<`/`>` operators. I could abstract this semantic in a function and pass it to `extremum`, and in fact, this is exactly what I do in the slow path, but the fast path would suffer a performance degradation of roughly a factor 25 if I were to do the same there. Alternatively, I could inline the comparison logic in `extremum`, but I don't want to do that because it is really crazy. I want to change it back to regular `<`/`>` in Underscore 2.0, in which case I'll be able to move the fast path to `extremum` as well and finish the deduplication. Please see my pre-review comments after this post for more details.\r\n- The \"switch pyramids of doom\" (as @jashkenas once aptly called them) in `_.restArguments` and `optimizeCb` are gone. As far as my benchmarks could tell, they had no performance benefit whatsoever over the simpler code that I put in their place.\r\n- The infrastructure around `_.iteratee` and the internal `cb` has been simplified substantially.\r\n- Some functions, including `_.map` and `_.each`, take a slight performance hit due to the changes. In my microbenchmarks, with very trivial loop bodies, this could be up to a factor two. I consider this unavoidable, due to the need for a single source of truth about collection iteration, though I have tried hard to keep the sacrifices at a minimum. I'd like to see real-world performance comparisons before drawing any conclusions.\r\n- In cases where really tiny collections with only one or two elements are passed to an Underscore function, performance hits might be worse than a factor two due to the increased stacking of function calls. Again, I would prefer to benchmark real-world applications before drawing any conclusions.\r\n- In contrast, some functions actually seem to have sped up a bit due to the simplifications, for example the anonymous functions returned by `_.restArguments`, which are used internally throughout Underscore.\r\n- The minified+gzipped UMD bundle size shrank by 225 bytes. I think this is as close to resolving #2060 as we will ever get (*edit: other than some breaking changes that can be made in version 2.0, such as removing IE<11 support*).\r\n\r\n\r\n## Review\r\n\r\nThis PR is unusual because it may lead to changes that sacrifice performance in favor of other considerations. For the sake of accountability, I'd like the review to be very thorough and entirely public. This is going to be a lot of work and I don't want all that work to land on the shoulders of only one or two people. Instead, I hope to involve many people, each doing only light work. As a token of appreciation, everyone making a substantial contribution to this review will get a permanent honorable mention in the [changelog](https://underscorejs.org/#changelog).\r\n\r\nI propose to divide the review work as follows. I'll be inviting specific people for specific parts, but please rest assured that anyone is welcome to participate in any part of the review. I'll keep track of review progress below.\r\n\r\n- [ ] Stage 1 (before final polishing)\r\n    - [x] [High-level review](https://github.com/jashkenas/underscore/pull/2908#issuecomment-776223149) of the goals, principles, approach and results described in this post. I'd like to specifically invite @jashkenas for this part, because he is the original creator of Underscore.\r\n    - [ ] Review of the code changes in `modules/`, preferably by at least two independent expert Underscore users. I would like to specifically invite @cambecc, @reubenrybnik and @joshuacc for this part. Please spread the word if you know other expert Underscore users who might be willing to contribute a code review.\r\n        - [ ] Expert code review 1\r\n        - [ ] Expert code review 2\r\n    - [ ] Preparation of benchmarks based on real-world applications/libraries. I'd like to spread this work over at least three people, each preparing one application; one for Node.js, one for the browser and one more that can be for any environment. \"Exotic\" environments such as Electron and ExtendScript are also welcome. Please see the section \"Benchmark preparation\" below for details. Again, please spread the word if you know someone who might have a suitable application or library!\r\n        - [x] [Benchmark 1](https://github.com/offen/underscore-benchmark) (Node.js and also browser)\r\n        - [ ] Benchmark 2 (browser)\r\n        - [ ] Benchmark 3 (any environment)\r\n    - [ ] Performance comparisons between [Underscore at commit c9b4b63 (master)](https://github.com/jashkenas/underscore/blob/c9b4b63fd08847281260205b995ae644f6f2f4d2/underscore.js) and [Underscore at commit eaba5b5 (functional)](https://github.com/jashkenas/underscore/blob/eaba5b58fa8fd788a5be1cf3b66e81f8293f70f9/underscore.js), one for each applicable combination of a benchmark as listed above and an engine as listed below. This can be spread over many people. Please spread the word if you know anyone who might be willing to help with the measurements. See the \"performance measurements\" section below for details.\r\n        - [ ] Node.js 10\r\n        - [ ] Node.js 14\r\n        - [ ] Desktop Chrome 80+\r\n        - [ ] Desktop Firefox 80+\r\n        - [ ] Mobile Safari 13+\r\n        - [ ] Internet Explorer 11\r\n        - [ ] Other (optional)\r\n- [ ] Stage 2 (after processing the outcomes of stage 1 and polishing)\r\n    - [ ] Esthetic review of the generated bundle. I'd like to specifically invite @jashkenas again for this part, when the time is there.\r\n\r\n\r\n### Benchmark preparation\r\n\r\nIf you have a real-world JavaScript application (or library function) that meets all of the following criteria:\r\n\r\n- already in production, i.e., deployed/released and in use by real people in order to accomplish a real task;\r\n- has a performance-critical section, i.e., a part that required some attention in the past in order to ensure that it would be fast enough, or of which you could easily imagine that it might become problematically slow;\r\n- the performance-critical section involves calling at least one Underscore function;\r\n- the application can be adjusted to focus on testing the speed of that performance-critical section (so that testers don't need to wait for more than a few seconds before they can start measuring);\r\n\r\nand you are willing to do the following things, with help as needed:\r\n\r\n- to create a version of your application that is suitable for quickly measuring the speed of the performance-critical section (without changing anything about the internal logic of that section itself);\r\n- to publish the source code of the benchmark program thus created and to keep the source code open for an extended period of time (at least one year but preferably indefinitely);\r\n- to invest some additional effort to make it as easy as possible for testers to run the program, to measure the speed and to switch between both versions of Underscore;\r\n\r\nthen please let us know by leaving a comment below!\r\n\r\n\r\n### Performance measurements\r\n\r\nYou can contribute performance measurements by doing the following.\r\n\r\n1. Pick an engine that you can run benchmarks on (such as Firefox) and a benchmark program that can run on this engine.\r\n2. Run the benchmark on the chosen engine, both with [Underscore at commit c9b4b63 (master)](https://github.com/jashkenas/underscore/blob/c9b4b63fd08847281260205b995ae644f6f2f4d2/underscore.js) and [Underscore at commit eaba5b5 (functional)](https://github.com/jashkenas/underscore/blob/eaba5b58fa8fd788a5be1cf3b66e81f8293f70f9/underscore.js), and compare the speed.\r\n3. If you find a *small* speed difference, please **repeat your measurements** as often as is required in order to determine whether the difference is **significant**.\r\n4. If you do find a *significant* difference, please **profile** the benchmark with **both versions of Underscore** to determine what change in Underscore is causing the difference.\r\n5. Report your findings by leaving a comment below. Please include details such as hardware specifications, exact versions of the operating system and engine used, number of repeated measurements, exact measured speed on each repetition, and exact numbers obtained from profiling.\r\n\r\n\r\n## Final words\r\n\r\nI make major contributions to Underscore, like the current one, because I believe it is an excellent library and because I want to help lift it to the next level. If you like what I'm doing, please consider supporting my open source work on [Patreon](https://www.patreon.com/juliangonggrijp). Shoutout to my existing backers, who encouraged me to do this work, and to @jashkenas, who created this awesome library.",
    "head_branch": "functional",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/36923986/badge)](https://coveralls.io/builds/36923986)\n\nCoverage increased (+0.04%) to 95.238% when pulling **eaba5b58fa8fd788a5be1cf3b66e81f8293f70f9 on jgonggrijp:functional** into **745e9b7314064e66a7257f9b361030e6055980b8 on jashkenas:master**.\n",
      "High-level review by @jashkenas, quoted from private email with his permission:\r\n\r\n> I gave your PR/plan a quick skim, and am 100% in agreement with your plan and proposal. I really love what you're trying to do here! I agree that large performance considerations need to trump pure elegance, for the sake of pragmatism.",
      "[First benchmark is in](https://github.com/offen/underscore-benchmark), thanks to awesome work by @m90!",
      "Update: I will be writing an additional real-world benchmark in week 46, which is November 13–17. I hope to finish and merge this branch soon afterwards."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04463a21fa1e1f1aab75",
    "number": 2907,
    "body": "",
    "head_branch": "remove_method",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/36856760/badge)](https://coveralls.io/builds/36856760)\n\nCoverage increased (+0.03%) to 95.223% when pulling **1f351876cfa9ff99f4a0da46ca1877dfd20269e7 on matinFT:remove_method** into **745e9b7314064e66a7257f9b361030e6055980b8 on jashkenas:master**.\n",
      "Follow-up on #2906."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04473a21fa1e1f1aab76",
    "number": 2906,
    "body": "",
    "head_branch": "remove_method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04483a21fa1e1f1aab77",
    "number": 2904,
    "body": "",
    "head_branch": "2850",
    "is_a_fork": true,
    "comments": [
      "@mohammadali-seifkashani Thank you for your continued efforts.\r\n\r\nI can tell that you meant to follow up on my comments in #2897, but you applied them to your `findKeys` implementation instead of your `transition` implementation. I asked you in #2898 to not mix these features. Since #2681 already has a good implementation of `findKeys`, I would strongly recommend that you focus all your effort on `transition`.\r\n\r\nYou can fix this as follows:\r\n\r\n1. `git checkout 2850`.\r\n2. `git reset --hard fc3d6a0`: this will remove the commits related to `findKeys` from your `2850` branch. Don't worry, the `findKeys` commits are still on your `2676` branch.\r\n3. At this point, make sure that `findKeys` is really gone. If it's still there, delete it manually.\r\n4. `npm run install`: this will install commit hooks that ensure that the `underscore.js` and the `underscore-esm.js` bundles stay in sync with the source code. I can tell from the current PR that you haven't done this yet.\r\n5. Process my comments from https://github.com/jashkenas/underscore/pull/2897#issuecomment-748299380 again, but now applying them to `transition`. Commit your changes.\r\n6. `npm run test`: if any test fails, fix your code and commit again.\r\n7. `git push --force`.\r\n\r\nAt this point, the current PR (#2904) should only contain your `transition`-related contributions. After this, I'll do a detailed code review over here. You don't need to open another PR. Thanks in advance!",
      "OH I made a mistake. More than <a> mistake. In this PR and #2898 mistakenly I pulled request for irrelevant issue. I'm sorry :(",
      "@mohammadali-seifkashani It's alright. Please do feel welcome to continue #2897."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04493a21fa1e1f1aab78",
    "number": 2902,
    "body": "Comments in response to last pull request implemented.",
    "head_branch": "2676",
    "is_a_fork": true,
    "comments": [
      "Closing in favor of #2897/#2904 and #2681."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e044a3a21fa1e1f1aab79",
    "number": 2900,
    "body": "",
    "head_branch": "toArraySupport",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/35861950/badge)](https://coveralls.io/builds/35861950)\n\nCoverage decreased (-0.4%) to 94.765% when pulling **1a3bda9b3d4b5a63f6c1ee82491a0cddb455acb6 on matinFT:toArraySupport** into **745e9b7314064e66a7257f9b361030e6055980b8 on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e044b3a21fa1e1f1aab7a",
    "number": 2899,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@anderlaw Thanks for your submission. Why did you close this?",
      "Ah I see now, because of #2896."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e044c3a21fa1e1f1aab7b",
    "number": 2898,
    "body": "",
    "head_branch": "2676",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/35848476/badge)](https://coveralls.io/builds/35848476)\n\nCoverage remained the same at 95.197% when pulling **c3967228dbedea322688e0f7ec7f4eb22083d69a on mohammadali-seifkashani:2676** into **c9b4b63fd08847281260205b995ae644f6f2f4d2 on jashkenas:master**.\n",
      "@mohammadali-seifkashani I appreciate your eagerness to contribute, but please finish #2897 first. Also, please keep unrelated features on separate [branches](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell).",
      "Also duplicate of #2681."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e044d3a21fa1e1f1aab7c",
    "number": 2897,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/35828107/badge)](https://coveralls.io/builds/35828107)\n\nCoverage remained the same at 95.197% when pulling **fc3d6a0f8faf979bd6903a8167c56d25cdf319fc on mohammadali-seifkashani:master** into **c9b4b63fd08847281260205b995ae644f6f2f4d2 on jashkenas:master**.\n",
      "Hey @mohammadali-seifkashani, thanks for this very interesting contribution! There will be some more work to do and I might decide to put this in Underscore-contrib instead, but that's fine, we can make this ride together.\r\n\r\nAs a first step, could you add a few more commits to do the following? Thanks in advance.\r\n\r\n- [ ] Rename the module to `modules/transition.js` (so without the leading `_` in the name).\r\n- [ ] Make the export `default`.\r\n- [ ] List your function with the others in `modules/index.js`. I think it belongs in the utility section.\r\n- [ ] Add tests for your function in `test/utility.js`.\r\n\r\nI'll do a more detailed code review after this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e044e3a21fa1e1f1aab7d",
    "number": 2896,
    "body": "As mentioned in the underscore document, _.max function should compare items by numbers only",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/35855472/badge)](https://coveralls.io/builds/35855472)\n\nCoverage remained the same at 95.197% when pulling **af2f9190b3a4c6e0ed3725285d3a37d4b1ff8101 on anderlaw:master** into **c9b4b63fd08847281260205b995ae644f6f2f4d2 on jashkenas:master**.\n",
      "Thanks for the response, I'd like to do that",
      "Congratulations with your first contribution to Underscore, @anderlaw!"
    ],
    "commit_messages": [
      "Merge pull request #2896 from anderlaw/master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e044f3a21fa1e1f1aab7e",
    "number": 2894,
    "body": "",
    "head_branch": "toArraySupport",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04503a21fa1e1f1aab7f",
    "number": 2892,
    "body": "Restore the optimization #1269",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/35516795/badge)](https://coveralls.io/builds/35516795)\n\nCoverage increased (+0.02%) to 95.197% when pulling **0b93f06476e06aeece8e26b043f67e9eb5a5efe7 on kritollm:master** into **d10beb98830381f68dc38d41d8aeb1f08906dba1 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2892 from kritollm/master\n\nReimplementing timer optimization  #1269"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04513a21fa1e1f1aab80",
    "number": 2891,
    "body": "As hash inherit Object.prototype, when we call \"contains\", property keys of Object.prototype will return true. This isn't our expectation. Using \"hash[key]===true\" can exclude these keys.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks for going through the trouble to fix this, @anfengchen. Why did you close the PR?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04523a21fa1e1f1aab81",
    "number": 2888,
    "body": "- Update from QUnit 2.6 to QUnit 2.10 and remove qunit-cli package.\r\n  This drastically reduces the number of (indirect) dev dependencies for this project. 🙂 \r\n\r\n- Use the built-in `qunit` command directly.\r\n  It supports the same glob argument as qunit-cli, although I've simplified t to pass the directory instead for simplicity.\r\n\r\n- Reference the qunit.js file from the node_modules directly in `index.html` so that the same version is used by both Nod and the browser test.\r\n\r\n- Remove reference to qunit-extras.js file. This file has not existed for a while. Karma has been tolerating its absence:\r\n  `WARN [watcher]: Pattern \"/home/travis/build/jashkenas/underscore/test/vendor/qunit-extras.js\" does not match any file.`",
    "head_branch": "update-qunit",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/34973625/badge)](https://coveralls.io/builds/34973625)\n\nCoverage remained the same at 95.175% when pulling **13f71bc9711b3617dd0fd5f1f085655df8505cf8 on Krinkle:update-qunit** into **ee99923b7882502a1ad56e3900c3bb267f3dcf76 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2888 from Krinkle/update-qunit\n\nTest: Switch to built-in QUnit CLI"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04533a21fa1e1f1aab82",
    "number": 2886,
    "body": "After completing #2884 and while working on #2878, I realized that I might have somewhat pessimized path evaluation by calling `_.isArray` more often through `_.toPath`. Coincidentally, I also noticed that the internal `tagTester` was needlessly recomputing the `[object Type]` tag on every invocation. Since the isType functions are used everywhere, I decided to offset the `_.toPath` pessimization with an optimization across the board.\r\n\r\nI then revisited the benchmarks discussed from https://github.com/jashkenas/underscore/pull/2840#discussion_r407696041 onwards, because I suspected the tradeoff for the optimization in `_.isEmpty` might have changed. Indeed, it had; `_.isEmpty({})` still took about three times as much time without the optimization than with it, but in Node.js, `_.isEmpty('')` took *five* times as much time *with* the optimization than without it. I was then able to establish a good compromise between the optimized and the unoptimized performance profiles, by making the optimization itself more efficient. This evaluates `obj.length` only once instead of twice, which keeps the intended effect of the optimization while also avoiding the performance penalty for strings in Node.js.\r\n\r\nThis PR is just to leave a trace. The weight does not change significantly and performance is likely to improve for applications that call isType functions inside hot loops. If the CI checks pass, I'll merge this without waiting for a review. Nevertheless, a review by a spontaneous volunteer is still welcome.",
    "head_branch": "stringtag-perf",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/34435668/badge)](https://coveralls.io/builds/34435668)\n\nCoverage increased (+0.02%) to 95.175% when pulling **3730dfc2f6ff5f83b99edd3ef2e603bfd12b45ba on jgonggrijp:stringtag-perf** into **1964cdb872e892f01464797f2df8038f912fd59f on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2886 from jgonggrijp/stringtag-perf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04543a21fa1e1f1aab83",
    "number": 2885,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/34339277/badge)](https://coveralls.io/builds/34339277)\n\nCoverage remained the same at 96.305% when pulling **571eb985efc7e252e73a313e7cf3373bddbe2ad2 on stephenas:master** into **d9741b32f29ddc24ac94f9ee8d073599948945e3 on jashkenas:master**.\n",
      "I don't see any value in this change. I'll close for now. If there's something valuable in this change that I'm missing please provide some description of the benefit and we can reconsider.",
      "Thanks for stepping in, @captbaritone. Nice surprise to hear from you!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04553a21fa1e1f1aab84",
    "number": 2884,
    "body": "The good:\r\n\r\n- Updated the selection of browser versions to include in Sauce Labs testing.\r\n- Made the `_.throttle` and `_.debounce` tests less likely to randomly fail.\r\n- Added fixes and workarounds for `_.isEqual`, `_.isDataView`, `_.isMap`, `_.isWeakMap` and `_.isSet` in older browsers that have partial support for these types.\r\n- Made tests more aware of browser support so that Firefox 11 doesn't attempt to run the tests that involve `DataView`.\r\n- Overall: Travis CI + Sauce Labs should run more reliable again, hence be more informative.\r\n\r\nThe bad:\r\n\r\n- Testing of IE 8, Safari 7 and Firefox 4 is no longer possible.\r\n- Three new internal modules just for workarounds.\r\n- The workaround for `_.isMap`, `_.isWeakMap` and `_.isSet` in IE 11 is quite large.\r\n- Minified+gzipped weight increases by 230 bytes.",
    "head_branch": "saucelabs-fix",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/34090777/badge)](https://coveralls.io/builds/34090777)\n\nCoverage decreased (-1.1%) to 95.16% when pulling **dce5d42f2e94838f8376490b4f3dcf134363946d on jgonggrijp:saucelabs-fix** into **d9741b32f29ddc24ac94f9ee8d073599948945e3 on jashkenas:master**.\n",
      "Coverage decreases because coveralls runs in an engine that doesn't need the workaround code.",
      "Successful build here: https://travis-ci.org/github/jashkenas/underscore/builds/734840508",
      "Sorry for the slowness!",
      "No problem, thanks for reviewing!"
    ],
    "commit_messages": [
      "Merge pull request #2884 from jgonggrijp/saucelabs-fix\n\nCloses #2879."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04563a21fa1e1f1aab85",
    "number": 2881,
    "body": "use Buffer.from if available(usually in node.js environments) in _.isEqual for faster checking in case of objects which can be cast to buffer",
    "head_branch": "isEqualOptimisation",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/33734540/badge)](https://coveralls.io/builds/33734540)\n\nCoverage decreased (-0.3%) to 95.991% when pulling **de96ce1885bd0dd04779d3f4fc6d3ff38adece55 on sktguha:isEqualOptimisation** into **d9741b32f29ddc24ac94f9ee8d073599948945e3 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/33855511/badge)](https://coveralls.io/builds/33855511)\n\nCoverage decreased (-0.2%) to 96.102% when pulling **48d5730090fecbf1a81dd6cafd4699ae4e093714 on sktguha:isEqualOptimisation** into **d9741b32f29ddc24ac94f9ee8d073599948945e3 on jashkenas:master**.\n",
      "Hi @jgonggrijp Julian, hope you are doing well. So I made a draft PR to use native Buffer.from in isEqual function for buffers and related objects if available(usually in node.js environments) as per discussion [here](https://github.com/jashkenas/underscore/pull/2876#issuecomment-697023824). \r\n<br>so you can run online the test here for [new](https://repl.it/@SaikatGuha/isEqualNewTest) and [existing](https://repl.it/@SaikatGuha/isEqualExistingTest) versions(have extracted the code as independent js files, you can check the code in the repo I have linked in next few lines) . <br>\r\nOr else I have setup a handy [repository for running on local machine](https://github.com/sktguha/underscore-isequal-tests)  (don't worry about the sudo permission when doing npm install, its just for installing nodejs versions 10 and 12) , so there is a definite 1.5 ms or more difference. So new version is 1.5 ms or more faster than older version, In nodejs version 10 and 12 the new version may be even more faster, by 5ms or more. \r\n<br>Also when running newly the difference in times may be very high, like 20 ms or more. But that I have mostly observed on the online repl I have linked, not sure if I have observed on my local machine. If you are running the test on your local, do note the time taken for first time ( It may be possible that subsequent runs are optimised due to some caching, maybe even at the cpu level, even when we exit from node.js )<br>\r\nAlso the npm install resulted in change in version of underscore itself in package-lock.json . I am not sure if that should be committed , so have skipped it for now",
      "Thank you Saikat, I'm doing well and I hope you are doing well, too.\r\n\r\nYour code looks sensible and I like the care you've put into benchmarking this. We need to push the CPU a bit harder, though.\r\n\r\nImagine building an application that makes a single comparison between two typed arrays. That application might save 20 ms. Nobody is going to care about that.\r\n\r\nIf somebody wants to save time (and energy) on comparing typed arrays, it's probably because she is comparing thousands or even millions of pairs of typed arrays. She's hoping to shave off at least a few seconds in total, or to improve her throughput by thousands of comparisons per second.\r\n\r\nJavaScript engines behave differently when you repeat code very often. The more often a piece of code repeats, the harder they try to make it run as fast as possible. Those 20 ms you need for a single comparison, might be sufficient for 100 comparisons or more once JSCore, V8 or SpiderMonkey has fully optimized the code. The performance difference between the existing and the new implementation is likely to change under those circumstances, too.\r\n\r\nSo please extend your benchmarks to make a minimum number of repetitions (I suggest at least 10k) and also to continue repeating until at least a whole second has passed. This will make them better represent a situation where performance actually matters.\r\n\r\nPlease also make sure that you vary the buffers that are compared between repetitions. If program flow is the same every time, an optimizing engine might notice that at some point and start cheating.\r\n\r\nAn example of a microbenchmark that follows these recommendations can be found [over here](https://gist.github.com/jgonggrijp/06644e2667466beaa32324b7b066e6a2). Some context for that benchmark [over here](https://github.com/jashkenas/underscore/pull/2840#discussion_r407818126) (you might need to click \"show resolved\" in order to see my comment about the benchmark).\r\n\r\nWhen you notice a significant difference between the first run and subsequent runs on your local machine, it is likely that disk latency is playing a role. In that case, you should actually ignore the first run, because a significant portion of its CPU time is spent on waiting for the file system.",
      "Thanks Julian @jgonggrijp for your detailed comments and the link to the benchmark. Let me check that out and come back to you maybe sometime tomorrow.<br>\r\nAlso btw are there any usage statistics for nodejs versions , like 20% use nodejs 10, 34% use nodejs 12 etc , because I see that in nodejs 10, the new version is significantly faster than existing one, like **2 secs vs 100ms** or less for existing and new, respectively in the new randomized test I am working on currently for 1 million items, as you have mentioned in your comment, for older nodejs versions the difference could be same or higher. Have to check. I was looking at https://nodejs.org/en/user-survey-report/ but can't find any data on different versions. maybe npm has it ?\r\n\r\nEdit: I found [https://nodesource.com/node-by-numbers](https://nodesource.com/node-by-numbers), any more ?",
      "I don't know about usage statistics between Node versions, but I don't think it is very important, either. I'd like to suggest to focus on recent versus old instead, because that is how usage tends to develop; if the performance difference between existing and new implementation declines towards newer Node versions, that might suggest that the optimization has little added value in the long run.\r\n\r\nI'm getting ahead of the facts, though. Let's just look at the numbers first.",
      "Hi @jgonggrijp Julian , I probably won't get time today to work on this. Let me come back to you maybe tomorrow. ",
      "@sktguha Best wishes for 2021. Any updates on this PR?",
      "Oh hi @jgonggrijp . Happy new year to you too 🙂\r\nReally sorry , got busy in other things.\r\nI think I have linked the node.js scripts to compare the perf improvements.\r\nI might not have time this week. Let me try next week.\r\nIf possible, can you put something like up for grabs etc ? \r\nsomeone could possible take a look in meantime or even take over this if they want to. ",
      "Alright, so if I understand correctly, the link you put up is https://github.com/sktguha/underscore-isequal-tests and my [comments](https://github.com/jashkenas/underscore/pull/2881#issuecomment-699217358) on that benchmark still need to be addressed, which you'd happily defer to somebody else.\r\n\r\nIf at second thought, you'd rather drop this PR, that's fine by me; no hard feelings.",
      "@jgonggrijp  oh no no , I do intend to come back to this 🙂\r\nContributing to a lib like underscore is really cool\r\n\r\nI mean otherwise someone can take over. feel free to! . Why would I want to drop it 🙂 ?\r\nI hope you are not on some kinda deadline ? ",
      "you could tag people here interested to tak over I guess",
      "@sktguha No I'm not on a deadline (not for this particular PR at least)! Please take your time. I was asking rather directly whether you still want to continue with this, just to be very clear. If your answer is \"yes but probably later\", that's totally fine by me.",
      "@jgonggrijp ok understood, \"yes but probably later\" yup that's what I would say. To add it, happy to hand it over if anyone is interested 🙂",
      "@jgonggrijp btw just curious, do you work in USA timezone ? ",
      "oh ok, you seem to be based in Netherlands, well better timezone overlap with India 🙂",
      "Yes, Netherlands. I'm a night owl though, so that might decrease the overlap again. However, if you'd like to chat about something, you can find me on Gitter.",
      "oh that's awesome. can you post your gitter username maybe ? I have made an account there with this github login only.",
      "I found you and I left you a message on Gitter."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04573a21fa1e1f1aab86",
    "number": 2880,
    "body": "",
    "head_branch": "soucelabs-fix",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/33725207/badge)](https://coveralls.io/builds/33725207)\n\nCoverage remained the same at 96.305% when pulling **f23659434fcf02e81e8da6b378f4f000c867fc60 on jgonggrijp:soucelabs-fix** into **d9741b32f29ddc24ac94f9ee8d073599948945e3 on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04583a21fa1e1f1aab87",
    "number": 2878,
    "body": "The main reason for issuing a release now is the bugfix in #2876, but I'm bumping the minor version number rather than the patch number, because the new feature from #2877 already slipped into `master` before that. I'm not planning to draw special attention to the latter at this time, because the corresponding update to Contrib hasn't happened yet.\r\n\r\n@jashkenas I have already updated all the generated files. Only the following steps remain for you, once you've approved this PR (*edit: the only interesting part of the diff is the [index.html](https://github.com/jashkenas/underscore/pull/2878/files#diff-0eb547304658805aad788d320f10bf1f292797b5e6d745a3bf617584da017051), which contains the new change log entry and a new section about engine compatibility*):\r\n\r\n- [ ] Replace the `TODO` inline comment on lines 2656-2658 of the `index.html` by the date of release.\r\n- [ ] Merge `prepare-1.12.0` into `master`.\r\n- [ ] `npm publish`: this will re-generate the bundles and annotated sources again, but should leave your working tree in a clean state. You'll get that warning again about mixing named and default exports, possibly twice, which you can still ignore. It will disappear in version 2.0.\r\n- [ ] Create and push the 1.12.0 tag.\r\n- [ ] Merge `master` into `gh-pages`.\r\n\r\n@sktguha This update will not include your planned optimization of `_.isEqual` yet, but rest assured that your contribution is still welcome.\r\n\r\n@joshuacc FYI: `_.toPath` will be in this release.",
    "head_branch": "prepare-1.12.0",
    "is_a_fork": false,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/33723613/badge)](https://coveralls.io/builds/33723613)\n\nCoverage remained the same at 96.305% when pulling **b47fc2f34c17c2eb243f18174588f9b6ba994f6e on prepare-1.12.0** into **d9741b32f29ddc24ac94f9ee8d073599948945e3 on master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/34435889/badge)](https://coveralls.io/builds/34435889)\n\nCoverage remained the same at 95.175% when pulling **8274127d0b5871ff91eaeece2a95ddda209b2622 on prepare-1.12.0** into **ee99923b7882502a1ad56e3900c3bb267f3dcf76 on master**.\n",
      "Regarding the failing build: that's SauceLabs failing to spin up outdated browsers again. I'll create an issue for that. The tests all pass, as you can see by scrolling upwards from [this line](https://travis-ci.org/github/jashkenas/underscore/jobs/730261946#L804).",
      "Hold on, I started fiddling with the Sauce labs tests and then found out that there are still some minor compatibility issues with `_.isEqual`. I'll fix those first and then re-request a review.",
      "Alright, fixed some more bugs and compatibility issues, kicked up some performance and finally got the Sauce tests to run smoothly most of the time. Really ready for review now.\r\n\r\n(Travis ran twice because this is both a PR and a branch on the main repo. The second build failed because Coveralls can't handle checking the same commit twice. I'll avoid this situation in the future by only issueing PRs from my fork.)"
    ],
    "commit_messages": [
      "Update the bundle weights in the downloads section again"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04593a21fa1e1f1aab88",
    "number": 2877,
    "body": "This is the first follow-up on https://github.com/documentcloud/underscore-contrib/pull/231. The next (and final) follow-up will be a PR to Contrib.\r\n\r\nI should emphasize that *the behavior of paths in Underscore stays the same*. That is, full-blown array paths (`['a', 0, 'b']`) remain supported while shorthand string paths (`'a.0.b'`) remain **un**supported.\r\n\r\nThe purpose of this PR is to add a customization point, `_.toPath`, which users can override, similar to `_.iteratee`. The most obvious application of such an override would be to enable string paths, though in principle, users can do something completely different. `_.toPath` is used internally throughout Underscore.\r\n\r\nThe follow-up PR to Contrib will add a function to its public interface, which users can optionally use to override `_.toPath`. Using that optional override will cause all functions in Underscore *and* Contrib to support string paths in a uniform way. As long as users *don't* do this, all functions in Underscore *and* Contrib will only support array paths. This will be a slightly breaking change for Contrib, but it will be a major step up in consistency between the libraries as well as within Contrib. The future Fusion library will use this mechanism, too, in order to support legacy code that depends on Lodash. Assuming the PR gets approved, of course.\r\n\r\nThis PR also adds one other function, `_.get`, which could be regarded a dual to `_.has` as well as a simpler counterpart to `_.result` that doesn't invoke methods. This function makes it easier to inherit Underscore's deep property extraction logic in Contrib and Fusion.\r\n\r\nSome more functional relations:\r\n\r\n```js\r\n_.get = _.compose(deepGet, _.toPath); // if we ignore _.get's optional third argument\r\n_.propertyOf(obj) = _.partial(_.get, obj);\r\n_.property(path) = _.partial(_.get, _, path);\r\n```\r\n\r\n@jashkenas Please let me know if anything is unclear.\r\n\r\n@joshuacc FYI.",
    "head_branch": "path-customization",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/33609895/badge)](https://coveralls.io/builds/33609895)\n\nCoverage increased (+0.02%) to 96.296% when pulling **f03f3ac3923dc26c41e1a8f0a24eef4819dbb11d on jgonggrijp:path-customization** into **7ee13c8a470e1a1c6bd6d5f3fee29e92d40b6c17 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/33609956/badge)](https://coveralls.io/builds/33609956)\n\nCoverage increased (+0.02%) to 96.296% when pulling **982a0ec9b08a020280c4c8181f29dfcc10bac251 on jgonggrijp:path-customization** into **7ee13c8a470e1a1c6bd6d5f3fee29e92d40b6c17 on jashkenas:master**.\n",
      "Thanks for the quick review and approval, @jashkenas!"
    ],
    "commit_messages": [
      "Merge pull request #2877 from jgonggrijp/path-customization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e045a3a21fa1e1f1aab89",
    "number": 2876,
    "body": "- Fixes #2875 by taking the `.byteOffset` into account when comparing two typed arrays.\r\n- Factors out the internal `toDataView` function as the single source of truth on how to correctly cast (or shallow copy) buffer-like objects to `DataView`.\r\n- Adds an optimization to avoid byte-wise comparisons between `DataView`s that have identical buffer, offset and length.\r\n\r\n@carpben @mafiosso @sktguha @yashshah1 I would welcome a review by one of you.\r\n\r\n(@jashkenas you are of course also welcome to review. I'm however addressing other reviewers because I know your time is scarce and because the change doesn't seem dramatic enough to require your attention.)",
    "head_branch": "fix-2875",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/33602006/badge)](https://coveralls.io/builds/33602006)\n\nCoverage increased (+0.008%) to 96.288% when pulling **00d64f42cb2d4745211a657629a4406bd827f6ca on jgonggrijp:fix-2875** into **7ee13c8a470e1a1c6bd6d5f3fee29e92d40b6c17 on jashkenas:master**.\n",
      "Thanks for the mention @jgonggrijp 😊😊. Will check in the morning",
      "@jgonggrijp two comments\r\n1) I could be wrong, but it seems Buffer exposes a .equals method\r\nso the issue given in #2875 could simply be fixed by using the .equals method given by default( also from stackoverflow, it seems that it being a native method could be faster , here is the link ( https://stackoverflow.com/questions/21553528/how-to-test-for-equality-in-arraybuffer-dataview-and-typedarray#answer-52181275:~:text=Within%20Node.JS%20you%20may%20get%20more,have%20native%20code%3A%20Buffer.from(buf1%2C%200).equals(Buffer.from(buf2%2C%200)) )\r\nHowever since Buffer is only there in NodeJS environment, so we have to so something to detect if we are in a Nodejs environment and/or the .equals method is available or not\r\ni.e \r\n\r\n```\r\nconst a = [Buffer.from([1, 2, 3]), Buffer.from([1, 2, 3])];\r\nconst b = [Buffer.from([4, 5, 6]), Buffer.from([4, 5, 7])];\r\nconst c = [Buffer.from([1, 2, 3]), Buffer.from([1, 2, 3])];\r\n\r\nconst isEqual = (a,b) => {\r\n  if(a.length !== b.length) return false;\r\n  return a.every((aElem,i)=> aElem.equals(b[i]));\r\n}\r\nconsole.log(isEqual(a,b)); //return false -> Correct\r\nconsole.log(isEqual(a,c)); //returns true -> Correct\r\n\r\n//of course this assumes both arrays have only Buffer, but you get the idea\r\n```\r\n\r\nThis approach also fixes your regression test that you have added in this PR, \r\n[https://github.com/jashkenas/underscore/pull/2876/commits/20a39e75c755d3d17142f7bea0b931edec0816d4](https://github.com/jashkenas/underscore/pull/2876/commits/20a39e75c755d3d17142f7bea0b931edec0816d4)\r\n\r\n```\r\nvar shared = new Uint8Array([1, 2, 3, 4]);\r\nvar view1 = new Uint8Array(shared.buffer, 0, 2);\r\nvar view2 = new Uint8Array(shared.buffer, 2, 2);\r\n\r\nconsole.log('regression test result: ', Buffer.from(view1).equals(Buffer.from(view2))) \r\n// returns false, which is the correct result according to your test\r\n\r\n```\r\n\r\n2) Also I found an interesting comment on stackoverflow regd performance of such tests\r\n\"You can also further optimise the test by comparing an aligned prefix (e.g., given 131 bytes, comparing the first 131 bytes as longer words then comparing the final three bytes one-byte at a time).\"\r\nHere is the link:  https://stackoverflow.com/questions/21553528/how-to-test-for-equality-in-arraybuffer-dataview-and-typedarray#comments-52181275:~:text=You%20can%20also%20further%20optimise%20the,three%20bytes%20one%2Dbyte%20at%20a%20time).\r\n\r\nSo if it requires any code changes, please let me know . As it would be Really Cool 😎😎😎 for me to push code to underscore itself. ",
      "Thanks for the very interesting feedback @sktguha!\r\n\r\nYou are more than welcome to contribute code. If you agree that my code could be faster, but is still correct, I suggest that we merge this first and that you then submit another PR with optimizations. Would that order work for you?",
      "EDIT: But ok if its an important fix we can go ahead and merge. ya later I can make another PR for optimisation.\r\nlooks good to me otherwise (LGTM)\r\n\r\nSure Julian @jgonggrijp , that does sound good\r\nBut I am wondering is that if we have the .equals readymade method available, do we really need to convert to ArrayView as it is being done currently\r\nOne case where we might still need the conversion is that the .equals method is not supported but the ArrayView support is there. Not sure if that will ever be the case as I think it's a recent feature and it's nodejs , not browser environment, so there kind of things maybe are not present.\r\n\r\nAlso regards the performance comparison between . equals method and conversion to ArrayView , let me make a jsperf. But not sure if jsperf and other tools support nodejs. Otherwise let me test on local machine.",
      "@jgonggrijp But ok if its an important fix we can go ahead and merge. ya later I can make another PR for optimisation. \r\nlooks good to me otherwise (LGTM)",
      "Performance testing is definitely a good idea.\r\n\r\nI'll merge this now so you can use the `master` branch as your base.",
      "so can we discuss about future improvements here or I should create a new issue for the discussion ? ",
      "Here is fine, or you can already create a draft PR for your submission.",
      "sure. let me think of the things to do in the new PR ,and come back"
    ],
    "commit_messages": [
      "Merge branch 'fix-2875' (close PR #2876)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e045b3a21fa1e1f1aab8a",
    "number": 2872,
    "body": "If everything in here looks good, I think we would be able to tag this as 1.11.0. Take a careful look...",
    "head_branch": "prepare-1.11.0",
    "is_a_fork": false,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/33081727/badge)](https://coveralls.io/builds/33081727)\n\nCoverage remained the same at 96.28% when pulling **24c7f383f81786203f6e8a7d7d0c47a468f7ee16 on prepare-1.11.0** into **ce304f0bdcc0e8b74a602256e3158249f6538d2a on master**.\n",
      "> If everything in here looks good, I think we would be able to tag this as 1.11.0. Take a careful look...\r\n\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2872 from jashkenas/prepare-1.11.0\n\nPrepare 1.11.0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e045c3a21fa1e1f1aab8b",
    "number": 2870,
    "body": "Before I submit this for review, I want to insert a link to the article in two places. I'm holding off on this until all reviews of the article are in.\r\n\r\nThis is a much larger update than I realized. I thought it was mostly the modularization, and it is, but all the other enhancements and fixes still add up to a very substantial update.",
    "head_branch": "prepare-1.11",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/32806247/badge)](https://coveralls.io/builds/32806247)\n\nCoverage remained the same at 96.28% when pulling **92f0eed348e9bf1432ffe2b68000b532c2b5339a on jgonggrijp:prepare-1.11** into **65b2b52a07fa4aa667623d5fb58be8dbe1db95f8 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/32480459/badge)](https://coveralls.io/builds/32480459)\n\nCoverage remained the same at 96.28% when pulling **bcff5a466117cd99b28d9d4387d7d7f2cf8922ef on jgonggrijp:prepare-1.11** into **65b2b52a07fa4aa667623d5fb58be8dbe1db95f8 on jashkenas:master**.\n",
      "@jashkenas Ready for review!\r\n\r\nIn case you agree 100% with the changes: please don't release just yet, because I'm still waiting for a final bit of feedback on the article."
    ],
    "commit_messages": [
      "Merge pull request #2870 from jgonggrijp/prepare-1.11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e045d3a21fa1e1f1aab8c",
    "number": 2869,
    "body": "This implements #2867. @jashkenas already approved. Creating a PR in order to leave a trace and to have the CI check. Reviews still welcome post-merge.",
    "head_branch": "unzip-transpose",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/32354622/badge)](https://coveralls.io/builds/32354622)\n\nCoverage remained the same at 96.263% when pulling **0271945850d6ab3d93b22b932947ea6fa01c9f0b on jgonggrijp:unzip-transpose** into **6ee1d2e30deb786edf7a6d1b7028b1fa6fc215a6 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/32354622/badge)](https://coveralls.io/builds/32354622)\n\nCoverage remained the same at 96.263% when pulling **0271945850d6ab3d93b22b932947ea6fa01c9f0b on jgonggrijp:unzip-transpose** into **6ee1d2e30deb786edf7a6d1b7028b1fa6fc215a6 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2869 from jgonggrijp/unzip-transpose"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e045e3a21fa1e1f1aab8d",
    "number": 2868,
    "body": "This is a continuation of #2460 by @paulfalgout. The former boolean `shallow` parameter of both the internal and the external `flatten` is replaced by a `depth` parameter which can be either boolean or numeric. Boolean values still have the same meaning. Numeric `1` has the same meaning as `true` while `0` or less results in a shallow copy without any flattening. The default is still infinite depth.\r\n\r\n@jashkenas The original PR was approved by @akre54 and @michaelficarra in 2016. If this is sufficiently reassuring for you, you can stop reading here.\r\n\r\n@paulfalgout I moved your checks against nonnumeric and nonpositive `depth` values back from the public to the internal `flatten`. At the time, you were concerned that this would be inconsistent with `strict === true`, but there is actually no conflict. When `depth === 1`, every *nested* element of every array is copied whether the nested element is an array or not, even when `strict === true`. Extrapolating this to `depth === 0`, \"every array\" is just the top-level array, so every element of it should be copied, regardless of whether it is an array and regardless of the value of `strict`.\r\n\r\nMerging this should automatically also merge #2460.",
    "head_branch": "feature/flatten-depth",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/32346456/badge)](https://coveralls.io/builds/32346456)\n\nCoverage increased (+0.02%) to 96.28% when pulling **7d37875983a57950c00626f962fef9d2cf735663 on jgonggrijp:feature/flatten-depth** into **6ee1d2e30deb786edf7a6d1b7028b1fa6fc215a6 on jashkenas:master**.\n",
      "Thanks for the review @jashkenas!"
    ],
    "commit_messages": [
      "Merge branch 'feature/flatten-depth' (pull request #2868)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e045f3a21fa1e1f1aab8e",
    "number": 2866,
    "body": "A coworker and I were stumped on why our template settings weren't working the the other day. This adds a line to the docs about how the template settings regexes are prioritized. For example, the default interpolation regex `<%= etc %>` matches a subset of the default evaluation regex `<% etc %>`, but if you switch those two regexes, things break because then the interpolation regex is prioritized and the evaluation regex never matches.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/32324352/badge)](https://coveralls.io/builds/32324352)\n\nCoverage remained the same at 96.263% when pulling **d541039a3ce94974520480853f40cc093aca2be0 on xdhmoore:patch-2** into **977d4be74fe76227f5e9f3af9d640b46ab5b50dd on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/32329332/badge)](https://coveralls.io/builds/32329332)\n\nCoverage remained the same at 96.263% when pulling **059612001d6d0b865aca7a0e1263d17ae8e85062 on xdhmoore:patch-2** into **977d4be74fe76227f5e9f3af9d640b46ab5b50dd on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2866 from xdhmoore/patch-2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04603a21fa1e1f1aab8f",
    "number": 2864,
    "body": "Thanks to @reubenrybnik for bringing this to my attention in\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/pull/46189#discussion_r458423129.\r\n\r\nI'm just removing the word \"exclusive\" after \"step\".\r\n\r\nI don't really think this needs a review, but I'll leave this open for a few days just in case.",
    "head_branch": "range-doc",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/32237391/badge)](https://coveralls.io/builds/32237391)\n\nCoverage remained the same at 96.263% when pulling **3c9285679fcf021ec663b1f02b6ff1ca2dbac188 on jgonggrijp:range-doc** into **977d4be74fe76227f5e9f3af9d640b46ab5b50dd on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2864 from jgonggrijp/range-doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04613a21fa1e1f1aab90",
    "number": 2862,
    "body": "This issue aims to bring the underscore codebase and documentation in line with the [Code of Conduct. ](https://github.com/jashkenas/underscore/blob/master/CODE_OF_CONDUCT.md)\r\n\r\nShort: Provide terminology to package users that does not perpetuate white supremacy and racism against Black people\r\n\r\nLong: There has been a much-needed shift in the tech industry to transition our naming conventions away from problematic racist terminology. For example, [Github is replacing the convention of having a master branch to remove any master/slave reference. ](https://www.cnet.com/news/microsofts-github-is-removing-coding-terms-like-master-and-slave/)",
    "head_branch": "remove-blacklist-terminology",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/31919607/badge)](https://coveralls.io/builds/31919607)\n\nCoverage remained the same at 96.263% when pulling **e3374fe8f9d274df2f0e8614b81ba4d8119b7695 on UseWIthCaution:remove-blacklist-terminology** into **e6af0f9ec7253392047d36a432c41288ed67f7ee on jashkenas:master**.\n",
      "Works for me. Thanks for sending the patch!"
    ],
    "commit_messages": [
      "Merge pull request #2862 from UseWIthCaution/remove-blacklist-terminology\n\nfind and replace usage of blacklist and whitelist with disallow and allow"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04623a21fa1e1f1aab91",
    "number": 2860,
    "body": "While writing an article on how to use the upcoming modular Underscore release, I realized that the division between the `underscore.js` and `underscore-oop.js` modules that I made in #2849 was a bit unnatural. As it was, the `underscore.js` module exported a `_` function that could wrap a value, but the resulting wrapper had no unwrapping methods. To have the unwrapping methods, you needed to import `underscore-oop.js` for its side effects, but that also added all the array proxy methods. People who cherry-pick from the library may sometimes want to have wrapping and unwrapping but no array methods.\r\n\r\nI reorganized this slightly so that `underscore.js` already packs the unwrapping methods. The remaining `underscore-oop.js` has only one job, i.e., to add the array methods, so I renamed it accordingly. The impact on the monolithic build is minimal because the unwrapping methods have no dependencies of their own.\r\n\r\nI don't expect anyone to object to this change so I'm not going to ask for a review, but I'm creating this PR anyway in order to leave a trace. I will also hold off from merging until the Travis build has completed, to make sure that nothing breaks.",
    "head_branch": "underscore-unwrap",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/31890428/badge)](https://coveralls.io/builds/31890428)\n\nCoverage remained the same at 96.263% when pulling **a2c9f6db94e4a0c33aa46423a756998bd67d8de6 on jgonggrijp:underscore-unwrap** into **faac06d44aed1fbd6d964065cf92f390c920d2dd on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2860 from jgonggrijp/underscore-unwrap"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04633a21fa1e1f1aab92",
    "number": 2859,
    "body": "",
    "head_branch": "fix/isarraylike",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/31765508/badge)](https://coveralls.io/builds/31765508)\n\nCoverage remained the same at 96.263% when pulling **53c3809dcfadc27091c20a0ea634f34254c3506b on jqoker:fix/isarraylike** into **faac06d44aed1fbd6d964065cf92f390c920d2dd on jashkenas:master**.\n",
      "Duplicate of #2830. See discussion there."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04643a21fa1e1f1aab93",
    "number": 2858,
    "body": "This PR tries to solve https://github.com/jashkenas/underscore/issues/2762 and updates the definition/documentation of the debounce function. \r\n\r\nI'm not a native English speaker, so the wording might need to be adjusted. However, I think that talking in terms of sequence can make things easier to understand. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks @jgonggrijp ! \r\n\r\nI've noticed that #2849 was merged, so I'd like to continue with option 2. However, I don't understand why `npm install` is required in this context - I don't need to run any code, just update the comment. Am I missing anything? ",
      "Welcome!\r\n\r\nThe devDependencies include `husky`, which will run pre- and post-commit hooks to ensure that monolithic builds and corresponding sourcemaps are created which accurately reflect the content of the modules. I should probably patch the `CONTRIBUTING` to reflect this.",
      "@jgonggrijp, By mistake the two commits above were made with my company's user. Lol. Are we all set? ",
      "As far as I'm concerned, we're all set. Are you sure you're comfortable with your company account taking the credit, though? I wouldn't object to a force-push so you can rectify the commit attribution. See https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit if you don't know how to change the attribution.",
      "There are 3 commits on my private user. So if the difference is that there will be 3 commits on my user instead of 5 I really don't mind. \r\nI tried `git rebase -i` as suggested in the  SOf you sent, but it didn't work well on my device (windows, created many conflicts and didn't work as expected). I don't mind resetting current branch to the previous commit, and redoing those 2 commits. ",
      "So which route do you prefer? Merge as-is, or redoing those last two commits?",
      "I prefer we merge as is. ",
      "Thanks for your contribution @carpben!"
    ],
    "commit_messages": [
      "Merge pull request #2858 from carpben/master"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04653a21fa1e1f1aab94",
    "number": 2857,
    "body": "This is a side branch with several experimental commits aiming to fix #2847. I succeeded in the end, so we'll have working CI checks again after I merge this.\r\n\r\nThe Travis build matrix now covers Node.js versions 8, 10 and 14. I'm skipping version 12 in order to reduce our carbon footprint, on the assumption that if 10 and 14 both work, 12 will probably work as well. If this turns out to be problematic, people are welcome to submit an issue or pull request.\r\n\r\nThe Sauce Labs integration doesn't work yet due to missing configuration. I consider this a separate issue.",
    "head_branch": "fix-travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2857 from jgonggrijp/fix-travis"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04653a21fa1e1f1aab95",
    "number": 2856,
    "body": "When I pass the current version through js-yaml, it tells me that the whitespace there is unexpected.\r\n\r\nCould this be why the [CI no longer works](https://github.com/jashkenas/underscore/issues/2847)?\r\n\r\nThen again, this might just need a migration to travis-ci.com, etc",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks for the fix, @dominykas!\r\n\r\nAlso thanks for the tip of migrating to travis-ci.com, I didn't think of that. From what I can find about it, however, it doesn't seem to be necessary; travis-ci.org is also still operational.\r\n\r\nAfter some more research, I think your patch might very well be sufficient. The last commit for which Travis still worked was 1dfec11447b56aa0 (31. May 2018). The commit directly after that, 2e57316, introduced the misindentation by incorrectly uncommenting the lines in question."
    ],
    "commit_messages": [
      "Merge pull request #2856 from dominykas/patch-1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04663a21fa1e1f1aab96",
    "number": 2855,
    "body": "This addresses #2833 (which the author already closed upon seeing my proposed changes).\r\n\r\nI think no review is required anymore, but I'm still creating a PR for visibility.\r\n\r\n@MaxBarraclough FYI.",
    "head_branch": "before-after-disambiguation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2855 from jgonggrijp/before-after-disambiguation\n\nExplicate number of invocations in _.after and _.before docs (close #2833)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04673a21fa1e1f1aab97",
    "number": 2849,
    "body": "After #2826, I'm sure some people have been waiting for this. Here it is, finally!\r\n\r\n## Enhancements\r\n\r\n- `modules/index.js` is split into lots of tiny modules in order to promote code reuse and to facilitate people who want to create their own bundles with an even smaller Underscore footprint.\r\n    - Constants are named exports from the internal `modules/_setup.js`.\r\n    - Each function has its own module of which it is the default export. Internal functions have a module name starting with `_`, e.g., `modules/_baseCreate.js`.\r\n    - `modules/index.js` still exists, it is now a module that pulls in all the exports from the individual public function modules and exposes them as named exports with aliases. Its interface has not changed compared to the semimonolithic version.\r\n- Removed several circular import chains by changing the internal `collectNonEnumProps` so that it doesn't depend on `_.contains` anymore. See also compatibility notes below.\r\n- Added a monolithic ESM build for people who want to use ES import syntax in the browser. It is named `underscore-esm.js` for the time being; see compatibility notes below.\r\n- Added modular AMD and CommonJS builds so that people using (or transpiling to) Require.js, Browserify etcetera can benefit from fast development builds and treeshaking at the same time.\r\n- In addition to the \"single read\" version of the annotated source, people now have the option to read the annotated source in a modular version as well, with hyperlinked module references.\r\n- Like the monolithic UMD and ESM bundles, the \"single read\" annotated source is now in strict order of dependency, which makes it potentially easier to digest.\r\n- I have made a full polishing pass over all the comments.\r\n\r\n@jashkenas: both versions of the annotated source are slightly different from what I have shown you before, so you may want to re-read them.\r\n\r\n## Tradeoffs\r\n\r\n- The source in the monolithic bundles and the \"single read\" annotated source is not ordered by category (collection/array/function/object/utility) anymore.\r\n- A potential pitfall is introduced when writing comments at module scope: one cannot safely assume that the reading context before the comment and after the function following it will be the same in a monolithic build, so each comment should be written such that it makes sense when viewing only it and the function that immediately follows it.\r\n- Another slight pitfall is that comments may disappear in a monolithic build if they are placed before an elided `import` statement. This is not a problem as long as that comment only makes sense when you can also see the `import` statement itself, but it does mean that developers should avoid writing important comments about actual logic before an `import` statement.\r\n- The minified and gzipped UMD bundle weight increased by another 110 bytes.\r\n\r\n## Compatibility notes\r\n\r\nI have opted out of all breaking changes that may seem natural to combine with modularization. I did this because I want there to be a backwards-compatible modular 1.x release before we move on to a breaking Underscore 2.0 release. Having 1.x and 2.x branches that are structured in the same way makes it much easier to share bugfixes between them, so that we can continue to support the 1.x series for a while. It also simplifies development work on other libraries that may want to have separate support branches for Underscore 1.x and Underscore 2.x, such as (a revived) Underscore-Contrib.\r\n\r\nSo I have **not** made the following changes and I propose to make them in Underscore 2.0 instead:\r\n\r\n- Make the monolithic ESM bundle the default, i.e., rename the current `underscore.js` to `underscore-umd.js` and the new `underscore-esm.js` to `underscore.js`.\r\n- Remove `collectNonEnumProps` entirely to shake weight again (see also #2325).\r\n- Remove the default export from `modules/index.js`. There are three stages of “completeness” of the `_` object and users should make a conscious choice as to which one they want to import, instead of ambiguously importing the middle one from the index (which may not be what they expect):\r\n    - the bare version from `modules/underscore.js`;\r\n    - the one with unwrapping and array methods from `modules/underscore-oop.js`;\r\n    - the one with unwrapping and array methods and all Underscore functions mixed in from the package entry point (or equivalently, `modules/index-default.js`).\r\n\r\n## Open questions\r\n\r\n- Currently, the modular AMD and CommonJS builds are in the .gitignore, so they are never committed (but they are uploaded in the NPM release). They are regenerated every time you invoke `npm run bundle`, including on every commit. This adds a delay of about a second. We may want to take a slightly more sophisticated approach to this. One of the options is to put them in a separate Rollup config so that we can separate building the monolithic bundles from building the modular AMD and CJS versions. I'm open to suggestions.\r\n- The scripts in the `package.json` are starting to get a bit unwieldly. It may be worth investigating a dedicated automation tool such as Gulp, although I think this would belong in a new pull request.\r\n- I have wrapped the `ctor` in `modules/create.js` in order to reduce side effects. However, I'm not sure this is actually necessary. We may be able to shave off a few bytes by undoing that.\r\n\r\n## Next steps\r\n\r\n- If (when) we release this, I think it would be worthwhile to publish a blog post about modular Underscore, with a discussion on the various ways in which one may import from Underscore and some recommendations (such as using monolithic from a CDN unless you have special needs).\r\n- I'm planning on another big non-breaking change right after merging this to enhance the functional style of the implementation. I expect that this will shake a lot of weight and that it will help future enhancements.\r\n\r\n**Edit to add:** You can support my work on Underscore and other open source projects [on Patreon](https://www.patreon.com/juliangonggrijp).",
    "head_branch": "modularized",
    "is_a_fork": true,
    "comments": [
      "> Okay, you have my blessing! 👑\r\n\r\nWoooo! Thanks, this means a lot to me.\r\n\r\n> My one request would be that we keep a single link in the website sidebar to the old, single-file full source version of 1.10.2, as \"Underscore Classic\". I’ve heard from a lot of folks over the years who have cut their teeth on JavaScript by reading and trying to understand that file, and I’d like to not have that experience lost in the sands of time...\r\n\r\nIn case you missed it, the proposal as it currently stands has a link in the website sidebar to (a docco rendered version of) [this monolithic build](https://github.com/jashkenas/underscore/blob/9e3117efcd9a58bcac39823ab65b9f4505239785/underscore-esm.js). The sidebar refers to this as the \"single read\" annotated source. It is not sorted by category (collection, array etcetera), but it is strictly ordered by dependency and it does have all the comments. Don't you think this can fullfill the same need?\r\n\r\n> (If you need my help with anything specific, in terms of website stuff or cutting releases, just let me know.)\r\n\r\nThanks! I will get back to you about this.",
      "> In case you missed it, the proposal as it currently stands has a link in the website sidebar to (a docco rendered version of) [this monolithic build](https://github.com/jashkenas/underscore/blob/9e3117efcd9a58bcac39823ab65b9f4505239785/underscore-esm.js). The sidebar refers to this as the \"single read\" annotated source. It is not sorted by category (collection, array etcetera), but it is strictly ordered by dependency and it does have all the comments. Don't you think this can fullfill the same need?\r\n\r\nNot entirely — I think it’s great, but that you lose quite a bit in what’s possible to do with explanatory prose, when you lose control of the ordering of the paragraphs. People also like to just view the `.js` source file directly in their favorite text editor. But maybe don’t worry about this request — I’d like to brush up and fix a lot of the overgrown comments in any case, and we can always add this at a later date.\r\n\r\n(They used to be clearer, back at the beginning: https://cdn.rawgit.com/jashkenas/underscore/0.4.0/underscore.js)",
      "> I think (...) that you lose quite a bit in what’s possible to do with explanatory prose, when you lose control of the ordering of the paragraphs.\r\n\r\nNot to counter your point (I agree this is a drawback), but I should mention that we can still influence the order by reordering the imports. It's not full control, but still some.\r\n\r\n> People also like to just view the `.js` source file directly in their favorite text editor.\r\n\r\nThis is possible with either monolithic bundle, no problem.\r\n\r\n> But maybe don’t worry about this request —\r\n\r\nI'm not worried. I value your opinion a lot and I don't mind delaying the merge if I can make the changes (even) more satisfying.\r\n\r\nAlthough I should mention that I'd prefer fixing the comments in the new monolithic bundles over including a link to an outdated version of Underscore.\r\n\r\n> I’d like to brush up and fix a lot of the overgrown comments in any case, and we can always add this at a later date.\r\n> \r\n> (They used to be clearer, back at the beginning: https://cdn.rawgit.com/jashkenas/underscore/0.4.0/underscore.js)\r\n\r\nI see what you mean. I could make another pass over the source in an attempt to approach that quality more, but maybe you want to do it yourself?\r\n\r\nAs an aside, version 0.4.0 might be nice as a superlative of \"classic\", i.e., \"archeological\".",
      "> Although I should mention that I'd prefer fixing the comments in the new monolithic bundles over including a link to an outdated version of Underscore.\r\n\r\nYou’re right — it would be much better if we improved the monolithic current comments, instead of linking to an old and dusty shelf copy.\r\n\r\nThe best way to do this would be to make a tool that allows us to order the monolithic builds in any arbitrary ordering that we choose ... but the second-best way to do that would be to re-write the comments in such a way that they flow naturally based on the actual ordering present in the monolithic build. That’s hard, given that they need to make sense in isolation, without reference to anything surrounding them ... and also make sense when read from top to bottom (this is the concern that you mention in your issue description above), but I guess that’s the challenge that presents itself in front of us.",
      "Quick update: I'm currently in the process of analyzing the dependency graph of the modules, in order to choose the most comfortable import order.",
      "Glad to hear it passes the bar for you!\r\n\r\nPlease see also this comment in case you missed it: https://github.com/jashkenas/underscore/pull/2849#discussion_r443118695.\r\n\r\nGood catch about those comments. I think I'll embrace Rollup's \"feature\" of copying only the first line of a module's opening comment; if I rewrite that line so that it makes sense in isolation, it may help clarify what is going on at the bottom of the monolithic bundle.",
      "Maybe give me a sense of what you’d like from me for another review? A read through and testing of the diff again? Or just a last minute thumbs up to recognize that we’re still on the same page?",
      "Just a thumbs-up, mostly for the `index.js` which has changed quite a bit since your last review. I'm especially wondering whether you're OK with the way I'm introducing the categories.",
      "Thanks a lot Jeremy!",
      "Boom, Underscore is completely modular from now on! I will work towards a new release next, but before that, I want to do a couple of things:\r\n\r\n- [x] Fix the Travis build (#2847/#2857) in order to not needlessly worry people who pay attention to that.\r\n- [x] Write an article/blog post about the best ways to take advantage of modular Underscore as well as its monolithic builds.",
      "Hip hip hooray! Congratulations, @jgonggrijp! The longevity of open source meaningful, positive contribution continues to surprise and impress."
    ],
    "commit_messages": [
      "Merge pull request #2849 from jgonggrijp/modularized\n\nChopping Underscore into lots of tiny modules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04683a21fa1e1f1aab98",
    "number": 2848,
    "body": "@jashkenas I inserted a new \"Notes\" section between the links and the changelog. For now it only contains the note on operator `<`. Maybe that note is too long. Maybe the references are too short.\r\n\r\nImplements #2846\r\nCloses #2042\r\nCloses #1834\r\nCloses #1768",
    "head_branch": "comparison-operator-doc",
    "is_a_fork": true,
    "comments": [
      "I love it, but it is a bit much 😉\r\n\r\nInstead of such an excellent treatise on `<` and `NaN` behavior, perhaps try trimming it down to a version that simply briefly mentions that non-comparable JS values have undefined sort order behavior, perhaps with a link to good external docs on the matter, and then move on quickly to a more practical discussion about how to fix your sorting problems: By defining a custom comparator that allows you to specify a sub-key, or compute a value, by which to sort.",
      "I do get carried away sometimes. 😅\r\n\r\nBetter now?",
      "Looks great. The one thing I might consider adding would be what I consider the most common case of difficulties sorting in JS: sorting an array of objects or class instances. Generally, there’s a single property on the object, or a method to call, to produce the desired value for the sort iterator — but that’s not obvious to beginners!\r\n\r\nIt also makes for a good example snippet.",
      "I agree there is a value in a general \"sorting in Underscore for beginners\" type of note. However, when writing this note I specifically set out to address issues like #1768, which I suspect people still run into after they have already figured out the property shorthand thing. After all, a property that is missing in some objects in a collection is a common way in which people may end up comparing `undefined`. The documentation of `_.sortBy` et al. already mentions the option to use an iteratee, anyway.\r\n\r\nI think a general introduction to sorting for beginners would require a different approach. I'm not opposed to changing the note in order to suit this purpose, but I want to concentrate on other things right now. Given your approval, I'll just merge this for now. We can revise it at any time.\r\n\r\nI have however added a link to the `_.iteratee` section to give a bit more of a hint of the available options."
    ],
    "commit_messages": [
      "Merge pull request #2848 from jgonggrijp/comparison-operator-doc\n\nCloses #2846."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04693a21fa1e1f1aab99",
    "number": 2845,
    "body": "A quick summary of what led up to this diff:\r\n\r\n- #2197 was a complaint about `_.bind` performing worse than native `Function.prototype.bind`, due to it basically being `slice.call(arguments)` + native bind (at least at the time).\r\n- #2199 \"fixed\" this by completely removing native bind out of the equation (but didn't update the comment, which has continued to claim a fallback to native bind until this very day).\r\n- #2214 reported that this was a breaking change: `_.bind` previously worked with nontrivial constructors such as `Date` in environments that supported native bind, but not anymore. This has been the status quo since June 2015.\r\n- In the discussion that followed, [this](https://github.com/jashkenas/underscore/compare/master...jridgewell:bind-nativeBind) was considered the most favorable solution: check for availability of native bind only at the time of definition of `_.bind`.\r\n- I took the above solution, updated it to the current situation and added a regression test.\r\n\r\nI'm not actually sure this should be merged. Is using a bound function as a constructor important to support? On the other hand, #2199 was probably the wrong solution to the wrong problem in the first place, so maybe this detour should never have been made.",
    "head_branch": "executeBound-constructor-fix",
    "is_a_fork": true,
    "comments": [
      "> I'm not actually sure this should be merged. Is using a bound function as a constructor important to support?\r\n\r\nIt is not important to support. Within a constructor function, `this` should be the instance you’re constructing.\r\n\r\nI feel like we should rely on native `bind` here if there are performance improvements it gives us, and not worry about it otherwise.",
      "Here's the thing though. `executeBound` already has a fallthrough case for being called as a constructor (i.e. with `new`), in which case it doesn't keep the `this` binding but does keep the argument bindings:\r\n\r\nhttps://github.com/jashkenas/underscore/blob/4334c126b3e71e4aeb8912d05d72139d24f7d0f1/modules/index.js#L770-L778\r\n\r\nAnd it works for simple constructors, but not for fancy stuff like `Date`. Native bind has this sophistication too, but it does work for fancy constructors as well. So where to take this:\r\n\r\n- Support some constructors but not others (current situation)?\r\n- Support all constructors (this PR)?\r\n- Support no constructors at all (another breaking change)?",
      "> So where to take this:\r\n> \r\n> * Support some constructors but not others (current situation)?\r\n> * Support all constructors (this PR)?\r\n> * Support no constructors at all (another breaking change)?\r\n\r\nI don’t believe that it’s terribly important — these sorts of tickets are originally driven by test-case, nit-picked development, not real-world use cases ... But, if it doesn’t cost us much (in bound function call speed, and in file size) to support all constructors with this PR, I think it’s fine and good to merge it!",
      "Time for another benchmark, then."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e046a3a21fa1e1f1aab9a",
    "number": 2844,
    "body": "This is an updated and polished continuation of #2694. Merging this PR will (should?) also merge the other.\r\n\r\n@jashkenas I'm requesting your review again because I ended up making quite substantial changes compared to the original PR that you already reviewed:\r\n\r\n- Exports new `isArrayBuffer`, `isDataView` and `isTypedArray` functions. These are also tested.\r\n- Created an internal `isBufferLike` function that follows the pattern of `isArrayLike` (with `byteLength` instead of `length`) and factored out the common logic.\r\n- Moved around and reformulated @maartenbreddels's logic, although I kept the principles and left his tests for `isEqual` untouched.\r\n- Added `BigInt64Array` and `BigUint64Array`, which probably didn't exist yet in 2018.\r\n\r\nI could not entirely avoid listing the typed array constructor names, because typed arrays appeared in IE10 while `ArrayBuffer.isView` appeared only in IE11. However, I was able to compress the list into a regular expression.\r\n\r\n**Edit to add:** You can support my work on Underscore and other open source projects [on Patreon](https://www.patreon.com/juliangonggrijp).",
    "head_branch": "typed_array_eq",
    "is_a_fork": true,
    "comments": [
      "This looks really nice to me! 👏"
    ],
    "commit_messages": [
      "Merge pull request #2844 from jgonggrijp/typed_array_eq"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e046b3a21fa1e1f1aab9b",
    "number": 2843,
    "body": "This aligns the behavior of wrapper array methods (`pop`, `reverse`, `concat` etcetera) with that of Underscore functions (such as `map` and `first`) when the wrapped value is `null` or `undefined`. Includes a regression test for #2472.\r\n\r\n@jashkenas already approved this in https://github.com/jashkenas/underscore/issues/2472#issuecomment-621337006 so merging right away.",
    "head_branch": "array-method-null-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2843 from jgonggrijp/array-method-null-check"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e046c3a21fa1e1f1aab9c",
    "number": 2841,
    "body": "While using the `underscorejs` I was missing the function `merge`.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@archbloom Thank you very much for taking the effort to prepare and submit a pull request.\r\n\r\nI presume that you were missing `merge` because you were previously using Lodash, or because you were using a library that depends on Lodash and you were replacing Lodash by Underscore in your build configuration. I am happy to hear that just aliasing `merge` to `extend` solves the issue for you.\r\n\r\nUnfortunately, the original [`_.merge` from Lodash](https://lodash.com/docs/4.17.15#merge) is not exactly the same as `_.extend`. Rather, it is a *recursive* version of `_.extendOwn`. This means that your alias will not always work for other people if they are actually depending on the recursion. For this reason, we cannot accept your pull request; it would lead to too much confusion.\r\n\r\nHowever, for your own project, you can still have an Underscore that has `merge` as an alias to `extend`. It starts with a thin wrapper of the `index.js`:\r\n\r\n```js\r\n// your-own-index.js\r\nexport * from 'underscore/modules/index.js';\r\nexport { default, extend as merge } from 'underscore/modules/index.js';\r\n```\r\n\r\nBased on that, you can then make an `index-default.js` that exports a version of `_` with all functions mixed in, including your `merge` alias:\r\n\r\n```js\r\n// your-own-index-default.js\r\nimport { mixin } from 'underscore/modules/index.js';\r\nimport * as allExports from './your-own-index.js';\r\n\r\nvar _ = mixin(allExports);\r\n// next line supports some old emulations of ES modules\r\n_._ = _;\r\n\r\nexport default _;\r\n```\r\n\r\nYou can turn the above module into an UMD bundle with Rollup. It will be identical to the official UMD bundle except that it has an extra line aliasing `merge` to `extend`.\r\n\r\nIf you are using a build tool that looks for the `module` field in the `package.json`, such as Rollup or WebPack 2+, you can finish this off with a third module in order to support both named and default exports in native ES format:\r\n\r\n```js\r\n// your-own-index-all.js\r\nexport * from './your-own-index.js';\r\nexport { default } from './your-own-index-default.js';\r\n```\r\n\r\nClosing now, but please feel free to comment or reopen."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e046d3a21fa1e1f1aab9d",
    "number": 2840,
    "body": "This is meant to address #2804.\r\n\r\n@mcurrao Please let me know whether this sufficiently addresses the problem for you.",
    "head_branch": "empty-validation-warning",
    "is_a_fork": true,
    "comments": [
      "Thanks @jashkenas. As I understand it, you are fine with the current change (given that I have removed the counter-example that you rightly pointed out). So if @mcurrao requests no further changes, I'll not request another review from you before merging this.",
      "@jgonggrijp LGTM. Only missing elements would be functions, but as they can be considered non-enumerable objects, I guess there is no need to include them. Thanks! ",
      "Sorry, requesting another review anyway because I just noticed a tautology in the code and removed it."
    ],
    "commit_messages": [
      "Merge pull request #2840 from jgonggrijp/empty-validation-warning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e046e3a21fa1e1f1aab9e",
    "number": 2837,
    "body": "Hopefully fixes #2836.",
    "head_branch": "hotfix-2836",
    "is_a_fork": false,
    "comments": [
      "I did the same thing in https://github.com/jashkenas/underscore/commit/2a932470303157072015d5ab7f26d40b9deb4634 ... which also includes a test to make sure we don't lose this API in the future."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e046f3a21fa1e1f1aab9f",
    "number": 2834,
    "body": "",
    "head_branch": "prepare-1.10",
    "is_a_fork": false,
    "comments": [
      "@jashkenas I performed all updates to the documentation I could think of, including some changes I didn't contribute myself. I checked the git log for all changes since 1.9.2 and I'm quite sure I completely represented them, at least in the changelog; this is reflected in the five commits above that mention a pull request number.\r\n\r\nOther than that, I'm not 100% sure that I did what I'm supposed to do. If I failed to follow a convention somewhere, I apologize. I also performed some backward corrections (I hope); sorry if that was unwarranted. I made small commits so it is easy to see what I did and to change, reorder or omit individual changes.\r\n\r\nOn the presumption that you have a workflow where you do something like `npm version --minor ; npm publish`, I abstained from the following steps:\r\n\r\n- [ ] `npm run build`\r\n- [ ] `npm run doc`\r\n- [ ] update the version number in the `package.json` and the `package-lock.json`\r\n\r\nI'll be interested to hear what you think!",
      "Okay — v.1.10.1 is out! (I had to bump a tiny patch to fix the relative module references to include file extensions for browser compatibility).\r\n\r\nA million thank yous to @jgonggrijp for persevering with this set of changes. Like I said at the beginning — it’s rare to find someone who is actually willing to go the extra mile to make it happen. 👏👏👏",
      "Hooray! It was a pleasure and I will do this kind of thing again.\r\n\r\nGood catch about the module references, I completely forgot about `<script type=module>`.\r\n\r\nSo this episode is over but I am still a collaborator. In what other ways (if any) would you like me to use the push access? Is it just for the next time I make a large-ish contribution, or would you also appreciate it if, for example, I close an obsolete issue when I find one (such as #1992)? Or maybe even merge a pull request if I'm very sure it is correct?\r\n\r\nAlso, do you still use Gitter?",
      "Oh by the way, you still have to push the 1.10.1 tag. :-)",
      "> Oh by the way, you still have to push the 1.10.1 tag. :-)\r\n\r\nThanks! Pushed.\r\n\r\n> Also, do you still use Gitter?\r\n\r\nI'm afraid I haven't looked at that in years.\r\n\r\n> So this episode is over but I am still a collaborator. In what other ways (if any) would you like me to use the push access? Is it just for the next time I make a large-ish contribution, or would you also appreciate it if, for example, I close an obsolete issue when I find one (such as #1992)? Or maybe even merge a pull request if I'm very sure it is correct?\r\n\r\nUse it with care and discretion — reaching the bar for collaborator access implies a level of trust that I think you’ve earned by your comportment here. If you want to close an obsolete issue or two, or merge good pull requests, or fix things, I'd very much appreciate it.\r\n\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2834 from jashkenas/prepare-1.10\n\nPrepare 1.10 release (WIP)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04703a21fa1e1f1aaba0",
    "number": 2832,
    "body": "`!timeout` must be `true`, so we can remove this needless statement",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@jgonggrijp  you are right, thanks",
      "This was interesting. I was going to suggest the same thing, but also to remove the reset of context and args. When I did, it passed all the tests.\r\n\r\nI know why, and I think it's wrong to reset args and context as the last call to the debounced function should win and every call to debounced function updates them anyway.\r\n\r\nThis doesn't work:\r\n\r\n ```javascript\r\nresult = func.apply(context, args);\r\n// append returns here. Context is now 'b1', and args is 'b2' \r\n context = args = null; \r\n// cleared so the last call fails\r\n```\r\nHeres why the test fails:\r\n\r\n1. throttledAppend is executed and calls append immediately.\r\n2. append calls throttledAppend who store context and args, and set up a timer.\r\n3. when timer ends, later (inside debounced) calls append. Append calls throttledAppend who store context and args and set up a timer.\r\n4. When append return to the later function, context and args is cleared.\r\n5. the last call to append is executed when timer ends, but context and args is cleared.\r\n\r\n```javascript\r\nexport default function throttle(func, wait, options) {\r\n  var timeout, context, args, result;\r\n  var previous = 0;\r\n  if (!options) options = {};\r\n\r\n  var later = function() {\r\n    previous = options.leading === false ? 0 : now();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n    //if (!timeout) context = args = null;\r\n    //context = args = null; // Fails if this is uncommented\r\n  };\r\n\r\n  var throttled = function() {\r\n    var _now = now();\r\n    if (!previous && options.leading === false) previous = _now;\r\n    var remaining = wait - (_now - previous);\r\n    context = this;\r\n    args = arguments;\r\n    if (remaining <= 0 /*|| remaining > wait*/) { // remaining > wait will never happen (I think)\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        timeout = null;\r\n      }\r\n      previous = _now;\r\n      result = func.apply(context, args);\r\n      //if (!timeout) context = args = null;\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  throttled.cancel = function() {\r\n    clearTimeout(timeout);\r\n    previous = 0;\r\n    timeout = 0;\r\n    //timeout = context = args = null;\r\n  };\r\n\r\n  return throttled;\r\n}\r\n\r\n```",
      "@kritollm So you basically found that there is a race condition between the outer invocation of `later` and the inner invocation of `throttled` on the `result = func.apply(context, args)` line. Very clever!\r\n\r\nThis also explains why the throttle re-entrant test exists in the first place, and why the `if (!timeout)` part is there. `!timeout` will evaluate to `false` if `throttled` was recursively invoked on the previous line.\r\n\r\nI disagree that the resets should be removed; they are there to prevent memory leaks. However, the race condition deserves some documentation. Would you like to submit a PR that adds a comment above the `if (!timeout)` line and get the credit for it?",
      "I agree that the reset of args and context is needed. Shouldn't `throttled` also use `restarguments`?\r\n\r\nWhat do you think of this comment?\r\n\r\n`// This check is needed because the argument function can recursively invoke throttled`\r\n\r\n",
      "> Shouldn't `throttled` also use `restarguments`?\r\n\r\nProbably not strictly necessary, but if you like, you can try whether it makes for more compact minification (using `npm run weight`). If the difference is negligible, it's probably better to leave it as-is.\r\n\r\n> What do you think of this comment?\r\n> \r\n> `// This check is needed because the argument function can recursively invoke throttled`\r\n\r\nPretty good. I'd write `func` instead of \"argument function\" in order to make it a bit more explicit, and add a little bit of Markdown markup for the [annotated source](https://underscorejs.org/docs/modules/throttle.html).\r\n\r\n    // This check is needed because `func` might recursively invoke `throttled`.\r\n\r\nIf writing it myself, I might be inclined to write something like the following, in line with the overall literate style of the code:\r\n\r\n    // We use `timeout` to detect cases where `func` recursively invokes `throttled`.\r\n\r\nBut please do feel free to be a little bit creative here.",
      "Should we try to clarify whether the `remaining > wait` check is necessary? \r\n\r\n`if (remaining <= 0 || remaining > wait) {`\r\n\r\nAs I see it, it will always be false, unless `previous  `is greather than `now()`. From what I can see from the code, `previous` will always be less than or equal `_now`. ",
      "I suppose `previous` might be greater than `_now` if the user manually changes the system clock in between two calls to `throttled`. This would be most likely the case if the computer clock went out of sync with the GPS, for example if it had no power for a while.\r\n\r\nAs for whether it is better to timeout again in that case or invoke immediately, I find it hard to judge. But since a choice was already made, it's probably best to stick with it.",
      "You're right about that. There is a possibility that it can happen, and then the `remaining `can be much larger than `wait`. In the worst case, `throttled `might not trigger in several years.\r\n\r\nSo the check is actually very necessary (because the timeout  will then be the value of  `remaining `).\r\n\r\n```javascript\r\n} else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining); // 'remainig' can be much greather than' wait'\r\n    }\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04713a21fa1e1f1aaba1",
    "number": 2831,
    "body": "Fixes #2827, in a way that will continue to work after the rollup conversion from #2826. As a bonus, it will also stop rollup from complaining about `this` being undefined at module scope.\r\n\r\n@lohriialo this is version D, but with a cleaner commit history.\r\n\r\n@jashkenas it might be possible to skip the `self` and `global` checks and just always rely on `Function('return this')()`, but I'll leave that as an optional future step.",
    "head_branch": "es3-this-fix-final",
    "is_a_fork": true,
    "comments": [
      "@lohriialo and other ExtendScript users: until this is merged and released, you can just use the version D that I provided in #2827. It is equivalent to Underscore 1.9.2, but with the current fix as well as the fix from #2829.",
      "I have a feeling like some overzealous linters may complain about the \"insecure\" use of `eval` after this change — but hey, let’s give it a try.",
      "Thanks @jashkenas. At least the project's own linter doesn't complain."
    ],
    "commit_messages": [
      "Merge pull request #2831 from jgonggrijp/es3-this-fix-final\n\nTake this from an isolated script context"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04723a21fa1e1f1aaba2",
    "number": 2830,
    "body": "@jashkenas The current behaviour, as implemented in the internal `isArrayLike` function, reflects \"yes\", based on the fact that functions have a numerical `length` property within safe bounds. However, I think the answer should be \"no\", for reasons I'll give below, and the current PR could be used to change the behaviour accordingly.\r\n\r\nMy case for adding a check against functions and iterating them object-like, rather than array-like, is as follows:\r\n\r\n- Functions do not follow the convention of using `length` to indicate the number of integer keys. One could argue that this function property should have a different name, such as `numArgs`.\r\n- Functions, especially constructors, often have nonnumeric keys that one may want to iterate over. For example `_`.\r\n- Functions are common enough that a targeted check may be warranted.\r\n\r\nThe way `isArrayLike` arrives at its conclusion has been subject of debate in the past (for example in #1590). Opponents often took the stance that checking for a numerical `length` property is wrong altogether, sometimes suggesting radical changes in the way Underscore iteration should work. I would like to emphasize that I'm not in that school of thought. To the contrary; I think checking for a numerical `length` is essentially correct. However, I do think that the `length` property of functions has the wrong name for what it represents, which means that it should be disregarded when iterating a function.\r\n\r\nEdit to add acknowledgement: I found one comment (https://github.com/jashkenas/underscore/issues/1590#issuecomment-42617297) which suggested the same approach. At the time, it drowned in the heated debate.",
    "head_branch": "iterate-functions-by-key",
    "is_a_fork": true,
    "comments": [
      "This may be true, but it would be a pretty major breaking change — and isn't something terribly useful. There are already plenty of good and well-understood ways to iterate over the enumerable keys of a function object.\r\n\r\nFurthermore, the reason we haven’t done something like this in the past is because of a bit more paranoia and conservatism. There are folks out there who make regular JS objects Array-like, and use them like arrays. There’s nothing stopping you from turning a function into an Array-like object, and redefining `length` to suit your own purposes accordingly. `typeof object === \"function\"` is just not a sufficiently good check to know. That’s why Underscore has kept the \"tries to work on anything with a `length`\" policy in the past.\r\n\r\nFor someone doing this sort of thing in the wild, see: https://stackoverflow.com/questions/11886578/creating-array-like-objects-in-javascript/34729224#34729224\r\n\r\nIf we were starting from scratch again, we might choose differently.\r\n\r\n",
      "> There’s nothing stopping you from turning a function into an Array-like object, and redefining `length` to suit your own purposes accordingly.\r\n\r\nI didn't thank of that. Thanks for opening my eyes. I am convinced and will retract the PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04733a21fa1e1f1aaba3",
    "number": 2829,
    "body": "The [documentation](https://underscorejs.org/#iteratee) states the following about `_.iteratee`:\r\n\r\n> You may overwrite `_.iteratee` with your own custom function, if you want additional or different shorthand syntaxes:\r\n>\r\n> ```js\r\n> // Support `RegExp` predicate shorthand.\r\n> var builtinIteratee = _.iteratee;\r\n> _.iteratee = function(value, context) {\r\n>   if (_.isRegExp(value)) return function(obj) { return value.test(obj) };\r\n>   return builtinIteratee(value, context);\r\n> };\r\n> ```\r\n\r\nWhile working on #2826, I noticed a logical error in the implementation of this functionality, which basically meant that the above code example could never work as advertised.\r\n\r\nInternally, most functions that work with `_.iteratee` call `cb`. The latter function first checks whether `_.iteratee` has been overridden, and if this is the case, immediately returns the result of `_.iteratee` instead of proceeding:\r\n\r\nhttps://github.com/jashkenas/underscore/blob/b308ae36fe2ff5d19fa942fd3c40a5a2b807806a/underscore.js#L92-L93\r\n\r\nBy itself, this is reasonable, but the problem is that the `builtinIteratee`, which is initially exported as `_.iteratee` and which overriding implementations might fall back to, in turn calls `cb` again:\r\n\r\nhttps://github.com/jashkenas/underscore/blob/b308ae36fe2ff5d19fa942fd3c40a5a2b807806a/underscore.js#L103-L105\r\n\r\nSo if the user overrides `_.iteratee` and attempts to fall back on the original iteratee in some cases, as in the example above, this will result in an infinite recursion where the overridden `_.iteratee` attempts to defer to the internal `cb` and vice versa.\r\n\r\nI added some lines to the `_.iteratee` test to expose this bug. This resulted in \"maximum call stack size exceeded\" errors, which confirmed my suspicion. I then refactored `cb` and `_.iteratee` to fix the bug. Now all the tests pass again.\r\n\r\n@jashkenas I think it's probably best to review (and hopefully merge) this one before #2826, so that if the latter breaks any backwards compatibility (although I hope and believe we can keep that to a minimum), people stuck with incompatible systems will still benefit from this fix. Again, I'd be very grateful if you could find the time to review this.",
    "head_branch": "iteratee-override-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2829 from jgonggrijp/iteratee-override-fix\n\nFix for infinite recursion bug in overriding _.iteratee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04743a21fa1e1f1aaba4",
    "number": 2828,
    "body": "I changed the `test-browser` script to use `npx`. This prevents `npm` from messing up the `package.json` and `package-lock.json` when you `npm run test-browser`.\r\n\r\nTo be on the safe side, I copied the old version of the command to `test-browser-ci` for the Travis build.\r\n\r\n@jashkenas FYI. I'm going to submit a bunch of small PRs in parallel to #2826. Please don't worry about the order, I'll fix any merge conflicts in #2826 if the need arises.",
    "head_branch": "karma-npx",
    "is_a_fork": true,
    "comments": [
      "When testing on a different machine, I found out that Karma cannot reliably find PhantomJS when following this approach. It happened to work on the machine where I created this PR because I already had a global installation of PhantomJS. I'm withdrawing the PR for this reason."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04753a21fa1e1f1aaba5",
    "number": 2826,
    "body": "**Ready** for review but ***not*** ready for merging; see \"before merging\" notes below.\r\n\r\n## Purpose\r\n\r\nReformatting the underscore source code to use ES6 exports, in order to facilitate treeshaking with tools such as rollup. See #2718.\r\n\r\n## Non-purposes\r\n\r\n- Converting other parts of the code to ES6+. I didn't introduce any `const`, `let`, `async` or arrow functions.\r\n- Modularization. All the underscore functions are still in a single module, in the same order.\r\n\r\nI agree with and followed https://github.com/jashkenas/underscore/issues/2718#issuecomment-575725274 and https://github.com/jashkenas/underscore/issues/2718#issuecomment-575728627. One change at a time.\r\n\r\nThis is also one of the reasons this isn't ready for merge yet; the move to ES6 exports obviates one level of indentation, but I kept that indentation for now in order to ease review.\r\n\r\n*Update: a commit that removes the obsolete indentation was added to this PR on 2020-03-13.*\r\n\r\n## What I did\r\n\r\n- Renamed `underscore.js` to `underscore-source.js`, because the former will be generated from the latter as of this PR. The generated `underscore.js` is functionally equivalent (except for some minor differences detailed below) to the former `underscore.js`. `underscore-source.js` is just a working name; see notes under \"before merging\".\r\n- Removed the IIFE wrapper, firstly because ES6 `export` statements must be at module level and secondly because rollup will generate an IIFE for the UMD bundle.\r\n- Removed the hand-coded UMD logic.\r\n- Reformatted the exports as well as internal functions in `underscore-source.js` in the following ways:\r\n    1. Replaced `_.name = function(){};` by `export function name(){}`.\r\n    2. Replaced `_.name = expression;` by `export var name = expression;`.\r\n    3. Replaced `var internalName = function(){};` by `function internalName(){}` for consistency with 1. and also for brevity and a little added convenience (i.e., hoisting).\r\n    4. Replaced internal uses of `_.name` by just `name`, except for `_.iteratee` and `_.templateSettings` because users may override these.\r\n- Changed some internal names without affecting the exported interface. The removal of the `_.` namespace for internal use introduced some naming conflicts, which I solved as follows:\r\n    - There was both an internal `has` and an exported `has`. I renamed the latter to `_has` for internal use, because the non-exported `has` is used more. `_has` also resembles the old `_.has`.\r\n    - Likewise for `flatten`/`_flatten`.\r\n    - The exported `isNaN` has a counterpart that is an ES builtin. I renamed the former to `_isNaN` for internal use.\r\n    - Likewise for `isFinite`/`_isFinite`.\r\n    - `keys` is used very often as a local variable inside functions. I renamed the exported `keys` to `_keys` for internal use.\r\n    - `now` is also the name of a local variable in `throttle`, which is the return value of the exported `now`. I renamed the local variable to `_now`.\r\n- Added an auxiliary `underscore-module.js` (working name) which takes all the exports from `underscore-source.js` and mixes them into `_`. This is a trick to avoid hand-coding all the exports twice, i.e., to avoid having to write both `export name` and `_.name = name`.\r\n- Set the [`module` field](https://github.com/rollup/rollup/wiki/pkg.module) in the `package.json` to the `underscore-module.js`, so that tools like rollup will be able to find the `export`-based version while everyone else can continue using the UMD bundle.\r\n- Added an auxiliary `underscore-umd.js` (working name) that re-exports only the default export from `underscore-module.js`. This facilicates the UMD bundling by rollup.\r\n  *Update 2020-03-26: in the meanwhile, the roles between the underscore-module and the underscore-umd has reversed. The latter is the module that mixes all functions into the `_` object and the import order is underscore-source -> underscore-umd -> underscore-module.*\r\n- Added rollup configuration to generate the UMD bundle, making sure to produce an UMD bundle which is as close to the hand-written original as possible. I used an outdated version of rollup so I could use the `legacy` option, which prevents rollup from generating getters, which would be incompatible with IE8.\r\n- Delegated the creation of the `noConflict` function to rollup, which has an option for this.\r\n- Added tests to verify that treeshaking is enabled and not overzealous. See notes about treeshaking below under \"quantitative changes\".\r\n- Added commands (`scripts`) to the `package.json` to generate the UMD bundles (both the `underscore.js` and two bundles for the treeshaking tests) and prepended these commands to other commands that depend on their existence.\r\n- Updated and configured `eslint`, and added a plugin, to enable the linter to process `import`/`export` syntax.\r\n\r\nI did *not* convert the tests to ES module syntax; in fact, they still import from the (now generated) `underscore.js`.\r\n\r\n*Update 2020-03-26: In the meanwhile, in addition to the above, I have done a few more things which are detailed in the comments below.*\r\n\r\n## Interface changes\r\n\r\n- The UMD wrapper generated by rollup exposes the same interfaces to the same module systems (CommonJS/AMD/`window` embed). However, it is a bit less refined than the former hand-written version. I don't expect it to cause issues, but I should still mention that it isn't 100% equivalent.\r\n- The `noConflict` method generated by rollup **is** 100% equivalent to the fomer hand-written version. However, it is only added in the `window` embed scenario. ESM, AMD and CommonJS module users will not see the method anymore, although they shouldn't need it, either.\r\n\r\nI believe that the published UMD interface is otherwise completely identical to what is currently on the master branch.\r\n\r\nThis PR shows a comparison between the former hand-written `underscore.js` and the new reformatted `underscore-source.js`. In order to appreciate the interface changes, one might want to see a comparison between the former hand-written `underscore.js` and the new rollup-generated `underscore-js` instead. I pushed a secondary branch to make this possible. The diff can be found over here: https://github.com/jashkenas/underscore/compare/master...jgonggrijp:es-module-compiled?expand=1#diff-0f36b362a0b81d6f4d4bfd8a7413c75d (you may have to click \"load diff\").\r\n\r\n## Quantitative changes\r\n\r\nThe amount of code to maintain decreases very slightly.\r\n\r\n. | hand-written `underscore.js` | proposed `_source` + `_module` + `_umd`\r\n---|---|---\r\ntotal lines of code | 1692 | 1684\r\ngzipped kB | 16.32 | 16.04\r\n\r\nThe weight of the published gzipped + minified UMD bundle increases by 240 bytes.\r\n\r\n. | hand-written UMD module | rollup generated UMD module\r\n---|---|---\r\nminified + gzipped kB | 6.5 | 6.74\r\n\r\nIn exchange, users get the option to treeshake when using tools like rollup. If a user imports only `map` (from `underscore-source.js`), underscore's contribution to her UMD bundle decreases by 900 lines of code compared to the present situation. This is substantial, if not as spectacular as one might expect. This is due to rollup not being clever enought about side effects and erring on the side of caution.\r\n\r\nAs an experiment, I also created a completely modularized version where each function lives in a separate module (not published). This enabled rollup to shave off another 460 lines of code. Rollup also surprised me by pointing out circular dependencies, which it apparently cannot do if all code is in one module. I suspect that solving these circularities might cut `map`'s size in half again, but I have not tried this.\r\n\r\n. | rollup treeshaken size of `map` in lines of code\r\n---|---\r\npresent situation | 1692\r\nproposed changes | 786\r\nmodularized (experimental, unpublished) | 329\r\n\r\nWhile the minified + gzipped UMD bundle weight has increased a bit, these numbers make me believe that using ES exports is definitely a move forward. In addition, solving circular dependencies might also decrease the weight again.\r\n\r\n*Update 2020-03-26: updated treeshake performance numbers can be found at the bottom of https://github.com/jashkenas/underscore/pull/2826#issuecomment-599089184.*\r\n\r\n## Before merging\r\n\r\n- [x] The obsolete level of indentation (and the comment at the top explaining it) still has to be removed.\r\n- [x] The generated `underscore.js` should probably be commited. What do you think would be the right policy for this, @jashkenas? *Update 2020-03-26: in the meanwhile I have proposed to never commit it and instead ensure that it is uploaded to NPM by enforcing the build in the `prepare` or `prepublishOnly` hook of the `package.json`.*\r\n- [x] Decide how to name `underscore-{source,module,umd}.js`. Perhaps `modules/{index-unmixed,index,index-umd-wrapper}.js`?\r\n\r\n**Edit 2020-03-7:** Changed suggested names from `modules/{underscore,index,umd}.js` to `modules/{index-unmixed,index,index-umd-wrapper}.js` because the former might be problematic if we modularize the whole library in a subsequent PR.\r\n\r\n*Update 2020-03-27: slightly changed the above suggestion to `modules/{index,index-all,index-default}.js`, respectively. This suggestion was also implemented in a new commit that has been added to this PR.*\r\n\r\n**Edit to add on 2020-06-18:** You can support my work on Underscore and other open source projects [on Patreon](https://www.patreon.com/juliangonggrijp).",
    "head_branch": "es-module",
    "is_a_fork": true,
    "comments": [
      "@jashkenas I'm done writing. I would be very grateful if you could find the time to review this. My apologies for the long opening post and the big diff (despite my best attempts to keep the diff minimal)!\r\n\r\n@lohfu @mjeanroy FYI.",
      "Wow! 👏👏👏.\r\n\r\nThanks for taking the time to actually make a stab at this — many people have talked a lot about it over the years, but it takes a rare soul to follow through.\r\n\r\nI'm actually starting a month of parental leave next week, so should have a good chunk of time to look at this more closely soon. Please pester me if I don't get back to you soon enough...",
      "@jashkenas It's a pleasure. I love this library, thank you for making it. Good luck with parenting!",
      "@jashkenas Any updates?",
      "Not yet, and we have a wedding to attend this weekend, but thanks for the\nping!\n\nOn Fri, Mar 6, 2020, 2:45 PM Julian Gonggrijp <notifications@github.com>\nwrote:\n\n> @jashkenas <https://github.com/jashkenas> Any updates?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jashkenas/underscore/pull/2826?email_source=notifications&email_token=AAABE7HAYZNI36TQINZRIATRGEZBVA5CNFSM4K5GBDFKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEOCHDCA#issuecomment-595882376>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAABE7AN3M7EA5PYO3M7FZLRGEZBVANCNFSM4K5GBDFA>\n> .\n>\n",
      "@jashkenas Here's another ping. My apologies if this is too soon. I hope you had a nice weekend and wedding.\r\n\r\nI'd like to draw your attention to #2829 as well. If you approve of that one, I'd prefer it to be merged before this one. #2829 is a very small [change](https://github.com/jashkenas/underscore/pull/2829/files).\r\n\r\nOn another note, would you appreciate some help with triaging open issues and PRs? Rather than spamming your notifications by responding to each of them individually, I could create a single issue ticket with a list of PRs than can be closed, a list of issues that can be closed, a list of PRs that require review, etcetera. If you like.",
      "This is looking truly great. Thank you for taking the time to create such a solid draft of an ES-modularization. I really just have a few minor notes around the edges:\r\n\r\n- It would be nice if the UMD build of Underscore continued to support ES3 — there are a lot of folks who use Underscore, for example, in Adobe Illustrator and Photoshop under ExtendScript. It would be even better if we could find a way to assert that compatibility in the tests. If we change this in the future, and start using `const`, `async` and friends, it should be part of a bigger push to provide more asynchronous/promise-based functional logic in Underscore.\r\n\r\n- As you indicate, let's kill the extra level of indentation.\r\n\r\n- I'd prefer getting rid of the additional `underscore-module.js` file, and just including the `_.name = function` assignment in the main source file. It certainly is a neat trick though.\r\n\r\n- **Naming:** Since this change will become Underscore 2.0, I think it's fine for the main \"underscore.js\" to switch from being UMD formatted to a clean ES module. My preferred naming scheme would be:\r\n\r\n- - `underscore.js` The main source ES module, which is also the module that should be directly imported when using ES modules. (No separate -module version.)\r\n- - `underscore-umd.js` If it would be possible to eliminate this file by having Rollup read from `underscore.js` directly (now that it includes the correct default export), that would be great. Otherwise, we can leave this file in place.\r\n- - `dist/underscore-min.js` Minified UMD\r\n- - `dist/underscore-min.js.map`\r\n\r\n- It would be nice if the internal `_names` followed a consistent pattern (regardless of frequency of use), so: `name` for exports and `_name` for internal functions only.\r\n\r\n- It looks like it may be possible to have more current versions of Rollup avoid the use of getters by using the `--no-externalLiveBindings` option, which will make things IE8 compatible.\r\n\r\n- Overall — and even if it looks like it makes life easier for Rollup — I'd still strongly prefer to keep everything in a single `underscore.js`, ES module file. Perhaps there’s something we can do with respect to the code organization, or avoiding function hoisting, or circular dependencies, that can solve the treeshaken LOC problem in a different way.\r\n\r\nBravo! 👏",
      "Thank you for taking the time to review this. I'm happy to hear it looks so good to you. This weekend, I'm going to try to address your concerns as well as I can. Some comments in advance:\r\n\r\n> * It would be nice if the UMD build of Underscore continued to support ES3 — there are a lot of folks who use Underscore, for example, in Adobe Illustrator and Photoshop under ExtendScript. It would be even better if we could find a way to assert that compatibility in the tests.\r\n\r\nThis is a tall order, but I agree with the sentiment in principle and I will investigate the options.\r\n\r\n> If we change this in the future, and start using `const`, `async` and friends,\r\n\r\nPlease observe that this is by no means my intention, not even for a subsequent pull request. The current PR introduces no new syntax other than `import`/`export`. In my opinion, it is not necessary at this time to introduce other ES6+ syntax. In fact, not doing that has the advantage that no transpiler is needed.\r\n\r\n> it should be part of a bigger push to provide more asynchronous/promise-based functional logic in Underscore.\r\n\r\nI'm not sure about this. I'm not sure more async belongs in underscore at all, because there is already a [perfectly fine library available](https://caolan.github.io/async/v3/) for that purpose. I'm not sure such an introduction would require modern `async`/`await` syntax, either, since you can work with promises without that syntax, too. And finally, the syntax used in the source code bears little relevance to the functionality available to the end user, since she will always see a version of the library that is encoded in old syntax, either as written by hand or transpiled down from modern syntax.\r\n\r\n> * I'd prefer getting rid of the additional `underscore-module.js` file, and just including the `_.name = function` assignment in the main source file. It certainly is a neat trick though.\r\n\r\nWhy do you want to keep everything in one file?\r\n\r\nThe purpose of the module/source divide is not *just* avoiding repetition, although I think there is great value in DRY. It is *also* the only way to enable any treeshaking at all. I realize I didn't emphasize this before, but treeshaking *only* works when the user imports from the underscore-source, *not* when importing from the underscore-module. Treeshaking works when importing from the underscore-source, exactly *because* it doesn't contain the `_.name = function` assignments; those assignments constitute side effects and they force tools like rollup to always include all of the source.\r\n\r\nI'll be frank: there is no point in accepting this pull request unless you resign to the idea of splitting the source into at least two modules.\r\n\r\nHowever, I'm very certain that you have valid, well-thought reasons for wanting to keep everything together. I want to fully understand these reasons and I want to address them to the best of my ability. Do they perhaps include the wonderful annotated source edition that you can read through in one go? Name all of it, and I will fight dragons so we can keep as many of the advantages of a single module as possible.\r\n\r\n> * **Naming:** Since this change will become Underscore 2.0, \r\n\r\nWhy will it? Isn't this mostly new functionality rather than a radical interface change?\r\n\r\n> I think it's fine for the main \"underscore.js\" to switch from being UMD formatted to a clean ES module. My preferred naming scheme would be:\r\n> * * `underscore.js` The main source ES module, which is also the module that should be directly imported when using ES modules. (No separate -module version.)\r\n\r\nAs I wrote above, this wish is impossible to grant while also having treeshaking. In addition to that, if you continue to call the UMD bundle `underscore.js` and use some other name for the main ESM entry point, nobody will need to change the path from which they import underscore, *not even people who use ESM imports*, because the `module` field of the `package.json` can transparently point them to the correct underlying file.\r\n\r\n> * * `underscore-umd.js` If it would be possible to eliminate this file by having Rollup read from `underscore.js` directly (now that it includes the correct default export), that would be great. Otherwise, we can leave this file in place.\r\n\r\nUnfortunately, no, that file cannot be eliminated. The problem is not in the way the default export is arrived at (I could have done `mixin(allExports) ; export { default } from 'underscore-source'` instead), but in the way rollup treats files that contain both named exports and a default export. It insists on setting `module.exports` to a plain object in that case, which means that if people do \r\n\r\n```js\r\nvar _ = require('underscore');\r\n```\r\n\r\n, their `_` is not anymore the OOP chain wrapper/partial placeholder/iteratee override holder it should be. For that, they would need to use \r\n\r\n```js\r\nvar _ = require('underscore').default;\r\n```\r\n\r\n instead. The only way to make the first scenario work, which I really think it should, is to offer rollup a module that has a default export and no other exports.\r\n\r\n> * It would be nice if the internal `_names` followed a consistent pattern (regardless of frequency of use), so: `name` for exports and `_name` for internal functions only.\r\n\r\nI do agree with this and I will do as you suggest.\r\n\r\n> * It looks like it may be possible to have more current versions of Rollup avoid the use of getters by using the `--no-externalLiveBindings` option, which will make things IE8 compatible.\r\n\r\nNo, actually I tried that first, with rollup version 1.31.1. It still insisted on creating getters for some of the exports, probably because they were aliases of other exports. The only way to get rid of the getters entirely was the `legacy` option. This also indicates a potential problem with rollup; they don't seem very committed to supporting legacy systems.\r\n\r\nI think there are three main options:\r\n\r\n1. Accept that we need to lag behind the rollup releases. It is only a (minor) problem for the developer, not for the user. The rollup version I used is only two or three years outdated, and apart from the getters and the use of `Object.freeze` (both of which are only lacking because of the `legacy` option), the generated code is identical to what recent versions of rollup generate.\r\n2. Drop support for IE8 (and probably ExtendScript). It hurts, but if you really intend to make this a 2.0, maybe it is an acceptable sacrifice. It would definitely help to shake some weight.\r\n3. Do a final transpilation+polyfill pass on the UMD bundle. This allows you to be as backwards-compatible as you want, but it comes at an ugly cost: additional layers of complexity in the tooling and potentially a lot of extra weight.\r\n\r\n> * Overall — and even if it looks like it makes life easier for Rollup — I'd still strongly prefer to keep everything in a single `underscore.js`, ES module file. Perhaps there’s something we can do with respect to the code organization, or avoiding function hoisting, or circular dependencies, that can solve the treeshaken LOC problem in a different way.\r\n\r\nLet me begin by repeating that I believe you have good reasons for this and that I want to address those reasons as well as I can. Please do explain those reasons to me in detail.\r\n\r\nRollup (and the hard problem of JavaScript treeshaking in general) is mainly sensitive to two things: side effects and dependency. Apart from that, the way the code is organized does not really affect its resuts. Whether one function goes before the other or the other way round does not matter, as long as neither depends on the other or writes to an object that the other might read from. Especially the question of side effects quickly becomes intractable as more common variables are involved. This is why treeshaking becomes more effective as the size of modules decreases: modules have isolated namespaces, so the finer the modularization, the less potential common state.\r\n\r\nI truly believe that further modularization, up to the point of putting every function in a separate module, would be good for underscore. I didn't do it in this PR because I believe in evolutionary change and because I wanted to keep the review as digestible as possible. But I believe it should be the next step.\r\n\r\nApart from dramatically improving treeshaking, splitting out the source code into many small modules has a few other clear advantages:\r\n\r\n- As I said before, it enables rollup to report circular depencies.\r\n- It makes it possible to publish not only a monolithic UMD bundle, but also modularized AMD and CJS versions. In this way, even people who use require.js or browserify will have the opportunity to benefit from treeshaking, even also while using the same import paths as ESM users. The latter also means that one could write ESM code that uses underscore, transpile it to AMD, and then use dynamic treeshaking right from IE. It is just a matter of passing the `preserveModules: true` option to rollup, setting the `browser` field in the package.json for browserify users and setting a single path alias on the end of AMD users.\r\n- When creating a monolithic bundle, rollup will linearize the code in strict order of dependency, at least where the dependencies are noncyclic. Since there is some freedom in this, you can also guide the produced order to some extent by chosing the order of the imports in the index module. This could help to enhance readability, for example in generating the annotated source. Imagine a monolithic ESM module in strict order of dependency; it would be very clean.\r\n\r\nBy extension of the above, I believe that fine modularization goes before any attempt at solving circular dependencies.\r\n\r\n> \r\n> Bravo! 👏\r\n\r\nThank you!",
      "Thanks for the detailed response!\r\n\r\n> Please observe that this is by no means my intention, not even for a subsequent pull request. The current PR introduces no new syntax other than `import`/`export`. In my opinion, it is not necessary at this time to introduce other ES6+ syntax. In fact, not doing that has the advantage that no transpiler is needed.\r\n\r\n👍\r\n\r\n> I'm not sure about this. I'm not sure more async belongs in underscore at all, because there is already a [perfectly fine library available](https://caolan.github.io/async/v3/) for that purpose.\r\n\r\n👍\r\n\r\n> I think there are three main options:\r\n> \r\n> 1. Accept that we need to lag behind the rollup releases.\r\n\r\n👍 That sounds fine. I'm sorry to hear that the `--no-externalLiveBindings` doesn't work as described.\r\n\r\n> I'll be frank: there is no point in accepting this pull request unless you resign to the idea of splitting the source into at least two modules.\r\n\r\nThat’s fine, if it's necessary. If we end up with one file as the straight ES Module exports, one as the complete mixed API, and one file as the single-object UMD export — as you have it today — that's cool with me.\r\n\r\n> However, I'm very certain that you have valid, well-thought reasons for wanting to keep everything together. I want to fully understand these reasons and I want to address them to the best of my ability.\r\n\r\nSimply because it's the soul of this (now venerable) project. Underscore has always tried — and has succeeded and failed over the years, as waves of pull requests have come and gone — to be a simply-written, single-file tour through some useful functional programming idioms in JavaScript. It’s an exercise that’s supposed to be as pedagogical as it is practical. There’s a balance between performance and organizational complexity on the one hand, and readability and source code simplicity on the other. Being a short, single-file library with no dependencies is at the heart of that identity. Also, Lodash already exists.\r\n\r\nBut I don't think that should be a dealbreaker — since, if we separate the `-module` or `-source` file as you suggest, it should make no difference to Rollup, or any other tool, if the source code happens to live in one file or many. It should be possible to syntactically determine where the seams lie between the functions, and achieve equal (or close to equal) results. And if they're not, it's either a hidden circular dependency (that we can fix), or a bug in Rollup (that can be fixed). Right?\r\n\r\nIf there are any other open questions you feel like I haven't addressed, please let me know.",
      "> If we end up with one file as the straight ES Module exports, one as the complete mixed API, and one file as the single-object UMD export — as you have it today — that's cool with me.\r\n\r\nGreat!\r\n\r\n> > ... reasons for wanting to keep everything together.\r\n> \r\n> Simply because it's the soul of this (now venerable) project. Underscore has always tried — and has succeeded and failed over the years, as waves of pull requests have come and gone — to be a simply-written, single-file tour through some useful functional programming idioms in JavaScript. It’s an exercise that’s supposed to be as pedagogical as it is practical. There’s a balance between performance and organizational complexity on the one hand, and readability and source code simplicity on the other.\r\n\r\nI know what you mean. Underscore is a very elegant library, venerable indeed. While I had read the docco rendering before, I became more intimately familiar with the code while preparing this PR and it only strengthened my opinion. It's like a good, well-paced story in which everything comes full circle at the end. With enlightening ingenuity.\r\n\r\n> Being a short, single-file library with no dependencies is at the heart of that identity. Also, Lodash already exists.\r\n\r\nI full-heartedly agree about the succinctness and the self-sufficiency. As far as I'm concerned, those can and should stay. I also see the value of the \"single read\", but I think there might be other ways to address that than necessarily keeping all the primary source code in one file. Maybe it is enough if we generate a monolithic, well ordered ESM using rollup and then feed that into docco. To me, it seems like that might actually be the best of both worlds. Underscore could at the same time present a holistic story and also be a prime example of how to write elegant modular code.\r\n\r\nAs for Lodash. I'm a bit hurt by the remark. I don't believe that modularity is some kind of gliding scale that separates Lodash from Underscore, or even that it is the most significant difference between the libraries. As far as I'm concerned, Lodash is what it is for very different reasons. And I'm definitely not going to repeat that history. To begin with, I will not fork Underscore under any condition.\r\n\r\n> \r\n> But I don't think that should be a dealbreaker — since, if we separate the `-module` or `-source` file as you suggest, it should make no difference to Rollup, or any other tool, if the source code happens to live in one file or many. It should be possible to syntactically determine where the seams lie between the functions, and achieve equal (or close to equal) results. And if they're not, it's either a hidden circular dependency (that we can fix), or a bug in Rollup (that can be fixed). Right?\r\n\r\nSorry, but no, wrong. Observe that there is a factor two treeshaking difference between the underscore-source from the current PR and the experimental, fully modularized version that I didn't publish, despite both containing the exact same code with the same circular dependencies and despite me using the exact same version of rollup in both cases.\r\n\r\nAs a matter of fact, it makes a great deal of difference whether the source code lives in one file or many. I can see why you don't want this to be true, ideologically speaking, but it is true nonetheless. Rollup is over its neck in the murky business of trying to statically track side effects in an impure, weakly typed dynamic language, while Underscore is a little paradise of functional, orthogonal style. Getting a factor two treeshaking improvement by changing Underscore is many orders of magnitude easier than getting that same improvement by changing Rollup. I know; I got a factor *four* treeshaking improvement in less than a week of editing Underscore (a factor two by splitting it in two and then another factor two by splitting it in 146), working all alone, while the Rollup team has been working on Rollup for years and they never managed such a dramatic treeshaking improvement on anything whatsoever.\r\n\r\nI'm not just talking pragmatics. There are strong, fundamental reasons for this. In 2050, ES code distributed over many files will still be more effectively treeshaken than monolithic source code. I'll bet on that.\r\n\r\nBesides that, hidden circular dependencies are uncovered by splitting everything in tiny modules and then having a tool tell you where the circularities are. That, or many hours of brain-melting static analysis by a human (assuming the human won't give up). I don't know about you, but I'm not going to repeat that effort every time we suspect there might be a circular dependency (which we might not always suspect). Given the choice, I'd rather have it modularized permanently and get an instant hint from a tool whenever somebody introduces a circularity.\r\n\r\n> \r\n> If there are any other open questions you feel like I haven't addressed, please let me know.\r\n\r\nYes. I don't fully understand yet why you feel that modularity is at odds with the elegance of Underscore. So far I see no conflict, only harmony. What makes you feel different?",
      "As I said, it’s an aesthetic preference that — to me — lies quite close to the heart of Underscore’s raison d'être, and is a matter of prioritization. To me, keeping Underscore a single file that can be copied, read through in a sitting, and used without any additional tooling, is very important, and a large part of the library’s original usefulness and popularity. Whether or not we support tree-shaking at all is much less important to me. (In fact, there are good arguments against encouraging it, and promoting the single, CDN-cached, 6.5k version of Underscore instead.)\r\n\r\nBut let's put that aside. When you're ready with this PR, let's take a few representative functions, and you can also do them in the modularized form — and I'll take a stab at trying to satisfy Rollup’s internal logic to see if I can come close to matching them with the single-source file. And if I can't approach your results, we'll discuss it again.",
      "> As I said, it’s an aesthetic preference that — to me — lies quite close to the heart of Underscore’s raison d'être, and is a matter of prioritization. To me, keeping Underscore a single file that can be copied, read through in a sitting, and used without any additional tooling, is very important, and a large part of the library’s original usefulness and popularity. \r\n\r\nAlright. I can really relate to this. But this is not lost; the generated UMD bundle can be copied, read through in a single sitting and used without any additional tooling. Only the developer is seeing a change in this regard.\r\n\r\n> Whether or not we support tree-shaking at all is much less important to me. (In fact, there are good arguments against encouraging it, and promoting the single, CDN-cached, 6.5k version of Underscore instead.)\r\n\r\nIt may surprise you, but I fully agree with this. If you're using substantial portions of Underscore client side, a monolithic CDN embed is far better than a subset included in your own (probably already heavy) application bundle. Because of the caching, as you said, and also because requests to different hosts can run in parallel. I always use a mix of jsDelivr and cdnizer for this same reason.\r\n\r\nOn the other hand, there definitely are valid use cases for treeshaking. I can imagine a client side application that makes heavy use of `_.partial` but no other Underscore functions, or a server side application that needs to make do with very limited working memory.\r\n\r\n> \r\n> But let's put that aside. When you're ready with this PR, let's take a few representative functions, and you can also do them in the modularized form — and I'll take a stab at trying to satisfy Rollup’s internal logic to see if I can come close to matching them with the single-source file. And if I can't approach your results, we'll discuss it again.\r\n\r\nFine by me. I'm about to push my finished work, stay tuned.\r\n\r\n",
      "@jashkenas I rebased on the latest `master`, ensuring to fix merge conflicts and include my own `_.iteratee` fix, added some more commits and then force-pushed. The changes since your last review:\r\n\r\n- Used `_name`s only for internal names, as agreed. This necessitated aliasing the builtin `isNaN` and `isFinite` to `_isNaN` and `_isFinite` in the setup section. This change can be seen in isolation here: https://github.com/jashkenas/underscore/pull/2826/commits/6ae7bac4c9420f56f2fe9565ed4c41092ed18578.\r\n- Removed the indentation, as agreed.\r\n- Moved the function export aliases below the functions they alias. This is more consistent with the var export aliases and, more importantly, prevents rollup from dropping comments in some cases. Seen in isolation here: https://github.com/jashkenas/underscore/pull/2826/commits/8f4bbc64fe25ff8386d985488376109772e8f044.\r\n- Renamed the modules. More on this below.\r\n- Added some logic that ensures that docco has a complete, ESM-based version of the source code to render as a single read, regardless of the number of underlying modules. I pushed a separate branch so you can preview the HTML that is produced: https://github.com/jgonggrijp/underscore/blob/esm-docco-committed/docs/underscore.html\r\n\r\nIn renaming the modules, I deviated a bit from the options we discussed before.\r\n\r\n- `underscore-source.js` became `modules/index.js`. This follows the convention that `index.js` is the module where you can find \"everything\". People who wish to treeshake will be importing from `underscore/modules/index`. *If* we further split this module in the future, that import path will continue to work because it will become the place where we collect all the functions.\r\n- `underscore-umd.js` became `modules/index-default.js`. This is still the entry point for the UMD bundle; people will not be specifying this path explicitly in their imports.\r\n- `underscore-module` became `modules/index-all.js`. This is now a module that re-exports the default from `index-default` plus all the named exports from `index`, hence `all`. People who use ESM will automatically get this module when they `import ... from 'underscore'`.\r\n\r\nPlease let me know whether you find this acceptable.",
      "***Edit:** the comment below is outdated. The UMD bundle is now linted to check that its syntax is compatible with ES3. There is a fix for ExtendScript in #2831 that will continue to work when this branch is merged.*\r\n\r\nI almost forgot, regarding the following:\r\n\r\n> * It would be nice if the UMD build of Underscore continued to support ES3 — there are a lot of folks who use Underscore, for example, in Adobe Illustrator and Photoshop under ExtendScript. It would be even better if we could find a way to assert that compatibility in the tests.\r\n\r\nI checked, and the UMD bundle produced by rollup is ES3. I did not find an easy way to test for compatibility with ExtendScript, but I'm thinking that it might be possible to have eslint check for this on the UMD bundle. I'm working on resolving #2827 separately and I hope I will be able to do it in a way that continues to work after the rollup conversion.",
      "Oh, and another thing I forgot to mention. I did not move the minified version of the UMD bundle to a `dist` folder, as you suggested, because it would break the embed lines for everyone who takes them from CDN.\r\n\r\nAlso, I did not commit the generated UMD bundle. I think we still need to decide on a policy for this. Maybe never commit it, just include it when publishing to NPM? This can be automated with the `prepare` or `prepublishOnly` script in the package.json. We could do the same for the minified version. If going this route, the minified bundle and its sourcemap should be removed from git and then all generated files should be added to the `.gitignore`.",
      "@jashkenas \r\n\r\n> When you're ready with this PR, let's take a few representative functions, and you can also do them in the modularized form — and I'll take a stab at trying to satisfy Rollup’s internal logic to see if I can come close to matching them with the single-source file. And if I can't approach your results, we'll discuss it again.\r\n\r\nApart from the need to make definitive decisions about module names and a UMD bundle commit policy, I think this PR is finished (see https://github.com/jashkenas/underscore/pull/2826#issuecomment-598776404 in case you missed the edit). So I'd like to agree on some game rules for this \"treeshaking challenge\".\r\n\r\nMost importantly, I'd like to settle a specific date on which we'll decide whether you were able to approach my results or not. I want this in order to prevent the decision from being postponed indefinitely. On this date, the \"winner\" should publish his code to prove his claims.\r\n\r\nI suggest that you grant yourself somewhere in the order of 24 hours of total programming time to work on this and then pick the nearest date before which you're confident you can spend that much time. 24 hours is approximately the total time it took me to create a noncircular modular version in which every function lives in a separate module.\r\n\r\nFurthermore,\r\n\r\n- You will be trying to prove that it isn't necessary to split `modules/index.js` any further, so you will not do this, not even temporarily in order to obtain information.\r\n- You will not make any breaking interface changes to the UMD bundle as it is currently produced on the `es-module` branch (i.e., a3f6e76), since my modularized versions don't introduce breaking changes, either. (**Edit:** in fact, they don't introduce any interface changes to the UMD bundle whatsoever.)\r\n\r\nI already have modularized versions locally, with and without circular dependencies, so I'm ready to test treeshaking performance on any function you choose.\r\n\r\nRight now, the es-module branch is set up for measuring the treeshaking performance on `_.map`. You can measure the performance by running `npm run bundle-treeshake` (this installs and runs the latest version of rollup automatically using `npx`) and then counting the number of lines in `test-treeshake/map-umd.js`. We can extend this to other functions if you like.\r\n\r\nAt the time of writing, I'm measuring the following performance.\r\n\r\nVersion | Size of `_.map` in lines of code\r\n---|---\r\nmonolithic (`master` branch, no treeshaking) | 1696\r\nsemimonolithic (`es-module` branch) | 821\r\nmodular with circular dependencies (unpublished `modularized` branch) | 350\r\nmodular without circular dependencies (unpublished `noncircular` branch) | 276\r\n\r\n(The `test-treeshake/map-umd.js` generated in the noncircular version appears to contain almost exclusively code that `_.map` actually depends on, so it probably can't be much smaller than 276 lines.)\r\n\r\nI suggest that you win if, by the deadline, you manage to get the size of `_.map` within 10% of the circular modular version. So that would be anything under 385 lines of code. Otherwise, I win, and we discuss further modularization again as you proposed. We can extend this 10% margin to other functions as well.",
      "@jashkenas My apologies for the previous comment, it was too early to discuss game rules and I was being a bit rude as well.\r\n\r\nMay I suggest that we proceed in the following order:\r\n\r\n1. Merge (or reject) #2831 and #2830.\r\n2. Merge the current PR. See https://github.com/jashkenas/underscore/pull/2826#issuecomment-598776404, https://github.com/jashkenas/underscore/pull/2826#issuecomment-598815168. I made another comment between those about ES3 compatibility, but the latest state is different: the UMD bundle is linted to check that all syntax is ES3 compatible and I have a permanent fix for ExtendScript in #2831.\r\n3. Discuss game rules for the treeshake challenge, using https://github.com/jashkenas/underscore/pull/2826#issuecomment-599089184 as a starting point, pretending that it was entirely formulated in a civil way.",
      "No worries! I didn't take any offense — and I think that most of your game rules sound fine. I just didn't want to commit to a particular date without knowing when I would be able to look at this further. \r\n\r\nYesterday, they announced the closure of the borders here in Chile, and we’ve been scrambling around weighing the pros and cons of cancelled flights and shelter in place orders to try to get back home. Hopefully things will quiet down after we manage to make it back.",
      "No problem, best of luck getting home!",
      "@jashkenas I'm mostly asking this out of personal concern: how are the circumstances for you and your family?",
      "We’re good! When they announced the impending border closure, and our Aeromexico flight was cancelled, we turned around, drove 6 hours back north to Santiago, and grabbed a flight (one of the last?) back home to go hunker down. ",
      "@jashkenas I'd really like to move on with this PR. Could you give me a status update?",
      "I went back to work on Monday, and haven't had a chance to take a look at this again ... but I'll try to soon. Sorry for the slowness.",
      "Alright! I took a good long crack at playing around with Rollup’s treeshaking this morning, and feel like a learned a lot about what kinds of patterns it can and can’t treeshake, how `/*@__PURE__*/` doesn’t work, and the types of things that we do in basic Underscore that end up being included in the bundle if they're present in the imported module, regardless of use.\r\n\r\nFor example, here’s a pattern that Rollup can tree-shake away (it’s a reduced test case of our `isArguments` function):\r\n\r\n```js\r\nfunction _toString() {}\r\nexport var isArguments = (function() {\r\n  return _toString(arguments) === '[object Arguments]' ? 0 : 1;\r\n}());\r\n``` \r\n\r\nAnd here’s the version we need to use, that Rollup can’t:\r\n\r\n```js\r\nfunction _toString() {}\r\nexport var isArguments = (function() {\r\n  return _toString.call(arguments) === '[object Arguments]' ? 0 : 1;\r\n}());\r\n```\r\n\r\nThe difference in this case is `.call()`.\r\n\r\nFlowing through functions, this means that anything that depends on `Object.prototype.toString.call(...)` — which we use heavily to test types, can't be treeshaken if called at the top level, even if not exported directly.\r\n\r\nMany of the other places where we call functions at the top level can't be treeshaken by Rollup, although some simpler patterns can.\r\n\r\nSo, what does that mean for this PR?\r\n\r\nUltimately, although I'd be happy to publish a version of Underscore that provides both ES Module and UMD flavors, I think that the module should be a monolithic one, given the small size of Underscore, its presence in the CDNjs cache, and the current state of treeshaking tooling. I'm still not interested in either chopping it up into tiny files, or in littering the codebase with `/*@__PURE__*/` annotations (even if they worked, which they don’t) in order to satisfy Rollup’s current limitations.\r\n\r\nThat said, if you want to publish your fully modularized version as a different npm package, godspeed. I'd be happy to link to it from the top of the Underscore homepage. I hope that's not too disappointing.",
      "> Alright! I took a good long crack at playing around with Rollup’s treeshaking this morning, and feel like a learned a lot about what kinds of patterns it can and can’t treeshake, how `/*@__PURE__*/` doesn’t work, and the types of things that we do in basic Underscore that end up being included in the bundle if they're present in the imported module, regardless of use.\r\n\r\nYou surprise me! I was prepared to wait a long time before you'd even announce a deadline for the treeshaking challenge, and now you've already *completed* the challenge. You did a really good job at it as well.\r\n\r\n> So, what does that mean for this PR?\r\n> \r\n> Ultimately, although I'd be happy to publish a version of Underscore that provides both ES Module and UMD flavors, I think that the module should be a monolithic one, given the small size of Underscore, its presence in the CDNjs cache, and the current state of treeshaking tooling. I'm still not interested in either chopping it up into tiny files, or in littering the codebase with `/*@__PURE__*/` annotations (even if they worked, which they don’t) in order to satisfy Rollup’s current limitations.\r\n> \r\n> That said, if you want to publish your fully modularized version as a different npm package, godspeed. I'd be happy to link to it from the top of the Underscore homepage.\r\n\r\nThat's really nice of you, but no, I don't want to do that because it would amount to forking Underscore. I believe the world doesn't need yet another fork of Underscore. I only want Underscore to be modular if you are on board.\r\n\r\n> I hope that's not too disappointing.\r\n\r\nIf the current, semi-monolithic PR can still be merged, I'm happy enough. How about that?\r\n\r\nAnd I'll try again later to interest you in chopping everything into tiny modules. ;-)",
      "Okay, great! In that case I think that we’re almost there.\r\n\r\nAt least before I can merge it — and perhaps as a general policy — we need to provide a built version of `underscore.js` in the repo. For many years, there has been a link to test out the \"Edge version\" on the homepage: `https://raw.github.com/jashkenas/underscore/master/underscore.js` ... and it would be great if that could continue to work, as changes are made to the master branch.\r\n\r\nSo perhaps using Husky to define a pre-commit hook that makes sure that `underscore.js` is always kept up-to-date with `modules/index.js` ?\r\n\r\nAnd then prepublish can handle the `-min.js` and `-min.js.map` variants, and the annotated source.\r\n\r\nAs to the actual roll-out, how would you like to handle it? I think this could merit a 2.0 release, with appropriate revisions to the homepage/documentation. Would you like to be added as a collaborator on this repo to help make that happen? I think you’ve clearly earned your stripes.",
      "And as to the treeshaking — my experiments make me feel like (even with a single source file), it's tantalizingly close. Rollup is able to eliminate all of the obvious non-dependencies, in terms of function declarations at the top level.\r\n\r\nIt's only with our use of function calls at the top level, in order to define other functions, that it has problems, and even then, only some of the time.\r\n\r\nThings like:\r\n\r\n```\r\nexport var omit = restArguments(function(obj, _keys) {\r\n  var iteratee = _keys[0], context;\r\n  if (isFunction(iteratee)) {\r\n    iteratee = negate(iteratee);\r\n    if (_keys.length > 1) context = _keys[1];\r\n  } else {\r\n    _keys = map(_flatten(_keys, false, false), String);\r\n    iteratee = function(value, key) {\r\n      return !contains(_keys, key);\r\n    };\r\n  }\r\n  return pick(obj, iteratee, context);\r\n});\r\n```\r\n\r\n... because of the call to `restArguments`, even though that function obviously has no side effects.\r\n\r\nI feel like there might be a more general pattern of dynamic function export creation we could find that would allow Rollup to treat each export in isolation ... but I wasn't able to discover it, despite my best efforts.",
      "> Okay, great! In that case I think that we’re almost there.\r\n\r\nHooray!\r\n\r\n> \r\n> At least before I can merge it — and perhaps as a general policy — we need to provide a built version of `underscore.js` in the repo. For many years, there has been a link to test out the \"Edge version\" on the homepage: `https://raw.github.com/jashkenas/underscore/master/underscore.js` ... and it would be great if that could continue to work, as changes are made to the master branch.\r\n> \r\n> So perhaps using Husky to define a pre-commit hook that makes sure that `underscore.js` is always kept up-to-date with `modules/index.js` ?\r\n\r\nSure, I'll look into it.\r\n\r\n> \r\n> And then prepublish can handle the `-min.js` and `-min.js.map` variants, and the annotated source.\r\n\r\n`prepublish` or `prepublishOnly`? I don't mind either, but in the first case, I'd prefer to call it [`prepare`](https://docs.npmjs.com/misc/scripts#prepublish-and-prepare).\r\n\r\n> \r\n> As to the actual roll-out, how would you like to handle it? I think this could merit a 2.0 release, with appropriate revisions to the homepage/documentation.\r\n\r\nRegardless of the version number, I definitely think some additions to the documentation would be in order.\r\n\r\nI really appreciate that you want to celebrate this with a 2.0 release, but I adhere to semver quite strictly and I think this should be 1.10. All of the old interface is still there, all of the backwards compatibility is still there and the source code still looks mostly the same. Users just get the new option to treeshake with rollup. I don't want to \"shock\" users with a 2.0 if it isn't actually disruptive.\r\n\r\nIf, in some hypothetical future, we chop everything into tiny modules, I think *that* might merit a 2.0 release though... ;-)\r\n\r\n> Would you like to be added as a collaborator on this repo to help make that happen? I think you’ve clearly earned your stripes.\r\n\r\nThat's an honour, thank you. I definitely want to help. If making me a collaborator helps to make me help, I'm all for it. :-)\r\n\r\nAs for your second comment about treeshaking: I feel your frustration! However, keep in mind that the size of `_.map` is already cut in half. That's already a pretty big win. There are probably functions that are treeshaken even more as well.",
      "> `prepublish` or `prepublishOnly`?\r\n\r\nRight, `prepublishOnly` is what I meant.\r\n\r\n> I really appreciate that you want to celebrate this with a 2.0 release, but I adhere to semver quite strictly and I think this should be 1.10.\r\n\r\nOkay, `1.10` it is.\r\n\r\n> That's an honour, thank you. I definitely want to help. If making me a collaborator helps to make me help, I'm all for it. :-)\r\n\r\nDone and done.\r\n\r\n> As for your second comment about treeshaking: I feel your frustration! However, keep in mind that the size of `_.map` is already cut in half. That's already a pretty big win. There are probably functions that are treeshaken even more as well.\r\n\r\nFrom my understanding, not so much! Most of the half of the codebase that is currently included along with treeshaken `map` does not have anything to do with `map` directly (or indirectly!). It's just all of the top-level function calls that Rollup cannot determine are side-effect-free, and everything that those top-level function calls depend on. All of that same code will be included in every treeshaken individual export, no matter which one it is. And if we can restructure those top-level function calls to treeshake cleanly, conversely, all Underscore functions should export cleanly from the single file.\r\n",
      "@jashkenas I think we're ready for the merge. I can now push the merge button by myself, but I'll give you a chance to review the new commits first.\r\n\r\nRegarding the Husky hooks, I had to explicitly invoke `git add` inside the pre-commit hook to ensure that the UMD bundle would actually be committed. Apparently, doing this inside a pre-commit hook causes the autogenerated files to still appear in the diff and the index after `git commit` completes. To fix this, I had to add an explicit `git reset` in the post-commit hook as well.\r\n\r\nHow to continue from here? Merge the current PR first, then start a new branch in your repo to update the documentation?"
    ],
    "commit_messages": [
      "Merge pull request #2826 from jgonggrijp/es-module\n\nES modules exports (implements #2718)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04763a21fa1e1f1aaba6",
    "number": 2825,
    "body": "In the unit test for _.max() several assertions had the 'actual' and 'expected' parameters swapped. Fixed it yields the same result, but looks more consistent and potentially less confusing (a colleague actually got confused by this and we spent some time figuring out if there's a specific reason for them being swapped, concluding there isn't - hence this PR).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks for the cleanup!"
    ],
    "commit_messages": [
      "Merge pull request #2825 from ppenicka/master\n\nFix order of assertion parameters"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04773a21fa1e1f1aaba7",
    "number": 2823,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04783a21fa1e1f1aaba8",
    "number": 2821,
    "body": "This additional info might be helpful for some people that doesn't aware that initializing Date with invalid date string will still returns a Date object. So that checking invalid Date with `isDate` will returns true. \r\n\r\n`_.isDate()` function only checks if a variable type is `Date` not check if it the value is valid.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you for taking the effort to submit a pull request, @khasburrahman.\r\n\r\nI understand that `_.isDate(new Date('invalid')) === true` is confusing. But the confusing part is that `new Date('invalid')` returns an actual `Date`. I think an explanation for that belongs on a web page about `Date`, such as [this one](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), instead of on a web page about Underscore. Would you agree with that?",
      "@khasburrahman if you have not replied yet by June 30, I will close this PR for the time being. The PR can still be reopened after that if you wish. Thank you for understanding."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04783a21fa1e1f1aaba9",
    "number": 2820,
    "body": "Documentation for the `sortedIndex()` was at least ambiguous at this point, or even wrong, consider for example `let m = [ 1, 2, 4, 4, 4, 5, 6, 7 ];` array, if we are searching for `4`, like so: `_.sortedIndex(m, 4);`, it actually returns `2` which is a **smallest** index of 4 between all it's occurences, not simply the index found by binary search, at this point true binary search could return `3` instead of `2`. So, it is important to state explicitly in the documentation that the index returned is indeed **the smallest index**, as I corrected here. Please apply this update.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "The test which is supposed to check if sortedIndex() finds the smallest index is already there, see [line 137](https://github.com/jashkenas/underscore/blob/5a55dd13edd148718a0a0177d711b71b5887d3da/test/arrays.js#L137)  which is quoted here:\r\n```\r\nassert.strictEqual(indexFor30, 2, 'finds the smallest index at which a value could be inserted to retain order');\r\n```\r\n-however the `var number` array used for the test case does not contain duplicates, which is fixed in [this commit](https://github.com/jashkenas/underscore/pull/2820/commits/934052aa9471e537ec9ae175a9e6868a5d4be28b).\r\nThis is to ensure consistence of behavior of the sortedIndex() function.\r\n\r\nAll in all this change makes the quoted test from the line 137 more meaningful by including duplicates, given that a pure binary search algorithm could have a different result in the same scenario."
    ],
    "commit_messages": [
      "Merge pull request #2820 from tvibliani/patch-1\n\nFix documentation entry for \"sortedIndex\" function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04793a21fa1e1f1aabaa",
    "number": 2817,
    "body": "",
    "head_branch": "fix-throttled",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e047a3a21fa1e1f1aabab",
    "number": 2816,
    "body": "Dead links weren't replaced.\r\nPlease also make this link https:\r\n![image](https://user-images.githubusercontent.com/3462541/70174011-eca7ba80-1688-11ea-8b14-1fe3904d3cb9.png)",
    "head_branch": "https",
    "is_a_fork": true,
    "comments": [
      "Thanks!",
      "This link is still http: \r\n![image](https://user-images.githubusercontent.com/3462541/70231096-8796a800-170e-11ea-837d-4c95ccf7f7ea.png)\r\n",
      "Updated!"
    ],
    "commit_messages": [
      "Merge pull request #2816 from Margen67/https\n\nMake links HTTPS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e047b3a21fa1e1f1aabac",
    "number": 2815,
    "body": "The current implementation of underscore is returning an invalid answer for:\r\n\r\n```js\r\n_.isEqual(0, new Number(Number.MIN_VALUE))\r\n// expected to be false but was true before the fix\r\n```\r\n\r\nSimilar to a bug found in Jest https://github.com/facebook/jest/issues/7941\r\n\r\n---\r\n\r\nThis bug has been discovered with the following test - property based testing test:\r\n```js\r\nimport * as _ from \"underscore\";\r\nimport * as fc from \"fast-check\";\r\n\r\ndescribe(\"_.toEqual\", () => {\r\n  it(\"should be symmetric\", () => {\r\n    fc.assert(\r\n      fc.property(\r\n        fc.anything({ withBoxedValues: true }),\r\n        fc.anything({ withBoxedValues: true }),\r\n        (a, b) => _.isEqual(a, b) === _.isEqual(b, a)\r\n      ),\r\n      { numRuns: 1000000 }\r\n    );\r\n  });\r\n});\r\n```\r\n\r\nPlease note that such kind of tests are currently used [within Jest](https://github.com/facebook/jest/blob/86e73f5b22e8a02b5233af78c68ef7318c59e1b3/packages/expect/src/__tests__/matchers-toEqual.property.test.ts#L26) to avoid future issues.",
    "head_branch": "fix/number-compare-failure",
    "is_a_fork": true,
    "comments": [
      "I’d be happy to defer to whichever version you think is best for this, because I don't have a particularly strong opinion about how this should behave, in the context of JavaScript floating point ubiquity.\r\n\r\nBut if we do decide to make a change here, it would be a breaking change.",
      "@jashkenas IMO as the original source code was considering `0` to be different from `-0`, I'd say the change should consider `0` to be different from `Number.MIN_VALUE`.\r\n\r\nWhat's your opinion?\r\n\r\nIf it can help for the decision both Jasmine and Jest opted to distinguish `0` from `Number.MN_VALUE`, see the fixes https://github.com/facebook/jest/pull/7948 and https://github.com/jasmine/jasmine/pull/1764",
      "I made a new comment above that numbers four options from most to least fuzzy. The current code behaves like option (2) or (3) depending on the values of the operands and the order in which they are fed into `_.isEqual`. So any change that makes this consistent is a breaking change, but I think you can still share this under \"bug fixes\" if you choose option (2) or (3).\r\n\r\nIf choosing option (1) or (4), maybe it should also be considered a semantic change. Option (4) is what @dubzzz is currently proposing.\r\n\r\nEdit to add: option (4) is probably the most `EGAL`, so I'm not ruling out that this is what was originally intended, but this is not how the code on the master branch actually behaves.",
      "Thanks for laying out the tl;dr of the four options. It sounds like it might be time to have \"the big semver conversation\" if we go with option 4...",
      "I think I agree with @dubzzz that option 4 is the most correct, but it is not a strong opinion.\r\n\r\nAs for semver, we could work with parallel 1.x and 2.x branches for a while so we don't have to rush the 2.0 release. One of those branches could be `master`.\r\n\r\nI'm going to compose an email to you because there's something I'd like to bring to the table for a potential 2.0."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e047c3a21fa1e1f1aabad",
    "number": 2808,
    "body": "Added support for Set and Map for _.isEmpty ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "That's a nice idea. Used to write my own wrapper for this functionality",
      "@ushakov-igor Thank you for taking the effort to submit a pull request.\r\n\r\nI think this would be nice to have, but it is a breaking change, so we have to be careful. Your PR may remain open for a while because of this.\r\n\r\nFor consistency, it would be best if all collection functions would treat `Map` and `Set` in the same way. This is not necessarily a bad idea, but it does make this a rather *big* breaking change.\r\n\r\nI also recently learned from #2840 that the `toString`-based type checks like `isMap` are relatively slow. So to avoid a big slowdown in all functions that support `Map` and `Set`, there would have to be an `isAssociative` fuzzy checker analogous to the internal `isArrayLike`. I imagine the implementation might go like this:\r\n\r\n```js\r\nvar getSize = shallowProperty('size');\r\nvar getForEach = shallowProperty('forEach');\r\n\r\nfunction isAssociative(collection) {\r\n    var size = getSize(collection);\r\n    var forEach = getForEach(collection);\r\n    return typeof size == 'number' && typeof forEach == 'function' && size >= 0 && size <= MAX_ARRAY_INDEX;\r\n}\r\n```\r\n",
      "> For consistency, it would be best if all collection functions would treat `Map` and `Set` in the same way. This is not necessarily a bad idea, but it does make this a rather _big_ breaking change.\r\n\r\nAgreed. If we’re going to support Maps and Sets (and WeakMaps and WeakSets?), we should do it across the board, in a single release, and not piecemeal function-by-function.",
      "WeakMaps and WeakSets cannot be iterated, so I don't think there's much to support about them in collection functions."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e047d3a21fa1e1f1aabae",
    "number": 2806,
    "body": "I changed the variable 'length' in the _.each function to something more obscure and less likely to be used as a key in an object in order to prevent errors while iterating over object keys in the meteor framework.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Not an issue as this is a local scope variable reference"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e047e3a21fa1e1f1aabaf",
    "number": 2805,
    "body": "### Description\r\nWe have noticed that isArrayLike() function returns **true** for objects which contain **length** attribute.\r\n\r\n### Steps to reproduce\r\nIn the browser console run the following code:\r\n```\r\nvar shallowProperty = function(key) {\r\n    return function(obj) {\r\n      return obj == null ? void 0 : obj[key];\r\n    };\r\n  };\r\nvar MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\r\n  var getLength = shallowProperty('length');\r\n  var isArrayLike = function(collection) {\r\n    var length = getLength(collection);\r\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\r\n  };\r\nisArrayLike({\"id\":\"34\",\"name\":\"Iris Workout Top-XS-Red\",\"type\":\"simple\",\"qty\":\"1.0000\",\"product_id\":\"1421\",\"parent_id\":\"33\",\"parent_product_id\":\"1434\",\"basePrice\":0,\"baseCurrency\":\"USD\",\"price\":0,\"currency\":\"GBP\",\"weight\":13607760,\"width\":2032000,\"length\":3048000,\"height\":2540000,\"sku\":\"WS03-XS-Red\",\"is_use_box\":false,\"has_children\":[]});\r\n```\r\nThis code returns true for the Object which contain **length** property.\r\n\r\n### Our solution\r\nWe have added the nativeIsArray checking and now the isArrayLike() function returns the **false** for objects with **length** property.\r\nYou can test it via the following code:\r\nIn the browser console run the following code:\r\n```\r\nvar shallowProperty = function(key) {\r\n    return function(obj) {\r\n      return obj == null ? void 0 : obj[key];\r\n    };\r\n  };\r\nvar MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\r\n  var getLength = shallowProperty('length');\r\n  var isArrayLike = function(collection) {\r\n    var length = getLength(collection);\r\n    return Array.isArray(collection) && typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\r\n  };\r\nisArrayLike({\"id\":\"34\",\"name\":\"Iris Workout Top-XS-Red\",\"type\":\"simple\",\"qty\":\"1.0000\",\"product_id\":\"1421\",\"parent_id\":\"33\",\"parent_product_id\":\"1434\",\"basePrice\":0,\"baseCurrency\":\"USD\",\"price\":0,\"currency\":\"GBP\",\"weight\":13607760,\"width\":2032000,\"length\":3048000,\"height\":2540000,\"sku\":\"WS03-XS-Red\",\"is_use_box\":false,\"has_children\":[]});\r\n```",
    "head_branch": "fix-underscore-isArrayLike-function",
    "is_a_fork": true,
    "comments": [
      "@serhiyzhovnir this seems to be correct behavior: https://www.google.com/search?q=underscroe+isArrayLike"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e047f3a21fa1e1f1aabb0",
    "number": 2802,
    "body": "One `throttle triggers trailing call when invoked repeatedly` test\r\nshowed up often on CITGM (https://github.com/nodejs/citgm). To reduce\r\nthe noise this test causes and to prevent removing `underscore` from\r\nCITGM, I relaxed the asserts inside of the function. It would be\r\ngreat if the calls would have a stack trace but there is no such\r\noutput if the calls fail, so I relaxed both statements. I can not\r\nfully tell if this will resolve the issue completely but this seemed\r\nlike the most straight forward fix besides removing the test\r\ncompletely.\r\n\r\nRefs: #2698",
    "head_branch": "fix-flaky-test",
    "is_a_fork": true,
    "comments": [
      "@BridgeAR Is this still still an issue?",
      "I did not check if exactly these tests fail but we still get test failures very frequently with different Node.js versions and systems:\r\n\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2338/nodes=osx1015/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2340/nodes=osx1015/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2342/nodes=osx1015/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2343/nodes=osx1015/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2345/nodes=osx1015/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2346/nodes=centos7-ppcle/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2347/nodes=osx1015/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n* https://ci.nodejs.org/view/Node.js-citgm/job/citgm-smoker/2348/nodes=osx1015/testReport/junit/(root)/citgm/underscore_v1_10_2/\r\n\r\nNote: these links are available for ~7 days.",
      "@BridgeAR Is there a way I can see the output of those test runs without having to grant the Node.js Jenkins instance access to my private data?",
      "@BridgeAR A friendly reminder.\r\n\r\n> Note: these links are available for ~7 days.\r\n\r\nIf my counting is correct, the links will expire tomorrow.\r\n\r\n> Is there a way I can see the output of those test runs without having to grant the Node.js Jenkins instance access to my private data?",
      "Thanks for the reminder. I will copy some results over tomorrow when I am back on my notebook.",
      "@BridgeAR The commit referenced above (as well as another commit that came shortly before it) should have made the issue to occur much less frequently. Please observe for a while and then decide whether to keep this ticket open.",
      "@BridgeAR Please reopen if this is still an issue."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04803a21fa1e1f1aabb1",
    "number": 2801,
    "body": "This came up on CITGM (https://github.com/nodejs/citgm) and it's\r\neasy to fix.",
    "head_branch": "fix-global-deprecation",
    "is_a_fork": true,
    "comments": [
      "@jashkenas tag dis"
    ],
    "commit_messages": [
      "Merge pull request #2801 from BridgeAR/fix-global-deprecation\n\nFix deprecation warning about `GLOBAL`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04813a21fa1e1f1aabb2",
    "number": 2798,
    "body": "Creating pull request for issue [#2795 underscore/LICENSE is the Expat license](https://github.com/jashkenas/underscore/issues/2795) ",
    "head_branch": "change-license-mit-expat",
    "is_a_fork": true,
    "comments": [
      "Great, thank you! :+1: ",
      "Nope:\r\n\r\nhttps://opensource.org/licenses/MIT"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04823a21fa1e1f1aabb3",
    "number": 2796,
    "body": "A very small changes. Just change the date of copyright in Underscore.js file",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "We generally update the date only alongside actual changes made. That way it's accurate."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04833a21fa1e1f1aabb4",
    "number": 2791,
    "body": "Closes #2775.\r\n\r\nThis function acts similarly to `_.find`, but returns undefined if more than one item passes the predicate test (or there are no matching items).",
    "head_branch": "single",
    "is_a_fork": true,
    "comments": [
      "What is the justification for such a method?",
      "@megawac See [this comment](https://github.com/jashkenas/underscore/issues/2775#issue-345784673):\r\n\r\n> I'm not sure whether this is useful enough, although there have been a couple of times I've needed something like this to avoid having to validate whether we only have a single item that passes the predicate.",
      "I think this is better left up to the user as Im not sure its a common enough case\r\n\r\n```\r\nconst filteredItems = _.filter(items, predicate);\r\nif (filteredItems.length === 1) {\r\n  const result = _.first(filteredItems);\r\n  // ...\r\n}\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04843a21fa1e1f1aabb5",
    "number": 2789,
    "body": "Fix for [#2457](https://github.com/jashkenas/underscore/issues/2457) ",
    "head_branch": "symbol-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04853a21fa1e1f1aabb6",
    "number": 2787,
    "body": "Added lodash chain compatability, because if you look at the source:\r\n\r\n```js\r\n    function lodash(value) {\r\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\r\n        if (value instanceof LodashWrapper) {\r\n          return value;\r\n        }\r\n        if (hasOwnProperty.call(value, '__wrapped__')) {\r\n          return wrapperClone(value);\r\n        }\r\n      }\r\n      return new LodashWrapper(value);\r\n    }\r\n```\r\n\r\nIt checks for the `__wrapped__` property, so this would add Lodash compatability.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Closing this because it seems motivated by incorrect usage of Underscore. In case the owner of the deleted account that originally submitted this PR is reading this: please feel free to comment. We may be able to help you create a correct setup that includes both Underscore and Lodash."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04863a21fa1e1f1aabb7",
    "number": 2784,
    "body": "gives the occurrence count of each element in a array\r\neachElementCount takes an array and returns a object\r\n[5,4,6,4] => {5: 1, 4: 2, 6:1}",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks, but this is a bit too specific for core Underscore. Feel free to `_.mixin` it in!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04873a21fa1e1f1aabb8",
    "number": 2779,
    "body": "Old behavior:\r\n`_([[1, 2, 3], [], [1, 2, 3]]).map(_.first) // [1, [], 1]`\r\n\r\nNew behavior:\r\n`_([[1, 2, 3], [], [1, 2, 3]]).map(_.first) // [1, undefined, 1]`",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2779 from 'psixdev/master'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04883a21fa1e1f1aabb9",
    "number": 2769,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2769 from theel0ja/patch-1\n\nFix mixed content warning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04893a21fa1e1f1aabba",
    "number": 2767,
    "body": "Hello all:\r\n\r\nFor an interval, we can make this loop after a period of time. However there's a problem when the body the execution function of setInterval takes for a long time larger than interval time.\r\n\r\nA typical example is:\r\n\r\n```javascript\r\nsetInterval(()=>\r\n{\r\n   //Suppose this takes 2000 milliseconds\r\n},1000);\r\n```\r\n\r\nBecause the body of the execution function takes 2 seconds, which is larger than interval time (1 second). Sometimes this is a serious problem because the first loop hasn't been totally executed, and the next comes.\r\n\r\nI'd like to offer a new function called setSafeInterval, made up of double setTimers：\r\n\r\n```javascript\r\nfunction safeInterval(exeFunc,intervalTime){\r\n\r\n     let delayTime = intervalTime; \r\n\r\n     setTimer(function(){\r\n               let _self = this;\r\n    \r\n                try{\r\n                     exeFunc(function(){\r\n                              setTimer(_self, delayTime);\r\n                      });\r\n                }catch(e){\r\n                     //Ignore the error, we don't continue to execute the `exeFunc`.\r\n                }\r\n     },0);  \r\n}\r\n```\r\n\r\nYou can call something like this following:\r\n\r\n```javascript\r\nsafeInterval(function(callBack){\r\n//Here do what you want......\r\ncallBack(); //MUST call this for the next loop\r\n},1000);   \r\n```\r\n\r\nThis will make you fell comfortable to execute a function whose time is larger than the interval time safely.\r\n\r\nWhat do you think of this? I think this will solve the problem of setInterval and this is a common method used in many areas.\r\n\r\nHope I can make my first contributions to you all! I know that underscore is a very famous lib all over the world! And actually this is a senario widely happening in most areas.\r\n\r\nBTW：Already run `npm run test` to make all right",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e048a3a21fa1e1f1aabbb",
    "number": 2766,
    "body": "When bundling a project with Webpack, all comments are removed by default except license annotated ones.\r\nThis is required in some companies for legal reasons.\r\nIt would be nice to have it in this project too.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "@jashkenas PTAL",
      "I think that's alright — this project doesn't have anything to do with Webpack ... over any other minifier or bundler."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e048a3a21fa1e1f1aabbc",
    "number": 2765,
    "body": "Timestamp is always unique, no test needed to check if the value was already used.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "We're not going to just change out this function from under peoples' feet at this point.",
      "Just as an addition: it will be very helpful in many cases when user has to generate lots of dynamic DOM elements(e.g more than 999)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e048b3a21fa1e1f1aabbd",
    "number": 2763,
    "body": "added saucelab updated browser versions.\r\nupdated addEventListener in qunit.js to support older browsers\r\nupdate isSet and isMap\r\n",
    "head_branch": "karma-sauncelabs-fix",
    "is_a_fork": true,
    "comments": [
      "Issue https://github.com/jashkenas/underscore/issues/2740",
      "Thanks! This is important work."
    ],
    "commit_messages": [
      "Merge pull request #2763 from gonzalez/karma-sauncelabs-fix\n\nupdating addEventListener to support older browsers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e048c3a21fa1e1f1aabbe",
    "number": 2760,
    "body": "Before '_.first([])' return 'undefined'\r\nNow '_.first([])' return []\r\nSame thing for _.last()\r\nAnd add tests",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/17177489/badge)](https://coveralls.io/builds/17177489)\n\nCoverage increased (+0.007%) to 97.017% when pulling **042f5fda035f831528f5bb38637615bb27ece97a on benjaminviaud:master** into **3cd55ea9b40044b34bfe1ad90c25eb3ac777b158 on jashkenas:master**.\n",
      "Your change is not rationale.",
      "@benjaminviaud I'm sorry to say it but @Zainking is right. If the first element of an empty array would be that same array, it would be an array with length 1, so it wouldn't be empty.",
      "Also, #2741 was already fixed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e048d3a21fa1e1f1aabbf",
    "number": 2758,
    "body": "This is my test：\r\n![image](https://user-images.githubusercontent.com/25007676/40180489-86f0e310-5a19-11e8-9dde-69a3536f561d.png)\r\narr.concat() has better performance than arr.slice().",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/17033267/badge)](https://coveralls.io/builds/17033267)\n\nCoverage remained the same at 97.01% when pulling **349adc031454587d0e743d193ccea2a3c23a445e on CoderMing:master** into **3cd55ea9b40044b34bfe1ad90c25eb3ac777b158 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/17033267/badge)](https://coveralls.io/builds/17033267)\n\nCoverage remained the same at 97.01% when pulling **349adc031454587d0e743d193ccea2a3c23a445e on CoderMing:master** into **3cd55ea9b40044b34bfe1ad90c25eb3ac777b158 on jashkenas:master**.\n",
      "@CoderMing Thank you for taking the effort to submit a pull request.\r\n\r\nWould you mind extending the `clone` test in `test/objects.js` to add a check that `_.clone` on an array does indeed return a shallow copy and not the array itself? Once you do this, I'll take care of the merge conflicts for you.",
      "@CoderMing While you're at it, please apply this optimization also to `_.toArray` and please double-check whether there are any other places where it might be applicable. Thanks in advance.",
      "A quick test of my own didn't confirm the performance advantage. I just noticed that @CoderMing was doing `.slice(0)` instead of just `.slice()` in their microbenchmark, which might have disabled an optimization in the JS engine.\r\n\r\nClosing this until somebody offers stronger evidence that there is an actual performance benefit."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e048e3a21fa1e1f1aabc0",
    "number": 2757,
    "body": "In some cases, `_.countby()` and `_.groupBy()`, we want to support\r\narrays as valid keys, since they can be coerced to strings. In the other\r\ncases, the keys are known to always be strings anyway, so we can save\r\nhaving to do the `_.isArray` check.\r\n\r\nFixes #2756.",
    "head_branch": "shallow-has",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16925915/badge)](https://coveralls.io/builds/16925915)\n\nCoverage increased (+0.007%) to 97.01% when pulling **42b22b4b704526b32f6455c4081d369a4e78a3a8 on captbaritone:shallow-has** into **4bd6f69b33179517d4ff9f6020637d6f336c5f99 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/16928550/badge)](https://coveralls.io/builds/16928550)\n\nCoverage increased (+0.007%) to 97.01% when pulling **eac00391c5231e51a1ba7b88b90b99d33f749d64 on captbaritone:shallow-has** into **4bd6f69b33179517d4ff9f6020637d6f336c5f99 on jashkenas:master**.\n",
      "Let's call this internal function `hasOwnProperty` instead of `shallowHas`. After that, sounds good to me!",
      "We already have a [`hasOwnProperty`](https://github.com/jashkenas/underscore/blob/4bd6f69b33179517d4ff9f6020637d6f336c5f99/underscore.js#L30), which is the unbound version of `Object.prototype.hasOwnProperty`. \r\n\r\nMaybe we could rename that one to `nativeHasOwnProperty`?",
      "Oh, whoops. How about just `has()` ?\r\n\r\n**Edit:** Whatever you decide is best is fine by me.",
      "@jashkenas How do you want to run releases going forward? This seems like it could be part of a point release since it's technically a regression.",
      "Sure, I'd absolutely love to get all 1.9 regressions patched up in a quick 1.9.1..."
    ],
    "commit_messages": [
      "Merge pull request #2757 from captbaritone/shallow-has\n\nAdd `has` internal function"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e048f3a21fa1e1f1aabc1",
    "number": 2754,
    "body": "I see there are a few other PRs in; and figured the work from [Backbone PR 4193](https://github.com/jashkenas/backbone/pull/4193) would be useful here. There's actually room for some further refinement: more variables can be localized; and StandardJS+ESLint testing had flagged mixed AND/OR tests, that I tried to fix (the automation testing will have to judge that).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[testing.txt](https://github.com/jashkenas/underscore/files/1977115/testing.txt) Here are test results; they happen to be encoded with color codes from the utility.\r\n",
      "Closing this PR: reaction to the other PR was not well received; need to better come up with a way to fix the unit testing + whatnot; that would be acceptable here."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04903a21fa1e1f1aabc2",
    "number": 2753,
    "body": "Fix assertion description",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16807282/badge)](https://coveralls.io/builds/16807282)\n\nCoverage remained the same at 97.002% when pulling **e35f79f14552d24e4f5e0fb0e9bf35c6c2876ef4 on liroyleshed:patch-2** into **2851e9ae77eedd5bc5c4468e00b6185aa4dc99e6 on jashkenas:master**.\n",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2753 from liroyleshed/patch-2\n\nUpdate collections.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04913a21fa1e1f1aabc3",
    "number": 2750,
    "body": "I believe this is a typo.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16783333/badge)](https://coveralls.io/builds/16783333)\n\nCoverage remained the same at 97.002% when pulling **376c8328a42e060d25582859178d11da6ebfc8d8 on liroyleshed:patch-1** into **db82bae9cf9ca957d870f62a80d27369fe11bd71 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/16783333/badge)](https://coveralls.io/builds/16783333)\n\nCoverage remained the same at 97.002% when pulling **376c8328a42e060d25582859178d11da6ebfc8d8 on liroyleshed:patch-1** into **db82bae9cf9ca957d870f62a80d27369fe11bd71 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/16783333/badge)](https://coveralls.io/builds/16783333)\n\nCoverage remained the same at 97.002% when pulling **376c8328a42e060d25582859178d11da6ebfc8d8 on liroyleshed:patch-1** into **db82bae9cf9ca957d870f62a80d27369fe11bd71 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/16783333/badge)](https://coveralls.io/builds/16783333)\n\nCoverage remained the same at 97.002% when pulling **376c8328a42e060d25582859178d11da6ebfc8d8 on liroyleshed:patch-1** into **db82bae9cf9ca957d870f62a80d27369fe11bd71 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2750 from liroyleshed/patch-1\n\nUpdate arrays.js"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04923a21fa1e1f1aabc4",
    "number": 2748,
    "body": "Static checks should be done first as they catch errors that could probably be in the tests.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16718656/badge)](https://coveralls.io/builds/16718656)\n\nCoverage remained the same at 97.002% when pulling **a7d1ac4c5402e1b04c8409b36b7fc2c5f29bdc10 on DiegoRBaquero:patch-1** into **418881472698954828b742fead5207ccc6c826c9 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2748 from DiegoRBaquero/patch-1\n\nRun linting first then run tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04933a21fa1e1f1aabc5",
    "number": 2747,
    "body": "Issue: https://github.com/jashkenas/underscore/issues/2745\r\n\r\nchecks for certain array length values and returns an empty array rather than trying to construct an infinite array \r\n\r\n",
    "head_branch": "infinite-range-fix",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16676299/badge)](https://coveralls.io/builds/16676299)\n\nCoverage increased (+0.007%) to 97.01% when pulling **96772114eb0f16173aa710ca362d024073172d6f on lubelski:infinite-range-fix** into **418881472698954828b742fead5207ccc6c826c9 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/16676299/badge)](https://coveralls.io/builds/16676299)\n\nCoverage increased (+0.007%) to 97.01% when pulling **96772114eb0f16173aa710ca362d024073172d6f on lubelski:infinite-range-fix** into **418881472698954828b742fead5207ccc6c826c9 on jashkenas:master**.\n",
      "Closing this because #2745 has a \"wontfix\" label."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04943a21fa1e1f1aabc6",
    "number": 2744,
    "body": "PR for #2708",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16658324/badge)](https://coveralls.io/builds/16658324)\n\nCoverage remained the same at 97.002% when pulling **f7d174ae76f8609223263ff0099962777d612330 on alanzheng88:master** into **e859d35c50dac7d57420bc0950c2f2d6349eef1d on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2744 from alanzheng88/master\n\nInclude flattened array test case for allocation of empty array of size N"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04953a21fa1e1f1aabc7",
    "number": 2743,
    "body": "",
    "head_branch": "add-size-example",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16651851/badge)](https://coveralls.io/builds/16651851)\n\nCoverage remained the same at 97.002% when pulling **984867b09ee8d3551da55832182e1a4dc038c389 on nowke:add-size-example** into **e859d35c50dac7d57420bc0950c2f2d6349eef1d on jashkenas:master**.\n",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2743 from nowke/add-size-example\n\nAdd list example for _.size"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04963a21fa1e1f1aabc8",
    "number": 2739,
    "body": "var promise1 = new Promise(function(resolve, reject) {\r\n  setTimeout(resolve, 100, 'foo');\r\n});\r\n_.isPromise(promise1)\r\n//[object Promise]\r\n\r\n\r\nfunction* gen() { \r\n  yield 1;\r\n  yield 2;\r\n  yield 3;\r\n}\r\nlet g = gen();\r\n_.isGenerator(g)\r\n//[object Generator]",
    "head_branch": "dev",
    "is_a_fork": true,
    "comments": [
      "@zzq0826 Thank you for your contribution and apologies for the long silence. You'd be welcome to finish this PR. The structure of upstream Underscore has changed considerably in the meanwhile, however, so you'd basically have to start over:\r\n\r\n1. `git checkout master`.\r\n2. Pull latest version of the `master` branch into your local clone.\r\n3. `npm run install`: this updates the dev dependencies and installs commit hooks.\r\n4. `git checkout dev`.\r\n5. `git reset --hard master`.\r\n6. Create `modules/isGenerator.js` and `modules/isPromise.js`. You can imitate the code from `modules/isArrayBuffer.js`.\r\n7. Add `isGenerator` and `isPromise` to `modules/index.js`.\r\n8. Add tests for `isGenerator` and `isPromise` to `test/objects.js`.\r\n9. Add documentation for these functions to the `index.html`.\r\n\r\nPlease let me know whether you'd still like to make this contribution."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04973a21fa1e1f1aabc9",
    "number": 2738,
    "body": "var promise1 = new Promise(function(resolve, reject) {\r\n  setTimeout(resolve, 100, 'foo');\r\n});\r\n_.isPromise(promise1)\r\n//[object Promise]\r\n\r\n\r\nfunction* gen() { \r\n  yield 1;\r\n  yield 2;\r\n  yield 3;\r\n}\r\nlet g = gen();\r\n_.isGenerator(g)\r\n//[object Generator]",
    "head_branch": "dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04973a21fa1e1f1aabca",
    "number": 2736,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/16292885/badge)](https://coveralls.io/builds/16292885)\n\nCoverage remained the same at 97.002% when pulling **18f042510caec629f1d311697759263c097a9cb4 on iost-official:master** into **1bfc9f1fb811060c745e7025ec55e35f87c1d43b on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04983a21fa1e1f1aabcb",
    "number": 2732,
    "body": "undefined, en ....\r\n[undefined as an argument of argCount in optimizeCb (version 1.8.3)](https://github.com/jashkenas/underscore/issues/2731)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/15984618/badge)](https://coveralls.io/builds/15984618)\n\nCoverage remained the same at 97.002% when pulling **fd574a4b3c20c017a437cc52570ab048619183ca on xlshen:master** into **1bfc9f1fb811060c745e7025ec55e35f87c1d43b on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04993a21fa1e1f1aabcc",
    "number": 2730,
    "body": "TLDR:\r\n\r\n- PR - Summary: Patches _.intersection to ignore non Array values\r\n    - Adds 3 QUnit test testing against string, int, and object\r\n    - Uses Array.isArray() to determine whether something is an array\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/15873135/badge)](https://coveralls.io/builds/15873135)\n\nCoverage increased (+0.008%) to 96.77% when pulling **ba3a02d76f57e81247003b0e3d9d21d7642316e9 on miguelsolano:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15873135/badge)](https://coveralls.io/builds/15873135)\n\nCoverage increased (+0.008%) to 96.77% when pulling **ba3a02d76f57e81247003b0e3d9d21d7642316e9 on miguelsolano:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15873135/badge)](https://coveralls.io/builds/15873135)\n\nCoverage increased (+0.008%) to 96.77% when pulling **ba3a02d76f57e81247003b0e3d9d21d7642316e9 on miguelsolano:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15873135/badge)](https://coveralls.io/builds/15873135)\n\nCoverage increased (+0.008%) to 96.77% when pulling **ba3a02d76f57e81247003b0e3d9d21d7642316e9 on miguelsolano:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "Will there be any movement on this? Or will it most likely not be merged?",
      "I don't think we ought to just be silently ignoring non-array values. If we do go out of our way to sniff them, it would be to throw an error, not to omit.\r\n\r\nBut in general, we don't try to overly type-check every argument to every function. That isn't Underscore-style JS..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e049a3a21fa1e1f1aabcd",
    "number": 2729,
    "body": "I noticed the _.isEqual function does not  support Map and Set structure in ES6, when compared with two Set or Map variables ,it always return true.So I wrote some code to add support for Set and Map.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e049b3a21fa1e1f1aabce",
    "number": 2728,
    "body": "occurence ->\noccurrence",
    "head_branch": "fix-typo",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/15621566/badge)](https://coveralls.io/builds/15621566)\n\nCoverage remained the same at 96.763% when pulling **7faf6989428cdab551b21e690d90ca2b78af75d3 on okkez:fix-typo** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2728 from okkez/fix-typo\n\nFix a typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e049c3a21fa1e1f1aabcf",
    "number": 2726,
    "body": "uniqBy function added for getting duplicate-free version of the array of objects",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/15467406/badge)](https://coveralls.io/builds/15467406)\n\nCoverage increased (+0.05%) to 96.812% when pulling **fd95a89614b7bad130b9967951e5d47455551aa8 on gurhankokcu:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "Nice function, but too specific for core Underscore — feel free to mix it in to your copy..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e049d3a21fa1e1f1aabd0",
    "number": 2725,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/15614526/badge)](https://coveralls.io/builds/15614526)\n\nCoverage remained the same at 96.763% when pulling **b357159451c2eebd9322fff55eb712b159b4e53e on josephlin55555:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15334932/badge)](https://coveralls.io/builds/15334932)\n\nCoverage remained the same at 96.763% when pulling **342631173ef071a83e539b65f0bcbc70e0f317ed on josephlin55555:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15334932/badge)](https://coveralls.io/builds/15334932)\n\nCoverage remained the same at 96.763% when pulling **342631173ef071a83e539b65f0bcbc70e0f317ed on josephlin55555:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "So when will this be officially merged? Soon please. @jashkenas?",
      "Thanks for your patience."
    ],
    "commit_messages": [
      "Merge pull request #2725 from josephlin55555/master\n\n[Update] License to current year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e049e3a21fa1e1f1aabd1",
    "number": 2724,
    "body": "'is first element min/max borders (infinities)' check simplified. these changes also fixed the bug between iteratee and Infinity/-Infinity. \r\n\r\n[#2688](https://github.com/jashkenas/underscore/issues/2688)",
    "head_branch": "min-max-infinite-fix",
    "is_a_fork": true,
    "comments": [
      "Can anyone explain these errors?\r\n\r\n>**zip**\r\n>Died on test #5     at /home/travis/build/jashkenas/underscore/test/arrays.js:254:9\r\n>   at Object.<anonymous> (/home/travis/build/jashkenas/underscore/test/arrays.js:567:2)\r\n>   at Module._compile (module.js:449:26)\r\n>    at Object.Module._extensions..js (module.js:467:10)\r\n>   at Module.load (module.js:356:32)\r\n>   at Function.Module._load (module.js:312:12)\r\n>   at Module.require (module.js:362:17): Cannot read property 'length' of null\r\n>null != undefined\r\n> **max**\r\n> can handle null/undefined\r\n>-Infinity != null\r\n>**min**\r\n>can handle null/undefined\r\n>null != Infinity",
      "Does the error come from the fact that you use != instead of !==?",
      "@Sakarisson i don't think so but i'll try that"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e049f3a21fa1e1f1aabd2",
    "number": 2723,
    "body": "add `_.cloneDeep` function",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/15264100/badge)](https://coveralls.io/builds/15264100)\n\nCoverage increased (+0.06%) to 96.827% when pulling **4c974f4b854a2c711bc721a6dcca83cfca962ac5 on wy1009:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15264100/badge)](https://coveralls.io/builds/15264100)\n\nCoverage increased (+0.06%) to 96.827% when pulling **4c974f4b854a2c711bc721a6dcca83cfca962ac5 on wy1009:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15264100/badge)](https://coveralls.io/builds/15264100)\n\nCoverage increased (+0.06%) to 96.827% when pulling **4c974f4b854a2c711bc721a6dcca83cfca962ac5 on wy1009:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/15264100/badge)](https://coveralls.io/builds/15264100)\n\nCoverage increased (+0.06%) to 96.827% when pulling **4c974f4b854a2c711bc721a6dcca83cfca962ac5 on wy1009:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "@wy1009 Thanks for taking the effort to submit a pull request and sorry for the long silence!\r\n\r\nI just wanted to remark that you did a really good job. Your tests focus on the important things and the code is short and conventional.\r\n\r\nI think this should probably be submitted to Underscore-Contrib, but unfortunately that project is not open to pull requests anymore. I'm looking into a way to blow new life into it, however. @jashkenas let's keep this open in the meanwhile."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a03a21fa1e1f1aabd3",
    "number": 2720,
    "body": "Year range in LICENSE and underscore.js have been updated to 2018. \r\n\r\nTODO:\r\nConsider 2009-Present format to avoid future commits.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/14877456/badge)](https://coveralls.io/builds/14877456)\n\nCoverage remained the same at 96.763% when pulling **8e8abef538a6dea00f906f0d7d1e68dbfed09644 on sdbedi:master** into **5c237a7c682fb68fd5378203f0bf22dce1624854 on jashkenas:master**.\n",
      "We do this when we cut a new release, but thanks."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a13a21fa1e1f1aabd4",
    "number": 2715,
    "body": "When using an iteratee that is not a one-to-one function, and isSorted=true, then _.uniq would attempt to use the fast algorithm which fails for non one-to-one (injective) functions, because they map to resultant values which are not sorted.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This is my first pull request ever, so please, kindly point out if I am doing something wrong, or if I have made any mistakes. Thank you so much.",
      "Thanks! I updated the lines that the bot flagged, and now I will update the code with the comments that you added. In a minute I will make another commit.",
      "\n[![Coverage Status](https://coveralls.io/builds/14390254/badge)](https://coveralls.io/builds/14390254)\n\nCoverage remained the same at 96.763% when pulling **78a507a236c8baef7b7e5f0bf0b19011b607f767 on jojois74:master** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "I fixed the comments in the code as per your request. Let me know if you would like me to change anything else.",
      "\n[![Coverage Status](https://coveralls.io/builds/14390331/badge)](https://coveralls.io/builds/14390331)\n\nCoverage remained the same at 96.763% when pulling **644cd3c4bf64c04966b3bb5a59277bebfe01f4b3 on jojois74:master** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/14390331/badge)](https://coveralls.io/builds/14390331)\n\nCoverage remained the same at 96.763% when pulling **644cd3c4bf64c04966b3bb5a59277bebfe01f4b3 on jojois74:master** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/14390331/badge)](https://coveralls.io/builds/14390331)\n\nCoverage remained the same at 96.763% when pulling **644cd3c4bf64c04966b3bb5a59277bebfe01f4b3 on jojois74:master** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/14390331/badge)](https://coveralls.io/builds/14390331)\n\nCoverage remained the same at 96.763% when pulling **644cd3c4bf64c04966b3bb5a59277bebfe01f4b3 on jojois74:master** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "Nice work!",
      "Thank you, I really appreciate it!"
    ],
    "commit_messages": [
      "Merge pull request #2715 from jojois74/master\n\n[BUGFIX] (Bug #2714) For _.uniq which acted incorrectly on sorted lists using a non injective iteratee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a23a21fa1e1f1aabd5",
    "number": 2713,
    "body": "Added `isNumeric` function, to verify whether a variable is a number or a numeric string:\r\n```js\r\n_.isNumeric('12'); // true\r\n_.isNumeric(12); // true\r\n_.isNumeric('foo'); // false\r\n```",
    "head_branch": "feature/is-numeric",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/14309944/badge)](https://coveralls.io/builds/14309944)\n\nCoverage increased (+0.01%) to 96.774% when pulling **6203ed951246f60629f193d058aef61ac893e257 on GaryPEGEOT:feature/is-numeric** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/14309944/badge)](https://coveralls.io/builds/14309944)\n\nCoverage increased (+0.01%) to 96.774% when pulling **6203ed951246f60629f193d058aef61ac893e257 on GaryPEGEOT:feature/is-numeric** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/14309944/badge)](https://coveralls.io/builds/14309944)\n\nCoverage increased (+0.01%) to 96.774% when pulling **6203ed951246f60629f193d058aef61ac893e257 on GaryPEGEOT:feature/is-numeric** into **65e18d477caacaff9826dbe6c0247478577567fe on jashkenas:master**.\n",
      "It's a fine function, but not, I think, something that we want for core Underscore..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a33a21fa1e1f1aabd6",
    "number": 2711,
    "body": "```\r\nvar child = {}\r\nchild.prototype = obj\r\n// child: { prototype: obj, __proto__: Object }\r\n```\r\nThis is not a prototype chain case.\r\n```\r\nfunction Child() {}\r\nChild.prototype = obj\r\nvar child = new Child()\r\n// child: { __proto__: obj }\r\n```",
    "head_branch": "fix",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/14069756/badge)](https://coveralls.io/builds/14069756)\n\nCoverage remained the same at 96.763% when pulling **14d1d582d57198813a150ea21fb259ab528284d2 on wy1009:fix** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2711 from wy1009/fix\n\nfixed bug in test case"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a43a21fa1e1f1aabd7",
    "number": 2710,
    "body": "```\r\nvar child = {}\r\nchild.prototype = obj\r\n// child: { prototype: obj, __proto__: Object }\r\n```\r\nThis is not a prototype chain case.\r\n```\r\nfunction Child(){}\r\nChild.prototype = obj\r\nvar child = new Child()\r\n// child: {__proto__: obj}\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a53a21fa1e1f1aabd8",
    "number": 2707,
    "body": "`isUndefined` currently checks that a variable is declared but not defined. it should check that a variable's type is `undefined`. \r\n\r\nfor example:\r\n```js\r\nvar un;\r\n_.isUndefined(un); // true\r\n_.isUndefined(notDeclared) // ReferenceError notDeclared is not defined\r\n```\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/13923849/badge)](https://coveralls.io/builds/13923849)\n\nCoverage remained the same at 96.763% when pulling **5f69326129cb745854f19350919f62c2311d4db4 on jeffborders:master** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/13923849/badge)](https://coveralls.io/builds/13923849)\n\nCoverage remained the same at 96.763% when pulling **5f69326129cb745854f19350919f62c2311d4db4 on jeffborders:master** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "That would be nice! The problem, though, is that the ReferenceError is not thrown in underscore's `isUndefined` function, it is thrown in your application code. Therefore, this isn't possible for underscore to guard against this, since the problem occurs in the application code. You can see this if you examine the ReferenceError in your example, or if you try adding a test to underscore for this change.",
      "@craigmichaelmartin you're absolutely right. i just realized that myself after writing a test."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a63a21fa1e1f1aabd9",
    "number": 2704,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/13790631/badge)](https://coveralls.io/builds/13790631)\n\nCoverage remained the same at 96.763% when pulling **c81ad1a1174702be4a81a9342ab698e9fe15d159 on MiltonAkash:master** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "Cool, looks good!"
    ],
    "commit_messages": [
      "Merge pull request #2704 from MiltonAkash/master\n\nFixed broken link in Has section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a73a21fa1e1f1aabda",
    "number": 2703,
    "body": "Fixes #2699\r\n\r\nAs per [8th Edition - ECMAScript 2017](http://www.ecma-international.org/ecma-262/8.0/index.html#sec-array-len).  :octocat: ",
    "head_branch": "iamnapo-max_Array_index-fix",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/13754908/badge)](https://coveralls.io/builds/13754908)\n\nCoverage remained the same at 96.763% when pulling **b445d1ec9cb3f9a001162362f0c722686b218596 on iamnapo:iamnapo-max_Array_index-fix** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "Looks good to me!",
      "Should this still be open?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a83a21fa1e1f1aabdb",
    "number": 2702,
    "body": "Added 3 new collection functions:\r\n\r\n- **pickIndex**: `_.pickIndex(collection, *values)`\r\nReturns a copy of a given **collection** with the elements of the specified indexes. Values higher than the length of the collection are ignored.\r\n```\r\n_.pickIndex([123, 321, {a: 1}, 'hello', 'bye'], 1, 3, 8);\r\n=> [321, 'hello']\r\n```\r\n\r\n- **omitIndex** (alias **withoutIndex**): `_.omitIndex(collection, *values)`\r\nReturns a copy of a given **collection** without the elements of the specified indexes. Values higher than the length of the collection are ignored. Opposite to `_.pickIndex`.\r\n```\r\n_.omitIndex([123, 321, {a: 1}, 'hello', 'bye'], 1, 3, 8);\r\n=> [123, {a: 1}, 'bye']\r\n```\r\n\r\n- **permute**: `_.permute(collection)`\r\nReturns a **collection** with all possible permutations of the elements of a given collection.\r\n```\r\n_.permute([1, 2, 3]);\r\n=> [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/13527520/badge)](https://coveralls.io/builds/13527520)\n\nCoverage decreased (-0.6%) to 96.127% when pulling **6183de35d71feb6bde175528b948f3155ffd6f6a on jhereu:master** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "Cool functions, but not commonly-used enough to merge into Underscore. Give Underscore-Contrib a try: https://github.com/documentcloud/underscore-contrib"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a93a21fa1e1f1aabdc",
    "number": 2700,
    "body": "Sorry for misoperation",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04a93a21fa1e1f1aabdd",
    "number": 2696,
    "body": "Fixes #2695 \r\n\r\nIn the current approach, if `min` value is, for example `1.3`, `_.random` can produce values starting at `1.3`, it's an edge case, but with smaller ranges it's more probable.\r\n\r\nI used `Math.round` to change the `min` value into an integer, but if this is not the best behavior I'm happy to change it :).\r\n\r\nCurrent implementation:\r\n```\r\n  _.random = function(min, max) {\r\n    if (max == null) {\r\n      max = min;\r\n      min = 0;\r\n    }\r\n    return min + Math.floor(Math.random() * (max - min + 1));\r\n  };\r\n```\r\n\r\nNew implementation:\r\n```\r\n  _.random = function(min, max) {\r\n    if (max == null) {\r\n      max = min;\r\n      min = 0;\r\n    }\r\n    return Math.round(min) + Math.floor(Math.random() * (max - min + 1));\r\n  };\r\n```\r\n\r\nAnother approach I thought of was:\r\n`return Math.round(min + Math.floor(Math.random() * (max - min + 1)));`\r\nbut I would like to hear your thoughts.\r\n\r\nHere are some jsperf snippets: https://jsperf.com/underscore-random2",
    "head_branch": "random-ensure-integer",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/13004701/badge)](https://coveralls.io/builds/13004701)\n\nCoverage remained the same at 96.763% when pulling **af445eaf3252a087f86549c0c039a3a1c441d5a1 on VzqzAc:random-ensure-integer** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "Thanks for taking the initiative! I think you account for a piece of the problem, but there is still another aspect.\r\n\r\nIndeed, the `min` acts in part as the \"base\" that the random number will be added to, and so having a non-integer \"base\" number will offset any random number with the same decimals. Your proposed implementation correctly handles this.\r\n\r\nHowever the `min` value is also used in conjunction with the `max` to distribute the random number across the desired range. Having a non-integer `min`/`max` affects this distribution, resulting in a returned \"random\" value is not, in fact, correctly proportioned (uniformly distributed) from the range. Your proposed implementation does not account for this.\r\n\r\nWith the proposed implementation:\r\n```diff\r\nrandom = function(min, max) {\r\n  if (max == null) {\r\n    max = min;\r\n    min = 0;   \r\n  }\r\n- return min + Math.floor(Math.random() * (max - min + 1));\r\n+ return Math.round(min) + Math.floor(Math.random() * (max - min + 1));\r\n};\r\n```\r\n\r\n```javascript\r\nconst arr = [0, 0, 0, 0];\r\nfor (var i = 0; i< 10000; i++) {\r\n  arr[random(1.49, 3)]++\r\n};\r\narr // [0, 4042, 4016, 1942]\r\n// random numbers are indeed integers, but not uniformly distributed\r\n```\r\n\r\nIf we round both numbers at the outset, both issues are resolved:\r\n```diff\r\nrandom = function(min, max) {\r\n  if (max == null) {\r\n    max = min;\r\n    min = 0;\r\n  }\r\n+ max = Math.round(max);\r\n+ min = Math.round(min);\r\n  return min + Math.floor(Math.random() * (max - min + 1));\r\n};\r\n```\r\n\r\n```javascript\r\nconst arr = [0, 0, 0, 0];\r\nfor (var i = 0; i< 10000; i++) {\r\n  arr[random(1.49, 3)]++\r\n};\r\narr // [0, 3348, 3344, 3308]\r\n// random numbers are indeed integers, and are uniformly distributed\r\n```\r\n",
      "Right! I totally missed `max` and your explanation makes a lot of sense, though, as you can see in my first comment\r\n> Another approach I thought of was:\r\n> `return Math.round(min + Math.floor(Math.random() * (max - min + 1)));`\r\n\r\nDo you think that works? Now after your comment I think it'd be better to go by your proposed solution so the random number is taken from both `max` and `min` properly sanitized, instead of deforming the resulted random.\r\n\r\nMaking the proposed changes asap, and thanks for pointing it out!",
      "Happy to help! Unfortunately, your alternative approach still succumbs to the range distribution problem, since you're rounding after the range is specified (`max - min + 1`). Thanks for tackling this issue! It remains to be seen whether the maintainers want to support this case.\r\n",
      "I don't think we do want to \"support\" this case, because the function is supposed to work with integers. If we were returning a random float between `min` and `max`, this would be different.\r\n\r\nInstead, you can round before you call `random`"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04aa3a21fa1e1f1aabde",
    "number": 2694,
    "body": "supersedes #2693 fixes #2692 , feedback welcome, ",
    "head_branch": "typed_array_eq",
    "is_a_fork": true,
    "comments": [
      "Looking good! Let's add one more check to make sure ArrayBuffer is an object that exists in the runtime before starting, and I think we're there.",
      "Yes I see the error. What's the best way to check. `window.ArrayBuffer` or `root.ArrayBuffer`? And I also have to skip the tests, there I don't have a reference to root, can I use window?",
      "Why don't you test and cache a `typeof ArrayBuffer` check up at the top of Underscore, and then just check the variable within the deepEquals. You can't use `window`.",
      "Great. Do you mind cleaning up the formatting and making it nice -- like the rest of the surrounding code? Spaces near parens, semicolons, and so on...",
      "Yeah, installing eslint as we speak, the only issue that I don't know to tackle yet is node 0.8 which doesn't seem to support isView.",
      "\n[![Coverage Status](https://coveralls.io/builds/12901539/badge)](https://coveralls.io/builds/12901539)\n\nCoverage increased (+0.04%) to 96.801% when pulling **81e5bf79e9cb8918ba1b9709e8706450b04ec665 on maartenbreddels:typed_array_eq** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "> the only issue that I don't know to tackle yet is node 0.8 which doesn't seem to support isView.\r\n\r\nIt doesn't? That seems like a bit of a dealbreaker.",
      "\n[![Coverage Status](https://coveralls.io/builds/12901833/badge)](https://coveralls.io/builds/12901833)\n\nCoverage increased (+0.05%) to 96.812% when pulling **d73f20cd67361e879aca6c93d5302c84831e6703 on maartenbreddels:typed_array_eq** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "Do we care to support node 0.8? [Last release](https://nodejs.org/en/download/releases/) was 2014.",
      "> Do we care to support node 0.8? Last release was 2014.\r\n\r\nFair enough, then. ",
      ">> Do we care to support node 0.8? Last release was 2014.\r\n\r\n> Fair enough, then.\r\n\r\nMoot point since d73f20c solves that case too, right?",
      "It seems like everyone was OK with this PR. Any chance of getting it merged?",
      "@jashkenas Could you have another look and confirm that you still approve of this? If you do, I can take care of the merge conflicts.\r\n\r\nI can also add `isTypedArray` to the exports and polish its implementation a little bit, if you like. Personally, I'd make that a condition for merging.",
      "Sounds like a fine plan to me. It would also be great if we could drop that big list of `toString` fallback name checks, if they’re not necessary for modern JS environments anymore."
    ],
    "commit_messages": [
      "Merge branch 'master' into typed_array_eq (#2694)\n\nThis moves the patch into the index.js and also updates the typed\narray information a little bit."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ab3a21fa1e1f1aabdf",
    "number": 2693,
    "body": "Types much match for typed arrays, and for all of them the byte content must be equal. Fixes #2692",
    "head_branch": "typed_array_eq",
    "is_a_fork": true,
    "comments": [
      "Happy to fix this, but we're not going to throw a naked try with an unrestricted catch right in the middle there.",
      "Ok, a more constructive reply would be appreciated. You're welcome."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ac3a21fa1e1f1aabe0",
    "number": 2687,
    "body": "manytime we want to combine two object array through some properties  they own , we just need to put two object arrays into the function and point out the property . we can get the result.",
    "head_branch": "ershing-patch-1",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/12240323/badge)](https://coveralls.io/builds/12240323)\n\nCoverage decreased (-0.2%) to 96.6% when pulling **fa92b057e481c377b8578ff48e937004fc1d2452 on ershing:ershing-patch-1** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/12240323/badge)](https://coveralls.io/builds/12240323)\n\nCoverage decreased (-0.2%) to 96.6% when pulling **fa92b057e481c377b8578ff48e937004fc1d2452 on ershing:ershing-patch-1** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/12240350/badge)](https://coveralls.io/builds/12240350)\n\nCoverage decreased (-0.2%) to 96.596% when pulling **65b1ae0ef6ce058f26643424fcc7a0a3cd69a028 on ershing:ershing-patch-1** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/12240442/badge)](https://coveralls.io/builds/12240442)\n\nCoverage increased (+0.07%) to 96.831% when pulling **ae43b1b22483b0625a3193ee5a6ab81bbe836f38 on ershing:ershing-patch-1** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "No thanks. Feel free to host this as a plugin yourself."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ad3a21fa1e1f1aabe1",
    "number": 2686,
    "body": "manytime we want to combine two object array through some properties  they own , we just need to put two object arrays into the function and point out the property . we can get the result.",
    "head_branch": "ershing-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ae3a21fa1e1f1aabe2",
    "number": 2685,
    "body": "manytime we want to combine two object array through some properties  they own , we just need to put two object arrays into the function and point out the property . we can get the result.",
    "head_branch": "ershing-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04af3a21fa1e1f1aabe3",
    "number": 2684,
    "body": "manytime we want to combine two object array through some properties  they own , we just need to put two object arrays into the function and point out the property . we can get the result.",
    "head_branch": "ershing-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b03a21fa1e1f1aabe4",
    "number": 2682,
    "body": "manytime we want to combine two object array through some properties  they own , we just need to put two object arrays into the function and point out the property . we can get the result.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b13a21fa1e1f1aabe5",
    "number": 2681,
    "body": "From issue https://github.com/jashkenas/underscore/issues/2676\r\n\r\nI adapt this function from existing one `findKey`, but tell me if you think about other needed test/documentation.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://:/builds/12032794/badge)](https://:/builds/12032794)\n\nCoverage increased (+0.02%) to 96.786% when pulling **9d66959ac87beca8f2da520dc91e5ac3aed6a308 on FabriceGaudin:master** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "`_.findKeys` is a nice method! For what ever it is worth, you could also save some bytes on `_.filter` by using `_.findKeys`:\r\n\r\n    _.filter = function(obj, predicate, context) {\r\n      return _.map(_.findKeys(obj, predicate, context), function(key) {\r\n        return obj[key];\r\n      });\r\n    };\r\n\r\nThat may or may not be desirable because it would probably entail a little bit less efficiency. Much of that efficiency could probably be gained back by not declaring `allKeys = _.keys(obj)` within `_.findKeys` and letting `_.each` decide when to use `_.keys` instead, depending on whether the object is array-like. This would mean calling `_.each` on the object itself, and using the second argument that `_.each` gives to the iteratee.\r\n\r\nThis version of `_.findKeys` would be a little bit shorter and look something like this:\r\n\r\n    _.findKeys = function(obj, predicate, context) {\r\n      predicate = cb(predicate, context);\r\n      var res = [];\r\n      _.each(obj, function(value, key) {\r\n        if (predicate(value, key, obj)) res.push(key);\r\n      });\r\n      return res;\r\n    };\r\n\r\nIn that respect, `_.findKeys` could be a collection method. Regardless of what you think about that `_.filter` method implementation, I think it is worth considering the update to `_.findKeys`. `_.findKeys` is just as useful for finding indexes in an array or array-like as in an object, so `_.each`'s behavior with array-likes is desirable.\r\n\r\nN.B. I have not tested these implementations of `_.filter` or `_.findKeys`, but they are accurate to the best of my knowledge.",
      "@anvyne I think this implementation is great, but after testing it, `_.each` doesn't make findKeys pass [this test](https://github.com/jashkenas/underscore/pull/2681/commits/9d66959ac87beca8f2da520dc91e5ac3aed6a308#diff-56642018eb131d449a77225aa1a59123R1138) (which comes directly from [this one](https://github.com/jashkenas/underscore/blob/master/test/objects.js#L1095-L1098)).\r\nThe array `[ 1, 2, 3, 4, match: 55 ]` passes `isArrayLike`, so it doesn't use `_.keys` method and length is still 4. I don't really understand when we have to deal with this kind of array, do you know what should be the correct behavior ?\r\n\r\nIf we manage to modify findKeys as a collection method, I totally agree to use it in `_.filter`\r\n\r\n",
      "There is a sort of precedence, actually, if we look at `_.find`, which is analogous to `_.filter`.  `_.find` returns the first value that passes a truth test, while `_.filter` returns all values that pass a truth test. \r\n\r\n`_.find` decides whether to use `_.findIndex` or `_.findKey` depending on whether the passed in object is array-like or not. It would be symmetrical to implement `_.filter` in an analogous way. However, there is no method `_.findIndexes`.\r\n\r\nArguably, if there exists the object method `_.findKeys`, then there should also exist the array method `_.findIndexes`, and `_.findKeys` should only behave like an object method (that is, in a way that searches all keys regardless of whether the passed object is array-like or not). It would be appropriate to treat array-likes differently than other objects only if `_.findKeys` were a collection method. \r\n\r\nHowever, adding another method like `_.findIndexes` would need careful consideration because it is ideal to keep Underscore short. See #2060. That's not to say that `_.findIndexes` definitely should not also be implemented.\r\n\r\nIf `_.findIndexes` were to never be implemented, then I would prefer a `_.findKeys` collection method to a `_.findKeys` object method because it would probably be more useful even though it would be a slight misnomer and a break of precedence. The ideal situation, however, is to have both `_.findIndexes` and `_.findKeys`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b23a21fa1e1f1aabe6",
    "number": 2678,
    "body": "In debounce function, when immediate is false, since use the\r\nsetTimeout (_.delay), when debounced function return result, the result value is always undefined.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/11898481/badge)](https://coveralls.io/builds/11898481)\n\nCoverage remained the same at 96.763% when pulling **043e91284ab9ffed1e25d66e811eb053e1cc1306 on mqyqingfeng:master** into **20e7c6e164085e832b6140acc690d6f66f7f6c63 on jashkenas:master**.\n",
      "This is working as intended."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b33a21fa1e1f1aabe7",
    "number": 2674,
    "body": "[`contains` has two aliases `include` and `includes`](https://github.com/jashkenas/underscore/blob/master/underscore.js#L288)\r\nThis patch adds `include` to documentation\r\n",
    "head_branch": "add_missing_alias_to_doc",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/11699040/badge)](https://coveralls.io/builds/11699040)\n\nCoverage remained the same at 96.763% when pulling **255acbf2585bfd0541f647b242206929babe1587 on matildasmeds:add_missing_alias_to_doc** into **67e43b6665f285aa928a841744f405f6656b6085 on jashkenas:master**.\n",
      "Thanks for this! Could you also update the `data-aliases` attribute in the table of contents so that search works properly for this alias?",
      "Updated.",
      "\n[![Coverage Status](https://coveralls.io/builds/11706642/badge)](https://coveralls.io/builds/11706642)\n\nCoverage remained the same at 96.763% when pulling **25fce7d1dc881012610102c45ba42d266dc793a0 on matildasmeds:add_missing_alias_to_doc** into **67e43b6665f285aa928a841744f405f6656b6085 on jashkenas:master**.\n",
      "Thanks! Might as well be explicit.",
      "I'll cherry pick this onto fh-pages later today."
    ],
    "commit_messages": [
      "Merge pull request #2674 from matildasmeds/add_missing_alias_to_doc\n\nAdd missing function alias to documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b43a21fa1e1f1aabe8",
    "number": 2672,
    "body": "Review @craigmichaelmartin @dragmove ",
    "head_branch": "foo",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/11652336/badge)](https://coveralls.io/builds/11652336)\n\nCoverage remained the same at 96.763% when pulling **2986782bf77d7d51f9dafd618c3d37ce660f55cf on captbaritone:foo** into **67e43b6665f285aa928a841744f405f6656b6085 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2672 from captbaritone/foo\n\nRemove note made obsolete by #2670"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b53a21fa1e1f1aabe9",
    "number": 2670,
    "body": "hello :) I've discovered issue of example _.times method in index.html file.\r\n\r\nI just have changed\r\n<pre>_(3).times(function(n){ genie.grantWishNumber(n); });</pre>\r\nto\r\n<pre>_.times(3, function(n){ genie.grantWishNumber(n); });</pre>.\r\n\r\nAlways thanks to underscore. :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/11614690/badge)](https://coveralls.io/builds/11614690)\n\nCoverage increased (+1.6%) to 96.763% when pulling **a5382eded529dbcbabf47304e60756a23b11bc04 on dragmove:master** into **d4f52aa6966b096512d57ee553b3d9355cc5b49e on jashkenas:master**.\n",
      "This is a valid, although under-documented syntax in Underscore. See: <http://underscorejs.org/#oop>.",
      "Sure, and this syntax is even called out before the example. That said, why introduce complexity to someone trying to understand the method? An example of using just the function at hand seems more helpful.",
      "Fair point. I think there is a trade off between standardizing the docs around the `_.` Syntax and including examples of the OOP style.\n\nIncluding the OOP examples could help raise awareness of the OOP style, but can be more confusing if you have not come across the OOP style yet. It's kinda a chicken and egg situation.\n\nI suppose as core devs we should decide how we want to promote or deprioritize the OOP style.\n\nIf we want to think of OOP as an equally valid syntax, we should add _more_ examples to the docs. If we want to deprioritize it, we should scrub all examples outside of the OOP-specific docs.\n\nOne downside of deprioritizing is that when you do come across OOP code in your code base, it can be extremely hard to figure out what's going on.\n\nThoughts?\n--\nJordan Eldredge (mobile)\n\n> On May 22, 2017, at 5:38 AM, Craig Martin <notifications@github.com> wrote:\n> \n> Sure, and this syntax is even called out before the example. That said, why introduce complexity to someone trying to understand the method? An example of using just the function at hand seems more helpful.\n> \n> —\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
      "\n[![Coverage Status](https://coveralls.io/builds/11636842/badge)](https://coveralls.io/builds/11636842)\n\nCoverage increased (+1.6%) to 96.763% when pulling **a5382eded529dbcbabf47304e60756a23b11bc04 on dragmove:master** into **d4f52aa6966b096512d57ee553b3d9355cc5b49e on jashkenas:master**.\n",
      "My two cents: what is described as the \"functional style\" is the canonical form; it uses the methods according to the signature they actually have. The OOP style offers a convenient wrapper which just applies the wrapped value to the canonical form. Given that, I would think all examples (except the OOP one) should use the functional style.\r\n\r\n> If we want to think of OOP as an equally valid syntax, we should add _more_ examples to the docs. If we want to deprioritize it, we should scrub all examples outside of the OOP-specific docs.\r\n\r\nCurrently the docs treat the functional style as the canonical form - not because of the examples but because each function (eg, `each`) is exposed as a property on `_` (`_.each(list, iteratee, [context])`) and not as a instance method on an `_` instance (see the function header http://underscorejs.org/#each). I think demonstrating the function using an instance of `_` with the function under consideration put on the prototype as a mixin is inconsistent with how the function is presented, and introduces unnecessary complexity to understand the example.\r\n\r\n> One downside of deprioritizing is that when you do come across OOP code in your code base, it can be extremely hard to figure out what's going on.\r\n\r\nFor sure. I think if we go this route (and actually even if we don't) we should surface the OOP section when querying for `_(` and `(` on the underscore site.",
      "@craigmichaelmartin Agreed. Let's do it. I'll merge this and followup with a PR to remove the note about OOP style. Improve searching to account for for `_(` and `(` will take a little bit of shuffling. @dragmove, is that something you would like to look into? The code lives in `docs/main.js`."
    ],
    "commit_messages": [
      "Merge pull request #2670 from dragmove/master\n\ncorrect _.times example in index.html"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b63a21fa1e1f1aabea",
    "number": 2666,
    "body": "You must repeat the tests 10 times per one test session or more to see the difference.\r\nIE and Edge shows difference more then Firefox and especially Chrome.",
    "head_branch": "v1.9.0",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10879360/badge)](https://coveralls.io/builds/10879360)\n\nCoverage increased (+0.005%) to 96.301% when pulling **e7ee64c6038b424dd85be0834ccfcdde5c7ee044 on NightmareZ:v1.9.0** into **d9f4f7648ff38c86cc7456e42df9bd7b97847df4 on jashkenas:v1.9.0**.\n",
      "What was your methodology for measuring the performance change? Can you share some reproduceable benchmarks?",
      "Just add on first string to each test file this code:\r\n`for (var kkk = 0; kkk < 10; ++kkk)`",
      "@NightmareZ I'm not sure I follow. Could you include a full benchmark that others can run? Perhaps on https://jsperf.com/ ?\r\n\r\nPerformance is very nuanced and I doubt we will merge a change that has such a minor improvement, since it's hard to know how it might behave (negatively) in other environments/interpreters. If you are passionate about getting this change merged, you will need to make it easy for others to see what the affect is across different browsers.",
      "default version tests (x20):\r\nhttps://cdn.russiancoders.ru/underscore-test/default/test/index.html\r\n\r\noptimized version tests (x20):\r\nhttps://cdn.russiancoders.ru/underscore-test/optimized/test/index.html",
      "Edge (std):  348290 ms\r\nEdge (opt):  347261 ms\r\n\r\n\r\n",
      "Our test suite is not intended to be used as a performance test. Performance benchmarks must be carefully written to ensure that they actually measure the thing that you think they are measuring. JavaScript engines (like Chakra or V8) do all kinds of advanced optimizations to your code depending upon how it is being run. This means that unless you write your test very carefully, you might see a huge speedup simply because (for example) your test was written in such a way that the JavaScript engine was able to figure out that your code didn't have any side affects, and thus never ran the code at all!\r\n\r\nJavaScript performance benchmarking is a very interesting area. If you are interested in learning more, I think this talk is a good place to start:\r\n\r\nhttps://www.youtube.com/watch?v=65-RbBwZQdU",
      "I'm going to close this pull request for now. If you end up writing some robust benchmark tests feel free to comment here and we can look at them more deeply. Thanks for taking the time to work on Underscore!",
      "Former Chakra perf PM, currently on the Edge team here: FWIW I actually get the `opt` version taking 2ms longer. I know from my Chakra days that it's more sensitive than other engines with respect to `arguments` objects and it doesn't like passing `arguments` to functions. In many cases that will cause it to creating the full `arguments` object (stack and variable binding behavior in all). This PR seemed sketchy from the jump."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b73a21fa1e1f1aabeb",
    "number": 2660,
    "body": "Certain test frameworks override Date.now to match their stubbed\r\nversions of `setTimeout`, `setInterval`, etc.  While Underscore works\r\nwell with replaced versions of those function (because it gets the\r\ncurrent copy each time they are used), this isn't true of the `Date.\r\nnow` function, which is cached when Underscore is first initialized.\r\n\r\nThis change ensures that Underscore uses the current version of the\r\n`Date.now` function each time it is called for, and therefore\r\nimproves compatibility with such test libraries.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10444248/badge)](https://coveralls.io/builds/10444248)\n\nCoverage decreased (-1.6%) to 95.137% when pulling **03e6d3bb0723c3f98f0a7a0bc8d68056a453512e on andrewminer:master** into **49e8d76450fe188e1ec66eb5c6d80888b4905c48 on jashkenas:master**.\n",
      "To add a little detail about this PR...  I'm using [sinon.js](http://sinonjs.org/) with its [fake timers](http://sinonjs.org/releases/v1.17.7/fake-timers/) functionality in a project, and I ran into a problem where a `debounce`'d function was never called, even though I advanced the fake clock well beyond the time when the debounce was expired.  After much digging around, I figured out that this was because the `_.now` function was initialized to equal `Date.now` and was never updated thereafter to use the version provided by the timer stub.  The disagreement between `setTimeout` and `Date.now` caused the `debounce` function not to work properly.\r\n\r\nWhile there are a many ways to address the issue, I figured this would be the simplest all around, and it matches the general policy in the rest of Underscore's code of not caching such functions internally.",
      "I don't know about this — the current Underscore semantics seem more desirable than looking up `Date.now` every time.\r\n\r\nWouldn't a cleaner fix be to ensure that Sinon's Date stubbing (and any other global object manipulation) is the first thing that runs in your tests? \r\n\r\nIt seems to me like if that global manipulation *doesn't* run first, all bets are off in general.",
      "> Wouldn't a cleaner fix be to ensure that Sinon's Date stubbing (and any other global object manipulation) is the first thing that runs in your tests?\r\n\r\nI did try that at first, but while I was trying to get that straightened out, I noticed that Underscore's use of `setTimeout` and similar functions does *not* get cached, and therefore was working properly.  I figured it made sense that Underscore should be consistent in either caching or not caching functions used from the global namespace.  Since the caching was causing me problems, I opted to move things toward \"not caching\".\r\n\r\nIt turns out Lodash had a similar problem (https://github.com/lodash/lodash/issues/304), and they solved it by offering a work around using their `runInContext` function.  Since Underscore doesn't have such a mechanism, and was really only one small change away from supporting Sinon, I thought it would be nice to save others the confusion.  If it was something Lodash got enough complaints about to address, I figured you would like to have a fix as well.\r\n\r\nOf course, I'll trust your judgement on what works best for Underscore.",
      "Just wanted to check in on this PR.  I'm happy to close it if you don't think it would make a good addition to Underscore, but it would good to resolve it one way or the other.  😉 ",
      "Just thinking it through from first principles, Underscore is *not* the only library or piece of third-party code that might be using `setTimeout` and `Date.now`. The correct way to do this is to load Sinon's global object modifications as the first thing on the page. Otherwise Sinon forces every other JavaScript library to patch themselves to accommodate."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b83a21fa1e1f1aabec",
    "number": 2658,
    "body": "Updated copyright year from 2015 to 2017.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10329189/badge)](https://coveralls.io/builds/10329189)\n\nCoverage remained the same at 96.763% when pulling **d3e973b84922ef821cb317140db58d5fd3b26e02 on bernard-lin:master** into **cab89031a17890f69441624fe8e0cc3cac3f4817 on jashkenas:master**.\n",
      "Thanks!",
      "I missed that this was a generated doc. This will get overwritten the next time we release.",
      "Oops, sorry!",
      "No worries. My fault for not noticing."
    ],
    "commit_messages": [
      "Merge pull request #2658 from bernard-lin/master\n\nUpdated copyright year"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b83a21fa1e1f1aabed",
    "number": 2657,
    "body": "_.segmentize function to split numeric arrays into arrays of consequent values, i.e.:\r\n[1,2,3,4,5,10,11,12,20,30,31,40,41,42] => [ [1,2,3,4,5], [10,11,12], [20], [30,31], [40,41,42] ]\r\nUseful in mathematical calculations, plotting graphs, etc.\r\n\r\n_.isNumericArray function to verify numeric arrays",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks, but this is too special-case to be included in Underscore."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04b93a21fa1e1f1aabee",
    "number": 2656,
    "body": "Adds tests that @jdalton and @megawac [mentioned in this PR](https://github.com/jashkenas/underscore/pull/2452#r54429238)\r\n\r\n> jdalton on Feb 29, 2016 Contributor\r\n> Should add a test for _.isEqual(Symbol('x'), Symbol('y')) of false.\r\n\r\n> megawac on Feb 29, 2016 Collaborator\r\n> Yeah probably for _.isEqual(Symbol('a'), Symbol('a')) as false as well",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10188844/badge)](https://coveralls.io/builds/10188844)\n\nCoverage remained the same at 96.763% when pulling **efece898cfd470fd1e7ae4c150be8ee82911636a on wwwoodall:master** into **731d8d43f8fa75f2e236542a28ef46fe77d704c8 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10188844/badge)](https://coveralls.io/builds/10188844)\n\nCoverage remained the same at 96.763% when pulling **efece898cfd470fd1e7ae4c150be8ee82911636a on wwwoodall:master** into **731d8d43f8fa75f2e236542a28ef46fe77d704c8 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10188844/badge)](https://coveralls.io/builds/10188844)\n\nCoverage remained the same at 96.763% when pulling **efece898cfd470fd1e7ae4c150be8ee82911636a on wwwoodall:master** into **731d8d43f8fa75f2e236542a28ef46fe77d704c8 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2656 from wwwoodall/master\n\nAdd specs to Symbol"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ba3a21fa1e1f1aabef",
    "number": 2655,
    "body": "Update documentation and website as mentioned in #2622.",
    "head_branch": "docs-compact-array",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10169038/badge)](https://coveralls.io/builds/10169038)\n\nCoverage remained the same at 96.763% when pulling **1674e0f396bcdd8db60faa84467f7fe0479618a5 on wotkuni:docs-compact-array** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #2655 from wotkuni/docs-compact-array\n\nDocs: move _.compact to Collections section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04bb3a21fa1e1f1aabf0",
    "number": 2654,
    "body": "This is Samuel answer and mine to this issue:\r\n\r\nhttps://github.com/jashkenas/underscore/issues/2653",
    "head_branch": "feature/empty-deep-object-validation",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10133021/badge)](https://coveralls.io/builds/10133021)\n\nCoverage increased (+0.03%) to 96.797% when pulling **a22b806708cd862e16369f4aaa226f7a655079d6 on ftrianakast:feature/empty-deep-object-validation** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04bc3a21fa1e1f1aabf1",
    "number": 2652,
    "body": "",
    "head_branch": "search-dot-under",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10101680/badge)](https://coveralls.io/builds/10101680)\n\nCoverage remained the same at 96.763% when pulling **3917430f94ea7e4036c901162d50065d7fdae4aa on captbaritone:search-dot-under** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10101680/badge)](https://coveralls.io/builds/10101680)\n\nCoverage remained the same at 96.763% when pulling **3917430f94ea7e4036c901162d50065d7fdae4aa on captbaritone:search-dot-under** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10463338/badge)](https://coveralls.io/builds/10463338)\n\nCoverage decreased (-1.6%) to 95.198% when pulling **0d89d4d07bcac4062a39c0baddd56b85b1a303c6 on captbaritone:search-dot-under** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10463338/badge)](https://coveralls.io/builds/10463338)\n\nCoverage decreased (-1.6%) to 95.198% when pulling **0d89d4d07bcac4062a39c0baddd56b85b1a303c6 on captbaritone:search-dot-under** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10463338/badge)](https://coveralls.io/builds/10463338)\n\nCoverage decreased (-1.6%) to 95.198% when pulling **0d89d4d07bcac4062a39c0baddd56b85b1a303c6 on captbaritone:search-dot-under** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "I'll cherry-pick this over.",
      "Done."
    ],
    "commit_messages": [
      "Merge pull request #2652 from captbaritone/search-dot-under\n\nAllow users to prefix searches with `_.`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04bd3a21fa1e1f1aabf2",
    "number": 2651,
    "body": "Have added conditions to fix https://github.com/jashkenas/underscore/issues/2627 issues.\r\n\r\nI've added additional functions to check if we work with Set or Map.\r\nLet me know if it's okay or not.\r\nI decided not to use _.isSet(obj) cuz, well, that's a problem to use underscore functions within underscore code. Sometimes I tried to call the '_.function_name_here' but it was not defined yet.\r\n\r\nThat's more like 30% percent work, so I need to have some feedback from you guys @captbaritone @akre54 \r\n\r\nThanks!\r\n\r\n> let _ = require('./underscore');\r\nundefined\r\n> let s = new Set([1, 2, 1])\r\nundefined\r\n> let m = new Map([['one', 1], ['two', 2], ['one', 1.0]])\r\nundefined\r\n> _.each(s, function() { console.log(arguments); }) \r\n{ '0': 1, '1': 1, '2': Set { 1, 2 } }\r\n{ '0': 2, '1': 2, '2': Set { 1, 2 } }\r\nSet { 1, 2 }\r\n> _.each(s, (key, value, s) => console.log(key, value, s))\r\n1 1 Set { 1, 2 }\r\n2 2 Set { 1, 2 }\r\nSet { 1, 2 }\r\n> _.each(m, (key, value, m) => console.log(key, value, m))\r\n1 'one' Map { 'one' => 1, 'two' => 2 }\r\n2 'two' Map { 'one' => 1, 'two' => 2 }\r\nMap { 'one' => 1, 'two' => 2 }\r\n> _.each(m, (value, key, m) => console.log(value, key, m))\r\n1 'one' Map { 'one' => 1, 'two' => 2 }\r\n2 'two' Map { 'one' => 1, 'two' => 2 }\r\nMap { 'one' => 1, 'two' => 2 }\r\n> _.isEmpty(s)\r\nfalse\r\n> _.isEmpty(m)\r\nfalse\r\n> _.size(s)\r\n2\r\n> _.size(m)\r\n2\r\n> ",
    "head_branch": "2627",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10095098/badge)](https://coveralls.io/builds/10095098)\n\nCoverage increased (+0.02%) to 96.786% when pulling **55c06714c66f3ff2877006cf0576c145fbd628b0 on eduardbcom:2627** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10095653/badge)](https://coveralls.io/builds/10095653)\n\nCoverage increased (+0.02%) to 96.786% when pulling **d25833652947c0c07f8c03d0dba6f7fe3f107325 on eduardbcom:2627** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "> I decided not to use .isSet(obj) cuz, well, that's a problem to use underscore functions within underscore code\r\n\r\nWhy do you say that? I'd rather we dogfood a function than creating a new one.",
      "\n[![Coverage Status](https://coveralls.io/builds/10095098/badge)](https://coveralls.io/builds/10095098)\n\nCoverage increased (+0.02%) to 96.786% when pulling **57e9c229f71c152bb8173906cd46ba9534e2ddbc on eduardbcom:2627** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/10097009/badge)](https://coveralls.io/builds/10097009)\n\nCoverage decreased (-0.1%) to 96.667% when pulling **57e9c229f71c152bb8173906cd46ba9534e2ddbc on eduardbcom:2627** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "I've removed logic for the _.each method, let's focus on _.isEmpty and _.size for now.\r\nYou can see that I have added babel polyfill in order to work with Set and Map within karmajs.\r\n\r\nIs it expected code for isEmpty and size ? @akre54 @captbaritone \r\n\r\nI am wondering why I still receive build failed, my local version (npm run test-browser and test-node) works fine.\r\n\r\nThx."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04be3a21fa1e1f1aabf3",
    "number": 2650,
    "body": "It is on [OWASP](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet) recommended list.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10086744/badge)](https://coveralls.io/builds/10086744)\n\nCoverage remained the same at 96.763% when pulling **6015200b10c17f573b23f893f64b521e3cd06d30 on mitar:patch-2** into **6611850872d8df56ed9d9da7e3521239b9de804b on jashkenas:master**.\n",
      "Can you point to a specific example of where this would be a problem?",
      "http://security.stackexchange.com/a/151424/99938\r\n\r\nOther libraries are also doing it: https://www.npmjs.com/package/xss-escape",
      "This is a valid HTML 4:\r\n\r\n```\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\r\n  \"http://www.w3.org/TR/html4/strict.dtd\">\r\n<html>\r\n<head>\r\n<title/hello/\r\n<body>\r\n<p/hello/\r\n```\r\n\r\nSee how `/` has a special meaning?",
      "#1189",
      "I think that conversation is invalid. Please reopen this pull request. Nobody there made any serious computer security argument. Just saying that \"because I do not know how this could be exploited\" is not an argument why this should not be done."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04bf3a21fa1e1f1aabf4",
    "number": 2649,
    "body": "Jeremy and friends,\r\n\r\nThanks for building such an awesome library. \r\nI hope to help out more in the future!\r\n\r\nDave",
    "head_branch": "fix-typo",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/10079754/badge)](https://coveralls.io/builds/10079754)\n\nCoverage remained the same at 96.763% when pulling **7cc2c6acd97d78096501fe9b50a39469fde73bab on wwwoodall:fix-typo** into **d63c5f48bb7cd7689ccde579cc323f26ec45af63 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2649 from wwwoodall/fix-typo\n\nFix typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c03a21fa1e1f1aabf5",
    "number": 2647,
    "body": "Almost all Collection functions have the parameter named `list` but one of the collection function `partition` takes the parameter named `array`.\r\nSimilary the `sortedIndex` is an Array function, but it takes the parameter named `list`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/9786470/badge)](https://coveralls.io/builds/9786470)\n\nCoverage remained the same at 96.763% when pulling **aa09165ef5f658f4816f8d4423cf7767dccd4f7f on wtokuno:master** into **e944e0275abb3e1f366417ba8facb5754a7ad273 on jashkenas:master**.\n",
      "Thanks"
    ],
    "commit_messages": [
      "Merge pull request #2647 from wtokuno/master\n\nFix parameter name inconsistencies in index.html"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c13a21fa1e1f1aabf6",
    "number": 2643,
    "body": "",
    "head_branch": "update_copyright_year",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/9485827/badge)](https://coveralls.io/builds/9485827)\n\nCoverage remained the same at 96.763% when pulling **8fc7032295d60aff3620ef85d4aa6549a55688a0 on amZotti:update_copyright_year** into **77a0e0fc8d77d69e8f71d3215ae53996fda8a607 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2643 from amZotti/update_copyright_year\n\nDocs: Upgrade year in copyright to 2017"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c23a21fa1e1f1aabf7",
    "number": 2641,
    "body": "In some special environment, such as WeChat micro app (微信小程序  in Chinese), `window` and `global` are both undefined. And it mandatorily enables strict mode, so the `this` is also undefined.\r\nIn this situation, we give `root` an empty object value.",
    "head_branch": "feature_strict_mode",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/9445051/badge)](https://coveralls.io/builds/9445051)\n\nCoverage remained the same at 96.763% when pulling **8a847ba69e521b3d7f4faaa6c7c039bcb8e6497b on lexdene:feature_strict_mode** into **5b60fd49873e72c83604d14c65525000776ee929 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2641 from lexdene/feature_strict_mode\n\n`this` is undefined in strict mode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c33a21fa1e1f1aabf8",
    "number": 2640,
    "body": "Closes #2625, hopefully while keeping simplicity from 188f6d302fe236adbf3771d20bb6edc4896e69f2",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/9440466/badge)](https://coveralls.io/builds/9440466)\n\nCoverage remained the same at 96.763% when pulling **616386f04520a56c0e11224651a278dd2e6fab94 on philfreo:master** into **5b60fd49873e72c83604d14c65525000776ee929 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2640 from philfreo/master\n\nMake docs more explicit about _.default's return value"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c33a21fa1e1f1aabf9",
    "number": 2639,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/9376161/badge)](https://coveralls.io/builds/9376161)\n\nCoverage increased (+0.02%) to 96.782% when pulling **d8ed9571ebbcbb280501f74f79a00a6942efbfa4 on szymonskirgajllo:master** into **5b60fd49873e72c83604d14c65525000776ee929 on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c43a21fa1e1f1aabfa",
    "number": 2638,
    "body": "This pull request should be safe to merge, but it lacks support for escaping characters in path strings. In most cases this is fine, since the more explicit array syntax can be used as a fallback. However, in the case of `_.matches` and friends, there is no such fallback available.\r\n\r\nShould we explore an escape syntax (similar to Lodash's) which allows for complex paths via a string syntax? If so, should it be solved as part of this pull request?\r\n\r\nAs part of this pull request we get `_.get` essentially for free.",
    "head_branch": "dot-notation",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/9371200/badge)](https://coveralls.io/builds/9371200)\n\nCoverage increased (+0.05%) to 96.809% when pulling **8eaa7d70b30d1748167780d49775bcac7b37763b on captbaritone:dot-notation** into **5b60fd49873e72c83604d14c65525000776ee929 on jashkenas:master**.\n",
      "Thoughts @jridgewell @jashkenas @megawac?",
      "I don't love string paths in JavaScript, but this looks fine to me — without the fancy dotted-path escaping.",
      "I like the proposal for array style paths as they are very explicit, but I don't like the concept of partial string parsing. I think if we support string paths we should be able to parse the complete javascript path ast.\r\n\r\nI would prefer to have users can convert their string paths to array paths using a multitude of third party libraries or a simple approach as in this code using split. We can also consider leaving a hook so users can override the behaviour of the path parsing\r\n\r\nP.S. this isn't too strong of an opinion, I just don't want this to be a can of worms of things to support in the future.",
      "> P.S. this isn't too strong of an opinion, I just don't want this to be a can of worms of things to support in the future.\r\n\r\nVery much agreed.\r\n\r\n> I think if we support string paths we should be able to parse the complete javascript path ast.\r\n\r\nWhat is the \"complete javascript path ast\"?",
      "Didn't make that very clear, but complicated paths rules like `a[\"b.c[ab]\"]` which parses as `['a']['\\\"b.c[ab]\\\"']`\r\n\r\nHere's a couple examples from underscore-contrib https://github.com/documentcloud/underscore-contrib/blob/master/test/object.selectors.js#L30-L109",
      "\n[![Coverage Status](https://coveralls.io/builds/9539366/badge)](https://coveralls.io/builds/9539366)\n\nCoverage increased (+0.05%) to 96.809% when pulling **b3252bb1de181af836cd6479cc958c076803fa86 on captbaritone:dot-notation** into **5b60fd49873e72c83604d14c65525000776ee929 on jashkenas:master**.\n",
      "I like @megawac's idea of allowing users to customize path parsing so I've added a commit which exposes our path parsing function as `_.toPath`. This name matches with [`lodash.toPath`](https://lodash.com/docs/4.17.4#toPath).\r\n\r\nI think we probably should support complex paths. Although like both of you, I don't feel terribly strongly about it, especially given:\r\n\r\n* For all methods except the matcher methods, users can fall-back to the explicit array syntax.\r\n* Users can now write their own `_.toPath` if they really need/want it.\r\n\r\nMaybe we can merge this PR as is and I'll follow-up with a PR that adds complex path parsing? Then we can decide if the performance/weight/complexity of the implementation is worth the added convenience?",
      "I think that I disagree pretty strongly with exposing `_.toPath` as part of the public API.\r\n\r\nThat's the kind of fiddly detail that makes Underscore more difficult to understand, more difficult to use, and more difficult to share code / examples across different projects that override `_.toPath` in different ways.\r\n\r\nIf we're going to support string paths, we just just do the right thing. Maybe that's a simple path shortcut that's not supposed to handle all of the complex cases, maybe that's comprehensive path parsing — but we shouldn't be pushing the conceptual complexity on to the user.",
      "I suppose there are really two things here:\r\n\r\n1. Should we expose `_.toPath` as a utility function.\r\n2. Should we allow users to customize the behavior of the internal `_.toPath`.\r\n\r\nI don't see any reason not to do number 1. We already have it, and it may be useful to someone else.\r\n\r\nAs for number two, I think we did set some precedence for this type of customization in #2480 where we allowed users to supply their own custom `_.iteratee`.\r\n\r\nI would agree with @jashkenas that customizing these methods is probably an anti-pattern. It makes your code behave differently than documented. Especially on a project with multiple engineers, customization would probably be a bad choice. We should not be in the position of encouraging people to make bad choices. Then again, we're all adults here, why not let people make that tradeoff for themselves?\r\n\r\nIt does serve as a nice pressure release for the maintainers. We cannot be all things to all people, and features like `_.mixins` (and Underscore-contrib) have allowed us to empower users to get the functionality they need without feeing pressured to add that complexity to the core.\r\n\r\nI realize I'm getting a bit philosophical here, and not actually forming a helpful opinions, so how about this:\r\n\r\nWe add support for complex paths. I think we can all see the value in it. With that in place I don't see any rational need to customize `_.toPath` so we can avoid having to make the philosophical call of \"should we empower people to make decisions that are probably ill advised?\".",
      "> We add support for complex paths. I think we can all see the value in it. With that in place I don't see any rational need to customize _.toPath so we can avoid having to make the philosophical call of \"should we empower people to make decisions that are probably ill advised?\".\r\n\r\nThat's a fair proposal, but then we get into a different discussion: What exactly do the complex paths look like? What's the supporting parsing code required to handle them robustly?\r\n\r\nAgain, reiterating my mild opinion that string paths in JavaScript are distasteful, we should weigh the pros and cons of the three options:\r\n\r\n* No string path support.\r\n* Basic string path support with a basic implementation.\r\n* Robust string path support with a more serious implementation.\r\n",
      "I believe that there's an option between point 2 and point 3, where a reasonable subset of paths are supported, and anything more complicated can be done another way.\r\n\r\nPersonally, I only want dot paths, and brackets for arrays.  So, `a.b[0].c` would work.  That's 99⅝ of use cases, I think.",
      "> Personally, I only want dot paths, and brackets for arrays. So, a.b[0].c would work. That's 99⅝ of use cases, I think.\r\n\r\nThat complicates things. \r\n\r\nWhy do you need `a.b[0].c`, when you have: `a.b.0.c`?",
      "Because this is how people think when descending their data structures.\r\n\r\nWould you be amenable to this if I wrote a toPath implementation that handied it well?",
      "> Would you be amenable to this if I wrote a toPath implementation that handied it well?\r\n\r\nSure!",
      "@bjmiller Could it be as simple as stripping out the surrounding `[]`s with a regex and then doing `split('.')`?",
      "Not that simple, but probably not an order of magnitude more complex, either.",
      "@bjmiller Any timeline on when you would be able to get to this?",
      "I've done some work on it, I'm hoping to finish up soon.  Perhaps this weekend?  Let me know if there's a date you're trying to get this by.\r\n\r\nI think I'm going to put up a gist with my approach first, and I'll make a proper PR out of it with tests and all if it's not rejected out of hand.",
      "No specific timeline, but I wanted to make sure we're maintaining some sort of momentum.\n\n--\nJordan Eldredge (mobile)\n\n> On Jan 25, 2017, at 9:26 PM, Brian Miller <notifications@github.com> wrote:\n> \n> I've done some work on it, I'm hoping to finish up soon. Perhaps this weekend? Let me know if there's a date you're trying to get this by.\n> \n> I think I'm going to put up a gist with my approach first, and I'll make a proper PR out of it with tests and all if it's not rejected out of hand.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
      "Here's my first draft, in a gist: https://gist.github.com/bjmiller/be6a391e1f766ffe7010d3384ef74a2e\r\n\r\nLet me know what you think.  If you all hate it, I'll go a different way.",
      "Maybe it can be simplified a bit, like `\"a.b[0].c\".replace(/(^\\[|\\]$)/g,\"\").split(/\\]?[\\.\\[]/)`. Which will decrease a need in anything else...\r\nIt will work for all cases as number 2 and all basic user needs.\r\n![cleanpath](https://user-images.githubusercontent.com/6061000/38369741-184f5c0a-38f1-11e8-9954-8c41c93df0d0.png)\r\nDescription of what it does:\r\n```javascript\r\n.replace(/(^\\[|\\]$)/g,\"\") // remove first \"[\" and last \"]\" to have a clean array after split\r\n.split(/\\]?[\\.\\[]/) // split by \"].\",\".\",\"][\",\"[\"\r\n```",
      "Fast-forward nearly four years, and it turns out we went with a customizable public `_.toPath` anway, except that it defaults to no string path support at all. See #2877 and https://github.com/documentcloud/underscore-contrib/pull/231.",
      "@jgonggrijp I believe it does not fix this issue it just ignores a choice of deep property access via dot notation...\r\n\r\nP.S. I like that it has _.get now, but I would prefer deepProperty access via string path.",
      "@Dexmaster you can override `_.toPath` in order to enable string paths. Contrib has a good internal string path parsing function that will be made public in the future. Please read the tickets I referenced above.",
      "> Contrib has a good internal string path parsing function\r\n\r\nIt's not the best but ok, and it's just `_.omitPath`, not `_.toPath` or `_.get` :) You can override a lot of functions, it won't become part of a library or make the library useful...\r\n\r\nI'm not bashing underscore.js it's a good lib, but it can add some useful parts.\r\n\r\nP.S. For comparison from 2016 I was using lodash, which was based on Underscore.js, but had much more useful `_.get` for times you need to get the property via dot notation you are not sure exists (there was no optional chaining/elvis`?.` operator then)\r\n\r\n\r\n",
      "It's easier to use another lib, than fix one (create overrides), for every project you need it in...",
      "@Dexmaster \r\n\r\n> It's not the best but ok,\r\n\r\nIf you see a way to improve on it, please feel welcome to submit a PR.\r\n\r\n> and it's just `_.omitPath`, not `_.toPath` or `_.get` :) You can override a lot of functions, it won't become part of a library or make the library useful...\r\n\r\n`_.toPath` by itself is only one function, but it is also a configuration point like `_.iteratee` and `_.templateSettings`. It is used everywhere throughout the library, so if you override it, all functions that work with paths change their behavior accordingly. You need to override only one function to have string paths in all of them. See [the documentation](https://underscorejs.org/#toPath). Underscore-contrib will follow this convention in a future update as well.\r\n\r\n> It's easier to use another lib, than fix one (create overrides), for every project you need it in...\r\n\r\nIf you feel that Underscore is broken, then by all means use another library. But consider the other side: if we were to change all functions that process paths to split dotted strings, then all code like the following will break:\r\n\r\n```js\r\n_.property('underscorejs.org')({\r\n    'underscorejs.org': '2020-11-24',\r\n    'npmjs.com': '2020-11-25'\r\n});\r\n```\r\n\r\nAs I see it, giving people a choice between array paths and string paths is the best we can do. Given that only one of the options can be the default, I think array paths are the safer option; it is more general and it doesn't break any code.",
      "@jgonggrijp \r\n\r\n```\r\n_.property(['underscorejs.org'])({\r\n    'underscorejs.org': '2020-11-24',\r\n    'npmjs.com': '2020-11-25'\r\n});\r\n```\r\nWorks just fine...",
      "And I'm not saying it should be perfect, I just mentioned to add a really good feature, that people will use in 4 years is not hard, even if it will be same as in ommitPath split('.') and that's it...\r\n\r\nThis PR was just simple if string split('.'), I mentioned two years ago how it can be improved if you wanted square brackets too... but it still would have worked, can't tell you more. I said my thoughts on this subject."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c53a21fa1e1f1aabfb",
    "number": 2637,
    "body": "Hi, from this [benchmark](https://gist.run/?id=680c1d0d904fad05549ab93fa033897d), avoid caching can help improve performance around 25 - 30% ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/9325698/badge)](https://coveralls.io/builds/9325698)\n\nCoverage decreased (-0.004%) to 96.759% when pulling **ea4d3ff9ad8db8a7bc9e7a81f12c7dc83593687b on bigopon:master** into **5b60fd49873e72c83604d14c65525000776ee929 on jashkenas:master**.\n",
      "I tried pasting the original implementation into your benchmark, as it wasn't included. I got underwhelming differences as a result:\r\n\r\n```\r\nstrict x 1,214,052 ops/sec ±0.95% (60 runs sampled)\r\noriginal x 1,148,546 ops/sec ±2.52% (59 runs sampled)\r\nloose x 1,023,326 ops/sec ±1.45% (59 runs sampled)\r\ncache x 1,186,416 ops/sec ±2.51% (58 runs sampled)\r\nno-cache x 1,034,401 ops/sec ±1.68% (59 runs sampled)\r\n```\r\n\r\nAdding to that that nobody has actually complained about `isObject` being unreasonably slow, I'm just closing this."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c63a21fa1e1f1aabfc",
    "number": 2634,
    "body": "I've included @earforth's commit from #2632 and cleaned up the formatting.",
    "head_branch": "unzip-2",
    "is_a_fork": true,
    "comments": [
      "Performance impact?",
      "Not sure of actual timing, but this will add an additional function call (using `.call()`) for each item in the collection. On the plus side it will also pre-allocate the array.",
      "Might be worth checking — I'm pretty sure that's the reason why it's using a `for` loop in the first place.",
      "I'm not personally very invested in this change. I'll close this issue. If someone else (@earforth @craigmichaelmartin, @jridgewell) want's to do the legwork of doing a perf evaluation, we can reopen.",
      "If you need performance, please replace the pluck into codes , it's a  function call, too."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c73a21fa1e1f1aabfd",
    "number": 2633,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "can you tell me which check failed ? when I use the Underscore Test Suite to test , it is OK.",
      "Why another PR? You have the same changes open in #2632. Make sure you lint in addition to running tests. Linting is part of `npm test`, or can be run in isolation with `npm run lint`.",
      "Closing as a dupe of #2632."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c83a21fa1e1f1aabfe",
    "number": 2632,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "This won't work. You can see the failing test for a better idea of why. In the future please include a description of what value you change provides.\r\n\r\nThanks for your interest in Underscore. Feel free to find me in our Gitter channel if you have further questions.",
      "lgtm (except for formatting)",
      "I'll cherry pick this commit, clean up the spacing, and open a new PR.",
      "You could probably push to the PR. https://github.com/blog/2247-improving-collaboration-with-forks",
      "@jridgewell Oh, that would be a perfect time to use that, but it looks like this commit is not coming from a GitHub fork:\r\n\r\n<img width=\"610\" alt=\"screen shot 2016-12-08 at 9 21 45 am\" src=\"https://cloud.githubusercontent.com/assets/162735/21020069/c0b355fa-bd27-11e6-9c97-514c4aaee987.png\">\r\n",
      "Closing in favor of #2634."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04c93a21fa1e1f1aabff",
    "number": 2630,
    "body": "PR for #2629 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "\n[![Coverage Status](https://coveralls.io/builds/8918703/badge)](https://coveralls.io/builds/8918703)\n\nCoverage remained the same at 96.763% when pulling **2c2abf82f9d98b2f2bed5b11f7e77788841695a6 on ahonn:master** into **ce09af4aed81a8d73e55d91a40a61d11414fae81 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/8919087/badge)](https://coveralls.io/builds/8919087)\n\nCoverage remained the same at 96.763% when pulling **6d7225d02eb22cd6392ea1de8a6fa66227b38b10 on ahonn:master** into **ce09af4aed81a8d73e55d91a40a61d11414fae81 on jashkenas:master**.\n",
      "\n[![Coverage Status](https://coveralls.io/builds/8919087/badge)](https://coveralls.io/builds/8919087)\n\nCoverage remained the same at 96.763% when pulling **6d7225d02eb22cd6392ea1de8a6fa66227b38b10 on ahonn:master** into **ce09af4aed81a8d73e55d91a40a61d11414fae81 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2630 from ahonn/master\n\noptimized _.eq function, remove redundant comparison when both null"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ca3a21fa1e1f1aac00",
    "number": 2624,
    "body": "Extracted from #2399. See https://github.com/jashkenas/underscore/pull/2399#r49368719\r\n\r\ncc @captbaritone ",
    "head_branch": "map-markup",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8741016/badge)](https://coveralls.io/builds/8741016)\n\nCoverage remained the same at 96.763% when pulling **a6bd1376b48ce6acac3533cd9127b9b672b455e7 on Florian-R:map-markup** into **c2e2eff828f73eaf4490353f83724c357acb7fdf on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2624 from Florian-R/map-markup\n\nDoc: cleanup markup in _.map section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04cb3a21fa1e1f1aac01",
    "number": 2623,
    "body": "Extracted from #2399. I'm trying to tidy it a bit, and it'll makes things easier to have this submitted separately.\r\n\r\ncc @captbaritone ",
    "head_branch": "matches-link",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8740948/badge)](https://coveralls.io/builds/8740948)\n\nCoverage remained the same at 96.763% when pulling **b24561128280f8b789e7bf52a4e6a8ae49f7a39e on Florian-R:matches-link** into **c2e2eff828f73eaf4490353f83724c357acb7fdf on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8740948/badge)](https://coveralls.io/builds/8740948)\n\nCoverage remained the same at 96.763% when pulling **b24561128280f8b789e7bf52a4e6a8ae49f7a39e on Florian-R:matches-link** into **c2e2eff828f73eaf4490353f83724c357acb7fdf on jashkenas:master**.\n",
      "Thanks!\n"
    ],
    "commit_messages": [
      "Merge pull request #2623 from Florian-R/matches-link\n\nDoc: Add links to matches."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04cc3a21fa1e1f1aac02",
    "number": 2620,
    "body": "Fixes #2612\n",
    "head_branch": "deep-invoke",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8573026/badge)](https://coveralls.io/builds/8573026)\n\nCoverage increased (+0.03%) to 96.755% when pulling **942ef738761a721edf811378654673f10fd6cac8 on captbaritone:deep-invoke** into **817bceec3dd6c7dacb350c99e912e50750efdca0 on jashkenas:master**.\n",
      "Review @jridgewell ?\n",
      "[![Coverage Status](https://coveralls.io/builds/8657602/badge)](https://coveralls.io/builds/8657602)\n\nCoverage increased (+0.04%) to 96.759% when pulling **97cfcbcbbcedf544a13127dcca3e0ddad94ff830 on captbaritone:deep-invoke** into **817bceec3dd6c7dacb350c99e912e50750efdca0 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2620 from captbaritone/deep-invoke\n\nMake _.invoke support deep method paths"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04cd3a21fa1e1f1aac03",
    "number": 2619,
    "body": "Re: https://github.com/jashkenas/underscore/pull/2340#issuecomment-217624935\n\nThis is as simple as I can make it while being much faster for multiple rapid calls.\n\n/cc @dcorb\n",
    "head_branch": "debounce-speed",
    "is_a_fork": true,
    "comments": [
      "So this is more or less reverting the merge...\n\nHow does this compare with what we started out with? Faster? Edge cases? Clearer?\n",
      "Superseded by #2892."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ce3a21fa1e1f1aac04",
    "number": 2617,
    "body": "https://github.com/jashkenas/underscore/blob/master/test/collections.js#L211-L212\n",
    "head_branch": "optional",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8534094/badge)](https://coveralls.io/builds/8534094)\n\nCoverage remained the same at 96.723% when pulling **1304523153d8e3aec07282309eff30b1f1f0b213 on captbaritone:optional** into **249ad0f02ad4c6a6cb4a3676bb185638fa555c03 on jashkenas:master**.\n",
      "I'll cherry-pick this later today.\n",
      "👍 \n",
      "Cherry-picked.\n"
    ],
    "commit_messages": [
      "Merge pull request #2617 from captbaritone/optional\n\nDocs: _.reduceRight's Memo is optional"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04cf3a21fa1e1f1aac05",
    "number": 2615,
    "body": "I haven't run any tests.\n\nI know that some downstreams have expectations of spellings in the underscore test output. I believe it's reasonable for them to update their spelling expectations when they update this library.\n\nSome words in underscore are intentionally misspelled (`gettin`, `ridanculous`) and I've left them alone.\n\nBefore this pr, both `falsy` and `falsey` were used (roughly evenly). I'm trying to push underscore to a single spelling. I have no particular preference as to which spelling it uses, but it's really helpful if it standardizes on a single spelling.\n\nMy spell checker objects to `Javascript`, and as it's brand (`JavaScript`), I happen to agree with it. There shouldn't be much harm in making this change. But you can certainly drop this change if you object strongly.\n",
    "head_branch": "spelling",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8437207/badge)](https://coveralls.io/builds/8437207)\n\nCoverage remained the same at 96.966% when pulling **ec6de92d9802c2d264940f9b12da2ca2f87af558 on jsoref:spelling** into **08757603c1283ba761c1c1aa19de36c294f14244 on jashkenas:master**.\n",
      "This is wonderful! Thanks.\n"
    ],
    "commit_messages": [
      "Merge pull request #2615 from jsoref/spelling\n\nSpelling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d03a21fa1e1f1aac06",
    "number": 2613,
    "body": "Instead of checking null value of argCount within switch expression, I combined null and 3 as a multi-case statement, which makes optimizeCb function more readable.\n",
    "head_branch": "optimizeCb-switch",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8380620/badge)](https://coveralls.io/builds/8380620)\n\nCoverage decreased (-0.2%) to 96.723% when pulling **5fe7576173dd9c1c8b70f5b7826901dcbc508b3a on kingdido999:optimizeCb-switch** into **08757603c1283ba761c1c1aa19de36c294f14244 on jashkenas:master**.\n",
      "Yeah I like this a lot better. Thanks.\n"
    ],
    "commit_messages": [
      "Merge pull request #2613 from kingdido999/optimizeCb-switch\n\n[optimizeCb] Combine null and 3 as multi-case for argCount switch statement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d13a21fa1e1f1aac07",
    "number": 2610,
    "body": "Some additional tests for deep property access.\n",
    "head_branch": "more-deep-tests",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8331582/badge)](https://coveralls.io/builds/8331582)\n\nCoverage remained the same at 96.966% when pulling **76f34e8cf3de3fd8a44d2270d4096f67de56331b on captbaritone:more-deep-tests** into **08361d41590ff35be44ec6b757361ac37f6fa7c7 on jashkenas:master**.\n",
      "Lovely, thanks.\n"
    ],
    "commit_messages": [
      "Merge pull request #2610 from captbaritone/more-deep-tests\n\nMore deep tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d23a21fa1e1f1aac08",
    "number": 2608,
    "body": "https://github.com/jashkenas/underscore/issues/2607\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8295332/badge)](https://coveralls.io/builds/8295332)\n\nCoverage remained the same at 96.863% when pulling **66427f52bceb9b6d2282893e7a3ad35f7c01777b on hanzichi:master** into **aa715a46173874495506a06027a2f4b7e4884871 on jashkenas:master**.\n",
      "Thanks for the pull request @hanzichi. I'll cherry pick this over to `github-pages` later today.\n",
      "Done. This change is now live on http://underscorejs.org\n"
    ],
    "commit_messages": [
      "Merge pull request #2608 from hanzichi/master\n\nmaybe a bug in documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d33a21fa1e1f1aac09",
    "number": 2606,
    "body": null,
    "head_branch": "sparse",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8274141/badge)](https://coveralls.io/builds/8274141)\n\nCoverage remained the same at 96.863% when pulling **ffbff5b833952aa49d495f90937ac37eb95ce44f on captbaritone:sparse** into **93c32d79a7a640187f1a929f1d77f2c55d31a76b on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2606 from captbaritone/sparse\n\nRemove unused lint override"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d43a21fa1e1f1aac0a",
    "number": 2605,
    "body": null,
    "head_branch": "eslint-up",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8274131/badge)](https://coveralls.io/builds/8274131)\n\nCoverage remained the same at 96.863% when pulling **dff8bce9a90e1072267212a3ab9502d978593d8b on captbaritone:eslint-up** into **93c32d79a7a640187f1a929f1d77f2c55d31a76b on jashkenas:master**.\n",
      "I'll need to find a way to have ESLint not run on old versions of Node in Travis.\n",
      "In the meanwhile, eslint was upgraded to version 6.8."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d53a21fa1e1f1aac0b",
    "number": 2604,
    "body": null,
    "head_branch": "has-test",
    "is_a_fork": true,
    "comments": [
      "LGTM.\n",
      "[![Coverage Status](https://coveralls.io/builds/8243997/badge)](https://coveralls.io/builds/8243997)\n\nCoverage remained the same at 96.863% when pulling **708dc4f956681e8666ca8bb6b1a12bb940638d4a on captbaritone:has-test** into **c97f687579d3e6278a0a9a44df4c0b75f522ef41 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8243997/badge)](https://coveralls.io/builds/8243997)\n\nCoverage remained the same at 96.863% when pulling **708dc4f956681e8666ca8bb6b1a12bb940638d4a on captbaritone:has-test** into **c97f687579d3e6278a0a9a44df4c0b75f522ef41 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2604 from captbaritone/has-test\n\nMake `_.has` test descriptions less reptative"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d63a21fa1e1f1aac0c",
    "number": 2603,
    "body": "These functions are listed in the docs under \"Objects\". To keep things\nconsistent, I've moved their tests to the `tests/objects.js` file.\n",
    "head_branch": "move-prop-test",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8243992/badge)](https://coveralls.io/builds/8243992)\n\nCoverage remained the same at 96.863% when pulling **da23b3940af920d7a0788c271ae659f91ac0cca8 on captbaritone:move-prop-test** into **c97f687579d3e6278a0a9a44df4c0b75f522ef41 on jashkenas:master**.\n",
      "LGTM.\n"
    ],
    "commit_messages": [
      "Merge pull request #2603 from captbaritone/move-prop-test\n\nMove `_.property` and `_.propertyOf` tests to objects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d63a21fa1e1f1aac0d",
    "number": 2601,
    "body": "I believe this test was added by accident by @megawac in #1582 (specifically https://github.com/jashkenas/underscore/pull/1582/commits/e52fd55e264394f11622522b6cc1acc061a372d6)\n\nGiven our current documentation, the behavior of this edge case is not defined.\n\nThis test currently passes because arrays are technically objects and thus `_.iteratee` treats `[]` as a `_.matches` matcher. `_.matches` casts `[]` to `{}` via `_.extendOwn({}, []);` and returns a function which always returns `true`.\n\nThe fact that this test exists in `_.reject`'s test and not in `_.iteratee`'s leads me to believe that this is not actually intended behavior, but merely an implementation detail which has been accidentally enforced in our tests.\n\nI'm currently reworking my pull request #2494 (deep property access) and in a future where arrays are used for deep property access, `[]` will return a function that always returns `undefined`, which seems like a more reasonable behavior.\n\nI thought it would be good to have this conversation separate from the deep property matching pull request, but removing this test is a prerequisite to implementing deep property access.\n",
    "head_branch": "reject-empty-array",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8183913/badge)](https://coveralls.io/builds/8183913)\n\nCoverage remained the same at 96.863% when pulling **ef67672fd7d0b48fc9cac159de589c0c2cde26c7 on captbaritone:reject-empty-array** into **68cc739d9d908679b730466935ad18303d192b68 on jashkenas:master**.\n",
      "I think the test was supposed to be `_.reject([]) => []` but I'm fine with the removal\n"
    ],
    "commit_messages": [
      "Merge pull request #2601 from captbaritone/reject-empty-array\n\nRemove test for edge case: _.reject(list, []);"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d83a21fa1e1f1aac0e",
    "number": 2600,
    "body": "I accidentally added this extra space in #2485.\n",
    "head_branch": "rm-space",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8147307/badge)](https://coveralls.io/builds/8147307)\n\nCoverage remained the same at 96.863% when pulling **96d07bc5dfa5390ea628217e5e73f070aa80f1ed on captbaritone:rm-space** into **d8593bcf0f9da0622ca79b9bc751d26715926238 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8147307/badge)](https://coveralls.io/builds/8147307)\n\nCoverage remained the same at 96.863% when pulling **96d07bc5dfa5390ea628217e5e73f070aa80f1ed on captbaritone:rm-space** into **d8593bcf0f9da0622ca79b9bc751d26715926238 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8147315/badge)](https://coveralls.io/builds/8147315)\n\nCoverage remained the same at 96.863% when pulling **96d07bc5dfa5390ea628217e5e73f070aa80f1ed on captbaritone:rm-space** into **d8593bcf0f9da0622ca79b9bc751d26715926238 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2600 from captbaritone/rm-space\n\nRemove extraneous space"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d93a21fa1e1f1aac0f",
    "number": 2599,
    "body": "The previous code (introduced in #1424) used the `iDoc` variable name for two purposes on the\nsame line. Not only was that very confusing, it meant `iDoc` was being\nused before it was actually assigned.\n",
    "head_branch": "idoc",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8147267/badge)](https://coveralls.io/builds/8147267)\n\nCoverage remained the same at 96.863% when pulling **82d5c0d7e926fc515cd0494841fa3139a9db6cb4 on captbaritone:idoc** into **d8593bcf0f9da0622ca79b9bc751d26715926238 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8147269/badge)](https://coveralls.io/builds/8147269)\n\nCoverage remained the same at 96.863% when pulling **82d5c0d7e926fc515cd0494841fa3139a9db6cb4 on captbaritone:idoc** into **d8593bcf0f9da0622ca79b9bc751d26715926238 on jashkenas:master**.\n",
      "Review @braddunbar ?\n",
      "Looks good!\n"
    ],
    "commit_messages": [
      "Merge pull request #2599 from captbaritone/idoc\n\nClarify order of operations in cross-document test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04d93a21fa1e1f1aac10",
    "number": 2598,
    "body": "By switching all assertions to use `strictEqual` rather than `equal` I was able to discover three worthwhile improvements to our tests:\n- https://github.com/jashkenas/underscore/pull/2597\n- https://github.com/jashkenas/underscore/pull/2596\n- https://github.com/jashkenas/underscore/pull/2595\n\nI think it's a good idea to have our tests generally prefer the more explicit: `strictEqual`. Not only could it help avoid some subtle bug going unnoticed, but it also gives the reader of the test suite a more concrete description of the expected behavior.\n\nAt some point, after we've upgraded to a newer version of ESLint, we might even consider enableing the rule [`qunit/no-assert-equal`](https://github.com/platinumazure/eslint-plugin-qunit/blob/master/docs/rules/no-assert-equal.md) (cc @platinumazure)\n",
    "head_branch": "strict",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8147209/badge)](https://coveralls.io/builds/8147209)\n\nCoverage remained the same at 96.863% when pulling **9b2c36dd2e954e33b4318f615760c2485c18a3d6 on captbaritone:strict** into **848587441979bdb15fb2e8afb2c58bd20eee2e6a on jashkenas:master**.\n",
      "👍 good stuff!\n"
    ],
    "commit_messages": [
      "Merge pull request #2598 from captbaritone/strict\n\nAlways use strictEqual in tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04da3a21fa1e1f1aac11",
    "number": 2597,
    "body": "By using a coercive assertion, the tests were not being explicit about\nthe fact that when specifying a primitive as the context for `_.each`,\nthe `this` value will actually be a wrapped version of the given\nprimitive.\n\nThis change simply makes the assertions more explicit.\n",
    "head_branch": "strict-iterator-context",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8147117/badge)](https://coveralls.io/builds/8147117)\n\nCoverage remained the same at 96.863% when pulling **1a2bdf98bef1d4c95bed429b83c43a5b1c65383c on captbaritone:strict-iterator-context** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2597 from captbaritone/strict-iterator-context\n\nMake iterator context tests explicit about type"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04db3a21fa1e1f1aac12",
    "number": 2596,
    "body": "The existing test uses `assert.equal` rather than `assert.strictEqual`\nwhich accidentally hid a type coercion. This change makes the type\nexplicit.\n",
    "head_branch": "strkey",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8147100/badge)](https://coveralls.io/builds/8147100)\n\nCoverage remained the same at 96.863% when pulling **12cf8040694d21f237dee9b20ea0dbce41e25a2e on captbaritone:strkey** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2596 from captbaritone/strkey\n\nClarify in tests that obj key is a string"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04dc3a21fa1e1f1aac13",
    "number": 2595,
    "body": "Enhance out tests to more clearly document the behavior of binding a\nprimitive as the context of a function.\n\n_Note:_ The first commit just simplifies how these tests are written. The second commit actually changes what's being tested. See the individual commit messages for more details.\n",
    "head_branch": "bind-primitive",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/8146973/badge)](https://coveralls.io/builds/8146973)\n\nCoverage remained the same at 96.863% when pulling **bfa74a2487ab0e5d5d98d3550012f33b3f8059ca on captbaritone:bind-primitive** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2595 from captbaritone/bind-primitive\n\nAssert: `_.bind`ing to a primitive returns a wrapped obj"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04dd3a21fa1e1f1aac14",
    "number": 2587,
    "body": "Hey Jeremy, tried to add the ability to generate non-linear ranges (using functions such as factorials) using `_.range`.  I am sure there are better ways to get it working, but I think it does the job! \n\nThe sort of thing I was hoping to get working... \n\n``` javascript\n_.range( 1, 5, 1, Math.pow, Math, [2] );\n// => [ 1, 4, 9, 16 ]\n\n_.range( 4, 10, 2, Math.pow, Math, [4] );\n// => [ 256, 1296, 4096 ]\n\nvar factorial = function(n) {\n  if ( n === 0 || n === 1 ) { return 1; }\n  return n * factorial(n - 1);\n};\n_.range( 1, 6, 1, factorial, null, [2] );\n// => [ 1, 2, 6, 24, 120 ]\n```\n\nSorry, but I changed a few things in the test suites! Only minimal changes, but I tried to get rid of the throws syntax error message, and I also had to up the max-params eslint rule to allow for 6 parameters (probably not a great idea - but that allowed for the new params I tried to let _.range allow).\n\nThe parameters that I have added...\n\n``` javascript\n_.range( start, stop, step, iteratee, toBind, providedArgs );\n```\n- `start`, `stop` and `step` are all the same\n- `iteratee` is a callback for each iteration of the loop\n- `toBind` is what the user wants `this` to be, mainly set up to allow for things like Math.pow\n  - I probably could have used `bind` but I am using the toBind variable for the `apply` method\n- `providedArgs` expects an array, just so we can pass in static values to the `apply` method later on (if that is necessary)\n\nHopefully it is okay! Let me know if I can do anything (or any advice, suggested edits etc.)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "It's a neat feature, but I think a little too complex and nice for core Underscore. Try for _.contrib, or as a plugin. Thanks!\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04de3a21fa1e1f1aac15",
    "number": 2584,
    "body": "It simply checks to see if two arrays are equal. This is a function that I felt that this library should have.\nAnyways, Good job guys. This tool-belt is amazing. I've used it a couple of times and thought I'd contribute. :smile:  \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "you can use `_.isEqual(arr1, arr2)` for this, alternatively `arr1.length === arr2.length && _.difference(arr1, arr2).length === 0` if you don't care about order\n",
      "aight my bad :+1: \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04df3a21fa1e1f1aac16",
    "number": 2583,
    "body": "Long time user, first time contributor. Reading through this well-documented source code, I noticed the link between _.pairs and _.object for the first time. As presented, these 2 related functions are far away from each other (with good reason), so I suggest this highlighting the connection in the annotations. Please let me know if there's a better contribution workflow, if I need to PR first to Underscore-Contrib, etc.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/7682121/badge)](https://coveralls.io/builds/7682121)\n\nCoverage remained the same at 96.863% when pulling **7c08ea8cb939c8376eadcb5655314b08dda4dc81 on sdwebster:master** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8150555/badge)](https://coveralls.io/builds/8150555)\n\nCoverage remained the same at 96.863% when pulling **7cde4e928fb6ea0e5e772d956ca82011b6699d30 on sdwebster:master** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "Thanks!\n"
    ],
    "commit_messages": [
      "Merge pull request #2583 from sdwebster/master\n\nUpdate _.object and _.pairs docs to show relation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e03a21fa1e1f1aac17",
    "number": 2582,
    "body": "## Overview\n\nThe `no-extra-parens` ESLint rule was causing the test suite to throw warnings. But the location of the warning did not look like it had any problematic parens. This is likely a bug with ESLint. Till it is resolved, I think it makes sense to **remove this flag** to clean up the test suite logs. This will also not have any effect on the code anyway, as extra parentheses are ignored by most JS Engines\n## Screenshots\n\n<img width=\"694\" alt=\"screen shot 2016-08-30 at 1 07 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1117182/18080329/b5cc4da4-6eb2-11e6-99ae-3ff63eb8f910.png\">\n\nNOTE: The code in question here is [this line](https://github.com/jashkenas/underscore/blob/master/underscore.js#L313)\n",
    "head_branch": "bugfix/remove-no-extra-parens",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/7665860/badge)](https://coveralls.io/builds/7665860)\n\nCoverage remained the same at 96.863% when pulling **e4eb65579a62cd658660c110dd27084f2117f298 on jonva:bugfix/remove-no-extra-parens** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "ESLint is correct in its assertion. The parentheses on these lines are technically redundant as far as the parser is concerned. As an exercise, you could try removing them and running the tests. You'll find they all still pass. However, for human readers, I think the parens are quite useful. \n\nAn ideal solution would be to upgrade ESLint to >= v2.8 and enable the ``nestedBinaryExpressions`](http://eslint.org/docs/rules/no-extra-parens#nestedbinaryexpressions) option, which I believe would permit this type of clarifying parentheses. \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e13a21fa1e1f1aac18",
    "number": 2581,
    "body": "## Overview\n\nVery(too) often in Javascript, one comes across a situation where a conditional block of code has to be executed, based on whether the value of a variable is not `null`, `undefined` or `NaN` i.e. check for the variable's valid existence. Here, I have used the `_.isNull`, `_.isUndefined` and `_.isNaN` functions to create an abstraction called  `_.is` which checks for this popular composite condition.\n",
    "head_branch": "feature/add-is",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/7665513/badge)](https://coveralls.io/builds/7665513)\n\nCoverage increased (+0.008%) to 96.871% when pulling **a138c59006af240b6aabd2d8a2b8f6ac64dcc30a on jonva:feature/add-is** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/7665513/badge)](https://coveralls.io/builds/7665513)\n\nCoverage increased (+0.008%) to 96.871% when pulling **a138c59006af240b6aabd2d8a2b8f6ac64dcc30a on jonva:feature/add-is** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/7665732/badge)](https://coveralls.io/builds/7665732)\n\nCoverage increased (+0.008%) to 96.871% when pulling **c95704dee1e42d1a4c559b46da3a7b44547ad849 on jonva:feature/add-is** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/7665732/badge)](https://coveralls.io/builds/7665732)\n\nCoverage increased (+0.008%) to 96.871% when pulling **c95704dee1e42d1a4c559b46da3a7b44547ad849 on jonva:feature/add-is** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/7665772/badge)](https://coveralls.io/builds/7665772)\n\nCoverage increased (+0.008%) to 96.871% when pulling **da1d549d28eb9ebe31283fb91b872c8773673abe on jonva:feature/add-is** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n",
      "@akre54 @megawac Could you cut or at least reduce the Coveralls notification? It's getting very noisy for little if no benefits. Thanks.\n",
      "Is there a way to only get notifications on change?\n\nOn Tue, Aug 30, 2016 at 5:38 AM, Florian-R notifications@github.com wrote:\n\n> @akre54 https://github.com/akre54 @megawac https://github.com/megawac\n> Could you cut or at least reduce the Coveralls notification? It's getting\n> very noisy for little if no benefits. Thanks.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jashkenas/underscore/pull/2581#issuecomment-243386695,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ADUIEH7Tm6NxqLoQH1Ub67U6BfCOSS0eks5qk_oYgaJpZM4JwTVZ\n> .\n",
      "FWIW I just disable PR notifications for coverage and just check it from time to time\n(in Travis runs or on whichever coverage site it is).\n",
      "Coveralls aside, I think we've brought this up before. aside from the extra `NaN` checking, what does this give you over a `obj == null` check? This seems like it'd be better off as a mixin.\n",
      "@akre54 I did see a similar mixin on underscore-contrib, but the thought process behind raising a PR here is that arbitrary as it might be, this is such a common use case on most javascript projects that I think as a utility library, underscore is in fact where this belongs.\n",
      "FTR #2144 #2280 and probably a few others. Better suited as a mixin in my opinion.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e23a21fa1e1f1aac19",
    "number": 2580,
    "body": "## Overview\n\nThe `no-extra-parens` ESLint rule was causing the test suite to throw warnings. But the location of the warning did not look like it had any extra parens. This is likely a bug with ESLint. Till it is resolved, I think it makes sense to **remove this flag** to clean up the test suite logs. This will also not have any effect on the code anyway, as extra parentheses are ignored by most JS Engines\n## Screenshots\n\n<img width=\"694\" alt=\"screen shot 2016-08-30 at 1 07 02 pm\" src=\"https://cloud.githubusercontent.com/assets/1117182/18080329/b5cc4da4-6eb2-11e6-99ae-3ff63eb8f910.png\">\n\nNOTE: The code in question here is [this line](https://github.com/jashkenas/underscore/blob/master/underscore.js#L313)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/7664350/badge)](https://coveralls.io/builds/7664350)\n\nCoverage remained the same at 96.863% when pulling **6971d94b6a0ecde777aaf4ed2585b3454b5f36db on jonva:master** into **a9432276b90bd23d3022deb89ac1ba6b10ee7495 on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e33a21fa1e1f1aac1a",
    "number": 2576,
    "body": "Intersection can be improved by sorted array.\nThe time complexity\n- previous code: `m*n^2`\n- improved code: `m*n*logn`\n\nbelow is my test result on my machine\n- two arrays with 100,000 items\n- previous code: 16830 ms\n- improved code: 93 ms\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/7289696/badge)](https://coveralls.io/builds/7289696)\n\nCoverage increased (+0.04%) to 96.906% when pulling **2b073a49c4ac4a1c22d9715d5d725e27ce08cdc8 on landvibe:master** into **147498fd51b3ec6fbf2803a1c28f642567879854 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/7289696/badge)](https://coveralls.io/builds/7289696)\n\nCoverage increased (+0.04%) to 96.906% when pulling **2b073a49c4ac4a1c22d9715d5d725e27ce08cdc8 on landvibe:master** into **147498fd51b3ec6fbf2803a1c28f642567879854 on jashkenas:master**.\n",
      "A solution more likely to be accepted would be to implement a side case using [ES2015 Sets](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set)\n\n``` js\nlet set = new Set(array);\n\n// ...\n\nset = new Set(_.filter(inputList, x => set.has(x)));\n```\n",
      "@megawac \nMDN says \"Set objects are collections of values, you can iterate its elements in insertion order\"\nI think it is not sorted data structure.\n",
      "Yes, `intersection` is supposed to preserve original order. The PR as is is a breaking change.\n\n``` js\n_.intersection([2, 3,1], [1,2])\n\n```\n",
      "[![Coverage Status](https://coveralls.io/builds/7320115/badge)](https://coveralls.io/builds/7320115)\n\nCoverage increased (+0.02%) to 96.887% when pulling **3e3a5001f7c30a81b08c58fb51704700e9bba30e on landvibe:master** into **147498fd51b3ec6fbf2803a1c28f642567879854 on jashkenas:master**.\n",
      "@megawac \nI fixed a bug\nbug: wrong output when there are more than 2 arrays\nand I added new test case\n",
      "It's a nice idea but it only works for sortable values (i.e., strings and numbers). It has to work with unsortable values, too."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e43a21fa1e1f1aac1b",
    "number": 2573,
    "body": "I re-ordered findWhere and where in the documentation to make it less confusing\n\nFixes #1811 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/7231917/badge)](https://coveralls.io/builds/7231917)\n\nCoverage remained the same at 96.863% when pulling **5084b51dcd263e0576a078b65b95197b748214c5 on jdelbello:master** into **6fa3796bf50fad2120beae86c3c9b33551f40f5e on jashkenas:master**.\n",
      "Can you also move `find` to be beside `findWhere`?\n",
      "@pootzko from #1811 suggested that the order should be as I presented it in this pull request, and I agree. The reasoning is that we want to keep `find` and `filter` together because both search for matches based on context. We also want to keep `where` and `findWhere` together because both search for matches based on properties. I moved `findWhere` before `where` because I wanted to preserve the pattern in the first pair of \"find first occurrence\" and \"find all occurrences\".\n1. find (context, first)\n2. filter (context, array)\n3. findWhere (properties, first)\n4. where (properties, array)\n\nDoes that make sense?\n",
      "wasn't aware of the previous discussion on this. I'm fine with this rationale \n"
    ],
    "commit_messages": [
      "Merge pull request #2573 from jdelbello/master\n\n[Documentation] Swap findWhere and where in documentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e43a21fa1e1f1aac1c",
    "number": 2569,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/7098912/badge)](https://coveralls.io/builds/7098912)\n\nCoverage remained the same at 96.863% when pulling **2f4494a351ebdc04faff1852ac8a901d8a64ec62 on thefourtheye:patch-1** into **587d36da54542c271b3acabe2e20907bbe73f486 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2569 from thefourtheye/patch-1\n\nminor documentation improvement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e53a21fa1e1f1aac1d",
    "number": 2568,
    "body": "The TOC section has the following CSS:\n\n```\nul.toc_section {\n    font-size: 11px;\n    line-height: 14px;\n    margin: 5px 0 0 0;\n    padding-left: 0px;\n    list-style-type: none;\n    font-family: Lucida Grande;\n}\n```\n\nSince Lucida Grande is/might be missing on default installs, the result is a tiny serif font being used. It is also superfluous as it is already declared with a proper fall-back, here:\n\n```\n.interface {\n    font-family: \"Lucida Grande\", \"Lucida Sans Unicode\", Helvetica, Arial, sans-serif !important;\n}\n```\n### Example:\n\n![screenshot-underscorejs org 2016-07-14 22-55-55](https://cloud.githubusercontent.com/assets/1453735/16856142/e623aef2-4a18-11e6-94f6-7c463c7fd3b0.png)\n\nSimply removing `font-family` from that block would solve the issue, though I've increased the font-size slightly since 11px is tiny no matter what font is used.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Seems kinda unbalanced to my eye, but maybe I'm just used to the old look...\n\n![screen shot 2016-07-21 at 1 42 21 pm](https://cloud.githubusercontent.com/assets/162735/17038126/084e545c-4f49-11e6-8b9f-570320c890f0.png)\n"
    ],
    "commit_messages": [
      "Merge pull request #2568 from ben-joostens/patch-1\n\nImprove readability of underscorejs.org TOC"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e63a21fa1e1f1aac1e",
    "number": 2561,
    "body": "Documentation addition for #2552!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6934096/badge)](https://coveralls.io/builds/6934096)\n\nCoverage remained the same at 96.867% when pulling **136eb0d9483e324a28f0bc44cdcf8515d46a0393 on jdelbello:master** into **ec7689ad9380dcaa96cb5ec9c738474118a32fe4 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/6934110/badge)](https://coveralls.io/builds/6934110)\n\nCoverage remained the same at 96.867% when pulling **563755108a9705ba9231c0d894fd12455fbe4a04 on jdelbello:master** into **ec7689ad9380dcaa96cb5ec9c738474118a32fe4 on jashkenas:master**.\n",
      "I'll cherry-pick this to `gh-pages` later today when I get in front of a computer.\n",
      "Cherry-picked: http://underscorejs.org/#max\n"
    ],
    "commit_messages": [
      "Merge pull request #2561 from jdelbello/master\n\nNote in documentation that non-numerical values don't work for max/min"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e73a21fa1e1f1aac1f",
    "number": 2556,
    "body": "A precision can be now done with a given element type's name (egg: _HTMLLink, HTMLDiv, SVGEllipse, ..._).\n\n_examples_ \n\n``` js\n_.isElement(jQuery('body')[0]);\n//=> true\n_.isElement(document.createElement('a'), 'html-anchor');\n//=> true\n// given type precision can also be in camelCase following DOM naming's spec.\n_.isElement(document.body, 'HTMLScript');\n//=> false\n```\n",
    "head_branch": "domtype",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6752119/badge)](https://coveralls.io/builds/6752119)\n\nCoverage decreased (-0.7%) to 96.144% when pulling **6c232dc4277b2f7ae487d33f917d93b2f5f87993 on tnga:domtype** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/6752119/badge)](https://coveralls.io/builds/6752119)\n\nCoverage decreased (-0.7%) to 96.144% when pulling **6c232dc4277b2f7ae487d33f917d93b2f5f87993 on tnga:domtype** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n",
      "This is too complicated for Underscore's purposes. Would make a great standalone library though.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e83a21fa1e1f1aac20",
    "number": 2555,
    "body": "",
    "head_branch": "linter-warnings",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6752100/badge)](https://coveralls.io/builds/6752100)\n\nCoverage decreased (-0.004%) to 96.863% when pulling **4051c4af940825a77528c2562cfdde50d120ec3b on tnga:linter-warnings** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/6991019/badge)](https://coveralls.io/builds/6991019)\n\nCoverage decreased (-0.004%) to 96.863% when pulling **05da85ab497ff3599adaf5cd865b156541229b34 on tnga:linter-warnings** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2555 from tnga/linter-warnings\n\nfix (eslint) warning \"index\" used outside of binding context"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04e93a21fa1e1f1aac21",
    "number": 2554,
    "body": "A precision can be now done with a given element type's name (egg: _HTMLLink, HTMLDiv, SVGEllipse, ..._).\n\n_examples_:\n\n``` js\n_.isElement(jQuery('body')[0]);\n//=>; true\n_.isElement(document.head, 'html');\n//=>; true\n_.isElement(document.createElement('a'), 'html-anchor');\n//=>; true\n// given type precision can also be in camelCase following DOM naming's spec.\n_.isElement(document.body, 'HTMLScript');\n//=>; false\n```\n",
    "head_branch": "domtype",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6751300/badge)](https://coveralls.io/builds/6751300)\n\nCoverage decreased (-1.08%) to 95.787% when pulling **12e1b5fbb71b4c856a58467726873a2ca95f2bd2 on tnga:domtype** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ea3a21fa1e1f1aac22",
    "number": 2553,
    "body": "I propose that functions are listed as the same order.\n\nI move matcher under propertyOf in sidebar,Because container is “property/propertyOf/matcher” order.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6750082/badge)](https://coveralls.io/builds/6750082)\n\nCoverage remained the same at 96.867% when pulling **b98304c81e6555a20645eefa775961ea7af54244 on ikasumiwt:master** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n",
      "This @coveralls thing is pretty obnoxious, isn't it?\n",
      "Yep.\n",
      "You can always keep coverage and disable the in-PR notifications.\n"
    ],
    "commit_messages": [
      "Merge pull request #2553 from ikasumiwt/master\n\nmatcher move to propertyOf in index.html"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04eb3a21fa1e1f1aac23",
    "number": 2546,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6613046/badge)](https://coveralls.io/builds/6613046)\n\nCoverage remained the same at 96.867% when pulling **f666dc292e28dc849f5ea2b9f58b48b050d78ae9 on VimalChaudhary:patch-2** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n",
      "Hi, thanks for the submission but this is a test file. I don't think its worthwhile to include documentation of the underscore methods here (the docs are present in underscore.js and index.html)\n",
      "@VimalChaudhary If you'd like to contribute documentation to our tests, the most useful way is to improve the test descriptions (in this case `'every'`) or improve the assertion message in some of our assertions.\n\nLet me know if you need to me clarify what I'm suggesting.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ec3a21fa1e1f1aac24",
    "number": 2545,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6612862/badge)](https://coveralls.io/builds/6612862)\n\nCoverage remained the same at 96.867% when pulling **20490c3c1fa801aa8e08dd91ba33ede1662636e9 on VimalChaudhary:patch-1** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n",
      "No thanks, same reason as the other.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ed3a21fa1e1f1aac25",
    "number": 2541,
    "body": "It's not available now.\n\nIt redirect to http://learningcn.com/legacy and is full of ads.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6395131/badge)](https://coveralls.io/builds/6395131)\n\nCoverage remained the same at 96.867% when pulling **9bf5d8ff6840cfb4cb9ebba7daca307bbb829368 on yangsibai:patch-1** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2541 from yangsibai/patch-1\n\nRemove Simplified Chinese link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ee3a21fa1e1f1aac26",
    "number": 2540,
    "body": "I have given deep merger functionality,\n_.deepMerge({a: {b: 1}, c: [1, 2]} {a: {c: 2}, c: [3, 1]})\n=> {a: {b: 1 c: 2}, c: [3, 1]} \n",
    "head_branch": "deep_merge",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6340450/badge)](https://coveralls.io/builds/6340450)\n\nCoverage increased (+0.03%) to 96.894% when pulling **8af48bb5c04ce35e86b461a4bae7267464278104 on sanket-redkar:deep_merge** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "This is very useful. Although I would add it as a flag (or option hash) under the existing `extend` method. Can any maintainer comment about when this is expected to be merged? Thanks\n",
      "Ok I am working on it.\n",
      "I have made the changes like this \n_.extend({a: {b: 1}, c: [1, 2]} {a: {c: 2}, c: [3, 1]}, 'deepMarge' )\n=> {a: {b: 1 c: 2}, c: [3, 1]} \n_.extend({a: {b: 1}, c: [1, 2]} {a: {c: 2}, c: [3, 1]}, 'deepMarge' )\n=> {a: {c: 2}, c: [3, 1]}\n",
      "[![Coverage Status](https://coveralls.io/builds/6414638/badge)](https://coveralls.io/builds/6414638)\n\nCoverage increased (+0.03%) to 96.894% when pulling **73230e7ec57ebb9529bbb2c7c0ad6123cf754f55 on sanket-redkar:deep_merge** into **3d118cf09fe4d3432aef9b5b6ab43e57ee9af34e on jashkenas:master**.\n",
      "Cool!\n\nI would follow the notion of adding options as a hashset rather than a string. Take a look at [throttle](http://underscorejs.org/#throttle) for example. So the method signature would be:\n\n```\n_.extend(destination, *sources, [options])\n```\n\nwhere `options` can be `{ deep: true/false }` with the default behaviour being `{deep: false}` so that the method is backward compatible. \n\nPlease note that I am **not** a moderator on this repo and do not have push permissions. I am just a fellow user like you making some friendly suggestions so treat it as you see fit ;)\n",
      "@syagev yes I am also think in that way that last one is options, but how would I achieve this with\n`_.extend(destination, *sources, [options])`\nbecause when we gave *source then last option  will also consider in source.\n",
      "You're right... I missed that... So probably better to create a new method like you suggested in the beginning: `_.extendDeep(destination, *sources)`.\n\nI guess that's why they have `extendOwn`...\n",
      "@syagev  My first commit only merge two hash, If we have to go with multiple hash then same issue will come..\nShall we do in bellow structure that \n`_.extend(destination, *sources, {options: {deep: true} })`\n\nand always consider last hash as option when it contain options key and as deep inner key\n",
      "What I meant is that it's probably better to go with your original suggestion of a separate method for this functionality (e.g `extendDeep`). That way it can have an identical signature to `extend`. I think the existence of an `extendOwn` method is good justification of this approach.\n",
      "Thanks for the PR work, but this idea's been rejected [many times before](https://github.com/jashkenas/underscore/pull/1585#issuecomment-40612083).\n",
      "@sanket-redkar @syagev  See [lodash/merge](https://github.com/lodash/lodash/blob/4.13.1-npm/merge.js) or [lodash.merge](https://www.npmjs.com/package/lodash.merge).\n",
      "Thanks @jdalton its useful.....\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ef3a21fa1e1f1aac27",
    "number": 2539,
    "body": "This PR adds `linspace()` to the array functions.  It also adds tests and documentation for the function.\n\n`linspace()` is a useful function for generating _n_ evenly-spaced numbers between two values.  It's pretty closely related to `range()`, but with range you're usually more interested in doing stuff with integers.  linspace() is especially useful when you want to generate values for plotting; if I want to plot cos(x) from 0 to 2pi, I can just do \n\n```\nx = _.linspace(0, 2*Math.PI);\ny = x.map(Math.cos);\n// However you want to plot it; e.g.\nPlotly.plot('myDiv', [{x: x, y: y}]);\n```\n\n`linspace()` gives a nice way of approaching this use case; and if it turns out you need more or fewer points, you just have to tweak the third parameter of linspace.\n### Prior Art\n\n[NumPy](http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.linspace.html) and [MATLAB](http://www.mathworks.com/help/matlab/ref/linspace.html) both have this function.  Note that they differ on the default value for number of points; I opted to go with 50, like NumPy, but it was an arbitrary decision that I made because I like Python more than MATLAB.\n\nP.S. I added documentation because I read CONTRIBUTING.md after I already added it, but I will rebase this PR to not include it if that works better for you.  I based the docs I added off of the _.range() function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hey Cody!\n\nThanks for your effort. Looks like this would be quite useful, as you said, for plotting and other types of data work. That being said, I don't believe this has a broad enough use-case for inclusion in Underscore proper. Having it as a pull request will likely help anyone else who is looking to implement it as a mixin. If there is more interest in the future we can revisit, but for now I'm going to close it.\n\nThanks for your effort, I'm sorry we aren't able to merge it at this time.\n",
      "This could just be written with `_.range`, right?\n\n``` js\n_.range(0, Math.PI, ((Math.PI - 0) / 50));\n```\n",
      "@captbaritone Thanks for the feedback!  No sweat on not being able to merge it.  Thanks for the feedback!\n\n@jridgewell This gives you a different way of thinking about getting a sequence of numbers than `_.range`.  You could definitely implement linspace using range, but you would normally use `linspace` when you know the number of points you want, and `range` when you know the spacing.  Of course, if you know either the spacing or the number of points you can calculate the other, but it just gives different ways of approaching the problem.  Also, `linspace` includes the endpoints, where range doesn't; however, if you use non-integer spacing for `range`, sometimes you get one more number than you might expect due to floating point weirdness. That never happens with linspace.  \n\nAn Example of an extra point using range: `_.range(0.5, 0.55, 0.01)` yields `[0.5, 0.51, 0.52, 0.53, 0.54, 0.55]`.  This isn't a problem with the implementation of range, of course, just a problem with all computers everywhere.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f03a21fa1e1f1aac28",
    "number": 2537,
    "body": "The uniq function does heavy operations that could cause performance issues on big arrays.\nThis commit utilizes the Map object if supported (95% browser support according to caniuse), to make such cases much faster.\nRunning a simple example in Chrome on an array with 10,000 unique elements:\n- Before - takes about 8 seconds\n- After - takes about 0.03 seconds\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6177466/badge)](https://coveralls.io/builds/6177466)\n\nCoverage increased (+0.02%) to 96.887% when pulling **e4620428175837f4471bde6d370764eb8a2743de on Tzook:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "Keep in mind this toggles the matching behavior from [strict equality](http://www.ecma-international.org/ecma-262/6.0/#sec-strict-equality-comparison) to [same value zero](http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero) depending on environment support.\n",
      "Good point @jdalton.\nThe only differences according to [this table](https://developer.mozilla.org/en/docs/Web/JavaScript/Equality_comparisons_and_sameness) are that -0 is not equal to +0, and that NaN equals to NaN.\nIn my opinion it makes even more sense for the function to use same-value-zero comparison. Having an array with multiple NaNs should result in only one NaN after using unique.\n",
      "Yep.\n",
      "Hello everyone, \r\nis this PR ever going to be merged, or does it need additional work?\r\n\r\nThanks",
      "- It would have to consistently use SameValueZero, even in environments that don't have `Map`.\r\n- There would have to be a new major release of Underscore in which we actually decided to use SameValueZero instead of strict equality *everywhere*. See #2453. It is not yet decided whether we will ever do that.\r\n- It shouldn't do `if`/`else` all over the place. Move the `supportsMap` out of the function and switch over its value only once instead of repeatedly in every loop iteration."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f13a21fa1e1f1aac29",
    "number": 2532,
    "body": "…imit the response.  Closes #2445.\n",
    "head_branch": "pickValues",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6063786/badge)](https://coveralls.io/builds/6063786)\n\nCoverage increased (+0.004%) to 96.871% when pulling **6ddeb6b5d35d224fc773ed24a59ccc4e98a0c0ab on monkpow:pickValues** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "- I believe that a correct implementation would be consistent with `_.pick` and ignore nonexistant keys instead of defaulting to `void 0`.\r\n- I believe that functions that are just trivial compositions of two other Underscore functions (in this case `_.pick` and the \"bare\" `_.values`) shouldn't be added to Underscore. Let's keep Underscore a lean, highly orthogonal library where the amount of functionality offered is a high power of the number of predefined functions.\r\n\r\nSorry for the long silence and the disappointing end, @monkpow."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f23a21fa1e1f1aac2a",
    "number": 2531,
    "body": "I chose the name _.method per the above suggestion, but am happy to adjust if this does not match the project guidelines.\n\nFixes #2286\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6062910/badge)](https://coveralls.io/builds/6062910)\n\nCoverage increased (+0.03%) to 96.894% when pulling **10bc63eb35b9709576a29ddf1f35e588ffd304a0 on monkpow:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/6065646/badge)](https://coveralls.io/builds/6065646)\n\nCoverage increased (+0.03%) to 96.894% when pulling **037d5a8c9eb3c7a1e20e94848792eae5d52db7cc on monkpow:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "@megawac Thanks for the quality feedback.  Updated diff addresses:\n- use restArgs\n- don't use `this` keyword, use direct reference\n- Clarified comment and token in response to Question: \"is this not valid when a function is provided?\".  Added narrative above in this thread.\n- check if value is a function in the outer function.\n",
      "fyi [lodash/method](https://github.com/lodash/lodash/blob/4.11.2-npm/method.js).\n",
      "[![Coverage Status](https://coveralls.io/builds/6077062/badge)](https://coveralls.io/builds/6077062)\n\nCoverage increased (+0.02%) to 96.891% when pulling **3fa1ae3bc43045efed263d78754c050fd6cfe000 on monkpow:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f33a21fa1e1f1aac2b",
    "number": 2529,
    "body": "Include [isSafeInteger](http://www.ecma-international.org/ecma-262/6.0/#sec-number.issafeinteger) as referenced in [issue 2455](https://github.com/jashkenas/underscore/issues/2455) by @jdalton.\n\nThe conditions are:\n1. If Type(number) is not Number, return false.\n2. If number is NaN, +∞, or −∞, return false.\n3. Let integer be ToInteger(number).\n4. If integer is not equal to number, return false.\n5. Otherwise, return true.\n",
    "head_branch": "is-safe-integer",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6056474/badge)](https://coveralls.io/builds/6056474)\n\nCoverage increased (+0.008%) to 96.875% when pulling **de69ee56ea5d37cd6c73d95a8d549dca3d3bff72 on devanp92:is-safe-integer** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "Postponing decision on this. As I wrote in #2455, I think this rather belongs in an extension library."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f43a21fa1e1f1aac2c",
    "number": 2528,
    "body": "In nodejs 0.12, `String(Symbol())` got a\n\n```\nTypeError: Cannot convert a Symbol value to a string\n    at String (native)\n    at repl:1:8\n    at REPLServer.defaultEval (repl.js:132:27)\n    at bound (domain.js:291:14)\n    at REPLServer.runBound [as eval] (domain.js:304:12)\n    at REPLServer.<anonymous> (repl.js:279:12)\n    at REPLServer.emit (events.js:107:17)\n    at REPLServer.Interface._onLine (readline.js:214:10)\n    at REPLServer.Interface._line (readline.js:553:8)\n    at REPLServer.Interface._ttyWrite (readline.js:830:14)\n```\n\nThis node 0.12 v8 bug is impossible to fix in JS-land, and is fixed in io.js and node v4.0 and later.\n\n`Symbol().toString()` works well\n",
    "head_branch": "fix-symbol-bug-in-node-0.12",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6041810/badge)](https://coveralls.io/builds/6041810)\n\nCoverage remained the same at 96.867% when pulling **c35f42870584340002764b34554ab3630c5218f4 on CodeFalling:fix-symbol-bug-in-node-0.12** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/6046186/badge)](https://coveralls.io/builds/6046186)\n\nCoverage remained the same at 96.867% when pulling **b165863c7ed6adb462a13ff23d0336370fb75d51 on CodeFalling:fix-symbol-bug-in-node-0.12** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      ":meh:\n\na) How long do we want to be supporting Node 0.12.x for? \nb) How deep do we want our support for Symbols to be? I think Underscore is taking the position that they're a \"bad part\" of ES2015.\n",
      "@CodeFalling I don't see any update on this issue, could you please consider closing it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f53a21fa1e1f1aac2d",
    "number": 2527,
    "body": "",
    "head_branch": "fix-memoize-symbol",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6040570/badge)](https://coveralls.io/builds/6040570)\n\nCoverage remained the same at 96.867% when pulling **d35fb0396d4f4c39bf4da18e9ac4f22d1be129a6 on CodeFalling:fix-memoize-symbol** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "Faild because of a nodejs 0.12 bug, fixed in https://github.com/jashkenas/underscore/pull/2528\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f53a21fa1e1f1aac2e",
    "number": 2525,
    "body": "combine some duplicate code in _.every and _.some\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "See #1637, #2383 and some others. This has been proposed now and then, but was dismissed for perf implications.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f63a21fa1e1f1aac2f",
    "number": 2524,
    "body": "some code duplication in _.every and _.some function \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f73a21fa1e1f1aac30",
    "number": 2523,
    "body": "_add support for maps within _.pairs method by returning array of map entries._\n\nI decided to go with a different approach. Returning an array of `obj.entries()` seemed a little bit cleaner than iterating over each entry, and seemed to follow the pattern of type-check -> return in the `_.keys` method. Happy to use a loop though if it is deemed the better option. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/6007677/badge)](https://coveralls.io/builds/6007677)\n\nCoverage increased (+0.004%) to 96.871% when pulling **675c8d2d3618ee92f6b7c09a5c24b44a85b883fb on penDerGraft:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "Looking into failed tests...\n",
      "[![Coverage Status](https://coveralls.io/builds/6007722/badge)](https://coveralls.io/builds/6007722)\n\nCoverage increased (+0.004%) to 96.871% when pulling **675c8d2d3618ee92f6b7c09a5c24b44a85b883fb on penDerGraft:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "Should this support Sets too?\n",
      "What would be the desired behavior for `_.pairs` of Sets? For Maps/Objects it is key, value, but Sets don't have quite the same structure. What should be returned?\n",
      "I'm not entirely sure. It could be the same entries call, with the output\njust passing that along (2 arrays of arrays, if I'm not mistaken)\n",
      "[![Coverage Status](https://coveralls.io/builds/6014537/badge)](https://coveralls.io/builds/6014537)\n\nCoverage increased (+0.03%) to 96.894% when pulling **742033f3de979e46a99d3e9553088e5897d49952 on penDerGraft:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/6014573/badge)](https://coveralls.io/builds/6014573)\n\nCoverage increased (+0.03%) to 96.894% when pulling **742033f3de979e46a99d3e9553088e5897d49952 on penDerGraft:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/6014605/badge)](https://coveralls.io/builds/6014605)\n\nCoverage increased (+0.03%) to 96.894% when pulling **742033f3de979e46a99d3e9553088e5897d49952 on penDerGraft:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "Using the logic in the last commit, if a check for `_.isSet` is added as well, it will return an array of arrays which contain two of each entry in the Set.\n\n``` javascript\nvar s = new Set([1,2,3]);\n_.pairs(s);\n// => [[1,1], [2,2], [3,3]]\n```\n\n@akre54 If that's what you're envisioning, I can add the check. \n",
      "Yeah I think it should be treated like an object with `{[key]: key}` (a la [keymirror](https://www.npmjs.com/package/keymirror))\n",
      "Ok, as part of this PR or a new one? Seems like it could be a separate issue.  \n",
      "Separate pull is fine, interested to hear the other maintainers thoughts on it too.\n",
      "[![Coverage Status](https://coveralls.io/builds/6031142/badge)](https://coveralls.io/builds/6031142)\n\nCoverage increased (+0.03%) to 96.894% when pulling **5355cc6b0aaaa4eaadc4a76f5a69372a2349fa55 on penDerGraft:master** into **53086b0f9f6cb4e2fb4eede82b4ef9f74bca030a on jashkenas:master**.\n",
      "Closing for the same reason as #2808. See also #2147."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f83a21fa1e1f1aac31",
    "number": 2521,
    "body": "Because the \"Functions\" section heading already uses `#functions` the\nindividual method uses an irregular id. I missed this in #2514.\n",
    "head_branch": "fix-objects",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5988967/badge)](https://coveralls.io/builds/5988967)\n\nCoverage remained the same at 96.867% when pulling **f0b9f4fc925663f10283c43bd2944a00fb21ef0d on captbaritone:fix-objects** into **011184775233f32a523f7b178513554942400137 on jashkenas:master**.\n",
      "I'll cherry-pick to `gh-pages`.\n",
      "Cherry-pick complete.\n"
    ],
    "commit_messages": [
      "Merge pull request #2521 from captbaritone/fix-objects\n\nUse the irregular id when jumping to `functions`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04f93a21fa1e1f1aac32",
    "number": 2520,
    "body": "fix #2501, now\n\n``` js\n_.sortBy([4, Symbol()], 3, 2);       // [4, Symbol(), 2, 3], just as sort a array contain object\n_.max([Symbol(), 1, 4, 6]);          // 1\n_.min([Symbol(), 1, 4, 6]);           // 6\n```\n",
    "head_branch": "fix-sortby-max-min-error-on-symbol",
    "is_a_fork": true,
    "comments": [
      "Out of honest curiosity — what exactly are Symbols in JavaScript good for? \r\n\r\nDo they do anything that can't be better accomplished with strings?\r\n\r\nIs their *only* value that you can get names that are guaranteed not to conflict? When is that useful in real world code?",
      "Closing for the same reason as #2501.\r\n\r\n@jashkenas `Symbol` probably has some kind of purpose, but in any case, it is not sortable with operator `<`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04fa3a21fa1e1f1aac33",
    "number": 2519,
    "body": "fix #2503 \n\nwhen `obj = Symbol()`\n\n``` js\nisNaN(obj) && _.isNumber(obj)     // Uncaught TypeError: Cannot convert a Symbol value to a number\n_.isNumber(obj) && isNaN(obj)     // false \n```\n",
    "head_branch": "fix-isnan-error-symbols",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5969563/badge)](https://coveralls.io/builds/5969563)\n\nCoverage remained the same at 96.867% when pulling **24772954cc04b9bafb5142f36ef2ab151243c049 on CodeFalling:fix-isnan-error-symbols** into **1e68f06610fa4ecb7f2c45d1eb2ad0173d6a2cc1 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/5969680/badge)](https://coveralls.io/builds/5969680)\n\nCoverage remained the same at 96.867% when pulling **e1741aba46db0a24c45a8aec8f05414fa3c2c73d on CodeFalling:fix-isnan-error-symbols** into **1e68f06610fa4ecb7f2c45d1eb2ad0173d6a2cc1 on jashkenas:master**.\n",
      "Thanks\n"
    ],
    "commit_messages": [
      "Merge pull request #2519 from CodeFalling/fix-isnan-error-symbols\n\nfix _.isNaN errors on symbols"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04fb3a21fa1e1f1aac34",
    "number": 2518,
    "body": "…ttribute.\n\nSince I need a dynamic optimisation using a debounced function, I need to add some logic to determine the wait time to execute the function. For that, I let the _.debounce function to accept functions.\n\nExample:\n\n```\nvar dynamicWait = function() {\n    if(a) { return 10; }\n    else { return 1000; }\n}\n_.debounce(someFunc, dynamicWait);\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5948022/badge)](https://coveralls.io/builds/5948022)\n\nCoverage increased (+0.004%) to 96.871% when pulling **87b07eba890d6db571da9b2eed8f4f90d01d9134 on paulocheque:master** into **1e68f06610fa4ecb7f2c45d1eb2ad0173d6a2cc1 on jashkenas:master**.\n",
      "This change looks relatively harmless, but I still see three reasons not to merge it:\r\n\r\n- This is obscure functionality that almost nobody needs. Evidence: this PR was opened four years ago and since then nobody has asked for its continuation or even added a thumbs-up.\r\n- I found a mention in the above linked PR (https://github.com/pluralsight/guides-cms/pull/47) that the project that does need this already has its own `debounce` implementation to cater to this need.\r\n- No tests are provided for the new functionality.\r\n\r\nClosing for now, but could in theory be reopened."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04fc3a21fa1e1f1aac35",
    "number": 2516,
    "body": "See #2501 , now\n\n``` js\n_.sortBy([4, Symbol()], 3, 2);       // [4, Symbol(), 2, 3], just as sort a array contain object\n_.max([Symbol(), 1, 4, 6]);          // 1\n_.min([Symbol(), 1, 4, 6]);           // 6\n```\n\nAnd add `_.isSymbol()`\n",
    "head_branch": "add-isSymbol",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5918965/badge)](https://coveralls.io/builds/5918965)\n\nCoverage decreased (-0.1%) to 96.75% when pulling **48e38cae6434f017f5e2002536c3652188b1e03a on CodeFalling:add-isSymbol** into **ce591c814b44f33df45a77f3c55ffb8f9d25bba6 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/5919120/badge)](https://coveralls.io/builds/5919120)\n\nCoverage decreased (-0.1%) to 96.75% when pulling **a7ef53593b9ce3e950225b0e421fd83651df2eab on CodeFalling:add-isSymbol** into **ce591c814b44f33df45a77f3c55ffb8f9d25bba6 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/5919250/badge)](https://coveralls.io/builds/5919250)\n\nCoverage decreased (-0.1%) to 96.75% when pulling **bdf437ca4488f544ed662dc40c3e0b3037d7b4ef on CodeFalling:add-isSymbol** into **ce591c814b44f33df45a77f3c55ffb8f9d25bba6 on jashkenas:master**.\n",
      "Sorry for a mess pr, there is already a `_.isSymbol`\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04fd3a21fa1e1f1aac36",
    "number": 2515,
    "body": "See #2498\n\n``` js\n_(Symbol('a')).toString();  // Symbol(a)\n```\n",
    "head_branch": "safer-tostring",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5916345/badge)](https://coveralls.io/builds/5916345)\n\nCoverage remained the same at 96.867% when pulling **d484f8ff4486c6894684af2bbbb0834a38d69674 on CodeFalling:safer-tostring** into **ce591c814b44f33df45a77f3c55ffb8f9d25bba6 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2515 from CodeFalling/safer-tostring\n\nsafer _#toString, fix #2498"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04fe3a21fa1e1f1aac37",
    "number": 2514,
    "body": "With a utility library like Underscore, it is very common to open the docs with the aim of locating the documentation for a specific function.\n\nCurrently I use my browser's search functionality, but since many functions reference other functions, I frequently have to cycle through multiple matches before I arrive at the actual function's description.\n\nThis patch aims to improve this common use case by offering a \"filter\" input above the list of functions. As a user types, the list of functions (and section titles) is reduced, leaving only the matching functions. If the user presses enter, they are jumped to the documentation for the first matching\nfunction.\n\nThis functionality (and implementation) is greatly inspired by the implementation that is included in the [Ramda docs](http://ramdajs.com/0.21.0/docs/).\n\nYou can read their source code [here](https://github.com/ramda/ramda.github.io/blob/master/main.js)\n\nTo aid in review, you can find try out the functionality here: https://rawgit.com/captbaritone/underscore/search/index.html\n## Possible Improvements\n1. The look of the search input could be improved.\n2. The \"autofocus\" feature is not currently working on Firefox.\n",
    "head_branch": "search",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5913536/badge)](https://coveralls.io/builds/5913536)\n\nCoverage remained the same at 96.867% when pulling **66da49f8715b80cf26ac4204e8f30c03bc0e1ca7 on captbaritone:search** into **ce591c814b44f33df45a77f3c55ffb8f9d25bba6 on jashkenas:master**.\n",
      "The input seems a bit out of place (at least on FF 45, on Chromium it's OK). Could be cool to add it a width: 80% or something like this. \n\nExcept this :+1: very nice work.\n",
      "@Florian-R Good idea. Added.\n",
      "[![Coverage Status](https://coveralls.io/builds/5922491/badge)](https://coveralls.io/builds/5922491)\n\nCoverage remained the same at 96.867% when pulling **ef9ee4b7f54ecf4387f681d54dbca36ad0cb0e85 on captbaritone:search** into **1e68f06610fa4ecb7f2c45d1eb2ad0173d6a2cc1 on jashkenas:master**.\n",
      "👍. Someone else want to weigh in?\n",
      "I'll merge this later today, unless somebody objects.\n",
      "There are some merge conflicts between this PR and the `gh-pages`. I'll resolve those tomorrow or Saturday and push.\n",
      "I've cherry-picked this over to `gh-pages`. The only conflict was that `master` includes docs for `isSymbol` which is not yet in the current release.\n",
      "This might be the best thing to ever happen to underscore.\n",
      "This is super nice! @captbaritone — Would you be interested in adding the same functionality over on the Backbone docs?\n",
      "@jashkenas Glad you like it! @msrose and I will take a look at porting it to Backbone.\n",
      "FYI: https://github.com/jashkenas/backbone/pull/4075\n"
    ],
    "commit_messages": [
      "Merge pull request #2514 from captbaritone/search\n\nMake functions in docs filterable"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e04ff3a21fa1e1f1aac38",
    "number": 2513,
    "body": "Fix #2495\n\nNow return `undefined` when use `_.first` or `_.last` on empty array.\n\n``` js\nArray.prototype[0] = 'boo';\n_.first([]) // undefined\n\nvar arr = [];\narr[-1] = 'boo'\n_.last(arr); // undefined\n```\n",
    "head_branch": "check-length-in-first-last",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5908992/badge)](https://coveralls.io/builds/5908992)\n\nCoverage remained the same at 96.867% when pulling **507b858e0ba99d158b1ad61d97f260e7d7ec04f9 on CodeFalling:check-length-in-first-last** into **9c181168b8513238332ed759d9bb3129efcd5178 on jashkenas:master**.\n",
      "Thanks!\n",
      "I would like to understand the motivation for this change. Why in this case `first` should return `undefined` instead of `boo`? Moreover, this does not work completely for sparse arrays:\r\n![image](https://user-images.githubusercontent.com/6077446/45100326-eb0fdf80-b131-11e8-98ba-15619b5f9899.png)\r\n![image](https://user-images.githubusercontent.com/6077446/45100346-f531de00-b131-11e8-82cb-461e482267d8.png)\r\n\r\n"
    ],
    "commit_messages": [
      "Merge pull request #2513 from CodeFalling/check-length-in-first-last\n\ncheck length in _.first and _.last, fix #2495"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05003a21fa1e1f1aac39",
    "number": 2510,
    "body": "Our formatting was a bit inconsistent.\n",
    "head_branch": "aliases",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5905371/badge)](https://coveralls.io/builds/5905371)\n\nCoverage remained the same at 96.867% when pulling **e90055343e86122782cbcc7623dab0770e48c132 on captbaritone:aliases** into **cb95672d7e2ac52f4b85d75d61d578e633137c99 on jashkenas:master**.\n",
      ":+1:\n",
      "I've cherry-picked this onto the `gh-pages` branch.\n"
    ],
    "commit_messages": [
      "Merge pull request #2510 from captbaritone/aliases\n\nCleanup docs for methods with multiple aliases"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05013a21fa1e1f1aac3a",
    "number": 2509,
    "body": "I've added default data support for the template() method. It makes it possible to\n- add default data\n- adding helper functions\n\nExample:\n\n``` javascript\nvar tpl = '<%= greet(name) %>';\n\nvar hello = function(name){\n  return 'Hello '+name+'!';\n};\n\nvar hey = function(name){\n  return 'Hey '+name+'!';\n};\n\nvar defaultData = {\n  greet: hello,\n  name: 'Jack'\n};\n\nvar settings = _.templateSettings;\nvar compiled = _.template(tpl,settings,settings,defaultData);\nconsole.log(compiled());\n// => \"Hello Jack!\"\nconsole.log(compiled({name:'Bill'}));\n// => \"Hello Bill!\"\nconsole.log(compiled({greet:hey}));\n// => \"Hey Jack!\"\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I think Underscore expects you to solve this problem at the data layer using something like http://backbonejs.org/#Model-defaults would something like that work for you?\n",
      "Well, I must confess, I've never worked with backbonejs...\n\nI've started to work on a \"code factory\", which should be able to render code templates / snippets from template files.\nSo I've been looking for a rendering engine, written in node.js, which can render the files and fill with data and I decided to use underscorejs.\nI also need to be able to pass default values, helper functions and sub renderers to the code renderer, so I thought this little enhancement could make it easier.\n",
      "It looks like you're in the market for a more full-featured, dedicated templating library.  Maybe check out dust, or marko?\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05013a21fa1e1f1aac3b",
    "number": 2508,
    "body": "This address #2456 and #2507.\nI cancelled my last pull request and moved isEq to be an internal function that is included inside of _.isEqual.  It will call deepEq to compare object values, which will continue to call eq unless it encounter a set or a map, in which case it will call isEq for proper handling of 0 and -0.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5885418/badge)](https://coveralls.io/builds/5885418)\n\nCoverage decreased (-1.4%) to 95.443% when pulling **2e5386264a45b1d0c1a621ceef4adec4ed9229be on aebrow4:master** into **cb95672d7e2ac52f4b85d75d61d578e633137c99 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/5885772/badge)](https://coveralls.io/builds/5885772)\n\nCoverage decreased (-0.6%) to 96.305% when pulling **c05eefecc3d0ef71608733f61ec071533e643889 on aebrow4:master** into **cb95672d7e2ac52f4b85d75d61d578e633137c99 on jashkenas:master**.\n",
      "Node did not recognize the Set constructor in the test script.\n`underscore/test/objects.js:569:23`\n\n> PhantomJS 2.1.1 (Linux 0.0.0) Objects isEqual FAILED\n>   Died on test #100 /home/travis/build/jashkenas/underscore/test/objects.js:315:13\n>   global code@/home/travis/build/jashkenas/underscore/test/objects.js:1110:2: Can't find variable: Set\n>   /home/travis/build/jashkenas/underscore/test/objects.js:569:23\n",
      "@jdalton is any action on my part required?  Since the build check that failed seems to be related to Node not recognizing the Set constructor I am assuming no.\n",
      "@aebrow4 You should guard those tests on the existence of Set \n",
      "@michaelficarra I looked at this for a while but couldn't figure out what I need to do, since all of the tests in object.js are passing and the problem seems to be in a file module.js that is not in the repo.  If you could give me more information on what to do that would helpful.\n\n![image](https://cloud.githubusercontent.com/assets/9407787/14974559/0ac5753a-10ab-11e6-9ddb-9a6e7b5a3082.png)\n",
      "@aebrow4 You have to wrap the section of the test that mentions `Set` in `if (typeof Set != \"undefined\") { ... }`. And similarly for `Map`. See similar tests with `Symbol` or `Promise` if you're still confused.\n",
      "[![Coverage Status](https://coveralls.io/builds/6031230/badge)](https://coveralls.io/builds/6031230)\n\nCoverage decreased (-0.6%) to 96.305% when pulling **f4c98592a2e9625d742cc91cb2a931a6832d5a30 on aebrow4:master** into **cb95672d7e2ac52f4b85d75d61d578e633137c99 on jashkenas:master**.\n",
      "@michaelficarra all taken care of now\n",
      "Closing because this is only a partial implementation of #2147, and because the the `eq/deepEq` split already exists on `master`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05023a21fa1e1f1aac3c",
    "number": 2507,
    "body": "Added a SameValueZero check per [#2456 ](https://github.com/jashkenas/underscore/issues/2456)\nUsed the same implementation as @jdalton in [lodash](https://github.com/lodash/lodash/blob/4.6.1-npm/eq.js)\n\n> _.isEq(a, b) performs a SameValueZero comparison on values a and b.\n> http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5867761/badge)](https://coveralls.io/builds/5867761)\n\nCoverage decreased (-0.1%) to 96.75% when pulling **057633ba9fd6e02a0b4652ab2773209d19eb48c9 on aebrow4:master** into **cb95672d7e2ac52f4b85d75d61d578e633137c99 on jashkenas:master**.\n",
      "Why is an implementation of `SameValueZero` favourable over an implementation of `SameValue`?\n",
      "`SameValueZero` is what `Map` and `Set` use so following that allows those to be used internally.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05033a21fa1e1f1aac3d",
    "number": 2506,
    "body": "This change was introduced in #2502 without tests or docs. This commit adds\nthose two missing pieces.\n",
    "head_branch": "test-mixins",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5838411/badge)](https://coveralls.io/builds/5838411)\n\nCoverage remained the same at 96.867% when pulling **8707c00bae6a264d58f90de15d67ba5b1aca737d on captbaritone:test-mixins** into **0f8895ef8e3ce3adfc61978318cd95d4d7f94c18 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2506 from captbaritone/test-mixins\n\nAdd tests and docs for `_.mixin` chaining"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05043a21fa1e1f1aac3e",
    "number": 2502,
    "body": "Will allow user to chain mixin(), and most importantly use mixin() in the dependency section of the file, and only there.\n\n**The Motivation**\n\nI'm currently extending underscore like this:\n\n```\nvar s = require('underscore.string');\nvar _ = require('underscore');\n    _ = _.mixin(s.exports()) || _; // Ohhh this is nasty\n```\n\nBut I'd rather use it like this:\n\n```\nvar s = require('underscore.string');\nvar _ = require('underscore').mixin(s.exports());\n```\n\nOr even:\n\n```\nvar _ = require('underscore')\n        .mixin(require('underscore.string').exports())\n        .mixin([another module]);\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5809226/badge)](https://coveralls.io/builds/5809226)\n\nCoverage increased (+0.004%) to 96.867% when pulling **929fc74b880a87e669229597b9c5cf6cdd2dbf14 on amit3vr:master** into **5500925f9f6d4b30f02d24196364735532624ba9 on jashkenas:master**.\n",
      "Seems reasonable to me.\n\nWe should probably add some tests and possibly some documentation.\n",
      "I'm a fan. Lodash supports this.\n",
      "I'll followup with tests and docs.\n",
      "Awesome! good job @captbaritone \n"
    ],
    "commit_messages": [
      "Merge pull request #2502 from amit3vr/master\n\nReturn self after using mixin()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05053a21fa1e1f1aac3f",
    "number": 2500,
    "body": "I found this helpful when learning to use underscore and while helping others learn to use underscore.js\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5794811/badge)](https://coveralls.io/builds/5794811)\n\nCoverage decreased (-0.1%) to 96.746% when pulling **6c2c83e191e366155dac7bdfbf8df37fd33e0a80 on rexfordkelly:master** into **5500925f9f6d4b30f02d24196364735532624ba9 on jashkenas:master**.\n",
      "Thanks but no thanks. \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05063a21fa1e1f1aac40",
    "number": 2499,
    "body": "Similarly as in [https://github.com/jashkenas/underscore/pull/2496](url), I found that  _flatten_ function can be optimized by swapping the order of checks in logical expression in line 500 (the second check is false most of the time). I provide the screenshot with the results for unit tests which performance got improved  (on V8 4.4 engine). Inputs are the same as in unit tests in the repository and performance is tested with Benchmark.js library.\n![selection_012](https://cloud.githubusercontent.com/assets/7926726/14528426/958093cc-024f-11e6-885c-d63cf9f7cd61.png)\n\nThe code for tests can be download from: https://s3.eu-central-1.amazonaws.com/underscorebenchmark/benchmarks2.zip \n\nTo run the tests, just call \n\n> node run.js\n\nI am maybe wrong, but can isArrayLike(value) check be omitted here?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5786313/badge)](https://coveralls.io/builds/5786313)\n\nCoverage remained the same at 96.863% when pulling **f126f19c47b21c6068ac74ce440c0b9f817c4d14 on marijaselakovic:master** into **5500925f9f6d4b30f02d24196364735532624ba9 on jashkenas:master**.\n",
      "Yes, `isArrayLike` can be removed here\n",
      "> Yes, isArrayLike can be removed here\n\nNot quite. This opt will only benefit `isArray` since it's faster than `isArrayLike + isArray` on non-array objects. But this'll hurt the `isArguments` check, since that uses the slower `toString` comparison.\n\nInstead, we should guard only the `isArguments` check:\n\n``` js\nif (_.isArray(value) || (isArrayLike(value) && _.isArguments(value)) {\n  //...\n}\n```\n",
      "`isArrayLike` *could* be removed, as it is only there to improve performance. The current check is already optimal, however:\r\n\r\n&nbsp; | arrays | arguments | other\r\n---|---|---|---\r\ncurrent | `isArrayLike` + `isArray` | `isArrayLike` + `isArray` + `isArguments` | `isArrayLike`\r\nmarijaselakovic | `isArray` + `isArrayLike` | `isArray` + `isArguments` + `isArrayLike` | `isArray` + `isArguments` + `isArrayLike`\r\nmegawac | `isArray` | `isArray` + `isArguments` | `isArray` + `isArguments`\r\njridgewell | `isArray` | `isArray` + `isArrayLike` + `isArguments | `isArray` + `isArrayLike`\r\n\r\nThe `toString`-based checks `isArray` and `isArguments` are more expensive than the heuristic `isArrayLike`. See the comments in the resolved part of the second review in #2840. Avoiding `isArrayLike` for arrays is only a small optimization while having `isArray` for other values is a big pessimization."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05073a21fa1e1f1aac41",
    "number": 2496,
    "body": "You might consider optimizing _.isNaN function  by changing the order in which checks are executed.  I run all tests and observed that isNaN(obj) is false for most of cases. By putting isNaN(obj) to be checked first, every time when it is false, the time spent in _.isNumber(obj) is saved. \n\nBy swapping checks, I got the following performance improvements on V8 engine:\nTest: isNaN - 38%\nTest: indexof with NaN - 46,37% \nTest: last indexof with NaN  - 23% \nTest: includes with NaN - 61,73% \n\nEven though this is a simple change, it seems to improve performance without affecting the readability of the code.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5770888/badge)](https://coveralls.io/builds/5770888)\n\nCoverage remained the same at 96.863% when pulling **10d2d64dc92e8939e64ce38039051870139956ce on marijaselakovic:master** into **9f2fcbb171f6babcb0b83c32b902b02f22dfb355 on jashkenas:master**.\n",
      "Thanks\n",
      "I would've liked to have seen the benchmark data before merging this.\n",
      "Do you have benchmark for assessing the performance of underscore? I would like to run it too.\n",
      "Yeah we typically use [jsperf](https://jsperf.com/) but it's down at the moment (see jsperf/jsperf.com#18). In the meantime we can bench using benchmark.js, or just a plain loop with `performance.now`. \n",
      "After modifying the code, I run all unit tests, such that each test is repeatedly executed several times (including time for warm up) in 5 fresh VM instances. Based on obtained measurements I returned tests for which the difference in execution time is statistically significant (the same methodology as Benchmark.js). I already reported the results.\n",
      "Yeah I benchmarked this as well a while ago but never submitted a patch so\nwas fine with merging\nOn Apr 13, 2016 11:18 AM, \"marijaselakovic\" notifications@github.com\nwrote:\n\n> After modifying the code, I run all unit tests, such that each test is\n> repeatedly executed several times (including time for warm up) in 5 fresh\n> VM instances. Based on obtained measurements I returned tests for which the\n> difference in execution time is statistically significant (the same\n> methodology as Benchmark.js). I already reported the results.\n> \n> —\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly or view it on GitHub\n> https://github.com/jashkenas/underscore/pull/2496#issuecomment-209504188\n",
      "I was not questioning the _methodology_, I was questioning the _data_.\n",
      "I reported the data in the description and explained the methodology later to show how the data are obtained.\n",
      "The data used as input to the function during the benchmark.\n",
      "I created benchmarks for 4 tests mentioned above and used the same input as in unit tests. You can download it from https://s3.eu-central-1.amazonaws.com/underscorebenchmark/benchmarks.zip. To run, just call \n\n> node run.js\n\nfrom benchmarks directory (the output is the same as in jsperf, because I used Benchmark.js library)\n",
      "However, when `obj = Symbol()`\n\n``` js\nisNaN(obj) && _.isNumber(obj)     // Uncaught TypeError: Cannot convert a Symbol value to a number\n_.isNumber(obj) && isNaN(obj)     // false \n```\n\nSee https://github.com/jashkenas/underscore/issues/2503\n"
    ],
    "commit_messages": [
      "Merge pull request #2496 from marijaselakovic/master\n\nOptimization of _.isNaN"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05083a21fa1e1f1aac42",
    "number": 2494,
    "body": "Replaces #2486\n\nInspired by underscore-contrib`'s _.getPath` and lodash's deep property access,\nthis adds an Array deep property access shorthand to many aspects of\nUnderscore, including:\n- `_.property`\n- `_.iteratee` and all methods that depend on it.\n- `_.has`\n- `_.result` (including deep evaluation)\n# Possible Concerns\n## `_.property`\n\nWhile `_.property` does not get called in any place that would present\na performance concern, `getLength` (which is created by `_.property`) gets used\nin many places which _may_ have performance ramifications.\n\nI've placed the `isArray` call in the outer function of `_.property` in an\nattempt to reduce complexity inside the generated function. This required\ndefining `isArray` earlier.\n\nIt's possible that this still isn't fast enough, and we should just define\n`getLength` manually.\n## `_.has`\n\nThis adds some complexity to `_.has` which underpins many methods. It's\npossible that we may want to use a simpler \"flat\" version of `_.has`\ninternally.\n# Further work\n\nWe may want to expose some additional helper methods:\n- `_.get`\n- `_.set`\n- `_.unset`\n\nFixes: #2372, an elegant solution to an oft requested feature: (see: #2370,\n #2268, #1169, #1266)\n",
    "head_branch": "deep-2",
    "is_a_fork": true,
    "comments": [
      "Related to https://github.com/jashkenas/backbone/pull/3988.\n",
      "Thoughts @megawac ?\n",
      "This is ready for another review. I've fast-tracked the shallow case for each function, and cleaned up a few edge cases.\n",
      "[![Coverage Status](https://coveralls.io/builds/8244298/badge)](https://coveralls.io/builds/8244298)\n\nCoverage increased (+0.1%) to 96.959% when pulling **353b23aae4a4b0e73763daeebe5a1531d1c33d1a on captbaritone:deep-2** into **c97f687579d3e6278a0a9a44df4c0b75f522ef41 on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8247933/badge)](https://coveralls.io/builds/8247933)\n\nCoverage increased (+0.1%) to 96.966% when pulling **64b515840164408183c09388c47f1bc35c9b6a71 on captbaritone:deep-2** into **93c32d79a7a640187f1a929f1d77f2c55d31a76b on jashkenas:master**.\n",
      "[![Coverage Status](https://coveralls.io/builds/8256498/badge)](https://coveralls.io/builds/8256498)\n\nCoverage increased (+0.1%) to 96.966% when pulling **3abd3245a2219ccce838e70ccfba9994935c46bc on captbaritone:deep-2** into **93c32d79a7a640187f1a929f1d77f2c55d31a76b on jashkenas:master**.\n",
      "Feedback addressed.\n",
      "LGTM, thought we should definitely have someone else weigh in.\n",
      "I think this sort of thing makes sense — only if you do it all at once, and update the Underscore API to accept deep path traversals in any function where they'd be useful.\n\nFor example: `_.findWhere`, where you're looking for a match on a deep property within the objects.\n\nI'm not seeing that type of thing in the tests. Does this patch do that?\n",
      "@jashkenas We are only implementing array-style deep property access, and since an array cannot reasonably be used as an object key, this does not affect anything that uses a `_.matcher` object.\n\nIf we wanted to support deep property matching with `_.matcher`'s object syntax, we would need to allow for a string-based deep property access syntax (like `\"a.b.c\"` for example), which I believe, based upon previous discussion, has been ruled too magical.\n\nBy modifying `_.property` (and thus `_.iteratee`), `_.has` and `_.result` I believe we are adding the array-style deep property access to all places in Underscore that currently offer shallow property access via a passed string.\n\nYou bring up a good question regarding test. Should we add explicit tests to each function that we expect to support this syntax, or would that be redundant?\n",
      "> If we wanted to support deep property matching with `_.matcher`'s object syntax, we would need to allow for a string-based deep property access syntax (like `\"a.b.c\"` for example), which I believe, based upon previous discussion, has been ruled too magical.\n\nGiven how successful and rock-solid path strings have been in lodash, I wonder if an implementation here might be worth revisiting?  I only say this because it's now a battle-tested and widely appreciated concept.  When last this was discussed, a lot of people wanted it, but it seemed like a large and brittle proposition to write a mini-parser for path strings.  Things might look different now.\n",
      "@bjmiller Given the (possibly) controversial nature of path strings, and that the array syntax can be merged as a standalone enhancement, I'd rather keep this pull request discussion focused on just array syntax. Once/if we have the array syntax, we can readdress the string syntax question.\n",
      "> Given how successful and rock-solid path strings have been in lodash, I wonder if an implementation here might be worth revisiting? I only say this because it's now a battle-tested and widely appreciated concept. When last this was discussed, a lot of people wanted it, but it seemed like a large and brittle proposition to write a mini-parser for path strings. Things might look different now.\n\nI agree. _If_ we're going to add deep path access, we should add it with the most desirable API, and not a clunky one.\n",
      "Lodash implements both the string _and_ array syntax. This is because there are some keys (for example those containing a `.` character) which cannot be expressed unambiguously with the string syntax. The array syntax is also preferable for the case where a key is dynamic. I don't think it's reasonable to implement the string syntax _without_ the array syntax. As I see it, the string syntax is an additional layer to syntacic sugar on top of the array syntax. (See figure 1):\n\n![jaw breaker cross section](http://cdn.smosh.com/sites/default/files/2015/08/cross-sections-jawbreaker.jpg)\n\n-- fig. 1\n\nDoes anyone (@jashkenas ?) believes both of the following?\n1. The array syntax is only worth implementing if we are _also_ planning on implementing the string syntax.\n2. It is nessesary to see a working implementation of the string syntax before we commit to supporting it.\n\nIf so, I'd be willing to start working on a string syntax implementation. However, I'm a firm believer that smaller pull requests are preferable where possible, since they are easier to review and allow for more focused discussion.\n",
      "> Does anyone (@jashkenash ?) believes both of the following?\n> \n> The array syntax is only worth implementing if we are also planning on implementing the string syntax.\n> It is nessesary to see a working implementation of the string syntax before we commit to supporting it.\n\nI lukewarm believe #1, but I don't believe #2. If we want to go forward with this, this ticket is a fine place to start. LGTM.\n",
      "Lodash's string syntax is built using the array syntax's internals. This is the necessary first step.\n",
      "@jridgewell Shall we merge?\n",
      "Let's open a separate issue to discuss the string path.\n",
      "Will do. My next steps:\n1. Update documentation to reflect array shorthand.\n2. Pull request with proposed implementation of `_.get` (optionally `_.set` and `_.unset` at the same time).\n",
      "I've opened an issue to discuss the string path syntax: #2609\n"
    ],
    "commit_messages": [
      "Merge pull request #2494 from captbaritone/deep-2\n\nAllow deep property matching via array syntax"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05093a21fa1e1f1aac43",
    "number": 2493,
    "body": "",
    "head_branch": "gitter",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5671861/badge)](https://coveralls.io/builds/5671861)\n\nCoverage remained the same at 96.863% when pulling **78dac3b7782612ccce09d55ccf2851e86267646a on captbaritone:gitter** into **4ce41380d437b5e289b1cb4582b590c4df0a3444 on jashkenas:master**.\n",
      "We've [discussed this a bit before](https://github.com/jashkenas/backbone/pull/3735). I'm ok with merging this for practicality reasons, but let the record show in general I'm against the principle of moving from a free / open federated protocol to a more proprietary-ish platform.\n\nWhy not show both?\n",
      "[![Coverage Status](https://coveralls.io/builds/5675819/badge)](https://coveralls.io/builds/5675819)\n\nCoverage remained the same at 96.863% when pulling **d988667b708592eecdc6fb3348c0f9848535c8d7 on captbaritone:gitter** into **4ce41380d437b5e289b1cb4582b590c4df0a3444 on jashkenas:master**.\n",
      "@akre54 Updated.\n",
      "I've cherry-picked onto `gh-pages`.\n"
    ],
    "commit_messages": [
      "Merge pull request #2493 from captbaritone/gitter\n\nPoint users to Gitter instead of IRC"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e050a3a21fa1e1f1aac44",
    "number": 2492,
    "body": "Error messages assume the order `actual, expected`.\n\nUsing https://github.com/platinumazure/eslint-plugin-qunit/blob/master/docs/rules/literal-compare-order.md I was able to automatically detect some of our tests which don't follow this convention. I'm sure there are others.\n",
    "head_branch": "assert-arg-order",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5648585/badge)](https://coveralls.io/builds/5648585)\n\nCoverage remained the same at 96.863% when pulling **0c10935623cd378d15ec3b04f82c6a5359274a7e on captbaritone:assert-arg-order** into **012fe2b77e3d206d763c0c078d3b97a63639fc24 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2492 from captbaritone/assert-arg-order\n\nFix the argument order of some assertions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e050b3a21fa1e1f1aac45",
    "number": 2491,
    "body": "Using descriptive assertions can help give better failure messages.\n\nThese were found using @platinumazure's [`eslint-plugin-qunit`](https://github.com/platinumazure/eslint-plugin-qunit). Once it reaches version 1.0, we could consider including it as part of our linting.\n\nNote: this will have merge conflicts with #2490. I'll rebase as needed.\n",
    "head_branch": "better-asserts",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5648826/badge)](https://coveralls.io/builds/5648826)\n\nCoverage remained the same at 96.863% when pulling **7943530568a94af59f36804cf82c9aaff7afbc89 on captbaritone:better-asserts** into **012fe2b77e3d206d763c0c078d3b97a63639fc24 on jashkenas:master**.\n",
      "thanks\n"
    ],
    "commit_messages": [
      "Merge pull request #2491 from captbaritone/better-asserts\n\nUse descriptive assertions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e050c3a21fa1e1f1aac46",
    "number": 2490,
    "body": "In #2389 we upgraded our browser tests to QUnit 1.18.0 which means we can now\nuse the `assert.notOk()` assertion. Using this gives a less confusing error\nmessage when the assertion fails. Assuming my `shouldBeFalse()` function is\nfailing:\n\n```\nassert.ok(!shouldBeFalse());\n=> failed, expected argument to be truthy, was: false\n\nassert.notOk(shouldBeFalse());\n=> failed, expected argument to be falsy, was: true\n```\n",
    "head_branch": "notok",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5648399/badge)](https://coveralls.io/builds/5648399)\n\nCoverage remained the same at 96.863% when pulling **b319ffd9de8daf75b71580c01510a834146f2377 on captbaritone:notok** into **012fe2b77e3d206d763c0c078d3b97a63639fc24 on jashkenas:master**.\n",
      "Merge conflicts...\n",
      "[![Coverage Status](https://coveralls.io/builds/5655178/badge)](https://coveralls.io/builds/5655178)\n\nCoverage increased (+0.1%) to 96.863% when pulling **cc1cb526bc8d6d9d0e9ef6c6b2b3b0905cffe04e on captbaritone:notok** into **34063b6f4586eb2b1a8c7b30612d9b6b706a2b08 on jashkenas:master**.\n",
      "@akre54 Updated.\n"
    ],
    "commit_messages": [
      "Merge pull request #2490 from captbaritone/notok\n\nPrefer `assert.notOk()` to `assert.ok(!)`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e050d3a21fa1e1f1aac47",
    "number": 2489,
    "body": "",
    "head_branch": "docs-cleanup",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5600742/badge)](https://coveralls.io/builds/5600742)\n\nCoverage remained the same at 96.863% when pulling **29fd55c8d378a582d4f2e49d8edcfe44b95fcdc9 on captbaritone:docs-cleanup** into **a0e5f4cc95e04e16a2ad90c72ec3aac067ebcfbb on jashkenas:master**.\n",
      "I've cherry-picked this over to `gh-pages`.\n"
    ],
    "commit_messages": [
      "Merge pull request #2489 from captbaritone/docs-cleanup\n\nFix typo in `_.iteratee` docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e050e3a21fa1e1f1aac48",
    "number": 2488,
    "body": "For visual review: http://rawgit.com/captbaritone/underscore/custom-iteratee-docs/index.html#iteratee\n\nNote, mostly for myself: This should not be cherry-picked onto `gh-pages`, since the functionality is not available in the latest tagged release.\n\nCredit: Uses @olleicua's `RegExp` proposal from #2475 as the example customization.\n",
    "head_branch": "custom-iteratee-docs",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5600716/badge)](https://coveralls.io/builds/5600716)\n\nCoverage remained the same at 96.863% when pulling **f32dfc6fde825976a3126b12cc81dad4e42cfcc5 on captbaritone:custom-iteratee-docs** into **a0e5f4cc95e04e16a2ad90c72ec3aac067ebcfbb on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2488 from captbaritone/custom-iteratee-docs\n\nDocument customizing `_.iteratee`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e050f3a21fa1e1f1aac49",
    "number": 2486,
    "body": "Inspired by `underscore-contrib`'s _.getPath` and lodash's deep property access, this adds a deep property access array shorthand to many aspects of Underscore, including:\n- `_.property`\n- `_.iteratee` and all methods that depend on it.\n\nIt also exposes a convenience function `_.get` for accessing deep properties with a default.\n## Possible Concerns\n\nWhile `_.property` does not get called in any place that would present a performance concern, `getLength` (which is created by `_.property`) gets used in many places which _may_ have performance ramifications.\n\nI've placed the `isArray` call in the outer function of `_.property` in an attempt to reduce complexity inside the generated function. This required defining `isArray` earlier.\n\nIt's possible that this still isn't fast enough, and we should just define `getLength` manually.\n\nAdds ~0.06kB (minified/gzipped)\n## Further work\n\nThe following methods should probably also accept the array syntax:\n- `_.result`\n- `_.has`\n\nThe following companion methods should be created:\n- `_.set`\n\nFixes: #2372, an elegant solution to an oft requested feature: (see: #2370, #2268, #1169, #1266)\n",
    "head_branch": "deep",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5594421/badge)](https://coveralls.io/builds/5594421)\n\nCoverage increased (+0.03%) to 96.894% when pulling **188a87b91b046571ea1241d467326e3340435d37 on captbaritone:deep** into **a0e5f4cc95e04e16a2ad90c72ec3aac067ebcfbb on jashkenas:master**.\n",
      "Based on @megawac's feedback, I'm reworking this PR to:\n1. Not include `_.get`\n2. Add deep matching to `_.has` and `_.result`\n\nIt may be difficult to do so without adding some weight, so I figure we should do them all at once so we know what we're getting ourselves into.\n",
      "Sounds good, for now I prefer that direction\n",
      "Closing in favor of #2494\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e050f3a21fa1e1f1aac4a",
    "number": 2485,
    "body": "The way a code change maps to a change in minified/gzipped size is not always intuitive (#2383). To help folks in our effort to slim down (#2060), they can now issue the command:\n\n```\nnpm run weight\n```\n\nAnd get output like:\n\n```\n6.27 kB\n```\n\nWhich should give a fairly good estimate of the \"over-the-wire\" size of their `underscore.js`.\n\nCaveat: The weight reported does not include the source-map comment at the end of the file.\n",
    "head_branch": "weight",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5547365/badge)](https://coveralls.io/builds/5547365)\n\nCoverage remained the same at 96.855% when pulling **280512b843a1a243f624486a6bdc43e069652957 on captbaritone:weight** into **51d93a941cd348bd84a42268135aaa492d5866a9 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2485 from captbaritone/weight\n\nAdd `npm run weight` tool"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05103a21fa1e1f1aac4b",
    "number": 2484,
    "body": "Saves 4 bytes gzipped, and I don't find it any harder to read.\n\nOne minuscule step toward #2060\n",
    "head_branch": "golf-find",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5539572/badge)](https://coveralls.io/builds/5539572)\n\nCoverage decreased (-0.008%) to 96.855% when pulling **0bff13f62e582044b2603a57ed0bb730f8aa9586 on captbaritone:golf-find** into **104ba2a7aecebcaf284c50d1fae0db48c33e17f2 on jashkenas:master**.\n"
    ],
    "commit_messages": [
      "Merge pull request #2484 from captbaritone/golf-find\n\nGolf _.find"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05113a21fa1e1f1aac4c",
    "number": 2483,
    "body": "As per https://github.com/jashkenas/underscore/pull/2480#discussion_r57190276, changing this to a warning.\n",
    "head_branch": "eslint_warn",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5537687/badge)](https://coveralls.io/builds/5537687)\n\nCoverage increased (+0.1%) to 96.867% when pulling **6f2ad2f959a5e42a71ec6256ff9f52432395c9b1 on afahim:eslint_warn** into **7d07d80ba8f4b1c8e2da13379cdb3886a8fca4c1 on jashkenas:master**.\n",
      "Thanks @afahim!\n"
    ],
    "commit_messages": [
      "Merge pull request #2483 from afahim/eslint_warn\n\nMake no-use-before-define eslint rule a warning."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05123a21fa1e1f1aac4d",
    "number": 2482,
    "body": "Fixes an issue with `_.debounce` when `{ immediate: true }`. When\ncalled twice within `wait` ms, we cleared the `timeout`. Because it is\ntruthy on the second run, it was cleared but `timeout` remained\ntruthy (on any later run, `timeout` remains truthy). Because `timeout`\nwas cleared, the `later` function is never run to null out `timeout`.\n\nAnyways, we should always be setting a fresh timeout function when\n`{ immediate: true }`, to prevent further calls to the debounced\nfunction until the `wait` ms after the last call.\n\nFixes #2478, supersedes #2479. Thanks for the bug report @hanzichi.\n",
    "head_branch": "debounce-immediate",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5529637/badge)](https://coveralls.io/builds/5529637)\n\nCoverage increased (+0.1%) to 96.863% when pulling **882cb7fd1d848d6d4f33e3460d2bac6adf2d3f10 on jridgewell:debounce-immediate** into **7d07d80ba8f4b1c8e2da13379cdb3886a8fca4c1 on jashkenas:master**.\n",
      "Fine with this change, but did that not pass before?\n",
      "The old tests pass, but nothing tested calling the debounced function again after `wait` is over.\n",
      "[![Coverage Status](https://coveralls.io/builds/5538265/badge)](https://coveralls.io/builds/5538265)\n\nCoverage decreased (-0.004%) to 96.863% when pulling **96719954d086f8f77c5521698ac138f595c4cb9b on jridgewell:debounce-immediate** into **669fb75e89587e36acc9bde453e1c7f00bc23b7e on jashkenas:master**.\n",
      "Is there a way to tell in which version of underscore this is fixed?",
      "@bent0b0x it was not in the released versions,  it was fixed in the edge version, so the bug is not in any one of the released ones"
    ],
    "commit_messages": [
      "Merge pull request #2482 from jridgewell/debounce-immediate\n\nFix debounce immediate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05133a21fa1e1f1aac4e",
    "number": 2481,
    "body": "`_.iteratee` contains a huge amount of power/magic, and based upon my [personal experience](https://jordaneldredge.com/blog/youre-underusing-underscore/), it is one of the most underused aspects of Underscore.\n\nThe issue of `_.iteratee`'s functionality being hard to discover has been raised before (#2052).\n\nHopefully this more explicit documentation can help. Additionally it lays groundwork for documenting `_.iteratee` as user definable if #2480 ends up getting merged.\n\nTo aid in review, you can see my proposed version here: http://rawgit.com/captbaritone/underscore/iteratee-docs/index.html#iteratee\n",
    "head_branch": "iteratee-docs",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5525584/badge)](https://coveralls.io/builds/5525584)\n\nCoverage remained the same at 96.867% when pulling **15f10acf2b9a2b2df3a30551f87e67c095202908 on captbaritone:iteratee-docs** into **6a2c2ee882dd20dd9411275f7e6a1c9831318621 on jashkenas:master**.\n",
      "@megawac I'd be happy to cherry-pick this over to gh-pages if you want.\n",
      "@megawac I went ahead and cherry-picked.\n"
    ],
    "commit_messages": [
      "Merge pull request #2481 from captbaritone/iteratee-docs\n\nMake `_.iteratee` docs more explicit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05143a21fa1e1f1aac4f",
    "number": 2480,
    "body": "This fix was originally proposed by @jridgewell in #1965 but it was unable to gain consensus since his approach added an additional layer of abstraction to which @akre54 objected. I've refactored @jridgewell's approach to avoid that abstraction.\n\nThis PR was motivated by a renewed interest in customizable shorthand syntaxes such as the RegEx syntax proposed in #2475.\n\nIf this approach looks good to people, I can look into more robusts tests and documentation.\n",
    "head_branch": "iteratee",
    "is_a_fork": true,
    "comments": [
      "FYI tests seem to be failing for an unrelated reason:\n\n> This is most likely a problem with the phantomjs-prebuilt package, not with npm itself.\n",
      "Kicked the test build, it should pass. This LGTM.\n",
      "@jridgewell Tests now passing. Would you like to wait on improved tests and documentation, or merge now and trust that I'll followup with test/doc PR(s)?\n",
      "I'm going to leave that up to @akre54.\n",
      "Sounds good. It might be worth merging this on it's own, since the testing/documentation approaches may need their own, narrowly scoped, debate.\n",
      ":+1: \n",
      "[![Coverage Status](https://coveralls.io/builds/5529453/badge)](https://coveralls.io/builds/5529453)\n\nCoverage increased (+0.1%) to 96.875% when pulling **b51863962a5d9246bb054106d3bf94f2d5e75929 on captbaritone:iteratee** into **7d07d80ba8f4b1c8e2da13379cdb3886a8fca4c1 on jashkenas:master**.\n",
      "I did some work on testing last night, and uncovered something interesting. There are a number of places where we depend upon `cb()` returning a function if you pass it a function.\n\nIf the user were to define an `_.iteratee` that did **not** property handle functions, it would break many Underscore methods.\n\nI see two possible solutions to this problem: \n1. Document this requirement as part of the \"you may customize `_.iteratee`\" documentation.\n2. Move the `_.isFunction` test to the top of `cb()`, before we consider deferring to the user's `_.iteratee`.\n\nThoughts?\n",
      "I'd go for 2, maybe with a test-case added. Should be better perf-wise, as I'm not sure customizing `_.iteratee` will be quite common.\n",
      "@captbaritone: Can you change all `optimizeCb` to `cb`? That way everything can be overridden with custom `_.iteratee`. Looks like it's just `_.each`, `_.reduce`/`reduceRight` and `_.pick`.\n\n> There are a number of places where we depend upon cb() returning a function if you pass it a function.\n\nIsn't that the contract for `_.iteratee`? It returns a function. I wouldn't worry about them doing something stupid with it.\n",
      "@jridgewell Can we consider expanding the number of methods that transform through `_.iteratee` in a separate issue/PR? There are a few subtleties to discuss which I think might bog us down.\n\nI think this change can stand alone as an improvement.\n",
      "@akre54 I think we're waiting on your thoughts.\n",
      "Good with me.\n",
      "I think practically not a ton of people are going to use this, so I'm +0. That said, this implementation looks good. Can we add at least a few more baseline tests and then looks good to merge for me.\n",
      "[![Coverage Status](https://coveralls.io/builds/5585091/badge)](https://coveralls.io/builds/5585091)\n\nCoverage increased (+0.1%) to 96.863% when pulling **f04536898b2692039f71dbf41b9c7dc0d89e4401 on captbaritone:iteratee** into **7d07d80ba8f4b1c8e2da13379cdb3886a8fca4c1 on jashkenas:master**.\n",
      "@akre54 Added as a second commit with more robust tests. It sets up a custom `_.iteratee` and uses it with each of the methods that transform through `_.iteratee`.\n",
      "lgtm\n",
      ":clap: Thanks everyone. I'll look at adding some documentation in the next few days.\n"
    ],
    "commit_messages": [
      "Merge pull request #2480 from captbaritone/iteratee\n\nAllow users to customize _.iteratee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05153a21fa1e1f1aac50",
    "number": 2479,
    "body": "#2478\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5516526/badge)](https://coveralls.io/builds/5516526)\n\nCoverage decreased (-0.004%) to 96.863% when pulling **c54a3605b5abec73170b8b19e96fecf98cd91838 on hanzichi:master** into **6a2c2ee882dd20dd9411275f7e6a1c9831318621 on jashkenas:master**.\n",
      "After review, this is definitely incorrect behavior. This will call `func` after `wait` every time the debounced function is called when `immediate = true`.\n",
      "@jridgewell  thanks for your reply!  I just wonder with the code below, I just find the different results when resizing the window for several times using [underscore.js](https://github.com/jashkenas/underscore/blob/master/underscore.js) and [underscore-min.js](https://github.com/jashkenas/underscore/blob/master/underscore-min.js)\n\n```\n  var lazyLayout = _.debounce(function() {\n        console.log(123)\n        } , 300, true);\n\n    window.onresize = lazyLayout;\n```\n\n![1](https://cloud.githubusercontent.com/assets/10890665/14006258/8cd4bab4-f1a6-11e5-8429-5b593876541a.png)\n\n![2](https://cloud.githubusercontent.com/assets/10890665/14006259/917e9abc-f1a6-11e5-8727-8a338f415540.png)\n\ndon't you? hope to hear from you soon ! thanks !\n",
      "@hanzichi are you mixing up `debounce` with `throttle`?\n",
      "@megawac no, i am not, could you pls have a try as i said above ?\n",
      "I did and I got the results I expected\n\nOn Wed, Mar 23, 2016 at 10:11 PM, 韩子迟 notifications@github.com wrote:\n\n> @megawac https://github.com/megawac no, i am not, could you pls have a\n> try as i said above ?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/jashkenas/underscore/pull/2479#issuecomment-200616956\n",
      "i went through the code, and found line 866\n\n`timeout = setTimeout(later, wait);`\n\nbut we will never trigger `later` function for it will finally be clear, and the `timeout` will never be null, so when i resize the window for the second time, `callNow` will be false, am i right?\n",
      "> i went through the code, and found line 866\n> timeout = setTimeout(later, wait);\n\nThat's `_.throttle`'s code.\n",
      "I do not think so...\n![123](https://cloud.githubusercontent.com/assets/10890665/14007391/30406fb8-f1b1-11e5-9596-aa6fd6f4ffc2.png)\n",
      "I don't think this is the right solution, but there's definitely something wrong. I'll spend some more time on this tomorrow.\n",
      "[![Coverage Status](https://coveralls.io/builds/5529446/badge)](https://coveralls.io/builds/5529446)\n\nCoverage decreased (-0.004%) to 96.863% when pulling **c54a3605b5abec73170b8b19e96fecf98cd91838 on hanzichi:master** into **6a2c2ee882dd20dd9411275f7e6a1c9831318621 on jashkenas:master**.\n",
      "@jridgewell thanks for your work ! \n",
      "Closing this for #2482. Thanks for the bug report!\n",
      "that's what i should do, thanks for your quick fix again !\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05163a21fa1e1f1aac51",
    "number": 2476,
    "body": "",
    "head_branch": "suport_Set_and_Map_in_size",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05173a21fa1e1f1aac52",
    "number": 2475,
    "body": "https://github.com/jashkenas/underscore/issues/2474\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      ":thumbsup:\n",
      ":-1:\nI'd rather `_.iteratee` was overloadable to allow customization without expanding core support\n(which includes adding another `_.property` or `_.matcher` type method for additional cases too).\n\nRelated to #1965 and https://github.com/lodash/lodash/issues/971#issuecomment-74441735.\n",
      "@jdalton I'm not sure I understand your concerns here.  The issue in #1965 was with additional layers of function indirection and my solution only adds a single if statement..  am I missing something?\n",
      "@olleicua\nEveryone wants their one thing added but it has a cost. As I mentioned there will need to be companion exposed versions of the functionality too (just as with `_.property` and friends). Allowing `_.iteratee` to be overloaded gives Underscore a way to support your use case without having to expand its shorthand support or API. \n\nYour use case can also be tackled with `_.bind` or the `context` param.\n\n_Edit:_\nOverloading `_.iteratee` allows for things beyond iteratee shorthands too, like [FP](https://github.com/lodash/lodash/wiki/FP-Guide) wrappers.\n",
      "I agree that overloading `_.iteratee/cb()` further comes with a cost, and that part of a libraries duty is to resist including everyone's pet functionality, especially for something as magical as `_.iteratee`.\n\nThat said, I'm :+1: To this idea in general. The syntax is unambiguous and readable and I can't see any other reasonable interpretation of a RegEx being passed as an iteratee/predicate.\n",
      "Another alternative (again more generic) is to add something like [bindKey](https://github.com/lodash/lodash/blob/4.6.1-npm/bindKey.js#L32-L48), which is like `_.bind` except that it allows bound functions to reference methods [that may be redefined or don't yet exist](http://peter.michaux.ca/articles/lazy-function-definition-pattern).\n\nThis would allow both `test` and `exec` forms as:\n\n``` js\n_.bindKey(/cat/, 'exec')\n_.bindKey(/dog/, 'test')\n```\n",
      "I'm not sure what the process is and I'm sensing a lack of consensus in this thread.  Should I make the suggested changes or will this not be merged?\n",
      "@olleicua Feel free to wait until we reach a consensus to make the changes. Thanks for your patience!\n",
      "I've thought about this a bit more, and I think there is a case where the expected behavior of a regex predicate could be ambiguous. \n\nIn the case of a non-predicate iteratee, it might be reasonable to expect the regex function to return the portion of the string that matched.\n\n```\nvar urls = ['https://google.com', 'http://example.com'];\nvar protocols = _.map(urls, /^https?/);\n\n// Might expect\n=> ['https', 'http']\n\n// Rather than the proposed\n=> [true, true]\n```\n\nThis additional complexity makes me less enthusiastic about including this syntax.\n",
      "I'm not sure I agree. We could use `exec` or `match` in the callback instead of `test`, which would still work for `filter`. \n\n``` js\n> urls.map(d => /^https?/.exec(d))\n[ [ 'https', index: 0, input: 'https://google.com' ],\n  [ 'http', index: 0, input: 'http://example.com' ] ]\n> urls.map(d => /^https/.exec(d))\n[ [ 'https', index: 0, input: 'https://google.com' ], null ]\n> urls.filter(d => /^https/.exec(d))\n[ 'https://google.com' ]\n```\n",
      "@akre54 Do we care about the falsey `\"\"` string edge case?\n\n_Edit:_ Nevermind this comment. You are suggesting we return the results array and not the match itself which avoids that edge-case.\n",
      "Blerg. Good point.\n",
      "Wait just kidding (I saw you updated your comment too). That's exactly what I'm suggesting. \n\n```\n> /.*/.exec('')\n[ '', index: 0, input: '' ]\n```\n\nStill truthy.\n\nAny other edge cases?\n",
      "What about global matches?\nWhere will this added functionality live on `_`?\nWhat about guards for the implicit string coercions (like arrays containing symbols which would error)?\nIs the Underscore diet still a concern or can that be put to bed?\n",
      "With #2480 merged, and the edge cases mentioned by @jdalton I'm tempted to close this in favor of allowing users to customize `_.iteratee`.\n",
      "Sounds good to me\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05183a21fa1e1f1aac53",
    "number": 2473,
    "body": "This allows '_.size' for 'Map' and 'Set'.\n\nExample:\n\n``` Javascript\nlet e = new Set();\n\ne.add(1);\ne.add(13);\ne.add(12);\n\n_.size(e);\n```\n",
    "head_branch": "v1.9.0",
    "is_a_fork": true,
    "comments": [
      "[![Coverage Status](https://coveralls.io/builds/5497798/badge)](https://coveralls.io/builds/5497798)\n\nCoverage increased (+0.005%) to 96.301% when pulling **bb304583243689baeb85cb1e198797ff608b04fb on JonDotsoy:v1.9.0** into **d9f4f7648ff38c86cc7456e42df9bd7b97847df4 on jashkenas:v1.9.0**.\n",
      "Should we be getting emails from coveralls, or other CI services?  Is there a way to restrict (or, perhaps opt out of) automatic CI emails, while still getting the rest?\n",
      "Yeah where did the coveralls coverage come in? @jridgewell @megawac @michaelficarra did any of yall turn it on?\n",
      "Not me.\n",
      "Move :arrow_right: #2476\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05193a21fa1e1f1aac54",
    "number": 2468,
    "body": "NOT COMPLETED\n\nThis is a work in progress, attempting to address\nhttps://github.com/jashkenas/underscore/issues/2457\n\nAny guidance on how best to approach this would be welcome. I have not been successful in passing the objects symbols through the function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e051a3a21fa1e1f1aac55",
    "number": 2466,
    "body": "This is following our conversation from #2464 to close #2449. \n",
    "head_branch": "2449-is-functions-for-map-and-set",
    "is_a_fork": true,
    "comments": [
      "Thanks, I'm going to try to fix this. Going to put a helper function in just above it, hopefully that's ok!\n",
      "Hi, I've updated the pull request to hopefully address the issues @jdalton mentions. I've basically added a returnTag helper function that brings in some of the functionality from the lodash _getTag.js file. There are a number of ternary statements in there so that older browsers don't get exposed to Maps/Sets/WeakMaps resulting in Travis fails.\n\nAlso @jdalton, re your second note, please let me know if there's a unit test you'd like me to add for objCtor not being a Function. I'm currently not sure what I could use to get a constructor that isn't a function.\n\nThanks as ever for your help and feedback!\n",
      "HI @jdalton. Any updates on this? Thanks\n",
      "This is fix for a real bug but the fix needs to be much more elegant.",
      "Superseded by #2884."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e051b3a21fa1e1f1aac56",
    "number": 2465,
    "body": "",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [
      "This change was already in `master` in this PR (https://github.com/jashkenas/underscore/pull/2269), but hadn't been cherry-picked over to `gh-pages`.\n\nThe two branches are now slightly out of sync since the ordering is slightly different. Not a problem, but I figured I'd mention it here in case anyone else became confused.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e051c3a21fa1e1f1aac57",
    "number": 2464,
    "body": "Closes #2449 \nThis pull request adds the four functions in the title to the library. Relevant tests have been created in the test/objects.js file and all pass (and meet stylistic requirements).\n",
    "head_branch": "2449-is-functions-for-map-and-set",
    "is_a_fork": true,
    "comments": [
      "@jdalton Have updated code to reflect requested changes.\n",
      "Thanks :+1: \n",
      "Unit tests still failing (in travis).\n",
      "@jdalton Travis seemed to be passing when I made the second pull request - could you let us know where the issue is?\n",
      "The [failing travis tests](https://travis-ci.org/jashkenas/underscore/builds/114860571) kicked in on the merge for the browser runs (browser runs are skipped for PRs).\n",
      "@jdalton we've removed the calls to .add(), which some versions of FireFox didn't like. \n\nHowever, we are trying to understand why IE 11 is returning false for isMap and isWeakMap. We are wondering if it is how IE 11 treats toString.call(). We are a bit stuck because there are no issues with other types such as String, Number, Date etc.\n\nWe were thinking of doing Object.prototype.toString.call() instead of toString.call() after reading http://webreflection.blogspot.co.uk/2007/07/quick-fix-internet-explorer-and.html.\n\nPlease could you give us your thoughts?\n\nThank you.\n",
      "@MahmudH\nThe reason the `add` calls were failing in versions of Chrome/Firefox/IE/etc. is because in early implementations the `add()` and `set()` methods didn't return the set or map instance, so no chaining `set.add(1).add('string')`.\n\nInternally Underscore has `toString = ObjProto.toString` so no need to change that.\nWhile IE 11 supports `Map`, `Set`, and `WeakMap` it doesn't have a `ToStringTag` for them so they report `[object Object]` when coerced using `Object.prototype.toString.call(...)`.\n\nHere is how I [work around it](https://github.com/lodash/lodash/blob/4.6.1-npm/_getTag.js)  in Lodash:\n- I [grab a reference](https://github.com/lodash/lodash/blob/4.6.1-npm/_getTag.js#L23-L26) to their constructors coerced to strings via `Function.prototype.toString`\n- I [test for the buggy environment](https://github.com/lodash/lodash/blob/4.6.1-npm/_getTag.js#L40-L42) and fork the `getTag` helper\n- If the result is `[object Object]` I [check for the constructor](https://github.com/lodash/lodash/blob/4.6.1-npm/_getTag.js#L44-L46) and coerce it to a string\n- If the result isn't empty [I compare](https://github.com/lodash/lodash/blob/4.6.1-npm/_getTag.js#L49-L53) to the `Map`, `Set`, and `WeakMap` references\n",
      "@jdalton if you were aware this extra `getTag` helper was needed when you opened #2449, it would help us if you made note of these kinds of requirements next time you open an issue.\n",
      "@akre54 \nI [mentioned](https://github.com/jashkenas/underscore/pull/2464#discussion_r55554040) there was more work to do.\nAt the time of #2449 I didn't have a PR to add feedback to.\n",
      "@jdalton should we basically do the same as the lodash _getTag.js in the underscore.js file\n",
      "@MahmudH\n\n> should we basically do the same as the lodash _getTag.js in the underscore.js file\n\nYou could or you could see if there's a better way.\nSince this PR is merged the fixes should probably come in a new PR.\n",
      "> I mentioned there was more work to do.\n\nSpecifically I'm referring to the original issue #2449. Given that this was more complex than simply adding options to the `_.is` helpers, it would have been good if you made note of this.\n",
      "@akre54 \n\n> Specifically I'm referring to the original issue #2449. Given that this was more complex than simply adding options to the `_.is` helpers, it would have been good if you made note of this.\n\nHere's where I'm coming from. I'm the lead of a competing library that has a touch-and-go relationship with a couple in this core. Despite that I've opened ~12x more Underscore issues than any other user. API parity and solid environment support are important to me and are good things for users.\n\nMy goal isn't to do all the work in Lodash (adding the feature, testing the feature, researching support, and creating workarounds) and then hand it over to Underscore. However, I'll open an issue and help when things are blocked. Many times you all come up with completely different and better solutions without having it given to you. \n\nThis issue was great, esp. for students, because it was relatively easy to implement on the surface, but then required digging into non-obvious test fails, testing multiple environments, and coming up with a workaround.\n",
      "New pull request now made to address the add() problem and the IE11 bug - #2466 \n",
      "Thank you @gwpmad! \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e051d3a21fa1e1f1aac58",
    "number": 2463,
    "body": "As discussed in https://github.com/jashkenas/underscore/pull/2454.\n",
    "head_branch": "CoC-moderation",
    "is_a_fork": false,
    "comments": [
      "So are we ready to :ship: this?\n",
      ":+1: \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e051e3a21fa1e1f1aac59",
    "number": 2462,
    "body": "Add links in the readme and contributing docs for the code of conduct\n",
    "head_branch": "coc-links",
    "is_a_fork": true,
    "comments": [
      "Don't mention \"Contributor Covenant Code of Conduct\", as we want the freedom to make our own modifications.\n",
      "Done\n",
      "Thanks!\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e051f3a21fa1e1f1aac5a",
    "number": 2461,
    "body": "Creating an object without prototype proves to be faster than a literal\nobject, since we don't have to go through the prototype chain to check\nif a key already exists.\n\nWith a memoized recursive fibonacci implementation, we could do on a\nMacBook 13 Retina Late 2013 ~9.6M ops/sec, while with the improved\nimplementation we could get ~26M ops/sec. Almost a 3x improvement.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Here the perf results:\n<img width=\"762\" alt=\"screen shot 2016-03-07 at 21 07 26\" src=\"https://cloud.githubusercontent.com/assets/33044/13581919/8e1b9f0a-e4a9-11e5-9050-26da3e80a56b.png\">\n\nHere the code with the perf benchmark:\nhttps://gist.github.com/caiogondim/5e8334f7a70974e37590\n",
      "This is the kind of thing a generic `_.Set`would be good for.\n",
      ">  This is the kind of thing a generic `_.Set` would be good for.\n\nYes! \\o/\n\nLodash does this with `_.memoize.Cache` which is a map-like implementation `MapCache` (uses ES6 Map when available under the hood). It can be swapped out with `WeakMap` or `Immutable.Map`. Internally there's also a `Hash`, `Stack` and `SetCache`.\n\nRelated to #1862.\n",
      "Sure, perhaps it's time to add it. \n",
      "I totally agree a generic `Set` would be better. But that comes with a bigger refactor.\n\n@jdalton Already updated the code to properly check for keys in objects with and without prototype.\n",
      "With my last change, still getting something around 3x more performance.\n",
      "Just added the test case to `return undefined`.\nIt was indeed not being memoized.\n",
      "Did a rebase as well.\nShould be good to go.\n",
      "Just resolved the conflict.\n",
      "Closing this as it seems the performance gain has been lost in the process of making this work correctly, and as a performance enhancement based on #1862 would seem preferable."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05203a21fa1e1f1aac5b",
    "number": 2460,
    "body": "Per a new TC39 proposal http://bterlson.github.io/proposal-flatMap/#sec-Array.prototype.flatten they're suggesting a depth argument.\n\nThis was fairly trivial to implement without breaking the current functionality.\n\nThoughts?\n",
    "head_branch": "feature/flatten-depth",
    "is_a_fork": true,
    "comments": [
      "Awesome. :+1: \n",
      ":+1: \n",
      "So looking into both 0 and negative values, it seems much cleaner to handle this in `_.flatten` than it would be to try to get the internal flatten to play nice with these additional scenarios, particularly related to the \"strict\" argument. I also assumed that negative would act the same as 0?\n",
      ">  it seems much cleaner to handle this in `_.flatten` than it would be to try to get the internal flatten to play nice with these additional scenarios\n\nOh cool!\n\n>  I also assumed that negative would act the same as 0\n\nYeah.\n",
      "LGTM :+1: \n",
      "This was initially easy, but got complicated with edge cases and without refactoring internals a bit.\nAny ideas what we should do with this PR? I've answered the two outstanding questions, but I'm not certain they're resolved.\n",
      "@paulfalgout I merged #2849 three weeks ago and I nearly forgot to get back to you. Sorry about that.\r\n\r\nSo `master` should be stable again for a while and I see no reason not to finish your PR. With some luck, we should be able to include it in the upcoming 1.11 release. In order to do so, we need to update your patch first. Please let me know whether you'd like to do this yourself, or whether you'd prefer me to take care of these final steps:\r\n\r\n1. Check out the feature branch and pull in the latest changes from `master`. Disregard the merge conflict for now and postpone the merge commit until step 5.\r\n2. Run a fresh `npm install` to update all the tools and install our commit hooks. These will take care of updating the `underscore.js`.\r\n3. Update `modules/_flatten.js` and `modules/flatten.js` (note the underscore) with the changes that you originally made in the old `underscore.js`.\r\n4. Run `git add underscore.js` to silence the warnings about the merge conflict. The conflict markers will be overwritten by the pre-commit hook.\r\n5. Commit and push.",
      "I'm now looking into merging this by executing the above steps myself. On closer inspection, I noticed that many internal calls to `flatten` use the *internal* flatten with a boolean. I think I'll address this by moving the guard that changes `false` into `Infinity` from the public to the internal `flatten`.",
      "@jgonggrijp thanks for hopping on this..  I've been a little out of it as of late.",
      "Welcome."
    ],
    "commit_messages": [
      "Merge branch 'master' into feature/flatten-depth"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05213a21fa1e1f1aac5c",
    "number": 2459,
    "body": "Clean up related to #2219\n\n@jridgewell Not sure if I should do things like this as PRs, or just push them. Your thoughts would be appreciated.\n",
    "head_branch": "wrap",
    "is_a_fork": true,
    "comments": [
      "Feel free to just push nitty stuff like formatting\n",
      ":+1: \n",
      "Yah, we don't need to approve formatting/grammar/etc unless it's massive.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05223a21fa1e1f1aac5d",
    "number": 2454,
    "body": "Adding a code of conduct to help [avoid issues](https://twitter.com/jashkenas/status/704399369051770880) over moderation and behavior. This will spell out what is and what isn't acceptable to help foster a better environment and prevent infighting on how moderation should be handled.\n",
    "head_branch": "coc",
    "is_a_fork": true,
    "comments": [
      "Interesting approach.  I am generally bewildered, as an interested onlooker.  \n\nSo we should really only be interested in this Code of Conduct insomuch as how we might be able to use it to restrain your behavior.  By your own indication.  Yes?  That's why you linked to the report of your misbehavior, correct?  \n\nI am concerned by the report of your editing the comments of other users (I didn't even know Github provided that tool).  Play the game of saying what you mean and apologizing by editing afterwards if you like.  Enforcing edits on others and hiding the evidence is a closed, hamfisted approach guaranteed to stir up trouble.  \n\nI will of course be keeping a copy of this comment for comparison.  \n",
      "> So we should really only be interested in this Code of Conduct insomuch as how we might be able to use it to restrain your behavior. By your own indication. Yes\n\nIt's more to iron out what is acceptable and what is not. The link was to give context. Others may have a different bar/criteria for moderation. Having a code of conduct helps set that bar and outlines what is acceptable behavior.\n\n> I am concerned by the report of your editing the comments of other users (I didn't even know Github provided that tool). Play the game of saying what you mean and apologizing by editing afterwards if you like.\n\nI tend to side more with stopping the derailing of threads and keeping nonconstructive bits out. Again though a CoC will set the expectations of behavior and conduct. The one I've provided is what I've used for other projects.\n",
      "It's a sad day that something like this may even be needed, IMHO.\n\n> I tend to side more with stopping the derailing of threads and keeping nonconstructive bits out.\n\nMy email begs to differ :P \n",
      "> It's a sad day that something like this may even be needed, IMHO.\n\nCode of conducts are a good thing.\n\n> My email begs to differ :P\n\nIt's unfortunate that disagreements and spats happen but they are usually dealt with and corrected in back channel or cleaned up after cooler heads prevail. Public squabbling doesn't serve the good of the project. I think we all participate in these projects to make things better.\n",
      "> Code of conducts are a good thing.\n\nI'm not sure of any great open source project that originated from a code of conduct. Code of conducts always come after a sad day, whether experienced first-hand or not. They are good insofar as there are, sadly, folks who need them.\n\n> I think we all participate in these projects to make things better.\n\nNo doubt, thank you for your contributions!!\n",
      "> I'm not sure of any great open source project that originated from a code of conduct. Code of conducts always come after a sad day, whether experienced first-hand or not. \n\nI guess I disagree. A code of conduct is a win for moderators and the community.\nI think @thealphanerd can expand a bit more on that.\n",
      "> A code of conduct is a win for moderators and the community.\n\n:+1: \n\nediting peoples comments because of bickering \n\n:-1: \n\nIf a maintainer edited someones comment because it was noise / bickering I would say that would be in violation of the CoC (the one being proposed) and would be terms for removal from the project. \n\n+1 to merge\n\n---\n\n_edit_\n\n(just to be extra clear I appreciate everyones time and work that they put into this project, my above comment only aims to support a healthy community on both sides of the proverbial fence here)\n",
      "> (just to be extra clear I appreciate everyones time and work that they put into this project, my above comment only aims to support a healthy community on both sides of the proverbial fence here)\n\nI'm cool with it. I think clarification and outlining things is a good thing.\n",
      ":+1: to a code of conduct, discussion on specific scenarios that violate it are probably out of scope for this issue though. Although I do find it pretty ironic that the one pushing for a CoC is the one being accused of violating it.\n",
      "> Although I do find it pretty ironic that the one pushing for a CoC is the one being accused of violating it.\n\nIt's my hope that it clears things up and prevents issues in the future.\n",
      "> It's a sad day that something like this may even be needed, IMHO.\n\nIt is really unfortunate you feel that way. I'm not 100% of the situation that has brought this up, but I can give some thoughts based on the experience with a CoC and moderation policy form the Node.js core team.\n\nHaving a CoC is a baseline, although it often gets brought up during a time of turmoil. A CoC is a signal, it is a way to let people know that your project cares about protecting individuals from harassment. There really is not a valid reason to not want to protect individuals from harassment.\n\nThat being said, a CoC is completely useless without\n-  A clear moderation policy\n-  Buy in from the collaborators\n\nA clear moderation policy allows collaborators to moderate appropriately and not get stuck bike shedding about process. This has been experienced first hand in the node project when we had a CoC without clear moderation policies, and we spent days figuring out how to deal with a situation while members of our community were being actively harassed.\n\nOur moderation policy [can be found here](https://github.com/nodejs/TSC/blob/master/Moderation-Policy.md)\n\nThe code of covenant comes with a paragraph outlining that moderation may happen, but it is not clear about how to moderate, or how to document the process. The node project has a different process for moderating content from a [collaborator vs. a non-collaborate](https://github.com/nodejs/TSC/blob/master/Moderation-Policy.md#collaborator-posts), it sounds like being explicit about this might be important for this project.\n\nIt is sad that CoC's and moderation policies often come up after an unfortunate instance makes it seem necessary, but that does not mean that having a CoC itself is toxic. Having a clear CoC and moderation guideline will reduce the odds of these types of events happening in the first place.\n\nWe use linters to make sure our code fits within the agreed upon standards of a project. We use a CoC to make sure our behavior does as well.\n\nIt seems to me like @megawac @akre54 @michaelficarra are the ones mostly merging code ATM... if we do not have buy in from these individuals a CoC is worse than useless.\n\nIf anyone has questions about this type of stuff they are not comfortable asking in the open please feel free to DM me. Individuals with power in the world have a duty to empower and protect those who do not.\n",
      "First off, I'm in favor of CoCs generally for most if not all projects.  \n\nAnd to be further clear, I don't believe I have the \"full story\" (nor am I interested in knowing it) and certainly entertain the notion that multiple parties have taken damaging actions.  \n\nOne can imagine your (@jdalton) using a code of conduct to _excuse_ editing others' comments.  It would be an act of deep political cynicism to use a conflict whose creation is at least partially your responsibility to pass a code of conduct that would allow you greater leeway in resolving conflict in your favor.  It would be unfortunate if people got this impression.  \n\nSince that is not what's happening here, you're presenting the code of conduct as a means of considering action against yourself or one contributing to conflict in a similar manner as yourself in a future situation.  I am reading this correctly, right?  \n\nIn that case a good way to build the argument for a Code of Conduct would be for you to apply that code to the preceding situation or some abstract of it.  \n\nSome person with admin powers uses those powers in a way that makes another contributor feel unwelcome and _generates more conflict_ (as witnessed by your link).  The community recourse would be to contact jashkenas and jashkenas would then be enabled by the code of conduct to boot ~~you~~ that admin from further responsibility, or otherwise limit moderation privileges.  \n\nThs is a slight improvement over the various privilege/permission wars I've heard of, in passing, between you and jashkenas, I agree!  \n\n> It's my hope that it clears things up and prevents issues in the future.\n\nI do not think you have done a very good job explaining _why_ this is your hope with the specifics of this project.  \n",
      "> First off, I'm in favor of CoCs generally for most if not all projects.\n\n:clap:\n\n> Some person with admin powers uses those powers in a way that makes another contributor feel unwelcome and generates more conflict (as witnessed by your link). \n\nThis was a squabble between a couple core contributors and the tweet was one side of that squabble. I don't care to turn this into a TMZ event so rather start the process to help prevent things like this in the future. \n\nA code of conduct and a moderation policy is a good start.\n",
      "You haven't even demonstrated the capacity to work on things like this in the present.  \n",
      "> You haven't even demonstrated the capacity to work on things like this in the present.\n\nOver the last four years I've contributed bug fixes, api design, triaged issues, started the merge discussions, and have worked with and incorporated several core into semi daily discussions on libs, utils, projects to make things better for developers. And now I'm working on this.\n\nIt's not easy for sure and sometimes there's bumps but over the years things trend in a positive direction.\n",
      "Starting a pull request for a CoC does not disavow you of responsibility for the circumstances that you **directly linked to** as justification for the CoC.  If you did not wish to consider them **you should not have brought them up**.  \n\nYour overall actions as a contributor to open source is (was) not up for consideration.  \n",
      "> Your overall actions as a contributor to open source is (was) not up for consideration.\n\nOh that was contributions to Underscore. But ok.\n\n> Starting a pull request for a CoC does not disavow you of responsibility for the circumstances that you directly linked to as justification for the CoC\n\nI'm fine with folks having a different opinion on how to best moderate. I think we can both agree that outlining a CoC and moderation policy is a good thing.\n",
      "My mistake.  I am more or less a bystander.  \n\nAs a bystander, my impression of your involvement with the underscore project is overwhelmingly that you are someone that stirs up trouble.  Certainly you and jashkenas have had your differences.  Certainly you are not entirely to blame for dramatic happens.  \n\nIt does not help your case, in my opinion, to confine your demonstration of authority, when it comes to handling conflict, to the Underscore repository.  I preferred thinking of you as resting on your authority as the maintainer and core collaborator of Lo-dash.  (Not that I think that helped, either, of course.)  \n\nAs far I'm concerned, this very topic is an instance of your inability to de-escalate conflict.  In fact I think you have no small ability to propagate it, which would be much better handled if you could acknowledge that, and act as a humble human being under the judgment of any code of conduct you might have proposed.  \n\nI began this conversation with bewilderment.  I don't understand you.  Or I understand you perfectly.  There's not a lot of ambiguity in this conversation on my end.  \n\nYou've settled on the CoC as a perfect middle ground that no one can contest, and having claimed it, you can't be attacked.  You should perhaps consider that you do damage to the credibility of CoCs when you initiate them in such a strange way.  \n",
      "Guys, can we not start an argument in the PR _for_ a CoC? That's ridiculous.\n\nThis a positive change, I'm in favor. @TheAlphaNerd's comment seems particularly relevant:\n\n> The node project has a different process for moderating content from a [collaborator vs. a non-collaborate](https://github.com/nodejs/TSC/blob/master/Moderation-Policy.md#collaborator-posts), it sounds like being explicit about this might be important for this project.\n\nThat'd make this even better.\n",
      "Obviously it is not my place, as a non-contributor and only a long-time user of Underscore and Lodash, to stop a CoC from being instated.  I would not want any of my comments to be read as such.  \n\n(Nor would my recommendation that Underscore adopt a CoC hold much weight; however, I do recommend that we do.)  \n",
      "Anyway, I'm :+1: for the COC in general.\n\n> The code of covenant comes with a paragraph outlining that moderation may happen, but it is not clear about how to moderate, or how to document the process. The node project has a different process for moderating content from a collaborator vs. a non-collaborate, it sounds like being explicit about this might be important for this project.\n\nI agree due to the circumstances prompting this\n\nAny off topic banter from this point will be removed.\n\n---\n",
      "@koglerjs \n\n> As a bystander, my impression of your involvement with the underscore project is overwhelmingly that you are someone that stirs up trouble. Certainly you and jashkenas have had your differences. Certainly you are not entirely to blame for dramatic happens.\n\nThe daily ins and outs are much more mundane. \n\n> It does not help your case, in my opinion, to confine your demonstration of authority to the Underscore repository. I preferred thinking of you as resting on your authority as the maintainer and core collaborator of Lo-dash. (Not that I think that helped, either, of course.)\n\nIt's certainly a tricky position to be in. Being 100% isolated is hard and doesn't help folks wanting to make plugins or projects that can leverage either project. It takes a lot of cross-lib collaboration on APIs, behaviors, compat paths. And sometimes lines get blurred, toes get stepped on, & feathers get ruffled, but as I've written earlier I think we all participate in these projects to make things better.\n\n@jridgewell @megawac \n\n> This a positive change, I'm in favor. @TheAlphaNerd's comment seems particularly relevant:\n\nI'm :+1: on the moderator policy. Would that be more approp for a separate PR for core to hash out?\n\n_Edit_\nBtw this thread was snipped by moderators (not me, I lack core rights atm) which is ok.\n",
      "@megawac I'm not sure the wisdom of employing the very comment moderation policy we're debating in this thread. None of the removed posts appear to be especially egregious.\n\nDeleting or editing \"off topic\" or \"unconstructive\" comments is a really slippery slope. Not least because it's incredibly subjective.\n",
      "I suppose, however this thread was getting lengthy at 25 posts in one day and none of the 8 posts I deleted (after providing a warning that posts off topic from the COC topic would be deleted) discussed the topic of the thread. I wanted to avoid further derailment.\n\nAnyway now -- **yay or nay for a COC? Any changes to the proposed COC?**\n",
      "I think the points raised are important to discuss because they provide context. Particularly for something as nuanced as a Code of Conduct, it's important to get the details right.\n\nA Code of Conduct isn't a magic bullet. We're talking about repeated and flagrant violations of respectful tone and unwillingness to handle disagreements over _years_.\n",
      "> A Code of Conduct isn't a magic bullet.\n\nThat plus a moderation policy seems like a start though. \n\n> We're talking about repeated and flagrant violations of respectful tone and unwillingness to handle disagreements\n\nI think most core will agree you've done your part to stir up trouble. Having a code of conduct will help outline what's accepted and what's not and a moderation policy will help with the moderation of core and users. \n",
      "> I suppose, however this thread was getting lengthy at 25 posts in one day and none of the 8 posts I deleted (after providing a warning that posts off topic from the COC topic would be deleted)\n\nUh, you **edited your warning in** and I didn't notice until after the comments were suddenly gone.  \n\nGithub's tools for this are terrible.  \n\nI don't mind particularly that my comments were removed.  \n",
      "Though I do think it was hamfisted, overbearing moderation.  As akre54 noted, it's a little subjective; why is it that jdalton was given the last word even though his comment was after the cutoff?  These are the questions and criticisms you open yourself up to; conflict could escalate if this were done to someone who cared a little more.  \n\nThe point I'm trying to make is that a really good moderator policy won't help if the tools don't support it.  And there we might be stuck.  \n",
      "> @jdalton: It is what it is. I'm not throwing in the towel just yet.\n> \n> @koglerjs: These are vagaries.  Say something real\n\nThose are both _full_ comments. Who really cares who gets that last word in that conversation? That's not acceptable.\n",
      "I wouldn't repost deleted comments.  jdalton and I have let them lie.  \n\nMy point isn't that there's any disastrous miscarriage of justice here.  It's that justice requires a lot of thought.  \n\nAlso I didn't want to sound down on a moderation policy; I'm for one, just a little cynical of Github.  \n\nEdit: Rather than make one more disruptive, off-topic comment, I'll add more to this one.  @jridgewell It's _really unfair_ to selectively reveal part of the deleted conversation as an effort to make me look bad... most notably in my misuse, quickly corrected in an edit, of 'vagaries.'  ;)\n\nSeriously, though: my intent about the 'last word' wasn't who gets to say the last thing; that was probably poorly phrased on my part.  Specifically I had a snappy line I had _almost_ put in a previous comment addressing (I thought quite well) what jdalton said to me, and it was just within the arbitrary-seeming cutoff for deletion.  I'm perfectly willing to let others have the last word.  \n\nMy intent was _not_ to quibble about this specific moderation, only to indicate that its imperfection was readily apparent and moderation is hard but important.  \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05233a21fa1e1f1aac5e",
    "number": 2452,
    "body": "",
    "head_branch": "symbol-isequal",
    "is_a_fork": true,
    "comments": [
      ":+1: \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05243a21fa1e1f1aac5f",
    "number": 2442,
    "body": "There is a misinformation about \"unzip\" function in the docs. Seems like\na example was copied from \"zip\" description and someone forgot to change\nthis.\n",
    "head_branch": "docs-unzip-typo",
    "is_a_fork": true,
    "comments": [
      "Awesome, thanks.\n\nFYI @jdalton we don't have a documentation label for a reason (can't find the issue comment at the moment). Documentation bugs are bugs all the same.\n",
      "It's a nice distinction to make (doc vs. code) ¯\\_(ツ)_/¯\n\nDo you see a benefit from not making the distinction? It just means we can't get a clearer view as it's muddied (see [bugs lookup](https://github.com/jashkenas/underscore/issues?utf8=%E2%9C%93&q=+is%3Aissue+label%3Abug)). Being overly generic with labels negates the benefits of labels.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05253a21fa1e1f1aac60",
    "number": 2440,
    "body": "By removing these we avoid unnecessarily transforming out predicate through `optimizeCb()`.\n",
    "head_branch": "no-identity",
    "is_a_fork": true,
    "comments": [
      "Thanks @captbaritone.\n",
      "Note: We'll need to be aware of this change if Underscore is updated to use `_.iteratee` internally because folks could customize it to not default to `_.identity` if a function isn't provided.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05253a21fa1e1f1aac61",
    "number": 2439,
    "body": "When using the `_.identity` feature of `_.iteratee`, the name \"sortBy\" does not\nmake sense.\n\n```\n// Confusing:\n_.sortBy([5, 4, 3]);\n=> [3, 4, 5]\n\n// Better\n_.sort([5, 4, 3]);\n=> [3, 4, 5]\n```\n",
    "head_branch": "sort-alias",
    "is_a_fork": true,
    "comments": [
      "@captbaritone\nThanks for the PR but there's already a `sort` as part of the chaining syntax which defers to the `Array#sort` built-in.\n",
      "So the idiomatic way to write this would be to use one of these options?\n\n```\n[5, 4, 3].sort();\n```\n\nOr:\n\n```\n_([5, 4, 3]).sort();\n```\n",
      "@jdalton For context, I'm working on this rule for my linting plugin: https://github.com/captbaritone/eslint-plugin-underscore/blob/master/docs/rules/identity-shorthand.md and I want to make sure I don't create a rule that suggests something confusing.\n\nCurrently it suggests converting:\n\n```\n_.sortBy([5,4,3], function(n) { return n; });\n```\n\nTo: \n\n```\n_.sortBy([5,4,3]);\n```\n\nWhich seems a bit odd.\n",
      "Your linting plugin is correct. Because the default iteratee is `identity`.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05263a21fa1e1f1aac62",
    "number": 2438,
    "body": "To make Underscore more approachable to a larger number of users—from informed developers to curious passersby and new and interested visitors—I have added a new section to the Underscore README. The section is entitled What to Use Underscore for and When to Use It. As the name suggests, the new section, explains in plain and straightforward language what Underscore is used for and when one should use it. This is in an effort to make Underscore more accessible to the tens of thousands of new users learning to code and thousands joining GitHub every day.\n",
    "head_branch": "purpose-readme-contribution",
    "is_a_fork": true,
    "comments": [
      "Dup of #2436\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05273a21fa1e1f1aac63",
    "number": 2437,
    "body": "I have written a clear, easy-to-comprehend introduction for Underscore.js. I believe this introduction, free of complex technical terms, will swiftly and thoroughly inform anyone about the use-cases, merit, and advantages, including the celebrated features, of Underscore.js. Seasoned developers, new programmers, and even nontechnical visitors will benefit from the clear language, exposing Underscore.js to a broader range of users.\n",
    "head_branch": "non-developer-readme-contribution",
    "is_a_fork": true,
    "comments": [
      "I don't see this as a big improvement over the existing wording, but thanks.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05283a21fa1e1f1aac64",
    "number": 2436,
    "body": "To make Underscore.js more approachable to a larger number of users—from informed developers to curious passersby and new and interested visitors—I have added a new section to the Underscore.js README. The section is entitled What to Use Underscore.js for and When to Use It. As the name suggests, the new section, a brief paragraph, explains in plain and straightforward language what Underscore.js is used for and when one should use it.\n\nOther repositories may begin to use this new informative and catchy section soon, as my colleagues contact open-source technologies in an effort to make them more accessible to the tens of thousands of new users learning to code and thousands joining GitHub every day.\n",
    "head_branch": "purpose-readme-contribution",
    "is_a_fork": true,
    "comments": [
      "Hi @olegrjumin & @jmatembu!\n\nThanks for these pull requests.\n\nShout-out <sub><img alt=\"cheering megaphone\" src=\"https://cloud.githubusercontent.com/assets/4303/12902196/99394202-ce74-11e5-8266-e5858819dadc.png\" height=\"17px\" width=\"21px\"></sub> to https://learn.modern-developer.com/\nRelated to #2437, #2438, & https://github.com/lodash/lodash/pull/1954.\n",
      "I definitely agree about de-emphasising about jQuery. It's too eye-catchy, so better to replace some agnostic _DOM-manipulating library_ or something else.\n",
      "Thank you for your feedback. It's highly appreciated. Will be incorporating your suggestions soon. \n",
      "Thank you all for suggestions, we've made changes!\n",
      "The best place for this stuff is on http://underscorejs.org (built from the index.html file in the repository).\n\nIt currently says:\n\n> Underscore is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects. It’s the answer to the question: “If I sit down in front of a blank HTML page, and want to start being productive immediately, what do I need?” … and the tie to go along with jQuery's tux and Backbone's suspenders.\n> \n> Underscore provides over 100 functions that support both your favorite workaday functional helpers: map, filter, invoke — as well as more specialized goodies: function binding, javascript templating, creating quick indexes, deep equality testing, and so on.\n\nIf there's something you think is missing, we can make changes, but this doesn't seem to be an improvement to my eyes.\n",
      "Side note: as @jdalton pointed out, we seem to have a few of these types of pull requests lately on Backbone and Underscore.\n\nIs this a project for something or everyone was simultaneously excited to make changes to the docs?\n",
      "Agreed with @akre54.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05293a21fa1e1f1aac65",
    "number": 2435,
    "body": "I propose a configurable option here. The option to have underscore partially interpolate templates. \n\nThe idea here is that all template variables are required to be present on interpolation. This relaxes that restraint and leaves a missing template variable exactly as it was before in the template. Leaving it for future interpolation. \n\nI use underscore in nodejs, as well as backbone in the same application. I have a centralized configuration file that the application uses. The template I use requires configuration information, and user inputted information. The template then is filled out in two stages, once in nodejs and finished in backbone. \n\nThis really helps with with staged templating and accomplishes my and possibility other's use cases. \n\nThe modification is to the **settings** object. \n\nThe addition is the **ignore_missing_template_variables** key. It accepts a boolean value.\n\nThe added usage is as follows:\n\n`// partial replace`\n`var example_template = '<%= foo %><%= bar %>;`\n`var settings = {'ignore_missing_template_variables': true};`\n`var template = _.template(example_template, settings);`\n`var example_templated = template({'foo': '123'}); // '123<%= bar%>'`\n\n`// ignore variable`\n`var example_template = '<%= foo %>;`\n`var settings = {'ignore_missing_template_variables': true};`\n`var template = _.template(example_template, settings);`\n`var example_templated = template({}); // '<%=foo%>';`\n\nThis option can be disabled or omitted for original functionality, and custom interpolation tags are preserved.\n",
    "head_branch": "feature/ignore-missing-template-variables",
    "is_a_fork": true,
    "comments": [
      "Working through the linting and coding standard issues, pardon the delay; I'm acclimating to this.\n",
      "The build passes now yay~\n",
      "I feel like Underscore templates are the wrong tool for this, and you may want to rethink your design. This is enough of an edge case that you may want to make your own library for this. \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e052a3a21fa1e1f1aac66",
    "number": 2433,
    "body": "I have added a description to the README.md that is accessible to non-developers, hopefully clarifying jargon. Do you think having this explanation is of value to this project?\n\n(--Assignment for Learn Modern Developer)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks but no thanks. We want to leave the README as-is.\n\nI think what we have on http://underscorejs.org/ is good enough. If you think there's something to improve, please suggest changes to index.html (your metaphor is a bit much though). \n",
      "Thanks for the feedback regarding the metaphor.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e052b3a21fa1e1f1aac67",
    "number": 2432,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Cool thanks. \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e052c3a21fa1e1f1aac68",
    "number": 2431,
    "body": "I think the fact that the object-oriented style and chaining share implementation details has lead us to conflate them in the docs. In practice, the two features have almost nothing to do with each other.\n\nThe existing documentation could easily lead one to believe that they could start a chain using the OOP style.\n\nThis confusion is compounded by a few factors:\n1. Lodash supports chains starting with the OOP wrapper.\n2. The fact that we share names with native Array methods can lead to manual\n   tests that appear to work.\n\nFor example:\n\n```\n_([1,2,3]).reverse().map(function(n){ return n * 2; });\n```\n\nThis appears to be an example of successfully starting a chain with the OOP style. The astute observer will note that the lack of a `.value()` call, proves this is not Underscore chaining, but a new user attempting to clarify the behavior for herself may not catch that detail.\n",
    "head_branch": "chain-oop-docs",
    "is_a_fork": true,
    "comments": [
      "If it would aid review, here is a link to my proposed version of the docs: https://rawgit.com/captbaritone/underscore/chain-oop-docs/index.html#oop\n",
      "I'd rather remove all references to OOP and consistently just call it the \"chaining style\" or \"chaining-friendly wrapper\".\n",
      "Agreed\n",
      "Perhaps I am a bit confused. To me \"chaining\" means feeding the output of one method into the input of another. The `_([])` syntax allows you to call a single method, but it does not allow you to \"chain\" multiple methods together.\n\nCalling `_([])` a \"chaining-friendly wrapper\" seems very misleading, since using it to start a chain with more than one \"link\" crashes. For example:\n\n```\n_([1,2,3]).map(function(n){ return n * 2; }).first();\n\n=>  TypeError: _(...).map(...).first is not a function\n```\n",
      "@akre54 Could I get a sanity check regarding my last comment?\n",
      "Yes, they are different uses. `_.chain` requires you to call `.value()` at the end to retrieve the result, while `_()` returns the array directly.\n",
      "And we still want to call `_()` \"chaining\", despite the fact that you can't use it to \"chain\" together multiple methods?\n",
      "Nah, you're right. I forgot that the OOP-style didn't automatically start a chain for you (I never use it).\n",
      "Any suggestions for a better name though?\n",
      "While verbose, I personally think \"object-oriented style\" captures the idea quite well. Some alternatives:\n- Wrapped style\n- Method style\n\nI'm not crazy about either of those. Anyone else have any ideas?\n",
      "@michaelficarra Do you like either of the above options, or is OOP the best we are going to get?\n",
      "Since I think this change is a meaningful improvement and does not introduce any new language. Could we merge this PR as is? If we think it's important to come up with a new name for \"Object Oriented Style\" we can open a separate issue to try to find a new name.\n",
      "LGTM. Maybe @megawac or @akre54 want to thumbs up as well?\n",
      "That's fine by me.\n",
      "Whoops, forgot @michaelficarra. That makes two.\n",
      "Thanks!\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e052d3a21fa1e1f1aac69",
    "number": 2430,
    "body": "I forgot to close these tags in the #2414.\n",
    "head_branch": "fix-iteratee-tt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e052e3a21fa1e1f1aac6a",
    "number": 2429,
    "body": "Same as https://github.com/jashkenas/backbone/pull/3938\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b7925e0819557abe4f113df5ee2e19ff64e77776 into c72afe66b5616085b2f100542b5f6de34055812d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e052f3a21fa1e1f1aac6b",
    "number": 2426,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05303a21fa1e1f1aac6c",
    "number": 2425,
    "body": "inspired by https://github.com/jashkenas/underscore/issues/2419#issuecomment-173319945 :)\n",
    "head_branch": "readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05313a21fa1e1f1aac6d",
    "number": 2422,
    "body": "",
    "head_branch": "refactor-difference",
    "is_a_fork": true,
    "comments": [
      ":+1: thanks\n",
      "Looks like tests failed on Travis for an unrelated reason.\n",
      "Most likely because I merged before they finished running\n\nOn Wed, Jan 20, 2016 at 1:39 PM, Jordan Eldredge notifications@github.com\nwrote:\n\n> Looks like tests failed for an unrelated reason.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/jashkenas/underscore/pull/2422#issuecomment-173319169\n> .\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05323a21fa1e1f1aac6e",
    "number": 2421,
    "body": "Added tests for object-oriented-style usage, and order.\n",
    "head_branch": "refactor-union",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05333a21fa1e1f1aac6f",
    "number": 2418,
    "body": "",
    "head_branch": "refactor-intersection",
    "is_a_fork": true,
    "comments": [
      "Thanks for these.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05343a21fa1e1f1aac70",
    "number": 2414,
    "body": "The following methods are transformed through `cb()` but are not listed in the\n`_.itereatee` documentation:\n- findIndex\n- findKey\n- findLastIndex\n- mapObject\n\nI've added them here, and alphabetized the list.\n",
    "head_branch": "iteratee-list",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05353a21fa1e1f1aac71",
    "number": 2412,
    "body": "As requested in #2409 by @michaelficarra.\n",
    "head_branch": "uniq-canonical",
    "is_a_fork": true,
    "comments": [
      "I'd want to get a :+1: from the other maintainers before merging something like this, but LGTM.\n",
      "lodash [v4](https://twitter.com/jdalton/status/687052646281158656) dropped the `unique` alias so :-1: \n",
      "I'm ambivalent to the change. Ruby uses `#uniq` so it's what I've always used. lodash compatibility is nice, too.\n\nAre there any popular languages using `#unique`?\n",
      "> Are there any popular languages using #unique?\n> \n> The only one I was thinking of was English ;)\n\nWhile unique seems slightly more intuitive to me, it's only a minor improvement. Increased compatibility with Lodash is probably far more valuable.\n\n## \n\nJordan Eldredge\n\n> On Jan 12, 2016, at 8:05 PM, Justin Ridgewell notifications@github.com wrote:\n> \n> I'm ambivalent to the change. Ruby uses #uniq so it's what I've always used. lodash compatibility is nice, too.\n> \n> Are there any popular languages using #unique?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05353a21fa1e1f1aac72",
    "number": 2410,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05363a21fa1e1f1aac73",
    "number": 2409,
    "body": "",
    "head_branch": "uniq-canonical",
    "is_a_fork": true,
    "comments": [
      "Sure, though I'd prefer to change the canonical form to `_.unique`.\n"
    ],
    "commit_messages": [
      "Merge b887a4d0ef6d0dbe0b774d1dbb6583d481d6ad53 into eaf325b19d3357b2c473b507ed495ba4812e33cf"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05373a21fa1e1f1aac74",
    "number": 2406,
    "body": "Fixes #2400\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Can you push again and we'll merge? Thanks.\n",
      "I'd like to know what @megawac meant in his comments – it seems he's saying mr PR doesn't change anything?\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05383a21fa1e1f1aac75",
    "number": 2405,
    "body": "Same as https://github.com/jashkenas/backbone/pull/3917\n\ncomponent.json has been [deprecated since June](https://github.com/componentjs/component#this-project-is-deprecated)\n\nSo there's no reason to keep maintaining it.\n\nAnd as it is, @jashkenas [does](https://github.com/jashkenas/underscore/pull/884#issuecomment-10999128) [not](https://github.com/jashkenas/backbone/pull/2622#issuecomment-19669694) [like](https://github.com/jashkenas/backbone/pull/2811#issuecomment-26351438) [it](https://github.com/jashkenas/backbone/commit/28d345a231cfae6b4fcc6a0e394a3534269cd168#commitcomment-4557129).\n",
    "head_branch": "remove-component",
    "is_a_fork": true,
    "comments": [
      "Bower next ;D\n",
      "@jdalton: Are you commenting on bower, or saying bower still uses `component.json`?\n",
      "> Are you commenting on bower\n\nYa, commenting on bower. I'm pulling it from lodash v4 in favor of npm instead.\n",
      "^^ agreed\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05393a21fa1e1f1aac76",
    "number": 2404,
    "body": "",
    "head_branch": "is-symbol",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 296063a017537dd51ae456cda7504e9abcbdb089 into dd19d54709dbe4abe1641623722bfe80d8564748"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e053a3a21fa1e1f1aac77",
    "number": 2403,
    "body": "Fixes #2402.\n",
    "head_branch": "GH-2402",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e053b3a21fa1e1f1aac78",
    "number": 2399,
    "body": "A proposal for #2052. Not sure it's the way to go, but just to get the ball rollin'\n\nFixes #2052; Resolves https://github.com/jashkenas/underscore/pull/1864\n",
    "head_branch": "iteratee-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #2399 from Florian-R/iteratee-doc\n\nDoc: Add links to iteratee. Fix #2052"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e053c3a21fa1e1f1aac79",
    "number": 2398,
    "body": "Avoids making assumptions about _.where's implementation.\n",
    "head_branch": "matcher-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e053d3a21fa1e1f1aac7a",
    "number": 2396,
    "body": "test\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e053e3a21fa1e1f1aac7b",
    "number": 2395,
    "body": "Compare:\n\n```\nconst doStuff = arr => {\n  let res;\n  if (arr.length > 10) {\n    res = \"long array\";\n  } else {\n    res = \"short array\";\n  }\n  return res;\n};\n```\n\nto:\n\n```\nconst doStuff2 = arr =>\n  _.lift(arr.length)\n  .filter(len => len > 10)\n  .map(() => \"long array\")\n  .orElse(() => \"short array\")\n  .unlift();\n```\n\n```\ndoStuff([1,2,3,4,5,6,7,8]);\n> \"short array\"\ndoStuff2([1,2,3,4,5,6,7,8]);\n> \"short array\"\n```\n",
    "head_branch": "feature-lift-unlift-orelse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e053f3a21fa1e1f1aac7c",
    "number": 2394,
    "body": "Compare:\n\n```\nconst doStuff = arr => {\n  let res;\n  if (arr.length > 10) {\n    res = \"long array\";\n  } else {\n    res = \"short array\";\n  }\n  return res;\n}\n```\n\nto:\n\n```\nconst doStuff2 = arr => (\n  _.lift(arr.length)\n  .filter(len => len > 10)\n  .map(() => \"long array\")\n  .orElse(() => \"short array\")\n  .unlift()\n)\n```\n\n```\ndoStuff([1,2,3,4,5,6,7,8]);\n> \"short array\"\ndoStuff2([1,2,3,4,5,6,7,8]);\n> \"short array\"\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05403a21fa1e1f1aac7d",
    "number": 2393,
    "body": "Using `_.identity` (the default predicate) as an example predicate is confusing. It implies that `predicate` is actually a required argument and if you want to evaluate the values untransformed, you must pass `_.identity` explicitly.\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05413a21fa1e1f1aac7e",
    "number": 2392,
    "body": "It would be nice to have an option to sort the array with `_.sortBy` in a descending order, like it's done in Python's sorting function for lists.\n",
    "head_branch": "reversed-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05423a21fa1e1f1aac7f",
    "number": 2391,
    "body": "Accidentally added this rule a second time in pull request #2390.\n",
    "head_branch": "quote-props",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05433a21fa1e1f1aac80",
    "number": 2390,
    "body": "The new version of ESLint has all rules off by default, which matches our existing usage of the tool.\n\nSome rules have been renamed, or their behavior has changed slightly. Most obviously, the `indent` rule is no-longer as lax about the indention of variable declarations.\n\nI think upgrading the tool is a net win, and the changes (while arguably trivial to the point of annoyance) do at least represent an increase in consistency.\n",
    "head_branch": "upgrade",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05443a21fa1e1f1aac81",
    "number": 2389,
    "body": "In our `package.json` we list `\"qunitjs\": \"^1.18.0\"`, but the version in `tests/vendor` was only 1.17.1. This brings our browser test runner up to date.\n\nFrom the QUnit changelog:\n\n> ## 1.18.0\n> - Assert: throws uses push method only\n> - Assert: Fix missing test on exported throws\n> - Assert: Implements notOk to assert falsy values\n> - Core: More graceful handling of AMD\n> - Core: Simplify stack trace methods\n> - Core: Expose Dump maxDepth property\n> - Core: Expose QUnit version as QUnit.version property\n> - Core: Handle multiple testId parameters\n> - Dump: Fix .name/.property doublettes\n> - HTML Reporter: New diff using Google's Diff-Patch-Match Library\n> - HTML Reporter: Make it more obvious why diff is suppressed.\n> - HTML Reporter: Change display text for bad tests\n> - HTML Reporter: Fix checkbox and select handling in IE <9\n> - HTML Reporter: Fix test filter without any module\n> - HTML Reporter: Retain failed tests numbers\n> - Test: lowercase the valid test filter before using it\n\nhttps://github.com/jquery/qunit/releases/tag/1.18.0\n",
    "head_branch": "qunit1.18.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05453a21fa1e1f1aac82",
    "number": 2388,
    "body": "In some environments `.throws()` is a reserved word, so QUnit offers an alias `.raises()`.\n\nUsing `.raises` seems safer, and also allows us to remove an eslint exception.\n",
    "head_branch": "raises",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05463a21fa1e1f1aac83",
    "number": 2387,
    "body": "Inspired by a similar pull request against Backbone (https://github.com/jashkenas/backbone/pull/3816), this brings our test up to date with the QUnit 2.x. As one might infer, this syntax is already available in our version of QUnit.\n\nI used this article as my guide: http://qunitjs.com/upgrade-guide-2.x/#replace-asynctest-with-qunit-test-and-assert-async\n\nEach commit should be self contained, so feel free to review one commit at a time. If people would like this split up into smaller pieces, I'm happy to submit the commits one at a time.\n",
    "head_branch": "qunit2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05463a21fa1e1f1aac84",
    "number": 2386,
    "body": "As of pull request #2033 (commit 2646f2eaaa3a1b6511051b5e0c461bcaf238e778) we\nexplicitly define `_` in our test files, so we no longer need this exception.\n",
    "head_branch": "global_",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05473a21fa1e1f1aac85",
    "number": 2385,
    "body": "@megawac Same change as https://github.com/jashkenas/backbone/pull/3885\n",
    "head_branch": "npm-run-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05483a21fa1e1f1aac86",
    "number": 2384,
    "body": "- Improve assertion grouping\n- Improve assertion messages\n- Remove unused properties from test objects\n- Reuse existing sorted \"score\" list for sorted tests\n- Remove clever/confusing usage of _.map for asserting list equality\n- Simplify test data to be more terse and readable (yes I feel guilty for\n  removing the cute kittens)\n",
    "head_branch": "test-cleanups-uniq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05493a21fa1e1f1aac87",
    "number": 2383,
    "body": "These two functions were nearly identical. Inspired by #2060, I thought I would\ntry to combine the two to save some bytes. Ironically, repetitive code gzips\nvery well, so this refactor actually ends up _adding_ 3 bytes to the\nminified-gzipped size. Oh well.\n\nNever the less, I figured I'd open the PR, since it does reduce repetition in\nthe source code, and maybe it will serve as a guide for somebody else who looks\ninto combing these.\n\nPros:\n- Less code in underscore.js\n- DRYer code (https://en.wikipedia.org/wiki/Don't_repeat_yourself)\n\nCons:\n- Larger gzipped file size\n- Possibly a _tiny_ bit slower (I'm no perf expert)\n- Code is harder to understand\n\nFeel free to close this PR if, as I suspect, these trade-offs are not worthwhile.\n",
    "head_branch": "every-some-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e054a3a21fa1e1f1aac88",
    "number": 2382,
    "body": "I mistyped the pull request number in my previous commit.\n\nSorry @megawac, I thought I had amended this before you merged.\n",
    "head_branch": "fix-issue-number",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e054b3a21fa1e1f1aac89",
    "number": 2381,
    "body": "https://github.com/jashkenas/underscore/commit/8a70f347e32650f9ca114b99ee09c61e711ecc08#commitcomment-14893333\n",
    "head_branch": "cancel-timeouts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e054c3a21fa1e1f1aac8a",
    "number": 2380,
    "body": "Invokes all methods inside of object and returns a new object\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e054d3a21fa1e1f1aac8b",
    "number": 2379,
    "body": "This incomplete comment was introduced in pull request #1991. I believe I have\ncaptured the intended intent.\n\nReview: @megawac\n",
    "head_branch": "improve-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e054e3a21fa1e1f1aac8c",
    "number": 2377,
    "body": "Makes assertion messages more consistent and readable.\n\nThe rational for the second assertion, \"finds the smallest index...\" was\noutlined in pull request #563, but not clearly documented. I've attempted to\nremedy that with the updated message.\n",
    "head_branch": "test-cleanups-sortedindex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e054f3a21fa1e1f1aac8d",
    "number": 2376,
    "body": "In commit 44a47fb, `_.iteratee()` was converted into the fully internal function `cb()`. However, the comment was not not updated to reflect its new internal status.\n",
    "head_branch": "correct-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05503a21fa1e1f1aac8e",
    "number": 2375,
    "body": "Made the comment clear by fixing the grammar.\nTook @michaelficarra suggestion to make comment change even better.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05513a21fa1e1f1aac8f",
    "number": 2374,
    "body": "I needed something like this myself and thought I'd share it. Based on https://github.com/IndigoUnited/js-deep-filter, but with a few tweaks.\r\n\r\n`deepFilter` is pretty much the same as `filter`, except it goes through nested objects/arrays.\r\n",
    "head_branch": "dchacke/deepFilter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05523a21fa1e1f1aac90",
    "number": 2373,
    "body": "Made the comment clear by fixing the grammar.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05533a21fa1e1f1aac91",
    "number": 2369,
    "body": "Fixes https://github.com/jashkenas/underscore/issues/2364.\n",
    "head_branch": "negative-range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05543a21fa1e1f1aac92",
    "number": 2368,
    "body": "this allows for using custom matcher function for comparison\ndefaults to `_.isEqual` for comparison #2311 \n\nadded a `_.uniqueWith` function as discussed, also added `_.includeWith` as a method to detect if an Array or Collection has an item passing a method. This will be useful if we implement the other methods discussed in the thread as well.\n",
    "head_branch": "uniqueWith",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05553a21fa1e1f1aac93",
    "number": 2367,
    "body": "pick iteratee function is called with `iteratee(value, key, obj)` but omit iteratee is defined with `iteratee(value, key)` \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05563a21fa1e1f1aac94",
    "number": 2366,
    "body": "",
    "head_branch": "test-cleanups-without",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05573a21fa1e1f1aac95",
    "number": 2365,
    "body": "In pull request #2360 @michaelficarra suggested an improvement to the assertion\nmessages for `_.last()`'s two `n <= 0` cases. This change brings `_.first()`\nassertions in line with this improved format.\n",
    "head_branch": "test-cleanups-first",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05573a21fa1e1f1aac96",
    "number": 2361,
    "body": "Explicitly test all falsy values, and assert it works with map.\n",
    "head_branch": "test-cleanups-compact-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05583a21fa1e1f1aac97",
    "number": 2360,
    "body": "Makes assertions consistent with `_.first()`'s assertions. This involved\nrewording the descriptions, adding a test for the object oriented version of\n`_.last()`, and making the `-n` assertion explicitly check for an empty array.\n",
    "head_branch": "test-cleanups-last",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05593a21fa1e1f1aac98",
    "number": 2359,
    "body": "Make the language better match the documentation\n\n(Sorry for flubbing this in my earlier PR)\n",
    "head_branch": "test-cleanups-rest-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e055a3a21fa1e1f1aac99",
    "number": 2358,
    "body": "",
    "head_branch": "test-cleanups-initial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e055b3a21fa1e1f1aac9a",
    "number": 2357,
    "body": "Clean up assertion descriptions, and remove a duplicate assertion. The\nduplicate assertion is a remnant from when that assertion was used to test the\n`_.drop` alias. It was made obsolete in pull request #1663.\n",
    "head_branch": "test-cleanups-rest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e055c3a21fa1e1f1aac9b",
    "number": 2356,
    "body": "- Ensure all tests are run against the canonical function name\n- Ensure all aliases mentioned in the documentation are tested\n- Remove redundant tests which were originally meant to test aliases\n- Make alias assertion descriptions consistent readable sentences\n- Use `(actual, expected)` argument order in alias assertions\n",
    "head_branch": "test-cleanups-aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e055d3a21fa1e1f1aac9c",
    "number": 2355,
    "body": "Makes the assertion descriptions more consistent.\n\nIn the case of the `-n` test, I opted to rewrite it to be more explicit.\nAsserting that it actually returns an empty array is ever so slightly more\nmeaningful than testing that its return value has a length of 0.\n",
    "head_branch": "test-cleanups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e055e3a21fa1e1f1aac9d",
    "number": 2354,
    "body": "This test was originally added in pull request #500 as a way to affirm that the\n`_.take()` alias was working. In pull request #1663 we moved to testing aliases\nexplicitly, but left this test an additional `_.first()` test.\n\nIt is redundant because it is functionally identical to the test on line 10.\n",
    "head_branch": "test-cleanups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e055f3a21fa1e1f1aac9e",
    "number": 2353,
    "body": "",
    "head_branch": "test-cleanups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05603a21fa1e1f1aac9f",
    "number": 2349,
    "body": "As part of the review for pull request #2298, @jdalton requested that we add\nthis check to handle the empty string case. However, I'm guessing he didn't\nrealize that the first line of the function, `if (!obj) return [];`, already\nhandles that case.\n\nAs part of that pull request, @JonAbrams wisely added a test for the empty\nstring case, so as long as tests are passing this change should be safe.\n\nSee: https://github.com/jashkenas/underscore/pull/2298#discussion_r39480698\n",
    "head_branch": "isArray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05613a21fa1e1f1aaca0",
    "number": 2348,
    "body": "I couldn't figure out from reading the docs whether `const f = _.debounce(x => { console.log(x); }, 1000); f(1); f(2);` would print `1` or `2`.\n\nDiscovered experimentally that the answer is `2`. This PR drops a hint about that behavior into the documentation.\n",
    "head_branch": "debounce-args-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05623a21fa1e1f1aaca1",
    "number": 2347,
    "body": "According to _.reduce and the _.template transform data into a string\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05633a21fa1e1f1aaca2",
    "number": 2345,
    "body": "Ref jashkenas/underscore#2341\n",
    "head_branch": "qunit-noglobals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05643a21fa1e1f1aaca3",
    "number": 2342,
    "body": "See #2341.\n",
    "head_branch": "GH-2341",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05643a21fa1e1f1aaca4",
    "number": 2341,
    "body": "Just spotted this, re: #2340.\n",
    "head_branch": "cleanup-debounce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05653a21fa1e1f1aaca5",
    "number": 2340,
    "body": "Don't know why I didn't think of `_.delay`...\n",
    "head_branch": "cleanup-debounce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05663a21fa1e1f1aaca6",
    "number": 2339,
    "body": "",
    "head_branch": "cleanup-debounce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05673a21fa1e1f1aaca7",
    "number": 2338,
    "body": null,
    "head_branch": "throttle-clear",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05683a21fa1e1f1aaca8",
    "number": 2337,
    "body": "Supersedes #1542.\n",
    "head_branch": "debounce-clear",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05693a21fa1e1f1aaca9",
    "number": 2335,
    "body": "Use markdown link tags. It's more neat and now we can click on it on npm page.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e056a3a21fa1e1f1aacaa",
    "number": 2333,
    "body": "A little bit of discussion here https://github.com/jashkenas/backbone/pull/3843#discussion_r43514938.\n",
    "head_branch": "immutable-defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e056b3a21fa1e1f1aacab",
    "number": 2331,
    "body": "fixes https://github.com/jashkenas/underscore/issues/2329\n",
    "head_branch": "tests-to--0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e056c3a21fa1e1f1aacac",
    "number": 2327,
    "body": "``` js\n_.template = function(text, settings, oldSettings) {\n\n```\n\nHandles if `text` parameter was set to `undefined` or `null`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e056d3a21fa1e1f1aacad",
    "number": 2326,
    "body": "As of 0.13.12 karma supports a concurrency field to limit browsers started in parallel. See https://github.com/karma-runner/karma/pull/1646\n\nDon't merge til green lights\n\nHave to still tinker with the concurrency limit. I think we should be able to set 4\n",
    "head_branch": "karma-sauce",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge cd54225d3cc41389dd1ae562e3ddc78962e5f2cb into 13fe120d16af3eee2b96c4c1446e0eca7d4df9c0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e056e3a21fa1e1f1aacae",
    "number": 2323,
    "body": "This fixes an issue when using `_.each` to iterate over an object that contains the key \"length\"\n\nBefore:\n\n``` JavaScript\n_.each({\"length\": 3}, function(value, key){\n  console.log(key, value)\n})\n\n// => 0 undefined\n// => 1 undefined\n// => 2 undefined\n```\n\nAfter: \n\n``` JavaScript\n_.each({\"length\": 3}, function(value, key){\n  console.log(key, value)\n})\n\n// => \"length\" 3\n```\n\nI'd appreciate feedback from anyone who knows a more elegant way to determine if an object contains the key `length` and not the property length since JavaScript doesn't differentiate between property access and accessing an object key.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e056f3a21fa1e1f1aacaf",
    "number": 2321,
    "body": "Closes #2292.\n\n**Note:** I did not add tests as I’m not too sure how to go about doing it.\n",
    "head_branch": "check-nodetype",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05703a21fa1e1f1aacb0",
    "number": 2320,
    "body": "typo\n",
    "head_branch": "documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05703a21fa1e1f1aacb1",
    "number": 2319,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05713a21fa1e1f1aacb2",
    "number": 2317,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05723a21fa1e1f1aacb3",
    "number": 2314,
    "body": "Fixes #2308.\n",
    "head_branch": "ie-has-shenanigans",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05733a21fa1e1f1aacb4",
    "number": 2312,
    "body": "Fixes #2218\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05743a21fa1e1f1aacb5",
    "number": 2309,
    "body": "Hello, this adds `_.combinations` to the array utils, which fits nicely with `_.chunk`.\nThe call `_.combinations(array, n)` returns all combinations of length n from array,\nor the empty array if n is not provided, or if n is too large or too small.\n\nCheers,\nJason\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05753a21fa1e1f1aacb6",
    "number": 2307,
    "body": "change example syntax fom `bind` to `on`, since they are functionally equivalent, and the use of `bind` was causing fellow readers some confusion when used as part of the example for the `_.bindAll` function\n",
    "head_branch": "update_language",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05763a21fa1e1f1aacb7",
    "number": 2306,
    "body": "Add Haskell like function definitions using pattern matching.\n\nIn Haskell a function can be defined by pattern matching over\nargument values.\n\n``` haskell\nmyFunc :: Int -> Int -> String\nmyFunc 0 0 = \"Hello\"\nmyFunc 1 0 = \"Goodbye\"\n```\n\nWe can define pattern matches to arbitrary arguments.\n\n``` haskell\nmyFunc _ 1 = \"Good Afternoon\"\n\n(myFunc 10 1) -- \"Good Afternoon\"\n(myFunc 1 0) -- \"Goodbye\"\n(myFunc 0 0) -- \"Hello\"\n```\n\nLast, we can define standard functions simply by defining functions\nwith non-value arguments, similar to javascript function definitions.\n\n``` haskell\nmyFunc x y = \"The sum is: \" + (show (x+y)) \n```\n\nUsing standard function definitions in javascript, we have to use nested\nif statements for each argument case. The same definitions as above are...\n\n``` javascript\nfunction myFunc(a, b) {\n    if (b == 1){\n        return \"Good Afternoon\"\n    } \n    if (a == 0 && b == 0){\n        return \"Hello\"\n    }\n    if (a == 1 && b == 0){\n        return \"Goodbye\"\n    }\n    return \"The sum is: \" + (a+b)\n}\n```\n\n_.comb allows concise pattern matching using haskell-like syntax\n\n``` javascript\n//A default function if no patterns are matched\nvar myFunc = _.comb(function(a, b){\n    return \"The sum is: \" + (a+b)\n})\n\n//Cases to match on and values to return\nmyFunc.link(_, 1, \"Good Afternoon\")\nmyFunc.link(0, 0, \"Hello\")\nmyFunc.link(1, 0, \"Goodbye\")\n```\n\nThe arguments to link sets patterns to match over in a first link,\nfirst match basis. Lastly, we can pattern match on values and supply \nabstract functions to apply arguments to.\n\n``` javascript\nmyFunc.link(2, _, function(a, b){\n    return \"Product of 2:\" + (a * b)\n})\n```\n\nSum outputs with the definitions...\n\n``` javascript\nmyFunc(2, 3) // 6\nmyFunc(10000, 1) // \"Good Afternoon\"\nmyFunc(100, 100) // \"The sum is: 200\"\n```\n\nA full example of definitions in javascript...\n\n``` javascript\nvar myFunc = _.comb(function(a, b){\n    return \"The sum is: \" + (a+b)\n})\nmyFunc.link(0, 0, \"Hello\")\nmyFunc.link(1, 0, \"Goodbye\")\nmyFunc.link(_, 1, \"Good Afternoon\")\nmyFunc.link(2, _, function(a, b){\n    return \"Product of 2:\" + (a * b)\n})\n\nmyFunc(2, 3) // 6\nmyFunc(10000, 1) // \"Good Afternoon\"\nmyFunc(100, 100) // \"The sum is: 200\"\n```\n",
    "head_branch": "feature/issue-2305",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05773a21fa1e1f1aacb8",
    "number": 2303,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05783a21fa1e1f1aacb9",
    "number": 2301,
    "body": "…ssue 2300\n",
    "head_branch": "issue2300_add_update_method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05793a21fa1e1f1aacba",
    "number": 2298,
    "body": "Fixes #2296\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e057a3a21fa1e1f1aacbb",
    "number": 2297,
    "body": "https://github.com/jashkenas/underscore/issues/2296\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e057b3a21fa1e1f1aacbc",
    "number": 2295,
    "body": "This pull request modifies the tests to have the interface QUnit 1.19.0 requires, fixing #2294 \n",
    "head_branch": "qunit-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e057c3a21fa1e1f1aacbd",
    "number": 2291,
    "body": "Set property(s) on all members of a collection\n",
    "head_branch": "collection.set",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e057d3a21fa1e1f1aacbe",
    "number": 2289,
    "body": "PR for #2288 \n",
    "head_branch": "feature/adding-nondeterministic-computations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e057e3a21fa1e1f1aacbf",
    "number": 2287,
    "body": "As discussed in #2285, this pull request changes the code to match the guidelines proposed by @akre54.\n",
    "head_branch": "equality_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 660938d320f6c20a460316e3da40eafdb1a17df6 into 37f62d39c2880ebabb05bcd8d90151cf289e5d88"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e057f3a21fa1e1f1aacc0",
    "number": 2285,
    "body": "There were some strings being compared with '==', and others being compared with '===', so I have made it uniform across the code to '==='. \n\nPlease let me know if I have formatted this pull request incorrectly, or if there are any changes I need to make. Today is the first time I have committed to a large, open source project, so if there is anything I should have done differently please let me know. Thanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05803a21fa1e1f1aacc1",
    "number": 2284,
    "body": "  // reduce a collection by removing outliers for a given property\n  // Use it like this:\n  // var col = [{a:20}, {a:30}, {a: '5'}, {a:20}, {a: 10}, {a: '5'}, {a: '5'}, {a: '5'}, {a: 20}, {a: 30}, {a: 50}]\n\n  // for the collection examine property 'a' and take the most common 10% for values above 6\n  // _.removeOutliers(col, 'a', 0.1, 6);\n",
    "head_branch": "remove-outliers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05803a21fa1e1f1aacc2",
    "number": 2283,
    "body": "Method's function is self evident.\n",
    "head_branch": "isPrimitive",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05813a21fa1e1f1aacc3",
    "number": 2279,
    "body": "Increased comprehensibility of the comments for the reducer function to make the optimizations around the arguments.length value more understandable to contribs.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05823a21fa1e1f1aacc4",
    "number": 2278,
    "body": "fixed English for comments of cb function\n",
    "head_branch": "cbComments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05833a21fa1e1f1aacc5",
    "number": 2277,
    "body": "removed functionBind variable instantiation from documentation.\n",
    "head_branch": "nativeBind",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05843a21fa1e1f1aacc6",
    "number": 2276,
    "body": "updated optimizeCb function documentation to include the comments that explains the exclusion of case 2.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05853a21fa1e1f1aacc7",
    "number": 2275,
    "body": "Similar function to Objective-C's [`-[NSArray makeObjectsPerformSelector:]`](https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html#//apple_ref/occ/instm/NSArray/makeObjectsPerformSelector:), but will build an array composed of the return values.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05863a21fa1e1f1aacc8",
    "number": 2270,
    "body": "At first you may think this is not needed, since the error might surface from inside, when the function is empty, but it makes problem when combines with promises (timers/delayed functions).\nWithout it, I got an exception such as:\n\n```\nundefined is not a function\n    at executeBound (node_modules\\underscore\\underscore.js:701:67)\n    at bound (node_modules\\underscore\\underscore.js:733:14)\n    at tryCatcher (node_modules\\bluebird\\js\\main\\util.js:24:31)\n    at Promise._settlePromiseFromHandler (node_modules\\bluebird\\js\\main\\promise.js:454:31)\n    at Promise._settlePromiseAt (node_modules\\bluebird\\js\\main\\promise.js:530:18)\n    at Promise._settlePromises (node_modules\\bluebird\\js\\main\\promise.js:646:14)\n    at Async._drainQueue (node_modules\\bluebird\\js\\main\\async.js:182:16)\n    at Async._drainQueues (node_modules\\bluebird\\js\\main\\async.js:192:10)\n    at Immediate.Async.drainQueues [as _onImmediate] (node_modules\\bluebird\\js\\main\\async.js:15:14)\n    at processImmediate [as _immediateCallback] (timers.js:367:17) - TypeError: undefined is not a function\n```\n\nAs you can see, this doesn't tell me anything on where my code is actually wrong;\nWhen we throw the error from the _.partial() function instead, I can see the correct stacktrace, where I actually gave a non-function variable to _.partial().\n",
    "head_branch": "issuePartialValidateFunction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05873a21fa1e1f1aacc9",
    "number": 2269,
    "body": "`_.isError` is documented but not in the sidebar.\n\n// checked for other 1.8.x new features as well\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05883a21fa1e1f1aacca",
    "number": 2267,
    "body": "``` js\n_.simplify([[1, 2, 3], [2, 3, 4], [[[3, 4, 5], [6, 7, 8]]]]);\n// => [[1, 2, 3], [2, 3, 4], [3, 4, 5], [6, 7, 8]]\n```\n",
    "head_branch": "simplify-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05893a21fa1e1f1aaccb",
    "number": 2266,
    "body": "_.compact([0, 1, false, undefined], true)\n=> [0, 1]\n",
    "head_branch": "compact-allow-zero-flag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05893a21fa1e1f1aaccc",
    "number": 2265,
    "body": "Creates a collection from a list of keys and a list of lists of values.\n",
    "head_branch": "collection-creation-utility-function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e058a3a21fa1e1f1aaccd",
    "number": 2264,
    "body": "[NPM includes LICENSE automatically](https://docs.npmjs.com/files/package.json#files).\n",
    "head_branch": "package.json",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e058b3a21fa1e1f1aacce",
    "number": 2262,
    "body": "A collection is a list of objects with the same keys.\n\nNow they can be created by sending an array of the keys and an array of\narrays of values.\n\n_.collection(['name', 'score'], [['Anastasia', 'Jim', 'Anthony', 'Edmund'], [20, 40, 90, 80, 100]]);\n\n=> [{\"name\":\"Anastasia\",\"score\":20},{\"name\":\"Jim\",\"score\":40},{\"name\":\"Anthony\",\"score\":90},{\"name\":\"Edmund\",\"score\":80},{\"name\": undefined, \"score\":100}]\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e058c3a21fa1e1f1aaccf",
    "number": 2261,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e058d3a21fa1e1f1aacd0",
    "number": 2260,
    "body": "While it's fun trivia, it's no longer relevant thanks to #2259\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e058e3a21fa1e1f1aacd1",
    "number": 2259,
    "body": "fixes https://github.com/jashkenas/underscore/issues/2257\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e058f3a21fa1e1f1aacd2",
    "number": 2255,
    "body": "Since `isEqual` operates on arrays as well as on objects, it belongs under Collections. The language has been changed accordingly.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05903a21fa1e1f1aacd3",
    "number": 2254,
    "body": "Fixes #2253.\n",
    "head_branch": "GH-2253",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05913a21fa1e1f1aacd4",
    "number": 2252,
    "body": "Resolves #1919 pull request (squash, adapted fork of that branch)\n\nBiggest deviation from pr above (and lodash) is `chunkSize < 1` returns an array of 0 chunks (empty array)\n\nCloses a bunch of issues #2130 #1891 #2249 #696 #998 #714 (others perhaps?)\n\nPing https://github.com/underdash/underdash/issues/7 https://github.com/gkz/prelude-ls/pull/81\n",
    "head_branch": "chunk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05923a21fa1e1f1aacd5",
    "number": 2251,
    "body": "Closes #2246.\n",
    "head_branch": "sortBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05933a21fa1e1f1aacd6",
    "number": 2250,
    "body": "I found a typo in times section.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05933a21fa1e1f1aacd7",
    "number": 2245,
    "body": "Added a note that .every short circuits (same as .some)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05943a21fa1e1f1aacd8",
    "number": 2243,
    "body": "",
    "head_branch": "peer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05953a21fa1e1f1aacd9",
    "number": 2239,
    "body": "Making `_.pick` convert keys to `String` as well, to match the behavior of `_.omit`.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05963a21fa1e1f1aacda",
    "number": 2237,
    "body": "findAllIndexes finds all the indexes of an array-like that pass some test.\nFor example:\n_.findAllIndexes([1,2,3,3,1,2,3,5,1], function(x) {return x >2});\n[2,3,6,7]\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05973a21fa1e1f1aacdb",
    "number": 2236,
    "body": "https://github.com/jashkenas/underscore/pull/2233#issuecomment-120677098\n",
    "head_branch": "isFunction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05983a21fa1e1f1aacdc",
    "number": 2234,
    "body": "Ünderscore.js is the wave. It comes crashing over the horizon. Its thundering roar grows in intensity. Birds escape while they still can, their distant cries give warning to mortal creatures. But you are not mortal. You are made of pure energy. Umlaut energy. The umlaut gives you strength, not fear. It feeds you with boundless power of infinite possibility. You are beyond quantum. Super quantum. The world expands and contracts with your thought. The wave arrives. It washes over. You join the essence of the umlaut and extend beyond time and space. You have achieved singularity with the umlaut.\n\nNo changes to source files were made.\n\nÜnderscore.js:\n<img width=\"784\" alt=\"screen shot 2015-07-09 at 8 26 01 pm\" src=\"https://cloud.githubusercontent.com/assets/9893865/8611612/cf8fd522-2678-11e5-9df4-37ba6edf1008.png\">\n\nUnderscore.js:\n<img width=\"774\" alt=\"screen shot 2015-07-09 at 8 25 36 pm\" src=\"https://cloud.githubusercontent.com/assets/9893865/8611609/c7a07c72-2678-11e5-8f6e-ef81a364ae15.png\">\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05993a21fa1e1f1aacdd",
    "number": 2233,
    "body": "fixes #1992: Collections should not iterate functions as array-likes\n\nPaired with @jridgewell, @alewiscondev.\n",
    "head_branch": "function_iteration",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e059a3a21fa1e1f1aacde",
    "number": 2232,
    "body": "Fixes issue https://github.com/jashkenas/underscore/issues/2115. Defaults null and undefined objects correctly.\n\nPaired with @jridgewell and @djrconcepts!\n",
    "head_branch": "defaults-null-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e059b3a21fa1e1f1aacdf",
    "number": 2231,
    "body": "Stolen from lodash, used to determine if one of our underscore methods were called by `_.each`, `_.map`, or friends.\n",
    "head_branch": "isIterationCall",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e059c3a21fa1e1f1aace0",
    "number": 2229,
    "body": "- partitionInto add's the ability to break a list into a set of smaller\n  lists containing a certain number of elements\n- A great example of this behavior is [clojure's\n  partition](https://clojuredocs.org/clojure.core/partition)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e059d3a21fa1e1f1aace1",
    "number": 2228,
    "body": "Currently unneeded \n",
    "head_branch": "optimize-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e059e3a21fa1e1f1aace2",
    "number": 2224,
    "body": "Noticed a small typo while checking something in the source. s/offest/offset\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e059f3a21fa1e1f1aace3",
    "number": 2221,
    "body": "Discovered during https://github.com/caolan/async/pull/804\n",
    "head_branch": "global-vm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a03a21fa1e1f1aace4",
    "number": 2219,
    "body": "Hey,\n\nIt's been a while since I've been developping, testing and using my own port of Underscore in PHP. This is an updated version of [brianhaveri/Underscore.php](http://brianhaveri.github.io/Underscore.php/) which includes features that weren't possible at the time Brian made his version (mostly some new PHP stuff like closures contexts and late static binding).\n\nI invite you to discover it [here](https://github.com/bdelespierre/underscore.php) and to let me know if you have any comment or suggestion :+1: \n",
    "head_branch": "new-php-port-paragraph",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a03a21fa1e1f1aace5",
    "number": 2217,
    "body": "I added ability to merge two objects together\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a13a21fa1e1f1aace6",
    "number": 2215,
    "body": "Proposed new feature: coalesce\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a23a21fa1e1f1aace7",
    "number": 2213,
    "body": "Theres been a number of changes in terms of features and support. I think its time for an updated release.\n\nPrerequisite issues\n- [ ] #2212\n- [ ] #2214 \n- [ ] #2073 \n- [ ] #2071 \n- [x] #2211 \n- [ ] #2231\n\n/cc @jridgewell @jashkenas @akre54\n",
    "head_branch": "v1.9.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a33a21fa1e1f1aace8",
    "number": 2212,
    "body": "Closes #2209 \n\nRelated issue (where name was discussed) #2140 \n\nIn the name of lodash/underdash compatibility I think we should probably drop `restArgs` in favour of  `restParam` which is closer to what is described in the JavaScript spec (`rest` parameter). The counter argument is we call them args elsewhere in the library.\n\nOtherwise an alias should be sufficient.\n",
    "head_branch": "restParam",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a43a21fa1e1f1aace9",
    "number": 2211,
    "body": "This is in relation to the comment https://github.com/jashkenas/underscore/issues/2037\n",
    "head_branch": "change-max-min-with-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a53a21fa1e1f1aacea",
    "number": 2210,
    "body": "Per bower/bower.json-spec@a325da3\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a63a21fa1e1f1aaceb",
    "number": 2208,
    "body": "IMHO, with the approaching of ES6, it is time to support new features. But I am not sure if you want it :-)\nSee also: #2147.\n",
    "head_branch": "enhance-each",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a73a21fa1e1f1aacec",
    "number": 2205,
    "body": "merge1\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a83a21fa1e1f1aaced",
    "number": 2203,
    "body": "",
    "head_branch": "reduce-right-native",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05a93a21fa1e1f1aacee",
    "number": 2202,
    "body": "If you have a n=1000 deeply nested array with k=1000 elements in the leaf node then it would be copied n times leading to O(n*k). After this fix, it will take O(n+k)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05aa3a21fa1e1f1aacef",
    "number": 2199,
    "body": "We cover almost all of nativeBind's cases:\n- Binding function to context\n- Binding function to context with args\n- Binding constructor with args\n\nThe only downside is supported environments will no longer get the correct `length` property of the bound method. Usually, you subtract the number of bound args from `func`'s length. But, now Underscore is consistent between all environments.\n\nhttp://jsperf.com/native-bind-vs-underscore/2\n\nRe: #2197\n",
    "head_branch": "bind",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05aa3a21fa1e1f1aacf0",
    "number": 2198,
    "body": "As per https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n\nCreated off the back of #2197 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ab3a21fa1e1f1aacf1",
    "number": 2196,
    "body": "",
    "head_branch": "GH-2194-amendment",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ac3a21fa1e1f1aacf2",
    "number": 2194,
    "body": "",
    "head_branch": "eslint-upgrade",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ad3a21fa1e1f1aacf3",
    "number": 2193,
    "body": "Added a `_.reverse` (aliased `_.flip`) array method to _underscore.js_; and the unit tests to _test/array.js_.\nReturns a copy of the reversed array. Aliased as `flip`.\nPassing an **n** will return a copy of array with the first N entries reversed.\nExample usage:\n\n```\n_.reverse([0, 1, 2, 3, 4])\n=> [4, 3, 2, 1, 0]\n_.reverse([0, 1, 2, 3, 4], 3)\n=> [2, 1, 0, 3, 4]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ae3a21fa1e1f1aacf4",
    "number": 2192,
    "body": "Added a _.reverse (aliased _.flip) array method to underscore.js – reverses the first **n** entries.\nUses while(shift / unshift) for fast performance in V8 engine.\nExample usage:\n_.reverse([0, 1, 2, 3, 4])\n=> [4, 3, 2, 1, 0]\n_.reverse([0, 1, 2, 3, 4], 3)\n=> [2, 1, 0, 3, 4]\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05af3a21fa1e1f1aacf5",
    "number": 2191,
    "body": "This pull adds coverage and build status badges. Coverage is facilitated by [nyc](https://www.npmjs.com/package/nyc) and the hosted coverage service coveralls.io.\n- run `npm run coverage` to get a human readable coverage report.\n- run `npm run coverage -- --reporter=lcov` to get an HTML report over coverage in the /coverage folder.\n- run `npm run coveralls` to report coverage to the [coveralls.io](https://coveralls.io/).\n  - you'll need to setup your repo on coveralls.io and grap the `COVERALLS_REPO_TOKEN`.\n  - on travis-ci.org, you'll need to set an environment variable with the value of `COVERALLS_REPO_TOKEN`\n",
    "head_branch": "coverage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b03a21fa1e1f1aacf6",
    "number": 2189,
    "body": "",
    "head_branch": "sample-forward",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b13a21fa1e1f1aacf7",
    "number": 2188,
    "body": "https://github.com/jashkenas/underscore/commit/1673423ed988294e95df0af7da99928bf545590e#commitcomment-11342828\n",
    "head_branch": "eslint-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b23a21fa1e1f1aacf8",
    "number": 2187,
    "body": "`_.removeItem` method. It would remove item from array if predicate is true.\n",
    "head_branch": "feature-removeItem",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b33a21fa1e1f1aacf9",
    "number": 2185,
    "body": "#2180 got micro-opty, but we can still speed up `_.isEqual` with acceptable changes.\n\nI'm stealing a page from lodash and splitting `eq()` and `deepEq()`. Yes, I [waffled](https://github.com/jashkenas/underscore/pull/2180#issuecomment-102730045) about creating another function, but we're able to not duplicate checks and get a [30x speed boost](http://jsperf.com/underscore-isequal/9) with primitives.\n",
    "head_branch": "isEqual",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b43a21fa1e1f1aacfa",
    "number": 2183,
    "body": "This adds support for the [Composer](http://getcomposer.org) package manager for PHP.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b53a21fa1e1f1aacfb",
    "number": 2181,
    "body": "I think there is no need to use variable `seen` on condition that iteratee is not null.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b53a21fa1e1f1aacfc",
    "number": 2180,
    "body": "Optimized isEqual for speed on primitive types. Now it's multiple times faster than lodash in all browsers.\n\nPerformance of isEqual is critical for Backbone.Model.set performance.\n\nhttp://jsperf.com/underscore-isequal/5\n\nInteger comparison:\nChrome: 70x faster \nFirefox: 50x faster\nSafari: 140x faster\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b63a21fa1e1f1aacfd",
    "number": 2179,
    "body": "and 1,5 times faster than lodash.isEqual\nhttp://jsperf.com/underscore-isequal/3\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b73a21fa1e1f1aacfe",
    "number": 2178,
    "body": "http://jsperf.com/restargs-flatten\n",
    "head_branch": "use-restArgs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b83a21fa1e1f1aacff",
    "number": 2177,
    "body": "Underscore-java is a java port of underscore.js.\nIn addition to porting Underscore's functionality, Underscore-java\nincludes matching unit tests.\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05b93a21fa1e1f1aad00",
    "number": 2176,
    "body": "resolve: Uncaught TypeError: Cannot read property '_' of undefined\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ba3a21fa1e1f1aad01",
    "number": 2172,
    "body": "Well, and optimize `iteratee`, cause we don't really need context anywhere else.\n\nFirefox **really** likes this, and Chrome is faster as well. [jspef](https://jsperf.com/reduce-right-optimi/19)\n",
    "head_branch": "reduce-reuse-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05bb3a21fa1e1f1aad02",
    "number": 2171,
    "body": "Two points:\n- Use restArgs to cleanup `_.zip` method\n- Undo a performance regression @akre54 [mentioned](https://github.com/jashkenas/underscore/pull/2140/files#r28144086)\n",
    "head_branch": "restArgs-cleanup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05bc3a21fa1e1f1aad03",
    "number": 2170,
    "body": "Longshot I know...\n\nbrowserify does a [quick](https://github.com/substack/node-detective/blob/75946ee23cb7abb974a2053235ecb2663b879c07/index.js#L4) regexp match for `\\brequire\\b` before deciding on whether to build an AST to get the require calls. By rewording this comment so that the word \"require\" is nowhere in the source, you'd be improving everyones build times. Browserify provides a `noparse` escape hatch but this is an easy win.\n",
    "head_branch": "remove-require",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05bd3a21fa1e1f1aad04",
    "number": 2168,
    "body": "merge2\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05be3a21fa1e1f1aad05",
    "number": 2167,
    "body": "Closes #2156 \n",
    "head_branch": "isnodelist-with-difference-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05bf3a21fa1e1f1aad06",
    "number": 2163,
    "body": null,
    "head_branch": "mapObject",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05bf3a21fa1e1f1aad07",
    "number": 2162,
    "body": "Mismatch with code. And some docs seem to be misplaced.\n",
    "head_branch": "fix_un/zip_doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c03a21fa1e1f1aad08",
    "number": 2161,
    "body": "`_.result({foo: undefined}, 'foo', 'bar') //bar`\n\nThe behavior described in the _.result docs specifies that the defaultValue (if provided) will be returned if an objects property does not exists. Though the implementation will also return the default value when the property exists but has the value `undefined`. Changed docs to reflect this.\n",
    "head_branch": "result-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 44ffba98b2829c0f0e02dbeb9d80edfae30e04f4 into fcefad85925814c6e9e76408ae75631f24318dbb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c13a21fa1e1f1aad09",
    "number": 2160,
    "body": "_.unzip accepts a single array of arrays.\n\nAs smartmuki found in github issue #2159. \n",
    "head_branch": "homepage_typo_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c23a21fa1e1f1aad0a",
    "number": 2158,
    "body": "This makes `_.sample` more efficient by re-implementing `_.shuffle`'s  logic and exiting early when enough elements are found. The speedup to the previous method of shuffling the whole input is especially large when the input is a long array and only a few sample elements are required. \n\nIt is safe to exit a Fisher-Yates shuffle early: http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Comparison_with_other_shuffling_algorithms\n\nThere are two alternatives to the way I implemented it which would require either factoring the main `_.shuffle` logic out into a private function and using it in both `_.sample` and `_.shuffle` or adding an internal parameter to `_.shuffle` that limits the result to a certain number, thus making `_.shuffle` even more similar to `_.sample`. Please let me know if any of those two options are preferred over the one I have here.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 42b763e42873f630d1d0facd285ca7e9ad985110 into 4e2d94d63ae8074da234af2258c1fae5106996ae"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c33a21fa1e1f1aad0b",
    "number": 2155,
    "body": "From my experience using underscore template. Adding advice on how to sanitize your template usage against cross-site scripting vulnerability.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c43a21fa1e1f1aad0c",
    "number": 2154,
    "body": "Hi there\nI wonder if we can use native defer when run on environment that has Promise interface available?\nTake advantage from browser optimized task queue.\n",
    "head_branch": "feature/native-defer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c53a21fa1e1f1aad0d",
    "number": 2153,
    "body": " fixes #2152\n",
    "head_branch": "global",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c63a21fa1e1f1aad0e",
    "number": 2146,
    "body": "One of my use cases is to flatten some deeply nested arrays. Then I studied the code of that function, and found it is using recursive method. So this code change attempt is to change it to iterative way.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c73a21fa1e1f1aad0f",
    "number": 2143,
    "body": "I copied .gitignore as .npmignore and added a few development files and folders to be excluded from the npm package as they're unnecessary. Also removed node_modules as it's unnecessary as per npm's documentation.\n",
    "head_branch": "npmignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c83a21fa1e1f1aad10",
    "number": 2142,
    "body": "http://jsperf.com/min-max-code-sharing\n\nThere's a hit on arrays without an iteratee. Looking into speeding that up, but everything else is faster.\n",
    "head_branch": "combine-min-max",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c93a21fa1e1f1aad11",
    "number": 2141,
    "body": "Closes #1996, supercedes #2005.\n",
    "head_branch": "bindall-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05c93a21fa1e1f1aad12",
    "number": 2140,
    "body": "`_.restParam` is the equivalent of ES6's rest parameter. It's particularly useful as an alternative to `slice.call(arguments, index)` (numerous examples in this PR), and it's a reusable, very fast version of inline for-loop slicing, eg. https://github.com/jashkenas/backbone/pull/3489.\n\n``` javascript\nvar test = function(a, b, ...args) {\n   console.log(arguments);\n}\n\ntest(1, 2, 3, 4, 5); // => [1, 2, [3, 4, 5]]\n\nvar test = _.restParam(function(a, b, args) {\n   console.log(arguments);\n});\n\ntest(1, 2, 3, 4, 5); // => [1, 2, [3, 4, 5]]\n```\n",
    "head_branch": "restParams",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 3caa2b453fa48bf9448f39fcbb2410e0bf368f90 into 0a9d9d86f21b29bc4ed582fcad734aadf8c7dabb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ca3a21fa1e1f1aad13",
    "number": 2138,
    "body": "- Moves createAssigner to just above where it's needed.\n- Use function expressions, not declarations.\n",
    "head_branch": "code-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05cb3a21fa1e1f1aad14",
    "number": 2137,
    "body": "Fixes https://github.com/jashkenas/underscore/issues/1594\n#2060...\n",
    "head_branch": "partion-group",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05cc3a21fa1e1f1aad15",
    "number": 2135,
    "body": "npm@2.7 borked `0.8`\n\nhttps://github.com/jridgewell/underscore/commit/1178042deed761476c22cfae0cf0bae97fd198d7\n#2134\n",
    "head_branch": "travis-npm-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05cd3a21fa1e1f1aad16",
    "number": 2134,
    "body": "Given Closure Compiler’s [need to inline](https://github.com/jashkenas/underscore/pull/2094#issuecomment-88636347),\nwe need to grab the length using a function (that uses dynamic property access).\n\n@megawac also pointed out a few other methods would be affected.\n",
    "head_branch": "ios-jit-isArrayLike",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ce3a21fa1e1f1aad17",
    "number": 2127,
    "body": "Files that are useless within bower package should be removed from it.\n",
    "head_branch": "clean_bower_package",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05cf3a21fa1e1f1aad18",
    "number": 2124,
    "body": "Cross posting from lodash/lodash#1072. We already have `_.negate` for negating predicate functions, how about adding something similar to `and` and `or` logic for composing predicate functions. This would allow pretty nifty filtering like:\n\n``` javascript\n_.filter(array, _.allPass(_.isObject, _.negate(_.isArray))); // #2123\n```\n",
    "head_branch": "composite-predicates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d03a21fa1e1f1aad19",
    "number": 2122,
    "body": "@megawac / @jdalton noticed a [pref regression](http://jsperf.com/indexof-pr2105) in #2105. This should fix it.\n\n[jsperf](http://jsperf.com/indexof-pr2105/3)\n",
    "head_branch": "indexOf-lastIndexOf-code-sharing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d13a21fa1e1f1aad1a",
    "number": 2120,
    "body": "",
    "head_branch": "uniq-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d23a21fa1e1f1aad1b",
    "number": 2116,
    "body": "After noticing that `_.isEmpty` fails in WebKit (Chrome/Safari) due to `Object.keys(emptyNodeList)` returning `length` as a key I added a failing test and implemented a fix which checks if the object has `length` implemented as a final check before trying `keys` as I'm assuming that if length is available it should be used regardless of the type of object it is.\n\nPlease consider it.\n\nThanks.\n",
    "head_branch": "nodelist-isempty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d23a21fa1e1f1aad1c",
    "number": 2109,
    "body": "Ok, maybe one more PR... Noticed this one from #2100.\n\nGuards `_.contains`’s `fromIndex`, so that it may be easily used with `_.partial`.\n\n``` javascript\nvar array = [1, 2, 3, 4, 5];\nvar subArray = [1, 2];\n\n// Before\n_.every(subArray, function(i) { return _.contains(array, i); });\n_.every(subArray, _.partial(_.contains, array, _, 0));\n// After\n_.every(subArray, _.partial(_.contains, array));\n```\n\nRe: #2046, #1962\n",
    "head_branch": "contains-gaurd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d33a21fa1e1f1aad1d",
    "number": 2108,
    "body": "Rounding out my PRs for today: An alternative implementation of https://github.com/jashkenas/underscore/pull/2099, using a Map shim. [Performs](http://jsperf.com/underscore-uniq-hash-table-lookup/7) just as well, but simplifies `_.uniq` instead of making it more complex.\n\nThis also [paves the way](https://github.com/jashkenas/underscore/compare/master...jridgewell:maps-memoize?expand=1) for using a Map in `_.memoize` (#1862).\n",
    "head_branch": "maps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d43a21fa1e1f1aad1e",
    "number": 2107,
    "body": "Prevents an [arguments deopt](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#31-reassigning-a-defined-parameter-while-also-mentioning-arguments-in-the-body-typical-example).\n\nhttp://jsperf.com/range-optimization\n",
    "head_branch": "range-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d53a21fa1e1f1aad1f",
    "number": 2106,
    "body": "Closes https://github.com/jashkenas/underscore/issues/1882.\n",
    "head_branch": "sortedLastIndex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d63a21fa1e1f1aad20",
    "number": 2105,
    "body": "Exactly what the name implies: removes the duplication.\n",
    "head_branch": "indexOf-lastIndexOf-code-sharing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9249add7c3b94a9cf15e0fd282bf00edff57ba94 into 25bec469c2413cc9c9213a1597df6fb9d08f2157"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d73a21fa1e1f1aad21",
    "number": 2103,
    "body": "Slight breaking change from 1.8.0. Prioritizes finding `NaN` over using a sorted search.\n\nThis may not be a good change, since using `isSorted` is only defined to find matches if the array is actually sorted. Before this change, `[1, 5, 2, NaN]` wouldn't find `NaN` (if it were `===`), but afterwards it would.\n",
    "head_branch": "indexof-nan-sorted",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d83a21fa1e1f1aad22",
    "number": 2102,
    "body": "Was returning the index in the sliced array\n",
    "head_branch": "indexof-nan-start",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05d93a21fa1e1f1aad23",
    "number": 2100,
    "body": "`contains` does not currently work with arrays (https://github.com/jashkenas/underscore/issues/1615) and the current workarounds for this aren't very readable.\n\nThis PR adds two methods for testing whether a collection includes all or any values from another collection.\n\n``` javascript\n_.containsAll([1, 2, 3], [1, 3]); //=> true\n_.containsAll([1, 2, 3], [1, 4]); //=> false\n\n_.containsAny([1, 2, 3], [1, 4]); //=> true\n_.containsAny([1, 2, 3], [4, 5]); //=> false\n```\n",
    "head_branch": "contains-all-any",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05da3a21fa1e1f1aad24",
    "number": 2099,
    "body": "... types.\n\nIt is now works 200 times faster on my macbook air on an unsorted array with primitive data types.\n\nI used these tests with 1000000 elements to measure perfomance:\n\nfunction testSpeed(n){\n    var tarr = [];\n\n```\nfor(var i = 0; i<=n; i++){\n    tarr.push(Math.floor(Math.random()*10000));\n}\n\nvar startTime = Date.now();\n_.uniq(tarr);\n\nconsole.log(\"Ended by:\", Date.now()-startTime);\n```\n\n}\n\nfunction testSpeedIter(n){\n    var tarr = [];\n\n```\nfor(var i = 0; i<=n; i++){\n    tarr.push(Math.floor(Math.random()*10000));\n}\n\nvar iter = function(v, i, array){\n    return v+\"some\";\n}\n\nvar startTime = Date.now();\n\n_.uniq(tarr, iter);\n\nconsole.log(\"Ended by:\", Date.now()-startTime);\n```\n\n}\n",
    "head_branch": "uniq_speedup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05db3a21fa1e1f1aad25",
    "number": 2097,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05dc3a21fa1e1f1aad26",
    "number": 2094,
    "body": "Fixes #2081. Special cases with `_.isArray`, since it’s so damn fast and engines [really dislike](http://jsperf.com/ios-jit-isarraylike/5) doing `'length' in array`.\n\n[jsperf](https://jsperf.com/ios-jit-isarraylike/2), and with [longer collections](http://jsperf.com/ios-jit-isarraylike/3).\n",
    "head_branch": "ios-jit-isArrayLike",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05dd3a21fa1e1f1aad27",
    "number": 2093,
    "body": "speed up the bisect like crossfilter has done\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05de3a21fa1e1f1aad28",
    "number": 2091,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05df3a21fa1e1f1aad29",
    "number": 2089,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e03a21fa1e1f1aad2a",
    "number": 2088,
    "body": "See #2081.\n\nThe new test fails only on ios. The count is 4 instead of 3.\n",
    "head_branch": "ios8_my_lovely_jit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cebf284f0113e66b7de0d376fc20b74fc5715c1c into 044ba5c3502dfac26c1a863a62c518b91e2a255d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e03a21fa1e1f1aad2b",
    "number": 2084,
    "body": "Uses underscore to make _.intersection shorter and more understandable.\n",
    "head_branch": "refactor_intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e13a21fa1e1f1aad2c",
    "number": 2079,
    "body": "before: \n\n```\n_.size(0) //undefined\n_.size(1) //0\n```\n\nafter:\n\n```\n_.size(0) //0\n_.size(1) //0\n```\n\nThere are probably other methods that are broken for the value `0` but `_.size` is how I discovered the bug.\n",
    "head_branch": "isArrayLike-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7770a2113b726b0ae7123c42913e37cfbfc4fc57 into 19db749b190a7cb5a8b7ab1aab42c0e9dc517250"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e23a21fa1e1f1aad2d",
    "number": 2077,
    "body": "Previously had mismatching keys from the example compared to its result.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e9e084e54c6e153e45894779d811b057d637aaba into bf8e5b585551dd8011037c7abb1cfd450dc06b71"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e33a21fa1e1f1aad2e",
    "number": 2076,
    "body": "Waiting to see if this works, works in my VM\n",
    "head_branch": "karma-ie",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e43a21fa1e1f1aad2f",
    "number": 2075,
    "body": "Another undiscussed removal.\n\nI’m not so hot on the `Ctor` conditional, or early breaking. But I [**want**](https://github.com/jashkenas/underscore/pull/2012#discussion_r23318181) this method.\n\nRe: https://github.com/jashkenas/underscore/pull/1901\nRe: https://github.com/jashkenas/underscore/issues/2061, 4f771e0\n",
    "head_branch": "transform",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e53a21fa1e1f1aad30",
    "number": 2074,
    "body": "Another undiscussed removal.\n\nRe: https://github.com/jashkenas/underscore/pull/1907\nRe: https://github.com/jashkenas/underscore/issues/2061, 4f771e0\n",
    "head_branch": "create",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e63a21fa1e1f1aad31",
    "number": 2073,
    "body": "For the record, I like `_.mapObject` better. But this change was undiscussed.\n\nRe: https://github.com/jashkenas/underscore/issues/2061, 4f771e0\n",
    "head_branch": "mapObject-mapValues",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e73a21fa1e1f1aad32",
    "number": 2072,
    "body": "Aligns with ES6’s `contains`.\n\nRe: https://github.com/jashkenas/underscore/pull/1962\nRe: https://github.com/jashkenas/underscore/issues/2061, 4f771e0\n",
    "head_branch": "contains-fromIndex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dcc983b8093943c8970e43073c6c209f413811e6 into 6dff42a71dfa17ca2b2a70a51607bccc5c497ed8"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e83a21fa1e1f1aad33",
    "number": 2071,
    "body": "I’m only mad because it wasn’t discussed. And, I think `_.keysIn` is a better name, in part because of your [own argument](https://github.com/jashkenas/underscore/commit/4f771e0a04e8b071b4857e8e8da13fcb79c5c0d5#commitcomment-9833268).\n\nRe: https://github.com/jashkenas/underscore/issues/2061, 4f771e0\n",
    "head_branch": "keysIn-allKeys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05e93a21fa1e1f1aad34",
    "number": 2070,
    "body": "“assign” is an ES6 standard, and naming should match it. Any dev who remotely follows ES will immediately recognize and understand what it does.\n\nAliases `_.assign` to `_.extendOwn`, for 1.8.0 compatibility.\n\nRe: https://github.com/jashkenas/underscore/issues/2061, 4f771e0\n",
    "head_branch": "assign-extendOwn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 416b502b2b05c98ee41283bbb27fb7fe2b1641cf into b2efe7a2a33bd790947aa5a751d917645d4a4690"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ea3a21fa1e1f1aad35",
    "number": 2069,
    "body": "This was causing me to lose my sanity with the sauce tests\n",
    "head_branch": "qunit-extras",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a72b11fc12ad44e7fcf008e4e6b5b1b35b112524 into 3c2204c9ebab33f9da09ada8da41785e172cf02f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661e05eb3a21fa1e1f1aad36",
    "number": 2068,
    "body": "[Arguments Deopt](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#31-reassigning-a-defined-parameter-while-also-mentioning-arguments-in-the-body-typical-example), [jsperf](http://jsperf.com/underscore-1639/6)\n\nSmall refinement on last night's https://github.com/jashkenas/underscore/pull/2065.\n",
    "head_branch": "refine-pick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 557b7e549a80d3ecb0bf22969858f32ccf78d32a into 1669e077b8e9f41200750f0cfec697dfb75f14d3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ec3a21fa1e1f1aad37",
    "number": 2066,
    "body": "",
    "head_branch": "ie-non-enumerable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 49a07e298e4d607e47565db42dce2bf279727c59 into 053e468ca97f1bd0fc1e9c1eeb10a0d240d15532"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ec3a21fa1e1f1aad38",
    "number": 2065,
    "body": "Not sure how this’ll do performance wise. I’ll write a jsperf tomorrow.\n",
    "head_branch": "refine-pick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b47c21a68d8a2a8d2842512d7841c92a73dc6735 into 3abc3c9a79bfab655c135c062cdcc60288f84e86"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ed3a21fa1e1f1aad39",
    "number": 2064,
    "body": "I’m not sure what we were doing before with the `FuncProto`…\n\n@jdalton: mind giving this a review?\n",
    "head_branch": "ie-non-enumerable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5bfd4f9ddcf2768cedf56fb2fe621caae7833f76 into 4a48803d08e748fe185795b88f35a032ceab1f94"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ee3a21fa1e1f1aad3a",
    "number": 2063,
    "body": "Because old IE is just silly, sometimes.\n",
    "head_branch": "ie8-bound-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ef3a21fa1e1f1aad3b",
    "number": 2059,
    "body": "TODOs in subsequent pull requests:\n- [ ] run tests on IE6,7,8 (currently unsupported by Karma)\n- [ ] clean up the travis file (develop a karma plugin to limit how many browsers they start at a single time, they have no interest in limiting based on IRC chats)\n\nThis is a continuation and resolves #1835 \n\n**Do not merge until travis passes** (I'll work on this again tongiht)\n",
    "head_branch": "sauce-setup",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 965f45b1c3d642751eaa3043b55fb767730304e7 into 26bb970db8ef5f5c2e921465d57eb981dcfc2972"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f03a21fa1e1f1aad3c",
    "number": 2057,
    "body": "This takes `_.matches` and turns it into a proper Object Function (takes the object as the first parameter). This should satisfy the performance problems seen in [jashkenas/backbone#3487](https://github.com/jashkenas/backbone/pull/3487#issuecomment-75001423).\n\nI think it’s pretty apparent we jumbled the arguments originally. See the need to special case [`Backbone.Model#matches`](https://github.com/jashkenas/backbone/blob/master/backbone.js#L390-L393) instead of auto proxying like the other [`_` methods](https://github.com/jashkenas/backbone/blob/master/backbone.js#L669-L680). We even have to special case [`Collection#matches`](https://github.com/jashkenas/backbone/blob/master/backbone.js#L917-L924) so we don’t kill performance doing simple `where`s.\n\nThe legacy `_.matches(obj)` predicate matcher has been extracted into `_.matcher`. `_.matches` will return the predicate matcher if only one argument is provided. This legacy support should be removed in v2.0.\n",
    "head_branch": "matches-matcher",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f13a21fa1e1f1aad3d",
    "number": 2056,
    "body": "This pull request will make the following replacements:\n\n| old | new |\n| --- | --- |\n| &#x00b6; | &#x00a7; |\n| `&#182;` | `&#167;` |\n| `.pilcrow` | `.ss` |\n| `.pilwrap` | `.sswrap` |\n| `class=\"pilcrow\"` | `class=\"ss\"` |\n| `class=\"pilwrap \"` | `class=\"sswrap \"` |\n\nNote: Should use Unicode hex instead of decimal: `&#182;` should be `&#x00b6;` and `&#167;`should be `&#x00a7;`, but that is another issue.\n",
    "head_branch": "pilcrow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f23a21fa1e1f1aad3e",
    "number": 2054,
    "body": "This makes the node tests the default instead of headless mode and uses karma to run the phantomjs/whatever browser tests\n\nAdded a package.json script `npm run test-browser` to run phantomjs tests, otherwise just lints and runs the suite in node. `Travis` will still run the tests in phantom + firefox\n\nWork up to #1835 (hopefully)\n",
    "head_branch": "karma",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 88579d41200353297e1384b0292a12ad86a48c77 into 720da5929c5f2516db641a49d80793d28b21a4c2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f33a21fa1e1f1aad3f",
    "number": 2053,
    "body": "",
    "head_branch": "length-testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4698d98c84a94f4698ee5e64ebaa26cdfd8627a7 into d2eff67d9490fed68776e8ed794c6155e8b4341a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f43a21fa1e1f1aad40",
    "number": 2050,
    "body": "Patch for issue #1583 - _.intersection should work with arrays regardless of if the first arg is an array.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f53a21fa1e1f1aad41",
    "number": 2049,
    "body": "WIP: alternative to #1758  and https://github.com/jashkenas/backbone/pull/3489\n",
    "head_branch": "reset",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f63a21fa1e1f1aad42",
    "number": 2048,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 40860a16cb419a2343c7aa1c9992a7e60dd736a1 into a7763864760c637859e587f93b5236271fc9cfbb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f73a21fa1e1f1aad43",
    "number": 2044,
    "body": "I have changed `_.matches` to only match properties which are declared\ndirectly on the object being passed to the predicate function generated\nby `_.matches`.\n\nI have accomplished this by testing the property on the object passed in\nusing the method `hasOwnProperty` method instead of the `in` operator.\n\nI have included specs to demonstrate how this functionality works and\nwhen it should return `true` or `false`.\n",
    "head_branch": "matches-uses-own-property",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f83a21fa1e1f1aad44",
    "number": 2043,
    "body": "Certain underscore methods can be used as iteratee's to _.map. These\nmethods can be referred to as 'Guarded' methods. In pull request #2036 I\nhave requested that this functionality be included in the documentation\nfor _.map on index.html. I am following up with that pull request with\nthis one, which includes documentation that states exactly which methods\nare guarded methods.\n\nI am attempting to inform other Underscore developers of this great\nfunctionality by marking appropriate functions as \"Guarded\" within\nindex.html. This \"Guarded\" statement uses the same CSS stylings as\nspan.alias.\n\nNothing has been changed besides the appropriate documentation shifts\ndescribed above. Screenshots will be included in pull request.\n\n![screen shot 2015-02-09 at 11 10 47 am](https://cloud.githubusercontent.com/assets/5640348/6113733/4918811a-b04e-11e4-8f9f-9f5228a10aac.png)\n![screen shot 2015-02-09 at 11 11 23 am](https://cloud.githubusercontent.com/assets/5640348/6113734/491e48f2-b04e-11e4-845f-0a7a9b100a88.png)\n![screen shot 2015-02-09 at 11 11 34 am](https://cloud.githubusercontent.com/assets/5640348/6113735/49249572-b04e-11e4-850e-8cb0b7c6f227.png)\n",
    "head_branch": "add-guarded-statements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 205b795d7a5f2f272452069f8b3f43ab7ccf17a8 into 7d21ae95b741f297680856017af47078883e461b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05f93a21fa1e1f1aad45",
    "number": 2042,
    "body": "Changed _.sortedIndex function to hangle undefined values correctly (FIXES: https://github.com/jashkenas/underscore/issues/1834 )\n\nRevised previous pull request: https://github.com/jashkenas/underscore/pull/2041\n\nPreviously \n\n``` javascript\nif (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n```\n\nChanged it to:\n\n``` javascript\nvar cur = iteratee(array[mid]);\nif ( cur < value || (value === void 0 && cur <= Infinity) || (_.isNaN(value) && (cur <= Infinity || cur === void 0))) low = mid + 1; else high = mid;\n```\n\nThe logic works because Undefined should be placed after the highest number possible + 1.\n\n``` javascript\n(iteratee(array[mid]) <= Inifinity)\n// will always place undefined after the highest number, including Inifinity ( `<=` ).\n```\n\nBased on @jdalton request in https://github.com/jashkenas/underscore/pull/2041#issuecomment-73538789 I added `NaN` to always be placed after undefined.\nBased off of https://github.com/jashkenas/underscore/issues/1768#issuecomment-53900794 \n\n``` javascript\n(_.isNaN(value) && (cur <= Infinity || cur === void 0)\n```\n\nThe code aboves logic checks to see if the value is NaN, if it is go past `Infinity` or `undefined`.\n\n``` javascript\n\n_.sortedIndex([ 0, 10, 1000, undefined, NaN, NaN], undefined);\n// => 3\n\n_.sortedIndex([ 0, 10, 1000, undefined, NaN, NaN], NaN);\n// => 4\n```\n\nSo that how I built:\n\n``` javascript\nvar cur = iteratee(array[mid]);\nif ( cur < value || (value === void 0 && cur <= Infinity) || (_.isNaN(value) && (cur <= Infinity || cur === void 0))) low = mid + 1; else high = mid;\n```\n\nSince no numeric value can be greater than Infinity, it will place undefined values to the correct index.\nAnd it will place all NaN past `Infinity` or `undefined`.\n\nAlso added edgeCaseTests, to verify it works:\n\n``` javascript\ntest('sortedIndex conforms to sortBy for undefined (#1834)', function() {\n    var sorted = _.sortBy([undefined, 1, undefined, 2]);\n    equal(_.sortedIndex(sorted, undefined, _.identity), 2);\n\n    var edgeCaseNumbers = [-Infinity, -Infinity, 0, Number.MAX_VALUE, Infinity, Infinity, undefined, undefined, NaN];\n\n    var indexForUndefined = _.sortedIndex(edgeCaseNumbers, undefined);\n    equal(indexForUndefined, 6, 'undefined should be inserted at index 6');\n\n    var indexForNegInfinity = _.sortedIndex(edgeCaseNumbers, -Infinity);\n    equal(indexForNegInfinity, 0, 'negative infinity should be inserted at index 0');\n\n    var indexForInfinity = _.sortedIndex(edgeCaseNumbers, Infinity);\n    equal(indexForInfinity, 4, 'infinity should be inserted at index 4');\n\n    var indexForZero = _.sortedIndex(edgeCaseNumbers, 0);\n    equal(indexForZero, 2, '0 should be inserted at index 2');\n\n    var indexForNaN = _.sortedIndex(edgeCaseNumbers, NaN);\n    equal(indexForNaN, 8, 'NaN should be inserted at index 8');\n\n    var numbers = [10, 20, 30, 40, 50];\n\n    var indexForUndefinedSimple = _.sortedIndex(numbers, undefined);\n    equal(indexForUndefinedSimple, 5, 'undefined should be inserted at index 5');\n  });\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05fa3a21fa1e1f1aad46",
    "number": 2041,
    "body": "Changed _.sortedIndex function to hangle undefined values correctly (FIXES: https://github.com/jashkenas/underscore/issues/1834 )\n\nPreviously \n\n``` javascript\n  if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n```\n\nChanged it to:\n\n``` javascript\nvar cur = iteratee(array[mid]);\nif ( cur < value || (value === void 0 && cur <= Infinity || _.isNaN(cur))) low = mid + 1; else high = mid;\n```\n\nThe logic works because Undefined should be placed after the highest number possible + 1.\n\n(iteratee(array[mid]) <= Inifinity) // will always place undefined after the highest number, including Inifinity.\n\nI also added in a check to see if the iteratee(array[mid]) was NaN, so NaN has a chance of stopping it.\n\n``` javascript\n_.sortBy([undefined, 10, 1000, 0, NaN, NaN]);\n// => [ 0, 10, 1000, NaN, NaN, undefined ]\n\n_.sortedIndex([ 0, 10, 1000, NaN, NaN, undefined ], undefined);\n// => 5\n```\n\nwithout `|| _.isNaN(cur)`\n\n``` javascript\n_.sortedIndex([ 0, 10, 1000, NaN, NaN, undefined ], undefined);\n// => 3\n```\n\nSo that how I built \n\n``` javascript\nvar cur = iteratee(array[mid]);\nif ( cur < value || (value === void 0 && cur <= Infinity)) low = mid + 1; else high = mid;\n```\n\nSince no numeric value can be greater than Infinity, it will place undefined values to the correct index.\n\nAlso added edgeCaseTests, to verify it works:\n\n``` javascript\ntest('sortedIndex conforms to sortBy for undefined (#1834)', function() {\n    var sorted = _([{a: NaN}, {a: NaN}, {a: void 0}, {a: 0}, {a: 1}, {a: 2}, {a: 3}])\n                  .sortBy('a');\n    _.each([0, 1, 2, 3, undefined], function(val) {\n      equal(_.sortedIndex(sorted, {a: val}, 'a'), _.findIndex(sorted, {a: val}), 'For val: ' + val);\n    });\n\n    sorted = _.sortBy([undefined, 1, undefined, 2]);\n    equal(_.sortedIndex(sorted, undefined, _.identity), 2);\n\n    var edgeCaseNumbers = [-Infinity, -Infinity, 0, Number.MAX_VALUE, Infinity, Infinity, undefined, undefined];\n\n    var indexForUndefined = _.sortedIndex(edgeCaseNumbers, undefined);\n    equal(indexForUndefined, 6, 'undefined should be inserted at index 6');\n\n    var indexForNegInfinity = _.sortedIndex(edgeCaseNumbers, -Infinity);\n    equal(indexForNegInfinity, 0, 'negative infinity should be inserted at index 0');\n\n    var indexForInfinity = _.sortedIndex(edgeCaseNumbers, Infinity);\n    equal(indexForInfinity, 4, 'infinity should be inserted at index 4');\n\n    var indexForZero = _.sortedIndex(edgeCaseNumbers, 0);\n    equal(indexForZero, 2, '0 should be inserted at index 2');\n\n    var numbers = [10, 20, 30, 40];\n\n    var indexForUndefinedSimple = _.sortedIndex(numbers, undefined);\n    equal(indexForUndefinedSimple, 5, 'undefined should be inserted at index 5');\n  });\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05fb3a21fa1e1f1aad47",
    "number": 2039,
    "body": "Currently, mapping over a nested array and using _.max or _.min produces unexpected results. \n![infinity](https://cloud.githubusercontent.com/assets/5640348/6101277/3c2170d4-afd6-11e4-8b25-cd6e6a0d4276.png)\n\nThis occurs because when _.max or _.min is passed into _.map, the internal function optimizeCb attempts to account for the fact that _.max and _.min have multiple arguments by trying to pass an index value into them. This creates a misalignment between the parameters being passed into _.max and _.min and the parameters they are actually expecting. _.max and _.min expect an iteratee to be passed in as a second argument, but instead _.map is passing an index. \n\nThe result of this arguments mismatch makes _.min and _.max fail the following conditional which checks to see if an iteratee was passed.\n![screen shot 2015-02-08 at 9 10 57 pm](https://cloud.githubusercontent.com/assets/5640348/6101333/3a8ada48-afd7-11e4-90e1-253685872050.png)\n\nI have corrected the above conditional by including a following check to ignore the iteratee if it is a number:\n![works](https://cloud.githubusercontent.com/assets/5640348/6101347/90681da4-afd7-11e4-9fb3-5a4964c3f668.png)\n\nThis additional conditional makes _.min and _.max produce the expected results with no side effects to their normal behavior. Nothing else has been changed and tests have been added to verify the code I have added is indeed valid and does not disrupt anything.\n",
    "head_branch": "MaxMin-mapping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05fc3a21fa1e1f1aad48",
    "number": 2038,
    "body": "The preceding sentences at lines 261 and 262 have periods to indicate the end of the statement. The end of the sentence at line 263 doesn't end with a period, as does every other sentence in the document that is commented out.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05fd3a21fa1e1f1aad49",
    "number": 2036,
    "body": "I am a regular user of Underscore and only after reading through the Underscore source code did I learn about _.map being able to handle guarded functions as iteratees. If I have been unaware of guarded functions while using Underscore regularly then chances are there are many other engineers who are equally unaware of this great functionality.\n\nBelow is a screen shot of the annotated _.map function documentation in index.html. No other changes have been made besides this. \n\n![screen shot 2015-02-08 at 7 47 20 pm](https://cloud.githubusercontent.com/assets/5640348/6100801/a98894dc-afcb-11e4-8cc8-ff8272402ec5.png)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 52322f888b59e4fe6830051ed37de05fd7a66502 into 7d21ae95b741f297680856017af47078883e461b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05fe3a21fa1e1f1aad4a",
    "number": 2035,
    "body": "I have updated the documentation for _.range to clarify explicitly that the end value _.range accepts is exclusive and the start value is inclusive. Attached is a screen shot of the changes:\n\n![screen shot 2015-02-08 at 5 27 13 pm](https://cloud.githubusercontent.com/assets/5640348/6099882/103aa372-afb9-11e4-9b12-841b2bb026df.png)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0a4c397639fb343b2d9ea54e040e03ce6cacdc86 into b4a04a56c0a4ac129a7d299e9313c161e74ed7fa"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05fe3a21fa1e1f1aad4b",
    "number": 2034,
    "body": "Updated the copyright from `2014` to be `2015`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b453daad7afcb6470ff6ea91903cadebccd75a6f into 2855f5b48f79c9674ce599e9edf1090299ebce2a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e05ff3a21fa1e1f1aad4c",
    "number": 2033,
    "body": "",
    "head_branch": "node-testing",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 2646f2eaaa3a1b6511051b5e0c461bcaf238e778 into e757a444a08fecba5ed51782b9109c4319a7d367"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06003a21fa1e1f1aad4d",
    "number": 2032,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4d948cc591fa940b20d3ba3aa8d4731b6d523819 into e6176df1401dbe58a47f6f9cb49d184a9cb5e31c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06013a21fa1e1f1aad4e",
    "number": 2031,
    "body": "Where they are handled implicitly by other underscore methods. I'd say this makes the source of a number of these functions quite a bit nicer.\n",
    "head_branch": "null-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06023a21fa1e1f1aad4f",
    "number": 2030,
    "body": "I could go either way on this one but lets make variable declarations a bit more consistent\n",
    "head_branch": "var-dec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e25a592de139ea4ae8582c7545776c780793f7d4 into 58113cf08ce27fe4cc94a969c18c75f3d340db54"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06033a21fa1e1f1aad50",
    "number": 2029,
    "body": "so you can do stuff like this:\n\n``` js\n_.times(3, 'Foo') // ['Foo', 'Foo', 'Foo']\n```\n\nwhich can be useful for indenting text, for instance\n\n``` js\n_.times(level, '  ').join('') + line\n```\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06043a21fa1e1f1aad51",
    "number": 2024,
    "body": "`_.extend` was iterating over the original (destination) object, going through its 'in' properties on the prototype chain, and putting all of those properties on the destination object (making them 'own' properties). That shouldn't happen. This fix modifies the `createAssigner` internal function (currently used by `_.extend`, `_.assign`, and `_.defaults`) so that the function it returns does not iterate over the destination object itself at all. Iterating over the original object seems unnecessary for any of the methods using createAssigner.\n\nA test is included that makes sure that `_.extend` does not commit the aforementioned offense anymore. \n",
    "head_branch": "extendFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 74ac635b0f718c822b8581d690f3f0eb92194c86 into e4c5c97fbe9a18fddd2697bc056ef7682b58dc68"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06053a21fa1e1f1aad52",
    "number": 2022,
    "body": "This commit expands the functionality of the `createAssigner` internal function so that it can be used by `_.defaults` in essentially the same way that it is already used by `_.extend` and `_.assign`. The expansion allows `createAssigner` to receive a second argument indicating whether or not the function that it returns should only assign properties and their values to a given object if the properties are undefined on that object. If `true` (or a truthy value) is passed as the value of that argument, the returned function does just that -- it only assigns properties to a given object if they are undefined on that object; otherwise, `createAssigner` returns a function that assigns properties whether they exist on the object or not (the default functionality). This modification allows `_.defaults` to enjoy the same fixes related to for-in loops as those enjoyed by `_.extend` and `_.assign`. \n\nSee discussion at #1984 for additional details.\n",
    "head_branch": "devel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06063a21fa1e1f1aad53",
    "number": 2021,
    "body": "http://jsperf.com/precompute-partial-placeholder/2\n",
    "head_branch": "map-partial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06073a21fa1e1f1aad54",
    "number": 2020,
    "body": "There's no reason to pay for the placeholder lookups every time.\n\nhttp://jsperf.com/precompute-partial-placeholder\n",
    "head_branch": "precompute-partial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06083a21fa1e1f1aad55",
    "number": 2017,
    "body": "Any better suggestions on a name?\n\nFixes #2009 \n\n/cc @ppalladino\n\nP.S. if there is interest in this ill clean up the implementation in a follow up pr\n",
    "head_branch": "breakif",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06093a21fa1e1f1aad56",
    "number": 2014,
    "body": "Added an example to sortBy for when you just want to specify a field to sort by.\n",
    "head_branch": "danielmbarlow-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e060a3a21fa1e1f1aad57",
    "number": 2013,
    "body": "no need for stacks if `a` and `b` can be compared by value\n",
    "head_branch": "isEqualFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e060b3a21fa1e1f1aad58",
    "number": 2012,
    "body": "# Here we go...\n\nPlease commit directly to this branch if you feel inclined, I'm going to be away for the rest of the day and travelling tomorrow\n\nTo dos:\n- [x] Doc `findIndex` #1587 \n- [ ] doc ``findKey` with example\n- [x] Document `_.findLastIndex` #1981 \n- [ ] Doc proxy methods https://github.com/jashkenas/underscore/pull/2003\n- [x] doc #1953 \n- [ ] doc #2029 \n\nPrereqs (can people take a look at these) before we can release:\n- [x] https://github.com/jashkenas/underscore/pull/1990\n- [x] **#1981**\n- [x] #1983, #1988 (requires #1990)\n\nPerhaps issues\n- [x] #1590 (add `forIn`?)\n- [ ] **#1965**\n- [x] **#1953**\n- [ ] #1919 \n- [ ] #1758\n- [x] #2003 \n- [ ] Revert #1994 or fix #2000\n\nReference:\nhttps://github.com/jashkenas/underscore/compare/1.7.0...master\n\nhttp://rawgit.com/jashkenas/underscore/1.8/index.html\n",
    "head_branch": "1.8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 73786c3cc3f520b32dcbd8c5bad357b5ef67a519 into 3d77868e73436c4202d4eb2b6c4c88bd2ff7df1b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e060b3a21fa1e1f1aad59",
    "number": 2010,
    "body": "and Gzipped\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e060c3a21fa1e1f1aad5a",
    "number": 2005,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e060d3a21fa1e1f1aad5b",
    "number": 2003,
    "body": "Fixes #1562 \n",
    "head_branch": "engine-proxy-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e060e3a21fa1e1f1aad5c",
    "number": 1999,
    "body": "I find myself doing this a lot. Its a simple addition but I think it would be a great convenience to have this.\n\nI didn't bother adding tests or building. I figured if you find this acceptable I can always add those.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e060f3a21fa1e1f1aad5d",
    "number": 1998,
    "body": "Adds some basic support to be able to do something like this:\n\n```\nvar obj = {foo: {bar: \"Hello\"}};\nconsole.assert(_.has(obj, 'foo.bar'));\nconsole.assert(!_.has(obj, 'foo.foo'));\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06103a21fa1e1f1aad5e",
    "number": 1995,
    "body": "Was dependent on https://github.com/jashkenas/underscore/pull/1939\n",
    "head_branch": "max-min-reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06113a21fa1e1f1aad5f",
    "number": 1994,
    "body": "This has been brought up before\n- https://github.com/jashkenas/underscore/pull/1520#issuecomment-37668674\n\nI often need to do an invoke where some items may or may not have a function defined (should this only check if its defined?). So I do something like\n\n``` js\nvar someCollection = [...];\n\n_.chain(someCollection).filter('update').invoke('update');\n```\n\nAnyway, this is consistent with the rest of the codebase if nothing else\n",
    "head_branch": "invoke-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06123a21fa1e1f1aad60",
    "number": 1993,
    "body": "As @jdalton noted a while ago https://github.com/jashkenas/underscore/pull/1806#discussion_r16799291 (though wasn't possible at the time until #1520 was merged)\n",
    "head_branch": "zip-via-unzip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06133a21fa1e1f1aad61",
    "number": 1991,
    "body": "The loops could be further abstracted, but I didn't like how it looked after going that far\n\nFixes #1734 \n",
    "head_branch": "reduce-reuse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06143a21fa1e1f1aad62",
    "number": 1990,
    "body": "Stuck in an airport today so going to get around to a couple of these things we really should get it\n\nAs discussed in https://github.com/jashkenas/underscore/issues/1590 and others. [Here's jdd's implementation for a reference](https://github.com/lodash/lodash/blob/master/lodash.js#L3646-3655), also as discussed in that thread it may make sense to check for a `splice`/`slice` function to  consider a method a true array in places like  `_.isEmpty`\n",
    "head_branch": "is-arraylike",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06153a21fa1e1f1aad63",
    "number": 1989,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06163a21fa1e1f1aad64",
    "number": 1988,
    "body": "This is an attempt to fix #1983 \n\nI tried reusing parts of _.keys that made sense to detect if an object was truly empty in IE < 9\n",
    "head_branch": "use-keys-fixes-for-isEmpty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06173a21fa1e1f1aad65",
    "number": 1987,
    "body": "While working on another PR, I noticed these warnings and thought it would be better to fix separately.\n\nBefore:\n\n```\n$ npm test\n\n> underscore@1.7.0 test /Users/max/Sites/underscore\n> phantomjs test/vendor/runner.js test/index.html?noglobals=true && eslint underscore.js test/*.js test/vendor/runner.js\n\nTook 6057ms to run 1119 tests. 1119 passed, 0 failed.\n\nunderscore.js\n   886:21  warning  Gratuitous parentheses around expression  no-extra-parens\n  1121:14  warning  Gratuitous parentheses around expression  no-extra-parens\n\ntest/collections.js\n  596:10  warning  ['true'] is better written in dot notation   dot-notation\n  597:10  warning  ['false'] is better written in dot notation  dot-notation\n  614:10  warning  ['true'] is better written in dot notation   dot-notation\n  615:10  warning  ['false'] is better written in dot notation  dot-notation\n\n✖ 6 problems\n```\n\nAfter:\n\n```\n$ npm test\n\n> underscore@1.7.0 test /Users/max/Sites/underscore\n> phantomjs test/vendor/runner.js test/index.html?noglobals=true && eslint underscore.js test/*.js test/vendor/runner.js\n\nTook 5973ms to run 1119 tests. 1119 passed, 0 failed.\n\ntest/collections.js\n  596:10  warning  ['true'] is better written in dot notation   dot-notation\n  597:10  warning  ['false'] is better written in dot notation  dot-notation\n  614:10  warning  ['true'] is better written in dot notation   dot-notation\n  615:10  warning  ['false'] is better written in dot notation  dot-notation\n\n✖ 4 problems\n```\n",
    "head_branch": "fix-warnings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06183a21fa1e1f1aad66",
    "number": 1982,
    "body": "Underscore package for meteor is available here: https://atmospherejs.com/meteor/underscore\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06193a21fa1e1f1aad67",
    "number": 1981,
    "body": "This fixes https://github.com/jashkenas/underscore/issues/1750 and adds a `_.findLastIndex` function\n",
    "head_branch": "NaN-finding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e061a3a21fa1e1f1aad68",
    "number": 1979,
    "body": "See #1957 \n",
    "head_branch": "clarify_after_documentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e061b3a21fa1e1f1aad69",
    "number": 1977,
    "body": "",
    "head_branch": "partial_defer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e061b3a21fa1e1f1aad6a",
    "number": 1975,
    "body": "`_.apply` calls some callback in an optimized way, useful in places such as [backbone.triggerEvents](https://github.com/jashkenas/backbone/blob/master/backbone.js#L247-253) and [metal apply](https://github.com/megawac/metal.js/commit/bd0e20db019fd05fc8508480ff28253fa848e44c)\n\nThis also will resolve https://github.com/jashkenas/underscore/pull/1965 and fix https://github.com/jashkenas/underscore/issues/1883\n\n(Related discussion from @jdalton https://github.com/codemix/fast.js/pull/50)\n\n(sorry about the branch messed up my remotes)\n",
    "head_branch": "apply",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e061c3a21fa1e1f1aad6b",
    "number": 1974,
    "body": "Just some testing refactors of #1936\n",
    "head_branch": "isFunction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e061d3a21fa1e1f1aad6c",
    "number": 1971,
    "body": "Hi.\nI've added a test case to `_.pluck()` function in order to ensure return values from it as the specification.\nIn my opinion, it is intuitive that `_.pluck(objs, key)` returns an empty array in the case when each element of `objs` doesn't have `key` as its property, but it would be better to avoid changing the behavior.\n",
    "head_branch": "feature/add-pluck-test-case",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e061e3a21fa1e1f1aad6d",
    "number": 1970,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e061f3a21fa1e1f1aad6e",
    "number": 1968,
    "body": "Closes https://github.com/jashkenas/underscore/issues/1576.\n",
    "head_branch": "error-function-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06203a21fa1e1f1aad6f",
    "number": 1967,
    "body": "I noticed a bit of an inconsistency with `_.flatten` on strings.\n\n``` javascript\n_.flatten('testing'); // => [\"t\", \"e\", \"s\", \"t\", \"i\", \"n\", \"g\"]\n_.flatten('testing', true); // => [\"t\", \"e\", \"s\", \"t\", \"i\", \"n\", \"g\"]\n_.flatten(['testing']); // => [\"testing\"]\n_.flatten(['testing'], true); // => [\"testing\"]\n```\n\nThis fixes it so flatten does not convert a string to its corresponding chars. Array-likes can now also be flattened, but that's more of a side-effect that can be removed from the PR if that's not wanted.\n",
    "head_branch": "flatten",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06213a21fa1e1f1aad70",
    "number": 1965,
    "body": "@jdalton [brought up](https://github.com/jashkenas/underscore/issues/1883#issuecomment-57821014) that unexposing `_.iteratee`'s' `argCount` disallows overriding `_.iteratee` to [customize the way collection functions iterate](https://github.com/jashkenas/underscore/issues/1883#issuecomment-57826279).\n",
    "head_branch": "customizable-iteratee",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06223a21fa1e1f1aad71",
    "number": 1964,
    "body": "Fixes #1915 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06233a21fa1e1f1aad72",
    "number": 1963,
    "body": "Invoke arguments weren't being covered\n",
    "head_branch": "invoke-cov",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06243a21fa1e1f1aad73",
    "number": 1962,
    "body": "Fixes #1960 \n",
    "head_branch": "from-contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06253a21fa1e1f1aad74",
    "number": 1961,
    "body": "Closes #1858.\n",
    "head_branch": "remove-reduce-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06263a21fa1e1f1aad75",
    "number": 1958,
    "body": "Suggested fix for Bug #1957\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06273a21fa1e1f1aad76",
    "number": 1955,
    "body": "Because ES6. If taken probably should address #1750 as well\n",
    "head_branch": "includes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06283a21fa1e1f1aad77",
    "number": 1954,
    "body": "fixes #1850\n",
    "head_branch": "fix-sorted-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06293a21fa1e1f1aad78",
    "number": 1953,
    "body": "This adds the `mapValues` methods.\n\nIt works exactly like `map`, but preserves the object.\n\n```\n_.map2({a: 1, b: 2}, function(val, key) {\n    return val * 2;\n});\n=> {a: 2, b: 4}\n```\n\nThere are at least three issues about this function (#220 #1867 #1887), and as I also do this frequently it would be awesome to get this into underscore.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e062a3a21fa1e1f1aad79",
    "number": 1950,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e062b3a21fa1e1f1aad7a",
    "number": 1946,
    "body": "They are everywhere now. Depends on the choice of dependency, one might be forced to face both at one.\n",
    "head_branch": "isPromise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e062c3a21fa1e1f1aad7b",
    "number": 1942,
    "body": "When chaining it would be useful to be able to pass the whole object through a function, kind of like _.tap except the value is replaced with the return of the function.\n\nImplementation is trivial and of course it doesn't make much sense when not chaining.\n\nAnyone think this is a good idea?\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e062d3a21fa1e1f1aad7c",
    "number": 1940,
    "body": "Changed in version 1.5.2\nRelated issue: #1189\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e062e3a21fa1e1f1aad7d",
    "number": 1939,
    "body": "Resolves #1768 and fixes #1834\n\nThis could use some review and thoughts\n",
    "head_branch": "comparitors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e062f3a21fa1e1f1aad7e",
    "number": 1937,
    "body": "fixes #1932 \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06303a21fa1e1f1aad7f",
    "number": 1936,
    "body": "Closes #1929.\n\n@jdalton: How did you test this? Seems PhantomJS doesn't play nicely with `typeof` or `toString.call` (returning `object` and `[object Int8ArrayConstructor]`).\n",
    "head_branch": "isFunction_safari_8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06313a21fa1e1f1aad80",
    "number": 1935,
    "body": "Currently forEach is checking to see if the object has a property length and that length is a number. I've changed it to use Array.isArray because an object could be assigned a property length that is a number, that does not represent the number of properties in the object itself. Under those circumstance the object (as a hash table) would be handled as an array.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06313a21fa1e1f1aad81",
    "number": 1934,
    "body": "Small refactor: this just gets rid of 2 variables and returns explicitly whenever we find out we're done.\n",
    "head_branch": "sans-result",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06323a21fa1e1f1aad82",
    "number": 1933,
    "body": "reintroduced utility belt imagery to intro paragraph, and made _.wrap() more explicit (hopefully).\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06333a21fa1e1f1aad83",
    "number": 1931,
    "body": "I added support for specifying a custom random generator function to random() and shuffle(). This is useful if you want to make functions that use these functions yield predictable results (by passing in a stable/predictable generator), without influencing other invocations of Math.random, and vice versa, without having other invocations of Math.random influence their result.\n",
    "head_branch": "custom-random",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06343a21fa1e1f1aad84",
    "number": 1927,
    "body": "`_.pluckWhere` is an alternate to `_.pluck` using a callback to determine whether to pluck a key and, if so, which key.  Useful for plucking diagonally across an array of arrays or for filtering plucked values\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06353a21fa1e1f1aad85",
    "number": 1926,
    "body": "_.each currently treats objects with an arbitrary and numerical \"length\" property as arrays and doesn't process them properly.\n\nFor example, {a: 1, b: 2, length: 4} will try to be iterated over as an array, which doesn't work.\n\nMy change ensures the \"length\" property used in _.each is used to describe the number of elements of the actual object. I added a test case for what I've described.\n",
    "head_branch": "each-fix-length-prop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06363a21fa1e1f1aad86",
    "number": 1924,
    "body": "Let's have underscore unescape &amp;#39; and &amp;#96; These are valid HTML entities for ' and ` symbols.\nAny browser works both with Dec and Hex representation of these symbols.\n\nThe issue is that Django web framework escapes ' and `  using Dec approach. And most probably other frameworks may do the same way.\n\nSo in such situation it's necessary to write some additional code which should probably be inside of the library.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06373a21fa1e1f1aad87",
    "number": 1923,
    "body": "Added a helper function _,skip that returns a new array skipping a\nspecified number of elements.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06383a21fa1e1f1aad88",
    "number": 1921,
    "body": "_.propertyOf method as discussed in https://github.com/jashkenas/underscore/issues/1916\n\nResolves #1916\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06393a21fa1e1f1aad89",
    "number": 1919,
    "body": "Fixes #1891 \n",
    "head_branch": "devel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e063a3a21fa1e1f1aad8a",
    "number": 1917,
    "body": "Addresses @jdalton in #1870. Doing a check for the array's length.\n",
    "head_branch": "avoid-returning-zero-truthy-isSorted",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e063b3a21fa1e1f1aad8b",
    "number": 1914,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e063c3a21fa1e1f1aad8c",
    "number": 1913,
    "body": "The `times <= 1` really bothered me, because it wasn't obvious why it was `1`.\n",
    "head_branch": "before_style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e063c3a21fa1e1f1aad8d",
    "number": 1911,
    "body": "I saw the issues [#148](https://github.com/jashkenas/underscore/issues/148), [#659](https://github.com/jashkenas/underscore/issues/659), [#937](https://github.com/jashkenas/underscore/issues/937), [#1590](https://github.com/jashkenas/underscore/issues/1590),\nif use 'obj.length === +obj.length' or 'obj.length !== +obj.length' to judge whether the object is an array or not, there will be two things not iterable.\n###### 1. Object which contains 'length' property with 'Number' type value\n\n```\nvar obj = { length:3,width:3,height:3 };\n_.reduce(obj, function(memo, value){ return memo + value; }); // NaN\n```\n###### 2. Objects with [object Function] type\n\n```\n// The value of [object Function]'s 'length' property is arguments' length, and it was unable to be modify.\nvar func1 = function(){}, func2 = function(a){}, func3 = function(a,b){};\nfunc1.one= func2.one = func3.one = 1, func1.two = func2.two  = func3.two = 2;\n_.reduce(func1, function(memo, value){ return memo + value; });  // TypeError: Reduce of empty array with no initial value\n_.reduce(func2, function(memo, value){ return memo + value; });  // return: undefined\n_.reduce(func3, function(memo, value){ return memo + value; });  // return: NaN\n_.each(func2, function(value){ console.log(value); });  // log on console: undefined\n_.each(func3, function(value){ console.log(value); });  // log on console: undefined undefined\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e063d3a21fa1e1f1aad8e",
    "number": 1910,
    "body": "[From this thread](https://github.com/jashkenas/underscore/pull/1907#discussion_r19319047).\n\n`_.keysIn` is the alternate to `_.keys` not just limited to own-properties, which can be useful internally and externally so people can create their own mixins.\n\nI only targeted the most common cases I could think of here. Hopefully @jdalton can shine some light on all the different edge cases Lodash's `_.keysIn` covers.\n",
    "head_branch": "keysIn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e063e3a21fa1e1f1aad8f",
    "number": 1908,
    "body": "@megawac [mentioned](https://github.com/jashkenas/underscore/pull/1907#discussion_r19318553) creating an alternative to `_.extend` but only adding own properties named `_.assign` to align with `Object.assign`. There wasn't an issue or pull request anywhere so here it is.\n\nSince the 2.0 plan is to align `_.extend` with ES6's `Object.assign`, I can imagine this would just become an alias to extend.\n\nI've created `baseAssign` here so that [other functions](https://github.com/jashkenas/underscore/pull/1907#discussion_r19317971) can take advantage of it. \n\nThis implementation is a slimmed down (albeit less-performant) version of the one seen in lodash. Thanks @jdalton.\n",
    "head_branch": "assign",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e063f3a21fa1e1f1aad90",
    "number": 1907,
    "body": "`_.create` is useful as both a \"polyfill\" for `Object.create` and a utility for simple prototype inheritance.\n\nImplementation is adapted from Lodash's `_.create` method. I've kept the `baseCreate` function for the usage in the methods @jdalton [mentioned here](https://github.com/jashkenas/underscore/pull/1901#issuecomment-60267844).\n\n``` js\nfunction Person(name, occupation) {\n  this.name = name;\n  this.occupation = occupation;\n}\n\nfunction Developer(name) {\n  Person.call(this, name, 'developer');\n}\n\nDeveloper.prototype = _.create(Person.prototype, {\n  constructor: Developer\n});\n\nvar developer = new Developer('Jeremy Ashkenas');\ndeveloper instanceof Developer;\n// >> true\n\ndeveloper instanceof Person;\n// >> true\n```\n\nRef: @jdalton https://github.com/jashkenas/underscore/pull/1901#issuecomment-60267844\n",
    "head_branch": "create",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06403a21fa1e1f1aad91",
    "number": 1906,
    "body": "",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06413a21fa1e1f1aad92",
    "number": 1903,
    "body": "small add to _.throttles function short documentation\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06423a21fa1e1f1aad93",
    "number": 1902,
    "body": "Currently broken for any function bound to a context. Unfortunately we restrict them to 3 arguments.\n",
    "head_branch": "iteratee-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06433a21fa1e1f1aad94",
    "number": 1901,
    "body": "`_.transform` is a useful alternative to `_.reduce` that calls the iterator with `accumulator` object each time and then returns it.\n\nThis is useful for creating new objects applying transformations of another object.\n\n``` js\n_.transform([1, 2, 3, 4], function(accumulator, value, index, original) {\n  arr[index] = value * 2;\n});\n// >> [2, 4, 6, 8];\n```\n\n``` js\n_.chain({ foo: 'foo', bar: 2, baz: 3 })\n .values()\n .filter(_.isNumber)\n .transform((arr, val, i) => arr[i] = val * 2)\n .value();\n// >> [4, 6];\n```\n\nThere was a [previous issue](https://github.com/jashkenas/underscore/pull/1112) on a similar function with the same name, however I think lodash has [fully fleshed](https://lodash.com/docs#transform) it out and is much more useful in this form.\n\nI've taken the lodash implementation and tried to make it consistent with some of underscore's behavior.\n- No Object.create for obj.constructor\n- Can't return false to exit\n\nRef: @megawac https://github.com/marionettejs/backbone.marionette/pull/2009#issuecomment-60128932\n",
    "head_branch": "transform",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06443a21fa1e1f1aad95",
    "number": 1900,
    "body": "Personally I think this is an oversight of #1515 and believe this is a complimentary case -- however, this is easy to get around if you disagree\n",
    "head_branch": "result-fallback-fn",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06453a21fa1e1f1aad96",
    "number": 1899,
    "body": "Addresses #1898.\n",
    "head_branch": "interpolate-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06463a21fa1e1f1aad97",
    "number": 1897,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06473a21fa1e1f1aad98",
    "number": 1895,
    "body": "`func` isn't released until the _before_ function is called n times, when it's possible to release it after n-1 times. Since `_.once` uses `_.before`, this means that a _onced_ function isn't released until the 2nd time you call it.\n",
    "head_branch": "fix-once-before-leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06473a21fa1e1f1aad99",
    "number": 1894,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06483a21fa1e1f1aad9a",
    "number": 1892,
    "body": "example: \n\n``` javascript\n_.extend({},{get foo() {return this.bar()}})\n```\n\nSince current implementation does direct assignment involving getter invocation, in the best case it'll assign result of getter function or like in example above will throw exception. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06493a21fa1e1f1aad9b",
    "number": 1888,
    "body": "It turns out the naïve raw `for ... in` loop is much faster than mucking with a sparse array and Object.keys (and should avoid looping over the object twice on older browsers with a shimmed `keys`)\n\nhttp://jsperf.com/values-extraction/4\nhttp://jsperf.com/underscore-vals\n",
    "head_branch": "faster-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e064a3a21fa1e1f1aad9c",
    "number": 1886,
    "body": "regarding: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e064b3a21fa1e1f1aad9d",
    "number": 1885,
    "body": "Generate a non-negative integers Array by decomposing non-negative\ninteger number **int** into **count** random integer terms.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e064c3a21fa1e1f1aad9e",
    "number": 1880,
    "body": "... in the sortby list.\n\nFixing sorting issue mentioned below :\n\nIf i have objects like these : \n`[{\"1\", 100}, {\"1\", 1}, {\"1\", 2}, {\"1\", 200}]`\nIf i sort the elements using both the columns then the result should be :\n`[{\"1\", 1}, {\"1\", 2}, {\"1\", 100}, {\"1\", 200}]`\nBut in the current code the result that is displayed is :\n`[{\"1\", 1}, {\"1\", 100}, {\"1\", 2}, {\"1\", 200}]`\n",
    "head_branch": "fixing-sort-issue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e064d3a21fa1e1f1aad9f",
    "number": 1877,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e064e3a21fa1e1f1aada0",
    "number": 1876,
    "body": "Doesn't seem like a performance regression but obviously still room for improvements\n\nhttp://jsperf.com/underscore-indexof-compare/2\n",
    "head_branch": "indexof-s",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e064f3a21fa1e1f1aada1",
    "number": 1868,
    "body": "",
    "head_branch": "uniq-contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06503a21fa1e1f1aada2",
    "number": 1867,
    "body": "Fixes #1866\n",
    "head_branch": "sorted-uniq-with-iteratee",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06513a21fa1e1f1aada3",
    "number": 1864,
    "body": "- [x] `_.*where` -> `_.matches`\n- [x] `iteratee` -> `_.iteratee`\n\n[**Rendered**](http://rawgit.com/megawac/underscore/iteratee-docv/index.html)\n",
    "head_branch": "iteratee-docv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06523a21fa1e1f1aada4",
    "number": 1863,
    "body": "Updated as per review in #1846.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06533a21fa1e1f1aada5",
    "number": 1861,
    "body": "npm had issues installing it today (on my machine at any rate)\n",
    "head_branch": "phantom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06543a21fa1e1f1aada6",
    "number": 1860,
    "body": "Can be a bit faster for when the address is any sort of non string. In that case `toString` is called 2-3 times on the object\n\nhttp://jsperf.com/memoizel/2\n",
    "head_branch": "memoize-lu",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06543a21fa1e1f1aada7",
    "number": 1854,
    "body": "i ran some javascript performance tests and while is definelty faster than for.\nin my test this change increased the _.each performance by 5-10%\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06553a21fa1e1f1aada8",
    "number": 1852,
    "body": "`licenses` is now [deprecated](https://github.com/npm/npm/issues/4473#issuecomment-32140411).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06563a21fa1e1f1aada9",
    "number": 1849,
    "body": "Not sure if this is a real performance issue, but every call to clearTimeout is shown in Chrome Timeline.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06573a21fa1e1f1aadaa",
    "number": 1847,
    "body": "if you like it and merge it... i could do this to all for loops in the script ;)\n== http://jsperf.com/fors-vs-while/10 ==\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06583a21fa1e1f1aadab",
    "number": 1846,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06593a21fa1e1f1aadac",
    "number": 1844,
    "body": "Followup to comment on [PR 1842](https://github.com/jashkenas/underscore/pull/1842):\n\n1801: Add missing full stop (period). \n1831 & 1835–6: Hyphenate compound modifiers. \n1850: Delete extra space character.\n1860–1: Delete extra space character. Minimal additional language for clarity of noun–verb parsing.\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e065a3a21fa1e1f1aadad",
    "number": 1843,
    "body": "Followup to comment on [PR 1842](https://github.com/jashkenas/underscore/pull/1842):\n\n1801: Add missing full stop (period). \n1831 & 1835–6: Hyphenate compound modifiers. \n1850: Delete extra space character.\n1860–1: Delete extra space character. No change to wording otherwise.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e065b3a21fa1e1f1aadae",
    "number": 1842,
    "body": "1801: Add missing full stop (period). \n1831 & 1835–6: Hyphenate compound modifiers. \n1850: Delete extra space character.\n1860–1: Additional language for clarity of noun–verb parsing.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e065c3a21fa1e1f1aadaf",
    "number": 1840,
    "body": "Fixes #1839.\n",
    "head_branch": "GH-1839",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e065d3a21fa1e1f1aadb0",
    "number": 1838,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e065d3a21fa1e1f1aadb1",
    "number": 1836,
    "body": "Made the comments on IE bugs align with the style of others and [added version info](https://github.com/jashkenas/underscore/blob/e1141980c3bb0c7ebbf63d6fa8b2f8bcb46c800b/underscore.js#L1129) where missing.\n",
    "head_branch": "comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e065e3a21fa1e1f1aadb2",
    "number": 1835,
    "body": "Can someone review this, I haven't worked with `karma` before. Tests pass locally, but the sauce component is still untested.\n\nBased the `karma.conf-sauce` file on [angularjs's karma sauce integration](https://github.com/angular/angular.js/blob/master/karma-shared.conf.js)\n\n(BTW Sauce accounts are Jeremy's)\n",
    "head_branch": "sauce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e065f3a21fa1e1f1aadb3",
    "number": 1833,
    "body": "Need this for karma integration\n",
    "head_branch": "browser-testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06603a21fa1e1f1aadb4",
    "number": 1832,
    "body": "",
    "head_branch": "ecma5-bleh",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06613a21fa1e1f1aadb5",
    "number": 1831,
    "body": "",
    "head_branch": "doc-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06623a21fa1e1f1aadb6",
    "number": 1830,
    "body": "I'd say it makes the iframe tests more maintainable as well\n",
    "head_branch": "node-testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06633a21fa1e1f1aadb7",
    "number": 1828,
    "body": "Karma complains about this\n\nhttps://github.com/jquery/qunit/commit/6b59e686659249b2efc1411a6b80b937eceaf715\n\nSee https://github.com/jquery/qunit/issues/460\n",
    "head_branch": "qunit-testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06643a21fa1e1f1aadb8",
    "number": 1827,
    "body": "We're getting lint errors ([see travis logs](https://travis-ci.org/jashkenas/underscore/builds/34279317)) because of multi line strings. Its supported by most environments (as far back as IE6 I think) but it can break some parsers and is disallowed in many projects ([Google style guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals)). I'd say we should just avoid it instead of fixing eslint\n\n/cc @michaelficarra \n",
    "head_branch": "ml",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06653a21fa1e1f1aadb9",
    "number": 1826,
    "body": "Acts like dict.get(k, v) in python\n",
    "head_branch": "develop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06663a21fa1e1f1aadba",
    "number": 1825,
    "body": "Acts like dict.get(k, v) in python\n",
    "head_branch": "develop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06673a21fa1e1f1aadbb",
    "number": 1824,
    "body": "Acts like dict.get(k, v) in python\n",
    "head_branch": "develop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06683a21fa1e1f1aadbc",
    "number": 1823,
    "body": "Acts like dict.get(k, v) in Python.\n",
    "head_branch": "develop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06693a21fa1e1f1aadbd",
    "number": 1822,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e066a3a21fa1e1f1aadbe",
    "number": 1821,
    "body": "According to the ECMA Script specification for sort [1] an Array is\nsorted according to the string representation of its values. sortBy()\ncompares the values with the less-than and greater-than operators. This\ncauses undefined orders in phantomjs like these:\n\n```\n_.sortBy([1, NaN]) // => [1, NaN]\n_.sortBy([NaN, 1]) // => [NaN, 1]\n```\n\nbut also to real pathological results in Firefox, Chrome and V8 in\ngeneral like this:\n\n```\n_.sortBy([2, NaN, 1]) // => [2, NaN, 1]\n```\n\nwhere the result is not ordered at all.\n\nThis fix addresses these issues by ordering all numbers first and\ncomparing all other values as strings.\n\nThis will break all users that assume that numbers will be ordered\nalongside with strings. Unfortunately that ordering is not well defined\n(Example V8):\n\n```\n_.sortBy(['9', 10, '10']) // => [ '9', 10, '10' ]\n_.sortBy([10, '10', '9']) // => [ 10, '10', '9' ]\n```\n\nWith this patch sortBy() returns these results:\n\n```\n_.sortBy([1, NaN]) // => [1, NaN]\n_.sortBy([NaN, 1]) // => [1, NaN]\n\n_.sortBy([2, NaN, 1]) // => [1, 2, NaN]\n\n_.sortBy(['9', 10, '10']) // => [ 10, '10', '9']\n_.sortBy([10, '10', '9']) // => [ 10, '10', '9' ]\n```\n\n[1] http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11\n",
    "head_branch": "sortby-like-sort",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e066a3a21fa1e1f1aadbf",
    "number": 1820,
    "body": "Add a function to do a stable sorting in reverse order since there is currently no way to this in underscore (_sortBy().reverse() change the order of equal elements).\n\nsortBy has been refactored so that sortBy and sortByDescending share most of their implementation\n",
    "head_branch": "sortByDescending",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e066b3a21fa1e1f1aadc0",
    "number": 1819,
    "body": "In fa352605, a sanity check was added to debounce to make sure our clock hadn't skewed earlier. If the debounced function is getting called under load, though, the last called ts can be the same as the current ts when the timeout runs. That causes `last` to be 0, and currently causes the debounced function to fire.\n\nI wasn't sure how to add a test for this since it is so timing related, but I was able to see it pretty clearly by adding some logging statements inside the `later` function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e066c3a21fa1e1f1aadc1",
    "number": 1818,
    "body": "I have a strong feeling that I encountered this edge case in real code when generating a LOT of random numbers a few years ago (although I have to admit I can't exactly remember the scenario now).\n\nAnyway, how do people feel about fixing it?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e066d3a21fa1e1f1aadc2",
    "number": 1816,
    "body": "Should probably be written for map/filter/etc as well\n",
    "head_branch": "changing-col",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e066e3a21fa1e1f1aadc3",
    "number": 1815,
    "body": "This pull request takes another stab at the enhancement of `sortBy` that was suggested in #1359, namely allowing an array of iteratees. This implementation complements #1359 so that each entry in the iteratees array is run through `_.iteratee`, so it can contain both property names and functions.\n\nHere's a silly example sorting on both `name` and `age` (but using a function for the latter):\n\n```\nvar people = [{name : 'curly', age : 50},{name: 'moe', age: 30},{name : 'curly', age : 27}];\n_.sortBy(people, ['name',function(p){return p.age;}] );\n// => [{name : 'curly', age : 27},{name : 'curly', age : 50},{name: 'moe', age: 30}];\n```\n\nI've toyed with some different approaches to this problem, including what's been suggested in #1751, and I think this is the most intuitive answer. Although it doesn't directly cover all use cases for the #1751 version, such as @megawac 's semver example:\n\n```\nvar versions = [\"0.1\", \"0.1.1\", \"2.0\", \"10.1\", \"6.2\", \"2.0.1\", \"1.7.3\", \"1.10.2\", \"0.2.0\", \"0.3.0\", \"0.6.0\", \"1.0.0\"];\n_.sortBy(versions, function(version) {\n   return _.map(version.split(\".\"), _.partial(parseInt, _, 10));\n});\n// => [\"0.1\", \"0.1.1\", \"0.2.0\", \"0.3.0\", \"0.6.0\", \"1.0.0\", \"1.7.3\", \"1.10.2\", \"2.0\", \"2.0.1\", \"6.2\", \"10.1\"]\n```\n\nCatering cleanly to that too would be nice, but I suspect simply sorting on multiple fields is by far the most common use case. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e066f3a21fa1e1f1aadc4",
    "number": 1810,
    "body": "This separates object and array iteration into separate loops similar to _.each. This should give a performance boost and unify the style. \n",
    "head_branch": "iterationRefactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06703a21fa1e1f1aadc5",
    "number": 1808,
    "body": "(my bad)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06713a21fa1e1f1aadc6",
    "number": 1807,
    "body": "#397 tests\n",
    "head_branch": "chain-imp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06723a21fa1e1f1aadc7",
    "number": 1806,
    "body": "Resolves #1597 \n",
    "head_branch": "unzip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06733a21fa1e1f1aadc8",
    "number": 1803,
    "body": "",
    "head_branch": "doc-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06743a21fa1e1f1aadc9",
    "number": 1802,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06743a21fa1e1f1aadca",
    "number": 1801,
    "body": "_.noop is documented but not in the sidebar.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06753a21fa1e1f1aadcb",
    "number": 1800,
    "body": "`_.before` is in the docs, but not the nav bar.\n\n![screen shot 2014-08-26 at 10 53 46 pm](https://cloud.githubusercontent.com/assets/933676/4054787/6726d2c4-2d95-11e4-9d15-72753da43062.png)\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06763a21fa1e1f1aadcc",
    "number": 1799,
    "body": "Addressing #1798. https://github.com/jashkenas/underscore/compare/1.6.0...15a757dfa5c9cb20161153821c4e86354497011f\n\nThis is a fairly major release, dropping most natives support (#1525) and adding `_.iteratee` callbacks everywhere (#1582). Might it make sense for this to be Underscore 2.0?\n",
    "head_branch": "release-170",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06773a21fa1e1f1aadcd",
    "number": 1797,
    "body": "I was playing around with the `setTimeout` arguments to _.debounce and in addition to killing a few lines the [perf win](http://jsperf.com/smaller-debounce) on FF and Safari is actually pretty significant (no difference on Chrome). Mostly I'm interested in getting rid of the `context = args = null` lines so we don't have to worry about memory leaks. \n",
    "head_branch": "debounce-ctx",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06783a21fa1e1f1aadce",
    "number": 1795,
    "body": "A simple toggling function. \nPass in the current value and an array of length 2 that you want the value to toggle between.\nIt outputs the toggled value.\n\nInspired by the following expression\n\n``` javascript\nif (value === 'desc') {\n  value = 'asc';\n} else { \n  value = 'desc';\n} \n```\n\nA simple toggling of a variable but it requires 'desc' to be repeated twice.\nEven if 'asc' and 'desc' are in constants, the constant will still need to be repeated.\nWith this toggle function, the expression can become\n\n``` javascript\nvalue = _.toggle(value, ['desc', 'asc'])\n```\n",
    "head_branch": "cr-toggle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06793a21fa1e1f1aadcf",
    "number": 1792,
    "body": " This change prevents sortBy from breaking during sorting objects by key when there is an null element on array.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e067a3a21fa1e1f1aadd0",
    "number": 1791,
    "body": "@megawac @jdalton this look right?\n",
    "head_branch": "ie11-isfn-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e067b3a21fa1e1f1aadd1",
    "number": 1788,
    "body": "This pull request implements a feature I've been missing; it returns all possible combinations of elements from the given arrays. Here's an example:\n\n```\n_.combine([1,2,3],[\"a\",\"b\"],[”foo\",\"bar\",\"baz\"]);\n// => [ [1,\"a\",\"foo\"],[1,\"a\",\"bar\"],[1,\"a\",\"baz\"],[1,\"b\",\"foo\"],[1,\"b\",\"bar\"],[1,\"b\",\"baz\"],[2,\"a\",\"foo\"],[2,\"a\",\"bar\"],[2,\"a\",\"baz\"],[2,\"b\",\"foo\"],[2,\"b\",\"bar\"],[2,\"b\",\"baz\"]]\n```\n\nSomewhat related to `zip` but not quite the same.\n\nI was surprised to find no previous discussions on this here or on Underscore-contrib - perhaps it's less useful than I thought? I've used it somewhat often, and as the code to perform it is rather messy, I thought it might be a good fit for inclusion.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e067c3a21fa1e1f1aadd2",
    "number": 1785,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e067d3a21fa1e1f1aadd3",
    "number": 1784,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e067e3a21fa1e1f1aadd4",
    "number": 1781,
    "body": "Fix test to check for the change made in #1770. Currently this test would pass both before and after that change since `_.keys` uses `hasOwnProperty` anyway.\n",
    "head_branch": "inherited-props-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e067f3a21fa1e1f1aadd5",
    "number": 1780,
    "body": "This should enable developers to remove lines like:\n\n``` javascript\nif (obj && _.has(obj, 'key')) // ...\n```\n\nEnabling simpler if statements like:\n\n``` javascript\nif (_.has(obj, 'key')) // ...\n```\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06803a21fa1e1f1aadd6",
    "number": 1779,
    "body": "These cases are probably not very important anyway if #1758 is merged as it can be handled by via negative indexes to slice.\n",
    "head_branch": "samplers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06813a21fa1e1f1aadd7",
    "number": 1778,
    "body": "Fixes https://github.com/jashkenas/underscore/commit/319bdb101e8f656796903c38119e0600f8a7abbf#commitcomment-7261186\n",
    "head_branch": "inherited-props-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06823a21fa1e1f1aadd8",
    "number": 1776,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06823a21fa1e1f1aadd9",
    "number": 1775,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06833a21fa1e1f1aadda",
    "number": 1774,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06843a21fa1e1f1aaddb",
    "number": 1773,
    "body": "As per jdalton's suggestion, simplified the variable assignments for _.map\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06853a21fa1e1f1aaddc",
    "number": 1772,
    "body": "As per jdalton's suggestion, this refactor just simplifies the variable assignments of the _.map function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06863a21fa1e1f1aaddd",
    "number": 1771,
    "body": "",
    "head_branch": "ar/default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06873a21fa1e1f1aadde",
    "number": 1770,
    "body": "I believe _.extend is intended to remain primitive in nature (as per issue #123), so this may be an unnecessary change.\n\nChecks for the source object's own properties before extending a property. It includes the code from Dimik's comment resolving issue #1739. One contributed test; All tests pass.\n\nScreenshots highlight lines of code added to underscore.js and object tests:\n<b>underscore.js:</b>\n![screen shot 2014-08-01 at 2 08 24 pm](https://cloud.githubusercontent.com/assets/3682072/3785558/3201076e-19c6-11e4-97c8-409937a8fc84.png)\n<b>test/objects.js:</b>\n![screen shot 2014-07-31 at 7 54 28 pm](https://cloud.githubusercontent.com/assets/3682072/3774378/9ba9e610-1929-11e4-94e9-6f8565113aa7.png)\n<b>Passing tests:</b>\n![screen shot 2014-07-31 at 8 16 02 pm](https://cloud.githubusercontent.com/assets/3682072/3774399/3bcd7e40-192a-11e4-8025-1fc1e5fced0b.png)\n",
    "head_branch": "extend-check-own-prop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06883a21fa1e1f1aaddf",
    "number": 1764,
    "body": "In the old `_.contains` implementation, it doesn't take object that has a number-type 'length' property like:\n\n```\n var obj = {\n      length: 2, \n      name: 'ruler', \n      unit:'cm'\n };\n```\n\nI just think it might be easier for people using underscore to not care if 'length' is some kind of reserved word they can't use. So I just changed `obj.length !== +obj.length` to `_.isObject(obj)`.\n\nThere's a lot of places using `obj.length !== +obj.length`, I find the one in `_.contains` needed most to be changed. Because the semantic tells me, all it does is checking if an object contains some value or not, people using it might find it unbelievable when `_contains(obj, 'ruler')` returns false .\n",
    "head_branch": "object-length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06893a21fa1e1f1aade0",
    "number": 1763,
    "body": "When using the `_.before()` and `_.after()` with the OOP style wrapper, it does not work.\n\nEx.\n\n``` javascript\nvar func = _(function() {\n    console.log(\"I should be executed on the third call\");\n}).after(3);\n```\n\nI have added tests that show this failure and a special exception to handling these specific functions as they seem to be the only outliers that do not conform to the standard argument ordering.\n",
    "head_branch": "before-after-oop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e068a3a21fa1e1f1aade1",
    "number": 1760,
    "body": "Regexp visualization for reference [/^\\s*$/](http://www.regexper.com/#%2F%5E%5Cs*%24%2F)\n",
    "head_branch": "ar/empty_strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e068b3a21fa1e1f1aade2",
    "number": 1759,
    "body": "The `memo` parameter of `reduce` is optional, but it was not marked as such. No description was given as to its behavior when omitted.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e068b3a21fa1e1f1aade3",
    "number": 1758,
    "body": "Add a slice function with the python contract `_.slice(collection, start, end, step)`\n\nSee https://docs.python.org/2/library/functions.html#slice. Like python slice, it doesn't do any coercing of inputs (besides 0 which is coerced to 1). Python will give an error for invalid inputs, this implementation doesn't bother and carries on. One nice benefit of the step feature is now we can do non destructive reversing `_.slice(arr, null, null, -1)`\n\nCreated some jsperf benchmarks the other day http://jsperf.com/cr-52768\n\nI think it may make sense to add a `_.reverse` function after this which will also fix a bug `_(document.childNodes).reverse(); // Exception` \n",
    "head_branch": "slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e068c3a21fa1e1f1aade4",
    "number": 1757,
    "body": "",
    "head_branch": "avoid-array-proto-slice",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e068d3a21fa1e1f1aade5",
    "number": 1756,
    "body": "Tests fail in ie<9\n",
    "head_branch": "reserved-keywords",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e068e3a21fa1e1f1aade6",
    "number": 1755,
    "body": "Currently the `_.matches` tests fail in IE<9 because of this bug.\n\nTested in ie7 and ie8\n",
    "head_branch": "keys-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e068f3a21fa1e1f1aade7",
    "number": 1754,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06903a21fa1e1f1aade8",
    "number": 1753,
    "body": "[ci skip]\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06913a21fa1e1f1aade9",
    "number": 1751,
    "body": "Fixes #1779, #1880\n\nAnother try at getting `sortBy` support for multiple criteria since #1359 was rejected. I'd argue this approach is more robust as its implementation is based on the return of the iterator instead of only handling multi prop lookups. Thus we can implement the same behaviour as #1359 with a `properties` mixin if desired later.\n\n``` javascript\n_.mixin({\n   properties: function(props) {\n     return function(obj) {\n         return _.map(props, function(prop) {\n             return obj[prop];\n         });\n     }\n  }\n});\n\n_.sortBy([{a: 1, b: 2}, {a: 1, b: 3}, {a: 1}, {a: 2, b: -1}, {b: 5}], _.properties([\"a\", \"b\"]));\n```\n\n---\n\nPost implementation enables:\n\n``` javascript\n_.sortBy([{a: 1, b: 2}, {a: 1, b: -1}, {a: 1, b: 3}, {a: 2, b: -5}], function(x) {\n    return [x.a, x.b];\n});\n// => [{\"a\": 1,\"b\": -1},{\"a\": 1,\"b\": 2},{\"a\": 1,\"b\": 3},{\"a\": 2,\"b\": -5}]\n```\n\n---\n\nExmple Usage (naive semver sort):\n\n``` javascript\nvar versions = [\"0.1\", \"0.1.1\", \"2.0\", \"10.1\", \"6.2\", \"2.0.1\", \"1.7.3\", \"1.10.2\", \"0.2.0\", \"0.3.0\", \"0.6.0\", \"1.0.0\"];\n_.sortBy(versions, function(version) {\n   return _.map(version.split(\".\"), _.partial(parseInt, _, 10));\n});\n// => [\"0.1\", \"0.1.1\", \"0.2.0\", \"0.3.0\", \"0.6.0\", \"1.0.0\", \"1.7.3\", \"1.10.2\", \"2.0\", \"2.0.1\", \"6.2\", \"10.1\"]\n```\n\n---\n\nThe thing that tripped me up implementing this is that the comparitor ranks `undefined > anything`. I'd argue that `undefined < anything` but that's just me.\n\nI'd really like to see this behaviour in v2.\n",
    "head_branch": "sort-arr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06923a21fa1e1f1aadea",
    "number": 1749,
    "body": "In 1.6.0 and earlier `max` and `min` returned negative and positive infinity respectively. Currently it throws an exception if no iterator is provided, otherwise returns an infinity.\n\nI think I prefer the exception but returning +-Infinity is fine too.\n\nCurrently\n\n```\n_.max(null) // => TypeError\n_.max(null, _.identity) // => -Infinity\n```\n",
    "head_branch": "min/max-reg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06933a21fa1e1f1aadeb",
    "number": 1747,
    "body": "There is a bug in `_.memoize` where the object which is returned from the cache is always looked up using the first argument, ignoring the custom hash function if one was supplied. The fix is to use the computed `address` as the lookup key. Amazingly, the unit tests did not cover this.\n\nI was a little confused when all I wanted to do was use the second argument of the function as the key and kept getting a return value of `undefined`.\n\nConfirmed the regression and fix with the added unit tests.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06943a21fa1e1f1aadec",
    "number": 1745,
    "body": "",
    "head_branch": "rawgit-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06953a21fa1e1f1aaded",
    "number": 1744,
    "body": "Without requiring `_.uniq(obj, false, 'a')` now `_.uniq(obj, 'a')`\n\nResolves #1743\n",
    "head_branch": "uniq-falsey",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06953a21fa1e1f1aadee",
    "number": 1742,
    "body": "All cases without a supplied iterator will now take the simple for loop\n",
    "head_branch": "min-max-fast",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06963a21fa1e1f1aadef",
    "number": 1741,
    "body": "http://jsperf.com/underscore-escape/5\n\nFor lodash-esque perf for this case [see this changeset](https://github.com/megawac/underscore/compare/uniq2) -- http://jsperf.com/underscore-escape/6 (LMK if you want a PR here)\n",
    "head_branch": "uniqer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06973a21fa1e1f1aadf0",
    "number": 1740,
    "body": "Escape is optimized by testing whether the string contains some escape character prior to replacement.\n\nSome discussion https://github.com/megawac/underscore/compare/escape-simp\n\nJSPerf: http://jsperf.com/underscore-escape\n",
    "head_branch": "escape-simp2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06983a21fa1e1f1aadf1",
    "number": 1737,
    "body": "Fixes #1653\n\nMatches [`Handlebars` escape map](https://github.com/wycats/handlebars.js/blob/88c52ded2e81b4b01d12c16e337b0bc4a453a813/lib/handlebars/utils.js#L4-11)\n",
    "head_branch": "escape",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06993a21fa1e1f1aadf2",
    "number": 1733,
    "body": "Fixes #1704\n\nTests semi dependent on #1711 \n",
    "head_branch": "partial-constructor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e069a3a21fa1e1f1aadf3",
    "number": 1731,
    "body": "As noted by @jdalton in https://github.com/jashkenas/underscore/pull/1730#discussion_r14662677.\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e069b3a21fa1e1f1aadf4",
    "number": 1730,
    "body": "Fixes #1729\n",
    "head_branch": "matches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e069c3a21fa1e1f1aadf5",
    "number": 1728,
    "body": "The exact implementation of the _.uniq function may be unclear to people wishing to improve the algorithm.  \nRather than add extra lines of comments to the underscore.js file, a simple test should make the input/output expectations for _.uniq crystal clear.\n\n``` sh\nvar a = {}, b = {}, c = {};\ndeepEqual(_.uniq([a, b, a, b, c]), [a, b, c], 'works on values that can be tested for equivalency but not ordered');\n```\n",
    "head_branch": "uniqTest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e069d3a21fa1e1f1aadf6",
    "number": 1726,
    "body": "Added for best practice. More on this here: https://github.com/airbnb/javascript#semicolons\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e069e3a21fa1e1f1aadf7",
    "number": 1725,
    "body": "[Same strategy is used in lodash](https://github.com/lodash/lodash/blob/master/lodash.js#L7064-7069)\n\nhttp://jsperf.com/isobject-vs-typeof/2\n",
    "head_branch": "obj",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e069f3a21fa1e1f1aadf8",
    "number": 1724,
    "body": "I'm not really expecting anybody to review all of this. Just let me know if there's any objections to the concept.\n",
    "head_branch": "lint-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a03a21fa1e1f1aadf9",
    "number": 1723,
    "body": "Fixes cases brought up in https://github.com/jashkenas/underscore/issues/1683 including:\n- **only using own properties of spec object**\n- ensuring the keys being checked exist on the given object so `_.matches({x: undefined})({}) === false`\n\nFixes #1683\n",
    "head_branch": "matches",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a13a21fa1e1f1aadfa",
    "number": 1722,
    "body": "Underscore is a fantastic open source library adding key functionality to many other programs.  \nBecause of its popularity, people who use this library expect the various functions to perform at optimal speed.\n\nI propose a change to uniq which will bring the time complexity from polynomial to n*log(n) time.  \nOriginally, the code contained a loop within a loop:\n\n``` sh\nfor (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i];\n      if (iterator) value = iterator(value, i, array);\n      if (isSorted ? !i || seen !== value : !_.contains(seen, value)) {\n        if (isSorted) seen = value;\n        else seen.push(value);\n        result.push(array[i]);\n      }\n    }\n```\n\nThe version on this branch uses the native sort function (which is either mergeSort or quickSort, depending on the browser) two times to bring down the time complexity.  The first time, it will sort by value to line up repeated values.  After the repeated values have been removed, it will use .sort on the stored indices to return the array to its original order.  \n\n``` sh\nif (!isSorted) {\n      for (var i = 0, length = array.length; i < length; i++){\n        if (iterator) tuples.push([iterator(array[i], i, array), i]);\n        else tuples.push([array[i], i]);\n      }\n      tuples.sort(function(a,b){ return a[0] > b[0] ? 1 : -1; });\n    }\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = isSorted ? array[i] : tuples[i][0];\n      if (!i || seen !== value) {\n        seen = value;\n        result.push(isSorted ? array[i] : tuples[i]);\n      }\n    }\n    if (!isSorted) {\n      result.sort(function(a,b){ return a[1] > b[1] ? 1 : -1; });\n      var length = result.length;\n      for (var i = 0; i < length; i++){\n        result.push(array[result[i][1]]);\n      }\n      result = result.slice(length);\n    }\n```\n\nThe original code has been maintained as much as possible to minimize the extra length of the function.  \nIn the future, a better programmer than I could probably make this code even shorter.\n\nThis code passes all of the built-in tests.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a13a21fa1e1f1aadfb",
    "number": 1721,
    "body": "All tests pass. I only refactored the _.some function.\n\nBefore:\n- Iterate over collection, return true as soon as any predicate function returns true.\n- Code redundancy in _.every and _.some (ll. 208 - 214)\n\n``` javascript\nvar length = obj.length;\nvar index, currentKey, keys;\nif (length !== +length) {\n  keys = _.keys(obj);\n  length = keys.length;\n}\n```\n\nAfter:\n- Check if _reversed_ truth test fails on every item inside collection.\n\nAdvantages: Cleaner, shorter, reuse of _.every, no additional corner case checks inside _.some\n",
    "head_branch": "every",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a23a21fa1e1f1aadfc",
    "number": 1720,
    "body": "This commit makes building the project much easier and introduces a\nmore standardized way to build (minify), lint, document and test\nUnderscore.js using gulp.js. All npm-scripts have been replaced\nwith appropriate gulp-tasks.\n\nIn particular, the following changes have been made:\n- Replace direct usage of PhantomJS with gulp-qunit.\n  \n  This removes the need to globally install the PhantomJS CLI.\n  Further, the test/vendor/runner.js file is no longer needed (but\n  still included for now).\n  PhantomJS is no longer a dependency. The corresponding npm\n  script is no longer needed and has been removed.\n  To run the tests, execute \"gulp test\".\n- Replace direct usage of eslint with gulp-eslint.\n  \n  Same as above. Remove need for global installation etc. Lint\n  script (previously included in test-script) has been abstracted\n  into its own task. Linting can be done using \"gulp lint\".\n- Replace build script with appropriate gulp task.\n  \n  Same as above. Previously, the build was handled by the npm\n  script \"build\". In compliance with [informal conventions](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit), the\n  sourcemap file is now called \"underscore-min.js.map\" instead of\n  \"underscore-min.map\". Project can be build (minification +\n  generation of sourcemap) using \"gulp build\".\n- Handle documentation through docco using gulpfile.\n  \n  docco is still a dependency, since a corresponding gulp-task for\n  docco couldn't be found (WIP). Documentation can be generated\n  using \"gulp doc\".\n## Usage\n- Install gulp.js globally using \"npm install -g gulp\".\n  \n  This is the only dependency which needs to be installed globally.\n- Install dependencies using \"npm install\".\n- Run tasks:\n  \n  Old -> New\n  npm run-script test -> gulp test/ gulp lint\n  npm run-script build -> gulp build\n  npm run-script doc -> gulp doc\n  Run all: -> gulp\n\nThis PR might seem like a lot of overhead, but it makes building, testing, linting and documenting the project much easier, especially for new collaborators that prefer building Underscore.JS themselves. Introducing gulp is a good choice in this case, since it removes the need to globally install all the dev dependencies. Otherwise, the globally installed dependencies might conflict with each other on different projects (e.g. if you need a previous version of uglify in order to build a different project [1]). Extending gulp is much easier and more readable than adding another npm-script. Further, testing is much easier now, since runner.js is obsolete.\n\n  [1]: Another way of circumventing this problem would be to run the binary inside the node_modules directory explicitly (e.g. using ./node_modules/.bin/docco).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a33a21fa1e1f1aadfd",
    "number": 1719,
    "body": "Added condition to check whether obj is number and equals to 0.\nIn other words the function should return true in the following case: `_.isEmpty(0)`\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a43a21fa1e1f1aadfe",
    "number": 1714,
    "body": "Been playing with this, seems solid\n",
    "head_branch": "range",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a53a21fa1e1f1aadff",
    "number": 1713,
    "body": "Require.js will set the name of the package before it is needed.\nThis is useful with Underscore specifically for when you want to\noverride the defaults for things such as `_.templateSettings`.\n",
    "head_branch": "flexible-naming",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a63a21fa1e1f1aae00",
    "number": 1712,
    "body": "",
    "head_branch": "shuffle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a73a21fa1e1f1aae01",
    "number": 1711,
    "body": "Just some coverage of the shimmed bind\n",
    "head_branch": "bind-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a83a21fa1e1f1aae02",
    "number": 1710,
    "body": "Similar to #1708. Still not sure if I like this pattern, but it definitely has some benefits.\n\npost-some: http://jsperf.com/pr-1689/8\npost-each: http://jsperf.com/pr-1689/11\n",
    "head_branch": "quick-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06a93a21fa1e1f1aae03",
    "number": 1709,
    "body": "Typically, `_.pick` takes an object and a list of keys and returns an\nobject with just these keys and their values.\n\nHowever, often times, I need some keys to be renamed. E.g. when getting\na few attributes from one model to send to the API of another model. (I'm\ntalking Backbone models, but it would apply to anything of course)\n\nRight now, I would do something like that:\n\n``` js\nvar modelAttr = _.pick(myUser, 'id', 'name');\nmodelAttr.userEmail = myUser.get('email');\n\n// => {id: '1234', name: 'Jane Doe', userEmail: 'jane@doe.org'}\n```\n\nWhat I'm suggesting is being able to rename keys if needed, like so:\n\n``` js\nvar modelAttr = _.pick(myUser, 'id', 'name', {email: 'userEmail'});\n\n// => {id: '1234', name: 'Jane Doe', userEmail: 'jane@doe.org'}\n```\n\nI also changed `_.omit` since it mirrors what `_.pick` does and both\ncould be used with the same options to get the complements of each\nother. Of course, in this case, the object values are unused.\n",
    "head_branch": "rename-keys-in-pick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06aa3a21fa1e1f1aae04",
    "number": 1708,
    "body": "Was playing with this pattern a couple weeks ago and look forward to hearing thoughts from other contributors as we're sacrificing terseness for speed via with boilerplate. I've applied this pattern to some of the [other methods in this branch](https://github.com/megawac/underscore/compare/funhouse) + some thoughts from @jdalton (see comments at the bottom for the relevant jsperf post changes for other functions ).\n\nFigured I would open the conversation as its one of the most used functions in the lib and optimizations here pay dividends. Relevant jsperf below\n\nhttp://jsperf.com/pr-1689/9\n\nAlso, I'm mixed about this change and can agree if we reject this :)\n",
    "head_branch": "fast-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ab3a21fa1e1f1aae05",
    "number": 1707,
    "body": "",
    "head_branch": "from-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ac3a21fa1e1f1aae06",
    "number": 1706,
    "body": "`indexOf` was fine. `lastIndexOf` needed some tinkering. Stole most of the tests of @jdalton's test suite\n\nFixes #1705\n",
    "head_branch": "index-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ad3a21fa1e1f1aae07",
    "number": 1703,
    "body": "I'm not sure how you guys will feel about JIT optimizations but this can give a good (and free) boost to engine optimizers. \n\nRelevant jsperf: http://jsperf.com/reduce-right-optimi/9\n\n<sub>still some other places this pattern remains</sub>\n",
    "head_branch": "arg-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ad3a21fa1e1f1aae08",
    "number": 1702,
    "body": "#1700 is a good pull but diverges a bit stylistically. Just reeling it in a bit.\n",
    "head_branch": "compose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ae3a21fa1e1f1aae09",
    "number": 1700,
    "body": "This change will break for the `_.compose()` case. I'm for throwing an `Error` immediately or return a `noop` if no arguments are given. Returning `noop` will be obviously be non breaking\n\nhttp://jsperf.com/lodash-compose-vs-underscore/2\n",
    "head_branch": "compose",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06af3a21fa1e1f1aae0a",
    "number": 1699,
    "body": "_.isFinite([1]) should return false\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b03a21fa1e1f1aae0b",
    "number": 1697,
    "body": "Add some missing test coverage (mainly for context in _.filter, _.map, _.some, _.every), test cleanup and fixing the aliases beign used.\n",
    "head_branch": "test-coverage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b13a21fa1e1f1aae0c",
    "number": 1696,
    "body": "Found a commit that went missing in a past PR (#1649) with a bunch of cases :) \nhttps://github.com/megawac/underscore/commit/05f7e58c991abd2a4e6ef0118b5b263569869c41\n\nCurrently pick will throw when given null/undefined/primitive and *args\n",
    "head_branch": "_.pick-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b23a21fa1e1f1aae0d",
    "number": 1695,
    "body": "As suggested by @jdalton [here](https://github.com/jashkenas/underscore/pull/1587#discussion_r14004776) as an alternative to current or `_.findKey` (if implemented in #1587)\n\nhttp://jsperf.com/reduce-right-optimi/7\n",
    "head_branch": "contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b33a21fa1e1f1aae0e",
    "number": 1694,
    "body": "`isDate()` does not check for the weird `Invalid Date` \n\n```\nvar date = new Date('not a date');  //  Invalid Date\n_.isDate(date);  //  true\n```\n\nNow, also testing with `!isNaN(date.getTime())`\n\n```\n_.isDate = function(obj) {\n  return toString.call(obj) === '[object Date]' && !isNaN(obj.getTime());\n}; \n```\n\nResult:\n\n```\n_.isDate(date);  //  false\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b43a21fa1e1f1aae0f",
    "number": 1692,
    "body": "If a given method is undefined, createCallback is going to return a function that will eventually throw an error when it is called. This is because createCallback returns a function that will evaluate to undefined.apply. If that's true, then it would be nice to catch these errors when we do the binding instead of when we call the unusable functions.\n\nHere's an example...\nhttps://gist.github.com/smarden1/b08f84fd3b1c363d403d\n\nAdditionally, I like getting the erroneous method name in my exception as bindAll can take a long list of functions and hunting down the erroneous one in that list is a bummer.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b53a21fa1e1f1aae10",
    "number": 1691,
    "body": "Styles it to be inherited to `_.prototype` with the rest of the functions\n",
    "head_branch": "chain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b63a21fa1e1f1aae11",
    "number": 1690,
    "body": "lost in #1649. Must of unstaged the commit by mistake\n",
    "head_branch": "_.pick-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b73a21fa1e1f1aae12",
    "number": 1689,
    "body": "Addresses @jdalton in #1688.\n",
    "head_branch": "partial-placeholder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b73a21fa1e1f1aae13",
    "number": 1687,
    "body": "Since the two styles are functionally equivalent, I find it easier to distinguish local variables from arguments when they're declared the first time they're assigned to.  Thoughts?\n",
    "head_branch": "style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b83a21fa1e1f1aae14",
    "number": 1686,
    "body": "Noticed this scouting about that this behaviour changed in #1593 and got confused somewhere\n",
    "head_branch": "partition-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06b93a21fa1e1f1aae15",
    "number": 1685,
    "body": "Don't pray to the gods `.apply` can handle the size of the nested arrays\n\nhttp://jsperf.com/new-flatten\n\nFixes #1875\n\n~~For lodash speeds we'll need to change `push.apply` to something similar to [this clever logic](https://github.com/lodash/lodash/blob/master/lodash.js/#L1616-1619). Let me know if that's more desirable, I have it [already prepared](https://github.com/megawac/underscore/blob/flatten2/underscore.js#L465-483) and its in the jsperf~~\n",
    "head_branch": "flatten",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ba3a21fa1e1f1aae16",
    "number": 1682,
    "body": "Extremely minor, but was bugging me: moves the `_.partiion` method out of `Arrays` and adjust the comment.\n\nSmall item missed in #1479\n",
    "head_branch": "partition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06bb3a21fa1e1f1aae17",
    "number": 1681,
    "body": "Backwards compat case broken in #1678; closes #1680\n",
    "head_branch": "zip-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06bc3a21fa1e1f1aae18",
    "number": 1679,
    "body": "Simplifies the expected case for _.memoize\n",
    "head_branch": "memoize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06bd3a21fa1e1f1aae19",
    "number": 1678,
    "body": "Since #1582 this is possible\n\nhttp://jsperf.com/zip-arrays/4\n\nPing @jdalton (couldn't get this one working well with your lib)\n",
    "head_branch": "zip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06be3a21fa1e1f1aae1a",
    "number": 1676,
    "body": "In retrospect, I should of grouped the lot of these into one pr. Anyway, this appears to be the last of the functions using this pattern\n",
    "head_branch": "defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06bf3a21fa1e1f1aae1b",
    "number": 1675,
    "body": "As you can see in these benchmarks, comparing the obj.constructor against the type constructor is at least twice as fast in both cases. It's not faster than typeof, but it's the only way since typeof doesn't know the difference between a \"pure object\" and an array.\nhttp://jsperf.com/arrtc1337\nhttp://jsperf.com/objtc1337\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c03a21fa1e1f1aae1c",
    "number": 1673,
    "body": "Add some comments for some confusing `_.isEqual` lines and spec sparse array handling (this handling is consistent with `v1.5-v1.6`)\n",
    "head_branch": "equal-comments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c13a21fa1e1f1aae1d",
    "number": 1672,
    "body": "The HTML documentation did not make it clear how `_.isEmpty` works for strings and arrays vs. objects. The distinction is clear in the annotated source, so I tried to make it reflect that.\n",
    "head_branch": "update-isEmpty-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c23a21fa1e1f1aae1e",
    "number": 1671,
    "body": "Ping #1628\n",
    "head_branch": "_.once",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c33a21fa1e1f1aae1f",
    "number": 1669,
    "body": "Clears up the confusing loop\n\n```\n_.each(obj, function(value, index, list) {\n      index = keys ? keys[--length] : --length;\n```\n\nhttp://jsperf.com/reduce-right-optimi\n",
    "head_branch": "reduceRight",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c43a21fa1e1f1aae20",
    "number": 1668,
    "body": "",
    "head_branch": "_.bindAll-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c53a21fa1e1f1aae21",
    "number": 1667,
    "body": "",
    "head_branch": "_.extend-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c63a21fa1e1f1aae22",
    "number": 1666,
    "body": "This pr is intended as both a readability patch and code optimization (at least in es5 environments)\n\nhttp://jsperf.com/isequal-objects (faster and more explicit :)\n",
    "head_branch": "equals",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c73a21fa1e1f1aae23",
    "number": 1663,
    "body": "Pretty sure I got them all (many weren't being tested before)\n\nAs discussed earlier in #1582\n",
    "head_branch": "alias-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c73a21fa1e1f1aae24",
    "number": 1661,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c83a21fa1e1f1aae25",
    "number": 1660,
    "body": "Funcy is Python library that borrows ideas from underscore and shares much of its API.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06c93a21fa1e1f1aae26",
    "number": 1659,
    "body": "This method allows set/retrieve multilevel property.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ca3a21fa1e1f1aae27",
    "number": 1657,
    "body": "An alternative approach would be to leave the condition in and conditionally do the `iterator = lookupIterator(iterator, context);` assignment. I don't know which one would be more performant.\n",
    "head_branch": "lookupIterator-constant-conditions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06cb3a21fa1e1f1aae28",
    "number": 1655,
    "body": "Currently the documentation only shows how to use `_.uniq` in its simplest implementation. This pull request   adds an example use of `_.uniq` with an iterator function.\n",
    "head_branch": "uniq-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06cc3a21fa1e1f1aae29",
    "number": 1652,
    "body": "This rule treats all `var` declarations as if they were `let` and then checks for reference errors. A few declarations had to be lifted out of their blocks.\n",
    "head_branch": "eslint-block-scoped-var",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06cd3a21fa1e1f1aae2a",
    "number": 1651,
    "body": "Merging immediately.\n",
    "head_branch": "minimise-eslintrc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ce3a21fa1e1f1aae2b",
    "number": 1650,
    "body": "Going to style all the documentation.\nKeeping the CSS rules away from html is good idea now, because CSS rules gonna grow.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06cf3a21fa1e1f1aae2c",
    "number": 1649,
    "body": "Migrate the trivial optimizations from rejected pr #1639\n\n~~The `_.invert` change is debatable, its about ~25% faster in ff and ~20% slower in chrome to the current method. I think it looks nicer than the string map :). [Relevant jsperf](http://jsperf.com/invert-vs-map)~~\n\n~~JSPerf of the changeset vs current master: http://jsperf.com/underscore-1639/5~~\n",
    "head_branch": "_.pick-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d03a21fa1e1f1aae2d",
    "number": 1644,
    "body": "`_.some` and `_.every` can be faster by removing unneeded checking of `result` variable. [jsPerf](http://jsperf.com/optimize-every)\n",
    "head_branch": "optimize-some-every",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d13a21fa1e1f1aae2e",
    "number": 1643,
    "body": "Because `lookupIterator` do that.\n",
    "head_branch": "remove-unneeded-predicate-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d23a21fa1e1f1aae2f",
    "number": 1642,
    "body": "There is no need for checking the `predicate` because of adding `lookupIterator` that do this.\n",
    "head_branch": "remove-unneeded-predicate-check",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d23a21fa1e1f1aae30",
    "number": 1639,
    "body": "Use a function generator to create `_.pick` and `_.omit` as they're essentially [the same function](https://github.com/megawac/underscore/commit/f7d56a26971c69b9c58f8c9949e509f849b74b43#diff-0f36b362a0b81d6f4d4bfd8a7413c75dR899).\n\nWe can expect a major performance improvement from this changeset for all cases of `_.omit` with some perf hit on the properties as argument case for `_.pick`\n",
    "head_branch": "_.pick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d33a21fa1e1f1aae31",
    "number": 1638,
    "body": "Fixed bug on _.memoize.  _.memoize did not work correctly on a a multi-argument function when a hash was not provided.  Previously, it was only including the first argument into the cache.  The update provides a conditional statement to det\nermine if hasher===_.identity.  If it does, then the appropriate code is applied\n to include the entire arguments array into the cache.\n-All tests passed with new implementation\n-Previously, a function like var add = function(a,b){return a+b;} if used with m\nemoize, var fastAdd = _.memoize(add), fastAdd(2,3) would give the same response\nas fastAdd(2,6) or fastAdd(2,7) after fastAdd had been implemented on arguments\nwhere the first values were equal.  The new implementation fixes this issue.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d43a21fa1e1f1aae32",
    "number": 1637,
    "body": "`_.some` can be implemented via `_.every` so we can make the code more DRY.\n",
    "head_branch": "some_via_every",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d53a21fa1e1f1aae33",
    "number": 1636,
    "body": "Fix #1633.\n",
    "head_branch": "regexp-isequal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d63a21fa1e1f1aae34",
    "number": 1635,
    "body": "",
    "head_branch": "deep-equal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d73a21fa1e1f1aae35",
    "number": 1630,
    "body": "Another great package manager: http://spmjs.io\nDocumentation: http://spmjs.io/documentation\n\nhttp://spmjs.io/package/underscore\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d83a21fa1e1f1aae36",
    "number": 1629,
    "body": "It looks like debounce and throttle are not re-entrant because they clear the function context and args after executing the underlying function, even if the underlying function may call the original function itself.  I assume this is done to allow garbage collection.  I noticed this because I was triggering a debounced function in an ember application whenever I observed a change in a property that the function might itself change.  Turns out ember has it's own throttle and debounce functions but I thought I'd offer up this patch anyway.  I believe the fix is to only clear the context and args if a new timer has not been set up.\n\nAndrew\n",
    "head_branch": "re-entrant",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06d93a21fa1e1f1aae37",
    "number": 1628,
    "body": "I'm not sure if this PR belongs in this repository or the contributing repository, please let me know if I need to move it.\n\nI couldn't find any simple way to limit the number of times a function runs using existing underscore functions. I came up with a non-underscore solution, and it turned out I reverse engineered something similar to the `_.after()` function.\n\nUnlike `_.after()`, which only runs a function after it has been called n times, `_.before()` runs a function _until_ it has been called n times.\n\nAn example usage of this behavior is adding items to a list. I set up a function to add the items to the list, but I want to limit the number of times an item is added. An underscore alternative would be something like using `_.after()` and null the function after n calls.\n",
    "head_branch": "before",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06da3a21fa1e1f1aae38",
    "number": 1627,
    "body": "Perhaps this goes without saying, but this implementation makes changes to implementation breaking.  For instance, using a `Map` instead of an object.\n",
    "head_branch": "memoize-cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06db3a21fa1e1f1aae39",
    "number": 1626,
    "body": "I would find it very useful to have a cache function for many things, including querying the DOM, AJAX polling, etc. Instead of adding another function to the library, I propose adding an optional cache lifetime (in milliseconds) parameter to `_.memoize` and simply aliasing as `_.cache`.\n\nIt makes a lot more sense for expensive synchronous requests (like DOM polling), but here's an AJAX example. This specific example could also use throttling, but you get the idea.\n\nhttp://jsfiddle.net/JZGeb/\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06dc3a21fa1e1f1aae3a",
    "number": 1625,
    "body": "I came upon a use case in my code that required me to find the index of an element based on a truth test. Figured I would add it to underscore.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06dc3a21fa1e1f1aae3b",
    "number": 1624,
    "body": "As discussed in #1623.\n\nThe current behaviour (throwing a TypeError) is not helpful, and likely not deliberate.\n",
    "head_branch": "has",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06dd3a21fa1e1f1aae3c",
    "number": 1623,
    "body": "The line in question should be read: _Return true if **obj** has a \"callee\" property._\n\nIn the existing code, `obj &&` serves as a guard to avoid passing null or undefined to _.has. The consequence is that `!!` is required to ensure the function returns a Boolean in all cases.\n\nThere are several reasons to prefer `obj != null &&` as the guard:\n- it makes it clear that the left && operand is simply a guard (it's irrelevant whether `obj` is logical true);\n- it makes it easier to see why a guard is necessary; and\n- it obviates the need for coercion.\n",
    "head_branch": "isArguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06de3a21fa1e1f1aae3d",
    "number": 1620,
    "body": "Used WebStorm.\nIt used tabs instead of 2-spaces indenting.\nSo that it can be easier to read online.\n",
    "head_branch": "format-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06df3a21fa1e1f1aae3e",
    "number": 1619,
    "body": "",
    "head_branch": "infinity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e03a21fa1e1f1aae3f",
    "number": 1618,
    "body": "The example code for template precompilation using _.template().source is unclear to those unfamiliar with precompilation:\n\n```\n<script>\n  JST.project = <%= _.template(jstText).source %>;\n</script>\n```\n\nThis fix changes adds two things to clarify. It adds a type attribute to the script tag to clarify its use and make similar examples easier to find, and it adds a brief description of the example so it is more clear what is being shown (changes below):\n\n```\nFor example, using a pre-compiler with ERB-style delimiters:\n\n<script>\n  JST.project = <%= _.template(jstText).source %>;\n</script>\n```\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e13a21fa1e1f1aae40",
    "number": 1616,
    "body": "This generates the following warnings, but all errors (and tons of other warnings) have been eliminated.\n\n```\nunderscore.js\n    41:37  warning  A constructor name should start with an uppercase letter         new-cap\n   361:17  warning  Gratuitous parentheses around expression                         no-extra-parens\n   930:12  warning  Expected '!==' and instead saw '!='                              eqeqeq\n   930:28  warning  Expected '!==' and instead saw '!='                              eqeqeq\n   932:15  warning  Expected '===' and instead saw '=='                              eqeqeq\n   932:24  warning  Expected '===' and instead saw '=='                              eqeqeq\n   932:41  warning  Expected '===' and instead saw '=='                              eqeqeq\n  1049:2   warning  Unexpected constant condition                                    no-constant-condition\n  1234:26  warning  This function has too many parameters (5). Maximum allowed is 4  max-params\n  1259:19  warning  The Function constructor is eval                                 no-new-func\n```\n\nThe next version of eslint (current master) will allow comments for line-based exceptions so we can mark all of these as expected.\n\nFixes #1608.\n",
    "head_branch": "GH-1608",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e23a21fa1e1f1aae41",
    "number": 1614,
    "body": "I removed this change from #1525 before it was merged. For consistency, _.keys should treat sparse arrays as dense (as _.map et al. now do).\n\nI'm sure you'll have much to say about this change, @jdalton. I look forward to your feedback. :)\n",
    "head_branch": "keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e33a21fa1e1f1aae42",
    "number": 1611,
    "body": "I need to add protections to the `constructor` check since it's you can't access it across frames. Unsure how to even add a unit test for this though.\n\nThe situation occurs when checking `window.parent` from within an cross origin iframe.\n\nOn a side note, I'm not sure the existing check is 100% correct. If the two constructors are not equal, why do we assume both have to have constructors? What if only one has a constructor, this check if fail when we want it to succeed? I can adjust this logic to be correct, but thought it might be a little out of scope.\n",
    "head_branch": "cross-origin-global",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e43a21fa1e1f1aae43",
    "number": 1607,
    "body": "Fixes #1565\n",
    "head_branch": "extend-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e53a21fa1e1f1aae44",
    "number": 1606,
    "body": "A colleague and I were just bitten by a bug in this code:\n\n``` javascript\nvar bestMatch = _.max(inPosteds, function(inPosted) {\n  // only match to posted transactions that haven't been resolved\n  if (inPosted._pendingTransaction) {\n    return -Infinity;\n  } else {\n    return pendingSimilarity(\n      pendingTransform(outPending),\n      postedTransform(inPosted)\n    );\n  }\n});\n```\n\nWe were surprised to discover that `bestMatch` would in some cases be -Infinity rather than an object. This results from Underscore performing `>` comparisons against an initial max of -Infinity. Since -Infinity is not greater than -Infinity, the initial value is erroneously returned if the iterator returns -Infinity for each element in a nonempty collection.\n\nI've implemented the least invasive fix, which is to use `>=` and `<=` in place of `>` and `<`. Note that this does change undocumented behaviour not covered by the test suite: the _last_ min/max element will be returned rather than the first. Consider a slightly modified version of the example from the documentation:\n\n``` javascript\nvar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 50}];\n_.max(stooges, function(stooge){ return stooge.age; });\n// before => {name: 'larry', age: 50}\n// after  => {name: 'curly', age: 50}\n```\n\nIf we wish to preserve this undocumented behaviour, I'll add appropriate test cases and adjust the implementations of _.min and _.max accordingly. This may simply involve enumerating the given collection in reverse order.\n",
    "head_branch": "infinity",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e63a21fa1e1f1aae45",
    "number": 1604,
    "body": "",
    "head_branch": "accidental-global",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e73a21fa1e1f1aae46",
    "number": 1602,
    "body": "- Use space in array/object literals.\n- Convert a forgotten deepEqual candidate.\n",
    "head_branch": "style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e83a21fa1e1f1aae47",
    "number": 1601,
    "body": "Fixes #1595.\n",
    "head_branch": "argument-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06e93a21fa1e1f1aae48",
    "number": 1600,
    "body": "jslitmus doesn't seem to be actually used, in that tests run fine without it.\nMoreover, it is missing from the vendor/ directory.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ea3a21fa1e1f1aae49",
    "number": 1599,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ea3a21fa1e1f1aae4a",
    "number": 1598,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06eb3a21fa1e1f1aae4b",
    "number": 1596,
    "body": "ensure the element that user has passed is a  array element\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ec3a21fa1e1f1aae4c",
    "number": 1593,
    "body": "Includes the index and a reference to the array in the arguments of the predicate. This allows for more ways to partition the data. One example is by odd and even array indices.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1b0e8a35d31877c36428074c65544cc3c8f336f1 into 90af75986610a0a71db6551bac5107b9e5c676ad"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ed3a21fa1e1f1aae4d",
    "number": 1592,
    "body": "",
    "head_branch": "is-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ee3a21fa1e1f1aae4e",
    "number": 1591,
    "body": "Testing against the actual message for any amount of detail is a bit too specific, imo. There's a chance that this could break by a native implementation tomorrow if someone decides to throw the error without passing one since it's not defined in the EMCAScript spec (http://es5.github.io/#x15.3.4.5).\n\nSee: https://github.com/mattrobenolt/underscore/commit/430ded46e1f3619fb724af8563d1adbabf512d59#commitcomment-6056683 for context and conversation.\n\n/cc @jdalton @michaelficarra\n",
    "head_branch": "better-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ef3a21fa1e1f1aae4f",
    "number": 1589,
    "body": "I've taken the exact error message that Chrome uses for the native `Function.prototype.bind`\n\n![image](https://cloud.githubusercontent.com/assets/375744/2735535/0aad38c6-c661-11e3-868f-8b1c7c372f30.png)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f03a21fa1e1f1aae50",
    "number": 1587,
    "body": "As mentioned in #413, these methods are useful internally and complements `_.indexOf` and `_.find`.\n\nIf #1582 is merged, `_.findIndex` should be identical to [`lodash.findIndex`](http://lodash.com/docs#findIndex)  and `_.findKey` should be identical to [`lodash.findKey`](http://lodash.com/docs#findKey)\n",
    "head_branch": "find-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f13a21fa1e1f1aae51",
    "number": 1586,
    "body": "_.each({length: 10, time: 2014}, func);\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f23a21fa1e1f1aae52",
    "number": 1585,
    "body": "Hello!\nThis commit added new function, for extending big object as:\n\n``` js\n\nvar source = {\n   auto: 1,\n   moto: 1,\n   boat: {\n      fly: 0,\n      cry: 1,\n      subkey: {\n      //... and so on\n      }\n   }\n}\n\nvar object = {\n   auto: 0,\n   moto: 1,\n   boat: {\n      fly: 1,\n      cry: 0,\n      dry: {\n          subkey: {\n             //... and so on\n          }\n      },\n      subkey: {\n      //... and so on\n      }\n   }\n}\n\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f33a21fa1e1f1aae53",
    "number": 1582,
    "body": "## Highlights\n- Commit 1: simple optimization ([jsperf](http://jsperf.com/underscore-create-iterators/3)) for many underscore methods common case with no context. Avoids calling `.call()` and instead calls the function directly whenever possible\n- Commit 2 (see #1561): `lookupIterator` maps passed strings to `_.property` (see #1557) and objects to `_.matches` allowing for some functionality thats existed in lodash for some time. It also allows `_.find` to cover `_.findWhere`, `_.filter` to cover `_.where`, `_map` to cover `_.pluck` and essentially adds [`_.rejectWhere`](https://github.com/jashkenas/underscore/pull/1366) as `_.reject`.\n\nThere are many side effects of this commit and so I can go grab dinner I'm going to pull examples from lodash docs (see included tests for more examples):\n\n``` javascript\nvar characters = [\n  { 'name': 'barney', 'age': 36, 'blocked': false },\n  { 'name': 'fred',   'age': 40, 'blocked': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.map(characters, 'name');\n// → ['barney', 'fred']\n\n// using \"_.pluck\" callback shorthand\n_.filter(characters, 'blocked');\n// → [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n\n// using \"_.where\" callback shorthand\n_.filter(characters, { 'age': 36 });\n// → [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n\n_.min(characters, 'age');\n// → { 'name': 'barney', 'age': 36, 'blocked': false };\n\n// using \"_.where\" callback shorthand\n_.find(characters, { 'age': 40 });\n// →  { 'name': 'fred',   'age': 40, 'blocked': true }\n\n// using \"_.where\" callback shorthand\n_.reject(characters, { 'age': 36 });\n// → [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n```\n",
    "head_branch": "Iterators2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f43a21fa1e1f1aae54",
    "number": 1581,
    "body": "A side effect of this is that IE<=8 will pass tests more regularly\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f53a21fa1e1f1aae55",
    "number": 1580,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f63a21fa1e1f1aae56",
    "number": 1579,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f63a21fa1e1f1aae57",
    "number": 1578,
    "body": "Don't hate me lol\n",
    "head_branch": "result-optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f73a21fa1e1f1aae58",
    "number": 1577,
    "body": "Per #1576. Also specced how `_.memoize` handles undefined as discussed in https://github.com/megawac/underscore/commit/6678ff828f2c4df2944ea8686d7b7148eab09f0b\n",
    "head_branch": "non-func-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f83a21fa1e1f1aae59",
    "number": 1573,
    "body": "Fixes #1533.\n",
    "head_branch": "feature/is-empty-arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06f93a21fa1e1f1aae5a",
    "number": 1572,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06fa3a21fa1e1f1aae5b",
    "number": 1571,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06fb3a21fa1e1f1aae5c",
    "number": 1568,
    "body": "Reported in lodash/lodash#523.\n\nI'm not certain what the semantics should be here, but it seems to me that `null` has no properties so it should only match when the target value has no properties.  Thoughts?\n",
    "head_branch": "matches-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06fc3a21fa1e1f1aae5d",
    "number": 1567,
    "body": "This fixes `_.isEqual` for arrays created in different documents.\n\nTest case for failing `_.isEqual` http://jsbin.com/lipasodi/1 (check console)\n",
    "head_branch": "iframe-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06fd3a21fa1e1f1aae5e",
    "number": 1559,
    "body": "",
    "head_branch": "property-guard",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06fe3a21fa1e1f1aae5f",
    "number": 1558,
    "body": "",
    "head_branch": "falsy-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e06ff3a21fa1e1f1aae60",
    "number": 1557,
    "body": "Fix #1554.\n",
    "head_branch": "iterator-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07003a21fa1e1f1aae61",
    "number": 1556,
    "body": "Closes #1552\n\nYou referred to array-likes, @jdalton, but I'm not sure how best to handle non-array array-likes. I'm open to suggestions. :)\n",
    "head_branch": "contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07013a21fa1e1f1aae62",
    "number": 1553,
    "body": "Remove a comment missed in #1525\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07023a21fa1e1f1aae63",
    "number": 1550,
    "body": "",
    "head_branch": "deep-equal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07033a21fa1e1f1aae64",
    "number": 1549,
    "body": "Fixes #1548.\n",
    "head_branch": "GH-1548",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07033a21fa1e1f1aae65",
    "number": 1545,
    "body": "Now that `_.each` no longer uses the native `forEach` it can break when `false` is returned.\n",
    "head_branch": "eachbreak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07043a21fa1e1f1aae66",
    "number": 1544,
    "body": "",
    "head_branch": "intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07053a21fa1e1f1aae67",
    "number": 1542,
    "body": "It seems a little crappy to add a function into a function, but it provides a feature that was asked in #952 without breaking backward compatibility.\n",
    "head_branch": "newDebounce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07063a21fa1e1f1aae68",
    "number": 1541,
    "body": "",
    "head_branch": "else-if-style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07073a21fa1e1f1aae69",
    "number": 1540,
    "body": "Shorten long lines, extract a function, and add comments.\n",
    "head_branch": "template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07083a21fa1e1f1aae6a",
    "number": 1538,
    "body": "Literal tab characters are perfectly legal in a string literal.  I suspect their inclusion stems from the original micro-templating implementation that replaced tabs with spaces.\n\nThanks for your help with the detective work @jdalton!\n",
    "head_branch": "template-tabs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07093a21fa1e1f1aae6b",
    "number": 1536,
    "body": "Making use of `_.partial` in `_.difference` and `_.intersection` and included few testcases as well.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e070a3a21fa1e1f1aae6c",
    "number": 1534,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e070b3a21fa1e1f1aae6d",
    "number": 1532,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e070c3a21fa1e1f1aae6e",
    "number": 1531,
    "body": "It's odd to reference an alias, here.\n",
    "head_branch": "replace-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e070d3a21fa1e1f1aae6f",
    "number": 1529,
    "body": "- test on node 0.10.x version.\n- update phantomjs version.\n",
    "head_branch": "patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e070e3a21fa1e1f1aae70",
    "number": 1528,
    "body": "As discussed in #1526.\n",
    "head_branch": "remove-aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e070e3a21fa1e1f1aae71",
    "number": 1526,
    "body": "This is the only place we use `_.each` rather than `each`.\n",
    "head_branch": "each",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e070f3a21fa1e1f1aae72",
    "number": 1525,
    "body": "Fixes #1524\n\nFor the record, I'd prefer to see us achieve consistency by moving in the _other_ direction (by matching the behaviour of Array.prototype.forEach in < ES5 environments). @jashkenas has expressed interest in _this_ change, though, so here it is. :)\n\nCommit message:\n\n> Currently, the behaviour of _.each depends on the availability of Array.prototype.forEach, which can cause code to behave differently in different environments.\n",
    "head_branch": "consistent-each",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07103a21fa1e1f1aae73",
    "number": 1520,
    "body": "The _.property method will currently throw an error if the returned function is passed in a `null` or `undefined` value. With this PR, in such a case `undefined` will be returned instead. This seems to be the least surprising behaviour as opposed to crashing the program.\n\ncontrived example:\n\n``` javascript\nvar predicate = _.compose( _.partial(_.isEqual, 'foo') , _.property('foo'), _.property('bar'));\nvar result = _.filter([{bar : {foo: 'foo'}}, {foo: 'foo'}], predicate); \nconsole.log(result); // => [{bar : {foo: 'foo'}}]  : where as it would crash before\n```\n",
    "head_branch": "propertyfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07113a21fa1e1f1aae74",
    "number": 1518,
    "body": "Currently surprisingly `_.contains` is slower than `_.indexOf` when called with small arrays (except FireFox), see [this](http://jsperf.com/contains-vs-indexof-on-arrays/3), this PR improved the performance of `_.contains`. see it [here](http://jsperf.com/improve-contains/4).\n\nThis can affect on any function that uses `_.contains`, currently: `_.uniq`, `_.intersection`, `_.difference` and `_.omit`.\n\nThe amazing thing is that, this can improve performance of `_.contains` even when it called with arrays on modern browsers. While we know that when `_.contains` called on arrays, this method uses the `indexOf` of the array and the execution path never reaches to the function `any`. I think that relates to optimization algorithms used by JavaScript engines.\n\nThis change increases the ease of access to the closure variable `target` by wrapping the callback in an IIFE.\n",
    "head_branch": "improve-contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07123a21fa1e1f1aae75",
    "number": 1517,
    "body": "According to PR #1511 `_.filter`, `_.every` and `_.uniq` removed in favor of for-loops.\n\njsPerf: [optimized-intersection](http://jsperf.com/optimized-intersection/4)\nNote: The original jsPerf test only compares the current and new implementations of underscores `intersection`.\n",
    "head_branch": "optimized-intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07133a21fa1e1f1aae76",
    "number": 1515,
    "body": "This pull request fulfills the proposal suggested in #1495. With this addition, `_.result` now supports:\n\n``` javascript\n_.result(null, 'method', 'default') // => 'default'\n_.result('string'.match('missing'), 1, 'default'); // => 'default'\n_.result({}, 'method', 'default') // => default\n```\n\nEDIT: Additionally, falling back to a default value when given an object and a property will only happen if the result of _.has(object, property) is falsy:\n\n``` javascript\n_.result({}, 'method', 'default') // => 'default'\n_.result({ method: null }, 'method', 'default') // => null\n_.result({ method: undefined }, 'method', 'default') // => undefined\n```\n\nI had considered allowing the default value to be a function, which could be fairly useful. However that requires a more significant change and I wanted to first gauge if others found this would be particularly valuable.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07143a21fa1e1f1aae77",
    "number": 1513,
    "body": "Currently, the descriptions of \"Development Version\" and \"Production Version\" are in title case, while the description of \"Edge Version\" is in sentence case.\n",
    "head_branch": "capitalization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07153a21fa1e1f1aae78",
    "number": 1512,
    "body": "These cases were mentioned by @jdalton in a [comment](https://github.com/jashkenas/underscore/pull/1511#issuecomment-37110292) on #1511. They warrant inclusion in the test suite.\n",
    "head_branch": "intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07163a21fa1e1f1aae79",
    "number": 1511,
    "body": "`_.intersection` can be faster if the smallest set is passed to the `_.filter` instead of the first one.\n\nWe can do this because of `commutative property` of sets:\nA ∩ B = B ∩ A\n\njsPerfs:\n[small set[3] as the first passed set](http://jsperf.com/improve-intersection/9)\n[medium set[10] as the first passed set](http://jsperf.com/improve-intersection/8)\n[large set[100] as the first passed set](http://jsperf.com/improve-intersection/10)\n",
    "head_branch": "improve-intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07173a21fa1e1f1aae7a",
    "number": 1510,
    "body": "`_.map` can be removed from the implementation of `_.omit` to operate a bit faster.\njsPerf: [_.omit with and without _.map](http://jsperf.com/omit-without-map)\n",
    "head_branch": "improve-omit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07183a21fa1e1f1aae7b",
    "number": 1507,
    "body": "Using the same letters \"moe\" for variable name and property value can confuse newcomers and those glancing at the docs/tests of _.property\nChanging the variable name from \"moe\" to \"stooge\" eliminates this double meaning and is more consistent with the rest of the project\nSimilar docs and related tests were likewise updated\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07193a21fa1e1f1aae7c",
    "number": 1503,
    "body": "- Should _.complement take an optional context argument? Currently it does not; I followed underscore-contrib's lead here.\n- It's quite hard to come up with a straightforward example for the documentation which isn't better expressed with one of Underscore's existing complements (we can't use _.filter, for example, given the existence of _.reject). Interestingly, had Underscore included _.complement from day one, we mightn't need _.reject and friends.\n- Should redefining _.reject, _.omit, etc. in terms of _.complement be part of this pull request?\n",
    "head_branch": "complement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e071a3a21fa1e1f1aae7d",
    "number": 1502,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e071b3a21fa1e1f1aae7e",
    "number": 1501,
    "body": "`_.omit` can be implemented via `_.pick` so we have a more DRY code.\n",
    "head_branch": "improve-omit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e071c3a21fa1e1f1aae7f",
    "number": 1499,
    "body": "I usually call my noops `nop` and I think its pretty common for other developers as well. See http://en.wikipedia.org/wiki/NOP.\n\nSince we have aliases for other operations, maybe its worth adding this one too.\n",
    "head_branch": "nop-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e071d3a21fa1e1f1aae80",
    "number": 1498,
    "body": "It's not necessary to include the minified version in component.json. Component-build will produce a minified bundle automatically. This is a regression introduced by #1470 \n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e071d3a21fa1e1f1aae81",
    "number": 1497,
    "body": "This is an unassuming function, but I've found myself defining it more often than one might imagine.\n\nAn example of a situation in which this function is useful:\n\n``` coffeescript\nf = (x, success = (->), error = (->)) ->\n```\n\n``` coffeescript\nf = (x, success = _.noop, error = _.noop) ->\n```\n",
    "head_branch": "noop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e071e3a21fa1e1f1aae82",
    "number": 1496,
    "body": "http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-xssi\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e071f3a21fa1e1f1aae83",
    "number": 1493,
    "body": "- _.uniq only supports arrays, use loop appropriately.\n- Dispense with extra array creation.\n",
    "head_branch": "uniq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07203a21fa1e1f1aae84",
    "number": 1492,
    "body": "See #1491 for the thinking behind this addition.\n",
    "head_branch": "bind-description",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07213a21fa1e1f1aae85",
    "number": 1490,
    "body": "",
    "head_branch": "keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07223a21fa1e1f1aae86",
    "number": 1487,
    "body": "Added an example to size method in the documentation for an array along with list(which was already present in the documentation). Found out interesting feature of _.keys which returns the index values  of the elements in an array as keys.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07233a21fa1e1f1aae87",
    "number": 1486,
    "body": "I've found that it's quite common to want to use an object method as a timeout callback. That means you have to do this...\n\n```\n    _.delay(function(){obj.method();},time);\n```\n\n...or this...\n\n```\n    _.delay(_.bind(obj.method,obj),time]);\n```\n\n...to ensure that the context is correct. With this proposed change, you instead do this:\n\n```\n    _.delayMethod(obj,\"method\",time);\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07243a21fa1e1f1aae88",
    "number": 1485,
    "body": "Based on #1472.  Tweaked to branch for iterator case and cleaned up tests.\n",
    "head_branch": "pick-omit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07253a21fa1e1f1aae89",
    "number": 1484,
    "body": "Small typo needs to be fixed.\n",
    "head_branch": "fix-typo-bower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07263a21fa1e1f1aae8a",
    "number": 1482,
    "body": "When working on project with Backbone, I often find such a pattern that I need to define a config object inside View/Model/Collection, which contains both values and functions. Something like this\n\n``` javascript\nvar Foo = Backbone.collection.extend({\n  this.query: {\n    perPage: 10,\n    page: function(){this.nextPage()};\n  }\n});\n```\n\nI have not found a quick way to convert `this.query` to object with plain values only, when `_.result()` only deals with single key. So I added this method `_.results` which will iterate a whole one level only object, invoke each function and return values, as well as applying context as needed.\n\nHope this would be useful.\n",
    "head_branch": "add-results-method",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07273a21fa1e1f1aae8b",
    "number": 1481,
    "body": "Solves issue #1480.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07283a21fa1e1f1aae8c",
    "number": 1479,
    "body": "Apologies for the back and forth, but I didn't take into account in #1476 that this would be breaking change for 1.6.0.  I think we should just move the docs and leave the collection support.  I've also renamed the `array` argument as `obj`.\n",
    "head_branch": "partition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07283a21fa1e1f1aae8d",
    "number": 1478,
    "body": "The adition of `_.now` made it much harder to use fake timers when testing (e.g., http://sinonjs.org/docs/#clock), because we need to stub `Date.now` before loading Underscore. This is not practical at all and doesn't allow for using fake timers only in some tests.\n\nThis patch adds a wrapper function around `Date.now`.\n\nI understand that this may incur a small performance penalty, but I think that being able to test code that uses `_.now` (directly or indirectly) is more important.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07293a21fa1e1f1aae8e",
    "number": 1476,
    "body": "Edit docs accordingly.\n",
    "head_branch": "partition-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e072a3a21fa1e1f1aae8f",
    "number": 1475,
    "body": "Alter the docs accordingly.\n",
    "head_branch": "now-utility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e072b3a21fa1e1f1aae90",
    "number": 1474,
    "body": "Based on #1428, I tweaked things a bit more (comments inline).\n\n@michaelficarra I also dislike the extra boolean argument but I'm not sure what to do about it as all the other methods I can think of are a performance compromise (options hash, separate filter).  I'm not a big fan of co-opting `_.flatten` at all but it otherwise we're essentially including it twice.  Suggestions welcome!\n",
    "head_branch": "array-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e072c3a21fa1e1f1aae91",
    "number": 1473,
    "body": "I have found that if the system time is moved backwards, calls to throttle will stop executing.\n\nTo test this, if the system time is moved backwards by an hour then the `remaining` variable in `_.throttle` containing the time offset becomes a large positive integer and the throttle callback will not be called until the adjusted hour time difference has passed, instead of the expected wait time. \n\nFor this reason I suggest that an additional check is made to see if `remaining` exceeds the `wait` time which will then clear the existing timeout and return the method to a normal state.\n\nI have tested this in a project and provided a unit test as proof.\n",
    "head_branch": "throttle-system-date-change",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e072d3a21fa1e1f1aae92",
    "number": 1472,
    "body": "Here's a small change that would add support for using predicates with `pick` and `omit`. The interface would support `_.pick(obj, 'key1', 'key2')` and `_.pick(obj, predicate)`. It's based on the discussion from #359 #833. If this feels like interface bloat, I think `_.subset(obj, predicate)` would be a good alternative.\n\nRegardless of the api, adding an easy option for getting a subset of an object feels right. Using `reduce` is a lot of boilerplate and unintuitive for many people. \n\n``` js\n_.reduce(obj, function(memo, v, k) {if(predicate) memo[k] = v; return memo}, {})\n```\n\nHere's a small code sample for how `omit` and `pick` would work.\n\n``` js\nvar data = { 'name': 'moe', 'userid': 'moe1' , '_hint': 'knucklehead', '_seed': '96c4eb' };\n\n_.pick(data, 'name');                                                    \n_.pick(data, function(value, key) {  return key.charAt(0) != '_'; });    \n\n_.omit(data, 'userid');                                                                      \n_.omit(data, function(value, key) { return key.charAt(0) == '_'; });  \n\n// → { 'name': 'moe' }\n// → { 'name': 'moe', 'userid': 'moe1' }\n// → { 'name': 'moe', 'age': 40, 'userid': 'moe1' }\n// → { 'name': 'moe', 'userid': 'moe1' }\n```\n",
    "head_branch": "pick-pred",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e072e3a21fa1e1f1aae93",
    "number": 1471,
    "body": "`_.each` returns a reference to the list which _may_ have been mutated by the iterator.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e072f3a21fa1e1f1aae94",
    "number": 1469,
    "body": "Rationale:\n- CHANGES is a useful file to include in the repository.\n- Markdown files are nice to read in a terminal; HTML files less so.\n- Markdown is more writer-friendly, too. (@jashkenas raised the issue of ease of authoring in #1457.)\n- \"Diff\" and \"Docs\" links are automatically inserted, removing a source of human error.\n- By introducing a template, future markup changes need only be made in one place.\n\nIf there's support for this approach I'll complete [CHANGES.md](https://github.com/davidchambers/underscore/blob/generate-changelog/CHANGES.md) and tweak the CSS to avoid introducing visible changes.\n",
    "head_branch": "generate-changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07303a21fa1e1f1aae95",
    "number": 1468,
    "body": "related to #1421\n\nIt's a breaking change (although I doubt it will affect much) but it makes a lot more sense than how `_.toArray` is implemented now, plus it seems to be how `Array.from` is speced out.\n\nIf the value passed into `_.toArray` is an array like object (or an array) then an array is returned , if not an empty array is returned. Very simple.\n",
    "head_branch": "toArrayFix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07313a21fa1e1f1aae96",
    "number": 1467,
    "body": "for issue #1412\n",
    "head_branch": "asArray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07323a21fa1e1f1aae97",
    "number": 1466,
    "body": "I think this is supposed to be here :dancer:\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07323a21fa1e1f1aae98",
    "number": 1465,
    "body": "",
    "head_branch": "semis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07333a21fa1e1f1aae99",
    "number": 1464,
    "body": "According to `setTimeout` [syntax](https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout) we can pass arguments to executable function after `delay` argument\n\n``` javascript\nsetTimeout(function(a, b){\n  console.log('args', a, b);\n}, 0, 'this is a', 'this is b');\n```\n\nIn `delay` method we can apply `func`, `wait` and all args as one argument list. Also using this approach `func` saves context.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07343a21fa1e1f1aae9a",
    "number": 1463,
    "body": "",
    "head_branch": "partition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07353a21fa1e1f1aae9b",
    "number": 1462,
    "body": "```\n$ git show 1.4.2\ncommit 87cac5bd057ceafd6f779b1df33de61ca21b5e1d\nAuthor: Jeremy Ashkenas <jashkenas@gmail.com>\nDate:   Sat Oct 6 23:04:37 2012 -0400\n\n    Underscore.js 1.4.2\n```\n",
    "head_branch": "fix-release-date",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07363a21fa1e1f1aae9c",
    "number": 1461,
    "body": "After had already written this, I read the contributing file which mentions looking up existing functionality in contrib. There is an `omitWhen` method which allows you to pass a predicate for matching against values. While this can achieve the same thing, the functionality is not explicit, unlike `omitValues`. \n\nI needed the functionality and I forgot about contrib. No biggy if you think this is to analogous to `omitWhen`.\n\nIf you need a use case consider a need for default values, but an object's value for any key could potentially be  an empty string. In my mind, I would think `_.defaults` would be the right choice, but it doesn't see an empty string as an unset value (which makes sense).\n\n```\nvar props = { age: 43 };\nvar instanceProps = { name: '' };\nvar defaults = { name: 'unknown' };\n_.defaults(props, instanceProps, defaults); // { age: 43, name: '' } \n_.defaults(props, _.omitValues(instaceProps, ''), defaults); // { age: 43, name: 'unknown' } \n```\n\nOne thought on matching values. The behavior will likely be incorrect for objects unless you pass the reference directly as a value to omit. This should probably be of note that you can only omit primitives unless you pass in reference.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07373a21fa1e1f1aae9d",
    "number": 1460,
    "body": "Also add some keywords to help with finding/filtering in the Bower registry.\n",
    "head_branch": "unnecessary-files-in-bower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07383a21fa1e1f1aae9e",
    "number": 1459,
    "body": "Currently, Underscore is not routinely tested in a node environment or across multiple browsers unless it's done manually.  This causes errors to [slip through](http://git.io/1C2YYQ) undetected (I point this out to illustrate that they slip through as we all make errors of this kind from time to time).  In an attempt to improve the testing situation a bit, this patch replaces QUnit with [tape](https://github.com/substack/tape) with the following benefits.\n- Tests can be run in a commonjs environment like node.\n- Automated cross browser testing via [testling](http://testling.com) ([example from my fork](http://ci.testling.com/braddunbar/underscore)).\n\n_Note: Running tests now requires a build step, something we can probably work around if necessary._\n",
    "head_branch": "tape",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07393a21fa1e1f1aae9f",
    "number": 1458,
    "body": "",
    "head_branch": "max-min-style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e073a3a21fa1e1f1aaea0",
    "number": 1457,
    "body": "The markup change is purely semantic; the site's appearance is unchanged. Using time elements (with some straightforward styling) seems cleaner than the current small+i combo.\n\nTo ensure I didn't introduce any typos, I wrote a couple of scripts and compared their output.\n\n``` bash\ngit tag | xargs -I {} \\\n  git --no-pager log --max-count=1 --pretty=format:'%d | %ad | %ad\n' --date=short --decorate=short {} | \\\n  sed -e 's/ (tag: \\(.*\\))/\\1/' \\\n      -e 's/ \\([0-9]*\\)-0*\\([0-9]*\\)-0*\\([0-9]*\\)$/ \\2 \\3, \\1/' \\\n      -e 's/ 1 / January /' \\\n      -e 's/ 2 / February /' \\\n      -e 's/ 3 / March /' \\\n      -e 's/ 4 / April /' \\\n      -e 's/ 5 / May /' \\\n      -e 's/ 6 / June /' \\\n      -e 's/ 7 / July /' \\\n      -e 's/ 8 / August /' \\\n      -e 's/ 9 / September /' \\\n      -e 's/ 10 / October /' \\\n      -e 's/ 11 / November /' \\\n      -e 's/ 12 / December /'\n```\n\n``` javascript\n_.chain(document.querySelectorAll('[id]'))\n  .filter(function(el) {\n    return /^\\d\\.\\d\\.\\d$/.test(el.id);\n  })\n  .map(function(el) {\n    var time = el.querySelector('time');\n    return [el.id, time.getAttribute('datetime'), time.innerHTML].join(' | ');\n  })\n  .value()\n  .reverse()\n  .join('\\n');\n```\n\nI noticed that the 1.4.2 release date was incorrect, so fixed it in an isolated commit. The only remaining differences are 0.5.3 and 1.3.2 which, though tagged, do not appear in the change log. I believe this is intentional.\n",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e073b3a21fa1e1f1aaea1",
    "number": 1455,
    "body": "As requested by @jashkenas in #1440.\n",
    "head_branch": "capitalization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e073c3a21fa1e1f1aaea2",
    "number": 1454,
    "body": "We're currently using three different formats:\n\n```\n- Apr 1, 2000\n- Apr. 1, 2000\n- April 1, 2000\n```\n\nI don't see a compelling reason to abbreviate in this context, so I've used full month names. If there's a strong preference for another format, I'm happy to update this pull request accordingly. Any of the above formats is acceptable… we just need to pick one. :)\n",
    "head_branch": "date-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e073d3a21fa1e1f1aaea3",
    "number": 1453,
    "body": "```\n$ git show 0.3.2\ncommit d2d1285e26a206278ae9f711a589b5e49f54c60e\nAuthor: Jeremy Ashkenas <jashkenas@gmail.com>\nDate:   Thu Oct 29 14:45:56 2009 -0400\n\n    version 0.3.2, with 'identity', and Rhino support\n```\n\nCurrently, 0.3.2 appears to have been released _before_ 0.3.1. ;)\n",
    "head_branch": "fix-release-date",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e073e3a21fa1e1f1aaea4",
    "number": 1452,
    "body": "Extracted from #1449.\n",
    "head_branch": "compare-view-urls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e073e3a21fa1e1f1aaea5",
    "number": 1451,
    "body": "Extracted from #1449. This brings the treatment of these contributors in line with mentions elsewhere in the document:\n\n``` html\n<a href=\"https://github.com/username\">First Last</a>\n```\n",
    "head_branch": "contributors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e073f3a21fa1e1f1aaea6",
    "number": 1450,
    "body": "Extracted from #1449.\n",
    "head_branch": "br",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07403a21fa1e1f1aaea7",
    "number": 1449,
    "body": "",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07413a21fa1e1f1aaea8",
    "number": 1448,
    "body": "One optimization applied to `_.max` and `_.min` to prevent object creation in their loops. This change affects when passing large lists (length >= 65535) to this functions.\n\nPerformance gain depends on the arrangement of the passed lists to this functions:\nAn ascending sorted list is a bad arrangement for the `_.max` and a descending sorted list is bad for the `_.min`.\n\nI prepared 4 jsPerfs to show you performance gains of this changes:\n(`_.max` and `_.min` are the current versions and `_.max2` and `_.min2` are the new versions of this functions.)\n\n`_.max` on a large randomly arranged list: [_.max(randomList)](http://jsperf.com/underscores-max-random-list/4)\n`_.min` on a large randomly arranged list: [_.min(randomList)](http://jsperf.com/underscores-min-random-list/4)\n`_.max` on a large bad arranged list: [_.max(badList)](http://jsperf.com/underscores-max-bad-list/6)\n`_.min` on a large bad arranged list: [_.min(badList)](http://jsperf.com/underscores-min-bad-list/4)\n",
    "head_branch": "optimize-min-max",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07423a21fa1e1f1aaea9",
    "number": 1445,
    "body": "",
    "head_branch": "canonical-urls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07433a21fa1e1f1aaeaa",
    "number": 1444,
    "body": "- Underscore is now more widely recognized than Prototype.js, so describing the former as resembling the latter is not as helpful as it once was.\n- We currently describe Underscore as both a tool-belt and a tie. :)\n- I dropped the comma after \"tux\". The comma doesn't seem right to me.\n- \"Backbone.js's suspenders\" is awkward. People refer to the library as Backbone in conversation, so dropping the suffix in this sentence seems sensible.\n",
    "head_branch": "introduction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 312785a94f8671d49fdbd46462bc1f2816d5b660 into d112d26edb527ef3133c542ce819436b5a969e28"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07443a21fa1e1f1aaeab",
    "number": 1443,
    "body": "",
    "head_branch": "dev-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07453a21fa1e1f1aaeac",
    "number": 1442,
    "body": "",
    "head_branch": "fix-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07463a21fa1e1f1aaead",
    "number": 1441,
    "body": "This seems like correct behaviour given that regexp string representations are normalized:\n\n``` javascript\n> /foo/ig.toString()\n'/foo/gi'\n```\n",
    "head_branch": "regexp-flag-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07473a21fa1e1f1aaeae",
    "number": 1440,
    "body": "- boolean → Boolean (named after a fellow named Boole)\n- Finite → finite\n- Javascript → JavaScript\n",
    "head_branch": "capitalization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07483a21fa1e1f1aaeaf",
    "number": 1439,
    "body": "Since `*` indicates zero or more occurrences, asterisk-prefixed args needn't be marked optional (via `[...]`).\n\n---\n\nThe analogous regular expressions are `(.*)?` and `.*`. :)\n",
    "head_branch": "signatures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07483a21fa1e1f1aaeb0",
    "number": 1438,
    "body": "This is useful for comparing all the items in a collection:\n\n``` javascript\n_.isEqual.apply(_, items)\n```\n\nThe naming is a bit awkward. In certain contexts **equal** sounds best:\n\n``` javascript\n_.equal(a, b, c)\n```\n\nIn other contexts, **isEqual** is better:\n\n``` javascript\n_(a).isEqual(b)\n```\n\nI stuck with the existing name as it's the least disruptive change.\n\n---\n\nClojure's [`=`](http://clojuredocs.org/clojure_core/clojure.core/=) raises an ArityException if passed no arguments. I asked on `#clojure` whether this is because it's nonsensical to ask whether all the elements in the empty set are equal. Apparently this is not the case: it's a valid question and the answer is yes, all the elements are equal.\n",
    "head_branch": "variadic-equality-function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07493a21fa1e1f1aaeb1",
    "number": 1437,
    "body": "Earlier today I wanted to link to http://underscorejs.org/#1.1.3. This pull request will enable linking to the release notes for a particular version.\n",
    "head_branch": "anchors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e074a3a21fa1e1f1aaeb2",
    "number": 1436,
    "body": "``` javascript\n'string without quotes'\n\"string with 'single' quotes\"\n'string with \"double\" quotes'\n'string with \\'single\\' and \"double\" quotes'\n```\n",
    "head_branch": "quotes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e074b3a21fa1e1f1aaeb3",
    "number": 1435,
    "body": "",
    "head_branch": "predicate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e074c3a21fa1e1f1aaeb4",
    "number": 1434,
    "body": "#1392 updated **underscore.js** but not **LICENSE**.\n",
    "head_branch": "copyright-year",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e074d3a21fa1e1f1aaeb5",
    "number": 1433,
    "body": "Hello!\n\nI got some ideas for some functions. I have programmed and tested 17 new function:\n- **keep**\n- **clear**\n- **unify**\n- **in**\n- replaceItems\n- properties\n- numberOf\n- duplicates\n- remove\n- move\n- sum\n- mean\n- delta\n- removeItems\n- AND\n- OR\n- propertyContains\n\n(All the functions is described as comments in the source)\n\nMaybe some of them are notable? \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e074e3a21fa1e1f1aaeb6",
    "number": 1432,
    "body": "This commit removes the bug with object and array identification.\n\nBefore:\n _.isObject([1,2,3,4])\n  => true\nWith this commit:\n _.isObject([1,2,3,4])\n  => false\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e074f3a21fa1e1f1aaeb7",
    "number": 1431,
    "body": "This prevents concat errors when underscore is included just after the semicolon-less library, like Zepto.\n",
    "head_branch": "sc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07503a21fa1e1f1aaeb8",
    "number": 1430,
    "body": "Fixes #349.\n",
    "head_branch": "GH-349",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07513a21fa1e1f1aaeb9",
    "number": 1429,
    "body": "Perhaps trivial but worth including for completeness sake.\n",
    "head_branch": "each-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07523a21fa1e1f1aaeba",
    "number": 1428,
    "body": "According to PR #1317, `_.union` and `_.difference` have been restricted to accept arrays only.\nThis accomplished by adding a new parameter named `strict` to the internal `flatten` function.\n\nSo we have:\n\n``` javascript\n_.union([1, 2], [3]) // => [1, 2, 3]\n_.union([1, 2], 3) // => [1, 2]\n\n_.difference([1, 2], [1]) // => [2]\n_.difference([1, 2], 1) // => [1, 2]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 520c29665d196f739e859a2078cb913992b57d2f into 33793f6b1ffde8ab47700a055d5b3c61e8cbc0eb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07533a21fa1e1f1aaebb",
    "number": 1426,
    "body": "Not sure why 'later' was defined within the returned function by _.debounce, since it only captures variables defined in the above scope. So moved it up to keep it consistent with _.throttle and also gain a bit of speed this way.\n",
    "head_branch": "debounce_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07543a21fa1e1f1aaebc",
    "number": 1425,
    "body": "Allow arguments to be passed to object method in `_.result()` call.\n\nSince the `_.result()` function is a handy way of conditionally calling a method that may not exist, it should support passing arguments through to the method that is being invoked.\n\nExample:\n\n``` JavaScript\n// Underscore hotness:\nvar answer = _.result(obj, 'z', 'foo');\n\n// Rough equivalent in pure JS:\nvar answer;\nif (obj && obj.z) {\n  answer = obj.z('foo');\n}\n```\n",
    "head_branch": "result-apply-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07553a21fa1e1f1aaebd",
    "number": 1424,
    "body": "Since jQuery is not a dependency of Underscore and is not actually required for the test suite, let's ditch it as a test dependency as well.\n- Remove jQuery development dependency.\n- Remove DOM-specific tests that are just testing Array-likes.  To my understanding, these are not necessary and are supported because we support Array-likes.\n- Drop jslitmus as we did for Backbone.\n",
    "head_branch": "jquery",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07563a21fa1e1f1aaebe",
    "number": 1423,
    "body": "Bringing this back up - the last time I saw this being discussed is [#578](https://github.com/jashkenas/underscore/issues/578).\n\nCurious on thoughts as given a comparitor case is the more common use case from my experience with the functions.\n\nRemoving the native apply also normalizes the output for some oddities mentioned in [#728](https://github.com/jashkenas/underscore/issues/728) when given a positive number as the first argument  and make the functions more consistent in general (for absurdly large collections)\n\nE.g.\n\n```\n_.max([1, NaN]) //1 instead of NaN\n```\n\n[**Updated jsperf**](http://jsperf.com/simplified-max-min/2)\n",
    "head_branch": "_.max",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07563a21fa1e1f1aaebf",
    "number": 1422,
    "body": "This implementation removes an array allocation and reduces the complexity quite a bit.\n",
    "head_branch": "partial-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07573a21fa1e1f1aaec0",
    "number": 1420,
    "body": "I noticed that at least for my taste the current implementation of `_.object` can be made more high level, clearer and shorter if we use `_.reduce` and `_.zip`:\n\nThe current version:\n\n``` javascript\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n```\n\nAlternative implementation using `._reduce` and `._zip` that I found:\n\n``` javascript\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var pairs = values ? _.zip(list, _.take(values, list.length)) : list;\n    return _.reduce(pairs, function(result, pair) {\n        result[pair[0]] = pair[1];\n        return result;\n    }, {});\n  };\n```\n\nIf we omit `_.take(values, list.length)` and just use `values` then the code will be even clearer but the backward compatibility will be broken according to the first test case I added (see below).\n\nWhat do you think, should we substitute the current implementation of `_.object` with the alternative one? \n#### Testing\n\nI checked that the unit tests pass and added a few new ones to ensure backward compatibility for corner cases. \n\n``` javascript\n  test('object', function() {\n...\n\n    ok(_.isEqual(_.object([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5]), {\"a\": 1, \"b\": 2, \"c\": 3}), 'extra values are ignored');\n    ok(_.isEqual(_.object([void 0, \"b\", \"c\"], [1, 2, 3]), {undefined: 1, \"b\": 2, \"c\": 3}), '\"void 0\" is handled in keys');\n    ok(_.isEqual(_.object([void 0, \"b\", void 0], [1, 2, 3]), {\"b\": 2, undefined: 3}), 'several \"void 0\" are handled in keys');\n  });\n```\n#### Performance concerns\n\nOne thing that can be worse in the alternative version compared to the current one is using more memory by creating an extra object `pairs` and having extra calls to higher level functions `_.take`, `_.zip` and `_.reduce`. But on the other hand it is a bit more expressive.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07583a21fa1e1f1aaec1",
    "number": 1418,
    "body": "This takes the tweak suggested in #1417 one step further.\n",
    "head_branch": "intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07593a21fa1e1f1aaec2",
    "number": 1416,
    "body": "The current implementation of `toArray` coerces `String`s into `Array`s of characters. These commits adds an opt-in flag directing it to leave strings in tact.\n\nGiven:\n\n``` js\nvar array;\nvar string = 'a string';\n```\n\nallows code such as:\n\n``` js\nif (! _.isArray(string)) {\n  array = [string];\n}\n```\n\nto be simplified to:\n\n``` js\narray = _.toArray(string, true);\n```\n\nresulting in:\n\n``` js\n['a string']\n```\n\ninstead of (currently):\n\n``` js\n['a', ' ', 's', 't', 'r', 'i', 'n', 'g']\n```\n",
    "head_branch": "no-coerce-toArray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e075a3a21fa1e1f1aaec3",
    "number": 1415,
    "body": "Official repo was moved to https://github.com/epeli/underscore.string\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e075b3a21fa1e1f1aaec4",
    "number": 1410,
    "body": "Expose the internal function `getTime` as `_.now` and alias `_.getTime`.\n\nI'm not sure if there was a good reason for this to be exclusively internal, but I thinking getting the current time in ms is a common enough need to justify exposing.\n",
    "head_branch": "now",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e075c3a21fa1e1f1aaec5",
    "number": 1409,
    "body": "This correlates to issue #1155.  It also renders #1338 and #1366 unnecessary.\nIt avoids overloading `_.has` as was requested by some.\n",
    "head_branch": "match",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 131aeaf85f0346fa463975d1b66dab60bcaa14f4 into 4c08b0e7f8f2862154ae1745166e21ac1616bc81"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e075d3a21fa1e1f1aaec6",
    "number": 1406,
    "body": "Some time ago, an optimization was accepted for `_.each` (10695ba5) that uses `_.keys` for iteration instead of `for (var prop in obj)`.  This has broken the usage of `_.each(false, ...)` and friends by throwing instead of acting as a no-op.  I don't see a good reason we should throw at all on non-objects and I propose that we do not.\n\nFurther, the `_.keys` optimization has been used in several other methods that now throw on non-object arguments (`pairs`, `invert`, `size`, `values`).  I've commented on this before in #1286 and I still think these micro-optimizations are much less important than not throwing unexpectedly, especially in a backwards incompatible manner.\n\n_Note: The actual usage wasn't `_.each(false, ...)`.  It was `_.each(unexpectedVaryingReturnType(), ...)`._\n",
    "head_branch": "keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e075e3a21fa1e1f1aaec7",
    "number": 1405,
    "body": "I want to support passing null to _.invoke to allow this:\n\ntest('invoke each object w/ falsy method', function(){\n    var list = [function(a){return a;}, function(a){return a*2}];\n    var result = _.invoke(list, null, 42);\n    equal(result.join(', '), '42, 84', 'invoked on functions themselves');\n});\n\nI've added the text to the docs and made a test.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e075f3a21fa1e1f1aaec8",
    "number": 1402,
    "body": "Get the value of array using positive and negative index\nEg:\n_.get([1,2,3], -1);\n// 3\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07603a21fa1e1f1aaec9",
    "number": 1401,
    "body": "Add the _.interval(interval, fn) method\nif _.after is analog to setTimeout then _interval is analog to setInterval.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07613a21fa1e1f1aaeca",
    "number": 1399,
    "body": "As proposed in issue #1345 here's a pull request for _.method, i.e. method function support,\n\nThis is quite concise when executing the same function on a collection of objects (varying context), e.g.\n\n_.any(views, _.method(\"isDisabled\"));\n\nIn addition, _.method supports currying, e.g.\n\n_.method(foo, 3)\n\nwill create a member function that calls foo with 3 as the first argument.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07613a21fa1e1f1aaecb",
    "number": 1398,
    "body": "I just came by a very good [article](http://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/) then i thought it would be good to have a method like that in underscore.js\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07623a21fa1e1f1aaecc",
    "number": 1395,
    "body": "Fixes #1390.\n",
    "head_branch": "GH-1390",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07633a21fa1e1f1aaecd",
    "number": 1394,
    "body": "In _.groupBy new arrays are created empty, then the current value is added via array.push. It would be faster to create new arrays and assign value in one step and only call push on existing arrays.\n\nA jsperf comparison as proof of concept: http://jsperf.com/array-push-vs-literal\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07643a21fa1e1f1aaece",
    "number": 1392,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07653a21fa1e1f1aaecf",
    "number": 1389,
    "body": "",
    "head_branch": "trim-template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07663a21fa1e1f1aaed0",
    "number": 1387,
    "body": "See [EditorConfig.org](http://editorconfig.org)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07673a21fa1e1f1aaed1",
    "number": 1384,
    "body": "Extended Objects with a serialize method, which has long been missing imo. Tend to write this into a utility function or a few lines of code, where it's not appropriate to use $.param(). Would prefer to see it readily available in this library, although it's more abstracted than some other Underscore methods. Otherwise, it could be demoted and qualify as a useful _.mixin that I'll commit elsewhere.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07683a21fa1e1f1aaed2",
    "number": 1382,
    "body": "This is another implementation of #1276/#1318. @jashkenas requested a simpler solution[¹](https://github.com/jashkenas/underscore/pull/1318#issuecomment-27896798); hopefully this fits the bill.\n\nPossible example for the docs, should this pull request be accepted:\n\n``` javascript\nvar product = _.partial(_.reduce, _, function(a, b) { return a * b; }, 1);\nproduct([2, 3, 7]);\n=> 42\n```\n",
    "head_branch": "partial-placeholders",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07693a21fa1e1f1aaed3",
    "number": 1379,
    "body": "Addresses #1344\n",
    "head_branch": "escape-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e076a3a21fa1e1f1aaed4",
    "number": 1378,
    "body": "I was developing and wasn't really thinking too closely about what I was doing but I passed a string to _.indexOf expecting it to delegate to the native String.prototype.indexOf method. When it didn't work correctly I thought about what I was doing a bit and realized it was silly since String.prototype.indexOf is supported in all major browsers.\n\nAt first I chalked it up to the fact I was just being dumb. Then I thought about it more and realized that _.indexOf actually does work on strings as long as your only looking for one character.\n\nExample:\n_.indexOf('foo', 'o'); // returns 1\n_.indexOf('foo', 'oo'); // returns -1\n\nBecause of the example above I felt this pull request might make sense. Check to see if a string was passed, if true return the result of the strings .indexOf method else continue with regular execution of _.indexOf.\n\nDoes this make sense to anyone else?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e076b3a21fa1e1f1aaed5",
    "number": 1377,
    "body": "I think we can all agree that returning the popped value from `_(array).pop()` is more useful than returning the array.  This change keeps the existing behavior when chaining and returns the more useful value otherwise.\n\n_Note: This is a breaking change.  We may want to put it off for some time before releasing._\n",
    "head_branch": "pop-result",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e076b3a21fa1e1f1aaed6",
    "number": 1374,
    "body": "This is a proposal to refine the _ documentation by:\n1) Adding subcategories, eg, Collections/Filters.\n2) Adding types for args & return values.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e076c3a21fa1e1f1aaed7",
    "number": 1373,
    "body": "I frequently find myself defining namespaces, so I thought it would be a good idea to implement a utility that does so in a concise, readable and secure way.\n\nFrom Stoyan Stefanov's book: _\"Namespaces help reduce the number of globals required by our programs and at the same time help avoid naming collisions or excesive name prefixing\"_.\n\nSome examples of the current implementation are:\n\n``` javascript\n_.namespace('APP.modules.tests');\n// Creates the following structure:\nAPP = { \n  modules: {\n    tests: {\n    }\n  }\n}\n```\n\nThen, you can do the following without erasing the previous namespace:\n\n``` javascript\n// Preserve the APP.modules.test namespace and add a new one\n_.namespace('APP.modules.events').event1 = function() { \n  // Dependencies can be managed with _.namespace as well\n  var tests = _.namespace('APP.modules.tests'),\n      utilities = _.namespace('APP.modules.utilities');\n\n  // Function code ...\n  tests.doSomething();\n\n}\n```\n\nBy default namespace creation begins from the global object. This is because I assume that the most common use case for namespaces is to avoid global function declaration. However, the parent object can be specified in the following way:\n\n``` javascript\nfunction localNamespace() {\n  var LOCAL_NAMESPACE = {};\n  _.namespace('modules.local', {parent: LOCAL_NAMESPACE})\n  // Here I can use LOCAL_NAMESPACE.modules.local\n}\n\n// Here LOCAL_NAMESPACE is not defined\n```\n\nThe default parent element can be changed under _.namespaceSettings.\n\nFinally, I provided a strict mode in case you are worried about typing errors:\n\n``` javascript\n_.namespace('APP.modules.A');\n_.namespace('APP.modules.B', {strict: true}); // Throws an exception because B doesn't exist.\n```\n\nStrict mode is disabled by default, but again this can be changed under _.namespaceSettings.\n\nWhat do you think about this idea? There's always room for improvement, of course. I noticed that the travis build fails, but that is because the test on global namespaces needs some extra tuning.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e076d3a21fa1e1f1aaed8",
    "number": 1371,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e076e3a21fa1e1f1aaed9",
    "number": 1368,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e076f3a21fa1e1f1aaeda",
    "number": 1367,
    "body": "This commit adds support for specifying comparators in union,\ndifference, and intersection (#1339). The specification of comparators allows\nfor library users to specify _.isEqual for deep equality or to\nspecify their own methods that match a subset of paramters. It\nalso adds deepUnion, deepIntersection and deepDifference functions,\nconvienience functions that specify _.isEqual.\n\nUnder the hood, it actually allows the specification of a \"contains\"\nfunction into several relevant relevant functions. This is created from\nthe comparator with a closure. The code to allow this a little cumbersome.\nI'm open to suggestions on better methods of passing through a containment-\nchecking function -- one possibility would be to store the containment\nfunction of the moment on this.\n\nLet me know your temperature for merging these changes.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07703a21fa1e1f1aaedb",
    "number": 1366,
    "body": "From #1338, adds `_.rejectWhere`.\n\nThe method returns the first element for which the iterator returns false.\nIt has the same signature that `_.reject` while mimicking the (inverse) behaviour of `_.findWhere`.\n\nIt may not be the expected signature/behaviour though. This PR is a starter for a discussion with the maintainers and @talkless.\n## \n\nDisclaimer: Made for [24pullrequests.com](http://24pullrequests.com)\n",
    "head_branch": "feature/rejectWhere",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07713a21fa1e1f1aaedc",
    "number": 1365,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07723a21fa1e1f1aaedd",
    "number": 1364,
    "body": "Hi guys!\nI suggest that underscore has an API for `draw` values as an array out of a collection.\nsuch as:\n_.draw({name: 'moe', age: 50, userid: 'moe1'}, 'name', 'userid');\n=> [\"moe\", \"moe1\"]\n_.draw(['a', 'b', 'c', 'd', 'e'], [0, 3, 1]);\n=> ['a', 'd', 'b']\n\nHere is the implementation:\n\n```\n  // Draw a list of values from an object/array,\n  // using a list of corresponding keys/indexes\n  _.draw = function(obj) {\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    return _.map(keys, function(key){\n      return obj[key];\n    });\n  };\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07733a21fa1e1f1aaede",
    "number": 1363,
    "body": "It would be convenient to have pass test callback in _.pick();\n\nfor instance:\n\n``` javascript\n_.pick({a:1, b:2, c:3}, function(key) { if( key != 'b') return true});\n// returns {a: 1, c:3}\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07743a21fa1e1f1aaedf",
    "number": 1359,
    "body": "I think the `_.sortBy` can become more flexible if it can accept an iterator that returns an array.\nThis can be useful is some cases such as sorting tables of data by more than one column.\n\n``` javascript\nvar people = [\n    { name : 'curly', age : 50 },\n    { name : 'moe', age : 20 },\n    { name : 'curly', age : 30 }\n];\n\n_.sortBy(people, ['name', 'age']);\n// => [{ name : 'curly', age : 30 }, { name : 'curly', age : 50 }, { name : 'moe', age : 20 }]\n\n_.sortBy(people, function (person) { return [person.name.length, person.age]; });\n// => [{ name : 'curly', age : 30 }, { name : 'curly', age : 50 }, { name : 'moe', age : 20 }]\n\n// While it's backward compatible\n_.sortBy(people, 'name');\n// => [{ name : 'curly', age : 50 }, { name : 'curly', age : 30 }, { name : 'moe', age : 20 }]\n```\n",
    "head_branch": "extend_sort_by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07753a21fa1e1f1aaee0",
    "number": 1358,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07763a21fa1e1f1aaee1",
    "number": 1356,
    "body": "This pull request adds a utility method to making basic looping as simple as `_.loop(10, fn);`\n\n`_.loop` makes use of the range method signature so a user can iterate from any start, stop and use step.\n\n`_.loop` also can be lazily run by not providing the last param (the iterator). This will cause loop to return a function that can be run with the same range and make use of different iterator functions.\n\nThe tests for this show some basic examples, but you can probably imagine why this might be useful. More over, the docs for `_.range` state how `_.range` is handy when using `_.each`. Why not combine the two?! :smile: \n",
    "head_branch": "iter-util",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07763a21fa1e1f1aaee2",
    "number": 1355,
    "body": "",
    "head_branch": "first",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07773a21fa1e1f1aaee3",
    "number": 1354,
    "body": "",
    "head_branch": "iterators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07783a21fa1e1f1aaee4",
    "number": 1353,
    "body": "Higher-order identity function.\n\nAs proposed in #1345\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07793a21fa1e1f1aaee5",
    "number": 1352,
    "body": "",
    "head_branch": "property-in-lookup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e077a3a21fa1e1f1aaee6",
    "number": 1351,
    "body": "",
    "head_branch": "property-in-pluck",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e077b3a21fa1e1f1aaee7",
    "number": 1350,
    "body": "Higher-order function that returns a property of a given object.\n\nImplementation based on the one proposed by @zhy0216 in #1345\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e077c3a21fa1e1f1aaee8",
    "number": 1348,
    "body": "Changed all '==' to '===' to test for equality without type coercion. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e077d3a21fa1e1f1aaee9",
    "number": 1347,
    "body": "change `_.random(min, max)` to `_.random(min, max, fixed)` .\n\nIf the third parameter exist, it will return a number between min and max, keeping no more than `fixed` decimals. example:\n\n```\n_.random(10) //4\n_.random(5, 10) //7\n_.random(5, 10, 2) //7.13\n_.random(5, 10, 2) //9.3\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e077e3a21fa1e1f1aaeea",
    "number": 1346,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e077f3a21fa1e1f1aaeeb",
    "number": 1342,
    "body": "``` javascript\n_.each( {length:0,a:1,b:2}, function(a,b){console.log(a,b)} );\n```\n\nwhen obj has `length` attribute, it will be as a Array Object.it's wrong.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07803a21fa1e1f1aaeec",
    "number": 1341,
    "body": "Hello,\n\nThis is a pretty handy feature. I have used it for implementing spam protection, notification control and such. I am pretty sure there are more usecases for it.\n\nHere is an example:\n\n```\n\ncluster.on 'death', _.throttle(\n         (worker) -> \n           console.log \"worker #{worker.pid} died.\"\n           cluster.fork()\n         300\n         exponential: true )\n\n\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07813a21fa1e1f1aaeed",
    "number": 1340,
    "body": "This is a refactored version of PR #1318 to make the code more obvious. All features are the same, and I've added another test to make sure that calling a copy of a partial doesn't affect later calls.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07813a21fa1e1f1aaeee",
    "number": 1336,
    "body": "`/` is now longer escaped to `&#x2F` and vice-versa\n",
    "head_branch": "update-documentation-to-reflect-issue-1189",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07823a21fa1e1f1aaeef",
    "number": 1334,
    "body": "This allows a user to define multiple things to be checked for definition at the same time.  The only way for the statement to return true is if all objects in the array are undefined, Otherwise it will return false.\n\nE.G.\n\n_.isUndefined(window) // false\n_.isUndefined(window.bob) // true\n_.isUndefined([window]) // false\n_.isUndefined([window, window.bob]) // false\n_.isUndefined([window, window.bob, window.alice]) //false\n_.isUndefined([window.bob, window.alice]) //true\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07833a21fa1e1f1aaef0",
    "number": 1333,
    "body": "As requested by @jashkenas, he wanted to see what adding an optional AMD registration would look like today. This is based on the version used in https://github.com/amdjs/underscore, but more comments to help explain the specific style used.\n",
    "head_branch": "register-amd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07843a21fa1e1f1aaef1",
    "number": 1331,
    "body": "in _.each function: \nThe test for the argument \"obj\" to be an Array has been\nif (obj.length === +obj.length)\n\nThis seems unfortunatelly not to be the best test since this\nvar obj = {length:1} \nis not an Array, but will be taken for one (and hence break _.each)\n\nAn alternative test criteria which would avoid this problem is:\nif (Object.prototype.toString.call( obj ) === '[object Array]')\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07853a21fa1e1f1aaef2",
    "number": 1330,
    "body": "Silly me...didn't even check debounce...but it suffers from https://github.com/jashkenas/underscore/pull/1329 as well.\n",
    "head_branch": "debounce-leak",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07863a21fa1e1f1aaef3",
    "number": 1329,
    "body": "Throttle was hanging on to previous arguments even though it doesn't need them causing a memory leak.\n\nI was using throttle in an app of mine and couldn't figure out for the life of me how this huge DOM tree was still being leaked and tracked it down to throttle hanging onto the previous arguments even though it doesn't need them.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07873a21fa1e1f1aaef4",
    "number": 1328,
    "body": "Added deep-compare variants of several array/set functions, which let the user operate on sets of complex objects instead of simple values. Objects can be compared by deep equality, not just by the === operator.\nNew versions (*Deep) of most of the functions are needed because the originals are variadic functions and modifying their arguments would lead to total API breakage.\nA few basic tests are included and seem to work. Documentation is not provided (however, the functions by design have identical semantics to their shallow-comparing counterparts apart from the comparison method).\n\nNot sure if this is the most elegant way to do it, but I did not see a more obvious method of operating on objects by value in sets.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07883a21fa1e1f1aaef5",
    "number": 1327,
    "body": "The _.functions method throws an error if the object contains defined properties with getters/setters. Wrapping the conditional block of the method in a try/catch block catches these errors and allows further parsing of the object. Since the properties that throw these errors in _.isFunction are not functions _themselves_, it seems proper that they should not be included in the names array returned by _.functions.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07893a21fa1e1f1aaef6",
    "number": 1326,
    "body": "Many JS minifiers use the convention that comments starting with '/*!' are preserved as license comments. This ensures the\nlicense comment is preserved when using these tools.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e078a3a21fa1e1f1aaef7",
    "number": 1324,
    "body": "Bring underscore's changelog docs up to parity with Backbone's, particularly for older releases.\n\n0.5.6 and 0.5.8 weren't tagged so they're left hanging.\n",
    "head_branch": "docs-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e078b3a21fa1e1f1aaef8",
    "number": 1318,
    "body": "re-opening of #1276\n\nThis implementation is a bit more complex than the one found in the other PR or underscore.contrib, but it allows for being able to include more parameters in the method returned by _.partial than the amount of parameters to _.partial. Which is good for functions that take variable length arguments.\n\nfor example:\n\n``` javascript\nvar concat = function() {return _.foldl(arguments, function(a,b){return a+b;})}\nvar concat_xbnx = _.partial(concat, _, 'b');\nconcat_xbnx('a','c','d'); //\"abcd\";\n```\n\nIt also allows for continues application until all the placeholders are filled (haskell style)\n\n``` javascript\nvar add = function() {return _.foldl(arguments, function(a,b){return a+b;})};\nvar add3orMore = _.partial(add, _, _, _);\nadd3orMore(1)(2)(3,4,5); //15\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e078c3a21fa1e1f1aaef9",
    "number": 1317,
    "body": "It seems that underscore considers none array arguments of sets related operations as single-member sets.\n\n``` javascript\n_.union([1], [2])\n// => [1, 2]\n_.union([1], 2)\n// => [1, 2]\n\n_.difference([1, 2], [1])\n// => [2]\n_.difference([1, 2], 1)\n// => [2]\n```\n\nBut `_.intersection` acts differently:\n\n``` javascript\n_.intersection([1, 2], [1])\n// => [1]\n_.intersection([1, 2], 1)\n// => []\n```\n\nThe suggested changes can fix the problem.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e078c3a21fa1e1f1aaefa",
    "number": 1316,
    "body": "When bindAll encounters a method that doesn't exist on the object methods are being bound to, it throws an error with the format: Method doesn't exist: methodThatDoesntExist.\n\nThis is more useful than the standard \"Object doesn't have method bind\" error. Certainly when you have a Backbone view with dozens of methods.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e078d3a21fa1e1f1aaefb",
    "number": 1311,
    "body": "This may be a tad slower but it's much more succinct and better reuse.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e078e3a21fa1e1f1aaefc",
    "number": 1310,
    "body": "We can use `_.values(_.pick())` in some cases. But there are cases that values of some keys must be repeated.\nThe requested `_.values` accepts any combination of keys and returns their values.\n\n``` javascript\n_.values({ one: 1, two: 2 }, 'one', 'two', 'one')\n// returns: [1, 2, 1]\n```\n\nFor example in a context menu items list:\n\n``` javascript\nvar items = {\n    open: {...},\n    refresh: {...},\n    remove: {...},\n    props: {...},\n    separator: {}\n};\n\nvar contextMenuItems1 = _.values(items,\n    'open', 'separator', 'refresh', 'remove', 'separator', 'props' );\nvar contextMenuItems2 = _.values(items,\n    'refresh', 'separator', 'remove', 'separator', 'props');\n```\n\nIn this example we need two separate \"separator\"s in the context menu while `_.values(_.pick(items))` can not provide them, because `_.values(_.pick(items))` returns a unique value for the repeated key (\"separator\") but the suggested `_.values` returns two values for the two requested \"separator\"s.\n\nThanks.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e078f3a21fa1e1f1aaefd",
    "number": 1309,
    "body": "Sometimes we want some values of an object. I think this change can help us.\nThanks.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07903a21fa1e1f1aaefe",
    "number": 1306,
    "body": "Sometimes there is a need to run map and filter on the same collection, I have combined the behavior of both into one function. It will remove values which are false (strict comparison only, not falsy values).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07913a21fa1e1f1aaeff",
    "number": 1305,
    "body": "This adds a link to `toolz`, a similar project in Python.\n\nSee http://toolz.readthedocs.org/en/latest/api.html \n",
    "head_branch": "add-toolz-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07923a21fa1e1f1aaf00",
    "number": 1303,
    "body": "Underscore.js is now an [UMD](https://github.com/umdjs/umd) module.\n\nThe UMD definition is based on https://github.com/umdjs/umd/blob/master/returnExports.js.\n\nA stub `noConflict` function is provided in Underscore.js to retain API compatibility.\nThe real `noConflict` method is only defined once if Underscore.js is not loaded as-is in the browser (ie. as an AMD-module or in a Node.js environment).\n",
    "head_branch": "1.5.2-UMD",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07933a21fa1e1f1aaf01",
    "number": 1300,
    "body": "Move the conditional statement to the outside of the loop, and use internal `each` instead of loop.  \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07943a21fa1e1f1aaf02",
    "number": 1297,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07953a21fa1e1f1aaf03",
    "number": 1296,
    "body": "Re-opening of : https://github.com/jashkenas/underscore/pull/1235\n\nAlso added the use of Date.now within the debounce function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 08d88b33359b26996fc06f5cc6bf84b4a7afe2d3 into 27311a90e23ffa28915a5c6928c97fb20f5fe57c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07963a21fa1e1f1aaf04",
    "number": 1294,
    "body": "_.pluck() calls itself recursively when passed multiple key arguments. Like so\n\n``` javascript\nvar orders = [\n    {orderId: 123, shipping: {method: 'express', cost: 995} },\n    {orderId: 124, shipping: {method: 'standard', cost: 495} }\n];\n_.pluck(orders, 'shipping', 'cost')\n=> [995, 495]\n```\n\n(branch with updated doco: https://github.com/joelplane/underscore/tree/pluck-take-multiple-args-with-doco)\n",
    "head_branch": "pluck-take-multiple-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07963a21fa1e1f1aaf05",
    "number": 1293,
    "body": "For me, it was a suprise, that `_.sortBy` without iterator is no-op.\n\n``` js\n_.sortBy([3, 2, 1]); // returns [3, 2, 1];\n```\n\nThiis PR makes `_.sortBy` use `_.identity` as default iterator, same as eg `_.groupBy` so:\n\n``` js\n_.sortBy([3, 2, 1]); // returns [1, 2, 3]\n```\n",
    "head_branch": "sortBy-identity-default-iterator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f30c1355adc802f324362abf559444fc5e121356 into 199b55dd83cbec2899eed7c3a7a9793dfad491fc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07973a21fa1e1f1aaf06",
    "number": 1292,
    "body": "Right now, if _.debounce is called with a wait of 0, it will set a timeout for the later callback before calling the func. As a result it takes a noticeable period amount of time for the callback to call, this can be obvious and annoying in graphics application / animation.\n\nAdmittedly setting a debounce with a wait of 0 is an edge case, but might occur if it is given as a parameter, or if debouncing is activated dynamically based on performance considerations.\n\nThis change has an extremely low touch and the logic only applies in the case where wait === 0.\n",
    "head_branch": "update-debounce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07983a21fa1e1f1aaf07",
    "number": 1291,
    "body": "With a comment, document the nonobvious behavior of `_.identity` in this context.\n\nI wrote this comment to accompany the following sentence from [the current docs for `_.memoize`](http://documentcloud.github.io/underscore/#memoize):\n\n> The default **hashFunction** just uses the first argument to the memoized function as the key.\n\nI looked in the code, but couldn’t see how that was the case. The code quoted in [Issue #137](https://github.com/jashkenas/underscore/issues/137) was no longer there. I wondered if that sentence in the documentation was out-of-date. It took me a while to notice that the use of `apply` over `call` changed `_.identity` from returning `arguments` to returning the first argument.\n\nI found the code confusing because I thought that a function named `identity` would change nothing. Thus, I assumed, when passed its arguments, it would return its arguments unchanged. So **another possible way** to clarify the code, instead of adding a comment, would be to create a local variable `var returnFirstArgument = _.identity;`, and then use that function as the default `hasher`. This moves the documentation out of a comment and into the code, which is generally good in principle. But that change makes a library function run an additional statement, so I don't know if you would find that change worth the tiny slowdown it would cause.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07993a21fa1e1f1aaf08",
    "number": 1288,
    "body": "Check for a numeric length property instead of checking `_.isArray(obj) || _.isString(obj)` for consistency with the rest of the codebase. Allows it to work with nodelists, arguments, etc.\n",
    "head_branch": "isEmpty-length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e079a3a21fa1e1f1aaf09",
    "number": 1287,
    "body": "Replaces the last ruby dependency with npm scripts.\n\nInstead of `rake doc`, you'd run `npm run doc`, etc.\n",
    "head_branch": "remove-rakefile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5915d448412f3af85f9296a60953e870396ff76d into 4067fc99c671b86f57df83954d7efa9f90f5fd7c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e079b3a21fa1e1f1aaf0a",
    "number": 1286,
    "body": "As [pointed out](http://git.io/2w0MPQ) in 481798a94e6770c570a4b3352cf4bf1292f19063, `_.values` previously returned an empty array for non-object values.  While I don't feel strongly about this, it seems unnecessary to break backward compatibility here.\n",
    "head_branch": "null-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e079c3a21fa1e1f1aaf0b",
    "number": 1285,
    "body": "`for` loops are way faster than native ES5 array traversal methods methods due to JIT optimizations. \nHence use `for` loops by default and provide a method to turn on/off usage of these ES5 methods\n\nJsPerf:\nhttp://jsperf.com/array-filter-vs-for-loop\nhttp://jsperf.com/jqeach-vs-for-vs-foreach\n",
    "head_branch": "avoid-native-es5-array-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e079d3a21fa1e1f1aaf0c",
    "number": 1284,
    "body": "Avoid extra copy for _[name] for the OOP call _.mixin(_)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e079e3a21fa1e1f1aaf0d",
    "number": 1283,
    "body": "Just for funsies.  :smile: \n",
    "head_branch": "icon",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d4bd5cbbca47193c55ce6dd89d79ed0a3f7f7389 into 101c10a60019fe870d21868835f65c25d64968fc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e079f3a21fa1e1f1aaf0e",
    "number": 1282,
    "body": "Just a couple of things pointed out by @jdalton last week.\n- Use consistent args check.\n- Handle objects in the single value path.\n",
    "head_branch": "sample",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ef17a76af6d15a140fb4ebeed9709530f8f4b2c4 into 474351a7932b17842f002b7ea11bfe83737fc898"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a03a21fa1e1f1aaf0f",
    "number": 1281,
    "body": "",
    "head_branch": "template-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bd64710e253773b95a385dc55e9545a0220476e4 into 8778df3b0454ab2e15ca561a2fc01008aea7dd83"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a13a21fa1e1f1aaf10",
    "number": 1278,
    "body": "Comparison is based on a Java-like comparator function that takes in two objects and returns truthy value if\nfirst element is more superior to second else returns a falsy value\n\n``` javascript\nvar arr = [{a:'foo', b: 3}, {a:'bar', b: 1}, {a:'baz', b: 5}];\n\n//This method call would return object with least value of `b`\n_.superlative(arr, function (o1, o2) {\n    return (o1.b < o2.b);\n});\n\n```\n\n_This method is especially useful when composition of objects defines how they can be compared_\n",
    "head_branch": "method-superlative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a13a21fa1e1f1aaf11",
    "number": 1276,
    "body": "This commit adds the ability to set palceholders for parameters when using the  _.partial function. Which I feel is pretty much a required feature for a 'partial' function.\n\nSearched previous issues before creating this pr and found: #1163. Feature was requested but no pr was ever submitted. Here's my implementation. Does not effect the speed of _.partial method which does not make use of placeholders. \n\n``` javascript\nvar square = _.partial(_.map, _, function(n) {return n*n });\nsquare([1,2,3,4]) //[1, 4, 9, 16]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a23a21fa1e1f1aaf12",
    "number": 1274,
    "body": "_.where method to work with a nested object\n\n```\nvar list = {\n     a: \"h\", \n     c: {\n         d: [1, 2], \n         b: \"test\"\n     }, \n     b: \"ts\", \n     e: {b: \"ts\"}\n};\n```\n",
    "head_branch": "submission/robo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a33a21fa1e1f1aaf13",
    "number": 1271,
    "body": "Toggle item in array function was really useful for me many times. \n\nToggle item in array. If array contains many such items, they will\nbe removed entirely. If you pass optional isSingle then only first one of them\nwill be removed.\n\nOne of the usecases:\nhttp://codepen.io/sol0mka/pen/kedaw\nSubmit button will be enabled only if form has any changes\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a43a21fa1e1f1aaf14",
    "number": 1269,
    "body": "see http://modernjavascript.blogspot.com/2013/08/building-better-debounce.html for explanation\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9e0a92a934c0676d102cc38914b8d910099d2bbd into 66282d0a4bcdba9558f9d79dee841d5d6970ba7b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a53a21fa1e1f1aaf15",
    "number": 1264,
    "body": "I found `_.hasEvery` to be useful in a couple situations. I haven't needed to use `_.hasSome` yet but I threw it in anyway to match `_.every` and `_.some`.\n\n```\n_(object).hasEvery(keys);\n_(object).hasSome(keys);\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a63a21fa1e1f1aaf16",
    "number": 1263,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7aefa8669f63fc45c66e90082857fc4ad5258738 into 4264e07b0175b5b801af9e35efd95b3879b8105d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a73a21fa1e1f1aaf17",
    "number": 1259,
    "body": "Based on https://github.com/jashkenas/underscore/issues/123, it appears this assertion was inverted but the language was never updated to reflect it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b7f79c8dec28e30a66d9dfa8c311324f5ed51a7c into db588fafa6832700f0f3c7687d3fe3efc7c1210b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a83a21fa1e1f1aaf18",
    "number": 1258,
    "body": "Hi guys,\n\nWhenever I use _.max I am almost always trying to get the range of my collection and end up using _.min right after it. Searching on github for usages for _.max you'll notice that often a call to _.max is followed by a call to _.min. When people are trying to get the range of their collection, making separate calls to _.max and _.min is needlessly expensive. My pull request adds a maxmin function\n\n```\nvar range = _.maxmin([1,2,3,4,5]);\nconsole.log(range.max);\nconsole.log(range.min);\n```\n\nThis is similar to the minmax method in Ruby's Enumerable module except our result is returned as an object not an array. I've also written a quick benchmark to compare the performance of maxmin vs calling max and later min https://github.com/theshadow7/underscore_max_min_benchmark (using an array size of 250000 and 75 iterations)\n\n```\n_.max: 892 (ms)\n_.min: 878 (ms)  \n_.maxmin: 936 (ms)  \n_.max + _.min: 1794 (ms) \n```\n\nAs you can see _.maxmin is only slightly more expensive than calling _.max or _.min but almost twice as fast as successive calls to _.max and _.min. I feel this is a common enough use case with good performance upside so I'm submitting a pull request for this. I've also included unit tests. Let me know if this is reasonable\n\nThanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07a93a21fa1e1f1aaf19",
    "number": 1253,
    "body": "Fix #1247.\n",
    "head_branch": "sort-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b3985b68844c9907989e10cc4f77d5c2ee452ae3 into d67868df74c26c88b2cf1d25d91a269f237963e8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07aa3a21fa1e1f1aaf1a",
    "number": 1252,
    "body": "Useful to have this available as a function so you can curry it, pull the Nth elem out of every list in a list etc.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ab3a21fa1e1f1aaf1b",
    "number": 1251,
    "body": "Provide a depth search in object.\n\n``` javascript\nvar obj = {foo: \"bar\", depth: {object: {really: \"depth\"}}};\n\nvar res = _.depth(obj, \"depth\", \"object\");\n// res = {really: \"depth\"}\n\nvar second = _.depth(obj, \"foo\");\n// second = \"bar\"\n\nvar thrid = _.depth(obj, \"bin\");\n// third = false\n\n```\n\nSee ya\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ab3a21fa1e1f1aaf1c",
    "number": 1250,
    "body": "Objects with a numeric length property cause the _.each and _.size methods to use that property for iteration and size calculation. This patch prevents that behavior.\n",
    "head_branch": "fix-each",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ac3a21fa1e1f1aaf1d",
    "number": 1249,
    "body": "This seems alright to me and @jdalton points out that he uses something similar.  It does alter what we're testing a bit though, which is why I'm unsure of it.\n",
    "head_branch": "throttle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge de60b9aa1c2c66f4cb7c76541e01a15ebdef0838 into ccd7a20d618558b2ac17d49200500de01e6adce1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ad3a21fa1e1f1aaf1e",
    "number": 1247,
    "body": "I use underscore in [Adobe PhotoShop js](http://jongware.mit.edu/idcs5js/index_JavaScript%20Base%20Classes.html) writing;It's js environment is special,it's Array sort function is special,It may happen left and right is equal.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ae3a21fa1e1f1aaf1f",
    "number": 1244,
    "body": "- Remove ambiguous wording \"If iterator is passed\" since iterator functions are\n  often predicates that pass or fail\n- Remove other occurences of similar ambiguous wording in documentation\n\nHolds the changes in [this](https://github.com/jashkenas/underscore/pull/1242) pull request which are specifically related to doc improvements.\n",
    "head_branch": "min-max-doc-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f521837f4357a2dc04997f736dad5922e2efdf33 into cceb54a25af9a86aaf17845823caabfe8991fe14"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07af3a21fa1e1f1aaf20",
    "number": 1243,
    "body": "- Make examples given for `min` and `max` more consistent with each other\n\nHolds the changes in [this](https://github.com/jashkenas/underscore/pull/1242) pull request which are specifically related to example code.\n",
    "head_branch": "min-max-examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b03a21fa1e1f1aaf21",
    "number": 1242,
    "body": "- Remove ambiguous wording \"If iterator is passed\" since iterator\n  functions are often predicates that pass or fail\n- Make examples given for `min` and `max` more consistent with each\n  other\n- Remove other occurences of similar ambiguous wording in documentation\n\nI had not noticed the documentation for the `max` function, which would have clarified things.  I had clicked on the `min` link in the left nav, which scrolled past the `max` documentation.  Other people, who are trying to quickly reference the docs, would probably have the same issue.\n",
    "head_branch": "min-max-docfixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b13a21fa1e1f1aaf22",
    "number": 1241,
    "body": "A helper function, similar to Rails' `try`, that will call the method on object, unless object is undefined or null. Passes the 3rd+ argument as the arguments to the method.\n\nOften when cleaning up Backbone views, I need to remove a subview that may have been attached:\n\n``` javascript\nif (this.subView && this.subView.close) { this.subView.close(); }\n```\n\n`_.attempt` will do the same, turning that into:\n\n``` javascript\n_.attempt(this.subView, 'close');\n```\n\nThis is extremely similar to `_.result`, with the distinction that you use `attempt` to call a method on an object that may or may not be defined and you can pass arguments, not just evaluating a (potentially function) property.\n",
    "head_branch": "attempt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b23a21fa1e1f1aaf23",
    "number": 1240,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b33a21fa1e1f1aaf24",
    "number": 1235,
    "body": "Date.now introduced in ES5 is substantially faster than new Date; which is used in the throttle method. Since often the throttle method is used to reduce computation during very frequent events (mousemouve, scroll) it is probably important to have it as performant as possible on every invocation. Tests passing in ES5 complaint browsers and IE7.\n\nJSperf:   http://jsperf.com/throttle-test \n\nChrome reporting throttle with 'new Date' to be 77% slower than Date.now\nWhile non-ES5 complaint browsers take a 8% hit due to an extra function overhead.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b33a21fa1e1f1aaf25",
    "number": 1234,
    "body": "In _.first and _.last, the check the style is:\n\n```\n(n != null) && !guard \n```\n\nBut in _.initial and _.rest, it was the the opposite (DeMorgan's law):\n\n```\n(n == null) || guard\n```\n\nWhen reading the code, this was a little confusing, so I figured I would change it to make the style the same...it could also be switched the other way, but I think this is more logical.\n\nEDIT: reversed it to not use double negatives.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7ebf046f8831d7c7a85a957fa264c9b20184249d into 1f5e7cdeaac94fe090d71b37d7dd7ae2ada8c7fe"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b43a21fa1e1f1aaf26",
    "number": 1233,
    "body": "- No need to call lookupIterator for _.identity.\n- Hoist function creation to load time.\n\nThanks to @jdalton for the discussion.  :)\n",
    "head_branch": "group-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7a4d4e28de389544cbbe10428006d6b8b7719788 into 8fdc2b7074d571be7ad1c1121b6c45410d60dbd9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b53a21fa1e1f1aaf27",
    "number": 1232,
    "body": "The title says it all - I hope this is helpful!\n\nThanks for putting together this awesomely fantastic library, I don't know what I would do without it!\n\nAndreas\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b63a21fa1e1f1aaf28",
    "number": 1231,
    "body": "use `_.keys` instead of `for .. in ..` loop and `hasOwnProperty` check. Like we did in #1224 and #1223\n",
    "head_branch": "speedupeach",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 19e8412acecca74226ce4343da00242ca7e2ad41 into 71099af43d735444ff033fefe5264d0b0988eeef"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b73a21fa1e1f1aaf29",
    "number": 1230,
    "body": "Changed the timeout in the `defer` method to 4 milliseconds, the standard minimum delay per the HTML5 spec:\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/window.setTimeout#Minimum.2F_maximum_delay_and_timeout_nesting\n",
    "head_branch": "defer-timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b83a21fa1e1f1aaf2a",
    "number": 1229,
    "body": "Adding a bower.json file with the main path set allows automating the loading of the module using external tools (i.e. Grunt).\nThis repository is already published on the Bower registry, so it makes sense.\n\nThe minified version has been left out, since using this kind of tools often implies a custom minification and concatenation. But it could be included as well.\n\nNotice however that most of the information is already in `package.json`... I think it's possible to tell Bower to look there with a `.bowerrc`.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07b93a21fa1e1f1aaf2b",
    "number": 1228,
    "body": "I lacked documentation for the return when it could not find a match.\n\nThe reason I have added two tests are for two reasons:\n- To assert that documentation is on the same page as the actual code.\n- As a regression test of future code changes.\n\nThis is the second iteration of #1146. The only difference between this pull request and the old one is that I've removed the overly pedantic examples.\n",
    "head_branch": "document-findWhere",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 02fb2b417a993857982e15421ea34c665963b3e1 into ec42e6841b6fb25c98a9456676ee7058b3779b46"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ba3a21fa1e1f1aaf2c",
    "number": 1227,
    "body": "",
    "head_branch": "length-hint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 30fa554fdb2daab99d6646f97fb33f59c98f855f into 77e2f80b1d753902336439f4005a7f08d2bbb95f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07bb3a21fa1e1f1aaf2d",
    "number": 1226,
    "body": "",
    "head_branch": "length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a187077c84a901393013a384017e69395585107c into b450f1353c37425859a206bcc28df8aee4426c5b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07bc3a21fa1e1f1aaf2e",
    "number": 1224,
    "body": "Improve the performance of `_.invert`.\n\nJust like `_.values` and `_.pairs`.\n",
    "head_branch": "invert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bee0908f2e2f57b468d627198b529f7ae4e2d2d0 into a2d4c49acce4bc57146a18db12f5f263535d3225"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07bd3a21fa1e1f1aaf2f",
    "number": 1223,
    "body": "improve the performance of `_.paris`.\n\nSimilar as #1222\n",
    "head_branch": "pairs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1205c4edc9e235e1e06d98d10f42e184035da252 into 9d525bfa1d17d23c23a94afdf72af5499b715d92"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07be3a21fa1e1f1aaf30",
    "number": 1221,
    "body": "As you mentioned in #1214, `_.keys` and `_.values` should be tested on big objects instead of big array of objects.\n",
    "head_branch": "speedjs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 34731862ab0ffcf814ce6187aac5bd867f9ff07a into 717b6e6662ff5ea7f8028506b359b94d075788a9"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07bf3a21fa1e1f1aaf31",
    "number": 1220,
    "body": "Inspired by python decorator, add _.decorate and its test cases.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c03a21fa1e1f1aaf32",
    "number": 1214,
    "body": "use `_.map` and `_.keys` to implement the `_.values` function\n\nthe function is shorter, prettier, and runs faster(twice faster) if the native `map` and `Object.keys` exist.\n",
    "head_branch": "refactor-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c13a21fa1e1f1aaf33",
    "number": 1213,
    "body": "This will reduce the size of the downloaded package by 25KB, which matters a lot for a package that is downloaded almost 40.000 times a day.\n## \n\n> The \"files\" field is an array of files to include in your project. If you name a folder in the array, then it will also include the files inside that folder. (Unless they would be ignored by another rule.)\n\nhttps://npmjs.org/doc/json.html\n",
    "head_branch": "files-prop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4dd53a0681e50cad11f91f7513a479f0dcc713d8 into 09a2a3366be1c81acb98c36cce0e0da84b96888a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c13a21fa1e1f1aaf34",
    "number": 1211,
    "body": "The corresponding comment in the Backbone source was corrected on this point about 9 months ago, see: https://github.com/jashkenas/backbone/issues/1751. I wrote a blog post on the subject here: http://csnw.github.io/2013/06/23/this-in-node-modules-and-iifes.html.\n",
    "head_branch": "root-is-exports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c7e9907c67b67da7845e39b60975b7ccbce5a500 into 8d4cdcee490108984519385426739f28bc12a8b5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c23a21fa1e1f1aaf35",
    "number": 1210,
    "body": "Previously _.object([['a', 'b'], null]) would crash. Now it will\nignore the null value and just give {'a': 'b'}. This is especially\nconvenient if you are chaining it with _.map and you want to\nremove some values from an object:\n\n> _.object(_.map({'a': 100, 'b': 150}, function(v, k) {\n>   return v > 120 ? [k, v] : null\n>   }))\n>   { b: 150 }\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c33a21fa1e1f1aaf36",
    "number": 1206,
    "body": "A method for splitting a target array into a 2 dimensional array of a specified length. If there are remaining elements they are added as the last element in the new array. An example use case would be in chunking and array of object ids for use in url query params as to not hit the url character limit.\n\nExample:\n`_.chunk([1, 2, 3, 4], 3)` would return `[[1, 2, 3], [4]]`\n",
    "head_branch": "chunkArray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c43a21fa1e1f1aaf37",
    "number": 1205,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3ccca41e169939c0574704da754243953c6e54f2 into 14c3f9a11fe4711876148c31f9eafba947611477"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c53a21fa1e1f1aaf38",
    "number": 1204,
    "body": "Added a test to check that _.intersection produces a \"uniq\" array :) \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4e9d74781be77d7ff6ab78d49c3998e9eb3a81f7 into e4d66e27ab40ef10225649018f74b4dacd6fd635"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c63a21fa1e1f1aaf39",
    "number": 1203,
    "body": "I think the desired behavior here is to ignore nullish arguments instead of adding them to the result.\n",
    "head_branch": "nullish-union-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c73a21fa1e1f1aaf3a",
    "number": 1202,
    "body": "Functionality is identical to that of array_combine in PHP.  Function accepts 2 arrays and creates an object using the first array for properties and the second array for its values.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c83a21fa1e1f1aaf3b",
    "number": 1199,
    "body": "This is very useful for speeding up operations like finding by a property and `intersection` (which should also get some hash lookup love #1194).\n\n``` js\n// email is unique\nvar userByEmail = _.object(users.models, 'email');\nuserByEmail['john@example.com'];\nuserByEmail['jane@example.com'];\n\n// which is going to be much faster than\n\nusers.findWhere({email: 'john@example.com'});\nusers.findWhere({email: 'jane@example.com'});\n```\n\nThis complements the idea in #1194. Using dictionaries for intersection when it's possible is magnitudes faster than simple arrays.\n",
    "head_branch": "dict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07c93a21fa1e1f1aaf3c",
    "number": 1195,
    "body": "Example usage.\n\n```\nvar list1 = [\n    {\n        id: 1,\n        columnA: \"column A\"\n    },\n    {\n        id: 2,\n        columnA: \"column A\"\n    }\n];\n\nvar list2 = [\n    {\n        id: 1,\n        columnB: \"column B\"\n    },\n    {\n        id: 2,\n        columnB: \"column B\"\n    }\n];\n\nvar list3 = [\n    {\n        id: 1,\n        columnC: \"column C\"\n    },\n    {\n        id: 2,\n        columnC: \"column C\"\n    }\n];\n\nvar join = _.join(list1, list2, list3, function (l1, l2) {\n    return l1.id === l2.id;\n});\n\njoin = [\n    {\n        id: 1,\n        columnA: \"column A\",\n        columnB: \"column B\",\n        columnC: \"column C\"\n    },\n    {\n        id: 2,\n        columnA: \"column A\",\n        columnB: \"column B\",\n        columnC: \"column C\"\n    }\n];\n```\n\nhttps://github.com/jashkenas/underscore/issues/1194\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ca3a21fa1e1f1aaf3d",
    "number": 1193,
    "body": "I noticed that if you want to include objects in defaults it doesnt work so well:\n\n``` javascript\nvar defaults = {\n   someObject: new SomeObject()\n};\n\n_.defaults(options, defaults);\n```\n\nTo fix this, defaults should be allowed to have lazy properties:\n\n``` javascript\nvar defaults = {\n   someObject: function() { return new SomeObject() }\n};\n```\n\nand then we change `_.defaults` to use `_.result`. Use cases would be quickly initializing nested hierarchies of objects for a client-side app. \n\n``` javascript\nnew Post({ comments: new Comments() })\nnew Post()   // comments defaulted to new Comments\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ca3a21fa1e1f1aaf3e",
    "number": 1191,
    "body": "This is inspired by chunk function from JavaScript for web developers 2nd edition book. This is will allow user to execute iterator on each object in collection, but at given interval. Should help developers if they are doing processor intensive calculation with each item.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07cb3a21fa1e1f1aaf3f",
    "number": 1183,
    "body": "Here is the initial PR for #1166.  I opted to use the lispy functional sytax over the object based one.\n",
    "head_branch": "pipe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07cc3a21fa1e1f1aaf40",
    "number": 1180,
    "body": "",
    "head_branch": "qunit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1e091d15f488f94c0978d86e2e292b14162118ab into a5a3715951a96004d4d1c0b84d07eed0a2373485"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661e07cd3a21fa1e1f1aaf41",
    "number": 1176,
    "body": "This change allows flatten to take an integer as it's second argument\n(formerly named \"shallow\"). I renamed the argument to depth. Backwards-\ncompatible with previous flatten because true and false are coerced to\n1 and 0 respectively. This mimics the behavior of Ruby's Array#flatten.\n",
    "head_branch": "flatten",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ce3a21fa1e1f1aaf42",
    "number": 1173,
    "body": "See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07cf3a21fa1e1f1aaf43",
    "number": 1172,
    "body": "As stated in #1171, if the return of the iterator is ever truthy, the loop exits immediately via `breaker`.  Thus there is no reason for the extra check.\n\nI also noticed that the tests remove the native version of `Array#some`.  This leads to spurious results because `Array#forEach` does not support `breaker`.  I'd speculate that it's likely the reason the extra check was added originally.  It's removed in this patch.\n",
    "head_branch": "some",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 962121722a0440816a27f709056e5ed397e5ced5 into 8597c0354955ec5a226dea57ccd6a64f2f8370de"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d03a21fa1e1f1aaf44",
    "number": 1169,
    "body": "With large, complicated data structures -- especially ones that come from JSON -- I often find myself writing code to guard against accessing missing parts of a tree-like object, like so:\n\n``` javascript\nif (user.profile && user.profile.images && user.profile.images.small) {\n    return user.profile.images.small.url;\n} else {\n    return undefined;\n}\n```\n\nThis is tiring and error-prone and brittle in the face of data-structure changes. (If the `profile` property becomes `account`, you have to change it in 4 places.) Coffeescript handles this problem with the .? operator. The _.deep() function provides deep access to an object and its properties and does the guard automatically:\n\n``` javascript\nreturn _.deep(user, \"profile.images.small.url\");\n```\n\nThis will return `undefined` if the `user` object doesn't have an `profile` property, or if `user.profile` doesn't have `images`, or if `user.profile.images` is a number and not an object. Direct access like `user.profile.images.small.url` would cause a `TypeError`.\n\n_.deep() can take a dotted string to find the property, or an array of property names (in case your properties have dots in them!):\n\n``` javascript\nreturn _.deep(user, [\"profile\", \"images\", \"small\", \"url\"]);\n```\n\nIt's also nice for templates:\n\n```\n<img src=\"<%= _.deep(user, \"profile.images.small.url\") || \"default.png\" %>\" />\n```\n\nThere's a bunch of unit tests for hits and misses as well as extreme cases like `_.deep(null)` and `_.deep({a: 1}, 42)`.\n",
    "head_branch": "deep-access",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d13a21fa1e1f1aaf45",
    "number": 1168,
    "body": "Property access in _.functions isn't guaranteed to be safe (see example below/in test), so wrapping the code in try/catch can avoid an error.\n\ni.e.\n`var obj = {};\n      Object.defineProperty(obj,'bad_property', {\n        get: function () { throw new Error(); },\n        enumerable: true\n      });\n_.functions(obj);\n`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d23a21fa1e1f1aaf46",
    "number": 1162,
    "body": "This correlates to Issue #1155.\n",
    "head_branch": "deprecate_where_findWhere",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d33a21fa1e1f1aaf47",
    "number": 1161,
    "body": "...d\n\nExample:\n\n  var a = { b: { c: { d: \"folded property value \"}}};\n  _.foldedProp(a, \"b.c.d\"); // => \"folded property value\"\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d43a21fa1e1f1aaf48",
    "number": 1158,
    "body": "This adds `_.isFile`, which returns true for File and Blob objects, and `_.isBlob`, which only returns true for the latter. Maybe this is too soon, since only IE 10+ seems to support File and Blob, but these have been helpful for me in a couple of projects.\n\nUnfortunately, it doesn't seem possible to create a positive test case for File objects, as I don't believe they can be created in Javascript.\n",
    "head_branch": "isFile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d53a21fa1e1f1aaf49",
    "number": 1153,
    "body": "The current implementation of `_.result` conflates function invocation and property access (similar to `_.pluck`). This PR adds a single-argument form of `_.result` that can be used for the former without the latter.\n\nIf the `property` argument is omitted, the modified `_.result` operates on the `object` argument itself rather than a property of `object`. For example:\n\n```\nvar str = 'foo';\nvar fun = function() { return str; }\n_.result(str) // --> 'foo'\n_.result(fun) // --> 'foo'\n```\n\nThe original two-argument behaviour of `_.result` is retained.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d53a21fa1e1f1aaf4a",
    "number": 1150,
    "body": "Stable sort was added in #738.\n",
    "head_branch": "document-stable-sortBy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 74386f08abdfbfa48206ecd52f7fca873b1e1c61 into 3cfdd41845e14dcfece0b4d867f0ebdf6d820784"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d63a21fa1e1f1aaf4b",
    "number": 1146,
    "body": "I lacked documentation for the return when it could not find a match.\n",
    "head_branch": "document-findWhere",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d73a21fa1e1f1aaf4c",
    "number": 1145,
    "body": "I find _.debounce immensely useful, but perhaps the most useful application is with a wait of 0.  This simply allows a flood of events to be cascaded into one event handler.  For example:\n\n``` javascript\n// a backbone collection with a lot of models\n// second argument to _.debounce isn't technically needed \n// (jasmine 1.3.1 mock clock needs it)\ncollection.on(\"change\", _.debounce(handleChangeEvent, 0));\n// models fire a ton of events; handleChangeEvent invoked only once\nchangeAllOfTheModelsInCollection();\n```\n\nThe problem is that _.debounce isn't optimized very well for this situation.  Every invocation will call clearTimeout/setTimeout.  To be sure these native methods are fast (at least in Chrome) but the performance hit is not insignificant, as the script below illustrates.\n\nMy output from this script:\n\n_.debounce: 609ms\noptimized debounce: 4ms\n\n``` javascript\n(function() {\n    var _ = window._;\n    var console = window.console;\n\n    function optimizedDebounce(fn) {\n        var pending = false;\n        return function () {\n            if (!pending) {\n                var context = this, args = arguments;\n                pending = true;\n                setTimeout(function () {\n                    pending = false;\n                    fn.apply(context, args);\n                }, 0);\n            }\n        };\n    }\n\n    function elapsedTime(fn) {\n        var start = new Date();\n        fn();\n        return (new Date().getTime() - start.getTime()) + \"ms\";\n    }\n\n    function speedTest(debounceFn) {\n        var invocations = 99999;\n        var debounced = debounceFn(_.identity, 0);\n\n        return elapsedTime(function () {\n            for (var i = 0; i < invocations; i++) {\n                debounced();\n            }\n        });\n    }\n\n    console.info(\"_.debounce: \" + speedTest(_.debounce));\n    console.info(\"optimized debounce: \" + speedTest(optimizedDebounce));\n\n}());\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d83a21fa1e1f1aaf4d",
    "number": 1143,
    "body": "If calling `_.flatten(x, true)` where `x` is an array containing only other arrays, the entire flatten method can be simplified down to:\n\n``` javascript\nreturn concat.apply(output, x);\n```\n\nI added a speed test for the shallow flattening, and it works much faster (~20x)\n\nBefore optimisation: ~225-230/s\n![](http://tinyurl.com/pl52zts)\n\nAfter optimisation: ~4900/s\n![](http://tinyurl.com/qxxau5p)\n",
    "head_branch": "flatten-shortcircuit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1b5c87378d7a4245dbf81646b45fb32b068b8cdb into 19a9a73dd1d8e662d237795d2e0975220ba6fa69"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07d93a21fa1e1f1aaf4e",
    "number": 1142,
    "body": "Updated to reflect the required `methodNames` argument(s).\n",
    "head_branch": "bindAll-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge efa7d0b71c4d1b48c8e896c327865787337188cf into 77e13ab4020a6d076ff2c9787dfa0f9f1bfdd3c6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07da3a21fa1e1f1aaf4f",
    "number": 1140,
    "body": "",
    "head_branch": "Djeg/feature/bower",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07db3a21fa1e1f1aaf50",
    "number": 1137,
    "body": "Enables retrieving the result of deeply nested properties/methods. For example,\n\n```\n    var obj = { foo: { bar: { baz: 'biz' } } };\n    _.result(obj, 'foo.bar.baz') // returns 'biz'\n    _.result(obj, 'foo.baz') // returns undefined\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07dc3a21fa1e1f1aaf51",
    "number": 1135,
    "body": "Update the Rakefile so when rake build is done, the source map config file\nis generated (by uglify-js) along with the minified source.\n\nLargely inspired by backbone/Rakefile.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0ff18b522ba02b2eb37e01bbcfa73c9e1242b535 into 3db68da8d4c05bd25b07bc56fdf779589779ffa2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07dd3a21fa1e1f1aaf52",
    "number": 1132,
    "body": "I find my self writing a lot of anonymous functions for accessing properties.  `pluck` helps with this a little, but in some cases it's not practical.  This also has the benifit of converting functions to work as Underscore iterator.  Essentially it does the following.\n\n```\n// old way\n_.map(obj, function(o){ return o.prop.method(); }\n// new way\n_.map(obj, _.lambda(\"prop.method()\");\n```\n\nIt also allows adding data, which for ease-of-use is sent to all functions called in the `prop` parameter (this is rarely a problem considering most people will call only one function).\n\nSorting becomes easier.\n\n```\n_.sortBy([\n    {score: 50},\n    {score: 93},\n    {score: 31},\n    ], _.lambda('score')\n```\n\nIs this really a word?  Remember **i** before **e** except after **c**.\n\n```\nvar word_tests = [\n    /[aeiou]/gi,\n    /^[A-Za-z-]+$/,\n    /^(?!.*([^c])ei)/\n];\n\nvar userInput = \"pneil\";\nvar verdict = _.all(word_tests, _.lambda(\"test()\", userInput));\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07de3a21fa1e1f1aaf53",
    "number": 1130,
    "body": "Just 2 minor bytes.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07df3a21fa1e1f1aaf54",
    "number": 1128,
    "body": "Check if the element really exist in the array in `_.each` function.\nLike\n\n```\nvar numbers = [1,2,3,4,5],\n     counter = 0;\ndelete numbers[2];\nnumbers.forEach(function(){ counter++; });\n```\n\nin IE10, Firefox20, Chrome26, the value of counter is 4 because the element numbers[2] does not exist. And there is a test case in google v8 engine called '[respect holes](https://code.google.com/p/v8/source/browse/branches/bleeding_edge/test/mjsunit/array-iteration.js#61)'. \nAlso in [ECMA-262 15.4.4.18](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf), \n\n```\n_callbackfn_ is called only for elements of the array which actually exist; it is not called for missing elements of the array.\n```\n\nBut the underscore's implementation of `_.each` didn't do this check.\n\nSame bug also exist in the `_.object` function. I fixed this, and add two unit test case.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07df3a21fa1e1f1aaf55",
    "number": 1127,
    "body": "For consistency with the other native function evaluations and for short-circuiting purposes.\n",
    "head_branch": "bindShortCircuit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 696fcf7ead4cb717dfdecff4febade94b9b60046 into c2cf2d4a098fc55716d22334a24dfa30f1069a8b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e03a21fa1e1f1aaf56",
    "number": 1126,
    "body": "Just a minor 5 bytes.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e13a21fa1e1f1aaf57",
    "number": 1124,
    "body": "_.max function returns the **last** max element if there exists more than one max element, however, _.min function returns the **first** min element.\n\nI made a little change on _.max function to make it returns the first max element.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4b8a75840ffef5cdb8b2c371cd3145504841fbed into ed2f15ecc81214e74c7128e7e381e86bfb869ac3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e23a21fa1e1f1aaf58",
    "number": 1123,
    "body": "This pull request will allow `_.extend` to properly copy over getters/setters, provided the ECMA5 functions `Object.defineProperty` and `Object.getOwnPropertyDescriptor` are available. If not, it will fall back to assigning the property on the destination object, as it does now.\n#275 attempted this, but was rejected. I've used ECMA5 functions instead of the deprecated ones. I'm also checking for functions before using them, to prevent breaking in unsupported browsers.\n\nIt also attempts to detect IE 8's faulty `Object.defineProperty` implementation ( https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty#ie8-specific and http://blogs.msdn.com/b/ie/archive/2010/09/07/transitioning-existing-code-to-the-es5-getter-setter-apis.aspx ), in which case it'll use the old method.\n\nUnfortunately the test I've added breaks testing in IE 8. msdn.com says you have to use `__defineGetter__` and `__defineSetter__` which are the deprecated functions #275 had... but in testing they would result in runtime errors. Without the tests I've added, everything works fine in IE 8 even with my changed `_.extend`.\n\nI've tested in:\nMozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20100101 Firefox/16.0\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/536.29.13 (KHTML, like Gecko) Version/6.0.4 Safari/536.29.13\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.65 Safari/537.31\n",
    "head_branch": "gettersSetters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e33a21fa1e1f1aaf59",
    "number": 1121,
    "body": "I'm just thinking that we don't need below  `Conditional (Ternary) Operator (?:)` in `each` function and run it eveytime, we don't need to define the `var computed` also.\n\n``` javascript\nvar computed = iterator ? iterator.call(context, value, index, list) : value;\n```\n\nIn addition, for the code below, we create a new object and set it to `result` every time once the `computed` matches the condition `>= result.computed` or `< result.computed`, it's beatutiful code, but we don't need to creat the object, reset the values of `result` can be work. but as it looks good, so I didn't update this part, any ideas?\n\n``` javascript\ncomputed < result.computed && (result = {value : value, computed : computed});\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e43a21fa1e1f1aaf5a",
    "number": 1120,
    "body": "Added following unit test for `_.where`\n\n``` javascript\n    result = _.where(list, {a: 1}, true);\n    equal(result.b, 2, \"Only get the first object matched.\")\n    result = _.where(list, {a: 1}, false);\n    equal(result.length, 3);\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5ecb05bf9a6d088f339c6251f001200889579cf2 into 164a1b08621024fa83b30bd524810759f40bf640"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e53a21fa1e1f1aaf5b",
    "number": 1116,
    "body": "Added the ability to accept array of properties and return an object with an array for each property.\n\nIf the key is a string, do the current emplementation.\nIf the key is an array of strings, pluck each one and return an object\nwith array of each property.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e63a21fa1e1f1aaf5c",
    "number": 1115,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e73a21fa1e1f1aaf5d",
    "number": 1114,
    "body": "Tests for _.escape() and _.unescape() did not cover all the possible escapable strings, and did not test for multiple replacements of the same substring (e.g. 'Larry & Curly & Moe')\n\nThese extra tests are the only thing left from my ill-fated attempt at improving performance of the escape/unescape methods by testing for the necessity of changes using indexOf before escaping ([indexOf is very cheap compared to the regex replace](http://jsperf.com/regexp-vs-indexof))\n",
    "head_branch": "escape_unescape",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 164a1b08621024fa83b30bd524810759f40bf640 into df6bf5d692b014526e5735aad576d2a38c26b002"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e83a21fa1e1f1aaf5e",
    "number": 1113,
    "body": "This seems like an intuitive functionality. Example:\n\n``` js\nvar people = [{first : 'moe', last: 'doe', age : 30}, {first : 'curly', last: 'brackets', age : 50}];\n_.pluck(people, 'first'); // returns ['moe', 'curly']\n_.pluck(people, ['first', 'last']); // returns [ ['moe', 'doe'], ['curly', 'brackets'] ]\n```\n\nPerformance impact: 20% slower\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07e93a21fa1e1f1aaf5f",
    "number": 1112,
    "body": "The goal is to supply a function to work with the object itself. Most underscore functions work with collections and treats objects as only associative array. #1068 may be related, but that pull request still work the object as an associative array.\n\nThe main use case is during chaining that you'll want to apply a certain function to the wrapped object.\n\n``` javascript\n// The goal of this snippet is to select cells in table,\n// do filter on them, then wrap it back as a jQuery object\n_.chain($('td')) // One of the great thing about underscore is\n                     // that it work with any array-like object\n  .groupBy('cellIndex')\n  .sortBy(function(__, key) {\n    return Number(key)\n  })\n  .first()\n  .transform($)\n  .value()\n  .css('background-color', 'red')\n```\n\nAlternative solution without `_.transform` may be ugly because it disrupts the structure flow.\n\n``` javascript\n$(_.chain($('td'))\n  .groupBy('cellIndex')\n  .sortBy(function(__, key) {\n    return Number(key)\n  })\n  .first())\n  .value()\n  .css('background-color', 'red')\n```\n\nNaming-wise, it may be more appropriate to call it `apply`. But since the `_` object is itself a function and we don't want to override `Function.prototype.apply`, I came up with the `transform` alternative. \n\nAlternatively, the functionality may be merged with either `_.chain().value(function)` or `_.tap(function)` by making the chain returns tap's function return value if it does return something. Something like this\n\n``` javascript\n_.tap = function(obj, inter) {\n  return inter(obj) || obj\n}\n```\n",
    "head_branch": "transform",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ea3a21fa1e1f1aaf60",
    "number": 1110,
    "body": "Resubmit of pull #1109. When a non-object is passed into _.has, an exception is thrown on the hasOwnProperty. Patch checks that obj is indeed and object and if not, returns false by default.\n\nGitHub for Windows loves to show you that the diff is good (and certainly it is because one's editor is setup to handle spaces/tabs/newlines correctly) but then foobars everything in transit. I should open a ticket on that...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ea3a21fa1e1f1aaf61",
    "number": 1109,
    "body": "_.has exceptions when obj passed is not actually an object. Now does a\ncheck to ensure that an object was passed before proceeding. Non object\nreturns false by default.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07eb3a21fa1e1f1aaf62",
    "number": 1108,
    "body": "This pull request adds a small feature to `_.result`; when called with more than two arguments, those arguments are passed to an eventual method on the object:\n\n```\nvar obj = {method:someFunc, prop:\"val\"};\n_.result(obj,\"method\",1,2,3); // => returns result from calling someFunc(1,2,3) with obj as context\n_.result(obj,\"prop\",1,2,3); // => returns \"val\" like before, surplus args 1,2,3 have no effect\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ec3a21fa1e1f1aaf63",
    "number": 1106,
    "body": "Recently I've been finding needs for simple evaluation of dot and bracket notation and I've been unable to find a good solution. At one point I considered using `_.template` for this but this seemed like overkill, and the performance and security overhead of using the underlying `Function` constructor (much like evil `eval`) make it very off-putting, at least for this behaviour.\n\nWith `_.resolve` you can easily do the following:\n\n``` javascript\nvar data = { foo: 'bar', fu: [{ baz: 'bingo' }] };\n\n_.resolve(data, 'foo');\n// \"bar\"\n\n_.resolve(data, 'fu[0].baz');\n// \"bingo\"\n\n_.resolve(data, 'fu[1].baz');\n// undefined\n\n_.resolve(data, 'foo[\"length\"]');\n// 3\n\n_.resolve(data, 'fizz');\n// undefined\n```\n\nOne thing I'd like to note is that, due to the lightweight nature of the code, the following patterns are valid in `_.resolve` but not in JavaScript:\n\n``` javascript\n// Only numbers in dot notation would throw \"Unexpected number\" in JavaScript\n_.resolve(data, 'fu.0.baz');\n// \"bingo\"\n\n// Optional quotation marks (single or double) in bracket notation for cleaner/simpler paths\n_.resolve(data, '[foo][0][\"baz\"]');\n// \"bingo\"\n```\n\nBefore I start copying this code to all my projects I thought it would be best to see if this feature would be welcomed in Underscore. Possible uses:\n\n``` html\n<body data-log=\"style.direction\" style=\"direction: ltr\">\n  <a href=\"http://underscorejs.org\">Underscore.js</a>\n  <script>\n    if (_.resolve(myLibrary, 'options.custom.parseLogs')) {\n      _.each(document.querySelectorAll('[data-log]'), function (element) {\n        console.log(_.resolve(element, element.dataset.log));\n      });\n    }\n  </script>\n</body>\n```\n\nThe idea of parsing either user-defined, untrusted, dynamic, or hard coded (e.g. property paths taken from element attributes or a JSON response value) is obviously the main benefit here as raw JavaScript will clearly out-perform standard usage (i.e. `var value = foo.bar.fu.baz` will be more efficient than `var value = _.resolve(foo, 'bar.fu.baz')`).\n\nFinally, I can see this being a great asset when couple with something like `_.memoize`.\n### Update:\n\nSupport for bracket notation has been removed in order to optimise dot notation, which is more common and user-friendly.\n\nAlso, leading and trailing dots are no longer ignored as it should be up to the user to ensure that the `path` argument isn't malformed.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ed3a21fa1e1f1aaf64",
    "number": 1103,
    "body": "I added an interval utility function with behavior similar to setInterval yet based on _.delay() and supports a finite number of function calls(repetitions) between each interval. Example: _.interval(function(){\n    console.log(\"test\");\n},100,5);\n\nExecutes the function that prints test every 100 milliseconds 5 consecutive times.\n\nI have added a simple test on the function too for a demonstration, would be interested to see this function added to the awesome underscore library. Have a good day!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ee3a21fa1e1f1aaf65",
    "number": 1100,
    "body": "I thought it'd be handy to be able to pass an array of arguments as the optional third parameter of `_.result`.\n\nIt's completely backwards compatible, the existing tests pass, and I've added some more.\n\n``` javascript\nvar obj = {i: _.identity};\n_.result(obj, 'i', ['lol']) === 'lol'\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ef3a21fa1e1f1aaf66",
    "number": 1098,
    "body": "Perhaps this is a bit pedantic, but I _am_ partial to \"create\" over \"convert\" as it implies the operation is not in place.\n",
    "head_branch": "to-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 61cec403bee0c6b7c17c777e581e1c32eb9af301 into af372b6dafca21275cdf21f9a64c06100ef30a94"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f03a21fa1e1f1aaf67",
    "number": 1097,
    "body": "...t objects).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f13a21fa1e1f1aaf68",
    "number": 1095,
    "body": "Added findIndex method, which returns the index of the first element to pass a truth test.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f23a21fa1e1f1aaf69",
    "number": 1094,
    "body": "[JSHint](http://jshint.com/) is a good way to scan JavaScript code for areas that might lead to bugs and unexpected behavior.\n\nI ran `jslint .` on the latest underscore and saw 1094 lines that could use a bit of improvement. Most of these are trivial to fix, but I thought it would be more respectful to let you guys decide how to resolve them--you can even turn on and off certain JSHint rules in `.jshintrc` to really fit what you care about in your codebase.\n\nExample:\n\n```\n$ jshint .\ntest/arrays.js: line 6, col 76, Mixed double and single quotes.\ntest/arrays.js: line 7, col 68, Mixed double and single quotes.\ntest/arrays.js: line 8, col 40, Mixed double and single quotes.\ntest/arrays.js: line 8, col 75, Mixed double and single quotes.\ntest/arrays.js: line 9, col 40, Mixed double and single quotes.\ntest/arrays.js: line 9, col 49, Mixed double and single quotes.\ntest/arrays.js: line 9, col 79, Mixed double and single quotes.\ntest/arrays.js: line 10, col 40, Mixed double and single quotes.\ntest/arrays.js: line 10, col 52, Mixed double and single quotes.\ntest/arrays.js: line 10, col 82, Mixed double and single quotes.\n...\n1094 errors\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f33a21fa1e1f1aaf6a",
    "number": 1093,
    "body": "Added the specification of what happens if the no element passes the test.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e6e35929f69a0f5826949790ab3bd38ab4b7723d into a2f348613ef12692560b187b0a22d9a43fe3a3ef"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f43a21fa1e1f1aaf6b",
    "number": 1092,
    "body": "done testing, It should work now.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f53a21fa1e1f1aaf6c",
    "number": 1091,
    "body": "Used to access this keyword from inside that function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f63a21fa1e1f1aaf6d",
    "number": 1090,
    "body": "_I understand you are not interested in maintaining a json configuration file for every package manager out there. So I won't ask you to. However, without lifting a finger (other than accepting this pull request ;) you can make component authors and users very happy!_\n\nThese commits make `component.json` automatically created from the already maintained `package.json`, on every release. This enables use of underscore.js as a [component/component](https://github.com/component/component#readme), with _no extra effort_ from the underscore.js team going forward.\n\nThere is already a [component/underscore](https://github.com/component/underscore) repo, making a copy of underscore.js available with a `component.json` file, but it is manually maintained and is already falling behind your releases. Rather than putting manual work into copying `underscore.js` and updating the `component.json` file there, it would be easier for everyone if the `component.json` can be made available and updated here, automatically.\n\nIf you accept this pull request, everything is automatic for every future release, and nobody has to do anything else to maintain it.\n\nThanks for your time.\n",
    "head_branch": "component",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f63a21fa1e1f1aaf6e",
    "number": 1089,
    "body": "Add positionOf to find the indexOf an object in an array of objects given key value.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f73a21fa1e1f1aaf6f",
    "number": 1087,
    "body": "I like `_.each()` operator in compare to `$.each()` one. Sad I can not break it early on condition, `var breaker = {}` is local. \nI suggest to expose the variable to make this possible.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f83a21fa1e1f1aaf70",
    "number": 1086,
    "body": "These four commits cover two extensions to underscore:\n1. Addition of a new _.fill function: It's purpose is to fill a given sparse array with elements from another array. An optional options hash allows one to specify whether or not all filler items should be consumed and which elements are to be considered vacuous.\n2. Extension of _.partial using the previous _.fill function: It is now possible to specify which arguments of the passed function should be partially filled in; we no longer need to start with the first argument anymore.\n\nPlease have a look at the tests for further clarification.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07f93a21fa1e1f1aaf71",
    "number": 1084,
    "body": "add limit for shuffle function, allowing shuffling of only the number of elements needed (for example, only shuffling the 9 cards required for a heads up game of holdem rather than the whole deck).\n\nThis is a feature of the Fisher-Yates shuffle that can save time if you only need to pick a few values from a large set.\n\nReturns an array of random elements up to the `limit`...\n\n```\nvar cards = _.shuffle(deck,9) // returns 9 random cards from the deck\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07fa3a21fa1e1f1aaf72",
    "number": 1083,
    "body": "In the Clojure world, the opposite of filter is known as remove:\n\nhttps://github.com/clojure/clojure/blob/c6756a8bab137128c8119add29a25b0a88509900/src/clj/clojure/core.clj#L2538\n\nThe collect/inject/reject name trio is cute, but I (and many) would appreciate this alias just as well.\n\nVictor\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07fb3a21fa1e1f1aaf73",
    "number": 1082,
    "body": "Moving `invoke`'s `isFunc` conditional outside of the map function is a\nminor optimization. Since `isFunc` never changes, the correct path can be determined before the map operation is done, saving a few cycles.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07fc3a21fa1e1f1aaf74",
    "number": 1079,
    "body": "Make the \"quick reference variable\" declaration section match up with\nthe style used in the ECMAScript 5 variable declaration section below.\n\nSuper nitpicky, I know, but the difference between the whitespace styling bugged me ;).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2e250977d8a1778a6ad689740b07b56bff2cc33f into 6bed4a20d1bc1d98da914c6178f08db7254cab88"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07fd3a21fa1e1f1aaf75",
    "number": 1077,
    "body": "usage in the tests. open to suggestions on a new name for this as inject is already taken...\nmore than happy to add some more tests if this is approved.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07fe3a21fa1e1f1aaf76",
    "number": 1073,
    "body": "Give the following code:\n\n``` javascript\nvar box = {\n  length: 2,\n  width: 2,\n  height: 2\n};\n\n_.each(box, function (value, prop) {\n  console.log(prop, value);\n});\n```\n\nThe expected output would be:\n\n```\nlength 2\nwidth 2\nheight 2\n```\n\nThe actual output is:\n\n```\n0 undefined\n1 undefined\n```\n\nInstead of checking the existence of the length property I check that length - 1 is a property of the object. So Arrays and array-like things are treated as arrays and objects with a length property are treated as objects.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e07ff3a21fa1e1f1aaf77",
    "number": 1071,
    "body": "I've found myself writing several functions where the first thing I do is check to see if the variable passed into the function is not null or undefined. \n\n``` javascript\nfunction(someValue) {\n  if (someValue == null) {\n    return;\n  }\n  // Modify some state...\n}\n```\n\nI have come across two common use cases for this technique. \nWhen pulling a value out of local storage that may or may not have previously be set.\n\nWhen working with `<select>` in a data binding library like knockout. Often I will want to write a function that consumes the current value of a select list. However my select list may have an option with no value that is just used as a caption to prompt the user to select a real option. In this case a maybe function would be useful because I often do not want to perform any action of the caption option is selected.\n\nUsing a maybe wrapper would prevent a function from being called if any of the arguments are null or undefined. \n\n``` javascript\nvar foo = _.maybe(function(someValue) {\n  // someValue is not null or undefined\n  // Modify some state...\n});\n\nfoo(JSON.parse(localStorage.getItem('key')));\n```\n",
    "head_branch": "maybe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08003a21fa1e1f1aaf78",
    "number": 1070,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08013a21fa1e1f1aaf79",
    "number": 1068,
    "body": "Reason:  There are many methods in underscore that transform array data structures, I find quite often I want to transform values of a object, either to prefix or suffix values, convert values or some other kind of uniform transformation on all the values without needing to return a new object and explicitly specify each key.\n\nAn example is converting all values of a hash from a string to a currency format, you would do:\n\n``` javascript\nvar hash = {cost: '55', shipping: '20', total: '75'};\nvar currency_hash = _.transform(hash, function(value) { return value.toCurrency() });\n```\n\ncurrently you would do the following:\n\n``` javascript\nvar hash = {cost: '55', shipping: '20', total: '75'};\nvar currrency_hash = {cost: '55'.toCurrency(), shipping: '20'.toCurrency(), total: '75'.toCurrency()};\n```\n\nI originally thought _.map would do this for me.\n\nI originally wrote this also allowing it to transform the keys as well as the values but it was a bit more verbose and it's more common to want to transform the values than the keys.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08023a21fa1e1f1aaf7a",
    "number": 1065,
    "body": "There's an important difference between restrictive ('which') and nonrestrictive relative clauses ('that') in English. \n\nSince all versions of debounce meet the description given, 'which' is the correct word. \n\nAdditionally this means people who don't know what a debounced function is won't stop reading (currently it implies that some unknown things have a certain behvaior, rather than all unknown things having a certain behavior, ie, right now it's not a definition, with 'which' it would be).  \n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2d3f3ddf0aaed78db548ce2572b837b9fd61fdfd into a9c9deaf313c28da688b220ede7ef9ec7003a99a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08033a21fa1e1f1aaf7b",
    "number": 1063,
    "body": "The documentation for every/all was out of date, and didn't show that the iterator argument is optional.  This pull request fixes that.\n",
    "head_branch": "every-doc-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6e66cc24f698aa8c31b68be5236ad1ab5fec3441 into 9c6f1af62b1b196000435718bfd5a58367ea8d99"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08033a21fa1e1f1aaf7c",
    "number": 1062,
    "body": "Adding the _.flip() function to return a function that applies its arguments in reverse.\n\nThis idea and justification for this function is per this comment: https://github.com/documentcloud/underscore/pull/474#issuecomment-16132870\n\nAn appropriate test has been added to the functions.js test file.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08043a21fa1e1f1aaf7d",
    "number": 1061,
    "body": "Following the convention that:\n- For a giving function, the last argument is a callback \n- And for that callback, the first argument is the error. \n  This function allows us to get our original function to retry itself N times whenever there is failure  (when the first argument of the callback is true) before giving up.\n  It overrides the original callback  function in order to test for the value of the first argument until it is false (no error) or the retry cap is reached.\n\nExample:\n\n``` javascript\n    var testFunc = function(param1, cb) {\n      var result = //service request that tends to be unstable\n      var err = result == null;\n      cb(err, result);\n    };\n\n   //Doing...\n   testFunc(\"test\", function(err, result) {\n     //Here we'll have to handle the error that happens when the service is unstable\n   });\n\n    //But by doing\n    var retryTest = _.retry(5, testFunc);\n    retryTest(\"test\", function(err, result) {\n       //It'll retry 5 times before giving up and calling this callback, if one of those times, the service works, it'll return a valid response instead of the error.\n    });\n```\n",
    "head_branch": "retry",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08053a21fa1e1f1aaf7e",
    "number": 1060,
    "body": "If so there is still a bug! \n\nDon't set ran to true before calling the wrapped method but just after. But this way the wrapped function will be called more than once.\n\nIt claims more attention that the one you had. You closed the pull request to fast. Sorry to insist. Let comment on.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08063a21fa1e1f1aaf7f",
    "number": 1058,
    "body": "maybe not really needed but there is a latent bug \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08073a21fa1e1f1aaf80",
    "number": 1055,
    "body": "Same as extend, but does not overwrite properties in the target object if they already exist.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08083a21fa1e1f1aaf81",
    "number": 1054,
    "body": "Since Underscore is a dependency of so many Node.js modules, it would help a lot to reduce the size of it.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 290f2a56a6995ef7475706718a259a3769e87407 into 556be78cbc4aa46fc6a305e52a01388fc812dc8c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08093a21fa1e1f1aaf82",
    "number": 1052,
    "body": "This utility method has been quite handy for me when defining custom errors. Hopefully the underscore community agrees.\n\nSorry about jumping the gun on writing the docs. I didn't notice the contribution guideline until now.\n\nThanks @jashkenas for all your hard work on underscore and backbone.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e080a3a21fa1e1f1aaf83",
    "number": 1051,
    "body": "looks nicer in LaTex :wink: \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7342e289aa9d91c5aacfb3662ea56e7a6d081200 into 72f17b8b73e8c4219e2e80f3e165fc832b63bed6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e080b3a21fa1e1f1aaf84",
    "number": 1050,
    "body": "_.uniq uses an O(N^2) algorithm when the passed array is unsorted. This PR is an optimization to make that algorithm O(N) instead. So basically, there's no difference anymore if the array is sorted or unsorted.\n\nI use a dictionary (object) lookup (O(1)) to check if an element is already inside the results array as opposed to another array and contains. So the memory requirements should be around the same. (One boolean object per entry in the dictionary though).\n\nI ran tests in Chrome, Firefox and Safari and this implementation is roughly 2 orders of magnitude faster than the regular one.\n\nhttp://jsperf.com/uniq-performance\n\nAlso, this works fine for undefined or null entries in the array.\n\n``` javascript\n>_.myuniq([ null, null, undefined, undefined ]) => [null, undefined]\n> a = {}\n> a[undefined] = 1\n> a[null] = 1\n> a => Object {undefined: 1, null: 1}\n> a[null] === 1  > true\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e080c3a21fa1e1f1aaf85",
    "number": 1049,
    "body": "As requested in #1047.\n\nThis is another option for the implementation of _.unzip. It's a lot faster and not much larger, not as pretty though :)\n",
    "head_branch": "unzip-no-sparse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e080d3a21fa1e1f1aaf86",
    "number": 1048,
    "body": "For example `_.times(0,_.identity)`, `_.times(-1,_.identity)` and `_.times(-100,_.identity)` should all equal `[]`.\n\nI think this is consistent with how `_.range` works and also with how the normal use of `for` loops work. It also means that code like this will work even when arrays equals `[]`:\n\n```\n_.times(_.max(_.pluck(arrays, 'length')), _.identity)\n```\n\nFor a real world example of where this would improve some code see this line from my other PR at https://github.com/documentcloud/underscore/pull/1047#discussion_r3627751\n\nI've also shortened the implementation of `_.times` by writing it in terms of `_.range` and `_.map` which I think is quite nice, can anyone see any downsides?\n\nEDIT: back to an iterative solution for performance reasons\n",
    "head_branch": "times-negative",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18ce2c86eec923a8a05edf0c6f66b490bbbadc45 into b72f8293a8a61b9f54577d009f5c4c031473a2ca"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e080e3a21fa1e1f1aaf87",
    "number": 1047,
    "body": "@jdalton informed me that some browsers have problems with sparse arrays[1](https://github.com/documentcloud/underscore/commit/c3d695313534ad560082380ccd084a199edcccfe#commitcomment-2925557) so I re-wrote `_.unzip` to not create them. In the process I managed to reduce the amount of code and I'm quite pleased with the result :)\n",
    "head_branch": "unzip-no-sparse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c9831a9d63da255f653402575bfed5e7610f0c69 into c57f276f72c56e4556cc69ad9d0220f8c4690775"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e080f3a21fa1e1f1aaf88",
    "number": 1046,
    "body": "I added a handy method to \"columnize\" array data resp. to transform it into a vertical structure. I had to display data in 3 columns recently and therefore had to transform the \"horizontal\" data into \"vertical\" data. This allows you to work with simple floating divs and just iterate through the transformed data. Hope it's not only me who needs this ;)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e080f3a21fa1e1f1aaf89",
    "number": 1045,
    "body": "The documentation now mentions the value returned by **_.times**\n\nI removed the changed example and the test case from my previous [pull request](https://github.com/documentcloud/underscore/pull/1043).\n",
    "head_branch": "rsml/times-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8e8647f474a5ca2a15c9d96af6ec8eae2e004a39 into d10654b3c1287f58c2522c876b2bf01678aca8e7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08103a21fa1e1f1aaf8a",
    "number": 1044,
    "body": "I've added a `_.curry` function. I think it's useful, does anyone else agree?\n\nI see `_.curry` functions have been suggested before, but there seems to have been previous confusion of the difference between `curry` and `partial`.\n\nFrom the Haskell wiki[1](http://www.haskell.org/haskellwiki/Currying):\n\n```\nCurrying is the process of transforming a function that takes multiple \narguments into a function that takes just a single argument and returns\nanother function if any arguments are still needed.\n```\n\nThe `_.curry` function I've added works slightly differently to take account of the very different nature of JavaScript vs. Haskell. \n\nA simple example:\n\n```\nfunction add(a,b) {\n  return a+b;\n}\nvar curriedAdd _.curry(add);\nvar increment = curriedAdd(1);\nconsole.log(increment(3));\n// 4\n```\n\nBut `_.curry` doesn't just work with two argument functions:\n\n```\nfunction tripple(first, second, third) {\n   return [first, second, third];\n}\nvar curriedTripple = _.curry(tripple);\nvar startsWithMoe = curriedTripple(\"moe\");\nconsole.log(startsWithMoe(\"larry\")(\"curly\"));\n// [\"moe\", \"larry\", \"curly\"]\n```\n\nYou can supply more than one argument with each call:\n\n```\nconsole.log(startsWithMoe(\"larry\", \"curly\"));\n// [\"moe\", \"larry\", \"curly\"]\n```\n\nSo a curried function in this case acts the same as the original if you supply all the arguments at once:\n\n```\nconsole.log(curriedTripple(\"moe\",\"larry\", \"curl\"))\n// [\"moe\", \"larry\", \"curly\"]\n```\n\nIf you supply more arguments than are left they'll get passed through to the function and by available in the `arguments` variable as normal.\n\nTo support functions which don't specify their arguments explicitly and instead use the `arguments` variable you can pass in the number of arguments to expect to `_.curry`:\n\n```\nfunction tuple () {\n   return _.toArray(arguments);\n}\nvar curriedPair = _.curry(tuple, 2);\nconsole.log(curriedPair(\"moe\")(\"larry\"))\n// [\"moe\", \"larry\"]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08113a21fa1e1f1aaf8b",
    "number": 1043,
    "body": "Previously there was no mention on the home page that **_.times** returns an array of values.\n\nThis is important, because **_.times** is costly when you have a large **n** and you are not going to use the returned value.\n\nI also updated the tests for **_.times** to demonstrate a useful recipe where you pass **_.identity** as an argument into **_.times**. This recipe mimics **_.range**, but it is much more adaptable.\n",
    "head_branch": "rsml/times-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08123a21fa1e1f1aaf8c",
    "number": 1042,
    "body": "because _.include sounds more like adding an item to an object, _.includes clearly tells that it is a conditional statement.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08133a21fa1e1f1aaf8d",
    "number": 1041,
    "body": "Used type coercion to coerce strings that look like numbers.\n",
    "head_branch": "timesError",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08143a21fa1e1f1aaf8e",
    "number": 1039,
    "body": "I find this a useful function to have when I want to partially apply functions, especially when mapping across an array.\n\nIs it something that might fit in with core underscore?\n",
    "head_branch": "add_flip_function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08153a21fa1e1f1aaf8f",
    "number": 1038,
    "body": "Based on #1016. I modified @fogus's code to allow tuples of any size, not just pairs.\n\nThis function would be very useful I think, I'd love to see it in underscore!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5cbf47e392a7f1d8a33e6f1ca418dacf62d3e3ba into 9cea18952a3d7c133bed8f1b2985c0766c81e4dc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08163a21fa1e1f1aaf90",
    "number": 1037,
    "body": "When I read the source file, I found that when i write code as follow, it will not correct.\n\n``` js\n    var obj = {\n        'heght': 2,\n        'width': 3,\n        'length': 4\n    };\n    var result = _.size(obj);\n```\n\nthe size() function is:\n\n``` js\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n  };\n```\n\nso, i think maybe this is a better way, isn't it?\n\n``` js\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return _.isArray(obj) ? obj.length : _.keys(obj).length;\n  };\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08173a21fa1e1f1aaf91",
    "number": 1035,
    "body": "NPM spec allows for the underscore license in the package.json. For completeness, I added it in :)\n\nhttps://npmjs.org/doc/json.html\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c8219e75bb7d82348cbd813892656aaf0873abd3 into a7b4c3144a58e3ce2b788fd11ecd4f2a7febb2df"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08183a21fa1e1f1aaf92",
    "number": 1028,
    "body": "The current tests all use the same operation-- addition.  This update adds a test using multiplication to prevent errors such as the following from passing:\n\n``` javascript\nvar reduce = function(list, iterator, memo) {\n    result = memo || 0;\n    each(list, function(x) {\n      result = iterator(result,x);\n    });\n    return result;\n  };\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ba6103493250855730797041dd832f33242b2efd into 6f1459d204ba8b6db759aecae04894522a7eed80"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08193a21fa1e1f1aaf93",
    "number": 1027,
    "body": "Using push to unify the way to adding to array.\nFix Issue #1025\n",
    "head_branch": "issue1025",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1342077d4904018ce8fd955da47ec705a3909477 into 9d375026f54c25eed5aeec20730f3dba0f9841bc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e081a3a21fa1e1f1aaf94",
    "number": 1026,
    "body": "unify the way to adding to array.\nfix Issue #1025\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e081b3a21fa1e1f1aaf95",
    "number": 1024,
    "body": "I've had this scenario when grouping objects such as\n\n``` javascript\n    {\n      1363402200: { \"values\": \"1\" },\n      1363402201: { \"values\": \"5\" },\n      1363402202: { \"values\": \"17\" }\n    }\n```\n\nand using groupBy doesn't preserve the keys as this becomes\n\n``` javascript\n_.groupBy(obj, function(v, k) { return k % 2; })\n\n  {\n    \"0\": [\n      { \"values\": \"1\" },\n      { \"values\": \"17\" }\n    ],\n    \"1\": [\n      { \"values\": \"5\" }\n    ]\n  }\n```\n\nAnd the one I prefer is this which preserves the keys as I need to do additional operations on it.\n\n``` javascript\n  {\n    \"0\": {\n      \"1363402200\": { \"values\": \"1\" },\n      \"1363402202\": { \"values\": \"17\" }\n    },\n    \"1\": {\n      \"1363402201\": { \"values\": \"5\" }\n    }\n  }\n```\n\nI'm not sure if this is a common use case as I've made \"preserve keys\" default instead of optional.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e081b3a21fa1e1f1aaf96",
    "number": 1023,
    "body": "",
    "head_branch": "compare-sorted",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e081c3a21fa1e1f1aaf97",
    "number": 1022,
    "body": "This is a utility method to slice an array and invoke callback on each slice.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e081d3a21fa1e1f1aaf98",
    "number": 1019,
    "body": "As discussed in the issue tagged below, you could change the which edge of the delay your function is called on with a `debounce()` but not with a `throttle()`. This pull request addresses the issue by creating a simple third argument like the one in `debounce()` that if explicitly set to `false` will make sure your function is not called at the leading edge of the delay.\n\n[Addresses #926]\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bf5c07cd4ebc7571ac41229cd9057275a0e49bf0 into cf2d3ed229d162b4818bd2c892f040858ca19e1d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e081e3a21fa1e1f1aaf99",
    "number": 1018,
    "body": "",
    "head_branch": "difference-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e081f3a21fa1e1f1aaf9a",
    "number": 1016,
    "body": "Very often I've found the need to take an object (often nested) and convert it to an array of pairs via `_.pairs` to perform some sort of tree-walking or sequential operation.  Likewise, I've also found many cases up using `_.zip` to create an array of pairs for processing and eventual object creation via `_.object`.  To support these types of operations I've built a large tool set for processing pairs, sequences and alists (arrays of pairs).  However, there is a link missing in the beautiful symmetry created by `_.zip`, `_.pairs` and `_.object` and that's `_.unzip`.  There is a ticket for something called \"unzip\" at #41, but it operates differently than I propose.  That is, `_.unzip` is meant to allow one to come full circle from a pair of arrays, to an array of pairs, to an object, back to an array of pairs and finally back to a pair of arrays.  It's action is as follows:\n\n```\nvar names = ['moe', 'larry', 'curly'], ages = [30, 40, 50];\nvar zStooges = _.zip (names, ages);              // pairs of stooge data                                              \n\n_.unzip (                                        // put back together                                                 \n  _.pairs (                                      // back to pairs                                                     \n    _.invert (                                   // swap keys/values                                                  \n      _.object (                                 // objectify                                                         \n        _.map (zStooges, function (pair) {       // convert the head of the pair to upcase                            \n  return [pair [0].toUpperCase (), pair [1]];\n})))));\n```\n\nNow obviously you'd write this code more beautifully than this, but the example is meant to show that a data structure comes full-circle[^1].  I've found `unzip` highly useful and think it would complete a beautiful relationship between highly useful functions.\n\n_Apologies for the duplicate of #1015. I've been working in Jira for so long that I wasn't prepared for a ticket system that worked well._\n\n[^1]: It almost comes full circle but the call to `_.pairs` for some reason converts the `Object` number keys to strings. :-(  That's a different matter outside the scope of this ticket.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9f471e05f6eb02655e8235d24e80f2259b7f538d into 9cea18952a3d7c133bed8f1b2985c0766c81e4dc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08203a21fa1e1f1aaf9b",
    "number": 1013,
    "body": "In Internet Explorer (< version 9) host-functions is always \"object\":\n\ntypeof alert === \"object\"\n\nObject.prototype.toString.call(document.getElementById) === \"[object Object]\".\n\n_.isFunction(alert); // false in IE7,8\n_.isFunction(document.getElementById); // false in IE7,8\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08213a21fa1e1f1aaf9c",
    "number": 1012,
    "body": "Going through the test documentation today I noticed the memoized fibonacci function would only be memoized on the first call and on recursive calls it would use the non-memoized function.\n",
    "head_branch": "fib-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dc53862795393a3ba37de8dc303a583398137d66 into 252aa3ce5d3ca175d09d0240fee6b716dec5b1b8"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08223a21fa1e1f1aaf9d",
    "number": 1011,
    "body": "Previously the constructor checks returned early which would prevent the most recently pushed elements from being popped from the stacks.\n\nNow result is set to false so the the pop lines are still reached after the constructor checks are done.\n",
    "head_branch": "always-pop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08233a21fa1e1f1aaf9e",
    "number": 1008,
    "body": "`_.groupBy` could be used for this as well but I feel like doing this:\n`grouped[attr][0]` is kinda ugly.\n\nI think it's quite often that you want to create a lookup table where\nyou map each object some unique attribute.\n\nIf the key iterator doesn't generate unique keys the last value for each\nkey is used.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08243a21fa1e1f1aaf9f",
    "number": 1007,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d1b4f490114922ba6184792f1d73649e251c5427 into 933c35f88a37c88d0e99c1240f87a02859037d4f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08253a21fa1e1f1aafa0",
    "number": 1005,
    "body": "Moved the build system to Grunt so that the build system is the same language as the code. I was able to integrate the test suite and uglify.\n\nProblems:\n- The version number in the package.json has to be one version ahead of what is on NPM otherwise it causes a circular dependency.\n- Using jshint threw a few problems after suppressing stylistic things\n  - `a == 0` on line 857. I know why this is being done but jshint doesn't let you turn it off\n  - `return bound = function() {` on line 588. Again, no jshint option.\n\nI was able to resolve both of these but I wanted to get some feedback on possible resolutions before I did them.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08263a21fa1e1f1aafa1",
    "number": 1004,
    "body": "Hi,\n\nDue to this issue https://github.com/documentcloud/underscore/issues/580 I made a little change to the code with the hope to have this possibility in the future.\n\nAny comment is appreciated.\n\nThanks!\n",
    "head_branch": "isobject-branch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08273a21fa1e1f1aafa2",
    "number": 1001,
    "body": "Adding note about using strings as iterators and example usage.\n",
    "head_branch": "sorted-index-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3764e8f671232f1ca0a42fd8fc0eb22db140e47d into 3a6b32f5b976a45583824cf1bbd4da29058a579f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08273a21fa1e1f1aafa3",
    "number": 999,
    "body": "Extended _.contains() so it accepts multiple values and returns true if all values are contained in the collection:\n\n``` javascript\n_.include([1,2,3], 2, 3) // true\n_.include([1,2,3], 3, 4) // false\n```\n",
    "head_branch": "contains-multiple-values",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08283a21fa1e1f1aafa4",
    "number": 997,
    "body": "Fixed some typos in comments and test strings.\n",
    "head_branch": "spellcheck-20130305T183043",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 94b4e6c36cce560bc2bb8d02f29c1346ca67c973 into 48e373a522bb98802154a0fa0e517051fca61a33"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08293a21fa1e1f1aafa5",
    "number": 995,
    "body": "This is a function I use a lot, to convert an array into an object keyed off an index. I find it really useful for taking arrays from REST endpoints, and keying them off their id.\n\nExample usage:\n\nvar array = [{foo:{bar:'baz'}},{foo:{bar:'boop'}}];\nvar obj = _.createIndex(array,'foo.bar',true);\n\nresult:\n\n{\n  baz: {foo:{bar:'baz'}},\n  boop: {foo:{bar:'boop'}}\n}\n\nIt takes a 'path' as a string, and splits it on \".\". It can also take an array in case your parameters have dots in them.\n\nIt's third argument is a boolean for whether or not the indexes are unique. If not, it will return an object of arrays of the original elements.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e082a3a21fa1e1f1aafa6",
    "number": 994,
    "body": "[Composer](http://getcomposer.org) is a package manager for PHP. This allows Underscore to be downloaded by putting `\"documentcloud/underscore\"` in your own `composer.json` file.\n\n``` json\n{\n  \"require\": {\n    \"documentcloud/underscore\": \"1.4.*\"\n  }\n}\n```\n",
    "head_branch": "composer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e082b3a21fa1e1f1aafa7",
    "number": 993,
    "body": "They will iterate over a collection using _.each and _.map respectivly\ncalling a function on each item.\n## Use case\n\nThere are a lot of times I want to invoke a function on each object in a collection, below are some use cases in code.\n\n``` javascript\nfunction Missile() {}\nMissile.prototype.fire = function() {\n  console.log('The missile has been fired');\n}\n\nvar missiles = [new Missile(), new Missile()];\n// Prints 'The missile has been fire' twice\n_.callEach(missiles, 'fire');\n```\n\n``` javascript\nfunction Person(name) {\n  this.name = name;\n}\nMissile.prototype.greeting = function() {\n  return 'Hello, ' + this.name;\n}\n\nvar people = [new Person('Jane'), new Missile('John')];\n_.mapEach(people, 'greeting') // ['Hello, Jane', 'Hello, John']\n```\n## Naming\n\nI tried finding a name similar to `pluck` which I feel this is a close to, but I came up short.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e082c3a21fa1e1f1aafa8",
    "number": 990,
    "body": "Generalize _.compact to work on any Collection, not just Arrays.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e082d3a21fa1e1f1aafa9",
    "number": 988,
    "body": "Underscore currently raises an error in this case\n",
    "head_branch": "fix_bindAll_doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d8f4f28096f4dcbd97f751df2045e6ed2baa7673 into 1a379faf2306d1c07698c592a1748c184e6d0b15"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e082e3a21fa1e1f1aafaa",
    "number": 987,
    "body": "Hi!\n\nI love underscore and have been lurking on the issues list here for several months. I've gained a good understanding of the development goals of underscore.js.  \n\nThey are completely realistic and valuable, but I started to wonder what a library would be like that did not have the common use policy, always used chaining, and tried to sort out the helper functions by input and output types.\n\nOut of that I created Typecast.js and have began working with a few developers who are dedicated to continued expansion of Typecast library. \n\nI would very much like to become more involved in the discussion about underscore here on Github and how Typecast differs & compliments underscore. So this is my first attempt to reach out to yawl.\n\nI added Typecast to the links section of index.html because it is not a mixin. Typecast is very similar in scope, but is dedicated to maintaining a larger library of helper functions.  It also rearranges the _.is[Type] syntax and always uses chaining, making it an interesting and powerful compliment to underscore.\n\nIn appreciation, BishopZ\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e082f3a21fa1e1f1aafab",
    "number": 986,
    "body": "Looked through the approaches in the past and saw they were not standards compliant.\n\nUses `Object.defineProperty()` and `Object.getOwnPropertyDescriptor()` which are at least partially supported back to IE8.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08303a21fa1e1f1aafac",
    "number": 985,
    "body": "Now you can use `_.toInt(str)` instead of `parseInt(str, 10)` and not be bitten when you inevitably forget the second argument to parseInt.\n",
    "head_branch": "to-int",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08313a21fa1e1f1aafad",
    "number": 984,
    "body": "One of the unit tests for the `lastIndexOf()` method (\"handles nulls properly\") was incorrectly making an assertion using `indexOf()` instead of `lastIndexOf()` (it looks like it was cut-and-pasted from the indexOf() tests but not updated).\n\nThe updated test passes.\n",
    "head_branch": "lastIndexOf-UT-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c0cd979046e04bb12e6c78833e905561795b90ee into 3fbd1bd5d38e1b871eb3626c08eb802b8ffbfc1e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08313a21fa1e1f1aafae",
    "number": 983,
    "body": "**I'm relatively new to the underscore style of programming so for all I know there's already a method that does exactly what this does. Sorry if this is a dupe!**\n\nWhen iterating over a collection, I often have to add edge case code for the first element and the last element. This method _.cycle, is just like map, except it accepts an optional additional function to apply to the first element in the collection, and an optional additional function to apply to the last element in the collection.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08323a21fa1e1f1aafaf",
    "number": 981,
    "body": "This is a simple fix for issue #930 regarding the lack of readability of the [underscorejs.org](http://underscorejs.org/) website on Nexus 7 devices. Not tests as no part of the library was modified. _See issue #930 for more detail._\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2b2e4e47154a76c50540d17cc8bfc247cc51b923 into bec68aa5ae698d25adb1071ee1120a4d74ab82fd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08333a21fa1e1f1aafb0",
    "number": 978,
    "body": "Really simple improvement to use `process.nextTick` instead of `setTimeout` under Node.js. Quick benchmarks show that the incurred overhead of the current implementation (using `setTimeout(fn, 0)`) varies between 600 µs to 1.2 ms. With the current improvement, it varies between 200 µs to 450 µs.\n\nAfter a few years in production, that could potentially save us 1 or 2 seconds! :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08343a21fa1e1f1aafb1",
    "number": 976,
    "body": "",
    "head_branch": "qunit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8a34120d4246e86d7b97f722545b4471e0392c3b into e6576cd83e82e8c2a4813eadd978a1abf6a69a79"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661e08353a21fa1e1f1aafb2",
    "number": 974,
    "body": "## Background\n\nWe're using a data format that looks like this:\n\n```\n[['type1', 1234], ['type2', 4321], ...]\n```\n\nI want to group that data by the first element in each sub array.\n## Why it didn't work\n\nBecause the iterator defaulted to `_.identity` if the given iterator was\nfalsy it worked fine with integers != 0 so for example `_.groupBy(data, 1)`\nworked fine but `_.groupBy(data, 0)` didn't.\n## The fix\n\nI simply changed so that the iterator is only set to the default value\nif the given one is `null` or `undefined`.\n## Tests\n\nI added two simple tests that group a multi dimensional array using 0\nand 1 as the iterator.\n## Backwards compatibility\n\nThis, of course, breaks backward compatibility but I doubt that anyone\nrelied on this behaviour.\n## Discussion\n\nI think this solution is better than having to cast the integer to a\nstring seeing as that is \"wrong\" (array indices are integers, not\nstrings), please let me know if you disagree.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge af9939d4680d65e3e932106bde8ab3804e8a1eb7 into 83b41f5ed04d551a744a0b6fa918ce915b0788f2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08363a21fa1e1f1aafb3",
    "number": 973,
    "body": "Previous discussion on this topic is in ce3d1aec306999aa94926a42cad1daf7eb87a36f.\n\nIf we're going to drop support for certain features of `_.bind` in browsers that do not support `Function#bind`, I think we should do so across the board.  The features in question (e.g. binding constructor functions) are not nearly as important as supporting or not supporting them consistently.\n",
    "head_branch": "native-bind",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08373a21fa1e1f1aafb4",
    "number": 970,
    "body": "As discussed in https://github.com/documentcloud/backbone/pull/2264, `null` is a valid JSON and database value and actually means \"nothing\" whereas `undefined` means \"has yet to be set to a value, whatever it may be\". I feel this patch results in the expected behavior.\n",
    "head_branch": "defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0ab5bdccd41e55fb02331ec7d2d0053e0bdac9e3 into bf657be243a075b5e72acc8a83e6f12a564d8f55"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08383a21fa1e1f1aafb5",
    "number": 967,
    "body": "This pull request adds `_.pickOwn` method that returns a copy of the object that excludes properties from the prototype.\n\nI believe there may be many use cases when this would be useful. Here's mine: I'm wrapping JSON objects with classes and treating those objects like smart data. For example a class `Person` may have `getFullName` method. When passing such objects to templates I prefer to strip those additional methods by getting copy of the object without any properties from its prototype.\n",
    "head_branch": "pick-own",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08393a21fa1e1f1aafb6",
    "number": 964,
    "body": "I'd like to add a few more simple test cases, just for robustness.  (they've helped me optimize a few functions to be faster without causing problems)\n",
    "head_branch": "contrib",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f9e3201be8ba5580f26b8a52e651c312f81eabaa into a7a0c4feb53a4e3d9a71b414e83fc9e43216010f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e083a3a21fa1e1f1aafb7",
    "number": 963,
    "body": "Ruby's [Array#sample](http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-sample) method is extremely useful to me, at least as useful as shuffle.\n\nI've replicated that functionality here in underscore and added a test. One thing I'm not sure if I should have done was make this work with javascript objects as well as arrays. Most of ujs' functions work across they keys/values of arbitrary objects, and I wasn't sure if it was right to do that here, or what exactly that should look like if I did.\n\nPlease advise if this is up to scratch, and thanks for the great library.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 34d1865945f49833d1ab9da2ae6049c98b15d04a into 471d86e758aa8ed0fc74cd7db9680fe83e0b2f8f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e083b3a21fa1e1f1aafb8",
    "number": 962,
    "body": "Added _.if(condition, value_if_true, value_if_false). Useful for stuff like \"_.if(x<0, -50, 20) \\* 200\"\nReal-world use case: \"tileToReturn.yFromTile = function(y) {return _.if(typeof y === 'number', y, tileToReturn.tileY) \\* tileHeight;};\"\n\nMixin version:\nif(!_.if) {\n    _.mixin({\"if\": function(Bool, This, That) {\n        if(Bool) {return This;}\n        else {return That;}\n    }});\n}\n\nThe test for this should look something like:\n  test(\"if\", function() {\n    ok(_.if(true, 1, 2) != _.if(false,1,2), \"True and false should return different args.\");\n  });\n\nBut I can't find anywhere where it looks like it should go.\n\nI feel a good if() function is a proper tool in any functional programmer's belt. However, since I am _quite_ new to Javascript in general, I perhaps have just not figured out how to make the if(){}else{} format work inline. Any feedback?\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e083c3a21fa1e1f1aafb9",
    "number": 953,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9187e97ba8582def270bb8c02c4f38a4298f75ff into a9814409dd15a04414fa59ccbe5cce69c2d6129b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e083d3a21fa1e1f1aafba",
    "number": 952,
    "body": "Currently there is no way to clear a debounced function that has been called. This\nis problematic for something like a Backbone view where we need to stop everything\nas soon as remove is called. Here is what the changes will let us do:\n\n```\nclass MyApp.MyView extends Backbone.View\n\n    initialize: ->\n        @doStuffSoon = _(@doStuff).debounce(2000)\n\n    someEvent: ->\n        @doStuffTimeout = @doStuffSoon()\n\n    remove: ->\n        clearTimeout(@doStuffTimeout)\n\n    doStuff: ->\n        # This should never be called after the view has been removed\n        alert('stuff!')\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e083e3a21fa1e1f1aafbb",
    "number": 951,
    "body": "I've just added the well known dropWhile method.\ndropRightWhile has the same behaviour but start dropping from right.\n\nEnjoy :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e083f3a21fa1e1f1aafbc",
    "number": 949,
    "body": "Sometimes I have nested resources in my API responses and I often find myself trying to search with a whole embedded resource. For example, take a response similar to this:\n\n``` javascript\n[\n  {\"id\": 1, \"rel\": {\"id\": 1}},\n  {\"id\": 2, \"rel\": {\"id\": 2}},\n  {\"id\": 3, \"rel\": {\"id\": 1}}\n]\n```\n\nI would often do `_.where(response, {rel: {id: 1}})`. Maybe someone else has similar use-cases and would like to use it that way too.\n\nThis, however, has the drawback of slowing `_.where` down. jsPerf doesn't load for me at the moment, when it does I will post one showing the speed diff for searching just plain values.\n",
    "head_branch": "deeper-where",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08403a21fa1e1f1aafbd",
    "number": 947,
    "body": "`groupBy`, `countBy` and `sortedIndex` can all take an optional `context` argument, but this wasn't in the docs.\n",
    "head_branch": "add_context_param_to_docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b6e641ba96460ba35e1d0e609d5c26d9dd1e8a24 into a843d1ad712b8f29d2ff0becbf1fa38be2f47d4c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08413a21fa1e1f1aafbe",
    "number": 945,
    "body": "DOM element comparisons always return `true` as the `result` variable is never changed to `false` (in `eq` method).\n\n```\n_.isEqual(document.createElement('div'), document.createElement('div')); // => true\n```\n\nAdded a simple test on the `eq` method to check for the equality of two DOM elements.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08423a21fa1e1f1aafbf",
    "number": 942,
    "body": "I have been searching for forwarding libraries for JS in vain (I avoid use of the term delegation here on purpose to avoid any polemic on it).\nSo I took an hour or two on implementing but the most basic functionality of my Forwarder19 library for Ruby https://github.com/RobertDober/Forwarder19, to check if my Javascript Hero (correction Coffeescript Hero) would be interested.\nCheers\nRobert\n\nP.S. I am quite sure about the guidelines for contributing, maybe a little bit confused about the last.\nR\n",
    "head_branch": "forward",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08433a21fa1e1f1aafc0",
    "number": 938,
    "body": "Sample code of `_.unescape` has a typo.\n\nbefore\n\n```\n_.escape('Curly, Larry &amp; Moe');\n=> \"Curly, Larry & Moe\"\n```\n\nafter\n\n```\n_.unescape('Curly, Larry &amp; Moe');\n=> \"Curly, Larry & Moe\"\n```\n",
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08433a21fa1e1f1aafc1",
    "number": 935,
    "body": "It's basically a copy of backbonejs' Rakefile.\nI saw that @jashkenas changed it on the last release but uglifyjs was always outputting the result, so, in order to make it as smooth as backbone's building process i copied it. Plus, there was a -m option in the uglifyjs command which i couldn't find its purpose.\nThis is more like a polite request than a change/fix. I tried to find previous versions where it happened or old tickets about the process but found nothing. Sorry if i missed something and went back in time with something already discussed and closed.\n\nCheers.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08443a21fa1e1f1aafc2",
    "number": 934,
    "body": "This will remove and return a value from an object for the given key or return undefined if the key is not present.\n",
    "head_branch": "add_remove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08453a21fa1e1f1aafc3",
    "number": 932,
    "body": "The method _.isDefined is the good brother of _.isUndefined. IMHO it results in a more understandable code if you directly see what a check really mean. So i think its better to use \n\n```\nif (_.isDefined(foo)) { .... }\n```\n\ninstead of\n\n```\nif( false === _.isUndefined(foo)){ ... }\n```\n\nBoth means **is something defined?** Well, it looks maybe a little obviously, but  could improve readability of code.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08463a21fa1e1f1aafc4",
    "number": 929,
    "body": "I run into the problem to check if an object is a circular one. So i found a useful answer (+function) on stackoverflow which is maybe also helpful for Underscorejs project. \n\nThe answer is this: http://stackoverflow.com/a/13619725\n\nNo sure if you can simply copy this function but if there is a reference to the originally one i think that should not be a problem. I adapted the code a little bit to fit with your code conventions.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08473a21fa1e1f1aafc5",
    "number": 928,
    "body": "_.isFunction() doesn't need to be called on each iteration in the loop. The result will never change.\n",
    "head_branch": "invoke-optimize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d2979534aae47d1ab738ee7fb7f4c71f4cfca7ec into ae3cdd3981b39246f1071216aca7438cec5fcac7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08483a21fa1e1f1aafc6",
    "number": 927,
    "body": "It's come in handy a number of times to apply a scope that is not the first argument when using _.result\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08493a21fa1e1f1aafc7",
    "number": 923,
    "body": "",
    "head_branch": "npm-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4a7314a393f0723272dedc0a1ea8a362da4b205d into ec2b5f0021a083de01f6bb5b8bea807a95127042"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e084a3a21fa1e1f1aafc8",
    "number": 920,
    "body": "I have often wished to be able to reuse the same iterator, but reverse the order of the sort, when implementing filter-type controls.\n\nThis functionality has been already proposed (#910) but with a different API. I hope this one feels more idiomatic.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e084b3a21fa1e1f1aafc9",
    "number": 918,
    "body": "The homepage of underscore is written in pure html, I think it would be easier to write markdown.\n\nI've created a [static site generator in node](http://lab.lepture.com/nico/), and in the latest release, it has the feature to generate pages like you did in underscorejs.org.\n\nIt's easier to write markdown than html, but you've already created the html page, it maybe not worth a replacement, and I can understand that.\n\nHowever, it worths a try, when you start a project from scratch, it would help a lot.\n\nI've transform the html page to markdown at [docs/index.md](https://github.com/lepture/underscore/blob/nico-doc/docs/index.md), and add a task in Rakefile which is `homepage`.\n\nI will provide more information, if you want.\n\nThe software is [nico](https://github.com/lepture/nico)\n",
    "head_branch": "nico-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e084c3a21fa1e1f1aafca",
    "number": 917,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6af0969ba3f9854427971cace337dfd362b83c56 into e072f466a5147a0da2942e1f25a5cc438356d235"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e084c3a21fa1e1f1aafcb",
    "number": 916,
    "body": "The example for unescape had escape instead.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 13016c783570e5af0e1d1e716537916147de0843 into 2fa3a63d998229b0bdb08aa4893af15d69447364"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e084d3a21fa1e1f1aafcc",
    "number": 915,
    "body": "Patches to fix issue #908.\n",
    "head_branch": "fix-908",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge 8ad684752852a53ab4b87faa88b86fe4ddefce28 into 8b71565e9e6cf92bec125e2081ca5aeac5606235"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e084e3a21fa1e1f1aafcd",
    "number": 914,
    "body": "save cost of high frequency invoking functions by sampling.   \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e084f3a21fa1e1f1aafce",
    "number": 913,
    "body": "Take it or leave it!\n",
    "head_branch": "uid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 06ca5ea545451d1fd8d249a918cd6aaedc35ccc9 into 97f2b2d5c26f7520e77691ece9923aab7aa136fe"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08503a21fa1e1f1aafcf",
    "number": 910,
    "body": "See [backbone#1968](https://github.com/documentcloud/backbone/pull/1968).\n\nThis PR enables `_.sortBy` to sort a collection in descending order by giving hyphen-starting string as 2nd argument.\n\n``` js\n_.sortBy(['aaa', 'b', 'cc'], 'length'); //=> ['b', 'cc', 'aaa']\n_.sortBy(['aaa', 'b', 'cc'], '-length'); //=> ['aaa', 'cc', 'b']\n```\n\nNote that backward compatibility is broken a bit: properties start with '-' need backslash escaping. I think such names are really rare.\n\n``` js\nlist =_.sortBy([{'-a': 2}, {'-a': 3}, {'-a': 1}], '\\\\-a');\n_.pluck(list, '-a') // => [1, 2, 3];\nlist =_.sortBy([{'-a': 2}, {'-a': 3}, {'-a': 1}], '--a');  // two hyphens\n_.pluck(list, '-a') // => [3, 2, 1];\n```\n",
    "head_branch": "sortby-with-hyphen-str",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08513a21fa1e1f1aafd0",
    "number": 909,
    "body": "Basically if an array is provided as the criteria it runs an include instead of an === behavior that's the expected from a where query on a Rails application\n\nPS: Is this what you meant?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08523a21fa1e1f1aafd1",
    "number": 907,
    "body": "Basically if an array is provided as the criteria it runs an include instead of an === behavior that's the expected from a where query on a Rails application\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08533a21fa1e1f1aafd2",
    "number": 904,
    "body": "This patch adds an `_.collateBy` method, similar to `_.groupBy` but designed for collating ordered collections by a given criterion.\n\nCollation is useful when you want to display a collection in a particular order while grouping similar items together under a common heading or in a shared section.\n#### Example: Grouping a conversation by author\n\n``` javascript\nvar messages = [\n  {author: \"Bob\", body: \"Hello\"},\n  {author: \"Bob\", body: \"Are you there?\"},\n  {author: \"Jane\", body: \"I'm here.\"},\n  {author: \"Jane\", body: \"How can I help you?\"},\n  {author: \"Bob\", body: \"Nevermind.\"}\n];\n```\n\n``` jst\n<div class=\"messages\">\n  <% _.each(_.collateBy(messages, 'author'), function(group) { %>\n    <section>\n      <header class=\"author\"><%= group[0] %></header>\n      <% _.each(group[1], function(message) { %>\n        <article class=\"message\"><%= message.body %></article>\n      <% }); %>\n    </section>\n  <% }); %>\n</div>\n```\n\n``` html\n<div class=\"messages\">\n  <section>\n    <header class=\"author\">Bob</header>\n    <article class=\"message\">Hello</article>\n    <article class=\"message\">Are you there?</article>\n  </section>\n  <section>\n    <header class=\"author\">Jane</header>\n    <article class=\"message\">I'm here.</article>\n    <article class=\"message\">How can I help you?</article>\n  </section>\n  <section>\n    <header class=\"author\">Bob</header>\n    <article class=\"message\">Nevermind.</article>\n  </section>\n</div>\n```\n#### Example: Displaying an event timeline\n\n``` javascript\nvar events = [\n  {date: \"2012-12-14\", project: \"New Product\", author: \"Scott\", description: \"commented on: Status update\"},\n  {date: \"2012-12-14\", project: \"Operations\", author: \"Trevor\", description: \"commented on: Unexpected downtime\"},\n  {date: \"2012-12-14\", project: \"Operations\", author: \"John\", description: \"commented on: Unexpected downtime\"},\n  {date: \"2012-12-14\", project: \"New Product\", author: \"Ryan\", description: \"posted a message: Status update\"},\n  {date: \"2012-12-14\", project: \"Redesign\", author: \"Ryan\", description: \"added a to-do: Tighten margins\"},\n  {date: \"2012-12-13\", project: \"Redesign\", author: \"Jason\", description: \"completed a to-do: Explore alternate layout\"},\n  {date: \"2012-12-13\", project: \"Operations\", author: \"John\", description: \"posted a message: Unexpected downtime\"},\n  {date: \"2012-12-13\", project: \"Operations\", author: \"Taylor\", description: \"completed a to-do: Monthly firedrill\"},\n  {date: \"2012-12-13\", project: \"New Product\", author: \"Ryan\", description: \"commented on: Checklist for launch\"}\n];\n```\n\n``` jst\n<div class=\"timeline\">\n  <% _.each(_.collateBy(events, 'date'), function(eventsByDate) { %>\n    <section class=\"date\">\n      <header><%= eventsByDate[0] %></header>\n      <% _.each(_.collateBy(eventsByDate[1], 'project'), function(eventsByProject) { %>\n        <section class=\"project\">\n          <header><%= eventsByProject[0] %></header>\n          <% _.each(eventsByProject[1], function(event) { %>\n            <article class=\"event\">\n              <span class=\"author\"><%= event.author %></span>\n              <span class=\"description\"><%= event.description %></span>\n            </article>\n          <% }); %>\n        </section>\n      <% }); %>\n    </section>\n  <% }); %>\n</div>\n```\n\n``` html\n<div class=\"timeline\">\n  <section class=\"date\">\n    <header>2012-12-14</header>\n    <section class=\"project\">\n      <header>New Product</header>\n      <article class=\"event\">\n        <span class=\"author\">Scott</span>\n        <span class=\"description\">commented on: Status update</span>\n      </article>\n    </section>\n    <section class=\"project\">\n      <header>Operations</header>\n      <article class=\"event\">\n        <span class=\"author\">Trevor</span>\n        <span class=\"description\">commented on: Unexpected downtime</span>\n      </article>\n      <article class=\"event\">\n        <span class=\"author\">John</span>\n        <span class=\"description\">commented on: Unexpected downtime</span>\n      </article>\n    </section>\n    <section class=\"project\">\n      <header>New Product</header>\n      <article class=\"event\">\n        <span class=\"author\">Ryan</span>\n        <span class=\"description\">posted a message: Status update</span>\n      </article>\n    </section>\n    <section class=\"project\">\n      <header>Redesign</header>\n      <article class=\"event\">\n        <span class=\"author\">Ryan</span>\n        <span class=\"description\">added a to-do: Tighten margins</span>\n      </article>\n    </section>\n  </section>\n  <section class=\"date\">\n    <header>2012-12-13</header>\n    <section class=\"project\">\n      <header>Redesign</header>\n      <article class=\"event\">\n        <span class=\"author\">Jason</span>\n        <span class=\"description\">completed a to-do: Explore alternate layout</span>\n      </article>\n    </section>\n    <section class=\"project\">\n      <header>Operations</header>\n      <article class=\"event\">\n        <span class=\"author\">John</span>\n        <span class=\"description\">posted a message: Unexpected downtime</span>\n      </article>\n      <article class=\"event\">\n        <span class=\"author\">Taylor</span>\n        <span class=\"description\">completed a to-do: Monthly firedrill</span>\n      </article>\n    </section>\n    <section class=\"project\">\n      <header>New Product</header>\n      <article class=\"event\">\n        <span class=\"author\">Ryan</span>\n        <span class=\"description\">commented on: Checklist for launch</span>\n      </article>\n    </section>\n  </section>\n</div>\n```\n",
    "head_branch": "collate-by",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08543a21fa1e1f1aafd3",
    "number": 902,
    "body": "like how it is on backbonejs.org\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aca610d044ede1d1e3ce87d42fe4b86244606f58 into 436ef9e7b1e52100a36307ff60c71b0f44443bf9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08553a21fa1e1f1aafd4",
    "number": 901,
    "body": "ECMAScript6's `Number.isNaN` returns false.\n\n``` javascript\nNumber.isNaN(new Number(NaN)); //=> false\n```\n\nsee also:\nhttp://wiki.ecmascript.org/doku.php?id=harmony:number.isnan\n\nIf `_isNaN` emulates `window.isNaN`, args should be converted to Number.\n\n``` javascript\n_.isNaN = function(obj) {\n  var number = +obj;\n  return number !== number;\n};\n```\n",
    "head_branch": "fix_isnan",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08553a21fa1e1f1aafd5",
    "number": 898,
    "body": "",
    "head_branch": "return-underscore-from-module",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08563a21fa1e1f1aafd6",
    "number": 897,
    "body": "A get function that works with chaining without breaking it even if the\nthe given key does not exist.  E.g., the following code works even if\nnone of the specified keys exist, without having to check many\nconditional:\n\n```\n_.chain(obj)  // => object\n .get('key1') // => array\n .first()     // => object\n .get('key2') // => object\n .get('key3') // => array\n .find(function(){...})\n .value();\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08573a21fa1e1f1aafd7",
    "number": 896,
    "body": "Some people like me can use _.rest method with a String ...\n\n_.rest(\"*Hello\").join(\"\") will return \"Hello\" on firefox, chrome, safari but return \",,,,\" in IE8\n\nI just added a little fix for it  with a test.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08583a21fa1e1f1aafd8",
    "number": 894,
    "body": "So hear me out on this one\n\nfor the second time I found myself fixing the issue of isArray bombing on instantiating a new collection within ie8\n\nso lets just fix it once and for all.\n\nCheers\n\nSam\n",
    "head_branch": "sjs/add_ie_8_support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08593a21fa1e1f1aafd9",
    "number": 893,
    "body": "Now UnderscoreJS will work better with RequireJS.\n",
    "head_branch": "return-underscore-from-module",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e085a3a21fa1e1f1aafda",
    "number": 892,
    "body": "Also, `array` and `ArrayProto` appeared in the same function, so I renamed the proto to `_array` for the sake of fixing this quickly.\n\nAlso, the test page was including the minified version of underscore, not the development one. Not so great for testing methinks.\n",
    "head_branch": "bugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e085b3a21fa1e1f1aafdb",
    "number": 889,
    "body": "Added a function `hasMethod(obj, func)` (alias `hasFunction()`). It is similar to `has()` syntax and checks whether an object has a function. It returns true if the function is in the prototype chain even if it's not a direct property of the object.\n\nTests included!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e085c3a21fa1e1f1aafdc",
    "number": 888,
    "body": "That's it. Just added a unit test to an existing function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 49ea546192edfebb7ce45b69dff13bfa7eeecd49 into 73c69df29c4657e7f77384b513629f50e6c56dd1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e085d3a21fa1e1f1aafdd",
    "number": 887,
    "body": "",
    "head_branch": "zip-using-underscore-methods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e085e3a21fa1e1f1aafde",
    "number": 886,
    "body": "I also changed the test file to include the uncompressed underscore, seemed odd that it was using the minified version...\n",
    "head_branch": "result-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e085e3a21fa1e1f1aafdf",
    "number": 885,
    "body": "This pull request includes a function that we miss a lot in underscore. That function works in a similar way to the ruby syntax sugar `&:symbol`. It basically returns a function that will access to a given property or method with optional parameters if needed.\n\nSome examples on how are we currently abusing this function at Teambox:\n\n```\n_.map(hashtags, _.f('toLowerCase'));\n\n_.each(this.views, _.f('toggleCollapse'));\n\nTasks.isImportant = _.f('get', 'important');\n\n_.each(tasks, _.f('set', {important: false}, {silent: true}));\n```\n\nThis enables us to write more functional code:\n\n```\n_.compose(_.uniq, _.flatten, _.map)(tasks, _.f('get', 'watchers'));\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e085f3a21fa1e1f1aafe0",
    "number": 884,
    "body": "Since [Bower](http://twitter.github.com/bower/) v5 does not use `package.json`anymore, the bower community needs you to add a `component.json` file to your repo.\n\nThanks for merging this !\n",
    "head_branch": "add-bower-component.json",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08603a21fa1e1f1aafe1",
    "number": 883,
    "body": "Hello,\n\nI am suggesting a very cool feature that allows adding refinement to existing algorithms, which can improve its use. In test cases I exemplified a usage scenario in which this could be applied. I hope you like.\n\nThankful,\nMarcelo Manzan.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08613a21fa1e1f1aafe2",
    "number": 881,
    "body": "the template method is small and smarty, but not friendly for debug. this patch can help developers to debug template. It's useful.\n\n```\nReferenceError: 4\n    2|     <%\n    3|     // a comment\n >> 4|     if (data) { data += 12345; }; %>\n    5|     <li><%= data %></li>\n    6|   \n\ndata is not defined\n    at eval (eval at <anonymous> (file://localhost/Users/jacksontian/fork/my_underscore/underscore.js:1196:20), <anonymous>:29:9)\n    at Function._.template (file://localhost/Users/jacksontian/fork/my_underscore/underscore.js:1202:22)\n    at Object.<anonymous> (file://localhost/Users/jacksontian/fork/my_underscore/test/utility.js:193:21)\n```\n",
    "head_branch": "template_friendly",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08623a21fa1e1f1aafe3",
    "number": 880,
    "body": "the template method is small and smarty, but not friendly for debug. this patch can help developers to debug template. It's useful.\n\n```\nReferenceError: 4\n    2|     <%\n    3|     // a comment\n >> 4|     if (data) { data += 12345; }; %>\n    5|     <li><%= data %></li>\n    6|   \n\ndata is not defined\n    at eval (eval at <anonymous> (file://localhost/Users/jacksontian/fork/my_underscore/underscore.js:1196:20), <anonymous>:29:9)\n    at Function._.template (file://localhost/Users/jacksontian/fork/my_underscore/underscore.js:1202:22)\n    at Object.<anonymous> (file://localhost/Users/jacksontian/fork/my_underscore/test/utility.js:193:21)\n```\n",
    "head_branch": "template_friendly",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08633a21fa1e1f1aafe4",
    "number": 879,
    "body": "The `compact` function uses a function which casts each member to a Boolean, however this isn't needed since `filter` just checks for truthiness, not `=== true`.\n\nThis change reuses the `_.identity` function, which has the same effect and doesn't require creating a new function on each call.\n",
    "head_branch": "faster-compact",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fb7814333b6c7ecfa08731d3a673f3ab0fc4012f into 6a6de5726eb2c03aa94c44513f86f6b07fa9cc3a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08643a21fa1e1f1aafe5",
    "number": 875,
    "body": "As suggested by @jdalton in #868.\n",
    "head_branch": "GH-868",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fc37d55bbcd7912eff38e2eca8f912ea0c898729 into 47edf0b581a6b1840dddd1e00d0f83bcee74482f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08653a21fa1e1f1aafe6",
    "number": 874,
    "body": "This has been previously discussed in issue #813, however I believe this is a much simpler implementation which works for nested arrays too.\n\nI've tentatively aliased it to `_.seek` as `_.walk` could be ambiguous.\n",
    "head_branch": "walk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08663a21fa1e1f1aafe7",
    "number": 873,
    "body": "New method `_.enrich` with test case.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08673a21fa1e1f1aafe8",
    "number": 871,
    "body": "I don't know any easy way to do this in FP style with Underscore, and without resorting to recursion: gather the value of each iteration, and pass the last processed value to the next iteration. It's easy to do with an explicit loop, but that looks ugly in a program that is otherwise written in FP style.\n\nIt's difficult to use `_.reduce` for this, because you need a way to store the initial value and access the last accumulator value:\n\n```\n_.chain(['a', 'b', 'c'])\n  .reduce(function(acc, cur) { return acc.concat(_.last(acc) + cur) }, [''])\n  .tail()\n  .value()\n```\n\nThe name of the function is taken from Haskell Prelude:\nhttp://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:scanl\n",
    "head_branch": "add_scan_to_collections",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08683a21fa1e1f1aafe9",
    "number": 870,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7fb14945eef293cb1b874de708a6c54b5448b63e into 0a2adcb0d19b42b61e8ab63d3a5dee6ef2bcce48"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08693a21fa1e1f1aafea",
    "number": 866,
    "body": "Specifically, this fixes _.toArray on NodeList objects on IE8, which worked in\nUnderscore 1.3.3 but throws \"JScript object expected\"  in 1.4.0.\n",
    "head_branch": "toarray-nodelist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 26a30551f912f8180e6c2381d0eae4b24259fb70 into a3e017509359994b1c6af35695a4ff9dc2662deb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e086a3a21fa1e1f1aafeb",
    "number": 865,
    "body": "Result seems like a confusing name for getting the value of a property on an object. _.value is closer to Backbone's `getValue` (see documentcloud/backbone#1607). Seems to make a little more sense semantically.\n",
    "head_branch": "alias-result-as-value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e086b3a21fa1e1f1aafec",
    "number": 863,
    "body": "Currently `_.clone()` returns an `Object` instead of a `Date`. This push provides a simple and robust fix by creating a `new Date()` and `setTime()` appropriately:\n\n``` javascript\nif (_.isDate(obj)) return new Date().setTime(obj.getTime());\n```\n\nNote a reverted commit with an accidental minification needs squashing.\n",
    "head_branch": "clone-date",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e086b3a21fa1e1f1aafed",
    "number": 862,
    "body": "New suggestion to _.include use.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e086c3a21fa1e1f1aafee",
    "number": 859,
    "body": "as title.\n",
    "head_branch": "cons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e086d3a21fa1e1f1aafef",
    "number": 858,
    "body": "_.toFunction returns a function which represents the object as a\nfunction of its keys. For example, it turns an array into a function\nof its indices, so:\n\n```\nvar f = _.toFunction([\"zero\", \"one\", \"two\"]);\nf(0); // returns \"zero\"\n```\n\nThis is useful in combination with collection methods, like map or\nfilter, so that objects can be easily converted to map functions or \npredicates, like so:\n\n```\n// returns a subset of someArray with only the values at 3 5 and 6\nvar subset = _.map([3, 5, 6], _.toFunction(someArray));\n```\n",
    "head_branch": "tofunction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e086e3a21fa1e1f1aaff0",
    "number": 857,
    "body": "Added arguments that passed to function in _.result() \nAll methods that use iterators added shortcuts: @example \n_.map([{'a': 'x'}, {'a': 'y'}, {'a': 'z'}], 'a') // => ['x', 'y', 'z']; _.pluck now is a special case of _.map() or even a synonim\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e086f3a21fa1e1f1aaff1",
    "number": 850,
    "body": "The commit just removes a couple of unnecessary lines.\n",
    "head_branch": "simplify-contains",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c5c9149f2938f0435fa1a0db87ee26dc2901fa7e into 28520624d94673d2b95e620d44ca954ddd91fa6d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08703a21fa1e1f1aaff2",
    "number": 849,
    "body": "Issue 832: Juggle arguments in `_.uniq` to allow an argument signature of `array, iterator, context`\n\nKeep in mind that this is the first attempt in my life trying to contribute code to an open-source project. If anyone doesn't like it, I would appreciate it if they explain why.\n",
    "head_branch": "uniq-arguments",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d88ea4d444e7cf9ab2d8303652e20bb6394fe1f4 into 5ce9819dfd6c9778070055fd5b6967aa55bc9ae4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08713a21fa1e1f1aaff3",
    "number": 846,
    "body": "Unless this is the desired functionality...\n\nSetting `result` here is misleading. Consider:\n\n``` javascript\nvar x = 0;\nvar f = function() { return ++x; };\nvar g = _.debounce(f, 1000);\nconsole.log(g()); // returns undefined\n// f is called, x is incremented, and result is set to 1\nsetTimeout(function(){ \n  console.log(g()); // returns 1\n  console.log(g()); // returns 1\n  console.log(g()); // returns 1\n}, 1100);\n```\n\nIt shouldn't set `result` since it returns the previously returned value on the next series of calls.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08723a21fa1e1f1aaff4",
    "number": 844,
    "body": "oftentimes a function will call or trigger an indirectly recursive application of itself. in order to avoid infinite recursion, _.guarded(fn) will wrap a function in a guard block which only allows it to be called once. if the function has already been entered, it will skip execution of the function. on exit, it will return the result of the function.\n",
    "head_branch": "guarded",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08733a21fa1e1f1aaff5",
    "number": 840,
    "body": "It may also be marginally faster.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08743a21fa1e1f1aaff6",
    "number": 837,
    "body": "For an array with a large number of strings (think a million or so), the current implementation of `_.uniq` takes an unreasonable amount of time to complete as it uses a quadratic algorithm.\n\nI've implemented a second algorithm that should run at close to linear time for arrays of strings.\n\nUnfortunately Map is not available on current JavaScript implementations, or we'd be able to use this faster algorithm on arrays of values of any type.\n",
    "head_branch": "close-to-linear-time-uniq-on-string-array",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08753a21fa1e1f1aaff7",
    "number": 836,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b4bd1c5a6183e605c86909b74445c3c6919bea07 into b4d2b6444729224802ae4f6bc094e604e16310a5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08763a21fa1e1f1aaff8",
    "number": 835,
    "body": "",
    "head_branch": "unescape-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1d8ef64c92ff77531586daaa8631e23e9eeb15ef into 6dc54a57cec87233cff693481b3b798e9f7c1ad6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08773a21fa1e1f1aaff9",
    "number": 831,
    "body": "Changed call to isNaN to _.isNaN\n",
    "head_branch": "isfinite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08773a21fa1e1f1aaffa",
    "number": 830,
    "body": "The EcmaScript 5 and 6 specs define isFinite as returning false only if ToNumber(object) is NaN, Infinity or -Infinity (a very short and clear read: http://es5.github.com/#x15.1.2.5)\n\nThe current implementation of _.isFinite acts as if ToNumber('42') === NaN, and returns false on _.isFinite('42').\n\nThis was originally [done to combat an \"issue\"](https://github.com/documentcloud/underscore/pull/524#issuecomment-4695186) with EcmaScript's ToNumber, which returns true for empty strings (or strings full of nothing but spaces). The problem is that the fix was overzealous, and negates all argument coercion - which is the very heart of isFinite - and acts exactly the opposite of the spec and of the browsers' implementation.\n\nThis commit fixes it, while also catching the special gotcha in the spec for empty strings.\n\n``` javascript\n// before :\nisFinite('12') !== _.isFinite('12') // true !== false\n// now:\nisFinite('12') === _.isFinite('12') // true === true\n// didn't change:\nisFinite('')   !== _.isFinite('')   // true !== false\n```\n\nIt's also much faster than the current implementation.\n",
    "head_branch": "isfinite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 143d1373064f79757fdb9d484244e38ba951ea78 into 7419c805b0e1f40c1a5394bc928f707ad4c6ed78"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08783a21fa1e1f1aaffb",
    "number": 829,
    "body": "for  the toString.call(NaN) is [object Number] , so need filter it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08793a21fa1e1f1aaffc",
    "number": 826,
    "body": "``` javascript\nreturn _.reduce(obj,function(result,value,index,list){\n        var computed = iterator ? iterator.call(context,value,index,list) : value;\n        return computed >=result.computed ? {value : value,computed : computed} : result;\n    },{computed : - Infinity}).value;\n```\n\nIs it a good idea in such case?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e087a3a21fa1e1f1aaffd",
    "number": 824,
    "body": "Added random for arrays (returning a random element) and objects (returning a random key) and return Math.random() if called with no args\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e087b3a21fa1e1f1aaffe",
    "number": 817,
    "body": "This pull request splits underscore into separate node modules, adding only 343 bytes (7.4%) to the minified and gzipped file. Most of the size comes from converting to a node format; the script to make it work in the browser is only 109 of those bytes. That's less than the [copyright comment header](https://github.com/documentcloud/underscore/blob/29e1ba38f6d16b17e4b6b7805be8e1be2d27cb83/underscore-min.js) (112 bytes).\n\n_How does it work?_\n\nI used [vaccine](https://github.com/jakesandlund/vaccine): a way to get modular JavaScript in the browser that is small enough that libraries (such as this one) can use it. Applications (or [other libraries](https://github.com/documentcloud/backbone)) using vaccine can now `require('underscore')`. That said, no one is forced to use vaccine, because it is included with the underscore sources. Note that since the modules are in node format, they get used directly in Node.js.\n\n_Doesn't this add a build step, so I can't just refresh?_\n\nYes and No.\n\nYes, you do need to build. If underscore was only used in the browser, the [build](https://github.com/jakesandlund/vaccine/blob/master/build) step could have been as simple as wrapping the concatenated sources in `(function() { ... }());`. Underscore's build script does a bit more to wrap the node modules in `define` calls.\n\nNo, you don't have to manually build every time. A small development server (performing the node `define` wrap) makes it so a simple reload is all that's needed. Along with that, I added a [script loader](https://github.com/jakesandlund/vaccine/blob/master/vaccine_loader_simple.js) that can load files whenever there is a `require(<module id>)`.\n\n_How is it so small?_\n\nVaccine keeps a [minimal](https://github.com/jakesandlund/vaccine/blob/master/vaccine_minimal.js) global API constant while varying `define` and `require` functionality (which is local to the app/lib) to suit different needs. In underscore's case, it makes sense to use the [vaccine_simple.js](https://github.com/jakesandlund/vaccine/blob/master/vaccine_simple.js) implementation, as the more advanced features are not necessary. Take a look at the [README](https://github.com/jakesandlund/vaccine#vaccine) for more information.\n\nLastly, converting to a modular format required decisions that are not mine to make. I hope that any controversial choices I made won't stop you from seeing the \"big picture\" advantage of modular JavaScript in the browser for a very small size cost.\n",
    "head_branch": "vaccine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e087c3a21fa1e1f1aafff",
    "number": 816,
    "body": "This pull request adds a `_.ensureArray` utility function, which we frequently found ourselves `mixin` into underscore. As the name implies, it helps when you want to feed a perhaps-array value into an API that expects an array:\n\n``` javascript\n// arrays are passed straight through\n_.ensureArray([1,2,3]); // => [1,2,3]\n\n// non-array truthy values are wrapped in an array\n_.ensureArray({a:1,b:2}); // => [{a:1,b:2}]\n_.ensureArray(\"foo\"); // => [\"foo\"]\n_.ensureArray(432); // => [432]\n\n// falsy values result in an empty array\n_.ensureArray(null); // => []\n```\n\nSemantically we are perhaps treading a bit too far into the land of `_.toArray` here, but the functions behave very differently since `toArray` always treats the argument as a collection. For the above use cases, here is what `toArray` returns:\n\n``` javascript\n_.toArray([1,2,3]); // => cloned array [1,2,3]\n_.toArray({a:1,b:2}); // => [1,2]\n_.toArray(\"foo\"); // => [\"f\",\"o\",\"o\"]\n_.toArray(432); // => []\n```\n\nOnly for falsy values do the two functions act the same. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e087d3a21fa1e1f1ab000",
    "number": 815,
    "body": "... but when I do I am picking a member from an array. I suspect 95% do likewise, so I added a one-liner _.randomMember that is called on an array. Also added a test with 3 assertions. This indirectly tests _.random as well, which I don't believe I saw any tests for.\n",
    "head_branch": "randomly_pick_member",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e087e3a21fa1e1f1ab001",
    "number": 814,
    "body": "Hey-\n\nIn case you are interested in this sort of thing, I added the ability for where to take in functions as values so you can do:\n\nmayVote = _.where users, citizenship:\"USA\", age:(age)-> age >= 18\n\nThis example is of course is more DRY with livescript or partial-function-application,so it becomes age:(>= 17).\n\nThanks,\nNate\n",
    "head_branch": "where_with_function",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e087f3a21fa1e1f1ab002",
    "number": 811,
    "body": "(I’m assuming “loop” was omitted accidentally.)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d137c27447690f21b0c4fc3ec9c04a90e9177a32 into 29e1ba38f6d16b17e4b6b7805be8e1be2d27cb83"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08803a21fa1e1f1ab003",
    "number": 806,
    "body": "http://stackoverflow.com/questions/189725/what-is-a-trampoline-function\n\nContinues executing a function if the return type is function.  Terminates execution and returns if not.  \n\nPartition method to break an array into parts of size n.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08813a21fa1e1f1ab004",
    "number": 805,
    "body": "Sporadically have need in this function, so decided it may be useful for the community too. Covered with tests (including edge cases), updated documentation.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08823a21fa1e1f1ab005",
    "number": 800,
    "body": "",
    "head_branch": "iterator-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a1ea2fb333643d15fe77ca82594ee59dc8a109a7 into f032e78751596e357b940abc518ddfb64bd76398"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08823a21fa1e1f1ab006",
    "number": 799,
    "body": "When working on [Backbone-Nested](https://github.com/afeld/backbone-nested) I noticed that I wasn't able to iterate over an object with a `length` property set to an arbitrary value, which is present in [the Backbone tests](https://github.com/documentcloud/backbone/blob/0.9.2/test/model.js#L20).\n\n``` javascript\n_.each({length: 20}, function(){ /* never reached */ });\n```\n\n`_.each()` and `_.size()` were handing this case incorrectly, and `_.isEmpty()` was additionally giving incorrect results for Arguments, HTMLCollections, NodeLists and jQuery Array-likes.  I have added `_.isArrayLike()` so that these methods (which all depend on `.length`) can detect the types in a central place.\n\nTests are green in Chrome 22, FF 15 and Safari 6.0.  I did some testing in various IE versions as I went but used up my [Browserstack](http://www.browserstack.com/) limit, so if others wouldn't mind verifying (particularly v6-8), that would be appreciated.  Thanks!\n",
    "head_branch": "object-length",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08833a21fa1e1f1ab007",
    "number": 797,
    "body": "",
    "head_branch": "defaults",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6eec02408006483cbb8e555bc7bab1e21b137067 into 12495cfc922a6fd2933f5a3b588ff8d029f7a7ab"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08843a21fa1e1f1ab008",
    "number": 796,
    "body": "For a possible use case, check out my comments on documentcloud/backbone#1667 ([this one](https://github.com/documentcloud/backbone/pull/1667#issuecomment-8822141) in particular).\n",
    "head_branch": "sorted-index-iterator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7c0a45fe1696cb610f4168be4009c31d1cf3fcf3 into 64ffea3a62b37ff4c42bd678b334ac5194c57af2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08853a21fa1e1f1ab009",
    "number": 791,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 391bccdc5267ed7a72d8cb14f9bddcb847fd53ef into a1cb658a7a10328c5d5b96d56742cd9c35e02de1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08863a21fa1e1f1ab00a",
    "number": 788,
    "body": "",
    "head_branch": "isfunction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08873a21fa1e1f1ab00b",
    "number": 786,
    "body": "https://github.com/documentcloud/underscore/issues/784\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08883a21fa1e1f1ab00c",
    "number": 785,
    "body": "https://github.com/documentcloud/underscore/issues/784\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08893a21fa1e1f1ab00d",
    "number": 782,
    "body": "Note that this implementation requires exactly one capturing group per delimiter.  I think this is a reasonable expectation, but I'm not basing it on any statistics from real world delimiters.\n",
    "head_branch": "delimiters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ed83596e2a8261396e2c4d134238ea3d9d341b91 into 1f90ca20aa9f4a0ab7cb942be1c4bfe2500ddd8f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e088a3a21fa1e1f1ab00e",
    "number": 780,
    "body": "- Remove superfluous argument to `lookupIterator`.\n- Add context argument to `groupBy`, `countBy`.\n- Streamline `sortBy`.\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0a00bd30e28974fecf0a118879a7f818cd52e267 into 233b8db8023170730772a9c8ef4edf670f7347c6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e088b3a21fa1e1f1ab00f",
    "number": 774,
    "body": "push.apply is faster than slice/unshift or slice/concat. see [push-apply-ftw](http://jsperf.com/push-apply-ftw) and [underscore-wrap](http://jsperf.com/underscore-wrap).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ef48bd612e5eea042b03f79be404ebbac5d2bcf7 into d4ebe555bfc13ae12ab2a6a8bb50d66024959504"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e088b3a21fa1e1f1ab010",
    "number": 766,
    "body": "See issue #761. This change updates `_.each` to correctly iterate over properties of functions regardless of the `length` property.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e088c3a21fa1e1f1ab011",
    "number": 765,
    "body": "No need to hang around for the real work...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e088d3a21fa1e1f1ab012",
    "number": 762,
    "body": "When you call a throttled function repeatedly, the return value should be whatever the result of the most recent execution of it is.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 928c0f3426346a9be9586e2958f42bd9b583b4d7 into 664e93e954d2a1bf20d6c9f34ab53b968180ddfe"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e088e3a21fa1e1f1ab013",
    "number": 759,
    "body": "",
    "head_branch": "test-prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 50efe437c70ffa1d5e8585f33633cfe2bfde871c into cdbeeeff6a494abea89287511b1ff9641df37fcc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e088f3a21fa1e1f1ab014",
    "number": 754,
    "body": "",
    "head_branch": "template-settings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b1eae9acb8871c8158259192ca112c74b73d2a3d into f25cfc4b73ca6135dbe7b43130be8fcec28c40fc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08903a21fa1e1f1ab015",
    "number": 752,
    "body": "",
    "head_branch": "test-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3a4fc1e329dd989c8acaaa093ca391a8562a9cfa into 957f91435fb7d04c023bdee424b1d35287cdf743"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08913a21fa1e1f1ab016",
    "number": 751,
    "body": "",
    "head_branch": "wrapper-refactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6587a30099fd283abd0e5b2b9918f1ec88a0dd6a into 22744794d8be6f0a45fd91a5e6f68909be1d704f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08923a21fa1e1f1ab017",
    "number": 732,
    "body": "Sometimes I had situations in which means that function will be called with some specific context.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08933a21fa1e1f1ab018",
    "number": 731,
    "body": "The issue of deep cloning comes up frequently and is usually dismissed because its so unclear as to what to do with it. Here's an implementation that doesn't try to do too much and acts predictably by producing the same result as `JSON.parse(JSON.stringify(obj))`. Here is my test object for comparison:\n\n``` js\nfunction A () {this.foo = \"bar\";}\nA.prototype.method = function () {};\n\nfunction testObj () {\n  return {\n    \"number\": 42,\n    \"string\": \"foo\",\n    \"boolean\": true,\n    \"array\": [1,2,function(){}],\n    \"object\": {foo: \"bar\"},\n    \"arguments\": arguments,\n    \"function\": function () {},\n    \"instance\": new A(),\n    \"date\": new Date(),\n    \"regexp\": /^$/g,\n    \"math\": Math,\n    \"nan\": NaN,\n    \"null\": null,\n    \"infinity\": Infinity\n  };\n}\nconsole.log(JSON.stringify(testObj()));\n```\n\nKey transformations include: \n- functions are changed to undefined (which means the key is omitted from the object)\n- undefined values are changed to null within arrays,\n- arguments, regexps, and Math are changed to empty objects\n- NaN and Infinity are changed to null\n- Dates are changed to ISO strings\n- Instances lose their prototypes and methods\n\nhttp://jsperf.com/json-clone/2\n\nPerformance is on par with jQuery's deep extend, but funnily enough, significantly slower than stringifying and parsing the value.\n\nI think this solves the most common (by far) use case of just copying data structures, but I don't know if the performance implications make it worth including. What does everyone think?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08933a21fa1e1f1ab019",
    "number": 727,
    "body": "This pull request has been automatically generated by Prose.io.\n",
    "head_branch": "prose-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 575304fda717b66c4802096424bd58dc061e82fe into 96426239daa24cefe89925c8a26090e2c44bff90"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08943a21fa1e1f1ab01a",
    "number": 726,
    "body": "",
    "head_branch": "drop-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 879acb48813dcb4b4199933752c17493e27a19c3 into 11187721a03f99c507a0d414cdb0ad9d4835c9af"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08953a21fa1e1f1ab01b",
    "number": 720,
    "body": "Same reason as with [its request](https://github.com/documentcloud/underscore/pull/500)\n",
    "head_branch": "add-alias-drop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8912960022847e7eacb6cf002d7b9749978473d8 into 73a18931f45ce185cb22b2eb6166f028c20cb620"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08963a21fa1e1f1ab01c",
    "number": 719,
    "body": "See #717 for discussion and [speed comparisons](http://jsperf.com/omit).\n",
    "head_branch": "omit-include",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 625ebe1a84bd9baaa6c6febe840e18d8c75e9ea6 into b73b0257395aa186485cd6e80ccea501bb371697"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08973a21fa1e1f1ab01d",
    "number": 717,
    "body": "https://github.com/documentcloud/underscore/pull/716/files#r1456542\n",
    "head_branch": "omit-performance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08983a21fa1e1f1ab01e",
    "number": 716,
    "body": "",
    "head_branch": "omit-proto-props",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f603a3d58dd55fb61c01d4f1a7e6ab94e02d2af9 into 98b548d97d1a6eaf04f19fd94b03f61702306099"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08993a21fa1e1f1ab01f",
    "number": 710,
    "body": "I ran into a case where I was doing this:\n\n```\nvar foo = function(options) {\n  _.defaults(options, {bar: \"bar\"});\n}\n```\n\nbut I wanted `options` to be completely optional so it could be called as `foo()`\nto do this I needed to change the function to \n\n```\nvar foo = function(options) {\n  options = options || {};\n  _.defaults(options, {bar: \"bar\"});\n}\n```\n\nThis pull request fixes that so the options past into `_.defaults` can be `undefined` and it will return a filled object with all the defaults.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e089a3a21fa1e1f1ab020",
    "number": 707,
    "body": "",
    "head_branch": "take",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 78652c6ea4da8e9a74a2732c160c38aa1ad90b71 into f2cca697e0fa3ce3aade3be5e80496237562eb5d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e089b3a21fa1e1f1ab021",
    "number": 706,
    "body": "- Combine _.isArray and _.isArguments type checks.\n- _.isFunction will suffice for obj.toArray.\n",
    "head_branch": "toarray",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ca0df9076079a3b2c45475ddb2299fb901a29989 into 4098a13667bd3cecf02577446223c39a909d5b97"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e089c3a21fa1e1f1ab022",
    "number": 702,
    "body": "Added two failing tests to demonstrate the problem, and added fix to _.escape (check parameter with _.isEmpty before string coercion).\n\nBasically I'm running into a case where json objects coming out of a database are valid as null, but being escaped as \"null\", a string. The preferable string representation of a null value is an empty string. Undefined comes along as a freebie (same problem, same solution).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e089d3a21fa1e1f1ab023",
    "number": 701,
    "body": "I was looking at the source and noticed that _.times passes the index to the iterator but this wasn't reflected in the documentation. This caused some people on our team to use _.range followed by _.each because they needed an index when _.times could have been used all along.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4f66975af24a9d78dc7c8e2a1bea55d959adef4f into 2eb8d2de5cfd636e46e0a4fb4640f3ff8ff6d7d9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e089d3a21fa1e1f1ab024",
    "number": 699,
    "body": "love it, hate it? love it but needs improvement? peace!\n",
    "head_branch": "object-delete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e089e3a21fa1e1f1ab025",
    "number": 697,
    "body": "``` javascript\n_.find({ a: 1, b: 2 }, function(v, k) { return v == 2 });\n  // yields [ 2, \"b\" ]\n```\n\nthe current underscore yields 2\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e089f3a21fa1e1f1ab026",
    "number": 696,
    "body": "Needed something like this earlier today and was almost sure I would have found it in underscore. Super surprised when I didn't. Take it or leave it.\n\nIncludes tests and update to index.html for documentation. Ran `rake doc`, but changes produced seemed too big to be from just me, didn't spend much time looking at the diff though; backed them out, regardless.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a03a21fa1e1f1ab027",
    "number": 694,
    "body": "The current implementation does not copy ES5 properties fully. Custom setters/getters are discarded. To fix this, properties should be copied with the corresponding ES5 functions if they are available.\n",
    "head_branch": "es5_extend",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a13a21fa1e1f1ab028",
    "number": 693,
    "body": "Assuming we'll never run the wrapped function again on _.once(), we can\nassign null to the `func` variable, so function (and all its inherited\nscopes) may be collected by GC if needed.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ac7f640a76a38318b495a0e30995c02ed1eae43d into 310d152355d484471049adc021e0ea93b4bdf21e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a23a21fa1e1f1ab029",
    "number": 691,
    "body": "Most of these implementations are adapted from Oliver Steele's Functional Javascript library.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a33a21fa1e1f1ab02a",
    "number": 690,
    "body": "Apply some duck typing ruby-style checks, and now isEmpty behavior is more intuitive.\n\nNow you can do things like this (that is not true with the current implementation):\n\n```\nmatched_elements = jQuery(selector);\nif (!_.isEmpty(matched_elements)) {\n  do_stuff();\n}\n```\n\nIn general, makes sense to think that anything with length === 0 is empty.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a43a21fa1e1f1ab02b",
    "number": 688,
    "body": "I changed groupBy so that it accepts an optional third \"selector\" argument. It is used to select values inside each group. In this way, you can easily group by one thing and select by another.\n\nNaturally, I wrote unit tests to cover it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a53a21fa1e1f1ab02c",
    "number": 687,
    "body": "accumulatingDebounce takes the arguments of debounce and accumulates them in a javascript list. The underlying function is called with a list of arguments, rather than dropping them on the floor.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a63a21fa1e1f1ab02d",
    "number": 684,
    "body": "Add test for it and check the start of range should be a number.\nI don't think the non-number stop and step will affect lot.\nSo I just leave them there.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a73a21fa1e1f1ab02e",
    "number": 682,
    "body": "Fix the scope of variable `key` (local, not global) in the `eq` function.\n",
    "head_branch": "fix-scope",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a73a21fa1e1f1ab02f",
    "number": 680,
    "body": "I needed a function that works like after but works on intervals after that.  So this is what I came up with.  Thought I'd share in case it's of general interest.\n",
    "head_branch": "afterEvery",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a83a21fa1e1f1ab030",
    "number": 678,
    "body": "Description: Add a mask function that takes a function and a variable\nnumber of indices and returns a function that calls the passed function\nwith the arguments specified by the indices in order.\n\n_.mask(f, 2, 0)(a, b, c, d) is equivalent to f(c, a)\n\nUse case: Mask out and/or rearrange arguments to a callback without a\nclosure.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08a93a21fa1e1f1ab031",
    "number": 677,
    "body": "Perhaps I'm \"doing it wrong\" but I often want to check to see if\nsomething is (or more-often, is NOT) null or undefined. I know it's a\nsimple method to write and include yourself, but from my novice\nperspective it seems like a useful inclusion in base.\n\nI checked to see if this has been discussed before on the tracker and didn't find anything.\n",
    "head_branch": "null-or-undefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08aa3a21fa1e1f1ab032",
    "number": 673,
    "body": "I think it's really useful. This function is a clone of the PHP function `number_format()`\nI'm currently using this as a separate function but it would be great to integrate this with the underscore library.\nMaybe a few improvements can be made. Let me know what you think.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ab3a21fa1e1f1ab033",
    "number": 671,
    "body": "I find that the term `variable` implies that `isUndefined` is checking for undefined/undeclared variables rather than values that `=== undefined` (it's actual purpose).\n",
    "head_branch": "isundefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c8178e5684e93737c71859704e34308bd220cdc0 into bde1eeaadeb8c1c691cc5209349d165febd65275"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ac3a21fa1e1f1ab034",
    "number": 669,
    "body": "Add _.soak for safe navigation through a chain of properties and functions.  If the sequence is broken by null or undefined, _.soak returns undefined; otherwise, returns the value of the sequence.\n\n``` JavaScript\nvar sample1 = {a: {b: function() { return void 0; }}};\nsample1.a.b().c; // => throws TypeError\n_.soak(sample1, 'a', 'b', 'c'); // => undefined\n```\n\n`soak` will pass arguments to functions:\n\n``` JavaScript\nvar sample2 = {a: {b: function(x,y) { return x === 2 ? void 0 : x+y; }}};\nsample2.a.b(2,3).toString() || false; // => throws TypeError\n_.soak(sample2, 'a', ['b',2,3], 'toString') || false; // => false\n```\n\n`soak` takes the following syntax:\n\n```\n_.soak(object, 'a', 'b', ['fn', 1, 2]);  // arguments\n_.soak(object, ['a', 'b', ['fn', 1, 2]]); // vector \n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ad3a21fa1e1f1ab035",
    "number": 668,
    "body": "This adds `_.startsWith` and `_.endsWith`.  These work with both strings and arrays.\n\nBoth methods are proposed on strings in Harmony: http://wiki.ecmascript.org/doku.php?id=harmony:string_extras – extending them to also work on arrays seems natural.\n\nThis makes specific tests for arrays, because it only makes sense for ordered collections.  `_.isArray` seems crude and maybe wrong (e.g., why shouldn't it work with childNodes or something array-like), but I'm not sure how better to detect indexable ordered collections.\n\nAlso if the types don't work out it returns false.  Should it throw an error?  And there's implicit string coercion, which maybe is okay or maybe not.\n",
    "head_branch": "add-extra-string-functions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ae3a21fa1e1f1ab036",
    "number": 667,
    "body": "This makes `_.include()` /  `_.contains()` work with strings in addition to collections.\n\nNote `String.contains` is a proposed method for Harmony: http://wiki.ecmascript.org/doku.php?id=harmony:string_extras – also it's really just another indexOf check, so it seems to make sense.\n\nString.indexOf is present in Javascript 1.0, so a method identity check seemed unnecessary.\n\nI wasn't sure where a doc change would go.\n",
    "head_branch": "make-contains-work-with-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08af3a21fa1e1f1ab037",
    "number": 662,
    "body": "Add _.combine fucntion to create an object from two arrays (for keys and values).\n\nA port of the native PHP `array_combine` function. See [the PHP documentation](http://fr.php.net/array_combine)\n",
    "head_branch": "combine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b03a21fa1e1f1ab038",
    "number": 661,
    "body": "It struck me as odd that _.all needed an iterator to be defined, but _.any defaulted to identity. It seems to me that these methods should be consistent with one another.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 84fc2ecdbd725bb233d1f1f2104b2446a084df58 into 2b1d7bdd89b93059a8661435eed904ef6271e690"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b03a21fa1e1f1ab039",
    "number": 657,
    "body": "The opposite of `_.isUndefined()`.  It felt silly often writing `!_.isUndefined()`.\n",
    "head_branch": "isDefined",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b13a21fa1e1f1ab03a",
    "number": 655,
    "body": "Found myself in situation, where I want another object to be bound.\n",
    "head_branch": "result-context",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b23a21fa1e1f1ab03b",
    "number": 654,
    "body": "Made some `isType` methods (`Arguments` partially, `Function`, `String`, `Number`, `Date`, `RegExp`) declarations in a loop.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d76acef3efae543f2fa01565a87cc37e1a2be6bd into 64b8f860bd06e381119183d2649f6f3eb440d117"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b33a21fa1e1f1ab03c",
    "number": 652,
    "body": "Performs a deep comparison between the two objects to determine, if they are similar or not. Similarity means, that the compared object has all the keys as the comparative with the same type of the values, but can be any value. The comparative object contain specific string or instances to determine the type.\n\nreturns false\n- compared dosen't have any key that comparative has. `{a:'a'} != {b:'b'}`\n- compared has same key, but different type of the value `{a:1} != {a:'a'}`\n\nreturns true:\n- compared have the same key-value as the comparative. `{a:'a'} == {a:'a'}`\n- compared have same key, same type, but different value as the comparative. `{a:'a'} == {a:'b'}`\n- compared have more keys than comparative. `{a:'a'} == {a:'b', c:'d'}`\n\nThis feature is useful with json communication. To check each key-value exist in a json object is a torture.\nFor example I want to get a response like this:\n\n``` javascript\nBob = {\n    name:'Bob',\n    age: 35,\n    timeStamp: 562212545,\n    stuffs: {\n        car: 'Ford',\n        family: {\n            wife: 'Julia',\n            childrens: ['Peter','Jacob']\n        },\n        house: 'Big'\n    }\n}\n```\n\nWhen i want to check if it formatted well, I have to check each property is defined, and if the value is good.\nWith `_.isSimilar()` I only have to make a Proto object and compare to the specific object.\n\n``` javascript\nPerson = {\n    name:'',\n    age:0,\n    timeStamp:0,\n}\n```\n\n`_.isSimilar(Person, Bob)` -> `true`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b43a21fa1e1f1ab03d",
    "number": 651,
    "body": "Most immediately, this change is necessary to match the behavior of the native `forEach` method. To see what I mean, try doing the following:\n\n```\n[0,,2].forEach(function(elem, i) {\n  console.log(elem, \"at index\", i);\n});\n```\n\nThe changes to `_.isEmpty` seemed necessary to fulfill the promises of this comment: \"An 'empty' object has no enumerable own-properties.\"\n\nIn general, wherever we bother to skip non-own object properties using `_.has`, we should be careful to skip array holes as well.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b53a21fa1e1f1ab03e",
    "number": 650,
    "body": "_.size(\"foo\") will TypeError.\nThis is a small patch, but it could be extended to check for other type of argument.\nIn any case, _.size() should return _anything_ instead of crashing.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b63a21fa1e1f1ab03f",
    "number": 647,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f066c794616fe4204c98148932618f0972e34d9e into 322a64135dc3c4a649f102e962054310c2b39c04"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b73a21fa1e1f1ab040",
    "number": 646,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7c630035999bbaf015ec9563b04a04a44c8a347d into d586d9c3d84af8a4c6c00c0b58c1e0d089f0e6a2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b83a21fa1e1f1ab041",
    "number": 635,
    "body": "I had to read the source code to find out that `_.times` did indeed provide the current iteration number as an argument, so I added that information to the docs.\n",
    "head_branch": "times-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08b93a21fa1e1f1ab042",
    "number": 632,
    "body": "Proposed function performs the inverse of `_.pluck()`, adding a new property to every item in a collection.  Useful for enriching datasets.  User can either pass an array of new values or a callback that accepts each item and returns the value to be added.\n\nThis implementation modifies the original objects inside a `_.map()`, which feels weird.  A different one might drop `_.extend()` in favor of `_.clone()`-ing each object before adding the new property.\n\nExample usage:\n\n<pre><code>var data = [\n  {name: 'Sylvia', birthday: new Date(1984, 1, 14)},\n  {name: 'Lobo', birthday: new Date(2002, 0, 5)}\n];\n\nvar today = new Date();\nvar calculateAge = function(obj) {\n  return Math.floor((today - obj.birthday)/(1000*60*60*24*365));\n};\n\n_.unpluck(data, 'age', calculateAge);\n\n// results in  [\n//   {name: 'Sylvia', birthday: new Date(1984, 1, 14), age: 28},\n//   {name: 'Lobo', birthday: new Date(2002, 0, 5), age: 10}\n// ];\n</code></pre>\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ba3a21fa1e1f1ab043",
    "number": 630,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08bb3a21fa1e1f1ab044",
    "number": 629,
    "body": "It wasn't obvious to me at first glance that the values were passed in as the 'this' pointer. Trying to clear that up.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08bb3a21fa1e1f1ab045",
    "number": 623,
    "body": "Underscore.m is a port of Underscore.js to Objective-C that I maintain.\n\nCould Underscore.js reference it in the docs like it does with Lua, PHP and Perl?\n\nThanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b919103f105fe5f47884e7e218544b5d065b04d0 into 89fa3e63a5fa9fc115ee5cf6009f9adbf17b5acd"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08bc3a21fa1e1f1ab046",
    "number": 621,
    "body": "As per pull request #620, with the code fixed to take an iterator like the sort function.\n\nThe aim of the bfind method is to tackle the following scenario\n\n// this array is sorted by key then parentKey\nvar array = [\n{ key: \"bar\", parentKey: \"zoo\",value: \"magic\" },\n{ key: \"foo\", parentKey: \"bar\", value: \"hat\" },\n{ key: \"foo\", parentKey: \"monkey\", value: \"pants\" }];\n\nvar thingToFind = { key: \"foo\", parentKey: \"monkey\" };\n\nThis is the scenario that I'm facing when I get data from my datasource. I know the key and parentKey and the array is sorted in that order - so the optimal way would be to find the object is a binary search.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08bd3a21fa1e1f1ab047",
    "number": 620,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08be3a21fa1e1f1ab048",
    "number": 619,
    "body": "If `method` is a function it's certainly not a falsy value.\n",
    "head_branch": "invoke",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 03a8b0bfbf22be94c9ff038acc8e82da0d0fd061 into 99d1023a8b0912d15215d186f580dafc27f2d04a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08bf3a21fa1e1f1ab049",
    "number": 618,
    "body": "Defect was introduced in 3df562f; tests pass for both parents of it.\n",
    "head_branch": "invoke-defect",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c03a21fa1e1f1ab04a",
    "number": 617,
    "body": "See bestiejs/lodash@0b04460471a42d7f9fee9e3f2d10a90c58d6ddc3 and bestiejs/lodash#15\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6eb19ace734065530f4df87480ecc795b929d781 into 7ef6b6d1888cb0ebd406f83680e0deff85f25ffe"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c13a21fa1e1f1ab04b",
    "number": 615,
    "body": "More info: http://mathiasbynens.be/notes/ambiguous-ampersands (see \"semi-related fun fact\").\n\nLo-Dash has this optimization too.\n",
    "head_branch": "optimize-escape",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c23a21fa1e1f1ab04c",
    "number": 610,
    "body": "Same deal as PR for Backbone, this implements a mobile optimized version of underscore.\n\nRequired less CSS as the underscore docs don't have as many elements as backbone.\n",
    "head_branch": "mobile-site",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 80532fd88e9ed289eb147c5140d48dae79298dee into a4414cede6ee2116140cceffda97d5c4029b826a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c33a21fa1e1f1ab04d",
    "number": 604,
    "body": "_.singleton\n\nReturn a singleton factory for a given class constructor.\n\nexample:\n\n```\nvar num = 0;\n\nvar Foo = function () {\n    this.num = num ++;\n}\n\nvar Singleton = _.singleton(Foo);\n\nvar foo1 = Singleton.getInstance();\nvar foo2 = Singleton.getInstance();\n\nfoo1 === foo2; // true\nfoo1.num === 0; // true\nfoo1.constructor === Foo; // true\n```\n\nP.S underscore.min.js & doc were not generated for this change.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c43a21fa1e1f1ab04e",
    "number": 603,
    "body": "```\n_.dzip([1,2,3], ['a', 'b', 'c'])\n```\n\nwill return object:\n\n```\n{\n  '1': 'a',\n  '2': 'b',\n  '3': 'c'\n}\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c53a21fa1e1f1ab04f",
    "number": 602,
    "body": "Some times you don't care about object itself, but you want to know it's index.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c63a21fa1e1f1ab050",
    "number": 597,
    "body": "A couple of utility functions for working with arrays of objects.\n\n```\nvar needle = _.findBy([{id:1,name:\"foo\"},{id:2,name:\"bar\"}],'id',1)\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c63a21fa1e1f1ab051",
    "number": 595,
    "body": "I sometimes return copies of nested internal data structures, so deep copying is needed to avoid accidental changes by other parts of the program or by loaded plug-ins. See also issue #586 and elsewhere.\n\nSince the _.clone() function didn't support deep copies, I thought it would be fairly straight-forward to add it without breaking the API. Not sure that the implementation is the best though.\n\nAlso fixed a few corner cases with Date, Function and RegExp objects being cloned. Not very common scenarios perhaps, but easy enough to handle.\n### clone_.clone(object, [deep])\n\nCreate a copy of the object. The copy is shallow, unless deep is true. This means that nested objects or arrays are copied by reference, not duplicated. Note that the prototype chain is not preserved by this function, unlike Object.create.\n\n``` javascript\n_.clone({name : 'moe'});\n=> {name : 'moe'};\n\n_.clone([1, 2, 3]);\n=> [1, 2, 3];\n```\n",
    "head_branch": "feature-clone",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c73a21fa1e1f1ab052",
    "number": 594,
    "body": "The basic set of predicates in Underscore are good, but mechanisms for combining them is somewhat lacking. Creating ad-hoc functions isn't difficult, but perhaps still a bit to tedious? Compare the following two lines:\n\n``` javascript\nvar okValue = function (o) { return _.isString(o) && !_.isEmpty(o); };\nvar okValue = _.and(_.isString, _.not(_.isEmpty));\n```\n\nNot sure that the example above motivates adding `and`, `or` & `not`, but perhaps it is useful to direct people to the higher-order-function way of thinking? Opinions?\n### Documentation\n\n**_.and(*functions)**\n\nReturns a new predicate function for the logical AND of a set of functions. The function will return false as soon as one of the functions returns a falsy value.\n\n``` javascript\nvar hasStringValue = _.and(_.isString, _.not(_.isEmpty));\n_.filter([\"\", \"one\", {}], hasStringValue);\n=> [\"one\"]\n```\n\n**_.or(*functions)**\n\nReturns a new predicate function for the logical OR of a set of functions. The function will return true as soon as one of the functions returns a truthy value.\n\n``` javascript\nvar isNullOrUndefined = _.or(_.isNull, _.isUndefined);\n_.reject([1, null, undefined, 0], isNullOrUndefined);\n=> [1, 0]\n```\n\n**_.not(*functions)**\n\nReturns a new predicate function for the logical NOT for each of the functions. The function will return false as soon as one of the functions returns a truthy value.\n\n``` javascript\nvar isNotNull = _.not(_.isNull, _.isUndefined);\n_.filter([1, null, undefined, 0], isNotNull);\n=> [1, 0]\n```\n",
    "head_branch": "feature-predicates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c83a21fa1e1f1ab053",
    "number": 593,
    "body": "Hi,\n\nI've been in a situation lately where I wanted to use `_.reduce` to chain computations on a collection, but each individual computation was asynchronous (i.e. making a `HTTP` request to get the result).\n\nThus, I've cooked up the following extension to reduce, that takes an optional `callback` argument and chain the computations through the callbak. Here's an example:\n\n```\nvar asyncComputation = function (memo, num, index, list, callback) {\n  // .. Do some asynchronous computation, returning variable \"result\"\n  (...)\n    // Call callback with that result:\n    callback(result);\n};\n\n// Finally, call _.reduce, which picks up the asynchronous version.\n_.reduce( [1,2,0,3], asynComputation, 0, function (result) {\n  console.log(result);\n});\n```\n\nI don't know if that is something you guys would like in `underscore` but I'm submitting it here in case it could be useful. Also, other functions of the module could have a similar asynchronous version of them..\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08c93a21fa1e1f1ab054",
    "number": 592,
    "body": "Clarified the documentation for the isX() functions. In particular their handling of primitive vs. wrapper objects, null values and such.\n",
    "head_branch": "doc-clarifications",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ca3a21fa1e1f1ab055",
    "number": 591,
    "body": "Small patch to fix issue #578. Added try-catch to handle stack overflow when too many values are passed to min() or max() functions without an iterator.\n",
    "head_branch": "fix-issue-578",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08cb3a21fa1e1f1ab056",
    "number": 590,
    "body": "- Use \"qunit-fixture\" for reliable DOM tests.\n- Replace `same` with `deepEqual`.\n- Update \"test.html\".\n",
    "head_branch": "qunit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5831005d34b97fbc852fccc22a984545984a30a9 into 60288c08e1f7723d6935677c78715d7952c403fc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661e08cc3a21fa1e1f1ab057",
    "number": 588,
    "body": "I finally got around to precompiling some templates server side for linting purposes, but ran into a small problem.  `_.template` inserts a newline followed by a semicolon after code blocks which creates an unnecessary semicolon.  Since one of the main benefits of precompiled templates is the ability to lint the resultant javascript, it would be nice if this were not required.  Since the newline will always be followed by an identifier the semicolon can be left out safely.\n\n_I feel I must qualify that the motivation for the change has nothing to do with a desire to remove semicolons in general.  Code blocks can still include them or not, I don't care.  I just want to be able to easily lint the compiled source._\n",
    "head_branch": "template-style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9bc50787fa5ab595fed34be68f7f0d49bfa8a2ca into 5e8b83c536119d59022ba1b816190f03b1ac56bb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08cd3a21fa1e1f1ab058",
    "number": 587,
    "body": "Hello, I added a very useful (at least for me) method to underscore, which I was always extending in my projects. Basically, it chunks an array into slices, for example:\n\n```\n [1,2,3,4,5,6,7] can become [[1,2,3],[4,5,6],[7]]\n```\n\nIt's very useful for jobs, queuing, among others. Essentially, I used it with NodeJS but it can be used in the browser, thou.\n\nI also created some tests for it.\n\nThere are example codes (commented) for other implementations I've done, but I left the fastest one working.\n\nI hope it sees the light of the day :)\n\nCheers!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ce3a21fa1e1f1ab059",
    "number": 582,
    "body": "Hi,\n\nI found these definitions, so I just conventionalized them.\n\nRegards,\nGenadi\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 43f03d167191ec09a04859654ac19b33256a266f into e813db65ee91c815284e4cba9f2afa0bd78f84b3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08cf3a21fa1e1f1ab05a",
    "number": 576,
    "body": "This fixes #570. Test included.\n",
    "head_branch": "throttle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e74241b8b14a6f23250fb24894e7963146c3b2f8 into c9ab76eab3cb65b88e0a039a4a3b2003093a0e65"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d03a21fa1e1f1ab05b",
    "number": 575,
    "body": "I've added a check for 'lastIndex', as well as for Firefox's custom 'sticky' flag. Tests are included for 'lastIndex' -- I wasn't sure how to write an elegant test for the platform-specific 'sticky'.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d13a21fa1e1f1ab05c",
    "number": 574,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d55cb4bfc92270c0b2bd3a9d9a1e336c5c60f299 into e3fa7a6da53895c5bdb816615e658f23f0ba1112"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d23a21fa1e1f1ab05d",
    "number": 573,
    "body": "Gives massive speedups on _.flatten for large, deep arrays, see http://jsperf.com/underscore-flatten-quadratic.\n\nThe trouble was the .concat call, which constructs a new array each time it's called. Swapping it out for the .push method makes it linear.\n\nI also added a performance test for flatten, to catch this in case this comes up again.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8a1b309e8df1aa127b64f9cc40822913fbb9fee3 into d277aaf64c87fb531f27a62f0d1533d644553e71"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d23a21fa1e1f1ab05e",
    "number": 571,
    "body": "Rather than recalculate the comparison value of the 'needle' object, `sortedIndex` now calculates it once and reuses the result.\n",
    "head_branch": "sorted-index-caching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ca0f211fa6287ae32061c695762e4c0503dc43ed into e1fc1d334633276ccf7dfa74fa21ea3e923056af"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d33a21fa1e1f1ab05f",
    "number": 569,
    "body": " Tests if object is direct descendant of Object, such as `{}`\n\n``` javascript\ntest(\"objects: isHash\", function() {\n  ok(_.isHash({}), '{} is object');\n  ok(_.isHash({key: 'value'}), '{key: \"value\"} is object');\n  ok(!_.isHash(new (function Model() {})), 'new Model() is not an object');\n  ok(!_.isHash([1, 2, 3]), 'and arrays');\n  ok(!_.isHash($('html')[0]), 'and DOM element');\n  ok(!_.isHash(iElement), 'even from another frame');\n  ok(!_.isHash(function () {}), 'and functions');\n  ok(!_.isHash(iFunction), 'even from another frame');\n  ok(!_.isHash(null), 'but not null');\n  ok(!_.isHash(undefined), 'and not undefined');\n  ok(!_.isHash('string'), 'and not string');\n  ok(!_.isHash(12), 'and not number');\n  ok(!_.isHash(true), 'and not boolean');\n});\n```\n\nThis is useful for determining if an \"options hash\" is passed in a function with dynamic/overloaded arguments.  You may have a function that can take arguments like this:\n\n``` javascript\nUser.create({name: 'Joe'}); // passed in an Object instance, {}\nUser.create([{name: 'Joe'}, {name: 'Jane'}]); // passed in an array of {} instances\nUser.create(new User({name: 'Joe'})); // passed in a User instance, which is a \"subclass\" of Object, but not a direct {} instance\n// the complex case:\nUser.create(new User({name: 'Joe'}), {validate: false}); // passed in Model, which is NOT a direct {} instance, then passed in a {}.\n```\n\nIf you wan't to be able to do the last case, you can't use the `_.isObject` function, you'd need to check if the object is a `{}` instance, not a subclass.  For example:\n\n``` javascript\nModel.create = function() {\n  var args = Array.prototype.slice.call(arguments);\n  var options = _.isObject(args[args.length - 1]) ? args.pop() : {};\n  // The above works in these cases:\n  //\n  // Model.create(model, options); // args[args.length - 1] == true\n  // Model.create(options); // args[args.length - 1] == true\n  // \n  // but it fails in this case:\n  //\n  // Model.create(model); // args[args.length - 1] == true\n  //\n  // The correct way to do this, is to check if it's a \"hash\":\n  //\n  var options = _.isHash(args[args.length - 1]) ? args.pop() : {};\n  //\n  // this will work in all of these cases:\n  // \n  // Model.create(model, options); // args[args.length - 1] == true\n  // Model.create(options); // args[args.length - 1] == true\n  // Model.create(model); // args[args.length - 1] == false\n}\n```\n",
    "head_branch": "feature/isHash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d43a21fa1e1f1ab060",
    "number": 567,
    "body": "The first typo you may not see in the diff because I removed the whitespace at the end of the lines but it is `intead` -> `instead`. Thanks!\n",
    "head_branch": "patch-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 320b67a3054141b10be7342060020b2e0c7422a0 into 6ba2c5db40dc7a15e8a4cf38c3b41f230d989bec"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d53a21fa1e1f1ab061",
    "number": 566,
    "body": "I was confused when I read the second part of the test. The variable name was index2, and \"30 should be inserted at index 2\". But then I looked a few lines up, and saw that index's number \"should be inserted at index 3\". I had thought that the '2' at the end of 'index2' meant something it didn't. This renaming prevents that confusion.\n\nThis change highlights the repetition in this test. It is possible that a good next step would be to refactor the testing of these two numbers into an each loop. Or perhaps that would make the test unnecessarily complicated. I am not confident enough to make that call, so I'll leave it as it is.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2b92a451f804cbe6ae4feee9db0f8f5e62dbdbcf into 810dd30b905948e9165ea2124cbef9ccbcee94a1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d63a21fa1e1f1ab062",
    "number": 565,
    "body": "Return a copy of the object, filtered to exclude the blacklisted keys (or array\nof valid keys).\n\nSimilar to _.pick, but using blacklisting instead of whitelisting which can be\nmore appropriate in some cases.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5316b3a5f895a9800be880524c4d0528ecaebe28 into 460adf59b50ca13effe7ea12bf1c8b3eb16353ca"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d73a21fa1e1f1ab063",
    "number": 564,
    "body": "it looks like the code does it anyways and it could be inferred from the delay documentation but i felt it was not obvious\n\nthank you so much for underscore. i love it!!\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 22cb97f95b4902a49827d2c6511563977140f2f0 into 599d31101b7a7b896ff73e338d26ae698833f878"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d83a21fa1e1f1ab064",
    "number": 563,
    "body": "It would be useful if _.sortedIndex specified that it returns the lowest index, rather than any index, at which the value should be inserted into the list in order to maintain the list's sorted order.  This is how the current implementation behaves, but it requires users to either read the source to determine this behavior (and rely on the implementation not changing this behavior) or handle the case that this behavior may change.\n\nThe primary use case that I envision, and the one which prompted me to make this suggestion, is maintaining a sorted list of unique elements.  If _.sortedIndex is not guaranteed to return the lowest index at which value may be inserted, the insert process must check both the value at the index it returns and the value at the next smaller index (if one exists) for a duplicate element (for the case that _.sortedIndex would insert the value after its duplicate).\n\nThis pull also adds a test for this behavior.\n\nNote:  It would also be important to change the documentation on the website, but I did not see that available on github, so it is not included in this (or a related) pull.\n\nThanks!\n",
    "head_branch": "sorted-index-spec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1aaeb4127ca498fc12e126f94022744a8e4301e5 into f10180b7f5d866adecae7a1e8d1aeff59626f5e7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08d93a21fa1e1f1ab065",
    "number": 562,
    "body": "This uses braddunbar's `__t=` solution to have `<%- foo %>` work the same as `<%= foo %>`.  Tests updated.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4c4203dc9df91a45cf02701cd301c996efd723c0 into 67706cfb16f06b60585f12c65ef1cdcf13868602"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08da3a21fa1e1f1ab066",
    "number": 561,
    "body": "... by converting obj to Object. Right now `i in obj` causes TypeError.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08db3a21fa1e1f1ab067",
    "number": 560,
    "body": "With an extra variable (`__t`) we can check for `null` and `undefined` inline and keep the performance improvements gained by using string concatenation.\n",
    "head_branch": "interpolate-null",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b24be5540e6c93a1906afd48b6cc28b066dab411 into bc8266d8a72f6001383c1e1f3120e370244d2951"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08dc3a21fa1e1f1ab068",
    "number": 559,
    "body": "actually, in the version I was using in my project, `<%= test %>` outputs `\"\"` when `{test:null}`.  but in the latest underscore, it outputs `\"null\"`\n\n``` javascript```\nconsole.log(_('[<%= test %>] {<%- test %>}').template({test: null}));\n```\n\noutputs `[null] {null}`\n\nThis patch outputs `[] {}`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08dd3a21fa1e1f1ab069",
    "number": 558,
    "body": "Instead of exports._ = _, we now do exports = _ in a Spotify app.\nThis allows e.g. Backbone to require underscore also in Spotify.\n",
    "head_branch": "spotify-app-compatibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08dd3a21fa1e1f1ab06a",
    "number": 551,
    "body": "This adds in a _.merge() function that works just like Ruby's Hash#merge (http://www.ruby-doc.org/core-1.9.3/Hash.html#method-i-merge).  This handles more general cases than the very useful _.extend() and _.defaults().\n\nGiven:\n\n```\nvar originalRecord = { name: 'Kevin', highestScore: 50 };\nvar otherRecord = { name: 'Kevin', highestScore: 70 };\n```\n\nWhen:\n\n```\n_.merge(originalRecord, otherRecord, function(key, original, other) {\n    if (key === 'highestScore') return Math.max(original, other);\n    return other;\n});\n```\n\nThen:\n\n```\n_.isEqual(originalRecord, { name: 'Kevin', highestScore: 70 }) === true\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08de3a21fa1e1f1ab06b",
    "number": 543,
    "body": "This commit includes everything necessary to run the test suite in PhantomJs on Travis CI.\n\nYou can see a green build at http://travis-ci.org/#!/mark-rushakoff/underscore\n",
    "head_branch": "travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08df3a21fa1e1f1ab06c",
    "number": 542,
    "body": "As discussed in #540, using string concatenation instead of Array#join in `_.template` appears to be [roughly twice as fast](http://jsperf.com/template-concat-vs-join) in most browsers (Opera would seem to be the oddball here).  I haven't yet tested IE because github is serving scripts as plain text and IE blocks them.  I'll look for a workaround later today.\n\n_Note: The implementation of `print` was necessarily changed._\n",
    "head_branch": "template-concat",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9392d3df186c753cfaf5b31fb4c6f25294fcc8ed into 1ca3e6b073392563a0c63fbec6fb114a7bf31ee9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e03a21fa1e1f1ab06d",
    "number": 541,
    "body": "Nothing big.  This just adds an optional context argument to _.tap() so that you can pass it that way instead of _.bind()ing the interceptor manually.\n\nBefore:\n\n```\nMyCoolObject.prototype.doSomething = function() {\n    return _.tap(this.calculateValueOfX(), _.bind(function(x) {\n        this.doSomethingElse(x);\n    }, this));\n};\n```\n\nAfter:\n\n```\nMyCoolObject.prototype.doSomething = function() {\n    return _.tap(this.calculateValueOfX(), function(x) {\n        this.doSomethingElse(x);\n    }, this);\n};\n```\n\nAlso, if I run the example shown in the documentation, I get TypeError: Illegal invocation in Chrome.  I assume this is from trying to call the interceptor (console.log) in the global context rather than in the context of console.  This pull request fixes the documented use (which otherwise could be fixed by binding console.log to console).\n\n```\n_.chain([1,2,3,200])\n  .filter(function(num) { return num % 2 == 0; })\n  .tap(console.log, console)\n  .map(function(num) { return num * num })\n  .value();\n```\n\nThanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e13a21fa1e1f1ab06e",
    "number": 540,
    "body": "- Leave out the with statement when using varname.\n- Rename source to compiled.\n- Comments, comments, comments.\n\nThis is an attempt to improve `_.template` with ideas from doT.js as described in #483.\n",
    "head_branch": "template-varname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f50690f67e6f333f7c213b7f646a30ddeba07348 into 8cfb076c9b47c18d15c5cefc5652ccb9eb6119b4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e23a21fa1e1f1ab06f",
    "number": 539,
    "body": "The non-zero case works properly for 0 as well.\n",
    "head_branch": "_.shuffle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a40001a358a185b4da8a2836381ce5a5a5d29eb6 into 73e6e87858fdbfa32fe8a41684be3ab6d01ae4d4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e33a21fa1e1f1ab070",
    "number": 537,
    "body": "was confused for a second, how did you get the rest of the array without saying where to start!!?\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e43a21fa1e1f1ab071",
    "number": 536,
    "body": "There are occasionally cases where there is no event to bind to when waiting for a condition to be true. This was initially used as an easy way to wait for an external resource to be available (for instance if you're waiting for a mime type to be supported due to a plugin installation)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e53a21fa1e1f1ab072",
    "number": 535,
    "body": "Unfortunately, the test for _.extend with undefined values was broken and thus so was the implementation. This broke existing Backbone 0.5.3 based code that depended on this to conditionally override options.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e63a21fa1e1f1ab073",
    "number": 534,
    "body": "The current implementation of sortBy breaks when the result of the iterator call is `undefined`.\n\n```\nvar obj = [undefined, 4, 1, undefined, 3, 2];\n_.sortBy(obj, function(i) { return i; })\n=> [undefined, 1, 4, undefined, 2, 3]\n```\n\nThe attached code collects the `undefined` values at the end of the result.\n\n```\n=> [1, 2, 3, 4, undefined, undefined]\n```\n\nThis also agrees with the standard sort handling of `undefined` as described here:  https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e4c4300a064b9bf21bfcf112088fe9cd0f46a049 into dc55088cd6d7b160c67214bbab9bd5d6e02ef93d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e73a21fa1e1f1ab074",
    "number": 533,
    "body": "This is refering to #522.\n\nIt's a non-breaking change to zip(). Only if you want to restrict the length of the resulting array to the length of the smallest list you add an additional last parameter 'true' to enable strict mode.\n\nI have included two test cases.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e73a21fa1e1f1ab075",
    "number": 532,
    "body": "If the iterator is a string instead of a function, sorts by the property named by the iterator on each of the values, as _.groupBy() does.\n\ne.g.)\n_.sortBy([\"one\", \"two\", \"three\", \"four\", \"five\"], 'length');\n=> [\"one\", \"two\", \"four\", \"five\", \"three\"]\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6b8a99ba395c6b53fdec24c8d134861b47a09d65 into 60adb34d0c1738782c3dc44eeea29504a6ef13dd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08e93a21fa1e1f1ab076",
    "number": 529,
    "body": "It's too hard to compare integers. I've added helper functions for underscore.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ea3a21fa1e1f1ab077",
    "number": 528,
    "body": "Hey Guys!\n\nI don't know if this method makes sense, but I added _.isZero following [Fixnum.zero?](http://ruby-doc.org/core-1.9.3/Fixnum.html#method-i-zero-3F).\n\nThe idea is to use\n\n   if(_.isZero(val))\n\ninstead of\n\n   if(val == 0)\n\nCheers\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08eb3a21fa1e1f1ab078",
    "number": 526,
    "body": "Return a clone of the source with only the properties named in *keys\n(either stings or arrays containing strings).\n\nEspecially useful for avoiding mass-assignment vulnerabilities.\n\n```\n_.slice({name : 'moe', age: 50, userid : 'moe1'}, 'name', 'age');\n=> {name : 'moe', age : 50}\n_.slice({name : 'moe', age: 50, userid : 'moe1'}, ['name', 'age']);\n=> {name : 'moe', age : 50}\n```\n\nThis is another alternative to #523 and #520, using a different name for the method; so the different approaches can be compared.  Feel free to reject (personally, I still prefer `_.restrict`).\n",
    "head_branch": "slice",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ec3a21fa1e1f1ab079",
    "number": 525,
    "body": "This webkit property enables native scrolling for the methods sidebar\nwith elasticity and momentum (iOS 5)\n",
    "head_branch": "touch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0d935b0427be9dc30804aceb29938ba29c91472e into d84410bbe6f6f07d2c359f3f449561bcfda61d2e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ec3a21fa1e1f1ab07a",
    "number": 524,
    "body": "Adds ability to test whether an obj/value is a finite number.  [Adds feature discussed in issue #406](https://github.com/documentcloud/underscore/issues/406)\n\nTests included.\n\nUpdated function:\n\n``` JavaScript\n// Is a givin number finite?\n_.isFinite = function(obj) {\n  return _.isNumber(obj) && isFinite(obj);\n};\n```\n",
    "head_branch": "isFinite",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ee86820473b355af0a7fede78d7d948083a4ea46 into 719cd24aa9c40990294d607ce2f5bad65b7aac7c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ed3a21fa1e1f1ab07b",
    "number": 523,
    "body": "Return a clone of the source with only the properties named in *keys\n(either stings or arrays containing strings).\n\nEspecially useful for avoiding mass-assignment vulnerabilities.\n\n```\n_.restrict({name : 'moe', age: 50, userid : 'moe1'}, 'name', 'age');\n=> {name : 'moe', age : 50}\n_.restrict({name : 'moe', age: 50, userid : 'moe1'}, ['name', 'age']);\n=> {name : 'moe', age : 50}\n```\n",
    "head_branch": "restrict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7c9523784555f10d65f894a66e03f71b71ce96a0 into 180b8b0c833dd8b81c024b2a59402706a5a74894"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ee3a21fa1e1f1ab07c",
    "number": 521,
    "body": "Exposing the source of the template function makes it trivial to precompile templates server side.  This yields several benefits:\n- Templates are precompiled with the same code they are compiled with on the client.\n- Break points can be set when debugging.\n- When errors occur, a stack trace and line number are provided.\n\nI also attempted to make some of the variable names more expressive.  Feel free to bikeshed them.\n",
    "head_branch": "template-source",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2c0ccf03ef1b5d0d54b267341f57fd7f8161b75c into c46cd354c2660600dc3e5394f63da94c52a64b62"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ef3a21fa1e1f1ab07d",
    "number": 520,
    "body": "For example `_.only( {one:1,two:2,three:3}, 'one', 'three' )` yields `{one:1, three:3}`\n\nThis is very useful for sanitizing/filtering input. This seems so useful that I suspect there might be a reason it isn't in underscore already...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f03a21fa1e1f1ab07e",
    "number": 519,
    "body": "If/when these tests fail, the failure message for `equal` gives more useful information than the failure message for `ok`.\n",
    "head_branch": "test-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 85672298d9f90f7aea038aa3d439227412e3ac53 into ebb9db4e8e62a8760d8d24cbda6b7c66dc211d0e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f13a21fa1e1f1ab07f",
    "number": 518,
    "body": "Currently, underscore implements two different quantifiers;\n- The universal quantifier `∀` `_.all`, \"do all elements pass a truth test?\".\n- The existential quantifier `∃` `_.any`, \"do any elements pass a truth test?\".\n\nThis for aims to add two more quantifiers;\n- An exact quantifier `_.exactly`, \"do exactly n elements pass a truth test?\".\n- The uniqueness quantifier `∃!` `_.only`, \"does only one element pass a truth test?\". This is a specific case of exactly, where n is 1.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f23a21fa1e1f1ab080",
    "number": 516,
    "body": "This enhancement favors unary `typeof` over the `_.isFunction` alias to `toString.call` for performance gains where checking for callable object properties / functions.\n\nPerformance testing:\n-  [jsperf comparison of methods for testing for functions](http://jsperf.com/toarray-function-check)\n-  A few comparisons using underscore test cases:\n  -  http://jsperf.com/invoke-typeof/2\n  -  http://jsperf.com/groupby-typeof/2\n  -  http://jsperf.com/functions-typeof/2\n\n[Changes pass underscore tests on environments I have access to](http://raymondmayjr.com/underscore/test/test.html).\n\nPlease test on edge case environments I may not have access to or may not know about before merging.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f33a21fa1e1f1ab081",
    "number": 515,
    "body": "Passes tests.  Much, much faster (up to 5000% for arrays): http://jsperf.com/size-enchancement\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4c2a85f9c5f38ce466e9b827c2f7e3024196b579 into 33be5c62b8fe39b185024ea7d4e8b0e196f29d6b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f43a21fa1e1f1ab082",
    "number": 514,
    "body": "As suggested by @michaelficarra [here](https://github.com/documentcloud/underscore/pull/512#r575873).  I think it's much clearer than the original version.\n",
    "head_branch": "result-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9a27b1b083f8651e95f3622bfe5a338f36f7511a into a2a35c10cec12fac562ca39b692b0eaec225e20e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f53a21fa1e1f1ab083",
    "number": 513,
    "body": "Added the wipe method to help efficient garbage collection.\n\nhttp://www.scirra.com/blog/76/how-to-write-low-garbage-real-time-javascript\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f63a21fa1e1f1ab084",
    "number": 512,
    "body": "It was recently suggested in IRC that the internal Backbone helper `getValue` would make a good addition to underscore's utility functions.  I mix it in to underscore in most of my projects and I think it fits rather nicely.\n\nI made one change to Backbone's implementation and returned falsey values as is instead of `null`.\n\n``` javascript\n_.getValue({zero: 0}, 'zero');\n=> 0\n```\n",
    "head_branch": "getvalue",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5545a3b68da905b7cc956c1070f45cf9127ec045 into 984f29ad5800737642a72c1d756b5435fee698fe"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f73a21fa1e1f1ab085",
    "number": 511,
    "body": "- Cache regexes. [comparison](http://jsperf.com/triggering)\n- Use object properties for lookup instead of switch.  [comparison](http://jsperf.com/switch-vs-object3)\n",
    "head_branch": "tmpl-regexes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f5eb4b09157384c69f28e5cda38c620af8200c41 into ba3e31b53ef5752b40cfb2d71f594536fefbe916"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f83a21fa1e1f1ab086",
    "number": 510,
    "body": "function f(){}\nf.foo = \"bar\";\n\n_.each(f, function(val, key){ console.log(key); });\n\nThis did nothing before, now it does what you would expect and prints \"foo\".  Functions are objects too, but they have a completely unrelated \"length\" property, which is where the error crept in.  Thanks for the great library.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f83a21fa1e1f1ab087",
    "number": 508,
    "body": "Currently `_.isEmpty(new Date())` returns true\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08f93a21fa1e1f1ab088",
    "number": 506,
    "body": "Since \\u2028 and \\u2029 are valid [ES5 line terminators](http://es5.github.com/#x7.3) they should be escaped/unescaped along with \\r and \\n.\n",
    "head_branch": "line-terminators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 826e743262792c8cca93c38d2c774a34c81c7cdd into 144dcb18283d0810f9e952139971ec37c538e9eb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08fa3a21fa1e1f1ab089",
    "number": 505,
    "body": "From the docs:\n\n> Template functions can both interpolate variables, using <%= … %>, as well as execute arbitrary JavaScript code, with <% … %>.\n\nThis is not quite true as there are certain restrictions on how arbitrary the code can be.  For instance, the following template will not run as expected:\n\n```\n<%\n  var foo;\n  // some comment\n  foo = 15;\n%>\n...\n<%= foo %>\n...\n```\n\nSince `_.template` joins all lines of evaluated code with a space, a single line comment or a line of code without a terminating semicolon will cause a syntax error when creating the template function.  By escaping `\\r`, `\\n`, and `\\t` earlier, we can unescape them along with backslashes and single quotes allowing for the inclusion of single line comments and code without a terminating semicolon.  This change is backwards compatible in most cases and allows code to be more completely arbitrary.  Furthermore, debugging is made easier since all the code is not on one line.\n",
    "head_branch": "arbitrary-code",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 414fafb1f4e5daf4d22bfaa1f4e50ee190cf24c4 into 34305bc85d76abf1291ae12bc601f6ea4a443dc2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08fb3a21fa1e1f1ab08a",
    "number": 504,
    "body": "At the moment, _.toArray unconditionally calls iterable.toArray if it is present, even if it's not a function. I've added a check that iterable.toArray is a function, and added the appropriate test case (and also one for the normal case of iterable.toArray being a function).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c8ec654e6bbd4ea15872c6f65681f5a469330019 into 6f5489fcabd510ca5b0e62ae04e549775da32e2d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08fc3a21fa1e1f1ab08b",
    "number": 501,
    "body": "Needed this for a project, and thought it might be useful enough to warrant inclusion. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08fd3a21fa1e1f1ab08c",
    "number": 500,
    "body": "Although I understand that adding a third name for the same function is pushing the limits of going overboard, I've aliased `_.take()` to `_.first()` and `_.head()` in order to gain some convenience via consistency with other languages.\n\nThe following examples all return `[1, 2, 3]`:\n\nHaskell:\n`take 3 [1..10]`\n\nRuby:\n`1.upto(10).take(3)`\n\nClojure:\n`(take 3 (range 1 11))`\n\nAnd now JavaScript with Underscore.js:\n`var arr = _.range(1, 11);`\n`_(arr).take(3);`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b3eb4a5fcbc22c4bf4e15a09229edf6221676a2a into 4620eb7b617d3be2de3917e8e0c8ca78be0fab36"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08fe3a21fa1e1f1ab08d",
    "number": 499,
    "body": "Right now it's possible to replace properties of the passed-in object to tap(), but there's no good way to replace the object itself.\n\nThis is useful if you want to use a function in your chain() that you don't want to mixin() (or the function is part of another library, etc).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e08ff3a21fa1e1f1ab08e",
    "number": 498,
    "body": "By allowing a custom buffer in `_.template`, we can accomplish things that are not possible with the current implementation.  For instance:\n\n``` javascript\n_.template('<% wrap(function(){ %>content<% }); %>').call({\n  __p: [],\n  wrap: function(f) {\n    this.__p.push('<p>');\n    f.call(this);\n    this.__p.push('</p>');\n  }\n});\n```\n\nwill produce `<p>content</p>`.\n",
    "head_branch": "template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09003a21fa1e1f1ab08f",
    "number": 497,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09003a21fa1e1f1ab090",
    "number": 493,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5677a0c6ebcae6e3f7915dcfed43175618629a5e into c99cfca75e850702ceeadd65ccd2ae543f58f4ab"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09013a21fa1e1f1ab091",
    "number": 489,
    "body": "Current behavior\n\n``` javascript\n> var test_date = new Date('today');\n> test_date\n  Invalid Date\n> _.isDate(test_date)\n  true\n```\n\nNew behavior\n\n``` javascript\n> var test_date = new Date('today')\n> test_date\n  Invalid Date\n> _.isDate(test_date)\n  false\n```\n\nWhile `test_date` above is `[object Date]`, it's not useful since `test_date.valueOf()`, `.getMonth()`, `.getDay()`, etc  all return `NaN`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09023a21fa1e1f1ab092",
    "number": 488,
    "body": "1. The `print` function is no longer declared as a function.\n   It's just a regex inside evaluated blocks of a template.\n2. The `with` statement has been removed. Inside a template,\n   the data object can be referenced with `o`:\n   \n   ``` javascript\n   var hello = _.template('Hello <%= o.name %>!');\n   hello({name: 'Ponce de Leon'}) //=> 'Hello Ponce de Leon!'\n   ```\n3. Now uses string concatenation instead of Array.join.\n\nAs a result, it's now much faster. The hello template from the\nexample above now benches at ~20,000,000 ops/sec on my machine,\nwhere the current _.template got ~600,000.\n\nIt's not quite as fast as doT (which gets about 30,000,000) on\nthe same template, but that seems to be mostly due to the\noverhead of wrapping the template function. In any case, this\nversion should still be a lot faster than most anything other\nthan doT.\n\nNOTE: I've modified all the template tests so that they pass,\nand added one for the `print` function.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09033a21fa1e1f1ab093",
    "number": 486,
    "body": "Fixes #484.\n",
    "head_branch": "uniq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8808f7d531733a0e88d31f122ffc3568d1dfce96 into 23931b27163573f37292ff8849e38be62ab24a4d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09043a21fa1e1f1ab094",
    "number": 485,
    "body": "Use case: Accessing deep structures\n\n```\nvar user_ids = _.pluck(project.models, ['membership', 'models', 'user', 'id']);\n```\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09053a21fa1e1f1ab095",
    "number": 482,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7c7c38decf811953dc97cad12b3bbe5d2f102d73 into 90431601ccdc61c7b3c79124c3e56fd55306b1e3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09063a21fa1e1f1ab096",
    "number": 481,
    "body": "To be consistent with ECMAScript's Array::every, _.every casts result to boolean.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c2a58725bee234dd54128ac93a58f996110fd3eb into bb63be51671b44356a3f9f964007ae479e63ed29"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09073a21fa1e1f1ab097",
    "number": 479,
    "body": "ECMAScript some and every return true/false. This change casts the result of _.every to a boolean.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09083a21fa1e1f1ab098",
    "number": 477,
    "body": "Added the _.isNumeric() method, to test if a given object is numeric.\nNumeric objects are anything that isNumber() or a string that has a numerical meaning (e.g. '-12.3', '3', '-.2')\n\n![isNumeric tests](https://img.skitch.com/20120216-rx1mrnt9sg266y1f4m399e4ijp.png)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09093a21fa1e1f1ab099",
    "number": 476,
    "body": "- `_.curry` – Curries (burns in) arguments to a function, without forcing new context (inspired by prototypejs).\n\nDifference between  `_.curry` and `_.bind`: http://jsfiddle.net/CqG7n/\n- `_.attach` – Attaches new properties to the context of the call, in other words it extends passed object(s) with 'this' and makes it context.\n\nTo illustrate my use case I modified example from flatiron/director\n\n```\n// api.js\n  function helloWorld(route) {\n    this.res.writeHead(200, { 'Content-Type': 'text/plain' })\n    this.res.end('hello world from (' + route + ')');\n  }\n\n// router.js\n  var router = new director.http.Router({\n    '/hello': {\n      get: helloWorld\n    }\n  });\n```\n\nAnd I want to provided to my handlers stuff like db-resourse, application home path, etc.,\nwithout expanding list of function parameters, but rather adding to the context.\n\nUsing `_.attach`\n\n```\n// api.js\n  function helloWorld(route) {\n    fs.readFile(this.apphome+'/etc/passwd', function (err, data) {\n      this.res.writeHead(200, { 'Content-Type': 'text/plain' })\n      this.res.end(data);\n    });\n  }\n\n// router.js\n  var apphome = '/var/www';\n  var router = new director.http.Router({\n    '/hello': {\n      get: _.attach(helloWorld, {apphome: apphome})\n    }\n  });\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e090a3a21fa1e1f1ab09a",
    "number": 475,
    "body": "Right along with _.extend, _.defaults, and _.clone, I think _.beget is appropriate.  I was looking for it and didn't find it, so added it myself.  This is very handy when you want to quickly inherit from an object as opposed to a class.  Also, it's the Decorator pattern for free.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e090b3a21fa1e1f1ab09b",
    "number": 474,
    "body": "`_.curry`, `_.partialRight`, `_.partialAny`, `_.partial` (as `_.bind` alias) covered with tests.\n\nCall curried function without arguments to explisitly call it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e090b3a21fa1e1f1ab09c",
    "number": 470,
    "body": "Example...\nfunction fn(arg1, arg2) {\n    if (!_.isValue(arg1)) arg1 = 1;\n}\nfn(null, 2);\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e090c3a21fa1e1f1ab09d",
    "number": 469,
    "body": "simple update.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e090d3a21fa1e1f1ab09e",
    "number": 467,
    "body": "Developing project with node.js and underscore and toolbox for both client- and server-side.\n\nVery quickly realized that I'm missing 'curry' method back from my prototype days,\nso decided to migrate one here. I believe many would benefit from such beautiful concept.\n\nAnother big part of my project is flatiron/director, which very nice, although requires some dances around when you want to separate your request handlers and environment setup. To make certain variables available within the handlers but without passing them as extra parameters (which looks ugly if it's more than one), I decided to make them part of the context, but I can't use bind, since I need access to the original context of a handler for stuff like this.req and this.res, so the only way is to _.attach my variables to the original context. With growing usage of node.js and libs like flatiron/director it would be very convenient to have _.attach as core method.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e090e3a21fa1e1f1ab09f",
    "number": 463,
    "body": "`_.difference([0,1,2],[0],[1,[2]])` should produce `[2]`, not `[]`.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ff544ae997b9f600f43c39c932f45fad533667cd into f4359d9684913112734793262bad7dca839f8837"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e090f3a21fa1e1f1ab0a0",
    "number": 462,
    "body": "",
    "head_branch": "doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 64ed34f94962679bb305bf67a6b9897c62d1ea87 into af4b86e0a6c4504bb8f402872498b99400fcf481"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09103a21fa1e1f1ab0a1",
    "number": 460,
    "body": "After using underscore for a while, I'm finding our most common use case for `reduce` is just adding from 0. It'd be nice to have a shortcut function in underscore that we could just pass a list of numbers or objects. \n\nThis `sum` is one way to do that, and it comes with tests and updated docs!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09113a21fa1e1f1ab0a2",
    "number": 458,
    "body": "Allo all,\n\nWas talking with [Justin Searls](https://twitter.com/#!/Searlsware/status/164860983876136960) regarding how odd it is that when we use the underscore reject/select methods on 'maps.'\n\nI've provided a set of commits which solve this issue, but I'm not happy with the implementation. For instance, there are several array methods(i.e. without) that work on the arguments object which I've now had to convert the object to an array to prevent side effects.\n\nIt is my opinion that without, etc. should also return the type of thing they were called with, but I would like your opinion on this before I move forward.\n\nZee\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09123a21fa1e1f1ab0a3",
    "number": 457,
    "body": "So `_.bindAll(moe, 'getName', 'sayHi');` would become equivalent to `_.bindAll(moe,['getName','sayHi']);`.\n\nThis is helpful in cases when method names are being dynamically generated or only need to be bound based on some criteria.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09133a21fa1e1f1ab0a4",
    "number": 455,
    "body": "currently using a gory perl addition to `rake doc`, meant\nas proof of concept.\n",
    "head_branch": "docslinktobugs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09143a21fa1e1f1ab0a5",
    "number": 454,
    "body": "Use `equal` in place of (deprecated) `equals`.\n",
    "head_branch": "qunit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 458e604eee649aa0ee18cadfe96cd0e2b2739cb5 into 59761cedcfb120a981e7f29130422fa635161992"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661e09143a21fa1e1f1ab0a6",
    "number": 453,
    "body": "Bailing early for `null` and `undefined` values saves two function calls.\n",
    "head_branch": "isempty",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5c6abc4453f3bdf9470bd98ec79d7f22105f87e3 into bdb3cb21f9aacf7de53169c99563b471f985b82d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09153a21fa1e1f1ab0a7",
    "number": 451,
    "body": "Hi!\n\nHere is a proposed addition to underscore, a function that picks a number of random elements from an array. Functionally, <code>_.pickRandom(array, _[n]_)</code> is equivalent to <code>_.first(_.shuffle(array), _[n]_))</code>, but much more effective. Takes time proportional to _n_ rather than the length of the array. \n\nThe implementation might seem odd. It actually mutates the input array while it is working, but restores everything back to normal before returning. Hope you see how it works. I couldn't think of a better way to ensure that elements are picked from unique indices. One alternative would be to keep an array of indices picked so far and keep trying until a unique index was found. This would work well for picking 5 elements out of 1000, but would perform badly when the number of elements to pick is close to the length of the array. \n\nDocumentation and unit tests included. [Here](https://gist.github.com/1701014) is some extra testing code: speed test (compared with shuffle/first) and \"fair coin toss\" test. \n\nI'm new to git and github, hope I am doing this the right way. \n\nRegards,\nSimon Kågedal Reimer\n",
    "head_branch": "pickRandom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09163a21fa1e1f1ab0a8",
    "number": 447,
    "body": "... Date().toString() outputs a date string of the format Thu Jan 26 2012 22:17:17 GMT-0600 (CST)\n\n. A more comprehensive test is to check for the existence of a date property, such as the date function getFullYear(). In addition, if somebody were to extend Date(), this _.isDate will detect that the object is still a Date object.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09173a21fa1e1f1ab0a9",
    "number": 446,
    "body": "the website was missing documentation for _.isObject. I added it to the index.html page.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 53829cbd5c51e3319b843130890fbef0abd951c9 into 4540feaa1f672eb32fd5e8579b34fc21a7e9d565"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09183a21fa1e1f1ab0aa",
    "number": 444,
    "body": "The docs previously were not clear whether `uniqueId` would return a string or integer when called without arguments.\n",
    "head_branch": "uniqueid-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ae3720d2001c2d6b70a9759ec46fb4233aca6812 into 3512e7fc5c1164a5f6d1f4dc450d0e3895770255"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09193a21fa1e1f1ab0ab",
    "number": 441,
    "body": "Hi,\ni added _.sum() _.mean() _.median() to collections section and nrange() to arrays. tests are adjusted appropriately.\nin further detail:\n_.sum(obj): returns the sum of the elements objects.\n_.mean(obj): returns the mean of the elements in the object.\n_.median(obj): returns the median element (middle in sorted). works also with string / char elements (i.e. to split lists of names by alphabet)\n_.nrange(n) adds convenience functions to _.range(n): \n   nrange(-3)   -> [0, -1, -2]; \n   nrange(0,3) -> [0, 1, 2]; \n   nrnage(3,0) -> [3, 2, 1];\n(might replace _.range(n) to reduce redundance)\ndo{}while() instead of while(){} speeds up the script slightly on FF4+ and Safari.   \n\ntest suite and speed test is adjusted and tests passed.\n\nAndreas\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e091a3a21fa1e1f1ab0ac",
    "number": 440,
    "body": "",
    "head_branch": "has",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3898597b12fc80a70e5585d5a99c66ce8b52b6d8 into f6a1b97426398b54bf42163fb4d1c57f2084a20f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e091b3a21fa1e1f1ab0ad",
    "number": 439,
    "body": "Just seeing the word 'ranked' made me think of scores and priority queue and descending order.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e091c3a21fa1e1f1ab0ae",
    "number": 438,
    "body": "Table of contents added to the top of website.\n\nThis allows for you to see all the function names at once on screen. Which I think is cool, and I miss from the old website.\n\nLet me know what you guys think about re-adding the TOS to top of page. :)\n\nThanks\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e091d3a21fa1e1f1ab0af",
    "number": 437,
    "body": "Added _.debounce asap parameter to run the wrapped function as soon as the event fires, without having the user to wait for subsequent calls.\nTest added and passed\nDiscussion: https://github.com/documentcloud/underscore/issues/346\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e091e3a21fa1e1f1ab0b0",
    "number": 433,
    "body": "because other functions also similarly have ruby-like aliases\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 978255b7780952f7603d24f78485b1d90a6e2dfa into dd09162b8c216f3fd09dfc85446df420962c7376"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e091f3a21fa1e1f1ab0b1",
    "number": 431,
    "body": "This is in response to [this commit](https://github.com/documentcloud/underscore/commit/0d4b1247c45083c695cab4242c084a97aa600221), which came out of reports of issues using underscore in an AMD environment. \n\nFrom what I have heard, the issues are mainly when trying to also use backbone. Those issues could be resolved by merging [this pull request](https://github.com/documentcloud/backbone/pull/710). \n\nBut in general, if underscore prefers to not get reports of issues with an AMD loader, this pull request also exports a global even if define() is available. This is the same approach that jQuery uses. Ideally this would not be needed, but modular development is just getting bootstrapped on the web, and during this bootstrap period, this approach avoids issues.\n\nIf pull requests are not the way you prefer to have this conversation, please let me know what avenue works best.\n",
    "head_branch": "alwaysglobal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09203a21fa1e1f1ab0b2",
    "number": 424,
    "body": "When I installed module(such as [js2coffee](https://github.com/rstacruz/js2coffee)) that using `underscore` as dependencies,\nnpm puts following warning message:\n\n``` sh\nnpm WARN underscore@1.2.4 dependencies field should be hash of <name>:<version-range> pairs \n```\n\nVersions:\n- node v0.6.7\n- npm 1.1.0-beta-10\n\nI modified type of dependencies at `package.json`.\n",
    "head_branch": "package-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ce01895ab17ae8d31fd7647225371206cbee1dc3 into 38b78e4e5235844e01b5e1d7a623423040b12abc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09203a21fa1e1f1ab0b3",
    "number": 420,
    "body": "I believe it might be helpful to include a `ratio` method (for collections) in everyone's favorite utility-belt.\n\nThe best description I can provide is the one I put in the docs:\n### _.ratio(list, iterator, [context])\n\nReturns the ratio of values in the **list** that pass the **iterator** truth test. Returns _0_, if the list is empty.\n\n``` javascript\n_.ratio([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\n=> 0.5\n```\n\nI've had to implement my own `ratio` method than once, and I'm probably not alone in that. I'd be totally thrilled if you wanted to include this!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09213a21fa1e1f1ab0b4",
    "number": 419,
    "body": "Not sure this method will meet the qualifications needed to be merged into the Underscore.js source. But I often find myself in need of this method. Therefor I created and added humanJoin.\n\nIt basicially takes an array and joins the elements into a string separated by a arbitrary delimiter with the ability to overwrite the last delimiter. See example below.\n\n``` javascript\n_.toSentence(['jQuery', 'MooTools', 'Prototype'], delimiter = ', ', lastDelimiter = ' and ');\n// => 'jQuery, MooTools and Prototype'\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09223a21fa1e1f1ab0b5",
    "number": 417,
    "body": "Related to #416 (but does not resolve it).\n\nHopefully the intent here is clear. Just looking to save some people a few minutes of debugging.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3a225eada5f06fd7c3e146225d61c860a8db0a82 into 62c814d9fee214c19cf29695ded2eaab6bbaf0f8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09233a21fa1e1f1ab0b6",
    "number": 415,
    "body": "Clojurescript adds a call method to strings, so passing a string to\n_.invoke produces the wrong behavior.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2206092e25f66f3a0dbb05c24509a7831b1863fe into e58af520608517fed93c12c7fe9d38eda8b4a7b7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09243a21fa1e1f1ab0b7",
    "number": 414,
    "body": "The documentation for bind conflates currying with partial application. These concepts are closely related, but not the same thing:\n\nhttp://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application\n\nI think partial application is the more correct term here. Also, I think it's more appropriate because the term \"partial application\" is more descriptive of what bind does than \"currying\" to someone unfamiliar with these terms previously.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6baf8e877b94046cefb0b1bb514f38511dd47719 into 7157d0187f46d274804d88469b1c7479da6bc80b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09253a21fa1e1f1ab0b8",
    "number": 410,
    "body": "",
    "head_branch": "wrap-bug-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5ca27ffed139bb14aad12040c05f9b88a7ab8597 into b4a38439ce53ea80fbf008b2f44814349a135697"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09263a21fa1e1f1ab0b9",
    "number": 405,
    "body": "A convenience function for rotating an array\n\n_.rotate([\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]) \n=> [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09273a21fa1e1f1ab0ba",
    "number": 401,
    "body": "If an escaped character (e.g. \\n) is used in embedded Javascript inside a template then it gets escaped to \\n. If someone has put an escaped character in their JS then they probably want it left that way.\n\nThis merge request adds a test for this, and the following commit replaces \\s with a single \\ when inside evaluation tags, reverting the previous template escaping.\n",
    "head_branch": "template_js_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c8ecb47765b06c8ba39176f77162c4180352d33d into b27ed66d77375accd845ec85c31a6f405f4cdb24"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09283a21fa1e1f1ab0bb",
    "number": 391,
    "body": "Allow _.reduce and _.reduceRight to have an explicitly undefined initial value as the native fork allows.\nFixes the previous issues w/ the patch that caused it to be [reverted](https://github.com/documentcloud/underscore/commit/19beb29283cf5cdcf1c4f4ff2140378a01d31ceb).\n",
    "head_branch": "reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 649f629bb172f73f771b4716ef9a469199a5d531 into ed4826ca19bafb2b9ec6aba3f34ec7edafc05d40"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09293a21fa1e1f1ab0bc",
    "number": 390,
    "body": "Add unit tests and cleanup code for for-in issues.\n",
    "head_branch": "unittests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2c5661ebb30461d7a004372318617ded7a332ae7 into 4aef322079f04c85e7147f388fd3a5fca0809a0d"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e092a3a21fa1e1f1ab0bd",
    "number": 386,
    "body": "Backbone with AMD/RequireJS expects module._ instead of just _.\n\nThe added line, allows for all versions to work.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e092b3a21fa1e1f1ab0be",
    "number": 385,
    "body": "Fix cross-browser object enumeration issues.\n\nThis patch should address [the concerns](https://github.com/documentcloud/underscore/issues/376#issuecomment-2815538) brought up by @jashkenas in [issue #376](https://github.com/documentcloud/underscore/issues/376).\n\nThe gzipped filesize diff is around ~0.23 kb and the speed concerns have been addressed _(will add perf tests asap)_ by optimizing other areas of underscore.js.\n\nAs [I mentioned](https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649) in the original issue [several](https://github.com/mootools/mootools-core/blob/63659d25058b1139ada58c34373a7ccb1dde2d1b/Source/Core/Core.js#L61-80)-[libs](https://github.com/yui/yui3/blob/6ed148777f04d35c42c9370c8108484f14be78a2/src/yui/js/yui-object.js#L55-181)-[attempt](https://github.com/dojo/dojo/blob/ab8739f762cfa55fb49b8d5246a2e6c9d6900b25/_base/lang.js#L15-46) to tackle this issue and recently @kangax [tweeted](http://twitter.com/#!/kangax/status/141314165141803008):\n\n> Got bitten by function's \"prototype\" being (incorrectly) enumerable in Opera <12 (copying static properties also overwrote instance ones) :)\n\nCurrently it passes the existing unit tests _(one throttle unit test fails in IE6, but it does on the official release too)_.\n\nIf this patch gets the green light I will commit unit tests and further patches/pull-requests to speed up underscore.js methods by up to 50%.\n",
    "head_branch": "dontenum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3c6a8ccd73c88e0329df094d210c03620c21e8e2 into bfa4fe8a4fc178b252d11c56d7851b105763b720"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e092b3a21fa1e1f1ab0bf",
    "number": 384,
    "body": "This is a continuation of #383. I've added tests and NoConflict support.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e092c3a21fa1e1f1ab0c0",
    "number": 383,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e092d3a21fa1e1f1ab0c1",
    "number": 380,
    "body": "On browsers that do not JIT compile their javascript (IE<9), a slight speed increase can often be obtained by using a decreasing while or for loop in place of their increasing equivalents.\n\nBy changing the array iteration in the _.each method to use a decreasing for loop, we save a few lookups and can speed up iteration over large arrays. In this implementation, the comparison step of the for loop also post-auto-decrements the iterator, saving steps.\n\nThis is equivalent to running:\n\n```\nvar l = obj.length;\nwhile (l--) {\n}\n```\n\nand works because 0 is a falsy value in Javascript which will properly terminate the loop.\n\nA for loop was chosen over a while loop for no other reason than the more concise syntax.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e092e3a21fa1e1f1ab0c2",
    "number": 379,
    "body": "_.extend handles merges source sub-hash elements with the destination property.  Previously it would override the sub-items of the destination property with the source.\n",
    "head_branch": "extend_recursively",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09303a21fa1e1f1ab0c3",
    "number": 378,
    "body": "Hiya,\n\nIn a conversation with someone on irc, they wanted to do something on a first call to a function and something else on any subsequent call to the same function. I thought it might be something useful and wondered if underscore would like it.\n\nWhilst this is a pull request, I don't expect it to be pulled unless you want it ... nor do I expect it to be the best or final solution if you do. Please take a look and I'm happy if you do or don't like it. :)\n\nHave fun and thanks for underscore ... I love it.\n\nAndy\n",
    "head_branch": "initially",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09313a21fa1e1f1ab0c4",
    "number": 377,
    "body": "Added a function to declare \"namespaces\" to be used for scoping variables and classes so that they are not global\n\nUsage: _.ns('app.router')\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09323a21fa1e1f1ab0c5",
    "number": 375,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 55cddd94752a9ce965f92614e395559b223c6934 into 7c9516321cfaa6dafe23c43db0886a8c7ad58f69"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09333a21fa1e1f1ab0c6",
    "number": 374,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5e7d75d6f63c94b84007f67ea34889616065b396 into 8c346141dc9687c5952991195eefe1988cf92124"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09343a21fa1e1f1ab0c7",
    "number": 343,
    "body": "Like in [other projects](https://github.com/jashkenas/coffee-script/issues/1771) underscore.js needs to fix its `_.indexOf` and `_.lastIndexOf` fallbacks to properly support sparse arrays. This affects browsers like IE < 9.\n",
    "head_branch": "indexOf",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bf7a351fd6048f096ce2de6b6a2d486c496d940c into 7653c5fe09f3cd6929698ca6dea5deb7bc0b537b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09353a21fa1e1f1ab0c8",
    "number": 370,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09363a21fa1e1f1ab0c9",
    "number": 366,
    "body": "I've implemented this fix for #364.  I've run into the same issue myself several times just this week.  The typical usage pattern I use looks like (same idea as yuchi's, but boiled down ;) ):\n\n``` javascript\nfunction doSomethingToArray(items, cbWhenDone) {\n  if (items.length === 0) {\n    cbWhenDone();\n  } else {\n    var cbDoneWithOne = _.after(items.length, cbWhenDone);\n    _.each(items, function(item) {\n      doSomethingAsync(item, cbDoneWithOne);\n    });\n  }\n}\n```\n\nThis change cuts out that whole if/else block, a la:\n\n``` javascript\nfunction doSomethingToArray(items, cbWhenDone) {\n  var cbDoneWithOne = _.after(items.length, cbWhenDone);\n  _.each(items, function(item) {\n    doSomethingAsync(item, cbDoneWithOne);\n  });\n}\n```\n\nAre there any use cases that this change will break?\n\nAnother possible solution would be for yuchi and I to discover https://github.com/caolan/async or some similar library that solves these async use cases properly.  (I just discovered it while searching issue history on this and found #114)\n\n(if someone could point me to instructions as to how to attach code properly to an existing issue, please let me know... sorry)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f04c6bf779b288cf7a2bcd68840d28fb253c3438 into 6804754cf428b0b2952c0cf20e29f5a3ba38cf07"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09373a21fa1e1f1ab0ca",
    "number": 365,
    "body": "This is also a problem with _.initial(), but I didn't fix that.\n\n```\n_.initial([1,2,3], 4)\n[1, 2]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 05c107576b0bf9ce8e0bdb4433987f70e7e82aa3 into 51b8293ceed3e2db6e81f927e1f68f0ecdccae30"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09383a21fa1e1f1ab0cb",
    "number": 363,
    "body": "any is broken for browsers without Array.prototype.some . It uses the bitwise or operator instead of the logical or operator, which doesn't do what we want for strings.\n\n0|\"hi\" returns 0\n0||\"hi\" returns \"hi\"\n\nI also added two test cases to this pull request.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5d21f2f6019341fbd2aa330312005b6ed4aac640 into f29785a0b7871ddbc6dd86da233ae9031d57c857"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09393a21fa1e1f1ab0cc",
    "number": 362,
    "body": "short circuit evaluation added to return for _.pluck\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09393a21fa1e1f1ab0cd",
    "number": 361,
    "body": "IE7 fails on _.pluck with jagged data.  Added a conditional so it could skip past the undefineds.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e093a3a21fa1e1f1ab0ce",
    "number": 358,
    "body": "Returns all indexes of the element in the array. I made a [blog post](http://wowmotty.blogspot.com/2011/10/get-all-indexof-from-array.html) and a [jsFiddle demo](http://jsfiddle.net/Mottie/NneeH/2/embedded/result/) without using any library, but I thought it would be a nice addition to underscore :)\n\nUse it as follows:\n\n``` javascript\nvar t = [\"red\",\"green\",\"blue\",\"red\",\"yellow\",\"blue\",\"green\",\"purple\",\"red\"];\n_.allIndexOf( t, 'red'); // result [ 0,3,8 ]\n\nvar t = [0,1,2,3,4,5,6,7,4,2,6,7,11,12,4,7];\n_.allIndexOf( t, \"4\" ); // result [ -1 ]\n_.allIndexOf( t, 4 ); // result [ 4,8,14 ]\n```\n\nI made a [string version](http://wowmotty.blogspot.com/2011/10/get-all-indexof-search-string.html) of allIndexOf, but I wasn't sure if it would fit in this library. If you think it would also be a nice addition, I would be happy to add that as well.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e093b3a21fa1e1f1ab0cf",
    "number": 357,
    "body": "From comments on issue #355\n\n(function(){...}).**call(this)**;\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aa916b8cfe565dc206d85c4cb74fbb6c499067a7 into ba96d168ec08436d01a97871bb7d2fcaefe79186"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e093c3a21fa1e1f1ab0d0",
    "number": 356,
    "body": "From comments on issue #355\n\n(function(){...}).**call(this)**;\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e093d3a21fa1e1f1ab0d1",
    "number": 353,
    "body": "No if statement is needed.  Just return the result of the comparison.\n",
    "head_branch": "style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 81bad47bc0067728a9f0014436ab3919578b3e83 into b5a058ba3929f646010f1d945dc4d06f1ce327f2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e093e3a21fa1e1f1ab0d2",
    "number": 352,
    "body": "a key value function that takes in an object and returns [[key,value]...] list.\nthis is useful for dealing with groupBy and any other situation where toArray()'s removal of keys is problematic.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e093f3a21fa1e1f1ab0d3",
    "number": 351,
    "body": "These changes are likely to be controversial, but I thought they would merit some discussion now that #321 has been merged...\n- Objects with different `[[Class]]` names are no longer equivalent.\n- String, number, and boolean primitives and their corresponding wrappers (e.g., `\"5\"` and `new String(\"5\")`) are now equivalent.\n- Arrays are now recursively compared by their numeric properties only. All non-numeric properties are ignored.\n",
    "head_branch": "eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge efd29e12cdf9208f8ee59ed67b67efc38633d71b into 75cda30f39505c2db8973e48efaf76e1c1fbad4f"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09403a21fa1e1f1ab0d4",
    "number": 348,
    "body": "The method requires access to `_.escape()`, but if you minify the code and call `noConflict()` (or wrap the entire underscore library in a closure, as in my case), `_` ceases to be available and you get a _\"_ is undefined\"_ error trying to call `_.escape()`.\n\nThis fixes it. Tested and confirmed. Easy peasy :)\n\nPS sorry for the crap markdown - new to this.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ad65e8cb03a9191203cd280290c13b49ebcd86c9 into 29f4478a86c0dfcdb92ef0ef76e1fc19f18f293d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09413a21fa1e1f1ab0d5",
    "number": 344,
    "body": "It doesn't have to be this, but something better than what is there currently would be nice.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4d6e2c6ed4b3b5c91d4cc4170f67e71dc948ae13 into 00cd88cfa64cb81fac1a383842c172b7c180d783"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09423a21fa1e1f1ab0d6",
    "number": 338,
    "body": "This issue has come up before, in Issue #287. This pull request is different in these two aspects:\n- The patch itself is different, doing it optionally as part of the global registration branch.\n- I can provide more context on why this is useful to do.\n## Patch\n\nIt is done as part of the \"set global\" branch, and it does not interfere with that branch, just optionally calls define if it is available. So this should not cause issues with code that still wants to use underscore as a global even when an AMD loader is on the page.\n## Context\n\nIn the previous pull/issue there were concerns that a global define not being part of too many useful JS runtimes.\n\ndefine() is part of the AMD API which is being adopted by a few toolkits like Dojo, MooTools and EmbedJS. jQuery 1.7 will include a very similar opt-in define() call as specified in this patch. define()-based code can run in Node via the requirejs package, and define() can be used in jetpack/add-on SDK add-ons for Firefox. Firebug 1.8+ uses define().\n\n[More reasoning and context for AMD](http://requirejs.org/docs/whyamd.html).\n",
    "head_branch": "optamd",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6241343b33959ced28eb7744f85168ef9106c544 into 3587febd8e45aa53a8eeeae61f5e04899031dfb3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09433a21fa1e1f1ab0d7",
    "number": 337,
    "body": "As discussed in e79586515c5f635650afc32976826e01463dcd1d...\n",
    "head_branch": "sparse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09433a21fa1e1f1ab0d8",
    "number": 335,
    "body": "Add support for CommonJS implementations that do not support modules.exports. \n\nIn its current state we cannot load underscore as a module in Titanium since we do not support the `module.exports` object. Adding `_` to the standard `exports` object would expose underscore in a similar modular fashion, and could be used in our apps like this:\n\n`var _ = require('underscore')._;`\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09443a21fa1e1f1ab0d9",
    "number": 334,
    "body": "",
    "head_branch": "gh-pages-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2085963d190b7d69331a99fb25a93d31d002bd4c into 407b6b4916aed55dde4720190a59b170afccd5ee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09453a21fa1e1f1ab0da",
    "number": 333,
    "body": "Added 'use strict' and moved this as an argument (because with 'use strict', this isn't the global object anymore).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09463a21fa1e1f1ab0db",
    "number": 332,
    "body": "Replaced isWhatever tests by toString.call(whatever) === \"[object Whatever]\" when possible.\n\nIt still does pass all the tests and is most likely what users want. When you check for that, you want to know if some methods are available so you don't care if it is an \"object\" or a \"literal\" since it'll have the same properties. But that was also the case with the previous version. The new thing is that now, you can assume it has _all_ the methods. It would be possible to do this too with previous version by checking for all methods but it would make tests very long and inefficient.\n\nI removed every check for a special value since all these types can have an \"infinite\" number of different values and checking for a particular one isn't really a good idea in the general case, except for booleans that have only two values (in their most used form: literals) so checking for them might might still improve performance (so I didn't remove that test).\nI think the tests in booleans could be rewritten like that:\nreturn !!boolean === boolean but I don't know if it is in fact more efficient or not.\n\nI tried to do the same with arguments but it fails in IE 6 at least.\nI really feel like checking for a callee property isn't the right way of doing it... but I can't find any other :/\n\nThere is also one thing I wondered: Whether isNumber should call isNaN to check for NaN and since it gives better performance, I assumed it shouldn't. If you have some kind of convention on that, please let me know.\n\nI'd have also changed isElement if I could but I doubt it behaves the same everywhere and don't really know how it does behave so I didn't.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09473a21fa1e1f1ab0dc",
    "number": 330,
    "body": "I took the work we've been doing on an optimal memoization routine in [1][2] and integrated it with underscore to offer an implementation which is both:\n1. Significantly more performant than the current version\n2. Supports more cases likely to be used in production\n3. Passes the test suite tests for the old memoizer\n\nThe implementation in [2] comes with it's own tests in that repo, however what you're probably more interested in looking at are the performance figures. Here's a jsPerf test (others are available) which demonstrates the improvements in performance from the existing implementation when compared to this one:\n\nhttp://jsperf.com/comparison-of-memoization-implementations/12\n\nThe work here has gone through multiple rounds of further optimization by @mathias, @dmitrybaranovskiy, @JamieMason and others and is currently the fastest (thus benchmarked) memoizer we're currently aware of (as you'll see in the tests, we also compare against other implementations by John Hann, Thomas Fuchs etc).\n\nThe only real difference between the current approach and mine/ours is that the optional hash function is dropped. I've thoroughly reviewed use of memoization in JS projects out there at the moment and I haven't seen a great number of people actually rely on such optional functions, they just want the main memoizer itself.\n\nIt would be great if we could get this in Underscore, but definitely open to thoughts on whether it's worth including.\n\nNotes:\n\nThe new memoizer has dependencies on JSON support being natively available [4]. I think this is _okay_, but we're happy to spend more time on support issues if needed. I'm currently looking at putting together a compact stringify method that could be substituted to resolve any compat issues for a future update.\n\nYou may also ask whether the perf test is a fair comparison of access/usage times. We've also separately benchmarked these in the earlier stages of development with the newer implementation outperforming the others there too. Happy to create another test to demonstrate if needed.\n\nThanks!\n\nRefs: \n\n[1] http://addyosmani.com/blog/faster-javascript-memoization/\n[2] https://github.com/addyosmani/memoize.js\n[3] http://jsperf.com/comparison-of-memoization-implementations/12\n[4] http://caniuse.com/json (browser support levels for JSON)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09483a21fa1e1f1ab0dd",
    "number": 328,
    "body": "Returns a function that pushes to its arguments the next function and \nrepeats this technique recursively until no more functions are left to compose.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09493a21fa1e1f1ab0de",
    "number": 327,
    "body": "Returns a function that pushes to its arguments the next function and \nrepeats this technique recursively until no more functions are left to compose.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e094a3a21fa1e1f1ab0df",
    "number": 326,
    "body": "Originally: https://github.com/documentcloud/underscore/pull/323\n",
    "head_branch": "is_equal_different_types_take2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 69bb2e03fab1dae907a64b275204074e20f165f3 into 0ed3b65df163381f7d14184f399799985b77bcb0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e094b3a21fa1e1f1ab0e0",
    "number": 325,
    "body": "I've now fixed my reimplementation of _.intersection to handle any number of arrays in the input. From master branch to my intersection branch, performance is improved from 212 and 2 ops/sec (2 params and 5 params respectively) to 22025 and 912 ops/sec. Furthermore, this pull request also includes a micro optimization that increases performance to 23545 and 955 ops/sec (6.9% and 4.7% gain respectively). Chrome 14.0.835.187 Windows 7.\n",
    "head_branch": "intersection-micro",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e094c3a21fa1e1f1ab0e1",
    "number": 324,
    "body": "Like `_.tail` returns always an array.\nTests are included, and passed (obviously).\n",
    "head_branch": "feature-init",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dcda142655619b92ba2f3cc8b904d473ad426e29 into 348c93515cf56263828c683ebab055e6c800b63b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e094c3a21fa1e1f1ab0e2",
    "number": 323,
    "body": "Unfortunately, the latest version of _.isEqual is still broken for me. I've updated my tests and included a patch.\n",
    "head_branch": "is_equal_different_types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e094d3a21fa1e1f1ab0e3",
    "number": 322,
    "body": "to be used when determining if it is safe to call an object, an optional callback for example\n",
    "head_branch": "isCallable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e094e3a21fa1e1f1ab0e4",
    "number": 321,
    "body": "The current tests allow for too many false positives for my liking. This also changes `_.isNumber(NaN)` from `false` to `true`. It really should have been `true` in the first place.\n",
    "head_branch": "betterIsX",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 42e04ecc7a4c7cef44ce42076141c38dacdce6ab into 38b1fe0dd385df94016b4275743d8be7a69891b1"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e094f3a21fa1e1f1ab0e5",
    "number": 320,
    "body": "",
    "head_branch": "class_of",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09503a21fa1e1f1ab0e6",
    "number": 317,
    "body": "Adds similar to ruby method delete, that removes given key from the hash and returns it's value.\nMethod is really simple (only 3 lines of code).\nTests provided.\n",
    "head_branch": "object-delete",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09513a21fa1e1f1ab0e7",
    "number": 315,
    "body": "Added _.remove function. Included dependency to _.compare from a different proposal.\n",
    "head_branch": "remove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09523a21fa1e1f1ab0e8",
    "number": 314,
    "body": "This wraps the conventions of destroy(), clone(), retain(), release().\n",
    "head_branch": "own_disown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09533a21fa1e1f1ab0e9",
    "number": 313,
    "body": "Uses the (configurable) conventions of a _type attribute to find a deserialize function called parseJSON (like the Javascript build-in Date class)\n",
    "head_branch": "json_serialization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09543a21fa1e1f1ab0ea",
    "number": 312,
    "body": "I wrote a longer, more efficient implementation of intersection. On my laptop, it improves performance (ops/sec) 100-fold from 78 ops/sec to 7977 ops/sec. I wrote another speed test that takes the intersection of 5 arrays rather than 2, and performance on this one has improved from 1 ops/sec to 218 ops/sec.\n",
    "head_branch": "intersection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09553a21fa1e1f1ab0eb",
    "number": 309,
    "body": "There was a previous pull request here, which explained why difference is not symmetric. The functionality hasn't changed though...\n\nhttps://github.com/documentcloud/underscore/pull/277\n",
    "head_branch": "symmetric_difference",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09553a21fa1e1f1ab0ec",
    "number": 308,
    "body": "_.toType and _.conversionPath to introduce a convention for non-native conversions using is{SomeType}(), to{SomeType}().\n",
    "head_branch": "to_type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09563a21fa1e1f1ab0ed",
    "number": 307,
    "body": "Class hierarchy super class helpers. Useful for dynamically adapting a class hierarchy.\nNote: this implementation relies on keypath functionality (although keypath functions can be replace if needed)\n",
    "head_branch": "super_helpers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09573a21fa1e1f1ab0ee",
    "number": 306,
    "body": "_.pluck proposal: allow the caller to also optionally remove the property.\n",
    "head_branch": "pluck_with_remove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09583a21fa1e1f1ab0ef",
    "number": 305,
    "body": "Dot-delimited array of keys path to a property. Useful when a simple key isn't enough.\n",
    "head_branch": "keypath",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09593a21fa1e1f1ab0f0",
    "number": 304,
    "body": "_.isEqual proposal: allow for _.isEqual to use the isEqual method on an object if it exists even if the object is a different type. I used this for comparing a Javascript string with a special localized string that contained an identifer in addition to the string. This is generally useful if values are wrapped in classes.\n",
    "head_branch": "is_equal_different_types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e095a3a21fa1e1f1ab0f1",
    "number": 303,
    "body": "",
    "head_branch": "get_value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e095b3a21fa1e1f1ab0f2",
    "number": 302,
    "body": "",
    "head_branch": "function_helpers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e095c3a21fa1e1f1ab0f3",
    "number": 301,
    "body": "",
    "head_branch": "find_index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e095d3a21fa1e1f1ab0f4",
    "number": 300,
    "body": "",
    "head_branch": "copy_properties",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e095e3a21fa1e1f1ab0f5",
    "number": 299,
    "body": "",
    "head_branch": "compare",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e095e3a21fa1e1f1ab0f6",
    "number": 298,
    "body": "",
    "head_branch": "clone_to_depth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e095f3a21fa1e1f1ab0f7",
    "number": 296,
    "body": "I'm not very experienced with GitHub so please take that in account with this pull request.\n\nI needed a way to do a comparison with a string containing a name and number with a custom compare method including localeCompare. By abstracting out and allowing the selection of the compare method, it gives the flexibility in underscore to do this. \n\nThe constants for _.COMPARE_EQUAL, etc are not necessary but I think make the code more readable.\n\nLet me know what you think. I have quite a few other pull requests in Underscore and Backbone waiting in the wings and I'm starting small ;-)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09603a21fa1e1f1ab0f8",
    "number": 292,
    "body": "A timeout function. \nExample:\n\n```\nsetTimeout(\n  _.timeout(\n    function () {\n      console.log('done');\n    },\n    function () {\n      console.log('ouch');\n    },\n   100\n  )\n, 200);\n```\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09613a21fa1e1f1ab0f9",
    "number": 289,
    "body": "First you return true if they are === then you return false if the types don't match then you check with ==.\n\nThe doc for == says \n\"If the two operands are not of the same type, JavaScript converts the operands then applies strict comparison.\"\nSo I dont think you gain anything from doing the == comparison after testing types.\n\nCheers, \nTom\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09623a21fa1e1f1ab0fa",
    "number": 287,
    "body": "Added support for Asynchronous Module Definition (AMD).  See http://github.com/amdjs/amdjs-api/wiki/AMD for reference.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09633a21fa1e1f1ab0fb",
    "number": 285,
    "body": "This makes _.last() behave the same as _.first().  Passing an optional\nsecond argument n will return the last n elements of the array.\n",
    "head_branch": "add_index_argument_to_last",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e449b00a26d0bfc29c0be42f1ea98c7d8f5493b9 into 7d0e4169a9453da3c664f82327840a861244c574"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09643a21fa1e1f1ab0fc",
    "number": 284,
    "body": "Example:\n\n``` javascript\nvar stooges = [{name : 'moe', address: {city: 'bensonhurst'}}, {name : 'larry', address: {city: 'philadelphia'}}];\n_.pluck(stooges, ['address', 'city']);\n=> [\"bensonhurst\", \"philadelphia\"]\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09653a21fa1e1f1ab0fd",
    "number": 282,
    "body": "This commit fixes #280 if decided it needs to be fixed.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09663a21fa1e1f1ab0fe",
    "number": 281,
    "body": "New method `_.shuffle` with test case and description in index.html.\n\n(original issue #71)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9996ecae5c69eb4ba153edb271ca44a039c9f159 into d79cd48bc507e2599d722ba22b78690d4114b0c5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09673a21fa1e1f1ab0ff",
    "number": 279,
    "body": "I recently had a need to flip array indicies, and thought it seemed a simple enough thing that I'd likely find it in backbone - and I didn't. I wrote a quick function, attempted to do so in as similar fashion as the rest of backbone, and tested it with the following:\n\nturning:\n[[1, \"a\"], [2, \"b\"], [3, \"c\"]]\n\ninto:\n[[1,2,3], [\"a\", \"b\", \"c\"]]\n\nA more visual example, flipping it on its side (whilst maintaining original order)\n[1,A]\n[2,B]\n[3,C]\n\n[1,2,3]\n[A,B,C]\n\nHooray, now I can smash arrays together. It's not quite like zip, which didn't allow me to send in an array of arrays. Useful?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09683a21fa1e1f1ab100",
    "number": 278,
    "body": "I've added a zipWith function that takes a function and an arbitrary number of arrays. It behaves identically to the zipWith function in Haskell, but for the fact that it can zip more than two arrays. \n\nIt behaves slightly different from the _.zip function in that if arrays of multiple lengths are given, the result's length is the same as that of the shortest array given. The assumption here is that the function passed to it doesn't accept an arbitrary number of arguments.\n\nSee also: http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:zipWith\n( Since this can take an arbitrary number of arrays, it replaces Haskell's zipWith and zipWith3 functions. )\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09683a21fa1e1f1ab101",
    "number": 277,
    "body": "I feel like the current \"difference\" method is counterintuitive, because I would expect a method call \"difference\" to show elements which are in array one and not in array two **and** vice versa.\n\nThe current \"difference\" should in stead be called subtract, because the elements of the second array are removed from the first (if present).\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09693a21fa1e1f1ab102",
    "number": 275,
    "body": "Javascript has the little know ability to provide getter and setter methods that look like a property.\n\n```\nvar object = {\n  set full_name(value) {\n    var split = value.split(\" \");\n    this.first_name = split[0];\n    this.last_name = split[1];\n  },\n  get full_name() {\n    return this.first_name + \" \" + this.last_name;\n  }\n}\n\nobject.full_name = \"John Doe\";\nobject.full_name;              // \"John Doe\"\nobject.first_name;             // \"John\"\n```\n\nThis tested change makes sure that any getters and setters are copied over to the destination object as well.\n\nMore info about these getters and setters can be found at John Resig's post:\n\nhttp://ejohn.org/blog/javascript-getters-and-setters/\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e096a3a21fa1e1f1ab103",
    "number": 274,
    "body": "some evaluate blocks like begining of 'for' might not have semicolon at the end so error \"Unexpected identifier\" occurs\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e096b3a21fa1e1f1ab104",
    "number": 270,
    "body": "I added a google closure compiler [externs](http://code.google.com/closure/compiler/docs/api-tutorial3.html) definition, using this definition is possible to compile with the flag ADVANCED_OPTIMIZATIONS libraries that use underscore.js\n\nExterns definition was tested by compiling the standard underscore.js tests with the jquery externs and the provided underscore externs.\n\nFew tests needed some changes in order to pass, I kept test changes in a single commit as I don't think it's a good idea to change the tests only for this purpose.\n\nChanges in the tests are mainly related to [property naming](http://code.google.com/closure/compiler/docs/api-tutorial3.html#propnames)\n\n6 tests still don't pass one because of a jquery extern issue and the others would need to be rewritten to let them compile properly.\n\nOverall the extern definition is in a good functional state and can be used as it is.\n",
    "head_branch": "google_closure_externs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e096c3a21fa1e1f1ab105",
    "number": 269,
    "body": "Adds `_.toType()` method, borrowed from Angus Croll's article on \"Fixing the JavaScript typeof operator\" (http://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/). Includes some tests, too.\n\nNormally I only ever use `typeof whatever !== \"undefined\"` since as Angus points out, typeof is pretty useless for many other cases, for example:\n\n``` javascript\ntypeof null; // \"object\"\ntypeof {a: 4}; // \"object\"\ntypeof [1, 2, 3]; // \"object\"\n(function() { return typeof arguments })(); // \"object\"\ntypeof new ReferenceError; // \"object\"\ntypeof new Date; // \"object\"\ntypeof /a-z/; // \"object\"\ntypeof Math; // \"object\"\ntypeof JSON; // \"object\"\ntypeof new Number(4); // \"object\"\ntypeof new String(\"abc\"); // \"object\"\ntypeof new Boolean(true); // \"object\"\n```\n\nvs: \n\n``` javascript\n_.toType({a: 4}); // \"Object\"\n_.toType([1, 2, 3]); // \"Array\"\n(function() { return _.toType(arguments) })(); // \"Arguments\"\n_.toType(new ReferenceError); // \"Error\"\n_.toType(new Date); // \"Date\"\n_.toType(/a-z/); // \"RegExp\"\n_.toType(Math); // \"Math\"\n_.toType(JSON); // \"JSON\"\n_.toType(new Number(4)); // \"Number\"\n_.toType(new String(\"abc\")); // \"String\"\n_.toType(new Boolean(true)); // \"Boolean\"\n```\n\nNB. It might make more sense to return types as lowercase in some scenarios (for example \"Undefined\" or \"Null\", or where the difference between \"string\" and \"String\" might cause issues) - not sure really. Perhaps the function could return lowercase by default, and add an option eg. `preserveCase = preserveCase || false`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e096d3a21fa1e1f1ab106",
    "number": 267,
    "body": "Could the Underscore.js docs link to Underscore.php as is done with Underscore.lua?\n\nUnderscore.php contains the functions applicable to both languages, plus matching unit tests. I keep Underscore.php up to date with Underscore.js.\n\nThanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6cf647505fba5b0dc182d41cba1342cefe3acd35 into 03b341d0635b86124413a631c40e57d3b350cbeb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e096e3a21fa1e1f1ab107",
    "number": 266,
    "body": "Returns a function, that, when invoked, will trigger immediately and then not trigger until N milliseconds have passed no matter how often you call it. Useful for rate limiting noisy events that need immediate invocation such as user input.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e096f3a21fa1e1f1ab108",
    "number": 261,
    "body": "For node.js users, you have to cast `fs.readFile()`'s return to a String before passing it into a template.\n\nConsidering this function only expects a `String`, there is no harm in casting it straight into a `String`. \n\nFor example, in node.js I often use:\n\n```\n_.template(String(fs.readFileSync(file)));\n```\n\nvs \n\n```\n_.template(fs.readFileSync(file));\n```\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09703a21fa1e1f1ab109",
    "number": 254,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09713a21fa1e1f1ab10a",
    "number": 253,
    "body": "To prevent XSS and to display values containing special characters properly, it would be nice to have a short syntax to automatically escape values.\n\nThis commit adds a new `<%== ... %>` syntax that uses a new `_.escape()` function (taken from Backbone.js' escapeHTML). I'm not quite sure about that syntax, but I couldn't think of anything nicer.\n\nI actually think its better to escape values by default (with `<%= ... %>`), as it should be done 90% of the time, and add some other syntax for adding raw HTML - but it'll break backward compatibility. \n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 34f10467b3f6c476da14bf293359f58089b2067e into ac191a28a54302613d706af1f04236af8f195e5b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09713a21fa1e1f1ab10b",
    "number": 251,
    "body": "Added `_.reverseThrottle` to execute func directly and **then** create the delay time. Modified `_.throttle` to `_.throttle(func, wait[, immediate[, trailing]])` so `immediate` is used to alias throttle to reverseThrottle.\n\nCode is annotated, documentation has been written and test are there where they should be.\n\nAfter i wrote the code for my personal needs I found #170 and #91, so I adapted the code to be _BenAlman's-plugin-users_-friendly.\n\nUse cases are endless. Personally I use both reverseThrottle (with and without trailing) and throttle, and is a big hole in underscore feature set.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09723a21fa1e1f1ab10c",
    "number": 249,
    "body": "Hi,\ni've added an optional third parameter to pluck() for easy retrieval of a specific array element. This is a common use scenario i've encountered a few times: you have an array with objects and you want a specific object where an object has a certain key with a certain value. In those cases you usually need an array instead of an object because the order needs to remain the same.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09733a21fa1e1f1ab10d",
    "number": 245,
    "body": "Using a while loop is faster then using a for loop.  In fact the while loop is even faster then the native implementation, but I didn't propose in changing that.  You could probably avoid introducing a new variable if you did some trickery.\n\nYou can run the speed tests here, I found the results shocking even on a large array. :D\n\nhttp://jsperf.com/js-for-loop-vs-array-indexof/10\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 47fb3d7f9c2e9e743ce05fb073105e15ca15bfc3 into 7eb7b08f7127d8fd4239312ae7c23b675484e8d3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09743a21fa1e1f1ab10e",
    "number": 244,
    "body": "As per the discussion in issue #240, I've added support for comparing cyclic structures to `_.isEqual`. All the unit tests, including my nine additions, pass.\n",
    "head_branch": "isequal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7760e6aa528fc60a66def3ec66e987b0b38b0f02 into 610b3471742db0ee117e5d6117875277cc396aba"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09753a21fa1e1f1ab10f",
    "number": 235,
    "body": "I don't have Rake, Docco or Closure::Compiler to run the makefile, but I've included an update to underscore.js to work with the HTML5 WebSQL result sets with _.each and all of it's derivative functions. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09763a21fa1e1f1ab110",
    "number": 233,
    "body": "In combination with backbone this makes coll.toArray() return an array\ninstead of just returning coll.models, enabling\ncoll.remove(coll.toArray()) whithout failing half way through.\n\ntest included and passing\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9ab3ac44bbb39d21bb0ec1334fe9901e5b3f42bc into 96dbdaf9295f5598b631411d1553b04b43594152"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09773a21fa1e1f1ab111",
    "number": 232,
    "body": "Testing _.delay and verifying the behavior with _.delay makes it some kind of axiom. It asserts that _.delay's time counting will never go wrong. In fact, it could be:\n- Modify _.delay's source code and change the wait time from `wait` to `wait * 1000`\n- Run the unit test again and you will find that\n  - _.delay test isn't broken\n  - _.throttle and _.debounce tests are broken for no obvious reason\n\nUsing setTimeout to verify _.delay's behavior puts setTimeout in the axiom role. If the browser doesn't implement it right, there's nothing we can do about it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b949d0345f11f67310cc06ff72a926f7814942a3 into cf6cc16f4308a7055bff8140f3fe33518c01ffd7"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09783a21fa1e1f1ab112",
    "number": 228,
    "body": "Fixed isEqual if second object has isEqual implemented and added isObject method.\n\nFound that isEqual doesn’t work properly if second argument implements isEqual, but first not. I guess, order shouldn’t matter.\n\nAlso added useful isObject method, example:\n    function addProperty(obj) {\n      if (_.isObject(obj)) obj.property = 1;\n      console.log(obj.property); // guaranteed to be 1\n    }\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 42487bf47dff4b0732977af2c6297b67ecec70af into dd31d36ec270203ef5d5007fdabd8510d3874fbb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09793a21fa1e1f1ab113",
    "number": 226,
    "body": "Please check out the following changes. Looks like this was just an over sight as an iterator doesn't make much sense when you want to sort something?\n\nAll you really need to sort a list is a function that can tell you the relationship between a and b for an arbitrary a and b. This let's you compare a list of objects for instance and is how I'm using it and its standard practice in a number of languages, including javascript:\n\nhttp://www.w3schools.com/jsref/jsref_sort.asp\n\nPlease let me know if you'd like me to write a test. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e097a3a21fa1e1f1ab114",
    "number": 225,
    "body": "To subtract one array from another using without, you'll basically have to do:\n\n```\n_.without.apply(null, [list1].concat(list2));\n```\n\nSubtract is inspired by the operator overloaded - (minus) in ruby Enumerable.\n\n```\n_(list1).subtract(list2);\n```\n\nI also built docs and .min using the rake file, but there seems to be some whitespace issues, so I left them out of the commit. Let me know if you want them added.\n\nThanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e097b3a21fa1e1f1ab115",
    "number": 221,
    "body": "I've wanted JavaScript's `delete` to work like the Ruby version (returning the deleted value in one pass) so I thought _ would be a good fit:\n\n```\nfunction getUser(options) {\n  options.url = \"/users/\" + _.delete(options, 'id');\n  $.ajax(options);\n}\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e097c3a21fa1e1f1ab116",
    "number": 219,
    "body": "I had previously maintained my own tool-belt and am now abandoning it in favor of yours.  One of the nice interfaces to my version of each that I had was a way that would take in strings without needing an explicit split.  For instance, you could do _.each(\"one two three\", function()) and it would be smart enough to break that up for you.\n\nI was able to add this functionality to your each implementation by using a try/catch block and not introduce any more logic to the if/else statement semantics.  I ran your performance tests with and without the patch on a number of platforms and made the results available here: http://qaa.ath.cx/each-with-strings.txt ... I recorded the jquery each result in a hope to show a reference point between the two test runs included for each platform.\n",
    "head_branch": "each-with-strings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e097c3a21fa1e1f1ab117",
    "number": 215,
    "body": "The old template method returns complied function or rendered string. I think it's not consistent. And change the global template settings is not a good idea. In my project, I need comply template with localization resources first, then render it with data, so I can't use the same delimiters.\nI added the \"compile\" and \"render\" methods, and modified the \"template\" method for compatible with legacy calls.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e097d3a21fa1e1f1ab118",
    "number": 212,
    "body": "Change the global template settings isn't a good idea. If one project need {{}} and <%%> both, it will cost effort to maintain it.\nFor example:\n\n<ul>\n<% _.each(workitems, function (item) { %>\n    <li>\n        <a href=\"javascript:;\">\n            {{view}}\n        </a>\n        {{username}}: <%= item.name %>\n        <%= item.ftd %>\n        <%= item.text %>\n    </li>\n<% });%>\n</ul>\n\nThe {{}} used for localization, the <%%> used for data render. \n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e097e3a21fa1e1f1ab119",
    "number": 210,
    "body": "I've replaced `reduce` and `reduceRight` with my implementations from [Maddy](http://github.com/kitgoncharov/maddy). This should fix issues #208 and #209.\n",
    "head_branch": "reduce",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e097f3a21fa1e1f1ab11a",
    "number": 203,
    "body": "Many libs don't compile under Closure Compilers [Advanced Optimizations](http://code.google.com/closure/compiler/docs/api-tutorial3.html) flag simply because they don't export their utils as an extern. See the linked docs for the happs. Long story short, using subscript notation is what makes it all work.\n\n``` js\nroot['_'] = _;\n```\n\nKind of silly but makes a huge difference.\n",
    "head_branch": "latest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 72c5558471000615d17a9e744684ac20453ab77e into 1331d814f9f27e45feefd8ca4f5ca4fd09391160"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09803a21fa1e1f1ab11b",
    "number": 198,
    "body": "Hashmap keys are not necessarily ordered. groupBy test may fail if the expected order is not correct.\nFixing this by checking if the keys are present in the hash so the order is not deterministic.\n",
    "head_branch": "underscore.groupBytest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 899000c21771120933e914da14ab8b2279a0d424 into 961f554767a184658060ebea5e4a959d07705284"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09813a21fa1e1f1ab11c",
    "number": 197,
    "body": "See issue #177 for details.\n",
    "head_branch": "underscore.any",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 40af1652ebb1b07ae1dc7e754e9872b1db5a5a5f into 7573ac775110f333a344d41f3d6a485c90207261"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09823a21fa1e1f1ab11d",
    "number": 196,
    "body": "See issue [#177]([https://github.com/documentcloud/underscore/issues/177) for more details.\n",
    "head_branch": "underscore.any",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09833a21fa1e1f1ab11e",
    "number": 195,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1681d250635d099fe2d7d88e275322eecb0699af into c174663ea3b7d18d9df4f94dfb69eddc35686522"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09843a21fa1e1f1ab11f",
    "number": 194,
    "body": "Hi,\n\nI needed to be able to pass in an iterator to `_.uniq` like in ruby's [Array.uniq](http://www.ruby-doc.org/core/classes/Array.html#M000276) to do things like:\n\n```\n_.uniq([{name:'moe'}, {name:'curly'}, {name:'larry'}, {name:'curly'}], false, function (value) { return value.name; })\n=>[{name:'moe'}, {name:'curly'}, {name:'larry'}]\n```\n\nAdded test and updated docs too, any feedback welcome.\n\nCheers!\nAlfredo Mesén\n",
    "head_branch": "unique",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b9307163b974991885b50e3ac09b54bd00a06153 into f099038a9d85116ea71c5c8914eb7eaa21a56e80"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09843a21fa1e1f1ab120",
    "number": 193,
    "body": "Hi,\n\nPlease see issue 186. I'm not sure how to update the docs, but I don't mind doing that as well.  I'm also open to style changes. I think this change makes sortedIndex much more generic. I'm not sure how one would use the iterator otherwise.\n\nCheers,\nGeoff\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09853a21fa1e1f1ab121",
    "number": 192,
    "body": "As noted in issue #189\n",
    "head_branch": "docs-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge efa717b09ef63f4ed5ccf18de9d0ef44aa947be1 into 057da5bc82f823562f7642f19bd8d2dce58c2907"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09863a21fa1e1f1ab122",
    "number": 191,
    "body": "I made some simple changes to underscore to support object collections better in the enumeration functions.  I did this because I'm using object collections rather than arrays in my app to take advantage of getters/setters support which array iterators don't currently handle.\n\nI'm a bit of a noob to js so I wasn't planning on sending a pull request, but given that jquery 1.6 has this theme for their update, I figure it's worth a look for underscore, even if you just take the concept and rewrite the changes I made.\n\nI'd also appreciate feedback on my changes so I can improve my javascript skills.  Thanks.\n- jcb\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09873a21fa1e1f1ab123",
    "number": 185,
    "body": "I spent too long not realizing _.sortBy is not in-place sort.  Adding a little note to the documentation for other poor souls.\n",
    "head_branch": "sortby-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09883a21fa1e1f1ab124",
    "number": 179,
    "body": "``` javascript\n_.withBreak(function ($break) {\n  //some code\n  $break(<value>) // will make _.withBreak return that value\n  //some other code\n});\n```\n\nit's almost like call/cc, but of course without full continuations\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09893a21fa1e1f1ab125",
    "number": 178,
    "body": "The current tests depend on jQuery owning the $ variable. Luckily, it was easy to take that out.\nI did this so tests can be run with Prototype.js or ender-js by inserting it into test.html.\n\nAfter you accept this pull request, I will post some conflicts that I found Prototype.js to have with underscore's methods.\n\nI'm glad to help fixing them to make underscore really framework agnostic!\n",
    "head_branch": "framework_agnostic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e098a3a21fa1e1f1ab126",
    "number": 176,
    "body": "Hi,\nI'm missing an items function like there is one in python, so I added one (with tests).\nseb\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e098b3a21fa1e1f1ab127",
    "number": 174,
    "body": "A common idom (for me, at least) is setting up a callback to fire after something has happened a certain number of times. For example, \"After you've preloaded all my thumbnail images, display a gallery\".\n\nWith, _.barrier, code for this would be:\n\n```\nvar images = $('img.preload');\nfunction imagesLoaded() {\n  $('#gallery').show();\n}\nimages.load(_.barrier(imagesLoaded, images.length));\n```\n\nI've called it barrier because I believe this to be the async equivalent of barriers from multi-threaded programming: \"A barrier for a group of threads or processes in the source code means any thread/process must stop at this point and cannot proceed until all other threads/processes reach this barrier.\" ([Wikipedia](http://en.wikipedia.org/wiki/Barrier_%28computer_science%29))\n\nThe implementation is simple enough to be included inline:\n\n```\n_.barrier = function(func, times) {\n  return function() {\n    if (--times === 0) { return func.apply(this, arguments); }\n  };\n};\n```\n\nMy preference would normally be _.barrier(times, func) (it looks nicer in CoffeeScript when you can put the function arguments at the end), but I've done it the other way in deference to the existing underscore code.\n\nI've also included a few simple tests and regenerated underscore-min and the docs.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e098c3a21fa1e1f1ab128",
    "number": 173,
    "body": "this tiny change allows us to easily package underscore into the [Ender](https://github.com/ded/Ender.js) build system. This merge will warrant a thousand thanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e098d3a21fa1e1f1ab129",
    "number": 172,
    "body": "Added `_maybe` reference available to templates for values that may or may not exist. I found it useful for my project that has models with little-to-no schema, and thought I'd pass it on if others find it useful as well.\n\nCheck out the change to index.html and the tests for some use cases.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e098e3a21fa1e1f1ab12a",
    "number": 166,
    "body": "added counter and cycle function under utility. Added test unit and updated index.html\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e098e3a21fa1e1f1ab12b",
    "number": 165,
    "body": "This change allows underscore to have namespaces.\n\nThis lets users worry less about conflicting mixins.\n\nExample: \n\n```\n_.namespace(\"string\");\n_.string.mixin({\n  \"allCaps\": function(str) {\n    return str.toUpperCase();\n  }\n});\n_.string.allCaps(\"hello world\") // Gives us \"HELLO WORLD\"\n```\n\nAll existing tests pass as well as the new `namespace`-specific tests.\n\nThank you!\n",
    "head_branch": "namespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e098f3a21fa1e1f1ab12c",
    "number": 164,
    "body": "It would be convenient if `_.invoke()` supported passing in a function reference directly instead of just a string method name.\n\nThis is similar to passing in a function reference to `_.each()`, except you get `this` bound to the current element, you get to pass custom arguments, and it gives more flexibility beyond method names.\n\nThis was an easy (one-line) change to make, so I made it and also added a test case for it. I hope you guys find this useful as well. Awesome library, and keep up the great work!\n\nCheers,\nAseem\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09903a21fa1e1f1ab12d",
    "number": 163,
    "body": "Hello,\n\nI added a Gemfile to underscore so we can now run 'bundle install' to get the needed gems for rake to work.\n\nYours,\nTrevor\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09913a21fa1e1f1ab12e",
    "number": 158,
    "body": "I needed routines to store the indexes of array elements that pass a truth test, so I added filterIndex and findIndex (with aliases selectIndex and detectIndex, respectively).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09923a21fa1e1f1ab12f",
    "number": 155,
    "body": "My addition to underscore.js calculates the [median](http://en.wikipedia.org/wiki/Median) for an array of numbers using bitwise operations. Additionally, I have implemented testing functions.\n\nUsage:\n\n```\n_.median([1,2,3,4,5]); // 3\n_.median([9,1,3]); // 3\n_.median([2,4,6,8]); // 5\n_.median([1,2,3,4]); // 2.5\n_.median([]); // null\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09933a21fa1e1f1ab130",
    "number": 152,
    "body": "- As discussed in issue #150, `_.bind` should not bind a function to an empty object if the context is falsy.\n- `_.keys` should throw a `TypeError` for non-objects for parity with the ECMAScript 5 `Object.keys` function. See issue #149.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09943a21fa1e1f1ab131",
    "number": 151,
    "body": "I've found the following pattern reoccuring in my code:\n\n```\nfunction f() {\n  if (condition) {\n    // do work\n  } else {\n     setTimeout(f, 0);\n  }\n}\n```\n\nBasically, the function polls the condition variable until it passes and then does some work. In my codebases it is typically very effective in waiting on Flash objects to initialize their ExternalInterface, but it comes up in other scenarios as well.\n\nAnyways, I've encapsulated the pattern into an Underscore.js function called \"retry\":\n\n```\n_.retry(f, function() { return condition; }, 0);\n```\n\nUnit Test and rough documentation included in the pull request.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09953a21fa1e1f1ab132",
    "number": 144,
    "body": "Hi guys, \nI needed to be able to pass in an iterator to `_.uniq` to do things like:\n\n```\n_.uniq([{name:'moe'}, {name:'curly'}, {name:'larry'}, {name:'curly'}], false, function (value) { return value.name; })\n=>[{name:'moe'}, {name:'curly'}, {name:'larry'}]\n```\n\nI didn't see an example of a function taking more than one optional argument, I would have preferred to do this with and options hash for the `sorted` flag and the `iterator` function but didn't want to mess with the signature.\n\nAdded test and updated docs too, any feedback welcome.\n\nCheers!\nAlfredo Mesén\n\nedit: markdown backticks\n",
    "head_branch": "uniq-iterator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09963a21fa1e1f1ab133",
    "number": 141,
    "body": "",
    "head_branch": "issue95",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09973a21fa1e1f1ab134",
    "number": 140,
    "body": "See Issue #138. This is a quick fix, which I haven't tested thoroughly. It seems to work fine for my purposes.\nCommit 6948dc05 is the \"right\" one.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09983a21fa1e1f1ab135",
    "number": 139,
    "body": "Issue #138\n\nThis is a quick hack to be able to continue my real work. I haven't tested it thoroughly.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09983a21fa1e1f1ab136",
    "number": 135,
    "body": "`_.project` is so named because it resembles the `map` function (`map` would produce a mapping where `project` produces a projection). The difference is that `._project` maps onto objects. It does this by expecting a two-value array. With no iterator given, these are simply the index (or key) and the value -- this means objects stay the same, and arrays of key value pairs become objects. An iterator may transform the data and return a two-value array which become key, value.\n\nI've no particular affinity for the name (just figured it was in the same style as the others). I think it makes sense for it to neither reject nor try to transform and accept iterator results that aren't two-value arrays. Likewise, I think it should not do anything about overwriting keys.\n\nPS. Underscore is a great library. This adds just a bit more pythonic goodness.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09993a21fa1e1f1ab137",
    "number": 134,
    "body": "Hi!\n\nHelpful when one wants to use multiple syntax flavors in templates w/o need to affect global settings, which can be pain to restore if rendering is async.\n\nPlease, consider applying.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e099a3a21fa1e1f1ab138",
    "number": 133,
    "body": "Hi,\n\nI did a couple of improvements to _.times to make it more functional and less surprising.\n\n_.times now returns the results of the operations as an array, so instead of imperative\n\n```\nvar vals = [];\n _.times(3, function (i) { vals.push(i); });\n```\n\na more functional style can be used\n\n```\nvar vals = _.times(3, function (i) { return i; });\n```\n\nAdditionally, I made the callback optional so this will result the same array:\n\n```\nvar vals = _.times(3);\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e099b3a21fa1e1f1ab139",
    "number": 130,
    "body": "Will delegate to ECMA scripts native bind method if available. Added a unit test for extra coverage.\n\nTested on; \n\nPC: IE6, 7, 8 \nMac: FF 3.5, 4.0, Safari 5.0, Chrome 9.\n\nI've adhered to underscore's code conventions. However if anything is off, please feel free to change.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e099c3a21fa1e1f1ab13a",
    "number": 126,
    "body": "Please, consider applying\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e099d3a21fa1e1f1ab13b",
    "number": 122,
    "body": "It's not obvious from the docs that you can use print inside of <% ... %>.  This addresses that.\n",
    "head_branch": "template-doc-clarification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e099e3a21fa1e1f1ab13c",
    "number": 121,
    "body": "Here's a common scenario: You want to run a function just once, globally. This patch implements a `_.once` functional function to do just that.\n\nFor instance, rather than writing\n\n```\nisInitialized = false\ninitialize = ->\n  ...\n  isInitialized = true\nfunc1 = ->\n  unless isInitialized\n    initialize()\n  ...\n```\n\nand potentially putting that same `isInitialized` check in every function that depends on `initialize`, this lets you write\n\n```\ninitialize = ->\n  ...\nfunc1 = ->\n  _.once initialize\n```\n\nIf `initialize` has already been run, nothing happens. Pretty handy, right? `_.once` also accepts additional arguments, and returns the result of the function execution if it runs.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e099f3a21fa1e1f1ab13d",
    "number": 120,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a03a21fa1e1f1ab13e",
    "number": 117,
    "body": "Small fix for index.html.\n\nCorrected and clarified the documentation for _.template(). The prior example completely clobbers _.templateSettings.evaluate by innocently setting _.templateSettings.interpolate via _.templateSettings={interpolate : /.../g}\n\nThe end-result of the example is a broken _.templateSettings.evaluate as a nasty side-effect.\n",
    "head_branch": "fixTemplateSettings",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a13a21fa1e1f1ab13f",
    "number": 113,
    "body": "I intend this pull request to at least be the start of a conversation.  I'm a fan of underscore and am at the point where I'd like the ability to use the power of the library with custom iterators - in other words, I might not be holding the data in ram, or it may be coming across the wire or off of disk.\n\nHowever it may be that simply assuming .forEach will do the right thing is bad...you may be trying to specifically avoid non-native forEach implementations for other reasons.\n\nI'd be happy to name the iterator method something else and put an extra else-if clause in the each function.  Something like underscoreForEach, or just each (ruby-like)?  Thoughts?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a13a21fa1e1f1ab140",
    "number": 112,
    "body": "I've added a new optional syntax for _.bind() that you can use if your function is an attribute of your context object.\n\nInstead of:\n_.bind(this.wallop, this);\nYou can do:\n_.bind('wallop', this);\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a23a21fa1e1f1ab141",
    "number": 109,
    "body": "Hi,\n\nI know this can end up being a \"religious\" argument, but doing if() statements without brackets, etc just makes the interpreter work harder (very slightly). More importantly though, it breaks jslint. Titanium Mobile also runs javascript through JSLint before trying to compile, making this library unusable in any development environment that runs its JS through JSLint (and without having control of the output).  I left 3 jslint errors in there b/c those are just stylistic warnings. However, I fixed all the more \"serious\" JSLint problems.\n\nI was going to next tackle backbone.js :-).\n",
    "head_branch": "jslintify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a33a21fa1e1f1ab142",
    "number": 108,
    "body": "In IE, setTimeout is slightly different from window.setTimeout (you can do assignment to window.setTimeout and not to setTimeout). By moving to window.setTimeout, it allows me reassign setTimeout to a function that wraps every setTimeout call in a try/except and provides full stack traces for any error experienced.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a43a21fa1e1f1ab143",
    "number": 102,
    "body": "Updated with suggestion in issue #99\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a53a21fa1e1f1ab144",
    "number": 101,
    "body": "It is more clear now, and reduce the file size of compressed version.\n",
    "head_branch": "52f66a807c8e28ffa6faec8c2dc24dba3025adc4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a63a21fa1e1f1ab145",
    "number": 99,
    "body": "I've added _.isPlainObject(obj) to underscore. \n\nNote that in doing so, I also added _.isWindow(obj) and _.type(obj). This emulates the way jquery determines if an object is just a plain JSON object or not.\n\nIf desired, the following code could be modified to not need _.type() and _.isWindow():\n\n```\n// Must be an Object.\n// Because of IE, we also have to check the presence of the constructor property.\n// Make sure that DOM nodes and window objects don't pass through, as well\nif ( !obj || _.type(obj) !== \"object\" || obj.nodeType || _.isWindow( obj ) ) {\n  return false;\n}\n```\n\nInstead, it would require a lot of other tests, such as isNumber(), isRegExp(), isArray(), isFunction() isString(), and so forth. I wasn't sure if that was a better approach than the jquery way. Maybe it would be more \"underscore\"-like and it should be changed. Your call.\n\nI also added a test to objects.js.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a73a21fa1e1f1ab146",
    "number": 98,
    "body": "In underscore 1.1.4, a test case below will fail:\n\n```\nvar o = function(str) {\n  return str;\n};\nvar fastO = _.memoize(o);\nequals(o('toString'), 'toString', 'checks hasOwnProperty');\nequals(fastO('toString'), 'toString', 'checks hasOwnProperty');\n```\n\nI have fix the bug by changing code \"key in memo\" to \"hasOwnProperty.call(memo, key)\".\n\nHope to merge^o^\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a83a21fa1e1f1ab147",
    "number": 89,
    "body": "`_.detect`, `_.select`, and `_.reject` all require an iterator function, but a default truthy iterator could be useful in each case, particularly `_.select`. In my own code, I want a truthy iterator far more often than anything else.\n\n```\n// Turn a path into an array of segments.\n_.select('/foo/bar/baz/'.split('/'));\n// returns\n[ 'foo', 'bar', 'baz' ]\n\n// Read a text file in Node.js.\nfs = require('fs');\n_.select(fs.readFileSync('path/to/list-of-words', 'ascii').split(/\\s+/));\n// returns words in list\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09a93a21fa1e1f1ab148",
    "number": 87,
    "body": "This adds a small update to the _.extend() method supporting the copying of getters and setters from source to destination. I also added a test to cover the change.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09aa3a21fa1e1f1ab149",
    "number": 80,
    "body": "Currently,\n    _.each(null, …);\nThrows a TypeError: `Cannot read property 'forEach' of null`, or `Cannot read property 'length' of null` (depending on whether the host JS engine implements Array.prototype.forEach).\n\nHowever,\n    Array.prototype.forEach.call(null, …);\nDoesn't do much of anything.\n\nI've updated all the applicable `_` methods to mirror the behavior of the new ES5 Array methods when operating on a null.\n\nAdditionally,\n    var arr = [];\n    delete arr.reduce;  // prevent _.reduce from using the native reduce method\n    _.reduce(arr, function () {});\nReturns `undefined`, however\n    [].reduce(function () {});\nThrows a TypeError: \"Reduce of empty array with no initial value\".  I've updated the _.reduce method accordingly.\n",
    "head_branch": "nulls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09ab3a21fa1e1f1ab14a",
    "number": 76,
    "body": "Not sure if it makes sense or not for the library but I added a remove() method.  Found an instance where I needed it and couldn't really compose the same thing out of the other methods available.  Thanks for the great library, and backbone as well.\n\n// JC\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09ab3a21fa1e1f1ab14b",
    "number": 75,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09ac3a21fa1e1f1ab14c",
    "number": 74,
    "body": "This just adds the return statement at the end of _.each() that was left off in commit 2d06e1d5262ca2e17aa7. Fixes issue 73: https://github.com/documentcloud/underscore/issues#issue/73.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09ad3a21fa1e1f1ab14d",
    "number": 67,
    "body": "- Exports `_` as the entire module. This allows you to just `var _ = require('underscore');`. `_([1, 2, 3]).map` will still work with this approach.\n- Adds backwards compatibility support for `var _ = require('underscore')._;`\n- Fixes strange `_` leak in node.js. Simply doing `require('underscore')` would assign a local `_` in your file. Could be a node.js bug but it was related to `root._ = _;`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09ae3a21fa1e1f1ab14e",
    "number": 63,
    "body": "hey guys,\n\nnot sure what you think, but i'm a huge fan of this pattern. the idea is to override _.toString to make it easier to send Underscore to the client. all you need to do is:\n\n```\nvar _ = require( \"underscore\" )._\n```\n\nand then when you want to send it to an HTML response in the client:\n\n```\nresponse.write( \"<script>\" + _ + \"</script>\" )\n```\n\nthanks and keep up the great work,\n\njed\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09af3a21fa1e1f1ab14f",
    "number": 59,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b03a21fa1e1f1ab150",
    "number": 58,
    "body": "This is important for LaTeX templates!  For example, `\\ribbit` would produce an output containing a carriage return instead of the literal string `\\r`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b13a21fa1e1f1ab151",
    "number": 57,
    "body": "Directory can now be imported directly as a node.js module\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b23a21fa1e1f1ab152",
    "number": 54,
    "body": "Similar to reduce(), except if you don't pass an initial value for reduceRight(), it's supposed to use the _last_ value in the collection.\n",
    "head_branch": "fix_reduceRight_initial_value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b33a21fa1e1f1ab153",
    "number": 53,
    "body": "Hi there. According to the ECMA 5 spec (15.4.4.21), if an initial value is not given to reduce(), then it should be the first value of the array (and the iterator starts from the second value). I noticed that Underscore doesn't do this currently for the non-native version of reduce().\n\nAdditionally, when using native reduce(), if no memo is passed to _.reduce(), then an \"undefined\" memo will be given to the native reduce(), which will screw things up. So this commit handles that case as well.\n",
    "head_branch": "fix_reduce_initial_value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b43a21fa1e1f1ab154",
    "number": 52,
    "body": "Hello all,\n\nI added a function that slices an array into smaller arrays of a given length. It's similar to the each_slice method in Ruby's enumerable module. I needed this for my own project, so I wanted to pass along in case others found useful.\n\nThanks,\nMatt\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b53a21fa1e1f1ab155",
    "number": 51,
    "body": "",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b63a21fa1e1f1ab156",
    "number": 49,
    "body": "Is this the git way to do it? or should I make a new fork and add only the curry function to it?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b73a21fa1e1f1ab157",
    "number": 48,
    "body": "_.pluck now supports arrays _and_ objects.  I've added a helper for the keys requires (not sure if it's overly helpful), but _.pluck can now also be used for the following:\n\n```\nvar objectA = { \n  name: \"remy\",\n  age: 32,\n  nationality: \"GBP\",\n  location: \"Brighton\",\n  legs: 2,\n  married: true\n};\n\nvar objectB = _.pluck(objectA, \"name age married\");\n// or: objectB = _.pluck(objectA, [\"name\", \"age\", \"married\"]);\n// but there's a helper to split the string\n\nconsole.log(objectB);\n// { name: \"remy\", age: 32, married: true }\n```\n\nHope that's of help to others too (note that the syntax hasn't changed if the argument is an array).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b73a21fa1e1f1ab158",
    "number": 46,
    "body": "Curry is generally useful but was mostly necessary for asyncCompose. There isn't much code here though, so I think it'll be easy enough to see what is going on.\n\nThe really exciting win here is being able to chain a bunch of asynchronous functions, like ajax calls or file i/o (on the server)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b83a21fa1e1f1ab159",
    "number": 45,
    "body": "I was wondering if Object.create could be added to Underscore.js. So here is my suggestion for adding it in a form of pull request.\n\nIt uses ECMAScript 5's native Object.create when available, otherwise Douglas Crockford's Javascript implementation. \n\nhttp://javascript.crockford.com/prototypal.html\n\nI've also added some simple tests which I've ran successfully  in Chrome 7, Firefox 3.7, IE8 and Opera 10.60.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09b93a21fa1e1f1ab15a",
    "number": 44,
    "body": "Hi,\n\nI've added a function called \"omap\", which allows functional mapping on objects. It comes in two flavors:\n\n1) _.omap(o, f)\n2) _.omap(o, keys, f)\n\n1) calls function f on each key of o, setting o.key to the result of the called function. \n2) calls function f on each key specified by keys, setting o.key to the result of the called function. \n\nThe object is modified in place and a copy of the object is returned. To call this function without modifying the called object, _.omap(_.clone(o), ...) can be used. I made in-place modification the default because this was my most common used case and is cheaper than always copying the object. \n\nThis function is useful when storing s set of similar items in an object and wanting to act on all of them in a similar way. \n\nI added tests, but did not add documentation because I had some trouble building the docs (general npm problems).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09ba3a21fa1e1f1ab15b",
    "number": 42,
    "body": "644c5aa2 makes `_` and `wrapper` share a prototype so that `wrapper.prototype` is accessible and modifiable without using `mixin`, or a hack like `new _().__proto__`.  This may or may not be desirable to you.  In my own augmentations of underscore, I've found it helpful.\n\nNone of the changes affect the outcome of any tests and are pretty well explained by the commit comments.\n",
    "head_branch": "18e85b8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09bb3a21fa1e1f1ab15c",
    "number": 41,
    "body": "Hi there,\n\nI've added an unzip() function as a counterpart to _.zip(). I think it would be nice to have this as part of underscore so I've put together a little patch for you. I wouldn't be at all surprised if there are much better ways of doing something similar but at least it would be a starting point if you like it. Obviously, I'm totally happy with you guys redoing it if you don't like how I've done it or just ignoring it completely - whatever you like. :)\n\nThe basic idea is to use it as:\n\n```\nunzipped = _.unzip(some_array, ['name', 'property_name2', ...]);\n```\n\nWhich would return an associative array that you can look up to get a list of all the names in the original array:\n\n```\nunzipped.name // array containing all the names from the original array\nunzipped.property_name2 // etc\n```\n\nI needed this to prepare some json for drawing a graph.\n\nAnyways, I hope it's useful and thanks for underscore in any case. :)\n\ncheers,\n\n-mark\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09bc3a21fa1e1f1ab15d",
    "number": 39,
    "body": "Replace `.split().join()` in `_.template` as per discussion on fbd682d9ec4b9e4bf836de5a055e0913d0e8cb1b and benchmarks here: http://jsperf.com/split-join-vs-replace\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09bd3a21fa1e1f1ab15e",
    "number": 36,
    "body": "Hi, I implemented a partition function that divides a collection based on a truth test. I didn't wrote a comment describing the function, because my english kind of sucks.\n\nBtw, underscore is a great library and the code is really easy to understand and work with.\n\nThanks,\n\nDalto\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661e09be3a21fa1e1f1ab15f",
    "number": 34,
    "body": "Simply wrapped the the condition with `!!( ... )`\n",
    "head_branch": "116ff91bec2873e0d841427a9f27c8ff16425aec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]