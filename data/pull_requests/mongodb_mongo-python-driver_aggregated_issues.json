[
  {
    "_id": "661fc68b44ee515ce6a4ae6f",
    "number": 1601,
    "body": null,
    "head_branch": "PYTHON-3601",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc68c44ee515ce6a4ae70",
    "number": 1600,
    "body": "\r\n```python\r\n>>> client.test.foo.insert_many(data)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/steve.silvester/workspace/mongo-python-driver/pymongo/_csot.py\", line 108, in csot_wrapper\r\n    return func(self, *args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/steve.silvester/workspace/mongo-python-driver/pymongo/collection.py\", line 742, in insert_many\r\n    blk.execute(write_concern, session, _Op.INSERT)\r\n  File \"/Users/steve.silvester/workspace/mongo-python-driver/pymongo/bulk.py\", line 595, in execute\r\n    return self.execute_command(generator, write_concern, session, operation)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/steve.silvester/workspace/mongo-python-driver/pymongo/bulk.py\", line 462, in execute_command\r\n    _raise_bulk_write_error(full_result)\r\n  File \"/Users/steve.silvester/workspace/mongo-python-driver/pymongo/bulk.py\", line 164, in _raise_bulk_write_error\r\n    raise OperationFailure(errmsg, code, full_result)\r\npymongo.errors.OperationFailure: This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string., full error: {'writeErrors': [{'index': 0, 'code': 20, 'codeName': 'IllegalOperation', 'errmsg': 'Transaction numbers are only allowed on storage engines that support document-level locking', 'op': {'a': 1, '_id': ObjectId('661f32dd2507a26812abf937')}}], 'writeConcernErrors': [], 'nInserted': 0, 'nUpserted': 0, 'nMatched': 0, 'nModified': 0, 'nRemoved': 0, 'upserted': []}\r\n```",
    "head_branch": "PYTHON-2048",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc68d44ee515ce6a4ae71",
    "number": 1599,
    "body": "https://jira.mongodb.org/browse/PYTHON-4334",
    "head_branch": "PYTHON-4334",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4334 Fix test_heartbeat_start_ordering, ensure TCPServer starts before client (#1599)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc68e44ee515ce6a4ae72",
    "number": 1598,
    "body": null,
    "head_branch": "PYTHON-4305-changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4305 Add changelog for 4.6.3 (#1598)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc68f44ee515ce6a4ae73",
    "number": 1597,
    "body": "https://jira.mongodb.org/browse/PYTHON-4348",
    "head_branch": "PYTHON-4348",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4348 Reinstate fork warning because network I/O and threads are not fork safe (#1597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc68f44ee515ce6a4ae74",
    "number": 1596,
    "body": "https://jira.mongodb.org/browse/PYTHON-4371\r\n\r\n```python\r\n# Before\r\n>>> client.db.list_collection_names(filter={\"name\": {\"$regex\": r\"^(?!system\\\\.)\"}})\r\n['coll', 'system.views', 'time', 'system.buckets.time', 'view']\r\n\r\n# After\r\n>>> client.db.list_collection_names(filter={\"name\": {\"$regex\": \"^(?!system\\\\.)\"}})\r\n['coll', 'time', 'view']\r\n```",
    "head_branch": "PYTHON-4371",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4371 Fix include_system_collections example in migration guide (#1596)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69044ee515ce6a4ae75",
    "number": 1595,
    "body": null,
    "head_branch": "PYTHON-3741",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3741 Fix rendering of CodecOptions links in docs (#1595)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69144ee515ce6a4ae76",
    "number": 1594,
    "body": null,
    "head_branch": "PYTHON-3741",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3741 Fix rendering of CodecOptions links in docs (#1594)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69244ee515ce6a4ae77",
    "number": 1593,
    "body": null,
    "head_branch": "PYTHON-4057",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4057 Emit DeprecationWarning for deprecated GridFS apis (#1593)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69344ee515ce6a4ae78",
    "number": 1592,
    "body": null,
    "head_branch": "PYTHON-4367",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4367 Fix link to GCP VM metadata (#1592)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69444ee515ce6a4ae79",
    "number": 1591,
    "body": null,
    "head_branch": "PYTHON-3984",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3984 Deprecate WriteConcern.wtimeout in favor of pymongo.timeout() (#1591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69444ee515ce6a4ae7a",
    "number": 1590,
    "body": null,
    "head_branch": "PYTHON-4367",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69544ee515ce6a4ae7b",
    "number": 1589,
    "body": "https://jira.mongodb.org/browse/PYTHON-4366",
    "head_branch": "PYTHON-4366",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69644ee515ce6a4ae7c",
    "number": 1588,
    "body": null,
    "head_branch": "PYTHON-4353",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4353 Make dns import optional but required for tests (#1588)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69744ee515ce6a4ae7d",
    "number": 1587,
    "body": null,
    "head_branch": "PYTHON-4346",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4346 Reinstate CODEOWNERS File and Add Static Check in CI (#1587)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69844ee515ce6a4ae7e",
    "number": 1586,
    "body": "https://jira.mongodb.org/browse/PYTHON-4362",
    "head_branch": "PYTHON-4362",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4362 Resync CMAP tests (#1586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69944ee515ce6a4ae7f",
    "number": 1585,
    "body": null,
    "head_branch": "PYTHON-4354",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4354 & PYTHON-4355 - Increase logging limit for tests cleanup (#1585)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69944ee515ce6a4ae80",
    "number": 1584,
    "body": "The green framework failures were actually due to `ocsp_support` logging non-JSON messages. Our test framework expects all logs to be in JSON format, so I've added a check to exclude `ocsp_support` logs from test verification.",
    "head_branch": "PYTHON-4354",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4354 & PYTHON-4355 - Increase logging limit for tests (#1584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69a44ee515ce6a4ae81",
    "number": 1583,
    "body": "https://jira.mongodb.org/browse/PYTHON-4361",
    "head_branch": "PYTHON-4361",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4361 Skip transactions tests on MMAPv1 (#1583)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69b44ee515ce6a4ae82",
    "number": 1582,
    "body": null,
    "head_branch": "PYTHON-4355",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4355 Remove extra imports for Green Framework tests (#1582)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69c44ee515ce6a4ae83",
    "number": 1581,
    "body": "# Is the MongoDB Python Driver 4.6.3 release a real one?\r\n\r\nCreated because this Git Repo has \"Issues\" disabled, and neither the MongoDB Security Team nor MongDB Support have responded when asked if the claimed recent \"4.6.3\" release is actually legit.\r\n\r\nThe *documented* release process for this Python driver is here:\r\n\r\n  https://github.com/mongodb/mongo-python-driver/blob/master/RELEASE.md\r\n\r\nHowever, the MongoDB \"4.6.3\" release which GitHub Dependabot is telling people to upgrade to IS NOT listed where that says to check:\r\n\r\n  * MongoDB Release Announcements page:\r\n\r\n      https://www.mongodb.com/community/forums/tags/c/announcements/driver-releases/110/python\r\n\r\n    Nope.  Latest release listed is 4.6.2.\r\n\r\n\r\n  * GitHub Releases page for the repo:\r\n\r\n      https://github.com/mongodb/mongo-python-driver/releases\r\n\r\n    Nope.  Latest release listed is 4.6.2.\r\n\r\n\r\nIn short, this looks like *some* part of the MongoDB packaging process may have been compromised.\r\n\r\nHowever, the MongoDB staff are unfortunately incapable of telling people whether it's legit or not.\r\n\r\nSeems like a pretty basic question eh?\r\n\r\nIf anyone from the MongoDB team actually feels like responding to let their users know, our particular issue documenting the attempts to contact them is here: https://github.com/getredash/redash/pull/6863",
    "head_branch": "mongodb_supply_chain_attack_question",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69d44ee515ce6a4ae84",
    "number": 1580,
    "body": "[CLOUDP-242688](https://jira.mongodb.org/browse/CLOUDP-242688)",
    "head_branch": "tw/op-encrypted",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69e44ee515ce6a4ae85",
    "number": 1579,
    "body": null,
    "head_branch": "PYTHON-4349",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4349 Fix snappy support on PyPy 3.8 (#1579)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69e44ee515ce6a4ae86",
    "number": 1578,
    "body": null,
    "head_branch": "PYTHON-4322",
    "is_a_fork": true,
    "comments": [
      "> Hmm I didn't notice the failing test:\r\n\r\nYeah, I had to update the test runner."
    ],
    "commit_messages": [
      "PYTHON-4322 Fix racy unified tests of unacknowledged writes (#1578)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc69f44ee515ce6a4ae87",
    "number": 1577,
    "body": "See JIRA for details and link to patches that show the errors.\r\nThese failures will be fixed pending the tickets that are referred to in test/unified_format.py: [PYTHON-4303] and [PYTHON-4227].",
    "head_branch": "PYTHON-4303-skipTest",
    "is_a_fork": true,
    "comments": [
      "Thanks!  I filed https://jira.mongodb.org/browse/PYTHON-4356 for the unrelated failures."
    ],
    "commit_messages": [
      "PYTHON-4303 Temporarily skip two transaction tests (#1577)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a044ee515ce6a4ae88",
    "number": 1576,
    "body": "https://jira.mongodb.org/browse/PYTHON-4325",
    "head_branch": "PYTHON-4325",
    "is_a_fork": true,
    "comments": [
      "Minor change. I updated to only test 8 threads, instead of both 4 and 16, to reduce the overall test runtime."
    ],
    "commit_messages": [
      "PYTHON-4325 Add multi-threaded benchmarks for Find and RunCommand (#1576)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a144ee515ce6a4ae89",
    "number": 1575,
    "body": "Reduce max benchmark time to 60 seconds and increase min time to 30 seconds.\r\n\r\nAlso introduces a new FASTBENCH setting to the benchmarks more quickly:\r\n```\r\n$ FASTBENCH=1 python test/performance/perf_test.py -v TestDeepEncoding\r\nrunTest (__main__.TestDeepEncoding.runTest) ... Completed TestDeepEncoding 179.236 MB/s, MEDIAN=0.011s, total time=0.100s, iterations=9\r\n```\r\nVS without:\r\n```\r\n$ python test/performance/perf_test.py -v TestDeepEncoding\r\nrunTest (__main__.TestDeepEncoding.runTest) ... Completed TestDeepEncoding 181.506 MB/s, MEDIAN=0.108s, total time=30.103s, iterations=277\r\n```\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-4350",
    "head_branch": "PYTHON-4350",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4350 Faster and more consistent performance benchmark execution times (#1575)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a244ee515ce6a4ae8a",
    "number": 1574,
    "body": "https://jira.mongodb.org/browse/PYTHON-4347\r\n\r\nDepends on https://github.com/mongodb/mongo-python-driver/pull/1576",
    "head_branch": "PYTHON-4347",
    "is_a_fork": true,
    "comments": [
      "It looks like this change has only a very minor impact around 1-2%. We need more time to work on this ticket to ensure the changes in the above PR don't regress on [PYTHON-1177](https://jira.mongodb.org/browse/PYTHON-1177)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a344ee515ce6a4ae8b",
    "number": 1573,
    "body": "https://jira.mongodb.org/browse/PYTHON-4332",
    "head_branch": "PYTHON-4332",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4332 create_search_index only sends \"type\" field when provided (#1573)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a444ee515ce6a4ae8c",
    "number": 1572,
    "body": "https://jira.mongodb.org/browse/PYTHON-4299\r\n\r\nPOC for https://github.com/mongodb/specifications/pull/1556\r\n",
    "head_branch": "PYTHON-4299",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey Please don't merge this until I've had a chance to look at it and ask questions."
    ],
    "commit_messages": [
      "PYTHON-4299 Add support for TopologyDescriptionChangedEvent to expectEvents (#1572)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a444ee515ce6a4ae8d",
    "number": 1571,
    "body": null,
    "head_branch": "PYTHON-3416",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-4332\r\n"
    ],
    "commit_messages": [
      "PYTHON-3416 Mongos SRV Poller should wait 60 seconds to poll (#1571)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a544ee515ce6a4ae8e",
    "number": 1570,
    "body": null,
    "head_branch": "PYTHON-4037",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4037 Avoid Appending Write/Read Concern in Atlas Search Index Helper Commands (#1570)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a644ee515ce6a4ae8f",
    "number": 1569,
    "body": null,
    "head_branch": "PYTHON-4300",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4300 Forward comment argument in list_search_indexes (#1569)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a744ee515ce6a4ae90",
    "number": 1568,
    "body": null,
    "head_branch": "PYTHON-4303",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4303 Fix Unified Transaction Test Runner (#1568)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a844ee515ce6a4ae91",
    "number": 1567,
    "body": "Requires https://github.com/mongodb-labs/drivers-evergreen-tools/pull/426",
    "head_branch": "DRIVERS-2878",
    "is_a_fork": true,
    "comments": [
      "Windows failure is expected pending: https://jira.mongodb.org/browse/DEVPROD-5919"
    ],
    "commit_messages": [
      "PYTHON-4309 OIDC Atlas Testing Updates (#1567)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6a944ee515ce6a4ae92",
    "number": 1566,
    "body": "Fix for TypeError caused by substraction between nulls when round_trip_time is None\r\n\r\n```python\r\n    return [\r\n>       s for s in selection.server_descriptions if (s.round_trip_time - fastest) <= threshold\r\n    ]\r\nE   TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'\r\n```\r\nJira ticket: https://jira.mongodb.org/browse/PYTHON-4298\r\nLinked to previous PR https://github.com/mongodb/mongo-python-driver/pull/1361",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Based on this traceback:\r\n```python\r\n    return [\r\n>       s for s in selection.server_descriptions if (s.round_trip_time - fastest) <= threshold\r\n    ]\r\nE   TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'\r\n```\r\nThis means that both `s.round_trip_time` and `fastest` are None. The only way `fastest` could be None is if there is only a single server in `selection.server_descriptions`, otherwise `fastest = min(...)` line would have raised the TypeError:\r\n```python\r\n>>> print(min([None, 1.0]))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: '<' not supported between instances of 'float' and 'NoneType'\r\n>>> print(min([None]))\r\nNone\r\n```",
      "Is your application using the \"server_selector\" argument to MongoClient? If so, could you share how it's defined?\r\n```\r\n          - `server_selector`: (callable or None) Optional, user-provided\r\n            function that augments server selection rules. The function should\r\n            accept as an argument a list of\r\n            :class:`~pymongo.server_description.ServerDescription` objects and\r\n            return a list of server descriptions that should be considered\r\n            suitable for the desired operation.\r\n```",
      "Hi @ShaneHarvey thanks for the review, I'll address your suggestion and raise that exception. \r\nI wasn't able to reproduce the issue locally (only happens during the CI) but maybe I can share more info on the client and replica set configuration so we can troubleshoot it. \r\n\r\n> Is your application using the \"server_selector\" argument to MongoClient? If so, could you share how it's defined?\r\n> \r\n> ```\r\n>           - `server_selector`: (callable or None) Optional, user-provided\r\n>             function that augments server selection rules. The function should\r\n>             accept as an argument a list of\r\n>             :class:`~pymongo.server_description.ServerDescription` objects and\r\n>             return a list of server descriptions that should be considered\r\n>             suitable for the desired operation.\r\n> ```\r\nNo, we're not passing the server_selector argument in the client.\r\n\r\nThis is the rest of the client configuration: \r\n```python\r\npymongo.MongoClient(\r\n            self.config.connection_string,\r\n            connect=True,\r\n            tz_aware=True,\r\n            retryWrites=False,\r\n            retryReads=True,\r\n            minPoolSize=4,\r\n            maxPoolSize=100,\r\n            maxIdleTimeMS=3 * 60 * 1000,\r\n            socketTimeoutMS=8 * 1000,\r\n            connectTimeoutMS=8 * 1000,\r\n            serverSelectionTimeoutMS=29 * 1000,\r\n        )\r\n```\r\nthe application is also using a different session for each thread to perform any type of mongodb operation. \r\n\r\nThat type error usually pops up during the CI, which is using this image ghcr.io/zcube/bitnami-compat/mongodb:6.0-debian-11-r64 to spin up a basic replica set (I can also share the mongo services we're using in docker compose if you think it's helpful). \r\nShould we explicitly describe the mongo services using the server_selector argument?\r\n",
      "> Should we explicitly describe the mongo services using the server_selector argument?\r\n\r\nNo, server_selector is a power-user type feature only useful in very niche circumstances.\r\n\r\n> I'll address your suggestion and raise that exception.\r\n\r\nThanks!",
      "Hi @ShaneHarvey, \r\nI addressed your suggestion and I'm raising the configuration error now, can you take a second look, please? \r\nAlso linting should be ok now. \r\n\r\nI had again that error in the CI today, here's the full pymongo traceback: \r\n```\r\nfor doc in collection.find(\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/cursor.py\", line 1264, in next\r\n    if len(self.__data) or self._refresh():\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/cursor.py\", line 1181, in _refresh\r\n    self.__send_message(q)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/cursor.py\", line 1060, in __send_message\r\n    response = client._run_operation(\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/_csot.py\", line 107, in csot_wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/mongo_client.py\", line 1394, in _run_operation\r\n    return self._retryable_read(\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/mongo_client.py\", line 1492, in _retryable_read\r\n    return self._retry_internal(\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/_csot.py\", line 107, in csot_wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/mongo_client.py\", line 1453, in _retry_internal\r\n    return _ClientConnectionRetryable(\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/mongo_client.py\", line 2315, in run\r\n    return self._read() if self._is_read else self._write()\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/mongo_client.py\", line 2437, in _read\r\n    self._server = self._get_server()\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/mongo_client.py\", line 2400, in _get_server\r\n    return self._client._select_server(\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/mongo_client.py\", line 1303, in _select_server\r\n    server = topology.select_server(server_selector)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/topology.py\", line 302, in select_server\r\n    server = self._select_server(selector, server_selection_timeout, address)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/topology.py\", line 286, in _select_server\r\n    servers = self.select_servers(selector, server_selection_timeout, address)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/topology.py\", line 237, in select_servers\r\n    server_descriptions = self._select_servers_loop(selector, server_timeout, address)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/topology.py\", line 252, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/topology_description.py\", line 330, in apply_selector\r\n    return self._apply_local_threshold(selection)\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/topology_description.py\", line 272, in _apply_local_threshold\r\n    return [\r\n  File \"/opt/venv/lib/python3.8/site-packages/pymongo/topology_description.py\", line 275, in <listcomp>\r\n    if (cast(float, s.round_trip_time) - fastest) <= threshold\r\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'\r\n```",
      "@Ale-Cas I'm going to merge this after the test suite completes. Could you install this branch in your CI and provide us an example of the new exception?\r\n\r\nThe new error will look something like:\r\n```\r\npymongo.errors.ConfigurationError: round_trip_time for server ('localhost', 27019) is unexpectedly None: <TopologyDescription id: 660ef6814d5b0d196ee0f1e4, topology_type: ReplicaSetWithPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: RSSecondary, rtt: 0.004299714891240001>, <ServerDescription ('localhost', 27018) server_type: RSSecondary, rtt: 0.007958880392834544>, <ServerDescription ('localhost', 27019) server_type: RSPrimary, rtt: 0.0067411982174962765>]>, servers: [<ServerDescription ('localhost', 27019) server_type: Unknown, rtt: None>]\r\n```",
      "@ShaneHarvey thanks for your help! \r\nIs there a plan to release this fix as part of pymongo 4.6.3? \r\nBecause, if possible, I'd prefer to bump the package using the new semantic version rather than the master branch.\r\n\r\nAnd, as soon as I get the configuration error in the CI, I'll send it to you. \r\n",
      "Ideally we can debug this issue and fix the underlying bug before we release. I backported this commit to the v4.6 branch here: https://github.com/mongodb/mongo-python-driver/commit/d6248e9cf1f22f71b1986a3e5c17ad43574ecc0d\r\n\r\nCan you install the backported commit like this? `python3 -m pip install https://github.com/mongodb/mongo-python-driver/archive/d6248e9cf1f22f71b1986a3e5c17ad43574ecc0d.tar.gz`"
    ],
    "commit_messages": [
      "PYTHON-4298 Raise ConfigurationError not TypeError when round_trip_time is None in server selection (#1566)\n\nCo-authored-by: Alessio <alessio.castrica@investsuite.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6aa44ee515ce6a4ae93",
    "number": 1565,
    "body": "Fixes a mistake in PYTHON-4285. Note there's still no bug here since `state` will never be null. We are adding the check because it's harmless and Coverity flagged it (even though it's a false positive).",
    "head_branch": "PYTHON-4285",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4285 Fix PyModule_GetState check (#1565)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6ac44ee515ce6a4ae94",
    "number": 1564,
    "body": "https://jira.mongodb.org/browse/PYTHON-4305",
    "head_branch": "PYTHON-4305",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4305 Fix bson size check (#1564)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6ad44ee515ce6a4ae95",
    "number": 1563,
    "body": "Addresses Astrolabe failure: https://spruce.mongodb.com/task/drivers_atlas_testing_tests_python__driver~pymongo_master_platform~ubuntu_22.04_runtime~python39_atlas_retryWrites_resizeCluster_6603d586d05b2a00076119d2_24_03_27_08_15_02/logs?execution=0",
    "head_branch": "PYTHON-2723-2",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-4303 for the other failures.",
      "Wait is the problem that astrolabe never runs setUpClass()? https://github.com/mongodb-labs/drivers-atlas-testing/blob/93925b2/integrations/python/pymongo/workload-executor.py#L32-L36\r\n\r\nEdit: Calling setUpClass is arguably better but this change still LGTM to get the testing passing again."
    ],
    "commit_messages": [
      "PYTHON-2723 Make mongos_clients a class property (#1563)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6ae44ee515ce6a4ae96",
    "number": 1562,
    "body": null,
    "head_branch": "PYTHON-4301",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-4303 for the transaction failures."
    ],
    "commit_messages": [
      "PYTHON-4301 Fix MONGODB-AWS credential caching (#1562)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6b244ee515ce6a4ae97",
    "number": 1561,
    "body": "https://jira.mongodb.org/browse/PYTHON-4297",
    "head_branch": "PYTHON-4297",
    "is_a_fork": true,
    "comments": [
      "Updated to fix these typing failures:\r\n```\r\npymongo/operations.py:591: error: Function is missing a type annotation for one\r\nor more arguments  [no-untyped-def]\r\n        def __init__(\r\n        ^\r\npymongo/operations.py:615: error: Incompatible types in assignment (expression\r\nhas type \"Mapping[str, Any]\", target has type \"str\")  [assignment]\r\n            self.__document[\"definition\"] = definition\r\n                                            ^\r\npymongo/operations.py:616: error: Incompatible types in assignment (expression\r\nhas type \"Optional[str]\", target has type \"str\")  [assignment]\r\n            self.__document[\"type\"] = type\r\n                                      ^\r\n```"
    ],
    "commit_messages": [
      "PYTHON-4297 Allow passing arbitrary options to create_search_index/SearchIndexModel (#1561)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6b244ee515ce6a4ae98",
    "number": 1560,
    "body": "https://jira.mongodb.org/browse/PYTHON-4285",
    "head_branch": "PYTHON-4285",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4285 More consistent PyModule_GetState checks (#1560)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6b444ee515ce6a4ae99",
    "number": 1559,
    "body": null,
    "head_branch": "PYTHON-4295",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4295 Fix Installation of Crytography on PyPy3.8 (#1559)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6b644ee515ce6a4ae9a",
    "number": 1558,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> We should remove this note altogether since we only support 3.7+ now.\r\n\r\nWill this affect the documentation when selecting older Python versions?"
    ],
    "commit_messages": [
      "PYTHON-4294 Add Note on Dict Ordering (#1558)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6b844ee515ce6a4ae9b",
    "number": 1557,
    "body": null,
    "head_branch": "PYTHON-4293",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4293 Update link to mongodump example (#1557)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6b944ee515ce6a4ae9c",
    "number": 1556,
    "body": "Requires https://github.com/mongodb-labs/drivers-evergreen-tools/pull/428",
    "head_branch": "PYTHON-4256",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4256 OIDC Spec Cleanup (#1556)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6bb44ee515ce6a4ae9d",
    "number": 1555,
    "body": null,
    "head_branch": "PYTHON-4271",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4271 Skip failing serverless proxy tests (#1555)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6bc44ee515ce6a4ae9e",
    "number": 1554,
    "body": null,
    "head_branch": "PYTHON-4286",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4286 Remove duplicate test_detect_external_db (#1554)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6be44ee515ce6a4ae9f",
    "number": 1553,
    "body": "https://jira.mongodb.org/browse/PYTHON-4282",
    "head_branch": "PYTHON-4282",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4282 Stop using filemd5 in docs example for db.command (#1553)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6c044ee515ce6a4aea0",
    "number": 1552,
    "body": null,
    "head_branch": "PYTHON-4277",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4277 Fix redaction logging test failures (#1552)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6c244ee515ce6a4aea1",
    "number": 1551,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/418",
    "head_branch": "PYTHON-3467-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3467 Use client_id instead of object_id for Azure username (#1551)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6c644ee515ce6a4aea2",
    "number": 1550,
    "body": "```bash\r\npip install -e \".[aws,oscp,encryption,snappy,gssapi,zstd]\"\r\npip install tuna\r\npython -X importtime -c \"import pymongo\" 2> pymongo.log\r\ntuna pymongo.log\r\n```\r\n\r\n0.209 s without this PR\r\n0.063 s with this PR (about 3X faster).\r\n",
    "head_branch": "PYTHON-4260-2",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey I looked at adding this to existing benchmarks, but those run without optional dependencies.   We could instead use something like our mongo-arrow checks, adding a pass/fail benchmark on the PR if there is a significant increase in import time.",
      "> We could instead use something like our mongo-arrow checks, adding a pass/fail benchmark on the PR if there is a significant increase in import time.\r\n\r\nSounds good to me.",
      "evergreen retry"
    ],
    "commit_messages": [
      "PYTHON-4260 Lazily load optional imports (#1550)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6c744ee515ce6a4aea3",
    "number": 1549,
    "body": "Tests:\r\n\r\n```\r\npip install -e \".[aws,oscp,encryption,snappy,gssapi,zstd]\"\r\npython -X importtime -c \"import pymongo\"\r\n```\r\n\r\n 59862 usec cumulative time on this PR vs.\r\n157485 usec cumulative time on master.\r\n\r\nI confirmed that `dns`, `boto3`, `cryptography`, etc. are loaded on `master` and not with these changes.",
    "head_branch": "PYTHON-4260",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6c844ee515ce6a4aea4",
    "number": 1548,
    "body": null,
    "head_branch": "PYTHON-4270",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4270 Run typing tests on Python 3.7 (#1548)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6c844ee515ce6a4aea5",
    "number": 1547,
    "body": null,
    "head_branch": "PYTHON-4255",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4255 Add __getitem__ and __getattr__ methods to API docs (#1547)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6c944ee515ce6a4aea6",
    "number": 1546,
    "body": null,
    "head_branch": "PYTHON-4269",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-4270 for the type check failure."
    ],
    "commit_messages": [
      "PYTHON-4269 Limit when pull request-specific tasks are run (#1546)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6ca44ee515ce6a4aea7",
    "number": 1545,
    "body": null,
    "head_branch": "PYTHON-4265",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4265 Rename OIDC property PROVIDER_NAME and config values (#1545)\n\nCo-authored-by: Jib <Jibzade@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6cc44ee515ce6a4aea8",
    "number": 1544,
    "body": "Python implementation for [DRIVERS-2768](https://jira.mongodb.org/browse/DRIVERS-2768).",
    "head_branch": "DRIVERS-2768",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4208 [Vector Search GA] Add support for types in search index creation (#1544)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6d044ee515ce6a4aea9",
    "number": 1543,
    "body": null,
    "head_branch": "PYTHON-2723",
    "is_a_fork": true,
    "comments": [
      "evergreen retry",
      "evergreen retry",
      "Evergreen is failing to create the patch build because the diff is too big, here is a manual patch: https://spruce.mongodb.com/version/66022b707612660007a780f0/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
      "I verified that the transaction tests are run on serverless.",
      "New manual patch: https://spruce.mongodb.com/version/660329f0ca19fe0007f917c6/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
      "What's up with the \"@evergreen-ci-prod evergreen — Evergreen error\" in the check?",
      "```\r\n [2024/03/26 13:15:00.064] ERROR: failed on setup with \"pymongo.errors.ConfigurationError: Cannot specify directConnection=true with loadBalanced=true\" ()\r\n [2024/03/26 13:15:00.064] cls = <class 'test.test_auth_spec.TestUnifiedReauthenticateWithRetry'>\r\n [2024/03/26 13:15:00.064]     @classmethod\r\n [2024/03/26 13:15:00.064]     def setUpClass(cls):\r\n [2024/03/26 13:15:00.064]         # super call creates internal client cls.client\r\n [2024/03/26 13:15:00.064]         super().setUpClass()\r\n [2024/03/26 13:15:00.064]         # process file-level runOnRequirements\r\n [2024/03/26 13:15:00.064]         run_on_spec = cls.TEST_SPEC.get(\"runOnRequirements\", [])\r\n [2024/03/26 13:15:00.064]         if not cls.should_run_on(run_on_spec):\r\n [2024/03/26 13:15:00.064]             raise unittest.SkipTest(f\"{cls.__name__} runOnRequirements not satisfied\")\r\n [2024/03/26 13:15:00.064]     \r\n [2024/03/26 13:15:00.064]         # Handle mongos_clients for transactions tests.\r\n [2024/03/26 13:15:00.064]         cls.mongos_clients = []\r\n [2024/03/26 13:15:00.064]         if client_context.supports_transactions():\r\n [2024/03/26 13:15:00.064]             for address in client_context.mongoses:\r\n [2024/03/26 13:15:00.064] >               cls.mongos_clients.append(single_client(\"{}:{}\".format(*address)))\r\n [2024/03/26 13:15:00.064] test/unified_format.py:1022: \r\n [2024/03/26 13:15:00.064] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n [2024/03/26 13:15:00.064] test/utils.py:604: in single_client\r\n [2024/03/26 13:15:00.064]     return _mongo_client(h, p, directConnection=True, **kwargs)\r\n [2024/03/26 13:15:00.064] test/utils.py:594: in _mongo_client\r\n [2024/03/26 13:15:00.064]     return MongoClient(uri, port, **client_options)\r\n [2024/03/26 13:15:00.064] pymongo/mongo_client.py:825: in __init__\r\n [2024/03/26 13:15:00.064]     _check_options(seeds, opts)\r\n [2024/03/26 13:15:00.064] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n [2024/03/26 13:15:00.064] nodes = {('32071-drivertest-lb.3x79d.mongodb-dev.net', 27017)}\r\n [2024/03/26 13:15:00.064] options = {'loadBalanced': True, 'compressors': ['zlib'], 'tls': True, 'directConnection': True, 'username': 'drivers-testing', 'password': '47l0tpPl13dobvHF', 'document_class': <class 'dict'>, 'tz_aware': False, 'connect': True}\r\n [2024/03/26 13:15:00.064]     def _check_options(nodes: Sized, options: Mapping[str, Any]) -> None:\r\n [2024/03/26 13:15:00.064]         # Ensure directConnection was not True if there are multiple seeds.\r\n [2024/03/26 13:15:00.064]         if len(nodes) > 1 and options.get(\"directconnection\"):\r\n [2024/03/26 13:15:00.064]             raise ConfigurationError(\"Cannot specify multiple hosts with directConnection=true\")\r\n [2024/03/26 13:15:00.064]     \r\n [2024/03/26 13:15:00.064]         if options.get(\"loadbalanced\"):\r\n [2024/03/26 13:15:00.064]             if len(nodes) > 1:\r\n [2024/03/26 13:15:00.064]                 raise ConfigurationError(\"Cannot specify multiple hosts with loadBalanced=true\")\r\n [2024/03/26 13:15:00.064]             if options.get(\"directconnection\"):\r\n [2024/03/26 13:15:00.064] >               raise ConfigurationError(\"Cannot specify directConnection=true with loadBalanced=true\")\r\n [2024/03/26 13:15:00.064] E               pymongo.errors.ConfigurationError: Cannot specify directConnection=true with loadBalanced=true\r\n [2024/03/26 13:15:00.064] pymongo/uri_parser.py:403: ConfigurationError\r\n```\r\n\r\nLooks like the mongos_clients logic needs to be skipped on serverless+loadBalanced clusters.",
      "> What's up with the \"@evergreen-ci-prod evergreen — Evergreen error\" in the check?\r\n\r\nThe diff is too big, they're working on a fix where it will at least submit the patch even if the diff part fails.",
      "> Looks like the mongos_clients logic needs to be skipped on serverless+loadBalanced clusters.\r\n\r\nDone\r\n\r\nhttps://spruce.mongodb.com/version/66033b7a8b69b6000726fb32/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC"
    ],
    "commit_messages": [
      "PYTHON-2723 Convert transactions spec tests to unified test format (#1543)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6d144ee515ce6a4aeaa",
    "number": 1542,
    "body": null,
    "head_branch": "PYTHON-4022",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-4258 to track the EVG failure."
    ],
    "commit_messages": [
      "PYTHON-4022 - Ensure ServerHeartbeatStartedEvents are emitted before connecting (#1542)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6d244ee515ce6a4aeab",
    "number": 1541,
    "body": "PYTHON-2822",
    "head_branch": "PYTHON-2822-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2822 Fix changelog for Hello.connection_id (#1541)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6d344ee515ce6a4aeac",
    "number": 1540,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/427",
    "head_branch": "PYTHON-3664",
    "is_a_fork": true,
    "comments": [
      "Windows failure is expected pending: [jira.mongodb.org/browse/DEVPROD-5919](https://jira.mongodb.org/browse/DEVPROD-5919)"
    ],
    "commit_messages": [
      "PYTHON-3664 OIDC: Automatic token acquisition for GCP Identity Provider (#1540)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6d544ee515ce6a4aead",
    "number": 1539,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/412",
    "head_branch": "PYTHON-4243",
    "is_a_fork": true,
    "comments": [
      "https://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_rhel8_test_ssl__platform~rhel8_auth_ssl~auth_ssl_python_version~3.10_coverage~coverage_test_latest_sharded_cluster_patch_dc50cbd35ad74200d1f8eb9bbba1e3a624b53514_65df1ccec9ec44736b8900c0_24_02_28_11_45_19?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nIs this failure related?",
      "> Is this failure related?\r\n\r\nIt is not."
    ],
    "commit_messages": [
      "PYTHON-4243 Use GitHub App to Auto Assign Reviewer (#1539)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6d644ee515ce6a4aeae",
    "number": 1538,
    "body": null,
    "head_branch": "PYTHON-3841",
    "is_a_fork": true,
    "comments": [
      "> Just noticed there's one failing test:\r\n> \r\n> ```\r\n>  [2024/03/04 09:47:14.537] self = <test.test_connection_logging.TestConnectionLoggingConnectionLogging testMethod=test_Connection_checkout_fails_due_to_error_establishing_connection>\r\n>  [2024/03/04 09:47:14.537]     def test_case(self):\r\n>  [2024/03/04 09:47:14.537] >       self.run_scenario(spec)\r\n>  [2024/03/04 09:47:14.537] test/unified_format.py:1854: \r\n>  [2024/03/04 09:47:14.537] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n>  [2024/03/04 09:47:14.537] test/unified_format.py:1801: in run_scenario\r\n>  [2024/03/04 09:47:14.537]     self._run_scenario(spec, uri)\r\n>  [2024/03/04 09:47:14.537] test/unified_format.py:1828: in _run_scenario\r\n>  [2024/03/04 09:47:14.537]     self.check_log_messages(spec[\"operations\"], expect_log_messages)\r\n>  [2024/03/04 09:47:14.537] test/unified_format.py:1762: in check_log_messages\r\n>  [2024/03/04 09:47:14.537]     self.match_evaluator.match_result(expected_data, actual_data)\r\n>  [2024/03/04 09:47:14.537] test/unified_format.py:791: in match_result\r\n>  [2024/03/04 09:47:14.537]     return self._match_document(expectation, actual, is_root=not in_recursive_call)\r\n>  [2024/03/04 09:47:14.537] test/unified_format.py:780: in _match_document\r\n>  [2024/03/04 09:47:14.537]     self.match_result(value, actual[key], in_recursive_call=True)\r\n>  [2024/03/04 09:47:14.537] test/unified_format.py:808: in match_result\r\n>  [2024/03/04 09:47:14.537]     self.test.assertEqual(expectation, actual)\r\n>  [2024/03/04 09:47:14.537] E   AssertionError: 'Connection pool cleared' != 'Connection closed'\r\n>  [2024/03/04 09:47:14.537] E   - Connection pool cleared\r\n>  [2024/03/04 09:47:14.537] E   ?            -----  ^^^\r\n>  [2024/03/04 09:47:14.537] E   + Connection closed\r\n>  [2024/03/04 09:47:14.537] E   ?              ^^\r\n> ```\r\n> \r\n> [spruce.mongodb.com/task/mongo_python_driver_test_linux_enterprise_auth__platform~rhel8_auth~auth_python_version~3.10_test_enterprise_auth_patch_dc50cbd35ad74200d1f8eb9bbba1e3a624b53514_65e6044032f417dd385ee9a9_24_03_04_17_26_26?execution=0&sortBy=STATUS&sortDir=ASC](https://spruce.mongodb.com/task/mongo_python_driver_test_linux_enterprise_auth__platform~rhel8_auth~auth_python_version~3.10_test_enterprise_auth_patch_dc50cbd35ad74200d1f8eb9bbba1e3a624b53514_65e6044032f417dd385ee9a9_24_03_04_17_26_26?execution=0&sortBy=STATUS&sortDir=ASC)\r\n\r\nFixed, forgot to re-order the spec test ordering for the pool close vs pool clear events."
    ],
    "commit_messages": [
      "PYTHON-3841 Add durations to connection pool events (#1538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6d844ee515ce6a4aeaf",
    "number": 1537,
    "body": null,
    "head_branch": "PYTHON-3835",
    "is_a_fork": true,
    "comments": [
      "Both EG test failures are CSOT.",
      "> Could you add a test for the warning.warn behavior too? Also can you show an example of the UserWarning behavior? I want to ensure the stack level corresponds to the MongoClient line.\r\n\r\nThis is what it looks like:\r\n\r\n```\r\n/Users/nstapp/Github/mongo-python-driver/pymongo/mongo_client.py:2503: UserWarning: You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb\r\n  _log_or_warn(\r\n```",
      "> ```\r\n> /Users/nstapp/Github/mongo-python-driver/pymongo/mongo_client.py:2503: UserWarning: You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb\r\n>   _log_or_warn(\r\n> ```\r\n> \r\n> This is problematic, the stack level needs to be increased so that the warning is raised on the line of code that creates the MongoClient, not on pymongo's internal code.\r\n\r\nFixed, `stacklevel=4` ensures we get:\r\n\r\n```\r\n/Users/nstapp/Github/mongo-python-driver/dns_test.py:34: UserWarning: You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb\r\n  c = MongoClient(\"host.docdb-elastic.amazonaws.com\")\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3835 Log informational message client-side based on detected environment (#1537)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6da44ee515ce6a4aeb0",
    "number": 1536,
    "body": "Switched from `md5` to `sha256` as that [performs faster](https://github.com/roskakori/pygount/pull/137#issuecomment-1947227101) than `md5` and is [FIPS compliant](https://csrc.nist.gov/pubs/fips/180-4/upd1/final). Note: the `usedforsecurity` flag could be used but was only [introduced in Python 3.9](https://docs.python.org/3/library/hashlib.html#hash-algorithms).\r\n\r\nThis is the error that is thrown on FIPS enabled machines:\r\n`ValueError: [digital envelope routines: EVP_DigestInit_ex] disabled for FIPS`\r\n\r\nNot sure if this needs to be changed anywhere else such as tests. Let me know if this is the case and I would be happy to amend!",
    "head_branch": "patch-1-1",
    "is_a_fork": true,
    "comments": [
      "We can't make this change because md5 is required in these places for the legacy/deprecated MONGODB-CR and SCRAM-SHA-1 authentication mechanisms. Users are expected to migrate to one of the newer auth mechanisms that don't rely on md5 like SCRAM-SHA-256.",
      "> We can't make this change because md5 is required in these places for the legacy/deprecated MONGODB-CR and SCRAM-SHA-1 authentication mechanisms. Users are expected to migrate to one of the newer auth mechanisms that don't rely on md5 like SCRAM-SHA-256.\n\nGot it, thanks for the info!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6dc44ee515ce6a4aeb1",
    "number": 1535,
    "body": "PYTHON-4223 Fixes test.test_command_logging.TestCommandLoggingServiceId.test_command_log_messages_include_serviceId_when_in_LB_mode.",
    "head_branch": "PYTHON-4223",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4223 Log serviceId as hex string (#1535)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6dd44ee515ce6a4aeb2",
    "number": 1534,
    "body": null,
    "head_branch": "PYTHON-4219-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4219 Add changelog entry for 4.6.2 (#1534)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6df44ee515ce6a4aeb3",
    "number": 1533,
    "body": null,
    "head_branch": "DEVPROD-3871",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DEVPROD-3871 Use teardown_task when there is one function/command (#1533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6e144ee515ce6a4aeb4",
    "number": 1532,
    "body": null,
    "head_branch": "PYTHON-4147-4.6",
    "is_a_fork": true,
    "comments": [
      "> Is the [relevant changelog.rst](https://github.com/mongodb/mongo-python-driver/commit/0f7e1b011024b19b5ec755cc3302032bc5a36008) not needed in this?\r\n\r\nThe changelog is in #1530 "
    ],
    "commit_messages": [
      "PYTHON-4147 [v4.6]: Silence noisy thread.start() RuntimeError at shutdown (#1532)\n\nCo-authored-by: Jib <jib.adegunloye@mongodb.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc6e244ee515ce6a4aeb5",
    "number": 1531,
    "body": null,
    "head_branch": "PYTHON-3951",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3951: Remove SkipTest on ListSearchIndex tests (#1531)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6e444ee515ce6a4aeb6",
    "number": 1530,
    "body": null,
    "head_branch": "PYTHON-4219",
    "is_a_fork": true,
    "comments": [
      "> We still need to backport the fix for [PYTHON-4147](https://jira.mongodb.org/browse/PYTHON-4147).\r\n\r\nhttps://github.com/mongodb/mongo-python-driver/pull/1532"
    ],
    "commit_messages": [
      "PYTHON-4219 Prep for 4.6.2 Release (#1530)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6e644ee515ce6a4aeb7",
    "number": 1529,
    "body": null,
    "head_branch": "PYTHON-4182-2",
    "is_a_fork": true,
    "comments": [
      "There's one more failure to skip..."
    ],
    "commit_messages": [
      "PYTHON-4182 Skip additional TransientTransactionError test on latest (#1529)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6e844ee515ce6a4aeb8",
    "number": 1528,
    "body": "https://jira.mongodb.org/browse/PYTHON-4156",
    "head_branch": "PYTHON-4156",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4156 Increase interruptInUseConnections timeout to fix flaky test (#1528)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6ec44ee515ce6a4aeb9",
    "number": 1527,
    "body": null,
    "head_branch": "PYTHON-4077-462",
    "is_a_fork": true,
    "comments": [
      "evergreen retry",
      "evergreen retry"
    ],
    "commit_messages": [
      "PYTHON-4077 [v4.6]: Ensure there is a MacOS wheel for Python 3.7 (#1527)\n\nCo-authored-by: Casey Clements <caseyclements@users.noreply.github.com>\r\nCo-authored-by: Shane Harvey <shnhrv@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc6ed44ee515ce6a4aeba",
    "number": 1526,
    "body": "Also fixes PYTHON-4018",
    "head_branch": "PYTHON-4117",
    "is_a_fork": true,
    "comments": [
      "Test failures are CSOT and https://jira.mongodb.org/projects/PYTHON/issues/PYTHON-4182."
    ],
    "commit_messages": [
      "PYTHON-4117 Require 4.3.1+ server version when using failCommand errorLabels option (#1526)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6ee44ee515ce6a4aebb",
    "number": 1525,
    "body": null,
    "head_branch": "PYTHON-4218",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4218 Update links to change-streams specification (#1525)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6ef44ee515ce6a4aebc",
    "number": 1524,
    "body": "https://jira.mongodb.org/browse/PYTHON-3847",
    "head_branch": "PYTHON-3847",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3847 Encode DatetimeMS using type_marker lookup (#1524)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6f044ee515ce6a4aebd",
    "number": 1523,
    "body": "…ing_connection",
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Switch order of test_Connection_checkout_fails_due_to_error_establish… (#1523)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6f244ee515ce6a4aebe",
    "number": 1522,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support tagSets in tests (#1522)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc6f444ee515ce6a4aebf",
    "number": 1521,
    "body": "This was a mistake",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6f844ee515ce6a4aec0",
    "number": 1520,
    "body": null,
    "head_branch": "PYTHON-4167",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4167 - Create documentation for standardized logging (#1520)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6f944ee515ce6a4aec1",
    "number": 1519,
    "body": null,
    "head_branch": "PYTHON-4205-utils-change",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4205 Fix TestDataLakeProse.test_3 (#1519)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6fb44ee515ce6a4aec2",
    "number": 1518,
    "body": null,
    "head_branch": "PYTHON-4194",
    "is_a_fork": true,
    "comments": [
      "I scheduled `Encryption PyPy 3.8 RHEL 8.x NoAuth NoSSL`, which was previously failing."
    ],
    "commit_messages": [
      "PYTHON-4194 Fix Cryptography Install on PyPy (#1518)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6fd44ee515ce6a4aec3",
    "number": 1517,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/403",
    "head_branch": "setup-secrets-scripts",
    "is_a_fork": true,
    "comments": [
      "I created https://jira.mongodb.org/browse/PYTHON-4223 to track the serverless failure."
    ],
    "commit_messages": [
      "PYTHON-4210 Migrate Remaining Secrets to AWS Vaults (#1517)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc6fe44ee515ce6a4aec4",
    "number": 1516,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Final resync (#1516)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc6ff44ee515ce6a4aec5",
    "number": 1515,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": false,
    "comments": [
      "> For test.test_connection_logging.TestConnectionLoggingConnectionLogging.test_Connection_checkout_fails_due_to_error_establishing_connection, can you update the local copy of the spec test or skip the test and open a new ticket to track that remaining work?\r\n\r\nDone, switched the order to pass and opened a ticket: [PYTHON-4216](https://jira.mongodb.org/browse/PYTHON-4216)"
    ],
    "commit_messages": [
      "PYTHON-3457 Easier debugging with standardized logging (#1515)\n\nPYTHON-3458 Add command logging.\r\nPYTHON-3459 Add server selection logging.\r\nPYTHON-3473 Add connection pool logging.\r\nPYTHON-4167 Add documentation and examples.\r\n\r\nCo-authored-by: sleepyStick <itsirisho@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70044ee515ce6a4aec6",
    "number": 1514,
    "body": "I had missed updating the legacy test specs in https://github.com/mongodb/mongo-python-driver/pull/1489",
    "head_branch": "PYTHON-4018-2",
    "is_a_fork": true,
    "comments": [
      "Closing since PYTHON-4117 must be done first."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70244ee515ce6a4aec7",
    "number": 1513,
    "body": "Leveraged the [shlex.split](https://docs.python.org/3/library/shlex.html#shlex.split) command to get my shell output as a proper list of args. It gave me: ` [sys.executable, \"-c\", '\"from pymongo import MongoClient; c = MongoClient()\"']`\r\nTested Output on MacOS when commenting out RuntimeError catch:\r\n```python\r\ntest/test_monitor.py::TestMonitor::test_no_thread_start_runtime_err_on_shutdown FAILED                                                                                                                                                                                                                                                                                                 [100%]\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nself = <test.test_monitor.TestMonitor testMethod=test_no_thread_start_runtime_err_on_shutdown>\r\n\r\n    def test_no_thread_start_runtime_err_on_shutdown(self):\r\n        \"\"\"Test we silence noisy runtime errors fired when the MongoClient spawns a new thread\r\n        on process shutdown.\"\"\"\r\n        command = [sys.executable, \"-c\", \"from pymongo import MongoClient; c = MongoClient()\"]\r\n        completed_process: subprocess.CompletedProcess = subprocess.run(\r\n            command, capture_output=True\r\n        )\r\n    \r\n>       self.assertFalse(completed_process.stderr)\r\nE       AssertionError: b'Exception in thread pymongo_server_monitor_thread:\\nTraceback (most recent call last):\\n  File \"/opt/homebrew/Cellar/python@3.12/3.12.0/Frameworks/Python.framework/Versions/3.12/lib/python3.12/threading.py\", line 1052, in _bootstrap_inner\\n    self.run()\\n  File \"/opt/homebrew/Cellar/python@3.12/3.12.0/Frameworks/Python.framework/Versions/3.12/lib/python3.12/threading.py\", line 989, in run\\n    self._target(*self._args, **self._kwargs)\\n  File \"/Users/jib/mongo/mongo-python-driver/pymongo/periodic_executor.py\", line 141, in _run\\n    if not self._target():\\n           ^^^^^^^^^^^^^^\\n  File \"/Users/jib/mongo/mongo-python-driver/pymongo/monitor.py\", line 62, in target\\n    monitor._run()  # type:ignore[attr-defined]\\n    ^^^^^^^^^^^^^^\\n  File \"/Users/jib/mongo/mongo-python-driver/pymongo/monitor.py\", line 216, in _run\\n    self._start_rtt_monitor()\\n  File \"/Users/jib/mongo/mongo-python-driver/pymongo/monitor.py\", line 168, in _start_rtt_monitor\\n    self._rtt_monitor.open()\\n  File \"/Users/jib/mongo/mongo-python-driver/pymongo/monitor.py\", line 88, in open\\n    self._executor.open()\\n  File \"/Users/jib/mongo/mongo-python-driver/pymongo/periodic_executor.py\", line 98, in open\\n    thread.start()\\n  File \"/opt/homebrew/Cellar/python@3.12/3.12.0/Frameworks/Python.framework/Versions/3.12/lib/python3.12/threading.py\", line 971, in start\\n    _start_new_thread(self._bootstrap, ())\\nRuntimeError: can\\'t create new thread at interpreter shutdown\\n' is not false\r\n\r\ntest/test_monitor.py:91: AssertionError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n```\r\n\r\n[Evergreen Patch Run for Windows](https://spruce.mongodb.com/version/65c3ab420ae6063d5f9948f9/tasks?page=0&sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC&variant=%5Etests-windows-python-version__platform~windows-64-vsMulti-small_auth-ssl~noauth-nossl_python-version-windows~3.12%24)",
    "head_branch": "PYTHON-4147-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4147-fix: Remove quote wrapping and remove shell=true usage (#1513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70444ee515ce6a4aec8",
    "number": 1512,
    "body": "[PYTHON-4204](https://jira.mongodb.org/browse/PYTHON-4204) Optimize JSON decoding using lookup table to find $ keys.\r\n\r\nThis change improves JSON decoding by 20-50%+:\r\n<img width=\"845\" alt=\"Screenshot 2024-02-06 at 3 15 29 PM\" src=\"https://github.com/mongodb/mongo-python-driver/assets/5015933/0ac281bc-b0cf-4c75-adce-9aeb21daf40c\">\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_698599c737925ccac5c27cc58bb48b2692c74e30_65c2ad625623431a4f5596c5_24_02_06_22_06_33/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nI also tested set intersection but the for-loop approach performs better:\r\n```python\r\ndef object_hook(dct: Mapping[str, Any], json_options: JSONOptions = DEFAULT_JSON_OPTIONS) -> Any:\r\n    matches = set(dct) & _PARSERS_SET\r\n    if matches:\r\n        return _PARSERS[matches.pop()](dct, json_options)\r\n    return dct\r\n```",
    "head_branch": "opt-json-decode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4204 Optimize JSON decoding using lookup table to find $ keys (#1512)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70844ee515ce6a4aec9",
    "number": 1511,
    "body": "For additional context, the [spec](https://github.com/mongodb/specifications/blob/3b8e7e4135f2615fedef1ea6cd2046f5be5a1725/source/server-selection/server-selection.rst#L1239) for server selection logging requires that every time we select a server, we log the operation we plan to send to the server. Since we do not have a unified operations layer (see [PYTHON-1833](https://jira.mongodb.org/browse/PYTHON-1833)), this requires a large number of scattered changes to pass the operation name all the way down to server selection.\r\n\r\nThe spec tests are quite minimal, presumably because they assume drivers have a unified operations layer that makes logging operation names easy. I've added additional unified format tests for most of the operations we have separate handlers for. Depending on other driver implementations, these tests may be useful--I'll open a DRIVERS ticket to start the discussion for possible inclusion in the spec tests.",
    "head_branch": "PYTHON-3459",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3459 Add log messages to Server selection spec (#1511)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc70944ee515ce6a4aeca",
    "number": 1510,
    "body": "https://jira.mongodb.org/browse/PYTHON-2267\r\n\r\nSmall follow up to https://github.com/mongodb/mongo-python-driver/pull/1494",
    "head_branch": "PYTHON-2267-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2267 Test passing UUID to encrypt_expression (#1510)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70a44ee515ce6a4aecb",
    "number": 1509,
    "body": "https://jira.mongodb.org/browse/PYTHON-4179\r\n\r\nSmall follow up to https://github.com/mongodb/mongo-python-driver/pull/1493",
    "head_branch": "PYTHON-4179-part2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4179 Verify document_class type in json_util.loads test (#1509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70b44ee515ce6a4aecc",
    "number": 1508,
    "body": null,
    "head_branch": "PYTHON-4182",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4182 Skip test_unpin_after_TransientTransactionError_error_on_abort on latest (#1508)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70c44ee515ce6a4aecd",
    "number": 1507,
    "body": "…d monitoring (#1430)\r\n\r\nCo-authored-by: sleepyStick <itsirisho@gmail.com>",
    "head_branch": "standardized-logging",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc70e44ee515ce6a4aece",
    "number": 1506,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resync with master (#1506)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc71244ee515ce6a4aecf",
    "number": 1505,
    "body": "```\r\nall-dist-PYTHON-4195 ls | grep mac\r\npymongo-4.7.0.dev0-cp310-cp310-macosx_10_9_x86_64.whl\r\npymongo-4.7.0.dev0-cp310-cp310-macosx_11_0_arm64.whl\r\npymongo-4.7.0.dev0-cp311-cp311-macosx_10_9_x86_64.whl\r\npymongo-4.7.0.dev0-cp311-cp311-macosx_11_0_arm64.whl\r\npymongo-4.7.0.dev0-cp312-cp312-macosx_10_9_x86_64.whl\r\npymongo-4.7.0.dev0-cp312-cp312-macosx_11_0_arm64.whl\r\npymongo-4.7.0.dev0-cp37-cp37m-macosx_10_9_x86_64.whl\r\npymongo-4.7.0.dev0-cp38-cp38-macosx_10_9_x86_64.whl\r\npymongo-4.7.0.dev0-cp38-cp38-macosx_11_0_arm64.whl\r\npymongo-4.7.0.dev0-cp39-cp39-macosx_10_9_x86_64.whl\r\npymongo-4.7.0.dev0-cp39-cp39-macosx_11_0_arm64.whl\r\n```",
    "head_branch": "PYTHON-4195",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4195 Build x86_64 wheels for MacOS (#1505)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc71344ee515ce6a4aed0",
    "number": 1504,
    "body": null,
    "head_branch": "PYTHON-4196",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4196 Fix import in OIDC Test (#1504)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc71744ee515ce6a4aed1",
    "number": 1503,
    "body": null,
    "head_branch": "PYTHON-4187",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4187 Ensure secrets are not logged in Evergreen (#1503)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc71844ee515ce6a4aed2",
    "number": 1502,
    "body": "Bumps the actions group with 6 updates:\n\n| Package | From | To |\n| --- | --- | --- |\n| [actions/checkout](https://github.com/actions/checkout) | `2` | `4` |\n| [actions/setup-python](https://github.com/actions/setup-python) | `2` | `5` |\n| [docker/setup-qemu-action](https://github.com/docker/setup-qemu-action) | `2` | `3` |\n| [actions/upload-artifact](https://github.com/actions/upload-artifact) | `3` | `4` |\n| [actions/download-artifact](https://github.com/actions/download-artifact) | `3` | `4` |\n| [supercharge/mongodb-github-action](https://github.com/supercharge/mongodb-github-action) | `1.7.0` | `1.10.0` |\n\nUpdates `actions/checkout` from 2 to 4\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node20 by <a href=\"https://github.com/takost\"><code>@​takost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li>Support fetching without the --progress option by <a href=\"https://github.com/simonbaird\"><code>@​simonbaird</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n<li>Release 4.0.0 by <a href=\"https://github.com/takost\"><code>@​takost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1447\">actions/checkout#1447</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/takost\"><code>@​takost</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li><a href=\"https://github.com/simonbaird\"><code>@​simonbaird</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v4.0.0\">https://github.com/actions/checkout/compare/v3...v4.0.0</a></p>\n<h2>v3.6.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Mark test scripts with Bash'isms to be run via Bash by <a href=\"https://github.com/dscho\"><code>@​dscho</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1377\">actions/checkout#1377</a></li>\n<li>Add option to fetch tags even if fetch-depth &gt; 0 by <a href=\"https://github.com/RobertWieczoreck\"><code>@​RobertWieczoreck</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li>Release 3.6.0 by <a href=\"https://github.com/luketomlinson\"><code>@​luketomlinson</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/RobertWieczoreck\"><code>@​RobertWieczoreck</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li><a href=\"https://github.com/luketomlinson\"><code>@​luketomlinson</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.3...v3.6.0\">https://github.com/actions/checkout/compare/v3.5.3...v3.6.0</a></p>\n<h2>v3.5.3</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Checkout Issue in self hosted runner due to faulty submodule check-ins by <a href=\"https://github.com/megamanics\"><code>@​megamanics</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li>Fix typos found by codespell by <a href=\"https://github.com/DimitriPapadopoulos\"><code>@​DimitriPapadopoulos</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li>Add support for sparse checkouts by <a href=\"https://github.com/dscho\"><code>@​dscho</code></a> and <a href=\"https://github.com/dfdez\"><code>@​dfdez</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n<li>Release v3.5.3 by <a href=\"https://github.com/TingluoHuang\"><code>@​TingluoHuang</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1376\">actions/checkout#1376</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/megamanics\"><code>@​megamanics</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li><a href=\"https://github.com/DimitriPapadopoulos\"><code>@​DimitriPapadopoulos</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li><a href=\"https://github.com/dfdez\"><code>@​dfdez</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v3.5.3\">https://github.com/actions/checkout/compare/v3...v3.5.3</a></p>\n<h2>v3.5.2</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Use correct API url / endpoint in GHES by <a href=\"https://github.com/fhammerl\"><code>@​fhammerl</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1289\">actions/checkout#1289</a> based on <a href=\"https://redirect.github.com/actions/checkout/issues/1286\">#1286</a> by <a href=\"https://github.com/1newsr\"><code>@​1newsr</code></a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.1...v3.5.2\">https://github.com/actions/checkout/compare/v3.5.1...v3.5.2</a></p>\n<h2>v3.5.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Improve checkout performance on Windows runners by upgrading <code>@​actions/github</code> dependency by <a href=\"https://github.com/BrettDong\"><code>@​BrettDong</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/BrettDong\"><code>@​BrettDong</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v4.1.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1396\">Add support for partial checkout filters</a></li>\n</ul>\n<h2>v4.0.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1067\">Support fetching without the --progress option</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1436\">Update to node20</a></li>\n</ul>\n<h2>v3.6.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1377\">Fix: Mark test scripts with Bash'isms to be run via Bash</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/579\">Add option to fetch tags even if fetch-depth &gt; 0</a></li>\n</ul>\n<h2>v3.5.3</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1196\">Fix: Checkout fail in self-hosted runners when faulty submodule are checked-in</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1287\">Fix typos found by codespell</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1369\">Add support for sparse checkouts</a></li>\n</ul>\n<h2>v3.5.2</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1289\">Fix api endpoint for GHES</a></li>\n</ul>\n<h2>v3.5.1</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1246\">Fix slow checkout on Windows</a></li>\n</ul>\n<h2>v3.5.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1237\">Add new public key for known_hosts</a></li>\n</ul>\n<h2>v3.4.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1209\">Upgrade codeql actions to v2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1210\">Upgrade dependencies</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1225\">Upgrade <code>@​actions/io</code></a></li>\n</ul>\n<h2>v3.3.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1045\">Implement branch list using callbacks from exec function</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1050\">Add in explicit reference to private checkout options</a></li>\n<li>[Fix comment typos (that got added in <a href=\"https://redirect.github.com/actions/checkout/issues/770\">#770</a>)](<a href=\"https://redirect.github.com/actions/checkout/pull/1057\">actions/checkout#1057</a>)</li>\n</ul>\n<h2>v3.2.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/942\">Add GitHub Action to perform release</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/967\">Fix status badge</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1002\">Replace datadog/squid with ubuntu/squid Docker image</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/964\">Wrap pipeline commands for submoduleForeach in quotes</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1029\">Update <code>@​actions/io</code> to 1.1.2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1039\">Upgrading version to 3.2.0</a></li>\n</ul>\n<h2>v3.1.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/939\">Use <code>@​actions/core</code> <code>saveState</code> and <code>getState</code></a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/922\">Add <code>github-server-url</code> input</a></li>\n</ul>\n<h2>v3.0.2</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/b4ffde65f46336ab88eb53be808477a3936bae11\"><code>b4ffde6</code></a> Link to release page from what's new section (<a href=\"https://redirect.github.com/actions/checkout/issues/1514\">#1514</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8530928916aaef40f59e6f221989ccb31f5759e7\"><code>8530928</code></a> Correct link to GitHub Docs (<a href=\"https://redirect.github.com/actions/checkout/issues/1511\">#1511</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/7cdaf2fbc075e6f3b9ca94cfd6cec5adc8a75622\"><code>7cdaf2f</code></a> Update CODEOWNERS to Launch team (<a href=\"https://redirect.github.com/actions/checkout/issues/1510\">#1510</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608\"><code>8ade135</code></a> Prepare 4.1.0 release (<a href=\"https://redirect.github.com/actions/checkout/issues/1496\">#1496</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/c533a0a4cfc4962971818edcfac47a2899e69799\"><code>c533a0a</code></a> Add support for partial checkout filters (<a href=\"https://redirect.github.com/actions/checkout/issues/1396\">#1396</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/72f2cec99f417b1a1c5e2e88945068983b7965f9\"><code>72f2cec</code></a> Update README.md for V4 (<a href=\"https://redirect.github.com/actions/checkout/issues/1452\">#1452</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/3df4ab11eba7bda6032a0b82a6bb43b11571feac\"><code>3df4ab1</code></a> Release 4.0.0 (<a href=\"https://redirect.github.com/actions/checkout/issues/1447\">#1447</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8b5e8b768746b50394015010d25e690bfab9dfbc\"><code>8b5e8b7</code></a> Support fetching without the --progress option (<a href=\"https://redirect.github.com/actions/checkout/issues/1067\">#1067</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/97a652b80035363df47baee5031ec8670b8878ac\"><code>97a652b</code></a> Update default runtime to node20 (<a href=\"https://redirect.github.com/actions/checkout/issues/1436\">#1436</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/f43a0e5ff2bd294095638e18286ca9a3d1956744\"><code>f43a0e5</code></a> Release 3.6.0 (<a href=\"https://redirect.github.com/actions/checkout/issues/1437\">#1437</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/checkout/compare/v2...v4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `actions/setup-python` from 2 to 5\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v5.0.0</h2>\n<h2>What's Changed</h2>\n<p>In scope of this release, we update node version runtime from node16 to node20 (<a href=\"https://redirect.github.com/actions/setup-python/pull/772\">actions/setup-python#772</a>). Besides, we update dependencies to the latest versions.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4.8.0...v5.0.0\">https://github.com/actions/setup-python/compare/v4.8.0...v5.0.0</a></p>\n<h2>v4.8.0</h2>\n<h2>What's Changed</h2>\n<p>In scope of this release we added support for GraalPy (<a href=\"https://redirect.github.com/actions/setup-python/pull/694\">actions/setup-python#694</a>). You can use this snippet to set up GraalPy:</p>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v4\n- uses: actions/setup-python@v4 \n  with:\n    python-version: 'graalpy-22.3' \n- run: python my_script.py\n</code></pre>\n<p>Besides, the release contains such changes as:</p>\n<ul>\n<li>Trim python version when reading from file by <a href=\"https://github.com/FerranPares\"><code>@​FerranPares</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/628\">actions/setup-python#628</a></li>\n<li>Use non-deprecated versions in examples by <a href=\"https://github.com/jeffwidman\"><code>@​jeffwidman</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/724\">actions/setup-python#724</a></li>\n<li>Change deprecation comment to past tense by <a href=\"https://github.com/jeffwidman\"><code>@​jeffwidman</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/723\">actions/setup-python#723</a></li>\n<li>Bump <code>@​babel/traverse</code> from 7.9.0 to 7.23.2 by <a href=\"https://github.com/dependabot\"><code>@​dependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/743\">actions/setup-python#743</a></li>\n<li>advanced-usage.md: Encourage the use actions/checkout@v4 by <a href=\"https://github.com/cclauss\"><code>@​cclauss</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/729\">actions/setup-python#729</a></li>\n<li>Examples now use checkout@v4 by <a href=\"https://github.com/simonw\"><code>@​simonw</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/738\">actions/setup-python#738</a></li>\n<li>Update actions/checkout to v4 by <a href=\"https://github.com/dmitry-shibanov\"><code>@​dmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/761\">actions/setup-python#761</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/FerranPares\"><code>@​FerranPares</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/628\">actions/setup-python#628</a></li>\n<li><a href=\"https://github.com/timfel\"><code>@​timfel</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/694\">actions/setup-python#694</a></li>\n<li><a href=\"https://github.com/jeffwidman\"><code>@​jeffwidman</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/724\">actions/setup-python#724</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.8.0\">https://github.com/actions/setup-python/compare/v4...v4.8.0</a></p>\n<h2>v4.7.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Bump word-wrap from 1.2.3 to 1.2.4 by <a href=\"https://github.com/dependabot\"><code>@​dependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/702\">actions/setup-python#702</a></li>\n<li>Add range validation for toml files by <a href=\"https://github.com/dmitry-shibanov\"><code>@​dmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/726\">actions/setup-python#726</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.7.1\">https://github.com/actions/setup-python/compare/v4...v4.7.1</a></p>\n<h2>v4.7.0</h2>\n<p>In scope of this release, the support for reading python version from pyproject.toml was added (<a href=\"https://redirect.github.com/actions/setup-python/pull/669\">actions/setup-python#669</a>).</p>\n<pre lang=\"yaml\"><code>      - name: Setup Python\n        uses: actions/setup-python@v4\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/0a5c61591373683505ea898e09a3ea4f39ef2b9c\"><code>0a5c615</code></a> Update action to node20 (<a href=\"https://redirect.github.com/actions/setup-python/issues/772\">#772</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0ae58361cdfd39e2950bed97a1e26aa20c3d8955\"><code>0ae5836</code></a> Add example of GraalPy to docs (<a href=\"https://redirect.github.com/actions/setup-python/issues/773\">#773</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/b64ffcaf5b410884ad320a9cfac8866006a109aa\"><code>b64ffca</code></a> update actions/checkout to v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/761\">#761</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8d2896179abf658742de432b3f203d2c2d86a587\"><code>8d28961</code></a> Examples now use checkout@v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/738\">#738</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7bc6abb01e0555719edc2dbca70a2fde309e5e56\"><code>7bc6abb</code></a> advanced-usage.md: Encourage the use actions/checkout@v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/729\">#729</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/e8111cec9d3dc15220d8a3b638f08419f57b906a\"><code>e8111ce</code></a> Bump <code>@​babel/traverse</code> from 7.9.0 to 7.23.2 (<a href=\"https://redirect.github.com/actions/setup-python/issues/743\">#743</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/a00ea43da65e7c04d2bdae58b3afecd77057eb9e\"><code>a00ea43</code></a> add fix for graalpy ci (<a href=\"https://redirect.github.com/actions/setup-python/issues/741\">#741</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8635b1ccc5934e73ed3510980fd2e7790b85839b\"><code>8635b1c</code></a> Change deprecation comment to past tense (<a href=\"https://redirect.github.com/actions/setup-python/issues/723\">#723</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f6cc428f535856f9c23558d01765a42a4d6cf758\"><code>f6cc428</code></a> Use non-deprecated versions in examples (<a href=\"https://redirect.github.com/actions/setup-python/issues/724\">#724</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5f2af211d616f86005883b44826180b21abb4060\"><code>5f2af21</code></a> Add GraalPy support (<a href=\"https://redirect.github.com/actions/setup-python/issues/694\">#694</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v2...v5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `docker/setup-qemu-action` from 2 to 3\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/docker/setup-qemu-action/releases\">docker/setup-qemu-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>Node 20 as default runtime (requires <a href=\"https://github.com/actions/runner/releases/tag/v2.308.0\">Actions Runner v2.308.0</a> or later) by <a href=\"https://github.com/crazy-max\"><code>@​crazy-max</code></a> in <a href=\"https://redirect.github.com/docker/setup-qemu-action/pull/102\">docker/setup-qemu-action#102</a></li>\n<li>Bump <code>@​actions/core</code> from 1.10.0 to 1.10.1 in <a href=\"https://redirect.github.com/docker/setup-qemu-action/pull/103\">docker/setup-qemu-action#103</a></li>\n<li>Bump semver from 6.3.0 to 6.3.1 in <a href=\"https://redirect.github.com/docker/setup-qemu-action/pull/89\">docker/setup-qemu-action#89</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/docker/setup-qemu-action/compare/v2.2.0...v3.0.0\">https://github.com/docker/setup-qemu-action/compare/v2.2.0...v3.0.0</a></p>\n<h2>v2.2.0</h2>\n<ul>\n<li>Trim off spaces in <code>platforms</code> input by <a href=\"https://github.com/Chocobo1\"><code>@​Chocobo1</code></a> in <a href=\"https://redirect.github.com/docker/setup-qemu-action/pull/64\">docker/setup-qemu-action#64</a></li>\n<li>Switch to actions-toolkit implementation by <a href=\"https://github.com/crazy-max\"><code>@​crazy-max</code></a> in <a href=\"https://redirect.github.com/docker/setup-qemu-action/pull/70\">docker/setup-qemu-action#70</a> <a href=\"https://redirect.github.com/docker/setup-qemu-action/pull/80\">docker/setup-qemu-action#80</a> <a href=\"https://redirect.github.com/docker/setup-qemu-action/pull/83\">docker/setup-qemu-action#83</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/docker/setup-qemu-action/compare/v2.1.0...v2.2.0\">https://github.com/docker/setup-qemu-action/compare/v2.1.0...v2.2.0</a></p>\n<h2>v2.1.0</h2>\n<ul>\n<li>Use context for inputs by <a href=\"https://github.com/crazy-max\"><code>@​crazy-max</code></a> (<a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/62\">#62</a>)</li>\n<li>Use built-in <code>getExecOutput</code> by <a href=\"https://github.com/crazy-max\"><code>@​crazy-max</code></a> (<a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/61\">#61</a>)</li>\n<li>Remove workaround for <code>setOutput</code> by <a href=\"https://github.com/crazy-max\"><code>@​crazy-max</code></a> (<a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/63\">#63</a>)</li>\n<li>Bump <code>@​actions/core</code> from 1.6.0 to 1.10.0 (<a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/54\">#54</a> <a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/58\">#58</a> <a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/59\">#59</a>)</li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/docker/setup-qemu-action/compare/v2.0.0...v2.1.0\">https://github.com/docker/setup-qemu-action/compare/v2.0.0...v2.1.0</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/68827325e0b33c7199eb31dd4e31fbe9023e06e3\"><code>6882732</code></a> Merge pull request <a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/103\">#103</a> from docker/dependabot/npm_and_yarn/actions/core-1.10.1</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/183f4af5043c24c5dcd58e6e9868b7df0a201a17\"><code>183f4af</code></a> chore: update generated content</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/f17493529ee8f8b9fd58ed31aa1e9816c8345eb8\"><code>f174935</code></a> build(deps): bump <code>@​actions/core</code> from 1.10.0 to 1.10.1</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/2e423eb50075d10a6af463e39e267d4057cc07bb\"><code>2e423eb</code></a> Merge pull request <a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/89\">#89</a> from docker/dependabot/npm_and_yarn/semver-6.3.1</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/ecc406afa7d79acce0ed8a04bb5eb086136fd000\"><code>ecc406a</code></a> Bump semver from 6.3.0 to 6.3.1</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/12dec5e201ab2f6dbea47c28f4a138590189069a\"><code>12dec5e</code></a> Merge pull request <a href=\"https://redirect.github.com/docker/setup-qemu-action/issues/102\">#102</a> from crazy-max/update-node20</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/c29b31213096fed2f8b8b36e66385d52653bf332\"><code>c29b312</code></a> chore: node 20 as default runtime</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/34ae628c8f4fb0d5c8921b9a0ffa9dcf66120c07\"><code>34ae628</code></a> chore: update generated content</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/1f3d2e1ac09548bbfb7d44b1809ac66e3d551ea4\"><code>1f3d2e1</code></a> chore: fix author in package.json</li>\n<li><a href=\"https://github.com/docker/setup-qemu-action/commit/277dbe8c9c1990b42dc38cb1f35a593889a31a62\"><code>277dbe8</code></a> vendor: bump <code>@​docker/actions-toolkit</code> from 0.3.0 to 0.12.0</li>\n<li>Additional commits viewable in <a href=\"https://github.com/docker/setup-qemu-action/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `actions/upload-artifact` from 3 to 4\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/upload-artifact/releases\">actions/upload-artifact's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h2>What's Changed</h2>\n<p>The release of upload-artifact@v4 and download-artifact@v4 are major changes to the backend architecture of Artifacts. They have numerous performance and behavioral improvements.</p>\n<p>ℹ️ However, this is a major update that includes breaking changes. Artifacts created with versions v3 and below are not compatible with the v4 actions. Uploads and downloads <em>must</em> use the same major actions versions. There are also key differences from previous versions that may require updates to your workflows.</p>\n<p>For more information, please see:</p>\n<ol>\n<li>The <a href=\"https://github.blog/changelog/2023-12-14-github-actions-artifacts-v4-is-now-generally-available/\">changelog</a> post.</li>\n<li>The <a href=\"https://github.com/actions/upload-artifact/blob/main/README.md\">README</a>.</li>\n<li>The <a href=\"https://github.com/actions/upload-artifact/blob/main/docs/MIGRATION.md\">migration documentation</a>.</li>\n<li>As well as the underlying npm package, <a href=\"https://github.com/actions/toolkit/tree/main/packages/artifact\"><code>@​actions/artifact</code></a> documentation.</li>\n</ol>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/vmjoseph\"><code>@​vmjoseph</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/upload-artifact/pull/464\">actions/upload-artifact#464</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/upload-artifact/compare/v3...v4.0.0\">https://github.com/actions/upload-artifact/compare/v3...v4.0.0</a></p>\n<h2>v3.1.3</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>chore(github): remove trailing whitespaces by <a href=\"https://github.com/ljmf00\"><code>@​ljmf00</code></a> in <a href=\"https://redirect.github.com/actions/upload-artifact/pull/313\">actions/upload-artifact#313</a></li>\n<li>Bump <code>@​actions/artifact</code> version to v1.1.2 by <a href=\"https://github.com/bethanyj28\"><code>@​bethanyj28</code></a> in <a href=\"https://redirect.github.com/actions/upload-artifact/pull/436\">actions/upload-artifact#436</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/upload-artifact/compare/v3...v3.1.3\">https://github.com/actions/upload-artifact/compare/v3...v3.1.3</a></p>\n<h2>v3.1.2</h2>\n<ul>\n<li>Update all <code>@actions/*</code> NPM packages to their latest versions- <a href=\"https://redirect.github.com/actions/upload-artifact/issues/374\">#374</a></li>\n<li>Update all dev dependencies to their most recent versions - <a href=\"https://redirect.github.com/actions/upload-artifact/issues/375\">#375</a></li>\n</ul>\n<h2>v3.1.1</h2>\n<ul>\n<li>Update actions/core package to latest version to remove <code>set-output</code> deprecation warning <a href=\"https://redirect.github.com/actions/upload-artifact/issues/351\">#351</a></li>\n</ul>\n<h2>v3.1.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Bump <code>@​actions/artifact</code> to v1.1.0 (<a href=\"https://redirect.github.com/actions/upload-artifact/pull/327\">actions/upload-artifact#327</a>)\n<ul>\n<li>Adds checksum headers on artifact upload (<a href=\"https://redirect.github.com/actions/toolkit/pull/1095\">actions/toolkit#1095</a>) (<a href=\"https://redirect.github.com/actions/toolkit/pull/1063\">actions/toolkit#1063</a>)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/26f96dfa697d77e81fd5907df203aa23a56210a8\"><code>26f96df</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/upload-artifact/issues/505\">#505</a> from actions/robherley/merge-artifacts</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/530ed2c9b8e7b46db7acf98b7e543836a040586e\"><code>530ed2c</code></a> use correct artifact name in test</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/53ef6987b3562a24090358abb83a07f2c2bfec26\"><code>53ef698</code></a> add additional integration test for merge all behavior</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/90b0f8eed8fd7a9e62025ff26858a0f618d12b53\"><code>90b0f8e</code></a> add workflow to test merging</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/199a58f54fa418c391917374e9d11f5a5e618ae9\"><code>199a58f</code></a> more docs</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/3f353f9d9ee7e6a8313bfb227f44aa283e6832c9\"><code>3f353f9</code></a> ncc</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/997fffa3558d08f16f0c12036708e1ce7c0a7430\"><code>997fffa</code></a> add merge artifact sub-action</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/52899c8c02604e1c6c9ea56b52ead4671321bd05\"><code>52899c8</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/upload-artifact/issues/504\">#504</a> from actions/robherley/reorganize</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/da58a3f7b2ea3d2db018d82fe856b2d4b297de35\"><code>da58a3f</code></a> ncc</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/1f64adb8530b493d492e8084db08a55f3856e94e\"><code>1f64adb</code></a> fix import</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/upload-artifact/compare/v3...v4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `actions/download-artifact` from 3 to 4\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/download-artifact/releases\">actions/download-artifact's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h2>What's Changed</h2>\n<p>The release of upload-artifact@v4 and download-artifact@v4 are major changes to the backend architecture of Artifacts. They have numerous performance and behavioral improvements.</p>\n<p>ℹ️ However, this is a major update that includes breaking changes. Artifacts created with versions v3 and below are not compatible with the v4 actions. Uploads and downloads <em>must</em> use the same major actions versions. There are also key differences from previous versions that may require updates to your workflows.</p>\n<p>For more information, please see:</p>\n<ol>\n<li>The <a href=\"https://github.blog/changelog/2023-12-14-github-actions-artifacts-v4-is-now-generally-available/\">changelog</a> post.</li>\n<li>The <a href=\"https://github.com/actions/download-artifact/blob/main/README.md\">README</a>.</li>\n<li>The <a href=\"https://github.com/actions/upload-artifact/blob/main/docs/MIGRATION.md\">migration documentation</a>.</li>\n<li>As well as the underlying npm package, <a href=\"https://github.com/actions/toolkit/tree/main/packages/artifact\"><code>@​actions/artifact</code></a> documentation.</li>\n</ol>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/bflad\"><code>@​bflad</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/download-artifact/pull/194\">actions/download-artifact#194</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/download-artifact/compare/v3...v4.0.0\">https://github.com/actions/download-artifact/compare/v3...v4.0.0</a></p>\n<h2>v3.0.2</h2>\n<ul>\n<li>Bump <code>@actions/artifact</code> to v1.1.1 - <a href=\"https://redirect.github.com/actions/download-artifact/pull/195\">actions/download-artifact#195</a></li>\n<li>Fixed a bug in Node16 where if an HTTP download finished too quickly (&lt;1ms, e.g. when it's mocked) we attempt to delete a temp file that has not been created yet <a href=\"hhttps://redirect.github.com/actions/toolkit/pull/1278\">actions/toolkit#1278</a></li>\n</ul>\n<h2>v3.0.1</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/download-artifact/pull/178\">Bump <code>@​actions/core</code> to 1.10.0</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/download-artifact/commit/6b208ae046db98c579e8a3aa621ab581ff575935\"><code>6b208ae</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/download-artifact/issues/274\">#274</a> from actions/vmjoseph/timeout-patch</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/6c5b5806e1d833ffbeb6c412b38ba07d67086dc6\"><code>6c5b580</code></a> only adding updated license</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/5f5015dc38f8eb6cafa9c4d68689495abffbea38\"><code>5f5015d</code></a> readding index</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/1fddaaf0f1912c34f984d46c39e99a66afa07172\"><code>1fddaaf</code></a> Revert &quot;updating licenses&quot;</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/8aa9e2115bb091db1962857dc393a054568a7851\"><code>8aa9e21</code></a> Revert &quot;updating dist&quot;</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/657edd9b813fc9cdb0cddf8601de283f4ecea661\"><code>657edd9</code></a> updating licenses</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/555a2fc1299fb63c5a4e673a65c8b9e6e3474b22\"><code>555a2fc</code></a> updating dist</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/4fc4d70d4c55025435f9bfd763515cecf048fc86\"><code>4fc4d70</code></a> updating lock</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/072ac9dcebef67fdbbc9612b2879103e0e877f16\"><code>072ac9d</code></a> updating version no</li>\n<li><a href=\"https://github.com/actions/download-artifact/commit/038dc0329f0e804ae981db8af9f43b00a55b10de\"><code>038dc03</code></a> updating version no</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/download-artifact/compare/v3...v4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\nUpdates `supercharge/mongodb-github-action` from 1.7.0 to 1.10.0\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/supercharge/mongodb-github-action/releases\">supercharge/mongodb-github-action's releases</a>.</em></p>\n<blockquote>\n<h2>1.10.0</h2>\n<p>Release <a href=\"https://github.com/supercharge/mongodb-github-action/releases/tag/1.10.0\">1.10.0</a></p>\n<h2>1.10.0</h2>\n<p>Release <a href=\"https://github.com/supercharge/mongodb-github-action/releases/tag/v1.10.0\">v1.10.0</a></p>\n<h2>1.9.0</h2>\n<p>Release 1.9.0</p>\n<h2>1.8.0</h2>\n<p>Release 1.8.0</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/supercharge/mongodb-github-action/blob/main/CHANGELOG.md\">supercharge/mongodb-github-action's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/superchargejs/mongodb-github-action/compare/v1.9.0...v1.10.0\">1.10.0</a> - 2023-08-07</h2>\n<h3>Added</h3>\n<ul>\n<li>MongoDB single instance: wait for MongoDB to be ready</li>\n</ul>\n<h3>Updated</h3>\n<ul>\n<li>bump dependencies</li>\n</ul>\n<h2><a href=\"https://github.com/superchargejs/mongodb-github-action/compare/v1.8.0...v1.9.0\">1.9.0</a> - 2023-02-10</h2>\n<h3>Added</h3>\n<ul>\n<li>exit early in case of Docker issues (e.g., unavailable MongoDB version)</li>\n<li>validate GitHub Action typings using <a href=\"https://github.com/krzema12/github-actions-typing\">krzema12/github-actions-typing</a></li>\n</ul>\n<h3>Updated</h3>\n<ul>\n<li>bump dependencies</li>\n</ul>\n<h2><a href=\"https://github.com/superchargejs/mongodb-github-action/compare/v1.7.0...v1.8.0\">1.8.0</a> - 2022-08-26</h2>\n<h3>Added</h3>\n<ul>\n<li>support MongoDB 6.x. Thanks to <a href=\"https://github.com/ecarruda\">Evandro aka ecarruda</a>!</li>\n<li>use <code>mongo</code> for MongoDB 4.x release line</li>\n<li>use <code>mongosh</code> for MongoDB 5.x and 6.x release lines</li>\n</ul>\n<h3>Updated</h3>\n<ul>\n<li>bump dependencies</li>\n<li>use <code>@supercharge/eslint-config</code> instead of <code>eslint-config-standard</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/b0a1493307c4e9b82ed61f3858d606c5ff190c64\"><code>b0a1493</code></a> Release 1.10.0</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/434c46866e619990210bc04f50fdaf0896d7f4bd\"><code>434c468</code></a> Merge pull request <a href=\"https://redirect.github.com/supercharge/mongodb-github-action/issues/51\">#51</a> from supercharge/wait-for-mongodb</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/b092ce44fc26108798ce9992370b739245c0cdab\"><code>b092ce4</code></a> prepare 1.10.0 release</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/68beaf3f5ce37ca5210e2300eacdfa330ab3e71d\"><code>68beaf3</code></a> move test files back into folders because UVU requires them in this structure</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/b1bd6deddebabf65eb4e216fa1ead26511aae27f\"><code>b1bd6de</code></a> formatting</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/39b8759260587e37e52e51bbd81e83e0dc57dea5\"><code>39b8759</code></a> bump deps</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/5d8eeca8deea211d7ebe9fa74dfb31e1943d9fa1\"><code>5d8eeca</code></a> move test files to top level test folder</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/f1beda13bb1c04c93f82fd15c2618520dc018968\"><code>f1beda1</code></a> refine node versions</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/9157ea1ad1a3c9f04990fd3d97f65a8800ed6e62\"><code>9157ea1</code></a> refinements</li>\n<li><a href=\"https://github.com/supercharge/mongodb-github-action/commit/2627b2a7ecda5a3c78e62887a6cbb043ec57407d\"><code>2627b2a</code></a> formatting</li>\n<li>Additional commits viewable in <a href=\"https://github.com/supercharge/mongodb-github-action/compare/1.7.0...1.10.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore <dependency name> major version` will close this group update PR and stop Dependabot creating any more for the specific dependency's major version (unless you unignore this specific dependency's major version or upgrade to it yourself)\n- `@dependabot ignore <dependency name> minor version` will close this group update PR and stop Dependabot creating any more for the specific dependency's minor version (unless you unignore this specific dependency's minor version or upgrade to it yourself)\n- `@dependabot ignore <dependency name>` will close this group update PR and stop Dependabot creating any more for the specific dependency (unless you unignore this specific dependency or upgrade to it yourself)\n- `@dependabot unignore <dependency name>` will remove all of the ignore conditions of the specified dependency\n- `@dependabot unignore <dependency name> <ignore condition>` will remove the ignore condition of the specified dependency and ignore conditions\n\n\n</details>",
    "head_branch": "dependabot/github_actions/actions-cbc88f5cc4",
    "is_a_fork": false,
    "comments": [
      "We have to work around: https://github.com/actions/upload-artifact/issues/478",
      "I got a slack ping about this. I'lll leave it in your capable hands, @blink1073 \r\n\r\n[#1502] [Bump the actions group with 6 updates](https://github.com/mongodb/mongo-python-driver/pull/1502) (dependabot[bot])\r\n 2 hours stale · 2 hours old · Waiting on \r\n[@Casey](https://mongodb.slack.com/team/U062RDWEQLF)"
    ],
    "commit_messages": [
      "Bump the actions group with 6 updates (#1502)\n\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc71844ee515ce6a4aed3",
    "number": 1501,
    "body": null,
    "head_branch": "PYTHON-4186",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4186 Add Dependabot Config for GitHub Actions (#1501)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc71a44ee515ce6a4aed4",
    "number": 1500,
    "body": null,
    "head_branch": "tox_package_editable",
    "is_a_fork": true,
    "comments": [
      "I had to make a couple tweaks after merging #1503 "
    ],
    "commit_messages": [
      "PYTHON-4184 Clean up tox config (#1500)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc71c44ee515ce6a4aed5",
    "number": 1499,
    "body": "[PYTHON-3745](https://jira.mongodb.org/browse/PYTHON-3745) Continuation of https://github.com/mongodb/mongo-python-driver/pull/1434.\r\n\r\nTODO:\r\n\r\n- [x] Investigate why mod_wsgi 4.x Python 3.7 Ubuntu 22.04 is failing intermittently after these changes (both with and without the Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED block).\r\n- [ ] ~Open a mod_wsgi issue to ask if multiphase init modules are supported: https://github.com/GrahamDumpleton/mod_wsgi~\r\n\r\nAha! I found the answer. We were running into this issue: https://github.com/python/cpython/commit/c2b0b12d1a137ada1023ab7c10b8d9a0249d95f9\r\n\r\nThis behavior was fixed in 3.9 hence why we only saw crashes on 3.7 and 3.8:\r\nhttps://github.com/python/cpython/commit/5b1ef200d31a74a9b478d0217d73ed0a659a8a06",
    "head_branch": "blink1073-PYTHON-3745",
    "is_a_fork": true,
    "comments": [
      "Haven't been able to reproduce the mod_msgi failures yet but this github actions run failed in an odd way with no output (https://github.com/mongodb/mongo-python-driver/actions/runs/7749240042/job/21133401896?pr=1499#step:7:47):\r\n```\r\ntest: commands[2]> pytest -v --durations=5 --maxfail=10\r\ntest: exit -11 (0.34 seconds) /home/runner/work/mongo-python-driver/mongo-python-driver> pytest -v --durations=5 --maxfail=10 pid=2607\r\n.pkg: _exit> python /opt/hostedtoolcache/Python/3.7.17/x64/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n  test: FAIL code -11 (15.40=setup[11.97]+cmd[0.00,3.08,0.34] seconds)\r\n  evaluation failed :( (15.[49](https://github.com/mongodb/mongo-python-driver/actions/runs/7749240042/job/21133401896?pr=1499#step:7:50) seconds)\r\n```\r\n\r\nAccording to stack overflow this means a segmentation fault: https://stackoverflow.com/questions/24139389/unable-to-find-out-what-return-code-of-11-means",
      "Hmm so maybe we need to wait until we drop Python 3.7?",
      "Or we only use multi-phase init on Python>=3.8? There's also some odd behavior in the mod_wsgi tests but it could be caused by its use of _thread.interrupt_main() and _thread.exit():\r\n\r\nOn Python 3.8:\r\n```\r\n [2024/02/01 16:16:36.130] + /opt/python/3.8/bin/python3 /data/mci/25d5fb853efcf1d5bea7fcd6b74711c9/src/test/mod_wsgi_test/test_client.py -n 25000 -t 100 parallel http://localhost:8080/interpreter1/data/mci/25d5fb853efcf1d5bea7fcd6b74711c9/src http://localhost:8080/interpreter2/data/mci/25d5fb853efcf1d5bea7fcd6b74711c9/src\r\n [2024/02/01 16:17:08.339] Getting ['http://localhost:8080/interpreter1/data/mci/25d5fb853efcf1d5bea7fcd6b74711c9/src', 'http://localhost:8080/interpreter2/data/mci/25d5fb853efcf1d5bea7fcd6b74711c9/src'] 25000 times total in 100 threads, 250 times per thread\r\n [2024/02/01 16:17:08.339] 1000\r\n [2024/02/01 16:17:08.339] 2000\r\n [2024/02/01 16:17:08.339] 3000\r\n [2024/02/01 16:17:08.339] Remote end closed connection without response\r\n [2024/02/01 16:17:08.339] 4000\r\n [2024/02/01 16:17:08.339] 5000\r\n [2024/02/01 16:17:08.339] Remote end closed connection without response\r\n [2024/02/01 16:17:08.339] 6000\r\n [2024/02/01 16:17:08.339] Remote end closed connection without response\r\n [2024/02/01 16:17:08.339] Remote end closed connection without response\r\n [2024/02/01 16:17:08.339] 7000\r\n [2024/02/01 16:17:08.339] 8000\r\n [2024/02/01 16:17:08.339] 9000\r\n [2024/02/01 16:17:08.339] 10000\r\n [2024/02/01 16:17:08.339] 11000\r\n [2024/02/01 16:17:08.339] 12000\r\n [2024/02/01 16:17:08.339] 13000\r\n [2024/02/01 16:17:08.339] 14000\r\n [2024/02/01 16:17:08.339] 15000\r\n [2024/02/01 16:17:08.339] 16000\r\n [2024/02/01 16:17:08.339] 17000\r\n [2024/02/01 16:17:08.339] 18000\r\n [2024/02/01 16:17:08.339] 19000\r\n [2024/02/01 16:17:08.339] 20000\r\n [2024/02/01 16:17:08.339] 21000\r\n [2024/02/01 16:17:08.340] Traceback (most recent call last):\r\n [2024/02/01 16:17:08.340]   File \"/data/mci/25d5fb853efcf1d5bea7fcd6b74711c9/src/test/mod_wsgi_test/test_client.py\", line 186, in <module>\r\n [2024/02/01 16:17:08.340]     main(options, mode, urls)\r\n [2024/02/01 16:17:08.340]   File \"/data/mci/25d5fb853efcf1d5bea7fcd6b74711c9/src/test/mod_wsgi_test/test_client.py\", line 149, in main\r\n [2024/02/01 16:17:08.340]     t.join()\r\n [2024/02/01 16:17:08.340]   File \"/opt/python/3.8/lib/python3.8/threading.py\", line 1011, in join\r\n [2024/02/01 16:17:08.340]     self._wait_for_tstate_lock()\r\n [2024/02/01 16:17:08.340]   File \"/opt/python/3.8/lib/python3.8/threading.py\", line 1027, in _wait_for_tstate_lock\r\n [2024/02/01 16:17:08.340]     elif lock.acquire(block, timeout):\r\n [2024/02/01 16:17:08.340] KeyboardInterrupt\r\n [2024/02/01 17:15:53.892] Hit exec timeout (1h0m0s).\r\n [2024/02/01 17:15:53.954] Command 'shell.exec' in function 'run mod_wsgi tests' (step 2 of 2) stopped early: context canceled.\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_mod_wsgi__platform~ubuntu_22.04_python_version~3.8_mod_wsgi_version~4_mod_wsgi_embedded_mode_standalone_patch_78ccdcb2b3d99784628b6575c223c6476c26d741_65bc30973627e0caff68b224_24_02_02_00_00_24/logs?execution=0&sortBy=STATUS&sortDir=ASC",
      "> Or we only use multi-phase init on Python>=3.8? \r\n\r\nYeah, that's a good idea.",
      "I've confirmed that test_sigstop_sigcont is failing due to the subprocess hitting a SIGSEGV but unfortunately the core file is not helpful:\r\n```\r\n(lldb) thread backtrace all\r\n* thread #1, name = 'python', stop reason = signal SIGSEGV\r\n  * frame #0: 0x00007f48d75f08c6\r\n(lldb)\r\n```\r\n\r\nAttempting to debug on the host itself. Hopefully that yields more info.",
      "Bingo:\r\n```\r\ngdb python -c /cores/python.3149.1708031067\r\nGNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1\r\nCopyright (C) 2022 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\r\nType \"show copying\" and \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<https://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n    <http://www.gnu.org/software/gdb/documentation/>.\r\n\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from python...\r\n[New LWP 3149]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\nCore was generated by `/opt/hostedtoolcache/Python/3.7.17/x64/bin/python /home/runner/work/mongo-pytho'.\r\nProgram terminated with signal SIGSEGV, Segmentation fault.\r\n#0  0x00007ff722e738c6 in _cbson_traverse (m=0x7ff722f0b1d0, visit=0x7ff723b80010 <visit_decref>, arg=0x0) at bson/_cbsonmodule.c:3139\r\n3139        Py_VISIT(GETSTATE(m)->Binary);\r\n```\r\n\r\nAnd:\r\n```\r\nThread 1 (Thread 0x7ff723e06b80 (LWP 3149)):\r\n#0  0x00007ff722e738c6 in _cbson_traverse (m=0x7ff722f0b1d0, visit=0x7ff723b80010 <visit_decref>, arg=0x0) at bson/_cbsonmodule.c:3139\r\n#1  0x00007ff723b1bb14 in module_traverse (m=0x7ff722f0b1d0, visit=0x7ff723b80010 <visit_decref>, arg=0x0) at Objects/moduleobject.c:733\r\n#2  0x00007ff723b7f673 in subtract_refs (containers=<optimized out>) at Modules/gcmodule.c:296\r\n#3  collect (generation=0, n_collected=0x7ffc6d3e01f8, n_uncollectable=0x7ffc6d3e0200, nofail=0) at Modules/gcmodule.c:853\r\n#4  0x00007ff723be241e in collect_with_callback (generation=0) at Modules/gcmodule.c:1025\r\n#5  0x00007ff723b7f308 in _PyObject_GC_Alloc (basicsize=<optimized out>, use_calloc=0) at Modules/gcmodule.c:1705\r\n#6  _PyObject_GC_Malloc (basicsize=<optimized out>) at Modules/gcmodule.c:1715\r\n#7  0x00007ff723b7f331 in _PyObject_GC_New (tp=tp@entry=0x7ff723cd8b20 <PyCFunction_Type>) at Modules/gcmodule.c:1727\r\n#8  0x00007ff723b1b895 in PyCFunction_NewEx (ml=ml@entry=0x7ff722e804e0 <_CBSONMethods+160>, self=self@entry=0x7ff722f0b1d0, module=module@entry=0x7ff7230acab0) at Objects/methodobject.c:38\r\n#9  0x00007ff723b1ba68 in _add_methods_to_object (module=0x7ff722f0b1d0, name=0x7ff7230acab0, functions=<optimized out>) at Objects/moduleobject.c:159\r\n#10 0x00007ff723ba81be in PyModule_FromDefAndSpec2 (def=0x7ff722e803a0 <moduledef>, spec=spec@entry=0x7ff722f01dd0, module_api_version=module_api_version@entry=1013) at Objects/moduleobject.c:346\r\n#11 0x00007ff723bd177b in _PyImport_LoadDynamicModuleWithSpec (spec=spec@entry=0x7ff722f01dd0, fp=fp@entry=0x0) at ./Python/importdl.c:193\r\n#12 0x00007ff723bd0c13 in _imp_create_dynamic_impl (module=<optimized out>, file=<optimized out>, spec=0x7ff722f01dd0) at Python/import.c:2174\r\n#13 _imp_create_dynamic (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/import.c.h:289\r\n#14 0x00007ff723af6909 in _PyMethodDef_RawFastCallDict (method=0x7ff723cf18a0 <imp_methods+320>, self=0x7ff7238f1d10, args=<optimized out>, nargs=1, kwargs=<optimized out>) at Objects/call.c:530\r\n#15 0x00007ff723af6847 in _PyCFunction_FastCallDict (func=0x7ff723909aa0, args=<optimized out>, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:585\r\n#16 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff722f078c0, callargs=<optimized out>, func=0x7ff723909aa0) at Python/ceval.c:4641\r\n#17 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#18 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ff7235081e0, argcount=argcount@entry=2, kwnames=0x0, kwargs=0x7ff7235081f0, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#19 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7235081e0, nargs=2, kwnames=<optimized out>) at Objects/call.c:433\r\n#20 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e0730, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#21 0x00007ff723b59db2 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093\r\n#22 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#23 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff723013fd0, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#24 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e0910, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#25 0x00007ff723b55d62 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3110\r\n#26 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=1, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#27 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230adb80, nargs=1, kwnames=<optimized out>) at Objects/call.c:408\r\n#28 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e0af8, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#29 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#30 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=1, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#31 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a67e86e0, nargs=1, kwnames=<optimized out>) at Objects/call.c:408\r\n#32 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e0cd8, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#33 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#34 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#35 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a6785b68, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#36 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e0eb8, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#37 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#38 0x00007ff723af7cea in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=0x7ff7238fe930) at Objects/call.c:283\r\n#39 _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e1030, nargs=2, kwargs=<optimized out>) at Objects/call.c:322\r\n#40 0x00007ff723af7248 in object_vacall (callable=0x7ff72390aa70, vargs=0x7ffc6d3e1090) at Objects/call.c:1200\r\n#41 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf1520 <PyId__find_and_load.7>) at Objects/call.c:1250\r\n#42 0x00007ff723b6cb7b in import_find_and_load (abs_name=0x7ff7230acab0) at Python/import.c:1652\r\n#43 PyImport_ImportModuleLevelObject (name=0x7ff7230acab0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0) at Python/import.c:1764\r\n#44 0x00007ff723b5330c in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at Python/bltinmodule.c:312\r\n#45 0x00007ff723af84e9 in cfunction_call_varargs (kwargs=<optimized out>, args=<optimized out>, func=0x7ff723da8c80) at Objects/call.c:755\r\n#46 PyCFunction_Call (func=0x7ff723da8c80, args=<optimized out>, kwargs=<optimized out>) at Objects/call.c:786\r\n#47 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff7230a8c80, callargs=<optimized out>, func=0x7ff723da8c80) at Python/ceval.c:4641\r\n#48 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#49 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x5614a673dc38, argcount=argcount@entry=2, kwnames=0x0, kwargs=0x5614a673dc48, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#50 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a673dc38, nargs=2, kwnames=<optimized out>) at Objects/call.c:433\r\n#51 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e1608, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#52 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#53 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ff7238fea50, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffc6d3e1870, argcount=argcount@entry=3, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x7ff723902dc0, closure=0x0, name=0x7ff7238ffcb0, qualname=0x7ff7238ffcb0) at Python/ceval.c:3930\r\n#54 0x00007ff723af7db7 in _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e1870, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:376\r\n#55 0x00007ff723af7248 in object_vacall (callable=0x7ff72390ab90, vargs=0x7ffc6d3e18d0) at Objects/call.c:1200\r\n#56 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf15e0 <PyId__handle_fromlist.16>) at Objects/call.c:1250\r\n#57 0x00007ff723b6c8e7 in PyImport_ImportModuleLevelObject (name=name@entry=0x7ff7235970f0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7ff723097e50, level=<optimized out>) at Python/import.c:1829\r\n#58 0x00007ff723b57bad in import_name (level=0x7ff723d29620 <small_ints+160>, fromlist=0x7ff723097e50, name=0x7ff7235970f0, f=0x5614a66e97b0) at Python/ceval.c:4770\r\n#59 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2600\r\n#60 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930\r\n#61 0x00007ff723b54467 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959\r\n#62 0x00007ff723bcae7f in PyEval_EvalCode (co=co@entry=0x7ff7230a9ae0, globals=globals@entry=0x7ff723095af0, locals=locals@entry=0x7ff723095af0) at Python/ceval.c:524\r\n#63 0x00007ff723bc998c in builtin_exec_impl (module=<optimized out>, locals=0x7ff723095af0, globals=0x7ff723095af0, source=0x7ff7230a9ae0) at Python/bltinmodule.c:1079\r\n#64 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/bltinmodule.c.h:283\r\n#65 0x00007ff723af6909 in _PyMethodDef_RawFastCallDict (method=0x7ff723ce9b60 <builtin_methods+480>, self=0x7ff723da2d70, args=<optimized out>, nargs=2, kwargs=<optimized out>) at Objects/call.c:530\r\n#66 0x00007ff723af6847 in _PyCFunction_FastCallDict (func=0x7ff7238dd140, args=<optimized out>, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:585\r\n#67 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff723095c80, callargs=<optimized out>, func=0x7ff7238dd140) at Python/ceval.c:4641\r\n#68 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#69 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ff72308c3b0, argcount=argcount@entry=3, kwnames=0x0, kwargs=0x7ff72308c3c8, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#70 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff72308c3b0, nargs=3, kwnames=<optimized out>) at Objects/call.c:433\r\n#71 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e2180, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#72 0x00007ff723b59db2 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093\r\n#73 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#74 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230f3f68, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#75 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e2360, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#76 0x00007ff723b55d62 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3110\r\n#77 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=1, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#78 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a6740930, nargs=1, kwnames=<optimized out>) at Objects/call.c:408\r\n#79 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e2548, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#80 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#81 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#82 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230991e8, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#83 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e2728, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#84 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#85 0x00007ff723af7cea in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=0x7ff7238fe930) at Objects/call.c:283\r\n#86 _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e28a0, nargs=2, kwargs=<optimized out>) at Objects/call.c:322\r\n#87 0x00007ff723af7248 in object_vacall (callable=0x7ff72390aa70, vargs=0x7ffc6d3e2900) at Objects/call.c:1200\r\n#88 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf1520 <PyId__find_and_load.7>) at Objects/call.c:1250\r\n#89 0x00007ff723b6cb7b in import_find_and_load (abs_name=0x7ff723097230) at Python/import.c:1652\r\n#90 PyImport_ImportModuleLevelObject (name=0x7ff723097230, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0) at Python/import.c:1764\r\n#91 0x00007ff723b5330c in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at Python/bltinmodule.c:312\r\n#92 0x00007ff723af84e9 in cfunction_call_varargs (kwargs=<optimized out>, args=<optimized out>, func=0x7ff723da8c80) at Objects/call.c:755\r\n#93 PyCFunction_Call (func=0x7ff723da8c80, args=<optimized out>, kwargs=<optimized out>) at Objects/call.c:786\r\n#94 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff7230958c0, callargs=<optimized out>, func=0x7ff723da8c80) at Python/ceval.c:4641\r\n#95 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#96 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x5614a67403a0, argcount=argcount@entry=2, kwnames=0x0, kwargs=0x5614a67403b0, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#97 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a67403a0, nargs=2, kwnames=<optimized out>) at Objects/call.c:433\r\n#98 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e2e78, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#99 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#100 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#101 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230c0de8, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#102 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e3058, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#103 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#104 0x00007ff723af7cea in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=0x7ff7238fe930) at Objects/call.c:283\r\n#105 _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e31d0, nargs=2, kwargs=<optimized out>) at Objects/call.c:322\r\n#106 0x00007ff723af7248 in object_vacall (callable=0x7ff72390aa70, vargs=0x7ffc6d3e3230) at Objects/call.c:1200\r\n#107 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf1520 <PyId__find_and_load.7>) at Objects/call.c:1250\r\n#108 0x00007ff723b6cb7b in import_find_and_load (abs_name=0x7ff7230970b0) at Python/import.c:1652\r\n#109 PyImport_ImportModuleLevelObject (name=name@entry=0x7ff7230970b0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7ff72308a350, level=0) at Python/import.c:1764\r\n#110 0x00007ff723b57bad in import_name (level=0x7ff723d29620 <small_ints+160>, fromlist=0x7ff72308a350, name=0x7ff7230970b0, f=0x7ff7230f3bf0) at Python/ceval.c:4770\r\n#111 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2600\r\n#112 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930\r\n#113 0x00007ff723b54467 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959\r\n#114 0x00007ff723bcae7f in PyEval_EvalCode (co=co@entry=0x7ff723098150, globals=globals@entry=0x7ff72308b050, locals=locals@entry=0x7ff72308b050) at Python/ceval.c:524\r\n#115 0x00007ff723bc998c in builtin_exec_impl (module=<optimized out>, locals=0x7ff72308b050, globals=0x7ff72308b050, source=0x7ff723098150) at Python/bltinmodule.c:1079\r\n#116 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/bltinmodule.c.h:283\r\n#117 0x00007ff723af6909 in _PyMethodDef_RawFastCallDict (method=0x7ff723ce9b60 <builtin_methods+480>, self=0x7ff723da2d70, args=<optimized out>, nargs=2, kwargs=<optimized out>) at Objects/call.c:530\r\n#118 0x00007ff723af6847 in _PyCFunction_FastCallDict (func=0x7ff7238dd140, args=<optimized out>, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:585\r\n#119 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff72308b280, callargs=<optimized out>, func=0x7ff7238dd140) at Python/ceval.c:4641\r\n#120 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#121 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ff72308c1e0, argcount=argcount@entry=3, kwnames=0x0, kwargs=0x7ff72308c1f8, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#122 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff72308c1e0, nargs=3, kwnames=<optimized out>) at Objects/call.c:433\r\n#123 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e3ae0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#124 0x00007ff723b59db2 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093\r\n#125 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#126 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230f3998, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#127 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e3cc0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#128 0x00007ff723b55d62 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3110\r\n#129 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=1, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#130 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a673f590, nargs=1, kwnames=<optimized out>) at Objects/call.c:408\r\n#131 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e3ea8, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#132 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#133 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#134 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a6741cd8, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#135 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e4088, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#136 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#137 0x00007ff723af7cea in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=0x7ff7238fe930) at Objects/call.c:283\r\n#138 _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e4200, nargs=2, kwargs=<optimized out>) at Objects/call.c:322\r\n#139 0x00007ff723af7248 in object_vacall (callable=0x7ff72390aa70, vargs=0x7ffc6d3e4260) at Objects/call.c:1200\r\n#140 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf1520 <PyId__find_and_load.7>) at Objects/call.c:1250\r\n#141 0x00007ff723b6cb7b in import_find_and_load (abs_name=0x7ff72308a0b0) at Python/import.c:1652\r\n#142 PyImport_ImportModuleLevelObject (name=name@entry=0x7ff72308a0b0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7ff7230865d0, level=0) at Python/import.c:1764\r\n#143 0x00007ff723b57bad in import_name (level=0x7ff723d29620 <small_ints+160>, fromlist=0x7ff7230865d0, name=0x7ff72308a0b0, f=0x7ff7230c0850) at Python/ceval.c:4770\r\n#144 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2600\r\n#145 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930\r\n#146 0x00007ff723b54467 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959\r\n#147 0x00007ff723bcae7f in PyEval_EvalCode (co=co@entry=0x7ff723080ae0, globals=globals@entry=0x7ff723088140, locals=locals@entry=0x7ff723088140) at Python/ceval.c:524\r\n#148 0x00007ff723bc998c in builtin_exec_impl (module=<optimized out>, locals=0x7ff723088140, globals=0x7ff723088140, source=0x7ff723080ae0) at Python/bltinmodule.c:1079\r\n#149 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/bltinmodule.c.h:283\r\n#150 0x00007ff723af6909 in _PyMethodDef_RawFastCallDict (method=0x7ff723ce9b60 <builtin_methods+480>, self=0x7ff723da2d70, args=<optimized out>, nargs=2, kwargs=<optimized out>) at Objects/call.c:530\r\n#151 0x00007ff723af6847 in _PyCFunction_FastCallDict (func=0x7ff7238dd140, args=<optimized out>, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:585\r\n#152 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff7230884b0, callargs=<optimized out>, func=0x7ff7238dd140) at Python/ceval.c:4641\r\n#153 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#154 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ff7230fae90, argcount=argcount@entry=3, kwnames=0x0, kwargs=0x7ff7230faea8, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#155 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230fae90, nargs=3, kwnames=<optimized out>) at Objects/call.c:433\r\n#156 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e4b10, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#157 0x00007ff723b59db2 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093\r\n#158 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#159 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230f3b88, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#160 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e4cf0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#161 0x00007ff723b55d62 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3110\r\n#162 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=1, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#163 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a673de90, nargs=1, kwnames=<optimized out>) at Objects/call.c:408\r\n#164 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e4ed8, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#165 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#166 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#167 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7230c0be8, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#168 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e50b8, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#169 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#170 0x00007ff723af7cea in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=0x7ff7238fe930) at Objects/call.c:283\r\n#171 _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e5230, nargs=2, kwargs=<optimized out>) at Objects/call.c:322\r\n#172 0x00007ff723af7248 in object_vacall (callable=0x7ff72390aa70, vargs=0x7ffc6d3e5290) at Objects/call.c:1200\r\n#173 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf1520 <PyId__find_and_load.7>) at Objects/call.c:1250\r\n#174 0x00007ff723b6cb7b in import_find_and_load (abs_name=0x7ff7230c9f30) at Python/import.c:1652\r\n#175 PyImport_ImportModuleLevelObject (name=name@entry=0x7ff7230c9f30, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7ff7230db2d0, level=0) at Python/import.c:1764\r\n#176 0x00007ff723b57bad in import_name (level=0x7ff723d29620 <small_ints+160>, fromlist=0x7ff7230db2d0, name=0x7ff7230c9f30, f=0x7ff7230e9750) at Python/ceval.c:4770\r\n#177 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2600\r\n#178 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930\r\n#179 0x00007ff723b54467 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959\r\n#180 0x00007ff723bcae7f in PyEval_EvalCode (co=co@entry=0x7ff7230e6270, globals=globals@entry=0x7ff7230ffeb0, locals=locals@entry=0x7ff7230ffeb0) at Python/ceval.c:524\r\n#181 0x00007ff723bc998c in builtin_exec_impl (module=<optimized out>, locals=0x7ff7230ffeb0, globals=0x7ff7230ffeb0, source=0x7ff7230e6270) at Python/bltinmodule.c:1079\r\n#182 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/bltinmodule.c.h:283\r\n#183 0x00007ff723af6909 in _PyMethodDef_RawFastCallDict (method=0x7ff723ce9b60 <builtin_methods+480>, self=0x7ff723da2d70, args=<optimized out>, nargs=2, kwargs=<optimized out>) at Objects/call.c:530\r\n#184 0x00007ff723af6847 in _PyCFunction_FastCallDict (func=0x7ff7238dd140, args=<optimized out>, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:585\r\n#185 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff7230852d0, callargs=<optimized out>, func=0x7ff7238dd140) at Python/ceval.c:4641\r\n#186 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#187 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ff723591920, argcount=argcount@entry=3, kwnames=0x0, kwargs=0x7ff723591938, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#188 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff723591920, nargs=3, kwnames=<optimized out>) at Objects/call.c:433\r\n#189 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e5b40, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#190 0x00007ff723b59db2 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093\r\n#191 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#192 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7238d7d78, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#193 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e5d20, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#194 0x00007ff723b55d62 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3110\r\n#195 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=1, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#196 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a67247e0, nargs=1, kwnames=<optimized out>) at Objects/call.c:408\r\n#197 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e5f08, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#198 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#199 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#200 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a66e6168, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#201 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e60e8, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#202 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#203 0x00007ff723af7cea in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=0x7ff7238fe930) at Objects/call.c:283\r\n#204 _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e6260, nargs=2, kwargs=<optimized out>) at Objects/call.c:322\r\n#205 0x00007ff723af7248 in object_vacall (callable=0x7ff72390aa70, vargs=0x7ffc6d3e62c0) at Objects/call.c:1200\r\n#206 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf1520 <PyId__find_and_load.7>) at Objects/call.c:1250\r\n#207 0x00007ff723b6cb7b in import_find_and_load (abs_name=0x7ff7230d0030) at Python/import.c:1652\r\n#208 PyImport_ImportModuleLevelObject (name=0x7ff7230d0030, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0) at Python/import.c:1764\r\n#209 0x00007ff723b5330c in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at Python/bltinmodule.c:312\r\n#210 0x00007ff723af84e9 in cfunction_call_varargs (kwargs=<optimized out>, args=<optimized out>, func=0x7ff723da8c80) at Objects/call.c:755\r\n#211 PyCFunction_Call (func=0x7ff723da8c80, args=<optimized out>, kwargs=<optimized out>) at Objects/call.c:786\r\n#212 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff723158e60, callargs=<optimized out>, func=0x7ff723da8c80) at Python/ceval.c:4641\r\n#213 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#214 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x5614a66a1ea8, argcount=argcount@entry=2, kwnames=0x0, kwargs=0x5614a66a1eb8, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#215 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a66a1ea8, nargs=2, kwnames=<optimized out>) at Objects/call.c:433\r\n#216 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e6838, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#217 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#218 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ff7238fea50, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffc6d3e6aa0, argcount=argcount@entry=3, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x7ff723902dc0, closure=0x0, name=0x7ff7238ffcb0, qualname=0x7ff7238ffcb0) at Python/ceval.c:3930\r\n#219 0x00007ff723af7db7 in _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e6aa0, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:376\r\n#220 0x00007ff723af7248 in object_vacall (callable=0x7ff72390ab90, vargs=0x7ffc6d3e6b00) at Objects/call.c:1200\r\n#221 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf15e0 <PyId__handle_fromlist.16>) at Objects/call.c:1250\r\n#222 0x00007ff723b6c8e7 in PyImport_ImportModuleLevelObject (name=name@entry=0x7ff723597170, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7ff7231b68d0, level=<optimized out>) at Python/import.c:1829\r\n#223 0x00007ff723b57bad in import_name (level=0x7ff723d29620 <small_ints+160>, fromlist=0x7ff7231b68d0, name=0x7ff723597170, f=0x5614a6733480) at Python/ceval.c:4770\r\n#224 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2600\r\n#225 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930\r\n#226 0x00007ff723b54467 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959\r\n#227 0x00007ff723bcae7f in PyEval_EvalCode (co=co@entry=0x7ff723146b70, globals=globals@entry=0x7ff7230c9730, locals=locals@entry=0x7ff7230c9730) at Python/ceval.c:524\r\n#228 0x00007ff723bc998c in builtin_exec_impl (module=<optimized out>, locals=0x7ff7230c9730, globals=0x7ff7230c9730, source=0x7ff723146b70) at Python/bltinmodule.c:1079\r\n#229 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/bltinmodule.c.h:283\r\n#230 0x00007ff723af6909 in _PyMethodDef_RawFastCallDict (method=0x7ff723ce9b60 <builtin_methods+480>, self=0x7ff723da2d70, args=<optimized out>, nargs=2, kwargs=<optimized out>) at Objects/call.c:530\r\n#231 0x00007ff723af6847 in _PyCFunction_FastCallDict (func=0x7ff7238dd140, args=<optimized out>, nargs=<optimized out>, kwargs=<optimized out>) at Objects/call.c:585\r\n#232 0x00007ff723b5aed7 in do_call_core (kwdict=0x7ff7230c9af0, callargs=<optimized out>, func=0x7ff7238dd140) at Python/ceval.c:4641\r\n#233 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3191\r\n#234 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ff723591580, argcount=argcount@entry=3, kwnames=0x0, kwargs=0x7ff723591598, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7ff7238f55d0, qualname=0x7ff7238f55d0) at Python/ceval.c:3930\r\n#235 0x00007ff723af76d3 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff723591580, nargs=3, kwnames=<optimized out>) at Objects/call.c:433\r\n#236 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e73b0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#237 0x00007ff723b59db2 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093\r\n#238 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#239 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7231f97a8, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#240 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e7590, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#241 0x00007ff723b55d62 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3110\r\n#242 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=1, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#243 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x5614a66c4370, nargs=1, kwnames=<optimized out>) at Objects/call.c:408\r\n#244 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e7778, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#245 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#246 0x00007ff723af763a in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=<optimized out>) at Objects/call.c:283\r\n#247 _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x7ff7231bdbe8, nargs=2, kwnames=<optimized out>) at Objects/call.c:408\r\n#248 0x00007ff723b5d1ef in call_function (pp_stack=0x7ffc6d3e7958, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616\r\n#249 0x00007ff723b55c22 in _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3124\r\n#250 0x00007ff723af7cea in function_code_fastcall (globals=<optimized out>, nargs=2, args=<optimized out>, co=0x7ff7238fe930) at Objects/call.c:283\r\n#251 _PyFunction_FastCallDict (func=<optimized out>, args=0x7ffc6d3e7ad0, nargs=2, kwargs=<optimized out>) at Objects/call.c:322\r\n#252 0x00007ff723af7248 in object_vacall (callable=0x7ff72390aa70, vargs=0x7ffc6d3e7b30) at Objects/call.c:1200\r\n#253 0x00007ff723af891d in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=name@entry=0x7ff723cf1520 <PyId__find_and_load.7>) at Objects/call.c:1250\r\n#254 0x00007ff723b6cb7b in import_find_and_load (abs_name=0x7ff723597170) at Python/import.c:1652\r\n#255 PyImport_ImportModuleLevelObject (name=name@entry=0x7ff723597170, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7ff7235ce190, level=0) at Python/import.c:1764\r\n#256 0x00007ff723b57bad in import_name (level=0x7ff723d29620 <small_ints+160>, fromlist=0x7ff7235ce190, name=0x7ff723597170, f=0x5614a6689000) at Python/ceval.c:4770\r\n#257 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2600\r\n#258 0x00007ff723b54773 in _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930\r\n#259 0x00007ff723b54467 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959\r\n#260 0x00007ff723bcae7f in PyEval_EvalCode (co=co@entry=0x7ff72352e810, globals=globals@entry=0x7ff7238d46e0, locals=locals@entry=0x7ff7238d46e0) at Python/ceval.c:524\r\n#261 0x00007ff723bd7c43 in run_mod (mod=<optimized out>, filename=<optimized out>, globals=0x7ff7238d46e0, locals=0x7ff7238d46e0, flags=<optimized out>, arena=<optimized out>) at Python/pythonrun.c:1037\r\n#262 0x00007ff723bd81fb in PyRun_FileExFlags (fp=0x5614a6630310, filename_str=<optimized out>, start=<optimized out>, globals=0x7ff7238d46e0, locals=0x7ff7238d46e0, closeit=1, flags=0x7ffc6d3e8050) at Python/pythonrun.c:990\r\n#263 0x00007ff723bd7ec6 in PyRun_SimpleFileExFlags (fp=0x5614a6630310, filename=0x7ff72351bbd0 \"/home/runner/work/mongo-python-driver/mongo-python-driver/sdist/test/test/sigstop_sigcont.py\", closeit=1, flags=0x7ffc6d3e8050) at Python/pythonrun.c:429\r\n#264 0x00007ff723bdfb64 in pymain_run_file (p_cf=0x7ffc6d3e8050, filename=<optimized out>, fp=0x5614a6630310) at Modules/main.c:464\r\n#265 pymain_run_filename (cf=0x7ffc6d3e8050, pymain=0x7ffc6d3e8160) at Modules/main.c:1654\r\n#266 pymain_run_python (pymain=0x7ffc6d3e8160) at Modules/main.c:2964\r\n#267 pymain_main (pymain=0x7ffc6d3e8160) at Modules/main.c:3125\r\n#268 0x00007ff723bdf7f0 in _Py_UnixMain (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:3160\r\n#269 0x00007ff723629d90 in __libc_start_call_main (main=main@entry=0x5614a64e4060 <main>, argc=argc@entry=3, argv=argv@entry=0x7ffc6d3e82e8) at ../sysdeps/nptl/libc_start_call_main.h:58\r\n#270 0x00007ff723629e40 in __libc_start_main_impl (main=0x5614a64e4060 <main>, argc=3, argv=0x7ffc6d3e82e8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7ffc6d3e82d8) at ../csu/libc-start.c:392\r\n#271 0x00005614a64e4095 in _start ()\r\n```\r\n",
      "Ah I found the answer here. We were runnning into this issue: https://github.com/python/cpython/commit/c2b0b12d1a137ada1023ab7c10b8d9a0249d95f9\r\n\r\nThis behavior was fixed in 3.9 hence why we only saw crashes on 3.7 and 3.8:\r\nhttps://github.com/python/cpython/commit/5b1ef200d31a74a9b478d0217d73ed0a659a8a06",
      "The tests look good. I have not seen any segmentation faults after the [traverse/clear fix](https://github.com/mongodb/mongo-python-driver/pull/1499/commits/407ef57b53548c78e43be69167e67bff5bbafd66)."
    ],
    "commit_messages": [
      "PYTHON-3745 Add support for multiphase initialization (#1499)\n\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72044ee515ce6a4aed6",
    "number": 1498,
    "body": null,
    "head_branch": "PYTHON-4183",
    "is_a_fork": true,
    "comments": [
      "Failures are unrelated to my change. https://jira.mongodb.org/browse/PYTHON-4182\r\n"
    ],
    "commit_messages": [
      "PYTHON-4183: Improve changelog entry for breaking SON -> dict change in PYTHON-2884 (#1498)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72144ee515ce6a4aed7",
    "number": 1497,
    "body": null,
    "head_branch": "PYTHON-4177",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4177 Build and Test M1 macOS wheels on GHA (#1497)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72344ee515ce6a4aed8",
    "number": 1496,
    "body": null,
    "head_branch": "PYTHON-4174",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4174 Update TLS cheat sheet link (#1496)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72444ee515ce6a4aed9",
    "number": 1495,
    "body": "Reverts mongodb/mongo-python-driver#1489\r\n\r\nThis was causing other failures in our waterfall, let's revert and then I can work on a proper fix.",
    "head_branch": "revert-1489-PYTHON-4018",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"PYTHON-4018 Clarify exactly what code/label fields drivers should inspect to determine retryability\" (#1495)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72644ee515ce6a4aeda",
    "number": 1494,
    "body": "Modify the ClientEncryption.encrypt API to accept native UUIDs directly. [jira task](https://jira.mongodb.org/projects/PYTHON/issues/PYTHON-2267)\r\nI validated my changes with the TestExplicitSimple cases. pytest -v -s test/test_encryption.py::TestExplicitSimple\r\nI tried to run all the test_encryption.py tests, but some of the tests require environment credentials, and as far as I understand, I need MongoDB Enterprise for mongocryptd support.",
    "head_branch": "PYTHON-2267",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2267: Allow UUID key_id to be passed to ClientEncryption.encrypt (#1494)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72844ee515ce6a4aedb",
    "number": 1493,
    "body": "Optimized performance by removing object_pairs_hook call if we need the default conversion to dict behavior [jira task](https://jira.mongodb.org/projects/PYTHON/issues/PYTHON-1374)\r\nIn object_hook, a dictionary is already passed, and calling object_pairs_hook for casting pairs to dict is redundant.\r\nI validated my changes with test_json_util cases. `pytest -v -s test/test_json_util.py`\r\nCompare performance with TestJson*Decoding cases(changes affect performance only in these cases) `pytest -v -s test/performance/perf_test.py::TestJsonFlatDecoding test/performance/perf_test.py::TestJsonDeepDecoding test/performance/perf_test.py::TestJsonFullDecoding`\r\n\r\n| Test Name        | master | current branch        |\r\n|------------------|------------------|--------------------|\r\n| JsonFlatDecoding | 96.18636555725531| 117.50816018425552 |\r\n| JsonDeepDecoding | 58.337081713027956| 77.52136671585596 |\r\n| JsonFullDecoding | 33.81260536995342| 38.88821810950474  |\r\n\r\nThis fix only works with JSONOptions where document_class is dict, and I haven't found cases where something other than dict was used.",
    "head_branch": "PYTHON-1374-5",
    "is_a_fork": true,
    "comments": [
      "Also feel free to add your name to doc/contributors.rst if you like.",
      "@ilukyanchikov thanks for the great work here!",
      "The perf benchmarks confirm a 20-30% decoding improvement:\r\n![Screenshot 2024-02-05 at 2 57 09 PM](https://github.com/mongodb/mongo-python-driver/assets/5015933/bd5d7ed7-ae50-40a3-847d-6b144dc68137)\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_97b9a333c84af5093874880d1d3ae7d5e59a8b59_24_02_05_21_59_14/trend-charts?execution=0"
    ],
    "commit_messages": [
      "PYTHON-4179: Optimize JSON decoding performance by avoiding object_pairs_hook (#1493)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72a44ee515ce6a4aedc",
    "number": 1492,
    "body": "Fixes these failures:\r\n```\r\n [2024/01/30 13:28:18.641] test/unified_format.py:1722: in run_scenario\r\n [2024/01/30 13:28:18.641]     self._run_scenario(spec, uri)\r\n [2024/01/30 13:28:18.641] test/unified_format.py:1747: in _run_scenario\r\n [2024/01/30 13:28:18.641]     self.run_operations(spec[\"operations\"])\r\n [2024/01/30 13:28:18.641] test/unified_format.py:1656: in run_operations\r\n [2024/01/30 13:28:18.641]     self.run_entity_operation(op)\r\n [2024/01/30 13:28:18.641] test/unified_format.py:1398: in run_entity_operation\r\n [2024/01/30 13:28:18.641]     result = cmd(**dict(arguments))\r\n [2024/01/30 13:28:18.641] /opt/python/pypy3.10/lib/pypy3.10/functools.py:303: in __call__\r\n [2024/01/30 13:28:18.641]     return self.func(*self.args, *args, **keywords)\r\n [2024/01/30 13:28:18.641] test/unified_format.py:1278: in _clientEncryptionOperation_createDataKey\r\n [2024/01/30 13:28:18.641]     return target.create_data_key(*args, **kwargs)\r\n [2024/01/30 13:28:18.641] pymongo/encryption.py:747: in create_data_key\r\n [2024/01/30 13:28:18.641]     with _wrap_encryption_errors():\r\n [2024/01/30 13:28:18.641] /opt/python/pypy3.10/lib/pypy3.10/contextlib.py:153: in __exit__\r\n [2024/01/30 13:28:18.641]     self.gen.throw(typ, value, traceback)\r\n [2024/01/30 13:28:18.641] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n [2024/01/30 13:28:18.641]     @contextlib.contextmanager\r\n [2024/01/30 13:28:18.641]     def _wrap_encryption_errors() -> Iterator[None]:\r\n [2024/01/30 13:28:18.641]         \"\"\"Context manager to wrap encryption related errors.\"\"\"\r\n [2024/01/30 13:28:18.641]         try:\r\n [2024/01/30 13:28:18.641]             yield\r\n [2024/01/30 13:28:18.641]         except BSONError:\r\n [2024/01/30 13:28:18.641]             # BSON encoding/decoding errors are unrelated to encryption so\r\n [2024/01/30 13:28:18.641]             # we should propagate them unchanged.\r\n [2024/01/30 13:28:18.641]             raise\r\n [2024/01/30 13:28:18.641]         except Exception as exc:\r\n [2024/01/30 13:28:18.641] >           raise EncryptionError(exc) from exc\r\n [2024/01/30 13:28:18.642] E           pymongo.errors.EncryptionError: unknown kms_provider: aws:name1\r\n [2024/01/30 13:28:18.642] pymongo/encryption.py:104: EncryptionError\r\n [2024/01/30 13:28:18.642] _ TestUnifiedNamedKMSCreateDataKey.test_create_datakey_with_named_Azure_KMS_provider _\r\n [2024/01/30 13:28:18.642]     @contextlib.contextmanager\r\n [2024/01/30 13:28:18.642]     def _wrap_encryption_errors() -> Iterator[None]:\r\n [2024/01/30 13:28:18.642]         \"\"\"Context manager to wrap encryption related errors.\"\"\"\r\n [2024/01/30 13:28:18.642]         try:\r\n [2024/01/30 13:28:18.642] >           yield\r\n [2024/01/30 13:28:18.642] pymongo/encryption.py:98:\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_rhel8_test_encryption__platform~rhel8_auth_ssl~noauth_nossl_python_version~3.7_encryption~encryption_test_4.2_replica_set_0615df47b5251dc718ef91b24da3efb95d7b4f6f_24_01_30_20_00_24?execution=0&sortBy=STATUS&sortDir=ASC",
    "head_branch": "PYTHON-4112",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4112 Revert to testing with pymongocrypt@master and update mock KMS ports (#1492)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc72c44ee515ce6a4aedd",
    "number": 1491,
    "body": null,
    "head_branch": "PYTHON-3587",
    "is_a_fork": true,
    "comments": [
      "> Could you schedule the mockupdb tests in EVG? It would also be good to run the motor test suite after merging this to see if anything breaks there.\r\n\r\nmockupdb tests timed out on `test_rsghost`: https://spruce.mongodb.com/version/65bd38bbc9ec443a931ddce7/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
      "Looks like the test gets stuck attempting to run endSessions when closing the client in test_rsghost:\r\n```\r\n [2024/02/02 11:19:49.085] Thread 0x00007f64de62f740 (most recent call first):\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/socket_checker.py\", line 66 in select\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 321 in wait_for_read\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 340 in _receive_data_on_socket\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 263 in receive_message\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 186 in command\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/pool.py\", line 997 in command\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/helpers.py\", line 322 in inner\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/mongo_client.py\", line 1193 in _end_sessions\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/mongo_client.py\", line 1216 in close\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/mongo_client.py\", line 2112 in __exit__\r\n [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/test/mockupdb/test_rsghost.py\", line 56 in test_rsghost\r\n```\r\n\r\n",
      "> Looks like the test gets stuck attempting to run endSessions when closing the client in test_rsghost:\r\n> \r\n> ```\r\n>  [2024/02/02 11:19:49.085] Thread 0x00007f64de62f740 (most recent call first):\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/socket_checker.py\", line 66 in select\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 321 in wait_for_read\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 340 in _receive_data_on_socket\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 263 in receive_message\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/network.py\", line 186 in command\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/pool.py\", line 997 in command\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/helpers.py\", line 322 in inner\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/mongo_client.py\", line 1193 in _end_sessions\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/mongo_client.py\", line 1216 in close\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/pymongo/mongo_client.py\", line 2112 in __exit__\r\n>  [2024/02/02 11:19:49.085]   File \"/data/mci/1adae7ce73c33f49ebb23345c8812e53/src/test/mockupdb/test_rsghost.py\", line 56 in test_rsghost\r\n> ```\r\n\r\nYeah, while sending the `endSessions` commands back to the server.",
      "test_rsghost needs to set up an auto responder for endSessions. Although I wonder why the endSession was not needed before. ",
      "Previously we never sent sessions to RSGhost servers but now we do. That could be a problem.",
      "> Previously we never sent sessions to RSGhost servers but now we do. That could be a problem.\r\n\r\nWe do now because of the sessions changes? That shouldn't happen, should it?",
      "Passing mockupdb tests: https://spruce.mongodb.com/version/65c13ac13e8e86a4392b3080/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC"
    ],
    "commit_messages": [
      "PYTHON-3587 Do not perform server selection to determine sessions support (#1491)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73044ee515ce6a4aede",
    "number": 1490,
    "body": null,
    "head_branch": "PYTHON-3473-1",
    "is_a_fork": true,
    "comments": [
      "Perf results: (https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_41a131ea1c15ffa969a14ce1334ce19837dc226b_65b80026d6d80a6e319730d1_24_01_29_19_44_47/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC)\r\n![image](https://github.com/mongodb/mongo-python-driver/assets/30483654/512d4449-2e45-4028-a6ed-711057f22564)\r\n"
    ],
    "commit_messages": [
      "PYTHON-3473 Add log messages to CMAP spec (#1490)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc73144ee515ce6a4aedf",
    "number": 1489,
    "body": null,
    "head_branch": "PYTHON-4018",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4018 Clarify exactly what code/label fields drivers should inspect to determine retryability (#1489)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73244ee515ce6a4aee0",
    "number": 1488,
    "body": "https://jira.mongodb.org/browse/PYTHON-4170",
    "head_branch": "PYTHON-4170",
    "is_a_fork": true,
    "comments": [
      "(waiting for tests to finish before merging)"
    ],
    "commit_messages": [
      "PYTHON-4170 Fix test_invalid_hostname_in_kms_certificate (#1488)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73244ee515ce6a4aee1",
    "number": 1487,
    "body": "[PYTHON-4112](https://jira.mongodb.org/browse/PYTHON-4112) implements the tests and documentation for named KMS providers added in  https://github.com/mongodb/specifications/pull/1492.\r\n\r\nNote that there are actually no driver changes here, only tests and documentation. So even pymongo 4.6 users can take advantage of the named KMS provider feature as long as they upgrade to pymongocrypt >=1.9. This pymongocrypt PR unblocks use of named providers: https://github.com/mongodb/libmongocrypt/pull/739",
    "head_branch": "PYTHON-4112",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey - If you think that it would be useful, perhaps we could talk about what the following failing test is testing.\r\n\r\ntest.test_csot.TestCsotRetryabilityTimeoutMS.test_timeoutMS_applies_to_whole_operation__not_individual_attempts_-_findOneAndDelete_on_collection",
      "The failing test is unrelated and tracked in: https://jira.mongodb.org/browse/PYTHON-3688"
    ],
    "commit_messages": [
      "PYTHON-4112 Support named KMS providers (#1487)\n\nRequires pymongocrypt >= 1.9.0 and libmongocrypt >= 1.9.0."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73444ee515ce6a4aee2",
    "number": 1486,
    "body": null,
    "head_branch": "PYTHON-4147",
    "is_a_fork": true,
    "comments": [
      "Whoops, lint is failing:\r\n> doc/changelog.rst:31: D000 Explicit markup ends without a blank line; unexpected unindent.\r\n"
    ],
    "commit_messages": [
      "PYTHON-4147: Silence noisy thread.start() RuntimeError at shutdown (#1486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73644ee515ce6a4aee3",
    "number": 1485,
    "body": null,
    "head_branch": "PYTHON-4166",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4166 Pools should be properly closed instead of reset in topology (#1485)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73844ee515ce6a4aee4",
    "number": 1484,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resync forks (#1484)\n\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>\r\nCo-authored-by: Casey Clements <caseyclements@users.noreply.github.com>\r\nCo-authored-by: Jib <jib.adegunloye@mongodb.com>\r\nCo-authored-by: Shane Harvey <shnhrv@gmail.com>\r\nCo-authored-by: sleepyStick <itsirisho@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc73c44ee515ce6a4aee5",
    "number": 1483,
    "body": "change a minuscule typo which formats a code part in the docs wrong\r\n\r\n![image](https://github.com/mongodb/mongo-python-driver/assets/13679272/f611832c-01f2-46e6-be32-01b48c7e9e32)\r\n\r\nbasically adds one space. I know it is a small change but it bothered me ;) ",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4158 Fix typo in create_index docstring (#1483)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73d44ee515ce6a4aee6",
    "number": 1482,
    "body": "https://jira.mongodb.org/browse/PYTHON-4157",
    "head_branch": "PYTHON-4157",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4157 Fix broken links (#1482)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc73f44ee515ce6a4aee7",
    "number": 1481,
    "body": "https://jira.mongodb.org/browse/PYTHON-4155\r\n\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_ssl_patch_c4e4bd638f7b82032cbd13b8e56a7593b56e964c_65aafe9ad1fe07c55152cba2_24_01_19_22_58_36/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC \r\n\r\nResults:\r\ntest | no-ssl MB/s | ssl MB/s | diff %\r\n-- | -- | -- | --\r\nGridFsMultiFileDownload | 2241.312311 | 1390.521729 | -37.95948373\r\nGridFsMultiFileUpload | 587.071831 | 560.0242854 | -4.607195274\r\nJsonMultiExport | 81.56780701 | 79.51976841 | -2.510841797\r\nJsonMultiImport | 243.055593 | 235.5447564 | -3.090172317\r\nGridFsDownload | 609.4982366 | 393.7977959 | -35.38983836\r\nGridFsUpload | 338.6111882 | 252.5824448 | -25.40634992\r\nLargeDocBulkInsert | 104.5846324 | 94.05588566 | -10.06720249\r\nSmallDocBulkInsert | 38.57742683 | 36.75833318 | -4.715435437\r\nFindManyAndEmptyCursor | 79.79403695 | 72.12921893 | -9.605752902\r\nLargeDocInsertOne | 108.6530608 | 97.18336995 | -10.55625194\r\nSmallDocInsertOne | 0.9305379959 | 0.8202515162 | -11.85190504\r\nFindOneByID | 4.519436183 | 4.045484225 | -10.4869709\r\nRunCommand | 0.06646477592 | 0.05744304515 | -13.57370222\r\nJsonFullDecoding | 14.00451737 | 13.99241453 | -0.08642095437\r\nJsonFullEncoding | 18.12583891 | 18.12102029 | -0.02658429293\r\nJsonDeepDecoding | 25.22142509 | 25.51211066 | 1.152534255\r\nJsonDeepEncoding | 19.38661823 | 19.28966083 | -0.5001253715\r\nJsonFlatDecoding | 41.44312456 | 41.76845546 | 0.7850057197\r\nJsonFlatEncoding | 43.07909727 | 42.41985537 | -1.530305754\r\nFullDecoding | 96.65824687 | 96.77898807 | 0.1249155678\r\nFullEncoding | 191.7291776 | 193.9694708 | 1.168467563\r\nDeepDecoding | 99.65225822 | 99.30337922 | -0.3500964374\r\nDeepEncoding | 118.9012259 | 115.178514 | -3.130928127\r\nFlatDecoding | 280.1459854 | 276.2744521 | -1.381969956\r\nFlatEncoding | 317.2246289 | 321.0129116 | 1.194195641\r\n\r\n",
    "head_branch": "PYTHON-4155",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4155 Add perf benchmark with TLS enabled (#1481)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74144ee515ce6a4aee8",
    "number": 1480,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [
      "I'm concerned with this approach because it results in 10% drop in single threaded performance *even when logging is not enabled*:\r\n<img width=\"1357\" alt=\"Screenshot 2024-01-25 at 10 54 05 AM\" src=\"https://github.com/mongodb/mongo-python-driver/assets/5015933/3aeb5d56-8b8a-4497-874f-9ff1319168ee\">\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_c4e4bd638f7b82032cbd13b8e56a7593b56e964c_65ab0a2c9ccd4ef5608366ab_24_01_19_23_47_57/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nHow do we address this problem? To start we should check where this extra time is being spent. Is there a way to avoid this overhead when logging is not enabled? I'm concerned this drop in performance will get significantly worse when we add even more logging calls for topology, serverSelection, and connection.",
      "Could you share a screenshot of the latest perf results?",
      "> Could you share a screenshot of the latest perf results?\r\n\r\n![image](https://github.com/mongodb/mongo-python-driver/assets/30483654/adb9b6ed-1285-47bb-a46e-a04a629623d6)\r\n\r\n\r\nMuch better performance across the board\r\n\r\n"
    ],
    "commit_messages": [
      "PYTHON-3457 & PYTHON-3458 - Improve performance when logging is disabled (#1480)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc74244ee515ce6a4aee9",
    "number": 1479,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74444ee515ce6a4aeea",
    "number": 1478,
    "body": "https://jira.mongodb.org/browse/PYTHON-4146",
    "head_branch": "PYTHON-4146",
    "is_a_fork": true,
    "comments": [
      "This results in a 42% perf increase for the GridFsUpload benchmark: https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_b8d6bfdf085081ccf509324dfcda7ea51434eae0_65ab3f1f0305b9c51bb8a7a3_24_01_20_03_33_52/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC"
    ],
    "commit_messages": [
      "PYTHON-4146 Improve GridFS upload performance by batch writing chunks with insert_many (#1478)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74644ee515ce6a4aeeb",
    "number": 1477,
    "body": "Requires https://github.com/mongodb-labs/drivers-evergreen-tools/pull/390",
    "head_branch": "kmip-server-scripts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4151 Use Centralized Scripts for CSFLE Tests (#1477)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74a44ee515ce6a4aeec",
    "number": 1476,
    "body": null,
    "head_branch": "update-docs-deps",
    "is_a_fork": true,
    "comments": [
      "Does this change work on readthedocs?",
      "Yes, but the github hook wasn't working: https://readthedocs.org/projects/pymongo/builds/23134855/"
    ],
    "commit_messages": [
      "PYTHON-4148 Update documentation dependencies (#1476)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74b44ee515ce6a4aeed",
    "number": 1475,
    "body": "https://jira.mongodb.org/browse/PYTHON-4144\r\n\r\nBeanchmark results here: https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_cd3f502de6405657c1e825978ec13b295b0d76ef_65a70b9257e85a54e3540958_24_01_16_23_05_08/trend-charts?execution=0\r\n\r\n![Screenshot 2024-01-16 at 4 19 18 PM](https://github.com/mongodb/mongo-python-driver/assets/5015933/c89962cf-45ec-49b2-8c46-e95972eb7530)\r\n\r\nResults in a 15% improvement to the JSON benchmarks.\r\n\r\nBefore:\r\n```\r\n$ python -m timeit -s 'from bson.json_util import dumps,loads;doc={\"a\": list(float(i) for i in range(100000))}' 'dumps(doc)'\r\n10 loops, best of 5: 39 msec per loop\r\n```\r\nAfter:\r\n```\r\n$ python -m timeit -s 'from bson.json_util import dumps,loads;doc={\"a\": list(float(i) for i in range(100000))}' 'dumps(doc)'\r\n10 loops, best of 5: 31.1 msec per loop\r\n```",
    "head_branch": "PYTHON-4144",
    "is_a_fork": true,
    "comments": [
      "I decided to track the perf delta for each BSON type:\r\n\r\ntype | before (secs) | after (secs) | diff %\r\n-- | -- | -- | --\r\nbool | 0.125 | 0.14 | -10.71428571\r\nNoneType | 1.648 | 0.136 | 1111.764706\r\nint | 0.246 | 0.184 | 33.69565217\r\nfloat | 0.368 | 0.288 | 27.77777778\r\nInt64 | 0.287 | 0.198 | 44.94949495\r\nstr | 0.287 | 0.187 | 53.47593583\r\nbytes | 1.112 | 0.977 | 13.81780962\r\ndatetime | 2.816 | 2.693 | 4.567396955\r\nDatetimeMS | 3.878 | 3.64 | 6.538461538\r\nUUID | 1.678 | 1.517 | 10.61305208\r\nBinary | 1.096 | 1.006 | 8.946322068\r\nCode | 0.581 | 0.483 | 20.28985507\r\nDBRef | 3.964 | 3.645 | 8.751714678\r\nObjectId | 0.592 | 0.499 | 18.63727455\r\nMaxKey | 0.427 | 0.342 | 24.85380117\r\nMinKey | 0.432 | 0.337 | 28.18991098\r\nRegex | 2.935 | 2.934 | 0.03408316292\r\nPattern | 3.009 | 3.018 | -0.2982107356\r\nTimestamp | 0.802 | 0.719 | 11.54381085\r\nDecimal128 | 2.994 | 2.906 | 3.028217481\r\n\r\n\r\nYou can see that this is pretty much an easy win across the board except for `bool` which dropped 12%. The explanation is that in the old code `bool` was the first type we check for so it was being encoded as fast as possible. This advantage (bias) for `bool` disappears now that all type encoding functions are looked up in the same table. Personally I think a small drop for bools is fine given the overall benefit. ",
      "Note this was the benchmark:\r\n```python\r\nimport uuid\r\nimport re\r\nimport timeit\r\nfrom datetime import datetime\r\nfrom bson import *\r\nfrom bson import json_util\r\n\r\nobjects = [\r\n    True,\r\n    None,\r\n    1,\r\n    1.1,\r\n    Int64(64),\r\n    'str',\r\n    b'bytes',\r\n    datetime.now(),\r\n    DatetimeMS(1),\r\n    uuid.uuid4(),\r\n    Binary(b'1'),\r\n    Code(\"code\"),\r\n    DBRef(\"coll\", ObjectId()),\r\n    ObjectId(),\r\n    MaxKey(),\r\n    MinKey(),\r\n    Regex(\"pat\"),\r\n    re.compile(\"pat\"),\r\n    Timestamp(1, 1),\r\n    Decimal128(\"0.5\"),\r\n]\r\n\r\n\r\nfor o in objects:\r\n    doc = {\"a\": [o for _ in range(10000)]}\r\n    opts = json_util.RELAXED_JSON_OPTIONS.with_options(uuid_representation=STANDARD)\r\n    tot = timeit.timeit(\"json_util.dumps(doc, json_options=opts)\", globals=globals(), number=100)\r\n    print(f\"{type(o).__name__}, {tot:.3f}\")\r\n```",
      "Ready for another look."
    ],
    "commit_messages": [
      "PYTHON-4144 Optimize json_util encoding performance using single dispatch table (#1475)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74c44ee515ce6a4aeee",
    "number": 1474,
    "body": "https://jira.mongodb.org/browse/PYTHON-4143\r\n\r\nExplanation:\r\nPreviously, when our default() method would encounter an object of type int, float, str, or None it would go through every isintance if/else check, reach the bottom, raise a TypeError, then `_json_convert` would catch the TypeError and return the object. This is extremely wasteful and it's much faster to simply return the object when we know it's one of these types.",
    "head_branch": "PYTHON-4143",
    "is_a_fork": true,
    "comments": [
      "BEFORE:\r\n```\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(None for _ in range(100000))}' 'dumps(doc)'\r\n2 loops, best of 5: 160 msec per loop\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(str(\"1\") for _ in range(100000))}' 'dumps(doc)'\r\n2 loops, best of 5: 165 msec per loop\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(range(100000))}' 'dumps(doc)'\r\n2 loops, best of 5: 163 msec per loop\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(float(i) for i in range(100000))}' 'dumps(doc)'\r\n2 loops, best of 5: 182 msec per loop\r\n```\r\n\r\nAFTER:\r\n```\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(None for _ in range(100000))}' 'dumps(doc)'\r\n20 loops, best of 5: 11.4 msec per loop\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(str(\"1\") for _ in range(100000))}' 'dumps(doc)'\r\n10 loops, best of 5: 29.1 msec per loop\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(range(100000))}' 'dumps(doc)'\r\n10 loops, best of 5: 25.8 msec per loop\r\n$ python -m timeit -s 'from bson.json_util import dumps;doc={\"a\": list(float(i) for i in range(100000))}' 'dumps(doc)'\r\n10 loops, best of 5: 39.4 msec per loop\r\n```\r\n\r\nImprovement:\r\n- None 14x\r\n- str 5.7x\r\n- int 6.3x\r\n- float 4.6x"
    ],
    "commit_messages": [
      "PYTHON-4143 Optimize JSON encoding of int, float, str, and None (#1474)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74d44ee515ce6a4aeef",
    "number": 1473,
    "body": "https://jira.mongodb.org/browse/PYTHON-4142",
    "head_branch": "PYTHON-4142",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4142 json_util.default should always convert Int64 (#1473)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc74e44ee515ce6a4aef0",
    "number": 1472,
    "body": null,
    "head_branch": "PYTHON-1374-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1374 Optimize json_util performance for log truncation (#1472)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc75044ee515ce6a4aef1",
    "number": 1471,
    "body": null,
    "head_branch": "PYTHON-1374-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc75244ee515ce6a4aef2",
    "number": 1470,
    "body": null,
    "head_branch": "master",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc75644ee515ce6a4aef3",
    "number": 1469,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rebase (#1469)\n\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>\r\nCo-authored-by: Casey Clements <caseyclements@users.noreply.github.com>\r\nCo-authored-by: Jib <jib.adegunloye@mongodb.com>\r\nCo-authored-by: Shane Harvey <shnhrv@gmail.com>\r\nCo-authored-by: sleepyStick <itsirisho@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc75744ee515ce6a4aef4",
    "number": 1468,
    "body": null,
    "head_branch": "standardized-logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rebase to master (#1468)\n\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>\r\nCo-authored-by: Casey Clements <caseyclements@users.noreply.github.com>\r\nCo-authored-by: Jib <jib.adegunloye@mongodb.com>\r\nCo-authored-by: Shane Harvey <shnhrv@gmail.com>\r\nCo-authored-by: sleepyStick <itsirisho@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc75944ee515ce6a4aef5",
    "number": 1467,
    "body": "Follows [DRIVERS-926](https://jira.mongodb.org/browse/DRIVERS-926). See JIRA(s) for details.",
    "head_branch": "PYTHON-4016-ReadConcernMajorityNotAvailableYet-retryable-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4016 making ReadConcernMajorityNotAvailableYet a retryable error (#1467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc75b44ee515ce6a4aef6",
    "number": 1466,
    "body": "https://jira.mongodb.org/browse/PYTHON-4125",
    "head_branch": "PYTHON-4125",
    "is_a_fork": true,
    "comments": [
      "Passing perf task here: https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_3dea7ccf3186aa1d3101fce8729e8beb2bd35e89_659c5a601e2d170d8d52a42c_24_01_08_20_26_11/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nBetter UI here: https://performance-analyzer.server-tig.prod.corp.mongodb.com/perf-analyzer-viz?comparison_id=f1ec4893-c983-4f01-8f89-be9490ce7d51&selected_tab=data-table&percent_filter=0%7C%7C100&z_filter=0%7C%7C10\r\n\r\nHere's a screenshot:\r\n<img width=\"1260\" alt=\"Screenshot 2024-01-08 at 3 54 04 PM\" src=\"https://github.com/mongodb/mongo-python-driver/assets/5015933/fdf26bcd-142e-4383-9877-e4a78f7e9f60\">\r\n\r\nNote that the BSON micro-benchmarks were mistakenly using json.loads instead of json_util.loads so there's some extra noise in the results.\r\n\r\nHere's a comparison between the bson and json performance for each benchmark which shows that json encoding is up to 30x slower than bson. It also shows that json _encoding_ is much slower than json _decoding_. Most of this overhead comes from the preprocessing done in `_json_convert`:\r\ntest | bson MB/s | json MB/s | bson VS json\r\n-- | -- | -- | --\r\nDeepDecoding | 98.68238734 | 25.97032862 | 3.8x\r\nDeepEncoding | 118.2701396 | 5.40075368 | 21.9x\r\nFlatDecoding | 272.9201894 | 42.0814357 | 6.5x\r\nFlatEncoding | 331.9115176 | 10.24674949 | 32.4x\r\nFullDecoding | 95.75125018 | 14.39501583 | 6.6x\r\nFullEncoding | 195.5262145 | 6.731282137 | 29.0x\r\n\r\n"
    ],
    "commit_messages": [
      "PYTHON-4125 Add JSON micro-benchmarks (#1466)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc75d44ee515ce6a4aef7",
    "number": 1465,
    "body": null,
    "head_branch": "PYTHON-3175",
    "is_a_fork": true,
    "comments": [
      "> Could you run a benchmark with:\r\n> \r\n> * 100 threads all running short running op (eg ping)\r\n> * 100 threads all running a long running op (eg find one with a sleep)\r\n> \r\n> As well as the EVG benchmark? I'm wondering if there's a cost to adding this polling loop to every connection.\r\n\r\nEVG benchmark results: https://performance-analyzer.server-tig.prod.corp.mongodb.com/perf-analyzer-viz?comparison_id=9802c9f9-659e-46b3-97ac-c268f34a581c&selected_tab=data-table&percent_filter=0%7C%7C100&z_filter=0%7C%7C10 \r\n\r\nA slight decrease for some operations, a slight improvement or no change for others. \r\n\r\nI ran a very simple local benchmark that created 100 threads and executed either a `ping` or a `find_one` with a sleep on each, timing the runtime and averaging out the result over all the threads. The runtime over 100 iterations of this benchmark is essentially unchanged when compared to master.",
      "Looking at the perf results it does appear this results in a ~5% decrease. Locally with 100 threads I see a decrease of somewhere between 5-10%:\r\n```\r\n$ git:(master) time python bench-100-threads.py \r\npython bench-100-threads.py  6.61s user 8.06s system 129% cpu 11.320 total\r\n$ git:(master) time python bench-100-threads.py \r\npython bench-100-threads.py  6.65s user 8.13s system 130% cpu 11.297 total\r\n$ git:(master) time python bench-100-threads.py \r\npython bench-100-threads.py  6.86s user 8.52s system 129% cpu 11.842 total\r\n```\r\nvs\r\n```\r\n$ git:(NoahStapp-PYTHON-3175) time python bench-100-threads.py \r\npython bench-100-threads.py  7.18s user 8.52s system 127% cpu 12.323 total\r\n$ git:(NoahStapp-PYTHON-3175) time python bench-100-threads.py \r\npython bench-100-threads.py  7.26s user 8.88s system 130% cpu 12.320 total\r\n$ git:(NoahStapp-PYTHON-3175) time python bench-100-threads.py \r\npython bench-100-threads.py  7.34s user 9.02s system 132% cpu 12.335 total\r\n```\r\n\r\nWith a single threaded benchmark the total execution time is about the same but the user and system CPU time goes up by 5%\r\n\r\n```\r\n$ git:(master) time python bench-single-thread.py\r\n1.80s user 0.34s system 50% cpu 4.259 total\r\n$ git:(master) time python bench-single-thread.py\r\n1.81s user 0.34s system 50% cpu 4.267 total\r\n$ git:(master) time python bench-single-thread.py\r\n1.85s user 0.36s system 51% cpu 4.277 total\r\n```\r\nVS\r\n```\r\n$ git:(NoahStapp-PYTHON-3175) time python bench-single-thread.py\r\n1.99s user 0.41s system 56% cpu 4.277 total\r\n$ git:(NoahStapp-PYTHON-3175) time python bench-single-thread.py\r\n1.97s user 0.42s system 56% cpu 4.239 total\r\n$ git:(NoahStapp-PYTHON-3175) time python bench-single-thread.py\r\n1.97s user 0.41s system 55% cpu 4.254 total\r\n```\r\n\r\nHere's the single-threaded benchmark:\r\n```python\r\nfrom pymongo import MongoClient\r\nclient = MongoClient()\r\nN_ITERATIONS = 50000\r\n\r\ndef main():\r\n    for _ in range(N_ITERATIONS):\r\n        client.admin.command('ping')\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nI don't think this should hold up this PR but it would be good to circle back and see how we can improve. Could you open a new ticket?"
    ],
    "commit_messages": [
      "PYTHON-3175 Preemptively cancel in progress operations when SDAM heartbeats timeout (#1465)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc75e44ee515ce6a4aef8",
    "number": 1464,
    "body": "https://jira.mongodb.org/browse/PYTHON-4087",
    "head_branch": "PYTHON-4087",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4087 Fix test_validate_collection_background by flushing writes via fsync (#1464)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76044ee515ce6a4aef9",
    "number": 1463,
    "body": "…for reads\r\n\r\nExceededTimeLimit, Code 262 had already been added to pymongo.helpers._RETRYABLE_ERROR_CODES.\r\n\r\nThis simply adds the test. Exact same unified json as used in the C driver used for reference: \r\n\r\nhttps://github.com/mongodb/mongo-c-driver/pull/1482/files#diff-d96d8295b32780116338ab4eacb607f962ac00cbb900b17667493e8ec2072eac ",
    "head_branch": "PYTHON-4015-Make-ExceededTimeLimit-retryable-reads-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4015 Add test that ExceededTimeLimit is a retryable exception for reads (#1463)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76244ee515ce6a4aefa",
    "number": 1462,
    "body": null,
    "head_branch": "PYTHON-4111",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4111 Search index management operations fail with a different error message (#1462)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76644ee515ce6a4aefb",
    "number": 1461,
    "body": "Also updates the Project [URLs](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#urls) that will be rendered on PyPI since we're removing a couple links from the readme.",
    "head_branch": "PYTHON-4103",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4103 Add badges to README (#1461)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76744ee515ce6a4aefc",
    "number": 1460,
    "body": "Summary of changes:\r\n\r\n- Use `_type_marker` to detect BSON types and move into separate helper function.\r\n- Remove SON from `json_util`, use plain `dict` instead.\r\n- Reorder cases in `default` to optimize for more common/faster cases.",
    "head_branch": "PYTHON-1374",
    "is_a_fork": true,
    "comments": [
      "Latest perf run is still not great: https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_9d32a09e30aec795ffb381f4fc3f827f780e662c_657ca9ec0ae60651e7c3a4b6_23_12_15_19_33_09/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC",
      "Before merging this it would be great to pull in the JSON micro benchmarks added in PYTHON-4125 to see the improvement.",
      "> Before merging this it would be great to pull in the JSON micro benchmarks added in [PYTHON-4125](https://jira.mongodb.org/browse/PYTHON-4125) to see the improvement.\r\n\r\nPulled in and ran a benchmark: https://performance-analyzer.server-tig.prod.corp.mongodb.com/perf-analyzer-viz?comparison_id=821845e0-c46b-4521-8c7d-82e187a6757c&selected_tab=data-table&percent_filter=0%7C%7C100&z_filter=0%7C%7C10.\r\n\r\nMost of the JSON benchmarks don't have a data point to compare to in the mainline commits, but I manually compared them and this branch is even for decoding tests and around twice as fast for encoding tests.",
      "> Most of the JSON benchmarks don't have a data point to compare to in the mainline commits\r\n\r\nThere should be a data point in mainline from this commit: https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_70bd1632cf94c66f7661e5c234418421f664c4ed_24_01_09_18_17_33/tests?execution=0&page=0&sortBy=DURATION&sortDir=DESC\r\n\r\nI guess the issue must be that this work is in the standardized-logging branch, not master.\r\n\r\n> this branch is even for decoding tests and around twice as fast for encoding tests.\r\n\r\nAwesome work!",
      "> Could we create a new PR with only the general JSON improvements? That way we can merge the general JSON improvements in one commit and split out the logging specific max_length feature as a separate PR. Currently it's tough to review this PR as it has a lot of unrelated changes.\r\n\r\nTo clarify, split this PR into the JSON improvements and a separate PR for the logging-specific changes?",
      "Yes exactly. "
    ],
    "commit_messages": [
      "PYTHON-1374 Optimize json_util performance (#1460)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76844ee515ce6a4aefd",
    "number": 1459,
    "body": "During a conversation about changes in universal wheel support in MacOS after Python 3.7, we discovered that we hadn't published 3.7 wheels for MacOS since 4.4.0. We have manually built and uploaded the missing versions. This PR fixes the mistake made in the refactor in .evergreen/config.yml.\r\n\r\nGoing forward, we will be using Github Actions for release because it supports trusted publishing. See .github/workflows/release-python.yml.",
    "head_branch": "feature/PYTHON-4077-macos-wheel-py37",
    "is_a_fork": true,
    "comments": [
      "I confirmed the file is now part of the upload zip: `pymongo-4.7.0.dev0-cp37-cp37m-macosx_10_9_x86_64.whl`.  ",
      "Missing wheels were built and uploaded manually. This PR updates `config.yml` for reproducibility. "
    ],
    "commit_messages": [
      "PYTHON-4077 Make sure to upload release wheel for python 3.7 on macos… (#1459)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76844ee515ce6a4aefe",
    "number": 1458,
    "body": null,
    "head_branch": "PYTHON-4084",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4084 Fix BSON inflation for DBRef (#1458)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76a44ee515ce6a4aeff",
    "number": 1457,
    "body": "checks individual docs are less than max_bson_size, simply by adding insert as special case, alongside unacknowledged writes, that checks individual docs in addition to command size.\r\n\r\nThis means all of the following sizes of \"large\" now throw DocumentTooLarge(BSONError). Previously 3 different sizes produced 3 different exceptions. Exception handling for clients will be significantly easier. These now all raise DocumentTooLarge.\r\n\r\n```\r\n    large = {\"large\": \"1\" * 1024 * 1024 * 16}  # max_bson_size < doc < max_command_size\r\n    xlarge = {\"xlarge\": \"1\" * 1024 * 1024 * 18}  #  max_command_size < doc\r\n    xxl = {\"xxl\": \"1\" * 1024 * 1024 * 48}  # max_message_size < doc\r\n    \r\n    CASE 2B: coll.insert_many([large] where large in [L, XL, XXL])\r\ninsert_many([large])type(eDocDict16)=<class 'pymongo.errors.BulkWriteError'>. errmsg: object to insert too large. size in bytes: 16777250, max size: 16777216\r\ninsert_many([xlarge]): type(eDocDict18)=<class 'pymongo.errors.OperationFailure'>. errmsg: BSONObj size: 18874403 (0x1200023) is invalid. Size must be between 0 and 16793600(16MB) First element: _id: ObjectId('657546bce7630c6acf9cdd53')\r\ninsert_many([xxl]): type(eDocDict48)=<class 'pymongo.errors.DocumentTooLarge'>. errmsg: BSON document too large (50331680 bytes) - the connected server supports BSON document sizes up to 16777216 bytes.\r\n```",
    "head_branch": "feature/PYTHON-4085-insert-many-large",
    "is_a_fork": true,
    "comments": [
      "Failing tests are only happening on PyPy. I'm going try to reproduce locally with a pypy venv.",
      "Closing to wait for 5.0"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc76c44ee515ce6a4af00",
    "number": 1456,
    "body": null,
    "head_branch": "PYTHON-4084",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4084 Fix BSON inflation for RawBSONDocument (#1456)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77044ee515ce6a4af01",
    "number": 1455,
    "body": "This PR handles the first case of https://jira.mongodb.org/browse/PYTHON-1366 - insert_one(large_doc)\r\nWe no longer raise an Operation error if the document is larger than the document size limit but under the command size limit. \r\n",
    "head_branch": "feature/PYTHON-1366-insert-one-large",
    "is_a_fork": true,
    "comments": [
      "What is going on in the following? From `tox -m linkcheck` \r\n\r\n(           index: line   91) broken    http://api.mongodb.org/python/ - HTTPConnectionPool(host='api.mongodb.com', port=80): Max retries exceeded with url: /python/ (Caused by NameResolutionError(\"<urllib3.connection.HTTPConnection object at 0x7f648d003740>: Failed to resolve 'api.mongodb.com' ([Errno -2] Name or service not known)\"))",
      "The link check failure is unrelated, the docs team is looking into it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77144ee515ce6a4af02",
    "number": 1454,
    "body": null,
    "head_branch": "PYTHON-4079",
    "is_a_fork": true,
    "comments": [
      "The docs failure is unrelated, due to a DNS outage.",
      "In EVG we also build the manylinux1 wheels, can we add those as well? If manylinux1 wheels are no longer needed then could you update the changelog to mention we stopped releasing them?",
      "> If manylinux1 wheels are no longer needed then could you update the changelog to mention we stopped releasing them?\r\n\r\nI'd prefer that route since we don't support Python 3.6 anymore, should I also remove them from the EVG script?",
      "Sounds good to me. This comment from Oct 2021 shows 3.7 has 8% manylinux1 usage and 2% manylinux2010 usage so it seems fine to drop them now: https://github.com/pypa/manylinux/issues/994#issuecomment-983058889",
      "Should we rename the PR to \"Remove manylinux1 wheels\"?",
      "I guess I also have one question: why not just keep manylinux1 until it becomes a maintenance burden? It seems like it doesn't cost us anything to keep building and publishing them. And it would benefit users on older distros.",
      "> why not just keep manylinux1 until it becomes a maintenance burden\r\n\r\nLooks like that can work:\r\n\r\n- pymongo-4.7.0.dev0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\n- pymongo-4.7.0.dev0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\r\n",
      "@blink1073 All looks good. Two questions.\r\n\r\n1.  Do wheels names like this mean that they're cross-compiled: pymongo-4.7.0.dev0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\n\r\n2.  test-skip = \"*-macosx_universal2:arm64\" Does this mean that we build the wheel for apple silicon, but don't test it?\r\n\r\n\r\n\r\n",
      "> Do wheels names like this mean that they're cross-compiled: pymongo-4.7.0.dev0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\n\r\nIt means the symbols used support both of those manylinux targets.\r\n\r\n> Does this mean that we build the wheel for apple silicon, but don't test it?\r\n\r\nYes, apple silicon is not yet available on GitHub Actions"
    ],
    "commit_messages": [
      "PYTHON-4079 Generate ManyLinux2014 and ManyLinux1 Wheels (#1454)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77344ee515ce6a4af03",
    "number": 1453,
    "body": null,
    "head_branch": "PYTHON-4046-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4046 Add connection string tests for uppercase UNIX socket names (#1453)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77544ee515ce6a4af04",
    "number": 1452,
    "body": null,
    "head_branch": "PYTHON-4046",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77744ee515ce6a4af05",
    "number": 1451,
    "body": "https://jira.mongodb.org/browse/PYTHON-4070\r\n\r\nIf not configured correctly, tox fails to find setuptools, and thus cannot run core commands like `tox -m test`.  I could reproduce this a couple ways - using pipx and using brew. Adding setuptools as a dependency in tox.ini sidesteps any further setup work and confusion. No need to change onboarding docs either.",
    "head_branch": "feature/PYTHON-4070-setuptools-tox-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4070 Add setuptools as dep for test target (#1451)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77944ee515ce6a4af06",
    "number": 1450,
    "body": "https://jira.mongodb.org/browse/PYTHON-4070\r\n\r\nThere are a couple of circumstances in which tox may not have setuptools configured when originally set up. I was able to run into this same situation, first using pipx, and then using brew. Adding this one line to tox.ini sidesteps such issues.",
    "head_branch": "feature/PYTHON-4070-setuptools-tox",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77b44ee515ce6a4af07",
    "number": 1449,
    "body": "JIRA: https://jira.mongodb.org/browse/PYTHON-4072\r\n\r\nSummary:\r\nRecent changes from the server team changed how the client kwarg \"background\" was treated. Specifically, this option is not intended to be used in standalone mode so they added a validation of this. \r\n\r\nChanges required:\r\nAdding decorator to toggle off in standalone mode\r\n@client_context.require_no_standalone",
    "head_branch": "feature/PYTHON-4072-turnoff-standalone-background-validation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4072 Add test decorator turning off test.test_database.TestDat… (#1449)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77c44ee515ce6a4af08",
    "number": 1448,
    "body": "JIRA LINK:  https://jira.mongodb.org/browse/PYTHON-4055\r\n\r\nSummary:\r\n\r\nIgnoring temporary xunit-result directories, in additional to a few others as described in the ticket.",
    "head_branch": "feature/PYTHON-4055-gitignore-xunit-results",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc77e44ee515ce6a4af09",
    "number": 1447,
    "body": null,
    "head_branch": "PYTHON-4054",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey the last commit enables the incremental builds by removing the `-E` flag."
    ],
    "commit_messages": [
      "PYTHON-4054 Add ability to serve live docs (#1447)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78244ee515ce6a4af0a",
    "number": 1446,
    "body": null,
    "head_branch": "PYTHON-3963",
    "is_a_fork": true,
    "comments": [
      "The failing test is our ongoing known failure described in [PYTHON-4072](https://jira.mongodb.org/browse/PYTHON-4072)",
      "Some ideas:\r\n\r\nI don't think we want to tie all these things together into a single script/tox env.   We'd want to leave the server running and libmongocrypt in place between runs.\r\n\r\nWhat I'd recommend is:\r\n\r\n- Rename `run-encryption-tests.sh` to `start-kmip-server.sh` and have it write out a `.pid` file, and call that script from EVG to remove the redundancy.\r\n- Move the logic for handling the secrets file and AWS env variables into `run-tests.sh`.\r\n- Remove the local script and `encryption-tests` tox entry.\r\n- Add tox entries for `setup-encryption` and `teardown-encryption`.\r\n  - Setup encryption starts the kmip server and fetches the secrets\r\n  - Teardown encryption stops the kmip server and removes libmongocrypt dir\r\n- Add an entry in `CONTRIBUTING.md` for encryption testing telling you to:\r\n  - Run `AWS_PROFILE=<foo> tox -e setup-encryption`\r\n  - Run your tests as `TEST_ENCRYPTION=1 tox -e test-eg` as desired.\r\n  - Run `tox -e teardown-encryption` when done.",
      "I like the approach of separating out the different components, just a few clarifying questions.\r\n\r\n> * Rename `run-encryption-tests.sh` to `start-kmip-server.sh` and have it write out a `.pid` file, and call that script from EVG to remove the redundancy.\r\n\r\nThe existing redundancy of starting the `kmip` servers is due to what seems to be an EG bug that prevents the `kmip` server startup from working if `run-encryption-tests-sh.` is used. Ideally this redundancy is eliminated, but I've been unable to determine the cause.\r\n\r\n> * Move the logic for handling the secrets file and AWS env variables into `run-tests.sh`.\r\n\r\nIs our eventual goal to have `run-tests.sh` contain the bulk of the existing EG `config.yml` logic?\r\n\r\n> * Add an entry in `CONTRIBUTING.md` for encryption testing telling you to:\r\n>   * Run `AWS_PROFILE=<foo> tox -e setup-encryption`\r\n>   * Run your tests as `TEST_ENCRYPTION=1 tox -e test-eg` as desired.\r\n>   * Run `tox -e teardown-encryption` when done.\r\n\r\nI like all of these, but I think there's still a lot of value to be had in a single command that does all the setup, tests, and teardown without requiring manual user intervention. ",
      "Doc failure is for `http://api.mongodb.com/python/`, is that a known failure?"
    ],
    "commit_messages": [
      "PYTHON-3963 Migrate CSFLE Tests to AWS Secrets Vault (#1446)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78344ee515ce6a4af0b",
    "number": 1445,
    "body": "One line change to `.gitignore`. xunit-results/ and test/xunit-results/ can be safely ignored. I imagine everyone has some hack to ignore them already. It's nice to be able to `git add .` :)",
    "head_branch": "feature/PYTHON-4055-gitignore-xunit-results",
    "is_a_fork": true,
    "comments": [
      "Could you add the other files mentioned in the ticket?\r\n> Additional ones appearing are: \r\n> - .eggs/\r\n> - .vscode/\r\n> - server.log",
      "> Could you add the other files mentioned in the ticket?\r\n> \r\n> > Additional ones appearing are:\r\n> > \r\n> > * .eggs/\r\n> > * .vscode/\r\n> > * server.log\r\n\r\nShould we also add `drivers-evergreen-tools`, since a lot of local testing will require having `$DRIVERS_TOOLS` set?"
    ],
    "commit_messages": [
      "PYTHON-4055 Add xunit-results to .gitignore (#1445)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78544ee515ce6a4af0c",
    "number": 1444,
    "body": null,
    "head_branch": "PYTHON-4068",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4068 Fix AWS ECS Task (#1444)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78744ee515ce6a4af0d",
    "number": 1443,
    "body": "Speculative continuation of https://github.com/mongodb/mongo-python-driver/pull/1401, based on https://github.com/mongodb/mongo-python-driver/pull/1209.\r\n\r\nDepends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/376.",
    "head_branch": "PYTHON-3467-2",
    "is_a_fork": true,
    "comments": [
      "evergreen retry"
    ],
    "commit_messages": [
      "PYTHON-3467 OIDC: Automatic token acquisition for Azure Identity Provider (#1443)\n\nCo-authored-by: Jib <Jibzade@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78944ee515ce6a4af0e",
    "number": 1442,
    "body": "Here's a passing build on my fork: https://github.com/blink1073/mongo-python-driver/actions/runs/7023293310?pr=3",
    "head_branch": "PYTHON-4045",
    "is_a_fork": true,
    "comments": [
      "> Should we remove the Evergreen release tasks now? Or do we want to keep those as a backup?\r\n\r\nYeah I intentionally left them as backup."
    ],
    "commit_messages": [
      "PYTHON-4045 Use PyPI Trusted Publishing (#1442)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78b44ee515ce6a4af0f",
    "number": 1441,
    "body": "Leaving as draft until https://github.com/mongodb/mongo-python-driver/pull/1432 is merged so I can update `CONTRIBUTING.md` to reference https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html.\r\n\r\nI used https://gist.github.com/blink1073/c5c174f64eaec3f118c4829cef05884a to reformat the docstrings.",
    "head_branch": "PYTHON-3605",
    "is_a_fork": true,
    "comments": [
      "Nice! Does this give us a path to removing the inline argument types in the docs?\r\n\r\nlike this one:\r\n```\r\ndecode(codec_options: CodecOptions[Any] = CodecOptions(document_class=dict, tz_aware=False, uuid_representation=UuidRepresentation.UNSPECIFIED, unicode_decode_error_handler='strict', tzinfo=None, type_registry=TypeRegistry(type_codecs=[], fallback_encoder=None), datetime_conversion=DatetimeConversion.DATETIME)) → dict[str, Any]\r\n```",
      "Hmm, some of the APIs are doing that in this PR, but not that one, I'll investigate.  The original ticket had that feature as its main goal.",
      "Ah, it might be the presence of `@overload`.",
      "Ah yes, the overload on codec_options=None piece, I like it.",
      "Because https://pymongo--1441.org.readthedocs.build/en/1441/api/pymongo/database.html#pymongo.database.Database.command has the same issue, but not https://pymongo--1441.org.readthedocs.build/en/1441/api/pymongo/database.html#pymongo.database.Database.cursor_command",
      "I think it would be good to keep this PR as just changing the params and open a new PR if we want to add more overloads.",
      "Note that some of the overloads will go away with [PYTHON-3992](https://jira.mongodb.org/browse/PYTHON-3992)",
      ">  if we want to add more overloads.\r\n\r\nThis PR doesn't add new `@overloads`, it just looks like `autodoc_typehints` doesn't work with `@overload`"
    ],
    "commit_messages": [
      "PYTHON-3605 Move type annotations to parameter list in rendered docs (#1441)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78c44ee515ce6a4af10",
    "number": 1440,
    "body": "https://jira.mongodb.org/browse/PYTHON-3036\r\n\r\nWhen an unknown kwarg was passed to MongoClient, the ConfigurationError wasn't helpful. I use the standard lib package `difflib` to look for similar known options. It appears to work pretty well. \r\n\r\nFirst contribution to this mongodb. This PR / ticket doubles as SDLC tutorial. I've got a feature branch with a couple tests that I'll now use.\r\n\r\nIt will now look something like this:\r\n\r\n```\r\nConfigurationError('Unknown option: auth. Did you mean: authsource, authmechanism, authoidcallowedhosts?')\r\n```",
    "head_branch": "feature/PYTHON-3036",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3036 Improve error message for unknown MongoClient options (#1440)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc78e44ee515ce6a4af11",
    "number": 1439,
    "body": "[PYTHON-3823](https://jira.mongodb.org/browse/PYTHON-3823) While working on this project I realized that almost all of the data_sizes were incorrect. Instead of hardcoding them I decided to dynamically calculate the data size where it was straightforward to do so.\r\n\r\nFor example:\r\n- TestDeepEncoding/Decoding the data size is actually 19660000, not 19640000.\r\n- TestFlatEncoding/Decoding the data size is actually 60460000, not 75310000.\r\n- TestFullEncoding/Decoding the data size is actually 40260000, not 57340000.\r\n- TestFindOneByID/TestFindManyAndEmptyCursor the data size is actually 15310000, not 16220000.\r\n- TestSmallDocInsertOne/TestSmallDocBulkInsert the data size is actually 2500000, not 2750000.\r\n- TestLargeDocInsertOne/TestLargeDocBulkInsert the data size is actually 25000640, not 27310890.\r\n- etc...\r\n\r\nThis will make the perf results more accurate.",
    "head_branch": "PYTHON-3823",
    "is_a_fork": true,
    "comments": [
      "Refactored more code away and de-duped magic numbers. New perf task running here: https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_fc220532df094efdd24bd4024e83d45caf33df50_6557bf4e1e2d175fd4b35d62_23_11_17_19_30_24/logs?execution=0"
    ],
    "commit_messages": [
      "PYTHON-3823 Audit benchmark data_size and calculate dynamically it where possible (#1439)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79044ee515ce6a4af12",
    "number": 1438,
    "body": null,
    "head_branch": "PYTHON-2822",
    "is_a_fork": true,
    "comments": [
      "> Could you update the changelog to mention all the new apis?\r\n\r\nDo we mention internal code changes in the changelog? None of the changes will effect user behavior/APIs.",
      "No we don't mention internal api changes but Hello and the command events are public, not internal."
    ],
    "commit_messages": [
      "PYTHON-2822 Add server connectionId to command monitoring events (#1438)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79444ee515ce6a4af13",
    "number": 1437,
    "body": "Notes:\r\n- I converted our changelog and the encryption example page, with no hand edits.\r\n- We need to use explicit ref targets instead of implicit refs based on header names, which is more robust anyway.  See change in `doc/installation.rst`.\r\n- Links to API docs are working as expected.  When copying from docstrings, we would replace the `:class:` with `{class}` (or other directive), and update the link styles from RST to Markdown as appropriate, or we could have a tox job that takes an input file and uses RST-to-Myst to convert it for us.\r\n",
    "head_branch": "try-myst",
    "is_a_fork": true,
    "comments": [
      "I still don't think we should do this:\r\n- we'll no longer be able to copy/paste between our docs and the docstrings\r\n- we'll need to context switch between two formats instead of one\r\n- myst style markdown render just as poorly in github as rst so there's no benefit there\r\n- we need a new dependency"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79844ee515ce6a4af14",
    "number": 1436,
    "body": "[PYTHON-3823](https://jira.mongodb.org/browse/PYTHON-3823). This PR merges the  perf task into main project. I've disabled the mongo-python-driver-perf project. This makes it easier to test and track perf changes. For example, we can now schedule the perf job on the EVG patch build in a pull request rather than manually creating another patch on a separate project. Most other drivers use this model.\r\n\r\nThis change also updates to clone the test data from the spec repo and changes the benchmark to report megabytes per second instead of bytes per second to comply with the spec: \r\n> In addition to timing data, all micro-benchmark tasks will be measured in terms of \"megabytes/second\" (MB/s) of documents processed, with higher scores being better. (In this document, \"megabyte\" refers to the SI decimal unit, i.e. 1,000,000 bytes.) This makes cross-benchmark comparisons easier.\r\n\r\nhttps://github.com/mongodb/specifications/blob/master/source/benchmarking/benchmarking.rst#measurement\r\n\r\nThis the PR task here: https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_2ac7f0d88d6856f6fc2ba88567627851e528956d_6556880932f417c7eef470d2_23_11_16_21_22_19/logs?execution=0",
    "head_branch": "PYTHON-3823",
    "is_a_fork": true,
    "comments": [
      "Didn't see your LGTM before I pushed other changes. I reverted the unreviewed changes and I'll on a new PR."
    ],
    "commit_messages": [
      "PYTHON-3823 Merge perf task into main project (#1436)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79944ee515ce6a4af15",
    "number": 1435,
    "body": "(cherry picked from commit 9c45ef808a7e3e69479fb2edf664e1d4adc7b02f)",
    "head_branch": "PYTHON-4043-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4043 [v4.6] Add changelog entry for 4.6.1 (#1435)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79a44ee515ce6a4af16",
    "number": 1434,
    "body": null,
    "head_branch": "PYTHON-3745",
    "is_a_fork": true,
    "comments": [
      "I scheduled all of the `mod_wsgi` tests to exercise subinterpreters.",
      "> Without Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED I think this change could break some users.\r\n\r\nFixed",
      "mod_wsgi 4.x Python 3.7 Ubuntu 22.04 is failing intermittently, both with and without the Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED block.   `mod_wsgi` is a bit of a black box, should we skip that particular configuration and wait until we can more directly test multiple interpreters?",
      "> mod_wsgi 4.x Python 3.7 Ubuntu 22.04 is failing intermittently\r\n\r\nIs it also failing on main or only after the multiphase changes?",
      "After the multiphase changes",
      "I suggest we open a mod_wsgi issue to ask if multiphase init modules are supported: https://github.com/GrahamDumpleton/mod_wsgi",
      "It's the interpreter itself that defines compat as I understand it, the feature should be usable from Python 3.5.  I propose we close this PR and restart when we can test directly against subinterpreters to see if there is an actual bug.",
      "I think it could be a bug in mod_wsgi because it has custom code to create subinterpreters. We'll also still need to keep the mod_wsgi tests even once we can test subinterpreters directly so I think we should try investigating the mod_wsgi bug now to avoid delaying this change. ",
      "I'm going to have to backlog this for now until I finish OIDC work.",
      "Closing in favor of https://github.com/mongodb/mongo-python-driver/pull/1499"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79b44ee515ce6a4af17",
    "number": 1433,
    "body": "I will backport to the v4.6 branch as well.",
    "head_branch": "PYTHON-4043",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4043 Add changelog entry for 4.6.1 (#1433)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79c44ee515ce6a4af18",
    "number": 1432,
    "body": null,
    "head_branch": "top-level-markdown",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4047 Convert top level docs files to Markdown (#1432)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79c44ee515ce6a4af19",
    "number": 1431,
    "body": "[PYTHON-3823](https://jira.mongodb.org/browse/PYTHON-3823) Migrate perf testing to rhel90-dbx-perf-large, Python 3.10.4, MongoDB 6.0.6.",
    "head_branch": "PYTHON-3823",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3823 Migrate perf testing to rhel90-dbx-perf-large, Python 3.10.4, MongoDB 6.0.6 (#1431)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc79d44ee515ce6a4af1a",
    "number": 1430,
    "body": null,
    "head_branch": "PYTHON-3457",
    "is_a_fork": true,
    "comments": [
      "The `test_Unacknowledged` tests for the `unified` `crud` tests required the change to `publish_command_start`.",
      "Could you link to the test you're referring to? I did't find it.",
      "> Could you link to the test you're referring to? I did't find it.\r\n\r\nHere's one: https://github.com/mongodb/mongo-python-driver/blob/134b7efaec4cf2b613d3cec44d541d88635a33fa/test/crud/unified/bulkWrite-updateMany-hint-unacknowledged.json#L179",
      "That test already exists and is already passing though.",
      "> That test already exists and is already passing though.\r\n\r\nYou're right, I just tested it in master and it passes. Must be a bug in the logging code or something, I'll investigate.",
      "Could you schedule the perf task to see if the logging lines add any noticeable overhead?",
      "> NIT: Not sure if you still wanted to go with adding this.\r\n\r\nSorry, what was the comment here? Github won't let me see what you're referring to.\r\n\r\n",
      "@ShaneHarvey perf task logs: https://evergreen.mongodb.com/task_log_raw/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_9d32a09e30aec795ffb381f4fc3f827f780e662c_6578ca2132f4177fd5fa9cc3_23_12_12_21_01_22/0?type=T.",
      "Did you see the 50-99% perf regression across the board? https://spruce.mongodb.com/task/mongo_python_driver_perf_tests_perf_6.0_standalone_patch_9d32a09e30aec795ffb381f4fc3f827f780e662c_6578ca2132f4177fd5fa9cc3_23_12_12_21_01_22/trend-charts?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\n![Screenshot 2023-12-13 at 3 23 50 PM](https://github.com/mongodb/mongo-python-driver/assets/5015933/3387f8dc-df77-44a7-8c0b-6f9a2e696d2a)\r\n\r\nWe can't merge until those issues are fixed."
    ],
    "commit_messages": [
      "PYTHON-3457 & PYTHON-3458 - Standardized debugging logging for command monitoring (#1430)\n\nCo-authored-by: sleepyStick <itsirisho@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc79e44ee515ce6a4af1b",
    "number": 1429,
    "body": "(cherry picked from commit 0ff6a87438fd9a324a8bfee198f9906183cc51d5)",
    "head_branch": "PYTHON-4038-46",
    "is_a_fork": true,
    "comments": [
      "I updated the [base branch](https://github.blog/2016-08-15-change-the-base-branch-of-a-pull-request/) to v4.6."
    ],
    "commit_messages": [
      "PYTHON-4038 [v4.6]: Ensure retryable read `OperationFailure`s re-raise exception when 0 or NoneType error code is provided.  (#1425) (#1429)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc79f44ee515ce6a4af1c",
    "number": 1428,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/371.  There are three known failures that the serverless team is working on.",
    "head_branch": "PYTHON-4031",
    "is_a_fork": true,
    "comments": [
      "I created https://jira.mongodb.org/browse/DRIVERS-2812 to track the known failures."
    ],
    "commit_messages": [
      "PYTHON-4031 Add driver tests for Serverless Proxy incremental rollout (#1428)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a044ee515ce6a4af1d",
    "number": 1427,
    "body": "Passing [builds](https://spruce.mongodb.com/version/655232fdc9ec445c352f3b5d/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC).",
    "head_branch": "PYTHON-4039",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4039 Handle more warnings in tests (#1427)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a144ee515ce6a4af1e",
    "number": 1426,
    "body": "## Callouts \r\n* Pool.metadata is a _somewhat_ public method that is now returning `SON` instead of `dict`. I would love perspective on if this could be considered a breaking conversion.\r\n* There are two test cases that now needed changing. Commentary needed on whether or not these are breaking changes.",
    "head_branch": "PYTHON-2884",
    "is_a_fork": true,
    "comments": [
      "> I would love perspective on if this could be considered a breaking conversion.\r\n\r\nYeah I think to be safe we should leave it as SON until 5.0.  It looks like some tests need to be updated as well.",
      "Pool is a private API so there are no compat concerns.",
      "> Pool is a private API so there are no compat concerns.\r\n\r\nAh, true, I missed that `MongoClient.__options` is private, I saw `options.pool_options.metadata` in a grep.",
      "Oh I didn't realize it was PoolOptions. That is indeed public:\r\n```python\r\n>>> client.options.pool_options.metadata\r\nSON([('driver', SON([('name', 'PyMongo'), ('version', '4.7.0.dev0')])), ('os', SON([('type', 'Darwin'), ('name', 'Darwin'), ('architecture', 'arm64'), ('version', '13.6')])), ('platform', 'CPython 3.11.4.final.0')])\r\n```",
      "Looks like two more tests need to be addressed:\r\n\r\n```\r\nFAILED test/test_collection.py::TestCollection::test_find_command_generation\r\nFAILED test/test_cursor.py::TestCursor::test_clone - AssertionError: False is...\r\n```",
      "Please wait for my review before merging.",
      "> A few minor comments, otherwise looks great, thanks Jib! Also, if we're removing `SON` entirely, can we also delete the `bson.son` file?\r\n\r\nAh, I don't think we're removing`SON` entirely, we're just deprecating our internal use of it. IIUC, SON is still perfectly viable, but outright removal would be a major version breaking change."
    ],
    "commit_messages": [
      "PYTHON-2884: Replaced SON usage in all internal classes and commands (#1426)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a244ee515ce6a4af1f",
    "number": 1425,
    "body": "TICKET: https://jira.mongodb.org/browse/PYTHON-4038\r\n\r\nPymongo is retrying a failed find connection ONCE that has a 0 or NoneType error code. \r\n\r\nThis is undesired behavior because if, theoretically, we introduce an error type that does not have an error code but is an instance of an `OperationFailure`, we will mistakenly retry leading to unexpected consequences.\r\n\r\nAdded 3 tests: \r\n- Test nonetype case\r\n- Test 0 case \r\n- Test 1 case\r\n",
    "head_branch": "PYTHON-4038",
    "is_a_fork": true,
    "comments": [
      "I need to add a test case into PyMongo to ensure this doesn't recur"
    ],
    "commit_messages": [
      "PYTHON-4038: Ensure retryable read `OperationFailure`s re-raise exception when 0 or NoneType error code is provided.  (#1425)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a244ee515ce6a4af20",
    "number": 1424,
    "body": "Implements [PYTHON-3170](https://jira.mongodb.org/browse/PYTHON-3170).",
    "head_branch": "PYTHON-3170",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3170 Run ping command in SRV spec tests (#1424)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a344ee515ce6a4af21",
    "number": 1423,
    "body": "Implements [PYTHON-3822](https://jira.mongodb.org/browse/PYTHON-3822).",
    "head_branch": "PYTHON-3822",
    "is_a_fork": true,
    "comments": [
      "Blocked on https://github.com/mongodb/specifications/pull/1473",
      "Split off [PYTHON-3170](https://jira.mongodb.org/browse/PYTHON-3170) to it's own PR here: https://github.com/mongodb/mongo-python-driver/pull/1424",
      "Spec PR was merged without changes so this is also ready to merge.",
      "@blink1073 waiting for your LGTM"
    ],
    "commit_messages": [
      "PYTHON-3822 Add SRV test with uppercase hostname (#1423)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a444ee515ce6a4af22",
    "number": 1422,
    "body": "https://spruce.mongodb.com/version/654a64ec850e61e18d5825fe/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "PYTHON-4033",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4033 Address perf test UserWarning (#1422)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a544ee515ce6a4af23",
    "number": 1421,
    "body": null,
    "head_branch": "PYTHON-2834",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2834 Direct read/write retries to another mongos if possible (#1421)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a644ee515ce6a4af24",
    "number": 1420,
    "body": null,
    "head_branch": "DRIVERS-2543-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DRIVERS-2543 Fix source branch for drivers-tools (#1420)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a744ee515ce6a4af25",
    "number": 1419,
    "body": null,
    "head_branch": "use-ruff-format",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4024 Use ruff formatter (#1419)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a844ee515ce6a4af26",
    "number": 1418,
    "body": "Based on the Go Driver implementation: https://github.com/mongodb/mongo-go-driver/commit/d8f19ab9cc105a06edcf186acb85f4e5656754a3",
    "head_branch": "PYTHON-3837",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3837 Driver Container and Kubernetes Awareness (#1418)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a844ee515ce6a4af27",
    "number": 1417,
    "body": null,
    "head_branch": "changelog-4.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated changelog with timeout info change (#1417)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7a944ee515ce6a4af28",
    "number": 1416,
    "body": "Fixes:\r\n```\r\n[2023/10/31 23:28:46.782] test-mockupdb: commands[1]> .evergreen/check-c-extensions.sh\r\n[2023/10/31 23:28:46.783] test-mockupdb: failed with .evergreen/check-c-extensions.sh (resolves to .evergreen/check-c-extensions.sh) is not allowed, use allowlist_externals to allow it\r\n[2023/10/31 23:28:46.783] .pkg: _exit> python /opt/python/3.7/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n[2023/10/31 23:28:46.812]   test-mockupdb: FAIL code 1 (13.87 seconds)\r\n[2023/10/31 23:28:46.812]   evaluation failed :( (13.97 seconds)\r\n```",
    "head_branch": "PYTHON-3968",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3968 Fix mockupdb tox config (#1416)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7aa44ee515ce6a4af29",
    "number": 1415,
    "body": "https://jira.mongodb.org/browse/PYTHON-3930",
    "head_branch": "PYTHON-3930",
    "is_a_fork": true,
    "comments": [
      "Rendered view here: https://pymongo--1415.org.readthedocs.build/en/1415/examples/network_compression.html",
      "> Should we also call out zlibCompressionLevel here?\r\n\r\nGood idea. Done.",
      "Perhaps also link out to https://www.mongodb.com/docs/manual/reference/connection-string/#compression-options?",
      "Done, also opened [DOCSP-34026](https://jira.mongodb.org/browse/DOCSP-34026) to create a stable dochub link."
    ],
    "commit_messages": [
      "PYTHON-3930 Add docs page for network compression (#1415)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ab44ee515ce6a4af2a",
    "number": 1414,
    "body": null,
    "head_branch": "use-sp-repo-review",
    "is_a_fork": true,
    "comments": [
      "As we discussed we'll wait until after the 4.6 release to merge.  The build passes with a cross-section of tasks [here](https://spruce.mongodb.com/version/6541a9f9d6d80a87a8af6534/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC), and with the extra eventlet handling and mockupdb fix [here](https://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_green_framework_rhel8__platform~rhel8_auth_ssl~auth_ssl_python_version~3.10_green_framework~eventlet_test_7.0_standalone_patch_c146017de1012499283539aebb864b44d82d4eed_65425f3e61837da95c47e1a6_23_11_01_14_23_04/logs?execution=0)."
    ],
    "commit_messages": [
      "PYTHON-4014 Apply QA Suggestions from Scientific Python Library Development Guide (#1414)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ac44ee515ce6a4af2b",
    "number": 1413,
    "body": null,
    "head_branch": "use-sp-repo-review",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ad44ee515ce6a4af2c",
    "number": 1412,
    "body": "Most of the caught errors where missing double backticks.",
    "head_branch": "pygrep-hooks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4012 Adopt more RST static checks (#1412)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ae44ee515ce6a4af2d",
    "number": 1411,
    "body": "…spec test for explain command",
    "head_branch": "PYTHON-3743",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3743 Bump minServerVersion for CSFLE deterministic encryption … (#1411)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7af44ee515ce6a4af2e",
    "number": 1410,
    "body": null,
    "head_branch": "PYTHON-3950",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3950 Add PyMongo 3.13 Changelog Entry to Current Branch (#1410)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7af44ee515ce6a4af2f",
    "number": 1409,
    "body": "https://jira.mongodb.org/browse/PYTHON-3968",
    "head_branch": "PYTHON-3968",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3968 Allow pymongo to be installed in tox when C extension fails to build (#1409)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b044ee515ce6a4af30",
    "number": 1408,
    "body": "https://jira.mongodb.org/browse/PYTHON-4010",
    "head_branch": "PYTHON-4010",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4010 Fix test_timeout_kills_cursor_asynchronously (#1408)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b144ee515ce6a4af31",
    "number": 1407,
    "body": "https://jira.mongodb.org/browse/PYTHON-4009",
    "head_branch": "PYTHON-4009",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4009 Include bson+gridfs in coverage report (#1407)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b244ee515ce6a4af32",
    "number": 1406,
    "body": "https://jira.mongodb.org/browse/PYTHON-3987\r\n\r\nSee https://coverage.readthedocs.io/en/7.3.2/config.html#run-relative-files",
    "head_branch": "PYTHON-3987",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3987 Enable coverage relative_files=true and use pyproject.toml (#1406)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b344ee515ce6a4af33",
    "number": 1405,
    "body": "https://jira.mongodb.org/browse/PYTHON-4007",
    "head_branch": "PYTHON-4007",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4007 Stop sending exhaustAllowed to Serverless/load balanced clusters unless configured (#1405)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b444ee515ce6a4af34",
    "number": 1404,
    "body": "https://jira.mongodb.org/browse/PYTHON-3962\r\n\r\nAlso added some changelog entries that were missing.",
    "head_branch": "PYTHON-3962",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3962 Make delimiting slash between hosts and options optional (#1404)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b544ee515ce6a4af35",
    "number": 1403,
    "body": "https://jira.mongodb.org/browse/PYTHON-3747\r\n\r\nSee also https://jira.mongodb.org/browse/PYTHON-3529 and https://jira.mongodb.org/browse/PYTHON-1532. Comparing the full document is flaky, instead let's just make sure they have the expected fields.",
    "head_branch": "PYTHON-3747",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3747 Fix flaky test_list_databases (#1403)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b544ee515ce6a4af36",
    "number": 1402,
    "body": null,
    "head_branch": "PYTHON-3757",
    "is_a_fork": true,
    "comments": [
      "> Is this only a bug with DeleteOne or are there other operations we need to change?\r\n\r\nGood catch, I fixed DeleteMany as well!"
    ],
    "commit_messages": [
      "PYTHON-3757 Bulk write operations don't consider hint field in equality checks (#1402)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b644ee515ce6a4af37",
    "number": 1401,
    "body": null,
    "head_branch": "PYTHON-3845",
    "is_a_fork": true,
    "comments": [
      "cc @matthewdale @durran so far this adds a single unified test file with placeholders ",
      "Replaced by #1443 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b744ee515ce6a4af38",
    "number": 1400,
    "body": "https://jira.mongodb.org/browse/PYTHON-1424\r\n\r\nExamples:\r\n```python\r\n>>> client.t.t.insert_one({})\r\nInsertOneResult(ObjectId('65319acdd55bb3a27ab5502b'), acknowledged=True)\r\n>>> client.t.t.insert_many([{} for _ in range(3)])\r\nInsertManyResult([ObjectId('65319af2d55bb3a27ab5502c'), ObjectId('65319af2d55bb3a27ab5502d'), ObjectId('65319af2d55bb3a27ab5502e')], acknowledged=True)\r\n>>> client.t.t.delete_one({})\r\nDeleteResult({'n': 1, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1697749775, 3), 'signature': {'hash': b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00', 'keyId': 0}}, 'operationTime': Timestamp(1697749775, 3)}, acknowledged=True)\r\n>>> client.t.t.update_one({}, {'$set': {'a': 1}})\r\nUpdateResult({'nModified': 1, 'n': 1, 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1697749806, 2), 'signature': {'hash': b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00', 'keyId': 0}}, 'operationTime': Timestamp(1697749806, 2), 'updatedExisting': True}, acknowledged=True)\r\n>>> client.t.t.bulk_write([InsertOne({})])\r\nBulkWriteResult({'writeErrors': [], 'writeConcernErrors': [], 'nInserted': 1, 'nUpserted': 0, 'nMatched': 0, 'nModified': 0, 'nRemoved': 0, 'upserted': []}, acknowledged=True)\r\n```\r\n\r\nThe only part that sticks out as a little odd is that UpdateResult and DeleteResult include the full command response with operationTime, etc... but I'm not sure we can change that due to backwards compatibility. ",
    "head_branch": "PYTHON-1424-new",
    "is_a_fork": true,
    "comments": [
      "> but I'm not sure we can change that due to backwards compatibility.\r\n\r\nWhy not remove them only for repr purposes?\r\n\r\nAlso, it might be good to show `acknowledged=True` instead of just `True`.",
      "> Why not remove them only for repr purposes?\r\n\r\nThe idea behind repr is that it can be eval’d to get an identical object. Omitting fields would break that contract. Reference:\r\n\r\n> Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to [eval()](https://docs.python.org/3/library/functions.html#eval); otherwise, the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object.\r\n\r\nhttps://docs.python.org/3/library/functions.html#repr\r\n\r\n> show acknowledged=True instead of just True.\r\n\r\nGood idea!"
    ],
    "commit_messages": [
      "PYTHON-1424 Add repr to write result classes (#1400)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b844ee515ce6a4af39",
    "number": 1399,
    "body": "I disabled many of the rules that would have caused extra work, especially in `tests`.  We can consider re-enabling them over time.  I used https://learn.scientific-python.org/development/guides/style/#ruff as the basis for the configuration.\r\n\r\nIt automatically added `from __future__ import annotations`, which accounts for the high file changed count.",
    "head_branch": "try-ruff",
    "is_a_fork": true,
    "comments": [
      "cc @charliermarsh 🚀 ",
      "Awesome to see this, thanks @blink1073!"
    ],
    "commit_messages": [
      "PYTHON-4005 Replace flake8 and isort with ruff (#1399)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7b944ee515ce6a4af3a",
    "number": 1398,
    "body": "I also added coverage to the tasks that are run on PR commits",
    "head_branch": "PYTHON-4002",
    "is_a_fork": true,
    "comments": [
      "evergreen retry"
    ],
    "commit_messages": [
      "PYTHON-4002 No module named coverage.__main__ (#1398)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ba44ee515ce6a4af3b",
    "number": 1397,
    "body": "Requires https://github.com/mongodb-labs/drivers-evergreen-tools/pull/365",
    "head_branch": "PYTHON-3489",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3489 Remove legacy shell from test scripts (#1397)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7bb44ee515ce6a4af3c",
    "number": 1396,
    "body": "…improvement",
    "head_branch": "PYTHON-2878-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2878 Allow passing dict to sort/create_index/hint performance … (#1396)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7bc44ee515ce6a4af3d",
    "number": 1395,
    "body": "… loadbalanced=true",
    "head_branch": "PYTHON-3988",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3988 Python Test Suite still uses legacy isMaster Command when… (#1395)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7bc44ee515ce6a4af3e",
    "number": 1394,
    "body": "Resolve by always compiling the C extensions as part of `tox -e test`, adding about 15-20 seconds to each test run. Is this an acceptable tradeoff for ensuring the C extensions are always up to date?",
    "head_branch": "PYTHON-3958",
    "is_a_fork": true,
    "comments": [
      "> adding about 15-20 seconds to each test run\r\n\r\nIs it _every_ test run or only the first time? ",
      "> > adding about 15-20 seconds to each test run\r\n> \r\n> Is it _every_ test run or only the first time?\r\n\r\nIt's part of `tox -e test`, so only when that task is run. The various EG tests do not use `tox -e test`, so their runtime should be unaffected.",
      "What if we had a script that builds the c ext if the built files don't exist?  We could also consider comparing modified times to mimic `make`",
      "> What if we had a script that builds the c ext if the built files don't exist? We could also consider comparing modified times to mimic `make`\r\n\r\nI like these ideas. However, then you can have the situation where you have old C extension files that prevent the rebuild from taking place. Building them on every `tox -e test` run avoids this issue.",
      "Oh I think this is fine then. Personally I don't even use `tox -e test` at all locally because it's already so slow to setup. Instead I run pytest directly. ",
      "> Resolve by always compiling the C extensions as part of tox -e test, adding about 15-20 seconds to each test run. Is this an acceptable tradeoff for ensuring the C extensions are always up to date?\r\n\r\nI think it's fine. Do we want to make another step in tox that _only_ compiles the C binary? Or potentially just supply a generalized flag like `--rebuild-c-ext` that we can supply to every test to run the recompilation on test set up. \r\n\r\nNot sure how much of additional scope creep that becomes, but having that as a pre-cursor step would empower autonomy regardless of workflow. ",
      "> > Resolve by always compiling the C extensions as part of tox -e test, adding about 15-20 seconds to each test run. Is this an acceptable tradeoff for ensuring the C extensions are always up to date?\r\n> \r\n> I think it's fine. Do we want to make another step in tox that _only_ compiles the C binary? Or potentially just supply a generalized flag like `--rebuild-c-ext` that we can supply to every test to run the recompilation on test set up.\r\n> \r\n> Not sure how much of additional scope creep that becomes, but having that as a pre-cursor step would empower autonomy regardless of workflow.\r\n\r\nWe could make another step for compiling the C extensions, that also gives us a slight amount of abstraction for when we fully migrate away from setuptools."
    ],
    "commit_messages": [
      "PYTHON-3958 BSON failure - TestDatetimeConversion.test_millis_from_da… (#1394)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7bd44ee515ce6a4af3f",
    "number": 1393,
    "body": "https://jira.mongodb.org/browse/PYTHON-3995\r\n\r\nShould fix the race in test_rtt_connection_is_enabled_stream.",
    "head_branch": "PYTHON-3995",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3995 Fix race in serverMonitoringMode test (#1393)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7be44ee515ce6a4af40",
    "number": 1392,
    "body": "It is no longer maintained, and the URL has been squatted.",
    "head_branch": "PYTHON-3994",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3994 Remove link to MongoAlchemy (#1392)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7bf44ee515ce6a4af41",
    "number": 1391,
    "body": "Remove `.pytest_cache` as recommend here: https://stackoverflow.com/a/76454959",
    "head_branch": "PYTHON-3987-2",
    "is_a_fork": true,
    "comments": [
      "Docs failure is tracked in [PYTHON-3994](https://jira.mongodb.org/browse/PYTHON-3994)"
    ],
    "commit_messages": [
      "PYTHON-3987 Fix coverage report handling (#1391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c044ee515ce6a4af42",
    "number": 1390,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/363",
    "head_branch": "DRIVERS-2543",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DRIVERS-2543 Pull mongohouse image from ADL ECR repo (#1390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c044ee515ce6a4af43",
    "number": 1389,
    "body": null,
    "head_branch": "PYTHON-2878",
    "is_a_fork": true,
    "comments": [
      "Typing failures:\r\n\r\n```\r\npymongo/helpers.py: note: In function \"_index_document\":\r\npymongo/helpers.py:142: error: No overload variant of \"__getitem__\" of\r\n\"Sequence\" matches argument type\r\n\"Union[str, Tuple[str, Union[int, str, Mapping[str, Any]]]]\"  [call-overload]\r\n                value = index_list[key]\r\n                        ^~~~~~~~~~~~~~~\r\npymongo/helpers.py:1[42](https://github.com/mongodb/mongo-python-driver/actions/runs/6511237574/job/17686536214?pr=1389#step:5:43): note: Possible overload variants:\r\npymongo/helpers.py:142: note:     def __getitem__(self, int, /) -> Union[str, Tuple[str, Union[int, str, Mapping[str, Any]]]]\r\npymongo/helpers.py:142: note:     def __getitem__(self, slice, /) -> Sequence[Union[str, Tuple[str, Union[int, str, Mapping[str, Any]]]]]\r\npymongo/helpers.py: note: In function \"_validate_index_key_pair\":\r\npymongo/helpers.py:155: error: Implicit return in function which does not\r\nreturn  [misc]\r\n    def _validate_index_key_pair(key: any, value: any) -> NoReturn:\r\n    ^\r\npymongo/helpers.py:1[55](https://github.com/mongodb/mongo-python-driver/actions/runs/6511237574/job/17686536214?pr=1389#step:5:56): error: Function \"builtins.any\" is not valid as a type \r\n[valid-type]\r\n    def _validate_index_key_pair(key: any, value: any) -> NoReturn:\r\n                                      ^\r\npymongo/helpers.py:155: note: Perhaps you meant \"typing.Any\" instead of \"any\"?\r\n```",
      "Can you also please add a test that passes in a dictionary?"
    ],
    "commit_messages": [
      "PYTHON-2878 Allow passing dict to sort/create_index/hint (#1389)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c144ee515ce6a4af44",
    "number": 1388,
    "body": "https://jira.mongodb.org/browse/PYTHON-3991",
    "head_branch": "PYTHON-3991",
    "is_a_fork": true,
    "comments": [
      "I think the fix is to use `python -m pytest` in the `test` task.",
      "> I think the fix is to use `python -m pytest` in the `test` task.\r\n\r\nThe MockupDB task needs the `test` extra to have pytest be present in the environment. "
    ],
    "commit_messages": [
      "PYTHON-3991 Fix MockupDB tests when run through tox (#1388)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c244ee515ce6a4af45",
    "number": 1387,
    "body": null,
    "head_branch": "BUILD-17329",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUILD-17329 Updated ECS Task (#1387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c344ee515ce6a4af46",
    "number": 1386,
    "body": null,
    "head_branch": "JozGonzalez-patch-1",
    "is_a_fork": true,
    "comments": [
      "Hi @JozGonzalez, I'm assuming this was opened by accident."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c444ee515ce6a4af47",
    "number": 1385,
    "body": "Pending blocking changes in [PYTHON-3951](https://jira.mongodb.org/browse/PYTHON-3951), we are skipping the unified tests for test_index_management. Additionally set our `test-search-index-helpers` to leverage MONGODB_VERSION = 6.0\r\n\r\nI've gone ahead and added a conditionally included test to generate in it's place as a placeholder for when this ticket does get closed. ",
    "head_branch": "PYTHON-3951",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3951: [Temporary] Skip list search index Unified Tests (#1385)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c544ee515ce6a4af48",
    "number": 1384,
    "body": null,
    "head_branch": "PYTHON-3987",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3987 Pin coverage for now (#1384)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c544ee515ce6a4af49",
    "number": 1383,
    "body": "I verified that the test passes in 6.0.x and 7.0.x and is skipped in 6.3.x.",
    "head_branch": "PYTHON-3985",
    "is_a_fork": true,
    "comments": [
      "The doctest was failing at teardown, so I removed gevent from the doctests, since it relies on being imported and patched first, which we can't guarantee."
    ],
    "commit_messages": [
      "PYTHON-3985 [Build Failure] TestCollectionChangeStream.test_split_large_change (#1383)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c644ee515ce6a4af4a",
    "number": 1382,
    "body": null,
    "head_branch": "cleanup-python-binary-handling",
    "is_a_fork": true,
    "comments": [
      "In the past we discovered that using venv was problematic on some platforms. Please run the *entire* test suite to make sure that's no longer the case. ",
      "> In the past we discovered that using venv was problematic on some platforms. Please run the entire test suite to make sure that's no longer the case.\r\n\r\nGood call out, so far macos does not [work](https://spruce.mongodb.com/task/mongo_python_driver_test_macos_arm64__platform~macos_1100_arm64_auth_ssl~noauth_nossl_test_latest_sharded_cluster_patch_0590ce49caef13ac50ed98707dbe834184dd4be9_651ab616a4cf4734cfa5a511_23_10_02_12_22_48/logs?execution=1&sortBy=STATUS&sortDir=ASC) yet with this approach.  \r\n\r\n\r\n",
      "MacOS 64 was the only newly failing platform, will investigate.",
      "MacOS is [fixed](https://spruce.mongodb.com/version/651bef6657e85a9882f4efb9/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC), I'll run them all again once #1383 is merged to cut down on the number of failures."
    ],
    "commit_messages": [
      "PYTHON-3983 Clean up handling of PYTHON_BINARY (#1382)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c744ee515ce6a4af4b",
    "number": 1381,
    "body": "Relies on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/354",
    "head_branch": "PYTHON-3942",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3942 Use MongoDB managed Azure KMS credentials (#1381)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c844ee515ce6a4af4c",
    "number": 1380,
    "body": "The number of typing errors fluctuates as changes are made.  This gets us down to less than 100 for me locally.",
    "head_branch": "PYTHON-3698-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7c944ee515ce6a4af4d",
    "number": 1379,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I think this needs more work. These deprecated properties should emit a DeprecationWarning on set/get. We should also update the changelog."
    ],
    "commit_messages": [
      "PYTHON-3916 Deprecate Deprecated GridFS Fields, remove in 5.0 (#1379)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ca44ee515ce6a4af4e",
    "number": 1378,
    "body": "In support of #1365 to make that PR easier to review.",
    "head_branch": "DRIVERS-2616-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3716 Move OIDC test file (#1378)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7cb44ee515ce6a4af4f",
    "number": 1377,
    "body": null,
    "head_branch": "PYTHON-3848",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3848 Test $changeStreamSplitLargeEvent on MongoDB 6.0.9+ (#1377)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7cb44ee515ce6a4af50",
    "number": 1376,
    "body": null,
    "head_branch": "PYTHON-3890",
    "is_a_fork": true,
    "comments": [
      "Could you schedule the data lake tests? I suspect test.test_client_context.TestClientContext.test_must_connect won't run in that suite regardless of PYMONGO_MUST_CONNECT.",
      "> Could you schedule the data lake tests? I suspect test.test_client_context.TestClientContext.test_must_connect won't run in that suite regardless of PYMONGO_MUST_CONNECT.\r\n\r\nCorrect, that test does not even with PYMONGO_MUST_CONNECT set.",
      "So what we need to do here is not use PYMONGO_MUST_CONNECT at all and instead find out why this test was not protecting us like we'd expect:\r\nhttps://github.com/mongodb/mongo-python-driver/blob/b8c13643689b7fd04eb249582e7f6bd72a04dd5f/test/test_data_lake.py#L35-L44",
      "Perhaps we need to remove IntegrationTest there?",
      "> Perhaps we need to remove IntegrationTest there?\r\n\r\nHere's the patch with that change: https://spruce.mongodb.com/version/6504d71030661555703878ac/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC\r\n\r\nI don't quite understand why we expect `test.test_client_context.TestClientContext.test_must_connect` to run in this suite, can you elaborate?\r\n",
      "PYMONGO_MUST_CONNECT is only relevant for TestClientContext.test_must_connect but that test is never run when tests data lake. So setting PYMONGO_MUST_CONNECT does nothing for this PR. What we want to do is ensure TestDataLakeMustConnect fails when the driver cannot connect to data lake.",
      "> PYMONGO_MUST_CONNECT\r\n\r\n\r\n\r\n> PYMONGO_MUST_CONNECT is only relevant for TestClientContext.test_must_connect but that test is never run when tests data lake. So setting PYMONGO_MUST_CONNECT does nothing for this PR. What we want to do is ensure TestDataLakeMustConnect fails when the driver cannot connect to data lake.\r\n\r\nGot it, added `client_context.connected` to `test_connected_to_data_lake`."
    ],
    "commit_messages": [
      "PYTHON-3890 Data Lake Tests Were Failing Silently (#1376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7cc44ee515ce6a4af51",
    "number": 1375,
    "body": null,
    "head_branch": "PYTHON-3926",
    "is_a_fork": true,
    "comments": [
      "I just noticed that this doesn't cover the Connection socket timeouts like \r\n\r\nhttps://github.com/mongodb/mongo-python-driver/blob/db526f7d36d0db6c80780ec71c81ec1ef839c5e7/pymongo/pool.py#L956\r\n\r\nand\r\n\r\nhttps://github.com/mongodb/mongo-python-driver/blob/db526f7d36d0db6c80780ec71c81ec1ef839c5e7/pymongo/pool.py#L972\r\n\r\nand\r\n\r\n https://github.com/mongodb/mongo-python-driver/blob/db526f7d36d0db6c80780ec71c81ec1ef839c5e7/pymongo/pool.py#L982\r\n\r\nWe already have `socket_timeout` and `connect_timeout` in the `Connection`'s `PoolOptions`, thoughts on adding `timeout` there as well? That will allow us to use those values without need for a `MongoClientErrorHandler`. `toplogy` may require more extensive refactoring if we want to include that always as well."
    ],
    "commit_messages": [
      "PYTHON-3926 Add more information to connection errors and timeouts (#1375)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7cd44ee515ce6a4af52",
    "number": 1374,
    "body": "This issue is caused by a side-effect of `pymongo.message._op_msg`. Because we pass `_GetMore._as_command` as the `command` parameter, this line directly adds the `$db` value to ` _GetMore._as_command`: https://github.com/mongodb/mongo-python-driver/blob/14640256cb0e4be21a94dbd3926b490ad8257bbc/pymongo/message.py#L746\r\n\r\nAs a result, when the final `getMore` of the test hits this line: https://github.com/mongodb/mongo-python-driver/blob/14640256cb0e4be21a94dbd3926b490ad8257bbc/pymongo/server.py#L127 \r\nit does not get `$db` added to its command spec for the test listener, causing the test to fail.",
    "head_branch": "PYTHON-3943",
    "is_a_fork": true,
    "comments": [
      "> Is it possible to add a test for this that runs on regular servers?\r\n\r\nThis seems possible by adding a test that checks for $db on an OP_MSG exhaust cursor.",
      "> > Is it possible to add a test for this that runs on regular servers?\r\n> \r\n> This seems possible by adding a test that checks for $db on an OP_MSG exhaust cursor.\r\n\r\nThis test would verify that `$db` is set on exhaust cursors?",
      "Yes, using the CommandListener to assert on the CommandStartedEvents for find/getMore commands.",
      "> Yes, using the CommandListener to assert on the CommandStartedEvents for find/getMore commands.\r\n\r\nGot it, added a test for this behavior."
    ],
    "commit_messages": [
      "PYTHON-3943 Serverless failure - TestUnifiedRunCursorCommand (#1374)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ce44ee515ce6a4af53",
    "number": 1373,
    "body": null,
    "head_branch": "PYTHON-3940",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3940 Pytest Config Improvements (#1373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7cf44ee515ce6a4af54",
    "number": 1372,
    "body": null,
    "head_branch": "PYTHON-3953",
    "is_a_fork": true,
    "comments": [
      "There is some ongoing conversation about this behavior in https://github.com/10gen/mongo/pull/15278. Let's wait until that ticket is resolved before finalizing the approach here. ",
      "@NoahStapp https://github.com/10gen/mongo/pull/15278 has been merged. The logic that was settled on was to send killCursors on all non-exhausted (i.e. non-fully iterated) cursors as long as the error code wasn't QueryPlanKilled, CursorKilled, or CursorNotFound. For network timeouts and other network errors I think we should also send killCursors but do so by scheduling it in the background. This way the app doesn't have to wait for 2 timeouts in a row. ",
      "> Requesting the changes here: [#1372 (comment)](https://github.com/mongodb/mongo-python-driver/pull/1372#issuecomment-1734268048)\r\n\r\nIs the requested behavior different from the behavior introduced by this PR? It seems to fulfill those requirements already.",
      "Yes the behavior is different, we also want to send killCursors after a connection error which we currently skip. I'd propose we defer the kill like we do for timeouts.",
      "> Yes the behavior is different, we also want to send killCursors after a connection error which we currently skip. I'd propose we defer the kill like we do for timeouts.\r\n\r\nGot it, pushed this change.",
      "> These [two load balancer tests are failing now](https://spruce.mongodb.com/task/mongo_python_driver_load_balancer__platform~rhel8_auth_ssl~noauth_nossl_mongodb_version~6.0_python_version~3.10_loadbalancer~enabled_load_balancer_test_patch_6f4e617e6db6323b1da389b94a8a598d85e7c233_652872739ccd4ef4497e668d_23_10_12_22_25_59/logs?execution=0&sortBy=STATUS&sortDir=ASC):\r\n> \r\n> ```\r\n>  [2023/10/12 22:42:10.799] =================================== FAILURES ===================================\r\n>  [2023/10/12 22:42:10.799] _ TestLoadBalancerCursors.test_pinned_connections_are_returned_after_an_network_error_during_getMore _\r\n>  [2023/10/12 22:42:10.799] self = <test.test_load_balancer.TestLoadBalancerCursors testMethod=test_pinned_connections_are_returned_after_an_network_error_during_getMore>\r\n>  [2023/10/12 22:42:10.799]     def test_case(self):\r\n>  [2023/10/12 22:42:10.799] >       self.run_scenario(spec)\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1705:\r\n>  [2023/10/12 22:42:10.799] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1657: in run_scenario\r\n>  [2023/10/12 22:42:10.799]     self._run_scenario(spec, uri)\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1682: in _run_scenario\r\n>  [2023/10/12 22:42:10.799]     self.run_operations(spec[\"operations\"])\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1589: in run_operations\r\n>  [2023/10/12 22:42:10.799]     self.run_special_operation(op)\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1584: in run_special_operation\r\n>  [2023/10/12 22:42:10.799]     method(spec[\"arguments\"])\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1454: in _testOperation_assertNumberConnectionsCheckedOut\r\n>  [2023/10/12 22:42:10.799]     self.assertEqual(spec[\"connections\"], pool.active_sockets)\r\n>  [2023/10/12 22:42:10.799] E   AssertionError: 0 != 1\r\n>  [2023/10/12 22:42:10.799] _______ TestLoadBalancerSdamErrorHandling.test_stale_errors_are_ignored ________\r\n>  [2023/10/12 22:42:10.799] self = <test.test_load_balancer.TestLoadBalancerSdamErrorHandling testMethod=test_stale_errors_are_ignored>\r\n>  [2023/10/12 22:42:10.799]     def test_case(self):\r\n>  [2023/10/12 22:42:10.799] >       self.run_scenario(spec)\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1705:\r\n>  [2023/10/12 22:42:10.799] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1657: in run_scenario\r\n>  [2023/10/12 22:42:10.799]     self._run_scenario(spec, uri)\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1688: in _run_scenario\r\n>  [2023/10/12 22:42:10.799]     self.check_events(expect_events)\r\n>  [2023/10/12 22:42:10.799] test/unified_format.py:1610: in check_events\r\n>  [2023/10/12 22:42:10.799]     self.assertEqual(len(actual_events), len(events), actual_events)\r\n>  [2023/10/12 22:42:10.799] E   AssertionError: 7 != 11 : [ConnectionCreatedEvent(('127.0.0.1', 8000), 1), ConnectionReadyEvent(('127.0.0.1', 8000), 1), ConnectionCheckedOutEvent(('127.0.0.1', 8000), 1), ConnectionCreatedEvent(('127.0.0.1', 8000), 2), ConnectionReadyEvent(('127.0.0.1', 8000), 2), ConnectionCheckedOutEvent(('127.0.0.1', 8000), 2), PoolClearedEvent(('127.0.0.1', 8000), ObjectId('6528747ba284e414aa7b51a0'))]\r\n>  [2023/10/12 22:42:10.800] - generated xml file: /data/mci/669d14ca2f03bb9994779eed1519ce39/src/xunit-results/TEST-results.xml -\r\n> ```\r\n> \r\n> I believe it's because of the new killCursors on connection errors behavior. Perhaps this means we need to back out the killCursor on ConnectionFailure piece and turn this into a DRIVERS ticket so we can update the spec tests? What do you think?\r\n\r\nGood idea, I'll open a DRIVERS ticket for the ConnectionFailure killCursor component and remove that functionality from this PR.",
      "Created https://jira.mongodb.org/browse/DRIVERS-2751 to track the spec changes required for the connection error component. ",
      "> > This logic LGTM but could we add tests to ensure we run killCursors after timeouts and connection errors now? For reference see this test that asserts we run killCursors on close():\r\n> > [`0092b0a`/test/test_cursor.py#L1183](https://github.com/mongodb/mongo-python-driver/blob/0092b0af79378abf35b6db73a082ecb91af1d973/test/test_cursor.py#L1183)\r\n> \r\n> Still looking for test(s) for timeout errors.\r\n\r\nMissed this, sorry. Test added."
    ],
    "commit_messages": [
      "PYTHON-3953 - PyMongo should send killCursors on MaxTimeMSExpired Error (#1372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d044ee515ce6a4af55",
    "number": 1371,
    "body": "I broke this up into about half of the errors to save review.",
    "head_branch": "PYTHON-3698",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3698 Support mypy 1.2 --strict testing (part 1) (#1371)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d144ee515ce6a4af56",
    "number": 1370,
    "body": null,
    "head_branch": "PYTHON-3905",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3905 Use from __future__ import annotations in all files (#1370)\n\n* PYTHON-3905 Use from __future__ import annotations in all files\r\n\r\n* cleanup\r\n\r\n* cleanup\r\n\r\n* cleanup"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d144ee515ce6a4af57",
    "number": 1369,
    "body": "Old ticket whereby our tests still mitigated failures by setting \"upsert\" and \"multi\" values if unset in order to pass our spec tests. Thankfully, the spec tests now specify the flag `$$unsetOrMatches` which relieves the burden of needing to add in this piece.\r\n\r\n## Test Plan\r\n- Passes our tests",
    "head_branch": "PYTHON-1744",
    "is_a_fork": true,
    "comments": [
      "The failures are unrelated and tracked in https://jira.mongodb.org/browse/PYTHON-3951."
    ],
    "commit_messages": [
      "PYTHON-1744: Clean-Up, remove setdefault on multi/upsert calls (#1369)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d244ee515ce6a4af58",
    "number": 1368,
    "body": null,
    "head_branch": "PYTHON-3598",
    "is_a_fork": true,
    "comments": [
      "Since this is a public api change could you add a mention in the changelog?"
    ],
    "commit_messages": [
      "PYTHON-3598 Add Command(Succeeded|Failed)Event.database_name property (#1368)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d344ee515ce6a4af59",
    "number": 1367,
    "body": null,
    "head_branch": "PYTHON-3920",
    "is_a_fork": true,
    "comments": [
      "Nice, I like the direction this is heading.  Looks like you still need to convert the last few tests?",
      "> Nice, I like the direction this is heading. Looks like you still need to convert the last few tests?\r\n\r\nShould all be converted and good to go now!",
      "> Beautiful!\r\n\r\nAre these failures expected? \r\n\r\n![Screen Shot 2023-09-05 at 11 20 28 AM](https://github.com/mongodb/mongo-python-driver/assets/30483654/43187a75-1a94-44e1-8b5a-843aebd4eab1)\r\n\r\n\r\n",
      "No, I something changed on those tests, I'll open a ticket.",
      "> No, I something changed on those tests, I'll open a ticket.\r\n\r\nIs this good to merge then?",
      "> Is this good to merge then?\r\n\r\nYes, I opened https://jira.mongodb.org/browse/PYTHON-3951"
    ],
    "commit_messages": [
      "PYTHON-3920 - Migrate AWS Auth Tests to use AWS Secrets (#1367)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d444ee515ce6a4af5a",
    "number": 1366,
    "body": null,
    "head_branch": "PYTHON-3929",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3929 Add check-manifest support (#1366)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d544ee515ce6a4af5b",
    "number": 1365,
    "body": "- [x] Use updated secrets handling from https://github.com/mongodb-labs/drivers-evergreen-tools/pull/345\r\n- [x] Use dedicated Atlas hosts for testing\r\n- [x] Move global cache to the mongo client level and update tests\r\n- [x] Clean up reauth logic in preparation for DRIVERS-2672\r\n- [x] Test on macos and Windows - requires https://github.com/mongodb-labs/drivers-evergreen-tools/pull/349\r\n- [x] Enforce timeout on callback - we decided against this.\r\n- [x] Update specifications",
    "head_branch": "DRIVERS-2415-13",
    "is_a_fork": true,
    "comments": [
      "Working locally with the Atlas hosts:\r\n\r\n```\r\n================================= 32 passed, 1 skipped, 1 warning in 71.53s (0:01:11) ==================================\r\n```",
      "cc @durran "
    ],
    "commit_messages": [
      "PYTHON-3716 OIDC-SASL Follow-Up (#1365)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d644ee515ce6a4af5c",
    "number": 1364,
    "body": null,
    "head_branch": "PYTHON-3933",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3933 Clean up EVG output (#1364)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d744ee515ce6a4af5d",
    "number": 1363,
    "body": null,
    "head_branch": "PYTHON-3935",
    "is_a_fork": true,
    "comments": [
      "Moving to draft because we shouldn't need to set `SKIP_LEGACY_SHELL`, it should be automatically skipped in D-E-T for Ubuntu 22.",
      "Blocked on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/341"
    ],
    "commit_messages": [
      "PYTHON-3935 Use Ubuntu 22 for mod_wsgi tests (#1363)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d844ee515ce6a4af5e",
    "number": 1362,
    "body": null,
    "head_branch": "PYTHON-3932",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3932 Support mypy --strict testing in bson package (#1362)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d844ee515ce6a4af5f",
    "number": 1361,
    "body": "This PR fixes the following error. This is a part of our CI pipeline (withplum.com)\r\nUnfortunately, almost in every build we encounter this failure. Locally it's difficult to reproduce. \r\nHere's the Jira ticket from Mongodb https://jira.mongodb.org/browse/PYTHON-1271\r\n\r\n```\r\n.venv/lib/python3.9/site-packages/pymongo/database.py:959: in list_collection_names\r\n    return [result[\"name\"] for result in self.list_collections(session=session, **kwargs)]\r\n.venv/lib/python3.9/site-packages/pymongo/database.py:911: in list_collections\r\n    return self.__client._retryable_read(_cmd, read_pref, session)\r\n.venv/lib/python3.9/site-packages/pymongo/_csot.py:105: in csot_wrapper\r\n    return func(self, *args, **kwargs)\r\n.venv/lib/python3.9/site-packages/pymongo/mongo_client.py:1441: in _retryable_read\r\n    server = self._select_server(read_pref, session, address=address)\r\n.venv/lib/python3.9/site-packages/pymongo/mongo_client.py:1257: in _select_server\r\n    server = topology.select_server(server_selector)\r\n.venv/lib/python3.9/site-packages/pymongo/topology.py:272: in select_server\r\n    server = self._select_server(selector, server_selection_timeout, address)\r\n.venv/lib/python3.9/site-packages/pymongo/topology.py:261: in _select_server\r\n    servers = self.select_servers(selector, server_selection_timeout, address)\r\n.venv/lib/python3.9/site-packages/pymongo/topology.py:223: in select_servers\r\n    server_descriptions = self._select_servers_loop(selector, server_timeout, address)\r\n.venv/lib/python3.9/site-packages/pymongo/topology.py:231: in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n.venv/lib/python3.9/site-packages/pymongo/topology_description.py:317: in apply_selector\r\n    return self._apply_local_threshold(selection)\r\n.venv/lib/python3.9/site-packages/pymongo/topology_description.py:261: in _apply_local_threshold\r\n    return [\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n.0 = <list_iterator object at 0x7f562981f5b0>\r\n\r\n    return [\r\n>       s for s in selection.server_descriptions if (s.round_trip_time - fastest) <= threshold\r\n    ]\r\nE   TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'\r\n\r\n.venv/lib/python3.9/site-packages/pymongo/topology_description.py:262: TypeError\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hello, thanks for the PR. As stated in [PYTHON-1271](https://jira.mongodb.org/browse/PYTHON-1271) it's unexpected for this case to happen since at this point all the servers _should_ be in a known state with a non-None value for round_trip_time. Are you able to reproduce this issue? If so, it would be better for us to debug this case to understand the root cause.",
      "@piyiotisk, @KonstantinosTsitoumis, @stavros47, @expobrain Are you able to reproduce this issue? If so, it would be better for us to debug this case to understand the root cause.",
      "We're going to close this pull request for now, please comment if you'd like us to open it back up.",
      "Hi, i'm still able to reproduce this issue with pymongo v4.6.1. \r\n\r\nThe root cause of the error is probably due to our configuration of the topology / replica set but it would be helpful if this was handled in a more specific way, instead of getting a generic TypeError when computing this list comprehension. \r\n\r\nI think the solution proposed here was to basically return an empty list in such cases, but I'm not sure wether that's the best way to handle this, and I would prefer to have a ConfigurationError specifying what's wrong in the configuration in this case.  \r\n\r\n@blink1073 @ShaneHarvey would you consider re-opening this issue?\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7d944ee515ce6a4af60",
    "number": 1360,
    "body": "https://jira.mongodb.org/browse/PYTHON-3668\r\n\r\nThe implementation of https://github.com/mongodb/specifications/pull/1452.\r\n\r\n- Introduces sdamMode URI option.\r\n- Disable streaming on FaaS by default.\r\n- Resync SDAM and uri-options spec tests.\r\n- Update Lambda test to assert streaming is not used.",
    "head_branch": "PYTHON-3668",
    "is_a_fork": true,
    "comments": [
      "I'd say let's wait for consensus on https://github.com/mongodb/specifications/pull/1452, and defer this to 4.6.",
      "I opened https://jira.mongodb.org/browse/PYTHON-3994 to track the docs failure."
    ],
    "commit_messages": [
      "PYTHON-3668 Use polling SDAM mode on FaaS and add sdamMode=auto/stream/poll (#1360)\n\nDisable streaming SDAM by default on AWS Lambda and similar FaaS platforms.\r\nIntroduce the serverMonitoringMode=stream/poll/auto URI option.\r\nAdd Unified Test Format version 1.17 to add support for server heartbeat events."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7da44ee515ce6a4af61",
    "number": 1359,
    "body": null,
    "head_branch": "PYTHON-3914",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3914 Release 4.5.0 (#1359)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7db44ee515ce6a4af62",
    "number": 1358,
    "body": "# [PYTHON-3922](https://jira.mongodb.org/browse/PYTHON-3922)\r\n\r\n# Summary\r\n* Added a Pull Request Template as well as an addendum to our CONTRIBUTING.rst to explain the template\r\n\r\n# Changes in this PR\r\n* Added `pull_request_template.md` \r\n* Added PR Guidance and general best practices to the `CONTRIBUTING.rst`\r\n\r\n# Test Plan\r\n* See Screenshots\r\n* Used this PR as an example\r\n\r\n# Screenshots\r\n<!-- Add a before and after picture to indicate changes. -->\r\n**BEFORE**\r\n* \r\n<img width=\"690\" alt=\"image\" src=\"https://github.com/mongodb/mongo-python-driver/assets/2887713/00acb7bf-e972-4055-aa49-88303a27b0ee\">\r\n\r\n**AFTER**\r\n* \r\n<img width=\"816\" alt=\"image\" src=\"https://github.com/mongodb/mongo-python-driver/assets/2887713/2eccb346-12bb-4731-b491-0334907d3d84\">\r\n* \r\n<img width=\"693\" alt=\"image\" src=\"https://github.com/mongodb/mongo-python-driver/assets/2887713/4a1c111a-9f4b-4eba-873f-d2b86981b4db\">\r\n\r\n# Callouts or Follow-up items\r\n<!-- Any additional info not already specified in the PR including but not limited to\r\n\r\n1. Potential stakeholders\r\n2. Slack threads etc.\r\n3. Implementation details that need additional oversight\r\n4. Callouts on future tactics\r\n -->\r\n* Ruminating on the \"stylistic\" choices behind formatting. \r\n* Also looking for \"content\" review to make sure I'm not asking too much.\r\n\r\n",
    "head_branch": "PYTHON-3922",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3922: Contributor PR Template (#1358)\n\n* Added Basic PR Template\r\n\r\n* Update .github/workflows/pull_request_template.md\r\n\r\n* changed the CONTRIBUTING.rst\r\n\r\n* added some bold spaces and sleek linking\r\n\r\n* slight rearrangement of Template Breakdown section\r\n\r\n* changed template breakdown to sub-bullets\r\n\r\n* addressed PR resolutions\r\n\r\n* Update CONTRIBUTING.rst\r\n\r\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>\r\n\r\n* added blurb to include accompanying JIRA ticket\r\n\r\n* added some more punctuation\r\n\r\n---------\r\n\r\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7dc44ee515ce6a4af63",
    "number": 1357,
    "body": null,
    "head_branch": "PYTHON-3917",
    "is_a_fork": true,
    "comments": [
      "Here's a passing [build](https://spruce.mongodb.com/version/64de22d4a4cf47367cb1f320/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC) with a large set of tasks which would have triggered several of these failures before this change.",
      "I opened https://jira.mongodb.org/browse/PYTHON-3923"
    ],
    "commit_messages": [
      "PYTHON-3917 Fix handling of warnings in connection string tests (#1357)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7dd44ee515ce6a4af64",
    "number": 1356,
    "body": null,
    "head_branch": "PYTHON-3912-2",
    "is_a_fork": true,
    "comments": [
      "To ensure isolation, can we please use [`include_expansions_in_env`](https://docs.devprod.prod.corp.mongodb.com/evergreen/Project-Configuration/Project-Commands#subprocessexec) and only include the AWS creds that we'll use in the vault access?   \r\nWe should do that for both this new test and the Atlas test.",
      "> To ensure isolation, can we please use [`include_expansions_in_env`](https://docs.devprod.prod.corp.mongodb.com/evergreen/Project-Configuration/Project-Commands#subprocessexec) and only include the AWS creds that we'll use in the vault access? We should do that for both this new test and the Atlas test.\r\n\r\nCan you explain this suggestion a little more? I thought we had agreed to not use EG expansions and were relying on only the `secrets-export.sh` file for populating secret values + AWS creds.",
      "What I mean is, rather than use `add_expansions_to_env`, explicitly only allow the three AWS env variables, so we're not pulling all of the project variables."
    ],
    "commit_messages": [
      "PYTHON-3912 Migrate Enterprise Auth Tests to AWS Secrets Vault (#1356)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7de44ee515ce6a4af65",
    "number": 1355,
    "body": null,
    "head_branch": "PYTHON-3877",
    "is_a_fork": true,
    "comments": [
      "I scheduled the full \"release\" matrix."
    ],
    "commit_messages": [
      "PYTHON-3877 Test Python 3.12 on MacOS and build wheel (#1355)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7de44ee515ce6a4af66",
    "number": 1354,
    "body": "https://jira.mongodb.org/browse/PYTHON-3457\r\nhttps://jira.mongodb.org/browse/PYTHON-3458",
    "head_branch": "PYTHON-3457",
    "is_a_fork": true,
    "comments": [
      "Continued in https://github.com/mongodb/mongo-python-driver/pull/1430"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7df44ee515ce6a4af67",
    "number": 1353,
    "body": "https://jira.mongodb.org/browse/PYTHON-3909",
    "head_branch": "PYTHON-3909",
    "is_a_fork": true,
    "comments": [
      "Hmm, I see `export DB_USER=`, but it is failing to use the username in the default context.",
      "I pushed a fix.",
      "@blink1073 what's the purpose of AUTH_MECH? I'm wondering if we can just remove it altogether.",
      "Yeah, I agree we shouldn't need AUTH_MECH.  I'll need to make a PR to `drivers-evergreen-tools` to not use SCRAM-256 on the OIDC host.",
      "> Yeah, I agree we shouldn't need AUTH_MECH. I'll need to make a PR to drivers-evergreen-tools to not use SCRAM-256 on the OIDC host.\r\n\r\nI don't think that's needed. The test client should automatically use SCRAM-SHA-256 by default.\r\n",
      "Tests are passing besides some broken core doc links:\r\n```\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/2dsphere/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/2dsphere/\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/2d/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/2d/\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/index-hashed/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/index-hashed/\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/index-text/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/index-text/\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3909 Fix OIDC reauth for bulk write operations, remove unneeded AUTH_MECH  (#1353)\n\nCo-authored-by: Steven Silvester <steven.silvester@ieee.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e044ee515ce6a4af68",
    "number": 1352,
    "body": "https://jira.mongodb.org/browse/PYTHON-3821",
    "head_branch": "PYTHON-3821",
    "is_a_fork": true,
    "comments": [
      "Yes! Just wrote some tests! :)"
    ],
    "commit_messages": [
      "PYTHON-3821 use overload pattern for _DocumentType (#1352)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e144ee515ce6a4af69",
    "number": 1351,
    "body": "Added the flag to the tox.ini file and fixed any untyped defs that came up as a result of this changed\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-3907",
    "head_branch": "PYTHON-3907",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3907 add --disallow-untyped-defs for mypy (#1351)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e244ee515ce6a4af6a",
    "number": 1350,
    "body": null,
    "head_branch": "PYTHON-3887",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3887 Remove custom test command in setup.py (#1350)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e344ee515ce6a4af6b",
    "number": 1349,
    "body": null,
    "head_branch": "PYTHON-3855",
    "is_a_fork": true,
    "comments": [
      "The Python portion LGTM!"
    ],
    "commit_messages": [
      "PYTHON-3855: Appends suggestion `Use CodecOptions` into errorhandler for datetime conversions (#1349)\n\n* first commit, appends suggestion into errorhandler\r\n\r\n* catch only ArithmeticErrors, scoped try clause, and using raise _ from\r\n\r\n* fixed unused import\r\n\r\n* formatting\r\n\r\n* stepped through each logical call to ensure functional parity; added refactoring suggestions\r\n\r\n* Revert \"stepped through each logical call to ensure functional parity; added refactoring suggestions\"\r\n\r\nThis reverts commit 77e99c97d6aff3c7005cc552e31aa5ef58ebf76e.\r\nI took PYTHON-3739 and accidentally super-imposed it onto this one. Reverting to fix\r\n\r\n* place the msg check in the excxeption handle\r\n\r\n* cleaned up some code callsites. applied refactor changes. made a more generic error checking test\r\n\r\n* edited code comment\r\n\r\n* Update test/test_bson.py\r\n\r\nrename just to retrigger test suite\r\n\r\n* DECREF -> XDECREF and formatting"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e444ee515ce6a4af6c",
    "number": 1348,
    "body": null,
    "head_branch": "PYTHON-3715",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3715 Migrate off of Arch Linux for EG Testing (#1348)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e444ee515ce6a4af6d",
    "number": 1347,
    "body": null,
    "head_branch": "PYTHON-3885",
    "is_a_fork": true,
    "comments": [
      "Note: the OIDC failure is tracked in [PYTHON-3909](https://jira.mongodb.org/browse/PYTHON-3909)"
    ],
    "commit_messages": [
      "PYTHON-3885 Use tox in remaining Evergreen Tests (#1347)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e544ee515ce6a4af6e",
    "number": 1346,
    "body": "https://jira.mongodb.org/browse/PYTHON-3867",
    "head_branch": "PYTHON-3867",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3867 add types to topology.py (#1346)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e644ee515ce6a4af6f",
    "number": 1345,
    "body": "https://jira.mongodb.org/browse/PYTHON-3904",
    "head_branch": "PYTHON-3904",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3904 Fix socket vs _socket pyopenssl typing (#1345)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e744ee515ce6a4af70",
    "number": 1344,
    "body": "Consolidated _retryable_(read|write) to call _retry_internal",
    "head_branch": "PYTHON-3739",
    "is_a_fork": true,
    "comments": [
      "Note there are some relevant failures in the EG tests."
    ],
    "commit_messages": [
      "PYTHON-3739 Refactor retryable reads and writes logic to avoid duplication (#1344)\n\n* first draft commit; consolidated _retryable_(read|write) to call _retry_internal\r\n\r\n* removed extra self usage\r\n\r\n* formatting\r\n\r\n* swapped last_error usage\r\n\r\n* switched to using more objective syntax\r\n\r\n* black formatter\r\n\r\n* don't use conn_from_server\r\n\r\n* changed variable naming is_write -> is_read; consolidated errorhandling; revisited is_retrying\r\n\r\n* added an explicit if not self._is_read catch\r\n\r\n* switched self._in_transaction to be self._not_in_transaction\r\n\r\n* fixed logic on checking if a read/write was in transaction and added commentary\r\n\r\n* fixed encryption-based error getting retried\r\n\r\n* separated server selection as the exception raised gets handled differently in each caller\r\n\r\n* do not mutate 'retryable' within the class instantiation\r\n\r\n* centralized usage of _retryable_write to avoid _retry_with_session used outwardly\r\n\r\n* added docstrings to our _retryable_(read|write) operations\r\n\r\n* refactored docstrings to align with rest of the file\r\n\r\n* clearer docstrings and function calls"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e844ee515ce6a4af71",
    "number": 1343,
    "body": null,
    "head_branch": "PYTHON-3896",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3896 Drop support for pypy3.7 (#1343)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7e944ee515ce6a4af72",
    "number": 1342,
    "body": null,
    "head_branch": "DRIVERS-2585",
    "is_a_fork": true,
    "comments": [
      "Can you change the PR title to target [PYTHON-3906](https://jira.mongodb.org/browse/PYTHON-3906) please?",
      "Doccheck is failing for these 4 links:\r\n\r\n```\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/2d/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/2d/\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/2dsphere/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/2dsphere/\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/index-hashed/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/index-hashed/\r\n(api/pymongo/collection: line    1) broken    http://mongodb.com/docs/manual/core/index-text/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/index-text/\r\n```",
      "> Doccheck is failing for these 4 links:\r\n\r\nCan you please open a ticket to track these failures?",
      "> > Doccheck is failing for these 4 links:\r\n> \r\n> Can you please open a ticket to track these failures?\r\n\r\nDone, https://jira.mongodb.org/browse/PYTHON-3915."
    ],
    "commit_messages": [
      "PYTHON-3906 Use AWS Secrets for Atlas tests (#1342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ea44ee515ce6a4af73",
    "number": 1341,
    "body": "https://jira.mongodb.org/browse/PYTHON-3814",
    "head_branch": "PYTHON-3814",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3814 add types to pyopenssl_context.py (#1341)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7eb44ee515ce6a4af74",
    "number": 1340,
    "body": "https://jira.mongodb.org/browse/PYTHON-3863",
    "head_branch": "PYTHON-3863",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3863 add types to server_selectors.py (#1340)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ec44ee515ce6a4af75",
    "number": 1339,
    "body": "https://jira.mongodb.org/browse/PYTHON-3866",
    "head_branch": "PYTHON-3866",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3866 add types to topology_description.py (#1339)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ec44ee515ce6a4af76",
    "number": 1338,
    "body": "https://jira.mongodb.org/browse/PYTHON-3869",
    "head_branch": "PYTHON-3869",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3869 add types to uri_parser.py (#1338)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ed44ee515ce6a4af77",
    "number": 1337,
    "body": null,
    "head_branch": "PYTHON-3761",
    "is_a_fork": true,
    "comments": [
      "@qingyang-hu FYI",
      "Is there any way to tell which tests are run and which tests are skipped here?\r\n```\r\n[2023/08/07 21:08:31.308] + run_tox -m test-eg\r\n[2023/08/07 21:08:31.308] + /opt/python/3.8/bin/python3 -m tox -m test-eg\r\n[2023/08/07 21:08:31.308] /data/mci/5d86811cccbcb9268f82c90f72689186/src/.tox/test-eg/lib/python3.8/site-packages/setuptools/config/pyprojecttoml.py:66: _BetaConfiguration: Support for `[tool.setuptools]` in `pyproject.toml` is still *beta*.\r\n[2023/08/07 21:08:31.308]   config = read_configuration(filepath, True, ignore_option_errors, dist)\r\n[2023/08/07 21:08:32.101] ============================= test session starts ==============================\r\n[2023/08/07 21:08:32.101] platform linux -- Python 3.8.17, pytest-7.4.0, pluggy-1.2.0\r\n[2023/08/07 21:08:32.101] cachedir: .tox/test-eg/.pytest_cache\r\n[2023/08/07 21:08:32.101] rootdir: /data/mci/5d86811cccbcb9268f82c90f72689186/src\r\n[2023/08/07 21:08:32.101] configfile: pytest.ini\r\n[2023/08/07 21:08:32.101] collected 16 items\r\n[2023/08/07 21:12:33.928] test/test_index_management.py ......ssssssssss                           [100%]\r\n[2023/08/07 21:12:33.928] - generated xml file: /data/mci/5d86811cccbcb9268f82c90f72689186/src/xunit-results/TEST-results.xml -\r\n[2023/08/07 21:12:33.928] =========================== short test summary info ============================\r\n[2023/08/07 21:12:33.928] SKIPPED [2] .tox/test-eg/lib/python3.8/site-packages/_pytest/unittest.py:371: TestIndexManagementCreateSearchIndex runOnRequirements not satisfied\r\n[2023/08/07 21:12:33.928] SKIPPED [3] .tox/test-eg/lib/python3.8/site-packages/_pytest/unittest.py:371: TestIndexManagementCreateSearchIndexes runOnRequirements not satisfied\r\n[2023/08/07 21:12:33.928] SKIPPED [1] .tox/test-eg/lib/python3.8/site-packages/_pytest/unittest.py:371: TestIndexManagementDropSearchIndex runOnRequirements not satisfied\r\n[2023/08/07 21:12:33.928] SKIPPED [3] .tox/test-eg/lib/python3.8/site-packages/_pytest/unittest.py:371: TestIndexManagementListSearchIndexes runOnRequirements not satisfied\r\n[2023/08/07 21:12:33.928] SKIPPED [1] .tox/test-eg/lib/python3.8/site-packages/_pytest/unittest.py:371: TestIndexManagementUpdateSearchIndex runOnRequirements not satisfied\r\n[2023/08/07 21:12:33.928] ================== 6 passed, 10 skipped in 241.88s (0:04:01) ===================\r\n[2023/08/07 21:12:34.480] .pkg: _exit> python /opt/python/3.8/lib/python3.8/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n[2023/08/07 21:12:34.523]   test-eg: OK (264.75=setup[18.71]+cmd[246.04] seconds)\r\n[2023/08/07 21:12:34.523]   congratulations :) (264.86 seconds)\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_test_search_index_helpers__platform~rhel8_python_version~3.8_test_search_index_helpers_patch_b8c13643689b7fd04eb249582e7f6bd72a04dd5f_64d15a5cd6d80a9c2c0e0a4a_23_08_07_20_55_57/logs?execution=0&page=0&sortBy=TEST_NAME&sortDir=ASC\r\n",
      "> Is there any way to tell which tests are run and which tests are skipped here?\r\n\r\nMade it verbose"
    ],
    "commit_messages": [
      "PYTHON-3761 Add e2e testing against Atlas to the search index management API (#1337)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ee44ee515ce6a4af78",
    "number": 1336,
    "body": "epic link: https://jira.mongodb.org/browse/PYTHON-3819",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add bson encoding performance to 4.5 changelog (#1336)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7ef44ee515ce6a4af79",
    "number": 1335,
    "body": null,
    "head_branch": "PYTHON-3893",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3893 Add BSON Binary Data subtype Sensitive (#1335)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f044ee515ce6a4af7a",
    "number": 1334,
    "body": null,
    "head_branch": "PYTHON-3815",
    "is_a_fork": true,
    "comments": [
      "> I have a few more concerns with this approach. In particular how will we deal with cases where we need to use a 3rd party library to perform I/O? dnspython and requests are two examples right now and we could add more of these in the future. I understand that we can wrap the imports of these libraries in greentletio's patch_blocking:\r\n> \r\n> ```python\r\n> with patch_blocking():\r\n>     import requests\r\n>     import dns\r\n> ```\r\n> \r\n> But does that approach still work if the user has already imported requests/dnspython _before_ importing pymongo? ie:\r\n> \r\n> ```python\r\n> # App imports pymongo's deps before pymongo itself so module is already loaded:\r\n> import requests\r\n> import dns\r\n> # Does patch_blocking still work in this case?\r\n> import pymongo\r\n> ```\r\n\r\nGreenletio's `patch_blocking` directly accesses `sys.modules`: https://github.com/miguelgrinberg/greenletio/blob/main/src/greenletio/patcher.py. According to https://stackoverflow.com/questions/73060129/how-are-changes-to-sys-modules-propagated, I would expect this patching to still work, but only in the scope of `pymongo`. ",
      "Great, could we add a test for it to confirm the behavior? ",
      "> Great, could we add a test for it to confirm the behavior?\r\n\r\nDone, see the file `green_import_test.py`. The thread does end with the error\r\n\r\n```\r\nRuntimeError: There is no current event loop in thread 'Thread-4 (test_database)'.\r\n/Users/nstapp/.pyenv/versions/3.11.3/lib/python3.11/threading.py:1040: RuntimeWarning: coroutine 'Thread.start.<locals>.bootstrap' was never awaited\r\n  self._invoke_excepthook(self)\r\n```\r\n\r\nwhich suggests there is more investigation to be done. ",
      "I think what we'll need is a decorator added to our async methods that does something like:\r\n\r\n```python\r\ntry:\r\n   asyncio.get_event_loop()\r\nexcept RuntimeError:\r\n   asyncio.set_event_loop(asyncio.new_event_loop())\r\n```",
      "I don't think we want to be in the business of setting up the event loop. The user should need to set up the loop themselves if they want to call the async apis, just like they would need if they used any other asyncio apis.",
      "The latest commit's `green_import_test.py` tests the how import ordering interacts with `patch_blocking`. The result is the following:\r\n\r\n```\r\nimport time\r\nimport green_test\r\n...\r\n\r\ntime.sleep is builtin\r\nSource for green_test.time.sleep: /Users/nstapp/.pyenv/versions/3.11.3/lib/python3.11/site-packages/greenletio/green/time.py\r\n```\r\nIf `time.sleep` is inspected inside `green_test` itself, the expected result of `time.sleep` being patched occurs. \r\n\r\nThis suggests that using `patch_blocking` in pymongo will not affect any duplicated imports in client code. \r\n\r\n[This](https://stackoverflow.com/questions/73060129/how-are-changes-to-sys-modules-propagated) stackoverflow post has relevant information on this topic. ",
      "What about a delayed import?\r\n\r\n```python\r\ndef inner():\r\n    import time\r\n\t...\r\n```",
      "> What about a delayed import?\r\n> \r\n> ```python\r\n> def inner():\r\n>     import time\r\n> \t...\r\n> ```\r\n\r\nSame result, `time.sleep` is builtin, `green_test.time.sleep` is patched.",
      "@NoahStapp could you create a patch build on [mongo-python-driver-perf](https://spruce.mongodb.com/commits/mongo-python-driver-perf) that runs the benchmarks with greenletio installed to see if there's any perf difference for sync code?",
      "I believe the import issue is more subtle when we consider a third party library like dns. If pymongo imports dns in a patch_blocking call then we'll have this behavior:\r\n```python \r\nimport dns as dns1  # dns imported for the first time.\r\n\r\n# Simulate import pymongo\r\nimport greenletio\r\nwith greenletio.patch_blocking():\r\n    import dns as dns2  \r\n\r\nassert dns1 is dns2  # Oops! dns2 will be the same as dns1 and never uses the patched apis.\r\n```\r\n\r\nThe only way to deal with this problem is avoid patch_blocking and explicitly use the asyncio dns apis. Alternatively we _could_ reimport dns ourselves (although I'm not a fan since mucking around python internals is frowned upon because it can have unintended side effects):\r\n```python\r\nimport dns\r\n\r\n# Always reimport dns\r\nimport sys\r\nold_dns = sys.modules.pop('dns', None)\r\ntry:\r\n    with greenletio.patch_blocking():\r\n        import dns as dns3\r\nfinally:\r\n    if old_dns is not None:\r\n        sys.modules['dns'] = old_dns\r\n\r\nassert dns3 is not dns1  # Fixed! dns3 was newly imported and will use the patched apis.\r\n```",
      "> I believe the import issue is more subtle when we consider a third party library like dns. If pymongo imports dns in a patch_blocking call then we'll have this behavior:\r\n> ...\r\n\r\nIsn't this expected behavior for `patch_blocking` with third-party libraries? It's still the normal `dns` library, just with its blocking dependencies replaced with `greenletio` versions. Can we verify if those dependencies are patched correctly?",
      "The problem is that patch_blocking does not work at all if the app has already imported dns (the first example above). Another more theoretical pitfall of patch_blocking is that it won't work at all when the third party library using lazy/delayed imports.",
      "> The problem is that patch_blocking does not work at all if the app has already imported dns (the first example above).\r\n\r\nMy question is does a successful use of `patch_blocking` make dns2 != dns1? I'm not familiar with how equality of module objects works "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f144ee515ce6a4af7b",
    "number": 1333,
    "body": null,
    "head_branch": "PYTHON-3884",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-3891 to track the serverless failures.\r\nI put it back in draft because the encryption failures are a regression.",
      "This is good to go now, the windows failure is expected due to cffi not supporting Python 3.12 yet."
    ],
    "commit_messages": [
      "PYTHON-3884 Replace uses of run-test.sh with tox (#1333)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f244ee515ce6a4af7c",
    "number": 1332,
    "body": "https://jira.mongodb.org/browse/PYTHON-3809",
    "head_branch": "PYTHON-3809",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3809 add types to monitoring.py (#1332)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f344ee515ce6a4af7d",
    "number": 1331,
    "body": null,
    "head_branch": "PYTHON-3889",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3889 Implement Load Balancing for GitHub PR Reviews (#1331)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f444ee515ce6a4af7e",
    "number": 1330,
    "body": null,
    "head_branch": "PYTHON-3844",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3844 Enable Pytest XML Reporting in Tox (#1330)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f444ee515ce6a4af7f",
    "number": 1329,
    "body": null,
    "head_branch": "PYTHON-3879",
    "is_a_fork": true,
    "comments": [
      "There's still a lot of docstrings that have unnecessary changes.",
      "Sorry for all the docstring issues, I figured out how to have PyCharm filter for that correctly. They should all be resolved now.",
      "Hi, shouldn't this change be mentioned in the [Changelog](https://pymongo.readthedocs.io/en/stable/changelog.html)? Thanks!",
      "> Hi, shouldn't this change be mentioned in the [Changelog](https://pymongo.readthedocs.io/en/stable/changelog.html)? Thanks!\r\n\r\nWe did not mention it because SocketInfo/Connection are private internal apis. Are you depending it for something?\r\n",
      "@ShaneHarvey - I see, it's alright since I've changed the import to workaround for now but will probably re-write my logic to not make use of those classes.\r\n\r\nSocketInfo was documented in pymongo v3: https://pymongo.readthedocs.io/en/3.12.3/api/pymongo/pool.html\r\n\r\nTo me, `private api == what's not documented`, but I expected that if something is once documented but then removed from docs, that should appear in some changelogs for visibility.",
      "Yes we removed that documentation in 4.0 (part of PYTHON-2164) but even in v3, those classes were still intended to be private. An app couldn't actually access a MongoClient's Pool or Connection classes so there was no reason to document those apis. I'd still be curious to hear what you're using those classes for.",
      "> [..] those classes were still intended to be private\r\n\r\nI see.\r\n\r\n> I'd still be curious to hear what you're using those classes for.\r\n\r\nI'm using the class in a test: to patch Connection.send_message with a custom method wrapper that counts the calls for this method, to give a just a brief description.",
      "Interesting, could your test use a CommandListener instead https://pymongo.readthedocs.io/en/stable/api/pymongo/monitoring.html?",
      "Thank you @ShaneHarvey ! Yes, I made it work with a Listener in the end, after following your docs (`CommandLogger`) 👍 "
    ],
    "commit_messages": [
      "PYTHON-3879 Rename SocketInfo to Connection (#1329)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f544ee515ce6a4af80",
    "number": 1328,
    "body": "https://jira.mongodb.org/browse/PYTHON-3808",
    "head_branch": "PYTHON-3808",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3808 add types to monitor.py (#1328)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f644ee515ce6a4af81",
    "number": 1327,
    "body": "https://jira.mongodb.org/browse/PYTHON-694 \r\n\r\nTasks:\r\n- [x] Tests mod_wsgi sub interpreters.\r\n- [x] Tests mod_wsgi embedded mode.\r\n- [x] Test decoding all BSON types.\r\n- [x] Test encoding all BSON types.\r\n- [x] Test that decoded types created from C are valid in Python, ie `assert isinstance(doc[\"regex\"], Regex)`.\r\n- [x] Update Readme to document why multiple URLs are used.\r\n- [x] Fix mypy error:\r\n```\r\n      test/mod_wsgi_test/mod_wsgi_test.py:71: error: Cannot find implementation or\r\nlibrary stub for module named \"mod_wsgi\"  [import]\r\n        from mod_wsgi import version as mod_wsgi_version\r\n```\r\n\r\nReferences:\r\n- https://emptysqua.re/blog/python-c-extensions-and-mod-wsgi/\r\n- https://modwsgi.readthedocs.io/en/develop/user-guides/checking-your-installation.html?#sub-interpreter-being-used",
    "head_branch": "PYTHON-694",
    "is_a_fork": true,
    "comments": [
      "Somewhat confusingly, these tests pass even with DatetimeMS which should be expected to fail due to the bug described in https://jira.mongodb.org/browse/PYTHON-3847. I'm a bit perplexed here but we can merge this work regardless. Perhaps Python or mod_wsgi was changed to make Python classes work between sub interpreters?"
    ],
    "commit_messages": [
      "PYTHON-694 Test mod_wsgi sub interpreters  (#1327)\n\nTest mod_wsgi sub interpreters and embedded mode.\r\nUse unique collection name for each mod_wsgi interpreter.\r\nTest encoding/decoding all bson types."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f744ee515ce6a4af82",
    "number": 1326,
    "body": "https://jira.mongodb.org/browse/PYTHON-3865",
    "head_branch": "PYTHON-3865",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3865 add types to ssl_support.py (#1326)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f844ee515ce6a4af83",
    "number": 1325,
    "body": "https://jira.mongodb.org/browse/PYTHON-3870",
    "head_branch": "PYTHON-3870",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3870 add types to write_concern.py (#1325)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f944ee515ce6a4af84",
    "number": 1324,
    "body": "https://jira.mongodb.org/browse/PYTHON-3868",
    "head_branch": "PYTHON-3868",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3868 add types to typings.py (#1324)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7f944ee515ce6a4af85",
    "number": 1323,
    "body": "https://jira.mongodb.org/browse/PYTHON-3864",
    "head_branch": "PYTHON-3864",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3864 add types to socket_checker.py (#1323)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7fa44ee515ce6a4af86",
    "number": 1322,
    "body": "https://jira.mongodb.org/browse/PYTHON-3862",
    "head_branch": "PYTHON-3862",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3862 add types to server_description.py (#1322)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7fb44ee515ce6a4af87",
    "number": 1321,
    "body": "https://jira.mongodb.org/browse/PYTHON-3861",
    "head_branch": "PYTHON-3861",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3861 add types to results.py (#1321)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7fc44ee515ce6a4af88",
    "number": 1320,
    "body": "https://jira.mongodb.org/browse/PYTHON-3860",
    "head_branch": "PYTHON-3860",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3860 add types to read_preferences.py (#1320)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7fd44ee515ce6a4af89",
    "number": 1319,
    "body": "https://jira.mongodb.org/browse/PYTHON-3859",
    "head_branch": "PYTHON-3859",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3859 add types to read_concern.py (#1319)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7fe44ee515ce6a4af8a",
    "number": 1318,
    "body": "https://jira.mongodb.org/browse/PYTHON-3813",
    "head_branch": "PYTHON-3813",
    "is_a_fork": true,
    "comments": [
      "Sorry could you fix the merge conflicts and then I'll review this asap?",
      "yeah, just fixed merge conflicts! Sorry, I didn't notice them earlier"
    ],
    "commit_messages": [
      "PYTHON-3813 add types to pool.py (#1318)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc7fe44ee515ce6a4af8b",
    "number": 1317,
    "body": "gRPC POC phase 1 work. Partially rip-and-replace, replacing TCP-specific interfaces with gRPC-specific interfaces, but mostly interchangeable between the two protocols in preparation for POC phase 2 work.",
    "head_branch": "grpc-poc",
    "is_a_fork": true,
    "comments": [
      "> Could you flesh this out a bit more by adding a `MongoClient(grpc=True)` flag which then configures the Pool setting? That way we can use this branch to compare TCP vs gRPC performance?\r\n\r\nDone! I added a minimal working example in tests/grpc_example.py that depends on the grpc-enabled serverless proxy running locally.",
      "Looks like grpcio still does not support pypy: https://github.com/grpc/grpc/issues/4221\r\nThat's a bit disappointing. Perhaps we could work on that in the future?\r\n\r\nEdit: looks like the pypy error might be fixed by installing cython 0.29.36: https://github.com/grpc/grpc/issues/29517#issuecomment-1631282367",
      "I've added usage instructions to the Jira epic: https://jira.mongodb.org/browse/PYTHON-3801 for easy testing of this POC.",
      "> Looks like grpcio still does not support pypy: [grpc/grpc#4221](https://github.com/grpc/grpc/issues/4221) That's a bit disappointing. Perhaps we could work on that in the future?\r\n> \r\n> Edit: looks like the pypy error might be fixed by installing cython 0.29.36: [grpc/grpc#29517 (comment)](https://github.com/grpc/grpc/issues/29517#issuecomment-1631282367)\r\n\r\nThis fix didn't work for me, even putting cython 0.29.36 in our pyproject.toml `[build-system]` `requires` section. We'll have to investigate further in a future POC phase.",
      "LGTM!"
    ],
    "commit_messages": [
      "PYTHON-3801 gRPC POC phase 1 (#1317)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc7ff44ee515ce6a4af8c",
    "number": 1316,
    "body": "https://jira.mongodb.org/browse/PYTHON-3812",
    "head_branch": "PYTHON-3812",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3812 add types to periodic_executor.py (#1316)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80044ee515ce6a4af8d",
    "number": 1315,
    "body": "https://jira.mongodb.org/browse/PYTHON-3807",
    "head_branch": "PYTHON-3807",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3807 add types to mongo_client.py (#1315)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80144ee515ce6a4af8e",
    "number": 1314,
    "body": "https://jira.mongodb.org/browse/PYTHON-3820\r\n\r\nI got these results using python3.9\r\n\r\n**DBRef encoding:**\r\nbefore:\r\n```\r\npython -m timeit -s 'from bson import encode,DBRef;doc={\"a\": list(DBRef(\"test\", i) for i in range(100000))}' 'encode(doc)'\r\n1 loop, best of 5: 206 msec per loop\r\n```\r\n\r\nafter:\r\n```\r\npython -m timeit -s 'from bson import encode,DBRef;doc={\"a\": list(DBRef(\"test\", i) for i in range(100000))}' 'encode(doc)'\r\n2 loops, best of 5: 197 msec per loop\r\n```\r\n\r\n**UUID encoding:**\r\nbefore:\r\n```\r\npython -m timeit -s 'from bson import encode,decode,CodecOptions;from bson.binary import STANDARD;import uuid;doc={\"a\": list(uuid.uuid4() for _ in range(100000))};opts=CodecOptions(uuid_representation=STANDARD);' 'encode(doc, codec_options=opts)'\r\n2 loops, best of 5: 114 msec per loop\r\n```\r\n\r\nafter:\r\n```\r\npython -m timeit -s 'from bson import encode,decode,CodecOptions;from bson.binary import STANDARD;import uuid;doc={\"a\": list(uuid.uuid4() for _ in range(100000))};opts=CodecOptions(uuid_representation=STANDARD);' 'encode(doc, codec_options=opts)'\r\n2 loops, best of 5: 101 msec per loop\r\n```\r\n\r\n**UUID decoding:**\r\nbefore:\r\n```\r\npython -m timeit -s 'from bson import encode,decode,CodecOptions;from bson.binary import STANDARD;import uuid;doc={\"a\": list(uuid.uuid4() for _ in range(100000))};opts=CodecOptions(uuid_representation=STANDARD);data=encode(doc, codec_options=opts)' 'decode(data, codec_options=opts)'\r\n2 loops, best of 5: 162 msec per loop\r\n```\r\n\r\nafter:\r\n```\r\npython -m timeit -s 'from bson import encode,decode,CodecOptions;from bson.binary import STANDARD;import uuid;doc={\"a\": list(uuid.uuid4() for _ in range(100000))};opts=CodecOptions(uuid_representation=STANDARD);data=encode(doc, codec_options=opts)' 'decode(data, codec_options=opts)'\r\n2 loops, best of 5: 150 msec per loop\r\n```\r\n\r\n**Datetime encoding:**\r\nbefore:\r\n```\r\npython -m timeit -s 'from bson import encode,DBRef;import datetime;doc={\"a\": list(datetime.datetime.now() for i in range(100000))}' 'encode(doc)'\r\n20 loops, best of 5: 16 msec per loop\r\n```\r\n\r\nafter:\r\n```\r\npython -m timeit -s 'from bson import encode,DBRef;import datetime;doc={\"a\": list(datetime.datetime.now() for i in range(100000))}' 'encode(doc)'\r\n50 loops, best of 5: 9.36 msec per loop\r\n```",
    "head_branch": "PYTHON-3820",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3820 Optimize PyObject_CallMethod calls (#1314)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80244ee515ce6a4af8f",
    "number": 1313,
    "body": "https://jira.mongodb.org/browse/PYTHON-3811",
    "head_branch": "PYTHON-3811",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3811 add types to operations.py (#1313)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80344ee515ce6a4af90",
    "number": 1312,
    "body": "https://jira.mongodb.org/browse/PYTHON-3806",
    "head_branch": "PYTHON-3806",
    "is_a_fork": true,
    "comments": [
      "Looks like small conflict with #1332."
    ],
    "commit_messages": [
      "PYTHON-3806 add types to message.py (#1312)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80444ee515ce6a4af91",
    "number": 1311,
    "body": "https://jira.mongodb.org/browse/PYTHON-3846\r\n\r\nBefore:\r\n```\r\n$ python3.11 -m timeit -s 'from bson import encode;doc={\"a\": list(range(2<<32, (2<<32)+100000))}' 'encode(doc)'\r\n50 loops, best of 5: 4.73 msec per loop\r\n$ python3.11 -m timeit -s 'from bson import encode;doc={\"a\": list(range(100000))}' 'encode(doc)'               \r\n100 loops, best of 5: 3.39 msec per loop\r\n```\r\nAfter:\r\n```\r\n$ python3.11 -m timeit -s 'from bson import encode;doc={\"a\": list(range(2<<32, (2<<32)+100000))}' 'encode(doc)'\r\n100 loops, best of 5: 3.76 msec per loop\r\n$ python3.11 -m timeit -s 'from bson import encode;doc={\"a\": list(range(100000))}' 'encode(doc)'               \r\n100 loops, best of 5: 3.27 msec per loop\r\n```\r\n\r\n25% improvement for 64 bit ints and a minor speed up for 32 bit ints.",
    "head_branch": "PYTHON-3846",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3846 Faster int encoding (#1311)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80444ee515ce6a4af92",
    "number": 1310,
    "body": null,
    "head_branch": "PYTHON-3461",
    "is_a_fork": true,
    "comments": [
      "Failing test: https://evergreen.mongodb.com/task_log_raw/mongo_python_driver_rhel8_test_lambda_test_aws_lambda_deployed_patch_1a249386cf704150369f08efc684b0c10686c1fc_64bfb150d1fe07b0370db59e_23_07_25_11_26_13/4?type=ALL\r\n\r\n`Exiting due to FunctionError!`.\r\n\r\nAdding `dnspython` to to the `requirements.txt`.",
      "> Just noticed the tests are still failing\r\n\r\nYes, I'm still working on installing the local version of pymongo vs the one from pypi.",
      "Moved to draft pending https://github.com/mongodb-labs/drivers-evergreen-tools/pull/331"
    ],
    "commit_messages": [
      "PYTHON-3461 Test FaaS (AWS Lambda) Behavior Per Driver (#1310)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80544ee515ce6a4af93",
    "number": 1309,
    "body": "https://jira.mongodb.org/browse/PYTHON-3511\r\n\r\nFollow on to https://github.com/mongodb/mongo-python-driver/pull/1161",
    "head_branch": "PYTHON-3511",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3511 Cleanup some more Python 2 references (#1309)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80644ee515ce6a4af94",
    "number": 1308,
    "body": "https://jira.mongodb.org/browse/PYTHON-3831",
    "head_branch": "PYTHON-3831",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3831 remove _DocumentIn (#1308)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80744ee515ce6a4af95",
    "number": 1307,
    "body": null,
    "head_branch": "PYTHON-3795",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3795 Simplify db.cursor_command api arguments (#1307)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80844ee515ce6a4af96",
    "number": 1306,
    "body": "Successful patch: https://spruce.mongodb.com/version/64b04375306615a3d71adc10/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "PYTHON-3829",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3829 Certificate typecast in encryption breaking build (#1306)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80944ee515ce6a4af97",
    "number": 1305,
    "body": null,
    "head_branch": "4.4.1-changelog",
    "is_a_fork": true,
    "comments": [
      "Ready for another look."
    ],
    "commit_messages": [
      "Add changelog for 4.4.1 (#1305)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80a44ee515ce6a4af98",
    "number": 1304,
    "body": null,
    "head_branch": "PYTHON-3681",
    "is_a_fork": true,
    "comments": [
      "Can you please schedule some Python 3.12 builds on RHEL and Windows, as well as all of the Release builds?",
      "@NoahStapp can you pull from master and run the tests again?",
      "Failing tests are all 3.12 Windows tests due to cffi not supporting Python 3.12 on Windows yet."
    ],
    "commit_messages": [
      "PYTHON-3681 Build wheels for Python 3.12 beta (#1304)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80a44ee515ce6a4af99",
    "number": 1303,
    "body": "https://jira.mongodb.org/browse/PYTHON-3810",
    "head_branch": "PYTHON-3810",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3810 add types to network.py (#1303)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80b44ee515ce6a4af9a",
    "number": 1302,
    "body": "https://jira.mongodb.org/browse/PYTHON-3824\r\n\r\nManual testing shows the following results:\r\nbefore:\r\n```\r\npython -m timeit -s 'from bson import encode;doc={\"a\": list(([\"a\"], \"b\") for _ in range(1000))}' 'encode(doc)'\r\n2000 loops, best of 5: 170 usec per loop\r\n\r\npython -m timeit -s 'from bson import encode;doc={\"a\": list(range(1000))}' 'encode(doc)'\r\n10000 loops, best of 5: 38.9 usec per loop\r\n```\r\nafter:\r\n```\r\npython -m timeit -s 'from bson import encode;doc={\"a\": list(([\"a\"], \"b\") for _ in range(1000))}' 'encode(doc)'\r\n2000 loops, best of 5: 159 usec per loop\r\n\r\npython -m timeit -s 'from bson import encode;doc={\"a\": list(range(1000))}' 'encode(doc)'\r\n10000 loops, best of 5: 38.5 usec per loop\r\n```",
    "head_branch": "PYTHON-3824",
    "is_a_fork": true,
    "comments": [
      "Sorry, I had previously posted the numbers in the JIRA ticket, but I just added them here as well. ",
      "Thanks, can you test a regular list of numbers as well:\r\n```\r\npython -m timeit -s 'from bson import encode;doc={\"a\": list(range(1000))}' 'encode(doc)'\r\n```",
      "yes! just added that here and in the JIRA ticket"
    ],
    "commit_messages": [
      "PYTHON-3824 Optimize BSON encoding of standard Python list and tuples (#1302)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80c44ee515ce6a4af9b",
    "number": 1301,
    "body": "https://jira.mongodb.org/browse/PYTHON-3817",
    "head_branch": "PYTHON-3817",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3817 Optimize BSON encoding of standard Python dict (#1301)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80d44ee515ce6a4af9c",
    "number": 1300,
    "body": "https://jira.mongodb.org/browse/PYTHON-3818",
    "head_branch": "PYTHON-3818",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3818 Create unique key vault index in auto QE example (#1300)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80e44ee515ce6a4af9d",
    "number": 1299,
    "body": null,
    "head_branch": "bump-4.4.1",
    "is_a_fork": true,
    "comments": [
      "Blocked on https://jira.mongodb.org/browse/BUILD-17702 to get the release tasks passing on the new 4.4 project.",
      "This should be unblocked now. Running a patch to confirm: https://spruce.mongodb.com/version/64aed6c7850e61ecd7727325",
      "Release tasks are passing so this is ready for review."
    ],
    "commit_messages": [
      "BUMP 4.4.1 (#1299)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc80f44ee515ce6a4af9e",
    "number": 1298,
    "body": "https://jira.mongodb.org/browse/PYTHON-3805",
    "head_branch": "PYTHON-3805",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3805 add types to hello.py (#1298)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc80f44ee515ce6a4af9f",
    "number": 1297,
    "body": "https://jira.mongodb.org/browse/PYTHON-3804",
    "head_branch": "PYTHON-3804",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3804 add types to errors.py (#1297)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81044ee515ce6a4afa0",
    "number": 1296,
    "body": "https://jira.mongodb.org/browse/PYTHON-3803",
    "head_branch": "PYTHON-3803",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3803 add types to encryption.py (#1296)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81144ee515ce6a4afa1",
    "number": 1295,
    "body": "https://jira.mongodb.org/browse/PYTHON-3802",
    "head_branch": "PYTHON-3802",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3802 add types to database.py (#1295)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81244ee515ce6a4afa2",
    "number": 1294,
    "body": "https://jira.mongodb.org/browse/PYTHON-3816",
    "head_branch": "PYTHON-3816",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3816 use Use PyObject_GetItem instead of PyMapping_GetItemString (#1294)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81344ee515ce6a4afa3",
    "number": 1293,
    "body": "https://jira.mongodb.org/browse/PYTHON-3800\r\n\r\nThis doesn't fully test to issue but it's a start. What we eventually want is to test the case where the hosts returned in the SRV record have uppercase letters but that will need to wait for https://jira.mongodb.org/browse/DRIVERS-2668. ",
    "head_branch": "PYTHON-3800",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3800 Add test for SRV URI with uppercase hostname (#1293)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81444ee515ce6a4afa4",
    "number": 1292,
    "body": "https://jira.mongodb.org/browse/PYTHON-3797",
    "head_branch": "PYTHON-3797",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3797 cache commonly used strings (#1292)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81544ee515ce6a4afa5",
    "number": 1291,
    "body": "https://jira.mongodb.org/browse/PYTHON-3798",
    "head_branch": "PYTHON-3798",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3798 add error checking and visit for _type_marker_str (#1291)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81544ee515ce6a4afa6",
    "number": 1290,
    "body": "https://jira.mongodb.org/browse/PYTHON-3780",
    "head_branch": "PYTHON-3780",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3780 add types to cursor.py (#1290)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81644ee515ce6a4afa7",
    "number": 1289,
    "body": "### Background \r\nWhen using `mongodb+srv` DNS Seed List Connection String, I had no problems with the other drivers, but only when using the pymongo driver. \r\n\r\nThe error is as follows \r\n```shell \r\npython3 main.py        \r\nTraceback (most recent call last):  \r\n  File \"/Users/user/Workspace/tmp/pymongo-test/main.py\", line 11, in <module>  \r\n    client = pymongo.MongoClient(uri)  \r\n             ^^^^^^^^^^^^^^^^^^^^^^^^  \r\n  File \"/Users/user/Workspace/tmp/pymongo-test/venv/lib/python3.11/site-packages/pymongo/mongo_client.py\", line 748, in __init__  \r\n    res = uri_parser.parse_uri(  \r\n          ^^^^^^^^^^^^^^^^^^^^^  \r\n  File \"/Users/user/Workspace/tmp/pymongo-test/venv/lib/python3.11/site-packages/pymongo/uri_parser.py\", line 539, in parse_uri  \r\n    nodes = dns_resolver.get_hosts()  \r\n            ^^^^^^^^^^^^^^^^^^^^^^^^  \r\n  File \"/Users/user/Workspace/tmp/pymongo-test/venv/lib/python3.11/site-packages/pymongo/srv_resolver.py\", line 121, in get_hosts  \r\n    _, nodes = self._get_srv_response_and_hosts(True)  \r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  \r\n  File \"/Users/user/Workspace/tmp/pymongo-test/venv/lib/python3.11/site-packages/pymongo/srv_resolver.py\", line 115, in _get_srv_response_and_hosts  \r\n    raise ConfigurationError(f\"Invalid SRV host: {node[0]}\")  \r\npymongo.errors.ConfigurationError: Invalid SRV host: mongodb-r.jeongmu-rs.RegionOne.mg.db.***.com\r\n```\r\nIt was weird that it only happened with the python driver. \r\n\r\n### Cause \r\n\r\nFirst, the `uri` in the connection string that I was using contained uppercase letters, and the SRV Records also contained uppercase letters. \r\nFor example, \r\n- connection string : `mongodb+srv://username:password@mongodb-jeongmu-rs.RegionOne.mg.db.***.com`\r\n- SRV records : \r\n ```shell \r\nnslookup -type=SRV _mongodb._tcp.mongodb-jeongmu-rs.RegionOne.mg.db.***.com\r\nServer:         10.28.4.20\r\nAddress:        10.28.4.20#53\r\n\r\n_mongodb._tcp.mongodb-jeongmu-rs.RegionOne.mg.db.***.com service = 1 1 27017 mongodb-r.jeongmu-rs.RegionOne.mg.db.***.com.\r\n_mongodb._tcp.mongodb-jeongmu-rs.RegionOne.mg.db.***.com service = 1 1 27017 mongodb-r.jeongmu-rs.RegionOne.mg.db.***.com.\r\n_mongodb._tcp.mongodb-jeongmu-rs.RegionOne.mg.db.***.com service = 1 1 27017 mongodb-r.jeongmu-rs.RegionOne.mg.db.***.com.\r\n```\r\n\r\nIf you look at line 144 of `uri_parser.py`, inside the `parse_host` function, the hostname is converted to lowercase via lower(), but the imported SRV records still contain uppercase letters. \r\n```python \r\n# Normalize hostname to lowercase, since DNS is case-insensitive:\r\n# http://tools.ietf.org/html/rfc4343\r\n# This prevents useless rediscovery if \"foo.com\" is in the seed list but\r\n# \"FOO.com\" is in the hello response.\r\nreturn host.lower(), port\r\n```\r\nTherefore, when comparing the fqdn and node at `_get_srv_response_and_hosts`, the fqdn has been changed to lowercase and the node still contains uppercase letters.   \r\nIt cause `pymongo.errors.ConfigurationError: Invalid SRV host`. \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3800 Add lower() to node when validate hosts of srv records (#1289)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81744ee515ce6a4afa8",
    "number": 1288,
    "body": "https://jira.mongodb.org/browse/PYTHON-3779",
    "head_branch": "PYTHON-3779",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3779 add types to compression_support.py (#1288)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81844ee515ce6a4afa9",
    "number": 1287,
    "body": "https://jira.mongodb.org/browse/PYTHON-3778",
    "head_branch": "PYTHON-3778",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3778 add types to common.py (#1287)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81944ee515ce6a4afaa",
    "number": 1286,
    "body": "Using tox labels with `tox -m <label>` instantly fails if the label does not exist. This appears to be the best way to ensure that trying to run a nonexistent tox environment results in a command failure.",
    "head_branch": "PYTHON-3795",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3793 Make tox fail with invalid environment (#1286)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81a44ee515ce6a4afab",
    "number": 1285,
    "body": "https://jira.mongodb.org/browse/PYTHON-3777",
    "head_branch": "PYTHON-3777",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3777 add types to command_cursor.py (#1285)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81a44ee515ce6a4afac",
    "number": 1284,
    "body": "https://jira.mongodb.org/browse/PYTHON-3796",
    "head_branch": "PYTHON-3796",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3796 Fix typo in docs and reformat using blacken-docs (#1284)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81b44ee515ce6a4afad",
    "number": 1283,
    "body": "https://jira.mongodb.org/browse/PYTHON-3776",
    "head_branch": "PYTHON-3776",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3776 add types to collection.py (#1283)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81c44ee515ce6a4afae",
    "number": 1282,
    "body": "[testing tox behavior]",
    "head_branch": "test-tox-c-ext",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81d44ee515ce6a4afaf",
    "number": 1281,
    "body": "https://jira.mongodb.org/browse/PYTHON-3729",
    "head_branch": "PYTHON-3729",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3729 use PyObject_GetAddr instead of PyObject_GetAddrString (#1281)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81e44ee515ce6a4afb0",
    "number": 1280,
    "body": null,
    "head_branch": "PYTHON-3790",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3790 Standardize Evergreen tox setup (#1280)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc81f44ee515ce6a4afb1",
    "number": 1279,
    "body": "https://jira.mongodb.org/browse/PYTHON-3791",
    "head_branch": "PYTHON-3791",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3791 Fix access to last_write_date (#1279)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82044ee515ce6a4afb2",
    "number": 1278,
    "body": "https://jira.mongodb.org/browse/PYTHON-3788",
    "head_branch": "PYTHON-3788",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3788 add types to server_selectors.py (#1278)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82044ee515ce6a4afb3",
    "number": 1277,
    "body": "We should decide if we want to continue having Evergreen use a bash script to setup + run each test suite using tox, or if we want to put the contents of that script into the config.yml file directly.",
    "head_branch": "PYTHON-3789",
    "is_a_fork": true,
    "comments": [
      "> We should decide if we want to continue having Evergreen use a bash script to setup + run each test suite using tox, or if we want to put the contents of that script into the config.yml file directly.\r\n\r\nI don't think we need a bash script for things as simple as \"python -m tox -e \"test-*\" but if some of the tests get more complicated than that we might still need a script."
    ],
    "commit_messages": [
      "PYTHON-3789 Use tox for Evergreen mockupdb tests (#1277)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82144ee515ce6a4afb4",
    "number": 1276,
    "body": "https://jira.mongodb.org/browse/PYTHON-3787",
    "head_branch": "PYTHON-3787",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3787 add types to max_staleness_selectors.py (#1276)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82244ee515ce6a4afb5",
    "number": 1275,
    "body": "https://jira.mongodb.org/browse/PYTHON-3786",
    "head_branch": "PYTHON-3786",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3786 add types to srv_resolver.py (#1275)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82344ee515ce6a4afb6",
    "number": 1274,
    "body": "https://jira.mongodb.org/browse/PYTHON-3785",
    "head_branch": "PYTHON-3785",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3785 add types to response.py (#1274)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82444ee515ce6a4afb7",
    "number": 1273,
    "body": "https://jira.mongodb.org/browse/PYTHON-3784",
    "head_branch": "PYTHON-3784",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3784 add types to daemon.py (#1273)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82544ee515ce6a4afb8",
    "number": 1272,
    "body": "https://jira.mongodb.org/browse/PYTHON-3783",
    "head_branch": "PYTHON-3783",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3783 add types to compression_support.py (#1272)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82544ee515ce6a4afb9",
    "number": 1271,
    "body": "https://jira.mongodb.org/browse/PYTHON-3782",
    "head_branch": "PYTHON-3782",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3782 add types to lock.py (#1271)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82644ee515ce6a4afba",
    "number": 1270,
    "body": "The Atlas test on PyPy 3.7 fails due to an ASCII encoding error that I haven't been able to solve with Python interpreter environment variables, see [here for the error](https://spruce.mongodb.com/task/mongo_python_driver_atlas_connect__platform~rhel8_python_version~pypy3.7_atlas_connect_patch_8b2320440863ccd87b50713a2dafdf0033016e4f_649b5003850e61a3dcfd1ea7_23_06_27_21_09_42/logs?execution=0): ",
    "head_branch": "PYTHON-3774",
    "is_a_fork": true,
    "comments": [
      "> For the Unicode error could you try this?:\r\n> \r\n> > If anyone is still hitting this issue, it's probably caused by an error messages emitted by pip during preparation of the testing environment (in my case, it was a failing python-mysql build).\r\n> > In my particular case I was able to get to the actual error message by exporting LANG=en_US.UTF-8\r\n> > ref: [stackoverflow.com/a/43385201/574084](https://stackoverflow.com/a/43385201/574084)\r\n> \r\n> [tox-dev/tox#1369 (comment)](https://github.com/tox-dev/tox/issues/1369#issuecomment-514623340)\r\n\r\nStill failed sadly even with that setting in the tox env: https://evergreen.mongodb.com/task_log_raw/mongo_python_driver_atlas_connect__platform~rhel8_python_version~pypy3.7_atlas_connect_patch_8b2320440863ccd87b50713a2dafdf0033016e4f_649c59cc2a60ed590b378851_23_06_28_16_03_41/0?type=ALL\r\n\r\nI tried both that setting as well as `PYTHONIOENCODING=utf_8`, same result.",
      "Had to use LC_ALL=en_US.UTF-8 for it to work."
    ],
    "commit_messages": [
      "PYTHON-3774 Update Evergreen run-atlas-tests to use tox + pytest (#1270)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82744ee515ce6a4afbb",
    "number": 1269,
    "body": "https://jira.mongodb.org/browse/PYTHON-3781",
    "head_branch": "PYTHON-3781",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3781 fix type for server_selector (#1269)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82844ee515ce6a4afbc",
    "number": 1268,
    "body": "https://jira.mongodb.org/browse/PYTHON-3773",
    "head_branch": "PYTHON-3773",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3773 add types to client_session.py (#1268)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82944ee515ce6a4afbd",
    "number": 1267,
    "body": "https://jira.mongodb.org/browse/PYTHON-3772",
    "head_branch": "PYTHON-3772",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3772 add types to change_stream.py (#1267)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82a44ee515ce6a4afbe",
    "number": 1266,
    "body": "https://jira.mongodb.org/browse/PYTHON-3771",
    "head_branch": "PYTHON-3771",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3771 add types to client_options.py (#1266)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82b44ee515ce6a4afbf",
    "number": 1265,
    "body": "https://jira.mongodb.org/browse/PYTHON-3770",
    "head_branch": "PYTHON-3770",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3770 add types to auth_oidc.py (#1265)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82b44ee515ce6a4afc0",
    "number": 1264,
    "body": "https://jira.mongodb.org/browse/PYTHON-3769",
    "head_branch": "PYTHON-3769",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3769 add types to auth_aws.py (#1264)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82c44ee515ce6a4afc1",
    "number": 1263,
    "body": "Any failing tests should be due to unsupported use of cursorType as per the current API spec.",
    "head_branch": "PYTHON-3588",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3588 Expose an API to create a cursor from a command response (#1263)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82d44ee515ce6a4afc2",
    "number": 1262,
    "body": "https://jira.mongodb.org/browse/PYTHON-3767",
    "head_branch": "PYTHON-3767",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3767 add types to ocsp_support.py (#1262)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82e44ee515ce6a4afc3",
    "number": 1261,
    "body": "https://jira.mongodb.org/browse/PYTHON-3766",
    "head_branch": "PYTHON-3766",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3766 add types to ocsp_cache.py (#1261)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc82f44ee515ce6a4afc4",
    "number": 1260,
    "body": "https://jira.mongodb.org/browse/PYTHON-3765",
    "head_branch": "PYTHON-3765",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3765 add types to server_api.py (#1260)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83044ee515ce6a4afc5",
    "number": 1259,
    "body": "https://jira.mongodb.org/browse/PYTHON-3764",
    "head_branch": "PYTHON-3764",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3764 add types to settings.py (#1259)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83144ee515ce6a4afc6",
    "number": 1258,
    "body": null,
    "head_branch": "PYTHON-3763",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83244ee515ce6a4afc7",
    "number": 1257,
    "body": null,
    "head_branch": "PYTHON-3759",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3759 Update to Newer Build Hosts (#1257)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83244ee515ce6a4afc8",
    "number": 1256,
    "body": "https://jira.mongodb.org/browse/PYTHON-3762",
    "head_branch": "PYTHON-3762",
    "is_a_fork": true,
    "comments": [
      "Odd test failure:\r\n```\r\n\r\n=================================== FAILURES ===================================\r\n_ TestAllScenarios.test_test_uri_options_tls-options_tlsInsecure_is_parsed_correctly _\r\n\r\nargs = (<test.test_uri_spec.TestAllScenarios testMethod=test_test_uri_options_tls-options_tlsInsecure_is_parsed_correctly>,)\r\nkwargs = {}\r\noriginal_workdir = '/home/runner/work/mongo-python-driver/mongo-python-driver/test/uri_options'\r\n\r\n    def modified_test_scenario(*args, **kwargs):\r\n        original_workdir = os.getcwd()\r\n        os.chdir(target_workdir)\r\n>       func(*args, **kwargs)\r\n\r\n/home/runner/work/mongo-python-driver/mongo-python-driver/test/test_uri_spec.py:85: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/home/runner/work/mongo-python-driver/mongo-python-driver/test/test_uri_spec.py:124: in run_scenario\r\n    get_error_message_template(expected_warning, \"warning\") % test[\"description\"],\r\nE   AssertionError: True != False : Unexpected warning for test 'tlsInsecure is parsed correctly'\r\n=============================== warnings summary ===============================\r\ntest/test_auth_spec.py::TestAuthSpec::test_connection-string_should_throw_an_exception_when_unsupported_auth_property_is_specified_(mongodb-oidc)\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/common.py:840: UserWarning: UnsupportedProperty is not a supported auth mechanism property. Must be one of ('SERVICE_NAME', 'SERVICE_REALM', 'CANONICALIZE_HOST_NAME', 'PROVIDER_NAME', 'AWS_SESSION_TOKEN').\r\n    warnings.warn(str(exc))\r\n\r\ntest/test_client.py::TestClient::test_compression\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/compression_support.py:59: UserWarning: Unsupported compressor: foobar\r\n    warnings.warn(f\"Unsupported compressor: {compressor}\")\r\n\r\ntest/test_client.py::TestClient::test_compression\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/common.py:840: UserWarning: zlibcompressionlevel must be between -1 and 9, not 10.\r\n    warnings.warn(str(exc))\r\n\r\ntest/test_client.py::TestClient::test_compression\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/common.py:840: UserWarning: zlibcompressionlevel must be between -1 and 9, not -2.\r\n    warnings.warn(str(exc))\r\n\r\ntest/test_client.py::TestClient::test_compression\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/compression_support.py:63: UserWarning: Wire protocol compression with snappy is not available. You must install the python-snappy module for snappy support.\r\n    \"Wire protocol compression with snappy is not available. \"\r\n\r\ntest/test_client.py::TestClient::test_compression\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/compression_support.py:75: UserWarning: Wire protocol compression with zstandard is not available. You must install the zstandard module for zstandard support.\r\n    \"Wire protocol compression with zstandard is not available. \"\r\n\r\ntest/test_client.py::TestClient::test_server_selection_timeout\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/common.py:840: UserWarning: serverselectiontimeoutms must be greater than 0 and less than one billion\r\n    warnings.warn(str(exc))\r\n\r\ntest/test_client.py::TestClient::test_server_selection_timeout\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/common.py:840: UserWarning: serverselectiontimeoutms must be an integer or float\r\n    warnings.warn(str(exc))\r\n\r\ntest/test_collection.py::TestCollection::test_cursor_timeout\r\ntest/test_cursor.py::TestCursor::test_add_remove_option\r\ntest/test_cursor.py::TestCursor::test_clone\r\ntest/test_monitoring.py::TestCommandMonitoring::test_find_options\r\n  /home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/collection.py:1661: UserWarning: use an explicit session with no_cursor_timeout=True otherwise the cursor may still timeout after 30 minutes, for more info see https://mongodb.com/docs/v4.4/reference/method/cursor.noCursorTimeout/#session-idle-timeout-overrides-nocursortimeout\r\n    return Cursor(self, *args, **kwargs)\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n=========================== short test summary info ============================\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3762 Remove global code owners (#1256)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83344ee515ce6a4afc9",
    "number": 1255,
    "body": "Fails as expected when the c extension has an error now:\r\n\r\n```\r\n      gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -arch x86_64 -g -Ibson -I/Users/steve.silvester/workspace/mongo-python-driver/.tox/test/include -I/Library/Frameworks/Python.framework/Versions/3.7/include/python3.7m -c bson/_cbsonmodule.c -o build/temp.macosx-10.9-x86_64-cpython-37/bson/_cbsonmodule.o\r\n      bson/_cbsonmodule.c:282:5: error: use of undeclared identifier 'a'\r\n          a = b;\r\n          ^\r\n      bson/_cbsonmodule.c:282:9: error: use of undeclared identifier 'b'\r\n          a = b;\r\n              ^\r\n      2 errors generated.\r\n      /private/tmp/pip-build-env-4cfbi019/overlay/lib/python3.7/site-packages/setuptools/config/pyprojecttoml.py:66: _BetaConfiguration: Support for `[tool.setuptools]` in `pyproject.toml` is still *beta*.\r\n        config = read_configuration(filepath, True, ignore_option_errors, dist)\r\n      error: command '/usr/bin/gcc' failed with exit code 1\r\n      [end of output]\r\n\r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\n  ERROR: Failed building wheel for pymongo\r\nERROR: Could not build wheels for pymongo, which is required to install pyproject.toml-based projects\r\n\r\ntest: exit 1 (4.24 seconds) /Users/steve.silvester/workspace/mongo-python-driver> python -I -m pip install --force-reinstall --no-deps /Users/steve.silvester/workspace/mongo-python-driver/.tox/.tmp/package/9/pymongo-4.5.0.dev0.tar.gz pid=44837\r\n.pkg: _exit> python /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n  test: FAIL code 1 (5.28 seconds)\r\n  evaluation failed :( (5.36 seconds)\r\n```",
    "head_branch": "PYTHON-3760",
    "is_a_fork": true,
    "comments": [
      "Unfortunately this brakes installing pymongo within a tox environment where gcc is not available. I guess, I need to set the NO_EXT environment then?\r\n\r\nEDIT:\r\nSetting NO_EXT leads to different version, last working version is 4.4.1\r\n``` bash\r\n$ export NO_EXT=1\r\n$ pip install pymongo\r\n\r\nCollecting pymongo\r\n  Downloading https://pypi.sozvers.at/root/pypi/%2Bf/681/f252e43b3ef05/pymongo-4.5.0.tar.gz (848 kB)\r\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 848.7/848.7 kB 13.9 MB/s eta 0:00:00\r\n  Installing build dependencies ... done\r\n  Getting requirements to build wheel ... error\r\n  error: subprocess-exited-with-error\r\n  \r\n  × Getting requirements to build wheel did not run successfully.\r\n  │ exit code: 1\r\n  ╰─> [18 lines of output]\r\n      Traceback (most recent call last):\r\n        File \"/usr/local/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 353, in <module>\r\n          main()\r\n        File \"/usr/local/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 335, in main\r\n          json_out['return_val'] = hook(**hook_input['kwargs'])\r\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n        File \"/usr/local/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 118, in get_requires_for_build_wheel\r\n          return hook(config_settings)\r\n                 ^^^^^^^^^^^^^^^^^^^^^\r\n        File \"/tmp/pip-build-env-53sxbup9/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 355, in get_requires_for_build_wheel\r\n          return self._get_build_requires(config_settings, requirements=['wheel'])\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n        File \"/tmp/pip-build-env-53sxbup9/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 325, in _get_build_requires\r\n          self.run_setup()\r\n        File \"/tmp/pip-build-env-53sxbup9/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 341, in run_setup\r\n          exec(code, locals())\r\n        File \"<string>\", line 119, in <module>\r\n      ValueError: list.remove(x): x not in list\r\n      [end of output]\r\n  \r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\nerror: subprocess-exited-with-error\r\n\r\n× Getting requirements to build wheel did not run successfully.\r\n│ exit code: 1\r\n╰─> See above for output.\r\n```",
      "@cslux Thank you for the report, we'll fix this in https://jira.mongodb.org/browse/PYTHON-3968",
      "I suspect the only workaround (until [PYTHON-3968](https://jira.mongodb.org/browse/PYTHON-3968) is implemented) might be to temporarily unset the TOX_ENV_NAME var:\r\n```\r\n$ export _TOX_ENV_NAME=$TOX_ENV_NAME\r\n$ unset TOX_ENV_NAME\r\n$ pip install pymongo\r\n$ export TOX_ENV_NAME=$_TOX_ENV_NAME\r\n$ unset _TOX_ENV_NAME\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3760 Add C extension building as part of tox test environment (#1255)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83444ee515ce6a4afca",
    "number": 1254,
    "body": "https://jira.mongodb.org/browse/PYTHON-3755",
    "head_branch": "PYTHON-3755",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3755 add types to aggregation.py (#1254)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83544ee515ce6a4afcb",
    "number": 1253,
    "body": "Successful patch: https://spruce.mongodb.com/version/64922c2d32f41764587b47ef/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "PYTHON-2523",
    "is_a_fork": true,
    "comments": [
      "Could you update the title to describe the changes before merging? Like \"Remove unneeded bson-stdint-win32.h\""
    ],
    "commit_messages": [
      "PYTHON-2523 Remove unneeded bson-stdint-win32.h (#1253)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83644ee515ce6a4afcc",
    "number": 1252,
    "body": null,
    "head_branch": "PYTHON-2965",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2965 Migrate to a PEP517 compliant build system (#1252)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83744ee515ce6a4afcd",
    "number": 1251,
    "body": null,
    "head_branch": "release-4.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 4.4 (#1251)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83844ee515ce6a4afce",
    "number": 1250,
    "body": "https://jira.mongodb.org/browse/PYTHON-3752",
    "head_branch": "PYTHON-3752",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3752 add types to bulk.py (#1250)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83844ee515ce6a4afcf",
    "number": 1249,
    "body": null,
    "head_branch": "migrate-tox-pytest",
    "is_a_fork": true,
    "comments": [
      "I think more has to be done to make us pytest-compatible, lots of the tests are getting skipped that shouldn't be.\r\n\r\nNote that the `setup.py` entrypoint does some extra work [here](https://github.com/mongodb/mongo-python-driver/blob/bc66d83efc5e57c5685cdd621aa3bf74ba44f2a7/setup.py#LL109C34-L109C34).\r\n\r\nI believe the equivalent of the [setup](https://github.com/mongodb/mongo-python-driver/blob/bc66d83efc5e57c5685cdd621aa3bf74ba44f2a7/test/__init__.py#L1159) and [teardown](https://github.com/mongodb/mongo-python-driver/blob/bc66d83efc5e57c5685cdd621aa3bf74ba44f2a7/test/__init__.py#L1216) functions will need to be done in a `conftest.py` [fixture](https://docs.pytest.org/en/7.1.x/how-to/fixtures.html?highlight=conftest#scope-sharing-fixtures-across-classes-modules-packages-or-session):\r\n\r\n```python\r\ndef pymongo_test_fixture(scope='session', autouse=True):\r\n      # do setup stuff\r\n      yield\r\n      # do teardown stuff\r\n```",
      "> \r\n\r\nLatest commit should address this, I've added a session-level autouse fixture to perform the `setup` and `teardown` found in the test module `__init__`.\r\n\r\n> I think more has to be done to make us pytest-compatible, lots of the tests are getting skipped that shouldn't be.\r\n> \r\n> Note that the `setup.py` entrypoint does some extra work [here](https://github.com/mongodb/mongo-python-driver/blob/bc66d83efc5e57c5685cdd621aa3bf74ba44f2a7/setup.py#LL109C34-L109C34).\r\n> \r\n> I believe the equivalent of the [setup](https://github.com/mongodb/mongo-python-driver/blob/bc66d83efc5e57c5685cdd621aa3bf74ba44f2a7/test/__init__.py#L1159) and [teardown](https://github.com/mongodb/mongo-python-driver/blob/bc66d83efc5e57c5685cdd621aa3bf74ba44f2a7/test/__init__.py#L1216) functions will need to be done in a `conftest.py` [fixture](https://docs.pytest.org/en/7.1.x/how-to/fixtures.html?highlight=conftest#scope-sharing-fixtures-across-classes-modules-packages-or-session):\r\n> \r\n> ```python\r\n> def pymongo_test_fixture(scope='session', autouse=True):\r\n>       # do setup stuff\r\n>       yield\r\n>       # do teardown stuff\r\n> ```\r\n\r\nLatest commit should address this, I've added a session-level autouse fixture to perform the `setup` and `teardown` found in the test module `__init__`."
    ],
    "commit_messages": [
      "PYTHON-3727 Use tox for unit tests and switch to pytest (#1249)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83944ee515ce6a4afd0",
    "number": 1248,
    "body": "https://jira.mongodb.org/browse/PYTHON-3750",
    "head_branch": "PYTHON-3750",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3750 add types to server.py (#1248)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83a44ee515ce6a4afd1",
    "number": 1247,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83b44ee515ce6a4afd2",
    "number": 1246,
    "body": "https://jira.mongodb.org/browse/PYTHON-3740",
    "head_branch": "PYTHON-3740-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3740 add types to helpers.py (#1246)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83c44ee515ce6a4afd3",
    "number": 1245,
    "body": null,
    "head_branch": "migrate-docs-tox",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3738 Use tox for sphinx doc instead of setup.py (#1245)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83d44ee515ce6a4afd4",
    "number": 1244,
    "body": null,
    "head_branch": "utc-regressions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3744 Fix utcnow deprecation build regressions (#1244)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83d44ee515ce6a4afd5",
    "number": 1243,
    "body": "Hi,\r\n\r\nI'm regularly dealing with 64-bit *unsigned* integers.\r\nThose range from `[0, (2**64) - 1]`. So they are outside of the 64-bit *signed* integers from  [BSONs](https://bsonspec.org/spec.html) `\"\\x12\" e_name int64 64-bit integer`.\r\n\r\nUp to now pymongo rejects those immediately with an OverflowError so the application must deal with them.\r\nFor us this is pretty cumbersome, since we have a pretty complex structure and finding those large numbers would mean to 'traverse' through the whole document before giving it to pymongo.\r\n\r\nPerformance and code wise this is not very ideal so my thinking was:\r\nTo convert the document to BSON, pymongo must traverse the document anyway.\r\nSo lets handle this 'big integer' like any other unknown type and call the `fallback_encoder` (if given). \r\nThen let the fallback_encoder deal with it. This is now up to me, like it is already with unknown types.\r\n\r\nIn other words: If pymongo/bson detects an integer outside its supported range the `fallback_encoder` gets called.\r\nIf no `fallback_encoder` is given or if `fallback_encoder` gives back a 'big integer' again the usual `OverflowError` is thrown.",
    "head_branch": "support-overflow-integers",
    "is_a_fork": true,
    "comments": [
      "Just wanted to say: Many thanks for taking this serious and giving me a great contribution experience."
    ],
    "commit_messages": [
      "PYTHON-3758 Support overflow integers in fallback_encoder. (#1243)\n\nbson only supports 64-bit integer within range:\r\n[-9_223_372_036_854_775_807, +9_223_372_036_854_775_807]\r\n\r\nThis change calls the fallback_encoder before raising OverflowError on\r\nintegers outside of this range."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83e44ee515ce6a4afd6",
    "number": 1242,
    "body": null,
    "head_branch": "fix-utc-regressions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc83f44ee515ce6a4afd7",
    "number": 1241,
    "body": "https://jira.mongodb.org/browse/PYTHON-3706",
    "head_branch": "PYTHON-3706",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3706 Skip flaky test on Windows/macOS (#1241)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84044ee515ce6a4afd8",
    "number": 1240,
    "body": "This change is still using `python setup.py test` inside tox to run the unit tests: migration to pytest will be done in https://jira.mongodb.org/browse/PYTHON-3727, and migration to pyproject.toml will be done in https://jira.mongodb.org/browse/PYTHON-2965.",
    "head_branch": "migrate-to-tox",
    "is_a_fork": true,
    "comments": [
      "Note that moving our evergreen tests to `tox` will involve adding new environments for things like `encryption`, etc, and move things out of the EG files like https://github.com/mongodb/mongo-python-driver/blob/master/.evergreen/run-tests.sh.   @NoahStapp, can you please add a note to the Epic that we'll need tickets for each of those files to migrate to tox?",
      "> Note that moving our evergreen tests to `tox` will involve adding new environments for things like `encryption`, etc, and move things out of the EG files like [`master`/.evergreen/run-tests.sh](https://github.com/mongodb/mongo-python-driver/blob/master/.evergreen/run-tests.sh?rgh-link-date=2023-06-15T18%3A54%3A18Z). @NoahStapp, can you please add a note to the Epic that we'll need tickets for each of those files to migrate to tox?\r\n\r\nSure, will do.",
      "> We should update the `github` workflow as part of this PR to use `tox`.\r\n\r\nFor all of the workflow jobs?",
      "I think just the `python setup.py test` and the whole `mypytest` job for now.  The linkcheck one can be done with the docs in tox ticket."
    ],
    "commit_messages": [
      "PYTHON-2963 Add tox config in preparation for migration from setup.py (#1240)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84144ee515ce6a4afd9",
    "number": 1239,
    "body": null,
    "head_branch": "PYTHON-3011",
    "is_a_fork": true,
    "comments": [
      "> although the title of the PR is confusing since this change disables that test on PyPy.\r\n\r\nMissed a word, thanks!"
    ],
    "commit_messages": [
      "PYTHON-3011 Skip test_connections_are_only_returned_once on PyPy for now (#1239)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84244ee515ce6a4afda",
    "number": 1238,
    "body": null,
    "head_branch": "PYTHON-3519",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3519 Skip test_pool_paused_error_is_retryable on PyPy for now (#1238)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84244ee515ce6a4afdb",
    "number": 1237,
    "body": "https://jira.mongodb.org/browse/PYTHON-3736",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3736 Add Noah to code owners for PyMongo, Motor, and PyMongoArrow (#1237)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84344ee515ce6a4afdc",
    "number": 1236,
    "body": "https://jira.mongodb.org/browse/PYTHON-2287",
    "head_branch": "PYTHON-2287",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2287 Improve error message for invalid boolean option (#1236)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84444ee515ce6a4afdd",
    "number": 1235,
    "body": null,
    "head_branch": "changelog-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3702 Stop using utcnow and utcfromtimestamp changelog update (#1235)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84544ee515ce6a4afde",
    "number": 1234,
    "body": "The `test/test_comment.py` changes are due to `__future__` annotations explicitly not evaluating all type annotations, causing the test to fail due to comparing the string `\"Optional[Any]\"` to the evaluated value `Union[Any, None]`. If we want to keep the original, evaluated comparison, we could explicitly evaluate the type annotation as described here: https://docs.python.org/3/library/typing.html#typing.get_type_hints.",
    "head_branch": "autotyping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3737 Use __future__ annotations for forward reference type hints (#1234)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84644ee515ce6a4afdf",
    "number": 1233,
    "body": null,
    "head_branch": "deprecate-utcnow-and-utcfromtimestamp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3702 bson datetime utc import cleanup (#1233)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84744ee515ce6a4afe0",
    "number": 1232,
    "body": "https://jira.mongodb.org/browse/PYTHON-3699\r\n\r\nImplemented to review: https://github.com/mongodb/specifications/pull/1425",
    "head_branch": "PYTHON-3699",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3699 Add prose test for change stream splitting (#1232)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84844ee515ce6a4afe1",
    "number": 1231,
    "body": null,
    "head_branch": "autotyping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3735 Add types to PyMongo auth module (#1231)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84944ee515ce6a4afe2",
    "number": 1230,
    "body": null,
    "head_branch": "PYTHON-3731",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3731 Disable MONGODB-OIDC Auth for 4.4 (#1230)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84944ee515ce6a4afe3",
    "number": 1229,
    "body": "Several places in the code currently depend on the UTC timestamp being naive, meaning there is no explicit attached timezone. As a result, I've used `.replace(tzinfo=None)` where necessary to strip the associated timezone information after generating a UTC timestamp. It's likely preferable to standardize our timestamps to always be aware since we're migrating away from implicit UTC timestamps.",
    "head_branch": "deprecate-utcnow-and-utcfromtimestamp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3702 Stop using utcnow and utcfromtimestamp (#1229)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84a44ee515ce6a4afe4",
    "number": 1228,
    "body": "https://jira.mongodb.org/browse/PYTHON-3443",
    "head_branch": "PYTHON-3443",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3443 Remove redundant code to avoid Coverity warnings (#1228)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84b44ee515ce6a4afe5",
    "number": 1227,
    "body": null,
    "head_branch": "PYTHON-3726",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3726 Migrate off of Ubuntu in EG Builds (#1227)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84c44ee515ce6a4afe6",
    "number": 1226,
    "body": "https://jira.mongodb.org/browse/PYTHON-3721",
    "head_branch": "stop-testing-aws-linux-2018",
    "is_a_fork": true,
    "comments": [
      "Can you please schedule the updated tasks in EG?"
    ],
    "commit_messages": [
      "PYTHON-3721 Stop Testing on AWS Linux 2018 (#1226)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84d44ee515ce6a4afe7",
    "number": 1225,
    "body": "https://jira.mongodb.org/browse/PYTHON-3728\r\n\r\nI'm convinced the Coverity issue is a false positive and that simplifying the convert_codec_options signature should help. ",
    "head_branch": "PYTHON-3728",
    "is_a_fork": true,
    "comments": [
      "Ready for another look."
    ],
    "commit_messages": [
      "PYTHON-3728 Simplify convert_codec_options signature (#1225)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84e44ee515ce6a4afe8",
    "number": 1224,
    "body": null,
    "head_branch": "PYTHON-3723",
    "is_a_fork": true,
    "comments": [
      "Note: I made a partial pass at this today, I'll finish addressing review and push tomorrow.",
      "I added a note to [jira.mongodb.org/browse/DRIVERS-2630](https://jira.mongodb.org/browse/DRIVERS-2630) about follow-on testing.",
      "I'll pick this work back up when I get back in office",
      "This is ready for another review.",
      "Hmm, suddenly this doctest started failing:\r\n\r\n```\r\nFile \"faq.rst\", line 535, in default\r\nFailed example:\r\n    for x in client.db.collection.find():\r\n        print(x)\r\nExpected:\r\n    {'_id': ObjectId('...'), 'x': datetime.datetime(1970, 1, 1, 0, 0)}\r\n    {'_id': ObjectId('...'), 'x': DatetimeMS(4611686018427387904)}\r\nGot:\r\n    {'_id': 1, 'x': 11}\r\n    {'_id': 2, 'x': 22}\r\n    {'_id': 3, 'x': 33}\r\n    {'_id': 4, 'x': 44}\r\n    {'_id': 5, 'x': 55}\r\n    {'_id': ObjectId('64aebf4c3d1eec6c89c55087'), 'x': datetime.datetime(1970, 1, 1, 0, 0)}\r\n    {'_id': ObjectId('64aebf4c3d1eec6c89c55088'), 'x': DatetimeMS(4611686018427387904)}\r\n1 items passed all tests:\r\n   5 tests in key-order\r\n**********************************************************************\r\n1 items had failures:\r\n   1 of   8 in default\r\n13 tests in 2 items.\r\n12 passed and 1 failed.\r\n***Test Failed*** 1 failures.\r\n```\r\n\r\nIt passed in https://github.com/mongodb/mongo-python-driver/pull/1302 yesterday.",
      "Ah, that's because this PR added DocTests, which need to be run in Python 3.8 for parity with EG setup."
    ],
    "commit_messages": [
      "PYTHON-3723 Add search index management helpers (#1224)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc84f44ee515ce6a4afe9",
    "number": 1223,
    "body": "https://jira.mongodb.org/browse/PYTHON-3724",
    "head_branch": "PYTHON-3724",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3724 Remove null values from `command_started_event` in fle2v2-CreateCollection.yml (#1223)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85044ee515ce6a4afea",
    "number": 1222,
    "body": "This PR addresses issue PYTHON-3725, related to test_network_disconnect_primary's failure in MockupDB.\r\n\r\n- Initial issue:\r\n  - `primary` and `secondary` assignments exhausted `(MockupDB() for _ in range(2))` generator, causing `servers` to become an empty generator, leading to test failures.\r\n- Changes based on PR review:\r\n  - Replaced generator with direct assignment: `primary, secondary = MockupDB(), MockupDB()`\r\n  - Eliminated `servers` variable and its usage in the test\r\n  - Modifications aimed at consistency with similar tests and future problem prevention.",
    "head_branch": "PYTHON-3725",
    "is_a_fork": true,
    "comments": [
      "Thanks for the fix!"
    ],
    "commit_messages": [
      "PYTHON-3725 Fix Test Failure - MockupDB test_network_disconnect_primary (#1222)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85044ee515ce6a4afeb",
    "number": 1221,
    "body": "In _cbsonmodule.c, the `INT2STRING` macro is used heavily during serialization. In my workload (heavily nested documents with large array fields), this macro becomes a performance bottleneck. By swapping the macro for a more purpose-built function [like this one adapted from MySQL](https://github.com/mysql/mysql-server/blob/f091fb09ee1f971af19c39f715e78ef63354907b/strings/int2str.c#L136-L167), my `insert_one` calls were another 2x faster on top of the 2x speed improvement from #1219 (down to about 25% of initial runtime).",
    "head_branch": "int2str",
    "is_a_fork": true,
    "comments": [
      "Hi @thalassemia, thanks for working on this as well!  I am not a lawyer, but my interpretation is that we would need to attribute the code from `mysql-server`, which is GPL v2.0, and considered incompatible with Apache 2.0 [software](https://www.apache.org/licenses/GPL-compatibility.html).  ",
      "Thanks for bringing that to my attention @blink1073! I've replaced the code that I took from `mysql-server` with my own, and (temporarily) included a script that tests edge cases (LLONG_MAX and LLONG_MIN) and benchmarks performance. For commonly seen integers, my code is just as performant as that of `mysql-server`, and both are more than 2x faster than the current macro.",
      "Thanks again!  I'd feel safer if we kept a Python test to exercise the new function.",
      "Here's the log, note the use of `setup.py build_ext -i` instead of `pip install -e .` like we do in GitHub Actions:\r\n\r\n```\r\n [2023/05/31 16:49:03.773] + /opt/python/3.10/bin/python3 setup.py build_ext -i\r\n [2023/05/31 16:49:04.056] INFO: coverage is installed, running tests with coverage...\r\n [2023/05/31 16:49:04.056] running clean\r\n [2023/05/31 16:49:04.056] running build_ext\r\n [2023/05/31 16:49:04.061] building 'bson._cbson' extension\r\n [2023/05/31 16:49:04.061] creating build\r\n [2023/05/31 16:49:04.061] creating build/temp.linux-x86_64-cpython-310\r\n [2023/05/31 16:49:04.062] creating build/temp.linux-x86_64-cpython-310/bson\r\n [2023/05/31 16:49:04.062] gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Ibson -I/opt/python/3.10/include/python3.10 -c bson/_cbsonmodule.c -o build/temp.linux-x86_64-cpython-310/bson/_cbsonmodule.o\r\n [2023/05/31 16:49:04.920] gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Ibson -I/opt/python/3.10/include/python3.10 -c bson/buffer.c -o build/temp.linux-x86_64-cpython-310/bson/buffer.o\r\n [2023/05/31 16:49:05.020] gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Ibson -I/opt/python/3.10/include/python3.10 -c bson/time64.c -o build/temp.linux-x86_64-cpython-310/bson/time64.o\r\n [2023/05/31 16:49:05.228] creating build/lib.linux-x86_64-cpython-310\r\n [2023/05/31 16:49:05.228] creating build/lib.linux-x86_64-cpython-310/bson\r\n [2023/05/31 16:49:05.229] gcc -pthread -shared -Wl,--enable-new-dtags,-rpath,/opt/python/3.10/lib build/temp.linux-x86_64-cpython-310/bson/_cbsonmodule.o build/temp.linux-x86_64-cpython-310/bson/buffer.o build/temp.linux-x86_64-cpython-310/bson/time64.o -L/opt/python/3.10/lib -o build/lib.linux-x86_64-cpython-310/bson/_cbson.cpython-310-x86_64-linux-gnu.so\r\n [2023/05/31 16:49:05.248] building 'pymongo._cmessage' extension\r\n [2023/05/31 16:49:05.248] creating build/temp.linux-x86_64-cpython-310/pymongo\r\n [2023/05/31 16:49:05.248] gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Ibson -I/opt/python/3.10/include/python3.10 -c bson/buffer.c -o build/temp.linux-x86_64-cpython-310/bson/buffer.o\r\n [2023/05/31 16:49:05.347] gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Ibson -I/opt/python/3.10/include/python3.10 -c pymongo/_cmessagemodule.c -o build/temp.linux-x86_64-cpython-310/pymongo/_cmessagemodule.o\r\n [2023/05/31 16:49:05.622] creating build/lib.linux-x86_64-cpython-310/pymongo\r\n [2023/05/31 16:49:05.622] gcc -pthread -shared -Wl,--enable-new-dtags,-rpath,/opt/python/3.10/lib build/temp.linux-x86_64-cpython-310/bson/buffer.o build/temp.linux-x86_64-cpython-310/pymongo/_cmessagemodule.o -L/opt/python/3.10/lib -o build/lib.linux-x86_64-cpython-310/pymongo/_cmessage.cpython-310-x86_64-linux-gnu.so\r\n [2023/05/31 16:49:05.644] copying build/lib.linux-x86_64-cpython-310/bson/_cbson.cpython-310-x86_64-linux-gnu.so -> bson\r\n [2023/05/31 16:49:05.645] copying build/lib.linux-x86_64-cpython-310/pymongo/_cmessage.cpython-310-x86_64-linux-gnu.so -> pymongo\r\n [2023/05/31 16:49:05.693] + /opt/python/3.10/bin/python3 -c 'from bson import _cbson; from pymongo import _cmessage'\r\n [2023/05/31 16:49:06.038] Traceback (most recent call last):\r\n [2023/05/31 16:49:06.038]   File \"<string>\", line 1, in <module>\r\n [2023/05/31 16:49:06.038] ImportError: /data/mci/a4e2586048652aa5165a75ee3e206dd6/src/pymongo/_cmessage.cpython-310-x86_64-linux-gnu.so: undefined symbol: long_long_to_str\r\n [2023/05/31 16:49:06.068] Command 'shell.exec' in function 'run tests' failed: shell script encountered problem: exit code 1.\r\n [2023/05/31 16:49:06.068] Task completed - FAILURE.\r\n [2023/05/31 16:49:06.187] Running post-task commands.\r\n```",
      "Our existing perf benchmarks don't show any improvement for this change because they don't cover encoding large arrays fields. Testing manually shows great results.\r\n\r\nBefore this change:\r\n```\r\n$ python -m timeit -s 'from bson import encode;doc={\"a\":list(range(1000000))}' 'encode(doc)'\r\n5 loops, best of 5: 67.2 msec per loop\r\n```\r\nAfter this change:\r\n```\r\n$ python -m timeit -s 'from bson import encode;doc={\"a\":list(range(1000000))}' 'encode(doc)'\r\n10 loops, best of 5: 37.7 msec per loop\r\n```\r\n\r\nThat's roughly a 2x improvement. Going back further and comparing this to the commit directly before PYTHON-3717:\r\n```\r\n$ python -m timeit -s 'from bson import encode;doc={\"a\":list(range(1000000))}' 'encode(doc)'\r\n1 loop, best of 5: 298 msec per loop\r\n```\r\n\r\nSo this change combined with PYTHON-3717 yields up to an 8x improvement in bson encoding. Incredible! Thanks again!"
    ],
    "commit_messages": [
      "PYTHON-3718 Faster INT2STRING (#1221)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85144ee515ce6a4afec",
    "number": 1220,
    "body": "Linked PR: https://github.com/mongodb-labs/drivers-evergreen-tools/pull/306",
    "head_branch": "PYTHON-3692",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3692 [Build Failure] Container Test failed MONGODB-AWS on MongoDB 5.0 (#1220)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85244ee515ce6a4afed",
    "number": 1219,
    "body": "In _cbsonmodule.c, [the `_type_marker` function](https://github.com/mongodb/mongo-python-driver/blob/bda9e3a0bb533b6d0c6c5141feeecb77c4d31709/bson/_cbsonmodule.c#L431-L440) uses `PyObject_HasAttrString(object, \"_type_marker\")` and `PyObject_GetAttrString(object, \"_type_marker\")`. In my workloads (highly nested documents with many large array fields), these functions become severe bottlenecks to performance, because they each create new Python string objects by calling `PyUnicode_FromString(\"_type_marker\")` internally every time they run.\r\n\r\n \r\n\r\nThis simple change improved my performance by more than double. One caveat is that this leaks the `TYPEMARKERSTR` object in the case that the `cbson` module is unloaded.\r\n\r\n \r\n\r\nAlso, correct me if I'm wrong, but I believe [these lines are redundant](https://github.com/mongodb/mongo-python-driver/blob/bda9e3a0bb533b6d0c6c5141feeecb77c4d31709/bson/_cbsonmodule.c#L453-L459) because the function returns type at the end regardless.",
    "head_branch": "type_marker",
    "is_a_fork": true,
    "comments": [
      "Hi @thalassemia, thanks for working on this!  We should be able to add this value to the [module_state](https://github.com/mongodb/mongo-python-driver/blob/bda9e3a0bb533b6d0c6c5141feeecb77c4d31709/bson/_cbsonmodule.c#L40), and then clear it on [teardown](https://github.com/mongodb/mongo-python-driver/blob/bda9e3a0bb533b6d0c6c5141feeecb77c4d31709/bson/_cbsonmodule.c#L2957).  See [here](https://github.com/mongodb/mongo-python-driver/blob/bda9e3a0bb533b6d0c6c5141feeecb77c4d31709/bson/_cbsonmodule.c#L194) for an example of interacting with the module state."
    ],
    "commit_messages": [
      "PYTHON-3717 Speed up _type_marker check in BSON (#1219)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85344ee515ce6a4afee",
    "number": 1218,
    "body": null,
    "head_branch": "BUILD-17302",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUILD-17302 AWS EC2 credential retrieval 404s in Drivers CI (#1218)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85444ee515ce6a4afef",
    "number": 1217,
    "body": null,
    "head_branch": "PYTHON-3716",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85544ee515ce6a4aff0",
    "number": 1216,
    "body": null,
    "head_branch": "PYTHON-3691",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3691 [Build Failure] test_client.TestClient.test_exhaust_network_error (#1216)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85644ee515ce6a4aff1",
    "number": 1214,
    "body": null,
    "head_branch": "PYTHON-3469",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3469 Error if RewrapManyDataKey is called with masterKey and without provider (#1214)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85644ee515ce6a4aff2",
    "number": 1213,
    "body": null,
    "head_branch": "PYTHON-3613",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3613 Improving Time-Series Scalability (#1213)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85744ee515ce6a4aff3",
    "number": 1212,
    "body": null,
    "head_branch": "PYTHON-3646",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3646 Update readme for PyMongo driver (#1212)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85844ee515ce6a4aff4",
    "number": 1211,
    "body": null,
    "head_branch": "PYTHON-3696",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3696 Bump minimum pymongocrypt version req to >=1.6 for QEv2 (#1211)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85944ee515ce6a4aff5",
    "number": 1210,
    "body": "https://jira.mongodb.org/browse/PYTHON-3709",
    "head_branch": "PYTHON-3709",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3709 Remove \"beta\" from Queryable Encryption Equality API (#1210)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85a44ee515ce6a4aff6",
    "number": 1209,
    "body": null,
    "head_branch": "PYTHON-3467",
    "is_a_fork": true,
    "comments": [
      "I'm mirroring in https://github.com/mongodb/node-mongodb-native/pull/3670",
      "Closing, as this will take a new approach with the machine callback API."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85b44ee515ce6a4aff7",
    "number": 1208,
    "body": null,
    "head_branch": "PYTHON-3456",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3456 CSFLE/QE Naming (#1208)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85c44ee515ce6a4aff8",
    "number": 1207,
    "body": null,
    "head_branch": "PYTHON-3694",
    "is_a_fork": true,
    "comments": [
      "Scheduled a full patch for all 7.0 tasks here: https://spruce.mongodb.com/version/645953c55623436242ec5d39",
      "Failures are all known issues. "
    ],
    "commit_messages": [
      "PYTHON-3694 Test with MongoDB 7.0 (#1207)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85c44ee515ce6a4aff9",
    "number": 1206,
    "body": null,
    "head_branch": "PYTHON-3708",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3708 Fix ReadTheDocs Build Failure (#1206)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85d44ee515ce6a4affa",
    "number": 1205,
    "body": null,
    "head_branch": "PYTHON-3570",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3570 Deprecate currentOp/collStats commands by 7.0 (#1205)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85e44ee515ce6a4affb",
    "number": 1204,
    "body": "Implements:\r\n- https://jira.mongodb.org/browse/PYTHON-3464\r\n- and part of https://jira.mongodb.org/browse/PYTHON-2052\r\n\r\nHelpful links:\r\n- https://github.com/mongodb/specifications/blob/5112bcc/source/mongodb-handshake/handshake.rst#limitations\r\n- https://github.com/mongodb/specifications/blob/5112bcc/source/mongodb-handshake/handshake.rst#client-env",
    "head_branch": "PYTHON-3464",
    "is_a_fork": true,
    "comments": [
      "The docs failure is unrelated and being worked on by RTD: https://github.com/readthedocs/readthedocs.org/issues/10290#issuecomment-1535446266",
      "Something funky is going on on windows:\r\n```\r\n [2023/05/04 20:59:48.631] FAIL [0.004s]: test_metadata (test_client.ClientUnitTest)\r\n [2023/05/04 20:59:48.631] ----------------------------------------------------------------------\r\n [2023/05/04 20:59:48.631] Traceback (most recent call last):\r\n [2023/05/04 20:59:48.631]   File \"C:\\data\\mci\\8a18dfd850b927c5f947ec33058782e2\\src\\test\\test_client.py\", line 312, in test_metadata\r\n [2023/05/04 20:59:48.631]     self.assertEqual(options.pool_options.metadata, metadata)\r\n [2023/05/04 20:59:48.631] AssertionError: SON([[232 chars]cation', {'name': 'foobar'}), ('env', {'name': 'aws.lambda'})]) != SON([[232 chars]cation', {'name': 'foobar'})])\r\n [2023/05/04 20:59:48.631] ======================================================================\r\n [2023/05/04 20:59:48.631] FAIL [0.115s]: test_handshake_02_azure (test_client.TestExhaustCursor)\r\n [2023/05/04 20:59:48.631] ----------------------------------------------------------------------\r\n [2023/05/04 20:59:48.631] Traceback (most recent call last):\r\n [2023/05/04 20:59:48.631]   File \"C:\\data\\mci\\8a18dfd850b927c5f947ec33058782e2\\src\\test\\test_client.py\", line 1893, in test_handshake_02_azure\r\n [2023/05/04 20:59:48.631]     self._test_handshake({\"FUNCTIONS_WORKER_RUNTIME\": \"python\"}, {\"name\": \"azure.func\"})\r\n [2023/05/04 20:59:48.631]   File \"C:\\data\\mci\\8a18dfd850b927c5f947ec33058782e2\\src\\test\\test_client.py\", line 1880, in _test_handshake\r\n [2023/05/04 20:59:48.631]     self.assertEqual(options.pool_options.metadata, metadata)\r\n [2023/05/04 20:59:48.631] AssertionError: SON([[195 chars]', 'CPython 3.9.13.final.0')]) != SON([[195 chars]', 'CPython 3.9.13.final.0'), ('env', {'name': 'azure.func'})])\r\n [2023/05/04 20:59:48.631] ======================================================================\r\n [2023/05/04 20:59:48.631] FAIL [0.110s]: test_handshake_03_gcp (test_client.TestExhaustCursor)\r\n [2023/05/04 20:59:48.631] ----------------------------------------------------------------------\r\n [2023/05/04 20:59:48.631] Traceback (most recent call last):\r\n [2023/05/04 20:59:48.631]   File \"C:\\data\\mci\\8a18dfd850b927c5f947ec33058782e2\\src\\test\\test_client.py\", line 1896, in test_handshake_03_gcp\r\n [2023/05/04 20:59:48.632]     self._test_handshake(\r\n [2023/05/04 20:59:48.632]   File \"C:\\data\\mci\\8a18dfd850b927c5f947ec33058782e2\\src\\test\\test_client.py\", line 1880, in _test_handshake\r\n [2023/05/04 20:59:48.632]     self.assertEqual(options.pool_options.metadata, metadata)\r\n [2023/05/04 20:59:48.632] AssertionError: SON([[218 chars]l.0')]) != SON([[218 chars]l.0'), ('env', {'name': 'gcp.func', 'region': [50 chars]0})])\r\n [2023/05/04 20:59:48.632] ======================================================================\r\n [2023/05/04 20:59:48.632] FAIL [0.104s]: test_handshake_04_vercel (test_client.TestExhaustCursor)\r\n [2023/05/04 20:59:48.632] ----------------------------------------------------------------------\r\n [2023/05/04 20:59:48.632] Traceback (most recent call last):\r\n [2023/05/04 20:59:48.632]   File \"C:\\data\\mci\\8a18dfd850b927c5f947ec33058782e2\\src\\test\\test_client.py\", line 1907, in test_handshake_04_vercel\r\n [2023/05/04 20:59:48.632]     self._test_handshake(\r\n [2023/05/04 20:59:48.632]   File \"C:\\data\\mci\\8a18dfd850b927c5f947ec33058782e2\\src\\test\\test_client.py\", line 1880, in _test_handshake\r\n [2023/05/04 20:59:48.632]     self.assertEqual(options.pool_options.metadata, metadata)\r\n [2023/05/04 20:59:48.632] AssertionError: SON([[209 chars]9.13.final.0')]) != SON([[209 chars]9.13.final.0'), ('env', {'name': 'vercel', 'region': 'cdg1'})])\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_windows_python_version__platform~windows_64_vsMulti_small_auth_ssl~auth_ssl_python_version_windows~3.9_test_rapid_replica_set_patch_d340710e3d488f3906d0e3fa4d4f25e56779fc3a_645416552fbabe7cdbad46d7_23_05_04_20_32_22/logs?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nEdit: this was caused by https://jira.mongodb.org/browse/DRIVERS-2623"
    ],
    "commit_messages": [
      "PYTHON-3464 Add FaaS platform to handshake metadata (#1204)\n\nTruncate metadata env, os, and platform fields if needed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc85f44ee515ce6a4affc",
    "number": 1203,
    "body": "https://jira.mongodb.org/browse/PYTHON-3703",
    "head_branch": "python-3703-fix-typos-and-add-codespell-pre-commit",
    "is_a_fork": true,
    "comments": [
      "@blink1073 any objections to merging? Running codespell doesn't add much time so I'm fine with adding it as a default pre-commit hook.",
      "Thanks for the :rocket: follow-up and review :pray: "
    ],
    "commit_messages": [
      "PYTHON-3703 Fix typos and add codespell pre-commit hook  (#1203)\n\nUpdate pre-commit config adding \"codespell\" hook"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86044ee515ce6a4affd",
    "number": 1202,
    "body": null,
    "head_branch": "PYTHON-3676",
    "is_a_fork": true,
    "comments": [
      "This is working locally, but not in EG.  I'm going to call it time-boxed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86144ee515ce6a4affe",
    "number": 1201,
    "body": "https://jira.mongodb.org/browse/PYTHON-3700",
    "head_branch": "PYTHON-3700",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3700 Clean up docs for create_index/drop_indexes (#1201)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86244ee515ce6a4afff",
    "number": 1200,
    "body": null,
    "head_branch": "PYTHON-3690",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3690 Do not install unittest-xml-reporting on MacOS EG Hosts (#1200)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86244ee515ce6a4b000",
    "number": 1199,
    "body": null,
    "head_branch": "PYTHON-3686",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3686 Consolidate CodecOptions Typings (#1199)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86344ee515ce6a4b001",
    "number": 1198,
    "body": null,
    "head_branch": "PYTHON-3686",
    "is_a_fork": true,
    "comments": [
      "Wow, pinning to pip 23.0.1 fixes the errors on Python 3.7. ",
      "Oh I bet if this is related to pip's build via wheel by default change. My theory is that we mistakenly don't ship the codec_options.pyi file in the wheel.",
      "Better to be explicit and add `recursive-include bson *.pyi` to `MANIFEST.in` either way.",
      "I'll try, I do see that codec_options.pyi is already included in the wheel so I don't think it's that simple.",
      "Fixed by https://github.com/mongodb/mongo-python-driver/pull/1199\r\n\r\nIt turns out that there's some bug/incompatibility with stub files when pymongo is installed with the latest versions of pip. To workaround this issue we merged the stub file logic into codec_options.py."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86444ee515ce6a4b002",
    "number": 1197,
    "body": "https://jira.mongodb.org/browse/PYTHON-3614\r\n\r\nI'll create a new ticket to bump the dependency in setup.py.",
    "head_branch": "PYTHON-3614",
    "is_a_fork": true,
    "comments": [
      "Ready for review."
    ],
    "commit_messages": [
      "PYTHON-3614 Support Queryable Encryption protocol v2 on 7.0+ (#1197)\n\nResync FLE spec tests and update docs for new QE protocol on 7.0.\r\nAdd client side error for createEncryptedCollection on MongoDB < 7.0.\r\nKMS timeout errors should always have exc.timeout==True.\r\nPYTHON-3583 Drivers should not create the ECC collection in v2 of queryable encryption."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86544ee515ce6a4b003",
    "number": 1196,
    "body": "https://jira.mongodb.org/browse/PYTHON-2504\r\n\r\nSuccessor to https://github.com/mongodb/mongo-python-driver/pull/882.\r\n\r\nRan this repeatedly until it stablized after 3 or 4 runs:\r\n```\r\n$ pyupgrade --py37-plus bson/*.py pymongo/*.py gridfs/*.py test/*.py tools/*.py test/*/*.py\r\n```\r\n\r\nI also ran ruff 0.0.265 like this (see https://beta.ruff.rs/docs/rules/):\r\n```\r\n$ ruff --fix-only --select ALL --fixable ALL --target-version py37 --line-length=100 --unfixable COM812,D400,D415,ERA001,RUF100,SIM108,D211,D212,SIM105,SIM,PT,ANN204,EM bson/*.py pymongo/*.py gridfs/*.py test/*.py test/*/*.py\r\n```\r\n\r\nThe --unfixable codes suppress some unneeded or particularly noisy changes.\r\n\r\n\r\nAs noted in the previous PR:\r\n> I tested out adding this to pre-commit but pyupgrade's formatting conflicts with black so it's more of a nuisance.\r\n\r\nI'll add this to `.git-blame-ignore-revs` after the PR is merged.",
    "head_branch": "PYTHON-2504",
    "is_a_fork": true,
    "comments": [
      "I'm waiting until we get mypy working to mark this as ready.",
      "The `mypy --strict` is failing, not sure why it is being so strict.  Perhaps we need to tell it to ignore imports for `pymongo` and `bson` and focus just on the code in the test?",
      "I'm going to back out the mypy changes for this PR and open a new ticket.",
      "I reopened https://jira.mongodb.org/browse/PYTHON-3679 to track mypy --strict support.",
      "I'm going to wait until https://github.com/mongodb/mongo-python-driver/pull/1138 is merged to avoid adding merge conflicts to that PR. ",
      "Rebased and reran the upgrade commands. Waiting for tests to pass. "
    ],
    "commit_messages": [
      "PYTHON-2504 Run pyupgrade 3.4.0 and ruff 0.0.265 (#1196)\n\npyupgrade --py37-plus bson/*.py pymongo/*.py gridfs/*.py test/*.py tools/*.py test/*/*.py\r\nruff --fix-only --select ALL --fixable ALL --target-version py37 --line-length=100 --unfixable COM812,D400,D415,ERA001,RUF100,SIM108,D211,D212,SIM105,SIM,PT,ANN204,EM bson/*.py pymongo/*.py gridfs/*.py test/*.py test/*/*.py"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86644ee515ce6a4b004",
    "number": 1195,
    "body": null,
    "head_branch": "PYTHON-3677",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3677 Update docs on Range Index (#1195)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86744ee515ce6a4b005",
    "number": 1194,
    "body": "https://jira.mongodb.org/browse/PYTHON-3679\r\n\r\nAdds workarounds/fixes for some small changes in:\r\n- https://github.com/python/typeshed/pull/9694\r\n- https://github.com/python/typeshed/pull/9194\r\n",
    "head_branch": "PYTHON-3679",
    "is_a_fork": true,
    "comments": [
      "Not quite sure what's going on here but the mypy checks pass locally with 1.2:\r\n```\r\n$ mypy --install-types --non-interactive bson gridfs tools pymongo\r\nSuccess: no issues found in 84 source files\r\n$ mypy --install-types --non-interactive bson/codec_options.py     \r\nSuccess: no issues found in 1 source file\r\n```\r\n\r\nSame versions of python and mypy fail in Actions:\r\n```python\r\nmypy --install-types --non-interactive bson gridfs tools pymongo\r\n  # Test overshadowed codec_options.py file\r\n  mypy --install-types --non-interactive bson/codec_options.py\r\n  mypy --install-types --non-interactive --disable-error-code var-annotated --disable-error-code attr-defined --disable-error-code union-attr --disable-error-code assignment --disable-error-code no-redef --disable-error-code index --allow-redefinition --allow-untyped-globals --exclude \"test/mypy_fails/*.*\" test\r\n  python -m pip install -U typing_extensions\r\n  mypy --install-types --non-interactive test/test_typing.py test/test_typing_strict.py\r\n  shell: /usr/bin/bash -e {0}\r\n  env:\r\n    pythonLocation: /opt/hostedtoolcache/Python/[3](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:3).10.11/x6[4](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:4)\r\n    LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.11/x64/lib\r\nCollecting types-pyOpenSSL\r\n  Downloading types_pyOpenSSL-23.1.0.2-py3-none-any.whl (6.9 kB)\r\nCollecting types-requests\r\n  Downloading types_requests-2.28.11.17-py3-none-any.whl (14 kB)\r\nRequirement already satisfied: cryptography>=3[5](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:5).0.0 in /opt/hostedtoolcache/Python/3.10.11/x[6](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:6)4/lib/python3.10/site-packages (from types-pyOpenSSL) (40.0.2)\r\nCollecting types-urllib3<1.2[7](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:7) (from types-requests)\r\n  Downloading types_urllib3-1.26.25.10-py3-none-any.whl (15 kB)\r\nRequirement already satisfied: cffi>=1.12 in /opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages (from cryptography>=35.0.0->types-pyOpenSSL) (1.15.1)\r\nRequirement already satisfied: pycparser in /opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages (from cffi>=1.12->cryptography>=35.0.0->types-pyOpenSSL) (2.21)\r\nInstalling collected packages: types-urllib3, types-requests, types-pyOpenSSL\r\nSuccessfully installed types-pyOpenSSL-23.1.0.2 types-requests-2.2[8](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:8).11.17 types-urllib3-1.26.25.10\r\nInstalling missing stub packages:\r\n/opt/hostedtoolcache/Python/3.10.11/x64/bin/python -m pip install types-pyOpenSSL types-requests\r\n\r\n\r\nSuccess: no issues found in 84 source files\r\nbson/__init__.py: note: In function \"_get_object\":\r\nFound 13 errors in 1 file (checked 1 source file)\r\nbson/__init__.py:302: error: Too many arguments for \"Mapping\"  [call-arg]\r\n            return (opts.document_class(data[position : end + 1], opts), p...\r\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nbson/__init__.py: note: In function \"_bson_to_dict\":\r\nbson/__init__.py:5[9](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:9)9: error: Too many arguments for \"Mapping\"  [call-arg]\r\n                return opts.document_class(data, opts)\r\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nbson/__init__.py: note: In function \"decode\":\r\nbson/__init__.py:[10](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:10)19: error: \"CodecOptions\" expects no type arguments, but 1\r\ngiven  [type-arg]\r\n        data: \"_ReadableBuffer\", codec_options: \"Optional[CodecOptions[_Do...\r\n                                                ^\r\nbson/__init__.py:1020: error: A function returning TypeVar should receive at\r\nleast one argument containing the same TypeVar  [type-var]\r\n    ) -> \"_DocumentType\":\r\n         ^\r\nbson/__init__.py:1020: note: Consider using the upper bound \"Mapping[str, Any]\" instead\r\nbson/__init__.py: note: In function \"_decode_all\":\r\nbson/__init__.py:1054: error: \"CodecOptions\" expects no type arguments, but 1\r\ngiven  [type-arg]\r\n        data: \"_ReadableBuffer\", opts: \"CodecOptions[_DocumentType]\"\r\n                                       ^\r\nbson/__init__.py: note: In function \"decode_all\":\r\nbson/__init__.py:1090: error: \"CodecOptions\" expects no type arguments, but 1\r\ngiven  [type-arg]\r\n        data: \"_ReadableBuffer\", codec_options: \"Optional[CodecOptions[_Do...\r\n                                                ^\r\nbson/__init__.py: note: At top level:\r\nbson/__init__.py:[11](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:11)18: error: Unused \"type: ignore\" comment\r\n        return _decode_all(data, opts)  # type: ignore[arg-type]\r\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nbson/__init__.py: note: In function \"_decode_all_selective\":\r\nbson/__init__.py:[12](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:13)12: error: \"CodecOptions\" expects no type arguments, but 1\r\ngiven  [type-arg]\r\n        internal_codec_options: CodecOptions[RawBSONDocument] = codec_opti...\r\n                                ^\r\nbson/__init__.py: note: In function \"decode_iter\":\r\nbson/__init__.py:1226: error: \"CodecOptions\" expects no type arguments, but 1\r\ngiven  [type-arg]\r\n        data: bytes, codec_options: \"Optional[CodecOptions[_DocumentType]]...\r\n                                    ^\r\nbson/__init__.py: note: In function \"decode_file_iter\":\r\nbson/__init__.py:1262: error: \"CodecOptions\" expects no type arguments, but 1\r\ngiven  [type-arg]\r\n    ...   file_obj: Union[BinaryIO, IO], codec_options: \"Optional[CodecOption...\r\n                                                        ^\r\nbson/__init__.py: note: At top level:\r\nbson/__init__.py:[13](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:14)51: error: Unused \"type: ignore[assignment]\" comment\r\n        def decode(self, codec_options: \"CodecOptions[_DocumentType]\" = DE...\r\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...\r\nbson/__init__.py: note: In member \"decode\" of class \"BSON\":\r\nbson/__init__.py:1[35](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:36)1: error: \"CodecOptions\" expects no type arguments, but 1\r\ngiven  [type-arg]\r\n        def decode(self, codec_options: \"CodecOptions[_DocumentType]\" = DE...\r\n                                        ^\r\nbson/__init__.py:1351: note: Error code \"type-arg\" not covered by \"type: ignore\" comment\r\nbson/__init__.py:1351: error: A function returning TypeVar should receive at\r\nleast one argument containing the same TypeVar  [type-var]\r\n    ...ions[_DocumentType]\" = DEFAULT_CODEC_OPTIONS) -> \"_DocumentType\":  # t...\r\n                                                        ^\r\nbson/__init__.py:13[51](https://github.com/mongodb/mongo-python-driver/actions/runs/4775556500/jobs/8489944286?pr=1194#step:5:52): note: Error code \"type-var\" not covered by \"type: ignore\" comment\r\nbson/__init__.py:1351: note: Consider using the upper bound \"Mapping[str, Any]\" instead\r\nbson/__init__.py:1351: note: Error code \"misc\" not covered by \"type: ignore\" comment\r\nError: Process completed with exit code 1.\r\n```",
      "I think one of the dependencies updated, since I saw similar errors in #1195 ",
      "On Actions:\r\n```\r\nSuccessfully installed mypy-1.2.0 mypy-extensions-1.0.0 pip-23.1.1 tomli-2.0.1 typing-extensions-4.5.0\r\n```\r\nLocally:\r\n```\r\npython -m pip list | grep -E 'mypy|typing'                                      \r\nmypy                          1.2.0\r\nmypy-extensions               1.0.0\r\ntyping_extensions             4.5.0\r\n```\r\n\r\nBoth using Python 3.10.11. ",
      "Interestingly when I remove bson/codec_options.pyi, I get many of the same errors as above:\r\n```python\r\n$ rm bson/codec_options.pyi && mypy --install-types --non-interactive bson gridfs tools \r\nbson/__init__.py: note: In function \"_get_object\":\r\nbson/__init__.py:302: error: Too many arguments for \"Mapping\"  [call-arg]\r\n            return (opts.document_class(data[position : end + 1], opts), position + obj_size)\r\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nbson/__init__.py: note: In function \"_bson_to_dict\":\r\nbson/__init__.py:599: error: Too many arguments for \"Mapping\"  [call-arg]\r\n                return opts.document_class(data, opts)\r\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nbson/__init__.py: note: In function \"decode\":\r\nbson/__init__.py:1019: error: \"CodecOptions\" expects no type arguments, but 1 given  [type-arg]\r\n        data: \"_ReadableBuffer\", codec_options: \"Optional[CodecOptions[_DocumentType]]\" = None\r\n                                                ^\r\nbson/__init__.py:1020: error: A function returning TypeVar should receive at least one argument containing the same TypeVar  [type-var]\r\n    ) -> \"_DocumentType\":\r\n         ^\r\nbson/__init__.py:1020: note: Consider using the upper bound \"Mapping[str, Any]\" instead\r\n....\r\n```",
      "I'm going to open a new issue to track the CodecOptions issues."
    ],
    "commit_messages": [
      "PYTHON-3679 Support mypy 1.2 (#1194)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86844ee515ce6a4b006",
    "number": 1193,
    "body": "https://jira.mongodb.org/browse/PYTHON-3678\r\n\r\nResolves https://github.com/mongodb/mongo-python-driver/pull/1186",
    "head_branch": "PYTHON-3678",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3678 Username/password needs to be escaped with quote_plus to account for '/' (#1193)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86a44ee515ce6a4b007",
    "number": 1192,
    "body": "https://jira.mongodb.org/browse/PYTHON-3672",
    "head_branch": "PYTHON-3672",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3672 Increase server selection timeout in more tests (#1192)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86a44ee515ce6a4b008",
    "number": 1191,
    "body": "https://jira.mongodb.org/browse/PYTHON-3671",
    "head_branch": "PYTHON-3671",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3671 Use default server selection timeout in test setup (#1191)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86b44ee515ce6a4b009",
    "number": 1190,
    "body": null,
    "head_branch": "PYTHON-3604",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3604 Remove Duplicate API Docs (#1190)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86c44ee515ce6a4b00a",
    "number": 1189,
    "body": null,
    "head_branch": "PYTHON-3162",
    "is_a_fork": true,
    "comments": [
      "I noted in the ticket that none of these properties were publicly documented in the API docs (because there is no docstring), so I didn't think it made sense to have a changelog entry.",
      "Perhaps we should document them then? I'm of the opinion that all public attributes are part of the api whether we document them or not. I'll open a new ticket for it though."
    ],
    "commit_messages": [
      "PYTHON-3162 Deprecate ServerDescription.election_tuple (#1189)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86d44ee515ce6a4b00b",
    "number": 1188,
    "body": null,
    "head_branch": "PYTHON-3652",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3652 Bump maxWireVersion for MongoDB 7.0 (#1188)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86e44ee515ce6a4b00c",
    "number": 1187,
    "body": null,
    "head_branch": "PYTHON-3649-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3649 Use RHEL8 for PyOpenSSL Builds (#1187)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc86f44ee515ce6a4b00d",
    "number": 1186,
    "body": "The example given for percent-encoding usernames and passwords for a MongoDB URI first mentions .quote() should be used, but proceeds to incorrectly use .quote_plus(), changing spaces to plus signs instead of their percent encoding equivalent.\n\nThe example should use .quote() to be clear and exemplify proper use.",
    "head_branch": "docfix/urllib-misuse",
    "is_a_fork": true,
    "comments": [
      "Hi @M-Moon, these examples were changed to handle the case where the username or password contains an unescaped `/` character, which would get interpreted as the database name.  https://jira.mongodb.org/browse/PYTHON-2973.   I think the right thing to do is change the examples to use `quote(..., safe='')`",
      "Thanks for the response @blink1073, this makes sense. I was not aware of the issue so thanks for letting me know.",
      "In this case the code example is correct but the paragraph is wrong. It should say:\r\n```python\r\nUsername and password must be percent-escaped with\r\n:py:func:`urllib.parse.quote_plus`, to be used in a MongoDB URI.\r\n```",
      "@M-Moon thank you for reporting this, I've fixed it in https://github.com/mongodb/mongo-python-driver/pull/1193!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87044ee515ce6a4b00e",
    "number": 1185,
    "body": "# Summary\r\n- Reload expansions before deleting Azure resources\r\n\r\nVerified with this patch: https://spruce.mongodb.com/version/643454523066158dd65bd5d9\r\n\r\n# Background & Motivation\r\n\r\nThis is an improvement to the `testazurekms_task_group` added as part of DRIVERS-2411. https://github.com/mongodb/mongo-c-driver/pull/1234 explains this improvement.\r\n",
    "head_branch": "PYTHON-3658",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "PYTHON-3658 Reload expansions before deleting Azure resources (#1185)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87044ee515ce6a4b00f",
    "number": 1184,
    "body": null,
    "head_branch": "PYTHON-3649",
    "is_a_fork": true,
    "comments": [
      "evergreen retry",
      "evergreen retry",
      "evergreen retry",
      "Test failures are tracked in [PYTHON-3614](https://jira.mongodb.org/browse/PYTHON-3614)"
    ],
    "commit_messages": [
      "PYTHON-3649 Switch to Supported Build Hosts (#1184)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87144ee515ce6a4b010",
    "number": 1182,
    "body": "Closes Issue [PYTHON-3657](https://jira.mongodb.org/browse/PYTHON-3657)",
    "head_branch": "fix/allow-index-name-set-to-none",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "PYTHON-3657 Allow index name explicitly set to None (#1182)\n\nCo-authored-by: Michael Pacheco <michael.dias@luizalabs.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87244ee515ce6a4b011",
    "number": 1181,
    "body": "Temporarily skip CSOT GridFS tests on Windows.",
    "head_branch": "PYTHON-3522-fix",
    "is_a_fork": true,
    "comments": [
      "This PR gets the Windows tests green for now. I'll fix and re-enable the gridfs tests in a followup."
    ],
    "commit_messages": [
      "PYTHON-3522 Increase test timeout for Windows (#1181)\n\nTemporarily skip CSOT GridFS tests on Windows."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87344ee515ce6a4b012",
    "number": 1180,
    "body": null,
    "head_branch": "PYTHON-3066",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3066 Test against Apple silicon in Evergreen (#1180)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87444ee515ce6a4b013",
    "number": 1179,
    "body": "Signed-off-by: lilinjie lilinjie@uniontech.com\r\nfix typo",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix typo (#1179)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87544ee515ce6a4b014",
    "number": 1178,
    "body": null,
    "head_branch": "PYTHON-3644",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3644 Test encryption KMS connections with stdlib ssl, not just pyopenssl (#1178)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87544ee515ce6a4b015",
    "number": 1177,
    "body": "https://jira.mongodb.org/browse/PYTHON-3643",
    "head_branch": "PYTHON-3643",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3643 Use mongodb+srv in MONGODB-AWS auth examples (#1177)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87644ee515ce6a4b016",
    "number": 1176,
    "body": null,
    "head_branch": "PYTHON-3567",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3567 Add guidance for setting uuidRepresentation in 4.0 migration guide (#1176)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87744ee515ce6a4b017",
    "number": 1175,
    "body": null,
    "head_branch": "PYTHON-3619",
    "is_a_fork": true,
    "comments": [
      "All of the previously timing out builds finished in 41m or less.  Two of them failed with known CSOT errors."
    ],
    "commit_messages": [
      "PYTHON-3619 MacOS hosts are incredibly slow (#1175)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87844ee515ce6a4b018",
    "number": 1174,
    "body": null,
    "head_branch": "PYTHON-3639",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-3641 to track the failures seen in the EG build on this PR. "
    ],
    "commit_messages": [
      "PYTHON-3639 Release Build is Failing to Create Universal Wheels for MacOS (#1174)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87944ee515ce6a4b019",
    "number": 1173,
    "body": null,
    "head_branch": "PYTHON-3634",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3634 Windows crypt shared rewrap many data key timing out sometimes (#1173)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87a44ee515ce6a4b01a",
    "number": 1172,
    "body": null,
    "head_branch": "PYTHON-2468",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2468 Add pymongoexplain example to pymongo docs (#1172)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87b44ee515ce6a4b01b",
    "number": 1171,
    "body": null,
    "head_branch": "PYTHON-3615",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3615 Add docs example for how to rotate CMKs using rewrap_many_data_key (#1171)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87c44ee515ce6a4b01c",
    "number": 1170,
    "body": null,
    "head_branch": "PYTHON-3610",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3610 Add blacken-docs to pre-commit hook (#1170)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87c44ee515ce6a4b01d",
    "number": 1169,
    "body": null,
    "head_branch": "PYTHON-3624",
    "is_a_fork": true,
    "comments": [
      "Can you run the latest encryption task to make sure it resolves the test failures?",
      "@ShaneHarvey https://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_ubuntu18_test_encryption__platform~ubuntu_18.04_auth_ssl~noauth_nossl_python_version~3.10_encryption~encryption_crypt_shared_test_latest_replica_set_patch_5e203bea8dd8cfd6d6dd9f238656976194e6c769_640f5d3e3e8e86f961aef1e2_23_03_13_17_28_31"
    ],
    "commit_messages": [
      "PYTHON-3624 Update fle2-* tests to match name requirements in SERVER-74069 (#1169)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87d44ee515ce6a4b01e",
    "number": 1168,
    "body": "Fixes: https://jira.mongodb.org/browse/PYTHON-3629",
    "head_branch": "PYTHON-3629",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3629 Actually install pymongo for Atlas connect tests (#1168)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87e44ee515ce6a4b01f",
    "number": 1167,
    "body": null,
    "head_branch": "PYTHON-3626",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3626 Document srvMaxHosts in MongoClient options (#1167)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc87f44ee515ce6a4b020",
    "number": 1166,
    "body": null,
    "head_branch": "PYTHON-3622",
    "is_a_fork": true,
    "comments": [
      "Example for a replica set test:\r\n\r\n<img width=\"277\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2096628/222201066-91fa6126-b66a-45dd-a872-4638e64161bf.png\">\r\n"
    ],
    "commit_messages": [
      "PYTHON-3622 Improve Server Log Download in Evergreen (#1166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88044ee515ce6a4b021",
    "number": 1165,
    "body": null,
    "head_branch": "PYTHON-3620",
    "is_a_fork": true,
    "comments": [
      "Should we always create a virtualenv then?",
      "I think always using a venv would be a great idea but I suspect it will come with some challenges and end up being more work. How about for now we only install unittest-xml-reporting in places where we already create a virtualenv? Then we can open and backlog a ticket to always use venvs.",
      "Done, and https://jira.mongodb.org/browse/PYTHON-3625"
    ],
    "commit_messages": [
      "PYTHON-3620 Ensure unittest-xml-reporting is Installed in Evergreen Tasks (#1165)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88144ee515ce6a4b022",
    "number": 1164,
    "body": "Passing builds from patch: https://spruce.mongodb.com/version/63f7b44a1e2d1715c85d9c9a/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "PYTHON-3618",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3618 Perf tests are failing on the centos6-perf boxes due to mongosh download (#1164)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88144ee515ce6a4b023",
    "number": 1163,
    "body": "[PYTHON-3616](https://jira.mongodb.org/browse/PYTHON-3616) Use minimum RTT for CSOT maxTimeMS calculation.\r\n\r\nRequire at least 2 RTT samples, otherwise use 0 as RTT. Only keep last 10 samples.\r\n\r\nSpec commit: https://github.com/mongodb/specifications/commit/c06650d86f7e47ea30cb2d992942bcec6ef155f9\r\nSpec PR: https://github.com/mongodb/specifications/pull/1350",
    "head_branch": "PYTHON-3616",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3616 Use minimum RTT for CSOT maxTimeMS calculation (#1163)\n\nRequire at least 2 RTT samples, otherwise use 0 as RTT. Only keep last 10 samples."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88244ee515ce6a4b024",
    "number": 1162,
    "body": null,
    "head_branch": "PYTHON-2754",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2754 Add Spec Tests For DB Names With Commas (#1162)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88344ee515ce6a4b025",
    "number": 1161,
    "body": "[Our Catalog for all of the issues we found and decided to solve!](https://docs.google.com/spreadsheets/d/1TMENw8XC2YLQ_FwavHHocwiJsNKWAb4rTMX8B5Sbni0/edit?usp=sharing)\r\nhttps://jira.mongodb.org/browse/PYTHON-3511",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi! Thank you so much for this PR. This is super helpful. One question I have is: have you done a search for all referents to `str`, because there may be documentation that does not explicitly mention Python 2 or Python 3 but may be out of date. The change from `str` to `bytes` might have been missed in some cases. I see from the list you used various `grep` strings, but there might be some false negatives as the search strings are quite specific, and I didn't see one for `bytes` or `str`. ",
      "One other small thing--in `bson/__init__.py:818`, technically all integers in Python 3.x are arbitrary precision, not longs. I think we want to reword that to something like \"returns an int`. ",
      "> Hi! Thank you so much for this PR. This is super helpful. One question I have is: have you done a search for all referents to `str`, because there may be documentation that does not explicitly mention Python 2 or Python 3 but may be out of date. The change from `str` to `bytes` might have been missed in some cases. I see from the list you used various `grep` strings, but there might be some false negatives as the search strings are quite specific, and I didn't see one for `bytes` or `str`. \n\nI did not, I agree I should have thought about that and done a search for those as well. Give me a few days to take care of that and ill update the catalog and PR. I will also make that adjustment to the bson/__init__:818: comment as well. Thank you!",
      "@sushiboytr are you still planning to work on this PR?",
      "> @sushiboytr are you still planning to work on this PR?\n\n@ShaneHarvey Yes I am! Sorry for the delay in updates, just been busy with school work. I am in the process of going thru and finding any references to basestring, str, and bytes and removing/updating any that correlate to a python 2 reference. You should receive a updated PR for review in 1-2 weeks. ",
      "Thanks @sushiboytr!"
    ],
    "commit_messages": [
      "PYTHON-3511 Remove Python 2 references from the docs (#1161)\n\nCo-authored-by: Nicky Lee <40870742+iceypotato@users.noreply.github.com>\r\nCo-authored-by: DanielZavala11 <89770626+DanielZavala11@users.noreply.github.com>\r\nCo-authored-by: Shane Harvey <shane.harvey@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88444ee515ce6a4b026",
    "number": 1160,
    "body": "[PYTHON-3490](https://jira.mongodb.org/browse/PYTHON-3490) \r\n\r\nWIP draft implementation for https://github.com/mongodb/specifications/pull/1369\r\n\r\n",
    "head_branch": "PYTHON-3490",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88544ee515ce6a4b027",
    "number": 1159,
    "body": null,
    "head_branch": "PYTHON-3607",
    "is_a_fork": true,
    "comments": [
      "I scheduled a Encryption macOS 11.00 Auth NoSSL job that was previously failing."
    ],
    "commit_messages": [
      "PYTHON-3607 FAIL: test_01_aws (test.test_encryption.TestKmsTLSOptions) (#1159)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88644ee515ce6a4b028",
    "number": 1158,
    "body": "https://jira.mongodb.org/browse/PYTHON-3609\r\n\r\nsetDaemon is the only deprecated api we're using.",
    "head_branch": "PYTHON-3609",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3609 Stop using deprecated setDaemon api in test suite (#1158)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88744ee515ce6a4b029",
    "number": 1157,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/266",
    "head_branch": "PYTHON-3579",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey: passing evg build: https://evergreen.mongodb.com/version/63ec2baaa4cf4704207fb4b6?redirect_spruce_users=true"
    ],
    "commit_messages": [
      "PYTHON-3579 Test Failure - Amazon Linux 2018 fails downloading crypt_shared when it is not even needed (#1157)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88744ee515ce6a4b02a",
    "number": 1156,
    "body": "<img width=\"761\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2096628/219117962-5cddc7e7-4341-461b-b6f0-b3a810d0ce88.png\">\r\n\r\n<img width=\"783\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2096628/219118010-148e628f-0032-41ac-bf09-19ec5cfad50b.png\">\r\n",
    "head_branch": "PYTHON-3381",
    "is_a_fork": true,
    "comments": [
      "One problem I noticed is that multiple classes show up twice in the docs now. For example:\r\n- https://pymongo--1156.org.readthedocs.build/en/1156/api/bson/binary.html#bson.binary.Binary\r\n- https://pymongo--1156.org.readthedocs.build/en/1156/api/bson/index.html#bson.Binary",
      "It looks like the typehints do not show up in the method signature or in the Parameter list: https://pymongo--1156.org.readthedocs.build/en/1156/api/bson/index.html#bson.BSON.encode \r\n\r\nWhy is that?",
      "`Binary` was already duplicated in the docs, since it is re-exported.",
      "I think the issue is that we're not using a standard format for our parameters, as far as I can tell.  We'd have to switch to either the `:param foo:`, Google, or Numpy-style docstring.",
      "So perhaps we should not use [sphinx-autodoc-typehints](https://github.com/tox-dev/sphinx-autodoc-typehints) unless we switch to a standard format.",
      "> Binary was already duplicated in the docs, since it is re-exported.\r\n\r\nCould you open a bug for this? Looks like it was caused by #994.\r\n\r\n> So perhaps we should not use [sphinx-autodoc-typehints](https://github.com/tox-dev/sphinx-autodoc-typehints) unless we switch to a standard format.\r\n\r\nSGTM, let's do that in another ticket?",
      "https://jira.mongodb.org/browse/PYTHON-3604 for API docs and https://jira.mongodb.org/browse/PYTHON-3605 for sphinx-autodoc-typehints.  I'll pare this down to use just `furo`.",
      "I fixed those and a few other places I saw.  I went through all of the docs pages except for the secondary API docs pages."
    ],
    "commit_messages": [
      "PYTHON-3381 Improve readability of sphinx docs (#1156)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88844ee515ce6a4b02b",
    "number": 1155,
    "body": null,
    "head_branch": "PYTHON-3533",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3533 Permit tlsDisableOCSPEndpointCheck in KMS TLS options (#1155)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88944ee515ce6a4b02c",
    "number": 1154,
    "body": null,
    "head_branch": "PYTHON-3593",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3593 Remove bulk api docs page which is blank (#1154)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88a44ee515ce6a4b02d",
    "number": 1153,
    "body": "https://jira.mongodb.org/browse/PYTHON-3577 \r\n\r\nFixes this error on serverless:\r\n```\r\n [2023/02/02 20:32:46.535] ERROR [1.071s]: test_session_gc (test_load_balancer.TestLB)\r\n [2023/02/02 20:32:46.535] ----------------------------------------------------------------------\r\n [2023/02/02 20:32:46.535] Traceback (most recent call last):\r\n [2023/02/02 20:32:46.535]   File \"/data/mci/4cac7e2c9fe9236da7246fb89bbb0d46/src/pymongo/_csot.py\", line 105, in csot_wrapper\r\n [2023/02/02 20:32:46.535]     return func(self, *args, **kwargs)\r\n [2023/02/02 20:32:46.536]   File \"/data/mci/4cac7e2c9fe9236da7246fb89bbb0d46/src/pymongo/database.py\", line 824, in command\r\n [2023/02/02 20:32:46.536]     return self._command(\r\n [2023/02/02 20:32:46.536]   File \"/data/mci/4cac7e2c9fe9236da7246fb89bbb0d46/src/pymongo/database.py\", line 703, in _command\r\n [2023/02/02 20:32:46.536]     return sock_info.command(\r\n [2023/02/02 20:32:46.536]   File \"/data/mci/4cac7e2c9fe9236da7246fb89bbb0d46/src/pymongo/pool.py\", line 767, in command\r\n [2023/02/02 20:32:46.536]     return command(\r\n [2023/02/02 20:32:46.536]   File \"/data/mci/4cac7e2c9fe9236da7246fb89bbb0d46/src/pymongo/network.py\", line 166, in command\r\n [2023/02/02 20:32:46.536]     helpers._check_command_response(\r\n [2023/02/02 20:32:46.536]   File \"/data/mci/4cac7e2c9fe9236da7246fb89bbb0d46/src/pymongo/helpers.py\", line 191, in _check_command_response\r\n [2023/02/02 20:32:46.536]     raise OperationFailure(errmsg, code, response, max_wire_version)\r\n [2023/02/02 20:32:46.536] pymongo.errors.OperationFailure: (Unauthorized) not authorized on admin to execute command { killSessions: [[{id {4 [190 134...\r\n```\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_serverless__platform~ubuntu_18.04_auth_ssl~auth_ssl_python_version~3.10_serverless~enabled_test_serverless_540562a60630a57d3eb0c06358b19d3882a5de18_23_01_31_23_22_28",
    "head_branch": "PYTHON-3577",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3577 Fix test_session_gc on serverless (#1153)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88b44ee515ce6a4b02e",
    "number": 1152,
    "body": null,
    "head_branch": "PYTHON-3562",
    "is_a_fork": true,
    "comments": [
      "I added a super simple test that tests that we can load these types. "
    ],
    "commit_messages": [
      "PYTHON-3562 Type annotation of `bson.json_utils.loads` is incorrect (only accepts `str`) (#1152)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88c44ee515ce6a4b02f",
    "number": 1151,
    "body": null,
    "head_branch": "PYTHON-3599",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3599 Fix create_data_key/key_alt_names docs example (#1151)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88c44ee515ce6a4b030",
    "number": 1150,
    "body": "The PipelineHelper class provides a set of static methods that can be used to write and build queries in MongoDB. These methods correspond to the various stages in the MongoDB aggregation pipeline, such as $project, $match, $group, $sort, $skip, $limit, and $unwind.\r\n\r\nBy using these methods, you can simplify the process of writing and building aggregation queries in MongoDB. Instead of writing the pipeline stages manually, you can use the pre-defined methods to construct the stages and create the query.\r\n\r\nFor example, consider the following code that uses the PipelineHelper class to build a query that projects a subset of fields, matches documents based on certain criteria, groups the documents based on a specified field, and calculates the sum of another field.\r\n\r\n```\r\nfrom pymongo import MongoClient\r\nfrom pymongo import PipelineHelper\r\nquery = [\r\n    PipelineHelper.project({\"field1\": 1, \"field2\": 1}),\r\n    PipelineHelper.match({\"field1\": {\"$gt\": 10}}),\r\n    PipelineHelper.group({\"_id\": \"$field2\"}, {\"sum_field1\": {\"$sum\": \"$field1\"}}),\r\n    PipelineHelper.sort({\"sum_field1\": -1})\r\n]\r\nclient = MongoClient(\"mongodb://localhost:27017/\")\r\ndb = client[\"test_db\"]\r\ncollection = db[\"test_collection\"]\r\npipeline = [\r\n    PipelineHelper.match({\"status\": \"A\"}),\r\n    PipelineHelper.group({\"_id\": \"$status\"}, {\"count\": {\"$sum\": 1}}),\r\n    PipelineHelper.sort({\"count\": -1}),\r\n    PipelineHelper.limit(1)\r\n]\r\nresult = collection.aggregate(pipeline)\r\n```\r\n\r\n",
    "head_branch": "feature/pipeline_helper",
    "is_a_fork": true,
    "comments": [
      "Thanks @caeser1996 but we're not going to merge this API. I'd recommend publishing this as it's own library if you (or others) want to reuse it in multiple projects. In the future we may add an api in a similar spirit to this but it would be a concerted effort across multiple driver languages and would likely look very different.",
      "I can write it for all other languages if required\n\nGet Outlook for iOS<https://aka.ms/o0ukef>\n________________________________\nFrom: Shane Harvey ***@***.***>\nSent: Thursday, February 9, 2023 1:42:15 AM\nTo: mongodb/mongo-python-driver ***@***.***>\nCc: Sumanta Mukhopadhyay ***@***.***>; Mention ***@***.***>\nSubject: Re: [mongodb/mongo-python-driver] Feature/pipeline helper (PR #1150)\n\n\nThanks @caeser1996<https://github.com/caeser1996> but we're not going to merge this API. I'd recommend publishing this as it's own library if you (or others) want to reuse it in multiple projects. In the future we may add an api in a similar spirit to this but it would be a concerted effort across multiple driver languages and would likely look very different.\n\n—\nReply to this email directly, view it on GitHub<https://github.com/mongodb/mongo-python-driver/pull/1150#issuecomment-1423181024>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AD6GESGPBLZ3GYXTSZMXXLTWWP4Z7ANCNFSM6AAAAAAUU2QFG4>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88d44ee515ce6a4b031",
    "number": 1149,
    "body": "The server no longer performs a write when running `replace_one({}, {})` on an empty document so I've updated the test operations to ensure a new document needs to be written.",
    "head_branch": "PYTHON-3596",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3596 Guarantee a document update in retryable writes tests (#1149)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88e44ee515ce6a4b032",
    "number": 1148,
    "body": null,
    "head_branch": "PYTHON-3592",
    "is_a_fork": true,
    "comments": [
      "Opened a ticket for the build failure: https://jira.mongodb.org/browse/PYTHON-3596"
    ],
    "commit_messages": [
      "PYTHON-3592 createEncryptedCollection should raise a specialized exception to report the intermediate encryptedFields (#1148)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc88f44ee515ce6a4b033",
    "number": 1147,
    "body": null,
    "head_branch": "PYTHON-3589",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3589 createEncryptedCollection should not accept keyAltNames (#1147)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89044ee515ce6a4b034",
    "number": 1146,
    "body": "By looking at the server logs I discovered that the 4.0 primary was blocked from running the agg $out operation because a previous test intentionally left a transaction open. I've updated the test to close the transaction on the server so the test runs in a few milliseconds instead of 1 minute now.",
    "head_branch": "PYTHON-3577",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3577 Fix test_aggregate_out on 4.0 replica set (#1146)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89144ee515ce6a4b035",
    "number": 1145,
    "body": null,
    "head_branch": "PYTHON-3357",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3357 Automatically create Queryable Encryption keys (#1145)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89244ee515ce6a4b036",
    "number": 1144,
    "body": null,
    "head_branch": "PYTHON-3584",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 4.4.0b0 (#1144)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89244ee515ce6a4b037",
    "number": 1143,
    "body": "Weirdly enough sphinx does not recognize the docstring if you put it in `__new__`, so I had to define an `__init__`  function for the docstring, but it does not do anything because the class is immutable.",
    "head_branch": "PYTHON-3558",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3558 Missing docs for JSONOptions (#1143)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89344ee515ce6a4b038",
    "number": 1142,
    "body": null,
    "head_branch": "PYTHON-3582",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3582 Add specification tests for range indexes (#1142)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89444ee515ce6a4b039",
    "number": 1141,
    "body": null,
    "head_branch": "PYTHON-3523",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3523 Resync unified test format tests for getnonce (#1141)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89544ee515ce6a4b03a",
    "number": 1140,
    "body": null,
    "head_branch": "PYTHON-3280",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3280 Support for Range Indexes (#1140)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89644ee515ce6a4b03b",
    "number": 1139,
    "body": null,
    "head_branch": "PYTHON-3568",
    "is_a_fork": true,
    "comments": [
      "The link check failure is expected until we merge this PR, since the file path in the link changes."
    ],
    "commit_messages": [
      "PYTHON-3568 Intellisense highlights multiple PyMongo methods because of CodecOptions (#1139)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89744ee515ce6a4b03c",
    "number": 1138,
    "body": null,
    "head_branch": "PYTHON-3460",
    "is_a_fork": true,
    "comments": [
      "> We can do a manual check for mongos to see if exhaust cursors are supported instead\r\n\r\nDone"
    ],
    "commit_messages": [
      "PYTHON-3460 Implement OIDC SASL mechanism (#1138)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89844ee515ce6a4b03d",
    "number": 1137,
    "body": null,
    "head_branch": "PYTHON-3565",
    "is_a_fork": true,
    "comments": [
      "<img width=\"633\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2096628/213037037-fc109f11-537a-41c3-ad7b-2e4758007475.png\">\r\n"
    ],
    "commit_messages": [
      "PYTHON-3565 The docs page appears to be missing a component reference (#1137)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89944ee515ce6a4b03e",
    "number": 1136,
    "body": null,
    "head_branch": "PYTHON-3446",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3446 Do not connect to mongocryptd if shared library is loaded (#1136)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89944ee515ce6a4b03f",
    "number": 1135,
    "body": null,
    "head_branch": "PYTHON-3523",
    "is_a_fork": true,
    "comments": [
      "We don't have support for 6.2 in our test suite, so I assumed we would have to wait for that so we could see errors for any remaining usages of getNonce.",
      "Latest is [6.3](https://evergreen.mongodb.com/task_log_raw/mongo_python_driver_test_macos__platform~macos_1014_auth~auth_ssl~ssl_test_latest_replica_set_47686c8f68363645579ee0ed0f841fdd3b7362f4_22_12_20_22_29_43/0?type=T#L751).",
      "Is it possible to skip implementing the new logging test features (like hasServerConnectionId) in this PR? Could we just skip adding those files?",
      "I removed those two files."
    ],
    "commit_messages": [
      "PYTHON-3523 Remove getNonce command usage for 6.2+ (#1135)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89a44ee515ce6a4b040",
    "number": 1134,
    "body": null,
    "head_branch": "PYTHON-3546-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89b44ee515ce6a4b041",
    "number": 1133,
    "body": "I opened https://jira.mongodb.org/browse/PYTHON-3559 to address the intermittent test failures.",
    "head_branch": "PYTHON-3466",
    "is_a_fork": true,
    "comments": [
      "Ah I see you already opened https://jira.mongodb.org/browse/PYTHON-3559",
      "The new behavior can be seen [here (4.4 server version)](https://evergreen.mongodb.com/task/mongo_python_driver_test_macos_encryption__platform~macos_1100_auth~auth_ssl~nossl_encryption~encryption_crypt_shared_test_4.2_replica_set_patch_eaea70bf08189d567838b3408bdc9fd5ae7cecf6_63bf2a002fbabe72fa8734de_23_01_11_21_28_33):\r\n```\r\n [2023/01/11 21:31:18.054] Testing CSFLE with crypt_shared lib version latest\r\n [2023/01/11 21:31:18.054] Download crypt_shared latest-enterprise for macos-x86_64\r\n```",
      "Lovely cleanup:\r\n\r\n<img width=\"121\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2096628/211939822-cc7810e4-4820-49f6-ad55-a35c3c44f307.png\">\r\n"
    ],
    "commit_messages": [
      "PYTHON-3466 Test crypt_shared with older server versions (#1133)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89c44ee515ce6a4b042",
    "number": 1132,
    "body": "As can be seen [here](https://github.com/mongodb/mongo-python-driver/blob/a43f320753a0b8710e23fb36ae7bb488ef790b41/pymongo/mongo_client.py#L1744) we already make sure our implicit sessions are already not causally consistent. ",
    "head_branch": "PYTHON-3360",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DRIVERS-2369 Disable causal consistency in implicit sessions (#1132)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89d44ee515ce6a4b043",
    "number": 1131,
    "body": null,
    "head_branch": "PYTHON-3546",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3546 bson.CodecOptions docs missing unicode_decode_error_handler=ignore option in newer documentation (#1131)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89e44ee515ce6a4b044",
    "number": 1130,
    "body": null,
    "head_branch": "PYTHON-3470",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3470 Build Python 3.11 Wheels for MacOS (#1130)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89f44ee515ce6a4b045",
    "number": 1129,
    "body": null,
    "head_branch": "PYTHON-3543",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3543 Broken Links for ICU Project (#1129)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc89f44ee515ce6a4b046",
    "number": 1128,
    "body": null,
    "head_branch": "PYTHON-3542",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3542 Test Failure - test_iteration on PyPy 3.8+ (#1128)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a044ee515ce6a4b047",
    "number": 1127,
    "body": "See https://jira.mongodb.org/browse/PYTHON-3541",
    "head_branch": "PYTHON-3541",
    "is_a_fork": true,
    "comments": [
      "Patch here: https://spruce.mongodb.com/version/63a0dd507742ae3a2a095879/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC"
    ],
    "commit_messages": [
      "PYTHON-3541 Use bash instead of sh in perf testing (#1127)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a144ee515ce6a4b048",
    "number": 1126,
    "body": "Hello, I think it'd make more sense that by default, if no filter is passed, it simply [\"Count the number of documents in [the] collection\"](https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/collection.py#L1764)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi @DeveloperAnonymous, thanks for opening this PR. After looking into this I found that we intentionally designed the filter to be required for count_documents so I'm going to close this as \"works as designed\". The spec says:\r\n\r\n> Applications must be required to pass a value for filter, but an empty document is supported\r\n\r\nhttps://github.com/mongodb/specifications/blob/master/source/crud/crud.rst#countdocuments\r\n\r\nYour application will probably be better off using [estimated_document_count](https://pymongo.readthedocs.io/en/stable/api/pymongo/collection.html?#pymongo.collection.Collection.estimated_document_count) instead because it has much better performance. It's only an \"estimate\" in some rare cases after an unexpected shutdown and only for a brief time which you can read more about here: https://www.mongodb.com/docs/manual/reference/command/count/#accuracy-after-unexpected-shutdown \r\n\r\nWe may update the documentation to make this rationale more clear as part of https://jira.mongodb.org/browse/DRIVERS-2518.",
      "Hey @ShaneHarvey, sounds good and thanks for the details about how estimated_document_count works!\r\n\r\nHave a great day 🙂"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a244ee515ce6a4b049",
    "number": 1125,
    "body": null,
    "head_branch": "PYTHON-3351",
    "is_a_fork": true,
    "comments": [
      "I think we need to update `process_error` in `unified_format.py` as well to verify we are handling `errorResponse`."
    ],
    "commit_messages": [
      "PYTHON-3351 Provide access to raw result document when the server returns an error for a command (#1125)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a344ee515ce6a4b04a",
    "number": 1124,
    "body": null,
    "head_branch": "PYTHON-3492",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3492 Test mongocryptd is not spawned when shared library is loaded (#1124)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a444ee515ce6a4b04b",
    "number": 1123,
    "body": "My interpreter is marks my code after method *inser* as unreachable but it is not truth cause a problem with returing value",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hi,\r\nThank you for raising this issue, but as mentioned in our [README](https://github.com/mongodb/mongo-python-driver#bugs--feature-requests), the correct venue for raising bug reports is our [Jira](https://jira.mongodb.org/projects/PYTHON/). Furthermore, I believe the bug that you describe is the expected behavior. As you note, the two functions that PyMongo provides are called `insert_one` and `insert_many`. There is no `insert` function, hence why you are getting unreachable code because that is a type error. Please create an issue in our Jira if you still believe that there is a bug. ",
      "> \r\n\r\nThanks for the quick response, I was indeed mistaken, the thing is that the project uses a version of pymongo 3.11.3. And in my Python environment was the latest version >4, which is why the compiler could not recognize the method and made the code below unreachable :D\r\nThanks"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a544ee515ce6a4b04c",
    "number": 1122,
    "body": null,
    "head_branch": "PYTHON-3531",
    "is_a_fork": true,
    "comments": [
      "Merging since this affects CI only."
    ],
    "commit_messages": [
      "PYTHON-3531 Pre-commit failure due to flake8 repository move (#1122)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a544ee515ce6a4b04d",
    "number": 1121,
    "body": null,
    "head_branch": "PYTHON-3524",
    "is_a_fork": true,
    "comments": [
      "Did you see this question:\r\n\r\n> Should we update the docs and test sort+hint as well?",
      "> Did you see this question:\r\n\r\nNo, this UX leaves a lot to be desired...",
      "I updated the docs for `create_index` and `sort`.  The `hint` docs refer back to `create_index` for allowed values."
    ],
    "commit_messages": [
      "PYTHON-3524 Support passing list of strings to create_index (#1121)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a644ee515ce6a4b04e",
    "number": 1120,
    "body": null,
    "head_branch": "PYTHON-3529",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3529 Improve reliability of test_list_databases (#1120)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a744ee515ce6a4b04f",
    "number": 1119,
    "body": null,
    "head_branch": "PYTHON-3526",
    "is_a_fork": true,
    "comments": [
      "Originally we discussed adding `test/mockupdb/__init__.py` to fix this issue but we can't do that otherwise unittest will start running these tests by default. Instead I decided to just ignore the mypy error. "
    ],
    "commit_messages": [
      "PYTHON-3526 Fix mockup tests (#1119)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a844ee515ce6a4b050",
    "number": 1118,
    "body": "PYTHON-3528 Skip TestCreateEntities when no server is running.\r\nPYTHON-3527 Skip test_typeddict_find_notrequired when no server is running.\r\n\r\nAlso fixes the 150s TestCreateEntities issue. ",
    "head_branch": "PYTHON-3528",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3527 + PYTHON-3528 Fix no-server tests (#1118)\n\nFix TestCreateEntities when no server is running.\r\nFix no-server test_typeddict_find_notrequired."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8a944ee515ce6a4b051",
    "number": 1117,
    "body": null,
    "head_branch": "PYTHON-3388",
    "is_a_fork": true,
    "comments": [
      "Mypy failure:\r\n\r\n```python\r\npymongo/mongo_client.py:1416: error: Incompatible types in assignment\r\n(expression has type \"PyMongoError\", variable has type\r\n\"Optional[WriteConcernError]\")  [assignment]\r\n                            self._indefinite_error = exc\r\n```",
      "```\r\n/opt/hostedtoolcache/Python/3.11.0/x64/bin/pre-commit run --show-diff-on-failure --color=always --all-files --hook-stage=manual\r\n[52](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:54)\r\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\r\n[53](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:55)\r\n[INFO] Initializing environment for https://github.com/psf/black.\r\n[54](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:56)\r\n[INFO] Initializing environment for https://github.com/PyCQA/isort.\r\n[55](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:57)\r\n[INFO] Initializing environment for https://gitlab.com/pycqa/flake8.\r\n[56](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:58)\r\nAn unexpected error has occurred: CalledProcessError: command: ('/usr/bin/git', 'fetch', 'origin', '--tags')\r\n[57](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:59)\r\nreturn code: 128\r\n[58](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:60)\r\nexpected return code: 0\r\n[59](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:61)\r\nstdout: (none)\r\n[60](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:62)\r\nstderr:\r\n[61](https://github.com/mongodb/mongo-python-driver/actions/runs/3518982269/jobs/5898456163#step:4:63)\r\n    fatal: could not read Username for 'https://gitlab.com/': No such device or address\r\n```\r\nI do not think this pre-commit failure is related.",
      "The pre-commit failure was addressed in #1122 "
    ],
    "commit_messages": [
      "PYTHON-3388 Propagate Original Error for Write Errors Labeled NoWritesPerformed (#1117)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8aa44ee515ce6a4b052",
    "number": 1116,
    "body": "Tests for https://github.com/mongodb/specifications/pull/1346",
    "head_branch": "PYTHON-3500-2",
    "is_a_fork": true,
    "comments": [
      "Merging since there was nothing to review and the tests passed on serverless."
    ],
    "commit_messages": [
      "PYTHON-3500 Resync retryable tests to fix serverless failures (#1116)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ab44ee515ce6a4b053",
    "number": 1115,
    "body": null,
    "head_branch": "PYTHON-2818-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2818 Add documentation and changelog (#1115)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ab44ee515ce6a4b054",
    "number": 1114,
    "body": "Benefit, EventListener now is more well typed and encapsulated. I also added inheritance of BaseListener so that the wait_for_event/matching/etc..  apis are available as well.\r\n\r\nI've also migrated all usages of the old api.",
    "head_branch": "PYTHON-3516",
    "is_a_fork": true,
    "comments": [
      "Note: almost all of these changes were done with PyCharm's find/replace."
    ],
    "commit_messages": [
      "PYTHON-3516 Improve test EventListener api (#1114)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ac44ee515ce6a4b055",
    "number": 1113,
    "body": null,
    "head_branch": "PYTHON-3517",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3517 Add documentation for on-demand KMS providers (#1113)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ad44ee515ce6a4b056",
    "number": 1112,
    "body": "Testing for https://github.com/mongodb/specifications/pull/1336",
    "head_branch": "PYTHON-3500",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3500 Improve test coverage for retryable handshake errors (#1112)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ae44ee515ce6a4b057",
    "number": 1111,
    "body": "See the rendered view here: https://pymongo--1111.org.readthedocs.build/en/1111/examples/timeouts.html",
    "head_branch": "PYTHON-3295",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3295 Add CSOT docs page (#1111)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8af44ee515ce6a4b058",
    "number": 1110,
    "body": null,
    "head_branch": "PYTHON-3513",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3513 Correctly pin to mypy==0.990 (#1110)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b044ee515ce6a4b059",
    "number": 1109,
    "body": "Benchmark results for iterating a randomly generated file with readline() before this change:\r\n```\r\nclient.server_info()['version']='5.0.13' pymongo.__version__='4.4.0.dev0'\r\nobject_size_mb= 1, chunk_size_kb= 128, 0.030s\r\nobject_size_mb= 1, chunk_size_kb= 256, 0.036s\r\nobject_size_mb= 1, chunk_size_kb= 512, 0.056s\r\nobject_size_mb= 1, chunk_size_kb=1024, 0.122s\r\nobject_size_mb= 1, chunk_size_kb=8192, 0.116s\r\nobject_size_mb= 5, chunk_size_kb= 128, 0.179s\r\nobject_size_mb= 5, chunk_size_kb= 256, 0.185s\r\nobject_size_mb= 5, chunk_size_kb= 512, 0.338s\r\nobject_size_mb= 5, chunk_size_kb=1024, 0.652s\r\nobject_size_mb= 5, chunk_size_kb=8192, 8.401s\r\nobject_size_mb=20, chunk_size_kb= 128, 0.869s\r\nobject_size_mb=20, chunk_size_kb= 256, 1.131s\r\nobject_size_mb=20, chunk_size_kb= 512, 1.694s\r\nobject_size_mb=20, chunk_size_kb=1024, 3.029s\r\nobject_size_mb=20, chunk_size_kb=8192, 51.000s\r\n(cut off after 20MB because the 80MB benchmark took too long)\r\n```\r\nAnd after:\r\n```\r\nclient.server_info()['version']='5.0.13' pymongo.__version__='4.4.0.dev0'\r\nobject_size_mb= 1, chunk_size_kb= 128, 0.012s\r\nobject_size_mb= 1, chunk_size_kb= 256, 0.020s\r\nobject_size_mb= 1, chunk_size_kb= 512, 0.012s\r\nobject_size_mb= 1, chunk_size_kb=1024, 0.012s\r\nobject_size_mb= 1, chunk_size_kb=8192, 0.014s\r\nobject_size_mb= 5, chunk_size_kb= 128, 0.070s\r\nobject_size_mb= 5, chunk_size_kb= 256, 0.080s\r\nobject_size_mb= 5, chunk_size_kb= 512, 0.075s\r\nobject_size_mb= 5, chunk_size_kb=1024, 0.050s\r\nobject_size_mb= 5, chunk_size_kb=8192, 0.043s\r\nobject_size_mb=20, chunk_size_kb= 128, 0.191s\r\nobject_size_mb=20, chunk_size_kb= 256, 0.191s\r\nobject_size_mb=20, chunk_size_kb= 512, 0.189s\r\nobject_size_mb=20, chunk_size_kb=1024, 0.189s\r\nobject_size_mb=20, chunk_size_kb=8192, 0.150s\r\nobject_size_mb=80, chunk_size_kb= 128, 0.625s\r\nobject_size_mb=80, chunk_size_kb= 256, 0.572s\r\nobject_size_mb=80, chunk_size_kb= 512, 0.638s\r\nobject_size_mb=80, chunk_size_kb=1024, 0.584s\r\nobject_size_mb=80, chunk_size_kb=8192, 0.610s\r\n```\r\n\r\nThis is a huge perf gain anywhere from 2x to 100x (and more) depending on the file size and chunk_size.",
    "head_branch": "PYTHON-3508",
    "is_a_fork": true,
    "comments": [
      "Note that my first approach was to use a memoryview() for the buffered chunk (`self.__buffer`) but this was cumbersome for a few reasons:\r\n\r\n1. The readchunk() method needs to return a bytes, not a memoryview, so we would need to pay the cost of copying to bytes anyway.\r\n2. The readline() method uses bytes.index() to find the next newline which memoryview does not support so it's handy to keep the bytes around."
    ],
    "commit_messages": [
      "PYTHON-3508 Improve the performance of GridOut.readline and GridOut.read (#1109)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b044ee515ce6a4b05a",
    "number": 1108,
    "body": null,
    "head_branch": "PYTHON-3502",
    "is_a_fork": true,
    "comments": [
      "This is worth mentioning in the changelog too. ",
      "> This is worth mentioning in the changelog too.\r\n\r\nDone"
    ],
    "commit_messages": [
      "PYTHON-3502 GridFSBucket.download_to_stream slow (#1108)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b144ee515ce6a4b05b",
    "number": 1107,
    "body": null,
    "head_branch": "PYTHON-3501",
    "is_a_fork": true,
    "comments": [
      "We updated the spec to clarify that changes to the environment variables should be isolated in case the tests are run in parallel.",
      "> We updated the spec to clarify that changes to the environment variables should be isolated in case the tests are run in parallel.\r\n\r\nThat's fine but I just want to confirm that mock.patch doesn't actually add thread safety to these tests. ",
      "> That's fine but I just want to confirm that mock.patch doesn't actually add thread safety to these tests.\r\n\r\nConfirmed.  Based on the spec that means we should use unit tests instead, which means those tests will need to go in `pymongo_auth_aws`.",
      "I'm confused, I don't think we need to do anything regarding the parallel test issue because we don't run the python tests in parallel. What kind of change are you thinking?",
      "> I'm confused, I don't think we need to do anything regarding the parallel test issue because we don't run the python tests in parallel. \r\n\r\nYeah that's fair, I'll update the spec a bit to clarify."
    ],
    "commit_messages": [
      "PYTHON-3501 Ensure Auth Environment Variables are Always Dynamic (#1107)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b244ee515ce6a4b05c",
    "number": 1106,
    "body": null,
    "head_branch": "PYTHON-3493",
    "is_a_fork": true,
    "comments": [
      "```\r\n  File \"/home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/operations.py\", line 22, in <module>\r\n    from pymongo.typings import RawBSONDocument, _CollationIn, _DocumentType, _Pipeline\r\nImportError: cannot import name 'RawBSONDocument' from 'pymongo.typings' (/home/runner/work/mongo-python-driver/mongo-python-driver/pymongo/typings.py)\r\n```\r\n\r\nThat import is only during type checking, you'll have to import from the `raw_bson` module directly.",
      "It looks like `typing_extensions` is still not installed in EG:\r\n\r\n```\r\n[2022/11/03 13:33:05.363] ERROR: name 'Movie' is not defined (NameError)\r\n [2022/11/03 13:33:05.363] Traceback (most recent call last):\r\n[2022/11/03 13:33:05.363]   File \"/data/mci/ad80d9537e77ee1c525bef8a857fbff0/src/test/test_mypy.py\", line 121, in test_bulk_write\r\n[2022/11/03 13:33:05.363]     requests: List[InsertOne[Movie]] = [InsertOne(Movie(name=\"American Graffiti\", year=1973))]\r\n[2022/11/03 13:33:05.363] NameError: name 'Movie' is not defined\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3493 Bulk Write InsertOne Should Be Parameter Of Collection Type (#1106)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b344ee515ce6a4b05d",
    "number": 1105,
    "body": "Companion to https://github.com/mongodb/libmongocrypt/pull/484\r\n\r\nAlso fixes a bug in [PYTHON-3367](https://jira.mongodb.org/browse/PYTHON-3367) where we we were running the test file but not actually running the GCP tests.",
    "head_branch": "PYTHON-3396",
    "is_a_fork": true,
    "comments": [
      "Apparently the `|-` was needed, it is the [chomping indicator](https://yaml.org/spec/1.2.2/#8112-block-chomping-indicator): \"Stripping is specified by the “-” chomping indicator. In this case, the final line break and any trailing empty lines are excluded from the scalar’s content.\""
    ],
    "commit_messages": [
      "PYTHON-3396 Support the Azure VM-assigned Managed Identity for Automatic KMS Credentials (#1105)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b444ee515ce6a4b05e",
    "number": 1104,
    "body": null,
    "head_branch": "PYTHON-3494",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3494 Improve Documentation Surrounding Type-Checking \"_id\" (#1104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b544ee515ce6a4b05f",
    "number": 1103,
    "body": "(cherry picked from commit b6982e85f5264daf5ba766a8d1678b1f966d0d2a)",
    "head_branch": "PYTHON-3498-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3498 Error installing virtual environment on zseries hosts (#1101) (#1103)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b644ee515ce6a4b060",
    "number": 1102,
    "body": "Also handles docs warnings.",
    "head_branch": "PYTHON-3499",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3499 Changelog for 3.13 (#1102)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc8b644ee515ce6a4b061",
    "number": 1101,
    "body": null,
    "head_branch": "PYTHON-3498",
    "is_a_fork": true,
    "comments": [
      "All passing now.  I'll forward-port this cleanup to master as well."
    ],
    "commit_messages": [
      "PYTHON-3498 Error installing virtual environment on zseries hosts (#1101)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b744ee515ce6a4b062",
    "number": 1100,
    "body": "(cherry picked from commit a624197)",
    "head_branch": "PYTHON-3260-v3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3260 Improve test_transaction_starts_with_batched_write and test_continuous_network_errors (#945) (#1100)\n\nCo-authored-by: Shane Harvey <shnhrv@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b844ee515ce6a4b063",
    "number": 1099,
    "body": null,
    "head_branch": "PYTHON-3497",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3497 Skip MongoDB <= 3.4 TLS tests on Python 3.11 (#1099)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8b944ee515ce6a4b064",
    "number": 1098,
    "body": "(cherry picked from commit e3ff041b474835f007faaead470bb12dcc9dc22c)",
    "head_branch": "PYTHON-3433-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3433 [v3.13] Failure: test.test_encryption.TestSpec.test_legacy_maxWireVersion_operation_fails_with_maxWireVersion___8 (#1052) (#1098)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ba44ee515ce6a4b065",
    "number": 1097,
    "body": null,
    "head_branch": "PYTHON-2945",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8bb44ee515ce6a4b066",
    "number": 1096,
    "body": null,
    "head_branch": "PYTHON-2988",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2988 Deprecate MongoClient max_bson_size/max_message_size/max_write_batch_size (#1096)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc8bb44ee515ce6a4b067",
    "number": 1095,
    "body": null,
    "head_branch": "PYTHON-2993",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2993 Deprecate MongoClient read only config option helpers and add client.options (#1095)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc8bc44ee515ce6a4b068",
    "number": 1094,
    "body": null,
    "head_branch": "PYTHON-3488",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3488 Handle More Failures from Running Latest Server on Unsupported Arch (#1094)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8bd44ee515ce6a4b069",
    "number": 1093,
    "body": null,
    "head_branch": "PYTHON-3367-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3367 Use zip url for install (#1093)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8be44ee515ce6a4b06a",
    "number": 1092,
    "body": "(cherry picked from commit 24a343b830e7382576691712873893902159ee4f)",
    "head_branch": "PYTHON-3468-2",
    "is_a_fork": true,
    "comments": [
      "```\r\n [2022/10/24 17:26:56.079] Downloading crypt_shared package from http://downloads.10gen.com/linux/mongo_crypt_shared_v1-linux-x86_64-enterprise-amzn64-latest.tgz\r\n [2022/10/24 17:26:56.135] gzip: stdin: not in gzip format\r\n [2022/10/24 17:26:56.135] tar: Child returned status 1\r\n```\r\n\r\nHmm, could you ask about this in driver-devs?",
      "> Hmm, could you ask about this in driver-devs?\r\n\r\nI would think this is expected, since 6.0 isn't supported on amazon linux.  I updated to use Ubuntu 18 as we do in master."
    ],
    "commit_messages": [
      "PYTHON-3468 [v3.13] Test failures in test_srv_polling.TestSrvPolling (#1073) (#1092)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc8bf44ee515ce6a4b06b",
    "number": 1091,
    "body": null,
    "head_branch": "PYTHON-3471-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3471 Test Support for Gevent in Python 3.11 (#1091)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c044ee515ce6a4b06c",
    "number": 1090,
    "body": "(cherry picked from commit ff1efd1ab28c56e70a101768bd285055b5e4fd9a)\r\n\r\nAddresses build failure ticket https://jira.mongodb.org/browse/PYTHON-3482",
    "head_branch": "PYTHON-2986-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2986 Update serverless testing for load balancer fronting single proxy (#997) (#1090)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c144ee515ce6a4b06d",
    "number": 1089,
    "body": null,
    "head_branch": "PYTHON-3481",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3481 Cryptography Requires Rust (#1089)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c244ee515ce6a4b06e",
    "number": 1088,
    "body": null,
    "head_branch": "cleanup-encryption-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Mention crypt_shared in encryption examples pages and fix formatting (#1088)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c344ee515ce6a4b06f",
    "number": 1087,
    "body": null,
    "head_branch": "PYTHON-3410",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3410 Resync CSOT spec tests to be less flaky (#1087)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c344ee515ce6a4b070",
    "number": 1086,
    "body": null,
    "head_branch": "PYTHON-3480",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3480 Multiple Build Failures in 3.13 Due to Running Newer Servers on Amazon Linux (#1086)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c444ee515ce6a4b071",
    "number": 1085,
    "body": null,
    "head_branch": "PYTHON-2778",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2778 Test OCSP with Python 3.10 (#1085)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c544ee515ce6a4b072",
    "number": 1084,
    "body": "(cherry picked from commit df77653ccc6b1bbfa18f8fca41cd4a1bfecc25c6)",
    "head_branch": "PYTHON-3475",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3475 Add Python 3.11 Support to PyMongo 3 (#1084)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c644ee515ce6a4b073",
    "number": 1083,
    "body": null,
    "head_branch": "PYTHON-3478",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3478 Improve test_change_stream_can_resume_after_timeouts (#1083)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c744ee515ce6a4b074",
    "number": 1082,
    "body": null,
    "head_branch": "PYTHON-3477",
    "is_a_fork": true,
    "comments": [
      "The above approval was from me, I was signed into the bot account."
    ],
    "commit_messages": [
      "PYTHON-3477 pypy -> pypy2.7 (#1082)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c844ee515ce6a4b075",
    "number": 1081,
    "body": null,
    "head_branch": "PYTHON-3454",
    "is_a_fork": true,
    "comments": [
      "```\r\n(python3.8) ➜  mongo-python-driver git:(PYTHON-3454) mypy --install-types --non-interactive test/test_mypy.py\r\nSuccess: no issues found in 1 source file\r\n```\r\nVerified to work in Python 3.8+.",
      "There's also some unused imports causing the lint to fail."
    ],
    "commit_messages": [
      "PYTHON-3454 Specifying a generic type for a collection does not correctly enforce type safety when inserting data (#1081)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c844ee515ce6a4b076",
    "number": 1080,
    "body": null,
    "head_branch": "PYTHON-3474-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3474 Improve documentation about credential handling (#1080)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8c944ee515ce6a4b077",
    "number": 1079,
    "body": null,
    "head_branch": "PYTHON-1889",
    "is_a_fork": true,
    "comments": [
      "> could you update the PR title/commit message to describe the change itself before merging?\r\n\r\nUpdated.  Note: the commit message was already set to the PR title during squash and merge"
    ],
    "commit_messages": [
      "PYTHON-1889 Single-source the version tuple/string (#1079)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ca44ee515ce6a4b078",
    "number": 1078,
    "body": null,
    "head_branch": "PYTHON-3471",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8cb44ee515ce6a4b079",
    "number": 1077,
    "body": null,
    "head_branch": "PYTHON-3474",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3474 Document changes to AWS Credential Handling (#1077)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8cc44ee515ce6a4b07a",
    "number": 1076,
    "body": null,
    "head_branch": "PYTHON-3453-2",
    "is_a_fork": true,
    "comments": [
      "> We have to use single quotes here to avoid shell expansion.\r\n\r\nDone"
    ],
    "commit_messages": [
      "PYTHON-3453 Fix handling of enterprise auth vars (#1076)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8cd44ee515ce6a4b07b",
    "number": 1075,
    "body": null,
    "head_branch": "PYTHON-3445-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3445 Fix documentation for with_options (#1075)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8cd44ee515ce6a4b07c",
    "number": 1074,
    "body": null,
    "head_branch": "PYTHON-3445-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3445 Improve documentation for with_options (#1074)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ce44ee515ce6a4b07d",
    "number": 1073,
    "body": null,
    "head_branch": "PYTHON-3468",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3468 Test failures in test_srv_polling.TestSrvPolling (#1073)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8cf44ee515ce6a4b07e",
    "number": 1072,
    "body": null,
    "head_branch": "PYTHON-3453",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3453 Test failure - Enterprise Auth Windows 64 Python 3.7 (#1072)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d044ee515ce6a4b07f",
    "number": 1071,
    "body": null,
    "head_branch": "PYTHON-3452",
    "is_a_fork": true,
    "comments": [
      "MMAP tests are passing now."
    ],
    "commit_messages": [
      "PYTHON-3452 Skip SDAM test that relies on retryWrites on MMAPv1 (#1071)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d144ee515ce6a4b080",
    "number": 1070,
    "body": "mmmm",
    "head_branch": "v3.13",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d244ee515ce6a4b081",
    "number": 1069,
    "body": null,
    "head_branch": "PYTHON-3347",
    "is_a_fork": true,
    "comments": [
      "Assuming the 3.11 tests pass let's add the 3.11 trove classifier too.",
      "Failures that were pre-existing in recent [build](https://spruce.mongodb.com/version/mongo_python_driver_774154e934509dd0c7d854f6491304a295845dd6/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC):\r\n\r\n- test_dns_record_lookup_empty (test_srv_polling.TestSrvPolling)\r\n- test_dns_failures (test_srv_polling.TestSrvPolling)\r\n- test_srv_polling.TestSrvPolling.test_dns_failures\r\n- test_srv_polling.TestSrvPolling.test_dns_record_lookup_empty\r\n-   `[2022/10/06 21:02:41.676] Running command 'shell.exec' in \"run enterprise auth tests\" (step 2 of 2).\r\n [2022/10/06 21:09:54.828] Command ''shell.exec' in \"run enterprise auth tests\"' failed: shell script encountered problem: exit code 1.` [src](https://spruce.mongodb.com/task/mongo_python_driver_tests_windows_enterprise_auth__platform~windows_64_vsMulti_small_auth~auth_python_version_windows~3.10_test_enterprise_auth_774154e934509dd0c7d854f6491304a295845dd6_22_10_05_21_34_59/logs?execution=0&sortBy=STATUS&sortDir=ASC)\r\n\r\nNew failures:\r\n\r\n- test_corpus (test.test_encryption.TestCorpus.test_corpus) [src](https://spruce.mongodb.com/task/mongo_python_driver_tests_windows_encryption__platform~windows_64_vsMulti_small_auth_ssl~auth_ssl_python_version_windows~3.11_encryption~encryption_crypt_shared_test_6.0_standalone_patch_774154e934509dd0c7d854f6491304a295845dd6_633f2e05e3c3317f31324fbd_22_10_06_19_35_34/logs?execution=0&sortBy=STATUS&sortDir=ASC)\r\n- `ModuleNotFoundError: No module named 'gevent'` [src](https://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_green_framework_ubuntu18__platform~ubuntu_18.04_auth_ssl~auth_ssl_python_version~3.11_green_framework~gevent_test_3.6_replica_set_patch_774154e934509dd0c7d854f6491304a295845dd6_633f2e05e3c3317f31324fbd_22_10_06_19_35_34/logs?execution=0) - due to https://github.com/gevent/gevent/issues/1867\r\n\r\n\r\n",
      "```\r\n [2022/10/06 21:40:11.633] ERROR: test_corpus (test.test_encryption.TestCorpus.test_corpus)\r\n [2022/10/06 21:40:11.633] ----------------------------------------------------------------------\r\n [2022/10/06 21:40:11.633] Traceback (most recent call last):\r\n [2022/10/06 21:40:11.633]   File \"C:\\data\\mci\\ccc3b9397cdce05218603e98ad57b081\\src\\pymongo\\encryption.py\", line 76, in _wrap_encryption_errors\r\n [2022/10/06 21:40:11.633]     yield\r\n [2022/10/06 21:40:11.633]   File \"C:\\data\\mci\\ccc3b9397cdce05218603e98ad57b081\\src\\pymongo\\encryption.py\", line 364, in encrypt\r\n [2022/10/06 21:40:11.633]     encrypted_cmd = self._auto_encrypter.encrypt(database, encoded_cmd)\r\n [2022/10/06 21:40:11.633]                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n [2022/10/06 21:40:11.633]   File \"Z:\\data\\mci\\ccc3b9397cdce05218603e98ad57b081\\src\\venv-encryption\\Lib\\site-packages\\pymongocrypt\\auto_encrypter.py\", line 44, in encrypt\r\n [2022/10/06 21:40:11.633]     return run_state_machine(ctx, self.callback)\r\n [2022/10/06 21:40:11.633]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n [2022/10/06 21:40:11.633]   File \"Z:\\data\\mci\\ccc3b9397cdce05218603e98ad57b081\\src\\venv-encryption\\Lib\\site-packages\\pymongocrypt\\state_machine.py\", line 150, in run_state_machine\r\n [2022/10/06 21:40:11.633]     callback.kms_request(kms_ctx)\r\n [2022/10/06 21:40:11.633]   File \"C:\\data\\mci\\ccc3b9397cdce05218603e98ad57b081\\src\\pymongo\\encryption.py\", line 142, in kms_request\r\n [2022/10/06 21:40:11.633]     data = conn.recv(kms_context.bytes_needed)\r\n [2022/10/06 21:40:11.633]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n [2022/10/06 21:40:11.633]   File \"C:\\python\\Python311\\Lib\\ssl.py\", line 1263, in recv\r\n [2022/10/06 21:40:11.633]     return self.read(buflen)\r\n [2022/10/06 21:40:11.633]            ^^^^^^^^^^^^^^^^^\r\n [2022/10/06 21:40:11.633]   File \"C:\\python\\Python311\\Lib\\ssl.py\", line 1136, in read\r\n [2022/10/06 21:40:11.633]     return self._sslobj.read(len)\r\n [2022/10/06 21:40:11.633]            ^^^^^^^^^^^^^^^^^^^^^^\r\n [2022/10/06 21:40:11.633] TimeoutError: The read operation timed out\r\n```\r\n\r\nInteresting, is this a fluke or does it happen consistently?",
      "I kicked the task and it [passed](https://spruce.mongodb.com/task/mongo_python_driver_tests_windows_encryption__platform~windows_64_vsMulti_small_auth_ssl~auth_ssl_python_version_windows~3.11_encryption~encryption_crypt_shared_test_6.0_standalone_patch_774154e934509dd0c7d854f6491304a295845dd6_633f2e05e3c3317f31324fbd_22_10_06_19_35_34/logs?execution=1)",
      "```\r\n [2022/10/11 16:54:43.381] FAIL [0.001s]: test_must_connect (test_client_context.TestClientContext.test_must_connect)\r\n [2022/10/11 16:54:43.381] ----------------------------------------------------------------------\r\n [2022/10/11 16:54:43.381] Traceback (most recent call last):\r\n [2022/10/11 16:54:43.381]   File \"/data/mci/6d8fe5eaf124547d0611aa2dab642ffd/src/test/test_client_context.py\", line 28, in test_must_connect\r\n [2022/10/11 16:54:43.381]     self.assertTrue(\r\n [2022/10/11 16:54:43.381] AssertionError: False is not true : client context must be connected when PYMONGO_MUST_CONNECT is set. Failed attempts:\r\n [2022/10/11 16:54:43.381] failed to connect client MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, serverselectiontimeoutms=5000): 'bytes' object has no attribute 'is_absolute', Timeout: 5.0s, Topology Description: <TopologyDescription id: 63459f235735d3dee7ba4219, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AttributeError(\"'bytes' object has no attribute 'is_absolute'\")>]>\r\n [2022/10/11 16:54:43.381] failed to connect client MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, serverselectiontimeoutms=5000, tls=True, tlscertificatekeyfile='/data/mci/6d8fe5eaf124547d0611aa2dab642ffd/src/test/certificates/client.pem', tlscafile='/data/mci/6d8fe5eaf124547d0611aa2dab642ffd/src/test/certificates/ca.pem'): 'bytes' object has no attribute 'is_absolute', Timeout: 5.0s, Topology Description: <TopologyDescription id: 63459f285735d3dee7ba421a, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AttributeError(\"'bytes' object has no attribute 'is_absolute'\")>]>\r\n```\r\n\r\nThis error was fixed by PYTHON-3451.",
      "> Could we merge this PR and push out the 3.11 gevent testing fix and the 3.11 macos wheels to a new ticket?\r\n\r\nYep, sounds good",
      "I opened https://jira.mongodb.org/browse/PYTHON-3471 and https://jira.mongodb.org/browse/PYTHON-3470"
    ],
    "commit_messages": [
      "PYTHON-3347 Test against Python 3.11 prerelease (#1069)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d344ee515ce6a4b082",
    "number": 1068,
    "body": null,
    "head_branch": "PYTHON-3445",
    "is_a_fork": true,
    "comments": [
      "This PR also addresses the link failures in [PYTHON-3455](https://jira.mongodb.org/browse/PYTHON-3455)"
    ],
    "commit_messages": [
      "PYTHON-3445 Improve documentation for custom readPreference tags (#1068)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d444ee515ce6a4b083",
    "number": 1067,
    "body": "This PR:\r\n- Implements [PYTHON-2970](https://jira.mongodb.org/browse/PYTHON-2970) by reapplying the original change from #845. \r\n- Implements [PYTHON-3400](https://jira.mongodb.org/browse/PYTHON-3400) to only use the new logic on MongoDB 6.0+",
    "head_branch": "PYTHON-3400",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3400 Only use new electionId/setVersion logic on 6.0+"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d544ee515ce6a4b084",
    "number": 1066,
    "body": null,
    "head_branch": "PYTHON-3451",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3451 Stop passing bytes to getaddrinfo to fix eventlet support (#1066)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d644ee515ce6a4b085",
    "number": 1065,
    "body": null,
    "head_branch": "PYTHON-3447",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3447 Add back empty tls extra to avoid pip warnings (#1065)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d744ee515ce6a4b086",
    "number": 1064,
    "body": "Requires https://github.com/mongodb/libmongocrypt/pull/467",
    "head_branch": "PYTHON-3367",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3367 Add support for GCP attached service accounts when using GCP KMS (#1064)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d744ee515ce6a4b087",
    "number": 1063,
    "body": null,
    "head_branch": "PYTHON-3444",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3444 MyPy Errors With Version 0.981 (#1063)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d844ee515ce6a4b088",
    "number": 1062,
    "body": null,
    "head_branch": "PYTHON-3373",
    "is_a_fork": true,
    "comments": [
      "Can you merge from master to pick up https://github.com/mongodb/mongo-python-driver/pull/1063?"
    ],
    "commit_messages": [
      "PYTHON-3232 Improved change stream event visibility for C2C Replication (#1062)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8d944ee515ce6a4b089",
    "number": 1061,
    "body": null,
    "head_branch": "PYTHON-3411-313",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3411 [v3.13] Stop testing MongoDB 6.0 on Amazon1 2018 (#1061)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8da44ee515ce6a4b08a",
    "number": 1060,
    "body": "I was researching how to log queries.\r\nFound the `monitoring` module with great examples.\r\nAnd found out that the example of [ConnectionPoolLogger](https://pymongo.readthedocs.io/en/stable/api/pymongo/monitoring.html#:~:text=Connection%20monitoring%20and%20pooling%20events%20are%20also%20available.%20For%20example%3A) is [missing one new method](https://pymongo.readthedocs.io/en/stable/api/pymongo/monitoring.html#pymongo.monitoring.ConnectionPoolListener.pool_ready).\r\nAs a result of this - `NotImplementedError` on invocation of the method.\r\n\r\nSo, I made a single commit to fix it.",
    "head_branch": "docs/fix-monitoring-connection-pool-logger-example",
    "is_a_fork": true,
    "comments": [
      "Thanks @maxzhenzhera!"
    ],
    "commit_messages": [
      "PYTHON-3441 Add missing pool_ready method in monitoring docs example (#1060)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8db44ee515ce6a4b08b",
    "number": 1059,
    "body": null,
    "head_branch": "PYTHON-3344-313",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8dc44ee515ce6a4b08c",
    "number": 1058,
    "body": null,
    "head_branch": "PYTHON-3419-2",
    "is_a_fork": true,
    "comments": [
      "Current status:  `6.3 MiB` increment vs. `4.3 MiB` increment in `master` in the memory check script.",
      "Interesting, testing in Ubuntu gives me more debug information with memray:\r\n\r\n\r\n<img width=\"599\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2096628/190716033-9f059a4e-5d69-40ac-856f-e7edc83e4158.png\">\r\n",
      "There is 3MB allocated in that call.",
      "Yeah, the memoryview itself is consuming memory, even though I created it with a slice.  If I throw out the memoryview in the constructor we don't see the memory growth.",
      "Closing for now, we could not find a way to avoid the memory duplication."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8dc44ee515ce6a4b08d",
    "number": 1057,
    "body": null,
    "head_branch": "PYTHON-3420",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3420 Update ChangeStreamEvent type definition to include clusterTime (#1057)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8dd44ee515ce6a4b08e",
    "number": 1056,
    "body": "(cherry picked from commit 78256368c7073e5c71007a7dc4bb9f12db7746b7)",
    "head_branch": "PYTHON-33441-313",
    "is_a_fork": true,
    "comments": [
      "I replaced all instances of awslinux with rhel70.",
      "3.9 RHEL 7 is failing with:\r\n> [2022/09/15 19:36:29.275] /data/mci/d5c5b23b84cfbfec7e7cc2e347f9f691/src/.evergreen/run-tests.sh: line 199: /opt/python/3.9/bin/python3: No such file or directory\r\n",
      "Going to start from scratch"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8de44ee515ce6a4b08f",
    "number": 1055,
    "body": null,
    "head_branch": "PYTHON-3423",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3423 Make dnspython a required dependency (#1055)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8df44ee515ce6a4b090",
    "number": 1054,
    "body": null,
    "head_branch": "PYTHON-3413-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3413 Skip EC2 test on Windows (#1054)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e044ee515ce6a4b091",
    "number": 1053,
    "body": "(cherry picked from commit 1019c91bf67fbed09f6ce26df16614092676ab54)",
    "head_branch": "PYTHON-3424-313",
    "is_a_fork": true,
    "comments": [
      "```\r\npymongo-3.13.0.dev0-cp27-cp27m-macosx_10_14_intel.whl\r\npymongo-3.13.0.dev0-cp27-cp27m-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp27-cp27m-manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp27-cp27m-manylinux_2_5_i686.manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp27-cp27m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp27-cp27m-win32.whl\r\npymongo-3.13.0.dev0-cp27-cp27m-win_amd64.whl\r\npymongo-3.13.0.dev0-cp27-cp27mu-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp27-cp27mu-manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp27-cp27mu-manylinux_2_5_i686.manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp27-cp27mu-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp310-cp310-macosx_10_9_universal2.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp310-cp310-win32.whl\r\npymongo-3.13.0.dev0-cp310-cp310-win_amd64.whl\r\npymongo-3.13.0.dev0-cp35-cp35m-macosx_10_6_intel.whl\r\npymongo-3.13.0.dev0-cp35-cp35m-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp35-cp35m-manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp35-cp35m-manylinux_2_5_i686.manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp35-cp35m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp35-cp35m-win32.whl\r\npymongo-3.13.0.dev0-cp35-cp35m-win_amd64.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-macosx_10_6_intel.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux_2_5_i686.manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-win32.whl\r\npymongo-3.13.0.dev0-cp36-cp36m-win_amd64.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-macosx_10_6_intel.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-win32.whl\r\npymongo-3.13.0.dev0-cp37-cp37m-win_amd64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-macosx_10_9_x86_64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp38-cp38-win32.whl\r\npymongo-3.13.0.dev0-cp38-cp38-win_amd64.whl\r\npymongo-3.13.0.dev0-cp39-cp39-macosx_10_9_universal2.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\r\npymongo-3.13.0.dev0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl\r\npymongo-3.13.0.dev0-cp39-cp39-win32.whl\r\npymongo-3.13.0.dev0-cp39-cp39-win_amd64.whl\r\npymongo-3.13.0.dev0-py2.7-macosx-10.14-intel.egg\r\npymongo-3.13.0.dev0.tar.gz\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3424 PyMongo Universal Wheels Are Improperly Compiled (#1053)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc8e144ee515ce6a4b092",
    "number": 1052,
    "body": null,
    "head_branch": "PYTHON-3433",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3433 Failure: test.test_encryption.TestSpec.test_legacy_maxWireVersion_operation_fails_with_maxWireVersion___8 (#1052)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e244ee515ce6a4b093",
    "number": 1051,
    "body": null,
    "head_branch": "PYTHON-3424",
    "is_a_fork": true,
    "comments": [
      "The produced macos wheels are:\r\n\r\n```bash\r\n-rw-r--r--@  1 steve.silvester  staff  407947 Sep  8 10:22 pymongo-4.2.1.dev0-cp37-cp37m-macosx_10_6_intel.whl\r\n-rw-r--r--@  1 steve.silvester  staff  378895 Sep  8 10:23 pymongo-4.2.1.dev0-cp38-cp38-macosx_10_9_x86_64.whl\r\n-rw-r--r--@  1 steve.silvester  staff  410370 Sep  8 11:28 pymongo-4.2.1.dev0-cp39-cp39-macosx_10_9_universal2.whl\r\n-rw-r--r--@  1 steve.silvester  staff  410390 Sep  8 11:28 pymongo-4.2.1.dev0-cp310-cp310-macosx_10_9_universal2.whl\r\n```\r\n\r\nI verified that `pymongo-4.2.1.dev0-cp310-cp310-macosx_10_9_universal2.whl`  as installed with an arm64 version of Python has working c extensions."
    ],
    "commit_messages": [
      "PYTHON-3424 PyMongo Universal Wheels Are Improperly Compiled (#1051)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e244ee515ce6a4b094",
    "number": 1050,
    "body": null,
    "head_branch": "PYTHON-3406",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3406 Reinstate warning and docs that PyMongo is not fork safe (#1050)\n\nLog child process C-level stacks when fork tests deadlock.\r\nEncode hostname to bytes to avoid getaddrinfo importlib deadlock."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e344ee515ce6a4b095",
    "number": 1049,
    "body": null,
    "head_branch": "PYTHON-3411",
    "is_a_fork": true,
    "comments": [
      "Failures are related to https://jira.mongodb.org/browse/PYTHON-3406"
    ],
    "commit_messages": [
      "PYTHON-3411 Stop testing MongoDB 6.0 on Amazon1 2018 (#1049)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e444ee515ce6a4b096",
    "number": 1048,
    "body": null,
    "head_branch": "PYTHON-3413",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3413 Ensure AWS EC2 Credential Test is Running Properly (#1048)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e544ee515ce6a4b097",
    "number": 1047,
    "body": null,
    "head_branch": "PYTHON-2722",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey what do you think of the approach taken in [b1f9a41](https://github.com/mongodb/mongo-python-driver/pull/1047/commits/b1f9a4104ac0c8b0ea96bdcfa5b74ab5f111caa9) (not yet implemented in C).  It uses the existing `user_fields` in a way that we were not able to before (because we had to unpack arrays immediately)."
    ],
    "commit_messages": [
      "PYTHON-2722 Improve performance of find/aggregate_raw_batches (#1047)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e644ee515ce6a4b098",
    "number": 1046,
    "body": "https://jira.mongodb.org/browse/PYTHON-3409",
    "head_branch": "PYTHON-3409",
    "is_a_fork": true,
    "comments": [
      "Tested passed on windows here: https://spruce.mongodb.com/version/6303faafd6d80a775f64670a/tasks\r\n"
    ],
    "commit_messages": [
      "PYTHON-3409 Retry flakey CSOT tests twice (#1046)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e744ee515ce6a4b099",
    "number": 1045,
    "body": "This PR improves the tests by logging a traceback when a fork() test encounters a deadlock. For example, when I remove the lock sanitation code here is the new output:\r\n```\r\n$ python test/test_fork.py -v -k test_lock_client\r\ntest_lock_client (__main__.TestFork) ... Process ForkProcess-1:\r\nTraceback (most recent call last):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\r\n    self.run()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/multiprocessing/process.py\", line 99, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"test/test_fork.py\", line 49, in target\r\n    self.client.admin.command(\"ping\")\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/_csot.py\", line 105, in csot_wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/database.py\", line 799, in command\r\n    with self.__client._socket_for_reads(read_preference, session) as (\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1288, in _socket_for_reads\r\n    _ = self._get_topology()\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1197, in _get_topology\r\n    with self.__lock:\r\nKeyboardInterrupt\r\nFAIL\r\n\r\n======================================================================\r\nFAIL: test_lock_client (__main__.TestFork)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test/test_fork.py\", line 52, in test_lock_client\r\n    pass\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 119, in __exit__\r\n    next(self.gen)\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 1029, in fork\r\n    self.fail(f\"child timed out after {timeout}s (see traceback in logs): deadlock?\")\r\nAssertionError: child timed out after 60s (see traceback in logs): deadlock?\r\n```\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-3406",
    "head_branch": "bcwarner-PYTHON-3408",
    "is_a_fork": true,
    "comments": [
      "Still seeing this error:\r\n```\r\n [2022/08/22 20:48:24.345]   test_many_threaded (test_fork.TestFork) ... Process ForkProcess-3:\r\n [2022/08/22 20:48:24.345] Traceback (most recent call last):\r\n [2022/08/22 20:48:24.345]   File \"/opt/python/3.10/lib/python3.10/multiprocessing/process.py\", line 315, in _bootstrap\r\n [2022/08/22 20:48:24.345]     self.run()\r\n [2022/08/22 20:48:24.345]   File \"/opt/python/3.10/lib/python3.10/multiprocessing/process.py\", line 108, in run\r\n [2022/08/22 20:48:24.345]     self._target(*self._args, **self._kwargs)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/test/test_fork.py\", line 122, in target\r\n [2022/08/22 20:48:24.346]     action(c_)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/test/test_fork.py\", line 112, in action\r\n [2022/08/22 20:48:24.346]     client.admin.command(\"ping\")\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/_csot.py\", line 105, in csot_wrapper\r\n [2022/08/22 20:48:24.346]     return func(self, *args, **kwargs)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/database.py\", line 799, in command\r\n [2022/08/22 20:48:24.346]     with self.__client._socket_for_reads(read_preference, session) as (\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/mongo_client.py\", line 1289, in _socket_for_reads\r\n [2022/08/22 20:48:24.346]     server = self._select_server(read_preference, session)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/mongo_client.py\", line 1250, in _select_server\r\n [2022/08/22 20:48:24.346]     server = topology.select_server(server_selector)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/topology.py\", line 273, in select_server\r\n [2022/08/22 20:48:24.346]     server = self._select_server(selector, server_selection_timeout, address)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/topology.py\", line 262, in _select_server\r\n [2022/08/22 20:48:24.346]     servers = self.select_servers(selector, server_selection_timeout, address)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/topology.py\", line 224, in select_servers\r\n [2022/08/22 20:48:24.346]     server_descriptions = self._select_servers_loop(selector, server_timeout, address)\r\n [2022/08/22 20:48:24.346]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/pymongo/topology.py\", line 239, in _select_servers_loop\r\n [2022/08/22 20:48:24.346]     raise ServerSelectionTimeoutError(\r\n [2022/08/22 20:48:24.346] pymongo.errors.ServerSelectionTimeoutError: No servers found yet, Timeout: 30s, Topology Description: <TopologyDescription id: 6303eb7992b563382fdd9ea5, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None>]>\r\n [2022/08/22 20:48:24.355] Exception in thread Thread-244 (fork_behavior):\r\n [2022/08/22 20:48:24.355] Traceback (most recent call last):\r\n [2022/08/22 20:48:24.355]   File \"/opt/python/3.10/lib/python3.10/threading.py\", line 1009, in _bootstrap_inner\r\n [2022/08/22 20:48:24.356]     self.run()\r\n [2022/08/22 20:48:24.356]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/test/utils.py\", line 965, in run\r\n [2022/08/22 20:48:24.356]     super(ExceptionCatchingThread, self).run()\r\n [2022/08/22 20:48:24.356]   File \"/opt/python/3.10/lib/python3.10/threading.py\", line 946, in run\r\n [2022/08/22 20:48:24.356]     self._target(*self._args, **self._kwargs)\r\n [2022/08/22 20:48:24.356]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/test/test_fork.py\", line 125, in fork_behavior\r\n [2022/08/22 20:48:24.356]     with self.runner.fork(target=target) as proc:\r\n [2022/08/22 20:48:24.356]   File \"/opt/python/3.10/lib/python3.10/contextlib.py\", line 142, in __exit__\r\n [2022/08/22 20:48:24.357]     next(self.gen)\r\n [2022/08/22 20:48:24.357]   File \"/data/mci/975ea8b8727102a26bd7691f4ff1974f/src/test/__init__.py\", line 1030, in fork\r\n [2022/08/22 20:48:24.357]     self.assertEqual(proc.exitcode, 0)\r\n [2022/08/22 20:48:24.357]   File \"/opt/python/3.10/lib/python3.10/unittest/case.py\", line 845, in assertEqual\r\n [2022/08/22 20:48:24.357]     assertion_func(first, second, msg=msg)\r\n [2022/08/22 20:48:24.357]   File \"/opt/python/3.10/lib/python3.10/unittest/case.py\", line 838, in _baseAssertEqual\r\n [2022/08/22 20:48:24.380]     raise self.failureException(msg)\r\n [2022/08/22 20:48:24.380] AssertionError: 1 != 0\r\n ```\r\n https://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_ubuntu18_test_ssl__platform~ubuntu_18.04_auth_ssl~auth_ssl_python_version~3.10_coverage~coverage_test_4.2_sharded_cluster_patch_7f19186cacbcf3e2bcb42dba46997f5ff68c5378_6303e8bd850e613bd333d5c6_22_08_22_20_36_14/logs?execution=0&sortBy=STATUS&sortDir=ASC\r\n \r\n Will continue to investigate..."
    ],
    "commit_messages": [
      "PYTHON-3406 Log traceback when fork() test encounters a deadlock (#1045)\n\nCo-authored-by: Ben Warner <ben.warner@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e844ee515ce6a4b09a",
    "number": 1044,
    "body": null,
    "head_branch": "PYTHON-3407",
    "is_a_fork": true,
    "comments": [
      "Don't forget to schedule the release task."
    ],
    "commit_messages": [
      "PYTHON-3407 macos release failing on Python 3.8 AttributeError: 'Distribution' object has no attribute 'convert_2to3_doctests' (#1044)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e844ee515ce6a4b09b",
    "number": 1043,
    "body": null,
    "head_branch": "PYTHON-3408",
    "is_a_fork": true,
    "comments": [
      "Superseded by https://github.com/mongodb/mongo-python-driver/pull/1045"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8e944ee515ce6a4b09c",
    "number": 1042,
    "body": "This will help debug the failures in PYTHON-3406.",
    "head_branch": "PYTHON-3406",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3406 Refactor fork tests to print traceback on failure (#1042)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ea44ee515ce6a4b09d",
    "number": 1041,
    "body": "This PR fixes https://jira.mongodb.org/browse/PYTHON-2531 and https://jira.mongodb.org/browse/PYTHON-3405.\r\n\r\nPYTHON-2531 was a test bug where we had an infinite loop in ensure_all_connected. \r\nPYTHON-3405 was a test bug where we were incorrect comparing a ServerDescription with a _Address which always compare unequal.",
    "head_branch": "PYTHON-3405",
    "is_a_fork": true,
    "comments": [
      "Opened https://jira.mongodb.org/browse/PYTHON-3406 for the PyPy 3.8 test failure."
    ],
    "commit_messages": [
      "PYTHON-3405/PYTHON-2531 Fix tests for primary step down (#1041)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8eb44ee515ce6a4b09e",
    "number": 1040,
    "body": null,
    "head_branch": "PYTHON-3402",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3402 Fix TestRewrapWithSeparateClientEncryption (#1040)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ec44ee515ce6a4b09f",
    "number": 1039,
    "body": null,
    "head_branch": "PYTHON-3403",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3403 Skips unit test if eventlent or gevent is imported (#1039)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ed44ee515ce6a4b0a0",
    "number": 1038,
    "body": "Also updated the FAQ for the fork safety section.",
    "head_branch": "changelog-4.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Changelog 4.3 (#1038)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ee44ee515ce6a4b0a1",
    "number": 1037,
    "body": null,
    "head_branch": "PYTHON-3390",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3390 Test for encrypted client post-fork (#1037)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ee44ee515ce6a4b0a2",
    "number": 1036,
    "body": null,
    "head_branch": "PYTHON-3393",
    "is_a_fork": true,
    "comments": [
      "Failed on `test_discovery_and_monitoring.TestUnifiedRediscoverQuicklyAfterStepDown.test_Rediscover_quickly_after_replSetStepDown` in `test-latest-replica_set`"
    ],
    "commit_messages": [
      "PYTHON-3393 Added fork-safety stress test. (#1036)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ef44ee515ce6a4b0a3",
    "number": 1035,
    "body": "Depends on https://github.com/mongodb/libmongocrypt/pull/440",
    "head_branch": "PYTHON-3256",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3256 Obtain AWS credentials for CSFLE in the same way as for MONGODB-AWS (#1035)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f044ee515ce6a4b0a4",
    "number": 1034,
    "body": null,
    "head_branch": "PYTHON-3385",
    "is_a_fork": true,
    "comments": [
      "> One last issue:\r\n\r\nFixed"
    ],
    "commit_messages": [
      "PYTHON-3385 Add prose test for RewrapManyDataKey (#1034)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f144ee515ce6a4b0a5",
    "number": 1033,
    "body": null,
    "head_branch": "PYTHON-3355",
    "is_a_fork": true,
    "comments": [
      "[Error](https://evergreen.mongodb.com/task_log_raw/mongo_python_driver_test_macos_encryption__platform~macos_1100_auth~auth_ssl~nossl_encryption~encryption_crypt_shared_test_6.0_sharded_cluster_patch_3204290e93594f8ffe537ca5e7ed071d4c13056e_62f5093861837d540618fa0e_22_08_11_13_50_49/0?type=T#L1748) looks relevant: `pymongocrypt.errors.MongoCryptError: csfle lib_create() failed: Cannot initialize the Mongo Crypt Shared Support Library`",
      "Full error:\r\n```\r\n [2022/08/11 14:04:59.786] ERROR: test_legacy_fle2_validatorAndPartialFieldExpression_create_with_a_validator_on_an_encrypted_field_is_an_error (test.test_encryption.TestSpec)\r\n [2022/08/11 14:04:59.786] ----------------------------------------------------------------------\r\n [2022/08/11 14:04:59.786] Traceback (most recent call last):\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/test/__init__.py\", line 596, in wrap\r\n [2022/08/11 14:04:59.786]     return f(*args, **kwargs)\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/test/__init__.py\", line 596, in wrap\r\n [2022/08/11 14:04:59.786]     return f(*args, **kwargs)\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/test/test_encryption.py\", line 664, in run_scenario\r\n [2022/08/11 14:04:59.786]     self.run_scenario(scenario_def, test)\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/test/utils_spec_runner.py\", line 520, in run_scenario\r\n [2022/08/11 14:04:59.786]     client = rs_client(\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/test/utils.py\", line 576, in rs_client\r\n [2022/08/11 14:04:59.786]     return _mongo_client(h, p, **kwargs)\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/test/utils.py\", line 556, in _mongo_client\r\n [2022/08/11 14:04:59.786]     return MongoClient(uri, port, **client_options)\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/pymongo/mongo_client.py\", line 848, in __init__\r\n [2022/08/11 14:04:59.786]     self._encrypter = _Encrypter(self, self.__options.auto_encryption_opts)\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/pymongo/encryption.py\", line 336, in __init__\r\n [2022/08/11 14:04:59.786]     self._auto_encrypter = AutoEncrypter(\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/venv-encryption/lib/python3.9/site-packages/pymongocrypt/auto_encrypter.py\", line 31, in __init__\r\n [2022/08/11 14:04:59.786]     self.mongocrypt = MongoCrypt(mongo_crypt_opts, callback)\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/venv-encryption/lib/python3.9/site-packages/pymongocrypt/mongocrypt.py\", line 179, in __init__\r\n [2022/08/11 14:04:59.786]     self.__init()\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/venv-encryption/lib/python3.9/site-packages/pymongocrypt/mongocrypt.py\", line 243, in __init\r\n [2022/08/11 14:04:59.786]     self.__raise_from_status()\r\n [2022/08/11 14:04:59.786]   File \"/System/Volumes/Data/data/mci/8f5831c6762ad7c1185896252cbde96b/src/venv-encryption/lib/python3.9/site-packages/pymongocrypt/mongocrypt.py\", line 259, in __raise_from_status\r\n [2022/08/11 14:04:59.786]     raise exc\r\n [2022/08/11 14:04:59.786] pymongocrypt.errors.MongoCryptError: csfle lib_create() failed: Cannot initialize the Mongo Crypt Shared Support Library when it is already initialized. [Error 3, code 1]\r\n```\r\n\r\nStrange, can you reproduce this error locally with 6.0.0 crypt_shared and 6.0.0 sharded cluster?"
    ],
    "commit_messages": [
      "PYTHON-3355 Test with consistent versions of crypt_shared and server (#1033)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f244ee515ce6a4b0a6",
    "number": 1032,
    "body": "Depends on https://github.com/mongodb-labs/drivers-evergreen-tools/pull/223",
    "head_branch": "PYTHON-2818",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2818 Add native support for AWS IAM Roles for service accounts, EKS in particular (#1032)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f344ee515ce6a4b0a7",
    "number": 1031,
    "body": null,
    "head_branch": "PYTHON-3379",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3379 Refactored DatetimeConversionOpts to DatetimeConversion (#1031)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f444ee515ce6a4b0a8",
    "number": 1030,
    "body": "Fix: https://jira.mongodb.org/browse/PYTHON-3391",
    "head_branch": "PYTHON-3391",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3391 Skip unsupported CSOT tests on serverless (#1030)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f544ee515ce6a4b0a9",
    "number": 1029,
    "body": "Fix: https://jira.mongodb.org/browse/PYTHON-3389",
    "head_branch": "PYTHON-3389",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3389 Close ChangeStream after non-resumable non-timeout errors (#1029)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f544ee515ce6a4b0aa",
    "number": 1028,
    "body": "https://jira.mongodb.org/browse/PYTHON-3312\r\n\r\nPOC for: https://github.com/mongodb/specifications/pull/1274",
    "head_branch": "PYTHON-3312",
    "is_a_fork": true,
    "comments": [
      "Note the load balancer and serverless tests are failing until this issue is resolved: https://github.com/mongodb/specifications/pull/1274#pullrequestreview-1057730960",
      "LGTM so far"
    ],
    "commit_messages": [
      "PYTHON-3312 Convert SDAM integration tests to unified (#1028)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f644ee515ce6a4b0ab",
    "number": 1027,
    "body": null,
    "head_branch": "PYTHON-3384",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3382 Resync csfle tests (#1027)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f744ee515ce6a4b0ac",
    "number": 1026,
    "body": null,
    "head_branch": "PYTHON-3377",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3377 datetime_ms documentation page is empty (#1026)\n\nCo-authored-by: Ben Warner <ben.warner@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f844ee515ce6a4b0ad",
    "number": 1025,
    "body": "Added to the FAQ, and tweaked another doc. Will have to be tweaked again after renaming `DatetimeConversionOpts`.",
    "head_branch": "PYTHON-3376",
    "is_a_fork": true,
    "comments": [
      "There's a broken link to `DatetimeMS` which I think is contingent on [PYTHON-3377](https://github.com/mongodb/mongo-python-driver/pull/1026) being fixed.\r\n\r\nEdit: fixed",
      "Started making edits to `datetime.rst` before I read [PYTHON-3378](https://jira.mongodb.org/browse/PYTHON-3378) was also a ticket, so I'm going to keep both here.",
      "FYI you can run the doctests locally by running `python setup.py doc -t` with single mongod server."
    ],
    "commit_messages": [
      "PYTHON-3376/PYTHON-3378 Update FAQ about OverflowError when decoding out of range datetimes (#1025)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8f944ee515ce6a4b0ae",
    "number": 1024,
    "body": "Added short docstrings to each of the `DatetimeConversionOpts`.",
    "head_branch": "PYTHON-3375",
    "is_a_fork": true,
    "comments": [
      "Fails on an unrelated CSOT test"
    ],
    "commit_messages": [
      "PYTHON-3375 Added docstrings to DatetimeConversionOpts (#1024)\n\n* Added docstrings\r\n\r\n* Fixed detail\r\n\r\n* Fixed punctuation and links\r\n\r\nCo-authored-by: Ben Warner <ben.warner@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8fa44ee515ce6a4b0af",
    "number": 1023,
    "body": "Removed `__repr__` so that the default behavior is used, and changed test to match.",
    "head_branch": "PYTHON-3371",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3371 Remove DatetimeConversionOpts.__repr__ (#1023)\n\n* Removed __repr__ and adjusted repr string\r\n\r\n* Changed to %s\r\n\r\nCo-authored-by: Ben Warner <ben.warner@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8fb44ee515ce6a4b0b0",
    "number": 1022,
    "body": null,
    "head_branch": "PYTHON-3274",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3274 Add commandStartedEvent assertions to clustered index spec tests (#1022)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8fc44ee515ce6a4b0b1",
    "number": 1021,
    "body": "https://jira.mongodb.org/browse/PYTHON-3366 \r\n\r\nChanges:\r\n- Support mypy 0.971 and test with latest version.\r\n- Fix:\r\n   ```\r\n    bson/__init__.py: note: In member \"decode\" of class \"BSON\":\r\n    bson/__init__.py:1311: error: A function returning TypeVar should receive at\r\n\tleast one argument containing the same Typevar  [type-var]\r\n\t    ...ptions: CodecOptions = DEFAULT_CODEC_OPTIONS) -> _DocumentType:  # typ...\r\n   ```",
    "head_branch": "PYTHON-3366",
    "is_a_fork": true,
    "comments": [
      "The remaining errors are in the tests and look like:\r\n```\r\ntest/test_bson.py: note: In member \"assertInvalid\" of class \"TestBSON\":\r\ntest/test_bson.py:120: error: Argument 2 to \"assertRaises\" of \"TestCase\" has incompatible type\r\n\"Callable[[Union[bytes, memoryview, mmap, array[Any]], Optional[CodecOptions[_DocumentType]]], _DocumentType]\"; expected \"Callable[..., object]\" \r\n[arg-type]\r\n            self.assertRaises(InvalidBSON, decode, data)\r\n                                           ^\r\n```\r\n\r\nLooks like a mypy bug. I'm not sure why it considers these types are incompatible. Perhaps \"_DocumentType\" is incompatible with \"object\"?\r\n\r\nI believe this is a typeshed bug that will be fixed by: https://github.com/python/typeshed/pull/8373"
    ],
    "commit_messages": [
      "PYTHON-3366 Support mypy 0.971 and test with latest version (#1021)\n\nPYTHON-3369 Use https://www.gevent.org"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8fc44ee515ce6a4b0b2",
    "number": 1020,
    "body": "POC for https://github.com/mongodb/specifications/pull/1277",
    "head_branch": "DRIVERS-2395",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3368 Add test that reads are not retried in a transaction (#1020)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8fd44ee515ce6a4b0b3",
    "number": 1019,
    "body": "https://jira.mongodb.org/browse/PYTHON-3284",
    "head_branch": "PYTHON-3284",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3284 Fix test_snapshot_query by waiting for documents to be committed to the snapshot (#1019)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ff44ee515ce6a4b0b4",
    "number": 1018,
    "body": null,
    "head_branch": "PYTHON-3358",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3358 Skip obsolete StaleShardVersion test on 6.1.0+ (#1018)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc8ff44ee515ce6a4b0b5",
    "number": 1017,
    "body": null,
    "head_branch": "update-readme-6.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update readme for 6.0 support (#1017)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90044ee515ce6a4b0b6",
    "number": 1016,
    "body": null,
    "head_branch": "release-4.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 4.2 (#1016)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90144ee515ce6a4b0b7",
    "number": 1015,
    "body": null,
    "head_branch": "PYTHON-3362",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3362 Fix CSOT gridfs test (#1015)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90244ee515ce6a4b0b8",
    "number": 1014,
    "body": "https://jira.mongodb.org/browse/PYTHON-3363",
    "head_branch": "PYTHON-3363",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3363 Allow change stream to be resumed after a timeout (#1014)\n\nApply client timeoutMS to ChangeStream iteration."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90344ee515ce6a4b0b9",
    "number": 1013,
    "body": "Implements [PYTHON-3362](https://jira.mongodb.org/browse/PYTHON-3362)\r\n\r\nAlso fixes the GridFS CSOT spec tests.\r\n\r\nDepends on https://github.com/mongodb/mongo-python-driver/pull/1012",
    "head_branch": "PYTHON-3362",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3362 Ignore wtimeout when timeoutMS or timeout() is configured (#1013)\n\nApply client timeoutMS to gridfs operations."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90444ee515ce6a4b0ba",
    "number": 1012,
    "body": "https://jira.mongodb.org/browse/PYTHON-2459\r\n\r\nThis PR implements the unified GridFS tests which is required for CSOT. I've continued skipping the CSOT specific GridFS tests for now since they are failing for other reasons. ",
    "head_branch": "PYTHON-2459",
    "is_a_fork": true,
    "comments": [
      "I'm going to ignore the broken \"check links\" failures in this PR:\r\n```\r\n(api/pymongo/cursor: line    3) broken    http://mongodb.com/docs/manual/reference/operator/comment/ - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/reference/operator/meta/comment/\r\n...\r\n(examples/encryption: line  108) broken    https://dochub.mongodb.org/core/client-side-field-level-encryption-automatic-encryption-rules - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/reference/security-client-side-automatic-json-schema/\r\n...\r\n(examples/encryption: line   19) broken    https://dochub.mongodb.org/core/client-side-field-level-encryption - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/core/security-client-side-encryption/\r\n(examples/encryption: line   54) broken    https://dochub.mongodb.org/core/client-side-field-level-encryption-read-write-support - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/reference/security-client-side-query-aggregation-support/\r\n(examples/encryption: line   40) broken    https://dochub.mongodb.org/core/client-side-field-level-encryption-mongocryptd - 404 Client Error: Not Found for url: https://www.mongodb.com/docs/manual/reference/security-client-side-encryption-appendix/#mongocryptd\r\n```\r\nOpened https://jira.mongodb.org/browse/PYTHON-3361"
    ],
    "commit_messages": [
      "PYTHON-2459 Implement unified GridFS tests (#1012)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90544ee515ce6a4b0bb",
    "number": 1011,
    "body": "https://jira.mongodb.org/browse/PYTHON-3289\r\n\r\nDepends on https://github.com/mongodb/mongo-python-driver/pull/1009",
    "head_branch": "PYTHON-3289",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3289 Apply client timeoutMS to every operation (#1011)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90644ee515ce6a4b0bc",
    "number": 1010,
    "body": null,
    "head_branch": "PYTHON-3151",
    "is_a_fork": true,
    "comments": [
      "Need to fix test_session.TestSessionsMultiAuth.test_session_authenticate_multiple too.",
      "It looks like we need to backport https://github.com/mongodb/mongo-python-driver/pull/1049, doing that now."
    ],
    "commit_messages": [
      "PYTHON-3151 [v3.13] Test failure - test_authenticate_multiple on v6.0-latest (#1010)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90644ee515ce6a4b0bd",
    "number": 1009,
    "body": "https://jira.mongodb.org/browse/PYTHON-3359\r\n\r\nTwo changes:\r\n- Remove Database and Collection timeout override.\r\n- Remove MongoClient.timeout in favor of client.options.timeout.",
    "head_branch": "PYTHON-3359",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3359 Remove Database and Collection timeout override (#1009)\n\nRemove MongoClient.timeout in favor of client.options.timeout."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90744ee515ce6a4b0be",
    "number": 1008,
    "body": "https://jira.mongodb.org/browse/PYTHON-3291",
    "head_branch": "PYTHON-3291",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3291 Add PyMongoError.timeout to identify timeout related errors (#1008)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90844ee515ce6a4b0bf",
    "number": 1007,
    "body": null,
    "head_branch": "PYTHON-3294",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3294 Bump minimum pymongocrypt version to 1.3.0 (#1007)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90944ee515ce6a4b0c0",
    "number": 1006,
    "body": null,
    "head_branch": "PYTHON-3298",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3298 Add flag to create_collection to skip listCollections pre-check (#1006)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90a44ee515ce6a4b0c1",
    "number": 1005,
    "body": null,
    "head_branch": "PYTHON-3353",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3353 Improve reliability of SDAM heartbeat error spec tests (#1005)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90b44ee515ce6a4b0c2",
    "number": 1004,
    "body": null,
    "head_branch": "PYTHON-3303",
    "is_a_fork": true,
    "comments": [
      "Do the tests pass on all server versions? I was expecting we would only move >=6.0+ testing to the new platform.",
      "@ShaneHarvey based on this patch: https://evergreen.mongodb.com/version/62cb5bb9d1fe073e64dcbbd8 they do seem to  pass for all server versions"
    ],
    "commit_messages": [
      "PYTHON-3303 Upgrade encryption testing to macos 10.15+ (#1004)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90c44ee515ce6a4b0c3",
    "number": 1003,
    "body": "There are small typos in:\n- pymongo/database.py\n- pymongo/ocsp_support.py\n\nFixes:\n- Should read `tolerance` rather than `tolerence`.\n- Should read `automatically` rather than `automactically`.\n\n\n\nSemi-automated pull request generated by\nhttps://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",
    "head_branch": "bugfix_typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Fix a few typos (#1003)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90c44ee515ce6a4b0c4",
    "number": 1002,
    "body": null,
    "head_branch": "PYTHON-3153",
    "is_a_fork": true,
    "comments": [
      "Failing tests are fixed in #1001, will re-run after that is merged to double-check, but the expected tests are passing:\r\n\r\n```\r\n[2022/07/11 14:20:39.552]   test_loadBalanced-directConnection (test_dns.TestDNSLoadBalanced) ... ok (0.056s)\r\n[2022/07/11 14:20:39.589]   test_loadBalanced-no-results (test_dns.TestDNSLoadBalanced) ... ok (0.033s)\r\n[2022/07/11 14:20:39.651]   test_loadBalanced-replicaSet-errors (test_dns.TestDNSLoadBalanced) ... ok (0.065s)\r\n[2022/07/11 14:20:39.661]   test_loadBalanced-true-multiple-hosts (test_dns.TestDNSLoadBalanced) ... ok (0.010s)\r\n[2022/07/11 14:20:39.704]   test_loadBalanced-true-txt (test_dns.TestDNSLoadBalanced) ... ok (0.039s)\r\n[2022/07/11 14:20:39.761]   test_srvMaxHosts-conflicts_with_loadBalanced-true (test_dns.TestDNSLoadBalanced) ... ok (0.061s)\r\n[2022/07/11 14:20:39.793]   test_srvMaxHosts-conflicts_with_loadBalanced-true-txt (test_dns.TestDNSLoadBalanced) ... ok (0.032s)\r\n[2022/07/11 14:20:39.829]   test_srvMaxHosts-zero (test_dns.TestDNSLoadBalanced) ... ok (0.032s)\r\n[2022/07/11 14:20:39.864]   test_srvMaxHosts-zero-txt (test_dns.TestDNSLoadBalanced) ... ok (0.035s)\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3153 Update initial DNS seedlist discovery tests to support dedicated load balancer port (#1002)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90d44ee515ce6a4b0c5",
    "number": 1001,
    "body": null,
    "head_branch": "PYTHON-3349",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3349 Don't clear entire load balanced pool when serviceId is unknown (#1001)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90e44ee515ce6a4b0c6",
    "number": 1000,
    "body": null,
    "head_branch": "PYTHON-3336",
    "is_a_fork": true,
    "comments": [
      "Remaining failure will be fixed as part of https://jira.mongodb.org/browse/PYTHON-2933"
    ],
    "commit_messages": [
      "PYTHON-3336 Test Failure - test_load_balancer failing (#1000)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc90f44ee515ce6a4b0c7",
    "number": 999,
    "body": null,
    "head_branch": "PYTHON-3335",
    "is_a_fork": true,
    "comments": [
      "Did you schedule the variants that were failing?"
    ],
    "commit_messages": [
      "Test Failure - crypt_shared FLE tests fail on Windows/macos (#999)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91044ee515ce6a4b0c8",
    "number": 998,
    "body": "Explanation: \r\n\r\n1.  In load balanced mode the driver skips SDAM so we need to fallback to using the connection's rtt calculated from the connection handshake.\r\n1.  In load balanced mode the driver also skips server selection so we cannot rely on a ServerSelectionTimeoutError to abort the retry loop. Instead we need to explicitly check the CSOT timeout has not expired. ",
    "head_branch": "PYTHON-3345",
    "is_a_fork": true,
    "comments": [
      "This is ready for review. The remaining load balancer test failures are being addressed by Steve in PYTHON-3336."
    ],
    "commit_messages": [
      "PYTHON-3345 CSOT use connection handshake RTT for load balanced mode (#998)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91144ee515ce6a4b0c9",
    "number": 997,
    "body": null,
    "head_branch": "PYTHON-2986",
    "is_a_fork": true,
    "comments": [
      "Remaining errors are CSOT-related"
    ],
    "commit_messages": [
      "PYTHON-2986 Update serverless testing for load balancer fronting single proxy (#997)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91144ee515ce6a4b0ca",
    "number": 996,
    "body": null,
    "head_branch": "PYTHON-3292",
    "is_a_fork": true,
    "comments": [
      "The explanation is in the ticket, we never synced with SPEC-1653.",
      "Oh, in that case can you update the title to be \"PYTHON-2210 Remove ElectionInProgress (216) from ResumableChangeStreamError\" "
    ],
    "commit_messages": [
      "PYTHON-3292 Remove ElectionInProgress (216) from ResumableChangeStreamError (#996)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91244ee515ce6a4b0cb",
    "number": 995,
    "body": null,
    "head_branch": "PYTHON-3316",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3316 Add Type Check Test for Transactions (#995)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91344ee515ce6a4b0cc",
    "number": 994,
    "body": null,
    "head_branch": "PYTHON-3311",
    "is_a_fork": true,
    "comments": [
      "Still have this question:\r\n> is adding `__all__` a breaking change for any users?",
      "> is adding __all__ a breaking change for any users?\r\n\r\nIf they were relying on any of the items in `GRIDFS_IGNORE` it would be a breaking change.  We could choose to leave it as an empty list to be extra conservative.  I chose only ones that weren't from `GridFS` itself.",
      "Also, if the user was relying on any of the `typing` imports on `import *` that would be a breaking change."
    ],
    "commit_messages": [
      "PYTHON-3311 Module \"pymongo\" does not explicitly export attribute \"MongoClient\"; implicit reexport disabled (#994)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91444ee515ce6a4b0cd",
    "number": 993,
    "body": null,
    "head_branch": "PYTHON-3339",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3339 Ignore Sourceforge link that is giving 403 Error (#993)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91544ee515ce6a4b0ce",
    "number": 992,
    "body": null,
    "head_branch": "PYTHON-3338",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3338 Add versionadded to docs for key management APIs (#992)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91644ee515ce6a4b0cf",
    "number": 991,
    "body": null,
    "head_branch": "PYTHON-3333",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3333 Fix bug where non-cursor read operations fail in a transaction with directConnection=True on primary (#991)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91744ee515ce6a4b0d0",
    "number": 990,
    "body": "Explanation:\r\n> If the size field is less than or equal to 4096, then the collection will have a cap of 4096 bytes.\r\n\r\nhttps://www.mongodb.com/docs/manual/core/capped-collections/#create-a-capped-collection",
    "head_branch": "PYTHON-3337",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3337 Fix capped collection test on MMAPv1 (#990)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91744ee515ce6a4b0d1",
    "number": 989,
    "body": null,
    "head_branch": "PYTHON-3315",
    "is_a_fork": true,
    "comments": [
      "> juliusgeo and others added 30 commits 10 months ago\r\n\r\nSomething seems off with this branch.",
      "I think you lost some changes when you force pushed. We still need to remove index_key_id in the tests too."
    ],
    "commit_messages": [
      "PYTHON-3315 Remove index_key_id option from ClientEncryption encrypt method (#989)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91844ee515ce6a4b0d2",
    "number": 988,
    "body": null,
    "head_branch": "PYTHON-3286",
    "is_a_fork": true,
    "comments": [
      "We expect some prose tests to fail here until [PYTHON-3319](https://jira.mongodb.org/browse/PYTHON-3319) is merged."
    ],
    "commit_messages": [
      "PYTHON-3286 Update expected FLE 2 find payloads in tests (#988)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91944ee515ce6a4b0d3",
    "number": 987,
    "body": null,
    "head_branch": "PYTHON-3319",
    "is_a_fork": true,
    "comments": [
      "Remaining test failures are being handled in [PYTHON-3286](https://jira.mongodb.org/browse/PYTHON-3286)",
      "> Could you also update the docs for .encrypt() to say that contention_factor is required with algorithm=indexed?\r\n\r\nDone.  All tests here should pass now that we've merged [PYTHON-3286](https://jira.mongodb.org/browse/PYTHON-3286)."
    ],
    "commit_messages": [
      "PYTHON-3319 Require contentionFactor for \"Indexed\" explicit encryption (#987)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91a44ee515ce6a4b0d4",
    "number": 986,
    "body": null,
    "head_branch": "PYTHON-3309",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3309 Explicit Queryable Encryption doc example needs to utilize index_key_Id (#986)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91b44ee515ce6a4b0d5",
    "number": 985,
    "body": "Adds some `_after_fork()` calls to reset locks for `ObjectId` and `MongoClient`, and some unit tests for both classes.",
    "head_branch": "PYTHON-2484",
    "is_a_fork": true,
    "comments": [
      "The locking mechanism gets invoked a lot so I timed it once for each set of tests. There's no performance impact as far as I can tell from one set of runs comparing `mongodb:master` and commit [`2d1c42d`](https://github.com/mongodb/mongo-python-driver/pull/985/commits/2d1c42d3e16dcaafcafb6debed6baf056e6a941d) I ran all tests, the new tests, and tests from `TestClientLazyConnect` since I debugged deadlocking behavior there and thought I saw a performance decline. Here's a table of what I ran on my M1 MBP:\r\n\r\n | Version | Tests Ran | Test Count | Run Time (s) | \r\n | --- | --- | --- | --- |\r\n | Fork Safe | All + New | 2670 | 241.346 | \r\n | Upstream | All | 2667 | 243.946 | \r\n | Fork Safe | `TestClientLazyConnect` | 4 | 8.714 | \r\n | Upstream | `TestClientLazyConnect` | 4 | 8.888 | \r\n | Fork Safe | New Only | 3 | 0.024 | ",
      "It looks like this will only work in CPython for right now. `pypy` is not available yet for Apple Silicon, so I can't debug it on my machine.\r\n\r\nIt also passes on my machine and GH Actions, but not Evergreen, will have to investigate why.",
      "I moved the more complicated locking mechanism to `PYTHON-2484-auto-lock` in case it's needed again in the future, the latest commit onward only locks the lock protecting the `WeakSet` for tracking other locks before forking.",
      "`test_client.TestClient.test_list_databases` was the only failure in the last commit, which I don't believe is related",
      "Currently fails on an pymongocrypt error that doesn't appear to be related."
    ],
    "commit_messages": [
      "PYTHON-2484 Added lock sanitization for MongoClient and ObjectId (#985)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91c44ee515ce6a4b0d6",
    "number": 984,
    "body": null,
    "head_branch": "PYTHON-3097",
    "is_a_fork": true,
    "comments": [
      "Please schedule the MONGODB-AWS tests to make sure the new tests work."
    ],
    "commit_messages": [
      "PYTHON-3097 Language specific examples for AWS Lambda (#984)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91d44ee515ce6a4b0d7",
    "number": 983,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "That directory holds all the scripts for our internal CI system called Evergreen. It can not be deleted."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91e44ee515ce6a4b0d8",
    "number": 982,
    "body": null,
    "head_branch": "PYTHON-3313",
    "is_a_fork": true,
    "comments": [
      "> Could you open a PYTHON ticket to track this work?\r\n\r\nThere's already a https://jira.mongodb.org/browse/PYTHON-3313",
      "> This can be updated to use the new set_use_cached_credentials api \r\n\r\nDone",
      "This is ready for review.  The remaining failure is tracked by https://jira.mongodb.org/browse/PYTHON-3468",
      "> could you add a changelog entry too?\r\n\r\nDone"
    ],
    "commit_messages": [
      "PYTHON-3313 Cache AWS Credentials Where Possible (#982)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc91f44ee515ce6a4b0d9",
    "number": 981,
    "body": "This adds an immutable `UTCDatetimeRaw` object that contains the number of milliseconds since the Unix epoch in the UTC timezone. The intent is only for passing back and forth between client and server. I added some basic dunder methods since some of them were going to default to other ones anyways (e.g. `__eq__` as `__id__`).\r\n\r\nI also added a new codec option `datetime_conversion`, which has 3 options: `datetime` (current behavior, except on out-of-range), `datetime_clamp` (clamp to min and max datetimes), and `raw` (return the milliseconds as `UTCDatetimeRaw`).\r\n\r\nThere's no C extension equivalent right now, but it'll crash with C extensions turned on since the extra codec option is an unexpected argument when passed to the equivalent C extensions. I'll add that part later if the Python part looks good.",
    "head_branch": "PYTHON-1824",
    "is_a_fork": true,
    "comments": [
      "> There's no C extension equivalent right now, but it'll crash with C extensions turned on since the extra codec option is an unexpected argument when passed to the equivalent C extensions. I'll add that part later if the Python part looks good.\r\n\r\nLet's at least update the codec options parsing logic so the C extensions don't crash. That way we can make sure the tests pass.",
      "Changed it so instances of DatetimeMS cannot go above a 64-bit int upon instantiation. `mypy` looks like it is failing on something SSL related."
    ],
    "commit_messages": [
      "PYTHON-1824 Allow encoding/decoding out-of-range datetimes via DatetimeMS and datetime_conversion (#981)\n\nhttps://jira.mongodb.org/browse/PYTHON-1824\r\n\r\nCo-authored-by: Ben Warner <ben.warner@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92044ee515ce6a4b0da",
    "number": 980,
    "body": null,
    "head_branch": "PYTHON-3297",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3297 Test auto decryption occurs after CommandSucceeded events (#980)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92044ee515ce6a4b0db",
    "number": 979,
    "body": null,
    "head_branch": "PYTHON-3282",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3282 Add comment option tests for distinct helper (#979)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92144ee515ce6a4b0dc",
    "number": 978,
    "body": null,
    "head_branch": "PYTHON-3067",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3310 Test Failure - query_type must be str or None, not: <enum 'QueryType'> (#978)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92244ee515ce6a4b0dd",
    "number": 977,
    "body": "Hello,\r\n\r\nAs we are using MongoDB and Pymongo in a HTTP API, we got a lot of strings coming in as query parameters, json body, ...\r\nWe were quite surprised that a comparison between a `string` and its `ObjectId` equivalent would not return `True`.\r\n\r\nWe don't really know what this change would imply, but we would like to propose it if it can help someone else. If it is something that you have thought of and is not desired upstream, feel free to close ;)\r\n\r\nThanks a lot !",
    "head_branch": "add-string-equality",
    "is_a_fork": true,
    "comments": [
      "We intentionally do not have this behavior because strings and ObjectIds are represented as different and non-comparable types in the MongoDB server itself. For example:\r\n```python\r\n>>> oid = ObjectId('62ab71ec052b50df813c8a45')\r\n>>> coll.insert_one({'_id': 1, 'v': oid})\r\n<pymongo.results.InsertOneResult object at 0x7fef57e9b9d0>\r\n>>> coll.insert_one({'_id': 2, 'v': str(oid)})\r\n<pymongo.results.InsertOneResult object at 0x7fef57de4250>\r\n>>> list(coll.find())\r\n[{'_id': 1, 'v': ObjectId('62ab71ec052b50df813c8a45')}, {'_id': 2, 'v': '62ab71ec052b50df813c8a45'}]\r\n>>> list(coll.find({'v': oid}))\r\n[{'_id': 1, 'v': ObjectId('62ab71ec052b50df813c8a45')}]\r\n>>> list(coll.find({'v': str(oid)}))\r\n[{'_id': 2, 'v': '62ab71ec052b50df813c8a45'}]\r\n```\r\n\r\nThe expectation is that apps will need to parse the stringified ObjectId back into an actual ObjectId. For JSON parameters, you can make this automatic by accepting MongoDB Extended JSON and changing the app to parse the JSON input as extended json using `bson.json_util.loads()`: https://pymongo.readthedocs.io/en/stable/api/bson/json_util.html#bson.json_util.loads",
      "Let us know if you have any questions about using [Extended JSON](https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/)!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92344ee515ce6a4b0de",
    "number": 976,
    "body": "I prematurely merged #972 before it was completely reviewed, currently addresses other docstring changes.",
    "head_branch": "PYTHON-3093",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3093 Continuation of #972 (#976)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92444ee515ce6a4b0df",
    "number": 975,
    "body": null,
    "head_branch": "PYTHON-3300-2",
    "is_a_fork": true,
    "comments": [
      "I merged the previous PR without noticing @blink1073 's comment about the key_vault_client. This is to address that."
    ],
    "commit_messages": [
      "PYTHON-3300 Fix Explicit Queryable Encryption Example (#975)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92544ee515ce6a4b0e0",
    "number": 974,
    "body": "The [spec for GridFS](https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.rst#id21) says not to rollback any changes that occur as a result of errors while uploading a file, so this test was added to check that the state doesn't get rolled back.",
    "head_branch": "PYTHON-1552",
    "is_a_fork": true,
    "comments": [
      "Changed `__exit__` so that it only calls `close()` when no exceptions are thrown. Before this it would always call close() and create the associated doc in `files`. I also fixed a unit test where a call to `GridFS.put` didn't provide an encoding and failed. "
    ],
    "commit_messages": [
      "PYTHON-1552 Prevent uploading partial or corrupt GridFS files after an error occurs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92544ee515ce6a4b0e1",
    "number": 973,
    "body": null,
    "head_branch": "PYTHON-3300",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3300 Add Explicit Queryable Encryption Example to Docs (#973)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92644ee515ce6a4b0e2",
    "number": 972,
    "body": null,
    "head_branch": "PYTHON-3093",
    "is_a_fork": true,
    "comments": [
      "Skips tests that weren't relevant."
    ],
    "commit_messages": [
      "PYTHON-3093 Change streams support for user-facing PIT pre- and post-images (#972)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92744ee515ce6a4b0e3",
    "number": 971,
    "body": null,
    "head_branch": "PYTHON-3227",
    "is_a_fork": true,
    "comments": [
      "@juliusgeo you picked up a merge conflict"
    ],
    "commit_messages": [
      "PYTHON-3227 Clustered Indexes for all Collections (#971)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92844ee515ce6a4b0e4",
    "number": 970,
    "body": "I think there was a missing switch case in `isLegalUTF8` for characters beginning with `0xED`, based on what I saw in [this implementation](https://llvm.org/doxygen/ConvertUTF_8cpp_source.html). There are some other apparent differences, but I think for those other cases, they probably have the same behavior already.\r\n\r\nResults:\r\n```\r\nIn [1]: from bson import *\r\n\r\nIn [2]: encode({\"a\":Regex(b'\\xed\\xbc\\xad','')})\r\n---------------------------------------------------------------------------\r\nInvalidStringData                         Traceback (most recent call last)\r\nInput In [2], in <cell line: 1>()\r\n----> 1 encode({\"a\":Regex(b'\\xed\\xbc\\xad','')})\r\n\r\nFile ~/opt/anaconda3/lib/python3.9/site-packages/pymongo-4.2.0.dev2-py3.9-macosx-10.9-x86_64.egg/bson/__init__.py:947, in encode(document, check_keys, codec_options)\r\n    944 if not isinstance(codec_options, CodecOptions):\r\n    945     raise _CODEC_OPTIONS_TYPE_ERROR\r\n--> 947 return _dict_to_bson(document, check_keys, codec_options)\r\n\r\nInvalidStringData: regex patterns must be valid UTF-8\r\n```",
    "head_branch": "PYTHON-3048",
    "is_a_fork": true,
    "comments": [
      "We found that using the Python standard library significantly speeds up the results. For 1 million bytes, the Unicode C implementation used about 4.19 ms ± 2.89 µs, and the Python Unicode implementation takes about 145 µs ± 947 ns to run."
    ],
    "commit_messages": [
      "PYTHON-3048 Fixed bug with incorrect validation of UTF-8 regex patterns (#970)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92944ee515ce6a4b0e5",
    "number": 969,
    "body": null,
    "head_branch": "PYTHON-3253",
    "is_a_fork": true,
    "comments": [
      "Can you schedule a 6.0 encryption test to make sure it works correctly in EVG? I'll update the PR testing config to include 6.0 by default.",
      "> Can you schedule a 6.0 encryption test to make sure it works correctly in EVG? \r\n\r\nDone",
      "Test failure is captured in https://jira.mongodb.org/browse/PYTHON-3303",
      "Encryption tests passed on 6.0 on Ubuntu."
    ],
    "commit_messages": [
      "PYTHON-3253 Provide FLE 2.0 API example for docs team (#969)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92a44ee515ce6a4b0e6",
    "number": 968,
    "body": "\r\n\r\nRefactored some of the C symbols so that they avoid conflicts as mentioned in [PYTHON-2110](https://jira.mongodb.org/browse/PYTHON-2110). The following symbols should be refactored as:\r\n\r\n```\r\nPyInit__cmessage        => pymongo_PyInit__cmessage\r\nbuffer_free             => pymongo_buffer_free\r\nbuffer_get_buffer       => pymongo_buffer_get_buffer\r\nbuffer_get_position     => pymongo_buffer_get_position\r\nbuffer_new              => pymongo_buffer_new\r\nbuffer_save_space       => pymongo_buffer_save_space\r\nbuffer_update_position  => pymongo_buffer_update_position\r\nbuffer_write            => pymongo_buffer_write\r\n\r\nPyInit__cmessage        => pymongo_PyInit__cmessage\r\nbuffer_free             => pymongo_buffer_free\r\nbuffer_get_buffer       => pymongo_buffer_get_buffer\r\nbuffer_get_position     => pymongo_buffer_get_position\r\nbuffer_new              => pymongo_buffer_new\r\nbuffer_save_space       => pymongo_buffer_save_space\r\nbuffer_update_position  => pymongo_buffer_update_position\r\nbuffer_write            => pymongo_buffer_write\r\ncheck_string            => cbson_check_string\r\ncmp_date                => cbson_cmp_date\r\nconvert_type_registry   => cbson_convert_type_registry\r\ncopy_TM64_to_tm         => cbson_copy_TM64_to_tm\r\ncopy_tm_to_TM64         => cbson_copy_tm_to_TM64\r\ndate_in_safe_range      => cbson_date_in_safe_range\r\nfake_localtime_r        => cbson_fake_localtime_r\r\ngmtime64                => cbson_gmtime64\r\ngmtime64_r              => cbson_gmtime64_r\r\nlocaltime64             => cbson_localtime64 \r\nlocaltime64_r           => cbson_localtime64_r\r\nmktime64                => cbson_mktime64\r\ntimegm64                => cbson_timegm64\r\ntimelocal64             => cbson_timelocal64\r\nvalid_tm_mon            => cbson_valid_tm_mon\r\nvalid_tm_wday           => cbson_valid_tm_wday\r\n```",
    "head_branch": "PYTHON-2110",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2110 Refactored some C to avoid symbol conflicts (#968)\n\n* Refactored to avoid symbol conflicts\r\n\r\n* Forgot a replacement\r\n\r\n* Found a symbol\r\n\r\n* Undid symbol replacement for PyInit__cmessage\r\n\r\n* Changed cbson too\r\n\r\nCo-authored-by: Ben Warner <ben.warner@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92b44ee515ce6a4b0e7",
    "number": 967,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Remove extra period in `is_mongos` documentation (#967)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92b44ee515ce6a4b0e8",
    "number": 966,
    "body": "Fix an issue with https://jira.mongodb.org/browse/PYTHON-3290",
    "head_branch": "PYTHON-3290",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3290 Nested pymongo.timeout() calls only shorten the deadline (#966)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92c44ee515ce6a4b0e9",
    "number": 965,
    "body": "https://jira.mongodb.org/browse/PYTHON-3293\r\n",
    "head_branch": "PYTHON-3293",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3293 Document Queryable Encryption API is in beta (#965)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92d44ee515ce6a4b0ea",
    "number": 964,
    "body": null,
    "head_branch": "PYTHON-3299",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3299 Add Automatic Queryable Encryption Example to Docs (#964)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92e44ee515ce6a4b0eb",
    "number": 963,
    "body": "I will update this once we create a tag for https://github.com/mongodb/libmongocrypt/pull/366.",
    "head_branch": "PYTHON-3294",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3294 Depend on PyMongoCrypt 1.3.0b0 tag for beta (#963)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc92f44ee515ce6a4b0ec",
    "number": 962,
    "body": "https://jira.mongodb.org/browse/PYTHON-3290 \r\n",
    "head_branch": "PYTHON-3290",
    "is_a_fork": true,
    "comments": [
      "Ready for another look."
    ],
    "commit_messages": [
      "PYTHON-3290 Support nested pymongo.timeout() calls (#962)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93044ee515ce6a4b0ed",
    "number": 961,
    "body": "https://jira.mongodb.org/browse/PYTHON-3296",
    "head_branch": "PYTHON-3296",
    "is_a_fork": true,
    "comments": [
      "The mongodl.py script does not accept \"6.0\" or \"rapid\" as versions so I'm going to pause this PR until that support is added:\r\n```\r\npython3 .evergreen/mongodl.py --version rapid --component crypt_shared --out ~/Downloads/crypt_shared_rapid\r\nDownload crypt_shared rapid-enterprise for macos-x86_64\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/drivers-evergreen-tools/.evergreen/mongodl.py\", line 938, in <module>\r\n    sys.exit(main(sys.argv[1:]))\r\n  File \"/Users/shane/git/drivers-evergreen-tools/.evergreen/mongodl.py\", line 922, in main\r\n    result = _dl_component(cache,\r\n  File \"/Users/shane/git/drivers-evergreen-tools/.evergreen/mongodl.py\", line 641, in _dl_component\r\n    raise ValueError(\r\nValueError: No download for \"crypt_shared\" was found for the requested version+target+architecture+edition\r\n$ python3 .evergreen/mongodl.py --version 6.0 --component crypt_shared --out ~/Downloads/crypt_shared_6.0\r\nDownload crypt_shared 6.0-enterprise for macos-x86_64\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/drivers-evergreen-tools/.evergreen/mongodl.py\", line 938, in <module>\r\n    sys.exit(main(sys.argv[1:]))\r\n  File \"/Users/shane/git/drivers-evergreen-tools/.evergreen/mongodl.py\", line 922, in main\r\n    result = _dl_component(cache,\r\n  File \"/Users/shane/git/drivers-evergreen-tools/.evergreen/mongodl.py\", line 641, in _dl_component\r\n    raise ValueError(\r\nValueError: No download for \"crypt_shared\" was found for the requested version+target+architecture+edition\r\n```",
      "This is blocked on https://jira.mongodb.org/browse/DRIVERS-2355",
      "Closing in favor of https://github.com/mongodb/mongo-python-driver/pull/1033"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93144ee515ce6a4b0ee",
    "number": 960,
    "body": "Better docs for encrypt() which you can see rendered here: https://pymongo--960.org.readthedocs.build/en/960/api/pymongo/encryption.html#pymongo.encryption.ClientEncryption.encrypt",
    "head_branch": "PYTHON-3245",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3245 Fix docs for index_key_id (#960)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93244ee515ce6a4b0ef",
    "number": 959,
    "body": "PYTHON-3245 Implement explicit queryable encryption.\r\n\r\nDepends on https://github.com/mongodb/libmongocrypt/pull/358/\r\n\r\nImplements the prose test here: https://github.com/mongodb/specifications/tree/d4c9432c4b4425fd3dcc0dad0f65d954e7e6e1e4/source/client-side-encryption/tests#explicit-encryption",
    "head_branch": "PYTHON-3245",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3245 Support explicit queryable encryption (#959)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93344ee515ce6a4b0f0",
    "number": 958,
    "body": "Depends on https://github.com/mongodb/libmongocrypt/pull/375",
    "head_branch": "PYTHON-3053",
    "is_a_fork": true,
    "comments": [
      "We can't merge this until https://github.com/mongodb/libmongocrypt/pull/375 is merged and released and we update the installation method.",
      "Test failures are being addressed in [PYTHON-3286](https://jira.mongodb.org/browse/PYTHON-3286) and [PYTHON-3319](https://jira.mongodb.org/browse/PYTHON-3319).",
      "I updated the pymongocrypt dependency to point to the commit merging https://github.com/mongodb/libmongocrypt/pull/375"
    ],
    "commit_messages": [
      "PYTHON-3053 Key Management API (#958)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93444ee515ce6a4b0f1",
    "number": 957,
    "body": null,
    "head_branch": "PYTHON-3241",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3241 Add Queryable Encryption API to AutoEncryptionOpts (#957)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93444ee515ce6a4b0f2",
    "number": 956,
    "body": "PYTHON-3277 Rename csfle library to crypt_shared.",
    "head_branch": "PYTHON-3277",
    "is_a_fork": true,
    "comments": [
      "Note the windows failures will be fixed by https://github.com/mongodb-labs/drivers-evergreen-tools/pull/204"
    ],
    "commit_messages": [
      "PYTHON-3277 Rename csfle library to crypt_shared (#956)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93544ee515ce6a4b0f3",
    "number": 955,
    "body": "Implements https://jira.mongodb.org/browse/PYTHON-2924",
    "head_branch": "PYTHON-2924",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2924 Improve test_load_balancing (#955)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93644ee515ce6a4b0f4",
    "number": 954,
    "body": "This PR implements an initial version of the client side operation timeout (CSOT) spec [PYTHON-3288](https://jira.mongodb.org/browse/PYTHON-3288).\r\n\r\nChanges:\r\n- CSOT spec tests.\r\n- Add timeoutMS URI option and MongoClient keyword argument.\r\n- Add pymongo.timeout() api to set a deadline for a block of operations.\r\n- Change retryable reads/writes to retry multiple times until the deadline has expired.\r\n- Apply the timeout to server selection, connection pool checkout, connection creation, connection I/O, OCSP lookups, and FLE KMS requests.",
    "head_branch": "PYTHON-3288",
    "is_a_fork": true,
    "comments": [
      "Ready for another look."
    ],
    "commit_messages": [
      "PYTHON-3288 Implement client side operation timeout (#954)\n\nAdd timeoutMS URI option and MongoClient keyword argument.\r\nAdd provisional/beta pymongo.timeout() api to set a deadline for a block of operations."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93744ee515ce6a4b0f5",
    "number": 953,
    "body": "This is tangentially related to some work I did on CSOT so I figured I would knock it out. \r\n\r\nThis change fixes the issue described in PYTHON-3187 and also cleans up the Python <3.7 ssl support code for check_hostname and SNI.",
    "head_branch": "PYTHON-3187",
    "is_a_fork": true,
    "comments": [
      "All the test failures look unrelated. I opened https://jira.mongodb.org/browse/PYTHON-3284 for a new flaky test failure."
    ],
    "commit_messages": [
      "PYTHON-3187 Avoid tight poll() loop on pyopenssl connections (#953)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93844ee515ce6a4b0f6",
    "number": 952,
    "body": null,
    "head_branch": "PYTHON-3283",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3283 Remove Generic Typing from the ClientSession Class (#952)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93944ee515ce6a4b0f7",
    "number": 951,
    "body": null,
    "head_branch": "PYTHON-3279",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3279 Don't link check flakey wiki.centos.org (#951)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93a44ee515ce6a4b0f8",
    "number": 950,
    "body": null,
    "head_branch": "PYTHON-2683",
    "is_a_fork": true,
    "comments": [
      "Docs failure is unrelated, https://wiki.centos.org/AdditionalResources/Repositories/SCL was also erroring out temporarily last week.",
      "RedHat wiki is back up, I kicked the link check job.",
      "Moving to draft to make sure we handle [PYTHON-3273](https://jira.mongodb.org/browse/PYTHON-3273) and [PYTHON-3237](https://jira.mongodb.org/browse/PYTHON-3237).",
      "Opend https://jira.mongodb.org/browse/PYTHON-3292 to track the removal of the workaround for the failing test."
    ],
    "commit_messages": [
      "PYTHON-2683 Convert change stream spec tests to unified test format (#950)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93b44ee515ce6a4b0f9",
    "number": 949,
    "body": null,
    "head_branch": "PYTHON-3234",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93b44ee515ce6a4b0fa",
    "number": 948,
    "body": null,
    "head_branch": "PYTHON-3254",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3254 Bump maxWireVersion for MongoDB 6.0 (#948)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93c44ee515ce6a4b0fb",
    "number": 947,
    "body": null,
    "head_branch": "PYTHON-3081",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3276 [pymongo] FLE 1.0 shared library (#947)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93d44ee515ce6a4b0fc",
    "number": 946,
    "body": "A small docs improvement for https://jira.mongodb.org/browse/PYTHON-3259.",
    "head_branch": "PYTHON-3259",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3259 Improve migration guide for loads/JSONOptions/tz_aware (#946)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93e44ee515ce6a4b0fd",
    "number": 945,
    "body": "https://jira.mongodb.org/browse/PYTHON-3260\r\n\r\nFor test_continuous_network_errors, I raised the server selection timeout a bit and also raised the delta from 10 to 15.\r\n\r\nFor test_transaction_starts_with_batched_write, I reduced the amount of data written from ~100 MB to ~48MB and also utilized RawBSONDocuments to speed up the bulk_write call. These changes reduce the amount of work required in the transaction and so should lead to TransactionExceededLifetimeLimitSeconds errors.",
    "head_branch": "PYTHON-3260",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3260 Improve test_transaction_starts_with_batched_write and test_continuous_network_errors (#945)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc93f44ee515ce6a4b0fe",
    "number": 944,
    "body": "https://jira.mongodb.org/browse/PYTHON-3257\r\n\r\nThis change fixes a regression in pymongo 4.0.\r\n```python\r\n$ cat fork_test.py \r\nfrom os import fork\r\nfrom pymongo import MongoClient, errors\r\n\r\n# Create client in parent (before fork).\r\nclient = MongoClient()\r\nclient.admin.command('ping')\r\npid = fork()\r\nif pid:\r\n    print('parent exiting')\r\nelse:\r\n    print('ping in child:')\r\n    for i in range(1, 50):\r\n        try:\r\n            print(client.admin.command('ping'))\r\n            break\r\n        except errors.AutoReconnect as exc:\r\n            print(f'failure {i}: {exc}')\r\n```\r\n\r\nOutput before this change:\r\n```\r\n$ python fork_test.py\r\nparent exiting\r\nping in child:\r\n/Users/shane/git/mongo-python-driver/pymongo/topology.py:177: UserWarning: MongoClient opened before fork. Create MongoClient only after forking. See PyMongo's documentation for details: https://pymongo.readthedocs.io/en/stable/faq.html#is-pymongo-fork-safe\r\n  \"MongoClient opened before fork. Create MongoClient only \"\r\nfailure 1: localhost:27017: connection pool paused\r\nfailure 2: localhost:27017: connection pool paused\r\n{'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1652133036, 1), 'signature': {'hash': b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00', 'keyId': 0}}, 'operationTime': Timestamp(1652133036, 1)}\r\n```\r\n\r\nAfter this change:\r\n```\r\n$ python fork_test.py\r\nparent exiting\r\nping in child:\r\n/Users/shane/git/mongo-python-driver/pymongo/topology.py:178: UserWarning: MongoClient opened before fork. Create MongoClient only after forking. See PyMongo's documentation for details: https://pymongo.readthedocs.io/en/stable/faq.html#is-pymongo-fork-safe\r\n  \"MongoClient opened before fork. Create MongoClient only \"\r\n{'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1652133136, 1), 'signature': {'hash': b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00', 'keyId': 0}}, 'operationTime': Timestamp(1652133136, 1)}\r\n```",
    "head_branch": "PYTHON-3257",
    "is_a_fork": true,
    "comments": [
      "Note that we used to test our behavior on fork but we removed it in https://github.com/mongodb/mongo-python-driver/commit/677b9c8130a35855967214df2140630ab52ff66e because it would often deadlock. We will add back testing once we start working on  https://jira.mongodb.org/browse/PYTHON-2484.",
      "This issue still occurs in 4.1.1, but disappears after upgrading to 4.2.0.",
      "Correct, this fix was released in 4.2.0. You can view the \"fix version\" on the Jira ticket here: https://jira.mongodb.org/browse/PYTHON-3257"
    ],
    "commit_messages": [
      "PYTHON-3257 Fix \"connection pool paused\" errors in child after fork (#944)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94044ee515ce6a4b0ff",
    "number": 943,
    "body": "Fixes https://jira.mongodb.org/browse/PYTHON-3065.\r\n\r\nExplanation:\r\n\r\nPYTHON-3065 looked like a flakey test but is actually a real bug. With some extra logging the test failure looks like this:\r\n```\r\ntest_direct-connection-false (test.test_dns.TestDNSRepl) ... _ensure_opened: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: Unknown, servers: [<ServerDescription ('localhost.test.build.10gen.cc', 27017) server_type: Unknown, rtt: None>]>\r\n\r\nMongoClient(mongodb+srv://test3.test.build.10gen.cc/?directConnection=false, **{'tlsCertificateKeyFile': '/Users/shane/git/mongo-python-driver/test/certificates/client.pem', 'tlsCAFile': '/Users/shane/git/mongo-python-driver/test/certificates/ca.pem', 'tlsAllowInvalidHostnames': True, 'appname': 'test_direct-connection-false'})\r\n_process_change: <ServerDescription ('localhost.test.build.10gen.cc', 27017) server_type: RSSecondary, rtt: 0.001449183000000076>\r\n_process_change, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetNoPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None>, <ServerDescription ('localhost', 27018) server_type: Unknown, rtt: None>, <ServerDescription ('localhost', 27019) server_type: Unknown, rtt: None>]>\r\n_process_change: <ServerDescription ('localhost', 27017) server_type: RSSecondary, rtt: 0.0010720439999998277>\r\n_process_change, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetNoPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: RSSecondary, rtt: 0.0010720439999998277>, <ServerDescription ('localhost', 27018) server_type: Unknown, rtt: None>, <ServerDescription ('localhost', 27019) server_type: Unknown, rtt: None>]>\r\n_process_change: <ServerDescription ('localhost', 27019) server_type: RSSecondary, rtt: 0.001547292999999783>\r\n_process_change, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetNoPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: RSSecondary, rtt: 0.0010720439999998277>, <ServerDescription ('localhost', 27018) server_type: Unknown, rtt: None>, <ServerDescription ('localhost', 27019) server_type: RSSecondary, rtt: 0.001547292999999783>]>\r\n_process_change: <ServerDescription ('localhost', 27018) server_type: RSPrimary, rtt: 0.0009001800000003612>\r\n_process_change, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetWithPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: RSSecondary, rtt: 0.0010720439999998277>, <ServerDescription ('localhost', 27018) server_type: RSPrimary, rtt: 0.0009001800000003612>, <ServerDescription ('localhost', 27019) server_type: RSSecondary, rtt: 0.001547292999999783>]>\r\n_process_srv_update: [('localhost.test.build.10gen.cc', 27017)]\r\n_process_srv_update, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetWithPrimary, servers: [<ServerDescription ('localhost.test.build.10gen.cc', 27017) server_type: Unknown, rtt: None>]>\r\n_process_change: <ServerDescription ('localhost.test.build.10gen.cc', 27017) server_type: RSSecondary, rtt: 0.0012669780000003072>\r\n_process_change, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetNoPrimary, servers: []>\r\nFAIL\r\n...\r\nFAIL: test_direct-connection-false (test.test_dns.TestDNSRepl)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_dns.py\", line 134, in run_test\r\n    wait_until(lambda: hosts == client.nodes, \"match test hosts to client nodes\")\r\nAssertionError: Didn't ever match test hosts to client nodes\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_dns.py\", line 136, in run_test\r\n    self.assertEqual(hosts, client.nodes)\r\nAssertionError: Items in the first set but not the second:\r\n('localhost', 27019)\r\n('localhost', 27017)\r\n('localhost', 27018)\r\n```\r\n\r\nThe key bits are these lines:\r\n```\r\n_process_change, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetWithPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: RSSecondary, rtt: 0.0010720439999998277>, <ServerDescription ('localhost', 27018) server_type: RSPrimary, rtt: 0.0009001800000003612>, <ServerDescription ('localhost', 27019) server_type: RSSecondary, rtt: 0.001547292999999783>]>\r\n_process_srv_update: [('localhost.test.build.10gen.cc', 27017)]\r\n_process_srv_update, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetWithPrimary, servers: [<ServerDescription ('localhost.test.build.10gen.cc', 27017) server_type: Unknown, rtt: None>]>\r\n_process_change: <ServerDescription ('localhost.test.build.10gen.cc', 27017) server_type: RSSecondary, rtt: 0.0012669780000003072>\r\n_process_change, new: <TopologyDescription id: 6275bd337ad1d299c0eefa54, topology_type: ReplicaSetNoPrimary, servers: []>\r\n```\r\n\r\nThe topology has already been discovered to be ReplicaSetWithPrimary and then the delayed SrvMonitor update comes in. _process_srv_update mistakenly updates the topology to ReplicaSetWithPrimary with an unknown server causing the next response to remove the server.\r\n\r\nThe fix is to ignore the srv update when we know the topology is not Unknown and not Sharded.",
    "head_branch": "PYTHON-3065",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3065 Ignore SRV polling update when topology is discovered to be a replica set (#943)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94044ee515ce6a4b100",
    "number": 942,
    "body": "https://jira.mongodb.org/browse/PYTHON-3230",
    "head_branch": "PYTHON-3230",
    "is_a_fork": true,
    "comments": [
      "Patch build here: https://spruce.mongodb.com/version/62755f72850e611c54978a9c/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC"
    ],
    "commit_messages": [
      "PYTHON-3230 Migrate to newer zSeries, POWER8, and ARM platforms (#942)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94144ee515ce6a4b101",
    "number": 941,
    "body": null,
    "head_branch": "PYTHON-3091",
    "is_a_fork": true,
    "comments": [
      "@blink1073 can we close this PR as won't do?",
      "Done"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94244ee515ce6a4b102",
    "number": 940,
    "body": "https://evergreen.mongodb.com/version/627451f20ae6061e5d6d3fe3",
    "head_branch": "PYTHON-3742",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3242 Test against MongoDB 6.0 (#940)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94344ee515ce6a4b103",
    "number": 939,
    "body": null,
    "head_branch": "PYTHON-3235",
    "is_a_fork": true,
    "comments": [
      "Running a bigger patch build to make sure all the tasks that use system \"python3\" are using 3.7+."
    ],
    "commit_messages": [
      "PYTHON-3235 Drop support for Python 3.6 (#939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94444ee515ce6a4b104",
    "number": 938,
    "body": null,
    "head_branch": "PYTHON-3167",
    "is_a_fork": true,
    "comments": [
      "Fixes this mockupdb failure: \r\n```\r\n [2022/05/03 02:19:00.604] FAIL: test_estimated_document_count (test_mixed_version_sharded.TestMixedVersionSharded)\r\n [2022/05/03 02:19:00.604] ----------------------------------------------------------------------\r\n [2022/05/03 02:19:00.604] Traceback (most recent call last):\r\n [2022/05/03 02:19:00.604]   File \"/data/mci/f4b8464dc14af947152548ddabec981b/src/test/mockupdb/test_mixed_version_sharded.py\", line 71, in test\r\n [2022/05/03 02:19:00.604]     upgrade.old if request.server is self.mongos_old else upgrade.new\r\n [2022/05/03 02:19:00.604]   File \"/data/mci/f4b8464dc14af947152548ddabec981b/src/mockuptests/lib/python3.6/site-packages/mockupdb/__init__.py\", line 427, in assert_matches\r\n [2022/05/03 02:19:00.604]     raise AssertionError('%r does not match %r' % (self, matcher))\r\n [2022/05/03 02:19:00.604] AssertionError: OpMsg({\"count\": \"collection\", \"$db\": \"db\"}, namespace=\"db\") does not match Matcher(OpMsg({\"aggregate\": \"collection\"}, namespace=\"db\"))\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3167 Fix mockupdb tests for estimated_document_count (#938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94544ee515ce6a4b105",
    "number": 937,
    "body": "Minor change to improve the error behavior in https://jira.mongodb.org/browse/PYTHON-3251. \r\n\r\nBefore this change:\r\n```\r\n>>> uri_parser.parse_uri('mongodb://mongo-service:27017 ')\r\n...\r\nValueError: Port must be an integer between 0 and 65535: 27017 \r\n```\r\n\r\nAfter this change:\r\n```\r\n>>> uri_parser.parse_uri('mongodb://mongo-service:27017 ')\r\n...\r\nValueError: Port must be an integer between 0 and 65535: '27017 '\r\n```",
    "head_branch": "PYTHON-3251",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3251 Make extra whitespace visible in invalid port exception (#937)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94644ee515ce6a4b106",
    "number": 936,
    "body": "This shaves off anywhere from 1 minute to **16 minutes** from the test suite on macos depending of the server version and topology: https://spruce.mongodb.com/task/mongo_python_driver_test_macos__platform~macos_1014_auth~auth_ssl~ssl_test_4.2_replica_set_patch_05b55e88dfa1636511eeeac56d4a75593a76fbeb_6270a5ab5623434c42b90339_22_05_03_03_46_53/tests?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nOn \"macOS 10.14 Auth SSL\" alone this change saves 67 minutes of execution time (Time Spent 3h 32m vs 4h 25m).\r\n",
    "head_branch": "PYTHON-3250",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3250 Speed up majority writes in test suite (#936)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94744ee515ce6a4b107",
    "number": 935,
    "body": null,
    "head_branch": "PYTHON-3247",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3247 Mitigate user issues caused by change in directConnection defaults in 4.x (#935)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94744ee515ce6a4b108",
    "number": 934,
    "body": "This change implements https://jira.mongodb.org/browse/PYTHON-3167 and fixes https://jira.mongodb.org/browse/PYTHON-2885. By resyncing the spec tests for crud, stable-api, retryable-reads, and atlas-data-lake-testing this change also resolves:\r\n- https://jira.mongodb.org/browse/PYTHON-3166\r\n- https://jira.mongodb.org/browse/PYTHON-3224\r\n- https://jira.mongodb.org/browse/PYTHON-3219",
    "head_branch": "PYTHON-3167",
    "is_a_fork": true,
    "comments": [
      "LGTM!"
    ],
    "commit_messages": [
      "PYTHON-3167 Revert to using the count command for estimated_document_count (#934)\n\nResolves PYTHON-2885, PYTHON-3166, PYTHON-3224, and PYTHON-3219."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94844ee515ce6a4b109",
    "number": 933,
    "body": null,
    "head_branch": "PYTHON-3038",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3038 The doc should clarify that the resulting documents that are produced with upserts are constructed from both the filter and the update params (#933)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94944ee515ce6a4b10a",
    "number": 932,
    "body": null,
    "head_branch": "PYTHON-3243",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3243 Pin version of mypy used (#932)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94a44ee515ce6a4b10b",
    "number": 931,
    "body": null,
    "head_branch": "PYTHON-3194",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3194 Adopt doc8 checker (#931)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94b44ee515ce6a4b10c",
    "number": 930,
    "body": null,
    "head_branch": "PYTHON-3228",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3228 _tmp_session should validate session input (#930)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94c44ee515ce6a4b10d",
    "number": 929,
    "body": "Fixes failing FLE tests on latest.\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-3221",
    "head_branch": "PYTHON-3221",
    "is_a_fork": true,
    "comments": [
      "Code changes look good, but it looks like this introduced failures in \"latest\".",
      "Tests passing now, merging."
    ],
    "commit_messages": [
      "PYTHON-3221 Resync CSFLE spec tests (#929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94c44ee515ce6a4b10e",
    "number": 928,
    "body": "https://jira.mongodb.org/browse/PYTHON-3225\r\n\r\nI thought it simpler to stop testing this case altogether rather than try to parse which version supports it or not. The driver doesn't do anything different for a capped collection anyway.",
    "head_branch": "PYTHON-3225",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3225 Stop testing delete on capped collections (#928)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94d44ee515ce6a4b10f",
    "number": 927,
    "body": "https://jira.mongodb.org/browse/PYTHON-3222\r\n\r\nThis change fixes a number of issues:\r\n\r\n1. Fixes a memory leak of CodecOptions() in C extension's default_codec_options function. The leak occurs when not passing a CodecOptions to decode_all, (ie `decode_all(data)` or  `decode_all(data, None)`).\r\n1. Fixes support for keyword argument codec_options for bson.decode_all.\r\n1. Fixes a documentation issue where bson.decode_all was not showing up in the docs page.\r\n1. Adds the changelog for 4.1.1",
    "head_branch": "PYTHON-3222",
    "is_a_fork": true,
    "comments": [
      "I have still some memory leak in decode_all in pymongo==4.1.1, python 3.6.9 .\r\nShould I upgrade python version?",
      "@Krsnik0, please post the code that reproduces the leak and we will create a new issue for it.",
      "> @Krsnik0, please post the code that reproduces the leak and we will create a new issue for it.\r\n\r\n@ShaneHarvey \r\nI have large nested document, and I wanted to load my data on memory.\r\n\r\nif i load my data with `list(collection.find())`, `bson/__init__.py:1048` consumes all memory and do not free it until process die.\r\nI did `del data`, `gc.collect()`, run code in scope, but decode_all hold memory even after data loading\r\n\r\nbut when i load data with `json.loads(json_util.dumps(collection.find()))` , process consumes less memory and gc work properly.\r\nalso i use other serializer like orjson instead of json, it consumes smaller memory\r\n\r\ni trace memory with `tracemalloc.take_snapshot()`  and it shows me `bson/__init__.py:1048` use too much resources\r\n(_decode_all write on 1048 lines)\r\n\r\np.s. testing env is pymongo==4.1.1, python 3.6.9, and i checked _USE_C is True\r\n\r\ni'm not sure this is right information you want. please tell me if you need more specific case",
      "@Krsnik0 I am unable to reproduce a leak using the information you provided. Can you post a python script that reproduces the issue? If you install pymongo 4.1.1 without the C extensions (`python3.6 -m pip install --upgrade --install-option=\"--no_ext\" pymongo==4.1.1`) do you see the same behavior?",
      "@ShaneHarvey Problem solved :) Thank you for you time! "
    ],
    "commit_messages": [
      "PYTHON-3222 Fix memory leak in cbson decode_all (#927)\n\nAdd decode_all keyword arg for codec_options.\r\nMake decode_all show up in docs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94e44ee515ce6a4b110",
    "number": 926,
    "body": null,
    "head_branch": "PYTHON-3197",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3197 Update docs.mongodb.com links in source, API & Reference documentation (#926)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc94f44ee515ce6a4b111",
    "number": 925,
    "body": null,
    "head_branch": "PYTHON-3219",
    "is_a_fork": true,
    "comments": [
      "This was done in https://github.com/mongodb/mongo-python-driver/pull/934"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95044ee515ce6a4b112",
    "number": 924,
    "body": null,
    "head_branch": "PYTHON-3189",
    "is_a_fork": true,
    "comments": [
      "Both failures are transient (centos URL and `test_dns.TestDNSRepl.test_loadBalanced-false-txt`)."
    ],
    "commit_messages": [
      "PYTHON-3189 Change Stream event document missing to field for rename events (#924)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95144ee515ce6a4b113",
    "number": 923,
    "body": "https://jira.mongodb.org/browse/PYTHON-3216\r\n\r\n```\r\nunzip -l dist/pymongo-4.2.0.dev0-cp37-cp37m-macosx_10_9_x86_64.whl | grep '.pyi'\r\n     3331  04-05-2022 20:40   bson/codec_options.pyi\r\n```",
    "head_branch": "PYTHON-3216",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3216 Include codec_options.pyi in release distributions (#923)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95244ee515ce6a4b114",
    "number": 922,
    "body": "https://jira.mongodb.org/browse/PYTHON-3210",
    "head_branch": "PYTHON-3210",
    "is_a_fork": true,
    "comments": [
      "Merging since the tests passed and there's not much to review."
    ],
    "commit_messages": [
      "PYTHON-3210 Remove flakey string assertion from invalid aws creds FLE test (#922)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95244ee515ce6a4b115",
    "number": 921,
    "body": "The typing markers should be declared in the `package_data` to get picked up and packaged into the distributed wheels.",
    "head_branch": "fix-missing-typing-markers",
    "is_a_fork": true,
    "comments": [
      "> Thanks for fixing this! LGTM according to https://peps.python.org/pep-0561/#packaging-type-information and double checked the wheel:\r\n> \r\n> ```\r\n>  unzip -l dist/pymongo-4.2.0.dev0-cp37-cp37m-macosx_10_9_x86_64.whl| grep py.typed\r\n>       170  04-05-2022 20:40   bson/py.typed\r\n>       170  04-05-2022 20:40   gridfs/py.typed\r\n>       170  04-05-2022 20:40   pymongo/py.typed\r\n> ```\r\n\r\nNo prob, had done the same but good to see it packaged the same on a different arch :wink:! Glad to have types included :muscle:  "
    ],
    "commit_messages": [
      "PYTHON-3214 Fix typing markers not being included in the distribution (#921)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95344ee515ce6a4b116",
    "number": 920,
    "body": "https://jira.mongodb.org/browse/PYTHON-3198",
    "head_branch": "PYTHON-3198",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3198 Fix NameError: name sys is not defined (#920)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95444ee515ce6a4b117",
    "number": 919,
    "body": "Line 1446 of this file originally read as follows:\r\n> \"`filter` (optional): a SON object specifying elements...\"\r\n\r\nI believe \"SON\" is a typo for \"JSON\", so have updated it to read as follows:\r\n> \"`filter` (optional): a JSON object specifying elements...\"",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hi @dunkOnIT, [`SON`](https://pymongo.readthedocs.io/en/stable/api/bson/son.html#bson.son.SON) is a custom class in `bson`, effectively an ordered dictionary.",
      "Haha! I did write this PR in fear that I would display my ignorance - a well-founded fear, it seems :P \r\n\r\nThere may be merit in disambiguating for newbies like me by linking to the `bson` documentation, although in practical terms I'm not sure how much additional value that provides. \r\n\r\nIts something I'm happy to do if you feel it would add value, but I'm also comfortable if you close this issue.\r\n\r\nThanks!",
      "Sounds good!  It would be:\r\n\r\n```\r\n:class:`~bson.son.SON`\r\n```",
      "Test failure is being tracked in https://jira.mongodb.org/browse/PYTHON-3188",
      "Thanks for the opportunity to contribute! (I presume test failures aren't for me to worry about, given that they predate this PR?)",
      "> (I presume test failures aren't for me to worry about, given that they predate this PR?)\r\n\r\nThat's right, we're already working on that one separately."
    ],
    "commit_messages": [
      "Improve docstrings for SON parameters (#919)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95544ee515ce6a4b118",
    "number": 918,
    "body": null,
    "head_branch": "PYTHON-3080",
    "is_a_fork": true,
    "comments": [
      "I verified that it renders correctly by doing building the docs locally with sphinx. ",
      "My git configuration for this branch is very messed up--I think I'm just going to blow it all away and restart. ",
      "Huh, we have `fail_on_warning` set in our readthedocs config, not sure why that isn't being honored."
    ],
    "commit_messages": [
      "PYTHON-3080 Add section to troubleshooting FAQ per driver with top SEO results (#918)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95644ee515ce6a4b119",
    "number": 917,
    "body": null,
    "head_branch": "PYTHON-3190",
    "is_a_fork": true,
    "comments": [
      "I scheduled a Doctests task"
    ],
    "commit_messages": [
      "PYTHON-3190 Test Failure - doctests failing cannot import name 'TypedDict' (#917)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95744ee515ce6a4b11a",
    "number": 916,
    "body": "https://jira.mongodb.org/browse/PYTHON-3191",
    "head_branch": "PYTHON-3191",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3191 Fix test_sigstop_sigcont with Versioned API (#916)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95844ee515ce6a4b11b",
    "number": 915,
    "body": null,
    "head_branch": "changelog-4.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Improve the changelog for 4.1 (#915)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95844ee515ce6a4b11c",
    "number": 914,
    "body": "https://jira.mongodb.org/browse/PYTHON-3160",
    "head_branch": "PYTHON-3160",
    "is_a_fork": true,
    "comments": [
      "Opened https://jira.mongodb.org/browse/PYTHON-3188 for the encryption failures."
    ],
    "commit_messages": [
      "PYTHON-3160 Fix MMAPv1 tests (#914)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95944ee515ce6a4b11d",
    "number": 913,
    "body": null,
    "head_branch": "PYTHON-2406",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2406 Clean up of tools documentation page (#913)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95a44ee515ce6a4b11e",
    "number": 912,
    "body": "Poll monitor socket with timeout=0 one last time after timeout expires.\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-3186",
    "head_branch": "PYTHON-3186",
    "is_a_fork": true,
    "comments": [
      "Oof, the test fails on macOS in a similar way to Windows. I'm going to try and rewrite the test to use subprocess.Popen instead of multiprocessing.",
      "Updated the test to use Popen which should hopefully work across all platforms. Without the changes to network.py this test fails, like this:\r\n```\r\nFAIL: test_sigstop_sigcont (test.test_client.TestClient)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_client.py\", line 1724, in test_sigstop_sigcont\r\n    self.assertNotIn(\"ServerHeartbeatFailedEvent\", log_output)\r\nAssertionError: 'ServerHeartbeatFailedEvent' unexpectedly found in \"2022-03-30 12:52:10,314 INFO <ServerHeartbeatStartedEvent ('localhost', 27018)>\\n2022-03-30 12:52:10,316 INFO <ServerHeartbeatSucceededEvent ('localhost', 27018) duration: 0.0005846569547429681, awaited: False, reply: <pymongo.hello.Hello object at 0x7f7c2e628778>>\\n2022-03-30 12:52:10,316 INFO <ServerHeartbeatStartedEvent ('localhost', 27017)>\\n2022-03-30 12:52:10,317 INFO <ServerHeartbeatStartedEvent ('localhost', 27019)>\\n2022-03-30 12:52:10,317 INFO <ServerHeartbeatStartedEvent ('localhost', 27018)>\\n2022-03-30 12:52:10,319 INFO <ServerHeartbeatSucceededEvent ('localhost', 27017) duration: 0.0010778519790619612, awaited: False, reply: <pymongo.hello.Hello object at 0x7f7c2e63ca98>>\\n2022-03-30 12:52:10,319 INFO <ServerHeartbeatSucceededEvent ('localhost', 27019) duration: 0.000964289007242769, awaited: False, reply: <pymongo.hello.Hello object at 0x7f7c2e63cb38>>\\n2022-03-30 12:52:10,320 INFO TEST STARTED\\n2022-03-30 12:52:10,320 INFO <ServerHeartbeatStartedEvent ('localhost', 27019)>\\n2022-03-30 12:52:10,320 INFO <ServerHeartbeatStartedEvent ('localhost', 27017)>\\n2022-03-30 12:52:10,823 INFO <ServerHeartbeatSucceededEvent ('localhost', 27018) duration: 0.5050969959702343, awaited: True, reply: <pymongo.hello.Hello object at 0x7f7c2e63c9f8>>\\n2022-03-30 12:52:10,823 INFO <ServerHeartbeatStartedEvent ('localhost', 27018)>\\n2022-03-30 12:52:10,825 INFO <ServerHeartbeatSucceededEvent ('localhost', 27019) duration: 0.5044320530141704, awaited: True, reply: <pymongo.hello.Hello object at 0x7f7c2e63cb38>>\\n2022-03-30 12:52:10,825 INFO <ServerHeartbeatStartedEvent ('localhost', 27019)>\\n2022-03-30 12:52:10,825 INFO <ServerHeartbeatSucceededEvent ('localhost', 27017) duration: 0.5047361569595523, awaited: True, reply: <pymongo.hello.Hello object at 0x7f7c2e63cc78>>\\n2022-03-30 12:52:10,826 INFO <ServerHeartbeatStartedEvent ('localhost', 27017)>\\n2022-03-30 12:52:13,172 WARNING <ServerHeartbeatFailedEvent ('localhost', 27017) duration: 2.3468628809787333, awaited: {'processId': ObjectId('623ba99b307680f47072b66b'), 'counter': 167}, reply: NetworkTimeout('localhost:27017: timed out',)>\\n2022-03-30 12:52:13,173 INFO <ServerHeartbeatStartedEvent ('localhost', 27017)>\\n2022-03-30 12:52:13,174 WARNING <ServerHeartbeatFailedEvent ('localhost', 27018) duration: 2.35050753201358, awaited: {'processId': ObjectId('623ba99d6151e1c236bf8fb8'), 'counter': 155}, reply: NetworkTimeout('localhost:27018: timed out',)>\\n2022-03-30 12:52:13,174 INFO <ServerHeartbeatStartedEvent ('localhost', 27018)>\\n2022-03-30 12:52:13,174 WARNING <ServerHeartbeatFailedEvent ('localhost', 27019) duration: 2.349525861965958, awaited: {'processId': ObjectId('623ba99fb7b95b1439017c72'), 'counter': 66}, reply: NetworkTimeout('localhost:27019: timed out',)>\\n2022-03-30 12:52:13,175 INFO <ServerHeartbeatStartedEvent ('localhost', 27019)>\\n2022-03-30 12:52:13,177 INFO <ServerHeartbeatSucceededEvent ('localhost', 27017) duration: 0.001169831957668066, awaited: False, reply: <pymongo.hello.Hello object at 0x7f7c2e65f228>>\\n2022-03-30 12:52:13,178 INFO <ServerHeartbeatSucceededEvent ('localhost', 27018) duration: 0.0011216229759156704, awaited: False, reply: <pymongo.hello.Hello object at 0x7f7c2e65f318>>\\n2022-03-30 12:52:13,178 INFO <ServerHeartbeatStartedEvent ('localhost', 27017)>\\n2022-03-30 12:52:13,178 INFO <ServerHeartbeatStartedEvent ('localhost', 27018)>\\n2022-03-30 12:52:13,178 INFO <ServerHeartbeatSucceededEvent ('localhost', 27019) duration: 0.001337455993052572, awaited: False, reply: <pymongo.hello.Hello object at 0x7f7c2e63c908>>\\n2022-03-30 12:52:13,179 INFO <ServerHeartbeatStartedEvent ('localhost', 27019)>\\n2022-03-30 12:52:13,679 INFO TEST COMPLETED\\n\"\r\n```",
      "Tests should finally be passing now, besides the link checker which just started failing."
    ],
    "commit_messages": [
      "PYTHON-3186 Avoid SDAM heartbeat timeouts on AWS Lambda (#912)\n\nPoll monitor socket with timeout=0 one last time after timeout expires.\r\nThis avoids heartbeat timeouts and connection churn on Lambda and other FaaS envs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95b44ee515ce6a4b11f",
    "number": 911,
    "body": null,
    "head_branch": "PYTHON-3185",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3185 Pre-Commit Needs an Upgrade (#911)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95c44ee515ce6a4b120",
    "number": 910,
    "body": "https://jira.mongodb.org/browse/PYTHON-3138\r\n\r\nI inlined part of the mongodump example for convenience.",
    "head_branch": "PYTHON-3138",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3138 copydb was removed in MongoDB 4.2 (#910)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95d44ee515ce6a4b121",
    "number": 909,
    "body": "As noted in PYTHON-3084, this was the only way to get the typing.Iterable instance check to fail. We could also remove `__next__`+`next` (from client/Database only) but I kept them around so that users get better error messages `TypeError: 'MongoClient' object is not iterable` vs `TypeError: name must be an instance of str`.",
    "head_branch": "PYTHON-3084",
    "is_a_fork": true,
    "comments": [
      "Ah it turns out this approach does not work quite the same on PyPy. I'm not surprised since it feels like an undefined behavior hack:\r\n```\r\nFAIL: test_iteration (test_client.ClientUnitTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/runner/work/mongo-python-driver/mongo-python-driver/test/test_client.py\", line 216, in test_iteration\r\n    for _ in client:  # type: ignore[misc] # error: \"None\" not callable  [misc]\r\nTypeError: 'NoneType' object is not callable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/runner/work/mongo-python-driver/mongo-python-driver/test/test_client.py\", line 217, in test_iteration\r\n    break\r\nAssertionError: \"'MongoClient' object is not iterable\" does not match \"'NoneType' object is not callable\"\r\n```\r\n\r\n",
      "With further research it appears that setting `__iter__ = None` is actually well defined behavior:\r\n> Setting a special method to None indicates that the corresponding operation is not available. For example, if a class sets [__iter__()](https://docs.python.org/3/reference/datamodel.html#object.__iter__) to None, the class is not iterable, so calling [iter()](https://docs.python.org/3/library/functions.html#iter) on its instances will raise a [TypeError](https://docs.python.org/3/library/exceptions.html#TypeError) (without falling back to [__getitem__()](https://docs.python.org/3/reference/datamodel.html#object.__getitem__)). [2](https://docs.python.org/3/reference/datamodel.html#id9)\r\n\r\nhttps://docs.python.org/3/reference/datamodel.html#special-method-names\r\n\r\nThis is exactly the behavior we want so I'll adjust the assertions to pass on PyPy."
    ],
    "commit_messages": [
      "PYTHON-3084 MongoClient/Database/Collection should not implement Iterable (#909)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95e44ee515ce6a4b122",
    "number": 908,
    "body": null,
    "head_branch": "PYTHON-3058",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3058 Bump maxWireVersion for MongoDB 5.2 (#908)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95f44ee515ce6a4b123",
    "number": 907,
    "body": null,
    "head_branch": "PYTHON-3127",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3127 Snapshot Query Examples for the Manual (#907)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc95f44ee515ce6a4b124",
    "number": 906,
    "body": null,
    "head_branch": "PYTHON-3074",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3074 Add documentation for type hints (#906)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96044ee515ce6a4b125",
    "number": 905,
    "body": "patch: https://spruce.mongodb.com/version/623a349d2a60ed2bb7690aa4/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "PYTHON-3180",
    "is_a_fork": true,
    "comments": [
      "Waiting for the tests to pass to make sure the v3 toolchain exists.",
      "The perf tests are working:\r\n```\r\n [2022/03/22 20:51:00.078] Collecting simplejson\r\n [2022/03/22 20:51:00.078]   Downloading simplejson-3.17.6-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (130 kB)\r\n [2022/03/22 20:51:00.103]      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 130.3/130.3 KB 5.9 MB/s eta 0:00:00\r\n [2022/03/22 20:51:00.241] Installing collected packages: simplejson\r\n [2022/03/22 20:51:00.241] Successfully installed simplejson-3.17.6\r\n [2022/03/22 20:51:01.502] running build_ext\r\n [2022/03/22 20:51:01.502] building 'bson._cbson' extension\r\n [2022/03/22 20:51:01.502] creating build\r\n [2022/03/22 20:51:01.502] creating build/temp.linux-x86_64-3.7\r\n [2022/03/22 20:51:01.503] creating build/temp.linux-x86_64-3.7/bson\r\n [2022/03/22 20:51:01.503] gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -DNDEBUG -g -fwrapv -O3 -I/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/include -fPIC -Ibson -I/srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/pyperftest/include/python3.7m -c bson/_cbsonmodule.c -o build/temp.linux-x86_64-3.7/bson/_cbsonmodule.o\r\n [2022/03/22 20:51:02.173] gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -DNDEBUG -g -fwrapv -O3 -I/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/include -fPIC -Ibson -I/srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/pyperftest/include/python3.7m -c bson/buffer.c -o build/temp.linux-x86_64-3.7/bson/buffer.o\r\n [2022/03/22 20:51:02.243] gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -DNDEBUG -g -fwrapv -O3 -I/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/include -fPIC -Ibson -I/srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/pyperftest/include/python3.7m -c bson/encoding_helpers.c -o build/temp.linux-x86_64-3.7/bson/encoding_helpers.o\r\n [2022/03/22 20:51:02.264] gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -DNDEBUG -g -fwrapv -O3 -I/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/include -fPIC -Ibson -I/srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/pyperftest/include/python3.7m -c bson/time64.c -o build/temp.linux-x86_64-3.7/bson/time64.o\r\n [2022/03/22 20:51:02.446] gcc -shared -Wl,--enable-new-dtags,-rpath=/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/python3-v3.lJe/lib -Wl,--enable-new-dtags,-rpath=/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/lib -L/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/lib -lssl -lcrypto build/temp.linux-x86_64-3.7/bson/_cbsonmodule.o build/temp.linux-x86_64-3.7/bson/buffer.o build/temp.linux-x86_64-3.7/bson/encoding_helpers.o build/temp.linux-x86_64-3.7/bson/time64.o -L/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/python3-v3.lJe/lib -o /srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/bson/_cbson.cpython-37m-x86_64-linux-gnu.so\r\n [2022/03/22 20:51:02.956] building 'pymongo._cmessage' extension\r\n [2022/03/22 20:51:02.956] creating build/temp.linux-x86_64-3.7/pymongo\r\n [2022/03/22 20:51:02.956] gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -DNDEBUG -g -fwrapv -O3 -I/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/include -fPIC -Ibson -I/srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/pyperftest/include/python3.7m -c bson/buffer.c -o build/temp.linux-x86_64-3.7/bson/buffer.o\r\n [2022/03/22 20:51:03.025] gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -DNDEBUG -g -fwrapv -O3 -I/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/include -fPIC -Ibson -I/srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/pyperftest/include/python3.7m -c pymongo/_cmessagemodule.c -o build/temp.linux-x86_64-3.7/pymongo/_cmessagemodule.o\r\n [2022/03/22 20:51:03.239] gcc -shared -Wl,--enable-new-dtags,-rpath=/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/python3-v3.lJe/lib -Wl,--enable-new-dtags,-rpath=/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/lib -L/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/openssl.I6m/lib -lssl -lcrypto build/temp.linux-x86_64-3.7/bson/buffer.o build/temp.linux-x86_64-3.7/pymongo/_cmessagemodule.o -L/opt/mongodbtoolchain/revisions/94dac13bc8c0b50beff286acac77adeb2e81761e/stow/python3-v3.lJe/lib -o /srv/10gen/mci-exec/mci/7a3de621b9e0182e3d0c81bc77686eca/src/pymongo/_cmessage.cpython-37m-x86_64-linux-gnu.so\r\n [2022/03/22 20:51:03.293] + python -m pip install simplejson\r\n [2022/03/22 20:51:03.293] + python setup.py build_ext -i\r\n [2022/03/22 20:51:03.293] ++ date +%s\r\n [2022/03/22 20:51:03.293] + start_time=1647982263\r\n```"
    ],
    "commit_messages": [
      "PYTHON-3180 Use server v3 toolchain in perf tests (#905)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96144ee515ce6a4b126",
    "number": 904,
    "body": null,
    "head_branch": "PYTHON-3119",
    "is_a_fork": true,
    "comments": [
      "Changes LGTM so far. Can you resync the tests from https://github.com/mongodb/specifications/pull/1161 too?"
    ],
    "commit_messages": [
      "PYTHON-3119 getMore helper should explicitly send inherited comment (#904)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96244ee515ce6a4b127",
    "number": 903,
    "body": "Using this as a basis for the work in https://github.com/mongodb/mongo-python-driver/pull/896.  There are more typings in that PR that I will backfill here.",
    "head_branch": "PYTHON-3176",
    "is_a_fork": true,
    "comments": [
      "Closing as stale, we will have to redo this work as part of the async refactor"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96344ee515ce6a4b128",
    "number": 902,
    "body": null,
    "head_branch": "PYTHON-3173",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3173 Skip version API test for count (#902)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96444ee515ce6a4b129",
    "number": 901,
    "body": null,
    "head_branch": "PYTHON-3171",
    "is_a_fork": true,
    "comments": [
      "Kicking CI to make sure mypy passes"
    ],
    "commit_messages": [
      "PYTHON-3171 Add usage of NoReturn annotation (#901)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96544ee515ce6a4b12a",
    "number": 900,
    "body": null,
    "head_branch": "PYTHON-3157",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3157 Update Release Documentation to Include Github Releases (#900)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96544ee515ce6a4b12b",
    "number": 899,
    "body": "This code was mistakenly added in PYTHON-2463 (#737).",
    "head_branch": "PYTHON-3174",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3174 Don't reinit client_context.client (#899)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96644ee515ce6a4b12c",
    "number": 898,
    "body": "This change avoids false positives for the main client_context client. I also changed the output to be a little more readable. When the check finds a real problem, the new output looks like this:\r\n```\r\npypy3 setup.py test -s test.test_client.TestClient\r\n...\r\ntest_waitQueueTimeoutMS (test.test_client.TestClient) ... ok\r\n----------------------------------------------------------------------\r\nRan 57 tests in 19.489s\r\n\r\nOK (skipped=9)\r\nWARNING: found Topology with running threads:\r\n  Threads: [<PeriodicExecutor(name=pymongo_server_monitor_thread) object at 0x7facb8231248>, <PeriodicExecutor(name=pymongo_server_rtt_thread) object at 0x7facb8231328>]\r\n  Topology: <Topology <TopologyDescription id: 6230fe16efe40a2b8ad01304, topology_type: ReplicaSetWithPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: RSPrimary, rtt: 0.007118122831045185>]>>\r\n  Creation traceback:\r\n  File \"setup.py\", line 345, in <module>\r\n    **extra_opts\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/site-packages/setuptools-54.2.0-py3.7.egg/setuptools/__init__.py\", line 153, in setup\r\n    return distutils.core.setup(**attrs)\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/distutils/core.py\", line 148, in setup\r\n    dist.run_commands()\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/distutils/dist.py\", line 966, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/distutils/dist.py\", line 985, in run_command\r\n    cmd_obj.run()\r\n  File \"setup.py\", line 122, in run\r\n    result = runner.run(suite)\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 1095, in run\r\n    result = super(PymongoTestRunner, self).run(test)\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/unittest/runner.py\", line 176, in run\r\n    test(result)\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/unittest/suite.py\", line 84, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/unittest/suite.py\", line 122, in run\r\n    test(result)\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/unittest/case.py\", line 676, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/usr/local/Cellar/pypy3/7.3.4/libexec/lib-python/3/unittest/case.py\", line 628, in run\r\n    testMethod()\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 556, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_client.py\", line 1279, in test_exhaust_network_error\r\n    client = rs_or_single_client(maxPoolSize=1, retryReads=False)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils.py\", line 565, in rs_or_single_client\r\n    return _mongo_client(h, p, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils.py\", line 529, in _mongo_client\r\n    return MongoClient(uri, port, **client_options)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 785, in __init__\r\n    srv_max_hosts=srv_max_hosts,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/settings.py\", line 77, in __init__\r\n    self._stack = \"\".join(traceback.format_stack())\r\n```",
    "head_branch": "PYTHON-3174",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3174 Remove noisy running Topology check for main test client (#898)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96744ee515ce6a4b12d",
    "number": 897,
    "body": " (cherry picked from commit 087950d869096cf44a797f6c402985a73ffec16e)",
    "head_branch": "PYTHON-3164-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3164 [v3.13] Outdated link from PyMongo docs to community forum (#897)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc96844ee515ce6a4b12e",
    "number": 896,
    "body": null,
    "head_branch": "PYTHON-3079",
    "is_a_fork": true,
    "comments": [
      "Would a pure `asyncio` implementation not be faster than using threading to avoid blocking on network operations?\r\n\r\nSee https://github.com/sakal/aiomongo:\r\n\r\n> Aiomongo is a rewrite of [Pymongo](https://github.com/mongodb/mongo-python-driver) driver that uses [asyncio](https://docs.python.org/3/library/asyncio.html) for networking. The reason why this client was written is that an alternative [Motor](https://github.com/mongodb/motor) implementation uses thread pool to avoid blocking on network operations. But it appears (see benchmarks below) to work slower than pure asyncio implementation.\r\n\r\n\r\n\r\n\r\n\r\n",
      "Yes, I would expect a pure asyncio approach to be an improvement (both latency and throughput) over the current version of motor. However, we want to make sure we don't degrade the performance of pymongo. So we're also interested in comparing the the current version of pymongo with a version of pymongo built on top of asyncio at the core. This second comparison might not be as cut and dry but the initial perf benchmarks show only a <0.5% throughput decrease which would be acceptable. \r\n\r\nWe have not yet benchmarked this branch vs motor but I imagine the improvement would be similar to aiomongo.",
      "> Yes, I would expect a pure asyncio approach to be an improvement (both latency and throughput) over the current version of motor. However, we want to make sure we don't degrade the performance of pymongo. So we're also interested in comparing the the current version of pymongo with a version of pymongo built on top of asyncio at the core. This second comparison might not be as cut and dry but the initial perf benchmarks show only a <0.5% throughput decrease which would be acceptable.\r\n> \r\n> We have not yet benchmarked this branch vs motor but I imagine the improvement would be similar to aiomongo.\r\n\r\nInteresting, I was initially surprised to find three threads were spawned when using `motor` in one of my projects. It would be interesting to see how a pure asyncio version would perform! Is there anywhere I can subscribe to to track the progress of that?",
      "You can follow https://jira.mongodb.org/browse/PYTHON-3079 (you may need to create a mongodb jira account).",
      "Closing, as the investigation is complete"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96944ee515ce6a4b12f",
    "number": 895,
    "body": null,
    "head_branch": "PYTHON-3164",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3164 Outdated link from PyMongo docs to community forum (#895)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96a44ee515ce6a4b130",
    "number": 894,
    "body": null,
    "head_branch": "PYTHON-3159",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3159 Fix typo in zlib compression support (#894)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96b44ee515ce6a4b131",
    "number": 893,
    "body": "- [x] Make `CodecOptions` and `decode` generic\r\n- [x] Add tests for `decode` that include dict, `RAWBSONDocument`, and custom dict types\r\n- [x] Make `database.command` generic\r\n- [x] Add tests for `database.command`",
    "head_branch": "PYTHON-3085",
    "is_a_fork": true,
    "comments": [
      "> Before adding tests for the namedtuple api, what do you think about only making this \"inherit from tuple\" change when TYPE_CHECKING? \r\n\r\nDone",
      "I bumped the minimum version and scheduled a FIPS build.  If that build passes we can consider [PYTHON-3168](https://jira.mongodb.org/browse/PYTHON-3168) to be fixed.",
      "FIPS passed, but we're now getting this error, I'll look into it tomorrow.\r\n\r\n```\r\n[2022/03/14 22:21:39.972] FAILURE: OperationFailure not raised (AssertionError)\r\n[2022/03/14 22:21:39.972] Traceback (most recent call last):\r\n[2022/03/14 22:21:39.972]   File \"/data/mci/4cea1b66713276ffb9d51b01c40e8ad5/src/test/__init__.py\", line 561, in wrap\r\n[2022/03/14 22:21:39.972]     return f(*args, **kwargs)\r\n[2022/03/14 22:21:39.972]   File \"/data/mci/4cea1b66713276ffb9d51b01c40e8ad5/src/test/test_examples.py\", line 1285, in test_versioned_api_migration\r\n[2022/03/14 22:21:39.972]     client.db.command(\"count\", \"sales\", query={})\r\n[2022/03/14 22:21:39.972] AssertionError: OperationFailure not raised\r\n```",
      "> Let's also update the changelog to warn that we've dropped 3.6.0 and 3.6.1.\r\n\r\nDone"
    ],
    "commit_messages": [
      "PYTHON-3085 Audit consistent and correct types for _DocumentOut (#893)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96b44ee515ce6a4b132",
    "number": 892,
    "body": null,
    "head_branch": "PYTHON-3147",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3147 Fix pip install in MONGODB-AWS auth tests (#892)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96c44ee515ce6a4b133",
    "number": 891,
    "body": null,
    "head_branch": "release-4.0.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 4.0.2 (#891)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc96d44ee515ce6a4b134",
    "number": 890,
    "body": null,
    "head_branch": "PYTHON-3141",
    "is_a_fork": true,
    "comments": [
      "The CI job looks like it's _only_ running slotscheck now:\r\n```\r\n/opt/hostedtoolcache/Python/3.10.2/x64/bin/pre-commit run --show-diff-on-failure --color=always --all-files --hook-stage=manual\r\n[INFO] Initializing environment for https://github.com/ariebovenberg/slotscheck.\r\n[INFO] Installing environment for https://github.com/ariebovenberg/slotscheck.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nslotscheck...............................................................Passed\r\n```\r\n\r\nHere's the base commit:\r\n```\r\nCache Size: ~34 MB (36171498 B)\r\n/usr/bin/tar --use-compress-program zstd -d -xf /home/runner/work/_temp/68aea[56](https://github.com/mongodb/mongo-python-driver/runs/5337839218?check_suite_focus=true#step:4:56)d-7da8-46ea-8aae-ff15f24e4ad8/cache.tzst -P -C /home/runner/work/mongo-python-driver/mongo-python-driver\r\n/opt/hostedtoolcache/Python/3.10.2/x[64](https://github.com/mongodb/mongo-python-driver/runs/5337839218?check_suite_focus=true#step:4:64)/bin/pre-commit run --show-diff-on-failure --color=always --all-files --hook-stage=manual\r\ncheck for added large files..............................................Passed\r\ncheck for case conflicts.................................................Passed\r\ncheck toml...........................................(no files to check)Skipped\r\ncheck yaml...............................................................Passed\r\ndebug statements (python)................................................Passed\r\nfix end of files.........................................................Passed\r\nforbid new submodules................................(no files to check)Skipped\r\ntrim trailing whitespace.................................................Passed\r\nblack....................................................................Passed\r\nisort....................................................................Passed\r\nflake8...................................................................Passed\r\nshellcheck...............................................................Passed\r\nCheck GitHub Workflows...................................................Passed\r\n```\r\n\r\nIs this expected?",
      "> Is this expected?\r\n\r\nNo, I had an extra `repos:` heading that was excluding the previous checks, fixed",
      "> No, I had an extra repos: heading that was excluding the previous checks, fixed\r\n\r\nFunny, that's one of the things the yaml check would have complained about if it ran :)"
    ],
    "commit_messages": [
      "PYTHON-3141 Add slotscheck to pre-commit checks (#890)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96e44ee515ce6a4b135",
    "number": 889,
    "body": null,
    "head_branch": "PYTHON-3146",
    "is_a_fork": true,
    "comments": [
      "I scheduled the doctests variant",
      "The docs build now, but we are failing two of the actual doctests",
      "Let's fix the two failing tests. The CodecOptions repr test starting failing after the typing change here: https://evergreen.mongodb.com/task/mongo_python_driver_tests_doctests__platform~ubuntu_18.04_python_version~3.6_doctests_52ed5a4135a76480e03e96eb0369c2c4eae0c3f7_22_01_13_22_09_48:\r\n```\r\n [2022/02/28 20:28:11.596] Document: faq\r\n [2022/02/28 20:28:11.596] -------------\r\n [2022/02/28 20:28:11.621] **********************************************************************\r\n [2022/02/28 20:28:11.621] File \"faq.rst\", line 263, in key-order\r\n [2022/02/28 20:28:11.621] Failed example:\r\n [2022/02/28 20:28:11.621]     opts\r\n [2022/02/28 20:28:11.621] Expected:\r\n [2022/02/28 20:28:11.621]     CodecOptions(document_class=<class 'bson.son.SON'>,\r\n [2022/02/28 20:28:11.621]                  tz_aware=False,\r\n [2022/02/28 20:28:11.621]                  uuid_representation=UuidRepresentation.UNSPECIFIED,\r\n [2022/02/28 20:28:11.621]                  unicode_decode_error_handler='strict',\r\n [2022/02/28 20:28:11.621]                  tzinfo=None, type_registry=TypeRegistry(type_codecs=[],\r\n [2022/02/28 20:28:11.621]                                                          fallback_encoder=None))\r\n [2022/02/28 20:28:11.621] Got:\r\n [2022/02/28 20:28:11.621]     CodecOptions(document_class=bson.son.SON, tz_aware=False, uuid_representation=UuidRepresentation.UNSPECIFIED, unicode_decode_error_handler='strict', tzinfo=None, type_registry=TypeRegistry(type_codecs=[], fallback_encoder=None))\r\n```\r\n\r\n6.0-latest has added new fields to duplicate key errors, we'll need to add them or ignore them:\r\n```\r\n [2022/02/28 20:28:12.751] -----------------------\r\n [2022/02/28 20:28:12.751] **********************************************************************\r\n [2022/02/28 20:28:12.751] File \"examples/bulk.rst\", line 128, in default\r\n [2022/02/28 20:28:12.751] Failed example:\r\n [2022/02/28 20:28:12.751]     try:\r\n [2022/02/28 20:28:12.751]         db.test.bulk_write(requests, ordered=False)\r\n [2022/02/28 20:28:12.751]     except BulkWriteError as bwe:\r\n [2022/02/28 20:28:12.751]         pprint(bwe.details)\r\n [2022/02/28 20:28:12.751] Expected:\r\n [2022/02/28 20:28:12.751]     {'nInserted': 0,\r\n [2022/02/28 20:28:12.751]      'nMatched': 1,\r\n [2022/02/28 20:28:12.751]      'nModified': 1,\r\n [2022/02/28 20:28:12.751]      'nRemoved': 1,\r\n [2022/02/28 20:28:12.751]      'nUpserted': 0,\r\n [2022/02/28 20:28:12.751]      'upserted': [],\r\n [2022/02/28 20:28:12.751]      'writeConcernErrors': [],\r\n [2022/02/28 20:28:12.751]      'writeErrors': [{'code': 11000,\r\n [2022/02/28 20:28:12.751]                       'errmsg': '...E11000...duplicate key error...',\r\n [2022/02/28 20:28:12.751]                       'index': 0,...\r\n [2022/02/28 20:28:12.751]                       'op': {'_id': 1}},\r\n [2022/02/28 20:28:12.751]                      {'code': 11000,\r\n [2022/02/28 20:28:12.751]                       'errmsg': '...E11000...duplicate key error...',\r\n [2022/02/28 20:28:12.752]                       'index': 2,...\r\n [2022/02/28 20:28:12.752]                       'op': {'_id': 3}}]}\r\n [2022/02/28 20:28:12.752] Got:\r\n [2022/02/28 20:28:12.752]     {'nInserted': 0,\r\n [2022/02/28 20:28:12.752]      'nMatched': 1,\r\n [2022/02/28 20:28:12.752]      'nModified': 1,\r\n [2022/02/28 20:28:12.752]      'nRemoved': 1,\r\n [2022/02/28 20:28:12.752]      'nUpserted': 0,\r\n [2022/02/28 20:28:12.752]      'upserted': [],\r\n [2022/02/28 20:28:12.752]      'writeConcernErrors': [],\r\n [2022/02/28 20:28:12.752]      'writeErrors': [{'code': 11000,\r\n [2022/02/28 20:28:12.752]                       'errmsg': 'E11000 duplicate key error collection: '\r\n [2022/02/28 20:28:12.752]                                 'bulk_example.test index: _id_ dup key: { _id: 1 }',\r\n [2022/02/28 20:28:12.752]                       'index': 0,\r\n [2022/02/28 20:28:12.752]                       'keyPattern': {'_id': 1},\r\n [2022/02/28 20:28:12.752]                       'keyValue': {'_id': 1},\r\n [2022/02/28 20:28:12.752]                       'op': {'_id': 1}},\r\n [2022/02/28 20:28:12.752]                      {'code': 11000,\r\n [2022/02/28 20:28:12.752]                       'errmsg': '',\r\n [2022/02/28 20:28:12.752]                       'index': 2,\r\n [2022/02/28 20:28:12.752]                       'keyPattern': {'_id': 1},\r\n [2022/02/28 20:28:12.752]                       'keyValue': {'_id': 3},\r\n [2022/02/28 20:28:12.752]                       'op': {'_id': 3}}]}\r\n [2022/02/28 20:28:12.752] **********************************************************************\r\n```\r\n",
      "Updated and rescheduled"
    ],
    "commit_messages": [
      "PYTHON-3146 Test Failure - Could not import extension sphinxcontrib.shellcheck (#889)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc96f44ee515ce6a4b136",
    "number": 888,
    "body": "This PR also fixes a minor bug uncovered by the new tests. We need to create the implicit session _before_ starting a retryable read, otherwise the dirty session logic does not apply.",
    "head_branch": "PYTHON-3123",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3123 Convert sessions spec tests to unified test format (#888)\n\nCreate implicit session _before_ starting a retryable read."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97044ee515ce6a4b137",
    "number": 887,
    "body": "There a few places where we are out of date. I wrapped them all into this one PR because they're all minor changes and of a similar nature (typos, `minServerVersion` changes, etc). The bulk write changes are because I mistakenly merged that PR too early. ",
    "head_branch": "PYTHON-3129",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3129 Re-sync CRUD spec tests (#887)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97144ee515ce6a4b138",
    "number": 886,
    "body": "Removing $where fixes the test failures.",
    "head_branch": "PYTHON-3142-remove-where",
    "is_a_fork": true,
    "comments": [
      "Is there a way to add a unittest to ensure that this test does not fail within `n` iterations? I think that would be a good addition to this PR. ",
      "> ensure that this test does not fail within n iterations\r\n\r\nI don't want to do that because it would make this test slower and more flakey.\r\n\r\nWe could \"ensure the test passes at least once in n iterations\" but I also don't want to do that since it would hide legitimate server or driver bugs (it would have masked this server regression)."
    ],
    "commit_messages": [
      "PYTHON-3142 Stop using $where in test_maxConnecting (#886)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97244ee515ce6a4b139",
    "number": 885,
    "body": null,
    "head_branch": "PYTHON-3088-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3088 Test rapid releases with load balancers (#885)\n\nPYTHON-3088 [v3.13] Update load balancer tests to support dedicated load balancer port (#870)\r\n\r\n(cherry picked from commit 341d489)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97244ee515ce6a4b13a",
    "number": 884,
    "body": "As described in [PYTHON-3124](https://jira.mongodb.org/projects/PYTHON/issues/PYTHON-3124), there were some overlapping slots in `_WriteResult` subclasses.\r\n\r\n# Tests?\r\n\r\nI see there have been several `__slots__`  issues in pymongo in the past. I discovered this slot issue with [slotscheck](https://github.com/ariebovenberg/slotscheck), a tool I maintain. If you like, I can add it to CI as I've done for [instagram/LibCST](https://github.com/Instagram/LibCST/pull/615), [sqlalchemy/sqlalchemy](https://github.com/sqlalchemy/sqlalchemy/pull/7670), and [aio-libs/aiohttp](https://github.com/aio-libs/aiohttp/pull/6547).",
    "head_branch": "fix-slots",
    "is_a_fork": true,
    "comments": [
      "Hmmm, some test failures. The test logs appears to be behind corp.mongodb.com, which I don't have access to. I doubt that this `__slots__` change broke a test this specific.",
      "@ariebovenberg I took a look at the tests and they appear to be random failures. However, they are only happening with Auth+SSL, so I have restarted those failing tests to see if they pass once restarted.",
      "Thanks @ariebovenberg!"
    ],
    "commit_messages": [
      "PYTHON-3124 Remove overlapping slots from _WriteResult subclasses (#884)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97344ee515ce6a4b13b",
    "number": 883,
    "body": "It is \"impossible\" (or unconventional) to catch exceptions for an invalid ID, even though there's no good reason not to IMHO.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@nadavge Hi, I appreciate you opening this PR. That error is already importable--the following code for me runs fine on PyMongo 4.1 with Python 3.8.12 (in a new venv). \r\n```\r\nfrom bson.errors import InvalidId\r\ntry:\r\n        pass\r\nexcept InvalidId:\r\n        # Handle exception\r\n        pass\r\n```\r\nThe only thing that your change allows is importing from the package namespace like so:\r\n```\r\nFrom bson import InvalidId\r\n```\r\nAll of the other errors that are imported in `bson/__init__.py` are also used in that same file--hence the import. I believe that users are intended to import from `bson.errors` based on the [PyMongo BSON documentation for errors](https://pymongo.readthedocs.io/en/stable/api/bson/errors.html). \r\nCould I ask for the specific reason why you wish it to be in the packages namespace?\r\n",
      "We're closing this out since we haven't heard anything further in this thread, but please let us know if you'd like to continue the conversation! "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97444ee515ce6a4b13c",
    "number": 882,
    "body": "Applied `pyupgrade --py36-plus` to all files except setup.py with v2.31.0. I omitted setup.py so that the file can still produce a good error message on python2, otherwise the user gets this error due to format strings:\r\n```\r\n$ python2 setup.py                                                      \r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 8, in <module>\r\n    raise RuntimeError(\"Python version >= 3.6 required.\")\r\nRuntimeError: Python version >= 3.6 required.\r\n$ pyupgrade --py36-plus setup.py                                        \r\nRewriting setup.py\r\n$ python2 setup.py              \r\n  File \"setup.py\", line 168\r\n    raise RuntimeError(f\"documentation step '{mode}' failed\")\r\n                                                           ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\nI tested out adding this to pre-commit but pyupgrade's formatting conflicts with black so it's more of a nuisance.",
    "head_branch": "pyupgrade",
    "is_a_fork": true,
    "comments": [
      "I don't have a strong opinion on this being a blocker, but won't this make backports to 3.x more difficult?",
      "Great point. This will definitely make backports more tedious. Let's hold off until pymongo 3 is EOL."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97544ee515ce6a4b13d",
    "number": 881,
    "body": null,
    "head_branch": "PYTHON-3137",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3137 Handle falsey values for \"let\" parameter (#881)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97644ee515ce6a4b13e",
    "number": 880,
    "body": "PYTHON-3088 [v3.13] Update load balancer tests to support dedicated load balancer port (#870)\r\n(cherry picked from commit 1443d7687edb9f6f62a182c0d3b5e9386b4a568c)\r\n",
    "head_branch": "PYTHON-3088-40-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3088 [4.0] Test rapid releases with load balancers (#880)\n\nPYTHON-3088 [v3.13] Update load balancer tests to support dedicated load balancer port (#870)\r\n\r\n(cherry picked from commit 1443d7687edb9f6f62a182c0d3b5e9386b4a568c)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97744ee515ce6a4b13f",
    "number": 879,
    "body": null,
    "head_branch": "PYTHON-3090",
    "is_a_fork": true,
    "comments": [
      "> Let's add tests for this change (mypy_fails + test_mypy) if possible.\r\n\r\nWorking on this now",
      "> Are you still planning to add tests?\r\n\r\nYep",
      "Wow, this is quicksand indeed.   There is no way to declare compatibility with `TypedDict` in general:\r\n\r\n```python\r\nbson/codec_options.py:119: error: Variable \"typing.TypedDict\" is not valid as a type  [valid-type]\r\n    _DocumentClass = Union[Type[MutableMapping], Type[TypedDict], Type[\"RawBSONDocument\"]]\r\n                                                      ^\r\nbson/codec_options.py:119: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#variables-vs-type-aliases\r\n```\r\n\r\nIf we don't include `TypedDict`, we get:\r\n\r\n```python\r\ntest/test_mypy.py: note: In member \"test_default_typedict\" of class \"TestPymongo\":\r\ntest/test_mypy.py:140: error: Invalid type argument value for \"MongoClient\"  [type-var]\r\n            client: MongoClient[Movie] = MongoClient(document_class=Movie)\r\n                    ^\r\ntest/test_mypy.py:140: error: Incompatible types in assignment (expression has type\r\n\"MongoClient[Dict[str, Any]]\", variable has type \"MongoClient[Movie]\")  [assignment]\r\n            client: MongoClient[Movie] = MongoClient(document_class=Movie)\r\n                                         ^\r\ntest/test_mypy.py:140: error: Argument \"document_class\" to \"MongoClient\" has incompatible type\r\n\"Type[Movie]\"; expected \"Union[Type[MutableMapping[Any, Any]], Type[RawBSONDocument]]\"  [arg-type]\r\n            client: MongoClient[Movie] = MongoClient(document_class=M\r\n```\r\n\r\nThe only way for us to gain compatibility with `TypedDict` is for us to use `Any` for both `_DocumentClass` and `_DocumentType` and rely on explicit type declaration."
    ],
    "commit_messages": [
      "PYTHON-3090 Clean up Database Command Typing (#879)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97844ee515ce6a4b140",
    "number": 878,
    "body": null,
    "head_branch": "PYTHON-3136",
    "is_a_fork": true,
    "comments": [
      "Can you describe how you use this feature? What's the benefit of this change?",
      "> Can you describe how you use this feature? What's the benefit of this change?\r\n\r\nSorry, perhaps this was confusing because it has the DevOps tag. This is a bug fix. The current behavior is that `resync-specs.sh` completely removes ignored files from the working tree, rather than *actually* ignoring them and leaving them as they stood prior to that spec resync."
    ],
    "commit_messages": [
      "PYTHON-3136 [DevOps] Resync-specs.sh removes ignored files from working tree (#878)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97944ee515ce6a4b141",
    "number": 877,
    "body": "I opened https://jira.mongodb.org/browse/PYTHON-3132 to update our dependency to pyopenssl>=20.0 in which case we can remove the fallback. I'm preserving the pyopenssl<20.0 behavior to ease backports.",
    "head_branch": "PYTHON-2147",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2147 Use verified peer cert chain in OCSP when available (#877)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97944ee515ce6a4b142",
    "number": 876,
    "body": null,
    "head_branch": "PYTHON-2956",
    "is_a_fork": true,
    "comments": [
      "Looks like this test is failing on pypy 3.8:\r\n```\r\nFAIL: test_implicit_sessions_checkout (test_session.TestSession)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/runner/work/mongo-python-driver/mongo-python-driver/test/test_session.py\", line 220, in test_implicit_sessions_checkout\r\n    self.assertTrue(succeeded)\r\n```\r\n\r\nCould be related to delayed garbage collection in pypy? Does it also fail locally for you?",
      "I think we should only do the manual `gc` collect if we detect we're on PyPy:  `import platform;  \"PyPy\" in platform.python_implementation()`.  https://stackoverflow.com/q/45685549"
    ],
    "commit_messages": [
      "PYTHON-2956 Drivers should check out an implicit session only after checking out a connection (#876)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97a44ee515ce6a4b143",
    "number": 875,
    "body": null,
    "head_branch": "PYTHON-3131",
    "is_a_fork": true,
    "comments": [
      "Do the tests now pass on macos in EVG?",
      "Yes, the previously failing test is now [passing](https://spruce.mongodb.com/task/mongo_python_driver_test_macos__platform~macos_1014_auth~auth_ssl~nossl_test_3.6_replica_set_patch_09f8aa9928e9763e790a7fd6e30bccb701efea9d_620d6da530661530d8ad91a7_22_02_16_21_33_26/tests?execution=0&sortBy=STATUS&sortDir=ASC)."
    ],
    "commit_messages": [
      "PYTHON-3131 Test Failure - test_mypy on macos + auth (#875)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97b44ee515ce6a4b144",
    "number": 874,
    "body": null,
    "head_branch": "PYTHON-3068",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3068 Support 'let' option in BulkWriteOptions (#874)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97c44ee515ce6a4b145",
    "number": 873,
    "body": "These two workarounds were accidentally removed in PYTHON-3071",
    "head_branch": "resync-specs-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add resync-syncs workarounds for incomplete spec work (#873)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97d44ee515ce6a4b146",
    "number": 872,
    "body": null,
    "head_branch": "PYTHON-1834-313-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1834 [v3.13] Add minimal precommit config (#872)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97e44ee515ce6a4b147",
    "number": 871,
    "body": null,
    "head_branch": "PYTHON-3072",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3072 Use _Address in more places (#871)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc97f44ee515ce6a4b148",
    "number": 870,
    "body": "PYTHON-3088 Update load balancer tests to support dedicated load balancer port (#866)\r\n    \r\n(cherry picked from commit 341d489f38ad51620fab50bfc7c3f8c1227fefee)\r\n\r\n",
    "head_branch": "PYTHON-3088-312",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3088 [v3.13] Update load balancer tests to support dedicated load balancer port (#870)\n\nPYTHON-3088 Update load balancer tests to support dedicated load balancer port (#866)\r\n\r\n(cherry picked from commit 341d489)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc97f44ee515ce6a4b149",
    "number": 869,
    "body": "PYTHON-3088 Update load balancer tests to support dedicated load balancer port (#866)\r\n    \r\n(cherry picked from commit 341d489f38ad51620fab50bfc7c3f8c1227fefee)",
    "head_branch": "PYTHON-3088-40",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3088 Update load balancer tests to support dedicated load balancer port (#866) (#869)\n\n(cherry picked from commit 341d489f38ad51620fab50bfc7c3f8c1227fefee)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc98044ee515ce6a4b14a",
    "number": 868,
    "body": null,
    "head_branch": "PYTHON-3120",
    "is_a_fork": true,
    "comments": [
      "Wow, that was a head-scratcher.  `flake` had run fine locally but was failing in CI.  There were changes in `master` that made an import unused when merged into `master` in the CI run."
    ],
    "commit_messages": [
      "PYTHON-3120 Set up flake8 linting (#868)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98144ee515ce6a4b14b",
    "number": 867,
    "body": null,
    "head_branch": "PYTHON-3111",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3111 Rename \"Versioned API\" to \"Stable API\" in documentation (#867)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98244ee515ce6a4b14c",
    "number": 866,
    "body": null,
    "head_branch": "PYTHON-3088",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3088 Update load balancer tests to support dedicated load balancer port (#866)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98344ee515ce6a4b14d",
    "number": 865,
    "body": null,
    "head_branch": "PYTHON-2786",
    "is_a_fork": true,
    "comments": [
      "You also need to remove it from the test matrix. See https://github.com/mongodb/mongo-python-driver/blob/v3.13/.evergreen/config.yml and possibly other files in that directory.\r\n",
      "> You also need to remove it from the test matrix. See [https://github.com/mongodb/mongo-python-driver/blob/v3.13/.evergreen/config.yml](https://github.com/mongodb/mongo-python-driver/blob/v3.13/.evergreen/config.yml?rgh-link-date=2022-02-11T15%3A19%3A07Z) and possibly other files in that directory.\r\n\r\nDone, thanks"
    ],
    "commit_messages": [
      "PYTHON-2786 [v3.13] Drop support for Python 3.4 (#865)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98444ee515ce6a4b14e",
    "number": 864,
    "body": null,
    "head_branch": "PYTHON-3078",
    "is_a_fork": true,
    "comments": [
      "> I think we should add RHEL 7.0 to our test matrix using the system python for testing, since it has Python 3.6.0 and will catch problems like this.\r\n\r\nSounds good, will do",
      "Oh, now that I think about it, it's not the system python. It's Python 3.6 in the v2 server toolchain. We probably don't need to use RHEL 7. We can use any OS we want."
    ],
    "commit_messages": [
      "PYTHON-3078 Remove Use of Unsupported NoReturn Type Class (#864)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98544ee515ce6a4b14f",
    "number": 863,
    "body": null,
    "head_branch": "PYTHON-3092",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3092 Add Type Discovery Files (#863)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98644ee515ce6a4b150",
    "number": 862,
    "body": null,
    "head_branch": "PYTHON-3109",
    "is_a_fork": true,
    "comments": [
      "I don't think this pull request is too far off. You can use this commit as inspiration to fix it up:\r\nhttps://github.com/mongodb/mongo-python-driver/commit/c36ec37281be1d663f8eba1169b29b09fffef451"
    ],
    "commit_messages": [
      "PYTHON-3109 Test against latest rapid releases (#862)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98644ee515ce6a4b151",
    "number": 861,
    "body": "Deprecate mapReduce helpers",
    "head_branch": "PYTHON-2850-313",
    "is_a_fork": true,
    "comments": [
      "Can you please add a [version changed](https://github.com/mongodb/mongo-python-driver/blob/ddb661444220474bcb448a7adbd13ef9220a588a/pymongo/cursor.py#L775) entry for both methods as well?",
      "Managed to accidentally merge with master rather than the v3.13 branch so there are a tonnn of messed up changes. I think I'm just gonna create this from scratch in a new PR given how small it is.\r\nEDIT: Nevermind, I was able to fix it."
    ],
    "commit_messages": [
      "PYTHON-2850 [v3.13] Deprecate mapReduce command (#861)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc98744ee515ce6a4b152",
    "number": 860,
    "body": null,
    "head_branch": "PYTHON-3062",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3062 Make Regex generic (#860)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98844ee515ce6a4b153",
    "number": 859,
    "body": null,
    "head_branch": "PYTHON-3073",
    "is_a_fork": true,
    "comments": [
      "Good point, I'll make it opt-in"
    ],
    "commit_messages": [
      "PYTHON-3073 Copy the unit tests from pymongo-stubs into pymongo (#859)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98944ee515ce6a4b154",
    "number": 858,
    "body": null,
    "head_branch": "PYTHON-1834-shellcheck",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1834 Add shellcheck (#858)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98a44ee515ce6a4b155",
    "number": 857,
    "body": null,
    "head_branch": "PYTHON-1834-313",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1834 [v3.13] Use a code formatter (#857)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc98b44ee515ce6a4b156",
    "number": 856,
    "body": null,
    "head_branch": "PYTHON-1834-40-2",
    "is_a_fork": true,
    "comments": [
      "LGTM!"
    ],
    "commit_messages": [
      "PYTHON-1834 [v4.0] Use a code formatter 2 (#856)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98c44ee515ce6a4b157",
    "number": 855,
    "body": null,
    "head_branch": "PYTHON-1834-313",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98d44ee515ce6a4b158",
    "number": 854,
    "body": "Ran `black --line-length 100 . && isort --profile black .`",
    "head_branch": "PYTHON-1834-40",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1834 [v4.0] Use a code formatter (#854)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc98e44ee515ce6a4b159",
    "number": 853,
    "body": null,
    "head_branch": "PYTHON-1834-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1834 (cont) Add pre-commit config (#853)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc98f44ee515ce6a4b15a",
    "number": 852,
    "body": "Ran `black --line-length 100 .`and `isort --profile black .` on the codebase.\r\n\r\n```\r\nblack --version\r\nblack, 22.1.0 (compiled: yes)\r\n```",
    "head_branch": "PYTHON-1834",
    "is_a_fork": true,
    "comments": [
      "Also let's use `isort --profile black .` to fix the black + isort conflicts.",
      "> Also let's use isort --profile black . to fix the black + isort conflicts.\r\n\r\nDone, updated top level comment",
      "Note to self, use `args: [--profile=black]` in the `pre-commit` file.",
      " Note the one test failure was a flake and can be ignored."
    ],
    "commit_messages": [
      "PYTHON-1834 Use a code formatter (#852)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99044ee515ce6a4b15b",
    "number": 851,
    "body": "(cherry picked from commit 561ee7cf77fcbdefb9e2f46691f2b2ba4c65198b)",
    "head_branch": "PYTHON-3110-313",
    "is_a_fork": true,
    "comments": [
      "Scheduled encryption runs for Python 2.7 and 3.9",
      "The Encryption Python 3.9 Amazon Linux 2018 (Enterprise) NoAuth NoSSL build is failing with `sh: line 2: docker: command not found`, I scheduled Encryption Python 3.8 Amazon Linux 2018 (Enterprise) NoAuth NoSSL.",
      "Same issue with Encryption Python 3.8 Amazon Linux 2018 (Enterprise) NoAuth NoSSL, trying with a Windows variant.",
      "Ah, I was misreading the logs.  I fixed the missing `re` import and re-triggered Encryption runs for 2.7 and 3.9"
    ],
    "commit_messages": [
      "PYTHON-3110 [v3.13] Remove use of example.com in CSFLE tests (#848) (#851)\n\nCo-authored-by: Shane Harvey <shnhrv@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc99144ee515ce6a4b15c",
    "number": 850,
    "body": "https://spruce.mongodb.com/version/62029dc8d6d80a605ebd65d1/tasks",
    "head_branch": "python3043",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3043 Test mod_wsgi with Python 3.10 (#850)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99144ee515ce6a4b15d",
    "number": 849,
    "body": null,
    "head_branch": "PYTHON-3110-40",
    "is_a_fork": true,
    "comments": [
      "Please schedule the encryption tests for python 3 and 2.7 to make sure those pass. Also I think the link in your commit message is off. Please revert and use `git cherry-pick -x 561ee7cf77fcbdefb9e2f46691f2b2ba4c65198b`. The `-x` flag adds a message indicating it's a backport with the original commit's sha which is helpful for future maintainers.",
      "I fixed the commit and scheduled an encryption run for Python 3.9, but we don't support Python 2.7 on 4.0.x.  :smile:"
    ],
    "commit_messages": [
      "PYTHON-3110 [v4.0] Remove use of example.com in CSFLE tests (#849)\n\nCo-authored-by: Shane Harvey <shnhrv@gmail.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99244ee515ce6a4b15e",
    "number": 848,
    "body": null,
    "head_branch": "PYTHON-3110",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3110 Remove use of example.com in CSFLE tests (#848)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99344ee515ce6a4b15f",
    "number": 847,
    "body": null,
    "head_branch": "PYTHON-2682",
    "is_a_fork": true,
    "comments": [
      "Note that I still need to implement the comment field for some more helpers, however this is mainly to provide a POC for the spec tests changes.",
      "@juliusgeo, you'll need to run black on all of your files and then push, to see if that clears up the merge conflicts.  "
    ],
    "commit_messages": [
      "PYTHON-2682 Add support for the comment field to all helpers (#847)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99444ee515ce6a4b160",
    "number": 846,
    "body": "Implementation of DRIVERS-746: https://github.com/mongodb/specifications/pull/1115",
    "head_branch": "PYTHON-2951",
    "is_a_fork": true,
    "comments": [
      "Not much to review here because we already have the correct behavior. This change just adds the spec tests and introduces the \"unified\" retryable reads runner."
    ],
    "commit_messages": [
      "PYTHON-2951 Test that handshake errors are retryable (#846)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99544ee515ce6a4b161",
    "number": 845,
    "body": "Draft implementation of DRIVERS-1954: https://github.com/mongodb/specifications/pull/1122\r\n\r\nTODO:\r\n- [X] ServerDescription.election_tuple is now incorrect. Ideally we'd reverse it but doing so would be a breaking change. Perhaps we should just deprecate it? Edit: I opened https://jira.mongodb.org/browse/PYTHON-3162 to deprecation this.",
    "head_branch": "PYTHON-2970",
    "is_a_fork": true,
    "comments": [
      "> Perhaps we should just deprecate it?\r\n\r\nMakes sense to me"
    ],
    "commit_messages": [
      "PYTHON-2970 Prioritize electionId over setVersion for stale primary check (#845)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99644ee515ce6a4b162",
    "number": 844,
    "body": null,
    "head_branch": "PYTHON-3064",
    "is_a_fork": true,
    "comments": [
      "Merging since the failure is fixed by https://github.com/mongodb/mongo-python-driver/pull/848"
    ],
    "commit_messages": [
      "PYTHON-3064 Add typings to test package (#844)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99744ee515ce6a4b163",
    "number": 843,
    "body": null,
    "head_branch": "PYTHON-2858",
    "is_a_fork": true,
    "comments": [
      "Is this ready for review?\r\n"
    ],
    "commit_messages": [
      "PYTHON-2858 Use OP_MSG to authenticate if server supports OP_MSG (#843)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99744ee515ce6a4b164",
    "number": 842,
    "body": null,
    "head_branch": "PYTHON-3075-v3",
    "is_a_fork": true,
    "comments": [
      "evergreen patch",
      "Encryption job is [passing](https://spruce.mongodb.com/task/mongo_python_driver_3.13_tests_python_version_amazon1_test_encryption__platform~awslinux_auth_ssl~noauth_nossl_python_version~3.9_encryption~encryption_test_4.4_standalone_patch_336f69dbb3ac5edf855fbfa759a4844a55bf0cf9_61fbf5bb57e85a690cc8a633_22_02_03_15_33_16/tests?execution=0&sortBy=STATUS&sortDir=ASC)."
    ],
    "commit_messages": [
      "PYTHON-3075 [Backport-3.13] bulk_write does not apply CodecOptions to upserted_ids result (#842)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc99844ee515ce6a4b165",
    "number": 841,
    "body": null,
    "head_branch": "PYTHON-3075-v4",
    "is_a_fork": true,
    "comments": [
      "evergreen patch",
      "(updated the title because Backport-4 was being interpreted as a link to a jira ticket).",
      "Encryption run [passed](https://spruce.mongodb.com/task/mongo_python_driver_4.0_tests_python_version_amazon1_test_encryption__platform~awslinux_auth_ssl~noauth_nossl_python_version~3.8_encryption~encryption_test_4.4_sharded_cluster_patch_93334cac4359c23fe75c3cb2062d104944718435_61fb13512fbabe23afff190b_22_02_02_23_27_14/tests?execution=0&sortBy=STATUS&sortDir=ASC)."
    ],
    "commit_messages": [
      "PYTHON-3075 [v4.0] bulk_write does not apply CodecOptions to upserted_ids result (#841)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc99944ee515ce6a4b166",
    "number": 840,
    "body": null,
    "head_branch": "PYTHON-3075",
    "is_a_fork": true,
    "comments": [
      "LGTM!"
    ],
    "commit_messages": [
      "PYTHON-3075 bulk_write does not apply CodecOptions to upserted_ids result (#840)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99a44ee515ce6a4b167",
    "number": 839,
    "body": "This is the merged and improved version of resync_specs.sh. I added a help message for basic usage, in addition to the ability to specify a commit or branch for the specs repo, a blocklist feature to ignore files that match regex patterns, and also helpful diagnostic messages that print the specific files ignored by your usage of the blocklist.",
    "head_branch": "PYTHON-3071",
    "is_a_fork": true,
    "comments": [
      "Should this script be in the `tools` folder?  Is it meant to be run locally?",
      "If it is meant to be used locally, we should add a section to the contributing guide.",
      "> Should this script be in the tools folder?\r\n\r\nI'm not sure it fits in the tools folder. Those tools are things we ship to pypi whereas this is an internal dev script. Perhaps we should just shove it in the test/ folder?",
      "I've used a `scripts` folder for this type of thing in the past",
      "> I've used a `scripts` folder for this type of thing in the past\r\n\r\nThat sounds good to me. Though I also think it works fine in .evergreen too."
    ],
    "commit_messages": [
      "PYTHON-3071 [DevOps] Merge and improve resync_specs.sh (#839)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99b44ee515ce6a4b168",
    "number": 838,
    "body": "https://spruce.mongodb.com/version/61f1de7d3627e057e11e35bc/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "python1596",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1596 Test on RHEL7 FIPS (#838)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99c44ee515ce6a4b169",
    "number": 837,
    "body": "This is a follow up to discussion in [DRIVERS-2033](https://github.com/mongodb/specifications/pull/1123) in which @ShaneHarvey mentioned that it should be implemented in Python first to ensure that the serverless tests still pass. \r\nLink to passing serverless tests Evergreen build: https://evergreen.mongodb.com/build/mongo_python_driver_serverless__platform~ubuntu_18.04_auth_ssl~auth_ssl_python_version~3.7_serverless~enabled_patch_9cb64775c97a800e2c3a7cf54cb732f95b37332b_61eb166e3627e067e3ccbb3b_22_01_21_20_25_11",
    "head_branch": "PYTHON-3069",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3069 Require hello command + OP_MSG when 'loadBalanced=True' (#837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99d44ee515ce6a4b16a",
    "number": 836,
    "body": null,
    "head_branch": "PYTHON-3046",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3046 Document support for backslashreplace and surrogateescape (#836)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99d44ee515ce6a4b16b",
    "number": 835,
    "body": null,
    "head_branch": "PYTHON-3041",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3041 Fix doc example for initializing a replica set (#835)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99e44ee515ce6a4b16c",
    "number": 834,
    "body": "Adds rule to automatically route all PRs to the dbx-python GitHub team.",
    "head_branch": "PROG-6135",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Create CODEOWNERS (#834)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc99f44ee515ce6a4b16d",
    "number": 833,
    "body": null,
    "head_branch": "PYTHON-3064",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a044ee515ce6a4b16e",
    "number": 832,
    "body": null,
    "head_branch": "PYTHON-3061",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3061 Add 'let' option to ReplaceOptions (#832)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a144ee515ce6a4b16f",
    "number": 831,
    "body": null,
    "head_branch": "PYTHON-3060",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3060 Add typings to pymongo package (#831)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a244ee515ce6a4b170",
    "number": 830,
    "body": null,
    "head_branch": "PYTHON-2863",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2863 Allow hint for unacknowledged writes using OP_MSG when supported by the server (#830)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a344ee515ce6a4b171",
    "number": 829,
    "body": "- [x] Finish manual port of `monitoring.py`, `server_description`, `server_type`, `topology_description`, `url_parser` (all failed when using [`retype`](https://pythonrepo.com/repo/ambv-retype-python-code-refactoring))\r\n- [x] Double check all public interfaces in the auto-ported files:\r\n```\r\n     modified:   pymongo/__init__.py\r\n\tmodified:   pymongo/collation.py\r\n\tmodified:   pymongo/common.py\r\n\tmodified:   pymongo/event_loggers.py\r\n\tmodified:   pymongo/operations.py\r\n\tmodified:   pymongo/read_concern.py\r\n\tmodified:   pymongo/read_preferences.py\r\n\tmodified:   pymongo/results.py\r\n\tmodified:   pymongo/write_concern.py\r\n```\r\n- [x] Also look at addressing https://github.com/mongodb-labs/pymongo-stubs/issues/15\r\n  - Used `Union[MutableMapping[str, Any], RawBSONDocumentRef]`\r\n  - Investigate if we can make `Collection` a generic object",
    "head_branch": "PYTHON-3052",
    "is_a_fork": true,
    "comments": [
      "Local experiment with generic document types:\r\n\r\n```python\r\nfrom typing import Any, Mapping, TypeVar, Generic, Optional, Type, Union, cast\r\nfrom bson.raw_bson import RawBSONDocument\r\nfrom bson import encode\r\n\r\nT = TypeVar('T', bound=Mapping[str, Any])\r\nU = TypeVar('U', bound=Mapping[str, Any])\r\n\r\n\r\nclass Client(Generic[T]):\r\n    document_type: Type[T]\r\n\r\n    def __init__(self, document_type: Type[T]) -> None:\r\n        self.document_type = document_type\r\n\r\n\r\nclass CodecOptions(Generic[T]):\r\n    document_type: Type[T]\r\n\r\n    def __init__(self, document_type: Type[T]) -> None:\r\n        self.document_type = document_type\r\n\r\n\r\nclass Database(Generic[T]):\r\n    _document_type: Type[T]\r\n\r\n    def __init__(self, client: Client[T], codec_options: Optional[CodecOptions[U]] = None) -> None:\r\n        self._document_type = client.document_type\r\n\r\n    def bar(self, codec_options: Optional[CodecOptions[U]] = None) -> T:\r\n        return self._document_type()\r\n\r\n\r\n\r\nf = Database(Client(dict))\r\nf.bar()['a'] = 1\r\n\r\ng = Database(Client(RawBSONDocument))\r\n# Throws type error: \"__setitem__\" method not defined on type \"RawBSONDocument\"\r\n#g.bar()['a'] = 1\r\n```",
      "Note: I removed the changes to `pymongo` and `test` in order to make this PR easier to review.  I will follow up with those in other PRs."
    ],
    "commit_messages": [
      "PYTHON-3052 Add Typings to PyMongo Itself (#829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a444ee515ce6a4b172",
    "number": 828,
    "body": "I guess colon`:` is for use rather than hyphen`-`",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Edit simple typo in docs (#828)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a544ee515ce6a4b173",
    "number": 827,
    "body": null,
    "head_branch": "python3049",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3049 Test with PyPy 3.8 (#827)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a644ee515ce6a4b174",
    "number": 826,
    "body": "https://spruce.mongodb.com/version/61b9196cd1fe071038194cfb/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "python3042",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3042 Migrate OCSP testing to Ubuntu 20.04 (#826)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a644ee515ce6a4b175",
    "number": 825,
    "body": "@ShaneHarvey \r\nMade the changes in the `README.rst`\r\n\r\nI didn't want to make a new PR but I've been doing the commit changes on the browser so I didn't want to mess anything up",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use quotes for pip install with extras in README (#825)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a744ee515ce6a4b176",
    "number": 824,
    "body": "When installing a package with multiple dependencies in zsh, you write it under quotations, like so:\r\n```\r\n$ python3 -m pip install \"pymongo[aws]\"\r\n```\r\nor else it will give you this error:\r\n```\r\nzsh: no matches found: pymongo[aws]\r\n```\r\n### Proposal\r\nSeparate each subsection by the way it's done on each OS, if the syntax above is different.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use quotes for pip install with extras (#824)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a844ee515ce6a4b177",
    "number": 823,
    "body": "Fix this bug in PYTHON-2763:\r\n```python\r\n [2021/12/13 23:49:53.657] ERROR: test_automatic (test_encryption.TestAzureEncryption)\r\n [2021/12/13 23:49:53.657] ----------------------------------------------------------------------\r\n [2021/12/13 23:49:53.657] Traceback (most recent call last):\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/test/test_encryption.py\", line 1441, in test_automatic\r\n [2021/12/13 23:49:53.657]     return self._test_automatic(\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/test/test_encryption.py\", line 1414, in _test_automatic\r\n [2021/12/13 23:49:53.657]     output_doc = coll.find_one({})\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/collection.py\", line 1133, in find_one\r\n [2021/12/13 23:49:53.657]     for result in cursor.limit(-1):\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/cursor.py\", line 1163, in next\r\n [2021/12/13 23:49:53.657]     if len(self.__data) or self._refresh():\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/cursor.py\", line 1084, in _refresh\r\n [2021/12/13 23:49:53.657]     self.__send_message(q)\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/cursor.py\", line 975, in __send_message\r\n [2021/12/13 23:49:53.657]     response = client._run_operation(\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/mongo_client.py\", line 1203, in _run_operation\r\n [2021/12/13 23:49:53.657]     return self._retryable_read(\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/mongo_client.py\", line 1301, in _retryable_read\r\n [2021/12/13 23:49:53.657]     return func(session, server, sock_info, secondary_ok)\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/mongo_client.py\", line 1199, in _cmd\r\n [2021/12/13 23:49:53.657]     return server.run_operation(\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/server.py\", line 97, in run_operation\r\n [2021/12/13 23:49:53.657]     message = operation.get_message(\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/message.py\", line 331, in get_message\r\n [2021/12/13 23:49:53.657]     spec = self.as_command(sock_info)[0]\r\n [2021/12/13 23:49:53.657]   File \"/data/mci/a675b9166889c90001e88dd30fc0da34/src/pymongo/message.py\", line 314, in as_command\r\n [2021/12/13 23:49:53.657]     cmd = client._encrypter.encrypt(\r\n [2021/12/13 23:49:53.657] TypeError: encrypt() takes 4 positional arguments but 5 were given\r\n```\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_test_macos_encryption__platform~macos_1014_auth~auth_ssl~nossl_encryption~encryption_test_4.2_standalone_797197e73bd18fc7c4076408e68aa745f8070c49_21_12_10_18_22_49",
    "head_branch": "PYTHON-2763-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2763 Fix check_keys removal in encryption (#823)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9a944ee515ce6a4b178",
    "number": 822,
    "body": "Note that testing more things with Python 3.10 is a side effect, but https://jira.mongodb.org/browse/PYTHON-3043 and https://jira.mongodb.org/browse/PYTHON-3042 remain.",
    "head_branch": "python2903",
    "is_a_fork": true,
    "comments": [
      "> Do you have a link to a passing patch?\r\n\r\nThis is the top level patch build:\r\nhttps://evergreen.mongodb.com/version/61b2acd45623434964126cc3\r\nThese patch builds test fixes for the red things in the top level build:\r\nhttps://evergreen.mongodb.com/version/61b3df0ba4cf4729a4f309a5 (Note https://jira.mongodb.org/browse/PYTHON-3043)\r\nhttps://evergreen.mongodb.com/version/61b3e9ab57e85a6de530b27a\r\nhttps://evergreen.mongodb.com/version/61b3ea0e306615750a4d77c2\r\nThere are also some changes that were in the top level build that I backed out (some accidental testing of the system python in places we didn't previously test it and OCSP which is tracked by https://jira.mongodb.org/browse/PYTHON-3042)"
    ],
    "commit_messages": [
      "PYTHON-2903 Migrate testing from Amazon1 to Ubuntu 18.04 (#822)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9aa44ee515ce6a4b179",
    "number": 821,
    "body": null,
    "head_branch": "PYTHON-2013",
    "is_a_fork": true,
    "comments": [
      "Closing as won't do. Implementing this spec changes means it will no longer possible to authenticate as the \"local.__system\" (the internal cluster auth member) or X.509 users on direct connections to arbiters. I would prefer not to implement this at all in python to avoid removing a feature. The original motivation for DRIVERS-753/SPEC-1301 was to fix a regression which pymongo never implemented.\r\n\r\nIf a user does not want to authenticate on a direct connection to an arbiter (or any other node) they just need to omit auth credentials from the MongoClient URI and keyword options."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ab44ee515ce6a4b17a",
    "number": 820,
    "body": null,
    "head_branch": "PYTHON-2353",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2353 Update create_collection docs with more options (#820)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ab44ee515ce6a4b17b",
    "number": 819,
    "body": "Followed the migration guide here: https://github.com/10gen/performance-tooling-docs/blob/main/getting_started/performance_monitoring_setup.md#legacy-data-migration\r\n\r\nTesting here: https://spruce.mongodb.com/version/61b2a9a5562343496412629b",
    "head_branch": "PYTHON-2888",
    "is_a_fork": true,
    "comments": [
      "Patch failed with:\r\n```\r\n[2021/12/10 02:07:17.431] Running command 'perf.send' in \"send dashboard data\" (step 4 of 4)\r\n[2021/12/10 02:07:17.431] Task failed: command failed: problem reading tests from '/data/mci/5dd3bffd60584c7d823485c03b3eab22/src/results.json': problem unmarshaling report data: json: cannot unmarshal object into Go value of type []poplar.Test\r\n[2021/12/10 02:07:17.431] Command failed: problem reading tests from '/data/mci/5dd3bffd60584c7d823485c03b3eab22/src/results.json': problem unmarshaling report data: json: cannot unmarshal object into Go value of type []poplar.Test\r\n[2021/12/10 02:07:17.431] StatsCollector ticker stopping.\r\n[2021/12/10 02:07:17.432] Task completed - FAILURE.\r\n```\r\n\r\nThe results file must be malformed. Here's the poplar.Test schema: https://github.com/evergreen-ci/poplar/blob/0999224b53dfa298bfaae80fe680fe7dc9d538d4/report.go#L39",
      "Fixed: https://spruce.mongodb.com/version/61b2c28332f41770ff5823e9/tasks",
      "New patch: https://spruce.mongodb.com/version/61b7bbd23627e00295e72080"
    ],
    "commit_messages": [
      "PYTHON-2888 Migrate from json.send to perf.send (#819)\n\nRename ops_per_sec to bytes_per_sec to better reflect the perf measurement."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ac44ee515ce6a4b17c",
    "number": 818,
    "body": "This has one side effect that a warning is printed when running setup.py check or sdist:\r\n```\r\n$ python3.10 setup.py check\r\nrunning check\r\nwarning: check: missing meta-data: if 'author' supplied, 'author_email' should be supplied too\r\n``` \r\nAnd:\r\n```\r\n python3.10 setup.py sdist\r\nrunning sdist\r\nrunning egg_info\r\nwriting pymongo.egg-info/PKG-INFO\r\nwriting dependency_links to pymongo.egg-info/dependency_links.txt\r\nwriting requirements to pymongo.egg-info/requires.txt\r\nwriting top-level names to pymongo.egg-info/top_level.txt\r\nreading manifest file 'pymongo.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nadding license file 'LICENSE'\r\nwriting manifest file 'pymongo.egg-info/SOURCES.txt'\r\nrunning check\r\nwarning: check: missing meta-data: if 'author' supplied, 'author_email' should be supplied too\r\n\r\n...\r\nWriting pymongo-4.1.0.dev0/setup.cfg\r\nCreating tar archive\r\nremoving 'pymongo-4.1.0.dev0' (and everything under it)\r\n```\r\n\r\nWe can just ignore this warning. See https://discuss.python.org/t/which-fields-are-required-for-a-setup-py-especially-is-author-required/2705",
    "head_branch": "PYTHON-2160",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2160 Stop using Google Groups email address (#818)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ad44ee515ce6a4b17d",
    "number": 817,
    "body": null,
    "head_branch": "PYTHON-2763",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2763 Remove outdated check_keys and $clusterTime logic (#817)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ae44ee515ce6a4b17e",
    "number": 816,
    "body": null,
    "head_branch": "PYTHON-2585",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2585 Remove legacy multi-auth code (#816)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9af44ee515ce6a4b17f",
    "number": 815,
    "body": "Passing tests here: https://github.com/ShaneHarvey/mongo-python-driver/actions/runs/1560579660\r\n\r\nNote that our main testing is done on Evergreen (https://evergreen.mongodb.com/waterfall/mongo-python-driver) but actions is useful to get quicker feedback and help external contributors.",
    "head_branch": "PYTHON-2473",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2473 Add basic Github Actions testing (#815)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b044ee515ce6a4b180",
    "number": 814,
    "body": "This is a proof of concept to add a binder demo to this repo",
    "head_branch": "binder-demo",
    "is_a_fork": true,
    "comments": [
      "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/blink1073/mongo-python-driver/binder-demo?urlpath=/lab/tree/binder/notebooks/MongoClient.ipynb)",
      "Closing as stale, I may pick this up during the next skunk works"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b144ee515ce6a4b181",
    "number": 813,
    "body": "Tests are passing here: https://evergreen.mongodb.com/version/61afbeac1e2d1765ffcf91e9",
    "head_branch": "PYTHON-3026",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3026 Fix Windows Python 3.6 tests (#813)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b144ee515ce6a4b182",
    "number": 812,
    "body": "This was the command I used to look for lines to remove:\r\n```\r\n$ git grep 'ongo' -- ':(exclude)doc/changelog.rst' | grep -E '3\\.[0123456789]|2\\.[0123456789]'\r\n```",
    "head_branch": "remove-outdated-server-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removed references to outdated server versions (#812)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b244ee515ce6a4b183",
    "number": 811,
    "body": null,
    "head_branch": "release-4.0.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 4.0.1 (#811)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc9b344ee515ce6a4b184",
    "number": 810,
    "body": "Please review the new changelog entry: https://pymongo--810.org.readthedocs.build/en/810/changelog.html",
    "head_branch": "v3.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.12.3 (#810)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fc9b444ee515ce6a4b185",
    "number": 809,
    "body": "This change fixes how pymongo sends $readPreference to the server via OP_MSG:\r\n- Stop sending $readPreference to standalone servers. The spec says to omit it.\r\n- Stop sending $readPreference with primary read preference to all servers. The spec says to omit \"primary\" since it's the server's default.\r\n- The final rule is to always send $readPreference=primaryPreferred when directly connected to a single replica set member. This is to ensure that the app does not get NotPrimary errors for direct connections.\r\n\r\nThis change also removes the `secondary_ok` variable which is no longer needed. Instead of tracking the \"secondary ok\" boolean we replace the input read preference with the effective read preference (primary, primaryPreferred, or the original read preference). \r\n\r\nThis change depends on https://github.com/mongodb/mongo-python-driver/pull/774 so please review that one first.",
    "head_branch": "PYTHON-1864",
    "is_a_fork": true,
    "comments": [
      "Update to fix the merge conflicts. @juliusgeo please take a look."
    ],
    "commit_messages": [
      "PYTHON-1864 PYTHON-2931 Spec complaint $readPreference  (#809)\n\nStop sending $readPreference to standalone servers.\r\nStop sending $readPreference primary because it's the server default.\r\nRemove outdated secondary_ok flag."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b544ee515ce6a4b186",
    "number": 808,
    "body": null,
    "head_branch": "PYTHON-3033",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3033 Fix typo in uuid docs (#808)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b644ee515ce6a4b187",
    "number": 807,
    "body": null,
    "head_branch": "PYTHON-3028",
    "is_a_fork": true,
    "comments": [
      "> This is not ready for review because there are no tests.\r\n\r\nSorry about that, added tests."
    ],
    "commit_messages": [
      "PYTHON-3028 $regex as a field name does not allow for non-string values (#807)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b644ee515ce6a4b188",
    "number": 806,
    "body": "This change fixes the bug and also implements DRIVERS-1999.",
    "head_branch": "PYTHON-3027",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3027 Fix server selection when topology type is Unknown (#806)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b744ee515ce6a4b189",
    "number": 805,
    "body": "When resolving SRV records, the pymongo library disregards the previous error which lead to the configuration error.\r\n\r\nThis is making them harder to debug, especially when they occur only in CI (which is the case for us with [Celery](https://github.com/celery/celery/runs/4371284502?check_suite_focus=true#step:8:3264)).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Can you provide an example of the error behavior before and after this change?",
      "Any update here? Could you provide output before and after this change to show how this makes it easier to debug the `ConfigurationError: not a name` exception?\r\n\r\nThe real underlying issue may be that the Celery test is using mock to patch only one dnspython method but pymongo calls different methods depending on the version:\r\n```python\r\n    if hasattr(resolver, 'resolve'):\r\n        # dnspython >= 2\r\n        return resolver.resolve(*args, **kwargs)\r\n    # dnspython 1.X\r\n    return resolver.query(*args, **kwargs)\r\n```\r\n\r\nThis was originally changed in: https://jira.mongodb.org/browse/PYTHON-2364",
      "Closing since I don't see how this change is an improvement."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b844ee515ce6a4b18a",
    "number": 804,
    "body": null,
    "head_branch": "PYTHON-2957",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2957 Support 'let' option for multiple CRUD commands (#804)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9b944ee515ce6a4b18b",
    "number": 803,
    "body": "This change:\r\n- automatically combines release wheels into one archive\r\n- adds the sdist build\r\n- moves the manylinux wheel builds to ubuntu2004-large because they are expensive\r\n- refactors the EVG release matrix into a single variant\r\n- updates the release.rst docs for the newly simplified release process\r\n\r\nTesting here: https://spruce.mongodb.com/version/619d6da457e85a345d0aafb7/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC",
    "head_branch": "PYTHON-2434",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2434 Automatically combine release wheels + sdist into one archive (#803)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ba44ee515ce6a4b18c",
    "number": 802,
    "body": null,
    "head_branch": "PYTHON-3024",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3024 Update estimatedDocumentCount test for Atlas Data Lake (#802)\n\nMigrate data lake testing to ubuntu 18.\r\nEnsure mongohouse downloads the right build via VARIANT."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9bb44ee515ce6a4b18d",
    "number": 801,
    "body": null,
    "head_branch": "PYTHON-3018",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3018 Add docs for removed methods from Collection (#801)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9bc44ee515ce6a4b18e",
    "number": 800,
    "body": "This PR resyncs the spec tests for DRIVERS-1385. It also fixes a bug where pymongo did not properly retry after writeConcernErrors encountered in bulk writes. ",
    "head_branch": "PYTHON-2984",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2984 Fix retry behavior for bulk write writeConcernError (#800)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9bd44ee515ce6a4b18f",
    "number": 799,
    "body": null,
    "head_branch": "PYTHON-3021",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3021 Send primaryPreferred when connected to standalone servers (#799)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9bd44ee515ce6a4b190",
    "number": 798,
    "body": "We don't support 3.0 or 3.4 anymore.",
    "head_branch": "PYTHON-2919",
    "is_a_fork": true,
    "comments": [
      "Here's a patch to prove the new evg config is valid: https://spruce.mongodb.com/version/6196bc0c7742ae7ec6486001/tasks?sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC"
    ],
    "commit_messages": [
      "PYTHON-2919 Remove MongoDB 2.6-3.4 from performance testing (#798)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9be44ee515ce6a4b191",
    "number": 797,
    "body": null,
    "head_branch": "PYTHON-3020-fix",
    "is_a_fork": true,
    "comments": [
      "Depends on: https://github.com/mongodb/mongo-python-driver/pull/796\r\n",
      "I'll merge this once the tests are passing."
    ],
    "commit_messages": [
      "PYTHON-3020 Properly mark server unknown after \"not master\" errors without a code (#797)\n\nFix prefer-error-code SDAM test."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9bf44ee515ce6a4b192",
    "number": 796,
    "body": null,
    "head_branch": "PYTHON-2773",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2773 Mockupdb test failures (#796)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c044ee515ce6a4b193",
    "number": 795,
    "body": null,
    "head_branch": "PYTHON-2981-fix-hashing",
    "is_a_fork": true,
    "comments": [
      "Updated to mention this change in the changelog. I don't think it's worth calling out in the migration guide. I also expanded the testing a bit."
    ],
    "commit_messages": [
      "PYTHON-2981 Stop using MongoClient.address for hashing and equality (#795)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c144ee515ce6a4b194",
    "number": 794,
    "body": null,
    "head_branch": "PYTHON-3019",
    "is_a_fork": true,
    "comments": [
      "Hmm looks like the migrate to pymongo3 doc has more doctest failures:\r\n```\r\nFile \"migrate-to-pymongo3.rst\", line 481, in default\r\nFailed example:\r\n    address = client.address\r\nException raised:\r\n    Traceback (most recent call last):\r\n      File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/doctest.py\", line 1336, in __run\r\n        exec(compile(example.source, filename, \"single\",\r\n      File \"<doctest default[0]>\", line 1, in <module>\r\n        address = client.address\r\n      File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 946, in address\r\n        return self._server_property('address')\r\n      File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 802, in _server_property\r\n        server = self._topology.select_server(\r\n      File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 242, in select_server\r\n        servers = self.select_servers(\r\n      File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 200, in select_servers\r\n        server_descriptions = self._select_servers_loop(\r\n      File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 220, in _select_servers_loop\r\n        self._ensure_opened()\r\n      File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 559, in _ensure_opened\r\n        raise InvalidOperation(\"Cannot use MongoClient after close\")\r\n    pymongo.errors.InvalidOperation: Cannot use MongoClient after close\r\n**********************************************************************\r\nFile \"migrate-to-pymongo3.rst\", line 482, in default\r\nFailed example:\r\n    host, port = address or (None, None)\r\nException raised:\r\n    Traceback (most recent call last):\r\n      File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/doctest.py\", line 1336, in __run\r\n        exec(compile(example.source, filename, \"single\",\r\n      File \"<doctest default[1]>\", line 1, in <module>\r\n        host, port = address or (None, None)\r\n    NameError: name 'address' is not defined\r\n```\r\n\r\nNow I'm wondering if we should just delete this file altogether. The 2 -> 3 migration guide already lives in pymongo 3.x. I don't think it make sense to maintain it in pymongo 4 as well.",
      "You could get rid of it and change the PyMongo 4 migration guide to refer to the docs for PyMongo 3.12."
    ],
    "commit_messages": [
      "PYTHON-3019 Fix doc test failures (#794)\n\nRemove pymongo 2 to 3 migration guide.\r\nMake raw_bson doc tests less flakey."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c244ee515ce6a4b195",
    "number": 793,
    "body": "Depends on https://github.com/mongodb/libmongocrypt/pull/218",
    "head_branch": "PYTHON-3001",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3001 Bump minimum pymongocrypt version to 1.2.0 (#793)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c244ee515ce6a4b196",
    "number": 792,
    "body": null,
    "head_branch": "python3015v312",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3015 Update v3.12 docs about cipher mismatch (#792)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c344ee515ce6a4b197",
    "number": 791,
    "body": null,
    "head_branch": "python3015",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3015 Document cipher mismatch issues (#791)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c444ee515ce6a4b198",
    "number": 790,
    "body": null,
    "head_branch": "PYTHON-3017-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-3017 Properly check for closed KMS connections (#790)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c544ee515ce6a4b199",
    "number": 789,
    "body": null,
    "head_branch": "PYTHON-3005",
    "is_a_fork": true,
    "comments": [
      "Still looks good to me."
    ],
    "commit_messages": [
      "PYTHON-3005 Make maxConnecting configurable (#789)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c644ee515ce6a4b19a",
    "number": 788,
    "body": "This test often fails on windows because the host is too slow. For example:\r\n```\r\n [2021/11/13 01:27:37.211] ERROR: test_transaction_starts_with_batched_write (test_transactions.TestTransactions)\r\n [2021/11/13 01:27:37.211] ----------------------------------------------------------------------\r\n [2021/11/13 01:27:37.211] Traceback (most recent call last):\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\test\\__init__.py\", line 555, in wrap\r\n [2021/11/13 01:27:37.211]     return f(*args, **kwargs)\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\test\\__init__.py\", line 555, in wrap\r\n [2021/11/13 01:27:37.211]     return f(*args, **kwargs)\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\test\\test_transactions.py\", line 309, in test_transaction_starts_with_batched_write\r\n [2021/11/13 01:27:37.211]     coll.bulk_write(ops, session=session)\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\client_session.py\", line 336, in __exit__\r\n [2021/11/13 01:27:37.211]     self.__session.commit_transaction()\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\client_session.py\", line 712, in commit_transaction\r\n [2021/11/13 01:27:37.211]     self._finish_transaction_with_retry(\"commitTransaction\")\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\client_session.py\", line 771, in _finish_transaction_with_retry\r\n [2021/11/13 01:27:37.211]     return self._client._retry_internal(True, func, self, None)\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\mongo_client.py\", line 1254, in _retry_internal\r\n [2021/11/13 01:27:37.211]     return func(session, sock_info, retryable)\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\client_session.py\", line 770, in func\r\n [2021/11/13 01:27:37.211]     return self._finish_transaction(sock_info, command_name)\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\client_session.py\", line 794, in _finish_transaction\r\n [2021/11/13 01:27:37.211]     return self._client.admin._command(\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\database.py\", line 486, in _command\r\n [2021/11/13 01:27:37.211]     return sock_info.command(\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\pool.py\", line 719, in command\r\n [2021/11/13 01:27:37.211]     return command(self, dbname, spec, secondary_ok,\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\network.py\", line 158, in command\r\n [2021/11/13 01:27:37.211]     helpers._check_command_response(\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\helpers.py\", line 127, in _check_command_response\r\n [2021/11/13 01:27:37.211]     _raise_write_concern_error(_error)\r\n [2021/11/13 01:27:37.211]   File \"C:\\data\\mci\\095314dcd9cb2f3eef50d8f626aa69ad\\src\\pymongo\\helpers.py\", line 187, in _raise_write_concern_error\r\n [2021/11/13 01:27:37.211]     raise WriteConcernError(\r\n [2021/11/13 01:27:37.211] pymongo.errors.WriteConcernError: operation was interrupted because the transaction exceeded the configured 'transactionLifetimeLimitSeconds', full error: {'code': 290, 'codeName': 'TransactionExceededLifetimeLimitSeconds', 'errmsg': \"operation was interrupted because the transaction exceeded the configured 'transactionLifetimeLimitSeconds'\", 'errInfo': {'writeConcern': {'w': 'majority', 'wtimeout': 0, 'provenance': 'implicitDefault'}}}\r\n```",
    "head_branch": "PYTHON-2915",
    "is_a_fork": true,
    "comments": [
      "I'm just going to merge this to resolve these test failures."
    ],
    "commit_messages": [
      "PYTHON-2915 Skip large txn test on slow Windows hosts (#788)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c744ee515ce6a4b19b",
    "number": 787,
    "body": null,
    "head_branch": "PYTHON-1489",
    "is_a_fork": true,
    "comments": [
      "You've accidentally committed the virtualenv directory. Please remove it."
    ],
    "commit_messages": [
      "PYTHON-1489 Merge ajdavis/pymongo-mockup-tests into pymongo (#787)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c844ee515ce6a4b19c",
    "number": 786,
    "body": "Resync CSFLE spec tests.\r\nImplement new KMS TLS Options Tests and other kmip prose tests.",
    "head_branch": "PYTHON-3004",
    "is_a_fork": true,
    "comments": [
      "Waiting for the tests to pass before requesting a review.",
      "Starting the mock kms server is failing on EVG: \r\n```\r\n [2021/11/12 01:05:15.368] + python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 8002 --require_client_cert\r\n [2021/11/12 01:05:15.684] /data/mci/95a1a58fd6dec98b9c985856ff7214a8/src\r\n [2021/11/12 01:05:15.684] Mock KMS Web Server Listening on port 8000\r\n [2021/11/12 01:05:15.685] Mock KMS Web Server Listening on port 8002\r\n [2021/11/12 01:05:15.685] Mock KMS Web Server Listening on port 8001\r\n [2021/11/12 01:05:16.124] Process SyncManager-1:\r\n [2021/11/12 01:05:16.124] Traceback (most recent call last):\r\n [2021/11/12 01:05:16.124]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\r\n [2021/11/12 01:05:16.124]     self.run()\r\n [2021/11/12 01:05:16.124]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/process.py\", line 93, in run\r\n [2021/11/12 01:05:16.124]     self._target(*self._args, **self._kwargs)\r\n [2021/11/12 01:05:16.124]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/managers.py\", line 539, in _run_server\r\n [2021/11/12 01:05:16.124]     server = cls._Server(registry, address, authkey, serializer)\r\n [2021/11/12 01:05:16.124]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/managers.py\", line 139, in __init__\r\n [2021/11/12 01:05:16.124]     self.listener = Listener(address=address, backlog=16)\r\n [2021/11/12 01:05:16.124]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/connection.py\", line 438, in __init__\r\n [2021/11/12 01:05:16.124]     self._listener = SocketListener(address, family, backlog)\r\n [2021/11/12 01:05:16.124]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/connection.py\", line 576, in __init__\r\n [2021/11/12 01:05:16.124]     self._socket.bind(address)\r\n [2021/11/12 01:05:16.124] OSError: AF_UNIX path too long\r\n [2021/11/12 01:05:16.125] Traceback (most recent call last):\r\n [2021/11/12 01:05:16.125]   File \"kms_kmip_server.py\", line 52, in <module>\r\n [2021/11/12 01:05:16.126]     main()\r\n [2021/11/12 01:05:16.126]   File \"kms_kmip_server.py\", line 46, in main\r\n [2021/11/12 01:05:16.126]     with server:\r\n [2021/11/12 01:05:16.126]   File \"/data/mci/95a1a58fd6dec98b9c985856ff7214a8/drivers-tools/.evergreen/csfle/kmstlsvenv/lib/python3.6/site-packages/kmip/services/server/server.py\", line 476, in __enter__\r\n [2021/11/12 01:05:16.126]     self.start()\r\n [2021/11/12 01:05:16.126]   File \"/data/mci/95a1a58fd6dec98b9c985856ff7214a8/drivers-tools/.evergreen/csfle/kmstlsvenv/lib/python3.6/site-packages/kmip/services/server/server.py\", line 243, in start\r\n [2021/11/12 01:05:16.126]     self.manager = multiprocessing.Manager()\r\n [2021/11/12 01:05:16.126]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/context.py\", line 56, in Manager\r\n [2021/11/12 01:05:16.126]     m.start()\r\n [2021/11/12 01:05:16.126]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/managers.py\", line 517, in start\r\n [2021/11/12 01:05:16.126]     self._address = reader.recv()\r\n [2021/11/12 01:05:16.126]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/connection.py\", line 250, in recv\r\n [2021/11/12 01:05:16.127]     buf = self._recv_bytes()\r\n [2021/11/12 01:05:16.127]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/connection.py\", line 407, in _recv_bytes\r\n [2021/11/12 01:05:16.127]     buf = self._recv(4)\r\n [2021/11/12 01:05:16.127]   File \"/opt/python/3.6/lib/python3.6/multiprocessing/connection.py\", line 383, in _recv\r\n [2021/11/12 01:05:17.339]     raise EOFError\r\n [2021/11/12 01:05:17.339] EOFError\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_amazon1_test_encryption__platform~awslinux_auth_ssl~noauth_nossl_python_version~3.9_encryption~encryption_test_5.0_standalone_patch_370e1652ad97a2dbfd33400fc0e23a6c2fc4a5d5_618db7453e8e863fe33d8152_21_11_12_00_37_26/logs?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nGoogling around I found this very helpful issue: https://github.com/broadinstitute/cromwell/issues/3647\r\n\r\nTLDR: Setting $TMPDIR to a shorter path should resolve the issue.",
      "Debugging a few more failures all on Windows. Windows Python 3.10 times out after blocking for 27 minutes in `test_encryption.TestKmsTLSOptions.test_01_aws`\r\n```\r\n [2021/11/12 20:30:23.823] test_explicit (test_encryption.TestGCPEncryption) ... ok\r\n [2021/11/12 20:57:28.670] Command stopped early: context canceled\r\n [2021/11/12 20:57:28.705] test_01_aws (test_encryption.TestKmsTLSOptions) ...\r\n [2021/11/12 20:57:28.705] Running task-timeout commands.\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_windows_encryption__platform~windows_64_vsMulti_small_auth_ssl~noauth_nossl_python_version_windows~3.10_encryption~encryption_test_4.2_standalone_patch_370e1652ad97a2dbfd33400fc0e23a6c2fc4a5d5_618ec56fe3c3314c3170fc42_21_11_12_19_50_08/logs?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nNon-Python 3.6 tests on Windows fail with:\r\n```\r\n [2021/11/12 20:28:00.459] FAIL: test_02_azure (test_encryption.TestKmsTLSOptions)\r\n [2021/11/12 20:28:00.459] ----------------------------------------------------------------------\r\n [2021/11/12 20:28:00.459] Traceback (most recent call last):\r\n [2021/11/12 20:28:00.459]   File \"C:\\data\\mci\\84ae93aa280a4192c655cbe26366f82a\\src\\pymongo\\encryption.py\", line 74, in _wrap_encryption_errors\r\n [2021/11/12 20:28:00.459]     yield\r\n [2021/11/12 20:28:00.459] ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n [2021/11/12 20:28:00.459] During handling of the above exception, another exception occurred:\r\n [2021/11/12 20:28:00.459] pymongo.errors.EncryptionError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n [2021/11/12 20:28:00.459] During handling of the above exception, another exception occurred:\r\n [2021/11/12 20:28:00.459] Traceback (most recent call last):\r\n [2021/11/12 20:28:00.459]   File \"C:\\data\\mci\\84ae93aa280a4192c655cbe26366f82a\\src\\test\\test_encryption.py\", line 1858, in test_02_azure\r\n [2021/11/12 20:28:00.459]     self.client_encryption_no_client_cert.create_data_key('azure', key)\r\n [2021/11/12 20:28:00.459] AssertionError: \"certificate required|SSL handshake failed|EOF\" does not match \"[WinError 10054] An existing connection was forcibly closed by the remote host\"\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_windows_encryption__platform~windows_64_vsMulti_small_auth_ssl~noauth_nossl_python_version_windows~3.9_encryption~encryption_test_5.0_standalone_patch_370e1652ad97a2dbfd33400fc0e23a6c2fc4a5d5_618ec56fe3c3314c3170fc42_21_11_12_19_50_08/logs?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nThere's also this error which might be related:\r\n```\r\n [2021/11/12 20:24:48.813] dirname: missing operand\r\n [2021/11/12 20:24:48.813] Try 'dirname --help' for more information.\r\n```\r\n\r\nIt would be great if we logged the stack thread of all the threads when we experience a EVG timeout. I think we can do that with a signal handler.\r\n\r\nEdit: I think the errors are happening because the mock KMS server is being started way later than expected:\r\nThe background shell script is started at 20:22:50.605:\r\n```\r\n[2021/11/12 20:22:50.605] Executing script with sh: if [ -n \"true\" ]; then\r\n[2021/11/12 20:22:50.605]   cd C:/data/mci/84ae93aa280a4192c655cbe26366f82a/drivers-tools/.evergreen/csfle\r\n[2021/11/12 20:22:50.605]   . ./activate_venv.sh\r\n[2021/11/12 20:22:50.605]   # The -u options forces the stdout and stderr streams to be unbuffered.\r\n[2021/11/12 20:22:50.605]   # TMPDIR is required to avoid \"AF_UNIX path too long\" errors.\r\n[2021/11/12 20:22:50.605]   TMPDIR=\"$(dirname $DRIVERS_TOOLS)\" python -u kms_kmip_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem  --port 5698 &\r\n[2021/11/12 20:22:50.605]   python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/expired.pem --port 8000 &\r\n[2021/11/12 20:22:50.605]   python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/wrong-host.pem --port 8001 &\r\n[2021/11/12 20:22:50.605]   python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 8002 --require_client_cert &\r\n[2021/11/12 20:22:50.605] fi\r\n[2021/11/12 20:22:50.608] Finished 'shell.exec' in \"run tests\" in 3.4374ms\r\n```\r\nBut the \"Starting KMS KMIP server on port 5698\" isn't logged until 3 minutes later at 20:25:26.865:\r\n```\r\n[2021/11/12 20:25:26.839] test_explicit (test_encryption.TestGCPEncryption) ... ok\r\n[2021/11/12 20:25:26.865] Starting KMS KMIP server on port 5698\r\n[2021/11/12 20:25:26.865] Received POST: /\r\n[2021/11/12 20:25:26.865] RAW INPUT: b'{\"Plaintext\": \"mdjEQEoje3x/VOQHcc10ql704aQ2sjQBguJTTAafBrRSOpf4gi9HW8MOlTO/0hGH8xc2PmdD+oIzBtJ4O8gtb/uesJn4p31EJb40oV3gci84axvn4Qpk/yX9hesfCz0k\", \"KeyId\": \"arn:aws:kms:us-east-1:579766882180:key/89fcc2c4-08b0-4bd9-9f25-e30687b580d0\"}'\r\n[2021/11/12 20:25:26.865] Sending Response: Unexpected host\r\n[2021/11/12 20:25:26.869] 127.0.0.1 - - [12/Nov/2021 20:25:26] \"POST / HTTP/1.1\" 200 -\r\n[2021/11/12 20:25:26.869] 127.0.0.1 - - [12/Nov/2021 20:25:26] \"POST / HTTP/1.1\" 200 -\r\n[2021/11/12 20:25:26.869] ----------------------------------------\r\n[2021/11/12 20:25:26.869] Exception happened during processing of request from ('127.0.0.1', 61274)\r\n[2021/11/12 20:25:26.869] Traceback (most recent call last):\r\n[2021/11/12 20:25:26.869]   File \"C:\\python\\Python38\\lib\\socketserver.py\", line 316, in _handle_request_noblock\r\n[2021/11/12 20:25:26.869]     self.process_request(request, client_address)\r\n[2021/11/12 20:25:26.869]   File \"C:\\python\\Python38\\lib\\socketserver.py\", line 347, in process_request\r\n[2021/11/12 20:25:26.869]     self.finish_request(request, client_address)\r\n[2021/11/12 20:25:26.870]   File \"C:\\python\\Python38\\lib\\socketserver.py\", line 360, in finish_request\r\n[2021/11/12 20:25:26.870]     self.RequestHandlerClass(request, client_address, self)\r\n[2021/11/12 20:25:26.870]   File \"C:\\python\\Python38\\lib\\socketserver.py\", line 747, in __init__\r\n[2021/11/12 20:25:26.870]     self.handle()\r\n[2021/11/12 20:25:26.870]   File \"C:\\python\\Python38\\lib\\http\\server.py\", line 427, in handle\r\n[2021/11/12 20:25:26.870]     self.handle_one_request()\r\n[2021/11/12 20:25:26.870]   File \"C:\\python\\Python38\\lib\\http\\server.py\", line 415, in handle_one_request\r\n[2021/11/12 20:25:26.870]     method()\r\n[2021/11/12 20:25:26.870]   File \"kms_http_server.py\", line 55, in do_POST\r\n[2021/11/12 20:25:26.870]     self._do_post()\r\n[2021/11/12 20:25:26.870]   File \"kms_http_server.py\", line 74, in _do_post\r\n[2021/11/12 20:25:26.870]     self._send_reply(data.encode(\"utf-8\"))\r\n[2021/11/12 20:25:26.870]   File \"C:\\data\\mci\\84ae93aa280a4192c655cbe26366f82a\\drivers-tools\\.evergreen\\csfle\\kms_http_common.py\", line 89, in _send_reply\r\n[2021/11/12 20:25:26.870]     self.wfile.write(data)\r\n[2021/11/12 20:25:26.870]   File \"C:\\python\\Python38\\lib\\socketserver.py\", line 826, in write\r\n[2021/11/12 20:25:26.870]     self._sock.sendall(b)\r\n[2021/11/12 20:25:26.870]   File \"C:\\python\\Python38\\lib\\ssl.py\", line 1204, in sendall\r\n[2021/11/12 20:25:26.870]     v = self.send(byte_view[count:])\r\n[2021/11/12 20:25:26.870]   File \"C:\\python\\Python38\\lib\\ssl.py\", line 1173, in send\r\n[2021/11/12 20:25:26.870]     return self._sslobj.write(data)\r\n[2021/11/12 20:25:26.870] ConnectionAbortedError: [WinError 10053] An established connection was aborted by the software in your host machine\r\n[2021/11/12 20:25:26.870] ----------------------------------------\r\n[2021/11/12 20:25:26.877] test_01_aws (test_encryption.TestKmsTLSOptions) ... ok\r\n```",
      "Okay I think I've fixed the windows tests. The fix was to actually connect to the KMIP server before running the test suite. I'm not sure why this was required but it seems to fix the issue.",
      "Okay this is now ready for review.",
      "I'm skipping the hanging windows 3.10 tests for now and I'll investigate in a new ticket."
    ],
    "commit_messages": [
      "PYTHON-3004 Support kmip FLE KMS provider (#786)\n\nResync CSFLE spec tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c844ee515ce6a4b19d",
    "number": 785,
    "body": null,
    "head_branch": "PYTHON-3014",
    "is_a_fork": true,
    "comments": [
      "Please fix these issues as well:\r\n```\r\n [2021/11/12 18:48:48.578]   Topology <Topology <TopologyDescription id: 618eb62b2a3248eb7baee2cf, topology_type: Single, servers: [<ServerDescription ('localhost', 27017) server_type: Standalone, rtt: 0.0016251377895071756>]>> has THREADS RUNNING: [<PeriodicExecutor(name=pymongo_server_monitor_thread) object at 0x7f63b2e336d8>, <PeriodicExecutor(name=pymongo_server_rtt_thread) object at 0x7f63b2e338d0>], created at:   File \"setup.py\", line 347, in <module>\r\n [2021/11/12 18:48:48.578]     **extra_opts\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/venv-encryption/lib64/python3.6/dist-packages/setuptools/__init__.py\", line 159, in setup\r\n [2021/11/12 18:48:48.578]     return distutils.core.setup(**attrs)\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/distutils/core.py\", line 148, in setup\r\n [2021/11/12 18:48:48.578]     dist.run_commands()\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/distutils/dist.py\", line 955, in run_commands\r\n [2021/11/12 18:48:48.578]     self.run_command(cmd)\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/distutils/dist.py\", line 974, in run_command\r\n [2021/11/12 18:48:48.578]     cmd_obj.run()\r\n [2021/11/12 18:48:48.578]   File \"setup.py\", line 127, in run\r\n [2021/11/12 18:48:48.578]     result = runner.run(suite)\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/__init__.py\", line 1070, in run\r\n [2021/11/12 18:48:48.578]     result = super(PymongoTestRunner, self).run(test)\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/unittest/runner.py\", line 176, in run\r\n [2021/11/12 18:48:48.578]     test(result)\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/unittest/suite.py\", line 84, in __call__\r\n [2021/11/12 18:48:48.578]     return self.run(*args, **kwds)\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/unittest/suite.py\", line 122, in run\r\n [2021/11/12 18:48:48.578]     test(result)\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/unittest/case.py\", line 670, in __call__\r\n [2021/11/12 18:48:48.578]     return self.run(*args, **kwds)\r\n [2021/11/12 18:48:48.578]   File \"/usr/lib64/python3.6/unittest/case.py\", line 622, in run\r\n [2021/11/12 18:48:48.578]     testMethod()\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/test_create_entities.py\", line 134, in test_store_all_others_as_entities\r\n [2021/11/12 18:48:48.578]     self.scenario_runner.run_scenario(spec[\"tests\"][0])\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/unified_format.py\", line 1194, in run_scenario\r\n [2021/11/12 18:48:48.578]     self.TEST_SPEC.get('createEntities', []))\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/unified_format.py\", line 371, in create_entities_from_spec\r\n [2021/11/12 18:48:48.578]     self._create_entity(spec)\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/unified_format.py\", line 318, in _create_entity\r\n [2021/11/12 18:48:48.578]     client = rs_or_single_client(**kwargs)\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/utils.py\", line 576, in rs_or_single_client\r\n [2021/11/12 18:48:48.578]     return _mongo_client(h, p, **kwargs)\r\n [2021/11/12 18:48:48.578]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/utils.py\", line 539, in _mongo_client\r\n [2021/11/12 18:48:48.578]     return MongoClient(uri, port, **client_options)\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/pymongo/mongo_client.py\", line 751, in __init__\r\n [2021/11/12 18:48:48.579]     srv_max_hosts=srv_max_hosts\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/pymongo/settings.py\", line 74, in __init__\r\n [2021/11/12 18:48:48.579]     self._stack = ''.join(traceback.format_stack())\r\n ```\r\n ```\r\n [2021/11/12 18:48:48.579]   Topology <Topology <TopologyDescription id: 618eb62b2a3248eb7baee2d0, topology_type: Single, servers: [<ServerDescription ('localhost', 27017) server_type: Standalone, rtt: 0.002375924643324942>]>> has THREADS RUNNING: [<PeriodicExecutor(name=pymongo_server_monitor_thread) object at 0x7f63b2e6c5f8>, <PeriodicExecutor(name=pymongo_server_rtt_thread) object at 0x7f63b2e6c748>], created at:   File \"setup.py\", line 347, in <module>\r\n [2021/11/12 18:48:48.579]     **extra_opts\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/venv-encryption/lib64/python3.6/dist-packages/setuptools/__init__.py\", line 159, in setup\r\n [2021/11/12 18:48:48.579]     return distutils.core.setup(**attrs)\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/distutils/core.py\", line 148, in setup\r\n [2021/11/12 18:48:48.579]     dist.run_commands()\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/distutils/dist.py\", line 955, in run_commands\r\n [2021/11/12 18:48:48.579]     self.run_command(cmd)\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/distutils/dist.py\", line 974, in run_command\r\n [2021/11/12 18:48:48.579]     cmd_obj.run()\r\n [2021/11/12 18:48:48.579]   File \"setup.py\", line 127, in run\r\n [2021/11/12 18:48:48.579]     result = runner.run(suite)\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/__init__.py\", line 1070, in run\r\n [2021/11/12 18:48:48.579]     result = super(PymongoTestRunner, self).run(test)\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/unittest/runner.py\", line 176, in run\r\n [2021/11/12 18:48:48.579]     test(result)\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/unittest/suite.py\", line 84, in __call__\r\n [2021/11/12 18:48:48.579]     return self.run(*args, **kwds)\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/unittest/suite.py\", line 122, in run\r\n [2021/11/12 18:48:48.579]     test(result)\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/unittest/case.py\", line 670, in __call__\r\n [2021/11/12 18:48:48.579]     return self.run(*args, **kwds)\r\n [2021/11/12 18:48:48.579]   File \"/usr/lib64/python3.6/unittest/case.py\", line 622, in run\r\n [2021/11/12 18:48:48.579]     testMethod()\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/test_create_entities.py\", line 51, in test_store_events_as_entities\r\n [2021/11/12 18:48:48.579]     self.scenario_runner.run_scenario(spec[\"tests\"][0])\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/unified_format.py\", line 1194, in run_scenario\r\n [2021/11/12 18:48:48.579]     self.TEST_SPEC.get('createEntities', []))\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/unified_format.py\", line 371, in create_entities_from_spec\r\n [2021/11/12 18:48:48.579]     self._create_entity(spec)\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/unified_format.py\", line 318, in _create_entity\r\n [2021/11/12 18:48:48.579]     client = rs_or_single_client(**kwargs)\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/utils.py\", line 576, in rs_or_single_client\r\n [2021/11/12 18:48:48.579]     return _mongo_client(h, p, **kwargs)\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/test/utils.py\", line 539, in _mongo_client\r\n [2021/11/12 18:48:48.579]     return MongoClient(uri, port, **client_options)\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/pymongo/mongo_client.py\", line 751, in __init__\r\n [2021/11/12 18:48:48.579]     srv_max_hosts=srv_max_hosts\r\n [2021/11/12 18:48:48.579]   File \"/data/mci/9761f08bdab22b20d464975a801a1bc9/src/pymongo/settings.py\", line 74, in __init__\r\n [2021/11/12 18:48:48.579]     self._stack = ''.join(traceback.format_stack())\r\n```\r\n\r\ntest_create_entities is opening clients and never closes them."
    ],
    "commit_messages": [
      "PYTHON-3014 Update how events are added to entity map to match specification (#785)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9c944ee515ce6a4b19e",
    "number": 784,
    "body": null,
    "head_branch": "PYTHON-3003",
    "is_a_fork": true,
    "comments": [
      "Still LGTM. This hostname checking thing is, I think, the one remaining Python version specific irritant in the codebase. I'll be happy when we can drop support for Python 3.6 and get rid of it.",
      "Apologies for the late update but I've changed this to rename `tls_options` to `kms_tls_options` and improved the docs. "
    ],
    "commit_messages": [
      "PYTHON-3003 Add kms_tls_options to configure options for KMS provider connections (#784)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ca44ee515ce6a4b19f",
    "number": 783,
    "body": null,
    "head_branch": "PYTHON-2512",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2512 Update Astrolabe's Workload Executor to use the unified test runner (#783)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9cb44ee515ce6a4b1a0",
    "number": 782,
    "body": null,
    "head_branch": "PYTHON-2460",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2460 Client can create more than minPoolSize background connections (#782)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9cc44ee515ce6a4b1a1",
    "number": 781,
    "body": null,
    "head_branch": "PYTHON-3011",
    "is_a_fork": true,
    "comments": [
      "Weird this test still failed in the patch but with a different error:\r\n```\r\n [2021/11/05 22:44:18.870] FAILURE: 13 != 10 (AssertionError)\r\n [2021/11/05 22:44:18.870] Traceback (most recent call last):\r\n [2021/11/05 22:44:18.870]   File \"/data/mci/2ff0ab031c178ebccd3988f926b1f3cf/src/test/test_load_balancer.py\", line 47, in test_connections_are_only_returned_once\r\n [2021/11/05 22:44:18.870]     self.assertEqual(len(pool.sockets), nconns)\r\n [2021/11/05 22:44:18.870] AssertionError: 13 != 10\r\n```\r\n\r\nThis indicates that something is adding 3 sockets in the time that the find_one executes:\r\n```python\r\n        pool = get_pool(self.client)\r\n        nconns = len(pool.sockets)\r\n        self.db.test.find_one({})\r\n        self.assertEqual(len(pool.sockets), nconns)\r\n```\r\n\r\nI think we can go ahead and merge this PR. Then I will leave the jira ticket open to investigate this new error."
    ],
    "commit_messages": [
      "PYTHON-3011 Fix test_connections_are_only_returned_once (#781)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9cd44ee515ce6a4b1a2",
    "number": 780,
    "body": "Python already has the correct behavior so we just need to add the new test.",
    "head_branch": "PYTHON-2941",
    "is_a_fork": true,
    "comments": [
      "The new test passes everywhere. The failures are due to known flakey tests."
    ],
    "commit_messages": [
      "PYTHON-2941 Add a CMAP test that verifies the background thread hands over connections to threads doing checkout (#780)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9cd44ee515ce6a4b1a3",
    "number": 779,
    "body": null,
    "head_branch": "PYTHON-2721",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2721 Reenable regex flags test on MongoDB 5.0+ (#779)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ce44ee515ce6a4b1a4",
    "number": 778,
    "body": null,
    "head_branch": "PYTHON-2971",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2971 PossiblePrimary must not be checked for wire version compatibility of MaxStalenessSeconds (#778)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9cf44ee515ce6a4b1a5",
    "number": 777,
    "body": null,
    "head_branch": "PYTHON-2999",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2999 Remove unused and internal only CRAM-MD5 auth mechanism (#777)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d044ee515ce6a4b1a6",
    "number": 776,
    "body": null,
    "head_branch": "PYTHON-2998",
    "is_a_fork": true,
    "comments": [
      "I made a small test update to use delete_many+drop_indexes to clear the collection state rather than use drop_collection. This speeds up the gridfs test quite a bit. On a MongoDB 5.1.0-alpha-1170-g4c2c9d1 3 member replica set the following used to run in 219 seconds:\r\n```\r\n$ python3 -m unittest discover -s test -v -k 'grid'  \r\n...\r\n----------------------------------------------------------------------\r\nRan 133 tests in 219.580s\r\n\r\nOK\r\n```\r\n\r\nThe same command now runs in 102.092s. So we've shaved off about 2 minutes in runtime! Still 100 seconds seems high for these tests. There's probably something else we could do but I'll save that for a future project.",
      "Still LGTM"
    ],
    "commit_messages": [
      "PYTHON-2998 Remove md5 checksums from gridfs and remove disable_md5 (#776)\n\nSpeed up gridfs tests (shaves off about 2 minutes on macOS)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d144ee515ce6a4b1a7",
    "number": 775,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks for the PR @Mosallamy however I'm not going to accept it. The issue is that PyMongo has many pep8 violations besides the ones fixed in this PR. Instead of fixing them a few at a time, we are planning to add an auto code formatter."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d244ee515ce6a4b1a8",
    "number": 774,
    "body": "Implementation of https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst#read-preferences-and-server-selection including the changes in DRIVERS-823 and DRIVERS-1969.",
    "head_branch": "PYTHON-2554",
    "is_a_fork": true,
    "comments": [
      "I'll wait for @juliusgeo to review as well."
    ],
    "commit_messages": [
      "PYTHON-2554 Support aggregate $merge and $out executing on secondaries (#774)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d344ee515ce6a4b1a9",
    "number": 773,
    "body": null,
    "head_branch": "PYTHON-2992",
    "is_a_fork": true,
    "comments": [
      "Did you forget to push your changes?",
      "So I had to implement a `numIterations` field to allow the tests to be ran. I tried to implement it using processes (multiprocessing.Process) and that did not work well with the `interrupt_loop()` function, so I'm kind of unsure how to proceed without having to implement a new field in the spec. "
    ],
    "commit_messages": [
      "PYTHON-2992 Implement unified test format loop operation (#773)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d444ee515ce6a4b1aa",
    "number": 772,
    "body": null,
    "head_branch": "PYTHON-2164-options",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2164 Add MongoClient.options, remove redundant properties (#772)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d544ee515ce6a4b1ab",
    "number": 771,
    "body": null,
    "head_branch": "PYTHON-2636",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d544ee515ce6a4b1ac",
    "number": 770,
    "body": "Only keep the old behaviour around for older PyPy versions. xref https://github.com/conda-forge/pymongo-feedstock/pull/50",
    "head_branch": "pypy-7.3.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2987 Fix test unicode repr on PyPy 7.3.7 (#770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d644ee515ce6a4b1ad",
    "number": 769,
    "body": "This was mostly copied from https://jira.mongodb.org/browse/MOTOR-771.",
    "head_branch": "PYTHON-2817",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2817 Add .readthedocs.yaml config file (#769)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d744ee515ce6a4b1ae",
    "number": 768,
    "body": null,
    "head_branch": "PYTHON-2972",
    "is_a_fork": true,
    "comments": [
      "https://evergreen.mongodb.com/version/617b11700ae6064d308aaad6\r\nI verified using this build that it is in fact skipping when dnspython is not installed. I also checked and made sure it IS being run when dnspython is present, as can be seen from the evergreen build for this PR."
    ],
    "commit_messages": [
      "PYTHON-2972 Test Failure - test_srv_max_hosts_kwarg when dnspython is not installed (#768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d844ee515ce6a4b1af",
    "number": 767,
    "body": null,
    "head_branch": "PYTHON-2973",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2973 Revert back to using quote_plus/unquote_plus (#767)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9d944ee515ce6a4b1b0",
    "number": 766,
    "body": "Apps should use the hello command instead:\r\n```python\r\ndoc = client.admin.command('hello')\r\nmax_bson_size = doc['maxBsonObjectSize']\r\nmax_message_size = doc['maxMessageSizeBytes']\r\nmax_write_batch_size = doc['maxWriteBatchSize']\r\n```\r\n\r\nI'll address the remaining configuration attributes (max_pool_size, min_pool_size, max_idle_time_ms, local_threshold_ms, server_selection_timeout, etc.) in a new PR.",
    "head_branch": "PYTHON-2164",
    "is_a_fork": true,
    "comments": [
      "@behackett did you want to review this again?"
    ],
    "commit_messages": [
      "PYTHON-2164 Remove client max_bson_size/max_message_size/max_write_batch_size (#766)\n\nUse the hello command instead:\r\ndoc = client.admin.command('hello')\r\nmax_bson_size = doc['maxBsonObjectSize']\r\nmax_message_size = doc['maxMessageSizeBytes']\r\nmax_write_batch_size = doc['maxWriteBatchSize']\r\n\r\nAlso add documentation for TopologyDescription.apply_selector."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9da44ee515ce6a4b1b1",
    "number": 765,
    "body": null,
    "head_branch": "PYTHON-2911",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2911 Bump maxWireVersion to 14 for MongoDB 5.1 (#765)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9db44ee515ce6a4b1b2",
    "number": 764,
    "body": null,
    "head_branch": "PYTHON-2948",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2948 Add prose test for SRV polling with a custom service name (#764)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9db44ee515ce6a4b1b3",
    "number": 763,
    "body": "Turns out the spec changes have already been added into pymongo. So all that is left is to add the constant. ",
    "head_branch": "PYTHON-2859",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2859 Add BSON Binary subtype 7 (#763)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9dc44ee515ce6a4b1b4",
    "number": 762,
    "body": "Already verified using evergreen patch tool that the `test_crud_unified.TestUnifiedAggregateOutReadConcern.test_readConcern_available_with_out_stage` test is in fact being run on sharded-cluster-latest. ",
    "head_branch": "PYTHON-2926",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2926 Unskip test_readConcern_available_with_out_stage on 5.1+ #762"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9dd44ee515ce6a4b1b5",
    "number": 761,
    "body": "See PYTHON-2966 for an explanation.",
    "head_branch": "PYTHON-2966",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2966 Make MongoClient.event_listeners work as expected (#761)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9de44ee515ce6a4b1b6",
    "number": 760,
    "body": null,
    "head_branch": "PYTHON-2717",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey I added the spec test. However, the behavior of maxpoolsize is already tested in `test_pooling.py`--is there a specific behavior that changed besides the one that we already test?\r\n"
    ],
    "commit_messages": [
      "PYTHON-2717 Treat maxPoolSize=0 the same as maxPoolSize=None"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9df44ee515ce6a4b1b7",
    "number": 759,
    "body": "This fixes the error in the macos release task:\r\n```\r\n[2021/08/11 04:53:33.871]   DEPRECATION: Failed to find 'wheel' at https://artifactory.corp.mongodb.com/artifactory/api/pypi/pypi/simple/wheel/. It is suggested to upgrade your index to support normalized names as the name in /simple/{name}.\r\n--\r\n[2021/08/11 04:53:33.923]   Could not find a version that satisfies the requirement wheel (from versions: )\r\n[2021/08/11 04:53:33.955] Collecting wheel\r\n[2021/08/11 04:53:33.955] No matching distribution found for wheel\r\n[2021/08/11 04:53:33.955] Command failed: command encountered problem: error waiting on process '6db7492e-42a4-48bd-a54c-379d4c49e860': exit status 1\r\n[2021/08/11 04:53:33.955] Task completed - FAILURE.\r\n````\r\n\r\nHere is a patch: https://spruce.mongodb.com/version/616748c0d6d80a1c9a16dfa9\r\n",
    "head_branch": "PYTHON-2944",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2944 Use get-pip for EOL Python versions (#759)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e044ee515ce6a4b1b8",
    "number": 758,
    "body": "Ongoing patch here: https://evergreen.mongodb.com/version/61673fb90305b97de980924f",
    "head_branch": "PYTHON-2923",
    "is_a_fork": true,
    "comments": [
      "I manually checked each release task to ensure 3.10 is now present in all of them."
    ],
    "commit_messages": [
      "PYTHON-2923 Add Python 3.10 to release tasks (#758)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e044ee515ce6a4b1b9",
    "number": 757,
    "body": null,
    "head_branch": "PYTHON-2810",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2810 Disable SSL_CERT_FILE tests on Windows with PyOpenSSL (#757)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e144ee515ce6a4b1ba",
    "number": 756,
    "body": null,
    "head_branch": "PYTHON-2940",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2940 Fix spec tests that require DNSPython (#756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e244ee515ce6a4b1bb",
    "number": 755,
    "body": null,
    "head_branch": "PYTHON-1579",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1579 Update URI parser to adhere to new connection string spec (#755)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e344ee515ce6a4b1bc",
    "number": 754,
    "body": null,
    "head_branch": "PYTHON-2832",
    "is_a_fork": true,
    "comments": [
      "@juliusgeo: Note that tests in https://github.com/mongodb/specifications/pull/1069 were updated earlier today (based on feedback from the Go POC), in case you were working off a previous commit. Feel free to review that PR if you like."
    ],
    "commit_messages": [
      "PYTHON-2832 Provide options to limit number of mongos servers used in connecting to sharded clusters (#754)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e444ee515ce6a4b1bd",
    "number": 753,
    "body": null,
    "head_branch": "PYTHON-2927",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2927 PYTHON-2937 Skip failing tests on PyPy (#753)\n\nCleanup test clients more eagerly."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e544ee515ce6a4b1be",
    "number": 752,
    "body": null,
    "head_branch": "PYTHON-2938",
    "is_a_fork": true,
    "comments": [
      "We need to fix this bug:\r\n```\r\n [2021/10/08 02:08:52.536] ERROR: MongoClient has no attribute '_MongoClient__kill_cursors_queuee'. To access the _MongoClient__kill_cursors_queuee database, use client['_MongoClient__kill_cursors_queuee']. (AttributeError)\r\n [2021/10/08 02:08:52.536] Traceback (most recent call last):\r\n [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/test/test_client.py\", line 1607, in test_process_periodic_tasks\r\n [2021/10/08 02:08:52.536]     \"waited for cursor to be added to queue\")\r\n [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/test/utils.py\", line 750, in wait_until\r\n [2021/10/08 02:08:52.536]     retval = predicate()\r\n [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/test/test_client.py\", line 1606, in <lambda>\r\n [2021/10/08 02:08:52.536]     wait_until(lambda: client._MongoClient__kill_cursors_queuee,\r\n [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/pymongo/mongo_client.py\", line 1469, in __getattr__\r\n [2021/10/08 02:08:52.536]     \" database, use client[%r].\" % (name, name, name))\r\n [2021/10/08 02:08:52.536] AttributeError: MongoClient has no attribute '_MongoClient__kill_cursors_queuee'. To access the _MongoClient__kill_cursors_queuee database, use client['_MongoClient__kill_cursors_queuee'].\r\n```",
      "> We need to fix this bug:\r\n> \r\n> ```\r\n>  [2021/10/08 02:08:52.536] ERROR: MongoClient has no attribute '_MongoClient__kill_cursors_queuee'. To access the _MongoClient__kill_cursors_queuee database, use client['_MongoClient__kill_cursors_queuee']. (AttributeError)\r\n>  [2021/10/08 02:08:52.536] Traceback (most recent call last):\r\n>  [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/test/test_client.py\", line 1607, in test_process_periodic_tasks\r\n>  [2021/10/08 02:08:52.536]     \"waited for cursor to be added to queue\")\r\n>  [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/test/utils.py\", line 750, in wait_until\r\n>  [2021/10/08 02:08:52.536]     retval = predicate()\r\n>  [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/test/test_client.py\", line 1606, in <lambda>\r\n>  [2021/10/08 02:08:52.536]     wait_until(lambda: client._MongoClient__kill_cursors_queuee,\r\n>  [2021/10/08 02:08:52.536]   File \"/data/mci/4133ce1e64692bb1a00e7fbf98b2478b/src/pymongo/mongo_client.py\", line 1469, in __getattr__\r\n>  [2021/10/08 02:08:52.536]     \" database, use client[%r].\" % (name, name, name))\r\n>  [2021/10/08 02:08:52.536] AttributeError: MongoClient has no attribute '_MongoClient__kill_cursors_queuee'. To access the _MongoClient__kill_cursors_queuee database, use client['_MongoClient__kill_cursors_queuee'].\r\n> ```\r\n\r\nThis typo has been fixed."
    ],
    "commit_messages": [
      "PYTHON-2938 Fix race condition caused by MongoClient._process_periodic_tasks(client) (#752)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e644ee515ce6a4b1bf",
    "number": 751,
    "body": null,
    "head_branch": "PYTHON-2935",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2935 Fix test_encryption.TestClientSimple.test_use_after_close (#751)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e644ee515ce6a4b1c0",
    "number": 750,
    "body": null,
    "head_branch": "PYTHON-2928",
    "is_a_fork": true,
    "comments": [
      "Please schedule the mod_wsgi test tasks in the latest patch build (https://spruce.mongodb.com/version/615ce0f31e2d175df43cc025)"
    ],
    "commit_messages": [
      "PYTHON-2928 Fix mod_wsgi test failures (#750)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e744ee515ce6a4b1c1",
    "number": 749,
    "body": null,
    "head_branch": "PYTHON-2823",
    "is_a_fork": true,
    "comments": [
      "> From a grep through the codebase we also need to pass the new option to the _SrvResolver in pymongo/monitor.py. It's somewhat concerning that the tests pass without this change (but not your fault at all of course). Does the spec change have any test coverage for mongos SRV polling?\r\n\r\nI know you've already addressed the option plumbing but do you have any thoughts on the test coverage issue?",
      "> > From a grep through the codebase we also need to pass the new option to the _SrvResolver in pymongo/monitor.py. It's somewhat concerning that the tests pass without this change (but not your fault at all of course). Does the spec change have any test coverage for mongos SRV polling?\r\n> \r\n> I know you've already addressed the option plumbing but do you have any thoughts on the test coverage issue?\r\n\r\nI'm not sure about the test coverage. I think that our new tests cover most of the behavior, but I didn't see anything else in the spec tests besides the ones for this PR. I think one thing we could do is maybe check and make sure that the value of `self.__srv` is the correct value for _SrvResolver, but I'm not sure how to do that. "
    ],
    "commit_messages": [
      "PYTHON-2823 Allow custom service names with srvServiceName URI option (#749)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e844ee515ce6a4b1c2",
    "number": 748,
    "body": null,
    "head_branch": "PYTHON-2793",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2793 Stop testing TLS with Python 3.10 and MongoDB <= 3.4 (#748)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9e944ee515ce6a4b1c3",
    "number": 747,
    "body": null,
    "head_branch": "PYTHON-2914",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2914 MongoClient should raise an error when given multiple URIs (#747)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ea44ee515ce6a4b1c4",
    "number": 746,
    "body": null,
    "head_branch": "PYTHON-1936",
    "is_a_fork": true,
    "comments": [
      "Closing pull request because we do not know if we want to make this change yet. There is a variety of behavior on different server versions rendering this pull request non-functional/has a lot of hacking to ensure tests pass. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9eb44ee515ce6a4b1c5",
    "number": 745,
    "body": "(cherry picked from commit 7467aa634d1ac36b52cc95757f1cc154d318a527)\r\n\r\nTesting before merging. The one complication with the backport is the legacy `_do_batched_insert` code path. Rather than tweaking the C extensions for a legacy method I decided to simply pass the mock command to the _BulkWriteContext.",
    "head_branch": "PYTHON-2915-v312",
    "is_a_fork": true,
    "comments": [
      "The one test failure on latest looks unrelated:\r\n```\r\n [2021/09/27 18:30:00.889] ERROR [0.223s]: test_readConcern_available_with_out_stage (test_crud_unified.TestUnifiedAggregateOutReadConcern)\r\n [2021/09/27 18:30:00.889] ----------------------------------------------------------------------\r\n [2021/09/27 18:30:00.889] Traceback (most recent call last):\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/test/unified_format.py\", line 1162, in test_case\r\n [2021/09/27 18:30:00.889]     self.run_scenario(spec)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/test/unified_format.py\", line 1143, in run_scenario\r\n [2021/09/27 18:30:00.889]     self.run_operations(spec['operations'])\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/test/unified_format.py\", line 1075, in run_operations\r\n [2021/09/27 18:30:00.889]     self.run_entity_operation(op)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/test/unified_format.py\", line 944, in run_entity_operation\r\n [2021/09/27 18:30:00.889]     result = cmd(**dict(arguments))\r\n [2021/09/27 18:30:00.889]   File \"/opt/python/pypy/lib_pypy/_functools.py\", line 45, in __call__\r\n [2021/09/27 18:30:00.889]     return self._func(*(self._args + fargs), **fkeywords)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/test/unified_format.py\", line 848, in _collectionOperation_aggregate\r\n [2021/09/27 18:30:00.889]     return self.__entityOperation_aggregate(target, *args, **kwargs)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/test/unified_format.py\", line 842, in __entityOperation_aggregate\r\n [2021/09/27 18:30:00.889]     return list(target.aggregate(*args, **kwargs))\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/pymongo/collection.py\", line 2507, in aggregate\r\n [2021/09/27 18:30:00.889]     **kwargs)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/pymongo/collection.py\", line 2421, in _aggregate\r\n [2021/09/27 18:30:00.889]     retryable=not cmd._performs_write)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/pymongo/mongo_client.py\", line 1525, in _retryable_read\r\n [2021/09/27 18:30:00.889]     return func(session, server, sock_info, secondary_ok)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/pymongo/aggregation.py\", line 149, in get_cursor\r\n [2021/09/27 18:30:00.889]     user_fields=self._user_fields)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/pymongo/pool.py\", line 721, in command\r\n [2021/09/27 18:30:00.889]     exhaust_allowed=exhaust_allowed)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/pymongo/network.py\", line 163, in command\r\n [2021/09/27 18:30:00.889]     parse_write_concern_error=parse_write_concern_error)\r\n [2021/09/27 18:30:00.889]   File \"/data/mci/5b3084ca979b0944360b12828a6c9054/src/pymongo/helpers.py\", line 167, in _check_command_response\r\n [2021/09/27 18:30:00.889]     raise OperationFailure(errmsg, code, response, max_wire_version)\r\n [2021/09/27 18:30:00.889] OperationFailure: PlanExecutor error during aggregation :: caused by :: failed while running command { internalRenameIfOptionsAndIndexesMatch: 1, from: \"crud-v2.tmp.agg_out.f5477809-8d97-4446-8a4d-14dbe5b0625a\", to: \"crud-v2.other_test_collection\", collectionOptions: {}, indexes: [ { v: 2, key: { _id: 1 }, name: \"_id_\" } ], writeConcern: { w: \"majority\", wtimeout: 0, provenance: \"implicitDefault\" } } :: caused by :: Request sent without attaching database version, full error: {u'ok': 0.0, u'errmsg': u'PlanExecutor error during aggregation :: caused by :: failed while running command { internalRenameIfOptionsAndIndexesMatch: 1, from: \"crud-v2.tmp.agg_out.f5477809-8d97-4446-8a4d-14dbe5b0625a\", to: \"crud-v2.other_test_collection\", collectionOptions: {}, indexes: [ { v: 2, key: { _id: 1 }, name: \"_id_\" } ], writeConcern: { w: \"majority\", wtimeout: 0, provenance: \"implicitDefault\" } } :: caused by :: Request sent without attaching database version', u'code': 20, u'codeName': u'IllegalOperation', u'$clusterTime': {u'clusterTime': Timestamp(1632766918, 99), u'signature': {u'hash': Binary('\\x91`\\x9d\\x1eB\\xa4G\\x81;\\xf4\\xbd\\x89\\xaa\\x85)\\x93<\\x14\\xe3U', 0), u'keyId': 7012678762454056980L}}, u'operationTime': Timestamp(1632766918, 98)}\r\n```",
      "Merged in: https://github.com/mongodb/mongo-python-driver/commit/7467aa634d1ac36b52cc95757f1cc154d318a527"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ec44ee515ce6a4b1c6",
    "number": 744,
    "body": "This should cherry pick cleanly to v3.12 as well.",
    "head_branch": "python2921",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2921 Fix eventlet detection with Python 3.10 (#744)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ed44ee515ce6a4b1c7",
    "number": 743,
    "body": null,
    "head_branch": "PYTHON-2915",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2915 Fix bug when starting a transaction with a large bulk write (#743)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ee44ee515ce6a4b1c8",
    "number": 742,
    "body": null,
    "head_branch": "PYTHON-2868",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2868 Test Serverless behind a load balancer (#742)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ef44ee515ce6a4b1c9",
    "number": 741,
    "body": null,
    "head_branch": "python2902v312",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2902 Allow dnspython 2 in srv extra v3.12 (#741)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ef44ee515ce6a4b1ca",
    "number": 740,
    "body": null,
    "head_branch": "python2902main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2902 Allow dnspython 2 in srv extra (#740)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f044ee515ce6a4b1cb",
    "number": 739,
    "body": null,
    "head_branch": "PYTHON-1337",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1337 Add __slots__ to commonly used bson classes (#739)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f144ee515ce6a4b1cc",
    "number": 738,
    "body": null,
    "head_branch": "PYTHON-1853",
    "is_a_fork": true,
    "comments": [
      "> Please remember to update the changelog, migration guides, and method docstring for collection.find to mention this breaking change.\r\n\r\nAgreed. The existing behavior has existed since PyMongo 0.14. That's a long time. We need to carefully document this behavior change and how to get back the previous behavior for users that have come to rely on it."
    ],
    "commit_messages": [
      "PYTHON-1853 Empty projections should return the entire document not just the _id (#738)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f244ee515ce6a4b1cd",
    "number": 737,
    "body": null,
    "head_branch": "PYTHON-2463",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2463 Do not allow a MongoClient to be reused after it is closed (#737)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f344ee515ce6a4b1ce",
    "number": 736,
    "body": "Fixes this \"no server\" test failure: https://evergreen.mongodb.com/task/mongo_python_driver_no_server_no_server_11752ed594f8d0fd3dac342b01b6c2e1a594e458_21_09_16_23_53_50\r\n\r\nAlso removes some more MongoDB <= 3.4 info from the migration guide.",
    "head_branch": "PYTHON-2899",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2899 Fix \"no server\" tests and cleanup docs (#736)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f444ee515ce6a4b1cf",
    "number": 735,
    "body": null,
    "head_branch": "python2906",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2906 Fix virtualenv creation for testing Python 3.4 (#735)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f544ee515ce6a4b1d0",
    "number": 734,
    "body": null,
    "head_branch": "python2907",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2907 Fix up requirements files (#734)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f544ee515ce6a4b1d1",
    "number": 733,
    "body": null,
    "head_branch": "python2908",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2908 Work around Jython package install problems (#733)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f644ee515ce6a4b1d2",
    "number": 732,
    "body": null,
    "head_branch": "PYTHON-2905",
    "is_a_fork": true,
    "comments": [
      "3 more test failures to deal with:\r\n```\r\n [2021/09/16 23:57:40.602] ERROR: test_corpus (test_encryption.TestCorpus)\r\n [2021/09/16 23:57:40.602] ----------------------------------------------------------------------\r\n [2021/09/16 23:57:40.602] Traceback (most recent call last):\r\n [2021/09/16 23:57:40.602]   File \"/data/mci/16098cfc9a1c3263523c7535ad6bd779/src/test/test_encryption.py\", line 974, in test_corpus\r\n [2021/09/16 23:57:40.602]     self._test_corpus(opts)\r\n [2021/09/16 23:57:40.602]   File \"/data/mci/16098cfc9a1c3263523c7535ad6bd779/src/test/test_encryption.py\", line 877, in _test_corpus\r\n [2021/09/16 23:57:40.602]     self.fix_up_schema(json_data('corpus', 'corpus-schema.json')))\r\n [2021/09/16 23:57:40.602]   File \"/data/mci/16098cfc9a1c3263523c7535ad6bd779/src/test/test_encryption.py\", line 852, in fix_up_schema\r\n [2021/09/16 23:57:40.602]     for key in json_schema['properties'].keys():\r\n [2021/09/16 23:57:40.602] RuntimeError: dictionary changed size during iteration\r\n [2021/09/16 23:57:40.602] ======================================================================\r\n [2021/09/16 23:57:40.602] ERROR: test_corpus_local_schema (test_encryption.TestCorpus)\r\n [2021/09/16 23:57:40.602] ----------------------------------------------------------------------\r\n [2021/09/16 23:57:40.602] Traceback (most recent call last):\r\n [2021/09/16 23:57:40.602]   File \"/data/mci/16098cfc9a1c3263523c7535ad6bd779/src/test/test_encryption.py\", line 979, in test_corpus_local_schema\r\n [2021/09/16 23:57:40.602]     json_data('corpus', 'corpus-schema.json'))}\r\n [2021/09/16 23:57:40.602]   File \"/data/mci/16098cfc9a1c3263523c7535ad6bd779/src/test/test_encryption.py\", line 852, in fix_up_schema\r\n [2021/09/16 23:57:40.602]     for key in json_schema['properties'].keys():\r\n [2021/09/16 23:57:40.602] RuntimeError: dictionary changed size during iteration\r\n [2021/09/16 23:57:40.602] ======================================================================\r\n [2021/09/16 23:57:40.602] FAIL: test_codec_options (test_encryption.TestExplicitSimple)\r\n [2021/09/16 23:57:40.602] ----------------------------------------------------------------------\r\n [2021/09/16 23:57:40.602] Traceback (most recent call last):\r\n [2021/09/16 23:57:40.602]   File \"/data/mci/16098cfc9a1c3263523c7535ad6bd779/src/test/test_encryption.py\", line 422, in test_codec_options\r\n [2021/09/16 23:57:40.602]     client_encryption_legacy.decrypt(encrypted_standard), value)\r\n [2021/09/16 23:57:40.602] AssertionError: Binary(b'e*S\\xee\\xd6\\x06O\\x94\\x93\\xe5\\xa8\\xf3\\xdd,\\x13o', 4) != UUID('652a53ee-d606-4f94-93e5-a8f3dd2c136f')\r\n```\r\nThe `RuntimeError: dictionary changed size during iteration` errors are caused by the SON.keys() change in PYTHON-2518 but it's actually a bug in how we're using keys(). Easy to fix.\r\n\r\nTesting now."
    ],
    "commit_messages": [
      "PYTHON-2905 Fix CSFLE after UUID decoding changes (#732)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f744ee515ce6a4b1d3",
    "number": 731,
    "body": null,
    "head_branch": "PYTHON-2501",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2501 Remove iteritems from son.SON (#731)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f844ee515ce6a4b1d4",
    "number": 730,
    "body": null,
    "head_branch": "PYTHON-2518",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2518 SON class should be compatible with Python 3's OrderedDict API (#730)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9f944ee515ce6a4b1d5",
    "number": 729,
    "body": null,
    "head_branch": "PYTHON-2899",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2899 Remove code for MongoDB <= 3.4 (#729)\n\nRemove unneeded memoryview to bytes conversion."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9fa44ee515ce6a4b1d6",
    "number": 728,
    "body": null,
    "head_branch": "PYTHON-808",
    "is_a_fork": true,
    "comments": [
      "I recently made an update of my dependencies and pymongo got updated from version 3 to 4.5.0.\r\n\r\nMy application stopped working because of this and I don't want to spend my time looking for all the places where I have `if not database` instead of `if database is None`, so I ended up monkey patching this.\r\n\r\nHowever, I'd like to understand why you thought this change is that important that you don't mind breaking the API, in which case I would invest time into changing my source code, because at the moment I don't see the benefit from changing `if not database` to `if database is None`, when the context is pretty clear. Sadly this pull request has no description. In the pull request title there is PYTHON-808 but I have no idea what it is referring to, a google search did not help here\r\n\r\nThanks.",
      "Oh, I see, after clicking on *comment*, the `PYTHON-808` text turned into a Jira link. I'm still not sure why this merits an api breaking change.",
      "MongoClient has various boolean or Truthy properties like `client.primary`. We decided that this behavior was too error prone because the old behavior would hide bugs like this:\r\n```python\r\nif client.pirmary:  # Oops \"pirmary\" is a Database, not the \"primary\" property.\r\n    print(\"I'm connected!\")\r\n```\r\n\r\nA real example of this bug is here: https://github.com/mongodb/mongo-python-driver/commit/73edd2c134f43d58531e3dc26499b777354fb7ea"
    ],
    "commit_messages": [
      "PYTHON-808 Prevent use of Database and Collection in boolean expressions (#728)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9fb44ee515ce6a4b1d7",
    "number": 727,
    "body": null,
    "head_branch": "PYTHON-2679-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removed directConnection workaround in SRV spec tests (#727)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9fc44ee515ce6a4b1d8",
    "number": 726,
    "body": null,
    "head_branch": "PYTHON-1915",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1915 Prohibit copying ClientSession objects (#726)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9fc44ee515ce6a4b1d9",
    "number": 725,
    "body": null,
    "head_branch": "PYTHON-1965",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1965 The bson package should not depend on the pymongo package (#725)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9fd44ee515ce6a4b1da",
    "number": 724,
    "body": null,
    "head_branch": "PYTHON-2245",
    "is_a_fork": true,
    "comments": [
      "> What about changes to json_util.py? Don't the docs for JSONOptions have to be updated at least?\r\n\r\nJSONOptions inherits the default uuid_representation from CodecOptions. This is the new default behavior:\r\n```python\r\n>>> json_util.dumps({'uuid': uuid.uuid4()})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/shane/git/mongo-python-driver/bson/json_util.py\", line 414, in dumps\r\n    return json.dumps(_json_convert(obj, json_options), *args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/bson/json_util.py\", line 449, in _json_convert\r\n    return SON(((k, _json_convert(v, json_options))\r\n  File \"/Users/shane/git/mongo-python-driver/bson/son.py\", line 42, in __init__\r\n    self.update(data)\r\n  File \"/Users/shane/git/mongo-python-driver/bson/son.py\", line 145, in update\r\n    for k, v in other:\r\n  File \"/Users/shane/git/mongo-python-driver/bson/json_util.py\", line 449, in <genexpr>\r\n    return SON(((k, _json_convert(v, json_options))\r\n  File \"/Users/shane/git/mongo-python-driver/bson/json_util.py\", line 454, in _json_convert\r\n    return default(obj, json_options)\r\n  File \"/Users/shane/git/mongo-python-driver/bson/json_util.py\", line 842, in default\r\n    binval = Binary.from_uuid(\r\n  File \"/Users/shane/git/mongo-python-driver/bson/binary.py\", line 245, in from_uuid\r\n    raise ValueError(\r\nValueError: cannot encode native uuid.UUID with UuidRepresentation.UNSPECIFIED. UUIDs can be manually converted to bson.Binary instances using bson.Binary.from_uuid() or a different UuidRepresentation can be configured. See the documentation for UuidRepresentation for more information.\r\n```\r\n\r\nI've updated the docs for CodecOptions, JSONOptions, and MongoClient."
    ],
    "commit_messages": [
      "PYTHON-2245 Change default uuidRepresentation to UNSPECIFIED (ie disable UUID encoding by default) (#724)\n\nThis change also stops decoding both 3 and 4 subtypes as UUIDs.\r\nWith standard, only subtype 4 is decoded to UUID and subtype 3 is decoded to Binary.\r\nWith legacy representations, only subtype 3 is decoded to UUID and subtype 4 is decoded to Binary."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9fe44ee515ce6a4b1db",
    "number": 723,
    "body": null,
    "head_branch": "PYTHON-2820",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2820 Test serialization of BSON with embedded null bytes in strings (#723)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fc9ff44ee515ce6a4b1dc",
    "number": 722,
    "body": "Still TODO:\r\n\r\n- [x] Implement DBRef spec tests (https://github.com/mongodb/specifications/blob/master/source/dbref.rst#test-plan)\r\n- [x] Add changelog and migration docs.",
    "head_branch": "PYTHON-2680",
    "is_a_fork": true,
    "comments": [
      "@juliusgeo I've merged this without waiting for your review but please take a look through this change anyway. Feel free to ask any questions you might have."
    ],
    "commit_messages": [
      "PYTHON-2680 Breaking changes to DBRef BSON+JSON decoding (#722)\n\nImplement DBRef spec version 1.0 tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0044ee515ce6a4b1dd",
    "number": 721,
    "body": "https://jira.mongodb.org/browse/PYTHON-2883",
    "head_branch": "PYTHON-2883",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2883 Regex decoding error tests in top.json have unexpected, invalid syntax (#721)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0144ee515ce6a4b1de",
    "number": 720,
    "body": "https://jira.mongodb.org/browse/PYTHON-1949",
    "head_branch": "PYTHON-1949",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1949 CodecOptions and JSONOptions should have the same default value for tz_aware (#720)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0144ee515ce6a4b1df",
    "number": 719,
    "body": "Changed JSONOptions to default to false for tz_aware.",
    "head_branch": "PYTHON-1949",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0244ee515ce6a4b1e0",
    "number": 718,
    "body": "https://jira.mongodb.org/browse/PYTHON-2057",
    "head_branch": "PYTHON-2057",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2057 Make 'name' a required argument for DriverInfo class (#718)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0344ee515ce6a4b1e1",
    "number": 717,
    "body": null,
    "head_branch": "PYTHON-2057",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0444ee515ce6a4b1e2",
    "number": 716,
    "body": null,
    "head_branch": "PYTHON-2679",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2679 Auto discover replica sets by default (#716)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0544ee515ce6a4b1e3",
    "number": 715,
    "body": null,
    "head_branch": "release-2/3.11.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0644ee515ce6a4b1e4",
    "number": 714,
    "body": null,
    "head_branch": "PYTHON-2808",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2808 Use Invoke-WebRequest instead certifi to workaround FLE test issue (#714)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0744ee515ce6a4b1e5",
    "number": 713,
    "body": "This PR fixes the refactor in PYTHON-2162. I've changed get_ssl_context in all places and double checked the parameter translation.",
    "head_branch": "PYTHON-2879",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2879 Fix get_ssl_context for CSFLE and ocsptest.py (#713)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0844ee515ce6a4b1e6",
    "number": 712,
    "body": null,
    "head_branch": "PYTHON-2875",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2875 Require hint with min/max queries (#712)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0844ee515ce6a4b1e7",
    "number": 711,
    "body": "TODO: \r\n\r\n- [x] Decide if we should change the behavior and make strict_number_long/datetime_representation/strict_uuid configurable even with JSONMode.RELAXED/JSONMode.CANONICAL. \r\n  The options are to 1) ignore these options (keep the current behavior), 2) raise an error when an incompatible option is specified, or 3) allow users to configure these options with any json_mode. For now I've gone with option 2).\r\n- [x] Update changelog\r\n- [x] Update migration guide\r\n- [x] Update any other misc docs\r\n\r\n",
    "head_branch": "PYTHON-2046",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2046 Change default JSONMode and dumps output from LEGACY to RELAXED (#711)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0944ee515ce6a4b1e8",
    "number": 710,
    "body": null,
    "head_branch": "PYTHON-2702",
    "is_a_fork": true,
    "comments": [
      "Oops. There's at least one test failure to resolve:\r\n```\r\n [2021/08/19 23:30:29.916] ERROR: Unknown option wtimeout (ConfigurationError)\r\n [2021/08/19 23:30:29.916] Traceback (most recent call last):\r\n [2021/08/19 23:30:29.916]   File \"/data/mci/398ba9b65b209520e2c5c58dbd259e6e/src/test/test_uri_parser.py\", line 481, in test_normalize_options\r\n [2021/08/19 23:30:29.916]     self.assertEqual(res, parse_uri(uri)[\"options\"])\r\n [2021/08/19 23:30:29.916]   File \"/data/mci/398ba9b65b209520e2c5c58dbd259e6e/src/pymongo/uri_parser.py\", line 469, in parse_uri\r\n [2021/08/19 23:30:29.916]     options.update(split_options(opts, validate, warn, normalize))\r\n [2021/08/19 23:30:29.916]   File \"/data/mci/398ba9b65b209520e2c5c58dbd259e6e/src/pymongo/uri_parser.py\", line 314, in split_options\r\n [2021/08/19 23:30:29.916]     options = validate_options(options, warn)\r\n [2021/08/19 23:30:29.916]   File \"/data/mci/398ba9b65b209520e2c5c58dbd259e6e/src/pymongo/uri_parser.py\", line 274, in validate_options\r\n [2021/08/19 23:30:29.916]     return get_validated_options(opts, warn)\r\n [2021/08/19 23:30:29.916]   File \"/data/mci/398ba9b65b209520e2c5c58dbd259e6e/src/pymongo/common.py\", line 754, in get_validated_options\r\n [2021/08/19 23:30:29.916]     value = validator(opt, value)\r\n [2021/08/19 23:30:29.916]   File \"/data/mci/398ba9b65b209520e2c5c58dbd259e6e/src/pymongo/common.py\", line 142, in raise_config_error\r\n [2021/08/19 23:30:29.916]     raise ConfigurationError(\"Unknown option %s\" % (key,))\r\n [2021/08/19 23:30:29.916] pymongo.errors.ConfigurationError: Unknown option wtimeout\r\n ```"
    ],
    "commit_messages": [
      "PYTHON-2702 Remove deprecated URI options (#710)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0a44ee515ce6a4b1e9",
    "number": 709,
    "body": null,
    "head_branch": "PYTHON-2862",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2862 Remove versionchanged info for PyMongo <3.0 (#709)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0b44ee515ce6a4b1ea",
    "number": 708,
    "body": "This PR adds support for building the docs in non-html output formats. For example man/latex/text are now supported. In order to do this I removed the mongodoc extension which doesn't add much value anyway. I also regenerated sphinx's doc/Makefile with sphinx-quickstart 3.5.4.\r\n\r\nTo build the docs in different formats:\r\n```\r\ncd doc\r\nmake man latex text html\r\n```",
    "head_branch": "PYTHON-2870",
    "is_a_fork": true,
    "comments": [
      "I think the point of mongodoc is to generate links to dochub references, which are supposed to be stable long term. Are you sure we aren't losing something by getting rid of it?",
      "We're not loosing anything AFAICT. We're still linking to the dochub pages. The only thing mongodoc does is automatically replace this:\r\n```\r\n.. mongodoc:: rs\r\n```\r\nwith this:\r\n```\r\n.. seealso:: The MongoDB documentation on: `rs <https://dochub.mongodb.org/core/rs>`_\r\n```\r\n\r\nAfter this change we just explicitly link to the page:\r\n```\r\n.. seealso:: The `MongoDB documentation on Replication <https://dochub.mongodb.org/core/rs>`_\r\n```",
      "Unsing that Makefile soes not make any sense.\r\nAll what needs to be done is correctly implement setuptools<>sphinx integration\r\nhttps://www.sphinx-doc.org/en/master/usage/advanced/setuptools.html",
      "setup.py build_sphinx also works as expected after these changes:\r\n```\r\n$ python setup.py build_sphinx -b man --build-dir build/sphinx\r\n--\r\nrunning build_sphinx\r\nRunning Sphinx v4.1.2\r\nmaking output directory... done\r\nloading intersphinx inventory from http://www.gevent.org/objects.inv...\r\nloading intersphinx inventory from https://docs.python.org/3/objects.inv...\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [man]: all manpages\r\nupdating environment: [new config] 79 added, 0 changed, 0 removed\r\nreading sources... [100%] tutorial\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... done\r\nwriting... pymongo.1 { atlas installation tutorial examples/index examples/aggregation examples/authentication examples/collations examples/copydb examples/custom_type examples/bulk examples/datetimes examples/geo examples/gevent examples/gridfs examples/high_availability examples/mod_wsgi examples/server_selection examples/tailable examples/tls examples/encryption examples/uuid faq compatibility-policy api/index api/bson/index api/bson/binary api/bson/code api/bson/codec_options api/bson/dbref api/bson/decimal128 api/bson/errors api/bson/int64 api/bson/json_util api/bson/max_key api/bson/min_key api/bson/objectid api/bson/raw_bson api/bson/regex api/bson/son api/bson/timestamp api/bson/tz_util api/pymongo/index api/pymongo/bulk api/pymongo/change_stream api/pymongo/client_session api/pymongo/collation api/pymongo/collection api/pymongo/command_cursor api/pymongo/cursor api/pymongo/database api/pymongo/driver_info api/pymongo/encryption api/pymongo/encryption_options api/pymongo/errors api/pymongo/mongo_client api/pymongo/monitoring api/pymongo/operations api/pymongo/pool api/pymongo/read_concern api/pymongo/read_preferences api/pymongo/results api/pymongo/server_api api/pymongo/server_description api/pymongo/topology_description api/pymongo/uri_parser api/pymongo/write_concern api/pymongo/event_loggers api/gridfs/index api/gridfs/errors api/gridfs/grid_file tools contributors changelog python3 migrate-to-pymongo4 migrate-to-pymongo3 developer/index developer/periodic_executor } done\r\nbuild succeeded.\r\n \r\nThe manual pages are in build/sphinx/man.\r\n```"
    ],
    "commit_messages": [
      "PYTHON-2870 Add support for man/text/latex/etc.. docs output (#708)\n\nRegenerate sphinx makefile with sphinx-quickstart 3.5.4.\r\nRemove problematic mongodoc sphinx extension."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0c44ee515ce6a4b1eb",
    "number": 707,
    "body": "Testing https://github.com/mongodb/specifications/pull/1048",
    "head_branch": "DRIVERS-1864",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DRIVERS-1864 Resync SDAM spec tests (#707)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0d44ee515ce6a4b1ec",
    "number": 706,
    "body": null,
    "head_branch": "PYTHON-2702/removed-deprecated-URI-options",
    "is_a_fork": true,
    "comments": [
      "Did you run the pyopenssl tests as well?"
    ],
    "commit_messages": [
      "PYTHON-2162 Remove support for ssl* URI options (#706)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0e44ee515ce6a4b1ed",
    "number": 705,
    "body": null,
    "head_branch": "PYTHON-2038",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2038 Remove pymongo.errors.CertificateError (#705)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0e44ee515ce6a4b1ee",
    "number": 704,
    "body": "Fixes this test failure:\r\n```\r\n[2021/08/06 23:40:10.617] FAIL [1.020s]: test_pool_paused_error_is_retryable (test_retryable_writes.TestPoolPausedError)\r\n--\r\n[2021/08/06 23:40:10.617] ----------------------------------------------------------------------\r\n[2021/08/06 23:40:10.617] Traceback (most recent call last):\r\n[2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/__init__.py\", line 547, in wrap\r\n[2021/08/06 23:40:10.617]     return f(*args, **kwargs)\r\n[2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/__init__.py\", line 547, in wrap\r\n[2021/08/06 23:40:10.617]     return f(*args, **kwargs)\r\n[2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/__init__.py\", line 199, in wrap\r\n[2021/08/06 23:40:10.617]     return f(*args, **kwargs)\r\n[2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/test_retryable_writes.py\", line 546, in test_pool_paused_error_is_retryable\r\n[2021/08/06 23:40:10.617]     cmap_events[2], ConnectionCheckOutFailedEvent, msg)\r\n[2021/08/06 23:40:10.617] AssertionError: ConnectionCheckedOutEvent(('localhost', 27017), 2) is not an instance of <class 'pymongo.monitoring.ConnectionCheckOutFailedEvent'> : [PoolCreatedEvent(('localhost', 27017), {'maxPoolSize': 1}),\r\n[2021/08/06 23:40:10.617]  PoolReadyEvent(('localhost', 27017)),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n[2021/08/06 23:40:10.617]  ConnectionCreatedEvent(('localhost', 27017), 1),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n[2021/08/06 23:40:10.617]  ConnectionReadyEvent(('localhost', 27017), 1),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckedOutEvent(('localhost', 27017), 1),\r\n[2021/08/06 23:40:10.617]  PoolClearedEvent(('localhost', 27017), None),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckedInEvent(('localhost', 27017), 1),\r\n[2021/08/06 23:40:10.617]  ConnectionClosedEvent(('localhost', 27017), 1, 'stale'),\r\n[2021/08/06 23:40:10.617]  PoolReadyEvent(('localhost', 27017)),\r\n[2021/08/06 23:40:10.617]  ConnectionCreatedEvent(('localhost', 27017), 2),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n[2021/08/06 23:40:10.617]  ConnectionReadyEvent(('localhost', 27017), 2),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckedOutEvent(('localhost', 27017), 2),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckedInEvent(('localhost', 27017), 2),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckedOutEvent(('localhost', 27017), 2),\r\n[2021/08/06 23:40:10.617]  ConnectionCheckedInEvent(('localhost', 27017), 2)]\r\n[2021/08/06 23:40:10.775] ----------------------------------------------------------------------\r\n\r\n```",
    "head_branch": "PYTHON-2534",
    "is_a_fork": true,
    "comments": [
      "Did this failure occur with a high `heartbeatFrequencyMS`? It looks like everything is working here but that the monitor happens to perform a check before the thread in the wait queue wakes up, so I'm wondering if we can just delay the monitor if it would solve this issue without having to rerun the test.",
      "> Did this failure occur with a high heartbeatFrequencyMS?\r\n\r\nYes it was still failing with `heartbeatFrequencyMS=500`. I strongly prefer the solution implemented here for 2 reasons:\r\n1) the test runs more quickly when reducing heartbeatFrequencyMS/minHeartbeatFrequencyMS\r\n2) this solution avoids false positives caused by other races in SDAM as well."
    ],
    "commit_messages": [
      "PYTHON-2534 Avoid race in test_pool_paused_error_is_retryable (#704)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca0f44ee515ce6a4b1ef",
    "number": 703,
    "body": null,
    "head_branch": "PYTHON-2850",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2850 Remove map_reduce/inline_map_reduce (#703)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1044ee515ce6a4b1f0",
    "number": 702,
    "body": null,
    "head_branch": "PYTHON-2857",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2857 Remove the socketKeepAlive option (#702)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1144ee515ce6a4b1f1",
    "number": 701,
    "body": null,
    "head_branch": "PYTHON-2860-v3.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2860 Remove modifiers option from command monitoring spec test (#701)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca1244ee515ce6a4b1f2",
    "number": 700,
    "body": null,
    "head_branch": "PYTHON-2525",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2525 Remove Collection.count and Cursor.count (#700)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1344ee515ce6a4b1f3",
    "number": 699,
    "body": null,
    "head_branch": "PYTHON-1840",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1840 Remove waitQueueMultiple and ExceededMaxWaiters (#699)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1444ee515ce6a4b1f4",
    "number": 698,
    "body": null,
    "head_branch": "PYTHON-2529",
    "is_a_fork": true,
    "comments": [
      "Sigh the test_pool_paused_error_is_retryable failure still happens occasionally:\r\n```\r\n [2021/08/06 23:40:10.617] FAIL [1.020s]: test_pool_paused_error_is_retryable (test_retryable_writes.TestPoolPausedError)\r\n [2021/08/06 23:40:10.617] ----------------------------------------------------------------------\r\n [2021/08/06 23:40:10.617] Traceback (most recent call last):\r\n [2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/__init__.py\", line 547, in wrap\r\n [2021/08/06 23:40:10.617]     return f(*args, **kwargs)\r\n [2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/__init__.py\", line 547, in wrap\r\n [2021/08/06 23:40:10.617]     return f(*args, **kwargs)\r\n [2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/__init__.py\", line 199, in wrap\r\n [2021/08/06 23:40:10.617]     return f(*args, **kwargs)\r\n [2021/08/06 23:40:10.617]   File \"/data/mci/f83875c397b2c8b56542a4fad582fb33/src/test/test_retryable_writes.py\", line 546, in test_pool_paused_error_is_retryable\r\n [2021/08/06 23:40:10.617]     cmap_events[2], ConnectionCheckOutFailedEvent, msg)\r\n [2021/08/06 23:40:10.617] AssertionError: ConnectionCheckedOutEvent(('localhost', 27017), 2) is not an instance of <class 'pymongo.monitoring.ConnectionCheckOutFailedEvent'> : [PoolCreatedEvent(('localhost', 27017), {'maxPoolSize': 1}),\r\n [2021/08/06 23:40:10.617]  PoolReadyEvent(('localhost', 27017)),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n [2021/08/06 23:40:10.617]  ConnectionCreatedEvent(('localhost', 27017), 1),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n [2021/08/06 23:40:10.617]  ConnectionReadyEvent(('localhost', 27017), 1),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckedOutEvent(('localhost', 27017), 1),\r\n [2021/08/06 23:40:10.617]  PoolClearedEvent(('localhost', 27017), None),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckedInEvent(('localhost', 27017), 1),\r\n [2021/08/06 23:40:10.617]  ConnectionClosedEvent(('localhost', 27017), 1, 'stale'),\r\n [2021/08/06 23:40:10.617]  PoolReadyEvent(('localhost', 27017)),\r\n [2021/08/06 23:40:10.617]  ConnectionCreatedEvent(('localhost', 27017), 2),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n [2021/08/06 23:40:10.617]  ConnectionReadyEvent(('localhost', 27017), 2),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckedOutEvent(('localhost', 27017), 2),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckedInEvent(('localhost', 27017), 2),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckedOutEvent(('localhost', 27017), 2),\r\n [2021/08/06 23:40:10.617]  ConnectionCheckedInEvent(('localhost', 27017), 2)]\r\n [2021/08/06 23:40:10.775] ----------------------------------------------------------------------\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_amazon1_test_ssl__platform~awslinux_auth_ssl~noauth_nossl_python_version~3.6_coverage~coverage_test_4.4_sharded_cluster_patch_369d175993fa3fae01985e2bf68d88d03c954ede_610dc51fa4cf4718b1b8a912_21_08_06_23_26_24/logs?execution=0&sortBy=STATUS&sortDir=ASC\r\n\r\nThe pool is marked ready before the second thread regains control so the second thread never sees a ConnectionCheckOutFailedEvent. I'll open a new ticket or reopen PYTHON-2534."
    ],
    "commit_messages": [
      "PYTHON-2529 Remove UUIDLegacy (#698)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1444ee515ce6a4b1f5",
    "number": 697,
    "body": "Implementing https://github.com/mongodb/specifications/pull/1046",
    "head_branch": "PYTHON-2856",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2856 Properly assert 0 events in snapshot reads tests (#697)\n\nexpectEvents must be non-empty if present."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1544ee515ce6a4b1f6",
    "number": 696,
    "body": null,
    "head_branch": "PYTHON-2532",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2532 Remove modifiers option for find methods (#696)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1644ee515ce6a4b1f7",
    "number": 695,
    "body": null,
    "head_branch": "PYTHON-2430",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2430 Remove all helpers in the message module (#695)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1744ee515ce6a4b1f8",
    "number": 694,
    "body": null,
    "head_branch": "PYTHON-2235",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2235 Remove pymongo.GEOHAYSTACK (#694)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1844ee515ce6a4b1f9",
    "number": 693,
    "body": null,
    "head_branch": "PYTHON-2711",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2711 Remove profile command helpers (#693)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1944ee515ce6a4b1fa",
    "number": 692,
    "body": "PYTHON-2436 Unskip test_large_inserts_ordered on MongoDB 5.0.",
    "head_branch": "PYTHON-1318",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1318 Remove initialize_unordered_bulk_op and initialize_ordered_bulk_op (#692)\n\nPYTHON-2436 Unskip test_large_inserts_ordered on MongoDB 5.0."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1944ee515ce6a4b1fb",
    "number": 691,
    "body": null,
    "head_branch": "PYTHON-1410",
    "is_a_fork": true,
    "comments": [
      "Merged in https://github.com/mongodb/mongo-python-driver/commit/a28b05bf245d7b44bf4964421cc341beff00081c"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1a44ee515ce6a4b1fc",
    "number": 690,
    "body": "",
    "head_branch": "PYTHON-2288/remove-isMaster",
    "is_a_fork": true,
    "comments": [
      "> I think Bernie may have been working on this. Please check with him so we don't double book anyone.\r\n\r\nI have no objections to this. It will save me some work."
    ],
    "commit_messages": [
      "PYTHON-2288 Remove IsMaster (#690)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1b44ee515ce6a4b1fd",
    "number": 689,
    "body": "Seeing as this class isn't really meant for end user consumption I don't think there is any point of documenting this?",
    "head_branch": "PYTHON-1363/remove-unused-commandcursor-param",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1363 Remove unused retrieved parameter from CommandCursor (#689)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1c44ee515ce6a4b1fe",
    "number": 688,
    "body": "",
    "head_branch": "PYTHON-2571/remove-NotMasterError",
    "is_a_fork": true,
    "comments": [
      "Updated the changelog too."
    ],
    "commit_messages": [
      "PYTHON-2571 Remove NotMasterError (#688)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1d44ee515ce6a4b1ff",
    "number": 687,
    "body": "",
    "head_branch": "PYTHON-2827/versioned-api-migration-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2827 Versioned API migration example for ecosystem docs (#687)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1e44ee515ce6a4b200",
    "number": 686,
    "body": "Split old/new manylinux wheel generation into two tasks.\r\n\r\n(cherry picked from commit a949142480856ebce0f9b769ba61b011564e9f2a)\r\n\r\nTesting before merging.",
    "head_branch": "PYTHON-2816-v3.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1f44ee515ce6a4b201",
    "number": 685,
    "body": "See https://github.com/mongodb/specifications/commit/ff282c752dc73ae49622df4ac87a68a9e9dbe95c",
    "head_branch": "PYTHON-2697",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2697 Fix races in various CMAP spec tests (#685)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca1f44ee515ce6a4b202",
    "number": 684,
    "body": "Depends on https://github.com/mongodb/specifications/pull/1043 ",
    "head_branch": "PYTHON-2842/int-tests-obs-sens-cmds",
    "is_a_fork": true,
    "comments": [
      "I'm going to wait for the spec PR to be merged before merging this."
    ],
    "commit_messages": [
      "PYTHON-2842 Integration tests for observeSensitiveCommands field (#684)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2044ee515ce6a4b203",
    "number": 683,
    "body": "",
    "head_branch": "PYTHON-2699",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2699 Emit PoolReadyEvent before resuming the background thread (#683)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2144ee515ce6a4b204",
    "number": 682,
    "body": "See: https://jira.mongodb.org/browse/DRIVERS-1804\r\nAnd: https://github.com/mongodb/specifications/commit/7c9af915f6e0d8d73e97805cdb501f8a74a40fab",
    "head_branch": "PYTHON-2750",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2750 Don't mark arbiter pools ready unless directly connected (#682)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2244ee515ce6a4b205",
    "number": 681,
    "body": "Implements:\r\n- https://github.com/mongodb/specifications/blob/master/source/retryable-writes/tests/README.rst#prose-tests\r\n- https://github.com/mongodb/specifications/blob/master/source/retryable-reads/tests/README.rst#poolclearederror-retryability-test",
    "head_branch": "PYTHON-2602",
    "is_a_fork": true,
    "comments": [
      "I'll need to investigate the test failure:\r\n```\r\n [2021/07/28 00:26:42.828] FAIL [1.021s]: test_pool_paused_error_is_retryable (test_retryable_reads.TestPoolPausedError)\r\n [2021/07/28 00:26:42.828] ----------------------------------------------------------------------\r\n [2021/07/28 00:26:42.828] Traceback (most recent call last):\r\n [2021/07/28 00:26:42.828]   File \"/data/mci/bb01e86c3119005ddeed486601d5f26a/src/test/__init__.py\", line 513, in wrap\r\n [2021/07/28 00:26:42.828]     return f(*args, **kwargs)\r\n [2021/07/28 00:26:42.828]   File \"/data/mci/bb01e86c3119005ddeed486601d5f26a/src/test/__init__.py\", line 513, in wrap\r\n [2021/07/28 00:26:42.828]     return f(*args, **kwargs)\r\n [2021/07/28 00:26:42.828]   File \"/data/mci/bb01e86c3119005ddeed486601d5f26a/src/test/test_retryable_reads.py\", line 169, in test_pool_paused_error_is_retryable\r\n [2021/07/28 00:26:42.828]     self.assertIsInstance(cmap_events[2], ConnectionCheckOutFailedEvent)\r\n [2021/07/28 00:26:42.828] AssertionError: ConnectionCheckedOutEvent(('localhost', 27018), 2) is not an instance of <class 'pymongo.monitoring.ConnectionCheckOutFailedEvent'>\r\n```\r\nhttps://spruce.mongodb.com/task/mongo_python_driver_tests_python_version_amazon1_test_ssl__platform~awslinux_auth_ssl~noauth_nossl_python_version~3.6_coverage~coverage_test_5.0_replica_set_patch_9833ce0a03ae4d88b5aeaa076f4881b8699c7ce0_6100a1c01e2d17019edce78c_21_07_28_00_16_01/logs?execution=0\r\n\r\nIt's probably the same issue as https://jira.mongodb.org/browse/PYTHON-2534.",
      "Rebased and updated with RUN_ON_SERVERLESS and added CMAP events to the test output to gleam more info from test failures.",
      "Aha. Figured it out. It turns out that sometimes SDAM rediscovers the server and calls pool.ready() before the waiting thread has a chance to fail its initial checkout attempt. This race is always possible in practice. I'll have to think of a way to tweak the test to avoid this problem. Perhaps increasing the minHeartbeatInterval?\r\n\r\nThese tests also fail on load balancers.\r\n\r\n```\r\n[2021/07/28 22:23:48.969] FAIL [0.067s]: test_pool_paused_error_is_retryable (test_retryable_reads.TestPoolPausedError)\r\n[2021/07/28 22:23:48.969] ----------------------------------------------------------------------\r\n[2021/07/28 22:23:48.969] Traceback (most recent call last):\r\n[2021/07/28 22:23:48.969]   File \"/data/mci/656edf1583ffb844ff5d93f1ced0862e/src/test/__init__.py\", line 537, in wrap\r\n[2021/07/28 22:23:48.969]     return f(*args, **kwargs)\r\n[2021/07/28 22:23:48.969]   File \"/data/mci/656edf1583ffb844ff5d93f1ced0862e/src/test/__init__.py\", line 537, in wrap\r\n[2021/07/28 22:23:48.969]     return f(*args, **kwargs)\r\n[2021/07/28 22:23:48.969]   File \"/data/mci/656edf1583ffb844ff5d93f1ced0862e/src/test/test_retryable_reads.py\", line 188, in test_pool_paused_error_is_retryable\r\n[2021/07/28 22:23:48.969]     cmap_events[2], ConnectionCheckOutFailedEvent, msg)\r\n[2021/07/28 22:23:48.969] AssertionError: ConnectionCheckedOutEvent(('localhost', 27017), 2) is not an instance of <class 'pymongo.monitoring.ConnectionCheckOutFailedEvent'> : [PoolCreatedEvent(('localhost', 27017), {'maxPoolSize': 1}),\r\n[2021/07/28 22:23:48.969]  PoolReadyEvent(('localhost', 27017)),\r\n[2021/07/28 22:23:48.969]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n[2021/07/28 22:23:48.969]  ConnectionCreatedEvent(('localhost', 27017), 1),\r\n[2021/07/28 22:23:48.969]  ConnectionReadyEvent(('localhost', 27017), 1),\r\n[2021/07/28 22:23:48.969]  ConnectionCheckedOutEvent(('localhost', 27017), 1),\r\n[2021/07/28 22:23:48.969]  PoolClearedEvent(('localhost', 27017), None),           <--SDAM clears the pool\r\n[2021/07/28 22:23:48.969]  ConnectionCheckedInEvent(('localhost', 27017), 1),\r\n[2021/07/28 22:23:48.969]  ConnectionClosedEvent(('localhost', 27017), 1, 'stale'),\r\n[2021/07/28 22:23:48.969]  PoolReadyEvent(('localhost', 27017)),                   <--SDAM calls pool.ready()\r\n[2021/07/28 22:23:48.969]  ConnectionCheckOutStartedEvent(('localhost', 27017)),   <--Waiting find thread regains CPU and starts the first checkout which succeeds\r\n[2021/07/28 22:23:48.969]  ConnectionCreatedEvent(('localhost', 27017), 2),\r\n[2021/07/28 22:23:48.969]  ConnectionCheckOutStartedEvent(('localhost', 27017)),\r\n[2021/07/28 22:23:48.969]  ConnectionReadyEvent(('localhost', 27017), 2),\r\n[2021/07/28 22:23:48.969]  ConnectionCheckedOutEvent(('localhost', 27017), 2),\r\n[2021/07/28 22:23:48.969]  ConnectionCheckedInEvent(('localhost', 27017), 2),\r\n[2021/07/28 22:23:48.969]  ConnectionCheckedOutEvent(('localhost', 27017), 2),\r\n[2021/07/28 22:23:48.969]  ConnectionCheckedInEvent(('localhost', 27017), 2)]\r\n```",
      "I believe I've found a suitable workaround to this test failure. We essentially repeat the test until the  until the waiting thread actually encounters a PoolClearedError. The we go ahead and verify the events. I'm validating this with a larger patch build now."
    ],
    "commit_messages": [
      "PYTHON-2602 Test that pool paused errors are retryable (#681)\n\nAllow client_knobs to be used as a decorator."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2344ee515ce6a4b206",
    "number": 680,
    "body": "(cherry picked from commit f07da34f9738019a19d3410b8f7fd3e242fdb9b2)",
    "head_branch": "backport/664",
    "is_a_fork": true,
    "comments": [
      "Hairy merge so I opened this PR to give CI an opportunity to run. Will merge once I have it passing."
    ],
    "commit_messages": [
      "PYTHON-2545 Test Atlas Serverless (#664) (#680)\n\n(cherry picked from commit f07da34f9738019a19d3410b8f7fd3e242fdb9b2)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca2444ee515ce6a4b207",
    "number": 679,
    "body": "See: https://evergreen.mongodb.com/version/60ff3bd31e2d176fd57d25d7\r\n\r\nI decided to split the manylinux release process into 2 tasks to reduce the runtime. Each task takes ~25 minutes, whereas combined into one task would take ~50 minutes.",
    "head_branch": "PYTHON-2816",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2816 Generate pip < 20.3 compatible manylinux wheels (#679)\n\nSplit old/new manylinux wheel generation into two tasks."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2444ee515ce6a4b208",
    "number": 678,
    "body": "Also resolves \"PYTHON-2840 Document \"let\" support for aggregation\".",
    "head_branch": "PYTHON-2802",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2802 Link to create command docs in create_collection  (#678)\n\nPYTHON-2840 Document \"let\" support for aggregation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2544ee515ce6a4b209",
    "number": 677,
    "body": "",
    "head_branch": "PYTHON-2824/grid-out-implement-iobase-interface",
    "is_a_fork": true,
    "comments": [
      "Interesting; I've made the other changes and will now have a look at the tests. (As an aside, it took some time to get the `test_retryable_reads.py` running locally, would be great if there was some docker-compose somewhere in the repo to make it easier for others.)",
      "So the first failure (test `gridfs_download_Download_fails_on_first_attempt`) (and all the others as well) seems to be due to this :mag_right: :\r\n\r\n`IOBase` has a destructor (see code here: https://github.com/python/cpython/blob/main/Lib/_pyio.py#L432)\r\nthat accesses attribute `_IOBase__closed`. The attribute access however actually calls `GridOut.__getattr__`,\r\nwhich in turn calls `GridOut._ensure_file`, and ensure_file notices `self._file` is not set (as the first setting failed and is not retried - that's exactly what the test is testing: first find throws an error and retryReads is disabled) and fetches it again from the db.\r\n\r\nOverriding `__del__`:\r\n\r\n```python\r\ndef __del__(self):\r\n    pass\r\n```\r\n\r\nmakes all tests pass.\r\n\r\nAs far as I can see, we don't need the destructor - there're no system resources or anything we want to release come garbage collection",
      "One possibility would now be to just override the destructor to `pass`. Another would be to change `__getattr__` to not call `_ensure_file` for every argument.",
      "Great find! I am still confused as to why `self.__closed` would trigger `__getattr__`. Normally `__getattr__` is called only if the name isn't part of the instance/class already (ie only for \"unknown\" attribute names). But `self.__closed` should be an attribute that's already defined. Can you explain why `__getattr__` is called at all in this case?\r\n\r\n> Another would be to change __getattr__ to not call _ensure_file for every argument.\r\n\r\nWe could but this would be yet another subtle breaking change and I'd like to avoid adding more of these.",
      "Actually not sure about that. Minimal example to reproduce would be this:\r\n\r\n```python\r\n>>> import io\r\n>>> class A(io.IOBase):\r\n...     def __getattr__(self, item):\r\n...             print(f\"__getattr__ called with {item=}\")\r\n... \r\n>>> \r\n>>> a = A()\r\n>>> a.closed\r\n__getattr__ called with item='__IOBase_closed'\r\nTrue\r\n>>> \r\n>>> del a\r\n__getattr__ called with item='__IOBase_closed'\r\n```",
      "Thanks @henrifroese, apologies for the delay. My plan is to create a Python bug report for the IOBase.__closed + getattr issue but we don't need to hold up this PR for it. I suggest going with your override `__del__` approach with an explanatory comment:\r\n```python\r\n    # Override IOBase.__del__ otherwise it will lead to __getattr__ on\r\n    # __IOBase_closed which calls _ensure_file and potentially performs I/O.\r\n    # We cannot do I/O in __del__ since it can lead to a deadlock.\r\n    def __del__(self):\r\n        pass\r\n```",
      "Makes sense, done :ok_hand: ",
      "Thanks @henrifroese! I opened https://jira.mongodb.org/browse/PYTHON-2874 to make sure GridIn also implements io.IOBase."
    ],
    "commit_messages": [
      "PYTHON-2824 Make GridOut implement full io.IOBase spec (#677)\n\nMake GridOut inherit from io.IOBase to be a fully \"file-like\" object (https://docs.python.org/3/glossary.html#term-file-like-object). Implement missing methods `readlines`, `writelines`,\r\n`writable`, `fileno`, `flush`, `isatty`, `truncate`,\r\nand property `closed`, following the spec\r\n(https://docs.python.org/3/library/io.html#io.IOBase.writable).\r\n\r\nIterating over GridOut previously returned chunks, but IOBase specifies\r\nthat lines should be returned. Thus, the `GridOutIterator` returning chunks is removed\r\nand GridOut simply uses the existing IOBase iterator implementation (returning `self`\r\nin `__iter__` and using `readline` in `__next__`).\r\n\r\nAdditionally, iterating over GridOut previously did not move the \"file pointer\" along, i.e.\r\n`next(iter(some_grid_out_object))` always gave the same result (the first chunk of the file)\r\nas it would create a new iterator starting at the top of the file. This is now fixed as well, so\r\na first call to `next(iter(some_grid_out_object))` gives the first line, and subsequent calls return\r\nthe subsequent lines."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2644ee515ce6a4b20a",
    "number": 676,
    "body": "",
    "head_branch": "PYTHON-2769",
    "is_a_fork": true,
    "comments": [
      "I need to fix the following failures:\r\n```\r\n [2021/07/13 20:21:36.016] FAIL [0.060s]: test_legacy_bulkWrite_A_successful_mixed_bulk_write (test_command_monitoring_legacy.TestAllScenarios)\r\n [2021/07/13 20:21:36.016] ----------------------------------------------------------------------\r\n [2021/07/13 20:21:36.016] Traceback (most recent call last):\r\n [2021/07/13 20:21:36.016]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/test_command_monitoring_legacy.py\", line 200, in run_scenario\r\n [2021/07/13 20:21:36.016]     self.assertEqual(val, actual[key])\r\n [2021/07/13 20:21:36.016] AssertionError: Lists differ: [{'q': {'_id': 3}, 'u': {'$set': {'x': 333}}}] != [SON([('q', {'_id': 3}), ('u', {'$set': {'[45 chars]e)])]\r\n [2021/07/13 20:21:36.016] First differing element 0:\r\n [2021/07/13 20:21:36.016] {'q': {'_id': 3}, 'u': {'$set': {'x': 333}}}\r\n [2021/07/13 20:21:36.016] SON([('q', {'_id': 3}), ('u', {'$set': {'[44 chars]se)])\r\n [2021/07/13 20:21:36.016] - [{'q': {'_id': 3}, 'u': {'$set': {'x': 333}}}]\r\n [2021/07/13 20:21:36.016] + [{'multi': False,\r\n [2021/07/13 20:21:36.016] +   'q': {'_id': 3},\r\n [2021/07/13 20:21:36.016] +   'u': {'$set': {'x': 333}},\r\n [2021/07/13 20:21:36.016] +   'upsert': False}]\r\n [2021/07/13 20:21:36.016] ======================================================================\r\n [2021/07/13 20:21:36.016] FAIL [0.009s]: test_legacy_updateMany_A_successful_update_many (test_command_monitoring_legacy.TestAllScenarios)\r\n [2021/07/13 20:21:36.016] ----------------------------------------------------------------------\r\n [2021/07/13 20:21:36.016] Traceback (most recent call last):\r\n [2021/07/13 20:21:36.016]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/test_command_monitoring_legacy.py\", line 200, in run_scenario\r\n [2021/07/13 20:21:36.016]     self.assertEqual(val, actual[key])\r\n [2021/07/13 20:21:36.016] AssertionError: Lists differ: [{'q': {'_id': {'$gt': 1}}, 'u': {'$inc': [21 chars]rue}] != [SON([('q', {'_id': {'$gt': 1}}), ('u', {'[51 chars]e)])]\r\n [2021/07/13 20:21:36.016] First differing element 0:\r\n [2021/07/13 20:21:36.016] {'q': {'_id': {'$gt': 1}}, 'u': {'$inc': [20 chars]True}\r\n [2021/07/13 20:21:36.016] SON([('q', {'_id': {'$gt': 1}}), ('u', {'[50 chars]se)])\r\n [2021/07/13 20:21:36.016] - [{'multi': True, 'q': {'_id': {'$gt': 1}}, 'u': {'$inc': {'x': 1}}}]\r\n [2021/07/13 20:21:36.016] + [{'multi': True,\r\n [2021/07/13 20:21:36.016] +   'q': {'_id': {'$gt': 1}},\r\n [2021/07/13 20:21:36.016] +   'u': {'$inc': {'x': 1}},\r\n [2021/07/13 20:21:36.016] +   'upsert': False}]\r\n [2021/07/13 20:21:36.016] ======================================================================\r\n [2021/07/13 20:21:36.016] FAIL [0.009s]: test_legacy_updateMany_A_successful_update_many_command_with_write_errors (test_command_monitoring_legacy.TestAllScenarios)\r\n [2021/07/13 20:21:36.016] ----------------------------------------------------------------------\r\n [2021/07/13 20:21:36.016] Traceback (most recent call last):\r\n [2021/07/13 20:21:36.016]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/test_command_monitoring_legacy.py\", line 200, in run_scenario\r\n [2021/07/13 20:21:36.016]     self.assertEqual(val, actual[key])\r\n [2021/07/13 20:21:36.016] AssertionError: Lists differ: [{'q': {'_id': {'$gt': 1}}, 'u': {'$nothin[25 chars]rue}] != [SON([('q', {'_id': {'$gt': 1}}), ('u', {'[55 chars]e)])]\r\n [2021/07/13 20:21:36.016] First differing element 0:\r\n [2021/07/13 20:21:36.016] {'q': {'_id': {'$gt': 1}}, 'u': {'$nothin[24 chars]True}\r\n [2021/07/13 20:21:36.017] SON([('q', {'_id': {'$gt': 1}}), ('u', {'[54 chars]se)])\r\n [2021/07/13 20:21:36.017] - [{'multi': True, 'q': {'_id': {'$gt': 1}}, 'u': {'$nothing': {'x': 1}}}]\r\n [2021/07/13 20:21:36.017] + [{'multi': True,\r\n [2021/07/13 20:21:36.017] +   'q': {'_id': {'$gt': 1}},\r\n [2021/07/13 20:21:36.017] +   'u': {'$nothing': {'x': 1}},\r\n [2021/07/13 20:21:36.017] +   'upsert': False}]\r\n [2021/07/13 20:21:36.017] ======================================================================\r\n [2021/07/13 20:21:36.017] FAIL [0.009s]: test_legacy_updateOne_A_successful_update_one (test_command_monitoring_legacy.TestAllScenarios)\r\n [2021/07/13 20:21:36.017] ----------------------------------------------------------------------\r\n [2021/07/13 20:21:36.017] Traceback (most recent call last):\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/test_command_monitoring_legacy.py\", line 200, in run_scenario\r\n [2021/07/13 20:21:36.017]     self.assertEqual(val, actual[key])\r\n [2021/07/13 20:21:36.017] AssertionError: Lists differ: [{'q': {'_id': {'$gt': 1}}, 'u': {'$inc': {'x': 1}}}] != [SON([('q', {'_id': {'$gt': 1}}), ('u', {'[52 chars]e)])]\r\n [2021/07/13 20:21:36.017] First differing element 0:\r\n [2021/07/13 20:21:36.017] {'q': {'_id': {'$gt': 1}}, 'u': {'$inc': {'x': 1}}}\r\n [2021/07/13 20:21:36.017] SON([('q', {'_id': {'$gt': 1}}), ('u', {'[51 chars]se)])\r\n [2021/07/13 20:21:36.017] - [{'q': {'_id': {'$gt': 1}}, 'u': {'$inc': {'x': 1}}}]\r\n [2021/07/13 20:21:36.017] + [{'multi': False,\r\n [2021/07/13 20:21:36.017] +   'q': {'_id': {'$gt': 1}},\r\n [2021/07/13 20:21:36.017] +   'u': {'$inc': {'x': 1}},\r\n [2021/07/13 20:21:36.017] +   'upsert': False}]\r\n [2021/07/13 20:21:36.017] ======================================================================\r\n [2021/07/13 20:21:36.017] FAIL [0.009s]: test_legacy_updateOne_A_successful_update_one_command_with_write_errors (test_command_monitoring_legacy.TestAllScenarios)\r\n [2021/07/13 20:21:36.017] ----------------------------------------------------------------------\r\n [2021/07/13 20:21:36.017] Traceback (most recent call last):\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/test_command_monitoring_legacy.py\", line 200, in run_scenario\r\n [2021/07/13 20:21:36.017]     self.assertEqual(val, actual[key])\r\n [2021/07/13 20:21:36.017] AssertionError: Lists differ: [{'q': {'_id': {'$gt': 1}}, 'u': {'$nothing': {'x': 1}}}] != [SON([('q', {'_id': {'$gt': 1}}), ('u', {'[56 chars]e)])]\r\n [2021/07/13 20:21:36.017] First differing element 0:\r\n [2021/07/13 20:21:36.017] {'q': {'_id': {'$gt': 1}}, 'u': {'$nothing': {'x': 1}}}\r\n [2021/07/13 20:21:36.017] SON([('q', {'_id': {'$gt': 1}}), ('u', {'[55 chars]se)])\r\n [2021/07/13 20:21:36.017] - [{'q': {'_id': {'$gt': 1}}, 'u': {'$nothing': {'x': 1}}}]\r\n [2021/07/13 20:21:36.017] + [{'multi': False,\r\n [2021/07/13 20:21:36.017] +   'q': {'_id': {'$gt': 1}},\r\n [2021/07/13 20:21:36.017] +   'u': {'$nothing': {'x': 1}},\r\n [2021/07/13 20:21:36.017] +   'upsert': False}]\r\n [2021/07/13 20:21:36.017] ======================================================================\r\n [2021/07/13 20:21:36.017] FAIL [0.009s]: test_legacy_updateOne_A_successful_update_one_with_upsert_when_the_upserted_id_is_not_an_object_id (test_command_monitoring_legacy.TestAllScenarios)\r\n [2021/07/13 20:21:36.017] ----------------------------------------------------------------------\r\n [2021/07/13 20:21:36.017] Traceback (most recent call last):\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/test_command_monitoring_legacy.py\", line 200, in run_scenario\r\n [2021/07/13 20:21:36.017]     self.assertEqual(val, actual[key])\r\n [2021/07/13 20:21:36.017] AssertionError: Lists differ: [{'q': {'_id': 4}, 'u': {'$inc': {'x': 1}}[13 chars]rue}] != [SON([('q', {'_id': 4}), ('u', {'$inc': {'[42 chars]e)])]\r\n [2021/07/13 20:21:36.017] First differing element 0:\r\n [2021/07/13 20:21:36.017] {'q': {'_id': 4}, 'u': {'$inc': {'x': 1}}, 'upsert': True}\r\n [2021/07/13 20:21:36.017] SON([('q', {'_id': 4}), ('u', {'$inc': {'[41 chars]ue)])\r\n [2021/07/13 20:21:36.017] - [{'q': {'_id': 4}, 'u': {'$inc': {'x': 1}}, 'upsert': True}]\r\n [2021/07/13 20:21:36.017] + [{'multi': False,\r\n [2021/07/13 20:21:36.017] +   'q': {'_id': 4},\r\n [2021/07/13 20:21:36.017] +   'u': {'$inc': {'x': 1}},\r\n [2021/07/13 20:21:36.017] +   'upsert': True}]\r\n [2021/07/13 20:21:36.017] ======================================================================\r\n [2021/07/13 20:21:36.017] FAIL [0.014s]: test_cursors_can_be_created,_iterated,_and_closed (test_unified_format.TestUnifiedTestFormatValidPassEntityFindCursor)\r\n [2021/07/13 20:21:36.017] ----------------------------------------------------------------------\r\n [2021/07/13 20:21:36.017] Traceback (most recent call last):\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 1127, in test_case\r\n [2021/07/13 20:21:36.017]     self.run_scenario(spec)\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 1114, in run_scenario\r\n [2021/07/13 20:21:36.017]     self.check_events(spec.get('expectEvents', []))\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 1066, in check_events\r\n [2021/07/13 20:21:36.017]     self.match_evaluator.match_event(\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 571, in match_event\r\n [2021/07/13 20:21:36.017]     self.match_result(reply, actual.reply)\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 513, in match_result\r\n [2021/07/13 20:21:36.017]     return self._match_document(\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 501, in _match_document\r\n [2021/07/13 20:21:36.017]     self.match_result(value, actual[key], in_recursive_call=True)\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 513, in match_result\r\n [2021/07/13 20:21:36.017]     return self._match_document(\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 497, in _match_document\r\n [2021/07/13 20:21:36.017]     if self._evaluate_if_special_operation(expectation, actual, key):\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 482, in _evaluate_if_special_operation\r\n [2021/07/13 20:21:36.017]     self._evaluate_special_operation(\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 447, in _evaluate_special_operation\r\n [2021/07/13 20:21:36.017]     method(spec, actual, key_to_compare)\r\n [2021/07/13 20:21:36.017]   File \"/data/mci/71ac8046c2c5a7b96286b05213264b86/src/test/unified_format.py\", line 413, in _operation_type\r\n [2021/07/13 20:21:36.017]     self.test.assertIsInstance(value, permissible_types)\r\n [2021/07/13 20:21:36.017] AssertionError: 5052123104391 is not an instance of (<class 'bson.int64.Int64'>,)\r\n```",
      "This is ready for review. "
    ],
    "commit_messages": [
      "PYTHON-2769 Test redaction of replies to security-sensitive commands (#676)\n\nResync command monitoring and unified test format tests.\r\nRedact entire hello response when the command started contained speculativeAuthenticate.\r\nMake OP_REPLY cursor.cursor_id always be an Int64."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2744ee515ce6a4b20b",
    "number": 675,
    "body": "",
    "head_branch": "PYTHON-2797",
    "is_a_fork": false,
    "comments": [
      "Updated."
    ],
    "commit_messages": [
      "PYTHON-2797 Update changelog for 5.0 support (#675)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2844ee515ce6a4b20c",
    "number": 674,
    "body": "Merging once the tests pass.",
    "head_branch": "PYTHON-2807",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2807 Skip OP_KILL_CURSORS test on 5.0+ (#674)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2944ee515ce6a4b20d",
    "number": 673,
    "body": "",
    "head_branch": "PYTHON-2806",
    "is_a_fork": true,
    "comments": [
      "> Not sure how this wasn't caught when the test was initially merged?\r\n\r\nI'm not sure. Perhaps it was just missed?"
    ],
    "commit_messages": [
      "PYTHON-2806 Fix test_aggregate_raw_transaction (#673)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2a44ee515ce6a4b20e",
    "number": 672,
    "body": "",
    "head_branch": "PYTHON-2774",
    "is_a_fork": true,
    "comments": [
      "Testing that this works now that libsnappy-dev has been installed.",
      "This is working:\r\n```\r\n [2021/07/12 23:23:12.774] Looking in indexes: https://artifactory.corp.mongodb.com/artifactory/api/pypi/pypi/simple, https://pypi.org/simple\r\n [2021/07/12 23:23:13.075] Collecting python-snappy==0.5.1\r\n [2021/07/12 23:23:13.075]   Downloading https://artifactory.corp.mongodb.com/artifactory/api/pypi/pypi/packages/4c/8f/09f0a11dbcaedf9b0758a37ab2bb77d6c34b9c29afc4d0440019c152d2af/python-snappy-0.5.1.tar.gz (15 kB)\r\n [2021/07/12 23:23:13.573] Building wheels for collected packages: python-snappy\r\n [2021/07/12 23:23:13.573]   Building wheel for python-snappy (setup.py): started\r\n [2021/07/12 23:23:17.247]   Building wheel for python-snappy (setup.py): finished with status 'done'\r\n [2021/07/12 23:23:17.247]   Created wheel for python-snappy: filename=python_snappy-0.5.1-cp27-cp27mu-linux_x86_64.whl size=27129 sha256=02839744fe0beef1eaa31fd664ccbd4e79d1207a021dfd46ba995def4aa88ae8\r\n [2021/07/12 23:23:17.247]   Stored in directory: /home/ec2-user/.cache/pip/wheels/da/54/d7/61b4efe553be3f397b1352755890e2dc63982492dcfdbbca41\r\n [2021/07/12 23:23:17.837] Successfully built python-snappy\r\n [2021/07/12 23:23:17.837] Installing collected packages: python-snappy\r\n [2021/07/12 23:23:17.837] Successfully installed python-snappy-0.5.1\r\n [2021/07/12 23:23:18.492] Running noauth tests over nossl with python python\r\n [2021/07/12 23:23:18.492] 2.7.18 (default, Jun  8 2021, 18:24:43)\r\n [2021/07/12 23:23:18.492] [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]\r\n ```"
    ],
    "commit_messages": [
      "PYTHON-2774 Migrate snappy testing to from Ubuntu 18 to amazon1-2018 (#672)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2a44ee515ce6a4b20f",
    "number": 671,
    "body": "When I backported PYTHON-2608 I didn't realize that the mock KMS script requires Python 3.5+. For <3.5 we need to create yet another virtualenv. This fixes the encryption tests on v3.12. ",
    "head_branch": "PYTHON-2608-fix-3.12",
    "is_a_fork": true,
    "comments": [
      "I had to revert the activatevritualenv change because it doesn't work. After that change the tests no longer ran in the venv where pymongocrypt was installed and all the encrypt tests were skipped:\r\n ```\r\n [2021/07/12 22:43:00.617] SKIPPED: pymongocrypt is not installed (skip)\r\n ```\r\n Not sure what exactly the issue was but it's simpler to revert."
    ],
    "commit_messages": [
      "PYTHON-2608 Fix KMS TLS testing on Python <3.5 (#671)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2b44ee515ce6a4b210",
    "number": 670,
    "body": "Apparently SSL_CERT_FILE does work on Windows. We can use it to workaround the issue in BUILD-13574.",
    "head_branch": "PYTHON-2798",
    "is_a_fork": true,
    "comments": [
      "Note that the Windows 3.10 failures are expected."
    ],
    "commit_messages": [
      "PYTHON-2798 Workaround windows cert issue with SSL_CERT_FILE (#670)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2c44ee515ce6a4b211",
    "number": 669,
    "body": "",
    "head_branch": "PYTHON-2800/atlas-connectivity-serverless",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2800 Add Atlas connectivity tests for MongoDB Serverless (#669)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2d44ee515ce6a4b212",
    "number": 668,
    "body": "Implements: https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/tests/README.rst#bypass-spawning-mongocryptd\r\n",
    "head_branch": "PYTHON-2096",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2096 Validate that mongocryptd is not spawned if bypassAutoEncryption=true (#668)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2e44ee515ce6a4b213",
    "number": 667,
    "body": "Implements the tests described here: https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#kms-tls-tests\r\n\r\nPatch (Note the Windows failures are unrelated see PYTHON-2798): https://spruce.mongodb.com/version/60e643e47742ae7acd922fe3/tasks",
    "head_branch": "PYTHON-2608",
    "is_a_fork": true,
    "comments": [
      "Updated to start the mock KMS servers in run-test.sh. I also moved all our scripts to bash instead of sh. The remaining windows failures are due to PYTHON-2798."
    ],
    "commit_messages": [
      "PYTHON-2608 Test that KMS TLS connections verify peer certificates (#667)\n\nUse bash for all evergreen scripts."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2f44ee515ce6a4b214",
    "number": 666,
    "body": "This will be tested by the ADL prose test being added in #665 ",
    "head_branch": "PYTHON-2799/use-correct-namespace-killCursors",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey good point. Made the change to CommandCursor as well.",
      "Since it was overlooked does that mean there is no test coverage for CommandCursors? If so we should add tests in some form.\r\n\r\nYou can add mockupdb tests like I did in PYTHON-2182.",
      "@ShaneHarvey done - https://github.com/ajdavis/pymongo-mockup-tests/pull/8 \r\nI don't have the necessary permissions to request a review on that PR."
    ],
    "commit_messages": [
      "PYTHON-2799 Use namespace returned from initial command response for killCursors (#666)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca2f44ee515ce6a4b215",
    "number": 665,
    "body": "",
    "head_branch": "PYTHON-2475/atlas-data-lake-prose-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2475 Implement Atlas Data Lake prose specification tests (#665)\n\n* PYTHON-2475 Add prose specification tests for Atlas Data Lake\r\n\r\n* add prose tests\r\n\r\n* Update evergreen config to bootstrap ADL\r\n\r\n* add sleep before connecting to ADL\r\n\r\n* print buildinfo\r\n\r\n* print buildInfo in conditional block\r\n\r\n* refactor skiplogic\r\n\r\n* remove sleep\r\n\r\n* fix debugging code\r\n\r\n* Ensure ADL tests run\r\n\r\n* ensure suite fails if not connected\r\n\r\n* fix test failure\r\n\r\n* improve data_lake variable extraction\r\n\r\n* review changes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3044ee515ce6a4b216",
    "number": 664,
    "body": "TO DO:\r\n\r\n- [x] Update spec tests once https://github.com/mongodb/specifications/pull/1036 is merged\r\n- [x] Add logic to skip non unified format tests that use features not supported by serverless (i.e. `collation` and `$out`)",
    "head_branch": "PYTHON-2545/test-proxy-as-mongos",
    "is_a_fork": true,
    "comments": [
      "Looks like there are still a large number of failures:\r\n```\r\n...\r\n [2021/07/09 20:16:42.584] FAIL [0.916s]: test_retryable_reads_listIndexes_serverErrors_ListIndexes_succeeds_after_SocketException (test_retryable_reads.TestSpec)\r\n [2021/07/09 20:16:42.584] ----------------------------------------------------------------------\r\n [2021/07/09 20:16:42.584] Traceback (most recent call last):\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/__init__.py\", line 534, in wrap\r\n [2021/07/09 20:16:42.584]     return f(*args, **kwargs)\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/__init__.py\", line 534, in wrap\r\n [2021/07/09 20:16:42.584]     return f(*args, **kwargs)\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/test_retryable_reads.py\", line 104, in run_scenario\r\n [2021/07/09 20:16:42.584]     self.run_scenario(scenario_def, test)\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/utils_spec_runner.py\", line 557, in run_scenario\r\n [2021/07/09 20:16:42.584]     self.check_events(test, listener, session_ids)\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/utils_spec_runner.py\", line 380, in check_events\r\n [2021/07/09 20:16:42.584]     len(res['started']), len(test['expectations']), cmds)\r\n [2021/07/09 20:16:42.584] AssertionError: 1 != 2 : [{'listIndexes': 'coll', 'cursor': {}, 'lsid': {'id': UUID('3045bd69-a342-4e1c-9442-ae30e0764147')}, '$clusterTime': {'clusterTime': Timestamp(1625861782, 4), 'signature': {'hash': b'\\xbe[\\xde\\xe4%\\xf8&\\xd1\\x84\\xef_\\xc1Y\\x1c\\xcc\\x12\\x0c0\\xec\\xe2', 'keyId': 6982211488521912322}}, '$db': 'retryable-reads-tests', '$readPreference': {'mode': 'primary'}}]\r\n [2021/07/09 20:16:42.584] ======================================================================\r\n [2021/07/09 20:16:42.584] FAIL [0.644s]: test_cluster_time_no_server_support (test_session.TestCausalConsistency)\r\n [2021/07/09 20:16:42.584] ----------------------------------------------------------------------\r\n [2021/07/09 20:16:42.584] Traceback (most recent call last):\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/__init__.py\", line 534, in wrap\r\n [2021/07/09 20:16:42.584]     return f(*args, **kwargs)\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/test_session.py\", line 1057, in test_cluster_time_no_server_support\r\n [2021/07/09 20:16:42.584]     self.assertIsNone(after_cluster_time)\r\n [2021/07/09 20:16:42.584] AssertionError: {'clusterTime': Timestamp(1625861787, 5), 'signature': {'hash': b\"\\xee\\n<c\\xa3\\xce\\xb0o\\xf7\\x18'P\\x1c\\x1d\\x04\\xe6\\xcd\\xb0\\x1e\\x8f\", 'keyId': 6982211488521912322}} is not None\r\n [2021/07/09 20:16:42.584] ======================================================================\r\n [2021/07/09 20:16:42.584] FAIL [0.083s]: test_server_not_causal (test_session.TestCausalConsistency)\r\n [2021/07/09 20:16:42.584] ----------------------------------------------------------------------\r\n [2021/07/09 20:16:42.584] Traceback (most recent call last):\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/__init__.py\", line 534, in wrap\r\n [2021/07/09 20:16:42.584]     return f(*args, **kwargs)\r\n [2021/07/09 20:16:42.584]   File \"/data/mci/9b6fda5b61ca43196c9b54664e292149/src/test/test_session.py\", line 1016, in test_server_not_causal\r\n [2021/07/09 20:16:42.584]     self.assertIsNone(act)\r\n [2021/07/09 20:16:42.584] AssertionError: Timestamp(1625861787, 6) is not None\r\n [2021/07/09 20:16:42.690] ----------------------------------------------------------------------\r\n [2021/07/09 20:16:42.690] Ran 2042 tests in 426.268s\r\n [2021/07/09 20:16:42.690] FAILED (failures=198, errors=77, skipped=762)\r\n ```\r\n \r\n Waiting for those to be resolved before reviewing again.",
      "@ShaneHarvey this is ready for final review. "
    ],
    "commit_messages": [
      "PYTHON-2545 Test Atlas Serverless (#664)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3144ee515ce6a4b217",
    "number": 663,
    "body": "The serviceId field is not supposed to be returned for non-LB mode. This change fixes the pymongo bug in the ticket by removing the field (if it exists) when in non-LB mode.",
    "head_branch": "PYTHON-2791",
    "is_a_fork": true,
    "comments": [
      "If this is a serverless bug should add a comment that the special-casing needs to be removed once serverless fixes the problem upstream?",
      "On a second thought, lets leave this open for the time being. The code change is small enough that I can manually copy it to get unblocked on serverless testing.",
      "I'd like to merge this instead of wait for serverless testing. I've added a test. We can remove the pool logic in PYTHON-2712 when we remove the other serviceId related code.",
      "To clarify, is the plan to revert this change entirely as part of [PYTHON-2712](https://jira.mongodb.org/browse/PYTHON-2712)? If so, can you make a note about the same on the ticket?"
    ],
    "commit_messages": [
      "PYTHON-2791 Ignore erroneous serviceId field for non-LB connections (#663)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3244ee515ce6a4b218",
    "number": 662,
    "body": "",
    "head_branch": "PYTHON-2775",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2775 Add docs for snapshot reads (#662)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3344ee515ce6a4b219",
    "number": 661,
    "body": "silently converting datetime.date obj to datetime.datetime obj. Now date obj can also be given in insert query",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "PyMongo doesn't support the date type because there is no corresponding type in MongoDB. This is covered in the docs here:\r\nhttps://pymongo.readthedocs.io/en/stable/faq.html#how-can-i-save-a-datetime-date-instance\r\n\r\nThe problem with automatically coercing types like this to some type MongoDB understands is that when you query you get back a different type (in this case you will always get a datetime.datetime). That might be fine for your application, but it may not be fine for other applications. Therefore we leave it up to individual applications to do this coercion"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3444ee515ce6a4b21a",
    "number": 660,
    "body": "Implements: https://github.com/mongodb/specifications/pull/1033",
    "head_branch": "PYTHON-2776",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2776 Disable writes and other unsupported operations in snapshot reads (#660)\n\nRely on the server to report an error for unsupported snapshot read\r\noperations by sending readConcern with all commands, even writes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3444ee515ce6a4b21b",
    "number": 659,
    "body": "",
    "head_branch": "PYTHON-2777",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2777 Raise client side error for snapshot reads on <5.0 (#659)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3544ee515ce6a4b21c",
    "number": 658,
    "body": "~~ @ShaneHarvey what am I missing here? More tests? Edge cases? ~~",
    "head_branch": "PYTHON-2389/rawbatch-session-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2389 Add session support to find_raw_batches and aggregate_raw_batches (#658)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3644ee515ce6a4b21d",
    "number": 657,
    "body": "See: https://github.com/mongodb/specifications/pull/1030",
    "head_branch": "PYTHON-2779",
    "is_a_fork": true,
    "comments": [
      "Looks like the spec tests might need to be skipped on server versions that don't support sessions?\r\n\r\n```\r\n [2021/06/28 19:47:22.551] ======================================================================\r\n [2021/06/28 19:47:22.551] ERROR [0.004s]: test_Server_returns_an_error_on_find_with_snapshot (test_sessions_unified.TestUnifiedSnapshotSessionsNotSupportedServerError)\r\n [2021/06/28 19:47:22.551] ----------------------------------------------------------------------\r\n [2021/06/28 19:47:22.551] Traceback (most recent call last):\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/test/unified_format.py\", line 1125, in test_case\r\n [2021/06/28 19:47:22.551]     self.run_scenario(spec)\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/test/unified_format.py\", line 1102, in run_scenario\r\n [2021/06/28 19:47:22.551]     self.entity_map.create_entities_from_spec(\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/test/unified_format.py\", line 324, in create_entities_from_spec\r\n [2021/06/28 19:47:22.551]     self._create_entity(spec)\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/test/unified_format.py\", line 310, in _create_entity\r\n [2021/06/28 19:47:22.551]     session = client.start_session(**dict(opts))\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/pymongo/mongo_client.py\", line 1683, in start_session\r\n [2021/06/28 19:47:22.551]     return self.__start_session(\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/pymongo/mongo_client.py\", line 1655, in __start_session\r\n [2021/06/28 19:47:22.551]     server_session = self._get_server_session()\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/pymongo/mongo_client.py\", line 1691, in _get_server_session\r\n [2021/06/28 19:47:22.551]     return self._topology.get_server_session()\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/pymongo/topology.py\", line 523, in get_server_session\r\n [2021/06/28 19:47:22.551]     session_timeout = self._check_session_support()\r\n [2021/06/28 19:47:22.551]   File \"/data/mci/fd4ae006277a957217cfdf6db48a40c1/src/pymongo/topology.py\", line 514, in _check_session_support\r\n [2021/06/28 19:47:22.551]     raise ConfigurationError(\r\n [2021/06/28 19:47:22.551] pymongo.errors.ConfigurationError: Sessions are not supported by this MongoDB deployment\r\n```",
      "Yep, fixed."
    ],
    "commit_messages": [
      "PYTHON-2779 Fix topologies field in snapshot reads test (#657)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3744ee515ce6a4b21e",
    "number": 656,
    "body": "Implements snapshot reads on secondaries: https://github.com/mongodb/specifications/pull/1022",
    "head_branch": "PYTHON-2767",
    "is_a_fork": true,
    "comments": [
      "Note, this test fails on 3.6 mongos:\r\n```\r\n [2021/06/24 23:12:34.304] FAIL [0.012s]: test_snapshot_raises_error_if_unsupported (test_session.TestSession)\r\n [2021/06/24 23:12:34.304] ----------------------------------------------------------------------\r\n [2021/06/24 23:12:34.304] Traceback (most recent call last):\r\n [2021/06/24 23:12:34.304]   File \"/data/mci/0f8afbcdf13bf2dc232cbf037a89c1be/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/24 23:12:34.304]     return f(*args, **kwargs)\r\n [2021/06/24 23:12:34.304]   File \"/data/mci/0f8afbcdf13bf2dc232cbf037a89c1be/src/test/test_session.py\", line 721, in test_snapshot_raises_error_if_unsupported\r\n [2021/06/24 23:12:34.304]     self.db.test.find_one({}, session=session)\r\n [2021/06/24 23:12:34.304] AssertionError: OperationFailure not raised\r\n```\r\n\r\nThis means that the driver has to raise a client-side error and the snapshot reads spec needs to be updated. The rest of this PR is still ready for review."
    ],
    "commit_messages": [
      "PYTHON-2767 Support snapshot reads on secondaries (#656)\n\nAdd the MongoClient.start_session snapshot option."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3844ee515ce6a4b21f",
    "number": 655,
    "body": "Now we have all the LB tests:\r\n\r\n```\r\n$ git grep --name-only oadBala  -- '*.json'\r\nsource/initial-dns-seedlist-discovery/tests/load-balanced/loadBalanced-directConnection.json\r\nsource/initial-dns-seedlist-discovery/tests/load-balanced/loadBalanced-replicaSet-errors.json\r\nsource/initial-dns-seedlist-discovery/tests/load-balanced/loadBalanced-true-multiple-hosts.json\r\nsource/initial-dns-seedlist-discovery/tests/load-balanced/loadBalanced-true-txt.json\r\nsource/initial-dns-seedlist-discovery/tests/replica-set/loadBalanced-false-txt.json\r\nsource/load-balancers/tests/lb-connection-establishment.json\r\nsource/load-balancers/tests/non-lb-connection-establishment.json\r\nsource/server-discovery-and-monitoring/tests/load-balanced/discover_load_balancer.json\r\nsource/server-discovery-and-monitoring/tests/monitoring/load_balancer.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/read/Nearest.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/read/Primary.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/read/PrimaryPreferred.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/read/Secondary.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/read/SecondaryPreferred.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/write/Nearest.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/write/Primary.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/write/PrimaryPreferred.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/write/Secondary.json\r\nsource/server-selection/tests/server_selection/LoadBalanced/write/SecondaryPreferred.json\r\nsource/uri-options/tests/connection-options.json\r\n```",
    "head_branch": "PYTHON-2768",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2768 Add SDAM and server selection spec tests for load balancers (#655)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3944ee515ce6a4b220",
    "number": 654,
    "body": "We should wait for https://github.com/mongodb/specifications/pull/990 to be merged before merging this but the code changes can be reviewed.\r\n\r\nNote that I have not yet synced the `legacy_hello` tests as they seem to still be in flux.\r\n",
    "head_branch": "PYTHON-2715/use-hello-handshake",
    "is_a_fork": true,
    "comments": [
      "Can you schedule all the \"Versioned API\" tests too?",
      "@ShaneHarvey updated the spec test so this is ready for your LGTM. I will wait until the spec PR is merged before merging this."
    ],
    "commit_messages": [
      "PYTHON-2715 Use hello command for monitoring when supported (#654)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3944ee515ce6a4b221",
    "number": 653,
    "body": "This test started failing because of the combination of OP_MSG exhaust (PYTHON-1636) and Cursor.__del__ changes (PYTHON-1272). With OP_MSG exhaust the more_to_come flag is not set until after the first getMore. If the exhaust cursor is closed before that happens then we don't have to close the connection. I've updated the test to ensure the first getMore runs so that the cursor will always be pinned and more_to_come will always be true.",
    "head_branch": "PYTHON-2765",
    "is_a_fork": true,
    "comments": [
      "> Is there as per the SDAM spec? Where is this behavior defined?\r\n\r\nThere is no exhaust cursor spec so we define it ourselves. When an exhaust cursor has pending data on the connection when the cursor is closed or garbage collected we have to close and discard the connection. Otherwise the next operation using that connection will read the incorrect command response. The check happens here: https://github.com/mongodb/mongo-python-driver/blob/6bc5e088aff8bbdde4ad2c9b4848fa8431516a62/pymongo/mongo_client.py#L1504-L1509\r\n\r\nI've update the comments in the test. PTAL.",
      "The one test failure is an unrelated issue PYTHON-2534:\r\n```\r\n [2021/06/23 19:13:06.383] FAIL [0.522s]: test_pool_paused_error_is_retryable (test_cmap.TestCMAP)\r\n [2021/06/23 19:13:06.383] ----------------------------------------------------------------------\r\n [2021/06/23 19:13:06.383] Traceback (most recent call last):\r\n [2021/06/23 19:13:06.383]   File \"/data/mci/d8acf3d21e677f7d2af8a61e96111ea5/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/23 19:13:06.383]     return f(*args, **kwargs)\r\n [2021/06/23 19:13:06.383]   File \"/data/mci/d8acf3d21e677f7d2af8a61e96111ea5/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/23 19:13:06.383]     return f(*args, **kwargs)\r\n [2021/06/23 19:13:06.383]   File \"/data/mci/d8acf3d21e677f7d2af8a61e96111ea5/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/23 19:13:06.383]     return f(*args, **kwargs)\r\n [2021/06/23 19:13:06.383]   File \"/data/mci/d8acf3d21e677f7d2af8a61e96111ea5/src/test/test_cmap.py\", line 477, in test_pool_paused_error_is_retryable\r\n [2021/06/23 19:13:06.383]     2, cmap_listener.event_count(ConnectionCheckOutFailedEvent))\r\n [2021/06/23 19:13:06.383] AssertionError: 2 != 1\r\n```"
    ],
    "commit_messages": [
      "PYTHON-2765 Fix test_exhaust failure due to OP_MSG and __del__ changes (#653)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3a44ee515ce6a4b222",
    "number": 652,
    "body": "",
    "head_branch": "PYTHON-2764",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2764 Fix unified test coerce_result on unack writes (#652)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3b44ee515ce6a4b223",
    "number": 651,
    "body": "",
    "head_branch": "PYTHON-2724/add-faq-pymongoarrow",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2724 Add FAQ to PyMongo documentation pointing users to PyMongoArrow (#651)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3c44ee515ce6a4b224",
    "number": 650,
    "body": "",
    "head_branch": "PYTHON-2748/fix-UUID-code-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2748 Fix error in UUID example (#650)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3d44ee515ce6a4b225",
    "number": 649,
    "body": "",
    "head_branch": "PYTHON-2762",
    "is_a_fork": true,
    "comments": [
      "The failures on PyPy:\r\n```\r\n [2021/06/23 01:04:48.869] ======================================================================\r\n [2021/06/23 01:04:48.869] FAIL [0.001s]: test_command_cursor_gc (test_load_balancer.TestLB)\r\n [2021/06/23 01:04:48.869] ----------------------------------------------------------------------\r\n [2021/06/23 01:04:48.869] Traceback (most recent call last):\r\n [2021/06/23 01:04:48.869]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/23 01:04:48.869]     return f(*args, **kwargs)\r\n [2021/06/23 01:04:48.869]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/test_load_balancer.py\", line 76, in test_command_cursor_gc\r\n [2021/06/23 01:04:48.869]     self._test_no_gc_deadlock(create_resource)\r\n [2021/06/23 01:04:48.869]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/test_load_balancer.py\", line 80, in _test_no_gc_deadlock\r\n [2021/06/23 01:04:48.869]     self.assertEqual(pool.active_sockets, 0)\r\n [2021/06/23 01:04:48.869] AssertionError: 14 != 0\r\n [2021/06/23 01:04:48.869] ======================================================================\r\n [2021/06/23 01:04:48.869] FAIL [0.001s]: test_cursor_gc (test_load_balancer.TestLB)\r\n [2021/06/23 01:04:48.869] ----------------------------------------------------------------------\r\n [2021/06/23 01:04:48.870] Traceback (most recent call last):\r\n [2021/06/23 01:04:48.870]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/23 01:04:48.870]     return f(*args, **kwargs)\r\n [2021/06/23 01:04:48.870]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/test_load_balancer.py\", line 68, in test_cursor_gc\r\n [2021/06/23 01:04:48.870]     self._test_no_gc_deadlock(create_resource)\r\n [2021/06/23 01:04:48.870]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/test_load_balancer.py\", line 80, in _test_no_gc_deadlock\r\n [2021/06/23 01:04:48.870]     self.assertEqual(pool.active_sockets, 0)\r\n [2021/06/23 01:04:48.870] AssertionError: 14 != 0\r\n [2021/06/23 01:04:48.870] ======================================================================\r\n [2021/06/23 01:04:48.870] FAIL [0.001s]: test_session_gc (test_load_balancer.TestLB)\r\n [2021/06/23 01:04:48.870] ----------------------------------------------------------------------\r\n [2021/06/23 01:04:48.870] Traceback (most recent call last):\r\n [2021/06/23 01:04:48.870]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/23 01:04:48.870]     return f(*args, **kwargs)\r\n [2021/06/23 01:04:48.870]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/test_load_balancer.py\", line 119, in test_session_gc\r\n [2021/06/23 01:04:48.870]     self.assertEqual(pool.active_sockets, 0)\r\n [2021/06/23 01:04:48.870] AssertionError: 14 != 0\r\n [2021/06/23 01:04:48.870] ======================================================================\r\n [2021/06/23 01:04:48.870] FAIL [0.002s]: test_unpin_committed_transaction (test_load_balancer.TestLB)\r\n [2021/06/23 01:04:48.870] ----------------------------------------------------------------------\r\n [2021/06/23 01:04:48.870] Traceback (most recent call last):\r\n [2021/06/23 01:04:48.870]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/__init__.py\", line 513, in wrap\r\n [2021/06/23 01:04:48.870]     return f(*args, **kwargs)\r\n [2021/06/23 01:04:48.870]   File \"/data/mci/731af78da578b7622df34eba17cf1d22/src/test/test_load_balancer.py\", line 52, in test_unpin_committed_transaction\r\n [2021/06/23 01:04:48.870]     self.assertEqual(pool.active_sockets, 0)\r\n [2021/06/23 01:04:48.870] AssertionError: 14 != 0\r\n [2021/06/23 01:04:49.217] ----------------------------------------------------------------------\r\n```\r\n\r\nI suspect we have some tests which create cursors/transactions and never close them. The only mystery is why this issue only appears on PyPy and not CPython. Perhaps CPython has a better/more aggressive cyclic garbage collector? \r\n\r\nI'm going to pause working on this since it's not strictly needed.",
      "I worked around the PyPy test failures by creating a new client for each of the failing tests above. Test are now green."
    ],
    "commit_messages": [
      "PYTHON-2762 Avoid duplicating unified test files for LB testing (#649)\n\nCreate new client for each cursor/session __del__ test.\r\nAlways close cursors in spec tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3e44ee515ce6a4b226",
    "number": 648,
    "body": "(cherry picked from commit ff6ca53328bfa62f35cb169d6440c2a642b853d2)",
    "head_branch": "backport/PYTHON-2572",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2572 Introduce NotPrimaryError and deprecate NotMasterError (#646)\n\n(cherry picked from commit ff6ca53328bfa62f35cb169d6440c2a642b853d2)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca3e44ee515ce6a4b227",
    "number": 647,
    "body": "",
    "head_branch": "PYTHON-2737",
    "is_a_fork": true,
    "comments": [
      "Looks like HAProxy might not be on the path if it is even installed on these hosts?",
      "Sorry I opened this just to test if the BUILD change was deployed. It is not so we can't merge this just yet."
    ],
    "commit_messages": [
      "PYTHON-2737 Run Load Balancer test suite with Python 3.4 (#647)\n\nSwitch LB testing to amazon1-2018."
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca3f44ee515ce6a4b228",
    "number": 646,
    "body": "We _could_ have raised a DeprecationWarning in `NotMasterError.__init__` if we didn't need to continue supporting application code that uses `NotMasterError` - specifically, we want `except NotMasterError` to catch raising `NotPrimaryError` which requires that `NotPrimaryError` inherit from `NotMasterError`. Consequently, every time `NotPrimaryError` is instantiated it would end up raising `NotMasterError`'s `DeprecationWarning`.",
    "head_branch": "PYTHON-2572/deprecate-NotMasterError",
    "is_a_fork": true,
    "comments": [
      "> Is there already a ticket for 4.0 to remove NotMasterError? If not can you create one?\r\n\r\nYes. [PYTHON-2571](https://jira.mongodb.org/browse/PYTHON-2571).\r\n\r\n@ShaneHarvey do we need to do anything for places where 'not master' is hardcoded? E.g.: \r\n- https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/message.py#L1539\r\n- https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/helpers.py#L155\r\n- https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/helpers.py#L187"
    ],
    "commit_messages": [
      "PYTHON-2572 Introduce NotPrimaryError and deprecate NotMasterError (#646)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4044ee515ce6a4b229",
    "number": 645,
    "body": "See https://jira.mongodb.org/browse/PYTHON-2761",
    "head_branch": "PYTHON-2761",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2761 Don't return a pinned connection to the pool multiple times (#645)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4144ee515ce6a4b22a",
    "number": 644,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks! @sharat87 "
    ],
    "commit_messages": [
      "Fix typo in list_collections docstring (collectons -> collections) (#644)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4244ee515ce6a4b22b",
    "number": 643,
    "body": "",
    "head_branch": "PYTHON-2757",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2757 PYTHON-2730 Resync command monitoring killCursors tests (#643)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4344ee515ce6a4b22c",
    "number": 642,
    "body": "It's not safe to return the pinned connection to the pool from within Cursor.__del__ because the Pool's lock may be held by a python thread while the cyclic garbage collector runs. Instead we send the cursor cleanup request to the client's background thread. The thread will send killCursors on the pinned socket and then return the socket to the pool.",
    "head_branch": "PYTHON-1272",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1272 Fix deadlock when garbage collecting pinned cursors and sessions (#642)\n\nIt's not safe to return the pinned connection to the pool from within\r\nCursor.del because the Pool's lock may be held by a python thread\r\nwhile the cyclic garbage collector runs. Instead we send the cursor\r\ncleanup request to the client's background thread. The thread will\r\nsend killCursors on the pinned socket and then return the socket to\r\nthe pool.\r\nAlso fixed a similar bug when garbage collecting a pinned session."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4344ee515ce6a4b22d",
    "number": 641,
    "body": "",
    "head_branch": "PYTHON-2759",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2759 Fix Jython test failure (#641)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4444ee515ce6a4b22e",
    "number": 640,
    "body": "",
    "head_branch": "PYTHON-2731",
    "is_a_fork": true,
    "comments": [
      "Is the failing test racy or is it an issue with latest?",
      "Yep it's a known failure: https://jira.mongodb.org/browse/PYTHON-2232"
    ],
    "commit_messages": [
      "PYTHON-2731 Run load balancer test suite with all Python versions (#640)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4544ee515ce6a4b22f",
    "number": 639,
    "body": "See https://github.com/mongodb/specifications/blob/master/source/load-balancers/load-balancers.rst#connection-tracking",
    "head_branch": "PYTHON-2677",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2677 Better wait queue timeout errors for load balanced clusters (#639)\n\nRemove checkout argument in favor of SocketInfo.pin_txn/pin_cursor()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4644ee515ce6a4b230",
    "number": 638,
    "body": "This change fixes a few things:\r\n- Moves test_load_balancer.py to the top-level to ensure we run the LB spec tests against non-LB clusters as well.\r\n- Fixes a bug in the unified test runner where an operation which was expected to fail but actually succeeded unexpectedly passed the test.\r\n- Fixes the serviceId fallback logic. In particular, we only enable the fallback when testing against a LB. \r\n- Fixes a socket leak when SocketInfo connection handshake fails.\r\n\r\nBefore the serviceId fallback logic fix:\r\n```\r\n$ python3 test/test_load_balancer.py -v\r\nskipped 'TestUnifiedEventMonitoring runOnRequirements not satisfied'\r\nskipped 'TestUnifiedLbConnectionEstablishment runOnRequirements not satisfied'\r\ntest_operations_against_non-load_balanced_clusters_fail_if_URI_contains_loadBalanced=true (__main__.TestUnifiedNonLbConnectionEstablishment) ... FAIL\r\ntest_operations_against_non-load_balanced_clusters_succeed_if_URI_contains_loadBalanced=false (__main__.TestUnifiedNonLbConnectionEstablishment) ... ok\r\nskipped 'TestUnifiedServerSelection runOnRequirements not satisfied'\r\n\r\n======================================================================\r\nFAIL: test_operations_against_non-load_balanced_clusters_fail_if_URI_contains_loadBalanced=true (__main__.TestUnifiedNonLbConnectionEstablishment)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/unified_format.py\", line 1083, in test_case\r\n    self.run_scenario(spec)\r\n  File \"/Users/shane/git/mongo-python-driver/test/unified_format.py\", line 1067, in run_scenario\r\n    self.run_operations(spec['operations'])\r\n  File \"/Users/shane/git/mongo-python-driver/test/unified_format.py\", line 999, in run_operations\r\n    self.run_entity_operation(op)\r\n  File \"/Users/shane/git/mongo-python-driver/test/unified_format.py\", line 879, in run_entity_operation\r\n    self.fail('Excepted error %s but \"%s\" succeeded: %s' % (\r\nAssertionError: Excepted error {'errorContains': 'Driver attempted to initialize in load balancing mode, but the server does not support this mode'} but \"runCommand\" succeeded: {'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1623449267, 3), 'signature': {'hash': b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00', 'keyId': 0}}, 'operationTime': Timestamp(1623449267, 3)}\r\n\r\n----------------------------------------------------------------------\r\nRan 2 tests in 0.029s\r\n\r\nFAILED (failures=1, skipped=3)\r\n```\r\n\r\nBefore the socket leak fix:\r\n```\r\n$ python3 test/test_load_balancer.py -v\r\nskipped 'TestUnifiedEventMonitoring runOnRequirements not satisfied'\r\nskipped 'TestUnifiedLbConnectionEstablishment runOnRequirements not satisfied'\r\ntest_operations_against_non-load_balanced_clusters_fail_if_URI_contains_loadBalanced=true (__main__.TestUnifiedNonLbConnectionEstablishment) ... /Users/shane/git/mongo-python-driver/test/unified_format.py:876: ResourceWarning: unclosed <socket.socket fd=12, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('127.0.0.1', 57130), raddr=('127.0.0.1', 27017)>\r\n  raise\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\nok\r\ntest_operations_against_non-load_balanced_clusters_succeed_if_URI_contains_loadBalanced=false (__main__.TestUnifiedNonLbConnectionEstablishment) ... ok\r\nskipped 'TestUnifiedServerSelection runOnRequirements not satisfied'\r\n\r\n----------------------------------------------------------------------\r\nRan 2 tests in 0.031s\r\n\r\nOK (skipped=3)\r\n```\r\n\r\nAfter:\r\n```\r\npython3 test/test_load_balancer.py -v                              \r\nskipped 'TestUnifiedEventMonitoring runOnRequirements not satisfied'\r\nskipped 'TestUnifiedLbConnectionEstablishment runOnRequirements not satisfied'\r\ntest_operations_against_non-load_balanced_clusters_fail_if_URI_contains_loadBalanced=true (__main__.TestUnifiedNonLbConnectionEstablishment) ... ok\r\ntest_operations_against_non-load_balanced_clusters_succeed_if_URI_contains_loadBalanced=false (__main__.TestUnifiedNonLbConnectionEstablishment) ... ok\r\nskipped 'TestUnifiedServerSelection runOnRequirements not satisfied'\r\n\r\n----------------------------------------------------------------------\r\nRan 2 tests in 0.026s\r\n\r\nOK (skipped=3)\r\n```\r\n",
    "head_branch": "PYTHON-2744",
    "is_a_fork": true,
    "comments": [
      "Rebased to fix conflicts."
    ],
    "commit_messages": [
      "PYTHON-2744 Run LB tests against non-LB clusters (#638)\n\nFix serviceId fallback to make spec test pass.\r\nFix socket leak when SocketInfo connection handshake fails."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4744ee515ce6a4b231",
    "number": 637,
    "body": "Ready for review. Failures are unrelated to the change.",
    "head_branch": "PYTHON-2718/monitoring-sensitive-cmds",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey `monitoring._SENSITIVE_COMMANDS` is used in many places as a source of truth for what is a sensitive command (e.g. in `compression_support.py`, in `test_auth.py`). Should I create a new method that accepts command name + payload and returns a boolean if the command is sensitive to use in these places instead? "
    ],
    "commit_messages": [
      "PYTHON-2718 Test redaction of security sensitive command monitoring events (#637)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4844ee515ce6a4b232",
    "number": 636,
    "body": "",
    "head_branch": "PYTHON-2710/versioned-api-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2710 Version API connection examples for ecosystem docs (#636)\n\n* PYTHON-2710 Version API connection examples for ecosystem docs\r\n\r\n* fix\r\n\r\n* more fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4944ee515ce6a4b233",
    "number": 635,
    "body": "",
    "head_branch": "backport/PYTHON-2727",
    "is_a_fork": true,
    "comments": [
      "Python 3.4 failures are being caused due to the fact that Ubuntu 18 does not have Python 3.4 installed. Some older pypy versions are also having trouble building the cryptography module which is causing OCSP + PyPy tests to fail.\r\n"
    ],
    "commit_messages": [
      "PYTHON-2727 Test against MongoDB 5.0 in Evergreen (#635)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4944ee515ce6a4b234",
    "number": 634,
    "body": "…eadConcern to the server instead of raising ConfigurationError",
    "head_branch": "PYTHON-2734/read-concern-test-fail",
    "is_a_fork": true,
    "comments": [
      "Ok to merge this? @ShaneHarvey "
    ],
    "commit_messages": [
      "PYTHON-2734 Document that find_raw_batches now sends user-specified R… (#634)\n\n* PYTHON-2734 Document that find_raw_batches now sends user-specified ReadConcern to the server instead of raising ConfigurationError\r\n\r\n* fix\r\n\r\n* fix2\r\n\r\n* fix 3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4a44ee515ce6a4b235",
    "number": 633,
    "body": "gevent.Timeout extends BaseException, so we still sometimes lose the lock.\r\n\r\nPerhaps we should instead have this as an empty except?",
    "head_branch": "use_base_exception",
    "is_a_fork": true,
    "comments": [
      "Thanks for reporting this issue. It reminds me of https://jira.mongodb.org/browse/PYTHON-2334 which you also reported.\r\n\r\nIt's somewhat strange that gevent extends BaseException here. The Python docs say not to do this:\r\n> The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, and not from BaseException.\r\n\r\nhttps://docs.python.org/3/library/exceptions.html#built-in-exceptions\r\n\r\nI'll need to think through this change a bit and research where else (and why) we catch Exception. I suspect it's so that we don't perform unneeded work for KeyboardInterrupt and SystemExit.",
      "Ok, hopefully this makes sense....\r\n\r\nInstead I simply sub-classed Pool, as GeventPool. When the exception handler is entered, I start a greenlet to run the exception handling. This makes the exception handling code un-interruptible from gevent's perspective so that even multiple successive Timeouts being raised in application code will not prevent releasing the resources properly.\r\n\r\nI don't know if you'd want to integrate this somehow... But since I can put this into our application as-is without updating pymongo using the `_pool_class=GeventPool` argument to the MongoClient, it's not necessary.\r\n\r\nIf you don't, we can close this. Thanks!\r\n\r\n(although I would be interested if you have any concerns over this method... It has fixed losing our connections in load tests that raise Timeouts, however)",
      "As the name suggests, `_pool_class` is a private and undocumented argument to MongoClient which we may remove at any time. The main reason it still exists is simply tech debt (to remove it we need to refactor some internal tests). So unfortunately, I don't suggest relying on this feature.  \r\n\r\nI would still like to improve our compatibly with gevent.Timeout's quirks. Would you be able to point me to the docs for how gevent.Timeout works? Also would you be able to write a test case or other reproducer for the original issue? You might get some ideas from the test I added in PYTHON-2334: https://github.com/mongodb/mongo-python-driver/commit/c99254fe974110f6749028e8693b9c820349ff09",
      "https://www.gevent.org/api/gevent.timeout.html\r\n\r\nsee the `Caution` in the `Use As A Context Manager` section\r\n\r\ngevent works by patching the system libraries (socket, threading, sleep, locks etc) that execute I/O or blocking with libuv / libev functionality to run as coroutines. Instead of blocking when you call a socket method, gevent.switch() is called and execution, on the same thread, proceeds on a different coroutine (they call them greenlets). When the blocking is resolved, control is then returned to the coroutine.\r\n\r\nAs such, gevent.Timeout may be raised on any function that blocks, e.g. acquiring a lock, reading a socket, joining a thread, etc.\r\n\r\n(This resolves a lot of the GIL contention with python)",
      "I could also see _pool_class being useful for implementing an asyncio pool to run queries from as well, which would be the more built-in way of running coroutines in python.",
      "Thanks for the link. While I do think the thread-cleanup idea is clever, I am not a fan of adding a special pool class just for Gevent support. Looking into this more, in [PYTHON-1663](https://jira.mongodb.org/browse/PYTHON-1663) (PyMongo 3.8) the pool was changed from catching all exceptions using a bare-except to catching only Exception:\r\n```\r\n-    except:\r\n+    except Exception:\r\n```\r\nI am open to changing it back and adding a comment on why we have to use bare except so the next maintain doesn't accidentally make the same mistake. This would at least deal with the single Timeout issue while we consider how (and if) we want to support multiple timeouts.",
      "Tracked in: https://jira.mongodb.org/browse/PYTHON-2743",
      "I added a unit test that will break if we add Exception back to the except clause.\r\n\r\nIn order for it to function, the Timeout has to raise at a specific point, I used mock to do this, I don't know if you have a more standard \"pymongo\" way of doing that... It was previously raising at the condition check prior to entering the try, thus not incrementing / decrementing active_count at all.\r\n\r\nThis requires reaching down the call tree though to patch at runtime because an actual connection is in use.\r\n\r\nI could also test this by instantiating a Pool object without connecting to mongo and executing _get_sockets directly, which would require much less invasive mocking, if you'd prefer. That would be less \"real world\" but more controlled.",
      "Thanks @TylerWilley! I've merged this fix in https://github.com/mongodb/mongo-python-driver/commit/9c1ff6ad9da88692014848a5fed01f964138de4d and https://github.com/mongodb/mongo-python-driver/commit/a2d687b4bb2110c868d406a03734e1a18bf8fa5e.",
      "Thank you @ShaneHarvey ! :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4b44ee515ce6a4b236",
    "number": 632,
    "body": "This is mostly so I can see if CI passes.",
    "head_branch": "backport/PYTHON-1636",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1636 Support exhaust cursors in OP_MSG (#629) (#632)\n\n(cherry picked from commit d26bf933ed22f9355959ed6c957b6fcce1ead228)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca4c44ee515ce6a4b237",
    "number": 631,
    "body": "Some action items from the the initial [Evergreen patch build](https://evergreen.mongodb.com/version/60b0363530661520e5bd6609?redirect_spruce_users=true):\r\n\r\n- [x] Move OCSP testing to ~Ubuntu 18~ AWS Linux\r\n- [x] Move snappy/zlib/zstd compression tests to Ubuntu 18\r\n- [x] Move PyOpenSSL tests to ~Ubuntu 18~ AWS Linux\r\n- [x] ~Move Ubuntu Auth SSL tests to Ubuntu 18~ Remove Ubuntu Auth SSL tests\r\n- [ ] Investigate the remaining test failures",
    "head_branch": "PYTHON-2727/test-5.0",
    "is_a_fork": true,
    "comments": [
      "There are a lot of failures here, is this ready for review?",
      "@ShaneHarvey failures are transient. I think this can be reviewed now. There might 1-2 more failures to deal with which can happen during/after review."
    ],
    "commit_messages": [
      "PYTHON-2727 Test against MongoDB 5.0 in Evergreen (#631)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4d44ee515ce6a4b238",
    "number": 630,
    "body": "\r\n- [X] Connection pinning for transactions. In a transaction the first connection checked out of the pool becomes pinned to the session. The session follows the normal rules for unpinning outlined in the transaction spec.\r\n- [X] Connection pinning for find cursors (outside a transaction). The connection gets pinned using the \"SocketManager\" class.\r\n- [x] Connection pinning for CommandCursors (EG aggregate, list collections, etc..). Should work similarly to the Cursor class but the initial aggregate command uses a different execution path.",
    "head_branch": "PYTHON-2673",
    "is_a_fork": true,
    "comments": [
      "This is ready for review. Note there are some minor TODO left in the code which I will work on resolving next week. Please ignore them for now.",
      "Updated to significantly simplify the ClientSession connection pinning and unpinning logic (hopefully). The session._pin() method is now only called in one place.\r\n\r\nI also fixed an oversight where command events were not being published with the service_id field and fixed the hasServiceId unified test runner logic.\r\n\r\nFinally I've resolved all the remaining misc TODOs. Patch build:\r\nhttps://spruce.mongodb.com/version/60c010d056234312dcc6e142/tasks",
      "Updated to workaround the CPython GC bug described in https://jira.mongodb.org/browse/PYTHON-2751. New patch:\r\nhttps://spruce.mongodb.com/version/60c2ba243e8e8642a9d2e319/tasks",
      "Merged in two commits:\r\n- The first resyncs the spec tests: https://github.com/mongodb/mongo-python-driver/commit/7a48831124015d5636f5478817727a7cd4be8d8c\r\n- The second has the actually code changes and spec test tweaks: https://github.com/mongodb/mongo-python-driver/commit/c8f32a7a376e027cbe30dcb8df9bf05778e61248"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4e44ee515ce6a4b239",
    "number": 629,
    "body": "",
    "head_branch": "PYTHON-1636/exhaust-cursor-op-msg",
    "is_a_fork": true,
    "comments": [
      "The following test is still failing: \r\n\r\n`test_monitoring.TestCommandMonitoring.test_exhaust`: \r\n\r\n```\r\n Traceback (most recent call last):\r\n   File \"/data/mci/329dc3b61137e54898f9d8c4a1eeb9ae/src/test/__init__.py\", line 497, in wrap\r\n     return f(*args, **kwargs)\r\n   File \"/data/mci/329dc3b61137e54898f9d8c4a1eeb9ae/src/test/test_monitoring.py\", line 524, in test_exhaust\r\n     self.assertEqualReply(expected_result, succeeded.reply)\r\n   File \"/data/mci/329dc3b61137e54898f9d8c4a1eeb9ae/src/test/__init__.py\", line 817, in assertEqualReply\r\n     self.assertEqual(sanitize_reply(expected), sanitize_reply(actual), msg)\r\n AssertionError: {'cursor': {'id': 0, 'ns': 'pymongo_test.test', 'nextB[33 chars]': 1} != {'cursor': {'nextBatch': [{}, {}, {}, {}, {}], 'id': 1[53 chars] 1.0}\r\n - {'cursor': {'id': 0,\r\n + {'cursor': {'id': 1876992701689667842,\r\n               'nextBatch': [{}, {}, {}, {}, {}],\r\n               'ns': 'pymongo_test.test'},\r\n -  'ok': 1}\r\n +  'ok': 1.0}\r\n ?         ++\r\n```\r\n\r\n@ShaneHarvey would it be best to create 2 versions of this test - one for 4.2+ and one for 4.0-? I can't figure out how to avoid that.",
      "@prashantmital this might be related: https://jira.mongodb.org/projects/DRIVERS/issues/DRIVERS-1781",
      "> would it be best to create 2 versions of this test\r\n\r\nLet's make the test portable by inserting 11 documents instead of 10 so that it's not a multiple of batchSize. Then always assert that a second getMore is sent and the response is a single document with cursorId=0.\r\n\r\nIt would also be possible to add some conditional logic at the end of the test based on the server version, but I don't think we need to test the server's behavior here. ",
      "While we are testing find_raw_batches with exhaust, I am not sure how to check whether the protocol in use in that case is OP_MSG? I opened [PYTHON-2720](https://jira.mongodb.org/browse/PYTHON-2720) to test this using mockup-db."
    ],
    "commit_messages": [
      "PYTHON-1636 Support exhaust cursors in OP_MSG (#629)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4f44ee515ce6a4b23a",
    "number": 628,
    "body": "Maintain individual generations for each serviceId. Note that new tests for this change (to exercise the LB serviceId code path) depend on connection pinning and have been added in https://github.com/mongodb/mongo-python-driver/pull/630",
    "head_branch": "PYTHON-2674",
    "is_a_fork": true,
    "comments": [
      "I just had an idea which simplify the _PoolGeneration class a good amount. Please hold off reviewing this until I update. "
    ],
    "commit_messages": [
      "PYTHON-2674 Pool.reset only clears connections to the given serviceId (#628)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca4f44ee515ce6a4b23b",
    "number": 627,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Closing since we intentionally do not have a hard dependency here. dnspython is an optional dependency for users that want to use \"mongodb+srv://\" URIs. To install pymongo with dnspython you can use the \"srv\" extra:\r\n```\r\n$ python -m pip install 'pymongo[srv]'\r\n```\r\nYou can also put `pymongo[srv]` in a requirements.txt file.\r\n\r\nhttps://pymongo.readthedocs.io/en/stable/installation.html#dependencies",
      "Thanks for your pull request @NeilShah2026 \r\nPyMongo is already installable with `dnspython` using the `srv` extra as detailed [here](https://pymongo.readthedocs.io/en/stable/installation.html#dependencies):\r\n```\r\n$ pip install 'pymongo[srv]'\r\n```\r\n\r\nPyMongo purposefully doesn't have any mandatory/strict dependencies since many of our users operate in environments where installing packages from PyPI is either not possible or adds a lot of overhead (this is most common in security-sensitive industries). Consequently, we list `dnspython` as an optional extra that can be installed either manually or using the snippet supplied above.",
      "Oh, sorry, did not know. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5044ee515ce6a4b23c",
    "number": 626,
    "body": "3 Changes to get the tests green:\r\n- PYTHON-2729 Update explain response format parsing for 5.0\r\n- PYTHON-2721 Temporarily skip failing regex test on 5.0\r\n- PYTHON-2730 Temporarily skip failing killCursors tests on 5.0",
    "head_branch": "PYTHON-2729",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2729 PYTHON-2721 PYTHON-2730 Make 5.0 tests green (#626)\n\nUpdate explain response format parsing for 5.0.\r\nTemporarily skip failing regex and killCursors tests on 5.0."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5144ee515ce6a4b23d",
    "number": 625,
    "body": "This PR adds the load balancer test suite. Note that I have removed the \"load_balancer/unified\" spec tests that depend on connection pinning for cursors+transactions.",
    "head_branch": "PYTHON-2676",
    "is_a_fork": true,
    "comments": [
      "Test failures so far are due to not implementing connection pinning and fine grain connection pool clearing behavior:\r\n```\r\n [2021/05/19 20:29:27.602] ======================================================================\r\n [2021/05/19 20:29:27.602] FAIL: test_change_streams_pin_to_a_connection (test_load_balancer.TestUnifiedCursors)\r\n [2021/05/19 20:29:27.602] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.602] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.602]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.602]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.602]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.602]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.602]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.602] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.602] ======================================================================\r\n [2021/05/19 20:29:27.602] FAIL: test_pinned_connections_are_not_returned_after_an_network_error_during_getMore (test_load_balancer.TestUnifiedCursors)\r\n [2021/05/19 20:29:27.602] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.602] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.602]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.602]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.602]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.602]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.602]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.602] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.602] ======================================================================\r\n [2021/05/19 20:29:27.602] FAIL: test_pinned_connections_are_not_returned_to_the_pool_after_a_non-network_error_on_getMore (test_load_balancer.TestUnifiedCursors)\r\n [2021/05/19 20:29:27.602] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.602] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.602]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.602]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.602]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.602]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.602]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.602] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.602] ======================================================================\r\n [2021/05/19 20:29:27.602] FAIL: test_pinned_connections_are_returned_after_a_network_error_during_a_killCursors_request (test_load_balancer.TestUnifiedCursors)\r\n [2021/05/19 20:29:27.602] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.602] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.602]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.602]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.602]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.602]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.602]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.602] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.602] ======================================================================\r\n [2021/05/19 20:29:27.602] FAIL: test_pinned_connections_are_returned_to_the_pool_when_the_cursor_is_closed (test_load_balancer.TestUnifiedCursors)\r\n [2021/05/19 20:29:27.602] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.602] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.602]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.602]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.602]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.602]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.602]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.602] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.602] ======================================================================\r\n [2021/05/19 20:29:27.602] FAIL: test_pinned_connections_are_returned_when_the_cursor_is_drained (test_load_balancer.TestUnifiedCursors)\r\n [2021/05/19 20:29:27.602] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.602] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.602]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.602]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.602]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.602]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.602]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.602] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.602] ======================================================================\r\n [2021/05/19 20:29:27.602] FAIL: test_poolClearedEvent_events_include_serviceId (test_load_balancer.TestUnifiedEventMonitoring)\r\n [2021/05/19 20:29:27.602] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.602] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/pool.py\", line 742, in receive_message\r\n [2021/05/19 20:29:27.602]     return receive_message(self, request_id, self.max_message_size)\r\n [2021/05/19 20:29:27.602]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 192, in receive_message\r\n [2021/05/19 20:29:27.602]     _receive_data_on_socket(sock_info, 16, deadline))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 263, in _receive_data_on_socket\r\n [2021/05/19 20:29:27.603]     raise OSError(\"connection closed\")\r\n [2021/05/19 20:29:27.603] OSError: connection closed\r\n [2021/05/19 20:29:27.603] The above exception was the direct cause of the following exception:\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 862, in run_entity_operation\r\n [2021/05/19 20:29:27.603]     result = cmd(**dict(arguments))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 775, in _collectionOperation_find\r\n [2021/05/19 20:29:27.603]     return list(find_cursor)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/cursor.py\", line 1207, in next\r\n [2021/05/19 20:29:27.603]     if len(self.__data) or self._refresh():\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/cursor.py\", line 1128, in _refresh\r\n [2021/05/19 20:29:27.603]     self.__send_message(q)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/cursor.py\", line 1005, in __send_message\r\n [2021/05/19 20:29:27.603]     address=self.__address)\r\n [2021/05/19 20:29:27.603] pymongo.errors.AutoReconnect: 127.0.0.1:8001: connection closed\r\n [2021/05/19 20:29:27.603] During handling of the above exception, another exception occurred:\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.603]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.603]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 987, in run_operations\r\n [2021/05/19 20:29:27.603]     self.run_entity_operation(op)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 867, in run_entity_operation\r\n [2021/05/19 20:29:27.603]     return self.process_error(exc, expect_error)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 687, in process_error\r\n [2021/05/19 20:29:27.603]     self.assertNotIsInstance(exception, PyMongoError)\r\n [2021/05/19 20:29:27.603] AssertionError: AutoReconnect('127.0.0.1:8001: connection closed',) is an instance of <class 'pymongo.errors.PyMongoError'>\r\n [2021/05/19 20:29:27.603] ======================================================================\r\n [2021/05/19 20:29:27.603] FAIL: test_errors_during_authentication_are_processed (test_load_balancer.TestUnifiedSdamErrorHandling)\r\n [2021/05/19 20:29:27.603] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/pool.py\", line 712, in command\r\n [2021/05/19 20:29:27.603]     exhaust_allowed=exhaust_allowed)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 147, in command\r\n [2021/05/19 20:29:27.603]     reply = receive_message(sock_info, request_id)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 192, in receive_message\r\n [2021/05/19 20:29:27.603]     _receive_data_on_socket(sock_info, 16, deadline))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 263, in _receive_data_on_socket\r\n [2021/05/19 20:29:27.603]     raise OSError(\"connection closed\")\r\n [2021/05/19 20:29:27.603] OSError: connection closed\r\n [2021/05/19 20:29:27.603] The above exception was the direct cause of the following exception:\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 862, in run_entity_operation\r\n [2021/05/19 20:29:27.603]     result = cmd(**dict(arguments))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/collection.py\", line 645, in insert_one\r\n [2021/05/19 20:29:27.603]     bypass_doc_val=bypass_document_validation, session=session),\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/collection.py\", line 593, in _insert_one\r\n [2021/05/19 20:29:27.603]     acknowledged, _insert_command, session)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/mongo_client.py\", line 1418, in _retryable_write\r\n [2021/05/19 20:29:27.603]     return self._retry_with_session(retryable, func, s, None)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/mongo_client.py\", line 1304, in _retry_with_session\r\n [2021/05/19 20:29:27.603]     return self._retry_internal(retryable, func, session, bulk)\r\n [2021/05/19 20:29:27.603] pymongo.errors.AutoReconnect: 127.0.0.1:8000: connection closed\r\n [2021/05/19 20:29:27.603] During handling of the above exception, another exception occurred:\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.603]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.603]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 987, in run_operations\r\n [2021/05/19 20:29:27.603]     self.run_entity_operation(op)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 867, in run_entity_operation\r\n [2021/05/19 20:29:27.603]     return self.process_error(exc, expect_error)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 687, in process_error\r\n [2021/05/19 20:29:27.603]     self.assertNotIsInstance(exception, PyMongoError)\r\n [2021/05/19 20:29:27.603] AssertionError: AutoReconnect('127.0.0.1:8000: connection closed',) is an instance of <class 'pymongo.errors.PyMongoError'>\r\n [2021/05/19 20:29:27.603] ======================================================================\r\n [2021/05/19 20:29:27.603] FAIL: test_errors_during_the_initial_connection_hello_are_ignore (test_load_balancer.TestUnifiedSdamErrorHandling)\r\n [2021/05/19 20:29:27.603] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/pool.py\", line 712, in command\r\n [2021/05/19 20:29:27.603]     exhaust_allowed=exhaust_allowed)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 147, in command\r\n [2021/05/19 20:29:27.603]     reply = receive_message(sock_info, request_id)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 192, in receive_message\r\n [2021/05/19 20:29:27.603]     _receive_data_on_socket(sock_info, 16, deadline))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 263, in _receive_data_on_socket\r\n [2021/05/19 20:29:27.603]     raise OSError(\"connection closed\")\r\n [2021/05/19 20:29:27.603] OSError: connection closed\r\n [2021/05/19 20:29:27.603] The above exception was the direct cause of the following exception:\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 862, in run_entity_operation\r\n [2021/05/19 20:29:27.603]     result = cmd(**dict(arguments))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/collection.py\", line 645, in insert_one\r\n [2021/05/19 20:29:27.603]     bypass_doc_val=bypass_document_validation, session=session),\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/collection.py\", line 593, in _insert_one\r\n [2021/05/19 20:29:27.603]     acknowledged, _insert_command, session)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/mongo_client.py\", line 1418, in _retryable_write\r\n [2021/05/19 20:29:27.603]     return self._retry_with_session(retryable, func, s, None)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/mongo_client.py\", line 1304, in _retry_with_session\r\n [2021/05/19 20:29:27.603]     return self._retry_internal(retryable, func, session, bulk)\r\n [2021/05/19 20:29:27.603] pymongo.errors.AutoReconnect: 127.0.0.1:8000: connection closed\r\n [2021/05/19 20:29:27.603] During handling of the above exception, another exception occurred:\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.603]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.603]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 987, in run_operations\r\n [2021/05/19 20:29:27.603]     self.run_entity_operation(op)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 867, in run_entity_operation\r\n [2021/05/19 20:29:27.603]     return self.process_error(exc, expect_error)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 687, in process_error\r\n [2021/05/19 20:29:27.603]     self.assertNotIsInstance(exception, PyMongoError)\r\n [2021/05/19 20:29:27.603] AssertionError: AutoReconnect('127.0.0.1:8000: connection closed',) is an instance of <class 'pymongo.errors.PyMongoError'>\r\n [2021/05/19 20:29:27.603] ======================================================================\r\n [2021/05/19 20:29:27.603] FAIL: test_only_connections_for_a_specific_serviceId_are_closed_when_pools_are_cleared (test_load_balancer.TestUnifiedSdamErrorHandling)\r\n [2021/05/19 20:29:27.603] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.603]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1058, in run_scenario\r\n [2021/05/19 20:29:27.603]     self.check_events(spec.get('expectEvents', []))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1011, in check_events\r\n [2021/05/19 20:29:27.603]     event_type, expected_event, actual_events[idx])\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 555, in match_event\r\n [2021/05/19 20:29:27.603]     self.test.assertIsInstance(actual, ConnectionCreatedEvent)\r\n [2021/05/19 20:29:27.603] AssertionError: ConnectionCheckedInEvent(('127.0.0.1', 8001), 1) is not an instance of <class 'pymongo.monitoring.ConnectionCreatedEvent'>\r\n [2021/05/19 20:29:27.603] ======================================================================\r\n [2021/05/19 20:29:27.603] FAIL: test_stale_errors_are_ignored (test_load_balancer.TestUnifiedSdamErrorHandling)\r\n [2021/05/19 20:29:27.603] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/pool.py\", line 742, in receive_message\r\n [2021/05/19 20:29:27.603]     return receive_message(self, request_id, self.max_message_size)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 192, in receive_message\r\n [2021/05/19 20:29:27.603]     _receive_data_on_socket(sock_info, 16, deadline))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 263, in _receive_data_on_socket\r\n [2021/05/19 20:29:27.603]     raise OSError(\"connection closed\")\r\n [2021/05/19 20:29:27.603] OSError: connection closed\r\n [2021/05/19 20:29:27.603] The above exception was the direct cause of the following exception:\r\n [2021/05/19 20:29:27.603] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 862, in run_entity_operation\r\n [2021/05/19 20:29:27.603]     result = cmd(**dict(arguments))\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 808, in _cursor_iterateUntilDocumentOrError\r\n [2021/05/19 20:29:27.603]     return next(target)\r\n [2021/05/19 20:29:27.603]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 162, in __next__\r\n [2021/05/19 20:29:27.604]     return next(self.find_cursor)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/cursor.py\", line 1207, in next\r\n [2021/05/19 20:29:27.604]     if len(self.__data) or self._refresh():\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/cursor.py\", line 1148, in _refresh\r\n [2021/05/19 20:29:27.604]     self.__send_message(g)\r\n [2021/05/19 20:29:27.604] pymongo.errors.AutoReconnect: 127.0.0.1:8000: connection closed\r\n [2021/05/19 20:29:27.604] During handling of the above exception, another exception occurred:\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.604]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.604]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 987, in run_operations\r\n [2021/05/19 20:29:27.604]     self.run_entity_operation(op)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 867, in run_entity_operation\r\n [2021/05/19 20:29:27.604]     return self.process_error(exc, expect_error)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 687, in process_error\r\n [2021/05/19 20:29:27.604]     self.assertNotIsInstance(exception, PyMongoError)\r\n [2021/05/19 20:29:27.604] AssertionError: AutoReconnect('127.0.0.1:8000: connection closed',) is an instance of <class 'pymongo.errors.PyMongoError'>\r\n [2021/05/19 20:29:27.604] ======================================================================\r\n [2021/05/19 20:29:27.604] FAIL: test_a_connection_can_be_shared_by_a_transaction_and_a_cursor (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.604] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.604]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.604]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.604]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.604]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.604]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.604] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.604] ======================================================================\r\n [2021/05/19 20:29:27.604] FAIL: test_all_operations_go_to_the_same_mongos (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.604] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.604]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.604]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.604]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.604]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.604]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.604] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.604] ======================================================================\r\n [2021/05/19 20:29:27.604] FAIL: test_pinned_connection_is_not_released_after_a_non-transient_CRUD_error (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.604] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.604]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.604]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.604]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.604]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.604]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.604] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.604] ======================================================================\r\n [2021/05/19 20:29:27.604] FAIL: test_pinned_connection_is_not_released_after_a_non-transient_commit_error (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.604] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.604]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.604]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.604]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.604]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.604]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.604] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.604] ======================================================================\r\n [2021/05/19 20:29:27.604] FAIL: test_pinned_connection_is_released_after_a_transient_network_CRUD_error (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.604] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/pool.py\", line 712, in command\r\n [2021/05/19 20:29:27.604]     exhaust_allowed=exhaust_allowed)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 147, in command\r\n [2021/05/19 20:29:27.604]     reply = receive_message(sock_info, request_id)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 192, in receive_message\r\n [2021/05/19 20:29:27.604]     _receive_data_on_socket(sock_info, 16, deadline))\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/network.py\", line 263, in _receive_data_on_socket\r\n [2021/05/19 20:29:27.604]     raise OSError(\"connection closed\")\r\n [2021/05/19 20:29:27.604] OSError: connection closed\r\n [2021/05/19 20:29:27.604] The above exception was the direct cause of the following exception:\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 862, in run_entity_operation\r\n [2021/05/19 20:29:27.604]     result = cmd(**dict(arguments))\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/collection.py\", line 645, in insert_one\r\n [2021/05/19 20:29:27.604]     bypass_doc_val=bypass_document_validation, session=session),\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/collection.py\", line 593, in _insert_one\r\n [2021/05/19 20:29:27.604]     acknowledged, _insert_command, session)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/mongo_client.py\", line 1418, in _retryable_write\r\n [2021/05/19 20:29:27.604]     return self._retry_with_session(retryable, func, s, None)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/pymongo/mongo_client.py\", line 1304, in _retry_with_session\r\n [2021/05/19 20:29:27.604]     return self._retry_internal(retryable, func, session, bulk)\r\n [2021/05/19 20:29:27.604] pymongo.errors.AutoReconnect: 127.0.0.1:8001: connection closed\r\n [2021/05/19 20:29:27.604] During handling of the above exception, another exception occurred:\r\n [2021/05/19 20:29:27.604] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.604]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.604]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 987, in run_operations\r\n [2021/05/19 20:29:27.604]     self.run_entity_operation(op)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 867, in run_entity_operation\r\n [2021/05/19 20:29:27.604]     return self.process_error(exc, expect_error)\r\n [2021/05/19 20:29:27.604]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 687, in process_error\r\n [2021/05/19 20:29:27.604]     self.assertNotIsInstance(exception, PyMongoError)\r\n [2021/05/19 20:29:27.604] AssertionError: AutoReconnect('127.0.0.1:8001: connection closed',) is an instance of <class 'pymongo.errors.PyMongoError'>\r\n [2021/05/19 20:29:27.604] ======================================================================\r\n [2021/05/19 20:29:27.604] FAIL: test_pinned_connection_is_released_after_a_transient_network_abort_error (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.604] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1058, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.check_events(spec.get('expectEvents', []))\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1011, in check_events\r\n [2021/05/19 20:29:27.605]     event_type, expected_event, actual_events[idx])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 559, in match_event\r\n [2021/05/19 20:29:27.605]     self.test.assertIsInstance(actual, ConnectionClosedEvent)\r\n [2021/05/19 20:29:27.605] AssertionError: ConnectionCheckedOutEvent(('127.0.0.1', 8001), 1) is not an instance of <class 'pymongo.monitoring.ConnectionClosedEvent'>\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_pinned_connection_is_released_after_a_transient_network_commit_error (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1058, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.check_events(spec.get('expectEvents', []))\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1011, in check_events\r\n [2021/05/19 20:29:27.605]     event_type, expected_event, actual_events[idx])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 559, in match_event\r\n [2021/05/19 20:29:27.605]     self.test.assertIsInstance(actual, ConnectionClosedEvent)\r\n [2021/05/19 20:29:27.605] AssertionError: ConnectionCheckedOutEvent(('127.0.0.1', 8001), 1) is not an instance of <class 'pymongo.monitoring.ConnectionClosedEvent'>\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_pinned_connection_is_returned_when_a_new_transaction_is_started (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.605]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.605]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.605]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.605] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_pinned_connection_is_returned_when_a_non-transaction_operation_uses_the_session (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.605]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.605]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.605]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.605] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_sessions_are_reused_in_LB_mode (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.605]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.605]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 934, in _testOperation_assertSameLsidOnLastTwoCommands\r\n [2021/05/19 20:29:27.605]     self.assertEqual(*self.__get_last_two_command_lsids(listener))\r\n [2021/05/19 20:29:27.605] AssertionError: {'id': Binary(b'\\x06\\xa6)\\xfc\\xe5QK/\\x80\"\\xab\\xc9]\\xb2Tr', 4)} != {'id': Binary(b'\\x9c\\x86\\x19/s\\x96O\\x85\\xa6\\x93k\\x92d\\xff{\\x8b', 4)}\r\n [2021/05/19 20:29:27.605] - {'id': Binary(b'\\x06\\xa6)\\xfc\\xe5QK/\\x80\"\\xab\\xc9]\\xb2Tr', 4)}\r\n [2021/05/19 20:29:27.605] + {'id': Binary(b'\\x9c\\x86\\x19/s\\x96O\\x85\\xa6\\x93k\\x92d\\xff{\\x8b', 4)}\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_transaction_can_be_committed_multiple_times (test_load_balancer.TestUnifiedTransactions)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.605]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.605]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 971, in _testOperation_assertNumberConnectionsCheckedOut\r\n [2021/05/19 20:29:27.605]     self.assertEqual(spec['connections'], pool.active_sockets)\r\n [2021/05/19 20:29:27.605] AssertionError: 1 != 0\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_wait_queue_timeout_errors_include_cursor_statistics (test_load_balancer.TestUnifiedWaitQueueTimeouts)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1058, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.check_events(spec.get('expectEvents', []))\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1011, in check_events\r\n [2021/05/19 20:29:27.605]     event_type, expected_event, actual_events[idx])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 564, in match_event\r\n [2021/05/19 20:29:27.605]     self.test.assertIsInstance(actual, ConnectionCheckOutFailedEvent)\r\n [2021/05/19 20:29:27.605] AssertionError: ConnectionCheckedOutEvent(('127.0.0.1', 8001), 1) is not an instance of <class 'pymongo.monitoring.ConnectionCheckOutFailedEvent'>\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_wait_queue_timeout_errors_include_transaction_statistics (test_load_balancer.TestUnifiedWaitQueueTimeouts)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1058, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.check_events(spec.get('expectEvents', []))\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1011, in check_events\r\n [2021/05/19 20:29:27.605]     event_type, expected_event, actual_events[idx])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 564, in match_event\r\n [2021/05/19 20:29:27.605]     self.test.assertIsInstance(actual, ConnectionCheckOutFailedEvent)\r\n [2021/05/19 20:29:27.605] AssertionError: ConnectionCheckedOutEvent(('127.0.0.1', 8001), 1) is not an instance of <class 'pymongo.monitoring.ConnectionCheckOutFailedEvent'>\r\n [2021/05/19 20:29:27.605] ======================================================================\r\n [2021/05/19 20:29:27.605] FAIL: test_unpin_after_TransientTransctionError_error_on_commit (test.test_transactions_unified.TestUnifiedMongosUnpin)\r\n [2021/05/19 20:29:27.605] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.605] Traceback (most recent call last):\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1071, in test_case\r\n [2021/05/19 20:29:27.605]     self.run_scenario(spec)\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 1055, in run_scenario\r\n [2021/05/19 20:29:27.605]     self.run_operations(spec['operations'])\r\n [2021/05/19 20:29:27.605]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 989, in run_operations\r\n [2021/05/19 20:29:27.605]     self.run_special_operation(op)\r\n [2021/05/19 20:29:27.606]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 981, in run_special_operation\r\n [2021/05/19 20:29:27.606]     method(spec['arguments'])\r\n [2021/05/19 20:29:27.606]   File \"/data/mci/941f91603ef9b23e469965893d64cc4e/src/test/unified_format.py\", line 916, in _testOperation_assertSessionUnpinned\r\n [2021/05/19 20:29:27.606]     self.assertIsNone(session._transaction.pinned_address)\r\n [2021/05/19 20:29:27.606] AssertionError: ('127.0.0.1', 8001) is not None\r\n [2021/05/19 20:29:27.978] ----------------------------------------------------------------------\r\n [2021/05/19 20:29:27.978] Ran 982 tests in 273.916s\r\n [2021/05/19 20:29:27.978] FAILED (failures=25, skipped=213)\r\n```\r\n\r\nI'll see if I can automatically skip these tests for now. Alternatively, I'll just implement those features in this PR.",
      "Updated to fix some tests by implementing service_id property on various command events. Then I removed all the test files that depend on connection pinning which I would prefer to implement in a standalone PR. The lone remaining failure is:\r\n```\r\n [2021/05/21 22:28:44.460] ----------------------------------------------------------------------\r\n [2021/05/21 22:28:44.460] Traceback (most recent call last):\r\n [2021/05/21 22:28:44.460]   File \"/data/mci/efdc4de973353c508cc5913a6161c4c0/src/test/unified_format.py\", line 1079, in test_case\r\n [2021/05/21 22:28:44.460]     self.run_scenario(spec)\r\n [2021/05/21 22:28:44.460]   File \"/data/mci/efdc4de973353c508cc5913a6161c4c0/src/test/unified_format.py\", line 1063, in run_scenario\r\n [2021/05/21 22:28:44.460]     self.run_operations(spec['operations'])\r\n [2021/05/21 22:28:44.460]   File \"/data/mci/efdc4de973353c508cc5913a6161c4c0/src/test/unified_format.py\", line 997, in run_operations\r\n [2021/05/21 22:28:44.460]     self.run_special_operation(op)\r\n [2021/05/21 22:28:44.460]   File \"/data/mci/efdc4de973353c508cc5913a6161c4c0/src/test/unified_format.py\", line 989, in run_special_operation\r\n [2021/05/21 22:28:44.460]     method(spec['arguments'])\r\n [2021/05/21 22:28:44.460]   File \"/data/mci/efdc4de973353c508cc5913a6161c4c0/src/test/unified_format.py\", line 924, in _testOperation_assertSessionUnpinned\r\n [2021/05/21 22:28:44.460]     self.assertIsNone(session._transaction.pinned_address)\r\n [2021/05/21 22:28:44.460] AssertionError: ('127.0.0.1', 8001) is not None\r\n ```\r\n~ I suspect this is a bug in the spec test itself. I'm trying to determine how other drivers pass this test.~\r\nEdit: the bug was that the unified test runner was incorrectly evaluating runOnRequirements. Fixed.",
      "Rebased to make the tests green."
    ],
    "commit_messages": [
      "PYTHON-2676 Add load balancer tests in EVG (#625)\n\nAdd load balancer spec tests\r\nEnsure LB supports retryable reads/writes\r\nAdd assertNumberConnectionsCheckedOut, createFindCursor, ignoreResultAndError\r\nAdd PoolClearedEvent.service_id and fix isClientError unified test assertion"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5244ee515ce6a4b23e",
    "number": 624,
    "body": "",
    "head_branch": "PYTHON-2719/RawBatchCursro-StopIteration-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2719 RawBatchCursor must raise StopIteration instead of returning empty bytes when the cursor contains no results (#624)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5344ee515ce6a4b23f",
    "number": 623,
    "body": "This PR contains Unified Test Runner changes in preparation for Load Balancer Support, including:\r\n- resyncing various spec tests\r\n- Adding support for CRUD unified tests and removing crud_v2.\r\n- Splitting out the transactions unified tests into test_transactions_unified.\r\n- PYTHON-2348 Correctly express lack of event assertions in change stream tests",
    "head_branch": "PYTHON-2676",
    "is_a_fork": true,
    "comments": [
      "I think this is in a good state to review. This PR contains Unified Test Runner changes in preparation for Load Balancer Support, including:\r\n- resyncing various spec tests\r\n- Adding support for CRUD unified tests and removing crud_v2.\r\n- Splitting out the transactions unified tests into test_transactions_unified.\r\n- PYTHON-2348 Correctly express lack of event assertions in change stream tests"
    ],
    "commit_messages": [
      "PYTHON-2676 Unified Test Runner changes in preparation for Load Balancer Support (#623)\n\nResync crud, change stream, SDAM, server_selection, transactions, uri-options, tests.\r\nPYTHON-2348 Correctly express lack of event assertions in change stream tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5444ee515ce6a4b240",
    "number": 622,
    "body": "",
    "head_branch": "PYTHON-1860/dont-use-op-get-more",
    "is_a_fork": true,
    "comments": [
      "Note these 3 test failures on \"latest\" are expected (I'm seeing them in other branches changes):\r\n```\r\n [2021/05/18 22:04:57.302] FAIL [0.026s]: test_index_filter (test_collection.TestCollection)\r\n [2021/05/18 22:04:57.302] ----------------------------------------------------------------------\r\n [2021/05/18 22:04:57.302] Traceback (most recent call last):\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/__init__.py\", line 486, in wrap\r\n [2021/05/18 22:04:57.302]     return f(*args, **kwargs)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/test_collection.py\", line 651, in test_index_filter\r\n [2021/05/18 22:04:57.302]     self.assertEqual(\"x_1\", stage.get('indexName'))\r\n [2021/05/18 22:04:57.302] AssertionError: 'x_1' != None\r\n [2021/05/18 22:04:57.302] ======================================================================\r\n [2021/05/18 22:04:57.302] FAIL [0.016s]: test_command_monitoring_find_A_successful_find_event_with_a_getmore_and_the_server_kills_the_cursor (test_command_monitoring_spec.TestAllScenarios)\r\n [2021/05/18 22:04:57.302] ----------------------------------------------------------------------\r\n [2021/05/18 22:04:57.302] Traceback (most recent call last):\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/__init__.py\", line 486, in wrap\r\n [2021/05/18 22:04:57.302]     return f(*args, **kwargs)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/__init__.py\", line 486, in wrap\r\n [2021/05/18 22:04:57.302]     return f(*args, **kwargs)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/test_command_monitoring_spec.py\", line 199, in run_scenario\r\n [2021/05/18 22:04:57.302]     self.assertEqual(val, actual[key])\r\n [2021/05/18 22:04:57.302] AssertionError: {u'ns': u'command-monitoring-tests.test', u'nextBatch': [{u'x': 44, u'_id': 4}], [truncated]... != {u'ns': u'command-monitoring-tests.test', u'nextBatch': [{u'x': 44, u'_id': 4}], [truncated]...\r\n [2021/05/18 22:04:57.302] - {u'id': 0L,\r\n [2021/05/18 22:04:57.302] ?         ^^\r\n [2021/05/18 22:04:57.302] + {u'id': 42,\r\n [2021/05/18 22:04:57.302] ?         ^^\r\n [2021/05/18 22:04:57.302]    u'nextBatch': [{u'_id': 4, u'x': 44}],\r\n [2021/05/18 22:04:57.302]    u'ns': u'command-monitoring-tests.test'}\r\n [2021/05/18 22:04:57.302] ======================================================================\r\n [2021/05/18 22:04:57.302] FAIL [0.041s]: test_A_successful_find_event_with_a_getmore_and_the_server_kills_the_cursor (test_unified_format.TestUnifiedTestFormatValidPassPocCommandMonitoring)\r\n [2021/05/18 22:04:57.302] ----------------------------------------------------------------------\r\n [2021/05/18 22:04:57.302] Traceback (most recent call last):\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 970, in test_case\r\n [2021/05/18 22:04:57.302]     self.run_scenario(spec)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 957, in run_scenario\r\n [2021/05/18 22:04:57.302]     self.check_events(spec.get('expectEvents', []))\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 910, in check_events\r\n [2021/05/18 22:04:57.302]     expected_event, listener.results[idx])\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 510, in match_event\r\n [2021/05/18 22:04:57.302]     self.match_result(reply, actual.reply)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 463, in match_result\r\n [2021/05/18 22:04:57.302]     expectation, actual, is_root=not in_recursive_call)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 453, in _match_document\r\n [2021/05/18 22:04:57.302]     self.match_result(value, actual[key], in_recursive_call=True)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 463, in match_result\r\n [2021/05/18 22:04:57.302]     expectation, actual, is_root=not in_recursive_call)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 453, in _match_document\r\n [2021/05/18 22:04:57.302]     self.match_result(value, actual[key], in_recursive_call=True)\r\n [2021/05/18 22:04:57.302]   File \"/data/mci/9fc3560cd178f3fd98b33d747797bc89/src/test/unified_format.py\", line 478, in match_result\r\n [2021/05/18 22:04:57.302]     self._test_class.assertEqual(expectation, actual)\r\n [2021/05/18 22:04:57.302] AssertionError: 0 != 4400764155901009001L\r\n ```\r\n \r\n The others I haven't seen before and might be caused by this PR:\r\n ```\r\n  [2021/05/18 21:28:19.190] ERROR [0.014s]: test_read_concern (test_cursor.TestRawBatchCursor)\r\n [2021/05/18 21:28:19.190] ----------------------------------------------------------------------\r\n [2021/05/18 21:28:19.190] Traceback (most recent call last):\r\n [2021/05/18 21:28:19.190]   File \"/data/mci/c9dfda4ae77471eba031921ada430a9b/src/test/__init__.py\", line 497, in wrap\r\n [2021/05/18 21:28:19.190]     return f(*args, **kwargs)\r\n [2021/05/18 21:28:19.190]   File \"/data/mci/c9dfda4ae77471eba031921ada430a9b/src/test/test_cursor.py\", line 1518, in test_read_concern\r\n [2021/05/18 21:28:19.190]     next(c.find_raw_batches())\r\n [2021/05/18 21:28:19.190]   File \"/data/mci/c9dfda4ae77471eba031921ada430a9b/src/pymongo/cursor.py\", line 1209, in next\r\n [2021/05/18 21:28:19.190]     raise StopIteration\r\n [2021/05/18 21:28:19.190] StopIteration\r\n ```\r\n",
      "See https://jira.mongodb.org/browse/PYTHON-2722"
    ],
    "commit_messages": [
      "PYTHON-1860 Use OP_MSG for find/aggregate_raw_batches when supported (#622)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5544ee515ce6a4b241",
    "number": 621,
    "body": "This implements most of the load balancers spec changes: https://github.com/mongodb/specifications/blob/master/source/load-balancers/load-balancers.rst#server-discovery-and-monitoring\r\n\r\n- Disable SRV Polling.\r\n- Disable SDAM compatibility check.\r\n- Disable logicalSessionTimeoutMinutes check.\r\n- Disable server session pool pruning.\r\n- Disable server selection.\r\n- Disable Monitors.\r\n- A ServerType of LoadBalancer MUST be considered a data-bearing server.\r\n- \"drivers MUST emit the following series of SDAM events\" section.\r\n- Send loadBalanced:True with handshakes, validate serviceId.\r\n- Add topologyVersion fallback when serviceId is missing.\r\n- Don't mark load balancers unknown from operation errors.\r\n\r\nThe notable things left out are testing and the various Connection Pooling changes:\r\n- connection pinning\r\n- serviceId -> generation mapping\r\n- more informative WaitQueueTimeout error messages\r\n\r\nI'm still working my way through testing. It is a bit involved because we need to update the retryable writes, reads, crud, change streams, uri options, transactions, SDAM, server selection, and unified format spec tests. Including going from schema version 1.1 to 1.4. I've decided to split that to a separate PR.",
    "head_branch": "PYTHON-2672",
    "is_a_fork": true,
    "comments": [
      "How did you test this locally or on EVG? Is there something you can point me to?",
      "> How did you test this locally or on EVG? Is there something you can point me to?\r\n\r\nI've tested this both locally and on EVG. Testing PR will be up today or tomorrow. For now see my comment about setting up a local LB on https://jira.mongodb.org/browse/PYTHON-2542."
    ],
    "commit_messages": [
      "PYTHON-2672 SDAM, CMAP, and server selection changes for load balancers (#621)\n\nDisable SRV Polling, SDAM compatibility check, logicalSessionTimeoutMinutes check.\r\nserver session pool pruning, server selection, and server monitoring.\r\nA ServerType of LoadBalancer MUST be considered a data-bearing server.\r\n\"drivers MUST emit the following series of SDAM events\" section.\r\nSend loadBalanced:True with handshakes, validate serviceId.\r\nAdd topologyVersion fallback when serviceId is missing.\r\nDon't mark load balancers unknown."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5544ee515ce6a4b242",
    "number": 620,
    "body": "I suspect this will fix the \"error: can't start new thread\" we're seeing on SUSE 12 with Python 2.7.",
    "head_branch": "PYTHON-2666-v3.12",
    "is_a_fork": true,
    "comments": [
      "This doesn't fix the \"can't start new thread\" errors. Closing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5644ee515ce6a4b243",
    "number": 619,
    "body": "Patch: https://spruce.mongodb.com/version/6099cc480305b97fd5038662/",
    "head_branch": "deprecate/profiler-helpers",
    "is_a_fork": true,
    "comments": [
      "Hmm why does it say \"no tasks/variants were configured\"?",
      "See the link in the description. We have no default tasks configured for the PR integration on 3.12 so it always says that AFAICT",
      "Ah I tracked down the issue. We changed the EVG tasks such that the project's Github PR regex no longer matched any tasks. I've updated it to match some 3.9+2.7 tasks on amazon1-2018 so it should work on the next PR."
    ],
    "commit_messages": [
      "PYTHON-2662 Deprecate database profiler helpers (#619)\n\n(cherry picked from commit ac61cf87a911d72b095ea00663e051f6ac148c7a)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca5744ee515ce6a4b244",
    "number": 618,
    "body": "An implementation of https://github.com/mongodb/specifications/pull/984.",
    "head_branch": "PYTHON-2684",
    "is_a_fork": true,
    "comments": [
      "Opening this up for review because this is now required by the latest server and even though the spec isn't merged yet I don't expect it to change."
    ],
    "commit_messages": [
      "PYTHON-2684 Send Versioned API options with getMore+txn commands (#618)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5844ee515ce6a4b245",
    "number": 617,
    "body": "",
    "head_branch": "PYTHON-2662/deprecate-profiling-helps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2662 Deprecate database profiler helpers (#617)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5944ee515ce6a4b246",
    "number": 616,
    "body": "Should I create a new section in the PyMongo 4 migration guide for deprecated/remove URI options?",
    "head_branch": "PYTHON-2396/tls-opts",
    "is_a_fork": true,
    "comments": [
      "Ready for another look @ShaneHarvey. I have removed the migration notes as they will be added in https://jira.mongodb.org/browse/PYTHON-2162 \r\nThis change is intended to be merged into both v3.12 and master branches.",
      "I've ignored deprecations in `test_ssl` but noticed that we were ignorning already deprecated options that were in that file like `ssl_cert_reqs` so I am not sure why we are doing so specifically for these newly deprecated options? \r\nIs the intention to ignore the deprecations in all other test modules other than SSL? "
    ],
    "commit_messages": [
      "PYTHON-2396 Deprecate ssl_keyfile and ssl_certfile URI options (#616)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5a44ee515ce6a4b247",
    "number": 615,
    "body": "",
    "head_branch": "PYTHON-2658",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2658 Remove NPS survey (#615)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5a44ee515ce6a4b248",
    "number": 614,
    "body": "Somes notes:\r\n- This change depends on https://github.com/mongodb/mongo-python-driver/pull/613\r\n- We don't do anything with loadBalanced URI option yet besides the validating it. This is intentional. The real functionality will come in later PRs.\r\n- The tests in TestDNSLoadBalanced all pass against a regular replica set but the spec says to only test them against a real e2e sharded load balancer set up. That test set up will also come in later PRs. For now the tests are simply skipped.",
    "head_branch": "PYTHON-2671",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2671 Support loadBalanced URI option (#614)\n\nAdd workaround in test_dns until PYTHON-2679 is completed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5b44ee515ce6a4b249",
    "number": 613,
    "body": "Add support for validating parsed_options and running non-TLS tests.\r\n\r\nThis implements the following (ancient) spec changes which never has drivers tickets created for them: \r\n- https://github.com/mongodb/specifications/commit/53c8c19400f7808f472c5013db194e9af34153e9\r\n- https://github.com/mongodb/specifications/commit/643a8790c65a864835cb1014d5b5939e5e65daa5\r\n- https://github.com/mongodb/specifications/commit/120a529a95a16e7980ace0c78f07133db8c9578c",
    "head_branch": "PYTHON-2678",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2678 Resync SRV spec tests (#613)\n\nAdd support for validating parsed_options and running non-TLS tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5c44ee515ce6a4b24a",
    "number": 612,
    "body": "This change works around the following eventlet bug:\r\n```\r\n$ python green_framework_test.py eventlet -s test.test_srv_polling.TestSrvPolling.test_addition\r\n...\r\ntest_addition (test.test_srv_polling.TestSrvPolling) ... ERROR\r\n\r\n======================================================================\r\nERROR: test_addition (test.test_srv_polling.TestSrvPolling)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/dns/resolver.py\", line 212, in __init__\r\n    rrset = response.find_rrset(response.answer, qname,\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/dns/message.py\", line 341, in find_rrset\r\n    raise KeyError\r\nKeyError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/dns/resolver.py\", line 220, in __init__\r\n    crrset = response.find_rrset(response.answer,\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/dns/message.py\", line 341, in find_rrset\r\n    raise KeyError\r\nKeyError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/srv_resolver.py\", line 58, in get_options\r\n    results = _resolve(self.__fqdn, 'TXT',\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/dns/resolver.py\", line 1100, in query\r\n    return get_default_resolver().query(qname, rdtype, rdclass, tcp, source,\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/dns/resolver.py\", line 1003, in query\r\n    answer = Answer(_qname, rdtype, rdclass, response,\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/dns/resolver.py\", line 232, in __init__\r\n    raise NoAnswer(response=response)\r\ndns.resolver.NoAnswer: The DNS response does not contain an answer to the question: test1.test.build.10gen.cc. IN TXT\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_srv_polling.py\", line 165, in test_addition\r\n    self.run_scenario(response, True)\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_srv_polling.py\", line 153, in run_scenario\r\n    client = MongoClient(self.CONNECTION_STRING)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 659, in __init__\r\n    res = uri_parser.parse_uri(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/uri_parser.py\", line 497, in parse_uri\r\n    dns_options = dns_resolver.get_options()\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/srv_resolver.py\", line 64, in get_options\r\n    raise ConfigurationError(str(exc))\r\npymongo.errors.ConfigurationError: The DNS response does not contain an answer to the question: test1.test.build.10gen.cc. IN TXT\r\n```",
    "head_branch": "PYTHON-2667",
    "is_a_fork": true,
    "comments": [
      "I've reported the underlying issue to eventlet: https://github.com/eventlet/eventlet/issues/701"
    ],
    "commit_messages": [
      "PYTHON-2667 Fix SRV support when running with eventlet (#612)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5d44ee515ce6a4b24b",
    "number": 611,
    "body": "Fixes the \"no server\" test failures: \r\n```\r\n [2021/04/19 22:43:38.653] FAIL [10.026s]: test_direct_client_maintains_pool_to_arbiter (test_client.TestClientPool)\r\n [2021/04/19 22:43:38.653] ----------------------------------------------------------------------\r\n [2021/04/19 22:43:38.653] Traceback (most recent call last):\r\n [2021/04/19 22:43:38.653]   File \"/data/mci/c3fd0d8a3cd0109c13fe181f4d100ef4/src/test/test_client.py\", line 2082, in test_direct_client_maintains_pool_to_arbiter\r\n [2021/04/19 22:43:38.653]     listener.wait_for_event(monitoring.ConnectionReadyEvent, 1)\r\n [2021/04/19 22:43:38.653]   File \"/data/mci/c3fd0d8a3cd0109c13fe181f4d100ef4/src/test/utils.py\", line 93, in wait_for_event\r\n [2021/04/19 22:43:38.653]     'find %s %s event(s)' % (count, event))\r\n [2021/04/19 22:43:38.653]   File \"/data/mci/c3fd0d8a3cd0109c13fe181f4d100ef4/src/test/utils.py\", line 731, in wait_until\r\n [2021/04/19 22:43:38.653]     raise AssertionError(\"Didn't ever %s\" % success_description)\r\n [2021/04/19 22:43:38.653] AssertionError: Didn't ever find 1 <class 'pymongo.monitoring.ConnectionReadyEvent'> event(s)\r\n [2021/04/19 22:43:38.653] ======================================================================\r\n [2021/04/19 22:43:38.653] FAIL [10.179s]: test_rs_client_does_not_maintain_pool_to_arbiters (test_client.TestClientPool)\r\n [2021/04/19 22:43:38.653] ----------------------------------------------------------------------\r\n [2021/04/19 22:43:38.653] Traceback (most recent call last):\r\n [2021/04/19 22:43:38.653]   File \"/data/mci/c3fd0d8a3cd0109c13fe181f4d100ef4/src/test/test_client.py\", line 2055, in test_rs_client_does_not_maintain_pool_to_arbiters\r\n [2021/04/19 22:43:38.653]     listener.wait_for_event(monitoring.ConnectionReadyEvent, 2)\r\n [2021/04/19 22:43:38.653]   File \"/data/mci/c3fd0d8a3cd0109c13fe181f4d100ef4/src/test/utils.py\", line 93, in wait_for_event\r\n [2021/04/19 22:43:38.653]     'find %s %s event(s)' % (count, event))\r\n [2021/04/19 22:43:38.653]   File \"/data/mci/c3fd0d8a3cd0109c13fe181f4d100ef4/src/test/utils.py\", line 731, in wait_until\r\n [2021/04/19 22:43:38.653]     raise AssertionError(\"Didn't ever %s\" % success_description)\r\n [2021/04/19 22:43:38.653] AssertionError: Didn't ever find 2 <class 'pymongo.monitoring.ConnectionReadyEvent'> event(s)\r\n [2021/04/19 22:43:38.653] ----------------------------------------------------------------------\r\n ```",
    "head_branch": "PYTHON-2634-no-server-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2634 Skip arbiter tests when no server is running (#611)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5e44ee515ce6a4b24c",
    "number": 610,
    "body": "An implementation of https://github.com/mongodb/specifications/pull/969",
    "head_branch": "PYTHON-2629",
    "is_a_fork": true,
    "comments": [
      "I forgot to schedule the api version tests in the previous patch. Various CMAP tests were failing. They should pass now that I've resynced the spec tests to incorporate https://github.com/mongodb/specifications/pull/977 ."
    ],
    "commit_messages": [
      "PYTHON-2629 Use hello command when API Version is declared (#610)\n\nPYTHON-2697 Update CMAP runner to ignore extra events"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5f44ee515ce6a4b24d",
    "number": 609,
    "body": "Resolves the following related tickets:\r\n- PYTHON-2635 Test that session is unpinned when executing a non-transaction operation\r\n- PYTHON-2654 Add unpinning transaction test for read operations\r\n- PYTHON-2657 Unpin sessions after all abortTransaction attempts\r\n\r\nNote we already unpin on any retryable or transient errors so the only thing left to do in pymongo is to unpin before returning from the abort_transaction() method.\r\n\r\nThis change also introduces `unified/` spec tests for transactions.",
    "head_branch": "PYTHON-2635",
    "is_a_fork": true,
    "comments": [
      "Note the one test failure is unrelated to this change and is already a known (rare) issue that appears to be back from the grave: https://jira.mongodb.org/browse/PYTHON-2279"
    ],
    "commit_messages": [
      "PYTHON-2635 Unpin sessions after all abortTransaction attempts (#609)\n\nAdd unified test runner for transactions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca5f44ee515ce6a4b24e",
    "number": 608,
    "body": "# Description\r\n- Just a minor update to sphinx website since the old link is no longer working",
    "head_branch": "khanh/docs-link-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Update link to sphinx website (#608)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6044ee515ce6a4b24f",
    "number": 607,
    "body": "… parse this value",
    "head_branch": "PYTHON-2656",
    "is_a_fork": true,
    "comments": [
      "Thanks @seamys, I'm closing this PR since we are planning to use a different approach to fix this issue, described in [PYTHON-1824](https://jira.mongodb.org/browse/PYTHON-1824).\r\n\r\nJust a note, pymongo does not support negative years but we do support negative milliseconds between datetime.datetime.min (year 1) and the UNIX epoch (year 1970). This change would break applications that use dates in this range."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6144ee515ce6a4b250",
    "number": 606,
    "body": "Also resyncs the rest of the CRUD tests which pulled in:\r\n\r\n- PYTHON-2301 ValueError is an acceptable error for CRUD v2 error:true tests\r\n- Fix CRUD v1 aggregate $out change in mongodb/specifications@3f3a3c2",
    "head_branch": "PYTHON-2547",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2547 Change estimated_document_count() to use $collStats instead of count on 4.9+ (#606)\n\nFix CRUD v1 aggregate $out change for\r\nhttps://github.com/mongodb/specifications/commit/3f3a3c225d2605c4b1f9c4b5d408b4bb44f36214\r\nPYTHON-2301 ValueError is an acceptable error for CRUD v2 error:true tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6244ee515ce6a4b251",
    "number": 605,
    "body": "See the docs here: https://docs.mongodb.com/manual/reference/command/profile/\r\n\r\n`sampleRate` was added in 3.6.\r\n`filter` was added in 4.4.2.\r\n\r\nFilter is a bit odd in that it accepts a query document OR the string \"unset\" which resets and disables the filter. For this reason I decided not to perform client-side type validation on the filter parameter.\r\n\r\nI also decided not to add `**kwargs`. Adding `**kwargs` let's users do strange things like pass arbitrary command arguments (txnNumber, lsid, writeConcern, etc..) and makes the code more confusing since we then need to define (or at least think about) precedence in cases like this: `db.set_profiling_level(ALL, slow_ms=50, slowms=55)`",
    "head_branch": "PYTHON-2533",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-2662 to investigate the deprecation idea."
    ],
    "commit_messages": [
      "PYTHON-2533 Add support for sample_rate and filter in set_profiling_level (#605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6344ee515ce6a4b252",
    "number": 604,
    "body": "",
    "head_branch": "PYTHON-2624",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2624 Increase serverSelectionTimeoutMS for mongocryptd connection (#604)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6444ee515ce6a4b253",
    "number": 603,
    "body": "# Description\r\n- Allow `validate_boolean_or_string` to accept `'True'` and `'False'` in addition to `'true'` and `'false'`",
    "head_branch": "khanh/permissive_validation",
    "is_a_fork": true,
    "comments": [
      "Thanks but we're not sure we want to make this change yet. The issue is that URIs are supposed to be portable across all the langauges we support (python, node, java, etc...) and I don't know if all the other langauges support \"True\" or \"False\". I'll  consult the drivers team and get back to you.",
      "Thanks for letting me know! I can close this PR if you'd like",
      "Thanks @Kn99HN but I couldn't convince the other teams to make this change. Boolean values in URIs will need to continue to use lowercase \"true\" and \"false\" which is portable across different language APIs. ",
      "Makes sense. Thanks so much for letting me know!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6544ee515ce6a4b254",
    "number": 602,
    "body": "# Description\r\n- Generate installation instruction for user to copy paste when dnspython is not installed. \r\n\r\n# Note for reviewers \r\n- I wasn't sure about getting path for Python so I think this is the most straightforward but having to import `os` only for the path seems a bit excessive. But let me know if you would like me to change it :)",
    "head_branch": "khanh/dns-error-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2605: Improve mongodb+srv:// error message when dnspython is not installed (#602)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6644ee515ce6a4b255",
    "number": 601,
    "body": "",
    "head_branch": "PYTHON-2570",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2570 Resync unified tests version 1.1 or lower (#601)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6644ee515ce6a4b256",
    "number": 600,
    "body": "https://jira.mongodb.org/browse/PYTHON-2603\r\nPatch: https://evergreen.mongodb.com/version/6082160f61837d3849468e47",
    "head_branch": "PYTHON-2603",
    "is_a_fork": true,
    "comments": [
      "New patch: https://evergreen.mongodb.com/version/608343f41e2d173f2914dce2\r\n\r\nI've also fixed https://jira.mongodb.org/browse/PYTHON-2647 to get CI green."
    ],
    "commit_messages": [
      "PYTHON-2603 Standardize on ubuntu1804 zseries, power8, and arm64 (#600)\n\nPYTHON-2647 Fix test_use_openssl_when_available when service_identity<18.1 is installed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6744ee515ce6a4b257",
    "number": 599,
    "body": "Also resolves PYTHON-2599 and PYTHON-2641.",
    "head_branch": "PYTHON-2600",
    "is_a_fork": true,
    "comments": [
      "Patch: https://evergreen.mongodb.com/version/6081f9dc3627e0322bad59ee",
      "Updated to switch from ubuntu 16 to 18: https://evergreen.mongodb.com/version/6082019ad1fe07756888444e\r\n\r\nThe \"latest\" server version on Ubuntu 16 is very far behind (v4.9.0-alpha7-49-gb968ca0) so it does not recognize the updated acceptApiVersion2 flag. Hopefully using Ubuntu 18 will fix the issue."
    ],
    "commit_messages": [
      "PYTHON-2600 Resync spec tests for versioned api (#599)\n\nAlso resolves PYTHON-2599 and PYTHON-2641."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6844ee515ce6a4b258",
    "number": 598,
    "body": "Fixes the following deprecation warning:\r\n\r\n```txt\r\n/home/jr769/miniconda3/envs/py38/lib/python3.8/site-packages/pymongo/srv_resolver.py:72: DeprecationWarning: please use dns.resolver.resolve() instead\r\n  results = resolver.query('_mongodb._tcp.' + self.__fqdn, 'SRV',\r\n/home/jr769/miniconda3/envs/py38/lib/python3.8/site-packages/pymongo/srv_resolver.py:57: DeprecationWarning: please use dns.resolver.resolve() instead\r\n  results = resolver.query(self.__fqdn, 'TXT',\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks like I'm unable to see the details of why the evergreen test failed without creating an account. 😞 "
    ],
    "commit_messages": [
      "PYTHON-2364 Replace deprecated dns.resolver.query with dns.resolver.resolve (#598)\n\nFall back to dns.resolver.query for dns v1 compat."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6944ee515ce6a4b259",
    "number": 597,
    "body": "Error message after this change:\r\n\r\n```\r\n/Users/pmital/Developer/mongo-python-driver/pymongo/daemon.py:137: RuntimeWarning: Failed to start mongocryptd: is it on your $PATH?\r\nOriginal exception: [Errno 2] No such file or directory: 'mongocryptd': 'mongocryptd'\r\n  _silence_resource_warning(_spawn(sys.argv[1:]))\r\n/Users/pmital/Developer/mongo-python-driver/pymongo/daemon.py:137: RuntimeWarning: Failed to start mongocryptd: is it on your $PATH?\r\nOriginal exception: [Errno 2] No such file or directory: 'mongocryptd': 'mongocryptd'\r\n  _silence_resource_warning(_spawn(sys.argv[1:]))\r\n```",
    "head_branch": "PYTHON-2234/fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2234 Only rely on standard library in daemon.py (#597)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6a44ee515ce6a4b25a",
    "number": 596,
    "body": "Backports #591 to v3.12\r\n\r\nPatch: https://evergreen.mongodb.com/version/60807f3861837d32a2b36236",
    "head_branch": "backport-python-2234",
    "is_a_fork": true,
    "comments": [
      "Latest EVG patch: https://evergreen.mongodb.com/version/6080a6720ae606147fd5c190"
    ],
    "commit_messages": [
      "PYTHON-2234: When mongocryptd spawn fails, the driver does not indicate what it tried to spawn (#596)\n\nCo-authored-by: William Zhou <william.zhou@mongodb.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca6b44ee515ce6a4b25b",
    "number": 595,
    "body": "Tested here: https://evergreen.mongodb.com/version/607a1187d1fe0724ae3b6f3c\r\n\r\n[no ci]",
    "head_branch": "PYTHON-2584",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2584 Use large localThresholdMS to fix test_load_balancing (#595)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6c44ee515ce6a4b25c",
    "number": 594,
    "body": "# Description\r\n- Add a informative UserWarning when no_cursor_timeout is set",
    "head_branch": "khanh/no-cursor-timeout-warning",
    "is_a_fork": true,
    "comments": [
      "Thanks @Kn99HN!"
    ],
    "commit_messages": [
      "PYTHON-1880: Raise a warning when no_cursor_timeout is used with an implicit session (#594)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6c44ee515ce6a4b25d",
    "number": 593,
    "body": "Adds a requirements.txt file that tells pip to install dnspython, a required package to connect to a MongoDB server.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks but pymongo does not have any strict dependencies so we don't need a requirements.txt. To install pymongo with the optional dnspython dependency needed to use 'mongodb+srv://' connection strings you can install pymongo with the \"srv\" extra like this:\r\n```\r\n$ python -m pip install 'pymongo[srv]'\r\n```\r\nSee https://pymongo.readthedocs.io/en/stable/installation.html#dependencies"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6d44ee515ce6a4b25e",
    "number": 592,
    "body": "Switch from common dictionary to CaseInsensitiveDictionary to fix `cased_key` attribute error.",
    "head_branch": "PYTHON-2397",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2397: MongoClient(ssl=True, tls=False) fails with an AttributeError (#592)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6e44ee515ce6a4b25f",
    "number": 591,
    "body": "Catching `FileNotFound` error in spawning `Mongocryptd`, and provide a more useful message",
    "head_branch": "PYTHON-2234",
    "is_a_fork": true,
    "comments": [
      "> Can you post the before and after error messages?\r\n\r\nBefore:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/william.zhou/mongo-python-driver/pymongo/daemon.py\", line 122, in <module>\r\n    _silence_resource_warning(_spawn(sys.argv[1:]))\r\n  File \"/Users/william.zhou/mongo-python-driver/pymongo/daemon.py\", line 78, in _spawn\r\n    return subprocess.Popen(\r\n  File \"/Users/william.zhou/opt/anaconda3/lib/python3.8/subprocess.py\", line 854, in __init__\r\n    self._execute_child(args, executable, preexec_fn, close_fds,\r\n  File \"/Users/william.zhou/opt/anaconda3/lib/python3.8/subprocess.py\", line 1702, in _execute_child\r\n    raise child_exception_type(errno_num, err_msg, err_filename)\r\nFileNotFoundError: [Errno 2] No such file or directory: 'mongocryptd'\r\n```\r\n\r\nAfter:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/william.zhou/mongo-python-driver/pymongo/daemon.py\", line 129, in <module>\r\n    _silence_resource_warning(_spawn(sys.argv[1:]))\r\n  File \"/Users/william.zhou/mongo-python-driver/pymongo/daemon.py\", line 88, in _spawn\r\n    raise Exception(\r\nException: Failed to start path/path/path/path/path: is it on your PATH: [Errno 2] No such file or directory: 'mongocryptd'\r\nTraceback (most recent call last):\r\n  File \"/Users/william.zhou/mongo-python-driver/pymongo/daemon.py\", line 83, in _spawn\r\n    return subprocess.Popen(\r\n  File \"/Users/william.zhou/opt/anaconda3/lib/python3.8/subprocess.py\", line 854, in __init__\r\n    self._execute_child(args, executable, preexec_fn, close_fds,\r\n  File \"/Users/william.zhou/opt/anaconda3/lib/python3.8/subprocess.py\", line 1702, in _execute_child\r\n    raise child_exception_type(errno_num, err_msg, err_filename)\r\nFileNotFoundError: [Errno 2] No such file or directory: 'mongocryptd'"
    ],
    "commit_messages": [
      "PYTHON-2234: When mongocryptd spawn fails, the driver does not indicate what it tried to spawn (#591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca6f44ee515ce6a4b260",
    "number": 590,
    "body": "Fixes a noisy OperationFailure: Authentication failed error.\r\nDo not attempt to create unneeded connections to arbiters, ghosts,\r\nhidden members, or unknown members.",
    "head_branch": "PYTHON-2634",
    "is_a_fork": true,
    "comments": [
      "Sigh, this change seems to make these two tests more flakey:\r\n```\r\n [2021/04/07 19:05:07.562] FAIL [10.033s]: test_max_idle_time_reaper (test_client.TestClient)\r\n [2021/04/07 19:05:07.562] ----------------------------------------------------------------------\r\n [2021/04/07 19:05:07.562] Traceback (most recent call last):\r\n [2021/04/07 19:05:07.562]   File \"/data/mci/0f97b1956ba2d463825378bfe9902bfe/src/test/test_client.py\", line 473, in test_max_idle_time_reaper\r\n [2021/04/07 19:05:07.562]     \"remove stale socket\")\r\n [2021/04/07 19:05:07.562]   File \"/data/mci/0f97b1956ba2d463825378bfe9902bfe/src/test/utils.py\", line 741, in wait_until\r\n [2021/04/07 19:05:07.562]     raise AssertionError(\"Didn't ever %s\" % success_description)\r\n [2021/04/07 19:05:07.562] AssertionError: Didn't ever remove stale socket\r\n```\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_amazon1_test_ssl__platform~awslinux_auth~noauth_ssl~nossl_python_version~3.6_coverage~coverage_test_2.6_replica_set_patch_cc029a1e6208863eaab453777363d3935b927f32_606dfefb61837d0383bb0567_21_04_07_18_50_36\r\n\r\nAnd:\r\n```\r\n [2021/04/07 19:02:56.470] FAIL [10.028s]: test_min_pool_size (test_client.TestClient)\r\n [2021/04/07 19:02:56.470] ----------------------------------------------------------------------\r\n [2021/04/07 19:02:56.470] Traceback (most recent call last):\r\n [2021/04/07 19:02:56.470]   File \"/data/mci/4b8f11bb525edfac5c311f757eda876c/src/test/test_client.py\", line 519, in test_min_pool_size\r\n [2021/04/07 19:02:56.470]     \"pool initialized with 10 sockets\")\r\n [2021/04/07 19:02:56.470]   File \"/data/mci/4b8f11bb525edfac5c311f757eda876c/src/test/utils.py\", line 741, in wait_until\r\n [2021/04/07 19:02:56.470]     raise AssertionError(\"Didn't ever %s\" % success_description)\r\n [2021/04/07 19:02:56.470] AssertionError: Didn't ever pool initialized with 10 sockets\r\n```\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_amazon1_test_ssl__platform~awslinux_auth~noauth_ssl~nossl_python_version~3.6_coverage~coverage_test_4.2_replica_set_patch_cc029a1e6208863eaab453777363d3935b927f32_606dfefb61837d0383bb0567_21_04_07_18_50_36\r\n\r\nI believe this is because the background thread now has to wait for the SDAM state to be discovered before attempting to populate the pool but I am very surprised to see that this wouldn't happen within the test's 10 second timeout. Perhaps there is too much thread contention and one of the monitors is being starved for 10 seconds?"
    ],
    "commit_messages": [
      "PYTHON-2634 Only update pools for data-bearing servers (#590)\n\nFixes a noisy OperationFailure: Authentication failed error.\r\nDo not attempt to create unneeded connections to arbiters, ghosts,\r\nhidden members, or unknown members."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7044ee515ce6a4b261",
    "number": 589,
    "body": "https://jira.mongodb.org/browse/PYTHON-2631",
    "head_branch": "PYTHON-2631",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2631 Add missing error message to InvalidBSON error (#589)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7144ee515ce6a4b262",
    "number": 588,
    "body": "https://jira.mongodb.org/browse/PYTHON-2630",
    "head_branch": "PYTHON-2630",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2630 Statically initialize Py_buffer to avoid false positives in Coverity (#588)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7244ee515ce6a4b263",
    "number": 587,
    "body": "",
    "head_branch": "bump-3.12.0.b1.dev0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.12.0b1.dev0 (#587)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca7244ee515ce6a4b264",
    "number": 586,
    "body": "",
    "head_branch": "update-312-changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.12.0b0 (#586)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca7344ee515ce6a4b265",
    "number": 585,
    "body": "`Algorithm.Random` to `Algorithm.AEAD_AES_256_CBC_HMAC_SHA_512_Random`",
    "head_branch": "PYTHON-2628",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2628: Fix 'encryption::create_data_key` docstring to use existing algorithm"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7444ee515ce6a4b266",
    "number": 584,
    "body": "",
    "head_branch": "PYTHON-2536/document-versioned-API",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2536 Document versioned API usage (#584)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7544ee515ce6a4b267",
    "number": 583,
    "body": "Add a property for accessing current topology description in MongoClient.\r\n\r\nOpen Questions:\r\nHow to test these changes/run locally?",
    "head_branch": "PYTHON-2480",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2480: Add MongoClient helper to access the current TopologyDescription (#583)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7644ee515ce6a4b268",
    "number": 582,
    "body": "…BSONDocument instead of a list (#580)\r\n\r\n(cherry picked from commit 94f4de1f2e58209e1e8c1db46975b76c3cee6abb)\r\n\r\n[Evergreen patch build](https://spruce.mongodb.com/version/6058e9c732f417409a396687/tasks?page=0&sorts=STATUS%3AASC%3BBASE_STATUS%3ADESC&statuses=failed&variant=tests-python-version-amazon1-test-encryption__platform~awslinux_auth-ssl~noauth-nossl_python-version~2.7_encryption~encryption)",
    "head_branch": "PYTHON-1690",
    "is_a_fork": true,
    "comments": [
      "The solitary failing test is known to be racy: https://jira.mongodb.org/browse/PYTHON-2229"
    ],
    "commit_messages": [
      "PYTHON-1690: Fix error message when insert_many is given a single RawBSONDocument instead of a list (#580) (#582)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca7744ee515ce6a4b269",
    "number": 581,
    "body": "PYTHON-2616 Fix test_network_error_message when TLS is enabled.",
    "head_branch": "PYTHON-2615",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2615 Reinstate TLS network timeout workaround due to eventlet (#581)\n\nPYTHON-2616 Fix test_network_error_message when TLS is enabled."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7744ee515ce6a4b26a",
    "number": 580,
    "body": "Changed type checking from `abc.Iterable` to `abc.Sequence` in order to better match 'list-like' types\r\n\r\n```\r\nTypeError                                 \r\nTraceback (most recent call last)\r\n<ipython-input-6-9084eaf77999> in <module>\r\n----> 1 client.test.test.insert_many(RawBSONDocument(bson.BSON.encode({'_id':2})))\r\n\r\n~/mongo-python-driver/pymongo/collection.py in insert_many(self, documents, ordered, bypass_document_validation, session)\r\n    688         \"\"\"\r\n    689         if not isinstance(documents, abc.Sequence) or not documents:\r\n--> 690             raise TypeError(\"documents must be a non-empty list\")\r\n    691         inserted_ids = []\r\n    692         def gen():\r\n\r\nTypeError: documents must be a non-empty list\r\n```",
    "head_branch": "PYTHON-1690",
    "is_a_fork": true,
    "comments": [
      "@prashantmital @ShaneHarvey thoughts on whether this requires a testing change? I was looking for tests for invalid input types and couldn't find any existing ones",
      "Yeah it would be great to add a test in `test_collection.py` which uses `with self.assertRaisesRegex(...` on various invalid types.",
      "> Yeah it would be great to add a test in `test_collection.py` which uses `with self.assertRaisesRegex(...` on various invalid types.\r\n\r\nadded tests in the most recent commit",
      "Please run the tests before pushing a backport to v3.12. I think the `abc.Mapping` usage may be different in that branch."
    ],
    "commit_messages": [
      "PYTHON-1690: Fix error message when insert_many is given a single RawBSONDocument instead of a list (#580)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7844ee515ce6a4b26b",
    "number": 579,
    "body": "Adds an Example for usage of RawBSONDocuments with the use case of moving documents across different collections\r\n\r\n",
    "head_branch": "PYTHON-1359",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7944ee515ce6a4b26c",
    "number": 578,
    "body": "Adds an Example for usage of RawBSONDocuments with the use case of moving documents across different collections",
    "head_branch": "PYTHON-1359",
    "is_a_fork": false,
    "comments": [
      "Attaching Screenshot of Built Example\r\n![image](https://user-images.githubusercontent.com/30269279/111395179-80807880-8679-11eb-9730-1584a184e450.png)\r\n",
      "Can we run the doctest task on the Evergreen patch build to make sure this passes?"
    ],
    "commit_messages": [
      "PYTHON-1359: Add Example for RawBSONDocument (#578)\n\nAdd doctest/example for inserting/retrieving RawBSONDocument"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7a44ee515ce6a4b26d",
    "number": 577,
    "body": "",
    "head_branch": "PYTHON-2583/backport-v3.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2583 Bump minimum required PyMongoCrypt version to 1.1.0 (#577)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7b44ee515ce6a4b26e",
    "number": 576,
    "body": "FYI I will open a separate PR to backport this to the v3.12 branch.",
    "head_branch": "PYTHON-2583/bump-pymongocrypt-dep",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2583 Bump minimum required PyMongoCrypt version to 1.1.0 (#576)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7c44ee515ce6a4b26f",
    "number": 575,
    "body": "Before this change:\r\n```python\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_client.py\", line 1579, in test_network_error_message\r\n    client.pymongo_test.test.find_one({})\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/collection.py\", line 1261, in find_one\r\n    for result in cursor.limit(-1):\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 1199, in next\r\n    if len(self.__data) or self._refresh():\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 1120, in _refresh\r\n    self.__send_message(q)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 995, in __send_message\r\n    response = client._run_operation_with_response(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1271, in _run_operation_with_response\r\n    return self._retryable_read(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1374, in _retryable_read\r\n    return func(session, server, sock_info, slave_ok)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1263, in _cmd\r\n    return server.run_operation_with_response(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/server.py\", line 117, in run_operation_with_response\r\n    reply = sock_info.receive_message(request_id)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 717, in receive_message\r\n    self._raise_connection_failure(error)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 715, in receive_message\r\n    return receive_message(self, request_id, self.max_message_size)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/network.py\", line 193, in receive_message\r\n    _receive_data_on_socket(sock_info, 16, deadline))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/network.py\", line 264, in _receive_data_on_socket\r\n    raise AutoReconnect(\"connection closed\")\r\npymongo.errors.AutoReconnect: connection closed\r\n```\r\n\r\nAfter this change:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 708, in receive_message\r\n    return receive_message(self, request_id, self.max_message_size)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/network.py\", line 192, in receive_message\r\n    _receive_data_on_socket(sock_info, 16, deadline))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/network.py\", line 263, in _receive_data_on_socket\r\n    raise OSError(\"connection closed\")\r\nOSError: connection closed\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/unittest/case.py\", line 60, in testPartExecutor\r\n    yield\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/unittest/case.py\", line 676, in run\r\n    self._callTestMethod(testMethod)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\r\n    method()\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 496, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_client.py\", line 1579, in test_network_error_message\r\n    client.pymongo_test.test.find_one({})\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/collection.py\", line 1261, in find_one\r\n    for result in cursor.limit(-1):\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 1199, in next\r\n    if len(self.__data) or self._refresh():\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 1120, in _refresh\r\n    self.__send_message(q)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 995, in __send_message\r\n    response = client._run_operation_with_response(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1271, in _run_operation_with_response\r\n    return self._retryable_read(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1374, in _retryable_read\r\n    return func(session, server, sock_info, slave_ok)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1263, in _cmd\r\n    return server.run_operation_with_response(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/server.py\", line 117, in run_operation_with_response\r\n    reply = sock_info.receive_message(request_id)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 710, in receive_message\r\n    self._raise_connection_failure(error)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 871, in _raise_connection_failure\r\n    _raise_connection_failure(self.address, error)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 241, in _raise_connection_failure\r\n    raise AutoReconnect(msg) from error\r\npymongo.errors.AutoReconnect: localhost:27017: connection closed\r\n```\r\n\r\nThis change also removes the python 2 compat code for ssl timeouts added in PYTHON-1157.",
    "head_branch": "PYTHON-2596",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2596 Include host in error message when connection is closed (#575)\n\nUse raise from syntax when re-raising exceptions in the pool."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7c44ee515ce6a4b270",
    "number": 574,
    "body": "Add 10058 as a \"not master\" error code to account for MongoDB<=3.2 errors.\r\n\r\nThis change implements: https://github.com/mongodb/specifications/pull/920",
    "head_branch": "PYTHON-2544",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2544 Do not check error messages when an error code is present (#574)\n\nAdd 10058 as a \"not master\" error code to account for MongoDB<=3.2 errors."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7d44ee515ce6a4b271",
    "number": 573,
    "body": "",
    "head_branch": "PYTHON-2591/use-server-toolchain-python",
    "is_a_fork": true,
    "comments": [
      "Can you also test this change on RHEL 7.2 zSeries (PYTHON-2590)? This might fix the problem there too.",
      "It does indeed fix the issue on Zseries as well... The failure on Amazon Linux seems to be unrelated."
    ],
    "commit_messages": [
      "PYTHON-2591 Use server toolchain Python on Ubuntu-16 with x86-64, arm64, power8 (#573)\n\nPYTHON-2590 Use server toolchain RHEL 7.2 ZSeries (#573)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7e44ee515ce6a4b272",
    "number": 572,
    "body": "",
    "head_branch": "PYTHON-2548/add-UpdateDescription.truncatedArrays-field",
    "is_a_fork": true,
    "comments": [
      "Does this feature require any documentation changes?",
      "AFAICT we don't document the various change event documents that the server could return and we don't wrap them in a class while returning them to the user so I don't see why we would need to document this? "
    ],
    "commit_messages": [
      "Python 2548/add update description.truncated arrays field (#572)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca7f44ee515ce6a4b273",
    "number": 571,
    "body": "This change implements: https://github.com/mongodb/specifications/pull/907",
    "head_branch": "PYTHON-2580",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2580 Provide explicit guidance on handling command errors during the handshake (#571)\n\nCommand errors during the handshake MUST use SDAM error handling rules.\r\nMark server unknown after auth failures.\r\nTest network timeout errors pre/post auth.\r\nPoolClearedError MUST NOT mark the server Unknown.\r\nAdd \"authEnabled\" runOn requirement for SDAM integration tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8044ee515ce6a4b274",
    "number": 570,
    "body": "This change implements: SPEC-1759",
    "head_branch": "PYTHON-2543",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2543 Do not mark a server unknown from a \"writeErrors\" response (#570)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8144ee515ce6a4b275",
    "number": 569,
    "body": "",
    "head_branch": "PYTHON-2539",
    "is_a_fork": true,
    "comments": [
      "This is the error when attempting to use sessionToken with pymongocrypt 1.0:\r\n```\r\nERROR: test_spec_awsTemporary_Insert_a_document_with_auto_encryption_using_the_AWS_provider_with_temporary_credentials (test.test_encryption.TestSpec)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/encryption.py\", line 77, in _wrap_encryption_errors\r\n    yield\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/encryption.py\", line 287, in encrypt\r\n    encrypted_cmd = self._auto_encrypter.encrypt(database, encoded_cmd)\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/pymongocrypt/auto_encrypter.py\", line 44, in encrypt\r\n    return run_state_machine(ctx, self.callback)\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/pymongocrypt/state_machine.py\", line 150, in run_state_machine\r\n    callback.kms_request(kms_ctx)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/encryption.py\", line 133, in kms_request\r\n    kms_context.feed(data)\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/pymongocrypt/mongocrypt.py\", line 533, in feed\r\n    self.__raise_from_status()\r\n  File \"/Users/shane/pymongo-pycharm-3.8/lib/python3.8/site-packages/pymongocrypt/mongocrypt.py\", line 542, in __raise_from_status\r\n    raise exc\r\npymongocrypt.errors.MongoCryptError: Error in KMS response 'The security token included in the request is invalid.'. HTTP status=400\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 485, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 485, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_encryption.py\", line 572, in run_scenario\r\n    self.run_scenario(scenario_def, test)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 548, in run_scenario\r\n    self.run_test_ops(sessions, collection, test)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 454, in run_test_ops\r\n    self.run_operations(sessions, collection, test['operations'])\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 365, in run_operations\r\n    self._run_op(sessions, collection, op, in_with_transaction)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 355, in _run_op\r\n    result = self.run_operation(sessions, collection, op.copy())\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 300, in run_operation\r\n    result = cmd(**dict(arguments))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/collection.py\", line 642, in insert_one\r\n    self._insert_one(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/collection.py\", line 592, in _insert_one\r\n    self.__database.client._retryable_write(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1411, in _retryable_write\r\n    return self._retry_with_session(retryable, func, s, None)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1297, in _retry_with_session\r\n    return self._retry_internal(retryable, func, session, bulk)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1329, in _retry_internal\r\n    return func(session, sock_info, retryable)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/collection.py\", line 580, in _insert_command\r\n    result = sock_info.command(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 690, in command\r\n    self._raise_connection_failure(error)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 674, in command\r\n    return command(self, dbname, spec, slave_ok,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/network.py\", line 110, in command\r\n    spec = orig = client._encrypter.encrypt(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/encryption.py\", line 293, in encrypt\r\n    return encrypt_cmd\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py\", line 131, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/encryption.py\", line 83, in _wrap_encryption_errors\r\n    raise EncryptionError(exc)\r\npymongo.errors.EncryptionError: Error in KMS response 'The security token included in the request is invalid.'. HTTP status=400\r\n```\r\nI think it would make sense to have pymongo check the pymongocrypt version and raise an informative error in this case. \r\n\r\nEdit: I opened https://jira.mongodb.org/browse/PYTHON-2583 to decide what to do here. I'm not planning to change it in this PR though."
    ],
    "commit_messages": [
      "PYTHON-2539 Test AWS temporary credentials via \"sessionToken\" for CSFLE (#569)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8144ee515ce6a4b276",
    "number": 568,
    "body": "This change resolves: PYTHON-1314  and PYTHON-1601",
    "head_branch": "PYTHON-1314",
    "is_a_fork": true,
    "comments": [
      "I opened https://jira.mongodb.org/browse/PYTHON-2585 for the follow up work."
    ],
    "commit_messages": [
      "PYTHON-1314 Remove Database.authenticate and Database.logout (#568)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8244ee515ce6a4b277",
    "number": 567,
    "body": "Note that cert_reqs=None and cert_reqs=CERT_REQUIRED are identical\r\nso this does not change any behavior.",
    "head_branch": "PYTHON-2578-4.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2578 Improve clarity of TLS settings for KMS requests (#567)\n\nNote that cert_reqs=None and cert_reqs=CERT_REQUIRED are identical\r\nso this does not change any behavior."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8344ee515ce6a4b278",
    "number": 566,
    "body": "Minor cleanup I noticed while doing the 3.11.3 release.",
    "head_branch": "PYTHON-1974",
    "is_a_fork": true,
    "comments": [
      "Note the task is failing due to an unrelated issue (https://jira.mongodb.org/browse/PYTHON-2541) but it's fine to merge this change as is.",
      "This seems fine since it's a change for master. What about building wheels for PyMongo 3.x?",
      "Not sure I understand the question. This change can't be backported to since 3.x still supports Python 3.4.\r\n\r\nAlthough the manylinux release task is failing on evergreen it didn't hold up the 3.11.3 release. Instead, I ran the manylinux build script locally on my own machine and it worked fine. It's as simple as this:\r\n```\r\n./.evergreen/build-manylinux.sh\r\n```\r\n",
      "Great. I guess my question was will we be able to ship wheels for PyMongo 3.x and Python 3.4 in the future. Sounds like the answer is yes."
    ],
    "commit_messages": [
      "PYTHON-1974 Remove manylinux containers only needed for 3.4 (#566)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8444ee515ce6a4b279",
    "number": 565,
    "body": "Tested here: https://spruce.mongodb.com/version/601aeb54d1fe0705740e9e26\r\n\r\nDepends on: https://github.com/mongodb-labs/drivers-evergreen-tools/pull/139",
    "head_branch": "PYTHON-2537",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2537 Fix benchmark when using Python 3 (#565)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8544ee515ce6a4b27a",
    "number": 564,
    "body": "",
    "head_branch": "PYTHON-2540",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2540 Stop testing resetError on 4.9+ (#564)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8644ee515ce6a4b27b",
    "number": 563,
    "body": "",
    "head_branch": "BUMP-3.11.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.11.3 (#563)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fca8744ee515ce6a4b27c",
    "number": 562,
    "body": "Tested here: https://evergreen.mongodb.com/version/6011be3f57e85a32cbe17946",
    "head_branch": "PYTHON-2445",
    "is_a_fork": true,
    "comments": [
      "It was all @emadum!"
    ],
    "commit_messages": [
      "PYTHON-2445 PYTHON-2530 Fix MONGODB-AWS auth tests (#562)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8744ee515ce6a4b27d",
    "number": 561,
    "body": "",
    "head_branch": "PYTHON-1312",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1312 Remove Database.add_user and Database.remove_user (#561)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8844ee515ce6a4b27e",
    "number": 560,
    "body": "",
    "head_branch": "PYTHON-1326",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1326 Remove the \"useCursor\" aggregate option (#560)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8944ee515ce6a4b27f",
    "number": 559,
    "body": "",
    "head_branch": "PYTHON-1323",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1323 Removed Collection.group (#559)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8a44ee515ce6a4b280",
    "number": 558,
    "body": "",
    "head_branch": "PYTHON-2524",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2524 Fix documentation for allow_disk_use/session in find/Cursor (#558)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8b44ee515ce6a4b281",
    "number": 557,
    "body": "",
    "head_branch": "PYTHON-1307",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1307 Remove SONManipulator APIs (#557)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8c44ee515ce6a4b282",
    "number": 556,
    "body": "Remove save, insert, update, remove, and find_and_modify.",
    "head_branch": "PYTHON-1320",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1320 Remove legacy CRUD methods (#556)\n\nRemove save, insert, update, remove, and find_and_modify.\r\nRemove tools/benchmark.py"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8d44ee515ce6a4b283",
    "number": 555,
    "body": "",
    "head_branch": "PYTHON-1319",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1319 Remove Collection.ensure_index and reindex (#555)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8d44ee515ce6a4b284",
    "number": 554,
    "body": "Remove Database.error, Database.last_status, Database.previous_error,\r\nand Database.reset_error_history.",
    "head_branch": "PYTHON-1309",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1309 Remove helpers for getLastError (#554)\n\nRemove Database.error, Database.last_status, Database.previous_error,\r\nand Database.reset_error_history."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8e44ee515ce6a4b285",
    "number": 553,
    "body": "Tested here: https://spruce.mongodb.com/version/6008a8549ccd4e67026a6d85/tasks",
    "head_branch": "PYTHON-2516",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2516 Fix coverage task and C extension check (#553)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca8f44ee515ce6a4b286",
    "number": 552,
    "body": "",
    "head_branch": "PYTHON-1321",
    "is_a_fork": true,
    "comments": [
      "Rebased to fix a merge conflict in the docs."
    ],
    "commit_messages": [
      "PYTHON-1321 Remove MongoReplicaSetClient (#552)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9044ee515ce6a4b287",
    "number": 551,
    "body": "",
    "head_branch": "PYTHON-1587",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1587 Remove MongoClient.database_names and Database.collection_names (#551)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9144ee515ce6a4b288",
    "number": 550,
    "body": "This change implements:\r\n- PYTHON-1301 Remove support for cursor managers\r\n- PYTHON-1302 Remove MongoClient.kill_cursors\r\n- PYTHON-1588 Remove MongoClient.close_cursor",
    "head_branch": "PYTHON-1588-give-credit",
    "is_a_fork": true,
    "comments": [
      "The following test is failing on MongoDB 4.0+:\r\n```\r\n [2021/01/15 23:50:13.857] ERROR [2.146s]: test_break_resume_token (test_custom_types.TestClusterChangeStreamsWCustomTypes)\r\n [2021/01/15 23:50:13.857] ----------------------------------------------------------------------\r\n [2021/01/15 23:50:13.857] Traceback (most recent call last):\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/test/test_custom_types.py\", line 826, in test_break_resume_token\r\n [2021/01/15 23:50:13.857]     self.insert_and_check(change_stream, docs[0], docs[0])\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/test/test_custom_types.py\", line 751, in insert_and_check\r\n [2021/01/15 23:50:13.857]     self.input_target.insert_one(insert_doc)\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/collection.py\", line 701, in insert_one\r\n [2021/01/15 23:50:13.857]     self._insert(document,\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/collection.py\", line 616, in _insert\r\n [2021/01/15 23:50:13.857]     return self._insert_one(\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/collection.py\", line 605, in _insert_one\r\n [2021/01/15 23:50:13.857]     self.__database.client._retryable_write(\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/mongo_client.py\", line 1478, in _retryable_write\r\n [2021/01/15 23:50:13.857]     return self._retry_with_session(retryable, func, s, None)\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/mongo_client.py\", line 1364, in _retry_with_session\r\n [2021/01/15 23:50:13.857]     return self._retry_internal(retryable, func, session, bulk)\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/mongo_client.py\", line 1396, in _retry_internal\r\n [2021/01/15 23:50:13.857]     return func(session, sock_info, retryable)\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/collection.py\", line 603, in _insert_command\r\n [2021/01/15 23:50:13.857]     _check_write_command_response(result)\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/helpers.py\", line 226, in _check_write_command_response\r\n [2021/01/15 23:50:13.857]     _raise_last_write_error(write_errors)\r\n [2021/01/15 23:50:13.857]   File \"/data/mci/07146fdd00f40c8dc2f3160548b8d5c8/src/pymongo/helpers.py\", line 207, in _raise_last_write_error\r\n [2021/01/15 23:50:13.857]     raise DuplicateKeyError(error.get(\"errmsg\"), 11000, error)\r\n [2021/01/15 23:50:13.857] pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: pymongo_test.test index: _id_ dup key: { _id: 1 }, full error: {'index': 0, 'code': 11000, 'codeName': 'DuplicateKey', 'errmsg': 'E11000 duplicate key error collection: pymongo_test.test index: _id_ dup key: { _id: 1 }'}\r\n ```\r\n \r\n Not really sure why yet. Perhaps some tests are mistakenly not dropping the collection/database?",
      "Rebased to fix merge conflict in the docs."
    ],
    "commit_messages": [
      "PYTHON-1301/PYTHON-1302/PYTHON-1588 Remove deprecated cursor manager APIs (#550)\n\nRemove MongoClient.set_cursor_manager and pymongo.cursor_manager.\r\nRemove MongoClient.kill_cursors and MongoClient.close_cursor.\r\n\r\nCo-authored-by: kAldown <kaldownb@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9244ee515ce6a4b289",
    "number": 549,
    "body": "Fixes https://jira.mongodb.org/browse/PYTHON-2507.",
    "head_branch": "PYTHON-2507",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2507 Future proof pip version upgrade for test suite (#549)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9344ee515ce6a4b28a",
    "number": 548,
    "body": "This change also removes `git_tag_only:true` so that we can test our changes to the release build process without pushing a test-only tag and without manually editing the config. I haven't changed the evg project config so when a tag is pushed we'll have the same behavior as before (the release task will run automatically in a new build).\r\n\r\nThis change also stops building `.egg` files (https://jira.mongodb.org/browse/PYTHON-1300).",
    "head_branch": "PYTHON-2502",
    "is_a_fork": true,
    "comments": [
      "Updated to fix this pip error on macos Python 3.4:\r\n```\r\n [2021/01/15 21:02:45.003] + python -m pip install --upgrade pip setuptools wheel\r\n [2021/01/15 21:02:45.680] removing build/bdist.macosx-10.6-intel/wheel\r\n [2021/01/15 21:02:45.680] Collecting pip\r\n [2021/01/15 21:02:45.680]   Downloading https://artifactory.corp.mongodb.com/artifactory/api/pypi/pypi/packages/54/eb/4a3642e971f404d69d4f6fa3885559d67562801b99d7592487f1ecc4e017/pip-20.3.3-py2.py3-none-any.whl (1.5MB)\r\n [2021/01/15 21:02:46.994] Collecting setuptools\r\n [2021/01/15 21:02:46.994]   Downloading https://artifactory.corp.mongodb.com/artifactory/api/pypi/pypi/packages/aa/d4/0089d680a610c7b5afda26c1ae588eb363b9050ccf5f33a8c2d1164210f3/setuptools-51.1.2-py3-none-any.whl (784kB)\r\n [2021/01/15 21:02:47.309] Collecting wheel\r\n [2021/01/15 21:02:47.309]   Downloading https://artifactory.corp.mongodb.com/artifactory/api/pypi/pypi/packages/65/63/39d04c74222770ed1589c0eaba06c05891801219272420b40311cd60c880/wheel-0.36.2-py2.py3-none-any.whl\r\n [2021/01/15 21:02:47.316] Installing collected packages: pip, setuptools, wheel\r\n [2021/01/15 21:02:47.316]   Found existing installation: pip 7.1.2\r\n [2021/01/15 21:02:48.192]     Uninstalling pip-7.1.2:\r\n [2021/01/15 21:02:48.192]       Successfully uninstalled pip-7.1.2\r\n [2021/01/15 21:02:48.192]   Found existing installation: setuptools 18.2\r\n [2021/01/15 21:02:48.224]     Uninstalling setuptools-18.2:\r\n [2021/01/15 21:02:48.224]       Successfully uninstalled setuptools-18.2\r\n [2021/01/15 21:02:48.656] + PYTHON=python\r\n [2021/01/15 21:02:48.656] + python -m pip install --upgrade dist/pymongo-4.0.dev0-cp34-cp34m-macosx_10_6_intel.whl\r\n [2021/01/15 21:02:48.870] Traceback (most recent call last):\r\n [2021/01/15 21:02:48.870]   File \"/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/runpy.py\", line 170, in _run_module_as_main\r\n [2021/01/15 21:02:48.870]     \"__main__\", mod_spec)\r\n [2021/01/15 21:02:48.870]   File \"/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/runpy.py\", line 85, in _run_code\r\n [2021/01/15 21:02:48.870]     exec(code, run_globals)\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/__main__.py\", line 23, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._internal.cli.main import main as _main  # isort:skip # noqa\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_internal/cli/main.py\", line 10, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._internal.cli.autocompletion import autocomplete\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_internal/cli/autocompletion.py\", line 9, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._internal.cli.main_parser import create_main_parser\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_internal/cli/main_parser.py\", line 7, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._internal.cli import cmdoptions\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_internal/cli/cmdoptions.py\", line 25, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._internal.cli.progress_bars import BAR_TYPES\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_internal/cli/progress_bars.py\", line 12, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._internal.utils.logging import get_indentation\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_internal/utils/logging.py\", line 18, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._internal.utils.misc import ensure_dir\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_internal/utils/misc.py\", line 21, in <module>\r\n [2021/01/15 21:02:48.870]     from pip._vendor import pkg_resources\r\n [2021/01/15 21:02:48.870]   File \"/data/mci/0c5156e5e22d35c8625f347a89522fa1/src/venvtestinstall/lib/python3.4/site-packages/pip/_vendor/pkg_resources/__init__.py\", line 92, in <module>\r\n [2021/01/15 21:02:48.870]     raise RuntimeError(\"Python 3.5 or later is required\")\r\n [2021/01/15 21:02:48.870] RuntimeError: Python 3.5 or later is required\r\n [2021/01/15 21:02:48.884] Successfully installed pip-20.3.3 setuptools-51.1.2 wheel-0.36.2\r\n ```\r\n The problem there is that pip is so old it happily installs a version which doesn't support 3.4 anymore."
    ],
    "commit_messages": [
      "PYTHON-2502 Remove Python 2.7 from release scripts (#548)\n\nPYTHON-1300 Stop shipping .egg files.\r\nPYTHON-2507 Future proof pip version upgrade."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9444ee515ce6a4b28b",
    "number": 547,
    "body": "",
    "head_branch": "PYTHON-1592",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1592 Remove Collection.parallel_scan (#547)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9444ee515ce6a4b28c",
    "number": 546,
    "body": "",
    "head_branch": "PYTHON-2310",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2310 Remove MongoClient.fsync, unlock, and is_locked (#546)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9544ee515ce6a4b28d",
    "number": 545,
    "body": "This change:\r\n- adds testing against a server started with acceptAPIVersion2.\r\n- skips the failing $listLocalSessions test related to DRIVERS-1505.\r\n- resyncs the spec test added in DRIVERS-1504.",
    "head_branch": "PYTHON-2482",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2482 Test Versioned API with a server started with acceptAPIVersion2 (#545)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9644ee515ce6a4b28e",
    "number": 544,
    "body": "Very small PR to adjust Shane's change to the release checklist - instead of the DOCS project, the docs team would prefer we file to DOCSP (private by default). My fault for a non-specific Jira ticket!",
    "head_branch": "PYTHON-2455-edit",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "PYTHON-2455 Change DOCS to DOCSP and replace example link accordingly (#544)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9744ee515ce6a4b28f",
    "number": 543,
    "body": "",
    "head_branch": "PYTHON-2489",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2489 Fix \"no server\" test suite, fix unified test runCommand (#543)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9844ee515ce6a4b290",
    "number": 542,
    "body": "Depends on https://github.com/mongodb/mongo-python-driver/pull/540.",
    "head_branch": "PYTHON-1316",
    "is_a_fork": true,
    "comments": [
      "> Does this not count as a removed feature with no migration path for MongoDB 4.2+? Should we add a line or two addressing this to that section?\r\n\r\nI didn't really think it was a good fit for that category because `eval` will not work on MongoDB 4.2+ even on PyMongo 3.x.\r\n\r\nEdit: On second thought you have a good point. I moved the whole section to \"Removed features with no migration path\". Either way is fine with me."
    ],
    "commit_messages": [
      "PYTHON-1316 Remove eval, system_js, and SystemJS (#542)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9944ee515ce6a4b291",
    "number": 541,
    "body": "",
    "head_branch": "PYTHON-2455",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2455 Add DOCS ticket step to release checklist (#541)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9a44ee515ce6a4b292",
    "number": 540,
    "body": "Most of the verbiage I copied from migrate-to-pymongo3.rst. Going forward we should update this guide whenever we make a breaking change in 4.0.",
    "head_branch": "PYTHON-2388",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2388 Begin PyMongo 4.0 migration guide (#540)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9a44ee515ce6a4b293",
    "number": 539,
    "body": "### TO DO\r\n\r\n- [x] Figure out how to handle the `TopologyOpenedEvents` we are seeing from the `mongocryptd` client\r\n- [x] Investigate if resyncing spec tests is required",
    "head_branch": "PYTHON-2472/fle-deadlock-fix",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey this is ready for review.",
      "Besides the problem deepcopy() it looks like the previous patch always times out on 4.4+ replica sets:\r\n```\r\n [2021/02/19 20:59:35.356] test_spec_malformedCiphertext_Empty_data (test_encryption.TestSpec) ... ok\r\n [2021/02/19 20:59:48.453] test_spec_malformedCiphertext_Malformed_data (test_encryption.TestSpec) ... ok\r\n [2021/02/19 20:59:56.635] test_spec_malformedCiphertext_Wrong_subtype (test_encryption.TestSpec) ... ok\r\n [2021/02/19 20:59:56.845] test_spec_maxWireVersion_operation_fails_with_maxWireVersion_<_8 (test_encryption.TestSpec) ... skipped 'runOn not satisfied'\r\n [2021/02/19 21:00:08.316] test_spec_missingKey_Insert_with_encryption_on_a_missing_key (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:00:35.546] test_spec_replaceOne_replaceOne_with_encryption (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:00:46.500] test_spec_types_type=array (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:01:25.698] test_spec_types_type=binData (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:01:42.085] test_spec_types_type=bool (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:02:40.556] test_spec_types_type=date (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:03:09.064] test_spec_types_type=decimal (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:03:34.996] test_spec_types_type=double (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:04:44.590] test_spec_types_type=int (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:05:53.713] test_spec_types_type=javascript (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:06:53.549] test_spec_types_type=javascriptWithScope (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:07:43.465] test_spec_types_type=maxKey (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:08:35.462] test_spec_types_type=minKey (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:10:37.913] test_spec_types_type=null (test_encryption.TestSpec) ... ok\r\n [2021/02/19 21:13:24.095] test_spec_types_type=object (test_encryption.TestSpec) ... FAIL\r\n [2021/02/19 21:16:56.696] test_spec_types_type=objectId (test_encryption.TestSpec) ... ERROR\r\n [2021/02/19 21:19:56.470] test_spec_types_type=regex (test_encryption.TestSpec) ... ERROR\r\n [2021/02/19 21:19:58.576] test_spec_types_type=symbol (test_encryption.TestSpec) ... skipped 'PyMongo does not support the symbol type'\r\n [2021/02/19 21:22:40.842] writing manifest file 'pymongo.egg-info/SOURCES.txt'\r\n [2021/02/19 21:22:40.842] running build_ext\r\n [2021/02/19 21:22:40.842] Command stopped early: context canceled\r\n [2021/02/19 21:22:40.879] test_spec_types_type=timestamp (test_encryption.TestSpec) ...\r\n [2021/02/19 21:22:40.881] Running task-timeout commands.\r\n [2021/02/19 21:22:40.881] Running command 'shell.exec' (step 1 of 1)\r\n```\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_requires_openssl_102_plus_test_encryption__platform~ubuntu_16.04_auth_ssl~noauth_nossl_python_version~3.9_encryption~encryption_test_latest_replica_set_patch_99a4f2845017fe53a3ce9f820d85d2ac1c9de18d_603024595623436746605b6b_21_02_19_20_49_30\r\n\r\n\r\nI'm not sure why this change would cause the tests to run more slowly on 4.4+ replica-set specifically. We'll need to figure that out before merging. Perhaps it has something to do with the 4.4 streaming SDAM protocol?\r\n\r\nEdit: I suspect that this might have been a symptom of never closing the `_internal_client`. Now that we close the client these timeout issue may going away.",
      "Also, please ignore the fact that I closed the PR. That was an accident.",
      "It's alive!"
    ],
    "commit_messages": [
      "PYTHON-2472 add a metadataClient for CSFLE (#539)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9b44ee515ce6a4b294",
    "number": 538,
    "body": "",
    "head_branch": "PYTHON-1878",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1878 Add mongodb+srv URIs to Atlas Connectivity tests (#538)\n\nEnable xtrace with silent:false to make test failures easier to diagnose."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9c44ee515ce6a4b295",
    "number": 537,
    "body": "",
    "head_branch": "PYTHON-2474-real-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2474 Fix non-disabled client_knobs bug in Data Lake tests (#537)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9d44ee515ce6a4b296",
    "number": 536,
    "body": "This PR adds support for the MongoDB Versioned API version 1: https://github.com/mongodb/specifications/blob/784857f/source/versioned-api/versioned-api.rst\r\n\r\nTODO: \r\n- [x] Add support for the `server_api` MongoClient option.\r\n- [x] Send api version command arguments with all commands except getMore and commands that are continuing a multi-document transaction.\r\n- [x] Implement spec tests via the unified format. (Tested locally so far with a server started with `mongod --setParameter \"requireApiVersion=1\"`). See: https://github.com/mongodb/specifications/tree/784857f548747ee6f894a5b6f7b6e5bb89103709/source/versioned-api/tests\r\n- [x] Add documentation page for pymongo.server_api.",
    "head_branch": "PYTHON-2453",
    "is_a_fork": true,
    "comments": [
      "Now that these changes were approved I'm going to rebase to fix the merge conflicts."
    ],
    "commit_messages": [
      "PYTHON-2453 Add MongoDB Versioned API (#536)\n\nAdd pymongo.server_api.ServerApi and the MongoClient server_api option.\r\nSupport Unified Test Format version 1.1 (serverParameters in\r\nrunOnRequirements)\r\nSkip dropRole tests due to SERVER-53499."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9e44ee515ce6a4b297",
    "number": 535,
    "body": "See https://jira.mongodb.org/browse/PYTHON-2439 for details.",
    "head_branch": "test-3.6-server4.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fca9f44ee515ce6a4b298",
    "number": 534,
    "body": "This change does the following:\r\n- PYTHON-2366  Adds Python 3.9 testing for OCSP+FLE.\r\n- PYTHON-2449 Fixes PyPy testing by migrating from RHEL 6.2/Ubuntu 16 to Debian 9.2. The former have OpenSSL 1.0.1/1.0.2 while debian has 1.1.0. This works around the pyopenssl connect errors described in https://github.com/pyca/pyopenssl/issues/981 .\r\n- PYTHON-2449 Fixes Windows test setup failures caused by outdated pip versions being unable to install cryptography wheels. The fix is to upgrade pip.\r\n\r\n\r\nI'm planning to backport these changes which is why I had to change PyPy 2 testing. \r\n\r\nTested here: https://evergreen.mongodb.com/version/5fd929ef57e85a0b36c0ec64",
    "head_branch": "PYTHON-2366-debian-for-pypy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2366 Test OCSP+FLE with Python 3.9 (#534)\n\nPYTHON-2449 Move all pypy cryptography/pyopenssl testing to Debian 9.2 with OpenSSL 1.1.0f\r\nPYTHON-2449 Fix Windows cryptography installation by upgrading pip and using --prefer-binary"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa044ee515ce6a4b299",
    "number": 533,
    "body": "…able.",
    "head_branch": "hashable",
    "is_a_fork": true,
    "comments": [
      "Thank you for your contribution @pcorpet !"
    ],
    "commit_messages": [
      "PYTHON-2466 Make pymongo client, database and collection objects hashable. (#533)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa144ee515ce6a4b29a",
    "number": 532,
    "body": "…ntation (Shouldn't be too confusing.. doesn't stray from current behaviour)\r\n\r\nAdded in canonical_uuid option to json_options.  This was the only way I could think to not break current API globally but also allow for this option to exist.\r\n\r\n```python\r\n>>> test_uuid = uuid.uuid1()\r\n>>> test_uuid\r\nUUID('e387e6cc-3b45-11eb-9ec8-00163e0987ed')\r\n>>> JSON_OPTIONS = bson.json_util.DEFAULT_JSON_OPTIONS.with_options(canonical_uuid=True)\r\n>>> payload = bson.json_util.dumps({'uuid': test_uuid}, json_options=JSON_OPTIONS)\r\n>>> payload\r\n'{\"uuid\": {\"$uuid\": \"e387e6cc-3b45-11eb-9ec8-00163e0987ed\"}}'\r\n>>> bson.json_util.loads(payload)\r\n{'uuid': UUID('e387e6cc-3b45-11eb-9ec8-00163e0987ed')}\r\n>>> \r\n```",
    "head_branch": "fix-bson-uuid-legacy-option",
    "is_a_fork": true,
    "comments": [
      "Thanks for the pull! If I understand correctly, the feature added here is that setting `canonical_uuid=True` changes the $uuid encoding output to include the dashes (`-`):\r\n```python\r\n>>> bson.json_util.dumps({'uuid': test_uuid})\r\n'{\"uuid\": {\"$uuid\": \"e387e6cc3b4511eb9ec800163e0987ed\"}}'\r\n>>> bson.json_util.dumps({'uuid': test_uuid}, json_options=canonical_uuid_opts)\r\n'{\"uuid\": {\"$uuid\": \"e387e6cc-3b45-11eb-9ec8-00163e0987ed\"}}'\r\n```\r\n\r\nCan you explain the motivation for this change?",
      "The motivation for the change is to provide consistency between MongoDB drivers.  The MongoDB bson.js requires dashes (frontend related code) and I've put in a request to make that more flexible according to the UUID encoding specifications put together by the BSON team (Needs to support dashes, needs to support hex, needs to support URN) and there needs to be a way to set a preference on what is exported.  The patch I presented does not support URN but that would be an easy change and an ENUM or preference class might be best going forward.\r\n\r\nWhen serializing EJSON data between BSON SDKs a lot of recursive replacement of values related to $uuid keys is required for relaxed encodings.  This includes using hex-to-uuid and uuid-to-hex JS modules in the case of working between Python and Javascript.\r\n\r\nOn top of that.. the UUID value as hex is not immediately useful in situations where URLs or content expects a canonical UUID.  For instance.. sending EJSON encoded data to a front end where a route is developed at /account/profile/:uuid where dashes are required.. being given only a hex representation requires extra fiddling that could be avoided if the following specification were more closely followed for all MongoDB/BSON drivers.\r\n\r\nAlso.. the UUID default representation on the CLI is canonical UUIDs (dashed)\r\n\r\nSee: https://github.com/mongodb/specifications/blob/master/source/extended-json.rst#special-rules-for-parsing-uuid-fields\r\n\r\nAlso see: \r\n\r\nhttps://github.com/mongodb/js-bson/blob/master/src/uuid.ts\r\n\r\nOverall I feel as though EJSON needs to be reviewed between all drivers and a common options component implemented for handling serialization.  There's a lot of gotchas with this specific asset.",
      "I think it would be a breaking change to directly implement the specification in pymongo bson.  See: the referred document here as well for more text on how the `STANDARD` UUID output representation expected of EJSON is to be canonical. \r\n\r\nhttps://github.com/mongodb/specifications/blob/master/source/uuid.rst#explicit-encoding-and-decoding",
      "> Overall I feel as though EJSON needs to be reviewed between all drivers and a common options component implemented for handling serialization. There's a lot of gotchas with this specific asset.\r\n\r\nWe have addressed compatibility between drivers via the Canonical Extended JSON output format. If you need to serialize BSON to JSON in one language and deserialize it in another then the best option is to use `CANONICAL_JSON_OPTIONS` (or any other `JSONOptions` with `json_mode=JSONMode.CANONICAL`), like this:\r\n```python\r\n>>> from bson import json_util\r\n>>> test_uuid = UUID('e387e6cc-3b45-11eb-9ec8-00163e0987ed')\r\n>>> json_util.dumps({'uuid': test_uuid}, json_options=json_util.CANONICAL_JSON_OPTIONS)\r\n'{\"uuid\": {\"$binary\": {\"base64\": \"44fmzDtFEeueyAAWPgmH7Q==\", \"subType\": \"03\"}}}'\r\n```\r\n\r\nNote that the CANONICAL format sacrifices human readability in favor of improved compatibility between drivers and improved type preservation.\r\n\r\n> I think it would be a breaking change to directly implement the specification in pymongo bson.\r\n\r\nWe have already implemented both the UUID and Extended JSON specifications in PyMongo.",
      "Indeed.  I currently use canonical JSON mode in order to avoid potential changes of behavior due to what I have seen in relaxed mode.  Pymongo BSON does indeed implement the specification.. however it may be erroneous in consistency as a non binary type between drivers.",
      "Can you explain what the problem is with using canonical JSON mode to exchange data from Python to JS? It sounds like the UUID type is hard to work with in JS? If so, [NODE-1046](https://jira.mongodb.org/browse/NODE-1046) might be related.",
      "When working with hex string representations (via $uuid keys) as well as with canonical mode (more consistent and preferred) a conversion from value to dashed canonical UUID string is required in order to form a simple string representation of a UUID.  This could be avoided by allowing for a preferred representation in relaxed mode when $uuid is used rather than $binary.\r\n\r\nAs it stands.. in python when exporting content containing UUIDs I'm recursing through the sent object and doing replacements in order to work around unnecessary processing in frontend code.  Honestly.. If I wasn't using UUIDs as objects in order to deal with some functions that require UUID classes.. I would just use strings of my own choosing.",
      "Ah okay I understand the motivation now. Thanks for explaining in detail!\r\n\r\nThis does jog my memory that when we adding support for *parsing* `{\"$uuid\": \"e387e6cc-3b45-11eb-9ec8-00163e0987ed\"}` we also discussed whether drivers should support *generating* that format in Relaxed mode. Relaxed mode seems like a good fit because it prefers human readability, however you are correct that it would be a backwards breaking change (at least to implement by default) so it would require a new knob/toggle/option like you have introduced in this PR. We rejected this idea because we generally prefer not to add knobs.\r\n\r\nOne problem I have here is that it seems like even with `canonical_uuid=True`, your JS app will end up with the same `Binary` object after decoding the extended JSON. In python we decode the following inputs to the same UUID:\r\n```python\r\n>>> json_util.loads('{\"uuid\": {\"$uuid\": \"e387e6cc-3b45-11eb-9ec8-00163e0987ed\"}}')\r\n{'uuid': UUID('e387e6cc-3b45-11eb-9ec8-00163e0987ed')}\r\n>>> json_util.loads('{\"uuid\": {\"$binary\": {\"base64\": \"44fmzDtFEeueyAAWPgmH7Q==\", \"subType\": \"03\"}}}')\r\n{'uuid': UUID('e387e6cc-3b45-11eb-9ec8-00163e0987ed')}\r\n```\r\n\r\nIt seems odd to add a knob in pymongo to workaround a likely temporary pain point in the JS API. Right now I am leaning towards not accepting this PR but I will discuss it with the rest of the Python and Node teams first to get their take. ",
      "In JS it would be a string as native JSON.  I won’t need BSON specifically\r\nto deal with UUID in areas of code that aren't BSON aware.  This includes\r\n3rd party libs.  This includes libs where parameter paths in dot notation\r\nare used to send identifiers to logging and authorization providers\r\nexpecting a dashed UUID.\r\n\r\nIn my frontend code I can use the JSON and BSON as a preference depending\r\non what I need.  Being able to use dashed UUIDs in frontend route\r\ngeneration directly from a stringy source greatly simplifies things.\r\n\r\nCurrently I am simply using canonical EJSON and doing all the conversations\r\nand then adding stringy UUIDs to the EJSON object in Python in a\r\nprerendered state for other tools outside of my control to use.",
      "Tracked in https://jira.mongodb.org/browse/PYTHON-2467",
      "Closing this because the underlying issue is a problem in the node driver (https://jira.mongodb.org/browse/NODE-2962). Instead of adding a new API in pymongo to workaround this issue (which we would need to support for a long time) we will simply fix the issue in the Node driver itself.\r\n\r\nAlso, [as mentioned above](https://github.com/mongodb/mongo-python-driver/pull/532#issuecomment-744653933) there is already a workaround for this problem. You can use  `JSONMode.CANONICAL` or `JSONMode.RELAXED` to output UUIDs in the `\"$binary\"` format. `\"$binary\"` is parsable by the node driver:\r\n```python\r\n>>> from bson import json_util\r\n>>> test_uuid = UUID('e387e6cc-3b45-11eb-9ec8-00163e0987ed')\r\n>>> json_util.dumps({'uuid': test_uuid}, json_options=json_util.CANONICAL_JSON_OPTIONS)\r\n'{\"uuid\": {\"$binary\": {\"base64\": \"44fmzDtFEeueyAAWPgmH7Q==\", \"subType\": \"03\"}}}'\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa244ee515ce6a4b29b",
    "number": 531,
    "body": "PYTHON-2462 Avoid connection storms: implement pool PAUSED state\r\n\r\nSignificant behavior changes:\r\n- Mark server unknown and clear the pool when background connections fail.\r\n- Eagerly evict threads from the wait queue when pool is paused. Evicted threads will raise the following error: `AutoReconnect('localhost:27017: connection pool paused')`\r\n- Introduces `PoolReadyEvent` and `ConnectionPoolListener.pool_ready()` which is published when a PAUSED pool is marked READY.\r\n\r\nSignificant internal code changes:\r\n- Remove `pymongo.thread_util` which is no longer used.\r\n- Replaces the socket_semaphore which enforces maxPoolSize and waitQueueMultiple with a condition variable (named \"size_cond\"). A condition variable is now required because drivers are required to eagerly evict threads from the wait queue when pool is paused. This is not possible with a semaphore. To do this we need to add a few counters to track the # waiters and # of requests.\r\n\r\n  - Introduces \"pool.requests\" which counts the number of concurrent requests being serviced by the pool. \"requests\" is used to enforce maxPoolSize.\r\n  - Introduces \"pool.waiters\" which counts the number of concurrent requests in the wait queue.\r\n  - Introduces another condition variable called \"size_cond\". size_cond enforce maxPoolSize by acting as a barrier which only allows maxPoolSize threads past.\r\n  - When the pool is cleared, threads in the wait queue (waiting on size_cond or max_connecting_cond) are notfied and the thread raises `AutoReconnect('localhost:27017: connection pool paused')`.\r\n\r\n\r\nSignificant test changes:\r\n- CMAP unit tests should not use real monitors. The real monitor class calls pool.ready() which messes up the test assertions.\r\n- Refactored MockPool classes to clean up some duplication.\r\n",
    "head_branch": "PYTHON-2462",
    "is_a_fork": true,
    "comments": [
      "@prashantmital, some tests are failing on latest but this is still ready for your review.",
      "@prashantmital I believe I have addressed all the open comments. This is ready for another look.",
      "Edit: I've opened [SERVER-53624](https://jira.mongodb.org/browse/SERVER-53624). \r\n\r\n> Any idea why that test fails?\r\n\r\nYes, I suspect it's actually a server bug. I'll open a server ticket and skip the test on 4.4>= mongos for now. For future reference here's the test failure:\r\n```\r\n [2020/12/24 00:32:49.790]   test_pool_paused_error_is_retryable (test_cmap.TestCMAP) ... Exception in thread Thread-241:\r\n [2020/12/24 00:32:49.790] Traceback (most recent call last):\r\n [2020/12/24 00:32:49.790]   File \"/opt/python/3.8/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\r\n [2020/12/24 00:32:49.790]     self.run()\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/test/test_cmap.py\", line 480, in run\r\n [2020/12/24 00:32:49.790]     self.collection.insert_one({})\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/collection.py\", line 698, in insert_one\r\n [2020/12/24 00:32:49.790]     self._insert(document,\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/collection.py\", line 613, in _insert\r\n [2020/12/24 00:32:49.790]     return self._insert_one(\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/collection.py\", line 602, in _insert_one\r\n [2020/12/24 00:32:49.790]     self.__database.client._retryable_write(\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/mongo_client.py\", line 1498, in _retryable_write\r\n [2020/12/24 00:32:49.790]     return self._retry_with_session(retryable, func, s, None)\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/mongo_client.py\", line 1384, in _retry_with_session\r\n [2020/12/24 00:32:49.790]     return self._retry_internal(retryable, func, session, bulk)\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/mongo_client.py\", line 1416, in _retry_internal\r\n [2020/12/24 00:32:49.790]     return func(session, sock_info, retryable)\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/collection.py\", line 590, in _insert_command\r\n [2020/12/24 00:32:49.790]     result = sock_info.command(\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/pool.py\", line 732, in command\r\n [2020/12/24 00:32:49.790]     self._raise_connection_failure(error)\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/pool.py\", line 716, in command\r\n [2020/12/24 00:32:49.790]     return command(self, dbname, spec, slave_ok,\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/network.py\", line 159, in command\r\n [2020/12/24 00:32:49.790]     helpers._check_command_response(\r\n [2020/12/24 00:32:49.790]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/pymongo/helpers.py\", line 147, in _check_command_response\r\n [2020/12/24 00:32:49.790]     raise NotMasterError(errmsg, response)\r\n [2020/12/24 00:32:49.790] pymongo.errors.NotMasterError: Failing command due to 'failCommand' failpoint, full error: {'ok': 0.0, 'errmsg': \"Failing command due to 'failCommand' failpoint\", 'code': 91, 'codeName': 'ShutdownInProgress', 'operationTime': Timestamp(1608769963, 1), '$clusterTime': {'clusterTime': Timestamp(1608769963, 1), 'signature': {'hash': b'^:\\x86N\\xb4\\x95\\xff\\xc4\\x8e4\\xe1L\\xff\\xa9o8\\xce\\xed\\xd5\\xe8', 'keyId': 6909613231115862033}}}\r\n \r\n...\r\n\r\n [2020/12/24 00:37:16.698] FAIL [1.524s]: test_pool_paused_error_is_retryable (test_cmap.TestCMAP)\r\n [2020/12/24 00:37:16.698] ----------------------------------------------------------------------\r\n [2020/12/24 00:37:16.698] Traceback (most recent call last):\r\n [2020/12/24 00:37:16.698]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/test/__init__.py\", line 444, in wrap\r\n [2020/12/24 00:37:16.698]     return f(*args, **kwargs)\r\n [2020/12/24 00:37:16.698]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/test/__init__.py\", line 444, in wrap\r\n [2020/12/24 00:37:16.698]     return f(*args, **kwargs)\r\n [2020/12/24 00:37:16.698]   File \"/data/mci/49571bc03478c1c5b20361e0a8ce7426/src/test/test_cmap.py\", line 457, in test_pool_paused_error_is_retryable\r\n [2020/12/24 00:37:16.698]     self.assertTrue(thread.passed)\r\n [2020/12/24 00:37:16.698] AssertionError: False is not true\r\n```",
      "Updated to skip the `test_pool_paused_error_is_retryable` test on 4.4+ until [SERVER-53624](https://jira.mongodb.org/browse/SERVER-53624) is fixed."
    ],
    "commit_messages": [
      "PYTHON-2462 Avoid connection storms: implement pool PAUSED state  (#531)\n\nMark server unknown and clear the pool when background connections fail.\r\nEagerly evict threads from the wait queue when pool is paused. Evicted\r\nthreads will raise the following error:\r\nAutoReconnect('localhost:27017: connection pool paused')\r\nIntroduce PoolClearedEvent and ConnectionPoolListener.pool_ready.\r\n\r\nCMAP spec test changes:\r\n- CMAP unit tests should not use real monitors\r\n- Assert that CMAP threads complete all scheduled operations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa244ee515ce6a4b29c",
    "number": 530,
    "body": "This change will be backported to 3.11 and 3.12 branches",
    "head_branch": "PYTHON-2452/propagate-errorlabels-field-appropriately",
    "is_a_fork": true,
    "comments": [
      "Updated the test to account for https://jira.mongodb.org/browse/SERVER-39292 in MongoDB 4.0.x",
      "Still waiting on the two questions on expected server behavior and RawBSONDocument.",
      "`RawBSONDocument` will not break `db.command` because we set `check_command_response` to `False` \r\n [here](https://github.com/mongodb/mongo-python-driver/blob/61232b7f21d8f0ad9023c8ef0912017d062fafc0/pymongo/database.py#L738) which gets passed down [here](https://github.com/mongodb/mongo-python-driver/blob/61232b7f21d8f0ad9023c8ef0912017d062fafc0/pymongo/helpers.py#L105) and ensures that we never check for the `writeConcernError` document within responses to `db.command`. I also quickly tested this by setting a failpoint that returned `writeConcernError` on `insert` and then triggering it via `db.command`.\r\n\r\nAlso, I confirmed that the server only returns `errorLabels` as a top-level field. See the HELP ticket linked to the JIRA ticket for details.",
      "Hmm, thanks for doing that investigation.\r\n\r\n> I also quickly tested this by setting a failpoint that returned writeConcernError on insert and then triggering it via db.command.\r\n\r\nCan you add this as a test so that we don't regress on this behavior?\r\n\r\nEdit: In particular, I've considered getting rid of the internal `parse_write_concern_error` option and instead always check for writeConcernError. If we did that I suspect this behavior might break and we wouldn't know without a test.",
      "Added a test."
    ],
    "commit_messages": [
      "PYTHON-2452 Ensure command-responses with RetryableWriteError label are retried on MongoDB 4.4+ (#530)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa344ee515ce6a4b29d",
    "number": 529,
    "body": "Tested here: https://evergreen.mongodb.com/version/5fc6afbdd1fe0771a322eaec\r\nAnd a second time for good measure: https://evergreen.mongodb.com/version/5fc6edb032f417146256a3aa",
    "head_branch": "PYTHON-2447",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2447 Fix race in CMAP maxConnecting test (#529)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa444ee515ce6a4b29e",
    "number": 528,
    "body": "",
    "head_branch": "release/3.11.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.11.2 (#528)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcaa544ee515ce6a4b29f",
    "number": 527,
    "body": "This PR uses https://github.com/mongodb/mongo-python-driver/pull/526 as a base and then adds a regression test.",
    "head_branch": "PYTHON-2443",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2443 Fix TypeError when pyOpenSSL socket has timeout of None (#527)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa644ee515ce6a4b2a0",
    "number": 526,
    "body": "Fix for crash with the following stack trace when `socket.getdefaulttimeout() is None`\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<REDACTED>/manage.py\", line 39, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"<REDACTED>/dist-packages/django/core/management/__init__.py\", line 364, in execute_from_command_line\r\n    utility.execute()\r\n  File \"<REDACTED>/dist-packages/django/core/management/__init__.py\", line 356, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"<REDACTED>/dist-packages/django/core/management/base.py\", line 283, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"<REDACTED>/dist-packages/django/core/management/base.py\", line 330, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"<REDACTED>.py\", line 365, in handle\r\n    sources += <REDACTED>.objects.filter(**query)[:limit]\r\n  File \"<REDACTED>/dist-packages/mongoengine/queryset/manager.py\", line 37, in __get__\r\n    queryset = queryset_class(owner, owner._get_collection())\r\n  File \"<REDACTED>/dist-packages/mongoengine/document.py\", line 211, in _get_collection\r\n    db = cls._get_db()\r\n  File \"<REDACTED>/dist-packages/mongoengine/document.py\", line 189, in _get_db\r\n    return get_db(cls._meta.get(\"db_alias\", DEFAULT_CONNECTION_NAME))\r\n  File \"<REDACTED>/dist-packages/mongoengine/connection.py\", line 369, in get_db\r\n    conn_settings[\"username\"], conn_settings[\"password\"], **auth_kwargs\r\n  File \"<REDACTED>/dist-packages/pymongo/database.py\", line 1495, in authenticate\r\n    connect=True)\r\n  File \"<REDACTED>/dist-packages/pymongo/mongo_client.py\", line 780, in _cache_credentials\r\n    with server.get_socket(all_credentials) as sock_info:\r\n  File \"<REDACTED>/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"<REDACTED>/dist-packages/pymongo/pool.py\", line 1225, in get_socket\r\n    sock_info = self._get_socket(all_credentials)\r\n  File \"<REDACTED>/dist-packages/pymongo/pool.py\", line 1275, in _get_socket\r\n    sock_info = self.connect(all_credentials)\r\n  File \"<REDACTED>/dist-packages/pymongo/pool.py\", line 1193, in connect\r\n    sock_info.ismaster(all_credentials)\r\n  File \"<REDACTED>/dist-packages/pymongo/pool.py\", line 546, in ismaster\r\n    return self._ismaster(None, None, None, all_credentials)\r\n  File \"<REDACTED>/dist-packages/pymongo/pool.py\", line 580, in _ismaster\r\n    exhaust_allowed=awaitable)\r\n  File \"<REDACTED>/dist-packages/pymongo/pool.py\", line 699, in command\r\n    self._raise_connection_failure(error)\r\n  File \"<REDACTED>/dist-packages/pymongo/pool.py\", line 694, in command\r\n    exhaust_allowed=exhaust_allowed)\r\n  File \"<REDACTED>/dist-packages/pymongo/network.py\", line 150, in command\r\n    reply = receive_message(sock_info, request_id)\r\n  File \"<REDACTED>/dist-packages/pymongo/network.py\", line 196, in receive_message    _receive_data_on_socket(sock_info, 16, deadline))\r\n  File \"<REDACTED>/dist-packages/pymongo/network.py\", line 266, in _receive_data_on_socket\r\n    chunk = sock_info.sock.recv(length)\r\n  File \"<REDACTED>/dist-packages/pymongo/pyopenssl_context.py\", line 120, in recv\r\n    return self._call(super(_sslConn, self).recv, *args, **kwargs)\r\n  File \"<REDACTED>/dist-packages/pymongo/pyopenssl_context.py\", line 110, in _call    self, True, True, timeout)\r\n  File \"<REDACTED>/dist-packages/pymongo/socket_checker.py\", line 60, in select\r\n    res = self._poller.poll(timeout * 1000)\r\nTypeError: unsupported operand type(s) for *: 'NoneType' and 'int'\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks @kimvais, your fix will be merged in https://github.com/mongodb/mongo-python-driver/pull/527 (where I've added a test case)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa744ee515ce6a4b2a1",
    "number": 525,
    "body": "",
    "head_branch": "PYTHON-2440/stop-using-asdict",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2440 Workaround namedtuple._asdict() bug on Python 3.4 (#525)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa744ee515ce6a4b2a2",
    "number": 524,
    "body": "Implements: https://github.com/mongodb/specifications/pull/879/",
    "head_branch": "SPEC-1764-poc",
    "is_a_fork": true,
    "comments": [
      "Patch: https://evergreen.mongodb.com/version/5fbc764b0ae606058eff4c97",
      "This is ready for review although I still need to create a PYTHON ticket to track the work."
    ],
    "commit_messages": [
      "PYTHON-2457 Test that clients wait 500ms between failed heartbeat checks (#524)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa844ee515ce6a4b2a3",
    "number": 523,
    "body": "",
    "head_branch": "PYTHON-2363-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2363 Skip CMAP test when failCommand is not supported (#523)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaa944ee515ce6a4b2a4",
    "number": 522,
    "body": "",
    "head_branch": "fix-bulk-write-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2438 Fix str representation of BulkWriteError (#522)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaaa44ee515ce6a4b2a5",
    "number": 521,
    "body": "Tested here: https://evergreen.mongodb.com/version/5fb843b761837d105a7a3fa2\r\n\r\nThis change fixes this error:\r\n```\r\n[2020/11/12 23:45:52.296] Running command 'shell.exec' in \"run aws auth test with assume role credentials\" (step 4.1 of 8)\r\n[2020/11/12 23:45:52.512] /usr/local/lib/python2.7/site-packages/virtualenv.py:1047: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n[2020/11/12 23:45:52.512]   import imp\r\n[2020/11/12 23:45:52.559] Using base prefix '/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9'\r\n[2020/11/12 23:45:52.559] New python executable in /data/mci/d1de1a1943ca42ab82064dbabed0a5c2/src/mongovenv/bin/python3.9\r\n[2020/11/12 23:45:52.559] Also creating executable in /data/mci/d1de1a1943ca42ab82064dbabed0a5c2/src/mongovenv/bin/python\r\n[2020/11/12 23:45:52.559] ERROR: The executable /data/mci/d1de1a1943ca42ab82064dbabed0a5c2/src/mongovenv/bin/python3.9 is not functioning\r\n[2020/11/12 23:45:52.559] ERROR: It thinks sys.prefix is '/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9' (should be '/data/mci/d1de1a1943ca42ab82064dbabed0a5c2/src/mongovenv')\r\n[2020/11/12 23:45:52.559] ERROR: virtualenv is not compatible with this system or executable\r\n[2020/11/12 23:45:52.569] Running virtualenv with interpreter /usr/local/bin/python3\r\n[2020/11/12 23:45:52.569] Command failed: command encountered problem: error waiting on process '39b22b81-ce96-418a-bcd8-2ab60de7cec9': exit status 100\r\n```\r\n\r\nMy initial attempt to workaround this error was to always use `venv` if it existed however that proved to be a bad idea as venv doesn't work everywhere (see https://jira.mongodb.org/browse/PYTHON-2437). Instead, we only attempt to use venv on macOS.",
    "head_branch": "PYTHON-2431",
    "is_a_fork": true,
    "comments": [
      "Investigating this Windows Python 3.5 failure:\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_aws_auth_test_windows__platform~windows_64_vsMulti_small_python_version_windows~3.5_aws_auth_test_4.4_patch_4928b9088d65e994a3f9acf75ed87fe77728e585_5fb843b761837d105a7a3fa2_20_11_20_22_32_16\r\n```\r\n [2020/11/20 22:49:21.927] + C:/python/Python35/python.exe -m virtualenv --never-download --system-site-packages venvaws\r\n [2020/11/20 22:49:23.996] Python 3.5.4\r\n [2020/11/20 22:49:23.996] 16.7.10\r\n [2020/11/20 22:49:23.996] Using base prefix 'C:\\\\python\\\\Python35'\r\n [2020/11/20 22:49:23.996] New python executable in C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\Scripts\\python.exe\r\n [2020/11/20 22:49:23.996] Installing setuptools, pip, wheel...\r\n [2020/11/20 22:49:28.837] + '[' Windows_NT = Windows_NT ']'\r\n [2020/11/20 22:49:28.837] + . venvaws/Scripts/activate\r\n [2020/11/20 22:49:28.837] ++ '[' venvaws/Scripts/activate = .evergreen/run-mongodb-aws-test.sh ']'\r\n [2020/11/20 22:49:28.837] ++ deactivate nondestructive\r\n [2020/11/20 22:49:28.837] ++ unset -f pydoc\r\n [2020/11/20 22:49:28.837] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.837] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.837] ++ '[' -n /bin/bash ']'\r\n [2020/11/20 22:49:28.837] ++ hash -r\r\n [2020/11/20 22:49:28.837] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.837] ++ unset VIRTUAL_ENV\r\n [2020/11/20 22:49:28.837] ++ '[' '!' nondestructive = nondestructive ']'\r\n [2020/11/20 22:49:28.845] +++ '[' cygwin == cygwin ']'\r\n [2020/11/20 22:49:28.845] +++ cygpath -u 'C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws'\r\n [2020/11/20 22:49:28.866] ++ VIRTUAL_ENV=/cygdrive/c/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/src/venvaws\r\n [2020/11/20 22:49:28.866] ++ export VIRTUAL_ENV\r\n [2020/11/20 22:49:28.866] ++ _OLD_VIRTUAL_PATH='C:/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/drivers-tools/mongodb/bin:/usr/local/bin:/usr/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python39/Scripts:/cygdrive/c/Python39:/cygdrive/c/Users/Administrator/AppData/Roaming/ActiveState/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Windows/System32/OpenSSH:/cygdrive/c/Windows/system32/config/systemprofile/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/Program Files/Docker:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/mci-exec/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/mci-exec/.dotnet/tools:/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:/cygdrive/c/mingw-w64/x86_64-4.9.1-posix-seh-rt_v3-rev1/mingw64/bin'\r\n [2020/11/20 22:49:28.866] ++ PATH='/cygdrive/c/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/src/venvaws/Scripts:C:/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/drivers-tools/mongodb/bin:/usr/local/bin:/usr/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python39/Scripts:/cygdrive/c/Python39:/cygdrive/c/Users/Administrator/AppData/Roaming/ActiveState/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Windows/System32/OpenSSH:/cygdrive/c/Windows/system32/config/systemprofile/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/Program Files/Docker:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/mci-exec/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/mci-exec/.dotnet/tools:/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:/cygdrive/c/mingw-w64/x86_64-4.9.1-posix-seh-rt_v3-rev1/mingw64/bin'\r\n [2020/11/20 22:49:28.867] ++ export PATH\r\n [2020/11/20 22:49:28.867] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.867] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.867] ++ _OLD_VIRTUAL_PS1=\r\n [2020/11/20 22:49:28.867] ++ '[' x '!=' x ']'\r\n [2020/11/20 22:49:28.892] +++ basename /cygdrive/c/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/src/venvaws\r\n [2020/11/20 22:49:28.892] ++ PS1='(venvaws) '\r\n [2020/11/20 22:49:28.893] ++ export PS1\r\n [2020/11/20 22:49:28.893] ++ alias pydoc\r\n [2020/11/20 22:49:28.893] ++ true\r\n [2020/11/20 22:49:28.893] ++ '[' -n /bin/bash ']'\r\n [2020/11/20 22:49:28.893] ++ hash -r\r\n [2020/11/20 22:49:28.893] + '[' Windows_NT = Windows_NT ']'\r\n [2020/11/20 22:49:28.894] + . venvaws/Scripts/activate\r\n [2020/11/20 22:49:28.894] ++ '[' venvaws/Scripts/activate = .evergreen/run-mongodb-aws-test.sh ']'\r\n [2020/11/20 22:49:28.894] ++ deactivate nondestructive\r\n [2020/11/20 22:49:28.894] ++ unset -f pydoc\r\n [2020/11/20 22:49:28.894] ++ '[' -z _ ']'\r\n [2020/11/20 22:49:28.894] ++ PATH='C:/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/drivers-tools/mongodb/bin:/usr/local/bin:/usr/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python39/Scripts:/cygdrive/c/Python39:/cygdrive/c/Users/Administrator/AppData/Roaming/ActiveState/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Windows/System32/OpenSSH:/cygdrive/c/Windows/system32/config/systemprofile/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/Program Files/Docker:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/mci-exec/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/mci-exec/.dotnet/tools:/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:/cygdrive/c/mingw-w64/x86_64-4.9.1-posix-seh-rt_v3-rev1/mingw64/bin'\r\n [2020/11/20 22:49:28.894] ++ export PATH\r\n [2020/11/20 22:49:28.894] ++ unset _OLD_VIRTUAL_PATH\r\n [2020/11/20 22:49:28.894] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.894] ++ '[' -n /bin/bash ']'\r\n [2020/11/20 22:49:28.894] ++ hash -r\r\n [2020/11/20 22:49:28.894] ++ '[' -z _ ']'\r\n [2020/11/20 22:49:28.894] ++ PS1=\r\n [2020/11/20 22:49:28.894] ++ export PS1\r\n [2020/11/20 22:49:28.894] ++ unset _OLD_VIRTUAL_PS1\r\n [2020/11/20 22:49:28.894] ++ unset VIRTUAL_ENV\r\n [2020/11/20 22:49:28.894] ++ '[' '!' nondestructive = nondestructive ']'\r\n [2020/11/20 22:49:28.902] +++ '[' cygwin == cygwin ']'\r\n [2020/11/20 22:49:28.902] +++ cygpath -u 'C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws'\r\n [2020/11/20 22:49:28.922] ++ VIRTUAL_ENV=/cygdrive/c/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/src/venvaws\r\n [2020/11/20 22:49:28.923] ++ export VIRTUAL_ENV\r\n [2020/11/20 22:49:28.923] ++ _OLD_VIRTUAL_PATH='C:/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/drivers-tools/mongodb/bin:/usr/local/bin:/usr/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python39/Scripts:/cygdrive/c/Python39:/cygdrive/c/Users/Administrator/AppData/Roaming/ActiveState/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Windows/System32/OpenSSH:/cygdrive/c/Windows/system32/config/systemprofile/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/Program Files/Docker:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/mci-exec/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/mci-exec/.dotnet/tools:/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:/cygdrive/c/mingw-w64/x86_64-4.9.1-posix-seh-rt_v3-rev1/mingw64/bin'\r\n [2020/11/20 22:49:28.923] ++ PATH='/cygdrive/c/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/src/venvaws/Scripts:C:/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/drivers-tools/mongodb/bin:/usr/local/bin:/usr/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python39/Scripts:/cygdrive/c/Python39:/cygdrive/c/Users/Administrator/AppData/Roaming/ActiveState/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Windows/System32/OpenSSH:/cygdrive/c/Windows/system32/config/systemprofile/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/Program Files/Docker:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/mci-exec/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/mci-exec/.dotnet/tools:/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:/cygdrive/c/mingw-w64/x86_64-4.9.1-posix-seh-rt_v3-rev1/mingw64/bin'\r\n [2020/11/20 22:49:28.923] ++ export PATH\r\n [2020/11/20 22:49:28.923] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.923] ++ '[' -z '' ']'\r\n [2020/11/20 22:49:28.923] ++ _OLD_VIRTUAL_PS1=\r\n [2020/11/20 22:49:28.923] ++ '[' x '!=' x ']'\r\n [2020/11/20 22:49:28.947] +++ basename /cygdrive/c/data/mci/0dce4e0b5f325a18485ea00fc1f6e75a/src/venvaws\r\n [2020/11/20 22:49:28.947] ++ PS1='(venvaws) '\r\n [2020/11/20 22:49:28.948] ++ export PS1\r\n [2020/11/20 22:49:28.948] ++ alias pydoc\r\n [2020/11/20 22:49:28.948] ++ true\r\n [2020/11/20 22:49:28.948] ++ '[' -n /bin/bash ']'\r\n [2020/11/20 22:49:28.948] ++ hash -r\r\n [2020/11/20 22:49:28.948] + pip install '.[aws]'\r\n [2020/11/20 22:49:34.438] done.\r\n [2020/11/20 22:49:34.438] Processing c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\r\n [2020/11/20 22:49:34.438] Collecting pymongo-auth-aws<2.0.0\r\n [2020/11/20 22:49:34.438]   Downloading https://files.pythonhosted.org/packages/b2/c7/bc939477a76e071032670a5585a3d86bec6f33932593827b88052e8cf736/pymongo_auth_aws-1.0.2-py2.py3-none-any.whl\r\n [2020/11/20 22:49:34.534] Collecting requests<3.0.0\r\n [2020/11/20 22:49:34.534]   Using cached https://files.pythonhosted.org/packages/39/fc/f91eac5a39a65f75a7adb58eac7fa78871ea9872283fb9c44e6545998134/requests-2.25.0-py2.py3-none-any.whl\r\n [2020/11/20 22:49:35.286] Collecting botocore\r\n [2020/11/20 22:49:35.286]   Downloading https://files.pythonhosted.org/packages/77/49/c8c99477416fdebb59078bda624acc5b3c7008f891c60d56d6ff1570d83e/botocore-1.19.23-py2.py3-none-any.whl (6.8MB)\r\n [2020/11/20 22:49:37.305] Collecting idna<3,>=2.5\r\n [2020/11/20 22:49:37.305]   Using cached https://files.pythonhosted.org/packages/a2/38/928ddce2273eaa564f6f50de919327bf3a00f091b5baba8dfa9460f3a8a8/idna-2.10-py2.py3-none-any.whl\r\n [2020/11/20 22:49:37.403] Collecting urllib3<1.27,>=1.21.1\r\n [2020/11/20 22:49:37.403]   Using cached https://files.pythonhosted.org/packages/f5/71/45d36a8df68f3ebb098d6861b2c017f3d094538c0fb98fa61d4dc43e69b9/urllib3-1.26.2-py2.py3-none-any.whl\r\n [2020/11/20 22:49:37.515] Collecting certifi>=2017.4.17\r\n [2020/11/20 22:49:37.515]   Using cached https://files.pythonhosted.org/packages/c1/6f/3d85f0850962279a7e4c622695d7b3171e95ac65308a57d3b29738b27149/certifi-2020.11.8-py2.py3-none-any.whl\r\n [2020/11/20 22:49:37.568] Collecting chardet<4,>=3.0.2\r\n [2020/11/20 22:49:37.568]   Using cached https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl\r\n [2020/11/20 22:49:37.654] Collecting python-dateutil<3.0.0,>=2.1\r\n [2020/11/20 22:49:37.654]   Downloading https://files.pythonhosted.org/packages/d4/70/d60450c3dd48ef87586924207ae8907090de0b306af2bce5d134d78615cb/python_dateutil-2.8.1-py2.py3-none-any.whl (227kB)\r\n [2020/11/20 22:49:37.727] Collecting jmespath<1.0.0,>=0.7.1\r\n [2020/11/20 22:49:37.727]   Downloading https://files.pythonhosted.org/packages/07/cb/5f001272b6faeb23c1c9e0acc04d48eaaf5c862c17709d20e3469c6e0139/jmespath-0.10.0-py2.py3-none-any.whl\r\n [2020/11/20 22:49:37.755] Requirement already satisfied: six>=1.5 in c:\\python\\python35\\lib\\site-packages (from python-dateutil<3.0.0,>=2.1->botocore->pymongo-auth-aws<2.0.0->pymongo==4.0.dev0) (1.15.0)\r\n [2020/11/20 22:49:37.758] Building wheels for collected packages: pymongo\r\n [2020/11/20 22:49:38.329]   Building wheel for pymongo (setup.py): started\r\n [2020/11/20 22:49:38.330]   ERROR: Command errored out with exit status 1:\r\n [2020/11/20 22:49:38.330]    command: 'c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\scripts\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\data\\\\mci\\\\0dce4e0b5f325a18485ea00fc1f6e75a\\\\drivers-tools\\\\.evergreen\\\\orchestration\\\\db\\\\pip-req-build-q8hmn3bl\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\data\\\\mci\\\\0dce4e0b5f325a18485ea00fc1f6e75a\\\\drivers-tools\\\\.evergreen\\\\orchestration\\\\db\\\\pip-req-build-q8hmn3bl\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' bdist_wheel -d 'C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-wheel-3vil5sfb' --python-tag cp35\r\n [2020/11/20 22:49:38.330]        cwd: C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\\r\n [2020/11/20 22:49:38.330]   Complete output (137 lines):\r\n [2020/11/20 22:49:38.330]   running bdist_wheel\r\n [2020/11/20 22:49:38.330]   running build\r\n [2020/11/20 22:49:38.330]   running build_py\r\n [2020/11/20 22:49:38.330]   creating build\r\n [2020/11/20 22:49:38.330]   creating build\\lib.win-amd64-3.5\r\n [2020/11/20 22:49:38.330]   creating build\\lib.win-amd64-3.5\\bson\r\n [2020/11/20 22:49:38.330]   copying bson\\binary.py -> build\\lib.win-amd64-3.5\\bson\r\n...\r\n [2020/11/20 22:49:38.330]   running build_ext\r\n [2020/11/20 22:49:38.330]   building 'bson._cbson' extension\r\n [2020/11/20 22:49:38.330]   Traceback (most recent call last):\r\n [2020/11/20 22:49:38.330]     File \"<string>\", line 1, in <module>\r\n [2020/11/20 22:49:38.330]     File \"C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\setup.py\", line 431, in <module>\r\n [2020/11/20 22:49:38.330]       **extra_opts\r\n [2020/11/20 22:49:38.330]     File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\setuptools\\__init__.py\", line 145, in setup\r\n [2020/11/20 22:49:38.330]       return distutils.core.setup(**attrs)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\core.py\", line 148, in setup\r\n [2020/11/20 22:49:38.330]       dist.run_commands()\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 955, in run_commands\r\n [2020/11/20 22:49:38.330]       self.run_command(cmd)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 974, in run_command\r\n [2020/11/20 22:49:38.330]       cmd_obj.run()\r\n [2020/11/20 22:49:38.330]     File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\wheel\\bdist_wheel.py\", line 192, in run\r\n [2020/11/20 22:49:38.330]       self.run_command('build')\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\cmd.py\", line 313, in run_command\r\n [2020/11/20 22:49:38.330]       self.distribution.run_command(command)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 974, in run_command\r\n [2020/11/20 22:49:38.330]       cmd_obj.run()\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\command\\build.py\", line 135, in run\r\n [2020/11/20 22:49:38.330]       self.run_command(cmd_name)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\cmd.py\", line 313, in run_command\r\n [2020/11/20 22:49:38.330]       self.distribution.run_command(command)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 974, in run_command\r\n [2020/11/20 22:49:38.330]       cmd_obj.run()\r\n [2020/11/20 22:49:38.330]     File \"C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\setup.py\", line 286, in run\r\n [2020/11/20 22:49:38.330]       build_ext.run(self)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 339, in run\r\n [2020/11/20 22:49:38.330]       self.build_extensions()\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 448, in build_extensions\r\n [2020/11/20 22:49:38.330]       self._build_extensions_serial()\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 473, in _build_extensions_serial\r\n [2020/11/20 22:49:38.330]       self.build_extension(ext)\r\n [2020/11/20 22:49:38.330]     File \"C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\setup.py\", line 298, in build_extension\r\n [2020/11/20 22:49:38.330]       build_ext.build_extension(self, ext)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 533, in build_extension\r\n [2020/11/20 22:49:38.330]       depends=ext.depends)\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\_msvccompiler.py\", line 304, in compile\r\n [2020/11/20 22:49:38.330]       self.initialize()\r\n [2020/11/20 22:49:38.330]     File \"C:\\python\\Python35\\Lib\\distutils\\_msvccompiler.py\", line 197, in initialize\r\n [2020/11/20 22:49:38.330]       vc_env = _get_vc_env(plat_spec)\r\n [2020/11/20 22:49:38.330]     File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\setuptools\\msvc.py\", line 171, in msvc14_get_vc_env\r\n [2020/11/20 22:49:38.330]       return EnvironmentInfo(plat_spec, vc_min_ver=14.0).return_env()\r\n [2020/11/20 22:49:38.330]     File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\setuptools\\msvc.py\", line 1620, in return_env\r\n [2020/11/20 22:49:38.330]       if self.vs_ver >= 14 and isfile(self.VCRuntimeRedist):\r\n [2020/11/20 22:49:38.330]     File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\genericpath.py\", line 30, in isfile\r\n [2020/11/20 22:49:38.330]       st = os.stat(path)\r\n [2020/11/20 22:49:38.330]   TypeError: stat: can't specify None for path argument\r\n [2020/11/20 22:49:38.330]   ----------------------------------------\r\n [2020/11/20 22:49:38.330]   ERROR: Failed building wheel for pymongo\r\n [2020/11/20 22:49:38.330]   Building wheel for pymongo (setup.py): finished with status 'error'\r\n [2020/11/20 22:49:38.743]   Running setup.py clean for pymongo\r\n [2020/11/20 22:49:38.743] Failed to build pymongo\r\n [2020/11/20 22:49:38.743] Installing collected packages: idna, urllib3, certifi, chardet, requests, python-dateutil, jmespath, botocore, pymongo-auth-aws, pymongo\r\n [2020/11/20 22:49:42.235]     Running setup.py install for pymongo: started\r\n [2020/11/20 22:49:42.236]     ERROR: Command errored out with exit status 1:\r\n [2020/11/20 22:49:42.236]      command: 'c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\scripts\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\data\\\\mci\\\\0dce4e0b5f325a18485ea00fc1f6e75a\\\\drivers-tools\\\\.evergreen\\\\orchestration\\\\db\\\\pip-req-build-q8hmn3bl\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\data\\\\mci\\\\0dce4e0b5f325a18485ea00fc1f6e75a\\\\drivers-tools\\\\.evergreen\\\\orchestration\\\\db\\\\pip-req-build-q8hmn3bl\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-record-yhjv6etp\\install-record.txt' --single-version-externally-managed --compile --install-headers 'c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\include\\site\\python3.5\\pymongo'\r\n [2020/11/20 22:49:42.236]          cwd: C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\\r\n [2020/11/20 22:49:42.236]     Complete output (139 lines):\r\n [2020/11/20 22:49:42.236]     running install\r\n [2020/11/20 22:49:42.236]     running build\r\n [2020/11/20 22:49:42.236]     running build_py\r\n [2020/11/20 22:49:42.236]     creating build\r\n [2020/11/20 22:49:42.236]     creating build\\lib.win-amd64-3.5\r\n [2020/11/20 22:49:42.236]     creating build\\lib.win-amd64-3.5\\bson\r\n [2020/11/20 22:49:42.236]     copying bson\\binary.py -> build\\lib.win-amd64-3.5\\bson\r\n...\r\n [2020/11/20 22:49:42.236]     running build_ext\r\n [2020/11/20 22:49:42.236]     building 'bson._cbson' extension\r\n [2020/11/20 22:49:42.236]     Traceback (most recent call last):\r\n [2020/11/20 22:49:42.236]       File \"<string>\", line 1, in <module>\r\n [2020/11/20 22:49:42.236]       File \"C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\setup.py\", line 431, in <module>\r\n [2020/11/20 22:49:42.236]         **extra_opts\r\n [2020/11/20 22:49:42.236]       File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\setuptools\\__init__.py\", line 145, in setup\r\n [2020/11/20 22:49:42.236]         return distutils.core.setup(**attrs)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\core.py\", line 148, in setup\r\n [2020/11/20 22:49:42.236]         dist.run_commands()\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 955, in run_commands\r\n [2020/11/20 22:49:42.236]         self.run_command(cmd)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 974, in run_command\r\n [2020/11/20 22:49:42.236]         cmd_obj.run()\r\n [2020/11/20 22:49:42.236]       File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\setuptools\\command\\install.py\", line 61, in run\r\n [2020/11/20 22:49:42.236]         return orig.install.run(self)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\command\\install.py\", line 539, in run\r\n [2020/11/20 22:49:42.236]         self.run_command('build')\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\cmd.py\", line 313, in run_command\r\n [2020/11/20 22:49:42.236]         self.distribution.run_command(command)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 974, in run_command\r\n [2020/11/20 22:49:42.236]         cmd_obj.run()\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\command\\build.py\", line 135, in run\r\n [2020/11/20 22:49:42.236]         self.run_command(cmd_name)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\cmd.py\", line 313, in run_command\r\n [2020/11/20 22:49:42.236]         self.distribution.run_command(command)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\dist.py\", line 974, in run_command\r\n [2020/11/20 22:49:42.236]         cmd_obj.run()\r\n [2020/11/20 22:49:42.236]       File \"C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\setup.py\", line 286, in run\r\n [2020/11/20 22:49:42.236]         build_ext.run(self)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 339, in run\r\n [2020/11/20 22:49:42.236]         self.build_extensions()\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 448, in build_extensions\r\n [2020/11/20 22:49:42.236]         self._build_extensions_serial()\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 473, in _build_extensions_serial\r\n [2020/11/20 22:49:42.236]         self.build_extension(ext)\r\n [2020/11/20 22:49:42.236]       File \"C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-req-build-q8hmn3bl\\setup.py\", line 298, in build_extension\r\n [2020/11/20 22:49:42.236]         build_ext.build_extension(self, ext)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\command\\build_ext.py\", line 533, in build_extension\r\n [2020/11/20 22:49:42.236]         depends=ext.depends)\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\_msvccompiler.py\", line 304, in compile\r\n [2020/11/20 22:49:42.236]         self.initialize()\r\n [2020/11/20 22:49:42.236]       File \"C:\\python\\Python35\\Lib\\distutils\\_msvccompiler.py\", line 197, in initialize\r\n [2020/11/20 22:49:42.236]         vc_env = _get_vc_env(plat_spec)\r\n [2020/11/20 22:49:42.237]       File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\setuptools\\msvc.py\", line 171, in msvc14_get_vc_env\r\n [2020/11/20 22:49:42.237]         return EnvironmentInfo(plat_spec, vc_min_ver=14.0).return_env()\r\n [2020/11/20 22:49:42.237]       File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\site-packages\\setuptools\\msvc.py\", line 1620, in return_env\r\n [2020/11/20 22:49:42.237]         if self.vs_ver >= 14 and isfile(self.VCRuntimeRedist):\r\n [2020/11/20 22:49:42.237]       File \"c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\lib\\genericpath.py\", line 30, in isfile\r\n [2020/11/20 22:49:42.237]         st = os.stat(path)\r\n [2020/11/20 22:49:42.237]     TypeError: stat: can't specify None for path argument\r\n [2020/11/20 22:49:43.228]     ----------------------------------------\r\n [2020/11/20 22:49:43.228] ERROR: Command errored out with exit status 1: 'c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\scripts\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\data\\\\mci\\\\0dce4e0b5f325a18485ea00fc1f6e75a\\\\drivers-tools\\\\.evergreen\\\\orchestration\\\\db\\\\pip-req-build-q8hmn3bl\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\data\\\\mci\\\\0dce4e0b5f325a18485ea00fc1f6e75a\\\\drivers-tools\\\\.evergreen\\\\orchestration\\\\db\\\\pip-req-build-q8hmn3bl\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\drivers-tools\\.evergreen\\orchestration\\db\\pip-record-yhjv6etp\\install-record.txt' --single-version-externally-managed --compile --install-headers 'c:\\data\\mci\\0dce4e0b5f325a18485ea00fc1f6e75a\\src\\venvaws\\include\\site\\python3.5\\pymongo' Check the logs for full command output.\r\n [2020/11/20 22:49:43.357] WARNING: You are using pip version 19.3.1; however, version 20.2.4 is available.\r\n [2020/11/20 22:49:43.357] You should consider upgrading via the 'python -m pip install --upgrade pip' command.\r\n```",
      "New (passing) patch: https://evergreen.mongodb.com/version/5fb8a6251e2d17057696a4fe"
    ],
    "commit_messages": [
      "PYTHON-2431 Fix MONGODB-AWS auth tests on macOS (#521)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaab44ee515ce6a4b2a6",
    "number": 520,
    "body": "When the SDAM monitor check fails, a ServerDescription is created from\r\nthe exception. This exception is kept alive via the\r\nServerDescription.error field. Unfortunately, the exception's traceback\r\ncontains a reference to the previous ServerDescription. Altogether this\r\nmeans that each consecutively failing check leaks memory by building an\r\never growing chain of ServerDescription -> Exception -> Traceback ->\r\nFrame -> ServerDescription -> ... objects.\r\n\r\nThis change breaks the chain and prevents the memory leak by clearing\r\nthe Exception's __traceback__, __context__, and __cause__ fields.",
    "head_branch": "PYTHON-2433",
    "is_a_fork": true,
    "comments": [
      "Rebased to fix test failures caused by PYTHON-2436. ",
      "Alternative fixes would be:\r\n- refactor Monitor's code such that exceptions won't hold references to previous ServerDescriptions. I rejected this approach because it seems too brittle.\r\n- Use [traceback.clear_frames()](https://docs.python.org/3/library/traceback.html#traceback.clear_frames) to clear the references in the traceback. For some reason this doesn't fix the bug.\r\n- Change ServerDescription.error to be a string representation of the error (`repr(error)`). This is probably the most robust approach but it's a backwards breaking change and it breaks a few tests. "
    ],
    "commit_messages": [
      "PYTHON-2433 Fix Python 3 ServerDescription/Exception memory leak (#520)\n\nWhen the SDAM monitor check fails, a ServerDescription is created from\r\nthe exception. This exception is kept alive via the\r\nServerDescription.error field. Unfortunately, the exception's traceback\r\ncontains a reference to the previous ServerDescription. Altogether this\r\nmeans that each consecutively failing check leaks memory by building an\r\never growing chain of ServerDescription -> Exception -> Traceback ->\r\nFrame -> ServerDescription -> ... objects.\r\n\r\nThis change breaks the chain and prevents the memory leak by clearing\r\nthe Exception's __traceback__, __context__, and __cause__ fields."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaac44ee515ce6a4b2a7",
    "number": 519,
    "body": "PYTHON-2033\r\n\r\nTo Do:\r\n\r\n- [x] Implement `$$matchesEntity` operator\r\n- [ ] ~Implement `$$matchesHexBytes` operator~ - this will be implemented along with GridFS since it is not used by any tests other than GridFS.\r\n- [x] Implement support for `expectError.errorContains`\r\n- [x] Implement support for `expectError.errorCode`\r\n- [x] Implement support for `expectError.errorCodeName`\r\n- [x] Implement `targetedFailPoint` operation\r\n- [x] Add support for `uriOptions` and `useMultipleMongoses` to `MongoClient` entity creation\r\n- [x] Add support for all BSON types to `$$type` operator",
    "head_branch": "PYTHON-2033/unified-test-format",
    "is_a_fork": true,
    "comments": [
      "Implementation of `$$matchesHexBytes` will be done as part of [PYTHON-2459](https://jira.mongodb.org/browse/PYTHON-2459). ",
      "In 1a79309 I made one more change to how we were skipping entire classes when runOn wasn't satisfied. Previously, we got this extremely unhelpful message when `skipTest` was invoked in `setUpClass`:\r\n\r\n```\r\nskipped 'runOnRequirements not satisfied'\r\n```\r\n\r\nWith my change, this is now more informative:\r\n\r\n```\r\nskipped 'TestUnifiedTestFormatValidPassPocTransactionsMongosPinAuto runOnRequirements not satisfied'\r\n```\r\n\r\nThe other change tweaks how we deal with unsupported schema versions - this was a bug.",
      "The remaining failures seem to be unrelated.",
      "Some more test failures (MMAPv1):\r\n- 3.6 mmapv1: https://evergreen.mongodb.com/task/mongo_python_driver_tests_storage_engines__platform~rhel62_python_version~2.7_storage_engine~mmapv1_test_3.6_replica_set_patch_c673d8b3cea48f65615cf632fb287e1b9e57be72_5fe10d081e2d170329f29a51_20_12_21_21_00_57\r\n- 4.0 mmapv1: https://evergreen.mongodb.com/task/mongo_python_driver_tests_storage_engines__platform~rhel62_python_version~2.7_storage_engine~mmapv1_test_4.0_replica_set_patch_c673d8b3cea48f65615cf632fb287e1b9e57be72_5fe10d081e2d170329f29a51_20_12_21_21_00_57"
    ],
    "commit_messages": [
      "PYTHON-2033 Unified Test Format (#519)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaad44ee515ce6a4b2a8",
    "number": 518,
    "body": "",
    "head_branch": "BUMP-3.12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.12.0.dev0 (#518)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcaae44ee515ce6a4b2a9",
    "number": 517,
    "body": "",
    "head_branch": "BUMP-3.12.0.dev0",
    "is_a_fork": true,
    "comments": [
      "Superseded by #518"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaae44ee515ce6a4b2aa",
    "number": 516,
    "body": "",
    "head_branch": "Changelog/3.11.1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.11.1 (#516)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaaf44ee515ce6a4b2ab",
    "number": 515,
    "body": "An implementation of https://github.com/mongodb/specifications/pull/876\r\n\r\nTODO: \r\n- [X]  Add test that proves slower servers get fewer operations because of this feature.\r\n- [x] Figure out how to update operation_count after a fork()",
    "head_branch": "PYTHON-2395",
    "is_a_fork": true,
    "comments": [
      "This is ready for review.",
      "Test failures: \r\n- https://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_rhel62_test_ssl__platform~rhel62_auth~auth_ssl~ssl_python_version~3.6_coverage~coverage_test_4.4_sharded_cluster_patch_d1fd3f7e982f5d1ae3e8b8b8edeba7e146bb02f8_5fbc574cd6d80a2a9efee7e7_20_11_24_00_43_57\r\n```\r\n [2020/11/24 03:15:31.596] FAIL [3.289s]: test_load_balancing (test_server_selection_in_window.TestProse)\r\n [2020/11/24 03:15:31.596] ----------------------------------------------------------------------\r\n [2020/11/24 03:15:31.596] Traceback (most recent call last):\r\n [2020/11/24 03:15:31.596]   File \"/data/mci/2f407c6b5c7693a603b431e5d6e9bc66/src/test/__init__.py\", line 444, in wrap\r\n [2020/11/24 03:15:31.596]     return f(*args, **kwargs)\r\n [2020/11/24 03:15:31.596]   File \"/data/mci/2f407c6b5c7693a603b431e5d6e9bc66/src/test/__init__.py\", line 444, in wrap\r\n [2020/11/24 03:15:31.596]     return f(*args, **kwargs)\r\n [2020/11/24 03:15:31.596]   File \"/data/mci/2f407c6b5c7693a603b431e5d6e9bc66/src/test/test_server_selection_in_window.py\", line 153, in test_load_balancing\r\n [2020/11/24 03:15:31.596]     self.assertAlmostEqual(freqs[delayed_server], 0.50, delta=0.1)\r\n [2020/11/24 03:15:31.596] AssertionError: 0.63 != 0.5 within 0.1 delta\r\n [2020/11/24 03:15:31.629] ----------------------------------------------------------------------\r\n```\r\n\r\nI suppose the tolerance here is too low. Let's increase the delta to 0.15.\r\n\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_rhel62_test_ssl__platform~rhel62_auth~auth_ssl~ssl_python_version~pypy3.6_coverage~coverage_test_4.4_replica_set_patch_d1fd3f7e982f5d1ae3e8b8b8edeba7e146bb02f8_5fbc574cd6d80a2a9efee7e7_20_11_24_00_43_57\r\n```\r\n[2020/11/24 03:14:27.915] root      7650  1.2  0.3 2287872 29072 ?       Sl   03:05   0:06 /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/.evergreen/orchestration/venv/bin/python3 /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/.evergreen/orchestration/venv/bin/mongo-orchestration -e default -f /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/.evergreen/orchestration/orchestration.config --socket-timeout-ms=60000 --bind=127.0.0.1 --enable-majority-read-concern start\r\n[2020/11/24 03:14:27.915] root      8033 11.4 14.0 3356352 1076296 ?     SLl  03:05   0:57 /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/mongodb/bin/mongod --config /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/.evergreen/orchestration/db/mongo-g8n12d3h --port 27017\r\n[2020/11/24 03:14:28.403] root      8132 12.1 14.3 3266236 1101132 ?     SLl  03:06   1:01 /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/mongodb/bin/mongod --config /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/.evergreen/orchestration/db/mongo-4vbgcwz2 --port 27018\r\n[2020/11/24 03:14:28.403] root      8278 10.5 11.0 3045604 850520 ?      SLl  03:06   0:51 /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/mongodb/bin/mongod --config /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/drivers-tools/.evergreen/orchestration/db/mongo-9lru297c --port 27019\r\n[2020/11/24 03:14:28.403] root      8452  0.0  0.0   9232   204 ?        S    03:06   0:00 sh\r\n[2020/11/24 03:14:28.403] root      8453  0.0  0.0   9236   244 ?        S    03:06   0:00 sh /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/src/.evergreen/run-tests.sh\r\n[2020/11/24 03:14:28.403] root      8464 49.4 55.6 6955984 4266532 ?     Sl   03:06   3:51 /opt/python/pypy3.6/bin/pypy3 setup.py test --xunit-output=/data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/src/xunit-results\r\n[2020/11/24 03:14:28.403] root     22992  1.0  0.0  13376   752 ?        R    03:14   0:00 ps aux\r\n[2020/11/24 03:15:30.298]   test_gridfs (test_session.TestSession) ... /data/mci/ed7e311d29371e01b48f6f47e6d6b0a4/src/.evergreen/run-tests.sh: line 233:  8464 Killed                  $COVERAGE_OR_PYTHON $EXTRA_ARGS $COVERAGE_ARGS setup.py $C_EXTENSIONS test $OUTPUT\r\n[2020/11/24 03:15:30.307] 10\r\n[2020/11/24 03:15:30.310] Command failed: command encountered problem: error waiting on process 'ee34ca15-acb9-4514-8731-496537dd91f7': exit status 137\r\n[2020/11/24 03:15:30.311] Finished running task commands in 10m12.810387749s.\r\n[2020/11/24 03:15:30.312] Task failed: command failed: command encountered problem: error waiting on process 'ee34ca15-acb9-4514-8731-496537dd91f7': exit status 137\r\n[2020/11/24 03:15:30.313] Task completed - FAILURE.\r\n```\r\n\r\nNot sure what happened here. The test process was killed but there wasn't a EVG timeout. Perhaps the tests used too much memory (OOM killer)?"
    ],
    "commit_messages": [
      "PYTHON-2395 Consider connection pool health during server selection (#515)\n\nChange the driver to maintain a count of in-progress operations to each\r\nserver (per client). When selecting a mongos server, the driver now picks\r\n2 suitable servers at random and selects the server with fewer in-progress\r\noperations. Previously, the driver selected a mongos server at random.\r\nThe new behavior is intended to route operations away from unhealthy or\r\nslow servers in highly concurrent single client workloads.\r\n\r\nPYTHON-2460 Only reset Pool.active_sockets to 0 after a fork()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab044ee515ce6a4b2ac",
    "number": 514,
    "body": "For some background see my comment on the Jira ticket here: https://jira.mongodb.org/browse/PYTHON-2415?focusedCommentId=3476301&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-3476301",
    "head_branch": "PYTHON-2415",
    "is_a_fork": true,
    "comments": [
      "This PR broke the string representation of BulklWriteError.\r\n```py\r\nstr(exception)\r\n```\r\nis now\r\n```\r\n{'writeErrors': [{'index': 1, 'code': 11000, 'op': {'_id': 1}, 'errmsg': 'E11000 Duplicate Key Error'}], 'nInserted': 1}\r\n```\r\nWhereas it should be (at least I think so):\r\n```\r\nbatch op errors occurred, full error: {'writeErrors': [{'index': 1, 'code': 11000, 'op': {'_id': 1}, 'errmsg': 'E11000 Duplicate Key Error'}], 'nInserted': 1}\r\n```",
      "I've created #522 to forward fix."
    ],
    "commit_messages": [
      "PYTHON-2415 Fix pickle support for BulkWriteError exceptions (#514)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab144ee515ce6a4b2ad",
    "number": 513,
    "body": "Patch: https://evergreen.mongodb.com/version/5fa5ac2f0305b945939ab269",
    "head_branch": "PYTHON-2403",
    "is_a_fork": true,
    "comments": [
      "It seems that virtualenv is non functional with the current 3.9 install:\r\n```\r\n [2020/11/06 20:11:38.052] + VIRTUALENV='/usr/local/bin/virtualenv -p /Library/Frameworks/Python.framework/Versions/3.9/bin/python3'\r\n [2020/11/06 20:11:38.052] + /usr/local/bin/virtualenv -p /Library/Frameworks/Python.framework/Versions/3.9/bin/python3 --system-site-packages --never-download venvtestinstall\r\n [2020/11/06 20:11:38.148] /usr/local/lib/python2.7/site-packages/virtualenv.py:1047: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n [2020/11/06 20:11:38.148]   import imp\r\n [2020/11/06 20:11:38.213] removing build/bdist.macosx-10.9-x86_64/wheel\r\n [2020/11/06 20:11:38.213] /usr/local/bin/virtualenv\r\n [2020/11/06 20:11:38.213] Using base prefix '/Library/Frameworks/Python.framework/Versions/3.9'\r\n [2020/11/06 20:11:38.213] New python executable in /data/mci/87e4d98327ee9dcbc92d3124af4cb34c/src/venvtestinstall/bin/python3\r\n [2020/11/06 20:11:38.213] Also creating executable in /data/mci/87e4d98327ee9dcbc92d3124af4cb34c/src/venvtestinstall/bin/python\r\n [2020/11/06 20:11:38.213] ERROR: The executable /data/mci/87e4d98327ee9dcbc92d3124af4cb34c/src/venvtestinstall/bin/python3 is not functioning\r\n [2020/11/06 20:11:38.213] ERROR: It thinks sys.prefix is '/Library/Frameworks/Python.framework/Versions/3.9' (should be '/data/mci/87e4d98327ee9dcbc92d3124af4cb34c/src/venvtestinstall')\r\n [2020/11/06 20:11:38.213] ERROR: virtualenv is not compatible with this system or executable\r\n [2020/11/06 20:11:38.219] Running virtualenv with interpreter /Library/Frameworks/Python.framework/Versions/3.9/bin/python3\r\n [2020/11/06 20:11:38.223] Command failed: command encountered problem: error waiting on process '67f25ebb-d689-44c9-aa2b-1f4c60e9c667': exit status 100\r\n [2020/11/06 20:11:38.223] Task completed - FAILURE.\r\n```\r\n\r\nI'll file this issue with the build team.",
      "Looks like the 10.14 hosts now have `virtualenv` installed. I think you can try running the build again to see if it works @ShaneHarvey \r\n",
      "Alright, this is working now, patch: https://evergreen.mongodb.com/version/5fa5ac2f0305b945939ab269"
    ],
    "commit_messages": [
      "PYTHON-2403 Add macOS Python 3.9 release automation (#513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab244ee515ce6a4b2ae",
    "number": 512,
    "body": "",
    "head_branch": "PYTHON-2421",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2421 Stop testing geoSearch/geoHaystack on MongoDB 4.5+ (#512)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab344ee515ce6a4b2af",
    "number": 511,
    "body": "At most 2 connections can be in the pending state per connection pool.\r\nThe pending state covers all the work required to setup a new connection\r\nincluding TCP, TLS, and MongoDB authentication. For example, if two\r\nthreads are currently creating connections, a third thread will wait for\r\neither an existing connection to be checked back into the pool or for\r\none of the two threads to finish creating a connection.\r\n\r\nThe change reduces the likelihood of connection storms and improves the\r\ndriver's ability to reuse existing connections.",
    "head_branch": "PYTHON-2363-final",
    "is_a_fork": true,
    "comments": [
      "Rebased to fix the geoSearch test failures (PYTHON-2421).",
      "Investigating this [Python 2 test failure](https://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_rhel62_test_ssl__platform~rhel62_auth~auth_ssl~ssl_python_version~2.7_coverage~coverage_test_4.4_sharded_cluster_patch_98205b8384865ba54094ad3d7a062ce3a2baf827_5faeebb4a4cf473fb4c26fc4_20_11_13_20_25_25):\r\n```\r\n [2020/11/13 20:34:45.813] Failed test: u'threads blocked by maxConnecting check out returned connections'\r\n [2020/11/13 20:34:45.813] Operations:\r\n [2020/11/13 20:34:45.813] {u'name': u'checkOut', u'label': u'conn0'}\r\n [2020/11/13 20:34:45.813] {u'name': u'start', u'target': u'thread1'}\r\n [2020/11/13 20:34:45.813] {u'name': u'checkOut', u'thread': u'thread1'}\r\n [2020/11/13 20:34:45.813] {u'name': u'start', u'target': u'thread2'}\r\n [2020/11/13 20:34:45.813] {u'name': u'checkOut', u'thread': u'thread2'}\r\n [2020/11/13 20:34:45.813] {u'name': u'start', u'target': u'thread3'}\r\n [2020/11/13 20:34:45.813] {u'name': u'checkOut', u'thread': u'thread3'}\r\n [2020/11/13 20:34:45.813] {u'count': 4, u'name': u'waitForEvent', u'event': u'ConnectionCheckOutStarted'}\r\n [2020/11/13 20:34:45.813] {u'name': u'wait', u'ms': 100}\r\n [2020/11/13 20:34:45.813] {u'connection': u'conn0', u'name': u'checkIn'}\r\n [2020/11/13 20:34:45.813] {u'count': 4, u'name': u'waitForEvent', u'event': u'ConnectionCheckedOut'}\r\n [2020/11/13 20:34:45.813] Threads:\r\n [2020/11/13 20:34:45.813] {u'thread3': <SpecRunnerThread(thread3, started daemon 139906613507840)>, u'thread2': <SpecRunnerThread(thread2, started daemon 139906133255936)>, u'thread1': <SpecRunnerThread(thread1, started daemon 139906143745792)>}\r\n [2020/11/13 20:34:45.813] Connections:\r\n [2020/11/13 20:34:45.813] {u'conn0': SocketInfo(<ssl.SSLSocket object at 0x7f3e99839150>) at 139906839696336}\r\n [2020/11/13 20:34:45.813] Events:\r\n [2020/11/13 20:34:45.813] PoolCreatedEvent(('localhost', 27017), {'maxPoolSize': 10, 'waitQueueTimeoutMS': 5000.0})\r\n [2020/11/13 20:34:45.813] ConnectionCheckOutStartedEvent(('localhost', 27017))\r\n [2020/11/13 20:34:45.813] ConnectionCreatedEvent(('localhost', 27017), 1)\r\n [2020/11/13 20:34:45.813] ConnectionReadyEvent(('localhost', 27017), 1)\r\n [2020/11/13 20:34:45.813] ConnectionCheckedOutEvent(('localhost', 27017), 1)\r\n [2020/11/13 20:34:45.813] ConnectionCheckOutStartedEvent(('localhost', 27017))\r\n [2020/11/13 20:34:45.813] ConnectionCreatedEvent(('localhost', 27017), 2)\r\n [2020/11/13 20:34:45.813] ConnectionCheckOutStartedEvent(('localhost', 27017))\r\n [2020/11/13 20:34:45.813] ConnectionCreatedEvent(('localhost', 27017), 3)\r\n [2020/11/13 20:34:45.813] ConnectionReadyEvent(('localhost', 27017), 3)\r\n [2020/11/13 20:34:45.813] ConnectionCheckedOutEvent(('localhost', 27017), 3)\r\n [2020/11/13 20:34:45.813] ConnectionReadyEvent(('localhost', 27017), 2)\r\n [2020/11/13 20:34:45.813] ConnectionCheckedOutEvent(('localhost', 27017), 2)\r\n [2020/11/13 20:34:45.813] ConnectionCheckOutStartedEvent(('localhost', 27017))\r\n [2020/11/13 20:34:45.813] ConnectionCreatedEvent(('localhost', 27017), 4)\r\n [2020/11/13 20:34:45.813] ConnectionCheckedInEvent(('localhost', 27017), 1)\r\n [2020/11/13 20:34:45.813] ConnectionReadyEvent(('localhost', 27017), 4)\r\n [2020/11/13 20:34:45.813] ConnectionCheckedOutEvent(('localhost', 27017), 4)\r\n [2020/11/13 20:34:45.813]   test_cmap_pool_checkout_returned_connection_maxConnecting_threads_blocked_by_maxConnecting_check_out_returned_connections (test_cmap.TestCMAP) ... FAIL (12.421s)\r\n...\r\n [2020/11/13 20:40:03.560] FAIL [12.421s]: test_cmap_pool_checkout_returned_connection_maxConnecting_threads_blocked_by_maxConnecting_check_out_returned_connections (test_cmap.TestCMAP)\r\n [2020/11/13 20:40:03.560] ----------------------------------------------------------------------\r\n [2020/11/13 20:40:03.560] Traceback (most recent call last):\r\n [2020/11/13 20:40:03.560]   File \"/data/mci/c71b1abdc304e836c91992a1aa44d4d1/src/test/__init__.py\", line 444, in wrap\r\n [2020/11/13 20:40:03.560]     return f(*args, **kwargs)\r\n [2020/11/13 20:40:03.560]   File \"/data/mci/c71b1abdc304e836c91992a1aa44d4d1/src/test/test_cmap.py\", line 397, in run_scenario\r\n [2020/11/13 20:40:03.560]     self.run_scenario(scenario_def, test)\r\n [2020/11/13 20:40:03.560]   File \"/data/mci/c71b1abdc304e836c91992a1aa44d4d1/src/test/test_cmap.py\", line 238, in run_scenario\r\n [2020/11/13 20:40:03.560]     self.check_events(test['events'], test['ignore'])\r\n [2020/11/13 20:40:03.560]   File \"/data/mci/c71b1abdc304e836c91992a1aa44d4d1/src/test/test_cmap.py\", line 175, in check_events\r\n [2020/11/13 20:40:03.560]     self.check_event(actual, expected)\r\n [2020/11/13 20:40:03.560]   File \"/data/mci/c71b1abdc304e836c91992a1aa44d4d1/src/test/test_cmap.py\", line 163, in check_event\r\n [2020/11/13 20:40:03.560]     self.check_object(actual, expected)\r\n [2020/11/13 20:40:03.560]   File \"/data/mci/c71b1abdc304e836c91992a1aa44d4d1/src/test/test_cmap.py\", line 150, in check_object\r\n [2020/11/13 20:40:03.560]     self.assertEqual(type(actual), OBJECT_TYPES[expected['type']])\r\n [2020/11/13 20:40:03.560] AssertionError: <class 'pymongo.monitoring.ConnectionCheckedOutEvent'> != <class 'pymongo.monitoring.ConnectionCheckedInEvent'>\r\n```",
      "Rebased without any changes.",
      "I still see a few test failures:\r\n- https://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_rhel62_test_ssl__platform~rhel62_auth~auth_ssl~nossl_python_version~jython2.7_coverage~coverage_test_4.4_replica_set_patch_86d58113e52c8331ef83fd5849019c5422d7e62b_5fbc2edd3e8e86792f47e61c_20_11_23_21_51_26\r\n- https://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_rhel62_test_ssl__platform~rhel62_auth~auth_ssl~nossl_python_version~jython2.7_coverage~coverage_test_4.4_sharded_cluster_patch_86d58113e52c8331ef83fd5849019c5422d7e62b_5fbc2edd3e8e86792f47e61c_20_11_23_21_51_26\r\n\r\nI made a slight change to the maxConnecting timeout behavior but I'm not convinced it will solve the failures. I more so suspect that Python 2 (especially Jython) is failing frequently because threading is worse there and Condition variables are more expensive (On Python 2 they're implemented as spin locks).  This creates extra contention in the pool and causes the timeouts seen in the tests. \r\n\r\nSince we're dropping Python 2 support soon and this feature isn't required in PyMongo 3.x I think we should just merge the changes as is. @prashantmital any final thoughts?",
      "The latest change seems to resolve most of the python 2 issues. The same test failed only once and only on Jython: https://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_rhel62_test_ssl__platform~rhel62_auth~noauth_ssl~nossl_python_version~jython2.7_coverage~coverage_test_latest_sharded_cluster_patch_86d58113e52c8331ef83fd5849019c5422d7e62b_5fbc3836d1fe072958b98951_20_11_23_22_31_19"
    ],
    "commit_messages": [
      "PYTHON-2363 Rate limit new connection creations via maxConnecting (#511)\n\nAt most 2 connections can be in the pending state per connection pool.\r\nThe pending state covers all the work required to setup a new connection\r\nincluding TCP, TLS, and MongoDB authentication. For example, if two\r\nthreads are currently creating connections, a third thread will wait for\r\neither an existing connection to be checked back into the pool or for\r\none of the two threads to finish creating a connection.\r\n\r\nThe change reduces the likelihood of connection storms and improves the\r\ndriver's ability to reuse existing connections."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab344ee515ce6a4b2b0",
    "number": 510,
    "body": "…eEncryption",
    "head_branch": "PYTHON-2416/gc-topology-encryption-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2416 Properly close client in test_encryption.TestDataKeyDoubleEncryption (#510)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab444ee515ce6a4b2b1",
    "number": 509,
    "body": "",
    "head_branch": "PYTHON-2404/csfle-spec-tests",
    "is_a_fork": true,
    "comments": [
      "Interesting, this is an example of a transient network error to azure's KMS (timed out after 10 seconds):\r\n```\r\n ERROR: The read operation timed out (EncryptionError)\r\n Traceback (most recent call last):\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/pymongo/encryption.py\", line 73, in _wrap_encryption_errors\r\n     yield\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/pymongo/encryption.py\", line 476, in create_data_key\r\n     key_alt_names=key_alt_names)\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/venv-encryption/lib/python3.4/site-packages/pymongocrypt/explicit_encrypter.py\", line 135, in create_data_key\r\n     key = run_state_machine(ctx, self.callback)\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/venv-encryption/lib/python3.4/site-packages/pymongocrypt/state_machine.py\", line 150, in run_state_machine\r\n     callback.kms_request(kms_ctx)\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/pymongo/encryption.py\", line 118, in kms_request\r\n     data = conn.recv(kms_context.bytes_needed)\r\n   File \"/opt/python/3.4/lib/python3.4/ssl.py\", line 739, in recv\r\n     return self.read(buflen)\r\n   File \"/opt/python/3.4/lib/python3.4/ssl.py\", line 628, in read\r\n     v = self._sslobj.read(len or 1024)\r\n socket.timeout: The read operation timed out\r\n \r\n During handling of the above exception, another exception occurred:\r\n \r\n Traceback (most recent call last):\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/test/test_encryption.py\", line 717, in test_data_key_azure\r\n     self.run_test('azure')\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/test/test_encryption.py\", line 671, in run_test\r\n     key_alt_names=['%s_altname' % (provider_name,)])\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/pymongo/encryption.py\", line 476, in create_data_key\r\n     key_alt_names=key_alt_names)\r\n   File \"/opt/python/3.4/lib/python3.4/contextlib.py\", line 77, in __exit__\r\n     self.gen.throw(type, value, traceback)\r\n   File \"/data/mci/e26102f756f94819d90fed7a6d9fb081/src/pymongo/encryption.py\", line 79, in _wrap_encryption_errors\r\n     raise EncryptionError(exc)\r\n pymongo.errors.EncryptionError: The read operation timed out\r\n```\r\nhttps://evergreen.mongodb.com/task/mongo_python_driver_tests_python_version_rhel62_test_encryption__platform~rhel62_auth_ssl~noauth_nossl_python_version~3.4_encryption~encryption_test_4.2_standalone_patch_e49c418264c1a4dde833e16b1cbb1503f24223ec_5fa1eef2c9ec4404d34e4579_20_11_03_23_59_47",
      "Interesting to be able to observe the timeout on Azure! As per the spec, it doesn't seem like we should be adding any custom handling for that kind of an error so I suppose there is nothing to do there?\r\n\r\nI am also seeing the following in the test logs:\r\n\r\n```\r\n [2020/11/04 00:08:54.758]   Topology <Topology <TopologyDescription id: 5fa1f0698ad53cb215fa7405, topology_type: ReplicaSetWithPrimary, servers: [<ServerDescription ('localhost', 27017) server_type: RSPrimary, rtt: 0.000538420648610058>, <ServerDescription ('localhost', 27018) server_type: RSSecondary, rtt: 0.001056252019849808>, <ServerDescription ('localhost', 27019) server_type: RSArbiter, rtt: 0.0009123198919968762>]>> has THREADS RUNNING: [<PeriodicExecutor(name=pymongo_server_monitor_thread) object at 0x7ff450e41a90>, <PeriodicExecutor(name=pymongo_server_rtt_thread) object at 0x7ff450e41a50>, <PeriodicExecutor(name=pymongo_server_monitor_thread) object at 0x7ff450bfb350>, <PeriodicExecutor(name=pymongo_server_rtt_thread) object at 0x7ff450bfb250>, <PeriodicExecutor(name=pymongo_server_monitor_thread) object at 0x7ff450bfbc10>, <PeriodicExecutor(name=pymongo_server_rtt_thread) object at 0x7ff4524dbbd0>], created at:   File \"setup.py\", line 431, in <module>\r\n [2020/11/04 00:08:54.758]     **extra_opts\r\n [2020/11/04 00:08:54.758]   File \"/data/mci/1d06ce731bf44d878db71873b3380fd4/src/venv-encryption/lib/python3.7/site-packages/setuptools/__init__.py\", line 153, in setup\r\n [2020/11/04 00:08:54.758]     return distutils.core.setup(**attrs)\r\n [2020/11/04 00:08:54.758]   File \"/opt/python/3.7/lib/python3.7/distutils/core.py\", line 148, in setup\r\n [2020/11/04 00:08:54.758]     dist.run_commands()\r\n [2020/11/04 00:08:54.758]   File \"/opt/python/3.7/lib/python3.7/distutils/dist.py\", line 966, in run_commands\r\n [2020/11/04 00:08:54.758]     self.run_command(cmd)\r\n [2020/11/04 00:08:54.758]   File \"/opt/python/3.7/lib/python3.7/distutils/dist.py\", line 985, in run_command\r\n [2020/11/04 00:08:54.758]     cmd_obj.run()\r\n [2020/11/04 00:08:54.758]   File \"setup.py\", line 130, in run\r\n [2020/11/04 00:08:54.758]     result = runner.run(suite)\r\n [2020/11/04 00:08:54.758]   File \"/data/mci/1d06ce731bf44d878db71873b3380fd4/src/test/__init__.py\", line 874, in run\r\n [2020/11/04 00:08:54.758]     result = super(PymongoXMLTestRunner, self).run(test)\r\n [2020/11/04 00:08:54.758]   File \"/opt/python/3.7/lib/python3.7/site-packages/xmlrunner/runner.py\", line 66, in run\r\n [2020/11/04 00:08:54.758]     test(result)\r\n [2020/11/04 00:08:54.758]   File \"/opt/python/3.7/lib/python3.7/unittest/suite.py\", line 84, in __call__\r\n [2020/11/04 00:08:54.758]     return self.run(*args, **kwds)\r\n [2020/11/04 00:08:54.758]   File \"/opt/python/3.7/lib/python3.7/unittest/suite.py\", line 114, in run\r\n [2020/11/04 00:08:54.758]     self._handleClassSetUp(test, result)\r\n [2020/11/04 00:08:54.758]   File \"/opt/python/3.7/lib/python3.7/unittest/suite.py\", line 163, in _handleClassSetUp\r\n [2020/11/04 00:08:54.758]     setUpClass()\r\n [2020/11/04 00:08:54.758]   File \"/data/mci/1d06ce731bf44d878db71873b3380fd4/src/test/test_encryption.py\", line 630, in setUpClass\r\n [2020/11/04 00:08:54.758]     cls.client = rs_or_single_client(event_listeners=[cls.listener])\r\n [2020/11/04 00:08:54.758]   File \"/data/mci/1d06ce731bf44d878db71873b3380fd4/src/test/utils.py\", line 500, in rs_or_single_client\r\n [2020/11/04 00:08:54.758]     return _mongo_client(h, p, **kwargs)\r\n [2020/11/04 00:08:54.758]   File \"/data/mci/1d06ce731bf44d878db71873b3380fd4/src/test/utils.py\", line 461, in _mongo_client\r\n [2020/11/04 00:08:54.758]     **client_options)\r\n [2020/11/04 00:08:54.758]   File \"/data/mci/1d06ce731bf44d878db71873b3380fd4/src/pymongo/mongo_client.py\", line 727, in __init__\r\n [2020/11/04 00:08:54.758]     direct_connection=options.direct_connection)\r\n [2020/11/04 00:08:54.758]   File \"/data/mci/1d06ce731bf44d878db71873b3380fd4/src/pymongo/settings.py\", line 72, in __init__\r\n [2020/11/04 00:08:54.758]     self._stack = ''.join(traceback.format_stack())\r\n [2020/11/04 00:08:56.982] Finished 'shell.exec' in \"run tests\" in 5m27.200032659s\r\n [2020/11/04 00:08:56.982] Task completed - SUCCESS.\r\n```\r\n\r\nI will open a JIRA ticket to track this."
    ],
    "commit_messages": [
      "PYTHON-2404 Update CSFLE spec tests for KMS providers 'azure' and 'gcp' (#509)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab544ee515ce6a4b2b2",
    "number": 508,
    "body": "",
    "head_branch": "PYTHON-1960/use-venv",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1960 Use a virtualenv to run encryption tests (#508)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab644ee515ce6a4b2b3",
    "number": 507,
    "body": "Update GTM code.",
    "head_branch": "DOP-1671-update-gtm",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DOP-1671: update GTM code (#507)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab744ee515ce6a4b2b4",
    "number": 506,
    "body": "Depends on https://github.com/mongodb/libmongocrypt/pull/118",
    "head_branch": "PYTHON-2371/new-fle-keystores",
    "is_a_fork": true,
    "comments": [
      "Ready for another look @ShaneHarvey ",
      "@ShaneHarvey updated.",
      "I also opened https://jira.mongodb.org/browse/PYTHON-2405 to fix the `AttributeError: function/symbol 'mongocrypt_setopt_kms_providers' not found in library 'libmongocrypt.so.0':` test failures.",
      "Finally figured out why the tests weren't running - I wasn't exporting the environment variable names correctly.",
      "Can you schedule the latest patch to run python 2.7-3.6 to make sure the new tests work there too?"
    ],
    "commit_messages": [
      "PYTHON-2371 Add Azure and GCP support for CSFLE (#506)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab844ee515ce6a4b2b5",
    "number": 505,
    "body": "",
    "head_branch": "PYTHON-2367",
    "is_a_fork": true,
    "comments": [
      "This is ready for review. I'll open a new ticket for adding 3.9 to macOS which will be blocked on the build team."
    ],
    "commit_messages": [
      "PYTHON-2367 Add release automation for Python 3.9 (#505)\n\nPYTHON-2375 Reinstate macos system python workaround for missing wheel package\r\nIncrease task timeout because the manylinux build task takes >30 minutes."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab944ee515ce6a4b2b6",
    "number": 504,
    "body": "",
    "head_branch": "PYTHON-2344",
    "is_a_fork": true,
    "comments": [
      "> Do you think we should have a ticket for changing that slated for PyMongo 4.0?\r\n\r\nSure. We could even do it sooner since it's all internal only names."
    ],
    "commit_messages": [
      "PYTHON-2344 Update TLS examples to use unified TLS URI options (#504)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcab944ee515ce6a4b2b7",
    "number": 503,
    "body": "While chasing down a configuration issue I noticed the docs refer to `maxIdleTime` but that doesn't seem to exist in the code, but `maxIdleTimeMS` does. This just updates the FAQ so no one else trips on this.",
    "head_branch": "nloadholtes-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix maxIdleTimeMS typo in docs (#503)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaba44ee515ce6a4b2b8",
    "number": 502,
    "body": "MincePy is an ODM built on top of pymongo using the data-mapper pattern.\r\n\r\nBe great if you guys would be willing to include this in the list as I think it offers something quite different from most (if not all) of the other ODMs in that it doesn't require that users subclass from a common model class, which means that any arbitrary Python object can be made storable.  This is invaluable in situations when you don't own (i.e. they're not in your codebase) the types you want to save.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Very welcome.  And thanks for your enthusiasm, I've certainly found mincePy to be very useful for my work so hopefully there are others out there who could benefit too :)",
      "@muhrin can you share what use-case this library has helped you out with? Is it a big-data/analytics workflow? I'd love to find out more about how you use MongoDB if you're available for a call sometime.",
      "@prashantmital, fantastic, thanks a lot for merging this.\r\n\r\nIn short, I'm a physist at the Danish Technical University working on the discovery of new battery materials.  We run high-throughput quantum mechanical calculations, the results of which get used as training data for various machine learning models to accelerate the discovery process.  Through mincePy/pymongo MongoDB allows us to store all of this data, including the running workflows in once place where we can all collaborate together.  For me it's a total game changer over the old way of sending around tarballs or pointing people to shared paths.\r\n\r\nDo get in touch if you'd like to hear more, I'm always open to a call: maruh AT dtu DOT dk"
    ],
    "commit_messages": [
      "Added the mincePy ODM library to documented tools (#502)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcabb44ee515ce6a4b2b9",
    "number": 501,
    "body": "This reverts commit c54974067772f268a9a9dc6dbba0a490e6b8e842.\r\n\r\nThis should no longer be needed now that our toolchain installs dnspython<2.0.",
    "head_branch": "PYTHON-2362",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert \"PYTHON-2362 Use dnspython<2.0 to avoid timeouts (#484)\" (#501)\n\nThis reverts commit c54974067772f268a9a9dc6dbba0a490e6b8e842."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcabc44ee515ce6a4b2ba",
    "number": 500,
    "body": "",
    "head_branch": "PYTHON-2318/datalake-testing",
    "is_a_fork": true,
    "comments": [
      "Test failures are because the data lake tests are getting run even when we are not connected to data lake. I will implement a `skipTest` to prevent these but the remainder of this PR can be reviewed in the meantime. "
    ],
    "commit_messages": [
      "PYTHON-2318 Atlas Data Lake testing (#500)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcabd44ee515ce6a4b2bb",
    "number": 499,
    "body": "This change resyncs the session spec tests and updates the prose tests to ensure we comply with the updated spec.",
    "head_branch": "PYTHON-2308",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2308 Test that we exclusively depend on existence of logicalSessionsTimeoutMinutes for sessions support (#499)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcabe44ee515ce6a4b2bc",
    "number": 498,
    "body": "This change fixes two issues:\r\n\r\n1. PYTHON-2392 Implicit sessions should always be discarded after connection errors\r\n1. PYTHON-2075 Add more sessions tests with more read and write commands",
    "head_branch": "PYTHON-2075",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2392 Implicit sessions should always be discarded after connection errors (#498)\n\nPYTHON-2075 Add more sessions tests with more read and write commands"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcabf44ee515ce6a4b2bd",
    "number": 497,
    "body": "My testing approach uses the `assertSameLsidOnLastTwoCommands` spec test operation from the session spec test to assert that both attempts use the same implicit session. For now I added these tests to the `retryable_reads_custom` directory but I'm also planning to make push these changes upstream into the spec repo.",
    "head_branch": "PYTHON-2390",
    "is_a_fork": true,
    "comments": [
      "I'm going to close this PR and move this ticket into the backlog. The fix here introduces bugs for methods that return CommandCursors (aggregate_raw_batches, list_collections, etc.). A real fix needs to ensure that cursor methods save the implicit session for use later on in getMore commands.  "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcabf44ee515ce6a4b2be",
    "number": 496,
    "body": "Tested using a slightly modified version of the user-provided repro script:\r\n\r\n```\r\nimport gc\r\nfrom typing import Any\r\nfrom pymongo import MongoClient\r\nfrom bson.codec_options import CodecOptions\r\nfrom bson.codec_options import TypeCodec, TypeRegistry\r\n\r\n\r\n# %% Define method to analyse the memory\r\ndef memory_report(prefix):\r\n    gc.collect()\r\n    rr = {}\r\n\r\n    for obj in gc.get_objects():\r\n\r\n        tt = type(obj)\r\n        if ('bson.codec_options.CodecOptions' in str(tt)):\r\n            refs = gc.get_referrers(obj)\r\n            print(tt)\r\n            print(len(refs))\r\n            # if len(refs) == 1:\r\n            #     objgraph.show_refs([obj], filename='refs.png')\r\n            rr[tt] = rr.get(tt, 0) + 1\r\n\r\n    print(prefix + ' memory report:')\r\n    for key in rr:\r\n        nn = rr[key]\r\n        print(f' {key}: {nn}')\r\n\r\n\r\n# %% Create codec\r\n\r\nclass MyClass:\r\n    pass\r\n\r\n\r\nclass MyCodec(TypeCodec):  # type: ignore\r\n\r\n    @property\r\n    def python_type(self) -> Any:\r\n        return MyClass\r\n\r\n    def transform_python(self, value: Any) -> Any:\r\n        # print(f'transform_python: {value}')\r\n        return value\r\n\r\n    @property\r\n    def bson_type(self) -> Any:\r\n        return int\r\n\r\n    def transform_bson(self, value: Any) -> Any:\r\n        # print(f'transform_bson: {value}')\r\n        return value * 2\r\n\r\n\r\ncodec = MyCodec()\r\ntype_registry = TypeRegistry([codec])\r\ncodec_options = CodecOptions(type_registry=type_registry)\r\n\r\nclient = MongoClient(replicaset='repl0')\r\ndatabase = client['my_database']\r\ncollection = database['my_collection'].with_options(codec_options)\r\ncollection.drop()\r\n\r\nmemory_report('before ')\r\nfor ii in range(10):\r\n    collection.insert_one({'a': 2})\r\n    cursor = collection.find({})\r\n    for data in cursor:\r\n        assert data['a'] == 4\r\nmemory_report('after ')\r\n```",
    "head_branch": "PYTHON-2382/memory-leak-fix",
    "is_a_fork": true,
    "comments": [
      "@prashantmital Tested on my system and fixes the leak. Thanks!"
    ],
    "commit_messages": [
      "PYTHON-2382 Destroy codec options struct in _cbson._element_to_dict (#496)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac044ee515ce6a4b2bf",
    "number": 495,
    "body": "This change fixes PYTHON-2075 and PYTHON-2308 by resyncing the session spec tests. Resyncing the tests led to this test failure:\r\n```python\r\nFAIL: test_sessions_dirty_session_errors_Dirty_implicit_session_is_discarded_(non-cursor_returning_read) (test.test_session.TestSpec)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 444, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 444, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_session.py\", line 1395, in run_scenario\r\n    self.run_scenario(scenario_def, test)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 641, in run_scenario\r\n    self.run_test_ops(sessions, collection, test)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 547, in run_test_ops\r\n    self.run_operations(sessions, collection, test['operations'])\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 458, in run_operations\r\n    self._run_op(sessions, collection, op, in_with_transaction)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 448, in _run_op\r\n    result = self.run_operation(sessions, collection, op.copy())\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 393, in run_operation\r\n    result = cmd(**dict(arguments))\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_session.py\", line 1373, in assert_different_lsid_on_last_two_commands\r\n    self.assertNotEqual(event1.command['lsid'], event2.command['lsid'])\r\nAssertionError: {'id': Binary(b'PY\\x1f247@\\x7f\\x890!\\x90\\xd0\\xfe\\xb1\\\\', 4)} == {'id': Binary(b'PY\\x1f247@\\x7f\\x890!\\x90\\xd0\\xfe\\xb1\\\\', 4)}\r\n```\r\n\r\nThe bug is that pymongo does not always mark an implicit session as \"dirty\" after a network error. To fix this I made two changes:\r\n\r\n1. If `MongoClient._tmp_session` yields an implicit session, it calls `mark_dirty()` on connection errors to ensure the session is discarded.\r\n2. The retryable read code path was updated to call `MongoClient._tmp_session()`. This change ensures that both retryable read attempts use the same implicit session.\r\n\r\n1 and 2 are really two independent bugs so I'll open two bug tickets to make it easier to track these changes (on Monday).",
    "head_branch": "PYTHON-2075",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac144ee515ce6a4b2c0",
    "number": 494,
    "body": "Two changes:\r\n- PYTHON-2357 Specify error label in retryable writes test (simply resyncs the tests).\r\n- PYTHON-2356 Add errorLabelsContain/errorLabelsOmit support to retryable writes tests (implemented by transforming the retryable write test into the transaction test format).",
    "head_branch": "PYTHON-2357",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2357 Specify error label in retryable writes test (#494)\n\nPYTHON-2356 Add errorLabelsContain/errorLabelsOmit support to retryable writes tests"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac244ee515ce6a4b2c1",
    "number": 493,
    "body": "This uncovered a minor oversight in our minPoolSize connection creation logic. We did create the connection but we did not ensure that the connection was authenticated. Connections created in the background (for minPoolSize) are now authenticated. This is a minor performance improvement (lower latency on first connection use).",
    "head_branch": "PYTHON-2360",
    "is_a_fork": true,
    "comments": [
      "> Can you explain how this results in improved performance?\r\n\r\nBefore this change the background thread which creates minPoolSize connections would only create the connection and run the handshake. This means that the first operation which using that connection needs to authenticate which incurs added latency.\r\n\r\nAfter this change, the background thread creates the connection and authenticates it too.\r\n\r\n>  I'm guessing that the second call would result in a no-op but it is not clear to me how?\r\n\r\nYes the second call is a no-op. Each SocketInfo caches the set of credentials which have already been authenticated. See the implementation of check_auth: https://github.com/mongodb/mongo-python-driver/blob/83578dc35fb97a94684bab36c5b2572e99642c65/pymongo/pool.py#L784-L793"
    ],
    "commit_messages": [
      "PYTHON-2360 Ensure ConnectionCreatedEvents are emitted before ConnectionReadyEvents (#493)\n\nConnections created in the background (for minPoolSize) are authenticated."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac344ee515ce6a4b2c2",
    "number": 492,
    "body": "I've performed the following requests in the drivers ticket:\r\n\r\n> - Audit the driver for uses of error messages to make decisions\r\n> - For each error message, determine the server's related error code and check that first, falling back to error message matching to avoid breaking changes with old server versions.\r\n>\r\n> For example, the Python driver does an exact match on the error message \"ns not found\". It should attempt to match error code 26 first, matching the error message as a fallback. The fallback is necessary to avoid a backward breaking change with MongoDB 2.6 and 3.0 which do not return an error code.\r\n\r\n\r\nI also removed the \"db assertion failure\" check which was removed by the server in MongoDB 2.5.\r\n",
    "head_branch": "PYTHON-2342",
    "is_a_fork": true,
    "comments": [
      "This is ready for review. I had to revert the PYTHON-2381 changes because of backwards compatibility concerns with 2.6/3.0."
    ],
    "commit_messages": [
      "PYTHON-2342 Prefer checking error codes over error messages (#492)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac444ee515ce6a4b2c3",
    "number": 491,
    "body": "Tested here: https://evergreen.mongodb.com/version/5f6e5959d6d80a45fc929848",
    "head_branch": "PYTHON-2375",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2375 Remove macos system python workaround for missing wheel package (#491)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac444ee515ce6a4b2c4",
    "number": 490,
    "body": "I would like to help people that don't know english to use Pymongo",
    "head_branch": "spanish-tutorial",
    "is_a_fork": true,
    "comments": [
      "First off, thank you for this contribution! Unfortunately we will not be able to merge this as our team does not have the resources to maintain our docs in other languages. You are more than welcome to fork this project and host the Spanish tutorial on your own. [ReadTheDocs](https://readthedocs.org/) makes this pretty simple and it even has support for localization and custom translations: https://docs.readthedocs.io/en/stable/guides/manage-translations.html "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac544ee515ce6a4b2c5",
    "number": 489,
    "body": "",
    "head_branch": "PYTHON-2376/change-stream-test-failures",
    "is_a_fork": true,
    "comments": [
      "This needs to be rebased onto master."
    ],
    "commit_messages": [
      "PYTHON-2376 Fix change stream test failures due to new updateDescription.truncatedArrays field in changeEvent documents (#489)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac644ee515ce6a4b2c6",
    "number": 488,
    "body": "",
    "head_branch": "document-release-process",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1631 Document new release process (#488)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac744ee515ce6a4b2c7",
    "number": 487,
    "body": "Tested here: https://evergreen.mongodb.com/version/5f61533de3c3314c4c6884ff",
    "head_branch": "PYTHON-2345",
    "is_a_fork": true,
    "comments": [
      "> Just one question - why don't we test with PyPy as well?\r\n\r\nI don't test pypy here because we don't publish wheels for pypy. Pypy users will install from the .tar.gz `sdist` package. I think it's possible to publish pypy wheels we just don't do it yet."
    ],
    "commit_messages": [
      "PYTHON-2345 Ensure release files can be installed (#487)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac844ee515ce6a4b2c8",
    "number": 486,
    "body": "Tested here: https://evergreen.mongodb.com/version/5f5c16890305b97395debec5\r\n\r\nHere are the new files:\r\n```\r\n[2020/09/12 00:32:00.273] pymongo-3.11.1.dev1-cp27-cp27m-macosx_10_14_intel.whl\r\n[2020/09/12 00:32:00.273] pymongo-3.11.1.dev1-cp34-cp34m-macosx_10_6_intel.whl\r\n[2020/09/12 00:32:00.273] pymongo-3.11.1.dev1-cp35-cp35m-macosx_10_6_intel.whl\r\n[2020/09/12 00:32:00.273] pymongo-3.11.1.dev1-cp36-cp36m-macosx_10_6_intel.whl\r\n[2020/09/12 00:32:00.273] pymongo-3.11.1.dev1-cp37-cp37m-macosx_10_6_intel.whl\r\n[2020/09/12 00:32:00.273] pymongo-3.11.1.dev1-cp38-cp38-macosx_10_9_x86_64.whl\r\n[2020/09/12 00:32:00.273] pymongo-3.11.1.dev1-py2.7-macosx-10.14-intel.egg\r\n```",
    "head_branch": "PYTHON-2372",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2372 Build macOS releases in Evergreen (#486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcac944ee515ce6a4b2c9",
    "number": 485,
    "body": "This change adds testing for Python 3.9 and fixes:\r\n```\r\n[2020/09/10 20:55:18.185] FAIL [0.002s]: test_instantiation (test_custom_types.TestBSONTypeEnDeCodecs)\r\n[2020/09/10 20:55:18.185] ----------------------------------------------------------------------\r\n[2020/09/10 20:55:18.185] TypeError: Can't instantiate abstract class testcodec with abstract method transform_python\r\n[2020/09/10 20:55:18.185] During handling of the above exception, another exception occurred:\r\n[2020/09/10 20:55:18.185] Traceback (most recent call last):\r\n[2020/09/10 20:55:18.185]   File \"/data/mci/183724bc86e179ad6d136f6b74916c26/src/test/test_custom_types.py\", line 270, in test_instantiation\r\n[2020/09/10 20:55:18.185]     run_test(TypeEncoder, {'python_type': MyType,}, fail=True)\r\n[2020/09/10 20:55:18.185]   File \"/data/mci/183724bc86e179ad6d136f6b74916c26/src/test/test_custom_types.py\", line 263, in run_test\r\n[2020/09/10 20:55:18.185]     codec()\r\n[2020/09/10 20:55:18.185] AssertionError: \"Can't instantiate abstract class .* with abstract methods .*\" does not match \"Can't instantiate abstract class testcodec with abstract method transform_python\"\r\n```\r\n\r\nI've opened https://jira.mongodb.org/browse/PYTHON-2365 and https://jira.mongodb.org/browse/PYTHON-2366 as follow up work to test snappy, FLE, and OCSP. You'll notice this is also based on https://github.com/mongodb/mongo-python-driver/pull/484 to get the tests green.\r\n",
    "head_branch": "PYTHON-2262",
    "is_a_fork": true,
    "comments": [
      "Rebased to remove the \"PYTHON-2362 Use dnspython<2.0 to avoid timeouts\" commit which was already merged."
    ],
    "commit_messages": [
      "PYTHON-2262 Test Python 3.9 in Evergreen (#485)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaca44ee515ce6a4b2ca",
    "number": 484,
    "body": "There seems to be a bug in dnspython 2.0 related to SRV lookups. For now we should downgrade to `dnspython<2.0` to get the test suite green.",
    "head_branch": "PYTHON-2362",
    "is_a_fork": true,
    "comments": [
      "The problem is with Eventlet, right? Probably why no one has complained.",
      "Yes this is an eventlet problem. dnspython 2.0 works fine up until eventlet is imported:\r\n```python\r\n>>> from dns import resolver\r\n>>> resolver.query('_mongodb._tcp.test5.test.build.10gen.cc', 'SRV', lifetime=5)\r\n<stdin>:1: DeprecationWarning: please use dns.resolver.resolve() instead\r\n<dns.resolver.Answer object at 0x7fb575599940>\r\n>>> import eventlet\r\n>>> resolver.query('_mongodb._tcp.test5.test.build.10gen.cc', 'SRV', lifetime=5)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ubuntu/venv/lib/python3.8/site-packages/dns/resolver.py\", line 1221, in query\r\n    return resolve(qname, rdtype, rdclass, tcp, source,\r\n  File \"/home/ubuntu/venv/lib/python3.8/site-packages/dns/resolver.py\", line 1205, in resolve\r\n    return get_default_resolver().resolve(qname, rdtype, rdclass, tcp, source,\r\n  File \"/home/ubuntu/venv/lib/python3.8/site-packages/dns/resolver.py\", line 1043, in resolve\r\n    timeout = self._compute_timeout(start, lifetime)\r\n  File \"/home/ubuntu/venv/lib/python3.8/site-packages/dns/resolver.py\", line 950, in _compute_timeout\r\n    raise Timeout(timeout=duration)\r\ndns.exception.Timeout: The DNS operation timed out after 5.10618257522583 seconds\r\n```\r\n\r\nThis should be fixed by eventlet: https://github.com/eventlet/eventlet/issues/619.",
      "> Should we cut a 3.11.1 release that pins DNSPython to <2 so that new installs of PyMongo can still talk to Atlas? This seems like a massive issue...\r\n\r\nI don't think this is a massive issue and I'm not sure we should do anything else. eventlet>=0.26.1 was released which pins to `dnspython<2.0` and pymongo already specifies `dnspython<2.0` [here](https://github.com/mongodb/mongo-python-driver/blob/add995feb4793129b4971c4e29670f35a4f7619b/setup.py#L368):\r\n```\r\n    extras_require.update({'srv': [\"dnspython>=1.16.0,<2.0.0\"]})\r\n```\r\n"
    ],
    "commit_messages": [
      "PYTHON-2362 Use dnspython<2.0 to avoid timeouts (#484)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaca44ee515ce6a4b2cb",
    "number": 483,
    "body": "",
    "head_branch": "SPEC-1582/uuid-extjson",
    "is_a_fork": true,
    "comments": [
      "I took the opportunity to resync all bson corpus spec tests.",
      "@ShaneHarvey ready for another look."
    ],
    "commit_messages": [
      "PYTHON-2361 Support parsing  as extended JSON representation for subtype 4 binary (#483)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcacb44ee515ce6a4b2cc",
    "number": 482,
    "body": "Open question: Should we throw an exception if the user tries to change the `JSONMode` via `with_options`?",
    "head_branch": "PYTHON-2354/JSONOptions.with_option-support",
    "is_a_fork": true,
    "comments": [
      "Can you open a ticket for the SRV test failures? \r\n```\r\n [2020/09/09 00:30:19.743] ERROR [21.125s]: test_addition (test_srv_polling.TestSrvPolling)\r\n [2020/09/09 00:30:19.743] ----------------------------------------------------------------------\r\n [2020/09/09 00:30:19.743] Traceback (most recent call last):\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/pymongo/srv_resolver.py\", line 72, in _resolve_uri\r\n [2020/09/09 00:30:19.743]     results = resolver.query('_mongodb._tcp.' + self.__fqdn, 'SRV',\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/test/utils.py\", line 307, in __call__\r\n [2020/09/09 00:30:19.743]     return self._function(*args, **kwargs)\r\n [2020/09/09 00:30:19.743]   File \"/opt/python/3.8/lib/python3.8/site-packages/dns/resolver.py\", line 1221, in query\r\n [2020/09/09 00:30:19.743]     return resolve(qname, rdtype, rdclass, tcp, source,\r\n [2020/09/09 00:30:19.743]   File \"/opt/python/3.8/lib/python3.8/site-packages/dns/resolver.py\", line 1205, in resolve\r\n [2020/09/09 00:30:19.743]     return get_default_resolver().resolve(qname, rdtype, rdclass, tcp, source,\r\n [2020/09/09 00:30:19.743]   File \"/opt/python/3.8/lib/python3.8/site-packages/dns/resolver.py\", line 1043, in resolve\r\n [2020/09/09 00:30:19.743]     timeout = self._compute_timeout(start, lifetime)\r\n [2020/09/09 00:30:19.743]   File \"/opt/python/3.8/lib/python3.8/site-packages/dns/resolver.py\", line 950, in _compute_timeout\r\n [2020/09/09 00:30:19.743]     raise Timeout(timeout=duration)\r\n [2020/09/09 00:30:19.743] dns.exception.Timeout: The DNS operation timed out after 21.122992515563965 seconds\r\n [2020/09/09 00:30:19.743] During handling of the above exception, another exception occurred:\r\n [2020/09/09 00:30:19.743] Traceback (most recent call last):\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/test/test_srv_polling.py\", line 165, in test_addition\r\n [2020/09/09 00:30:19.743]     self.run_scenario(response, True)\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/test/test_srv_polling.py\", line 153, in run_scenario\r\n [2020/09/09 00:30:19.743]     client = MongoClient(self.CONNECTION_STRING)\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/pymongo/mongo_client.py\", line 639, in __init__\r\n [2020/09/09 00:30:19.743]     res = uri_parser.parse_uri(\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/pymongo/uri_parser.py\", line 500, in parse_uri\r\n [2020/09/09 00:30:19.743]     nodes = dns_resolver.get_hosts()\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/pymongo/srv_resolver.py\", line 102, in get_hosts\r\n [2020/09/09 00:30:19.743]     _, nodes = self._get_srv_response_and_hosts(True)\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/pymongo/srv_resolver.py\", line 83, in _get_srv_response_and_hosts\r\n [2020/09/09 00:30:19.743]     results = self._resolve_uri(encapsulate_errors)\r\n [2020/09/09 00:30:19.743]   File \"/data/mci/7519f65052e35304de9578b97269a64e/src/pymongo/srv_resolver.py\", line 79, in _resolve_uri\r\n [2020/09/09 00:30:19.743]     raise ConfigurationError(str(exc))\r\n [2020/09/09 00:30:19.743] pymongo.errors.ConfigurationError: The DNS operation timed out after 21.122992515563965 seconds\r\n```",
      "Opened https://jira.mongodb.org/browse/PYTHON-2362 for SRV failures.\r\n"
    ],
    "commit_messages": [
      "PYTHON-2354 Add support for JSONOptions.with_options (#482)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcacc44ee515ce6a4b2cd",
    "number": 481,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2351",
    "head_branch": "PYTHON-2351",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2351 Update sdam monitoring tests with directConnection uri option (#481)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcacd44ee515ce6a4b2ce",
    "number": 480,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@ishmum123 instead of adding a mention in the commit message, perhaps you'd like to add your name to https://github.com/mongodb/mongo-python-driver/blob/master/doc/contributors.rst ? Just adding yourself to the tail end of that list will suffice. These names are visible in our documentation here: https://pymongo.readthedocs.io/en/stable/contributors.html",
      "Thank you very much, I would be delighted to..."
    ],
    "commit_messages": [
      "PYTHON-1915: Prohibit copying ClientSession objects (#480)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcace44ee515ce6a4b2cf",
    "number": 479,
    "body": "",
    "head_branch": "fix/replace_one",
    "is_a_fork": true,
    "comments": [
      "@ShaneHarvey @prashantmital Please check this PR. I am unable to assign it to you guys and not able to tag you guys on the JIRA platform.",
      "Hi @shreybatra. First of all, thanks for your PR.\r\n\r\nUnfortunately, we cannot currently merge this PR as this change would cause a backward-breaking change in driver behavior (consider, e.g. apps that currently use keys with dots - these will break after they update to PyMongo 3.12). Furthermore, we already have a mechanism for checking BSON keys for dots that we would use for this purpose (instead of the new validation function you have written in this PR) - see e.g. the `check_keys` kwarg of [BSON.encode](https://pymongo.readthedocs.io/en/stable/api/bson/index.html#bson.BSON.encode).\r\n\r\nIf you'd like to modify your PR to use `check_keys` for this purpose, we can come back to it and merge it back in once we start working on PyMongo 4.0 (currently expected to be the next version after 3.12).",
      "Great thanks. Just for a head's up, for codebase of PyMongo v4.0, which branch should I see? The master is supposed to be for v3.12 I guess.",
      "Correct, master is currently tracking 3.12. We don't have a branch for 4.0. Once 3.12 is released, `master` will become the working branch for 4.0.",
      "We've disabled checking for dots and dollar signs across the board. The change will be released in PyMongo 3.12 and 4.0. See  https://github.com/mongodb/mongo-python-driver/commit/640fee9d5d7c937cb39dedd3218178c76b927631 and https://github.com/mongodb/mongo-python-driver/commit/ccb62d4c1bed0817f635bd2e0aaa822adf606027"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcacf44ee515ce6a4b2d0",
    "number": 478,
    "body": "Tested here: https://evergreen.mongodb.com/version/5f35d25dd6d80a0c926f8db0",
    "head_branch": "PYTHON-2339",
    "is_a_fork": true,
    "comments": [
      "Probably a good idea to add testing for all the wheels in a follow up ticket: https://jira.mongodb.org/browse/PYTHON-2345"
    ],
    "commit_messages": [
      "PYTHON-2339 Build manylinux2014_aarch64/ppc64le/s390x releases (#478)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcacf44ee515ce6a4b2d1",
    "number": 477,
    "body": "Add 60 second timeout for joining threads in SDAM tests.",
    "head_branch": "PYTHON-2332",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2332 Skip threaded SDAM tests when cdecimal is monkey patched (#477)\n\nAdd 60 second timeout for joining threads in SDAM tests."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad044ee515ce6a4b2d2",
    "number": 476,
    "body": "",
    "head_branch": "release-3.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "BUMP 3.11 (#476)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad144ee515ce6a4b2d3",
    "number": 475,
    "body": "This is a follow on to: https://github.com/mongodb/mongo-python-driver/pull/472\r\n\r\nBefore the fixes this test would fail like this:\r\n```\r\n======================================================================\r\nERROR: test_gevent_timeout (test.test_client.TestMongoClientFailover)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_client.py\", line 1975, in test_gevent_timeout\r\n    self.assertIsNone(ct.get())\r\n  File \"src/gevent/greenlet.py\", line 769, in gevent._gevent_cgreenlet.Greenlet.get\r\n  File \"src/gevent/greenlet.py\", line 364, in gevent._gevent_cgreenlet.Greenlet._raise_exception\r\n  File \"/Users/shane/git/mongo-python-driver/venv3.8/lib/python3.8/site-packages/gevent/_compat.py\", line 65, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"src/gevent/greenlet.py\", line 854, in gevent._gevent_cgreenlet.Greenlet.run\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_client.py\", line 1959, in contentious_task\r\n    coll.find_one({'$where': delay(1)})\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/collection.py\", line 1319, in find_one\r\n    for result in cursor.limit(-1):\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 1207, in next\r\n    if len(self.__data) or self._refresh():\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 1124, in _refresh\r\n    self.__send_message(q)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/cursor.py\", line 999, in __send_message\r\n    response = client._run_operation_with_response(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1368, in _run_operation_with_response\r\n    return self._retryable_read(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1471, in _retryable_read\r\n    return func(session, server, sock_info, slave_ok)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py\", line 120, in __exit__\r\n    next(self.gen)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1312, in _slaveok_for_server\r\n    yield sock_info, slave_ok\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py\", line 120, in __exit__\r\n    next(self.gen)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1255, in _get_socket\r\n    yield sock_info\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py\", line 120, in __exit__\r\n    next(self.gen)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 1238, in get_socket\r\n    self.return_socket(sock_info)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/pool.py\", line 1317, in return_socket\r\n    self._socket_semaphore.release()\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/thread_util.py\", line 86, in release\r\n    return Semaphore.release(self)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/thread_util.py\", line 64, in release\r\n    self._cond.acquire()\r\n  File \"/Users/shane/git/mongo-python-driver/venv3.8/lib/python3.8/site-packages/gevent/thread.py\", line 118, in acquire\r\n    acquired = BoundedSemaphore.acquire(self, blocking, timeout)\r\n  File \"src/gevent/_semaphore.py\", line 143, in gevent._gevent_c_semaphore.Semaphore.acquire\r\n  File \"src/gevent/_semaphore.py\", line 178, in gevent._gevent_c_semaphore.Semaphore.acquire\r\n  File \"src/gevent/_abstract_linkable.py\", line 381, in gevent._gevent_c_abstract_linkable.AbstractLinkable._wait\r\n  File \"src/gevent/_abstract_linkable.py\", line 346, in gevent._gevent_c_abstract_linkable.AbstractLinkable._wait_core\r\n  File \"src/gevent/_abstract_linkable.py\", line 352, in gevent._gevent_c_abstract_linkable.AbstractLinkable._wait_core\r\n  File \"src/gevent/_abstract_linkable.py\", line 348, in gevent._gevent_c_abstract_linkable.AbstractLinkable._wait_core\r\n  File \"src/gevent/_abstract_linkable.py\", line 303, in gevent._gevent_c_abstract_linkable.AbstractLinkable._AbstractLinkable__wait_to_be_notified\r\n  File \"src/gevent/_greenlet_primitives.py\", line 61, in gevent._gevent_c_greenlet_primitives.SwitchOutGreenletWithLoop.switch\r\n  File \"src/gevent/_greenlet_primitives.py\", line 61, in gevent._gevent_c_greenlet_primitives.SwitchOutGreenletWithLoop.switch\r\n  File \"src/gevent/_greenlet_primitives.py\", line 65, in gevent._gevent_c_greenlet_primitives.SwitchOutGreenletWithLoop.switch\r\n  File \"src/gevent/_gevent_c_greenlet_primitives.pxd\", line 35, in gevent._gevent_c_greenlet_primitives._greenlet_switch\r\ngevent.timeout.Timeout: 10 seconds\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 10.015s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nAfter the changes in PYTHON-2334 the test passes.\r\n\r\nCC: @TylerWilley ",
    "head_branch": "PYTHON-2334",
    "is_a_fork": true,
    "comments": [
      "This is blocked on the 3.6+ sharded cluster test failures:\r\n```\r\n [2020/07/29 23:37:12.266] ERROR [20.041s]: test_send_hedge (test_read_preferences.TestMongosAndReadPreference)\r\n [2020/07/29 23:37:12.266] ----------------------------------------------------------------------\r\n [2020/07/29 23:37:12.266] Traceback (most recent call last):\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/test/__init__.py\", line 444, in wrap\r\n [2020/07/29 23:37:12.266]     return f(*args, **kwargs)\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/test/test_read_preferences.py\", line 632, in test_send_hedge\r\n [2020/07/29 23:37:12.266]     coll.find_one()\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/collection.py\", line 1319, in find_one\r\n [2020/07/29 23:37:12.266]     for result in cursor.limit(-1):\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/cursor.py\", line 1207, in next\r\n [2020/07/29 23:37:12.266]     if len(self.__data) or self._refresh():\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/cursor.py\", line 1124, in _refresh\r\n [2020/07/29 23:37:12.266]     self.__send_message(q)\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/cursor.py\", line 1001, in __send_message\r\n [2020/07/29 23:37:12.266]     address=self.__address)\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/mongo_client.py\", line 1372, in _run_operation_with_response\r\n [2020/07/29 23:37:12.266]     exhaust=exhaust)\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/mongo_client.py\", line 1471, in _retryable_read\r\n [2020/07/29 23:37:12.266]     return func(session, server, sock_info, slave_ok)\r\n [2020/07/29 23:37:12.266]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/mongo_client.py\", line 1366, in _cmd\r\n [2020/07/29 23:37:12.266]     unpack_res)\r\n [2020/07/29 23:37:12.267]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/server.py\", line 137, in run_operation_with_response\r\n [2020/07/29 23:37:12.267]     first, sock_info.max_wire_version)\r\n [2020/07/29 23:37:12.267]   File \"/data/mci/720718fde188c25a0d53d0b1c1d3de80/src/pymongo/helpers.py\", line 168, in _check_command_response\r\n [2020/07/29 23:37:12.267]     max_wire_version)\r\n [2020/07/29 23:37:12.267] pymongo.errors.OperationFailure: Encountered non-retryable error during query :: caused by :: Could not find host matching read preference { mode: \"secondary\", hedge: { enabled: true } } for set 2b0c4068-ce33-4281-b57e-f67ce1ce77ed, full error: {'ok': 0.0, 'errmsg': 'Encountered non-retryable error during query :: caused by :: Could not find host matching read preference { mode: \"secondary\", hedge: { enabled: true } } for set 2b0c4068-ce33-4281-b57e-f67ce1ce77ed', 'code': 133, 'codeName': 'FailedToSatisfyReadPreference', '$clusterTime': {'clusterTime': Timestamp(1596065694, 1), 'signature': {'hash': b'vs_\\xdb\\x0b\\xab\\xf8\\xe6\\xbbG\\xaa<\\xba,\\xa2\\xc9\\xde\\xa5\\xdc\\xb0', 'keyId': 6855047922183045142}}, 'operationTime': Timestamp(1596065694, 1)}\r\n [2020/07/29 23:37:12.499] ----------------------------------------------------------------------\r\n```"
    ],
    "commit_messages": [
      "PYTHON-2334 Add regression test for gevent.Timeout compatibility (#475)\n\nUse with statement in Semaphore.release."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad244ee515ce6a4b2d4",
    "number": 474,
    "body": "",
    "head_branch": "PYTHON-2219/document-hidden-index-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2219 Document hidden index option (#474)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad344ee515ce6a4b2d5",
    "number": 473,
    "body": "",
    "head_branch": "PYTHON-1631",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1631 Automate release wheels for Windows and manylinux (#473)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad444ee515ce6a4b2d6",
    "number": 472,
    "body": "Gevent patches the Lock class such that it can raise Timeout exceptions while waiting in .acquire()\r\n\r\nWhen these raise, it can cause the pymongo thread_util.py:Semaphore to exit the acquire() function without releasing self._cond's lock. Changing to `with self._cond` guarantees release even if an exception is raised by gevent.\r\n\r\nAlso, in pool.py, when waiting for the lock for active sockets, this same condition could occur and cause self._socket_semaphore's lock to be lost.",
    "head_branch": "tw/fix_possible_gevent_race",
    "is_a_fork": true,
    "comments": [
      "Hi @TylerWilley, can you provide some sample code that reproduces this issue?",
      "```\r\nimport time\r\nfrom gevent import monkey, Greenlet, Timeout\r\nmonkey.patch_all()\r\n\r\nimport threading\r\nfrom pymongo.thread_util import Semaphore\r\n\r\nx = Semaphore()\r\n\r\ndef BrokenThread():\r\n    with Timeout(1):\r\n        try:\r\n            x.acquire()\r\n            print(\"Greenlet acquired lock\")\r\n        except Timeout:\r\n            print(\"Greenlet timedout\")\r\n\r\ndef ContentiousThread():\r\n    x.acquire()\r\n    time.sleep(2)\r\n    x.release()\r\n\r\nct = Greenlet.spawn(ContentiousThread)\r\nbt = Greenlet.spawn(BrokenThread)\r\n\r\nct.join()\r\nbt.join()\r\n\r\nprint(\"Condition Lock State:\", x._cond._lock.locked())\r\n```\r\n\r\n\r\nExpected:\r\n```\r\nGreenlet timedout\r\nCondition Lock State: False\r\n```\r\n\r\n\r\nActual:\r\n```\r\nGreenlet timedout\r\nTraceback (most recent call last):\r\n  File \"test_thread_utils.py\", line 27, in <module>\r\n    ct.join()\r\n  File \"/Users/twilley56/.pyenv/versions/3.6.9/lib/python3.6/site-packages/gevent/greenlet.py\", line 812, in join\r\n    result = get_my_hub(self).switch()\r\n  File \"/Users/twilley56/.pyenv/versions/3.6.9/lib/python3.6/site-packages/gevent/_greenlet_primitives.py\", line 65, in switch\r\n    return _greenlet_switch(self) # pylint:disable=undefined-variable\r\ngevent.exceptions.LoopExit: This operation would block forever\r\n\tHub: <Hub '' at 0x108a31d58 select default pending=0 ref=0 thread_ident=0x10a4555c0>\r\n\tHandles:\r\n[]\r\n```\r\n\r\n(This is because gevent runs coroutines, and no coroutine is able to run, given that only 2 coroutines are running. One waiting for ct.join, and another waiting for x.release, since neither can run and no other coroutine is running to unlock either lock, gevent halts)",
      "Thanks @TylerWilley! I've opened https://github.com/mongodb/mongo-python-driver/pull/475 to add a regression test for gevent.Timeout and fix Semaphore.release."
    ],
    "commit_messages": [
      "PYTHON-2334: Fix gevent.Timeout race condition (#472)\n\nIf gevent raises a Timeout during self.lock acquisition, a _socket_semaphore count will be lost.\r\nUsing \"with\" will release the condition even on exception being raised."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad544ee515ce6a4b2d7",
    "number": 471,
    "body": "Gevent patches Lock objects such that when acquire is called on a lock, the context can switch to other coroutines.\r\nGevent also allows you to set a Timeout on executing code.\r\n\r\nIf you set a Timeout, and the Timeout is raised during this lock's acquire() section, then pymongo will have acquired _socket_semaphore, but not released it. Thus permanently losing a count on the semaphore.",
    "head_branch": "tw/fix_possible_gevent_race",
    "is_a_fork": true,
    "comments": [
      "Did you determine that this was not an issue in pymongo?",
      "So I think I figured out what's going on.\n\nGevent patches .acquire() so that it can switch out to other coroutines.\n\nDuring threading.Condition:wait(), 2 .acquire calls are made, one for the\nwaiter, and one to re-acquire Condition._lock before modifying _waiters\n(see threading.py:263)\n\nIf a timeout occurs during waiter.acquire(), Condition.wait's finally\nclause will catch it, re-acquire ._lock, and then raise, raising through\npymongo, which should release the lock.\n\nIf a timeout occurs during _lock.acquire(), this is due to someone else\nhaving the Condition._lock, and Condition will raise without removing the\nwaiter lock from _waiters. In this case, if pymongo caught the exception\nand released the lock it would be releasing a lock someone else owned.\n\nSo I believe I've found a fix that is 2 fold.\n\n1. Modify pymongo to use `with self._cond:`, I'll update and resubmit the\nPR. To anyone not using gevent, this will be transparent. To anyone using\ngevent, this will be an improvement if they use timeouts... It will prevent\nthe deadlock, but introduce the possibility of concurrent modification of\n_waiters\n\n2. Create a new version of Condition that loops on _lock.acquire(),\ncatching any Timeout exceptions to guarantee that the lock is acquired,\nremove the waiter from _waiters, then re-raise the Timeout exception that\nwas caught.\n\nWith both of these, it may delay the gevent Timeout being raised (nothing\nnew there with coroutines though), but will prevent any concurrent\nmodification of _waiters, and also prevent any unreleased locks from\noccurring.\n\n-Tyler\n\nOn Fri, Jul 24, 2020 at 3:45 PM Shane Harvey <notifications@github.com>\nwrote:\n\n> Did you determine that this was not an issue in pymongo?\n>\n> —\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mongodb/mongo-python-driver/pull/471#issuecomment-663747036>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AQMQPDM5ZOIOTGRCAWXA473R5H6HTANCNFSM4PHAF5WQ>\n> .\n>\n",
      "I suppose I should add, when gevent patches .acquire, it becomes possible\nfor it to raise gevent.timeout.Timeout.\n\nOn Fri, Jul 24, 2020 at 5:47 PM Tyler W <orb360@gmail.com> wrote:\n\n> So I think I figured out what's going on.\n>\n> Gevent patches .acquire() so that it can switch out to other coroutines.\n>\n> During threading.Condition:wait(), 2 .acquire calls are made, one for the\n> waiter, and one to re-acquire Condition._lock before modifying _waiters\n> (see threading.py:263)\n>\n> If a timeout occurs during waiter.acquire(), Condition.wait's finally\n> clause will catch it, re-acquire ._lock, and then raise, raising through\n> pymongo, which should release the lock.\n>\n> If a timeout occurs during _lock.acquire(), this is due to someone else\n> having the Condition._lock, and Condition will raise without removing the\n> waiter lock from _waiters. In this case, if pymongo caught the exception\n> and released the lock it would be releasing a lock someone else owned.\n>\n> So I believe I've found a fix that is 2 fold.\n>\n> 1. Modify pymongo to use `with self._cond:`, I'll update and resubmit the\n> PR. To anyone not using gevent, this will be transparent. To anyone using\n> gevent, this will be an improvement if they use timeouts... It will prevent\n> the deadlock, but introduce the possibility of concurrent modification of\n> _waiters\n>\n> 2. Create a new version of Condition that loops on _lock.acquire(),\n> catching any Timeout exceptions to guarantee that the lock is acquired,\n> remove the waiter from _waiters, then re-raise the Timeout exception that\n> was caught.\n>\n> With both of these, it may delay the gevent Timeout being raised (nothing\n> new there with coroutines though), but will prevent any concurrent\n> modification of _waiters, and also prevent any unreleased locks from\n> occurring.\n>\n> -Tyler\n>\n> On Fri, Jul 24, 2020 at 3:45 PM Shane Harvey <notifications@github.com>\n> wrote:\n>\n>> Did you determine that this was not an issue in pymongo?\n>>\n>> —\n>> You are receiving this because you modified the open/close state.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/mongodb/mongo-python-driver/pull/471#issuecomment-663747036>,\n>> or unsubscribe\n>> <https://github.com/notifications/unsubscribe-auth/AQMQPDM5ZOIOTGRCAWXA473R5H6HTANCNFSM4PHAF5WQ>\n>> .\n>>\n>\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad544ee515ce6a4b2d8",
    "number": 470,
    "body": "PYTHON-2304 Ensure _RttMonitor closes socket\r\n\r\nThis PR fixes the two flaky tests described in PYTHON-2328 and PYTHON-2304.\r\n\r\nFor PYTHON-2328 we reset the connection pool in Topology.on_change. This not only resolves the race in test_pool_reset but also avoids the need to acquire the Topology lock a second time when processing a failed heartbeat.\r\n",
    "head_branch": "PYTHON-2328",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2328 Reset the connection pool in Topology.on_change (#470)\n\nPYTHON-2304 Ensure _RttMonitor closes socket on when the client is closed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad644ee515ce6a4b2d9",
    "number": 469,
    "body": "```\r\nbson/buffer.c:36:13: warning: function declaration isn’t a prototype [-Wstrict-prototypes]\r\n   36 | static void set_memory_error() {\r\n      |             ^~~~~~~~~~~~~~~~\r\n```\r\n\r\nJira: https://jira.mongodb.org/browse/PYTHON-2331",
    "head_branch": "PYTHON-2331",
    "is_a_fork": true,
    "comments": [
      "Compile is clean now:\r\n```\r\n [2020/07/23 00:31:31.453] Running auth tests over ssl with python /opt/python/3.5/bin/python3\r\n [2020/07/23 00:31:31.453] 3.5.9 (default, Jun 25 2020, 03:29:06)\r\n [2020/07/23 00:31:31.453] [GCC 4.4.7 20120313 (Red Hat 4.4.7-23)]\r\n [2020/07/23 00:31:31.765] Coverage.py, version 5.1 with C extension\r\n [2020/07/23 00:31:31.765] Full documentation is at https://coverage.readthedocs.io\r\n [2020/07/23 00:31:33.670] INFO: coverage is installed, running tests with coverage...\r\n [2020/07/23 00:31:33.670] running clean\r\n [2020/07/23 00:31:33.670] running build_ext\r\n [2020/07/23 00:31:33.771] building 'bson._cbson' extension\r\n [2020/07/23 00:31:33.771] creating build\r\n [2020/07/23 00:31:33.771] creating build/temp.linux-x86_64-3.5\r\n [2020/07/23 00:31:33.771] creating build/temp.linux-x86_64-3.5/bson\r\n [2020/07/23 00:31:33.771] gcc -pthread -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Ibson -I/opt/python/3.5/include/python3.5m -c bson/_cbsonmodule.c -o build/temp.linux-x86_64-3.5/bson/_cbsonmodule.o\r\n [2020/07/23 00:31:34.728] gcc -pthread -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Ibson -I/opt/python/3.5/include/python3.5m -c bson/time64.c -o build/temp.linux-x86_64-3.5/bson/time64.o\r\n [2020/07/23 00:31:34.868] gcc -pthread -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Ibson -I/opt/python/3.5/include/python3.5m -c bson/buffer.c -o build/temp.linux-x86_64-3.5/bson/buffer.o\r\n [2020/07/23 00:31:34.931] gcc -pthread -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Ibson -I/opt/python/3.5/include/python3.5m -c bson/encoding_helpers.c -o build/temp.linux-x86_64-3.5/bson/encoding_helpers.o\r\n [2020/07/23 00:31:34.955] gcc -pthread -shared -Wl,--enable-new-dtags,-rpath,/opt/python/3.5/lib build/temp.linux-x86_64-3.5/bson/_cbsonmodule.o build/temp.linux-x86_64-3.5/bson/time64.o build/temp.linux-x86_64-3.5/bson/buffer.o build/temp.linux-x86_64-3.5/bson/encoding_helpers.o -L/opt/python/3.5/lib -lpython3.5m -o /data/mci/830893c053272b3a7b86493db3357392/src/bson/_cbson.cpython-35m-x86_64-linux-gnu.so\r\n [2020/07/23 00:31:34.988] building 'pymongo._cmessage' extension\r\n [2020/07/23 00:31:34.988] creating build/temp.linux-x86_64-3.5/pymongo\r\n [2020/07/23 00:31:34.988] gcc -pthread -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Ibson -I/opt/python/3.5/include/python3.5m -c pymongo/_cmessagemodule.c -o build/temp.linux-x86_64-3.5/pymongo/_cmessagemodule.o\r\n [2020/07/23 00:31:35.343] gcc -pthread -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Ibson -I/opt/python/3.5/include/python3.5m -c bson/buffer.c -o build/temp.linux-x86_64-3.5/bson/buffer.o\r\n [2020/07/23 00:31:35.407] gcc -pthread -shared -Wl,--enable-new-dtags,-rpath,/opt/python/3.5/lib build/temp.linux-x86_64-3.5/pymongo/_cmessagemodule.o build/temp.linux-x86_64-3.5/bson/buffer.o -L/opt/python/3.5/lib -lpython3.5m -o /data/mci/830893c053272b3a7b86493db3357392/src/pymongo/_cmessage.cpython-35m-x86_64-linux-gnu.so\r\n [2020/07/23 00:31:36.588] running test\r\n [2020/07/23 00:31:36.588] running egg_info\r\n [2020/07/23 00:31:36.588] creating pymongo.egg-info\r\n```",
      "Good to know https://stackoverflow.com/questions/42125/function-declaration-isnt-a-prototype !"
    ],
    "commit_messages": [
      "PYTHON-2331 Fix set_memory_error complier warning (#469)\n\nbson/buffer.c:36:13: warning: function declaration isn’t a prototype [-Wstrict-prototypes]\r\n   36 | static void set_memory_error() {\r\n      |             ^~~~~~~~~~~~~~~~"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad744ee515ce6a4b2da",
    "number": 468,
    "body": "PYTHON-2296 Test behavior of connectTimeoutMS=0 with streaming protocol\r\nPYTHON-2311 Fix flaky streaming protocol test\r\n\r\nPatch: https://evergreen.mongodb.com/version/5f129b4e850e614ba95578e7",
    "head_branch": "PYTHON-2294",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2294 Resync SDAM spec tests to workaround slow elections Windows and macOS (#468)\n\nPYTHON-2296 Test behavior of connectTimeoutMS=0 with streaming protocol\r\nPYTHON-2311 Workaround inherent race in flaky streaming protocol test"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad844ee515ce6a4b2db",
    "number": 467,
    "body": "",
    "head_branch": "PYTHON-2252/uuid-documentation",
    "is_a_fork": true,
    "comments": [
      "Ready for final review.",
      "Ready for another look."
    ],
    "commit_messages": [
      "PYTHON-2252 Add examples and documentation for new UUID behavior (#467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcad944ee515ce6a4b2dc",
    "number": 466,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2320\r\nJython poll bug: https://bugs.jython.org/issue2900\r\n\r\nCalling poll() on a SSLSocket registered with POLLHUP causes the following AttributeError: 'SSLSocket' object has no attribute 'channel':\r\n```\r\n  File \"pymongo/socket_checker.py\", line 57, in select\r\n    res = self._poller.poll(timeout * 1000)\r\n  File \"/usr/local/Cellar/jython/2.7.2/libexec/Lib/_socket.py\", line 592, in poll\r\n    result = self._handle_poll(partial(self.queue.poll, timeout_in_ns, TimeUnit.NANOSECONDS))\r\n  File \"/usr/local/Cellar/jython/2.7.2/libexec/Lib/_socket.py\", line 541, in _event_test\r\n    fd, event = self._event_test(notification)\r\n  File \"/usr/local/Cellar/jython/2.7.2/libexec/Lib/_socket.py\", line 541, in _event_test\r\n    if mask & POLLHUP and (notification.hangup or not notification.sock.channel):\r\nAttributeError: 'SSLSocket' object has no attribute 'channel'\r\n```",
    "head_branch": "PYTHON-2320",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2320 Use select instead of poll on Jython (#466)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcada44ee515ce6a4b2dd",
    "number": 465,
    "body": "",
    "head_branch": "PYTHON-2306",
    "is_a_fork": true,
    "comments": [
      "Looks like the new spec tests require a change to the test runner:\r\n```\r\n[2020/07/15 00:12:21.259] ERROR [0.135s]: test_change_streams_change_streams_errors_change_stream_errors_on_ElectionInProgress (test_change_stream.TestAllScenarios)\r\n[2020/07/15 00:12:21.259] ----------------------------------------------------------------------\r\n[2020/07/15 00:12:21.259] Traceback (most recent call last):\r\n[2020/07/15 00:12:21.259]   File \"/data/mci/9fa64f377b4af8261e89eeb2801af706/src/test/__init__.py\", line 444, in wrap\r\n[2020/07/15 00:12:21.259]     return f(*args, **kwargs)\r\n[2020/07/15 00:12:21.259]   File \"/data/mci/9fa64f377b4af8261e89eeb2801af706/src/test/__init__.py\", line 444, in wrap\r\n[2020/07/15 00:12:21.259]     return f(*args, **kwargs)\r\n[2020/07/15 00:12:21.259]   File \"/data/mci/9fa64f377b4af8261e89eeb2801af706/src/test/__init__.py\", line 444, in wrap\r\n[2020/07/15 00:12:21.259]     return f(*args, **kwargs)\r\n[2020/07/15 00:12:21.259]   File \"/data/mci/9fa64f377b4af8261e89eeb2801af706/src/test/test_change_stream.py\", line 1197, in run_scenario\r\n[2020/07/15 00:12:21.259]     for change, expected_changes in zip(changes, test[\"result\"][\"success\"]):\r\n[2020/07/15 00:12:21.259] KeyError: 'success'\r\n```"
    ],
    "commit_messages": [
      "PYTHON-2306 Test that change streams don't resume from ElectionInProgress (#465)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcada44ee515ce6a4b2de",
    "number": 464,
    "body": "Note that we do not need to handle other `UuidRepresentation` values because `$uuid` fields in extended JSON contain the UUID in their canonical textual representation which is platform-independent and not affected by byte order. ",
    "head_branch": "PYTHON-2263/eJSON-uuid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2263 Respect UuidRepresentation.UNSPECIFIED when parsing $uuid fields in extended JSON (#464)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcadb44ee515ce6a4b2df",
    "number": 463,
    "body": "This just resyncs the spec tests. The change in resume behavior was merged in PYTHON-2143.",
    "head_branch": "PYTHON-2315/change-stream-resume",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2315 Special case resuming change streams from CursorNotFound errors (#463)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcadc44ee515ce6a4b2e0",
    "number": 462,
    "body": "Since BSON library is a general purpose library and so must follow BSON spec and the spec permits such keys, we cannot have this flag in BSON library.\r\n\r\nActually, everyone who need to store Kubernets YAML file in MongoDB will have problem. Once they have label / attribute like \"app.kubernetes.io/managed-by: helm\", they will encounter this issue as well.\r\n\r\nIf MongoDB guys has some needs to verify keys, they has to do it in pymongo code and not in BSON library.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi. Thanks for your interest and contribution. The check_keys option (which defaults to False) exists because MongoDB doesn't currently support unambiguously querying on keys that begin with dollar signs or keys that contain dots. The most efficient way for PyMongo to filter out such keys is when iterating over the documents to encode. The option is necessary, and since it defaults to False your code change has no practical effect, so we're not going to take it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcadd44ee515ce6a4b2e1",
    "number": 461,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1438",
    "head_branch": "PYTHON-1438",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1438 Mark a server unknown when connection handshake fails with a network timeout error (#461)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcade44ee515ce6a4b2e2",
    "number": 460,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2256",
    "head_branch": "PYTHON-2256",
    "is_a_fork": true,
    "comments": [
      "> I am guessing failures are unrelated \r\n\r\nYep, I filed: https://jira.mongodb.org/browse/PYTHON-2311"
    ],
    "commit_messages": [
      "PYTHON-2256 Document that a ClientSession cannot be used for multiple operations concurrently (#460)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcadf44ee515ce6a4b2e3",
    "number": 459,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2165",
    "head_branch": "PYTHON-2165",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2165 Deprecate MongoClient is_locked, fsync, and unlock helpers (#459)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcadf44ee515ce6a4b2e4",
    "number": 458,
    "body": "PYTHON-2277 Remove UuidRepresentation DeprecationWarning",
    "head_branch": "UUID-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2292 Fix failing doctest due to UuidRepresentation (#458)\n\nPYTHON-2277 Remove UuidRepresentation DeprecationWarning"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae044ee515ce6a4b2e5",
    "number": 457,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2299",
    "head_branch": "PYTHON-2299",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2299 Add the \"awaited\" field to heartbeat events (#457)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae144ee515ce6a4b2e6",
    "number": 456,
    "body": "",
    "head_branch": "PYTHON-2305/fix-change-stream-resume",
    "is_a_fork": true,
    "comments": [
      "TL;DR: Our resume logic was broken in PyMongo. It is a small wonder we didn't catch this earlier!\r\n\r\nThe main issue here was two-fold:\r\n1. We were not always setting the `resumeAfter` parameter in the aggregation query when resuming change streams. We should have been setting that value whenever there was a cached resume token and `_uses_start_after` was `False`. Instead, we were only setting it when `_uses_resume_after` was `True` which is not the same thing.\r\n2. We were not caching the resume token appropriately in the situation when the `aggregate` command returned an empty batch containing a `postBatchResumeToken`. \r\n\r\nThe issue has now been fixed and we now follow the change stream spec appropriately.",
      "Addressed your comments @ShaneHarvey. Ready for another look.",
      "Can you fix the 3.6 test failures?",
      "Done. @ShaneHarvey "
    ],
    "commit_messages": [
      "PYTHON-2305 Cache postBatchResumeToken when an aggregate command returns an empty firstBatch (#456)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae244ee515ce6a4b2e7",
    "number": 455,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2220",
    "head_branch": "PYTHON-2220",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2220 Mention Atlas Search in documentation (#455)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae344ee515ce6a4b2e8",
    "number": 454,
    "body": "Jira: [PYTHON-2243](https://jira.mongodb.org/browse/PYTHON-2243)",
    "head_branch": "PYTHON-2243",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2243 Raise informative error message when attempting a GridFS operation in a transaction (#454)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae444ee515ce6a4b2e9",
    "number": 453,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2163\r\n\r\nThis change does two things. First it fixes a bug where we were incorrectly not wrapping pyOpenSSL connection errors from wrap_socket. For example, before this change:\r\n```\r\n>>> client = MongoClient(ssl=True, serverSelectionTimeoutMS=1000).admin.command('ping')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/database.py\", line 737, in command\r\n    read_preference, session) as (sock_info, slave_ok):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 112, in __enter__\r\n    return next(self.gen)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1322, in _socket_for_reads\r\n    server = self._select_server(read_preference, session)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1275, in _select_server\r\n    server = topology.select_server(server_selector)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 243, in select_server\r\n    address))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 200, in select_servers\r\n    selector, server_timeout, address)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 217, in _select_servers_loop\r\n    (self._error_message(selector), timeout, self.description))\r\npymongo.errors.ServerSelectionTimeoutError: (-1, 'Unexpected EOF'), Timeout: 1.0s, Topology Description: <TopologyDescription id: 5efe463ec658be84f88c0e33, topology_type: Single, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=SysCallError(-1, 'Unexpected EOF')>]>\r\n```\r\nAfter this change we correctly wrap the SysCallError in `AutoReconnect(\"SSL handshake failed: ...\")`:\r\n```\r\n>>> client = MongoClient(ssl=True, serverSelectionTimeoutMS=1000).admin.command('ping')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/database.py\", line 737, in command\r\n    read_preference, session) as (sock_info, slave_ok):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 112, in __enter__\r\n    return next(self.gen)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1322, in _socket_for_reads\r\n    server = self._select_server(read_preference, session)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1275, in _select_server\r\n    server = topology.select_server(server_selector)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 243, in select_server\r\n    address))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 200, in select_servers\r\n    selector, server_timeout, address)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 217, in _select_servers_loop\r\n    (self._error_message(selector), timeout, self.description))\r\npymongo.errors.ServerSelectionTimeoutError: SSL handshake failed: localhost:27017: (-1, 'Unexpected EOF'), Timeout: 1.0s, Topology Description: <TopologyDescription id: 5efe4624a92bae23d4ec5e73, topology_type: Single, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect(\"SSL handshake failed: localhost:27017: (-1, 'Unexpected EOF')\")>]>\r\n```\r\n\r\nSecond, this change adds support for suppress_ragged_eofs=True in pyOpenSSL reads/writes. ",
    "head_branch": "PYTHON-2163",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2163 Suppress ragged EOFs when using pyOpenSSL to match the stdlib (#453)\n\nWrap pyOpenSSL connection errors with AutoReconnect."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae544ee515ce6a4b2ea",
    "number": 452,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2282",
    "head_branch": "PYTHON-2282",
    "is_a_fork": true,
    "comments": [
      "These are the (expected) errors raised by the tests. They are working as expected AFAICT:\r\n```\r\nERROR: test_max_staleness_ReplicaSetNoPrimary_Incompatible (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 240, in apply_selector\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: Nearest(tag_sets=None, max_staleness=120, hedge=None) requires min wire version 5, but topology's min wire version is 4\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetNoPrimary_MaxStalenessTooSmall (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 257, in apply_selector\r\n    selection = selector(Selection.from_topology_description(self))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 414, in __call__\r\n    max_staleness_selectors.select(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/max_staleness_selectors.py\", line 111, in select\r\n    _validate_max_staleness(max_staleness, selection.heartbeat_frequency)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/max_staleness_selectors.py\", line 44, in _validate_max_staleness\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: maxStalenessSeconds must be at least heartbeatFrequencyMS + 10 seconds. maxStalenessSeconds is set to 1, heartbeatFrequencyMS is set to 10000.\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetNoPrimary_ZeroMaxStaleness (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 176, in run_scenario\r\n    pref = parse_read_preference(pref_def)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils.py\", line 911, in parse_read_preference\r\n    return read_preferences.make_read_preference(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 431, in make_read_preference\r\n    return _ALL_READ_PREFERENCES[mode](tag_sets, max_staleness)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 407, in __init__\r\n    super(Nearest, self).__init__(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 106, in __init__\r\n    self.__max_staleness = _validate_max_staleness(max_staleness)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 79, in _validate_max_staleness\r\n    raise ValueError(_invalid_max_staleness_msg(max_staleness))\r\nValueError: maxStalenessSeconds must be a positive integer, not 0\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetWithPrimary_Incompatible (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 240, in apply_selector\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: Nearest(tag_sets=None, max_staleness=120, hedge=None) requires min wire version 5, but topology's min wire version is 4\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetWithPrimary_LongHeartbeat2 (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 257, in apply_selector\r\n    selection = selector(Selection.from_topology_description(self))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 414, in __call__\r\n    max_staleness_selectors.select(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/max_staleness_selectors.py\", line 111, in select\r\n    _validate_max_staleness(max_staleness, selection.heartbeat_frequency)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/max_staleness_selectors.py\", line 44, in _validate_max_staleness\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: maxStalenessSeconds must be at least heartbeatFrequencyMS + 10 seconds. maxStalenessSeconds is set to 129, heartbeatFrequencyMS is set to 120000.\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetWithPrimary_MaxStalenessTooSmall (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 257, in apply_selector\r\n    selection = selector(Selection.from_topology_description(self))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 414, in __call__\r\n    max_staleness_selectors.select(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/max_staleness_selectors.py\", line 111, in select\r\n    _validate_max_staleness(max_staleness, selection.heartbeat_frequency)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/max_staleness_selectors.py\", line 51, in _validate_max_staleness\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: maxStalenessSeconds must be at least 90. maxStalenessSeconds is set to 89.\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetWithPrimary_MaxStalenessWithModePrimary (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 176, in run_scenario\r\n    pref = parse_read_preference(pref_def)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils.py\", line 911, in parse_read_preference\r\n    return read_preferences.make_read_preference(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 428, in make_read_preference\r\n    raise ConfigurationError(\"Read preference primary cannot be \"\r\npymongo.errors.ConfigurationError: Read preference primary cannot be combined with maxStalenessSeconds\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetWithPrimary_PrimaryPreferred_incompatible (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 240, in apply_selector\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: PrimaryPreferred(tag_sets=None, max_staleness=150, hedge=None) requires min wire version 5, but topology's min wire version is 4\r\n\r\n======================================================================\r\nERROR: test_max_staleness_ReplicaSetWithPrimary_ZeroMaxStaleness (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 176, in run_scenario\r\n    pref = parse_read_preference(pref_def)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils.py\", line 911, in parse_read_preference\r\n    return read_preferences.make_read_preference(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 431, in make_read_preference\r\n    return _ALL_READ_PREFERENCES[mode](tag_sets, max_staleness)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 407, in __init__\r\n    super(Nearest, self).__init__(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 106, in __init__\r\n    self.__max_staleness = _validate_max_staleness(max_staleness)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/read_preferences.py\", line 79, in _validate_max_staleness\r\n    raise ValueError(_invalid_max_staleness_msg(max_staleness))\r\nValueError: maxStalenessSeconds must be a positive integer, not 0\r\n\r\n======================================================================\r\nERROR: test_max_staleness_Sharded_Incompatible (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 240, in apply_selector\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: Nearest(tag_sets=None, max_staleness=120, hedge=None) requires min wire version 5, but topology's min wire version is 4\r\n\r\n======================================================================\r\nERROR: test_max_staleness_Single_Incompatible (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 177, in run_scenario\r\n    top_latency.select_server(pref)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 241, in select_server\r\n    return random.choice(self.select_servers(selector,\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 199, in select_servers\r\n    server_descriptions = self._select_servers_loop(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 209, in _select_servers_loop\r\n    server_descriptions = self._description.apply_selector(\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology_description.py\", line 240, in apply_selector\r\n    raise ConfigurationError(\r\npymongo.errors.ConfigurationError: Nearest(tag_sets=None, max_staleness=120, hedge=None) requires min wire version 5, but topology's min wire version is 4\r\n```",
      "We do raise ServerSelectionTimeout for that scenario. It's handled in the spec test here: https://github.com/mongodb/mongo-python-driver/blob/1f4123e4bf54f9ed689ce77ffb8dfbccc3e688f0/test/utils_selection_tests.py#L183-L194\r\n\r\nThe error raised looks like this:\r\n```python\r\nERROR: test_max_staleness_ReplicaSetNoPrimary_NoKnownServers (test.test_max_staleness.TestAllScenarios)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_selection_tests.py\", line 197, in run_scenario\r\n    pref, server_selection_timeout=0)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 200, in select_servers\r\n    selector, server_timeout, address)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/topology.py\", line 217, in _select_servers_loop\r\n    (self._error_message(selector), timeout, self.description))\r\nServerSelectionTimeoutError: No servers found yet, Timeout: 0s, Topology Description: <TopologyDescription id: 5f04f43d5f4edf4fe9ecae9c, topology_type: Unknown, servers: [<ServerDescription (u'a', 27017) server_type: Unknown, rtt: None>, <ServerDescription (u'b', 27017) server_type: Unknown, rtt: None>]>\r\n```"
    ],
    "commit_messages": [
      "PYTHON-2282 Resync maxStalenessSeconds spec tests (#452)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae544ee515ce6a4b2eb",
    "number": 451,
    "body": "[PYTHON-2154](https://jira.mongodb.org/browse/PYTHON-2154) [PYTHON-2189](https://jira.mongodb.org/browse/PYTHON-2189) Remove 4.5 transaction test workarounds\r\n\r\nExplanation: The StaleConfig change in PYTHON-2189 accidentally causes the test_transactions suite to ignore _any_ failed test because there was a missing `raise` statement. Now that we're no longer masking test failures, this test began to fail:\r\n```\r\nERROR: test_transactions_mongos_recovery_token_commitTransaction_retry_succeeds_on_new_mongos (test.test_transactions.TestTransactions)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 442, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 442, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/__init__.py\", line 442, in wrap\r\n    return f(*args, **kwargs)\r\n  File \"/Users/shane/git/mongo-python-driver/test/test_transactions.py\", line 418, in run_scenario\r\n    self.run_scenario(scenario_def, test)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 584, in run_scenario\r\n    self.run_test_ops(sessions, collection, test)\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 497, in run_test_ops\r\n    self.run_operations(sessions, collection, test['operations'])\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 403, in run_operations\r\n    result = self.run_operation(sessions, collection, op.copy())\r\n  File \"/Users/shane/git/mongo-python-driver/test/utils_spec_runner.py\", line 346, in run_operation\r\n    result = cmd(**dict(arguments))\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/client_session.py\", line 615, in commit_transaction\r\n    _reraise_with_unknown_commit(exc)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/client_session.py\", line 597, in commit_transaction\r\n    self._finish_transaction_with_retry(\"commitTransaction\")\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/client_session.py\", line 655, in _finish_transaction_with_retry\r\n    return self._client._retry_internal(True, func, self, None)\r\n  File \"/Users/shane/git/mongo-python-driver/pymongo/mongo_client.py\", line 1406, in _retry_internal\r\n    raise last_error\r\nWriteConcernError: Replication is being shut down\r\n```\r\n\r\nThis test failure is caused by PYTHON-2082. In particular, we neglected to unpin the session on retryable commitTransaction errors. To fix the bug we unpin the session on all errors with the RetryableWriteError label.\r\n\r\nI've already tested this change here: https://evergreen.mongodb.com/version/5efb9809c9ec447c47b57365",
    "head_branch": "PYTHON-2189",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2082 Unpin session after RetryableWriteErrors from commitTransaction (#451)\n\nPYTHON-2154 PYTHON-2189 Remove 4.5 transaction test workarounds"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae644ee515ce6a4b2ec",
    "number": 450,
    "body": "This is fixing the issue from the previous pull request which was caused by NotMasterError failing\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-1787",
    "head_branch": "PYTHON-1787-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1787: fix NotMasterError no attribute error (#450)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae744ee515ce6a4b2ed",
    "number": 449,
    "body": "https://jira.mongodb.org/browse/PYTHON-2076",
    "head_branch": "PYTHON-2076",
    "is_a_fork": true,
    "comments": [
      "Sorry for the delay here. I want to add some cross-references in the docs before merging this which is what I am waiting for."
    ],
    "commit_messages": [
      "PYTHON-2076: Add example event loggers (#449)\n\nAdded example event loggers and documentation for them to make it easier for users to start using listeners in their code.\r\nJIRA ticket: https://jira.mongodb.org/browse/PYTHON-2076"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae844ee515ce6a4b2ee",
    "number": 448,
    "body": "",
    "head_branch": "PYTHON-1787",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1787: add details to OperationFailure exception and NotMasterError (#448)\n\nPYTHON-1787-add details to OperationFailure and NotMasterError by adding a __repr__ function\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-1787"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcae944ee515ce6a4b2ef",
    "number": 447,
    "body": "",
    "head_branch": "PYTHON-2272/avoid-uuiddeprecation-in-test",
    "is_a_fork": true,
    "comments": [
      "Can we close this now?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaea44ee515ce6a4b2f0",
    "number": 446,
    "body": "",
    "head_branch": "PYTHON-2295/fix-directConnection-behavior",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2295 MongoClient with multiple hosts directConnection=True should raise an error (#446)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaeb44ee515ce6a4b2f1",
    "number": 445,
    "body": "",
    "head_branch": "PYTHON-2143/change-streams-resume",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2143 Use an allow-list to determine resumable change stream errors (#445)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaec44ee515ce6a4b2f2",
    "number": 444,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> Can you provide an example of what the new error message output looks like?\r\n\r\nHere is an example:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/julius/mongo-python-driver/pymongo/database.py\", line 737, in command\r\n    read_preference, session) as (sock_info, slave_ok):\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 112, in __enter__\r\n    return next(self.gen)\r\n  File \"/Users/julius/mongo-python-driver/pymongo/mongo_client.py\", line 1317, in _socket_for_reads\r\n    server = self._select_server(read_preference, session)\r\n  File \"/Users/julius/mongo-python-driver/pymongo/mongo_client.py\", line 1270, in _select_server\r\n    server = topology.select_server(server_selector)\r\n  File \"/Users/julius/mongo-python-driver/pymongo/topology.py\", line 242, in select_server\r\n    address))\r\n  File \"/Users/julius/mongo-python-driver/pymongo/topology.py\", line 200, in select_servers\r\n    selector, server_timeout, address)\r\n  File \"/Users/julius/mongo-python-driver/pymongo/topology.py\", line 216, in _select_servers_loop\r\n    self._error_message(selector)+\", Timeout: \"+str(timeout)+\"s, \"+repr(self.description))\r\npymongo.errors.ServerSelectionTimeoutError: SSL handshake failed: localhost:27017: [Errno 0] Error, Timeout: 1.0s, <TopologyDescription id: 5ef358843a27415c18f5192c, topology_type: Single, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('SSL handshake failed: localhost:27017: [Errno 0] Error')>]>\r\n```"
    ],
    "commit_messages": [
      "PYTHON-2136: added more diagnostic information for ServerSelectionTimeoutError (#444)\n\n* PYTHON-2136: added more diagnostic information for ServerSelectionTimeoutError\r\n\r\n* made error message more human readable\r\n\r\n* fixed tests\r\n\r\n* fixed remaining testcase\r\n\r\n* fixed formatting\r\n\r\n* more formatting fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaed44ee515ce6a4b2f3",
    "number": 443,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2297\r\n\r\nThis fixes the `ResourceWarning: unclosed <socket.socket ...` when auth fails while checking out a connection.\r\n\r\nCC: @juliusgeo",
    "head_branch": "PYTHON-2297",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2297 Close connection to avoid resource warning when auth fails (#443)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaee44ee515ce6a4b2f4",
    "number": 442,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1852\r\n\r\nThis doesn't fix all the usages of `ssl_*` (eg in test_ssl.py) but does fix a large majority of them.",
    "head_branch": "PYTHON-1852",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1852 Use TLS option names in test suite ClientContext (#442)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaef44ee515ce6a4b2f5",
    "number": 441,
    "body": "",
    "head_branch": "community-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2208 Update community links to be more specific (#441)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf044ee515ce6a4b2f6",
    "number": 440,
    "body": "It looks like all the links in the Readme file were made with reStructuredText syntax, except Documentation link, that was made with Markdown syntax, and was rendering inaccurately.\r\n\r\nThis PR fixes this inconsistency.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Update Documentation link in the readme (#440)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf144ee515ce6a4b2f7",
    "number": 439,
    "body": "On a heavily loaded virtual machine running multiple docker containers I have been encountering an intermittent SSL handshake timeout error.   The error was was being raised in `pool.py` in the `_configured_socket()` function on the line where `ssl_context.wrap_socket()` is called.\r\n\r\nThis patch moves the `sock.settimeout()` call to before the `wrap_socket()` calls so that the SSL handshake process uses the configured timeout.\r\n",
    "head_branch": "ssl-timeout-patch",
    "is_a_fork": true,
    "comments": [
      "The `_create_connection` function already sets the socket's timeout to `options.connect_timeout` before the TLS handshake [on line 856](https://github.com/mongodb/mongo-python-driver/blob/3.11.0b0/pymongo/pool.py#L856). `options.connect_timeout` corresponds to the [connectTimeoutMS option](https://pymongo.readthedocs.io/en/stable/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient):\r\n\r\n> connectTimeoutMS: (integer or None) Controls how long (in milliseconds) the driver will wait during server monitoring when connecting a new socket to a server before concluding the server is unavailable. Defaults to 20000 (20 seconds).\r\n\r\n`options.socket_timeout` (socketTimeoutMS) is the timeout to use for regular database operations which is why it is only set _after_ connecting the socket. \r\n\r\nIn summary I think pymongo is working as intended here. To avoid the TLS handshake timeouts your app can increase connectTimeoutMS like this:\r\n```python\r\nclient = MongoClient('mongodb://host/?connectTimeoutMS=60000')  # 60 second connect timeout\r\n# or via keyword argument:\r\nclient = MongoClient('mongodb://host/', connectTimeoutMS=60000)  # 60 second connect timeout\r\n```\r\n\r\nOkay to close?",
      "Looks like I need to do some further investigation!  I was already setting `connectTimeoutMS` to 30000.   I had convinced myself that this patch did fix the issue, but from what you are saying it sounds like there must be something else going on.\r\n\r\nI will do some more tests today with extra instrumentation and let you know the results.  ",
      "This change might seem to \"fix\" the issue because the default `options.socket_timeout` (socketTimeoutMS) is None, which means never timeout:\r\n> socketTimeoutMS: (integer or None) Controls how long (in milliseconds) the driver will wait for a response after sending an ordinary (non-monitoring) database operation before concluding that a network error has occurred. Defaults to None (no timeout).\r\n\r\nI suspect you can increase `connectTimeoutMS` to > 30 seconds (or put less load on the VM of course)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf244ee515ce6a4b2f8",
    "number": 438,
    "body": "",
    "head_branch": "PYTHON-1743/test-atlas-planned-maintenance",
    "is_a_fork": true,
    "comments": [
      "This functionality has been rolled back into the [drivers-atlas-testing](https://github.com/mongodb-labs/drivers-atlas-testing) repo."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf244ee515ce6a4b2f9",
    "number": 437,
    "body": "JIRA: https://jira.mongodb.org/browse/DOCSP-9413\r\n\r\nRemove all references to google groups from Python driver docs.",
    "head_branch": "DOCSP-9413-remove-google-group",
    "is_a_fork": true,
    "comments": [
      "@jmikola Please review/merge when you get the chance!",
      "Can you update the section in the Readme that discusses mongodb-user too?\r\n\r\nhttps://github.com/mongodb/mongo-python-driver/blob/master/README.rst#support--feedback"
    ],
    "commit_messages": [
      "DOCSP-9413 Replace references to google groups with community forums (#437)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf344ee515ce6a4b2fa",
    "number": 436,
    "body": "While working on an distributed sorting system (as a class assignment) I could not get the gridfs [get](https://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.get) function to work. After a while I found out the problem was that the `id` I was using (send over from another machine) was a `str` while it should be an `ObjectId`.\r\n\r\nCurrently this is not documented in `GridFS`. I propose to add a small note to the inline documentation of the `get` function. \r\n\r\nAn alternative solution would be a type check on the id using `isinstance` and constucting a ObjectId from the `id` if possible:\r\n\r\n```python\r\ndef get(self, file_id, session=None):\r\n    if not isinstance(id, bson.objectid.ObjectId):\r\n        id = bson.objectid.ObjectId(id)\r\n\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "A GridFS file's `_id` is not required to be an ObjectId. Custom file `_id` types are fully supported so we can't merge this change. \r\n\r\nThe [GridFS spec \"Terms section\"](https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.rst#terms) defines a file's `_id` as:\r\n>  a unique ID for this document. Usually this will be of type ObjectId, but a custom _id value provided by the application may be of any type.\r\n",
      "Maybe a warning/note would be useful at the end of the `get` function documentation and a type description in the `put` function? I was thinking something along the lines of:\r\n\r\n```\r\nThe id is type sensitive, ensure the same type is used for putting and getting data from GridFS. If the id was generated by put it should (still) be an instance of :class: `~bson.objectid.ObjectId`\r\n```\r\n\r\nIf that seems useful I will update the files. Otherwise feel free to close this PR.",
      "Thanks for the pull. However, we're not going to merge it because we already document this behavior in two places:\r\n\r\n- https://pymongo.readthedocs.io/en/stable/faq.html#when-i-query-for-a-document-by-objectid-in-my-web-application-i-get-no-result\r\n- https://pymongo.readthedocs.io/en/stable/tutorial.html#querying-by-objectid",
      "Clearly, I think you guys just have to add a tip at here, it'll be enough: https://api.mongodb.com/python/current/examples/gridfs.html?highlight=gridfs#saving-and-retrieving-data\r\n\r\n\r\nIf all of you are busy and can't make a pull about it, I'd like to help, to make a little bit of changes to that doc and make a pull request."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf444ee515ce6a4b2fb",
    "number": 435,
    "body": "",
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Fix typo in client side encryption examples (#435)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf544ee515ce6a4b2fc",
    "number": 434,
    "body": "When I check the code, I found `dur` here is timedelta object\r\nAnd here `dur.total_seconds() * 10e5` I don't really understand why you use `10e5`, maybe it's a writing mistake.\r\nSo, fixed it.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf644ee515ce6a4b2fd",
    "number": 433,
    "body": "If a file is corrupted or cannot be processed by the python driver, the iterator used to stop the processing\r\nof the file on the first error. With the new yield_errors optional argument the user can bypass errors.\r\n\r\nSigned-off-by: Nicolas Sebrecht <nsebrecht@actiplay.com>",
    "head_branch": "bson-yield-errors",
    "is_a_fork": true,
    "comments": [
      "Hi @nicolas33, thanks for the pull. Unfortunately, I don't think we're going to merge it for a few reasons:\r\n- We generally don't like to change the return value types of a function based on an argument. We could fix this by adding this feature as a new function.\r\n- I'm not convinced that this feature generally useful enough or robust enough for other users to rely on. For example, if one document in the file is corrupted it can cause the processing of all the subsequent documents to fail too, eg if one document's size is changed then we may not be able to decode _any_ of the following documents. The third call to `decode_yield_errors` below highlights this issue.\r\n- Applications can already implement this feature by writing a custom version of `decode_file_iter` on top of `bson.decode`. This requires only a minimal amount of knowledge about the [BSON format](http://bsonspec.org/spec.html) (the code just needs to duplicate the BSON object size parsing of the first 4 bytes). See the example below.\r\n\r\nYou can implement your own version of decode_file_iter like this:\r\n```python\r\nimport struct\r\nimport io\r\n\r\nimport bson\r\nfrom bson.errors import InvalidBSON\r\n\r\n\r\n_UNPACK_INT = struct.Struct(\"<i\").unpack\r\n\r\n\r\ndef decode_yield_errors(file_obj, codec_options=bson.DEFAULT_CODEC_OPTIONS):\r\n    while True:\r\n        # Read the size of the next BSON object.\r\n        # http://bsonspec.org/spec.html\r\n        size_data = file_obj.read(4)\r\n        if not size_data:\r\n            break  # Finished with file normally.\r\n\r\n        # Decode the next document, yielding (dict, invalid bytes,\r\n        # exception)\r\n        elements = size_data\r\n        try:\r\n            if len(size_data) != 4:\r\n                raise InvalidBSON(\"cut off in middle of objsize\")\r\n            obj_size = _UNPACK_INT(size_data)[0] - 4\r\n            elements = size_data + file_obj.read(max(0, obj_size))\r\n            yield bson.decode(elements, codec_options), b'', None\r\n        except InvalidBSON as exc:\r\n            # Yield the invalid bytes and the exception.\r\n            yield {}, elements, exc\r\n\r\n\r\n# Test valid file.\r\nvalid = io.BytesIO(bson.encode({'a': 1})*2)\r\nprint(list(decode_yield_errors(valid)))\r\n\r\n# Test invalid file.\r\ninvalid = io.BytesIO(bson.encode({'a': 1}) + b'invalid')\r\nprint(list(decode_yield_errors(invalid)))\r\n\r\n# Corrupting a BSON object's size will (very likely) cause all subsequent\r\n# documents to fail as well.\r\ninvalid_bytes = (\r\n        b'\\x0d\\x00\\x00\\x00' + bson.encode({'a': 1})[4:] + bson.encode({'a': 1}))\r\ninvalid = io.BytesIO(invalid_bytes)\r\nprint(list(decode_yield_errors(invalid)))\r\n\r\n```\r\nOutput:\r\n```\r\n$  python3.8 decode_ingore.py\r\n[({'a': 1}, b'', None), ({'a': 1}, b'', None)]\r\n[({'a': 1}, b'', None), ({}, b'invalid', InvalidBSON('objsize too large'))]\r\n[({}, b'\\r\\x00\\x00\\x00\\x10a\\x00\\x01\\x00\\x00\\x00\\x00\\x0c', InvalidBSON('bad eoo')), ({}, b'\\x00\\x00\\x00\\x10a\\x00\\x01\\x00\\x00\\x00\\x00', InvalidBSON('objsize too large'))]\r\n```\r\n\r\nNote that if one document in the file is corrupted it can cause the processing of all the subsequent documents to fail too, eg if one document's size is changed then we may not be able to decode _any_ of the following documents. This is another reason that I'm not convinced of this feature.\r\n\r\nBefore we close this issue though, I'd like to know more about why you want this feature. What is the use case you're trying to address?",
      "> Before we close this issue though, I'd like to know more about why you want this feature. What is the use case you're trying to address?\r\n\r\nI've been able to use a bson file having al lot of documents by ignoring many decode issues with my own iterator. Without this loading the data would be not possible at all. I don't care much what you do about this PR. I can maintain my own iterator. This is not possible without loading private variables from the module, though.",
      ">  I can maintain my own iterator. This is not possible without loading private variables from the module, though.\r\n\r\nYou don't need to use private variables. My example above only uses public ones (`bson.decode`, `bson.DEFAULT_CODEC_OPTIONS`, and `bson.errors.InvalidBSON`).\r\n\r\n> I've been able to use a bson file having al lot of documents by ignoring many decode issues with my own iterator. \r\n\r\nWhat kind of decode errors are you trying to recover from? You can ignore unicode decode errors  with the `unicode_decode_error_handler` option:\r\n```python\r\nfrom bson import decode_file_iter\r\nfrom bson.codec_options import CodecOptions\r\nopts = CodecOptions(unicode_decode_error_handler='ignore')\r\n...\r\ndecode_file_iter(file_obj, codec_options=opts)\r\n```",
      "> You don't need to use private variables. My example above only uses public ones (`bson.decode`, `bson.DEFAULT_CODEC_OPTIONS`, and `bson.errors.InvalidBSON`)\r\n\r\nYou didn't import `_UNPACK_INT`.\r\n\r\n\r\n\r\n> What kind of decode errors are you trying to recover from?\r\n\r\nI'm avoiding bson decode errors like unsupported datetimes.",
      "> I'm avoiding bson decode errors like unsupported datetimes.\r\n\r\nThat's interesting. We've discussed possibly providing a configuration option to avoid this. Perhaps an opt-in that would cause out of range datetimes to just be returned as datetime.datetime.min or datetime.datetime.max. It would have to be opt-in since round tripping the value would change the value in the server.",
      "> We've discussed possibly providing a configuration option to avoid this. Perhaps an opt-in that would cause out of range datetimes to just be returned as datetime.datetime.min or datetime.datetime.max. \r\n\r\nIt would be better to return something like \"err: datetime above MAX\", \"err: datetime under MIN\" or even better the error itself to let the user know that the Python driver is offending but that the data might be valid.\r\n\r\n> It would have to be opt-in since round tripping the value would change the value in the server.\r\n\r\nAFAICT there's no server for bson. In the use case of mongo I guess that improving the current datetimes support to whatever fits best is fine. IMHO, this isn't enough to reject thie iterator of this PR because this one provides more flexibility to the user.",
      "> You didn't import `_UNPACK_INT`.\r\n\r\n(Of course, I assume that rebuilding _UNPACK_INT is worse than importing the value from bson.)",
      "[PYTHON-1824](https://jira.mongodb.org/browse/PYTHON-1824) is the ticket to follow where we are planning to add a workaround for pymongo's datetime range limitations.\r\n\r\n> I assume that rebuilding _UNPACK_INT is worse than importing the value from bson.\r\n\r\nIt's definitely worse (imo) to use the private `bson` attributes because there are no compatibility guarantees on our private APIs. We can and do change private things even in patch releases. You should define _UNPACK_INT as in the example above (`_UNPACK_INT = struct.Struct(\"<i\").unpack`).",
      "> You should define _UNPACK_INT as in the example above\r\n\r\nIf the definition of _UNPACK_INT has to change then there is all the chances that the redefined definition from struct becomes wrong too. Either way is not satisfactory. The private definition might include the changes to follow the correct definition. Not this re-definition snapshotted at some random time.\r\n\r\nActually, the full \"write you own iterator\" is not very satisfactory for users, especially when we know that the python driver doesn't correctly handle the BSON format.\r\n\r\nAs said previously, I don't bother much about this PR. I can maintain my own variation of the iterator. IMHO, the maintainers should worry about this more than I do to handle the weird cases coming from the tool itself.",
      "> If the definition of _UNPACK_INT has to change then there is all the chances that the redefined definition from struct becomes wrong too. ...\r\n\r\nYes that is an interesting and totally valid perspective.\r\n\r\nAs stated earlier, we're closing this PR and plan to address the underlying problem described in [PYTHON-1824](https://jira.mongodb.org/browse/PYTHON-1824) instead. Thanks for all the info @nicolas33. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf744ee515ce6a4b2fe",
    "number": 432,
    "body": "There is a small typo in doc/examples/authentication.rst.\nShould read overridden rather than overidden.\n\n",
    "head_branch": "bugfix/typo_overridden",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Fix simple typo: overidden -> overridden (#432)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf844ee515ce6a4b2ff",
    "number": 431,
    "body": "Collect crash dumps from mongo-orchestration. Minidumps are enabled by default on Windows. Core dumps need to be enabled in the current executing shell via ulimit.\r\n",
    "head_branch": "PYTHON-2064",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2064 Collect crash dumps from mongo-orchestration (#431)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf844ee515ce6a4b300",
    "number": 430,
    "body": "When relying on system DNS resolver configuration, such as `/etc/resolv.conf` search domain string, MongoClient is failing to connect.\r\n\r\n**Failure example**\r\n\r\n```bash\r\n>>> from pymongo import MongoClient\r\n>>> rs0 = MongoClient('andrej-mongo-shard1-1:27017', replicaSet='shard1')\r\n>>> rs0.nodes\r\nfrozenset()\r\n>>> rs0.list_database_names()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    rs0.list_database_names()\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1906, in list_database_names\r\n    for doc in self.list_databases(session, nameOnly=True)]\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1887, in list_databases\r\n    res = admin._retryable_read_command(cmd, session=session)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/database.py\", line 749, in _retryable_read_command\r\n    _cmd, read_preference, session)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1455, in _retryable_read\r\n    read_pref, session, address=address)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1254, in _select_server\r\n    server = topology.select_server(server_selector)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/topology.py\", line 233, in select_server\r\n    address))\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/topology.py\", line 190, in select_servers\r\n    selector, server_timeout, address)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/topology.py\", line 207, in _select_servers_loop\r\n    self._error_message(selector))\r\npymongo.errors.ServerSelectionTimeoutError: andrej-mongo-shard1-1:27017: [Errno 8] nodename nor servname provided, or not known\r\n```\r\n\r\n**With this fix**\r\n\r\n```bash\r\n>>> from pymongo import MongoClient\r\n>>> rs0 = MongoClient('andrej-mongo-shard1-1:27017', replicaSet='shard1')\r\n>>> rs0.nodes\r\nfrozenset({('andrej-mongo-shard1-2', 27017), ('andrej-mongo-shard1-1', 27017), ('andrej-mongo-shard1-3', 27017)})\r\n```\r\n\r\n**Example of `/etc/resolv.conf`**\r\n\r\n```text\r\nnameserver 1.1.1.1\r\nsearch dev.example.com\r\n```\r\n\r\nI can use FQDN for the seed in initial MongoClient init, but this doesn't get me much farther as my cluster configs are relying on system resolver search domain as well...\r\n\r\n```bash\r\n>>> rs0 = MongoClient('andrej-mongo-shard1-1.dev.example.com:27017', replicaSet='shard1')\r\n>>> rs0.nodes\r\nfrozenset()\r\n>>> rs0.list_database_names()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    rs0.list_database_names()\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1906, in list_database_names\r\n    for doc in self.list_databases(session, nameOnly=True)]\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1887, in list_databases\r\n    res = admin._retryable_read_command(cmd, session=session)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/database.py\", line 749, in _retryable_read_command\r\n    _cmd, read_preference, session)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1455, in _retryable_read\r\n    read_pref, session, address=address)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/mongo_client.py\", line 1254, in _select_server\r\n    server = topology.select_server(server_selector)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/topology.py\", line 233, in select_server\r\n    address))\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/topology.py\", line 190, in select_servers\r\n    selector, server_timeout, address)\r\n  File \"/usr/local/lib/python3.7/site-packages/pymongo/topology.py\", line 207, in _select_servers_loop\r\n    self._error_message(selector))\r\npymongo.errors.ServerSelectionTimeoutError: andrej-mongo-shard1-3:27017: [Errno 8] nodename nor servname provided, or not known,andrej-mongo-shard1-2:27017: [Errno 8] nodename no\r\nr servname provided, or not known,andrej-mongo-shard1-1:27017: [Errno 8] nodename nor servname provided, or not known\r\n```\r\n",
    "head_branch": "respect_sys_dns_resolver_1",
    "is_a_fork": true,
    "comments": [
      "Using resolv.conf this way feels wrong to me. I believe that file is often auto generated. I would think you would want to use /etc/hosts. Regardless, instead of creating a dependency on dnspython, why not just use [socket.getfqdn](https://docs.python.org/3/library/socket.html#socket.getfqdn)?",
      "@behackett: dnspython is a requirement for DNS record seed discovery by SRV record anyway (https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/srv_resolver.py), so it's not a new dependency. If it's absent, current functionality is not affected.\r\nThe `getfqdn` function is just a wrapper over `gethostbyaddr` and doesn't add needed resolver \"search\" and \"domain\" functionality.",
      "Hi @anryko, I happen to have a local DNS server on my machine and I believe I reproduced the configuration you are referring to.\r\n\r\nHere are the various files involved:\r\n\r\n<pre>\r\nbutler# cat /etc/bind/named.conf.local \r\n// other stuff ...\r\nzone \"mdb\" { type master; file \"/etc/bind/db.mdb\"; };\r\n\r\nbutler# cat /etc/bind/db.mdb          \r\n$TTL 24h\r\n\r\n@\tIN SOA ns.here. hostnaster.ns.here. (\r\n\t\t1 86400 300 604800 3600)\r\n\r\n@\tIN\tNS\tns.here.\r\n@\tIN\tA\t127.0.0.1\r\n*\tIN\tA\t127.0.0.1\r\n\r\nrstest\tIN\tA\t127.0.0.1\r\n\r\nbutler# cat /etc/resolv.conf\r\nsearch here mdb\r\nnameserver 127.0.0.1\r\n</pre>\r\n\r\nThus I have a `.mdb` domain with `rstest.mdb` host defined, and `mdb` added to the dns search list in resolv.conf.\r\n\r\nWith the search list, Python's getaddrinfo does resolve the bare host name:\r\n\r\n<pre>\r\nbutler% python\r\nPython 2.7.16 (default, Oct 10 2019, 22:02:15) \r\n[GCC 8.3.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import socket\r\n>>> socket.getaddrinfo('rstest',80)\r\n[(2, 1, 6, '', ('127.0.0.1', 80)), (2, 2, 17, '', ('127.0.0.1', 80)), (2, 3, 0, '', ('127.0.0.1', 80))]\r\n</pre>\r\n\r\nPython 3 produces different output but also resolves:\r\n\r\n<pre>\r\nbutler% python3\r\nPython 3.7.3 (default, Apr  3 2019, 05:39:12) \r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import socket\r\n>>> socket.getaddrinfo('rstest',80)\r\n[(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 80)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_DGRAM: 2>, 17, '', ('127.0.0.1', 80)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_RAW: 3>, 0, '', ('127.0.0.1', 80))]\r\n>>> socket.getaddrinfo('rstest',27017)\r\n[(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 27017)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_DGRAM: 2>, 17, '', ('127.0.0.1', 27017)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_RAW: 3>, 0, '', ('127.0.0.1', 27017))]\r\n</pre>\r\n\r\nIf I remove mdb from the dns search list, resolution fails as expected:\r\n\r\n<pre>\r\nbutler% python\r\nPython 2.7.16 (default, Oct 10 2019, 22:02:15) \r\n[GCC 8.3.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import socket\r\n>>> socket.getaddrinfo('rstest',80)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nsocket.gaierror: [Errno -2] Name or service not known\r\n</pre>\r\n\r\nThen, I defined a replica set using bare host names as configuration, using the setup script at https://github.com/p-mongo/tests/blob/master/driver-dns-suffix/setup.rb:\r\n\r\n<pre>\r\nreplset:SECONDARY> rs.config()\r\n{\r\n\t\"_id\" : \"replset\",\r\n\t\"version\" : 3,\r\n\t\"protocolVersion\" : NumberLong(1),\r\n\t\"members\" : [\r\n\t\t{\r\n\t\t\t\"_id\" : 0,\r\n\t\t\t\"host\" : \"rstest:27017\",\r\n\t\t\t\"arbiterOnly\" : false,\r\n\t\t\t\"buildIndexes\" : true,\r\n\t\t\t\"hidden\" : false,\r\n\t\t\t\"priority\" : 1,\r\n\t\t\t\"tags\" : {\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t\"slaveDelay\" : NumberLong(0),\r\n\t\t\t\"votes\" : 1\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"_id\" : 1,\r\n\t\t\t\"host\" : \"rstest:27018\",\r\n\t\t\t\"arbiterOnly\" : false,\r\n\t\t\t\"buildIndexes\" : true,\r\n\t\t\t\"hidden\" : false,\r\n\t\t\t\"priority\" : 1,\r\n\t\t\t\"tags\" : {\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t\"slaveDelay\" : NumberLong(0),\r\n\t\t\t\"votes\" : 1\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"_id\" : 2,\r\n\t\t\t\"host\" : \"rstest:27019\",\r\n\t\t\t\"arbiterOnly\" : false,\r\n\t\t\t\"buildIndexes\" : true,\r\n\t\t\t\"hidden\" : false,\r\n\t\t\t\"priority\" : 1,\r\n\t\t\t\"tags\" : {\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t\"slaveDelay\" : NumberLong(0),\r\n\t\t\t\"votes\" : 1\r\n\t\t}\r\n\t],\r\n\t\"settings\" : {\r\n\t\t\"chainingAllowed\" : true,\r\n\t\t\"heartbeatIntervalMillis\" : 2000,\r\n\t\t\"heartbeatTimeoutSecs\" : 10,\r\n\t\t\"electionTimeoutMillis\" : 10000,\r\n\t\t\"catchUpTimeoutMillis\" : -1,\r\n\t\t\"catchUpTakeoverDelayMillis\" : 30000,\r\n\t\t\"getLastErrorModes\" : {\r\n\t\t\t\r\n\t\t},\r\n\t\t\"getLastErrorDefaults\" : {\r\n\t\t\t\"w\" : 1,\r\n\t\t\t\"wtimeout\" : 0\r\n\t\t},\r\n\t\t\"replicaSetId\" : ObjectId(\"5df3d7b3f2b410e18d58dac0\")\r\n\t}\r\n}\r\n</pre>\r\n\r\nThe Python driver appears to be able to connect to this deployment as expected:\r\n\r\n<pre>\r\nbutler% python\r\nPython 2.7.16 (default, Oct 10 2019, 22:02:15) \r\n[GCC 8.3.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pymongo\r\n>>> pymongo.version\r\n'3.10.0'\r\n>>> a=pymongo.MongoClient('mongodb://localhost:27017/?replicaSet=replset')\r\n>>> a.nodes\r\nfrozenset([(u'rstest', 27019), (u'rstest', 27018), (u'rstest', 27017)])\r\n>>> a.admin.command('ping')\r\n{u'$clusterTime': {u'clusterTime': Timestamp(1576270540, 1), u'signature': {u'keyId': 0L, u'hash': Binary('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00', 0)}}, u'ok': 1.0, u'operationTime': Timestamp(1576270540, 1)}\r\n</pre>\r\n\r\nSo, it seems that in my test the Python driver is able to correctly resolve host names using the system specified dns search suffixes.\r\n\r\n- What is your operating system and version, and Python version?\r\n- What is the result of running just the `getaddrinfo` in a clean Python environment?",
      "Hi @p-mongo, thank you for investigation and detailed response. The problem I encountered is relevant for MacOS (10.15.2 specifically in my case, with brew installed python 2.7.17 and 3.7.5). After reading your response I did try to reproduce in on Linux, but as you reported, it all works as expected there.",
      "@p-mongo, as apparently this issue is not in mongo driver, feel free to close the issue. Sorry for your time."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaf944ee515ce6a4b301",
    "number": 429,
    "body": "This is a cut at [bug 2061](https://jira.mongodb.org/projects/PYTHON/issues/PYTHON-2061). I’m a little unsure about whether the test change I’ve done is the best way to do it—the solution I have seems…OK, but not ideal.\r\n\r\nI’m open to any feedback about this. Thanks!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2061 bson: check for negative entry size in decode_file_iter (#429)\n\nRaise InvalidBSON instead of ValueError when decode_file_iter reads an invalid\r\nBSON object size."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcafa44ee515ce6a4b302",
    "number": 428,
    "body": "Fix DeprecationWarning: PY_SSIZE_T_CLEAN will be required for '#' formats\r\nFix DeprecationWarning: isAlive() is deprecated, use is_alive() instead\r\nFix SyntaxWarning: invalid escape sequence\r\nTest Python 3.8 on Travis\r\n\r\nhttps://jira.mongodb.org/browse/PYTHON-2001",
    "head_branch": "PYTHON-2001",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2001 Fix warnings emitted by Python 3.8 (#428)\n\nFix DeprecationWarning: PY_SSIZE_T_CLEAN will be required for '#' formats\r\nFix DeprecationWarning: isAlive() is deprecated, use is_alive() instead\r\nFix SyntaxWarning: invalid escape sequence\r\nTest Python 3.8 on Travis"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcafb44ee515ce6a4b303",
    "number": 427,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-2012\r\nThis PR depends on https://github.com/mongodb/libmongocrypt/pull/65. I need to wait until the libmongocrypt changes are merged before running a patch build. The tests pass locally.\r\n\r\nChanges:\r\n- silence mongocryptd output\r\n- Resync spec tests\r\n- Add prose test for custom endpoint for create_data_key\r\n- Update the prose test of Data key and double encryption to check command started events\r\n- Document 'endpoint' support\r\n- Document that create_data_key returns a Binary with UUID subtype.\r\n\r\nThe only part left is the changes to bulk write batching and bson command size limits which I will put up as a separate review.",
    "head_branch": "python-2012",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2012 FLE GA changes (#427)\n\nSilence mongocryptd output, users should provide logging options via mongocryptd_spawn_args instead.\r\nDocument 'endpoint' support in create_data_key.\r\nDocument that create_data_key returns a Binary with UUID subtype.\r\nAdd custom endpoint prose test.\r\nResync encryption spec tests.\r\nCheck command started events in Data key and double encryption prose test."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcafc44ee515ce6a4b304",
    "number": 426,
    "body": "",
    "head_branch": "py37",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Test against Python 3.7 on Travis (#426)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcafd44ee515ce6a4b305",
    "number": 425,
    "body": "Fixes this warning from Python 3.8:\r\n\r\n```\r\nbson/json_util.py:702: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\r\n  if doc['$minKey'] is not 1:\r\nbson/json_util.py:711: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\r\n  if doc['$maxKey'] is not 1:\r\n```",
    "head_branch": "is-not-literal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-2001 Fix Python 3.8 SyntaxWarning: \"is not\" with a literal (#425)\n\nFixes this warning from Python 3.8:\r\nbson/json_util.py:702: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\r\n  if doc['$minKey'] is not 1:\r\nbson/json_util.py:711: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\r\n  if doc['$maxKey'] is not 1:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcafe44ee515ce6a4b306",
    "number": 424,
    "body": "`pymongo.Collection.delete_one` returns a `DeleteResult` object which, among other things, provides the `deleted_count` attribute telling whether or not anything was actually deleted by the call. However, `gridfs.GridFS.delete` returns nothing regardless if a document is deleted. This PR changes the behavior of GridFS to more closely follow `Collection` by returning the `DeleteResult` from the underlying call to delete the document index.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcafe44ee515ce6a4b307",
    "number": 423,
    "body": "The argument 'lifetime' was removed from resolver.query(), srv_resolver.py crashed when trying to sent it.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcaff44ee515ce6a4b308",
    "number": 422,
    "body": "why can't i use lookup, when i using 'look up' like code behind\r\n```python\r\n    lookup_dict = {'$lookup':\r\n                    {'from': 'brand_new_product_stock',\r\n                     \"localField\": \"product_id\",\r\n                     \"foreignField\": \"product_id\",\r\n                     \"as\": \"stock\"}}\r\n\r\n    aggs = [\r\n        lookup_dict\r\n    ]\r\n\r\n    result = new_product_cursor['brand_new_product_details'].aggregate(aggs)\r\n```\r\nthen, error appear\r\n`pymongo.errors.OperationFailure: exception: Unrecognized pipeline stage name: '$lookup'`",
    "head_branch": "v3.8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0044ee515ce6a4b309",
    "number": 421,
    "body": "If the constructor of Cursor is called with unexpected arguments (ie when calling a `find` wrongly), the `__init__` method does not run at all, but `__del__` is still called and will (of course) crash.\r\n\r\nThis leads to some noise in the logged error on top of the real TypeError:\r\n```\r\n>>> pymongo.cursor.Cursor(wrong=1)\r\nException ignored in: <function Cursor.__del__ at 0x1048129d8>\r\nTraceback (most recent call last):\r\n  File \"/Users/arthur/dev/.venvs/Users--arthur--dev--dragonstone/lib/python3.7/site-packages/pymongo/cursor.py\", line 241, in __del__\r\n    self.__die()\r\n  File \"/Users/arthur/dev/.venvs/Users--arthur--dev--dragonstone/lib/python3.7/site-packages/pymongo/cursor.py\", line 298, in __die\r\n    already_killed = self.__killed\r\nAttributeError: 'Cursor' object has no attribute '_Cursor__killed'\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: __init__() got an unexpected keyword argument 'wrong'\r\n```\r\n\r\n\r\nThis PR might not be the best way to solve this, a `__new__` could also work for instance. Let me know if this looks acceptable and if there should also be a regression test.\r\n\r\nThanks!",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0144ee515ce6a4b30a",
    "number": 420,
    "body": "",
    "head_branch": "PYTHON-1857-bulk-ops-will-be-marked-executed-only-after-successful-invocations",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0244ee515ce6a4b30b",
    "number": 419,
    "body": "I have an app that makes heavy use of pymongo. However once in a while I get a \"InvalidBSON('',)\" exception. I haven't been able to track the original exception because pymongo discards useful information when wrapping exceptions.",
    "head_branch": "repr-exc-wrap",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0344ee515ce6a4b30c",
    "number": 418,
    "body": "The current code that verifies pymongo query projections does not replicate MongoDB shell's behavior when the projection is an empty dictionary.\r\n\r\n```\r\n> db.test.find({}, {})\r\n{ \"_id\" : ObjectId(\"5cec99eb81f850232d377fe1\"), \"value\" : 0 }\r\n{ \"_id\" : ObjectId(\"5cec99ec81f850232d377fe2\"), \"value\" : 1 }\r\n{ \"_id\" : ObjectId(\"5cec99ec81f850232d377fe3\"), \"value\" : 2 }\r\n```\r\n\r\nPyMongo verifies if the projection is not None, but before converting it to a proper dictionary with ` helpers._fields_list_to_dict`, any projection whose boolean value is False gets replaced with `{\"id\": 1}`. In the case of an empty dictionary, this is annoying, as it prevents creating a projection variable with an empty dictionary and optionally adding values to it.\r\n```python\r\n>>> list(coll.find({}, {}))\r\n[{'_id': ObjectId('5cec99eb81f850232d377fe1')},\r\n {'_id': ObjectId('5cec99ec81f850232d377fe2')},\r\n {'_id': ObjectId('5cec99ec81f850232d377fe3')}]\r\n```\r\n\r\nSimple problematic use case:\r\n```python\r\n# In the scope of a request\r\nprojection = {}\r\nif not args['verbose']:\r\n    projection['out'] = 0\r\nreturn list(coll.find({}, projection))\r\n```\r\nNot so elegant workaround to bypass this problem:\r\n```python\r\ncoll.find({}, projection or None)\r\n```\r\n\r\n# :man_juggling: :snake: ",
    "head_branch": "allow_empty_projection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0444ee515ce6a4b30d",
    "number": 417,
    "body": "Hey @prashantmital!\r\n\r\nI've added a customized `.deepsource.toml` as part of the PR that you can start using directly to run DeepSource analysis. I've also fixed some issues flagged by our analyzers while I was at it 😄\r\n\r\nTo continue running analysis on every PR, just follow these simple steps:\r\n\r\n1. **Merge this PR.**\r\n2. **Sign up on DeepSource** and grant access to this repository [here](https://deepsource.io/signup/).\r\n3. **Activate analysis on this repo** [here](http://deepsource.io/gh/mongodb/mongo-python-driver).\r\n\r\nTip: You can also take a look at the [docs](https://deepsource.io/docs/guides/quickstart.html).\r\n\r\nPlease let me know if you have any questions! :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0444ee515ce6a4b30e",
    "number": 416,
    "body": "",
    "head_branch": "PYTHON-1744/resync-command-monitoring-spec-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0544ee515ce6a4b30f",
    "number": 415,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1772\r\n\r\nI think the current tests are flakey because the session uses monotonic time in other places besides `with_transaction`. I've replaced the monotonic time patching with just patching the global timeout which is way simpler.",
    "head_branch": "PYTHON-1772",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1772 Fix flakey mock timeout tests for with_transaction (#415)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0644ee515ce6a4b310",
    "number": 414,
    "body": "This would be useful when used in Jupyter notebook.\r\nOr when using PyMongo in a generator in Keras (multi-threaded environment).",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0744ee515ce6a4b311",
    "number": 413,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1721\r\n\r\nThis change uses a single cursor to download all the chunks in a GridFS file instead of using individual find_one operations to read each chunk. I've also refactored the code a bit to add earlier detection of truncated chunks.  \r\n\r\nThe performance benefit of using a single cursor will vary but it should always be an improvement. \r\n\r\nPython 2.7 local server: negligible benefit (latency is ~0.09ms):\r\n```\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) TEST_PATH=driver-performance-test-data python test/performance/perf_test.py TestGridFsDownload # Local repl 1 node, cursor\r\nRunning TestGridFsDownload. MEDIAN=0.322574853897\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 162532197.9273853\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 35.708s\r\n\r\nOK\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) gcm\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\n$ mongo-python-driver git:(master) TEST_PATH=driver-performance-test-data python test/performance/perf_test.py TestGridFsDownload # Local repl 1 node, find_one\r\nRunning TestGridFsDownload. MEDIAN=0.326012134552\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 160818553.80029458\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 33.828s\r\n\r\nOK\r\n```\r\n\r\n\r\nPython 3.7 local server: 15% improvement:\r\n```\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) TEST_PATH=driver-performance-test-data python3.7 test/performance/perf_test.py TestGridFsDownload # Local repl 1 node, cursor\r\nRunning TestGridFsDownload. MEDIAN=0.25183119000000076\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 208190256.33798516\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 29.609s\r\n\r\nOK\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) gcm\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\n$ mongo-python-driver git:(master) TEST_PATH=driver-performance-test-data python3.7 test/performance/perf_test.py TestGridFsDownload # Local repl 1 node, cursor\r\nRunning TestGridFsDownload. MEDIAN=0.29158426900000034\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 179806682.23222953\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 30.502s\r\n\r\nOK\r\n```\r\n\r\nNow, once we run the benchmark against a server with some real world latency, using a cursor becomes much more advantageous. Let's test with an Atlas (M10) cluster.\r\n\r\nPython 2.7, Atlas 4.0.6 replica set, 33% speed up (latency is ~5ms):\r\n```\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) <ATLAS_ENV_VARS> TEST_PATH=driver-performance-test-data python test/performance/perf_test.py TestGridFsDownload # Atlas find cursor\r\ntest/performance/perf_test.py:114: UserWarning: Test timed out, completed 83 iterations.\r\n  warnings.warn('Test timed out, completed %s iterations.' % i)\r\nRunning TestGridFsDownload. MEDIAN=3.35720396042\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 15616805.120610315\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 313.563s\r\n\r\nOK\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) gcm\r\nM\ttest/__init__.py\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\n$ mongo-python-driver git:(master) <ATLAS_ENV_VARS> TEST_PATH=driver-performance-test-data python test/performance/perf_test.py TestGridFsDownload # Atlas find_one\r\ntest/performance/perf_test.py:114: UserWarning: Test timed out, completed 65 iterations.\r\n  warnings.warn('Test timed out, completed %s iterations.' % i)\r\nRunning TestGridFsDownload. MEDIAN=4.43294596672\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 11827078.514739025\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 311.489s\r\n\r\nOK\r\n```\r\n\r\nPython 3.7, Atlas 4.0.6 replica set: Again ~33% speed up:\r\n```\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) <ATLAS_ENV_VARS> TEST_PATH=driver-performance-test-data python3.7 test/performance/perf_test.py TestGridFsDownload # Atlas find cursor\r\ntest/performance/perf_test.py:114: UserWarning: Test timed out, completed 91 iterations.\r\n  warnings.warn('Test timed out, completed %s iterations.' % i)\r\nRunning TestGridFsDownload. MEDIAN=3.1946222420000083\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 16411580.471303768\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 317.615s\r\n\r\nOK\r\n$ mongo-python-driver git:(PYTHON-1721-master-final) gcm\r\nM\ttest/__init__.py\r\nSwitched to branch 'master'\r\nYour branch is up to date with 'origin/master'.\r\n$ mongo-python-driver git:(master) <ATLAS_ENV_VARS> TEST_PATH=driver-performance-test-data python3.7 test/performance/perf_test.py TestGridFsDownload # Atlas find_one\r\ntest/performance/perf_test.py:114: UserWarning: Test timed out, completed 65 iterations.\r\n  warnings.warn('Test timed out, completed %s iterations.' % i)\r\nRunning TestGridFsDownload. MEDIAN=4.296203145000021\r\n.{\r\n    \"results\": [\r\n        {\r\n            \"name\": \"TestGridFsDownload\",\r\n            \"results\": {\r\n                \"1\": {\r\n                    \"ops_per_sec\": 12203519.766288832\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 313.310s\r\n\r\nOK\r\n```",
    "head_branch": "PYTHON-1721-master-final",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0844ee515ce6a4b312",
    "number": 412,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1767",
    "head_branch": "PYTHON-1767",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1767 Ignore keyPattern/keyValue fields in doctest duplicate key error (#412)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0944ee515ce6a4b313",
    "number": 411,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1671",
    "head_branch": "PYTHON-1671",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1671 Add ClientSession.with_transaction API (#411)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0a44ee515ce6a4b314",
    "number": 410,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1766\r\n\r\nNoticed while working on retryable reads because my local server was running slow and test_large_limit took over 30 seconds. ",
    "head_branch": "PYTHON-1766",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1766 Use insert_many to reduce test runtime (#410)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0a44ee515ce6a4b315",
    "number": 409,
    "body": "Closes [PYTHON-1579](https://jira.mongodb.org/browse/PYTHON-1579). ",
    "head_branch": "PYTHON-1579/synchronize-connection-string-spec-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0b44ee515ce6a4b316",
    "number": 408,
    "body": "This is a follow up to #346 that was closed inadvertently. \r\n\r\nIt implements what was decided in [this JIRA ticket](https://jira.mongodb.org/browse/PYTHON-1439?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel&focusedCommentId=1751108#comment-1751108): add type annotations in stubs according to [PEP 484](https://www.python.org/dev/peps/pep-0484/).\r\n\r\nI took the work of @GrierPhillips and tried to answer some of the comments on the previous PR:\r\n * removed internals and private methods and functions\r\n * added type annotations for the `bson` package as well, as `pymongo` references it sometimes\r\n * cleaned up the styling to follow [typeshed's standards](https://github.com/python/typeshed/blob/master/CONTRIBUTING.md#conventions)\r\n\r\nI did not find a way to automatically test the stubs against real code as this is [ongoing work](https://github.com/python/mypy/issues/5028) by the `mypy` team. However I copied the `.pyi` files in `typeshed` and ran the tests there that helped me find and fix many issues.\r\n\r\nAlso I did not update `pymongo` with updates from version after 3.5 (Phillips' work).\n\n<!-- Reviewable:start -->\n---\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/mongodb/mongo-python-driver/408)\n<!-- Reviewable:end -->\n",
    "head_branch": "typing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0c44ee515ce6a4b317",
    "number": 407,
    "body": "Copy/pasted from the 3.7.2 release tag.",
    "head_branch": "changelog-3.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add changelog for 3.7.2 (#407)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0d44ee515ce6a4b318",
    "number": 406,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1684\r\n\r\nThis change implements sharded transaction support and testing for MongoDB 4.2 according to [SPEC-1168](https://jira.mongodb.org/browse/SPEC-1168).\r\n\r\nIn summary:\r\n- sharded transactions have the same API as replica set transactions.\r\n- On the first operation within a sharded transaction, the session is pinned to the selected mongos and all* subsequent operations are routed to the same server.\r\n- When any command within a sharded transaction fails with a transient error, the session is unpinned so that a subsequent `abortTransaction` can complete immediately without waiting for a potentially unreachable mongos.\r\n- The `recoveryToken` field is updated on each command response and sent along with all `commitTransaction` attempts.\r\n\r\nTo accomplish these goals, these changes refactor how Cursor/CommandCursor decode responses so that a command failure from a `find` or `getMore` can reset the server and unpin the session.",
    "head_branch": "PYTHON-1684",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0e44ee515ce6a4b319",
    "number": 405,
    "body": "Closes https://jira.mongodb.org/browse/PYTHON-1750 .",
    "head_branch": "PYTHON-1750/support-callbacks-for-simple-types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1750 Support callbacks for simple types (#405)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb0f44ee515ce6a4b31a",
    "number": 404,
    "body": "",
    "head_branch": "SPEC-1153/document-change-in-aggregate-behavior",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "SPEC 1153: Document change in aggregate command behavior (#404)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1044ee515ce6a4b31b",
    "number": 403,
    "body": "PR that test-drives GitHub's new Draft PR feature and also helps us track how far `master` and `42dev` have diverged.",
    "head_branch": "42dev",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1144ee515ce6a4b31c",
    "number": 402,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1751\r\n\r\nMerging once the tests pass.",
    "head_branch": "PYTHON-1751",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1751 Resync transaction spec tests for bulk write error reporting change (#402)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1144ee515ce6a4b31d",
    "number": 401,
    "body": "I encountered DeprecationWarning: collection_names is deprecated.\r\n\r\nThis is a simple name change, but we could also explain the\r\ndeprecation in detail in an aside or blockquote.",
    "head_branch": "fix-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1244ee515ce6a4b31e",
    "number": 400,
    "body": "Note that the newly introduced tests for SPEC-1153 follow the new [v2 CRUD spec-test format](https://github.com/mongodb/specifications/tree/master/source/crud/tests#test-format). \r\n\r\nAdditionally, this PR also:\r\n\r\n- re-syncs the CRUD (v1) spec-tests\r\n- refactors CRUD (v1 and v2) and Transaction spec test runners",
    "head_branch": "SPEC-1153/add-readConcern-to-aggregation-out",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "SPEC 1153: Adding readConcern support to aggregation with $out (#400)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcb1344ee515ce6a4b31f",
    "number": 399,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Clarify that Binary expects data to be bytes (#399)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1444ee515ce6a4b320",
    "number": 398,
    "body": "Currently, Travis only ever checks the compiled BSON implementation.\r\n\r\nThis change makes it run the whole test suite twice: once with the native implementation, and again with the compiled implementation. This is especially important when making changes to the BSON module, as I have done in #392.",
    "head_branch": "travis_bson_native_compiled",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1544ee515ce6a4b321",
    "number": 397,
    "body": "I updated the test to pass on a replica set. Let's skip the test on sharded clusters for now while we wait for SPEC/SERVER changes to be decided. ",
    "head_branch": "PYTHON-1739",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1739 Skip failing change stream test on sharded clusters (#397)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1644ee515ce6a4b322",
    "number": 396,
    "body": "https://jira.mongodb.org/browse/PYTHON-1735",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1744ee515ce6a4b323",
    "number": 395,
    "body": "",
    "head_branch": "removepy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1467 Remove outdated code for old python versions (#395)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1844ee515ce6a4b324",
    "number": 394,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1719 and https://jira.mongodb.org/browse/PYTHON-1734\r\n\r\nI plan to merge this into master and 42dev.",
    "head_branch": "4.1-test-failures",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1719 Stop testing getpreverror on MongoDB 4.1+"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1944ee515ce6a4b325",
    "number": 393,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1730\r\n\r\nThis change makes Python use 'w':majority and 'wtimeout' according to the updated transaction spec: https://github.com/mongodb/specifications/blob/ba1b071/source/transactions/transactions.rst#majority-write-concern-is-used-when-retrying-committransaction ",
    "head_branch": "PYTHON-1730",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1730 Use w:majority when retrying commitTransaction (#393)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcb1944ee515ce6a4b326",
    "number": 392,
    "body": "Jira: [PYTHON-1528](https://jira.mongodb.org/browse/PYTHON-1528)\r\n\r\nThis implements encoding support for:\r\n\r\n* set\r\n* frozenset\r\n* dict_keys\r\n* dict_values\r\n* dict_items\r\n* xrange (Python 2)\r\n* range (Python 3)\r\n* bytearray\r\n\r\nThese are of course all one-way conversions, which is detailed in the mapping table in the documentation.\r\n\r\n`bytearray`s are also available in Python 2. I made them serialize like `bytes` in Python 3, which means they decode to `bson.Binary` in Python 2.\r\nI don't see a lot of use for serializing ranges, but I added it because it was simple.\r\n\r\nTests are included. I tested with Python 2.7.15rc1 and 3.6.7, with and without the C bson module.",
    "head_branch": "bson_python3_types",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1a44ee515ce6a4b327",
    "number": 391,
    "body": "The failure was likely the result of an incorrect spec-test. ",
    "head_branch": "fix-failing-compression-uriopts-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1722 Fix spec-test failures for the compression URI options (#391)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1b44ee515ce6a4b328",
    "number": 390,
    "body": "This allows the same behavior as with find(), more intuitive.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1c44ee515ce6a4b329",
    "number": 389,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1704\r\nFixes: https://github.com/mongodb/motor/pull/44",
    "head_branch": "close-cursor-thread",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1704 Close periodic task thread when client is closed (#389)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1d44ee515ce6a4b32a",
    "number": 388,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1e44ee515ce6a4b32b",
    "number": 387,
    "body": "[PYTHON-1695](https://jira.mongodb.org/browse/PYTHON-1695)\r\n\r\nI'm testing out moving our system to using Python3.7. We have an instance where we are using [ZipFile](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile) on a `GridOut` instance. Because [seekable()](https://www.python.org/dev/peps/pep-3116/#raw-i-o) is defined as part of the IO API the ZipFile implementation does not handle an `AttributeError` coming from accessing the `seekable` method.\r\n\r\nThis appears to be a change in the `ZipFile` implementation between Python3.6 and Python3.7.\r\n\r\nThe `GridOut` implementation is relatively close to implementing `io.IOBase` so I figured I would close the gap, have it subclass `io.IOBase` and also note where it diverges from the `io.IOBase` behavior.\r\n\r\nI don't use `ZipFile` against a `GridIn` instance and it diverges from `io.IOBase` in that it doesn't return the number of bytes written so I refrained from making it a subclass of `io.IOBase`",
    "head_branch": "add-more-IOBase-methods-to-gridfs-files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb1f44ee515ce6a4b32c",
    "number": 386,
    "body": "Implements the spec introduced in: https://github.com/mongodb/specifications/pull/414",
    "head_branch": "implement-uri-options-spec",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1670: Implement Unified URI Options (#386)"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcb2044ee515ce6a4b32d",
    "number": 385,
    "body": "It will avoid copying/pasting code from this project to make sure that a variable is a valid collection name.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2044ee515ce6a4b32e",
    "number": 384,
    "body": "Fix: properly skip tests that include 'skipReason'.\r\nRevendor transaction spec tests at commit 367842f1ee4b80f75664a05c6b9d5b2498cf856d",
    "head_branch": "PYTHON-1658",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1658 Test that transaction reads ignore db/collection readConcern (#384)\n\nFix: properly skip tests that include 'skipReason'.\r\nRevendor transaction spec tests at commit 367842f1ee4b80f75664a05c6b9d5b2498cf856d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2144ee515ce6a4b32f",
    "number": 383,
    "body": "I found this little snippet of code that supported some Python 2.4 behavior hanging around in the `uri_parser` module. I think we can safely remove it now.",
    "head_branch": "ref/remove-py24-legacy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1683 Remove _partition and _rpartition from uri_parser module (#383)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2244ee515ce6a4b330",
    "number": 382,
    "body": "# WIP\r\n\r\n***\r\n\r\n## 09/13/2018\r\n\r\nThis PR introduces the `BSONWriter` class which is intended to be the primary API for the user to specify serialization routines for custom types. Currently, only the functionality to support the serialization of arbitrary types in document fields has been implemented.",
    "head_branch": "enh/bson-reader-writer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2344ee515ce6a4b331",
    "number": 381,
    "body": "",
    "head_branch": "flexible-bson-encoder-decoder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2444ee515ce6a4b332",
    "number": 380,
    "body": "Current connection pool implementation is based upon python set() and prone to connection pool poisoning problem.\r\n\r\nPython set() is unordered by definition. So each command executed withdraws random connection from pool, touching its last usage time. This scheme shows good result on persistent established loads, increasing number of connections to handle the load. But spikes of loads introduces pool poisoning problem. During the spikes of load connection pool creates new connection to handle the increased load (which is expected behavior), but when returning to normal levels connection pool cannot reduce amount of connections, because due to unordered set() commands passed to virtually all open connection, preventing them from expiration. So the amount of open connections is never decreased on particular loads.\r\n\r\nLIFO policy implementation addresses this issue. All connections are ordered by usage time using deque. Connections are taken and returned to pool from the left side of deque. For persistent load this scheme is equal to current implementation. For the spiky loads, after handling the spikes, we have frequently used connections from the left side, while unused moved to the right side, giving them chance to expire. Deque implementation offers efficient copy-free way of expiring connections from the right side.\r\n\r\nUsing proposed implementation we've observed ~18000 of mongod connection on system start, reducing to ~4000 after several minutes.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1663 LIFO connection pool policy (#380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2544ee515ce6a4b333",
    "number": 379,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unused import (#379)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2644ee515ce6a4b334",
    "number": 378,
    "body": "This would make errors like in this bug mongomock/mongomock#458 more readable.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix equality comparison of WriteConcern objects. (#378)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2644ee515ce6a4b335",
    "number": 377,
    "body": "I've run coverity scan of python-pymongo 3.6.1 - see log [scan-results.txt](https://github.com/mongodb/mongo-python-driver/files/2434573/scan-results.txt)\r\n\r\n\r\nI've guessed what is the right way to fix the issues which IMHO aren't false positive. In case of other preferences, I will change it.\r\n\r\n` pymongo/database.py` - without this fix, `elif` is never reached.\r\n`mongo_client.py` - `session` can be None, so it needs to be checked.\r\n`test_cursor.py` - typo\r\n`utils.py` - currently `pref.tag_sets\" is never used. Using tags from both lists.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2744ee515ce6a4b336",
    "number": 376,
    "body": "Jira: https://jira.mongodb.org/browse/PYTHON-1642",
    "head_branch": "docs_fix_count",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2844ee515ce6a4b337",
    "number": 375,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2944ee515ce6a4b338",
    "number": 374,
    "body": "Closes [PYTHON-1623](https://jira.mongodb.org/browse/PYTHON-1623)",
    "head_branch": "DOC/PYTHON-1623-Attempt2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "FIX: explicitly state read and write concern in causal consistency examples (#374)\n\nPYTHON-1623 Causal Consistency Examples for the Manual"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2a44ee515ce6a4b339",
    "number": 373,
    "body": "Closes [PYTHON-1619](https://jira.mongodb.org/browse/PYTHON-1619).",
    "head_branch": "PYTHON-1619/implement-ObjectId-specification",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1619 Implement ObjectID Specification (#373)\n\nPYTHON-1619 Implement ObjectID Specification"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2b44ee515ce6a4b33a",
    "number": 372,
    "body": "Hello, first time contributor here!\r\n\r\nI was doing a little debugging on an old code of mine and started to read around the documentation available. To my surprise, MongoClient's docstring was set to \r\n\r\n```\r\nA base class that provides attributes and methods common\r\nto multiple pymongo classes.\r\n\r\nSHOULD NOT BE USED BY DEVELOPERS EXTERNAL TO MONGODB.\r\n```\r\n\r\nConfused, I went on researching and found out that MongoClient inherits from a base class and does not provide a new docstring, cause the parent's docstring to be displayed.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add class docstring to MongoClient (#372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2b44ee515ce6a4b33b",
    "number": 371,
    "body": "Closes [PYTHON-1577](https://jira.mongodb.org/browse/PYTHON-1577)\r\n",
    "head_branch": "PYTHON-1577/custom-server-selector",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1577 Allow applications to register a custom server selector (#371)\n\nPYTHON-1577 Allow applications to register a custom server selector"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2c44ee515ce6a4b33c",
    "number": 370,
    "body": "Closes [PYTHON-1621](https://jira.mongodb.org/browse/PYTHON-1621)",
    "head_branch": "DOC/PYTHON-1621",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1621 Modify change stream output example for manual (#370)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2d44ee515ce6a4b33d",
    "number": 369,
    "body": "There's no need to project out the _id field in this test. I opened [SERVER-36598](https://jira.mongodb.org/browse/SERVER-36598) for the server bug.",
    "head_branch": "PYTHON-1624",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1624 Fix failing $out test on MongoDB latest (#369)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2e44ee515ce6a4b33e",
    "number": 368,
    "body": "Closes [PYTHON-1623](https://jira.mongodb.org/browse/PYTHON-1623).",
    "head_branch": "DOC/PYTHON-1623",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "DOC: add manual example for causal consistency (#368)\n\n* DOC: add manual example for causal consistency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb2f44ee515ce6a4b33f",
    "number": 367,
    "body": "Hi,\r\n\r\nEven if I assume OperationFailure details parameter was always expected to be a dictionary, the check was never explicit,\r\n\r\nPrior to version 3.7.0 there was nothing preventing users to instantiate an OperationFailure (or any sub class) with details being something else than a dictionary.\r\n\r\nThis lack of validation resulted in mongomock providing a string value in this parameter, thus being incompatible with pymongo==3.7.0 or 3.7.1\r\n\r\nThis PR aim at fixing this regression.",
    "head_branch": "bugfix/handle_non_dict_in_operation_failure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3044ee515ce6a4b340",
    "number": 366,
    "body": "Looks like https://github.com/travis-ci/travis-ci/issues/943 was fixed.\r\nhttps://github.com/travis-ci/travis-ci/issues/5485 isn't needed since we don't support Python 3.2 . ",
    "head_branch": "remove-travis-hacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove Travis workarounds (#366)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3144ee515ce6a4b341",
    "number": 365,
    "body": "Removed ambiguity for aggregate command in MongoDB 3.6 or higher by adding a note in documentation.",
    "head_branch": "docs/aggregate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3244ee515ce6a4b342",
    "number": 364,
    "body": "1. Added documentation to use GEOSPHERE when working with latitudes and longitudes.\r\n2. Added notes when inserting location in GEOSPHERE.\r\n3. Added warning of deprecated geoNear command.",
    "head_branch": "docs/clarification-on-geospatial-indexing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add GEOSPHERE to geospatial docs (#364)\n\nAdd warning for deprecated geoNear command."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3344ee515ce6a4b343",
    "number": 363,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1617 Fix database name check in index cache (#363)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3444ee515ce6a4b344",
    "number": 362,
    "body": "",
    "head_branch": "PYTHON-1603",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1603 Truncate large datetimes properly (#362)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3544ee515ce6a4b345",
    "number": 361,
    "body": "Today I was implementing find_one_and_update, and I wanted to verify the behavior if no value was matched, but found the docs did not adequately document the behavior. I verified the behavior on MongoDB 3.6 and the latest pymongo and documented it here.",
    "head_branch": "docs/find_one_and_update-return-value",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Document find_one_and_update return value on no match. (#361)\n\nTrim excess whitespace."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3544ee515ce6a4b346",
    "number": 360,
    "body": "",
    "head_branch": "results-repr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3644ee515ce6a4b347",
    "number": 359,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README.rst - Support for MongoDB 4.0 (#359)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3744ee515ce6a4b348",
    "number": 358,
    "body": "",
    "head_branch": "results-repr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3844ee515ce6a4b349",
    "number": 357,
    "body": "",
    "head_branch": "results-repr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3944ee515ce6a4b34a",
    "number": 356,
    "body": "Closes [PYTHON-1597](https://jira.mongodb.org/browse/PYTHON-1597)\r\n\r\nThis allows us to specify (with the help of a decorator on the `ClientContext`) the storage engine that the server must be running with for a given test to be executed.\r\n\r\n### Motivation\r\n\r\nSpec-tests introduced in [PYTHON-1565](https://jira.mongodb.org/browse/PYTHON-1565) can only be run when the server is using wired Tiger. These tests failed when the MMAPv1 engine was in use, resulting in [failures on evergreen](https://evergreen.mongodb.com/task/mongo_python_driver_tests_storage_engines__python_version~2.7_storage_engine~mmapv1_test_4.0_standalone_9b632c776c3ace91dd6fd71dd98164d77881f766_18_06_25_02_59_16).\r\n\r\n\r\n### Comments\r\n\r\nI chose to use the `db.serverStatus()` command to obtain storage engine information because: \r\n\r\n1) other drivers already follow this approach in their test infrastructure (e.g. PHP)\r\n2) inferring storage engine information from the output of `serverStatus` seemed to present fewer ambiguities than the output of `getCmdLineOpts`. The latter tends to be confusing because the `getCmdLineOpts['parsed']` dict seems to always contain the `wiredTiger` key and we need to check whether the `engine` key has been set to `mmapv1` to ascertain the storage engine. This seemed a bit counter-intuitive to me but if you're not a fan of calling `serverStatus`, I can use the `cmd_line` information as well.",
    "head_branch": "enh/add-test-runner-helper-for-storage-engine",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1597 Don't run Change Stream tests on MMAPv1 (#356)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3a44ee515ce6a4b34b",
    "number": 355,
    "body": "WIP PR that makes it easier to track changes for https://jira.mongodb.org/browse/PYTHON-1565.",
    "head_branch": "feat/PYTHON-1565",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1565 Add helpers and options for Change Streams Follow-on Work (#355)\n\nPYTHON-1565 Add helpers and options for Change Streams Follow-on Work (#355)\r\n\r\nAdd MongoClient.watch() and Database.watch().\r\nAdd start_at_operation_time to all watch() helpers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3b44ee515ce6a4b34c",
    "number": 354,
    "body": "In FIPS mode, md5 is not available. In such cases, fall back to sha1.\r\nSee https://docs.python.org/3/library/hashlib.html for more info.\r\n\r\nThis change is based on [something similar to what celery\r\ndid](https://github.com/celery/kombu/pull/711/commits/7e164f7f5e12521812a10ac268d8bec8e51e3a13).\r\n\r\nThis is needed for https://jira.mongodb.org/browse/PYTHON-1520.",
    "head_branch": "fips-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3c44ee515ce6a4b34d",
    "number": 353,
    "body": "According to the doc of Decimal128, all NaN values will be represent as `Decimal128('NaN')` for matching the behavior of MongoDB's Decimal128 implementation, but this behavior also affect the serialization to JSON.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3d44ee515ce6a4b34e",
    "number": 352,
    "body": "- \\\\$ and \\\\. trigger SyntaxError in Python 3.6\r\n- % format operator is not compatible with Python 3.6",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1556 Fix compatibility issues with Python >= 3.6 (#352)\n\nUse raw strings to avoid invalid escape sequence warnings in Python >= 3.6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3e44ee515ce6a4b34f",
    "number": 351,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Stylize GitHub correctly (#351)\n\nFix a link to PyMongo GitHub source"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3f44ee515ce6a4b350",
    "number": 350,
    "body": "As discussed here https://jira.mongodb.org/browse/PYTHON-1504 I make a pull request to bring the 'isLegalUTF8' check in line with the python behaviour.\r\n\r\nI also added two tests.\r\n* one which tries all bit combinations within the 244 range\r\n* one which tries just a few samples to trigger the problem.\r\n\r\nI think the first one is the better one, since it goes much deeper, with the negative side effect of letting the test suite run for more than 5 minutes. Which is typically not acceptable, so I disabled it via 'return' at the top of it.\r\n\r\nI enabled 'allow edits from maintainers' on my branch here. So feel free to adjust the unittests to your needs before merging.",
    "head_branch": "fix-isLegalUTF8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb3f44ee515ce6a4b351",
    "number": 349,
    "body": "While writing tests for an application using Decimal128 for storing currency, I discovered that `mongomock` didn't support several operations (e.g., $inc) on Decimal128 values as `bson.decimal128` didn't support them. This PR adds support for basic operators for Decimal128 so that `mongomock` is once again happy.\r\n\r\nRef: https://jira.mongodb.org/browse/PYTHON-1473",
    "head_branch": "Decimal128_Operators",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4044ee515ce6a4b352",
    "number": 348,
    "body": "The following one-character patch fixes the ugly looking message:\r\n<pre>\r\npymongo.errors.InvalidURI: (\"Invalid URI scheme: URI must begin with '%s' or '%s'\", ('mongodb://', 'mongodb+srv://'))\r\n</pre>",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use formatting operator to format error message (#348)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4244ee515ce6a4b353",
    "number": 347,
    "body": "It was previously possible to use a set to specify fields, but this is no longer being allowed due to new validation constraints.\r\n\r\nIt seems that the validation is being unnecessarily strict.  [PYTHON-946](https://jira.mongodb.org/browse/PYTHON-946) covered the relaxation of the validation to allow sequences; this trivial change extends that to sets as well.  (I'm presuming there was a good reason for not changing it to the more generic `collections.Collection`; otherwise, that would be a better fit.)",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow fields to be a set (#347)\n\nAdd test cases for set and tuple projection arguments."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4344ee515ce6a4b354",
    "number": 346,
    "body": "This pull request is in reference to the jira ticket [Stub Files for PyMongo](https://jira.mongodb.org/browse/PYTHON-1439?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel&focusedCommentId=1751108#comment-1751108).\r\n\r\nThese are the stub files that I use for pymongo version 3.5.1 and I have yet to run into any issues. That is not to say that they have been fully tested. These files would benefit from a review by someone with a better understanding of the internal operations of PyMongo as there are numerous cases where I used Any when I was unsure of an argument or return type. ",
    "head_branch": "performance",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4444ee515ce6a4b355",
    "number": 345,
    "body": "* Mark some ORM-like layers as no longer maintained: MongoKit, MongoAlchemy, Minimongo, Manga\r\n* Add testing driver: mongomock\r\n* Add ORM-like layer: uMongo",
    "head_branch": "update-tools-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update tools documentation (#345)\n\nAdd testing driver, mongomock.\r\nAdd new ORM-like framework, uMongo.\r\nUpdate no longer maintained ORM-like libraries, MongoKit, MongoAlchemy, \r\nminimongo, and Manga."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4544ee515ce6a4b356",
    "number": 344,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4644ee515ce6a4b357",
    "number": 343,
    "body": "The copyright message constructed depends on the system current date. So the build changes everytime(Every year technically) it runs. This dependency should not be there as part of reproducible-builds effort and has been fixed by removing the date alone.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4644ee515ce6a4b358",
    "number": 342,
    "body": "",
    "head_branch": "PYTHON-1399",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4744ee515ce6a4b359",
    "number": 341,
    "body": "Sorry. forgot to add my name to contributer's list.",
    "head_branch": "jagrut_contributer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add name to contributor list (#341)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4844ee515ce6a4b35a",
    "number": 340,
    "body": "Added docs for _create_or_update user. However, the dropUser command is in the remove_user functions which is getting deprecated(?) which has caused me some confusion on which docs to write for removing users.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4944ee515ce6a4b35b",
    "number": 339,
    "body": "update",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4a44ee515ce6a4b35c",
    "number": 338,
    "body": "Reference to the ticket https://jira.mongodb.org/browse/PYTHON-1388.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1388 fix docs example. (#338)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4b44ee515ce6a4b35d",
    "number": 337,
    "body": "",
    "head_branch": "fix_regex_eq",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-1299 fix Regex __eq__ method (#337)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4c44ee515ce6a4b35e",
    "number": 336,
    "body": "reference to the ticket\r\nhttps://jira.mongodb.org/browse/PYTHON-1355?jql=project%20%3D%20PYTHON%20AND%20assignee%20in%20(EMPTY)\r\n",
    "head_branch": "jagrut_trivedi",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4d44ee515ce6a4b35f",
    "number": 335,
    "body": "Fix issue and add test case.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4e44ee515ce6a4b360",
    "number": 334,
    "body": "remove all occurrences of `cursor_manager` including tests, .rst, docstrings\r\nchecked that `python setup.py test` returns success\r\n\r\nissue: https://jira.mongodb.org/browse/PYTHON-1301",
    "head_branch": "feature/python_1301_remove_deprecated_cursor_manager",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb4f44ee515ce6a4b361",
    "number": 333,
    "body": "Hi friends, it was nice stopping by today :)\r\n\r\nThese commits are entirely automated via [pre-commit](http://pre-commit.com) -- I ran two hooks from [pre-commit-hooks](https://github.com/pre-commit/pre-commit-hooks).\r\n\r\nHere was the configuration I used (I wasn't sure if you wanted to adopt the framework or not so I didn't check in the configuration):\r\n\r\n```yaml\r\n-   repo: https://github.com/pre-commit/pre-commit-hooks.git\r\n    sha: v0.9.2\r\n    hooks:\r\n    -   id: trailing-whitespace\r\n        # these seem to be generated, likely by python2.7 which has a bug\r\n        # in json.dumps which introduces trailing whitespace:\r\n        # https://bugs.python.org/issue16333\r\n        # leave these alone until there's more information\r\n        exclude: ^test.*\\.json$\r\n    -   id: end-of-file-fixer\r\n```\r\n\r\nThe commands I ran were:\r\n\r\n```\r\npre-commit run trailing-whitespace --all-files\r\npre-commit run end-of-file-fixer --all-files\r\n```",
    "head_branch": "simple_pre_commits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5044ee515ce6a4b362",
    "number": 332,
    "body": null,
    "head_branch": "ignore-rst-for-evergreen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5044ee515ce6a4b363",
    "number": 331,
    "body": "Need to check python 2.6 for the date ",
    "head_branch": "docs-googletags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: add google tag (#331)\n\nUpdate copyright for docs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5144ee515ce6a4b364",
    "number": 330,
    "body": "The program's current behavior will always call `collection.create_index(index)` regardless of whether this index exists or not, so when you use a mongo user which without `createIndex` privilege, you can't write to the `gridfs`, though those indexes are already created by admin.\r\n",
    "head_branch": "fixbug/gridfs_always_createindexes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bug: SON object and list can not be compared (#330)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5244ee515ce6a4b365",
    "number": 329,
    "body": "related to: \r\nhttps://github.com/mongodb/mongo-python-driver/commit/6aaa1f71aadbc156d9f06bb79ba67b4d018db3ea#diff-3eb2775b8b87dbc3c82ece22117b5259L216\r\nPYTHON-1269\r\n\r\nIf the mongo_client object is GC'ed without an explicit call close, the list of cursors to be closed remain open with no way of being closed.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5344ee515ce6a4b366",
    "number": 328,
    "body": "",
    "head_branch": "fix-multiline-exceptions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix multiline exceptions (#328)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5444ee515ce6a4b367",
    "number": 327,
    "body": "This MR for passing tzinfo from JSON Options to datetime object while dumping BSON type use `json_util`. Usage:\r\n\r\n```python\r\nimport datetime\r\nfrom bson import json_util, tz_util\r\n\r\ntz = tz_util.FixedOffset(-7, 'UTC')\r\n\r\njson_util.DEFAULT_JSON_OPTIONS = json_util.JSONOptions(\r\n        datetime_representation=json_util.DatetimeRepresentation.ISO8601,\r\n        tz_aware = True,\r\n        tzinfo = tz)\r\n\r\nprint json_util.dumps({ \"created_at\": datetime.datetime(2017, 06, 06, 17, 22, 59, 232),})\r\n\r\n# Output {\"created_at\": {\"$date\": \"2017-06-06T17:22:59.000-0007\"}}\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5544ee515ce6a4b368",
    "number": 326,
    "body": "This PR makes both python and c BSON decoder implementation pass current decoding field name to raw BSON decoder (e.g. RawBSONDocument). It is needed to add some name-dependent decoding behaviour.\r\nIn addition to context sharing between decoding levels from #324 it can give custom BSON decoder such feature like decoding map (e.g. `foo` array would be decoded to `FooClass` object, and the inner `foo.bar` array would be wrapped by `BarClass`)",
    "head_branch": "pass-field-name-to-raw-decoder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5644ee515ce6a4b369",
    "number": 325,
    "body": "For some reason [validate_read_preference_mode](https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/common.py#L305) returns value, that is not valid to be validated again. This PR fixes this problem and allows `MongoClient` options could be parsed outside of it and passed as keyword arguments like celery mongo backend [does it](https://github.com/celery/celery/blob/master/celery/backends/mongodb.py#L77).",
    "head_branch": "fix-readpreference-parsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5744ee515ce6a4b36a",
    "number": 324,
    "body": "Hi there.\r\nI'm trying to implement custom BSON decoding logic, that decodes data to different object types. And I need to store some decoder state at different recursion level. I think it would be handy if `CodecOptions` would allow `document_class` to be either class or instance, having a special `_type_marker` attribute. For that I've reordered conditions because `issubclass` call fails when it's called on non-class object.\r\n",
    "head_branch": "allow-document-class-instances",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5744ee515ce6a4b36b",
    "number": 323,
    "body": "only referencing `self.__collection.database` when actually needed",
    "head_branch": "v2.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Slightly faster Cursor.next() (#323)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcb5844ee515ce6a4b36c",
    "number": 322,
    "body": "Fix markup for Collation class in IndexModel documentation.\r\n\r\nFor https://jira.mongodb.org/browse/PYMODM-55\r\n\r\nThere was some confusion in PyMODM about how to create an index that used the \"weights\" property for a text index. The [PyMODM docs](https://pymodm.readthedocs.io/en/latest/api/index.html#pymodm.MongoModel) link to PyMongo's [IndexModel](http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.IndexModel). This links to [create_indexes](http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.create_indexes). From here, there's a dead end.\r\n\r\nThese changes link to the createIndexes command in the MongoDB manual, which provides a table showing all available options for the command. This also fixes some markup for the \"collation\" parameter in constructing an IndexModel.",
    "head_branch": "index-documentation-enhancements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Link to createIndexes command from create_indexes documentation.\nFix markup for Collation class in IndexModel documentation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5944ee515ce6a4b36d",
    "number": 321,
    "body": "Two things:\r\n\r\n* Use simplejson in test_bson_corpus in Python 2.6 (instead of json), when available\r\n* Don't use document_class in JSONOptions if there's no object_pairs_hook, since that option won't be available in that case",
    "head_branch": "py26-extended-json",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5a44ee515ce6a4b36e",
    "number": 320,
    "body": "Add live demo script tags.py",
    "head_branch": "sdam-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5b44ee515ce6a4b36f",
    "number": 319,
    "body": "",
    "head_branch": "extended-json",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5c44ee515ce6a4b370",
    "number": 318,
    "body": "Introduces two new `SONManipulators` to transparently escape/unescape illegal keys when storing/retrieving documents:\r\n\r\n- `DeterministicKeyEscaper` uses MD5 to generate \"safe\" versions of escaped keys. This method is slower and requires more storage space, but the escaped keys are potentially queryable.\r\n- `NonDeterministicKeyEscaper` uses an internal counter to generate \"safe\" versions of escaped keys. This method is faster and requires less storage space, but the escaped keys should be considered not queryable.\r\n\r\nFor more information, refer to:\r\n- https://jira.mongodb.org/browse/PYTHON-1191 (JIRA ticket)\r\n- http://stackoverflow.com/q/40639393/ (original context)\r\n\r\n**Note:** In order to achieve compatibility with Python 2 and 3 for this feature, I added the `six` library to the project dependencies (in `setup.py`). I'm not sure that this is the right context to introduce a new dependency, but I don't know this project well enough yet to propose an alternate approach. Definitely open to guidance on this!",
    "head_branch": "son_key_escaper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5d44ee515ce6a4b371",
    "number": 317,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5e44ee515ce6a4b372",
    "number": 316,
    "body": "The memory leak happens when I use `document_class=RawBSONDocument`, because its `__inflated` property calls `bson._iterate_elements` that in turn calls `_element_to_dict`. The memory leak is present only in the C extension; if it is disabled everything becomes OK.\n\nWhen the default `document_class` is used (i.e. `dict`) there is no memory leak, because that uses different `_cbson`  functions where the ref counts are handled properly (`_elements_to_dict` in `_cbsonmodule.c`).\n",
    "head_branch": "messa_fix_decref_after_tuple",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb5f44ee515ce6a4b373",
    "number": 315,
    "body": "TypeError inside `bson.codec_options.CodecOptions` incorrectly references the non-existent class `bson.raw_bson_document.RawBSONDocument`; should reference `bson.raw_bson.RawBSONDocument` instead.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6044ee515ce6a4b374",
    "number": 314,
    "body": "Each MongoReplicaSetClient has a “Monitor”. The Monitor checks the state of each mongo node in our replica set every 30 seconds by default. The Monitor firstly tries to find an available connection from connection pool for the ping check,  if it cannot find any available connection, it “forces\" the connection pool to create a new connection for its ping check, even if  # of connections in pool  > max_pool_size.  yeah, it  just ignore the max_pool_size.\n\nLet's think about a edge case. \n1. let's say we have 3 mongo instances (1 primary and 2 secondaries), and assume that reads and writes keep coming\n2. set write_concern = 3 and max_pool_size = 10\n3. one secondary instance goes down (maybe for maintainance)\n4. all connections in connection pool will be \"blocked\" quickly due to write_concern, because  write_concern = 3  but we only have 2 mongo instances now.\n5. However, the monitor checks and refreshes the state of replica set every 30 seconds(default), which forces the connection pool to create a new connection every 30 seconds. After the monitor check, the new created connection will be returned to the pool ,then it will quickly be used by new write operation and will be “blocked” due to write_concern issue.  This scenario keeps occurring again and again until all available connections of mongo instance have been used up. \n\nThis is very bad although it is a edge case. \n\nIn my understanding, all \"forced\" created connections for \"refresh check\" should drop after use instead of returning it to connection pool again. \n",
    "head_branch": "v2.8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6144ee515ce6a4b375",
    "number": 313,
    "body": "",
    "head_branch": "mw_rel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6244ee515ce6a4b376",
    "number": 312,
    "body": "Type information for INT64 types are lost when using dumps. By default the type should be retained.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6344ee515ce6a4b377",
    "number": 311,
    "body": "[unicode decode error when creating index.\n](https://jira.mongodb.org/browse/PYTHON-1128)\n\nWhen creating a index in Mongo shell, I got the correct exception:\n\n```\n> db.case_detail.createIndex({'案号': 1}, {background: true})\n{\n    \"createdCollectionAutomatically\" : false,\n    \"numIndexesBefore\" : 9,\n    \"errmsg\" : \"exception: Btree::insert: key too large to index, failing guangdong_courts.case_detail.$案号_1 5360 { : \\\"（2015）佛明法民一初字第653号当事人:原告:杨瑞芳,被告:李永清\\n案由:民间借贷纠纷\\n开庭时间:2015-11-3 15:00\\n开庭地��...\\\" }\",\n    \"code\" : 17280,\n    \"ok\" : 0\n}\n```\n\nBut when I use pymongo, I got this error:\n\n```\n---------------------------------------------------------------------------\nUnicodeDecodeError                        Traceback (most recent call last)\n/mongo-python-driver/bson/__init__.py in decode_all(data, codec_options)\n    806                                               obj_end,\n--> 807                                               codec_options))\n    808             position += obj_size\n\n/mongo-python-driver/bson/__init__.py in _elements_to_dict(data, position, obj_end, opts)\n    343     result = opts.document_class()\n--> 344     for key, value in _iterate_elements(data, position, obj_end, opts):\n    345         result[key] = value\n\n/mongo-python-driver/bson/__init__.py in _iterate_elements(data, position, obj_end, opts)\n    336     while position < end:\n--> 337         (key, value, position) = _element_to_dict(data, position, obj_end, opts)\n    338         yield key, value\n\n/mongo-python-driver/bson/__init__.py in _element_to_dict(data, position, obj_end, opts)\n    325                                                         obj_end, opts,\n--> 326                                                         element_name)\n    327     except KeyError:\n\n/mongo-python-driver/bson/__init__.py in _get_string(data, position, obj_end, opts, dummy)\n    131     return _utf_8_decode(data[position:end],\n--> 132                          opts.unicode_decode_error_handler, True)[0], end + 1\n    133\n\nUnicodeDecodeError: 'utf-8' codec can't decode bytes in position 255-256: invalid continuation byte\n\n```\n\nThe PR will fix this error:\n\n```\n---------------------------------------------------------------------------\nOperationFailure                          Traceback (most recent call last)\n<ipython-input-1-23271a2da0b5> in <module>()\n      5\n      6 mongo = MongoClient()\n----> 7 mongo['test']['case_detail'].create_index(u'案号', background=True)\n\n/mongo-python-driver/pymongo/collection.py in create_index(self, keys, **kwargs)\n   1388         keys = helpers._index_list(keys)\n   1389         name = kwargs.setdefault(\"name\", helpers._gen_index_name(keys))\n-> 1390         self.__create_index(keys, kwargs)\n   1391         return name\n   1392\n\n/mongo-python-driver/pymongo/collection.py in __create_index(self, keys, index_options)\n   1299                               cmd,\n   1300                               codec_options=_UNICODE_REPLACE_CODEC_OPTIONS,\n-> 1301                               read_preference=ReadPreference.PRIMARY)\n   1302             except OperationFailure as exc:\n   1303                 if exc.code in common.COMMAND_NOT_FOUND_CODES:\n\n/mongo-python-driver/pymongo/collection.py in _command(self, sock_info, command, slave_ok, read_preference, codec_options, check, allowable_errors, read_concern)\n    207                                  check,\n    208                                  allowable_errors,\n--> 209                                  read_concern=read_concern)\n    210\n    211     def __create(self, options):\n\n/mongo-python-driver/pymongo/pool.py in command(self, dbname, spec, slave_ok, read_preference, codec_options, check, allowable_errors, check_keys, read_concern)\n    237                            check, allowable_errors, self.address,\n    238                            check_keys, self.listeners, self.max_bson_size,\n--> 239                            read_concern)\n    240         except OperationFailure:\n    241             raise\n\n/mongo-python-driver/pymongo/network.py in command(sock, dbname, spec, slave_ok, is_mongos, read_preference, codec_options, check, allowable_errors, address, check_keys, listeners, max_bson_size, read_concern)\n    100         response_doc = unpacked['data'][0]\n    101         if check:\n--> 102             helpers._check_command_response(response_doc, None, allowable_errors)\n    103     except Exception as exc:\n    104         if publish:\n\n/mongo-python-driver/pymongo/helpers.py in _check_command_response(response, msg, allowable_errors)\n    203\n    204             msg = msg or \"%s\"\n--> 205             raise OperationFailure(msg % errmsg, code, response)\n    206\n    207\n\nOperationFailure: exception: Btree::insert: key too large to index, failing test.case_detail.$案号_1 5360 { : \"（2015）佛明法民一初字第653号当事人:原告:杨瑞芳,被告:李永清\n案由:民间借贷纠纷\n开庭时间:2015-11-3 15:00\n开庭地�...\" }\n```\n\nSo it may be a good idea to use `_UNICODE_REPLACE_CODEC_OPTIONS`. \n",
    "head_branch": "bugfix/unicode_decode_error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6444ee515ce6a4b378",
    "number": 310,
    "body": "reopening #309 after rebasing onto 34dev branch\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #310 from oxymor0n/master\n\nPYTHON-1123 - Ensure all properties of MongoClient.codec_options are customizable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6444ee515ce6a4b379",
    "number": 309,
    "body": "this PR addresses [PYTHON-1123](https://jira.mongodb.org/browse/PYTHON-1123)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6544ee515ce6a4b37a",
    "number": 308,
    "body": "",
    "head_branch": "34dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6644ee515ce6a4b37b",
    "number": 307,
    "body": "Just missing backquote on `ValueError`\nCheers\n",
    "head_branch": "fix-value-error-required",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6744ee515ce6a4b37c",
    "number": 306,
    "body": "As per their email ‘Changes to project subdomains’:\n\n> Starting today, Read the Docs will start hosting projects from subdomains on the domain readthedocs.io, instead of on readthedocs.org. This change addresses some security concerns around site cookies while hosting user generated data on the same domain as our dashboard.\n\nTest Plan: Manually visited all the links I’ve modified.\n",
    "head_branch": "readthedocs.io",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6844ee515ce6a4b37d",
    "number": 305,
    "body": "Hello.\n\nIt's from a robot test that uses loop operator. FOR    ${lengthOfSCHMCDXXXX}    IN    35    15    36\n\nJust temporary debug messages:\n\n_shutdown_executors set([])\n_shutdown_executors None\n_shutdown_executors None\n\nWe get this error when we launch tests.\n\n```\nunexpected error: Error in atexit._run_exitfuncs:\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\atexit.py\", line 24, in _run_exitfuncs\n    func(*targs, **kargs)\n  File \"C:\\Python27\\lib\\site-packages\\pymongo\\periodic_executor.py\", line 133, in _shutdown_executors\n    executors = list(_EXECUTORS)\nTypeError: 'NoneType' object is not iterable\nError in atexit._run_exitfuncs:\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\atexit.py\", line 24, in _run_exitfuncs\n    func(*targs, **kargs)\n  File \"C:\\Python27\\lib\\site-packages\\pymongo\\periodic_executor.py\", line 133, in _shutdown_executors\n    executors = list(_EXECUTORS)\nTypeError: 'NoneType' object is not iterable\nError in sys.exitfunc:\n\n[2016.04.26-15:25:09] : accessed by C:\\Python27\\lib\\site-packages\\robot\\run.py\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\atexit.py\", line 24, in _run_exitfuncs\n    func(*targs, **kargs)\n  File \"C:\\Python27\\lib\\site-packages\\pymongo\\periodic_executor.py\", line 133, in _shutdown_executors\n    executors = list(_EXECUTORS)\nTypeError: 'NoneType' object is not iterable\n\ntest finished 20160426 15:25:09\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6944ee515ce6a4b37e",
    "number": 304,
    "body": "",
    "head_branch": "v2.9",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6a44ee515ce6a4b37f",
    "number": 303,
    "body": "Enables filter chaining on the cursor similar to how many ORM's are implemented.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6b44ee515ce6a4b380",
    "number": 302,
    "body": "It fixes [PYTHON-1057](https://jira.mongodb.org/browse/PYTHON-1057) (Connect option validator should use validate_boolean_or_string).\n",
    "head_branch": "connect_string",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6c44ee515ce6a4b381",
    "number": 301,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6c44ee515ce6a4b382",
    "number": 300,
    "body": "Before this the aggregate command ignored the codec options. this resulted in in aggregate command returning documents with naive datetime objects despite the tz_aware attribute in the collections codec options being set to True.\n",
    "head_branch": "v2.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6d44ee515ce6a4b383",
    "number": 299,
    "body": "When IndexModel objects are created by the user, you can check if they exist by comparing to a collections list_index method.\n",
    "head_branch": "im-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6e44ee515ce6a4b384",
    "number": 298,
    "body": "This implements the same try order as tornado, and updated docs to recommend monotonic only.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb6f44ee515ce6a4b385",
    "number": 297,
    "body": "Spawned from [SO](https://stackoverflow.com/questions/28595338/bson-json-util-datetime-encode-and-decode-best-practice) discussion\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7044ee515ce6a4b386",
    "number": 296,
    "body": "",
    "head_branch": "mongodb-32-features",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7144ee515ce6a4b387",
    "number": 295,
    "body": "I want to preserve field order on my application.\n\nTo do that, mongo has to use with ordered dicts instead of the standard `dict`.\nPython's OrderedDict and Mongo's SON are good candidates for that.\n\nAs far as I can tell, there are 2 places where I need to make the change:\n- On MongoClient's `document_class` (When reading from MongoDB)\n- On json_util's `loads` (When parsing a JSON file)\n\nI do both on my application, but it seems like it would be a reasonable default behavior\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7244ee515ce6a4b388",
    "number": 294,
    "body": "without this fix we get errors:\n\n```\n>> dbs.coll.insert_many([{'x':1}]*10)\n\nraise BulkWriteError(full_result)\npymongo.errors.BulkWriteError: batch op errors occurred\n```\n\nor\n\n```\n>> for i in range(1000):\n>>     data = {'x':1}\n>>     dbs.coll.insert_one(data)\n\nraise DuplicateKeyError(error.get(\"errmsg\"), 11000, error)\npymongo.errors.DuplicateKeyError: insertDocument :: caused by :: 11000 E11000 duplicate key error index: dbs.coll.$_id_  dup key: { : ObjectId('56008f92c341cf5ab45db695') }\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7244ee515ce6a4b389",
    "number": 293,
    "body": "There was an issue with encoding an unsigned 64-bit int/long. This would occur when encoding a 640bit value larger than `(2^63 - 1)`, which is still a valid int64. Now, the size of Python ints/longs are intelligently detected and the encoded BSON is correct. However, decoding an unsigned int64 will still be decoded as a signed int64. It is up to the end-user to properly know whether the value was originally signed or unsigned and to perform the conversion manually, which is the standard across the other MongoDB drivers.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7344ee515ce6a4b38a",
    "number": 292,
    "body": "While porting my application over to use the latest pymongo, I noticed that the new `insert_many()` function does not accept generators. This pull request adds a check in `insert_many()` for the Python `GeneratorType`. Also, I added a single unit test for inserting a generator.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7444ee515ce6a4b38b",
    "number": 291,
    "body": "The case that is incorrect here is that when a document is matched, but the data was the same so the upsert didn't happen. \n\nAlso not sure here why n wasn't checked first.\n",
    "head_branch": "macdiesel-matched_count",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7544ee515ce6a4b38c",
    "number": 290,
    "body": "As discussed on http://www.ultrabug.fr/uwsgi-gevent-and-pymongo-3-threads-mayhem/#comments\n\nCheers\n",
    "head_branch": "gevent-doc-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7644ee515ce6a4b38d",
    "number": 289,
    "body": "Implemented rich comparison methods for write operations, as indicated in [PYTHON-957](https://jira.mongodb.org/browse/PYTHON-957).\n",
    "head_branch": "PYTHON-957",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7744ee515ce6a4b38e",
    "number": 288,
    "body": "PyMongo sometimes has to deal with >1023 sockets, so replace select with poll. Use select when poll is not available.\n",
    "head_branch": "307-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7744ee515ce6a4b38f",
    "number": 287,
    "body": "",
    "head_branch": "307-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7844ee515ce6a4b390",
    "number": 286,
    "body": "",
    "head_branch": "950-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7944ee515ce6a4b391",
    "number": 285,
    "body": "",
    "head_branch": "949-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7a44ee515ce6a4b392",
    "number": 284,
    "body": "",
    "head_branch": "888-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7b44ee515ce6a4b393",
    "number": 283,
    "body": "See https://www.python.org/dev/peps/pep-0008/#version-bookkeeping\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7c44ee515ce6a4b394",
    "number": 282,
    "body": "",
    "head_branch": "945-dev-3.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7d44ee515ce6a4b395",
    "number": 281,
    "body": "",
    "head_branch": "945-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7e44ee515ce6a4b396",
    "number": 280,
    "body": "",
    "head_branch": "940-dev-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7f44ee515ce6a4b397",
    "number": 279,
    "body": "",
    "head_branch": "940-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb7f44ee515ce6a4b398",
    "number": 278,
    "body": "",
    "head_branch": "940-dev-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8044ee515ce6a4b399",
    "number": 277,
    "body": "…en passed the cursor option.\n",
    "head_branch": "889-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8144ee515ce6a4b39a",
    "number": 276,
    "body": "",
    "head_branch": "933-dev-2.9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8244ee515ce6a4b39b",
    "number": 275,
    "body": "",
    "head_branch": "933-dev-3.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8344ee515ce6a4b39c",
    "number": 274,
    "body": "This PR represents my recommendation for addressing [PYTHON-946](https://jira.mongodb.org/browse/PYTHON-946). I made a couple of minor style changes which I believe makes the code clearer and more concise, but feel free to omit those commits or otherwise re-implement my suggestion.\n\nI also understand that one might want to instead of being more lenient about the input types, simply document the more rigid expectation.\n",
    "head_branch": "python-942",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8444ee515ce6a4b39d",
    "number": 273,
    "body": "",
    "head_branch": "885-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8444ee515ce6a4b39e",
    "number": 272,
    "body": "",
    "head_branch": "890-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8544ee515ce6a4b39f",
    "number": 271,
    "body": "Occasionally Pymongo would enter an infinite loop in the [GridOut.read()](https://github.com/mongodb/mongo-python-driver/blob/24f633e95c5d46aee020e293f97e72045abe3f4e/gridfs/grid_file.py#L441) function.\n\nThe loop is as following:\n\n``` python\n        while received < size:\n            chunk_data = self.readchunk()\n            received += len(chunk_data)\n            data.write(chunk_data)\n```\n\nIf `self.readchunk()` returns an empty string, `received` will not be incremented, and thus the program will stuck in this loop forever. This will happen if the grid files are corrupt, with their actual total chunk size smaller than the size claimed in the metadata. This pull request raises a CorruptGridFile error when an empty chunk is read, allowing Pymongo to escape the infinite loop.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8644ee515ce6a4b3a0",
    "number": 270,
    "body": "",
    "head_branch": "886-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8744ee515ce6a4b3a1",
    "number": 269,
    "body": "",
    "head_branch": "883-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8844ee515ce6a4b3a2",
    "number": 268,
    "body": "",
    "head_branch": "883-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8944ee515ce6a4b3a3",
    "number": 267,
    "body": "",
    "head_branch": "911-dev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8a44ee515ce6a4b3a4",
    "number": 266,
    "body": "Fixes https://jira.mongodb.org/browse/PYTHON-934\n",
    "head_branch": "ssl_match_hostname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8a44ee515ce6a4b3a5",
    "number": 265,
    "body": "You may wish to handle object conversion differently from the default method. The\nnew code allows this in the following way.\n\n```\n#setup a db connection and grab a user object\ndb = gettDb()\nuser = db.user.find({'_id':ObjectId(\"544a41d40cf29893c1acb223\")})[0]\n\n#Alternative default function which will handle datetime objects diffrently\ndef altdefault(obj):\n    if isinstance(obj, datetime):\n        if obj.utcoffset() is not None:\n            obj = obj - obj.utcoffset()\n        if obj.year == 0000:\n           obj = datetime.datetime(0001,01,01)\n        millis = int(calendar.timegm(obj.timetuple()) * 1000 +\n                     obj.microsecond / 1000)\n        return {\"$date\": millis}\n    return json_util.default(obj)\n\n#run the dumps function and see the result\nprint json_util.dumps(user, altdefault)\n```\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8b44ee515ce6a4b3a6",
    "number": 264,
    "body": "When converting datetime.datetime objects the millsecond conversion fails if the datetime.year is less than 1.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8c44ee515ce6a4b3a7",
    "number": 263,
    "body": "To avoid the deserialisation penalty when deserialising to a list of Python dictionaries is not necessary.  For my use-case I want to return BSON to my client so going via Python objects and then JSON is too expensive (~130ms for 6000 documents).\n\nThis is a partial solution to [PYTHON-472](https://jira.mongodb.org/browse/PYTHON-472).\n",
    "head_branch": "bson_cursor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8d44ee515ce6a4b3a8",
    "number": 262,
    "body": "Log4mongo-python is actively maintained and upaded to the latest pymongo versions (2.8 and 3.X).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8e44ee515ce6a4b3a9",
    "number": 261,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb8f44ee515ce6a4b3aa",
    "number": 260,
    "body": "Updated the example of Grouping\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9044ee515ce6a4b3ab",
    "number": 259,
    "body": "small typo in doc string\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9144ee515ce6a4b3ac",
    "number": 258,
    "body": "",
    "head_branch": "822-python",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9244ee515ce6a4b3ad",
    "number": 257,
    "body": "",
    "head_branch": "PYTHON-813c",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9244ee515ce6a4b3ae",
    "number": 256,
    "body": "",
    "head_branch": "squashed-PYTHON-813b",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9344ee515ce6a4b3af",
    "number": 255,
    "body": "",
    "head_branch": "squashed-PYTHON-813",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9444ee515ce6a4b3b0",
    "number": 254,
    "body": "",
    "head_branch": "squashed-PYTHON-815",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9544ee515ce6a4b3b1",
    "number": 253,
    "body": "Fixes https://jira.mongodb.org/browse/PYTHON-842\n",
    "head_branch": "validate_cert_reqs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9644ee515ce6a4b3b2",
    "number": 252,
    "body": "Hi,\n\nI don't intend for this PR to be pulled as-is; it's incomplete (e.g., I only implemented it for replica set client, not plain client) and I'm sure y'all would want to tweak the idea a bit before accepting it. I'm just submitting it as a food-for-thought PR to get your thoughts on the idea behind it.\n\nWe were having an issue where many of our ephemeral MongoDB client instances were unable to connect to the primary on one of our replicasets. This issue was proving very difficult to debug, since (a) there's no logging of the internals of mongo_replica_set_client.py's communication with servers or replicaset state refreshes, and (b) we run over SSL which makes debugging via network captures rather challenging.\n\nTo address this, what I ended up doing that enabled us to finally track down the problem (current running theory is stale arp cache entries on the MongoDB servers preventing packets from the servers from making it back to the clients) was adding the changes shown in this PR: modifying mongo_replica_set_client.py to log protocol exchanges as well as the process of refreshing replicaset state.\n\nThe specific, key discovery this enabled us to make was that [this code](https://github.com/mongodb/mongo-python-driver/blob/master/pymongo/mongo_replica_set_client.py#L1219) silently throws away errors, so were never being informed by pymongo that connections to our primary were timing out. So at the very least, even if you don't think any of the logging stuff shown here is a good idea, I'd say something needs to be done to make that information accessible to users rather than throwing it away.\n\nThanks,\n\nJonathan Kamens\n",
    "head_branch": "debug_logging",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9744ee515ce6a4b3b3",
    "number": 251,
    "body": "There are circumstances where you still require a CA to validate that your key and cert are valid, but forgo verifying that the hostname matches the CN.\n\nLink to JIRA: https://jira.mongodb.org/browse/PYTHON-834\n\nThis patch adds an extra parameter: `ssl_validate_hostname` which defaults to True.\n\nI'm hoping that this will make it into the 2.8 and future branches.\n\nThis is already done in TxMongo which uses Twisted's SSL Context Factory to achieve the same thing.\n",
    "head_branch": "validate_hostname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9844ee515ce6a4b3b4",
    "number": 250,
    "body": "minimongo has moved to a new location and the tools page needed to be updated.\nhttps://jira.mongodb.org/browse/PYTHON-797\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9944ee515ce6a4b3b5",
    "number": 249,
    "body": "I know that's probably not the best place to post it, but I cant find any better way to report an issue.\nAnd the issue is this:\nIn [1]: from pymongo import MongoClient\nIn [2]: m = MongoClient()\nIn [3]: mypass = ''\nIn [4]: isinstance(mypass, basestring)\nOut [4]: True\nIn [5]: m.admin.authenticate('myuser', mypass)\n....\n....\n File \"/usr/local/lib/python2.7/dist-packages/pymongo/auth.py\", line 215, in _authenticate_mongo_cr\n    key = _auth_key(nonce, username, password)\n  File \"/usr/local/lib/python2.7/dist-packages/pymongo/auth.py\", line 76, in _auth_key\n    digest = _password_digest(username, password)\n  File \"/usr/local/lib/python2.7/dist-packages/pymongo/auth.py\", line 60, in _password_digest\n    \"of %s\" % (basestring.__name__,))\nTypeError: password must be an instance of basestring\n\nIn pymongo/auth.py: \n\ndef _password_digest(username, password):\n    \"\"\"Get a password digest to use for authentication.\n    \"\"\"\n    if not isinstance(password, basestring):\n        raise TypeError(\"password must be an instance \"\n                        \"of %s\" % (basestring.__name__,))\n....\nHow is this possible?\n",
    "head_branch": "v2.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9a44ee515ce6a4b3b6",
    "number": 248,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9b44ee515ce6a4b3b7",
    "number": 247,
    "body": "using mostly the idea as advised by @ajdavis .\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9c44ee515ce6a4b3b8",
    "number": 246,
    "body": "add a find_one() method for gridfs, compare with the method find().\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9c44ee515ce6a4b3b9",
    "number": 245,
    "body": "Comments need to reflect 256 to 255 kb default chunk size change to propagate to docs\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9d44ee515ce6a4b3ba",
    "number": 244,
    "body": " Include close, server_info, _cache_credentials, _purge_credentials \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9e44ee515ce6a4b3bb",
    "number": 243,
    "body": "This is necessary because updating docs with manipulate=True, inserts\na new object id causing OperationalError on the server.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcb9f44ee515ce6a4b3bc",
    "number": 242,
    "body": "",
    "head_branch": "CM_spec_tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba044ee515ce6a4b3bd",
    "number": 241,
    "body": "While serializing a MongoClient is hardly a common use case, it seems that major serialization frameworks don't work with MongoClient. These changes make MongoClient, Database and Collection serializable with `dill`, an extension of `pickle`.\n",
    "head_branch": "serialize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba144ee515ce6a4b3be",
    "number": 240,
    "body": "Since this is already present in normal insert/update, being able to skip key checking in bulk operation would be neat too.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba244ee515ce6a4b3bf",
    "number": 239,
    "body": "There is some inconsistency with find and find_and_modify collection methods.\nThis patch adds manipulator application to result of find_and_modify method as find do\n",
    "head_branch": "find_and_modify_manipulation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba344ee515ce6a4b3c0",
    "number": 238,
    "body": "`__iter__, has_key, __contains__, clear, & len` all copy the `__keys` list but don't need to. \n\nMinor backward compatibility change: make `__iter__` generate a runtime error if the user attempts to destructively modify the `SON` during iteration just as `dict` does and have the others directly use the internal list.\n",
    "head_branch": "edx/son_optimize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba444ee515ce6a4b3c1",
    "number": 237,
    "body": "Within the son implementation, don't use `.keys()` which copies the key list but instead ensure iterations don't change the keys and use the `__keys` to improve performance.\n\nWe need a tagged version against 2.4.1 just to minimize changes for a long-delayed release.\n",
    "head_branch": "edx/son_optimization",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba444ee515ce6a4b3c2",
    "number": 236,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba544ee515ce6a4b3c3",
    "number": 235,
    "body": "This PR adds a few tests for querying a geospatial index.\n\nOne of the tests (`test.test_geo.Test2D.test_near_sphere`) also highlights an issue with `$nearSphere` - it works on mongod 2.4.x, but fails on 2.6.1. Should I open an issue on Jira?\n",
    "head_branch": "geo-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba644ee515ce6a4b3c4",
    "number": 234,
    "body": "- Extend _set_cannot_encode function  to provide more information about errors\n- Make work with _type_marker more bulletproof against ``__getattr__`` realization like in https://github.com/namlook/mongokit/issues/173\n",
    "head_branch": "bulletproof-c-ext",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba744ee515ce6a4b3c5",
    "number": 233,
    "body": "Python object name for UTC is **lowercase** 'utc'. The bug sometimes results in error: _bson.errors.InvalidBSON: 'module' object has no attribute 'UTC'_ when reading from the database.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba844ee515ce6a4b3c6",
    "number": 232,
    "body": "fixed typo of `document`\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcba944ee515ce6a4b3c7",
    "number": 231,
    "body": "or you'll be stuck while trying to enumerate any collection containing invalid utf-8 sequences.\n",
    "head_branch": "invalid_utf8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbaa44ee515ce6a4b3c8",
    "number": 230,
    "body": "test for getLastErrorDefaults interaction\n",
    "head_branch": "qa531",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbab44ee515ce6a4b3c9",
    "number": 229,
    "body": "",
    "head_branch": "qa609",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbab44ee515ce6a4b3ca",
    "number": 228,
    "body": "",
    "head_branch": "qa555",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbac44ee515ce6a4b3cb",
    "number": 227,
    "body": "",
    "head_branch": "qa555",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbad44ee515ce6a4b3cc",
    "number": 226,
    "body": "A few small changes to grammar and fixing a missing word.\n",
    "head_branch": "fsync-doc-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a89fac63504b3daccb423c9668c5577c9db8012c into 5b55f14b49fbe32133609f8f87cc5386a95a7b73"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbae44ee515ce6a4b3cd",
    "number": 225,
    "body": "When i read the code, I found for compare's code is much similar, so i think this is more simpler\n",
    "head_branch": "operate_for_base",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbaf44ee515ce6a4b3ce",
    "number": 224,
    "body": "",
    "head_branch": "modify_setup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f23dfb9461cdc1b6d9921354baced225e6ae9c89 into 1f6cd4fd7ae3ae2a62111d1d3f0f8bc7fb201adb"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcbb044ee515ce6a4b3cf",
    "number": 223,
    "body": "",
    "head_branch": "PYTHON-623",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb044ee515ce6a4b3d0",
    "number": 222,
    "body": "",
    "head_branch": "PYTHON-621",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 464941e5ade37c8dce8d017d4d71e6251d353799 into 911cf7112fa32a2e247acd46252658e0c410ce34"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb144ee515ce6a4b3d1",
    "number": 221,
    "body": "Allows iteration through arbitrary queries against the files collection using\nnew GridOutCursor class.\n",
    "head_branch": "PYTHON-310",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb244ee515ce6a4b3d2",
    "number": 220,
    "body": "In setup.py handle open files too complicated.\n",
    "head_branch": "modify_try_except",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb344ee515ce6a4b3d3",
    "number": 219,
    "body": "I think since the use of setuptools, then use the classes provided setuptools\n",
    "head_branch": "modify_setuptools",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb444ee515ce6a4b3d4",
    "number": 218,
    "body": "Suppose you have a Replica Set and a MongoReplicaSetClient connection to it which you don't close.\n1. At some time you get a split brain situation and a part of the Replica Set nodes become isolated from others. MongoReplicaSetClient.refresh() will remove them from its RSState and will monitor only the other part of nodes.\n2. After some time your host loses connection to the second part of nodes. Replica Set monitor will continue to monitor only the second part of nodes.\n3. And finally after some time connection to the first part of nodes resumes but to the second part not. But the Replica Set monitor continues to monitor only the second part of nodes and your connection won't work until at least one host from the second part become available.\n\nThis Pull Request fixes the issue.\n",
    "head_branch": "PR-PYTHON-600",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb544ee515ce6a4b3d5",
    "number": 217,
    "body": "Suppose you have a Replica Set and a MongoReplicaSetClient connection to it which you don't close.\n1. At some time you get a split brain situation and a part of the Replica Set nodes become isolated from others. MongoReplicaSetClient.refresh() will remove them from its RSState and will monitor only the other part of nodes.\n2. After some time your host loses connection to the second part of nodes. Replica Set monitor will continue to monitor only the second part of nodes.\n3. And finally after some time connection to the first part of nodes resumes but to the second part not. But the Replica Set monitor continues to monitor only the second part of nodes and your connection won't work until at least one host from the second part become available.\n\nThis Pull Request fixes the issue.\n",
    "head_branch": "PR-PYTHON-600",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb644ee515ce6a4b3d6",
    "number": 216,
    "body": "Not all the way to duck-typing, but tuples should be just as iterable as lists.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb744ee515ce6a4b3d7",
    "number": 215,
    "body": "This is good for frameworks that automatically takes the **json** function of a class to serialize an object.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb744ee515ce6a4b3d8",
    "number": 214,
    "body": "Previously readline would read one byte at a time using the read\nmethod. By reading one byte at a time we would be slicing the buffer\nover and over again causing readline to use more CPU than necessary.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb844ee515ce6a4b3d9",
    "number": 213,
    "body": "With this option when you install the package with pip or easy_install the egg is not compressed. Then is more easy to debug some error\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbb944ee515ce6a4b3da",
    "number": 212,
    "body": "",
    "head_branch": "python577",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbba44ee515ce6a4b3db",
    "number": 211,
    "body": "",
    "head_branch": "python-577",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbbb44ee515ce6a4b3dc",
    "number": 210,
    "body": "PyMongo always raises `TimeoutError` when you get wtimeout error from server due to `w=...` and `wtimeout=...` options in write operations. As for me it's almost always not the thing I'd want to get. I need an ability to ignore `TimeoutError` exception to inspect a getLastError object returned by the server like this:\n\n``` python\ntry:\n    result = collection(\"foo\").update(\n        { \"_id\": \"bar\", \"locked\": { \"$ne\": True } },\n        { \"$set\": { \"locked\": True } }, w=\"majority\", wtimeout=...)\n\n    if result[\"updatedExisting\"]:\n        log(\"The document is locked.\")\n\n        if result.get(\"wtimeout\"):\n            log(\"The changes are successfully written to primary, but not to majority.\")\n        else:\n            log(\"The changes are successfully written to majority.\")\nexcept Exception:\n    log(\"Failed to lock the document.\")\n\ntry:\n    result = collection(\"foo\").insert(..., w=\"majority\" wtimeout=..., full_response=True)\n\n    if result.get(\"wtimeout\"):\n        log(\"The changes are successfully written to primary, but not to majority.\")\n    else:\n        log(\"The changes are successfully written to majority.\")\nexcept Exception:\n    log(\"Failed to insert the document.\")\n```\n\nThis pull request adds an ability to ignore `TimeoutError` and obtain a getLastError object like in the above example. If you are willing to accept it, I'll add tests to it.\n",
    "head_branch": "PR-PYTHON-588",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbbc44ee515ce6a4b3dd",
    "number": 209,
    "body": "",
    "head_branch": "python-555",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbbc44ee515ce6a4b3de",
    "number": 208,
    "body": "This PR add support to bulk insert using a generator.\n\nThe function `_do_batched_insert` at `message.py` already handles bulk insertion of a long list very well.\n\nThis PR passes all test.\n",
    "head_branch": "bulk_insert_generator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbbd44ee515ce6a4b3df",
    "number": 207,
    "body": "Added MotorEngine to the list of tools.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 977e5455e3b30a094ad0f85636f3711144f59bf1 into ac0369dde8b7b8b57b92dccbd9da5fa8172ea828"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbbe44ee515ce6a4b3e0",
    "number": 206,
    "body": "Added MotorEngine to the tools section.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbbf44ee515ce6a4b3e1",
    "number": 205,
    "body": "Added MotorEngine to the docs.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc044ee515ce6a4b3e2",
    "number": 204,
    "body": "",
    "head_branch": "python-552",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc144ee515ce6a4b3e3",
    "number": 203,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8d66b565f80f62686d82233841723e15a89059bf into 30882a5fbe65aacc204398c13625ed54c8f248d3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc144ee515ce6a4b3e4",
    "number": 202,
    "body": "https://jira.mongodb.org/browse/PYTHON-573\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc244ee515ce6a4b3e5",
    "number": 201,
    "body": "I added support for setting a comment on a cursor. The comment is currently propagated during queries, counts, and distinct commands: \n\n```\ndb.foo.find({}).comment('bar')\ndb.foo.find({}).comment('bar').count()\ndb.foo.find({}).comment('bar').distinct('zot')\n```\n\nFor the count and distinct commands I'm currently just adding a '$comment' property to the command itself. This appears to work in practice and the comment is stored in the profile collection. I tested this with mongo 2.4.6, but I was unsure if the general approach was correct there.\n",
    "head_branch": "cursor-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc344ee515ce6a4b3e6",
    "number": 200,
    "body": "",
    "head_branch": "python-550",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc444ee515ce6a4b3e7",
    "number": 199,
    "body": "A feature we already have for MongoClient.\n",
    "head_branch": "with_statement_for_replicaset_client",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc544ee515ce6a4b3e8",
    "number": 198,
    "body": "If update is succeeded, getLastError command returns ok == true even if it timed out on waiting for slaves due to wtimeout option.\n\nSee: https://github.com/mongodb/mongo/blob/master/src/mongo/db/write_concern.cpp#L169\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc644ee515ce6a4b3e9",
    "number": 197,
    "body": "",
    "head_branch": "python-473",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 193628f9e47bf75593894c4f95a5bd27e13edc36 into e0863c91e81dd77b3738e0cadda52e485447b4c6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcbc744ee515ce6a4b3ea",
    "number": 196,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc744ee515ce6a4b3eb",
    "number": 195,
    "body": "Added support for `$max` and `$min` operators ([docs](http://docs.mongodb.org/manual/reference/operator/max/#op._S_max)).\n\nUsage:\n\n```\ndb.items.find().max({\"indexedField\": 20 })\ndb.items.find().min({\"indexedField\": 20 })\n```\n",
    "head_branch": "max_operator",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc844ee515ce6a4b3ec",
    "number": 194,
    "body": "",
    "head_branch": "py3test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbc944ee515ce6a4b3ed",
    "number": 193,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c435a32531b211e5e9029ac8fb324cf1c3740d78 into 37c4a94791821c76981cc3695874c06461abcfd8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbca44ee515ce6a4b3ee",
    "number": 192,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5092435834e9e0ef967e904ba9dc8da3540c9725 into 1b455f226abd01c71e9429bd26ee3a2446909769"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbcb44ee515ce6a4b3ef",
    "number": 191,
    "body": "1. integer to string donnot alloc new memory\n2. PyDict_Next to replace PyDict_Iter\n",
    "head_branch": "tiny-improvement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbcc44ee515ce6a4b3f0",
    "number": 190,
    "body": "Monitor thread will die if created before a double fork.\n\nDeveloper should avoid creating MongoReplicaSetClient instance before forking, however there is no any warning about this behavior.\nBut I think nothing we can do but throw an exception as warning, this might help saving time trouble shooting.\n\nThis happened to my system. Monitor thread died and refresh() was never called when a failover happens.\nAnd as a result, error message will stay as \"No replica set primary available for query with ReadPreference PRIMARY\", even after failover is completed, which is confusing. Hope this change/idea will be a bit more helpful in such cases.\n",
    "head_branch": "thread_vs_fork",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ed3adc20ade028e77093a6f70eb5f6e72a51c2ce into 8577ca1b23d28f5b4d5ad44f269858393d29d011"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcbcd44ee515ce6a4b3f1",
    "number": 189,
    "body": "It's currently not actively supported. For example, just recently it\nreceived update to django 1.4, while django 1.5 is out for a while already.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbce44ee515ce6a4b3f2",
    "number": 188,
    "body": "Pool object call GreenletIdent.watch(on_thread_died) and not unlink. if the greenlet is resident, greenlet._links is growth\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbcf44ee515ce6a4b3f3",
    "number": 187,
    "body": "As instructed in the mongodb-user mailing list.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd044ee515ce6a4b3f4",
    "number": 186,
    "body": "When decoding large collections of bson documents, the python representation\nof dicts are time and space costly, so it's sometimes useful to generate and\nconsume the documents iteratively. This patch adds two new functions to do\nthat: decode_iter and decode_file_iter. The first is given all the bson data,\nbut yields one document at a time, while the second reads from a file object\nenough to yield one document at a time (to avoid reading in an entire file).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd144ee515ce6a4b3f5",
    "number": 185,
    "body": "In order to allow support for eventlet (and potentially other greenlet-based libraries) I've refactored the thread/gevent support into their own modules and import these on-demand. These modules are then passed into the pool and other classes that rely on them.\n\nFor: [PYTHON-512](https://jira.mongodb.org/browse/PYTHON-512)\n",
    "head_branch": "PYTHON-512-rebase",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd244ee515ce6a4b3f6",
    "number": 184,
    "body": "Fix tests for Python 2.4\n",
    "head_branch": "PYTHON-436_reintegrate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 2e2bb75626da5a0a6073cd20e562f3cb5a42ab51 into c7cde4fc33255b7bc6b045fbfc54bf7ada15e6f0"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd244ee515ce6a4b3f7",
    "number": 183,
    "body": "PyPy needs a gc kick to release request sockets after thread death.\n",
    "head_branch": "PYTHON-436_reintegrate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4cac2ee242a4b3c08aca1a9756d87dc099ed006b into 7049986214b6d8279b28e6d91afb2ed3ba9d97c3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcbd344ee515ce6a4b3f8",
    "number": 182,
    "body": "",
    "head_branch": "typo_docstring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e1d71e8770a0302c4b477a4370653fcc480b5c64 into 0308ce6f629b161088e92b3b2cf39dce5fdc6497"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcbd444ee515ce6a4b3f9",
    "number": 181,
    "body": "",
    "head_branch": "typo_docstring",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1c14e21bba6efd67dc651117e45dfbc8048944a6 into 7667c10deda73084ec956ea0661ac3bdf14a1de2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd544ee515ce6a4b3fa",
    "number": 180,
    "body": "Fix simple typo (paramaters => parameters)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 5ee2e46dc03be895dc46c4221b16b3373e2632ba into 02b318f9f2cac30c268aa94f2c3d71333409c41f"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd644ee515ce6a4b3fb",
    "number": 179,
    "body": "The method pymongo.cursor.Cursor.__deepcopy() was apparently created avoid copying regex'es in a deep copy. It works to copy dicts but does nothing for the list case. I found this behavior to be the cause of (obscure) \"cannot deepcopy this pattern object\" crashes when using Flask-admin with mongoengine. The failure was the result of query criteria containing a list that contained regex'es. In that list case __deepcopy() just calls copy.deepcopy() which fails on the regex'es.\n\nThe submitted patch enables __deepcopy to copy lists in addition to dicts. My goal in writing the patch was to implement the list case while minimizing logic changes to the original code as I did not want to unintentionally introduce any new problems. So the code may appear a bit clumsy. But it is perfectly functional and solves the failing case.\n\nI hope this helps. Thanks for all the good work! -Juan\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd744ee515ce6a4b3fc",
    "number": 178,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd844ee515ce6a4b3fd",
    "number": 177,
    "body": "I added a parameter for pymongo.database.collection_names. If set `include_system_collections` as False, its result will not include system collections like `system.indexes`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbd944ee515ce6a4b3fe",
    "number": 176,
    "body": "In order to allow support for eventlet (and potentially other greenlet-based libraries) I've refactored the thread/gevent support into their own modules and import these on-demand. These modules are then passed into the pool and other classes that rely on them.\n",
    "head_branch": "PYTHON-512",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbda44ee515ce6a4b3ff",
    "number": 175,
    "body": "The $option key is expected but is only used to check for 'i' or for 'm'. I bumped into this, and thought that defining an $option key is perhaps a little overkill, especially if one isn't interested in the 'i' or 'm' options it supports.\n\nThis patch makes it optional.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbdb44ee515ce6a4b400",
    "number": 174,
    "body": "PYTHON-436 Change max_pool_size to limit the maximum concurrent connections rather than just the idle connections in the pool. Also add support for waitQueueTimeoutMS and waitQueueMultiple.\n\nhttps://jira.mongodb.org/browse/PYTHON-436\n\nSee previous pull request for history:\nhttps://github.com/mongodb/mongo-python-driver/pull/163\n",
    "head_branch": "PYTHON-436",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbdb44ee515ce6a4b401",
    "number": 173,
    "body": "Bugfix.\n\nReproduce:\n  Create an iterator which throws exceptions, and insert it.  The exception handling is messed up.\n",
    "head_branch": "fix-swallowed-exception-in-insertion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbdc44ee515ce6a4b402",
    "number": 172,
    "body": "With these little changes users can provide their own cursor class to use with collection class and do what ever they want in cursor\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbdd44ee515ce6a4b403",
    "number": 171,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbde44ee515ce6a4b404",
    "number": 170,
    "body": "We have mongo replica set installation with mongos. While master reelection mongos fails operations with \"ReplicaSetMonitor no master found for set: <set name>\" errors. I think, that these exceptions should be handled the same way as \"not master\"exceptions because they indicate the same problem.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbdf44ee515ce6a4b405",
    "number": 169,
    "body": "I've changed default value to 100, because the manual says.\nhttp://docs.mongodb.org/manual/reference/connection-string/#uri.maxPoolSize\n\nLet me know if I should to add a \"`.. versionchanged::`\" directive about this change in the doc comment of the property.\n",
    "head_branch": "url-option-maxpoolsize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe044ee515ce6a4b406",
    "number": 168,
    "body": "Hello,\n\nI regularly run into the problem that the auto-generation of index names generates names that are more than the allowed 128 chars long. I patched the generation function to respect this length.\n\nRegards,\nManuel\n",
    "head_branch": "save_index_name_generation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe044ee515ce6a4b407",
    "number": 167,
    "body": "",
    "head_branch": "add-motor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe144ee515ce6a4b408",
    "number": 166,
    "body": "",
    "head_branch": "add-motor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f1801a8bc3e7a2809caf7690c164303a9ea42ae5 into 57e05f24e12f77dc8d63fff5e47dcad962a78f0a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe244ee515ce6a4b409",
    "number": 165,
    "body": "",
    "head_branch": "readme-syntax-highlighting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe344ee515ce6a4b40a",
    "number": 164,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge acb48295a5c3fc12bd1f1b7b786837d8642857d9 into 517356cf86ed5105c597a15f0697ae1cdd5d6417"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcbe444ee515ce6a4b40b",
    "number": 163,
    "body": "This patch adds a semaphore to keep track of sockets opened and released from the pool in order to be able to enforce a maximum number of open connections. I've also fixed a few places where sockets were being leaked from the pool (never returned) and an extra socket return in a test.\n\nTimeout support for the semaphore is added in this patch to support connection timeouts properly.\n\nChanges have been made to make sure that internal functions can always get a socket from the pool. even if it's at max, so it's possible for more than the configured max to be opened, but these \"forced\" connections are still tracked and should always be returned.\n\nhttps://jira.mongodb.org/browse/PYTHON-436\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe544ee515ce6a4b40c",
    "number": 162,
    "body": "Consider the large install base of mongo, and the fact many have used it while this was quite \"legal\" to use a string for a key that contains \".\" within, I think making it \"illegal\" is simply wrong, given the fact data current databases with dots in keys are either forced to use old driver, or change keys which nearly impossible.\n\nGiven the fact mongo itself, as a database, works just fine with it, it would just sane to make this constrain configurable, letting users decide whether or not their keys will contain a dot.\n\nThis is my current code, where this exception raising is commented out in both places.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe644ee515ce6a4b40d",
    "number": 161,
    "body": "While looking at how the python driver implements the index api, I noticed that the bucketSize documentation needed to be updated.  Further server documentation: http://docs.mongodb.org/manual/core/geospatial-indexes/#haystack-indexes\n",
    "head_branch": "documentation-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge bb32b4bfb89078aa52d64f9adb0db527c0c22fac into 4b7cc70f7fb5da3419c6917e626cc4dabd761229"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe644ee515ce6a4b40e",
    "number": 160,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe744ee515ce6a4b40f",
    "number": 159,
    "body": "The attached patch sets stacklevel as appropriate when issuing DeprecationWarning's.  This will help users of pymongo see the places where their code must be updated.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe844ee515ce6a4b410",
    "number": 158,
    "body": "As the documentation of mongodb shows [1], we can specify a query\nwhen using distinct. So we can perform operations like:\n\n&gt;&gt;&gt; db.users.distinct(\"country\", {\"status\": \"active\"})\n\n[1]\nhttp://docs.mongodb.org/manual/reference/method/db.collection.distinct/#db.collection.distinct\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbe944ee515ce6a4b411",
    "number": 157,
    "body": "Fix for https://jira.mongodb.org/browse/PYTHON-479\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbea44ee515ce6a4b412",
    "number": 156,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c21f8b39e3ca99fb5d24b6422cade83df5f4bc88 into f09e38879d85ebf34e3345b4dad209283b930c89"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbeb44ee515ce6a4b413",
    "number": 155,
    "body": "As Python supports both `__str__` and `__unicode__` method for objects' string conversion,\nit is suggested to return `<type 'str'>` for `__str__`, and `<type 'unicode'>` for `__unicode__`.\n\nThis is my understanding about the difference between this two methods.\nSo I think it would be better to return str explicitly for `__str__`,\nand add `__unicode__` for possible use.\n\nI have encountered a problem when I formatting strings with ObjectId:\n\n``` python\n>>> '%s %s' % ('\\xe5\\x90\\x8d\\xe5\\xad\\x97', ObjectId())\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe5 in position 0: ordinal not in range(128)\n```\n\nThe reason why this problem happen is because Python tried to encode every argument since he found an unicode in the arguments, but the first one has already been encoded as utf8, the re-encode action then cause error.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbeb44ee515ce6a4b414",
    "number": 154,
    "body": "Replacing 2012 by current year (2013) in copyright comments.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbec44ee515ce6a4b415",
    "number": 153,
    "body": "",
    "head_branch": "motor-hooks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbed44ee515ce6a4b416",
    "number": 152,
    "body": "uri_parser fails if there is a read_preference option.  This fixes that.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbee44ee515ce6a4b417",
    "number": 151,
    "body": "Currently, if you try to do something like db.create_collection(..., options={'capped'=True}), the collection will be created but the options specified will be ignored.  \n\nSince the options kwarg is deprecated, I suggest you raise an error rather than silently ignore it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbef44ee515ce6a4b418",
    "number": 150,
    "body": "Added `mongobox` to the list of Framework Tools.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf044ee515ce6a4b419",
    "number": 149,
    "body": "...().\n\nReplacements were implemented for bson/objectid.py and pymongo/pool.py.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf044ee515ce6a4b41a",
    "number": 148,
    "body": "https://jira.mongodb.org/browse/PYTHON-445\n\nbefore:\n`collection.find(*args, **kwargs).find()`\n\nafter:\n`collection.count(*args, **kwargs)`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf144ee515ce6a4b41b",
    "number": 147,
    "body": "I really think this warning message should just be removed, but if it is going to stay there, it should at least be improved so that it doesn't read like the connection failed.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6e02ef8969c5cc14fda9cc49c9049b5e555b31ac into 0f9ab4000ae3b498983337074f495b9a88434c3d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf244ee515ce6a4b41c",
    "number": 146,
    "body": "As announced in the mongodb-user-group here my pull request to import gevent lazily\nhttp://groups.google.com/group/mongodb-user/browse_thread/thread/dc4fed702b732f67\n\nIf anything is missing tell me please.\n",
    "head_branch": "lazy_gevent_import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf344ee515ce6a4b41d",
    "number": 145,
    "body": "When dealing with the oplog, it is very useful to be able to switch on the \"oplog_replay\" (bit num 3 in http://www.mongodb.org/display/DOCS/Mongo+Wire+Protocol#MongoWireProtocol-OPQUERY) to perform queries on fields of the oplog (eg the \"ts\" field).\n\nThis is a tiny patch which shouldn't affect anything outside of cursor.py.\n\nThx for considering this :)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf444ee515ce6a4b41e",
    "number": 144,
    "body": "This feature is enabled in the Python documentation http://docs.python.org/. It makes docs look more pretty. You could click that left arrow in the middle of the screen to collapse sidebar.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1d434d4752d1af2feba756eb95a631ee1cb1022f into 73bd183f71cd5c60975f6dbd50fb4bdafd31f4f6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf544ee515ce6a4b41f",
    "number": 143,
    "body": "Rebase:\nhttps://github.com/mongodb/mongo-python-driver/pull/95\nagainst master.\n\nAdd a test.\n",
    "head_branch": "local_socket",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf544ee515ce6a4b420",
    "number": 142,
    "body": "This is the issue we experience on windows machines:\nPython version v2.7.2\nMongo v2.0.7 (running on ubuntu)\n\n``` python\n>>> ================================ RESTART ================================\n>>> from pymongo import Connection\n>>> c = Connection(\"mongodb://user:pswd@mongo/admin\")\n>>> c_users  = c[\"data\"][\"user\"]\n>>> users = c_users.find({}, [\"_id\"])\n>>> users.count()\n193845\n>>> for u in users:\n    s = u[\"_id\"]\n\n\n\nTraceback (most recent call last):\n  File \"<pyshell#24>\", line 1, in <module>\n    for u in users:\n  File \"build\\bdist.win32\\egg\\pymongo\\cursor.py\", line 778, in next\n    if len(self.__data) or self._refresh():\n  File \"build\\bdist.win32\\egg\\pymongo\\cursor.py\", line 742, in _refresh\n    limit, self.__id))\n  File \"build\\bdist.win32\\egg\\pymongo\\cursor.py\", line 666, in __send_message\n    **kwargs)\n  File \"build\\bdist.win32\\egg\\pymongo\\connection.py\", line 907, in _send_message_with_response\n    return self.__send_and_receive(message, sock_info)\n  File \"build\\bdist.win32\\egg\\pymongo\\connection.py\", line 885, in __send_and_receive\n    return self.__receive_message_on_socket(1, request_id, sock_info)\n  File \"build\\bdist.win32\\egg\\pymongo\\connection.py\", line 877, in __receive_message_on_socket\n    return self.__receive_data_on_socket(length - 16, sock_info)\n  File \"build\\bdist.win32\\egg\\pymongo\\connection.py\", line 858, in __receive_data_on_socket\n    chunk = sock_info.sock.recv(length)\nMemoryError\n>>> \n```\n\nAt this point I am not even convinced that this is pymongo's issue, and not python's, but the change seems to fix the this without any other bad side affects.\nPlease do not hesitate to request for more info, I'm quite eager to have it resolved in driver's mainstream code.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf644ee515ce6a4b421",
    "number": 141,
    "body": "pymongo 2.2.1 recently changed the way that ReplicaSetConnections are monitored. It deprecated the use of daemon threads on certain systems which implies that even simple scripts now need to manually track which connections are opened and ensure they are all properly closed before the interpreter can exit. Performing this additional tracking can in certain cases be a non-trivial change and if possible would be better handled by the driver if at all possible.\n\nThis patch adds for tracking which monitoring threads are running and properly shutting them down before the interpreter starts deconstruction. I believe this should handle most of the race conditions left around from leaving the daemon threads running in the first place.\n",
    "head_branch": "replicaset-cleanup-monitors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf744ee515ce6a4b422",
    "number": 140,
    "body": " Ports for Replica Set are now generated in incrementing order but not like 27017, 27018, 27020, 27023, etc.\n\nAlso removed\n\n```\ncur_port = port\n```\n\nfrom the functions bodies, because it's already initialized at the top of the file\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f8dbec9f27a6759eb60d408ddfc6f7f73d6f80c2 into a5b5bcc73c8e42cdbf163ab5897400378a90c183"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf844ee515ce6a4b423",
    "number": 139,
    "body": "secondary_host = ha_tools.get_arbiters()[0]\n\nIt's not used afterwards\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge df57dff20eb8f38ae239b171ebc2addd21df2fb9 into 6731c872b4ea28439e903976be8dbb2b9bbaea52"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbf944ee515ce6a4b424",
    "number": 138,
    "body": "A personal use case with dumping to JSON requiring reference fields from a specific collection. Creating custom data dicts with such data is marginally costlier than a lookup internally.\n\nAssuming a collection referencing 2-3 other collections in addition to the lookups that would be required to generate the JSON on dump, the dict extend overhead seems significantly higher. Appears that allowing the user to specify a True arg for looking up is better\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbfa44ee515ce6a4b425",
    "number": 137,
    "body": "All the tests passed\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbfa44ee515ce6a4b426",
    "number": 136,
    "body": "",
    "head_branch": "theme-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbfb44ee515ce6a4b427",
    "number": 135,
    "body": "Tox output:\n\n```\n  py24: commands succeeded\n  py25: commands succeeded\n  py26: commands succeeded\n  py27: commands succeeded\n  py30: commands succeeded\n  py31: commands succeeded\n  py32: commands succeeded\n  py33: commands succeeded\n  pypy: commands succeeded\n  jython: commands succeeded\n  congratulations :)\n```\n\nHere's a passing Travis build: http://travis-ci.org/#!/msabramo/mongo-python-driver/builds/1642755\n",
    "head_branch": "testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbfc44ee515ce6a4b428",
    "number": 134,
    "body": "This is required to prevent collisions on very large clusters.  See\nhttps://groups.google.com/forum/?fromgroups#!topic/mongodb-user/ajgO9wUxbos\nfor details.  Other drivers also initialize this field to a random value.\n",
    "head_branch": "random-objectid-inc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbfd44ee515ce6a4b429",
    "number": 133,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbfe44ee515ce6a4b42a",
    "number": 132,
    "body": "When receiving data from large queries we were running into a MemoryError. From investigating sock_info.sock.recv returns a buffer of length size, which is then inserted into the chunks list. Unfortunately we were only receiving a small amount of bytes per iteration so chunks was filling up with items of size (approximately) length and quickly running out of memory. In total our query looked like it would try to allocate about 4Tb worth of memory.\n\nI've rewritten the function to behave more like the a previous version which fixes the memory issue as the chunk memory is freed once the data has been concatenated to the message.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcbff44ee515ce6a4b42b",
    "number": 131,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1def725f4a184ac2701205f292efc6c46d5d397c into 9dc6d92c823ad75a7410cb16bc795339352a62aa"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcbff44ee515ce6a4b42c",
    "number": 130,
    "body": "When replacing the **cmp** method on ObjectId the **ne** method was not implemented.  Without a **ne** method python falls back to object.**ne** meaning that even objects with the same __id can be not equal if they are not the same object. This patch adds the missing function following the style of the other comparison methods.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 80e59ddd15c6b53734ded503f66734742d4450b3 into 3cb007ee2d0806fbeca635c3fba6d0c4afe750e3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0044ee515ce6a4b42d",
    "number": 129,
    "body": "",
    "head_branch": "unittest-improvements-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 779402c9e5130b5904ca7ae1de3c7896c3233a5d into ef41f1698236f65662325f217f6e6f7c0cd837bb"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0144ee515ce6a4b42e",
    "number": 128,
    "body": "",
    "head_branch": "PYTHON-344",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 760cdb24e367b2e07ca70a784d8c0ab77b88eb1b into 59deb6126ee2bd705c286f3f8807211036e3f48e"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc0244ee515ce6a4b42f",
    "number": 127,
    "body": "",
    "head_branch": "PYTHON-343",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c5cc7a4ba7960afd052c75603fb4cdc752699bd3 into dc44454b3af6ebd07724affc4f84230425186eca"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0344ee515ce6a4b430",
    "number": 126,
    "body": "Clean patch.\n",
    "head_branch": "unittest-improvements-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ddbc8464f3c5faef8343a1d89a1d4171ff519fa1 into d355cee677487010005e63086fe8482edb626ebf"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc0444ee515ce6a4b431",
    "number": 125,
    "body": "Wondering if the failure the other day, where a count that we expected to be 2000 was instead 2002, is the result of a stray thread from an earlier test completing _after_ its collection had been dropped.\n",
    "head_branch": "unittest-improvements-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d0b5b2765f790e12e8ac5b55a15c2d3fbd679bd4 into 13c9c78b5e5f6a501b4248402b5baf9308c18e1b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0544ee515ce6a4b432",
    "number": 124,
    "body": "",
    "head_branch": "unittest-improvements-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0544ee515ce6a4b433",
    "number": 123,
    "body": "",
    "head_branch": "unittest-improvements-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge da7b7256d5ef89c4b8ea6496ececa4bcfdc012c4 into 38450deedb48a02e62546b0d2abc9c33de17bbb5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0644ee515ce6a4b434",
    "number": 122,
    "body": "",
    "head_branch": "unittest-improvements-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 291fa60cf82b75cce6d923ea694901dddce142c2 into d016e32e1b34211aef151659301deb9f88e41833"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0744ee515ce6a4b435",
    "number": 121,
    "body": "",
    "head_branch": "pool-improvements-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a450db954eb8716111e1fe37c1434a757eb3dfa2 into 2478044b1d1a2421fd2c74deb25a9f1be08ee3f6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0844ee515ce6a4b436",
    "number": 120,
    "body": "",
    "head_branch": "pool-improvements-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3485ef9af5819722c49359da737b5236d016c948 into 5f8b92f2a667c6c260c90fcdd7c540a70452c2a5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc0944ee515ce6a4b437",
    "number": 119,
    "body": "",
    "head_branch": "unittest-improvements-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 57db17617e46ad02cf21885ca3496fb89921a046 into 24b62350c53a64611dbe46df0817398550a3768a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0a44ee515ce6a4b438",
    "number": 118,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4f3fb62da65b70a2c95a0ca3f06595dcc94da5a2 into 6ecb615d0e40e9342a4056f96ce3c876d0786d56"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc0a44ee515ce6a4b439",
    "number": 117,
    "body": "",
    "head_branch": "bson-code-with-scope-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 6aebf117f447fcab76c0f92b3ce122d4ef3337fc into 49a748ea4982bf1b43a30db1872a4d3ecaf124dc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0b44ee515ce6a4b43a",
    "number": 116,
    "body": "",
    "head_branch": "tornado-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9de85dc0817419d9fdefe689521950882654ef50 into 27d5fe33310fb788f9628eddafa1645a06f4ecde"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0c44ee515ce6a4b43b",
    "number": 115,
    "body": "MasterSlaveConnection should start request on connection to master in its start_request(), in case master was created with auto_start_request=False\n",
    "head_branch": "pool-improvements-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge aa7e957c704bff69075669c78ba76ef71e0b936e into 9d463d2a4bf02ef5381d7ab1d5c6f2dafdbb2b9c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc0d44ee515ce6a4b43c",
    "number": 114,
    "body": "Updated the cursor close docs and added a id property to cursor instances.\n",
    "head_branch": "335",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 066644813ca231718f9c8d83b791e24d2c5d6e64 into ef803527bb9ce48e509fab9f9394762e103e81a7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc0e44ee515ce6a4b43d",
    "number": 113,
    "body": "",
    "head_branch": "328",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 12d628b620042c4adb3e241cee5cd66e89a7d646 into d09f3db74ac3574341ab6b51fe7b4758e5ff5af4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc0f44ee515ce6a4b43e",
    "number": 112,
    "body": "  That way, we can execute commands on the arbiter.  Like `replSetGetStatus` and `shutdown`, e.g.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1044ee515ce6a4b43f",
    "number": 111,
    "body": "",
    "head_branch": "pool-improvements-9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 43faa30f8d6303453c05c29d51d12489cf2bd1c7 into 85c17ac07e8baf1e39bd75fa51770b28d1bf3718"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc1044ee515ce6a4b440",
    "number": 110,
    "body": "",
    "head_branch": "pool-improvements-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f58f51c851679bc2dd20240e888c68d9421fcd25 into 5d1ce9991594fe6dbd5f8da96290ea0d90bc22e7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1144ee515ce6a4b441",
    "number": 109,
    "body": "",
    "head_branch": "pool-improvements-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0386f2d17b85e05ab108232202a724db892a229f into 0e0248ce2228d791490c09eef07a2ef1d3a03212"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1244ee515ce6a4b442",
    "number": 108,
    "body": "",
    "head_branch": "dont-drop-dbs-in-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8bd17c973514d66befef4480dc4b62b0e834ab30 into 2d21ba9376dc093b27e3136657aa22fd52f48df5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1344ee515ce6a4b443",
    "number": 107,
    "body": "",
    "head_branch": "pool-improvements-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8f4a4cd51c31206a114b3895902602ab87f3705b into c5234329cfedd4fe3c973a9c33bc0aeb38e483d5"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc1444ee515ce6a4b444",
    "number": 106,
    "body": "",
    "head_branch": "pool-improvements-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4525c030337e119df0b907600cbc90d229645821 into 24924289606499b726babdaa01ae0e251f038e72"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc1544ee515ce6a4b445",
    "number": 105,
    "body": "",
    "head_branch": "fix-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1644ee515ce6a4b446",
    "number": 104,
    "body": "",
    "head_branch": "pool-improvements-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge fa31e7116c8b6fca0c82d003001d2d363b40917d into 69a138eee424790ac3df1ea004b3be35bed15fc6"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1744ee515ce6a4b447",
    "number": 103,
    "body": "This is a cleaner patch with the same feature set as https://github.com/mongodb/mongo-python-driver/pull/97, which I'm going to close.\n\nThe first commit is a rewrite of the connection pool, the second improves Gevent compatibility.\n\nFIRST COMMIT:\n\nMake auto_start_request optional (default True), add ReplicaSetConnection.start_request, return sockets to pool when threads die PYTHON-287\nBig change to PyMongo connection pooling:\n- While we still allocate a socket per thread by default, this is now optional. It is also possible to share sockets among threads, safely, and thus using fewer total sockets, by creating a Connection or ReplicaSetConnection with auto_start_request=False.\n- In the past, when a thread died without calling end_request() its socket was closed. We now reclaim such sockets for the pool, which should reduce connection churn.\n- start_request() now returns a context manager so you can do \"with connection.start_request():\"\n- ReplicaSetConnection now supports start_request, although its semantics aren't consistent for ReadPreferences other than PRIMARY\n- Refactoring: Connection and ReplicaSetConnection had different pool implementations, now they share one.\n\nSECOND COMMIT:\n\nImprove Gevent compatibility PYTHON-296. No longer necessary to patch_thread(), patch_socket() alone will now suffice if you create Connections and ReplicaSetConnections with the keyword arg use_greenlets=True.\n",
    "head_branch": "pool-improvements-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a56f90b2ad812f66885110429b9e3a806726a7a8 into 2f818f7e331c96d75f23d0921645dea2dde23f23"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc1744ee515ce6a4b448",
    "number": 102,
    "body": "",
    "head_branch": "PYTHON-336",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1844ee515ce6a4b449",
    "number": 101,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 0f000c7e215a1d9e9ff1babf6ce8a0e59c591937 into 46c8210ebd0566e1a0df9f1044c200cadc4a0968"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc1944ee515ce6a4b44a",
    "number": 100,
    "body": "Refactor some tests to use utils.delay(), and skip test_interrupt_signal in Jython, which can't raise an Exception on a thread that's blocked on a socket.\n",
    "head_branch": "test-interrupt-in-jython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 13d009e47deece74b25bb0bc1724630496e41e9f into 94cd798ffdfc15c2559d6274aaba2f04e9b28fb3"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc1a44ee515ce6a4b44b",
    "number": 99,
    "body": "This fix is for a bug where non-strings are joined using .join(...) in case the user has ReadPreference.SECONDARY. This causes a TypeError to be thrown instead of the expected AutoReconnect error.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1b44ee515ce6a4b44c",
    "number": 98,
    "body": "I've added the Humongolus write-up to the tools page.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1c44ee515ce6a4b44d",
    "number": 97,
    "body": "",
    "head_branch": "pool-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1c44ee515ce6a4b44e",
    "number": 96,
    "body": "",
    "head_branch": "327",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1d44ee515ce6a4b44f",
    "number": 95,
    "body": "Support for connecting to a UNIX-socket over Connection(host=\"/path/to/socket.sock\").\nThis patch implements support for the socket to a named parameter, not for mongodb uri\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1e44ee515ce6a4b450",
    "number": 94,
    "body": "",
    "head_branch": "317",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 097f13b58e7b77b65878fa4401720d4e465c90bd into 359ee6b3f1210ff082978c64fd952550e282a093"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc1f44ee515ce6a4b451",
    "number": 93,
    "body": "Connection syntax has changed.\nRemoved old auto reconnect test in tools as lots of testcases for auto reconnect.\n",
    "head_branch": "305-paired",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 341c391efbe46c09c0d277922fe53d9b0937a6f9 into 95974a2595043598a19af336dc5862acb6392b2c"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc2044ee515ce6a4b452",
    "number": 92,
    "body": "",
    "head_branch": "unittest-improvements-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2144ee515ce6a4b453",
    "number": 91,
    "body": "",
    "head_branch": "305",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2244ee515ce6a4b454",
    "number": 90,
    "body": "Makes userinfo parser handle `+` signs as spaces.\nIf `+` signs were used then they will now need to\nbe escaped.\n",
    "head_branch": "319",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2244ee515ce6a4b455",
    "number": 89,
    "body": "Please merge a few improvements I made to the docs, and a tiny cleanup in the bson.has_c() function. Thanks!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2344ee515ce6a4b456",
    "number": 88,
    "body": "Also updated other pickling test to test all protocols.\n\nPYTHON-318\n",
    "head_branch": "318",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2444ee515ce6a4b457",
    "number": 87,
    "body": "PYTHON-312\n",
    "head_branch": "312-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2544ee515ce6a4b458",
    "number": 86,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 94bbd7b6873429d21a0493958a63b0faabcdb619 into 34b9f9bc3c0ae7c3b363ae251c8a455df22dff75"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2644ee515ce6a4b459",
    "number": 85,
    "body": "Changes the default behaviour of bson.Code as now if\nnot passing scope it will convert to type 13 not 15.\n\nPYTHON-308\n",
    "head_branch": "308",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2744ee515ce6a4b45a",
    "number": 84,
    "body": "Updated the docs as well.  \nChanged some sphinx syntax that were throwing warnings.\n\nPYTHON-304\n",
    "head_branch": "304",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4a3c59408002bb53bf8930e91bf639f0246d4007 into 33d8283a6338fbe0e504fba94745a887f19db2fa"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2844ee515ce6a4b45b",
    "number": 83,
    "body": "You can now create users with readOnly privileges.\nRefs #Python-312\n",
    "head_branch": "312",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2844ee515ce6a4b45c",
    "number": 82,
    "body": "Saw a very surprising test failure in Jenkins yesterday, maybe this will prevent it.\n",
    "head_branch": "unittest-fix-rs-connection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 80a302e46491c7398d5f71096d20e071bad9fe7d into f65384284476b6ccd01d2f58f04cfccad87408dc"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2944ee515ce6a4b45d",
    "number": 81,
    "body": "",
    "head_branch": "unittest-fix-rs-connection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2a44ee515ce6a4b45e",
    "number": 80,
    "body": "",
    "head_branch": "unittest-fix-rs-connection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2b44ee515ce6a4b45f",
    "number": 79,
    "body": "Fix a test: Instead of assuming the hostname in a replica set's config is the same as socket.gethostname(), actually record the hostname.\n",
    "head_branch": "unittest-fix-rs-connection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2c44ee515ce6a4b460",
    "number": 78,
    "body": "",
    "head_branch": "replica-set-connection-standalone-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ac8b382f41731a8c8600d48efaebdeb8a58183a8 into e50844b2735291a722f27f6b0c2dcffb61b336bd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc2d44ee515ce6a4b461",
    "number": 77,
    "body": "Normalised the language for ORM like projects.\nRemoved old projects that haven't been updated since 2009.\nAdded asyncmongo to other drivers.\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2e44ee515ce6a4b462",
    "number": 76,
    "body": "Tests sometimes fail with:\n\n```\nexceptions.AssertionError: 3 != 0\nTraceback (most recent call last):\n  File \"/usr/lib/python2.6/unittest.py\", line 279, in run\n    testMethod()\n  File \"/mnt/bamboo-home/xml-data/build-dir/DRIVER-PYTHON-JOB1/test/test_collection.py\", line 488, in test_insert_find_one\n    self.assertEqual(db.test.find().count(), 0)\n  File \"/usr/lib/python2.6/unittest.py\", line 350, in failUnlessEqual\n    (msg or '%r != %r' % (first, second))\n```\n",
    "head_branch": "bamboo-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4def1e610e7bd5b9b62dff9bf648d90c8c40b9de into 12fa9a7fed9160084d8c0883ac5e43cf3ea9b7f2"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc2e44ee515ce6a4b463",
    "number": 75,
    "body": "Maybe a full second is long enough that our Bamboo tests will pass every time\n",
    "head_branch": "unittest-timeout-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 47f31e2a3686571e4d952fd5a365554e61671872 into 4d9fb1ed9044b8c30a0014517ffa511854b11053"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc2f44ee515ce6a4b464",
    "number": 74,
    "body": "It seems the machine running our Bamboo CIS is sometimes under sufficiently heavy load that Mongo can't respond in .1 seconds. The timeout can be longer and it's still a good test of the driver's response to a timeout.\n",
    "head_branch": "unittest-timeout-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 94bb0c54ea8cd926e4f0f2ff755fdad51369f3a2 into 0e37bc254d6748ef5610c03a3fc67323a04dbd72"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc3044ee515ce6a4b465",
    "number": 73,
    "body": "",
    "head_branch": "python-294-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3144ee515ce6a4b466",
    "number": 72,
    "body": "",
    "head_branch": "python-294-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3244ee515ce6a4b467",
    "number": 71,
    "body": "",
    "head_branch": "python-294-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3344ee515ce6a4b468",
    "number": 70,
    "body": "",
    "head_branch": "python-294-rs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3344ee515ce6a4b469",
    "number": 69,
    "body": "Defined getinitargs so FixedOffset objects can now be copied / pickled.\n\nAdded testcase as well.\n",
    "head_branch": "tz_util",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3444ee515ce6a4b46a",
    "number": 68,
    "body": "Fixes https://jira.mongodb.org/browse/PYTHON-299\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c7976688ae1b024bea42735017304fc7a5a11024 into 942131d1c3a33a7dfc4f764b4e5bfce1c6c69c47"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc3544ee515ce6a4b46b",
    "number": 67,
    "body": "Needed for our Bamboo configuration\n",
    "head_branch": "unittest-improvements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3644ee515ce6a4b46c",
    "number": 66,
    "body": "",
    "head_branch": "python-294",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3744ee515ce6a4b46d",
    "number": 65,
    "body": "",
    "head_branch": "HEAD^",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3744ee515ce6a4b46e",
    "number": 64,
    "body": "Use a helper -- `shuffled` -- to be clear that choosing a slave or replica is done at random. The helper only serves to remove the boilerplate required by `random.shuffle` which requires copying the list and shuffling in place.\n\nAlso patched the replica_set_connection test to:\n1. work with `DB_PORT` environment variable\n2. wait for writes to be replicated to all secondaries before trying a secondary read (used to just sleep 1s)\n",
    "head_branch": "shuffle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3844ee515ce6a4b46f",
    "number": 63,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 902d55bcfaa152961fd2fa36cbb5fc9f16efcc42 into 5ed9ea4e81e9c1cf4add22a375038904e7db0ebd"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc3944ee515ce6a4b470",
    "number": 62,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 1267dfd935e09bcc0dc658e0068479b8acc03049 into a707b2782a169b354c5fcac3de8b66e9349f9570"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3a44ee515ce6a4b471",
    "number": 61,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 18e1a0d1be49981c87307c70abc07bcec4006f11 into c3b37e355ea922f3269249ee2a103a1606c3e53a"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3b44ee515ce6a4b472",
    "number": 60,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 91d17eed98b52cf833d8e75f72ebbd08edb0a77a into 5559bd14d2d09682b8e08fcaaaf689b2093f6c00"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc3c44ee515ce6a4b473",
    "number": 59,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ff427cfd85364d96ee99e71d8d442b273c778fad into b0f2a503391260634666afabf5bf64f36fa5cbc4"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc3d44ee515ce6a4b474",
    "number": 58,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dd347a304ce34e920831809c5778c76e0fae7844 into 1b86045b922a9ac8d24a1ccb8cfdb8c969cd1476"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "661fcc3d44ee515ce6a4b475",
    "number": 57,
    "body": "",
    "head_branch": "custom-cursor-class",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3e44ee515ce6a4b476",
    "number": 56,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc3f44ee515ce6a4b477",
    "number": 55,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4044ee515ce6a4b478",
    "number": 54,
    "body": "GridFS was querying for the `_id` of the version, then passing that to `GridOut`, which was querying for the full document. avoid the extra roundtrip and just pass the full document directly to `GridOut`\n",
    "head_branch": "gridfs-noextraqueries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4144ee515ce6a4b479",
    "number": 53,
    "body": "'ve added the spec file for rpm-based systems like Fedora and OpenSUSE.\nI've also chenged the version back to 2.0.1 as 2.0.1+ causes trouble when building the egg path (it replaces '+' with '_' which messes with the installation dirs.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4244ee515ce6a4b47a",
    "number": 52,
    "body": "Because Binary and Code extend the built-in str type, the default callback in JSONEncoder cannot be used to change their representation. The solution is to instead provide a JSONEncoder subclass that implements the correct encoding, which can be passed to `json.dump` and `json.dumps` as the `cls` keyword argument. A JSONDecoder subclass is provided for consistency.\n\nThere is a backwards-compatibility issue with this change: The `bson.json_util` module now tries to import `json` or `simplejson`. However, since that module was really only useful if you were using the built-in JSON module or `simplejson`, this shouldn't be much of an issue in practice.\n\nThe json_util tests and documentation were updated accordingly.\n",
    "head_branch": "json-code-and-binary",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4344ee515ce6a4b47b",
    "number": 51,
    "body": "Not sure how to write a test for this... do you have any ideas?\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4344ee515ce6a4b47c",
    "number": 50,
    "body": "",
    "head_branch": "PYTHON-273",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4444ee515ce6a4b47d",
    "number": 49,
    "body": "",
    "head_branch": "PYTHON-272",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4544ee515ce6a4b47e",
    "number": 48,
    "body": "",
    "head_branch": "ad9cad8aad1ee9df77f84ef65ee5b3bee9d24ba4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4644ee515ce6a4b47f",
    "number": 47,
    "body": "These are fixes and improvements for several bugs I filed\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4744ee515ce6a4b480",
    "number": 46,
    "body": "See Extending and Embedding the Python Interpreter\n1.12. Providing a C API for an Extension Module\nhttp://docs.python.org/extending/extending.html#providing-a-c-api-for-an-extension-module\n\n_cmessagemodule uses the new C API.\n\nDo not link _cbsonmodule statically into _cmessagemodule.\n\nIn both modules, the functions pass around the module object (self).\n\nbuffer.c was not changed, it links statically into both modules. It's ok,\nbecause buffer has no Python API.\n\nI stumbled upon this while trying to port the c modules to Python3. Basically it's the \"right\" solution for your comment in _cmessagemodule:\n\n``` c\n/* This is a hack. There doesn't seem to be a good\n * way to initialize the required Python objects in _cbson.\n */\ninit_cbson();\n```\n\nWhat happens is that you compile _cbsonmodule statically into _cmessagemodule. _cmessagemodule does then import the other standalone _cbsonmodule via the python interface and this one initializes correctly. But when calling a function of _cbsonmodule, it really use the _cbsonmodule linked into _cmessagemodule, which is not initialized, but with that hack.\n\nSo here's a patch to get rid of the second _cbsonmodule.\n\npython2.6 nosetests passes.\n",
    "head_branch": "pymongodev",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4844ee515ce6a4b481",
    "number": 45,
    "body": "The documentation seems to indicate that you can provide a list of [[key, order], [key1, order1]] in order to create multi-key indexes, but when that is provided, an error is thrown. This commit fixes that issue and allows multi-key indexes to be created. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4844ee515ce6a4b482",
    "number": 44,
    "body": "Reordered instance checks in _element_to_bson function for performance. UUID import was causing serious slowdown.\n\nChanged _dict_to_bson function to use append instead of string aggregation.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4944ee515ce6a4b483",
    "number": 43,
    "body": "I found a bug where the pymongo code ends up in a tight infinite loop and locks the whole prcess. Using gdb I was able to trace it to line 69 in bson/buffer.c\n\nWhat is happening is that if the size is such that multiplying by two ends up overflowing it, we will never get out of the loop which tries to increase size to the next power of 2 beyond min_length\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4a44ee515ce6a4b484",
    "number": 42,
    "body": "Currently if MongoDB responds with \"not master and slaveok=false\" the python library will raise an OperationalError instead of an AutoReconnect (which is the documented behavior.)  This commit fixes that problem.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4b44ee515ce6a4b485",
    "number": 41,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4c44ee515ce6a4b486",
    "number": 40,
    "body": "added loads and dumps interface \n\nThis interfaces better with other standalone bson drivers like http://pypi.python.org/pypi/bson/0.3.2 \n(switching back and forth in order to use pymongo is annoying)\n\nThis also greatly facilitates using bson as a json replacement\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4d44ee515ce6a4b487",
    "number": 39,
    "body": "scratching some itches.\n\nI'm not a C python module expert, I might have missed a DECREF or worse.  It runs, though, and makes my iterating heart happy.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4d44ee515ce6a4b488",
    "number": 38,
    "body": "Patch to address https://jira.mongodb.org/browse/PYTHON-256\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4e44ee515ce6a4b489",
    "number": 37,
    "body": "I want to be able to do:\n\n``` python\ndef connect_db():\n    from pymongo import Connection\n    return Connection(MONGO_HOST)\n\nwith closing(connect_db) as conn:\n    do_some_thing_with(conn)\n```\n# commit info: just small Connection.close() that does the same as disconnect() to use with contextlib.closing\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc4f44ee515ce6a4b48a",
    "number": 36,
    "body": "This changeset makes it possible to do blocking reads on tailable cursors.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5044ee515ce6a4b48b",
    "number": 35,
    "body": "https://jira.mongodb.org/browse/PYTHON-39\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5144ee515ce6a4b48c",
    "number": 34,
    "body": "Tested and working both with and without the BSON C extension.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a9fd06f7c3c912ca12c938ad9ea876dd69d9a7c6 into 641279f919dc6783636a84b8e642ff6cc01fac1b"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5144ee515ce6a4b48d",
    "number": 33,
    "body": "Changing the slice operation \"data = data[space:]\" of strings to StringIO.read(space) in grid_file.py increases write performance in my test 5~10x.\n\nTest script can be found here http://pastebin.com/wiKWSzDM\n\nCya Josip\n\nOLD:\ndelicj@lumacbu /opt/develop/bo_gridfs (hg)-[default] % bin/py bench.py write\nWrite: Wrinting (10) files with ( 1) kB\nWrite: Wrinting (10) files with (10) kB\nWrite: Wrinting (10) files with (100) kB\nWrite: Wrinting (10) files with (1000) kB\nWrite: Wrinting (5) files with (10000) kB\nWrite: Wrinting (1) files with (100000) kB\nWrite: Wrinting (50) files with ( 5) kB\nWrite: Wrinting (50) files with ( 5) kB\nWrite: Wrinting (50) files with (50) kB\nWrite: Wrinting (5) files with (5000) kB\nWrite: Wrinting (1) files with (50000) kB\nWrite: count (1) took (34.21)s for (233) MB\nWrite: Writing (202) files took (34.21)s for (233) MB\nbin/py bench.py write  16,30s user 16,68s system 95% cpu 34,409 total\n\nNEW:\ndelicj@lumacbu /opt/develop/bo_gridfs (hg)-[default] % bin/py bench.py write\nWrite: Wrinting (10) files with ( 1) kB\nWrite: Wrinting (10) files with (10) kB\nWrite: Wrinting (10) files with (100) kB\nWrite: Wrinting (10) files with (1000) kB\nWrite: Wrinting (5) files with (10000) kB\nWrite: Wrinting (1) files with (100000) kB\nWrite: Wrinting (50) files with ( 5) kB\nWrite: Wrinting (50) files with ( 5) kB\nWrite: Wrinting (50) files with (50) kB\nWrite: Wrinting (5) files with (5000) kB\nWrite: Wrinting (1) files with (50000) kB\nWrite: count (1) took (4.84)s for (233) MB\nWrite: Writing (202) files took (4.84)s for (233) MB\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5244ee515ce6a4b48e",
    "number": 32,
    "body": "https://jira.mongodb.org/browse/PYTHON-138\n\nGridFS.get_version() and GridFS.get_last_version() now accept kwargs, which, if present, filter the list of files under consideration against any custom metadata fields set with new_file() or put().\n\nUpdated docstrings and added unit tests, per @behackett's comments.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5344ee515ce6a4b48f",
    "number": 31,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5444ee515ce6a4b490",
    "number": 30,
    "body": "fixes an issue where a python code error (a module couldn't be imported)\nbroke future `setup.py doc` invocations until you removed all .pyc files\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5544ee515ce6a4b491",
    "number": 29,
    "body": "The code introduced by the fix to http://jira.mongodb.org/browse/PYTHON-228 which is in \nhttps://github.com/mongodb/mongo-python-driver/commit/f202c535d552d5da99b7cfb5e49ba3bd081da5f2 \n\nbroke backwards compatibility of pickled ObjectIds.  Since pickling is a persistence layer (think about MongoDB objects that were pickled and written to disk as files) they could not be loaded by code using the 1.10+ version of pymongo.  \n\nThis fixes the underlying issue and adds tests to make sure that we're backwards compatible going forward. \n\nIf you would like me to submit a corresponding JIRA ticket for this, I can. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5644ee515ce6a4b492",
    "number": 28,
    "body": "fix pickling of ObjectId by defining `__getstate__()` and `__setstate__()` because `__slots__()` is defined\n\nran into this with pymongo 1.10 with exception:\n`TypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled`\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5744ee515ce6a4b493",
    "number": 27,
    "body": "minimongo (http://github.com/slacy/minimongo and on PyPi) is a document-oriented convenience layer based on pymongo.  It's under active development and use. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5744ee515ce6a4b494",
    "number": 26,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5844ee515ce6a4b495",
    "number": 25,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5944ee515ce6a4b496",
    "number": 24,
    "body": "PYTHON-113:\nTry all slaves until successful message is sent. If they all fail, then raise AutoReconnect\n\nPYTHON-216:\nAdded MasterSlaveConnection.disconnect()\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5a44ee515ce6a4b497",
    "number": 23,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5b44ee515ce6a4b498",
    "number": 22,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5b44ee515ce6a4b499",
    "number": 21,
    "body": "See the bug report for more details.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5c44ee515ce6a4b49a",
    "number": 20,
    "body": "The subject says it all.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5d44ee515ce6a4b49b",
    "number": 19,
    "body": "I noticed this minor typo when looking at the API documentation.  Anyways thanks for all the hard work that's been put into this driver!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5e44ee515ce6a4b49c",
    "number": 18,
    "body": "Just added [MongoAlchemy](http://mongoalchemy.org) to \"Tools\" session on documentation.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5f44ee515ce6a4b49d",
    "number": 17,
    "body": "DBRef.**hash** looks like this:\n        return hash((self.__collection, self.__id, self.__database, self.__kwargs))\n\nThe problem here is that `self.__kwargs` is a dict, which is unhashable type, so this code can never work.\nI just replaced __kwargs with a tuple of key, values.\n\nFixing dbref hash allows to create dicts with dbrefs as keys, which is quite useful to cache dereferenced documents.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc5f44ee515ce6a4b49e",
    "number": 16,
    "body": "My commit fixes this error:\n\n  File \"/usr/lib64/python2.6/site-packages/pymongo/database.py\", line 288, in command\n    _is_command=True)\n  File \"/usr/lib64/python2.6/site-packages/pymongo/collection.py\", line 469, in find_one\n    for result in self.find(spec_or_id, _args, *_kwargs).limit(-1):\n  File \"/usr/lib64/python2.6/site-packages/pymongo/cursor.py\", line 601, in next\n    if len(self.__data) or self._refresh():\n  File \"/usr/lib64/python2.6/site-packages/pymongo/cursor.py\", line 564, in _refresh\n    self.__query_spec(), self.__fields))\n  File \"/usr/lib64/python2.6/site-packages/pymongo/cursor.py\", line 533, in __send_message\n    self.__tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/pymongo/helpers.py\", line 106, in _unpack_response\n    result[\"data\"] = bson.decode_all(response[20:], as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 396, in decode_all\n    (doc, data) = _bson_to_dict(data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 239, in _bson_to_dict\n    return (_elements_to_dict(elements, as_class, tz_aware), data[obj_size:])\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 227, in _elements_to_dict\n    (key, value, data) = _element_to_dict(data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 220, in _element_to_dict\n    (value, data) = _element_getter[element_type](data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 99, in _get_object\n    (object, data) = _bson_to_dict(data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 239, in _bson_to_dict\n    return (_elements_to_dict(elements, as_class, tz_aware), data[obj_size:])\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 227, in _elements_to_dict\n    (key, value, data) = _element_to_dict(data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 220, in _element_to_dict\n    (value, data) = _element_getter[element_type](data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 99, in _get_object\n    (object, data) = _bson_to_dict(data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 239, in _bson_to_dict\n    return (_elements_to_dict(elements, as_class, tz_aware), data[obj_size:])\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 227, in _elements_to_dict\n    (key, value, data) = _element_to_dict(data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 220, in _element_to_dict\n    (value, data) = _element_getter[element_type](data, as_class, tz_aware)\n  File \"/usr/lib64/python2.6/site-packages/bson/__init__.py\", line 150, in _get_code_w_scope\n    (code, data) = _get_string(data)\nTypeError: _get_string() takes exactly 3 arguments (1 given)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6044ee515ce6a4b49f",
    "number": 15,
    "body": "If the socket is in non-blocking mode it will raise an exception when trying to execute requests or other operations. After doing the select in the _close function I added the check to remove the non-blocking mode if it was set. This will be done just if using jython. should this be used globally? \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6144ee515ce6a4b4a0",
    "number": 14,
    "body": "During the _closed call jython crashes saying that socket should be in a non-blocking mode.\n\nI added a check to see if pymongo is running on top of jython, if so, the socket will be set to non-blocking mode.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6244ee515ce6a4b4a1",
    "number": 13,
    "body": "Some changes have to be made to the code base to eventually attain compatibility with py3k:\n- Use distribute instead of setuptools since setuptools will never be compatible with py3k\n- Replace __cmp__ with __eq__ and/or __lt__ since python >= 3.0 does not support __cmp__ or cmp()\n- Make setup.py py3k compatible (no print statement)\n  These changes are backwards compatible (the test suite seems to pass).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6344ee515ce6a4b4a2",
    "number": 12,
    "body": "collection.update will only call self.__database._fix_incoming if upsert is also True. I can't see any reason for that. Whereas I want to call manipulate while updating without upserting.\n\nI can't immediately see any reasons why it needs to be this way so I removed the upsert qualifer for calling manipulate.\n\nIf there is a good reason why it should be left alone please let me know and ignore this request.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6444ee515ce6a4b4a3",
    "number": 11,
    "body": "I got deeper into the `as_class` feature code and I went to the conclusion that I can't use `as_class`, as it is written, for MongoKit. The main raison is that an `as_class` object is fired for every embeded documents.\n\nhttp://github.com/mongodb/mongo-python-driver/blob/master/bson/__init__.py#L224\n\nThis seems harmless at the first sight but it drop dramatically the performances down. A MongoKit document isn't a simple dict and instantiating a MongoKit document is a little slower than instantiating a dict.\n\n`as_class` is a good feature but not well appropriated for ODM wrapping. I thought about it and I come with a pull request which allow to wrap a SON object only one time.\n\nTell me about it.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6544ee515ce6a4b4a4",
    "number": 10,
    "body": "Rationale:\nI need custom cursors for my ORM, so i can override **getitem** and produce my models from cursor, overwise i need to introduce my own ModelSet/Cursor class, and implement lazy limit/offset from scratch.\n\nImplementation:\nPulled code implements cursor_class property for collection instance and some tests.\n\nPlease comment if you need any fixes, so we can get it into master.\n\nThx, Anatoly\n///\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6544ee515ce6a4b4a5",
    "number": 9,
    "body": "Just because the docs always refer to the js helper instead of the underlying query, so it takes a few minutes to figure out how to get current ops without the helper.\n\nWould be nice, but no big deal if you don't want to clutter pymongo with a bunch of helper functions.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6644ee515ce6a4b4a6",
    "number": 8,
    "body": "I saw a recent commit to mongodb, raising the max document size to 8mb. Here's the correspondent changes for pymongo.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6744ee515ce6a4b4a7",
    "number": 7,
    "body": "DBRef.**getattr** was returning KeyError instead of AttributeError, causing critical problems with for example pickle (checking for **getstate** method) and copy/deepcopy (checking for **deepcopy** method).\n\nThe symptoms can be seen in this post (not posted by myself): http://bitbucket.org/namlook/mongokit/issue/81/fetch_one-find_one-with-beaker-sessions\n\np.s.\nAbsolutely loving MongoDB+PyMongo. Keep it up!\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6844ee515ce6a4b4a8",
    "number": 6,
    "body": "A proposed patch for pymongo that allows the Connection class to perform automatic per-socket authentication for databases across threads and sockets. Once a user authenticates to a database once in a given Connection, all future sockets created by that connection are logged in immediately with no further action required.\n\nThis is a reworking of the initial pull request http://github.com/mongodb/mongo-python-driver/pull/5\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6944ee515ce6a4b4a9",
    "number": 5,
    "body": "I have modified the pymongo's Connection class to perform per-socket authentication for databases when credentials are provided in advance. The connection caches information about already-authenticated socket+database combinations, so authentication is performed only once for each new socket.\n\nPlease consider pulling this feature because it will make it much easier to efficiently use MongoDB's auth within multi-threaded web frameworks.\n\nThe changeset includes unit tests that exercise the authentication in single- and multi-threaded scenarios -- these tests are skipped if the local server does not have auth enabled. There is no API documentation yet for the new methods on pymongo.Connection, but I would be happy to add some if it's likely my changes will be accepted.\n\nCheers,\nJames\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6a44ee515ce6a4b4aa",
    "number": 4,
    "body": "Ok, let's try this again.\n\nHere is some code that makes GridFS reading a lot faster (shaved > 1sec off reading a 64MB file). See the full commit message for details.\n",
    "head_branch": "de9d180ecd4c824860de36d4c8be4d080ed20b1b",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "661fcc6b44ee515ce6a4b4ab",
    "number": 3,
    "body": "This makes reading a lot faster and passes all the tests.  See the full commit message for details.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66201f02ac254a19ac2800ca",
    "number": 1605,
    "body": null,
    "head_branch": "PYTHON-4373-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66201f03ac254a19ac2800cb",
    "number": 1604,
    "body": "Reverts mongodb/mongo-python-driver#1600",
    "head_branch": "revert-1600-PYTHON-2048",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66201f04ac254a19ac2800cc",
    "number": 1603,
    "body": "## Changes\r\n\r\nAfter initialData is added in test.unified_format's run_scenario, we get the $clusterTime from the server, and add this to each of the ClientSession entities before further operations.\r\n\r\n## Motivation for the change.\r\n\r\n[DRIVERS-2816](https://jira.mongodb.org/browse/DRIVERS-2816)\r\n\r\n[Here is the pertinent section of the specifications](https://github.com/mongodb/specifications/blob/master/source/unified-test-format/unified-test-format.md?plain=1#L2987-L2998)\r\n\r\n",
    "head_branch": "PYTHON-4227-advance-clustertime-in-unified-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66201f04ac254a19ac2800cd",
    "number": 1602,
    "body": null,
    "head_branch": "PYTHON-4373",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PYTHON-4373 Move dependency declaration to setup.py (#1602)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]