[
  {
    "_id": "662100fbac254a19ac28f44b",
    "number": 1861,
    "body": "The python parser uses ProcessPoolExecutor, which is problematic on macOS when it is distributed as a zip file, leading to errors like:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/var/folders/fw/vythc6112ygfsvky8mdb5p580000gn/T/Bazel.runfiles_esxfeg_v/runfiles/python3_aarch64-apple-darwin/lib/python3.9/multiprocessing/resource_tracker.py\", line 24, in <module>\r\n    from . import spawn\r\n  File \"/var/folders/fw/vythc6112ygfsvky8mdb5p580000gn/T/Bazel.runfiles_esxfeg_v/runfiles/python3_aarch64-apple-darwin/lib/python3.9/multiprocessing/spawn.py\", line 13, in <module>\r\n    import runpy\r\n  File \"/var/folders/fw/vythc6112ygfsvky8mdb5p580000gn/T/Bazel.runfiles_esxfeg_v/runfiles/python3_aarch64-apple-darwin/lib/python3.9/runpy.py\", line 19, in <module>\r\n    from pkgutil import read_code, get_importer\r\nModuleNotFoundError: No module named 'pkgutil'\r\n```\r\n\r\nAccording to [\"Contexts and start methods\" section](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods) of the documentation:\r\n\r\n> On macOS, the spawn start method is now the default. The fork start method should be considered unsafe as it can lead to crashes of the subprocess as macOS system libraries may start threads.\r\n\r\nmeanwhile:\r\n\r\n> The 'spawn' and 'forkserver' start methods generally cannot be used with “frozen” executables (i.e., binaries produced by packages like PyInstaller and cx_Freeze) on POSIX systems.\r\n\r\nThis means there is no way to start a ProcessPoolExecutor when the Python zip file is running on macOS. This PR switches it to ThreadPoolExecutor instead.\r\n",
    "head_branch": "thread_pool",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: using thread pool on macOS (#1861)\n\nThe python parser uses ProcessPoolExecutor, which is problematic on\nmacOS when it is distributed as a zip file, leading to errors like:\n\n```\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/var/folders/fw/vythc6112ygfsvky8mdb5p580000gn/T/Bazel.runfiles_esxfeg_v/runfiles/python3_aarch64-apple-darwin/lib/python3.9/multiprocessing/resource_tracker.py\", line 24, in <module>\n    from . import spawn\n  File \"/var/folders/fw/vythc6112ygfsvky8mdb5p580000gn/T/Bazel.runfiles_esxfeg_v/runfiles/python3_aarch64-apple-darwin/lib/python3.9/multiprocessing/spawn.py\", line 13, in <module>\n    import runpy\n  File \"/var/folders/fw/vythc6112ygfsvky8mdb5p580000gn/T/Bazel.runfiles_esxfeg_v/runfiles/python3_aarch64-apple-darwin/lib/python3.9/runpy.py\", line 19, in <module>\n    from pkgutil import read_code, get_importer\nModuleNotFoundError: No module named 'pkgutil'\n```\n\nAccording to [\"Contexts and start methods\"\nsection](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods)\nof the documentation:\n\n> On macOS, the spawn start method is now the default. The fork start\nmethod should be considered unsafe as it can lead to crashes of the\nsubprocess as macOS system libraries may start threads.\n\nmeanwhile:\n\n> The 'spawn' and 'forkserver' start methods generally cannot be used\nwith “frozen” executables (i.e., binaries produced by packages like\nPyInstaller and cx_Freeze) on POSIX systems.\n\nThis means there is no way to start a ProcessPoolExecutor when the\nPython zip file is running on macOS. This PR switches it to\nThreadPoolExecutor instead."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662100fcac254a19ac28f44c",
    "number": 1859,
    "body": "Run `isort` and `black` on all python files so that the pre-commit\r\nhooks do not fail anymore.\r\n\r\nIt seems like most of the issues were quotation marks and vertical\r\nwhitespace.\r\n\r\nFixes #1674.",
    "head_branch": "pre-commit-gh1674",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: Run `isort` and `black` on all python files (#1859)\n\nRun `isort` and `black` on all python files so that the pre-commit\nhooks do not fail anymore.\n\nIt seems like most of the issues were quotation marks and vertical\nwhitespace.\n\nFixes #1674."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662100fdac254a19ac28f44d",
    "number": 1856,
    "body": "With this change we can in theory have multi-platform libraries in the\ndependency cycle and use the pip hub repo for the dependencies. With\nthis we can also make the contents of `whl_library` not depend on what\nplatform the actual dependencies are. This allows us to support the\nfollowing topologies:\n\n* A platform-specific wheel depends on cross-platform wheel.\n* A cross-platform wheel depends on cross-platform wheel.\n* A whl_library can have `select` dependencies based on the interpreter\n  version, e.g. pull in a `tomli` dependency only when the Python\n  interpreter is less than 3.11.\n\nRelates to #1663.\nWork towards #735.\n",
    "head_branch": "refactor/in-hub-group-support",
    "is_a_fork": true,
    "comments": [
      "Hmmm gave this a scan and don't have any immediate complaints. While any-any wheels are absolutely my majority use case, I'm a bit concerned about how to model their participation in cycles with platform-dependent artifacts but you've already got that called out as TBD so seems fine."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662100feac254a19ac28f44e",
    "number": 1855,
    "body": "With this PR the code becomes more maintainable and easier to inspect.\r\nSince bazel-skylib is already a dependency of rules_python, this is\r\na backwards compatible change.\r\n\r\nSkipping the CHANGELOG notes because it should not be an externally\r\nvisible change.\r\n\r\nWork towards #735.",
    "head_branch": "refactor/skylib-selects-in-render",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662100ffac254a19ac28f44f",
    "number": 1854,
    "body": "I have found this to be useful when debugging auth issues when using a private\r\nrepo and I thought that having it configurable from the user's MODULE.bazel\r\nis a better user experience.\r\n\r\nAmmending #1827.",
    "head_branch": "feat/experimental-parallel-downloading-flag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210100ac254a19ac28f450",
    "number": 1852,
    "body": "Work towards incompatible_stop_exporting_language_modules, see https://github.com/bazelbuild/bazel/issues/19455\r\n\r\nThis elevates rules_cc from a dev dependency to a full dependency of rules_python.\r\n",
    "head_branch": "get_cc_symbols_from_rules_cc",
    "is_a_fork": true,
    "comments": [
      "I am a bit lost about the broken CI. I suspect that somehow in the workspace setup a too old rules_cc  version is being used. Given `python/repositories.bzl` used `maybe` to fetch dependencies, this seems possible. But I am lost why only 2 workspace tests red, although there are many more using the workspace setup.",
      "Note, that the failing builds are using bazel `6.4.0`. If I remember correctly, they are the only two workflows doing that. Could this be the reason?",
      "@aignas \r\nSome experimentation showed the problem is independent from the Bazel version.\r\nI can't explain what happens exactly, but making the build green requires registering `rules_cc` before [this line](https://github.com/bazelbuild/rules_python/blob/main/WORKSPACE#L36) in the WORKSPACE file.\r\nTo achieve it I added `rules_cc` to the internal deps, which are loaded before this line. This causes `rules_cc` to be loaded in 2 places (internal and external deps), but given the same is already happening for `bazel_skylib` I assume this workaround is fine.",
      "Thanks for this! It's been on my cleanup list for a long time.\r\n\r\nSince this introduces a new dependency (it's not conceptually new, but will invoke the various remote-repo subsystems, so counts as new), please mention it in the changelog for completeness. I think rules_cc is largely just thin wrappers around the builtin-bazel rules still?\r\n\r\nOtherwise LGTM",
      "Yes, rules_cc are still mostly thin wrappers https://github.com/bazelbuild/rules_cc/blob/main/cc/defs.bzl#L59"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210101ac254a19ac28f451",
    "number": 1851,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 3.6 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.6&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/docs/sphinx/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210101ac254a19ac28f452",
    "number": 1850,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 3.4 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v3.4...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/build_file_generation/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210102ac254a19ac28f453",
    "number": 1849,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 3.4 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v3.4...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210103ac254a19ac28f454",
    "number": 1848,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 3.4 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v3.4...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse_vendored/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210104ac254a19ac28f455",
    "number": 1847,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 3.4 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v3.4...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_repository_annotations/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210105ac254a19ac28f456",
    "number": 1846,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 3.3 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n<p>3.4 (2022-09-14)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.0.0</li>\n<li>Migrate to pyproject.toml for build information (PEP 621)</li>\n<li>Correct another instance where generic exception was raised instead of\nIDNAError for malformed input</li>\n<li>Source distribution uses zeroized file ownership for improved\nreproducibility</li>\n</ul>\n<p>Thanks to Seth Michael Larson for contributions to this release.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v3.3...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.3&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/integration/pip_repository_entry_points/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210106ac254a19ac28f457",
    "number": 1845,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 2.10 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n<p>3.4 (2022-09-14)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.0.0</li>\n<li>Migrate to pyproject.toml for build information (PEP 621)</li>\n<li>Correct another instance where generic exception was raised instead of\nIDNAError for malformed input</li>\n<li>Source distribution uses zeroized file ownership for improved\nreproducibility</li>\n</ul>\n<p>Thanks to Seth Michael Larson for contributions to this release.</p>\n<p>3.3 (2021-10-13)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 14.0.0</li>\n<li>Update to in-line type annotations</li>\n<li>Throw IDNAError exception correctly for some malformed input</li>\n<li>Advertise support for Python 3.10</li>\n<li>Improve testing regime on Github</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v2.10...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=2.10&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210107ac254a19ac28f458",
    "number": 1844,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 2.10 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n<p>3.4 (2022-09-14)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.0.0</li>\n<li>Migrate to pyproject.toml for build information (PEP 621)</li>\n<li>Correct another instance where generic exception was raised instead of\nIDNAError for malformed input</li>\n<li>Source distribution uses zeroized file ownership for improved\nreproducibility</li>\n</ul>\n<p>Thanks to Seth Michael Larson for contributions to this release.</p>\n<p>3.3 (2021-10-13)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 14.0.0</li>\n<li>Update to in-line type annotations</li>\n<li>Throw IDNAError exception correctly for some malformed input</li>\n<li>Advertise support for Python 3.10</li>\n<li>Improve testing regime on Github</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v2.10...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=2.10&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod_build_file_generation/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210108ac254a19ac28f459",
    "number": 1843,
    "body": "Bumps [idna](https://github.com/kjd/idna) from 2.10 to 3.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/releases\">idna's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could take exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/kjd/idna/compare/v3.6...v3.7\">https://github.com/kjd/idna/compare/v3.6...v3.7</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/kjd/idna/blob/master/HISTORY.rst\">idna's changelog</a>.</em></p>\n<blockquote>\n<p>3.7 (2024-04-11)\n++++++++++++++++</p>\n<ul>\n<li>Fix issue where specially crafted inputs to encode() could\ntake exceptionally long amount of time to process. [CVE-2024-3651]</li>\n</ul>\n<p>Thanks to Guido Vranken for reporting the issue.</p>\n<p>3.6 (2023-11-25)\n++++++++++++++++</p>\n<ul>\n<li>Fix regression to include tests in source distribution.</li>\n</ul>\n<p>3.5 (2023-11-24)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.1.0</li>\n<li>String codec name is now &quot;idna2008&quot; as overriding the system codec\n&quot;idna&quot; was not working.</li>\n<li>Fix typing error for codec encoding</li>\n<li>&quot;setup.cfg&quot; has been added for this release due to some downstream\nlack of adherence to PEP 517. Should be removed in a future release\nso please prepare accordingly.</li>\n<li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport\nwith PEP 517 and the Python Packaging User Guide for sdist archives.</li>\n<li>Added security reporting protocol for project</li>\n</ul>\n<p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions\nto this release.</p>\n<p>3.4 (2022-09-14)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 15.0.0</li>\n<li>Migrate to pyproject.toml for build information (PEP 621)</li>\n<li>Correct another instance where generic exception was raised instead of\nIDNAError for malformed input</li>\n<li>Source distribution uses zeroized file ownership for improved\nreproducibility</li>\n</ul>\n<p>Thanks to Seth Michael Larson for contributions to this release.</p>\n<p>3.3 (2021-10-13)\n++++++++++++++++</p>\n<ul>\n<li>Update to Unicode 14.0.0</li>\n<li>Update to in-line type annotations</li>\n<li>Throw IDNAError exception correctly for some malformed input</li>\n<li>Advertise support for Python 3.10</li>\n<li>Improve testing regime on Github</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d\"><code>1d365e1</code></a> Release v3.7</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6\"><code>c1b3154</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/172\">#172</a> from kjd/optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623\"><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>\n<li><a href=\"https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966\"><code>cd58a23</code></a> Merge pull request <a href=\"https://redirect.github.com/kjd/idna/issues/152\">#152</a> from elliotwutingfeng/dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7\"><code>5beb28b</code></a> More efficient resolution of joiner contexts</li>\n<li><a href=\"https://github.com/kjd/idna/commit/1b121483ed04d9576a1291758f537e1318cddc8b\"><code>1b12148</code></a> Update ossf/scorecard-action to v2.3.1</li>\n<li><a href=\"https://github.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067\"><code>d516b87</code></a> Update Github actions/checkout to v4</li>\n<li><a href=\"https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7\"><code>c095c75</code></a> Merge branch 'master' into dev</li>\n<li><a href=\"https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98\"><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>\n<li><a href=\"https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201\"><code>5918a0e</code></a> Merge branch 'master' into dev</li>\n<li>Additional commits viewable in <a href=\"https://github.com/kjd/idna/compare/v2.10...v3.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=2.10&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse/idna-3.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210109ac254a19ac28f45a",
    "number": 1842,
    "body": "Add an example of using a `src` dir and separate `tests` dir and\r\nhaving gazelle generate targets correctly so that tests can be run.\r\n\r\nFixes #1775.",
    "head_branch": "example-src-dir-gh1775",
    "is_a_fork": true,
    "comments": [
      "I can't seem to figure out why builds are failing. Any tips?\r\n\r\nIf I run `bazel test //...` from the new example directory, things run just fine.\r\n\r\n```console\r\n$ cd examples/bzlmod_python_src_dir_with_separate_tests_dir/\r\n$ bazel test //...\r\nINFO: Analyzed 10 targets (4 packages loaded, 24 targets configured).\r\nINFO: Found 7 targets and 3 test targets...\r\nINFO: Elapsed time: 20.303s, Critical Path: 18.58s\r\nINFO: 13 processes: 7 internal, 2 local, 4 processwrapper-sandbox.\r\nINFO: Build completed successfully, 13 total actions\r\n//:gazelle_python_manifest.test                                          PASSED in 0.2s\r\n//:requirements_test                                                     PASSED in 16.2s\r\n//tests:test_my_python_module                                            PASSED in 0.6s\r\n\r\nExecuted 3 out of 3 tests: 3 tests pass.\r\nThere were tests whose specified size is too big. Use the --test_verbose_timeout_warnings command line option to see which ones these are.\r\n```\r\n\r\nIf I run from the git repo root, I get the same failures seen in CI (`unknown repo 'pypi'`).\r\n\r\n```console\r\n$ cd -\r\n/c/dev/rules_python\r\n$ bazel test //...\r\nERROR: Skipping '//...': error loading package under directory '': error loading package 'examples/bzlmod_python_src_dir_with_separate_tests_dir': Unable to find package for @@[unknown repo 'pypi' requested from @@]//:requirements.bzl: The repository '@@[unknown repo 'pypi' requested from @@]' could not be resolved: No repository visible as '@pypi' from main repository.\r\nERROR: error loading package under directory '': error loading package 'examples/bzlmod_python_src_dir_with_separate_tests_dir': Unable to find package for @@[unknown repo 'pypi' requested from @@]//:requirements.bzl: The repository '@@[unknown repo 'pypi' requested from @@]' could not be resolved: No repository visible as '@pypi' from main repository.\r\nINFO: Elapsed time: 25.549s\r\nINFO: 0 processes.\r\nERROR: Build did NOT complete successfully\r\nERROR: Couldn't start the build. Unable to run tests\r\n```\r\n\r\nFrom what I can tell, the only differences between this example and `bzlmod` or `bzlmod_build_file_generation` is that this example:\r\n\r\n1.  Doesn't have a WORKSPACE file\r\n2.  Uses `pypi` for the hub name instead of `pip`.\r\n\r\nBut I tried making both of those edits locally and still got the same error.\r\n\r\nNote: I'm ignoring the MacOS and Windows CI failures for now.",
      "Please run the pre-commit hooks that will update .bazelignore, which should fix the errors seen in the tests running from the root.\r\n\r\nEdit: or the .bazelrc, can't remember which one in this case.",
      "Thanks. Turns out it's _both_ `.bazelrc` and `.bazelignore`.\r\n\r\nI also noticed that the pre-commit hook `update-deleted-packages` doesn't appear to work correctly, so I've opened #1858 with details.",
      "I've been thinking about this PR and how do we organise it together with other gazelle docs that we have. We are running short on CI executors so just adding this example into the CI is not so straight forward. For running `bazel-in-bazel` integration tests we use https://github.com/bazel-contrib/rules_bazel_integration_test. However, this makes our tests slow to execute as they become yet another thing that needs to be executed when we do `bazel test //...`.\r\n\r\nWhat is more, if we merge this PR, does it trump the other example on `build_file_generation`? What is the expected example people are to follow? Given that the Python community is recommending this structure, does it mean that we should follow their recommendations as well? `bazel` has different limitations and benefits and I am wondering about the tradeoffs here and in other places.\r\n\r\nGiven that this example may be more complex than the existing gazelle example I would be +1 on replacing the existing example with this or merging them in some way.\r\n\r\nSorry that this is dragging so long, but I am a bit lost with how we teach our users to use `gazelle` and it seems that more and more people are starting to use it, so your PR is a great addition to the knowledge base, but I am concerned that if we are not running CI on it, it will become stale and will cause new issues about \"stale example\".\r\n\r\nAm I overthinking it here? What are your thoughts? We can have a call to chat this because I do think that having an async messaging is slowing us down. Shall we get in touch on the bazel slack?",
      "I don't have a slack account, sorry. I could do Google Meet if that works for you.\r\n\r\nNo, you're not overthinking this at all - you have great concerns and know a bunch more about the project than I do. For example, I didn't know about `bazel-in-bazel` (though I should have suspected, haha) or about how there are a limited number of CI executors.\r\n\r\n----\r\n\r\n> does it trump the other example? What is the expected example people are to follow?\r\n\r\nI would say that there should be a single \"main\" example to follow, ideally with a limited feature set consisting of the most common use cases (how many projects need `whl_mods` from the start?)\r\n\r\nIMO the feature set for the main example should be:\r\n\r\n+ python toolchain (hermetic python)\r\n+ pip.parse, obviously\r\n+ gazelle python manifest\r\n+ gazelle and some common directives\r\n\r\nWe don't need the requirement locking (`compile_pip_requirements`). At least IME, large projects already have that via tools like `poetry` or `uv`.\r\n\r\n----\r\n\r\n> should Bazel follow the python community recommendation for project structure?\r\n\r\nI'd say that depends on the goals of `rules_python`.\r\n\r\nDo people want `rules_python` to be used in more and more open-source projects (eg: get `numpy` to switch from meson to bazel; get `flask` to use it; have it be the default for greenfield projects)? If so, then the \"main\" example should follow community recommendation for project structure, and modifying as necessary to address the Basel-specific directory structure needs.\r\n\r\nOr is `rules_python` targeting more closed-source systems, like Google and Uber and Dropbox, etc.? If so, then the \"main\" example should probably follow the a structure that more closely reflects what is done in corporate environs (which would be harder to figure out).\r\n\r\n----\r\n\r\n> I would be +1 on replacing the existing example with this or merging them in some way\r\n\r\nSame. When we make a decision I can work on that.\r\n\r\n----\r\n\r\n> I am concerned that if we are not running CI on it, it will become stale\r\n\r\n+100 on that. Incorrect docs can be worse than no docs, haha.",
      "Decision from our video chat: integrate this example into the existing `examples/bzlmod_build_file_generation` example with a dir structure somewhat like:\r\n\r\n```\r\n./examples/bzlmod_build_file_generation\r\n+ pattern1/\r\n    + (the current example)\r\n+ pattern2/\r\n    + the example from this PR\r\n+ README.md  # includes descriptions of the patterns\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210109ac254a19ac28f45b",
    "number": 1841,
    "body": "Bump pip_tools to >= 7.4.0 so that we can make use of better\r\n`pyproject.toml` parsing error messages during compiling.\r\n\r\nSpecifically: https://github.com/jazzband/pip-tools/pull/1979\r\n",
    "head_branch": "bump-pip-tools",
    "is_a_fork": true,
    "comments": [
      "😱 Oops, I'm really bad at remembering to do that. Sorry! Updated.\r\n\r\nI also noticed that there were two \"Changed\" sections so I merged them."
    ],
    "commit_messages": [
      "build(deps): Bump pip tools to >= 7.4.0 (#1841)\n\nBump pip_tools to >= 7.4.0 so that we can make use of better\n`pyproject.toml` parsing error messages during compiling.\n\nSpecifically: https://github.com/jazzband/pip-tools/pull/1979"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621010aac254a19ac28f45c",
    "number": 1837,
    "body": "With this change we add support for platform-specific wheel registration and\ndoing the selection of which wheel is used at build time. This supports:\n* Different package versions for different platforms.\n* Different requirements files per (os, arch) tuples.\n* Uses os, arch specific dependency closures (leveraging the\n  experimental_target_platforms).\n* Use string_flags to configure how to build things (no transition support for now).\n",
    "head_branch": "feat/multi-platform-whls",
    "is_a_fork": true,
    "comments": [
      "I think I've identified at least multiple changes that can be separate PRs:\r\n- [x] refactor groups to be created inside the hub repo. #1856.\r\n- [x] add tests for the index downloader and add a flag to control wether the downloading is happening in parallel. I've noticed it to be much easier to debug. #1854.\r\n- [x] use skylib for selects in the alias repo. #1855.\r\n- [x] Add multi platform requirement support with all of the available wheels registered.",
      "This now needs to be reimplemented/rebased on #1875 and #1885.\n",
      "@dougthor42, if you have time, I'd be curious if you could try this PR, It may have the same issue as #1917, but if does not, then it would be a really interesting data point.",
      "A different error than previously seen. This one is:\r\n\r\n```\r\nERROR: Traceback (most recent call last):\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 481, column 30, in _pip_impl\r\n                _create_whl_repos(module_ctx, pip_attr, hub_whl_map, whl_overrides, hub_group_map, simpleapi_cache)\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 276, column 32, in _create_whl_repos\r\n                whl_library(name = repo_name, **dict(sorted(whl_library_args.items())))\r\nError in repository_rule: invalid user-provided repo name 'pypi_311__REDACTED_0_1_0+7_g9c9466d_py3_none_any': valid names may contain only A-Z, a-z, 0-9, '-', '_', '.', and must start with a letter\r\nERROR: Analysis of target '//src/pyle/dataking/system_optimization/snake_optimizer:snake_metrics_test' failed; build aborted: error evaluating module extension pip in @@rules_python~//python/extensions:pip.bzl\r\n```\r\n\r\nSome of our internal packages include the short git commit hash in their wheel name.",
      "This still needs an updated git commit message and more docs, but the functionality is there and is covered by tests, so it should be ready to test/review.\n\nI'll add more docs later.\n\nSorry for the big PR, but I am not sure if it is possible to split it without loosing the context that is happening all over the `pip.parse` extension.\n\nThis should be portable to the `WORKSPACE` world, but I would like to leave this out of scope for now.\n",
      "Right now the only tests that fail are on Windows and they fail with a weird:\n```\n(15:03:02) WARNING: C:/b/bk-windows-nznf/bazel/rules-python-python/docs/BUILD.bazel:47:6: target '//docs:requirements_parser_bzl' is deprecated: Use //python/pip_install:pip_repository_bzl instead; Both the requirements parser and targets under //docs are internal\n(15:03:14) ERROR: C:/b/bk-windows-nznf/bazel/rules-python-python/tests/config_settings/transition/BUILD.bazel:6:25: in _transition_py_binary rule //tests/config_settings/transition:test_py_binary_with_transition_subject:\nTraceback (most recent call last):\n\tFile \"C:/b/bk-windows-nznf/bazel/rules-python-python/python/config_settings/transition.bzl\", line 78, column 13, in _transition_py_impl\n\t\tfail(\"target {} does not have rules_python PyRuntimeInfo or builtin PyRuntimeInfo\".format(target))\nError in fail: target <target //tests/config_settings/transition:_test_py_binary_with_transition_subject> does not have rules_python PyRuntimeInfo or builtin PyRuntimeInfo\n(15:03:14) ERROR: C:/b/bk-windows-nznf/bazel/rules-python-python/tests/config_settings/transition/BUILD.bazel:6:25: in _transition_py_test rule //tests/config_settings/transition:test_py_test_with_transition_subject:\nTraceback (most recent call last):\n\tFile \"C:/b/bk-windows-nznf/bazel/rules-python-python/python/config_settings/transition.bzl\", line 78, column 13, in _transition_py_impl\n\t\tfail(\"target {} does not have rules_python PyRuntimeInfo or builtin PyRuntimeInfo\".format(target))\n```\n\nI'll finish here for the day. I might split out the last commit out as a separate PR since that is a small distinct change that is related to the big multi-platform change, but we can land it separately.\n",
      "Done, split out the lock-file related work into #1937, so once that one is merged, the diff here will shrink a tiny bit, but not by much.\n",
      "Merged the main since I saw some `auto-detecting` toolchain changelog present, so just to make sure that I am not missing out on anything.",
      "Still failing on the `foobar` package that has a md5 for both py311 and py312 :face_with_diagonal_mouth:\r\n\r\nIt's a different failure, though, so that's good!\r\n\r\n```console\r\n$ bazel clean; bazel build //...\r\nINFO: Invocation ID: cefb7077-a468-4283-b711-06897aff5e1d\r\nINFO: Starting clean (this may take a while). Consider using --async if the clean takes more than several minutes.\r\nINFO: Invocation ID: 84fe841f-1ab2-4990-9261-165044c971ac\r\nERROR: /usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~~pip~pypi/_config/BUILD.bazel: no such target '@@rules_python~~pip~pypi//_config:is_py311_none_manylinux_x86_64': target 'is_py311_none_manylinux_x86_64' not declared in package '_config' defined by /usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~~pip~pypi/_config/BUILD.bazel (did you mean is_py3_none_manylinux_x86_64, _is_py3_none_manylinux_x86_64, is_py_none_manylinux_x86_64, _is_py_none_manylinux_x86_64, is_cp3x_none_manylinux_x86_64, or is_py3_none_any_linux_x86_64?)\r\nERROR: /usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~~pip~pypi/foobar/BUILD.bazel:53:6: errors encountered resolving select() keys for @@rules_python~~pip~pypi//foobar:whl\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nERROR: Analysis of target '//:modules_map' failed; build aborted: Analysis failed\r\nINFO: Elapsed time: 1.091s, Critical Path: 0.63s\r\nINFO: 18 processes: 18 internal.\r\nERROR: Build did NOT complete successfully\r\n```",
      "@dougthor42, sorry for that one, now should be fixed",
      "Yup! 445337e worked for me :+1: \r\n\r\nI noticed that the runfiles directory now has more info in the path name:\r\n+ the wheel name\r\n+ the head of the wheel sha\r\n\r\n```diff\r\n-test.runfiles/rules_python~~pip~pypi_311_foobar/\r\n+test.runfiles/rules_python~~pip~pypi_311_foobar_py311_none_manylinux_2_17_x86_64_b7d2f441/\r\n```\r\n\r\nThese are great changes! Super useful. Should such a change be included in the changelog?",
      "@groodt, thanks for the stamp, could you also stamp #1937 please?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621010bac254a19ac28f45d",
    "number": 1835,
    "body": "Make the substitution pattern for `python_default_visibility` consistent\r\nwith the existing `python_*_naming_convention` pattern.\r\n\r\nIn #1787 I added the `python_default_visibility` directive and used a\r\nsubstitution pattern `$python_root`. However, I missed that the existing\r\n`python_*_naming_convention` directives include a trailing `$`.\r\n\r\nThis PR is just:\r\n```\r\nrg -l -F \"\\$python_root\" | xargs sed -i 's/\\$python_root/$python_root$/g'\r\n```",
    "head_branch": "replacement-pattern",
    "is_a_fork": true,
    "comments": [
      "Notes:\r\n1. We should get this in before 0.32.0 release so that there doesn't have to be any deprecation timeline.\r\n2. I figured this didn't need a changelog entry because it's just part of adding the `python_default_visibility` directive."
    ],
    "commit_messages": [
      "fix(gazelle): Consistent substitution pattern for python_default_visibility directive (#1835)\n\nMake the substitution pattern for `python_default_visibility` consistent\nwith the existing `python_*_naming_convention` pattern.\n\nIn #1787 I added the `python_default_visibility` directive and used a\nsubstitution pattern `$python_root`. However, I missed that the existing\n`python_*_naming_convention` directives include a trailing `$`.\n\nThis PR is just:\n```\nrg -l -F \"\\$python_root\" | xargs sed -i 's/\\$python_root/$python_root$/g'\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621010cac254a19ac28f45e",
    "number": 1834,
    "body": "Add credential helper docs that were requested in https://github.com/bazelbuild/rules_python/pull/1827#issuecomment-2031018674",
    "head_branch": "cred-helper-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Add basic docs for using credential helper with Bazel downloader of python packages (#1834)\n\nAdd credential helper docs that were requested in\nhttps://github.com/bazelbuild/rules_python/pull/1827#issuecomment-2031018674"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621010dac254a19ac28f45f",
    "number": 1833,
    "body": "The older protobuf version (21.7) is still using legacy struct providers. If used rules_python will fail after the default of --incompatible_disallow_struct_provider_syntax is changed.\r\n\r\nOnly 23.1 is on BCR (that's why using this version in MODULE.bazel).\r\nUnpatched 23.1 fails with `no such attribute 'exec_tools' in 'genrule' rule`.\r\nProtobuf v24.4 and 25.3. fails on Windows.\r\nThat's why using 26.1\r\n\r\nIssue: https://github.com/bazelbuild/bazel/issues/19467",
    "head_branch": "upgrade-protobuf",
    "is_a_fork": true,
    "comments": [
      "cc @haberman, @mkruskal-google, on Windows platform protoc fails to build. I tried versions 24.4, 25.3, 26.1. \r\n\r\nBazel version 7.1.1 without bzlmod\r\n\r\n(version 23.1 with bzlmod works, but only because of a patch in https://github.com/bazelbuild/bazel-central-registry/blob/main/modules/protobuf/23.1/patches/0007-bazel-Get-rid-of-exec_tools.-13401.patch \r\n\r\nfailures are:\r\n```\r\n(10:32:00) ERROR: C:/b/y5tfdgmr/external/com_google_protobuf/src/google/protobuf/compiler/BUILD.bazel:97:11: Compiling src/google/protobuf/compiler/command_line_interface.cc [for tool] failed: (Exit 2): cl.exe failed: error executing CppCompile command (from target @@com_google_protobuf//src/google/protobuf/compiler:command_line_interface)\r\n\r\nexternal/com_google_protobuf/src/google/protobuf/compiler/command_line_interface.cc(12): fatal error C1083: Cannot open include file: 'google/protobuf/compiler/command_line_interface.h': No such file or directory\r\n\r\n(10:32:00) ERROR: C:/b/y5tfdgmr/external/com_google_protobuf/src/google/protobuf/compiler/csharp/BUILD.bazel:22:11: Compiling src/google/protobuf/compiler/csharp/csharp_source_generator_base.cc [for tool] failed: (Exit 2): cl.exe failed: error executing CppCompile command (from target @@com_google_protobuf//src/google/protobuf/compiler/csharp:csharp)\r\n\r\nexternal/com_google_protobuf/src/google/protobuf/compiler/csharp/csharp_source_generator_base.cc(8): fatal error C1083: Cannot open include file: 'google/protobuf/compiler/csharp/csharp_source_generator_base.h': No such file or directory\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621010eac254a19ac28f460",
    "number": 1831,
    "body": "Some Sphinx plugins require that other (not necessarily Python) tools are available.\r\n\r\nOne example is the plugin https://github.com/basejumpa/sphinxcontrib-umlet, which requires that UMLet is somehow within the sandbox.\r\n\r\n* Adds `tools` arg to `sphinx_docs` to allow passing in arbitrary tools\r\n  that are made available at runtime\r\n* Performs location expansion on `extra_opts`, which allows passing the\r\n  location of the tools onto sphinx.",
    "head_branch": "sphinx_docs_allow_additional_tools",
    "is_a_fork": true,
    "comments": [
      "Since sphinx is enabled in the next release Ithink this does not need an extrachngalog entry, but the docstring for the tools could include a short example with a particular plugin. Why the opts need expansion is still a little unclear to me. Is it that some plugins may expect the tools to be found in the PATH and that case would not be covered. To be honest, I am not super familiar with sphinx and these questions could be just my ignorance.",
      "> . Why the opts need expansion is still a little unclear to me. Is it that some plugins may expect the tools to be found in the PATH and that case would not be covered.\r\n\r\nSure, something like this?\r\n\r\n```\r\nsphinx_docs(\r\n    ...\r\n    name = ...,\r\n    srcs = ...,\r\n    extra_opts = [\r\n        \"-Dsome_binary=$(execpath //:some_binary_target)\",\r\n    ],\r\n    tools = [\r\n        \"//:some_binary_target\",\r\n    ],\r\n)\r\n```",
      "> Mostly lgtm, just need the extra_opts doc updated (I couldn't suggest an edit since it wasn't a modified line)\r\n\r\nThanks, applied requested changes."
    ],
    "commit_messages": [
      "feat: Allow additional tools for sphinx_docs (#1831)\n\nSome Sphinx plugins require that other (not necessarily Python) tools\nare available.\n\nOne example is the plugin\nhttps://github.com/basejumpa/sphinxcontrib-umlet, which requires that\nUMLet is somehow within the sandbox.\n\n* Adds `tools` arg to `sphinx_docs` to allow passing in arbitrary tools\n  that are made available at runtime\n* Performs location expansion on `extra_opts`, which allows passing the\n  location of the tools onto sphinx."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621010eac254a19ac28f461",
    "number": 1830,
    "body": "Before only X.Y would work and with this change users can\r\nalso specify the exact python version.\r\n\r\nFixes #1371\r\n",
    "head_branch": "fix/pip-parse-micro-version",
    "is_a_fork": true,
    "comments": [
      "Note that the docs say \"Patch level granularity (e.g. '3.12.1') is not supported.\" still."
    ],
    "commit_messages": [
      "fix(bzlmod): allow users using X.Y.Z python_version in pip.parse (#1830)\n\nBefore only X.Y would work and with this change users can\nalso specify the exact python version.\n\nFixes #1371"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621010fac254a19ac28f462",
    "number": 1829,
    "body": "Allows the user to override pip dependencies:\r\n\r\nhttps://github.com/bazelbuild/rules_python/issues/1791\r\n\r\nThis primarily helps solve the issue whereby if your python project `A` depends on python project `B` and python project `C` such that `A -> B, A -> C`, we can now create pip files which resolve for all three repositories. Currently the dependencies in either `B` or `C` will override pip dependencies in `A`.",
    "head_branch": "finn/override-hub-name",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1829/checks?check_run_id=23279339249) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "I think I ran exactly into this issue when I want to consume [rules_ros](https://github.com/mvukov/rules_ros) which defines [this hub](https://github.com/mvukov/rules_ros/blob/049418ec41397080ec2fdff1e76eb7e95d9a0d57/MODULE.bazel#L65). But I want to override the pip deps with the onces we define to have a single version used for all dependencies.",
      "Thanks for the message. Could you explain, what is the reason for using a particular version of the python dependencies for rules_ros? Is it security, other type of compliance, or just need to fix bad behaviour in rules_ros?\n\nThe bzlmod APIs may still need a little bit of refinement before releasing 1.0 and I would like to understand if the feature you'd like is just a workaround a different design flaw that you are experiencing. In order to ensure that we get the right primitives in place I would like to analyse each request separately.\n\n\nOn 25 July 2024 15:49:20 EEST, Markus Hofbauer ***@***.***> wrote:\n>I think I ran exactly into this issue when I want to consume [rules_ros](https://github.com/mvukov/rules_ros) which defines [this hub](https://github.com/mvukov/rules_ros/blob/049418ec41397080ec2fdff1e76eb7e95d9a0d57/MODULE.bazel#L65). But I want to override the pip deps with the onces we define to have a single version used for all dependencies.\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bazelbuild/rules_python/pull/1829#issuecomment-2250242560\n>You are receiving this because you commented.\n>\n>Message ID: ***@***.***>",
      "The reason for overriding the versions of the Python dependencies is that we want to have the same version for all targets. If we don't do that, we could end up in a target that uses the same python package at 2 different versions",
      "@aignas Is there any information that we can provide to help you clarifying this?",
      "Thanks for bringing this back to the top of my inbox. Could you clarify why you would like to use the same version everywhere?\n\nOn 30 July 2024 15:41:26 EEST, Markus Hofbauer ***@***.***> wrote:\n>@aignas Is there any information that we can provide to help you clarifying this?\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bazelbuild/rules_python/pull/1829#issuecomment-2258256315\n>You are receiving this because you were mentioned.\n>\n>Message ID: ***@***.***>",
      "So that we can follow https://opensource.google/documentation/reference/thirdparty/oneversion",
      "It would match what WORKSPACE files do in that if you defined the python libraries before the third party dependency, you can override your thirdparty dependency's python libraries.",
      "Coming back to this after thinking about how the `override` API is going to\nwork for the `python` bzlmod extension (see PRs attached to #2081 if anyone\nwants to follow along).\n\nI am going to write some thoughts here to explore the problem a little bit more\nso that I am sure that I am understanding the implications of the change\ncorrectly. The alternative semantics of the APIs that we can implement here\nare either merging overrides or complete override and ignoring hub repo defs\nfrom non-root modules.\n\nMerging the overrides with the initial definition. Since the initial definition\nwill be done in a non-root module, this makes the implementation difficult -\n`module_ctx.modules[0]` will always be the root module and then what definition\ntakes precedence may be difficult to debug. We could definitely do this, but we\nwould probably need to have a separate tag class here.\n\nSupporting only overriding - the root module user will have to specify all of\nthe parameters them selves. Since the root module comes first in the processing\norder, we'll just have to silence the error that would be thrown. What we need\nto do is to store somewhere that the `hub_repo` has been defined by the root\nmodule and continue.\n\nI am not fully sure if the current implementation does not have a bug around\nthis, so it would be great to have added unit tests, similar to how #2204 has\nadded them. I think that way we can correctly identify edge cases in the\noverrides and ensure that we are handling correctly them. If I am reading the\ncode correctly, the current implementation might work only if the\n`pip.parse(override = True)` is done with a `python_version` that is not the\nsame as the one from the non-root module.\n\nWhat is more, I don't think that storing a single `pip_attr` and a list of\n`pip_attr.python_version` is sound - the separate invocations in general may\nhave different attribute values and we should store something like:\n```starlark\n    python_attrs = {python_attr.python_version: pip_attr}\n```\n\nTo sum up, I think I am happy to merge an implementation that has:\n* Unit tests similar to how #2204 does them - maybe extract a function that\n  returns a `pip_hub_map` and then unit test that. We should definitely add a\n  test ensuring that overriding for multiple python versions works.\n* Ignores non-root module definitions of hub repos with the same name. The root\n  module will be responsible for all of the overrides.\n* Has extra docs on overrides explaining the API semantics.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210110ac254a19ac28f463",
    "number": 1827,
    "body": "This introduces 3 attributes and the minimal code to be able to download wheels\r\nusing the bazel downloader for the host platform. This is not yet adding\r\nsupport for targeting a different platform but just allows us to get the wheels\r\nfor the host platform instead of using `pip`.\r\n\r\nAll of this is achieved by calling the PyPI's SimpleAPI (Artifactory should work\r\nas well) and getting the all URLs for packages from there. Then we use the `sha256`\r\ninformation within the requirements files to match the entries found on SimpleAPI\r\nand then pass the `url`, `sha256` and the `filename` to `whl_library`, which uses\r\n`repository_ctx.download`.\r\n\r\nIf we cannot find any suitable artifact to use, we fallback to legacy `pip` behaviour.\r\n\r\nTesting notes:\r\n* Most of the code has unit tests, but the `pypi_index.bzl` extension could have more.\r\n* You can see the lock file for what the output of all of this code would be on your\r\n  platform.\r\n* Thanks to @dougthor42 for testing this using the credentials helper against a private\r\n  registry that needs authentication to be accessed.\r\n\r\nWork towards #1357\r\n",
    "head_branch": "feat/pip-simpleapi",
    "is_a_fork": true,
    "comments": [
      "This is supposed to be able to use a credential helper, correct? It looks like it does - I can force various errors by having either invalid JSON or incorrect creds in the helper.\r\n\r\nThe issue is that I get 404s for packages that should exist in the private index **if the package contains a dash `-` character**.\r\n\r\nHere's what I mean. Our private index has two packages in it:\r\n\r\n+ `company-code-package`\r\n+ `ourpackage`\r\n\r\nIf my `requirements_lock.txt` has only `ourpackage` in it, I can `bazel build` just fine. Things use the bazel downloader and everything's rainbows.\r\n\r\nIf it has `company-code-package` in it, we get a 404:\r\n\r\n```\r\n$ bazel build //:foo\r\nWARNING: Download from https://pypi.org/simple/ourpackage/ failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://pypi.org/simple/company_code_package/ failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://[REDACTED]/simple/attrs/ failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://[REDACTED]/simple/pandas/ failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://[REDACTED]/simple/numpy/ failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://[REDACTED]/simple/company_code_package/ failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nERROR: Traceback (most recent call last):\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 447, column 30, in _pip_impl\r\n                _create_whl_repos(module_ctx, pip_attr, hub_whl_map, whl_overrides, simpleapi_cache)\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 186, column 40, in _create_whl_repos\r\n                index_urls = simpleapi_download(\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/pypi_index.bzl\", line 125, column 17, in simpleapi_download\r\n                fail(\"Failed to download metadata about '{}' from urls: {}\".format(\r\nError in fail: Failed to download metadata about 'company_code_package' from urls: https://pypi.org/simple, https://[REDACTED]/simple\r\nERROR: error evaluating module extension pip in @@rules_python~//python/extensions:pip.bzl\r\nINFO: Elapsed time: 1.284s\r\nINFO: 0 processes.\r\nERROR: Build did NOT complete successfully\r\nFAILED:\r\n    Fetching module extension pip in @@rules_python~//python/extensions:pip.bzl; starting\r\n```\r\n\r\nThings to note:\r\n\r\n+ the 404's for `https://[REDACTED]/simple/attrs`, `numpy`, and others are expected - those are available on public pypi.\r\n+ the 404 for `https://pypi.org/simple/ourpackage/` is expected - that package is only available on our private index.\r\n+ the url `https://[REDACTED]/simple/company_code_package/` uses underscores instead of dashes.\r\n\r\nThat third point is the kicker. When a normal `pip install company-code-package` is done, the GET request uses the hyphenated name but the response returns links with the underscored name.\r\n\r\n```\r\n$ pip install company-code-package -vvvv\r\n...\r\nRequest header has \"max_age\" as 0, cache bypassed\r\nhttps://us-west2-python.pkg.dev:443 \"GET /qh-lab/qh-py/simple/company-code-package/ HTTP/1.1\" 200 None\r\nUpdating cache with response from \"https://[REDACTED]/simple/company-code-package/\"\r\n  Found link https://[REDACTED]/company-code-package/company_code_package-1.0-py3-none-any.whl#sha256=7aaf9af436d61e73e3c486e5dc7ca7563f51b679f7c34bbe14540f7a9e18b5dd (from https://[REDACTED]/simple/company-code-package/), version: 1.0\r\n...\r\n```\r\n\r\nCould it be that the python package name sanitation is happening too early?",
      "I was normalizing the names in the requirements to use underscores. That works with PyPI (and Artifactory if I remember correctly), but it seems that it does not work with every index. I have changed the code to use exactly the same package name as is in the supplied requirements file.\r\n\r\nI will be adding various unit tests from now on, so expect a little bit more activity here.\r\n\r\nOpen questions:\r\n* Should we just have a single array for the `index_urls`?\r\n* What kind of docs should we have for documenting that we support credential helper. @dougthor42 , maybe you could help me with a paragraph on how you got it working? (Assuming the normalization was the actual issue) ",
      "> What kind of docs should we have for documenting that we support credential helper. @dougthor42 , maybe you could help me with a paragraph on how you got it working?\r\n\r\nI'd be more than happy to! I think I'll be able to get something whipped up within a day or three. I'll just submit a PR onto `aignas:feat/pip-simpleapi`.\r\n\r\n\r\n> I have changed the code to use exactly the same package name as is in the supplied requirements file.\r\n\r\nThanks! That part works wonderfully :grin:.\r\n\r\n### Other Issues/Comments\r\n\r\n1. I'm now having issues because some of the ~440 packages we use _don't have wheels_ but that's **out of scope of this PR**.\r\n2. I get spammed with 404 warnings when the downloader tries to find things like `numpy` in our private index.\r\n     + Perhaps it can be downgraded to INFO or DEBUG? That said, **it's not a big issue and we can resolve it in other ways** (like the virtual index mentioned elsewhere).\r\n3. ValueErrors in `whl_target_platforms.bzl`. Some packages have nonstandard / invalid / just old platform descriptors.\r\n    + [grpcio v1.62.1](https://pypi.org/project/grpcio/1.62.1/#files) has `linux_armv7l`\r\n    + [freetype_py v2.1.0](https://pypi.org/project/freetype-py/2.1.0/#files) has `macosx_10_6_intel`\r\n    + [libclang v13.0.0](https://pypi.org/project/libclang/13.0.0/#files) has `manylinux_2_17_armv7l`\r\n    + [watchdog v3.0.0](https://pypi.org/project/watchdog/3.0.0/#files) has `win_ia64`\r\n    + Those are all the ones I found in our project.\r\n    + I had to add a debug statement to `parse_whl_name.bzl` so that it would print the package that was being processed when the error occured - it might be nice to pass `file` down to `whl_target_platforms._cpu_from_tag` so that the error message has the package name in it.\r\n\r\n\r\nHere's an example of the error in (3):\r\n\r\n```\r\nERROR: Traceback (most recent call last):\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 447, column 30, in _pip_impl\r\n                _create_whl_repos(module_ctx, pip_attr, hub_whl_map, whl_overrides, simpleapi_cache)\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 249, column 29, in _create_whl_repos\r\n                whl = select_whl(\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/whl_target_platforms.bzl\", line 199, column 41, in select_whl\r\n                platforms = whl_target_platforms(platform_tag)\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/whl_target_platforms.bzl\", line 234, column 25, in whl_target_platforms\r\n                cpus = _cpu_from_tag(platform_tag)\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/whl_target_platforms.bzl\", line 268, column 13, in _cpu_from_tag\r\n                fail(\"Unrecognized tag: '{}': cannot determine CPU\".format(tag))\r\nError in fail: Unrecognized tag: 'macosx_10_6_intel': cannot determine CPU\r\nERROR: error evaluating module extension pip in @@rules_python~//python/extensions:pip.bzl\r\n```",
      "After 5643866 it looks like everything's working very well! 404s are still spammy but I can live with that. From what I can tell, both wheels and sdists were correctly installed, it didn't fail out on unknown platforms, and it even fell back to standard pip for one of our more annoying packages [klayout](https://pypi.org/project/klayout)[^1].\r\n\r\nThis is so awesome, thank you very much!\r\n\r\n[^1]: Turns out this is just because the klayout version we were using was yanked from pypi like 3 days ago and my branch wasn't aware that we updated to 0.29.0...",
      "I'll merge this and start looking at supporting multi-platform whl selects which is what #1744 tried to achieve.",
      "This is the first time I see a non closed PR after merging. I'll just close this one manually."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210111ac254a19ac28f464",
    "number": 1822,
    "body": "This removes the `alias` additions when the package groups are not used\nfixing alias that attempt to traverse the entire py_library dependency\ntree.\n\nI noticed that for some code that I want to write for `whl_library`\nhaving it explicit whether we are using groups or not in the `pip.parse`\nand or `whl_library` makes the code easier to understand and write.\n\nFixes #1760\n",
    "head_branch": "fix/1760/use-group-templates-only-when-needed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(whl_library): only add group machinery when it is needed (#1822)\n\nThis removes the `alias` additions when the package groups are not used\nfixing alias that attempt to traverse the entire py_library dependency\ntree.\n\nI noticed that for some code that I want to write for `whl_library`\nhaving it explicit whether we are using groups or not in the `pip.parse`\nand or `whl_library` makes the code easier to understand and write.\n\nFixes #1760"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210112ac254a19ac28f465",
    "number": 1820,
    "body": "When targeting the Python Stable ABI on Windows (by setting the Py_LIMITED_API macro to a Python minimum version hex), the unversioned python3.lib needs to be linked instead of the versioned one (e.g. python38.lib for Python 3.8).\r\n\r\nPython's own config sets the library to link by default in a header called pyconfig.h (https://github.com/python/cpython/blob/9cc9e277254023c0ca08e1a9e379fd89475ca9c2/PC/pyconfig.h#L270), which prompts the linker to search for python3.lib if a stable ABI extension is built using `@rules_python` toolchains.\r\n\r\nSince this library is not exported on Windows in the `python_repository()` rule, building Python C++ extensions with rules_python toolchains fails in the linking step, because the library is never copied. Consequently, it is added now to allow Python SABI extensions to be built (and linked) on Windows with `@rules_python`.\r\n\r\nSince Python takes responsibility for linking the correct lib on Windows, and never both at the same time, no other changes are made.",
    "head_branch": "add-python3lib-windows",
    "is_a_fork": true,
    "comments": [
      "I just tried out the method mentioned in your fix. I made a small cc_binary \r\n\r\n```\r\ncc_binary(\r\n    name = \"embed\",\r\n    srcs = [\"embed.cpp\"],\r\n    deps = [\r\n        \"@rules_python//python/cc:current_py_cc_headers\",\r\n        \"@rules_python//python/cc:current_py_cc_libs\",\r\n    ],\r\n)\r\n```\r\n\r\n```\r\n//embed.cpp\r\n\r\n#include <iostream>\r\n\r\n#define Py_LIMITED_ABI \r\n#include <Python.h>\r\n\r\nint main() { \r\n\t\tstd::cout << \"Starting main\" << \"\\n\";\r\n\t\tstd::cout << \"Ending main\" << \"\\n\";\r\n    return 0;\r\n}\r\n```\r\n\r\nI looked at the resulting linker commands.\r\n```\r\n/nologo\r\n/OUT:bazel-out/x64_windows-opt/bin/python/experimental/embed.exe\r\nbazel-out/x64_windows-opt/bin/python/experimental/_objs/embed/embed.obj\r\nexternal/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/libs/python311.lib\r\nexternal/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/libs/python3.lib\r\n/SUBSYSTEM:CONSOLE\r\n/MACHINE:X64\r\n/DEFAULTLIB:msvcrt.lib\r\n/OPT:ICF\r\n/OPT:REF\r\n```\r\n\r\nThe compiler is now trying to link both python311.lib and python3.lib. I'm not sure what the implications are here and I'm surprised there are no duplicate definition errors produced. Do you know if this is a problem?",
      "Yes, that is potentially a problem - when building against the stable ABI, you do not want to link against the versioned python3XY.lib.\r\n\r\nThis would probably be fine if the `python3.lib` appeared first in the command. (Without knowing the intricacies of the MSVC linker, I'm guessing the first resolved symbol is taken greedily.)\r\n\r\nBut, I'm more curious about the defines here: I'm mentioning `Py_LIMITED_API`, since that designates python3.lib in that pyconfig.h snippet. You don't seem to be defining that either in the code, or in the cc_binary.\r\n\r\nCan you share the linker flags when building with `cc_binary(..., defines=[\"Py_LIMITED_API=0x030A0000\"])` or something similar?",
      "Sorry, my mistake. I have been misreading \"LIMITED_API\" as \"LIMITED_ABI\" the whole time. Let me try once more with the correct spelling.\r\n\r\nUpdate: Same issue with the fixed spelling, now inside the defines=[...] attribute as requested. I verified the object file was compiled with Py_LIMITED_API by looking at the compilation flags which appear below.\r\n```\r\n\r\n/nologo\r\n/DCOMPILER_MSVC\r\n/DNOMINMAX\r\n/D_WIN32_WINNT=0x0601\r\n/D_CRT_SECURE_NO_DEPRECATE\r\n/D_CRT_SECURE_NO_WARNINGS\r\n/bigobj\r\n/Zm500\r\n/EHsc\r\n/wd4351\r\n/wd4291\r\n/wd4250\r\n/wd4996\r\n/I.\r\n/Ibazel-out/x64_windows-opt/bin\r\n/Iexternal/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc\r\n/Ibazel-out/x64_windows-opt/bin/external/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc\r\n/Iexternal/bazel_tools\r\n/Ibazel-out/x64_windows-opt/bin/external/bazel_tools\r\n/Iexternal/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/include\r\n/Ibazel-out/x64_windows-opt/bin/external/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/include\r\n/Iexternal/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/include/python3.11\r\n/Ibazel-out/x64_windows-opt/bin/external/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/include/python3.11\r\n/Iexternal/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/include/python3.11m\r\n/Ibazel-out/x64_windows-opt/bin/external/rules_python~0.31.0~python~python_3_11_x86_64-pc-windows-msvc/include/python3.11m\r\n/DPy_LIMITED_API=0x030A0000\r\n/showIncludes\r\n/MD\r\n/O2\r\n/Oy-\r\n/DNDEBUG\r\n/wd4117\r\n-D__DATE__=\\\"redacted\\\"\r\n-D__TIMESTAMP__=\\\"redacted\\\"\r\n-D__TIME__=\\\"redacted\\\"\r\n/Gy\r\n/Gw\r\n-DWIN32_LEAN_AND_MEAN\r\n-DNOGDI\r\n/std:c++20\r\n/Fobazel-out/x64_windows-opt/bin/python/experimental/_objs/embed/embed.obj\r\n/c\r\npython/experimental/embed.cpp\r\n\r\n```\r\n\r\nI guess whether you define the Py_LIMITED_API or not, the libraries get linked anyway due to Bazel's rules. It makes sense to me that Bazel would instruct the compiler to link all srcs mentioned in cc_library dependency.",
      "I mean, so much is expected - the headers appearing in your compilation command there are always versioned to the Python distribution they are from. \r\n\r\nAlso, from the pyconfig.h snippet, the conditional declaration of either python3.lib or python3X.lib means that the `@rules_python//python/cc:current_py_cc_libs` need not appear as deps at all if you're building a Python extension on Windows, the libs only need to be both present for the hermetic Python.\r\n\r\nYou can see that this is true e.g. by checking the CI statuses of https://github.com/nicholasjng/nanobind-bazel/pull/16, where I completely removed the `current_py_cc_libs` from all default depsets of my Python targets in the second commit of the changeset. On Windows, Python 3.8-3.11 (all without the stable ABI) proceed to build just fine.\r\n\r\nTL,DR: Explicitly specifying the current libs on Windows is normally not necessary because of the selection mechanism in pyconfig.h, and perhaps counterproductive for the reasons you mentioned (Bazel links all libs appearing as deps in a command).",
      "I'm thinking about what you said here.\r\n\r\n`Also, from the pyconfig.h snippet, the conditional declaration of either python3.lib or python3X.lib means that the @rules_python//python/cc:current_py_cc_libs need not appear as deps at all if you're building a Python extension on Windows, the libs only need to be both present for the hermetic Python.`\r\n\r\nIn my project, I have a python_repository provided by python_rules for Python version 3.11. It has registered this version as the default Python toolchain. Outside of the project folder, my system has no globally installed Python version 3.11. Within my project, I want to embed a Python interpreter / write Python extensions for Python 3.11. \r\n\r\nI am hitting the hermetic Python use case that you are mentioning right? If I don't include these dependencies, the #pragma will still try to link python311.lib and I will get a linker error (if I still include the current_py_cc_headers). \r\n\r\nOn the other hand, if I installed Python 3.10 on my system level (and don't include current_py_cc_headers or current_py_cc_libs), msvc would find the system python310.lib/python310.dll and link my project's binaries against those on account of the #pragma directives. But if I write an extension this way, and use it as a dependency for a py_binary, is it going to cause issues? Both python310.dll and python311.dll will be loaded at runtime, defining many of the same symbols. So if I take that route, I must be sure that the system python matches the hermetic python.\r\n\r\nDoes that match your understanding? ",
      "I think we mean different things: I am referring to \"hermetic Python\" as in \"a configured rules_python toolchain\", not as an embedded interpreter. MSVC invocations will not link against anything on the system other than the configured rules_python toolchain. (To verify, see the 3.12 build failure in the PR that I linked - I install Python 3.12 on the runner early on, but the build still fails due to a linker error, even if the system Python 3.12 has all of the required libs.)\r\n\r\nThe only way to screw up hermeticity is to link libs from the system Python explicitly in your package setup code, i.e. by supplying `--linkopt=/LIBPATH:C:\\my\\system\\python\\libs` in Python. If you build everything in Bazel anyway, you're good.\r\n\r\nEDIT: Ah, now I get it. Yes, the current libs will be taken from the rules_python toolchain as well - if you want to redistribute SABI extensions, you package `python3.{lib,dll}`, if not, the versioned ones.",
      "Okay I still can't get my head around how you can remove the current_py_cc_libs dependency and still have your cc_library compile. On my computer I get the following error, which from my point of view is completely expected. Without the dependency, msvc is never told where the lib file is. \r\n\r\n```\r\nLINK : fatal error LNK1104: cannot open file 'python3.lib'\r\nTarget //python/experimental:embed failed to build\r\n\r\n```\r\n\r\nBut I think I'm a little out of my depth here so I'll need to go off on my own and read more about Windows/Bazel/Python.\r\n\r\nUnrelatedly, I did uncover something interesting. Using Process Explorer and launching the Python interpreter, I found it's completely normal for the Python process to load in both python3.dll and pythonxy.dll.\r\n![image](https://github.com/bazelbuild/rules_python/assets/155058764/54080368-c356-469f-aa66-4340f4ba9b41)\r\n\r\nBut this may just be because there are transitive dependencies being imported at startup, where every single pyd only depends on either python3 or pythonxy.\r\n\r\nIn any case I imagine it is safe to add the python*.dll into the sources in your PR which would fix #1823 \r\n\r\nThanks for taking up this issue 👍 \r\n",
      "I don't have a Windows machine around so I am happy that you are investigating this and attempting to make building on Windows better.\r\n\r\nLet me know when you would like a review from the maintainer point of view. The checklist would be:\r\n* Include the backstory within the PR in the linked issue (#1823) as the PR description is too long - it is going to be used as a commit message.\r\n* Add a CHANGELOG.md when it is somewhat ready.\r\n* Consider adding tests that work on Windows as well.\r\n\r\nLet me know if you would like any ideas/suggestions from me or other maintainers.",
      "@aignas Yes please, this is ready for review.\r\n\r\nI can copy the backstory over to a comment in the thread and paste it here, the issue you mentioned is technically about a slightly different use.\r\n\r\nIs the PR title (or a slightly more elaborate description thereof) sufficient as a changelog entry?\r\n\r\nPS: If you're fine with it, I would add the other versioned DLL mentioned in #1823 to the list, and then it should actually also fix that issue.",
      "The PR description is the commit message once the PR is merged and the changelog.md file still needs to be modified manually. As for the backstory, having it as a comment in this PR may be also sufficient. No need to create an issue just for that.\r\n\r\nI am curious if it would be possible to add a test target (maybe under tests/toolchains?) Where we could ensure that the new code works?",
      "The following is the backstory of this PR, previously found in the description.\r\n\r\n-----------------\r\n### Backstory\r\n\r\nI am currently implementing Bazel support for the [nanobind](https://github.com/wjakob/nanobind) project, which makes creation of C++ Python bindings very easy. It is the successor to pybind11 in that regard. Development efforts on this happen in the [nanobind-bazel](https://github.com/nicholasjng/nanobind-bazel) repository.\r\n\r\nOne particular feature in nanobind is targeting the Python stable ABI, which can be used to shrink the build matrix for Python wheels by promising compatibility across minor versions of Python even with C++ extensions. Due to later additions of nanobind prerequisites to the Python limited API, targeting the stable ABI using nanobind only became possible starting with Python 3.12.\r\n\r\nI added a Bazel config to the easiest, \"hello world\"-ish nanobind example project [here](https://github.com/wjakob/nanobind_example/blob/bazel/setup.py), which used to build just fine on all platforms (Win/MacOS/Linux) and versions (Python 3.8-3.12), but only because I was breaking hermeticity in the Windows case, passing the libdir of the system interpreter to the build as a linkopt on Windows _in Python_ (in the setup.py, to be specific).\r\n\r\n(For an example of where this is still done, see https://github.com/google/benchmark/blob/d5c55e8c42a8782cb24f6011d0e88449237ab842/setup.py#L71-L74.)\r\n\r\nOnce I stopped doing that, I started getting build errors for Win+Python 3.12, as for example in this PR: https://github.com/nicholasjng/nanobind-bazel/pull/16. Note that when building for Python 3.12, I target the stable ABI by setting the Py_LIMITED_API macro to 3.12.\r\n\r\nAs would be expected from `pyconfig.h` taking measures to target the unversioned library, Python itself mentions that `python3.lib` needs to be linked in place of `python3XY.lib` when targeting the stable ABI: https://docs.python.org/3/c-api/stable.html#stable-abi\r\n\r\nAs a final point, none of this is an issue on Unix platforms, since those get their Python symbols dynamically at runtime without needing any linkage.\r\n\r\nPlease let me know your thoughts.",
      "I added the changelog entry, and split off the backstory into a comment, removing it from the PR description.\r\n\r\nI also took the liberty to add the `pythonXY.dll` DLL file, as prompted by the linked issue.\r\n\r\nAs for tests - I believe that since MSVC decides the library to link in the pyconfig.h header, we can add a regression test for this issue by compiling a simple `cc_binary` with the Py_LIMITED_API macro defined. The only dependency needed are the current cc headers, so this should be grouped with the cc headers tests. Since I have no experience with writing tests for Bazel, I would welcome some guidance.",
      "I think //tests/cc/current_py_cc_libs:python_libs_linking_test is what you want? I created a simple cc_test to verify some linking behavior, but it didn't pass on windows and I couldn't figure out why. This thread sounds like the reason?\r\n\r\n> Since I have no experience with writing tests for Bazel, I would welcome some guidance.\r\n\r\nYou're probably looking at e.g. tests/cc/current_py_cc_headers/current_py_cc_headers_tests.bzl ? Those are called \"analysis tests\" and are for verifying that the bzl logic in rule code is working. I wouldn't recommend trying to use those for this case -- what you have to do is look into the linker args and try to figure out if it looks right, which is fairly brittle and painful. I would just create cc_test targets that are built/run instead.",
      ">I think //tests/cc/current_py_cc_libs:python_libs_linking_test is what you want? I created a simple cc_test to verify some linking behavior, but it didn't pass on windows and I couldn't figure out why. This thread sounds like the reason?\r\n\r\nYes, that should be it. What do I need to expect in `_solib` for Windows now? Probably `python3.lib`, right?\r\n\r\nhttps://github.com/bazelbuild/rules_python/blob/c5c03b2477dd1ce0c06c9dc60bf816995f222bcf/tests/cc/current_py_cc_libs/current_py_cc_libs_tests.bzl#L52-L57",
      "Yeah. Just use `python3.` instead of `python3.so`. The extension can vary, so I don't think there's a point in trying to match it.",
      "Local Mac is still broken with `matching.str_matches(\"*_solib*/*python3.\")`:\r\n\r\n```\r\nFAIL: //tests/cc/current_py_cc_libs:python_libs_linking_test (see /private/var/tmp/_bazel_nicholasjunge/1a11c1f7d001d9440f87afb0306a8075/execroot/_main/bazel-out/darwin_arm64-fastbuild/testlogs/tests/cc/current_py_cc_libs/python_libs_linking_test/test.log)\r\nINFO: From Testing //tests/cc/current_py_cc_libs:python_libs_linking_test:\r\n==================== Test output for //tests/cc/current_py_cc_libs:python_libs_linking_test:\r\ndyld[10462]: Library not loaded: /install/lib/libpython3.11.dylib\r\n  Referenced from: <BED7F7C3-FAFD-377B-9B37-AEA0F9EC10C8> /private/var/tmp/_bazel_nicholasjunge/1a11c1f7d001d9440f87afb0306a8075/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/tests/cc/current_py_cc_libs/python_libs_linking_test\r\n  Reason: tried: '/install/lib/libpython3.11.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/install/lib/libpython3.11.dylib' (no such file), '/install/lib/libpython3.11.dylib' (no such file)\r\n```\r\n\r\nLooks like the library search path is messed up?\r\n(FWIW, I do see `libpython3.11.dylib` under the `_solib_darwin_arm64` directory in bazel-bin, although in a randomly generated subfolder.)",
      "I think the current libs test is fundamentally broken on MacOS (and potentially Windows too). The linkage of the `python_libs_linking_test` is off:\r\n\r\n```\r\n➜ otool -L bazel-out/darwin_arm64-fastbuild/bin/tests/cc/current_py_cc_libs/python_libs_linking_test\r\nbazel-out/darwin_arm64-fastbuild/bin/tests/cc/current_py_cc_libs/python_libs_linking_test:\r\n        /install/lib/libpython3.11.dylib (compatibility version 3.11.0, current version 3.11.0)\r\n        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1700.255.0)\r\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1345.100.2)\r\n        /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 2420.0.0)\r\n        /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\r\n```\r\n\r\nThe first path is the baked-in dylib path of the hermetic Python's `libpythonXY.dylib`. The linker options look good for fixing up the path to the actual dylib, but it seems they are not respected:\r\n\r\n```\r\n# python_libs_linking_test-2.params\r\n\r\n-o\r\nbazel-out/darwin_arm64-fastbuild/bin/tests/cc/current_py_cc_libs/python_libs_linking_test\r\n-Xlinker\r\n-rpath\r\n-Xlinker\r\n@loader_path/../../../_solib_darwin_arm64/_U@@_Umain~python~python_U3_U11_Uaarch64-apple-darwin_S_S_Clibpython___Ulib\r\n-Xlinker\r\n-rpath\r\n-Xlinker\r\n@loader_path/python_libs_linking_test.runfiles/_main/_solib_darwin_arm64/_U@@_Umain~python~python_U3_U11_Uaarch64-apple-darwin_S_S_Clibpython___Ulib\r\n-Lbazel-out/darwin_arm64-fastbuild/bin/_solib_darwin_arm64/_U@@_Umain~python~python_U3_U11_Uaarch64-apple-darwin_S_S_Clibpython___Ulib\r\nbazel-out/darwin_arm64-fastbuild/bin/tests/cc/current_py_cc_libs/_objs/python_libs_linking_test/python_libs_linking_test.o\r\n-lpython3.11\r\n-Wl,-S\r\n-mmacos-version-min=10.11\r\n-no-canonical-prefixes\r\n-fobjc-link-runtime\r\n-headerpad_max_install_names\r\n-lc++\r\n-lm\r\n```\r\n\r\nNot sure what to do here. I think the best option is to create a new `cc_test` with `Py_LIMITED_API` defined, and restrict it to Windows only.",
      "This patch does not fix the SABI build failure in my project, see https://github.com/nicholasjng/nanobind-bazel/pull/18 and the CI run therein.\r\n\r\nIt seems that the `current_py_cc_libs` target is more broken than initially anticipated, perhaps because no rpath fixup happens for the shared libs in the repository template.\r\n\r\nPossibly related thread (for MacOS): https://github.com/pyinstaller/pyinstaller/issues/7582",
      ">  more broken than anticipated\r\n\r\nI'm not too surprised by that :). There's lots of platform-specific idiosyncrasies and I'm by no means an linker expert, even less so with Windows and Mac. I don't really have a Mac or Windows machine to experiment with, either. I think the reality is someone with more knowledge/experience/motivation for those platforms will need to step up.\r\n\r\nThe code powering the `current_py_cc_libs` stuff is pretty simple. All it's doing is forwarding along the `cc_library()` defined in the runtime's repo. If someone can craft a cc_library that represents python libs coming from within the build, then I can help translate it into the necessary toolchain code.\r\n\r\n> create a new cc_test with Py_LIMITED_API defined, and restrict it to Windows only.\r\n\r\nYes, that's fine. Incremental progress is good.\r\n\r\n> linkage and rpath issues\r\n\r\nThat `/install/lib/libpython3.11.dylib` entry does look a bit odd. It shouldn't be finding libraries from outside the runfiles when those libraries are coming from a cc_library in the build. What does the binary's RPATH, DTNEEDED, and runfiles solib directory look like?\r\n\r\nFrom what I understand of Bazel's cc_test[1], the way it should be working is:\r\n* The cc_test has a DTNEEDED entry added for libpython\r\n* The runfiles solib directory will, somewhere, contain libpython.so\r\n* The cc_test has RPATH pointing to the runfiles solib directory\r\n\r\nThere might be some filename mangling and SONAME trickery, but I can't recall.\r\n* cc_test might have `DTNEEDED=_S_S_blabla_S_libpython3` and a corresponding file with a rewritten SONAME in soblib\r\n* cc_test might have DTNEEDED=libpython3 and solib will have e.g. `runfiles/solib/_S_S_blabla/libpython.dylib` (symlink to actual file)\r\n\r\n[1] cc_binary _might_ behave differently btw. I recall seeing some code paths in the cc rule implementation that special cases cc_test vs cc_binary, but what activated them was convoluted at times, so ymmv.",
      "Not to worry, I'm here to (hopefully) see this through. I'm also not an expert, and every new linker topic I see prompts an extensive google search, but I'll get there :)\r\n\r\nIt seems that on macOS, a binary called `install_name_tool` is responsible for overwriting / setting rpaths and loader paths in dylibs. That could be an option, but it's in all likelihood not portable.\r\n\r\nAs a note, [here](http://clarkkromenaker.com/post/library-dynamic-loading-mac/) is a blog post detailing the practice when bundling dylibs on macOS.\r\n\r\nHere's the full `otool -l` output on the test binary:\r\n\r\n<details>\r\n<summary>Output</summary>\r\n\r\n```\r\n➜ otool -l /Users/nicholasjunge/Workspaces/c++/rules_python/bazel-bin/tests/cc/current_py_cc_libs/python_libs_linking_test\r\n/Users/nicholasjunge/Workspaces/c++/rules_python/bazel-bin/tests/cc/current_py_cc_libs/python_libs_linking_test:\r\nLoad command 0\r\n      cmd LC_SEGMENT_64\r\n  cmdsize 72\r\n  segname __PAGEZERO\r\n   vmaddr 0x0000000000000000\r\n   vmsize 0x0000000100000000\r\n  fileoff 0\r\n filesize 0\r\n  maxprot 0x00000000\r\n initprot 0x00000000\r\n   nsects 0\r\n    flags 0x0\r\nLoad command 1\r\n      cmd LC_SEGMENT_64\r\n  cmdsize 392\r\n  segname __TEXT\r\n   vmaddr 0x0000000100000000\r\n   vmsize 0x0000000000004000\r\n  fileoff 0\r\n filesize 16384\r\n  maxprot 0x00000005\r\n initprot 0x00000005\r\n   nsects 4\r\n    flags 0x0\r\nSection\r\n  sectname __text\r\n   segname __TEXT\r\n      addr 0x0000000100003f08\r\n      size 0x0000000000000064\r\n    offset 16136\r\n     align 2^2 (4)\r\n    reloff 0\r\n    nreloc 0\r\n     flags 0x80000400\r\n reserved1 0\r\n reserved2 0\r\nSection\r\n  sectname __stubs\r\n   segname __TEXT\r\n      addr 0x0000000100003f6c\r\n      size 0x0000000000000024\r\n    offset 16236\r\n     align 2^2 (4)\r\n    reloff 0\r\n    nreloc 0\r\n     flags 0x80000408\r\n reserved1 0 (index into indirect symbol table)\r\n reserved2 12 (size of stubs)\r\nSection\r\n  sectname __cstring\r\n   segname __TEXT\r\n      addr 0x0000000100003f90\r\n      size 0x0000000000000017\r\n    offset 16272\r\n     align 2^0 (1)\r\n    reloff 0\r\n    nreloc 0\r\n     flags 0x00000002\r\n reserved1 0\r\n reserved2 0\r\nSection\r\n  sectname __unwind_info\r\n   segname __TEXT\r\n      addr 0x0000000100003fa8\r\n      size 0x0000000000000058\r\n    offset 16296\r\n     align 2^2 (4)\r\n    reloff 0\r\n    nreloc 0\r\n     flags 0x00000000\r\n reserved1 0\r\n reserved2 0\r\nLoad command 2\r\n      cmd LC_SEGMENT_64\r\n  cmdsize 152\r\n  segname __DATA_CONST\r\n   vmaddr 0x0000000100004000\r\n   vmsize 0x0000000000004000\r\n  fileoff 16384\r\n filesize 16384\r\n  maxprot 0x00000003\r\n initprot 0x00000003\r\n   nsects 1\r\n    flags 0x10\r\nSection\r\n  sectname __got\r\n   segname __DATA_CONST\r\n      addr 0x0000000100004000\r\n      size 0x0000000000000018\r\n    offset 16384\r\n     align 2^3 (8)\r\n    reloff 0\r\n    nreloc 0\r\n     flags 0x00000006\r\n reserved1 3 (index into indirect symbol table)\r\n reserved2 0\r\nLoad command 3\r\n      cmd LC_SEGMENT_64\r\n  cmdsize 72\r\n  segname __LINKEDIT\r\n   vmaddr 0x0000000100008000\r\n   vmsize 0x0000000000004000\r\n  fileoff 32768\r\n filesize 824\r\n  maxprot 0x00000001\r\n initprot 0x00000001\r\n   nsects 0\r\n    flags 0x0\r\nLoad command 4\r\n      cmd LC_DYLD_CHAINED_FIXUPS\r\n  cmdsize 16\r\n  dataoff 32768\r\n datasize 152\r\nLoad command 5\r\n      cmd LC_DYLD_EXPORTS_TRIE\r\n  cmdsize 16\r\n  dataoff 32920\r\n datasize 48\r\nLoad command 6\r\n     cmd LC_SYMTAB\r\n cmdsize 24\r\n  symoff 32976\r\n   nsyms 5\r\n  stroff 33080\r\n strsize 88\r\nLoad command 7\r\n            cmd LC_DYSYMTAB\r\n        cmdsize 80\r\n      ilocalsym 0\r\n      nlocalsym 0\r\n     iextdefsym 0\r\n     nextdefsym 2\r\n      iundefsym 2\r\n      nundefsym 3\r\n         tocoff 0\r\n           ntoc 0\r\n      modtaboff 0\r\n        nmodtab 0\r\n   extrefsymoff 0\r\n    nextrefsyms 0\r\n indirectsymoff 33056\r\n  nindirectsyms 6\r\n      extreloff 0\r\n        nextrel 0\r\n      locreloff 0\r\n        nlocrel 0\r\nLoad command 8\r\n          cmd LC_LOAD_DYLINKER\r\n      cmdsize 32\r\n         name /usr/lib/dyld (offset 12)\r\nLoad command 9\r\n     cmd LC_UUID\r\n cmdsize 24\r\n    uuid BED7F7C3-FAFD-377B-9B37-AEA0F9EC10C8\r\nLoad command 10\r\n      cmd LC_BUILD_VERSION\r\n  cmdsize 32\r\n platform 1\r\n    minos 14.4\r\n      sdk 14.4\r\n   ntools 1\r\n     tool 3\r\n  version 1053.12\r\nLoad command 11\r\n      cmd LC_SOURCE_VERSION\r\n  cmdsize 16\r\n  version 0.0\r\nLoad command 12\r\n       cmd LC_MAIN\r\n   cmdsize 24\r\n  entryoff 16136\r\n stacksize 0\r\nLoad command 13\r\n          cmd LC_LOAD_DYLIB\r\n      cmdsize 64\r\n         name /install/lib/libpython3.11.dylib (offset 24)\r\n   time stamp 2 Thu Jan  1 01:00:02 1970\r\n      current version 3.11.0\r\ncompatibility version 3.11.0\r\nLoad command 14\r\n          cmd LC_LOAD_DYLIB\r\n      cmdsize 48\r\n         name /usr/lib/libc++.1.dylib (offset 24)\r\n   time stamp 2 Thu Jan  1 01:00:02 1970\r\n      current version 1700.255.0\r\ncompatibility version 1.0.0\r\nLoad command 15\r\n          cmd LC_LOAD_DYLIB\r\n      cmdsize 56\r\n         name /usr/lib/libSystem.B.dylib (offset 24)\r\n   time stamp 2 Thu Jan  1 01:00:02 1970\r\n      current version 1345.100.2\r\ncompatibility version 1.0.0\r\nLoad command 16\r\n          cmd LC_LOAD_DYLIB\r\n      cmdsize 96\r\n         name /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (offset 24)\r\n   time stamp 2 Thu Jan  1 01:00:02 1970\r\n      current version 2420.0.0\r\ncompatibility version 300.0.0\r\nLoad command 17\r\n          cmd LC_LOAD_DYLIB\r\n      cmdsize 56\r\n         name /usr/lib/libobjc.A.dylib (offset 24)\r\n   time stamp 2 Thu Jan  1 01:00:02 1970\r\n      current version 228.0.0\r\ncompatibility version 1.0.0\r\nLoad command 18\r\n          cmd LC_RPATH\r\n      cmdsize 136\r\n         path @loader_path/../../../_solib_darwin_arm64/_U@@_Umain~python~python_U3_U11_Uaarch64-apple-darwin_S_S_Clibpython___Ulib (offset 12)\r\nLoad command 19\r\n          cmd LC_RPATH\r\n      cmdsize 168\r\n         path @loader_path/python_libs_linking_test.runfiles/_main/_solib_darwin_arm64/_U@@_Umain~python~python_U3_U11_Uaarch64-apple-darwin_S_S_Clibpython___Ulib (offset 12)\r\nLoad command 20\r\n      cmd LC_FUNCTION_STARTS\r\n  cmdsize 16\r\n  dataoff 32968\r\n datasize 8\r\nLoad command 21\r\n      cmd LC_DATA_IN_CODE\r\n  cmdsize 16\r\n  dataoff 32976\r\n datasize 0\r\nLoad command 22\r\n      cmd LC_CODE_SIGNATURE\r\n  cmdsize 16\r\n  dataoff 33168\r\n datasize 424\r\n```\r\n</details>\r\n\r\nIt looks like the first LC_LOAD_DYLIB entry (for libpython3.11) is the culprit, but the rpath that Bazel set with the linker is correct.\r\n\r\nI'll try to add the test shortly, would appreciate feedback as your time permits.",
      "> It looks like the first LC_LOAD_DYLIB entry (for libpython3.11) is the culprit, but the rpath that Bazel set with the linker is correct.\r\n\r\nYes, I agree. My guess is something is missing from the linker command to generate an LC_LOAD_DYLIB entry like `@rpath/...something...`, like mentioned in that web page you linked to. There is also a cc_import() rule; IDK if that will help, but you could try it.",
      "I added a Windows test with `Py_LIMITED_API` defined to make MSVC look for `libs/python3.lib`. It basically reproduces the issue I saw in my nanobind repo.",
      "@rickeylev I think the new `cc_import` in https://github.com/bazelbuild/rules_python/pull/1820/commits/c567f70ff2c7d0049c40982a05de06c69db7bdb3 did something, I'm just not sure what the issue is now. The buildkite artifacts don't seem to contain any useful information on the failures.",
      "Wow, empty output? That's sort of impressive. I'd have expected like a message about segfaulting or something.\r\n\r\nIn any case, perhaps line 5 in python_libs_linking_test isn't actually triggering? That C++ code is buildable, but not runnable. That it's getting past the build step means the (build time) linking is happy enough. That it's failing at runtime is expected.",
      "Ah, nice! Do you have a preference on how to proceed? I'm guessing it's not as easy as adding an early `return 0`, since the compiler might optimize the symbols away.",
      "Yeah, that's why the condition it checks is argc -- that's a runtime condition, so it can't optimize them away.\r\n\r\nMaybe print out argv or env vars and see if there's something to trigger in there? If not, adding something to args/env of the cc_test target would let us set a signal to check.",
      "Just tried to set an envvar, but that evidently did not work. Am I on the right track?\r\n\r\n(I still can't run this test locally because of the macOS dylib failure, btw, so I am a little slow here.)",
      "Come on dude, why will it not work. What's so special about Windows that the test won't even output logs anymore?\r\n\r\ntl,dr of my latest attempt: Introduce `select()` on `_IS_FREETHREADED` in the cc_import, adjust the formatting in the libpython Windows cases, and change the test by making a string out of `argv[0]` and printing its refcount. Proof for the SABI-ness of said refcount is here: https://docs.python.org/3/c-api/typeobj.html#c.PyObject.ob_refcnt\r\n\r\nMaybe it's time to install that Windows virtualization thingy for Mac.",
      "Looks like the missing part was current_py_cc_libs in the deps of the test? Glad you figured it out!",
      "Thanks! If you'd like, I could also make another PR to enable the other test for Windows now. That effectively tests locating the non-ABI3 libs, which has value in its own right in my opinion."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210113ac254a19ac28f466",
    "number": 1819,
    "body": "Add the `python_test_file_pattern` directive. This directive allows\r\nusers to configure what python files get mapped to the `py_test`\r\nrule.\r\n\r\nThe default behavior is unchanged: both `test_*` and `*_test.py`\r\nfiles generate `py_test` targets if the directive is unset.\r\n\r\nThe directive supports multiple glob patterns, separated by a comma.\r\n\r\nNote: The original code used, effectively, `test_*` for one of the\r\npatterns. This code uses `test_*.py` instead. These are equivalent\r\nbecause of the `.py` extension check prior to pattern matching.\r\n\r\nFixes #1816.",
    "head_branch": "test-file-pattern-gh1816",
    "is_a_fork": true,
    "comments": [
      "Ah, thanks for checking. Then I am happy to merge everything! :)\n\nOn 4 April 2024 17:38:05 GMT+09:00, Illia Ovchynnikov ***@***.***> wrote:\n>@wingsofovnia commented on this pull request.\n>\n>\n>\n>> @@ -54,6 +54,19 @@ func GetActualKindName(kind string, args language.GenerateArgs) string {\n> \treturn kind\n> }\n> \n>+func matchesAnyGlob(s string, globs []string) bool {\n>+\tfor _, g := range globs {\n>+\t\tok, err := doublestar.Match(g, s)\n>\n>Looking at the match's [code](https://github.com/bmatcuk/doublestar/blob/180028ba525d3116cc917ac3179e79428acfd89c/match.go#L74) there is nothing to \"compile\" in glob really, like we typically do with regex. This repo already does `double start.Match` in the loop [here](https://github.com/bazelbuild/rules_python/blob/b9f39bf09760ff75aedd64ce99c9573c1a97068f/gazelle/python/generate.go#L188) and so does bazel-gazelle [here](https://github.com/bazelbuild/bazel-gazelle/blob/1b331b6d9cb2d981580a8d3e2dfc551185790737/walk/config.go#L145) and it hasn't been an issue so far.\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bazelbuild/rules_python/pull/1819#discussion_r1551225285\n>You are receiving this because you modified the open/close state.\n>\n>Message ID: ***@***.***>"
    ],
    "commit_messages": [
      "feat(gazelle): Add \"python_test_file_pattern\" directive (#1819)\n\nAdd the `python_test_file_pattern` directive. This directive allows\nusers to configure what python files get mapped to the `py_test`\nrule.\n\nThe default behavior is unchanged: both `test_*` and `*_test.py`\nfiles generate `py_test` targets if the directive is unset.\n\nThe directive supports multiple glob patterns, separated by a comma.\n\nNote: The original code used, effectively, `test_*` for one of the\npatterns. This code uses `test_*.py` instead. These are equivalent\nbecause of the `.py` extension check prior to pattern matching.\n\nFixes #1816."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210113ac254a19ac28f467",
    "number": 1813,
    "body": "With this commit the visibility settings are adjusted to use the Sphinx Integration from rules_python also in other (dependent) projects.\r\n\r\nSince the Sphinx integration is not yet stable, we denote in the documentation that this is done under the experimental API support. Meaning, breaking changes can occure at any point in time.\r\n\r\nSee the discussion in #1796\r\n",
    "head_branch": "sphinx_docs_experimental_public_visible",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: Make Sphinx integration experimental publicly visible (#1813)\n\nWith this commit the visibility settings are adjusted to use the Sphinx\nIntegration from rules_python also in other (dependent) projects.\n\nSince the Sphinx integration is not yet stable, we denote in the\ndocumentation that this is done under the experimental API support.\nMeaning, breaking changes can occure at any point in time.\n\nSee the discussion in #1796"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210114ac254a19ac28f468",
    "number": 1812,
    "body": "The code still supported legacy struct providers, although none were generated or used.",
    "head_branch": "remove-legacy-struct-providers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: Remove uses of legacy struct providers (#1812)\n\nThe code still supported legacy struct providers, although none were\ngenerated or used."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210115ac254a19ac28f469",
    "number": 1811,
    "body": "The #1693 PR incorrectly assumed that the platform tag will be os-arch\nspecific if and only if the abi tag is of form cpxy. However, there are\nmany wheels that are not like this (e.g. watchdog, tornado, libclang).\nThis fixes the starlark code that is overriding the user platforms with\nsomething that only the wheel supports by also taking into account the\nABI.\n\nFixes #1810.\n",
    "head_branch": "fix/experimental-platform-selection-for-wheel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(whl_library): correctly parse wheel target platforms (#1811)\n\nThe #1693 PR incorrectly assumed that the platform tag will be os-arch\nspecific if and only if the abi tag is of form cpxy. However, there are\nmany wheels that are not like this (e.g. watchdog, tornado, libclang).\nThis fixes the starlark code that is overriding the user platforms with\nsomething that only the wheel supports by also taking into account the\nABI.\n\nFixes #1810."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210116ac254a19ac28f46a",
    "number": 1809,
    "body": "Since https://github.com/bazelbuild/rules_python/pull/1538, when using `gazelle:python_generation_mode project`, a `py_test` rule is created even when there are no test files in the project. fb673ee47b3268a65a18a154edd574b6509c38c7 (first commit on the PR branch) reproduces this issue - it shows that a `py_test` rule is created even when there is no test entrypoint file (`__test__.py`) nor any test file in the entire project. Additionally, test rules created on `project` or `package` generation mode will always set `main = \"__test__.py\"`, even when that file doesn't exist.\r\n\r\nThis PR fixes it by only generating a `py_test` rule if it can find some test file - either an explicit `__test__.py`, or any other file prefixed with `test_` or suffixed with `_test.py`. It also changes the generated test rule to only add `main = \"__test__.py\"` if there is an actual `__test__.py` file. Note that, in the case where a `__test__.py` file doesn't exist, the generated `py_test` rule is likely invalid as-is due to the lack of `main`; this can be fixed by mapping to some other `py_test` implementation, and I believe the new behavior makes more sense than pointing `main` to a non-existing file.\r\n\r\nIt may be useful to review per-commit (all tests pass on each commit):\r\n- First commit reproduces the issue;\r\n- Second commit fixes the issue and the corresponding tests;\r\n- Third commit adds additional test cases.\r\n",
    "head_branch": "amartani/gazelle-project-generation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(gazelle): Do not create invalid py_test rules in `project` generation mode (#1809)\n\nSince https://github.com/bazelbuild/rules_python/pull/1538, when using\n`gazelle:python_generation_mode project`, a `py_test` rule is created\neven when there are no test files in the project.\nfb673ee47b3268a65a18a154edd574b6509c38c7 (first commit on the PR branch)\nreproduces this issue - it shows that a `py_test` rule is created even\nwhen there is no test entrypoint file (`__test__.py`) nor any test file\nin the entire project. Additionally, test rules created on `project` or\n`package` generation mode will always set `main = \"__test__.py\"`, even\nwhen that file doesn't exist.\n\nThis PR fixes it by only generating a `py_test` rule if it can find some\ntest file - either an explicit `__test__.py`, or any other file prefixed\nwith `test_` or suffixed with `_test.py`. It also changes the generated\ntest rule to only add `main = \"__test__.py\"` if there is an actual\n`__test__.py` file. Note that, in the case where a `__test__.py` file\ndoesn't exist, the generated `py_test` rule is likely invalid as-is due\nto the lack of `main`; this can be fixed by mapping to some other\n`py_test` implementation, and I believe the new behavior makes more\nsense than pointing `main` to a non-existing file.\n\nIt may be useful to review per-commit (all tests pass on each commit):\n- First commit reproduces the issue;\n- Second commit fixes the issue and the corresponding tests;\n- Third commit adds additional test cases."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210117ac254a19ac28f46b",
    "number": 1808,
    "body": "I believe this attribute is not used with the bzlmod pip API?",
    "head_branch": "bzlmod-attrs",
    "is_a_fork": true,
    "comments": [
      "LGTM, could you add a changelog entry to the Changed section please?",
      "@aignas updated, look ok?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210118ac254a19ac28f46c",
    "number": 1807,
    "body": "Resolves #1804 \r\n\r\nAdds new `custom_properties` param to `py_wheel`. This feature allow to inject version generated by other target.\r\n\r\nTested with integration tests:\r\n`bazel build examples/wheel:version_from_other_target.dist`",
    "head_branch": "version-file2",
    "is_a_fork": true,
    "comments": [
      "I personally liked the suggested version_file attribute in the rule. I am wondering what other problems would this more generic templating rule solve?\r\n\r\nSince expand_template rules already exist in bazel-skylib or aspect's bazel lib, I am not sure if rules_python should be doing templating here.\r\n\r\nWhat do you think?",
      "ad1. \r\n\r\nMy initial idea also was to use simpler approach with `:version_file` with version inside. Unfortunately name of output wheel file is dynamically generated (contains version ) so I couldn't do it in `build` phase.  In this situation I moved implementation to `run` phase next to stamping.\r\n\r\nRight now I don't see any other use cases for custom_properties than passing version. I decided to implement feature this way to be consistent with stamping implementation.\r\n\r\nad2. \r\n\r\nskylib `expand_template` works only on files in `build` phase. Current templating is done during `run` phase in wheelmaker python script. \r\n\r\nRight now I see three potential solutions, please advise which is most suitable for you :\r\n1. Keep implementation from this PR\r\n2. Pass just `:version_file` param instead of `custom_properites` and use dedicated templating for this variable\r\n3. Refactor `py_wheel` rule and use static wheelfile name. It breaks the py_wheel API but looks like more \"bazelish\" solution",
      "Hi @aignas any advices how I can improve this PR to get it merged ",
      "My initial thoughts are that having a bigger API surface may add extra maintenance to the rule set. Having the version taken from a file sounds like something that has precedent, e.g. rules_oci is doing this - it can only [support a file for remote tags](https://github.com/bazel-contrib/rules_oci/blob/main/oci/private/push.bzl#L124) when pushing an artifact.\r\n\r\nThe bazel-skylib expand_template does not support templating based on the stamp value, but aspect's library does, similarly to how it is documented in rules_oci documentation [here](https://github.com/bazel-contrib/rules_oci/blob/ac7f6e289b9d28378c8c3181f68afbf6f9b5601e/oci/private/push.bzl#L90). A similar thing can be done with a simple `genrule` (although that if you don't want to depend on aspect's bazel lib. [This is how](https://stackoverflow.com/questions/58086955/how-does-bazels-py-binary-stamping-work) one might do that with the `genrule` - it is one of the first search results, so please ignore the `py_library` code in the example.\r\n\r\nDoes this change your thoughts about how this should be implemented? ",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "I got hit by the dynamic output filename (depends on the version) as well and I think the best way would be to use a dir artifact. I think that would be the cleanest approach."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210118ac254a19ac28f46d",
    "number": 1806,
    "body": "Before this PR, WORKSPACE file would be also used when using\n'rules_python' under bzlmod and when developing locally it would yield\nto inconsistent behaviour between the examples and the main workspace.\n\nThis PR ensures that the `dev_pip` is used via `bzlmod`. Whilst there\nmay be a little bit of duplication from now on, it ensures that\nnon-bzlmod code paths do not leak into the bzlmod dev setup.\n",
    "head_branch": "fix/workspace-bzlmod",
    "is_a_fork": true,
    "comments": [
      "Oh wow, how did we not notice this sooner? This would explain a few oddities we've seen. Thanks!"
    ],
    "commit_messages": [
      "fix(internal): add WORKSPACE.bzlmod to ensure dependency separation (#1806)\n\nBefore this PR, WORKSPACE file would be also used when using\n'rules_python' under bzlmod and when developing locally it would yield\nto inconsistent behaviour between the examples and the main workspace.\n\nThis PR ensures that the `dev_pip` is used via `bzlmod`. Whilst there\nmay be a little bit of duplication from now on, it ensures that\nnon-bzlmod code paths do not leak into the bzlmod dev setup."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210119ac254a19ac28f46e",
    "number": 1805,
    "body": "Adds docs for: stamp, srcs, deps, srcs_version, data, and python_version",
    "head_branch": "doc.updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Add some missing attribute docs (#1805)\n\nAdds docs for: stamp, srcs, deps, srcs_version, data, and python_version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621011aac254a19ac28f46f",
    "number": 1803,
    "body": "Adds `version` and `distribution` fields to `PyWheelInfo` provider.\r\n\r\nBigger projects (like mine) have rules to generate one file with versions of all subsequent components. I would like to expose needed fields in convenient and \"bazelish\" way.",
    "head_branch": "extend-pywheel-provider",
    "is_a_fork": true,
    "comments": [
      "Looks like version var is not fully resolved at this moment. Closing PR"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621011bac254a19ac28f470",
    "number": 1802,
    "body": "Add the missing changelog from PR #1784.\r\n",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [
      "/cc @aignas "
    ],
    "commit_messages": [
      "docs(changelog) Update changelog from PR #1784 (#1802)\n\nAdd the missing changelog from PR #1784."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621011cac254a19ac28f471",
    "number": 1801,
    "body": "Fixes #1777\r\n\r\n* Adds `data_files` attribute to `py_wheel` rule. \r\n* Minimal validation of the data-files target directories per [specification](https://packaging.python.org/en/latest/specifications/binary-distribution-format/#installing-a-wheel-distribution-1-0-py32-none-any-whl)\r\n* Added two tests.  \r\n* Added example\r\n\r\n",
    "head_branch": "support-data-files-in-pywheel",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1801/checks?check_run_id=22581398553) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "OK, I think this PR is ready.  I updated the code, added a data check, added another test and an example.  \r\n\r\n@rickeylev, I think this needs your approval.  \r\n@aignas, thank you for the helpful feedback and support!"
    ],
    "commit_messages": [
      "feat: Add support for python-wheel data directory (#1801)\n\nFixes #1777\n\n* Adds `data_files` attribute to `py_wheel` rule. \n* Minimal validation of the data-files target directories per\n[specification](https://packaging.python.org/en/latest/specifications/binary-distribution-format/#installing-a-wheel-distribution-1-0-py32-none-any-whl)\n* Added two tests.  \n* Added example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621011dac254a19ac28f472",
    "number": 1799,
    "body": "With 3f40e98d3901068aa25fa7ff2573f6bdb5b1fe81 the new python runtime 3.12.2 contains terminfo data with a symbolic link which leads to `Too many levels of symbolic links` on a case-insensitive file system:\r\n```\r\nwget -q https://github.com/indygreg/python-build-standalone/releases/download/20240224/cpython-3.12.2+20240224-aarch64-unknown-linux-gnu-install_only.tar.gz -O - | tar tv | grep share/terminfo/N/NCR260VT300WPP\r\nlrwxrwxrwx  0 root   root        0 Jan  1 01:00 python/share/terminfo/N/NCR260VT300WPP -> ../n/ncr260vt300wpp\r\n```\r\n\r\nThe previous version 3.12.1 has no `share/terminfo` directory\r\n```\r\nwget -q https://github.com/indygreg/python-build-standalone/releases/download/20240107/cpython-3.12.1+20240107-aarch64-unknown-linux-gnu-install_only.tar.gz -O - | tar tv | grep share/terminfo\r\n```\r\n\r\nThe fix filters out share/terminfo/N/NCR260VT300WPP symbolic link\r\n\r\n/cc @trentontrees ",
    "head_branch": "fix/terminfo_symlink",
    "is_a_fork": true,
    "comments": [
      "The issue triggered by the line https://github.com/bazelbuild/rules_python/blob/5ab3e9cc/python/repositories.bzl#L256  and can not be fixed without either limiting glob scope or repacking the runtime\r\n\r\nhttps://github.com/bazelbuild/rules_python/issues/1800 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621011dac254a19ac28f473",
    "number": 1798,
    "body": "The updated covergepy version contains a fix for https://github.com/nedbat/coveragepy/issues/1733 which leads to sporadic issues\r\n```\r\n.../rules_python~~python~python_3_12_x86_64-unknown-linux-gnu_coverage/coverage/collector.py\", line 511, in flush_data\r\n    for fname, packeds in packed_data.items():\r\nRuntimeError: dictionary changed size during iteration\r\n```\r\n\r\n",
    "head_branch": "update_coveragepy",
    "is_a_fork": true,
    "comments": [
      "Thanks for the contribution, could you please add a `CHANGELOG.md` entry (probably in the `Changed` section) to note that we are bumping the `coverage.py` version to address upstream bugs. Something like:\r\n```\r\n* Bump `coverage.py` to [7.4.3](https://github.com/nedbat/coveragepy/blob/master/CHANGES.rst#version-743--2024-02-23).\r\n```",
      "@aignas added"
    ],
    "commit_messages": [
      "chore: update coveragepy to 7.4.3 (#1798)\n\nThe updated covergepy version contains a fix for\nhttps://github.com/nedbat/coveragepy/issues/1733 which leads to sporadic\nissues\n```\n.../rules_python~~python~python_3_12_x86_64-unknown-linux-gnu_coverage/coverage/collector.py\", line 511, in flush_data\n    for fname, packeds in packed_data.items():\nRuntimeError: dictionary changed size during iteration\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621011eac254a19ac28f474",
    "number": 1797,
    "body": "Bazel 7.1 has been released, and includes support for `repository_ctx.getenv`. Therefore, update the comments and docs to reflect the current status of the feature with released Bazel versions.",
    "head_branch": "bazel71",
    "is_a_fork": true,
    "comments": [
      "Update of https://github.com/bazelbuild/rules_python/pull/1673/. "
    ],
    "commit_messages": [
      "docs: Update notice about rctx.getenv on Bazel 7 (#1797)\n\nBazel 7.1 has been released, and includes support for\n`repository_ctx.getenv`. Therefore, update the comments and docs to\nreflect the current status of the feature with released Bazel versions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621011fac254a19ac28f475",
    "number": 1795,
    "body": "WIP.\r\n\r\nFixes #1578. Probably.\r\n",
    "head_branch": "1578-keyring",
    "is_a_fork": true,
    "comments": [
      "> `keyring` sounds like something interacting with the OS\r\n\r\nYes, it typically does. There _may_ be an option/implementation that doesn't touch the OS, but I'm not aware of how to use it if such a thing exists.\r\n\r\nAs for the sandbox, sadly I have no idea. I'm still quite new to bazel. What I do know is that adding these deps appeared to work so far :rofl:\r\n\r\n> Does using `.netrc` not work?\r\n\r\nWe don't auth using a username and password, so I don't think that'll work. We're using the the [Google Application Default Credentials \"ADC\"](https://cloud.google.com/docs/authentication/provide-credentials-adc) to auth.\r\n\r\nNote that this PR does not include support for Google ADC. I'm still playing around with how I want to add support for such. Maybe a directive...? but that's a topic for another time.\r\n\r\n> parts that you need to get working?\r\n\r\n`pip-compile` to start, but `pip.parse` will also need to know about the extra index url. Right now the priority is getting the requirements lockfile generation working.\r\n\r\nBackground: I'm trying to add `bazel`, `rules_python` and `gazelle` to an existing monorepo, and I'd love to to use `bzlmod` so that we don't have to migrate later.\r\n\r\nThe first step is to get a python requirements lockfile that can be fed into `pip.parse`. I've opted to use `bazel run //:requirements.update` for such as we already have a `requirements.in`-like file. To get that to work, I followed the instructions described in #1578. The net result was:\r\n\r\n```starlark\r\n# MODULE.bazel\r\nhttp_archive = use_repo_rule(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\n_GENERIC_WHEEL = \"...\" # same as ./python/pip_install/repositories.bzl#L100\r\n\r\nhttp_archive(\r\n    name = \"pypi__keyring\",\r\n    ...\r\n)\r\n\r\n# repeat http_archive for all deps required by (a) keyring and (b) keyrings.google-artifactregistry-auth\r\n# keyrings.google-artifactregistry-auth\r\n# google-auth\r\n# requests\r\n# charset-normalizer\r\n# idna\r\n# urllib3\r\n# certifi\r\n# pyasn1\r\n# pyasn1-modules\r\n# rsa\r\n# cachetools\r\n```\r\n\r\n```starlark\r\n# BUILD.bazel\r\ncompile_pip_requirements(\r\n    name = \"requirements\",\r\n    src = \"requirements.txt\",\r\n\r\n    extra_args = [\r\n        # Pull from our package registry\r\n        \"--extra-index-url\",\r\n        \"https://us-west2-python.pkg.dev/[REDACTED]/simple\",\r\n          # Just verbose enough so that we can see pip_tools is actually doing something\r\n        \"-v\",\r\n    ],\r\n    # Until https://github.com/bazelbuild/rules_python/pull/1795 is merged, we have\r\n    # to do manually add the keyring and keyrings.google-artifactregistry-auth\r\n    # dependencies along with __all__ transitive deps (well, all that are not already\r\n    # part of rules_python)\r\n    extra_deps = [\r\n        \"@pypi__keyring//:lib\",\r\n        \"@pypi__keyrings_google_artifactregistry_auth//:lib\",\r\n        \"@pypi__google_auth//:lib\",\r\n        \"@pypi__requests//:lib\",\r\n        \"@pypi__charset_normalizer//:lib\",\r\n        \"@pypi__idna//:lib\",\r\n        \"@pypi__urllib3//:lib\",\r\n        \"@pypi__certifi//:lib\",\r\n        \"@pypi__pyasn1//:lib\",\r\n        \"@pypi__pyasn1_modules//:lib\",\r\n        \"@pypi__rsa//:lib\",\r\n        \"@pypi__cachetools//:lib\",\r\n    ],\r\n    requirements_txt = \"requirements_lock.txt\",\r\n)\r\n```\r\n\r\nThe 2nd step will be to make sure that `pip.parse` correctly installs all dependencies, inlcuding those from our private index.\r\n\r\nThen I can move on to the rest of the gazelle stuff (`gazelle_python_manifest.update`, `bazel run //:gazelle`).",
      "Thinking on it a little more, a better solution might just be to allow users to define what extra internal deps should be installed:\r\n\r\n```starlark\r\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")\r\npip.parse(\r\n    hub_name = \"pypi\",\r\n    python_version = \"3.10\",\r\n    requirements_lock = \"//:requirements_lock.txt\",\r\n    additional_internal_python_deps = [    # new!\r\n        \"keyring\",\r\n        \"keyrings.google-artifactregistry-auth==1.0.0\",\r\n    ],\r\n)\r\nuse_repo(pip, \"pypi\")\r\n```\r\n\r\nThe `additional_internal_python_deps` arg would accept a list of pip requirement specifier strings and would install those into the internal dep tree early on in the process. That way the `rules_python` project doesn't have to explicitly cater to all types of pypi indexes and their keyring requirements - we could make the user do that instead.\r\n\r\nThoughts? If that makes more sense I'll work on such a thing.",
      "I am thinking that in the long term we should use bazel downloader to download artifacts from PyPI and this means that we should go towards a solution where the bazel's credential helper is used. This would mean that we can extract the files downloaded by the downloader (which may hook into the credential helper) with fewer dependencies.\r\n\r\nThis would work for `pip.parse`, but it would not for the `pip-compile`. For the `pip-compile` case I think adding extra dependencies that call to the system's credential helper would be ideal and using [`keyring`](https://pypi.org/project/keyring/) seems like the best way here.\r\n\r\nIn the mean time, I think asking for doing `pip install` before downloading the wheels might not work out, doing this many times might cause a lot of overhead. I am thinking that it may be better to instead have a custom repository rule, that extends the `host_python` to include the extra packages you want and you could pass the interpreter via the `interpreter_target`.\r\n\r\nThinking about it more, I am wondering if it is possible to do it easily and my guess is that it isn't. However, getting all of the dependencies needed to work with keyring effectively may require some fiddling. Maybe having a repo rule that downloads a list of dependencies and extracts it in a single `site-packages` could be an option here? That way the user could say:\r\n```\r\npip.parse(\r\n    build_deps = [\r\n        \"@my_repo//path:BUILD.bazel\",\r\n    ]\r\n)\r\n```\r\n\r\nI'll post it here for posterity and I'll have to think about it more. The easiest solution would be to\r\n> Perform locking outside bazel\r\nbut that may not be the solution we want here.",
      "The issue I see with supporting `keyring` is that there are many different artifact registries and many different keyring providers for them.\r\n\r\n+ GCP's Artifact Registry, already mentioned in this PR, uses a special keyring provider `google-artifactregistry-auth`\r\n+ AWS CodeArtifact looks like it uses URLs that contain auth tokens, so the base `keyring` is probably sufficient, if needed at all.\r\n+ Azure Artifacts uses another special keyring provider [`artifacts-keyring`](https://github.com/microsoft/artifacts-keyring)\r\n+ on-prem / self-hosted pypi indexes use a variety of things, one example is [`pypiserver`](https://pypi.org/project/pypiserver/) uses [`passlib`](https://pypi.org/project/passlib/).\r\n+ And all the other [`keyring` backends](https://github.com/jaraco/keyring/blob/main/README.rst#third-party-backends).\r\n\r\nIt's a bit of a dependency explosion.\r\n\r\n----\r\n\r\n> I think asking for doing `pip install` before downloading the wheels might not work out, doing this many times might cause a lot of overhead.\r\n\r\nMaybe I'm not familiar enough with bazel yet, but aren't both of these statements true?\r\n\r\n1.  The `pip install` for the internal rules_python/gazelle deps only happens once at the start of any `bazel (build|run|test)` command\r\n2.  Bazel caches things so that (1) doesn't happen _every_ time `bazel (build|run|test)` is executed\r\n\r\nWon't those two items mean that we won't be calling pip install many times?\r\n\r\n----\r\n\r\n> bazel downloader / bazel credential helper\r\n\r\nI'm not familiar with those yet but I did take a quick glace at the [docs](https://bazel.build/reference/command-line-reference#flag--credential_helper) (severely lacking, IMO haha) and the [design propsal](https://github.com/bazelbuild/proposals/blob/main/designs/2022-06-07-bazel-credential-helpers.md).\r\n\r\nOne thing we'll want to consider is that the creds used for, say, RBE, won't necessarily be the same as the ones used for a private python package index. And users might have multiple private indexes all with different creds and auth methods.",
      "Because pip install is executed once for each dependency (essentially with --no-deps option) in parallel, we would need to somehow create the execution environment with the keyring packages repeatedly. The current inclusion of the existing deps is done in this way to use bazel downloader and not need to redownload the keyring multiple times.\r\n\r\nRemember that all of this is happening before build action can be executed and we are bootstraping the project here, so we are with limited options here.\r\n\r\nI'd be interested into how the credentials helper could be configured to do this task instead of adding all of the keyring dependencies. As you say, adding deps for each keyring provider is not feasible.\r\n\r\nHowever, maybe there is a way to bootstrap everything in a way that does not too much tech debt and keeps the configurability.",
      "That sounds good to me.\r\n\r\nFor now, I have a couple options that get me un-stuck and moving forward:\r\n\r\n1. Clone the repo and use [`git_override`](https://bazel.build/versions/6.2.0/rules/lib/globals#git_override) to point to the clone and this branch.\r\n2. Use [`single_version_override`](https://bazel.build/versions/6.2.0/rules/lib/globals#single_version_override) to apply a set of patches to the `rules_python` from the BCR.\r\n\r\nNeither of those are ideal because of the issues you mentioned, but it'll let me focus on getting things _working_. Then I can start looking into the bazel downloader and credential helper.\r\n\r\nSounds like we want to close this PR? Or perhaps just let it linger in DRAFT for a while?",
      "@dougthor42 , would love to hear if https://github.com/bazelbuild/rules_python/pull/1827 helps with `pip.parse` if you can use the bazel downloader there? I think a general setup could be:\r\n```\r\n# MODULE.bazel contents\r\npip.parse(\r\n    hub_name = \"keyring\",\r\n    requirements_lock = \"keyring_lock.txt\",\r\n)\r\n\r\npip.parse(\r\n    hub_name = \"pip\",\r\n    requirements_lock = \"main_lock.txt\",\r\n    experimental_index_url = \"my-private-thing\",\r\n)\r\n\r\n# BUILD.bazel\r\ncompile_pip_requirements(\r\n    name = \"keyring_deps\",\r\n)\r\n\r\ncompile_pip_requirements(\r\n    name = \"private_deps\",\r\n    deps (or data) = [\"@keyring//keyring\"],\r\n)\r\n\r\n# .bazelrc\r\nWhatever is needed to use the credentials helper.   \r\n```",
      "Oh that looks neat. I should be able to give it a go on Monday or Tuesday. Maybe earlier if schedules work out in my favor.\r\n\r\nQuestions:\r\n\r\n1. Would you like me to report progress/errors here, in that PR, or somewhere else?\r\n2. Do we need a manifest file for the `keyring` hub?",
      "1. I am interested in your progress and feel free to document issues here. If you see that the `experimental_index_url` does not work like you would expect, then #1827 would be a good place to leave feedback.\r\n2. I was hoping that you can pass `keyring` and related deps via `extra_deps` like you mentioned in https://github.com/bazelbuild/rules_python/pull/1795#issuecomment-1990112798. I am not sure if you have to have a manifest, but I think you could, if you don't want to setup the keyring dependencies manually with `http_archive`.",
      "## TL;DR:\r\n\r\nI was able to run the `keyring_deps.update` and `requirements.update` targets and my `requirements_lock.txt` didn't change :tada:.\r\n\r\nHowever, actually attempting to `bazel build` something resulted in a failure to auth to our private index. I need to investigate this more, perhaps related to the credentials helper.\r\n\r\n\r\n## The Config\r\n\r\nThis is a representation of the config I'm using. It's basically the same as what you described, but I had to also include `use_repo(pip, \"keyring\")`.\r\n\r\n<details>\r\n\r\n```\r\n# .bazelrc\r\ncommon --enable_bzlmod\r\n\r\n# ~/dthor/dev/rules_python is a checkout of aignas/feat/pip-simpleapi @ 5b6a444\r\nbuild \\\r\n    --override_module=rules_python=/usr/local/google/home/dthor/dev/rules_python \\\r\n    --override_module=rules_python_gazelle_plugin=/usr/local/google/home/dthor/dev/rules_python/gazelle\r\n```\r\n\r\n```starlark\r\n# MODULE.bazel\r\n...\r\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")\r\npip.parse(    # new\r\n    hub_name = \"keyring\",\r\n    python_version = \"3.11\",\r\n    requirements_lock = \"keyring_lock.txt\",\r\n)\r\nuse_repo(pip, \"keyring\")\r\npip.parse(    # existing\r\n    hub_name = \"pypi\",\r\n    python_version = \"3.11\",\r\n    requirements_lock = \"//:requirements_lock.txt\",\r\n    experimental_index_url = \"https://[REDACTED]/simple\",\r\n)\r\nuse_repo(pip, \"pypi\")\r\n```\r\n\r\n```starlark\r\n# BUILD.bazel\r\n...\r\ncompile_pip_requirements(    # New\r\n    name = \"keyring_deps\",\r\n    src = \"keyring_deps.txt\",\r\n    requirements_txt = \"keyring_lock.txt\",\r\n)\r\ncompile_pip_requirements(    # Existing\r\n    name = \"requirements\",\r\n    src = \"requirements.txt\",\r\n    extra_args = [\r\n        # Pull from our package registry\r\n        \"--extra-index-url\",\r\n        \"https://[REDACTED]/simple\",\r\n        # Just verbose enough so that we can see pip_tools is actually doing something\r\n        \"-v\",\r\n    ],\r\n    extra_deps = [    # added\r\n        \"@keyring//keyring\",\r\n        \"@keyring//keyrings_google_artifactregistry_auth\",\r\n    ],\r\n    requirements_txt = \"requirements_lock.txt\",\r\n)\r\n...\r\n```\r\n\r\n```\r\n# keyring_deps.txt\r\nkeyring==23.5.0 ; python_full_version >= \"3.10.4\" and python_version < \"3.12\"\r\nkeyrings-google-artifactregistry-auth==1.0.0 ; python_full_version >= \"3.10.4\" and python_version < \"3.12\"\r\n```\r\n</details>\r\n\r\n\r\n## Running\r\n\r\nI had a little hiccup but got it resolved.\r\n\r\n<details>\r\n\r\n`bazel run //:keyring_deps.update` resulted in a lockfile that looks correct to me:\r\n\r\n```\r\nkeyring_lock.txt\r\n#\r\n# This file is autogenerated by pip-compile with Python 3.11\r\n# by the following command:\r\n#\r\n#    bazel run //:keyring_deps.update\r\n#\r\ncachetools==5.3.3 \\\r\n    --hash=sha256:0abad1021d3f8325b2fc1d2e9c8b9c9d57b04c3932657a72465447332c24d945 \\\r\n    --hash=sha256:ba29e2dfa0b8b556606f097407ed1aa62080ee108ab0dc5ec9d6a723a007d105\r\n    # via google-auth\r\ncertifi==2024.2.2 \\\r\n    --hash=sha256:0569859f95fc761b18b45ef421b1290a0f65f147e92a1e5eb3e635f9a5e4e66f \\\r\n    --hash=sha256:dc383c07b76109f368f6106eee2b593b04a011ea4d55f652c6ca24a754d1cdd1\r\n    # via requests\r\ncffi==1.16.0 \\\r\n    --hash=sha256:0c9ef6ff37e974b73c25eecc13952c55bceed9112be2d9d938ded8e856138bcc \\\r\n...\r\n```\r\n\r\n`bazel run //:requirements.update` resulted in a request for auth to our package index:\r\n\r\n```\r\n$ bazel run //:requirements.update\r\nINFO: Analyzed target //:requirements.update (96 packages loaded, 7432 targets configured).\r\nINFO: Found 1 target...\r\nTarget //:requirements.update up-to-date:\r\n  bazel-bin/requirements.update\r\nINFO: Elapsed time: 1.193s, Critical Path: 0.52s\r\nINFO: 5 processes: 5 internal.\r\nINFO: Build completed successfully, 5 total actions\r\nINFO: Running command line: bazel-bin/requirements.update _main/requirements.txt _main/requirements_lock.txt //:requirements.update '--resolver=backtracking' --allow-unsafe --generate-hashes --extra-index-url https://[REDACTED]/simple -v\r\nUpdating requirements_lock.txt\r\nUsing indexes:\r\n  https://pypi.org/simple\r\n  https://[REDACTED]/simple\r\n  Looking in indexes: https://pypi.org/simple, https://[REDACTED]/simple\r\n\r\n                          ROUND 1                           \r\nUser for [REDACTED]: \r\n```\r\n\r\nThis is not expected, as the Google artifact registry uses the Google application default credentials for auth.\r\n\r\nIt looks like `keyring` (and thus `pip_tools`) doesn't recognize that the \"Google Auth\" provider isn't present. If if did, the 4x verbose logs (`-vvvv` in `compile_pip_requirements`) look like:\r\n\r\n```\r\n...\r\nFound index url https://[REDACTED]/simple/\r\n  Keyring provider requested: auto\r\n  Keyring provider set: import\r\n  Getting credentials from keyring for https://[REDACTED]/simple/\r\n  Loading KWallet\r\n  Loading SecretService\r\n  Loading Windows\r\n  Loading chainer\r\n  Loading libsecret\r\n  Loading macOS\r\n  Loading Google Auth\r\n  Checking None for explicit credentials as part of auth process...\r\n  Checking Cloud SDK credentials as part of auth process...\r\n  Making request: POST https://oauth2.googleapis.com/token\r\n...\r\n```\r\n\r\nYour code hangs after logging `Loading macOS`.\r\n\r\n**Turns out this is because I didn't include the google auth as an extra_dep in `compile_pip_requirements`:**\r\n\r\n```diff\r\n     requirements_txt = \"requirements_lock.txt\",\r\n-    extra_deps = [\"@keyring//keyring\"],\r\n+    extra_deps = [\r\n+        \"@keyring//keyring\",\r\n+        \"@keyring//keyrings_google_artifactregistry_auth\",\r\n+    ],\r\n )\r\n```\r\n\r\n**This diff is already applied to the Config section above.**\r\n\r\n</details>\r\n\r\n\r\n## Trying a Build\r\n\r\n`bazel build //...` was a no-go :disappointed:.\r\n\r\n<details>\r\n\r\nOn first pass, I got a request for user creds and an error related to the user prompt:\r\n\r\n```\r\n===== stdout start =====                                                                                                                                                                                                                      \r\nLooking in indexes: https://pypi.org/simple, https://[REDACTED]/simple                                                                                                                                              \r\nUser for [REDACTED]:                                                                                                                                                                                                             ===== stdout end =====\r\n===== stderr start =====\r\n…\r\n  File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~~internal_deps~pypi__pip/pip/_internal/utils/misc.py\", line 208, in ask_input\r\n    return input(message)                                  \r\n           ^^^^^^^^^^^^^^                                  \r\nEOFError: EOF when reading a line \r\n```\r\n\r\nWhen I got the same issue with my hacky branch, it was resolved by adding `pypi__keyrings_google_artifactregistry_auth` to `rules_python/MODULE.bazel`.\r\n\r\nI then realized that I needed to add the `experimental_index_url` arg to `pip.parse`... :facepalm: That resulted in auth errors :cry: but it was using the bazel downloader, yay!\r\n\r\n```\r\n$ bazel build //src/labrad:all\r\nWARNING: Download from https://[REDACTED]/simple/alabaster/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nWARNING: Download from https://[REDACTED]/simple/ansi2html/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nWARNING: Download from https://[REDACTED]/simple/accessible_pygments/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nWARNING: Download from https://[REDACTED]/simple/altair/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nWARNING: Download from https://[REDACTED]/simple/absl_py/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nWARNING: Download from https://[REDACTED]/simple/alembic/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nERROR: Traceback (most recent call last):\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 446, column 30, in _pip_impl\r\n                _create_whl_repos(module_ctx, pip_attr, hub_whl_map, whl_overrides, simpleapi_cache)\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/bzlmod/pip.bzl\", line 186, column 40, in _create_whl_repos\r\n                index_urls = simpleapi_download(\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/pypi_index.bzl\", line 90, column 51, in simpleapi_download\r\n                contents[pkg] = download.packages.contents()\r\n        File \"/usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/external/rules_python~/python/private/pypi_index.bzl\", line 146, column 26, in lambda\r\n                download.wait() if download_kwargs.get(\"block\") == False else download,\r\nError in wait: java.io.IOException: Error downloading [https://[REDACTED]/simple/absl_py/] to /usr/local/google/home/dthor/.cache/bazel/_bazel_dthor/dbe74c4144b5c9a438d84a119652bef9/modextwd/rules_python~~pip/https___[REDACTED]_simple_absl_py.html: GET returned 401 Unauthorized\r\nWARNING: Download from https://[REDACTED]/simple/aenum/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nWARNING: Download from https://[REDACTED]/simple/annotated_types/ failed: class com.google.devtools.build.lib.bazel.repository.downloader.UnrecoverableHttpException GET returned 401 Unauthorized\r\nERROR: Analysis of target '//src/labrad:auth' failed; build aborted: error evaluating module extension pip in @@rules_python~//python/extensions:pip.bzl\r\nINFO: Elapsed time: 1.434s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nERROR: Build did NOT complete successfully\r\nFAILED: \r\n    Fetching module extension pip in @@rules_python~//python/extensions:pip.bzl; starting\r\n```\r\n\r\n</details>",
      "Now that #1827 is basically ready and it's been tested with a private index (https://github.com/bazelbuild/rules_python/pull/1827#issuecomment-2032689270 and https://github.com/bazelbuild/rules_python/pull/1827#issuecomment-2038756206), this PR isn't needed anymore. Closing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210120ac254a19ac28f476",
    "number": 1794,
    "body": "This fixes a minor error in the \"maintained by\" comments in\r\n`./MODULE.bazel` and `./python/pip_install/repositories.bzl`. The\r\ncomments now agree with what `DEVELOPING.md` says.",
    "head_branch": "update-maintained-by-comments",
    "is_a_fork": true,
    "comments": [
      "~~Note: I'm not sure if `fix(internal_deps)` is the best type and scope for the PR. The PR has no impact on end users but does have a very minor impact on developers.~~ Oh I didn't see the `build` type. Updated to `build(internal_deps)`.\r\n\r\nI found this while working on #1578.",
      "@coeuvre, do you know what the build failure is about? It seems to fail with the RBE setup, but this PR hasn't changed anything, nor have we changed `rules_python` config regarding RBE in recent days.",
      "@aignas Sorry, I recently made some changes to Bazel CI and accidentally broke RBE config for Bazel 6.4.0. It is fixed now."
    ],
    "commit_messages": [
      "build(internal_deps): Update 'maintained by' comments to be correct (#1794)\n\nThis fixes a minor error in the \"maintained by\" comments in\n`./MODULE.bazel` and `./python/pip_install/repositories.bzl`. The\ncomments now agree with what `DEVELOPING.md` says."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210120ac254a19ac28f477",
    "number": 1792,
    "body": "This is a variant of #1625 and was inspired by #1788. In #1625, we\r\nattempt to parse the simple API HTML files in the same `pip.parse`\r\nextension and it brings the follownig challenges:\r\n\r\n* The `pip.parse` cannot be easily use in `isolated` mode and it may\r\n  be difficult to implement the isolation if bazelbuild/bazel#20186\r\n  moves forward.\r\n* Splitting the `pypi_index` out of the `pip.parse` allows us to accept\r\n  the location of the parsed simple API artifacts encoded as a bazel\r\n  label.\r\n* Separation of the logic allows us to very easily implement usage of\r\n  the downloader for cross-platform wheels.\r\n* The `whl` `METADATA` might not be exposed through older versions of\r\n  Artifactory, so having the complexity hidden in this single extension\r\n  allows us to not increase the complexity and scope of `pip.parse` too\r\n  much.\r\n* The repository structure can be reused for `pypi_install` extension\r\n  from #1728.\r\n\r\nTODO:\r\n- [ ] Add unit tests for functions in `pypi_index.bzl` bzlmod extension if\r\n  the design looks good.\r\n- [ ] Changelog.\r\n\r\nWork towards #1357, #1643.\r\n",
    "head_branch": "feat/pypi-index-extension",
    "is_a_fork": true,
    "comments": [
      "\r\n\r\nOut of scope of this PR:\r\n- Further usage of the downloaded artifacts to implement something\r\n  similar to #1625 or #1744. This needs #1750 and #1764.\r\n- Making the lock file the same on all platforms - We would need\r\n  to fully parse the requirements file.\r\n- Support for different dependency versions in the `pip.parse` hub repos\r\n  based on each platform - we would need to be able to interpret\r\n  platform markers in some way, but `pypi_index` should be good already.\r\n- Implementing the parsing of METADATA to detect dependency cycles.\r\n- Support for `requirements` files that are not created via\r\n  `pip-compile`.\r\n- Support for other lock formats, though that would be reasonably\r\n  trivial to add.\r\n\r\nOpen questions:\r\n- Support for VCS dependencies in requirements files - We should\r\n  probably handle them as `overrides` in the `pypi_index` extension and\r\n  treat them in `pip.parse` just as an `sdist`, but I am not sure it\r\n  would work without any issues.",
      "This POC has served well, but I'll close it to focus on more targeted PRs that implement ideas outlined in [this design doc](https://docs.google.com/document/d/1vAupaen4tIZxeqdpkYleuUUjrVuptdps_mz4Y_V4EIo/edit#heading=h.ga06bz2494ba). Since the doc uses this PR as reference material I'll close this and start fresh."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210121ac254a19ac28f478",
    "number": 1790,
    "body": "This PR fixes the incorrect abi parsing logic. Currently, the logic would incorrectly assume the first item is not an abi for packages that do not specify an abi compatibility, e.g. watchdog-4.0.0-py3-none-manylinux2014_aarch64.whl. This would render the os incorrectly parsed, causing total build failures later on.\r\n\r\n```\r\npython3 -m python.pip_install.tools.wheel_installer.wheel_installer --requirement \"watchdog==4.0.0\" --whl-file [REMOVED]/7b77203049f425466cc854899ac39021/external/pip_watchdog/watchdog-4.0.0-py3-none-manylinux2014_aarch64.whl --platform=none_linux_aarch64\r\n<stdout empty>\r\n===== stderr start =====\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"[REMOVED]7b77203049f425466cc854899ac39021/external/rules_python/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 205, in <module>\r\n    main()\r\n[REMOVED]\r\n  File \"[REMOVED]7b77203049f425466cc854899ac39021/external/rules_python/python/pip_install/tools/wheel_installer/wheel.py\", line 205, in from_string\r\n    os=OS[os] if os != \"*\" else None,\r\n       ~~^^^^\r\n  File\r\n \"[REMOVED]7b77203049f425466cc854899ac39021/external/python311_aarch64-unknown-linux-gnu/lib/python3.11/enum.py\", line 790, in __getitem__\r\n    return cls._member_map_[name]\r\n           ~~~~~~~~~~~~~~~~^^^^^^\r\nKeyError: 'none'\r\n```",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1790/checks?check_run_id=22269429689) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "I found this as well, but I think the right fix would be to modify the starlark code that uses this. See #1744 where we pass target platforms to the wheel installer based on the wheel tags.",
      "> I found this as well, but I think the right fix would be to modify the starlark code that uses this. See #1744 where we pass target platforms to the wheel installer based on the wheel tags.\r\n\r\nInteresting, I would imagine none is also a valid abi flag and thus the wheel.py should be able to handle it correctly and thus the fix that I proposed. wdyt?",
      "Moreover, I notice there are some packages with names like this: protobuf-4.25.3-cp37-abi3-manylinux2014_aarch64.whl, which means we need to support this as well.",
      "I just took a second look, I believe we need to approach this issue differently.\r\n\r\nFirstly, it's important to distinguish between the abi_tag and the platform_tag. Modifying [this](https://github.com/bazelbuild/rules_python/blob/da10ac49efee1b02cbfa3b22a39e68bf3fe5bbe2/python/pip_install/pip_repository.bzl#L801) in starlark would be incorrect because the absence of a specified ABI does not necessarily imply that the code is cross-platform. Therefore, we must still verify platform-specific dependencies.\r\n\r\nSecondly, I noticed that the abi3 tag poses a similar issue as well. This PR addresses and resolves the issue in a similar manner.",
      "My thinking about the code that we have is that the `wheel.py` file is about parsing the `METADATA` with respect to the target platform specified by the list of values that the user requests, whereas the starlark part is to translate the list of values that the user requests to the values that `wheel.py` understands.\r\n\r\nLet's say the user says I want to get dependencies for `(cp311, linux_x86_64)`, `(cp311, linux_aarch64)`, `(cp311, osx_x86_64)`, `(cp311, osx_aarch64)`. When we find a wheel that is `py3-none-manylinux_2_17_x86_64`, the behaviour should not be to add dependencies for `cp39`, `cp310` and `cp311` for `linux_x86_64` when parsing the `METADATA` of that wheel. We should only parse the `METADATA` by assuming that the target platform is `(cp311, linux_x86_64)`.\r\n\r\nThe special case where we get a wheel `cp311-cp311-manylinux_2_17_x86_64` we are sure that it is a subset of the requested target platforms, because there is no other way to get the requested platforms (i.e. the wheel will not be downloaded). That is why there is that code in the `starlark` where we are just selecting a particular specific platform. If the wheel is `py3-none-manylinux_2_17_x86_64`, then we should potentially only forward the `linux_x86_64` target platforms, because that is the intersection of the set of the target platforms and the wheel supported platforms.\r\n\r\nSo in short, the bug that you found is because I assumed that `manylinux_x86_64` cannot be together with `py3-none` and I think that `starklark` should be modified instead.",
      "Interesting, I'll close this then. thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210122ac254a19ac28f479",
    "number": 1788,
    "body": "If we can determine that there's a platform agnostic wheel (dep-ver-py3-none-any.whl) then download it using rctx.download, allowing it to be cached.\r\n\r\nThis partially solves https://github.com/bazelbuild/rules_python/issues/1357 but it still doesn't handle dependencies that have platform specific binary wheels like https://pypi.org/project/psycopg2-binary/ .\r\n\r\n(I don't know the ins and outs of pip package resolution, but it seems like there is no easy way to get pip just to print \"what wheel should be downloaded for this platform\" without actually downloading it, which is why this PR can only handle platform agnostic wheels)",
    "head_branch": "rctx-wheel-download",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1788/checks?check_run_id=22220933652) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Yeah it is #1625, Right now I am hoping to get #1744 done first and then come back to this topic so that we can use the Simple API for all of those things.",
      "> Yeah it is #1625, Right now I am hoping to get #1744 done first and then come back to this topic so that we can use the Simple API for all of those things.\r\n\r\nI had a look at something like this but doing all the platform detection appropriately seemed like a big chunk of work (as I can see in those PRs) which was overkill for my simple use case. I'm glad someone is looking at it though, and as your work is far more fleshed out I'll close this PR.\r\n\r\n(If anyone does want to use this patch, it worked for me just to speed up clean builds, but YMMV)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210123ac254a19ac28f47a",
    "number": 1787,
    "body": "Fixes #1783. Provides a way to fix #1682.\r\n\r\nAdd the `python_default_visibility` directive. This directive sets the\r\n`visibility` attribute on all generated `py_*` rules. It accepts a\r\ncomma-separated list of labels to add as visibility targets, similar\r\nto how the base `default_visibility` directive works.\r\n\r\nSetting this directive multiple times will override previous values.\r\n\r\nTwo special values are also accepted: `NONE` and `DEFAULT`. See\r\n./gazelle/README.md#directive-python_default_visibility for details.\r\n\r\nThe directive also accepts a special string `\"$python_root\"` that gets\r\nreplaced with the `python_root` value, if set. If not set, `\"$python_root\"`\r\nis replaced with the empty string.",
    "head_branch": "gazelle-default-vis",
    "is_a_fork": true,
    "comments": [
      "I think this is ready for review now.\r\n\r\nSorry for the big PR! Most of it is just test cases though.",
      "Thanks for addressing my comments! Thanks @aignas for the review. I'll let you merge this when the changelog looks good to you."
    ],
    "commit_messages": [
      "feat(gazelle): Add \"python_default_visibility\" directive (#1787)\n\nFixes #1783. Provides a way to fix #1682.\n\nAdd the `python_default_visibility` directive. This directive sets the\n`visibility` attribute on all generated `py_*` rules. It accepts a\ncomma-separated list of labels to add as visibility targets, similar\nto how the base `default_visibility` directive works.\n\nSetting this directive multiple times will override previous values.\n\nTwo special values are also accepted: `NONE` and `DEFAULT`. See\n./gazelle/README.md#directive-python_default_visibility for details.\n\nThe directive also accepts a special string `\"$python_root\"` that gets\nreplaced with the `python_root` value, if set. If not set,\n`\"$python_root\"`\nis replaced with the empty string.\n\n---------\n\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210124ac254a19ac28f47b",
    "number": 1784,
    "body": "Fixes #1783.\r\n\r\nAdd a new gazelle directive, `python_visibility`, that allows\r\nusers to add labels to the `visibility` attribute of generated targets.\r\nThis directive acts similar to[^1] the [`go_visibility`\r\ndirective](https://github.com/bazelbuild/bazel-gazelle#directives).\r\n\r\nThe primary use case is for python projects that separate unit test\r\nfiles from the python packages/modules that they test, like so:\r\n\r\n```\r\npackaging_tutorial/\r\n├── LICENSE\r\n├── pyproject.toml\r\n├── README.md\r\n├── src/\r\n│   └── mypackage/\r\n│       ├── __init__.py\r\n│       └── foo.py\r\n└── tests/\r\n    ├── __init__.py\r\n    └── test_foo.py\r\n```\r\n\r\nA future PR will add an example to the `./examples` directory (issue\r\n#1775).\r\n\r\n[^1]: At least, similar based on docs. I haven't done any actual\r\ncomparison.",
    "head_branch": "gazelle-python-visibility",
    "is_a_fork": true,
    "comments": [
      "Note, that the PR will get squashed and the commit message on the main branch will be the description of the PR. So consider improving the wording/layout there.\r\n\r\nThat said, I like PRs being submitted as a way to spark the discussion, it's not rude at all. It's sometimes really nice to discuss something concrete. So thank you for doing just that!",
      "PR message updated - removed the note and kept lines down to ~72 chars.\r\n\r\n> I like PRs being submitted as a way to spark the discussion, it's not rude at all. It's sometimes really nice to discuss something concrete. So thank you for doing just that!\r\n\r\nYou're welcome! Some people like it, others hate it haha. Personally I also find it nice to discuss something concrete.",
      "I see that the `CHANGELOG.md` did not get updated when merging this PR. Would one of you be willing to create a followup PR to add the a short snippet about the new features? Something like:\r\n```\r\nAdded:\r\n* (gazelle) Added a new `python_visibility` directive to control visibility of\r\n  generated targets to allow sharing of targets between trees with different\r\n  `python_root` values.\r\n```\r\n\r\nI am not sure if I worded it well enough, so feel free to improve upon in!",
      "Ah sorry. I'll do that tonight. I thought it was automatic as part of the\r\nConventional Commits.\r\n\r\nOn Tue, Mar 12, 2024, 18:04 Ignas Anikevicius ***@***.***>\r\nwrote:\r\n\r\n> I see that the CHANGELOG.md did not get updated when merging this PR.\r\n> Would one of you be willing to create a followup PR to add the a short\r\n> snippet about the new features? Something like:\r\n>\r\n> Added:\r\n> * (gazelle) Added a new `python_visibility` directive to control visibility of\r\n>   generated targets to allow sharing of targets between trees with different\r\n>   `python_root` values.\r\n>\r\n> I am not sure if I worded it well enough, so feel free to improve upon in!\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bazelbuild/rules_python/pull/1784#issuecomment-1992909171>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ABJDFEJYNHQOWDXISSUZEWLYX6QZVAVCNFSM6AAAAABD42DP26VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSOJSHEYDSMJXGE>\r\n> .\r\n> You are receiving this because you modified the open/close state.Message\r\n> ID: ***@***.***>\r\n>\r\n"
    ],
    "commit_messages": [
      "feat(gazelle): Add \"python_visibility\" directive that appends additional visibility labels (#1784)\n\nFixes #1783.\n\nAdd a new gazelle directive, `python_visibility`, that allows\nusers to add labels to the `visibility` attribute of generated targets.\nout by the way, hence this PR), I noticed that the docs were a little\nThis directive acts similar to[^1] the [`go_visibility`\ndirective](https://github.com/bazelbuild/bazel-gazelle#directives).\n\nThe primary use case is for python projects that separate unit test\nfiles from the python packages/modules that they test, like so:\n\n```\npackaging_tutorial/\n├── LICENSE\n├── pyproject.toml\n├── README.md\n├── src/\n│   └── mypackage/\n│       ├── __init__.py\n│       └── foo.py\n└── tests/\n    ├── __init__.py\n    └── test_foo.py\n```\n\nA future PR will add an example to the `./examples` directory (issue\n#1775).\n\n[^1]: At least, similar based on docs. I haven't done any actual\ncomparison."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210125ac254a19ac28f47c",
    "number": 1782,
    "body": "While figuring out how to use gazelle with a `src` dir (see https://github.com/bazelbuild/rules_python/issues/1775) (I figured it out by the way, hence this PR), I noticed that the docs were a little unclear.\r\n\r\nThis PR updates the `gazelle` docs to include details about the `python_root` directive and how to use it.\r\n\r\nI also fix a the default value for the\r\n`python_generation_mode_per_file_include_init` directive, as it was incorrectly listed as \"package\".",
    "head_branch": "gazelle-doc-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs(gazelle): Add details about python_root directive. (#1782)\n\nWhile figuring out how to use gazelle with a `src` dir (see\nhttps://github.com/bazelbuild/rules_python/issues/1775) (I figured it\nout by the way, hence this PR), I noticed that the docs were a little\nunclear.\n\nThis PR updates the `gazelle` docs to include details about the\n`python_root` directive and how to use it.\n\nI also fix a the default value for the\n`python_generation_mode_per_file_include_init` directive, as it was\nincorrectly listed as \"package\"."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210125ac254a19ac28f47d",
    "number": 1781,
    "body": "Updates versions:\r\n\r\n* 3.11.7 -> 3.11.8\r\n* 3.12.1 -> 3.12.2\r\n\r\nAdds python versions: 3.11.8, 3.12.2",
    "head_branch": "add-python-3.12.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: add python 3.12.2, 3.11.8 toolchain (#1781)\n\nUpdates versions:\n\n* 3.11.7 -> 3.11.8\n* 3.12.1 -> 3.12.2\n\nAdds python versions: 3.11.8, 3.12.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210126ac254a19ac28f47e",
    "number": 1780,
    "body": "This patch is an experiment for setting up `sys.path` inside\r\nthe final Python process instead of letting the runtime do it\r\nvia PYTHONPATH.\r\n\r\nThe motivation here is to address these 2 issues:\r\n* #382 \r\n* #792 \r\n\r\nTry it with:\r\n```\r\n$ bazel run //tools:wheelmaker -- --help\r\n```\r\nLook at the generated files.",
    "head_branch": "unreviewed/philsc/no-pythonpath",
    "is_a_fork": true,
    "comments": [
      "Do you think it would help #1174 as well?",
      "> Do you think it would help #1174 as well?\r\n\r\nNot as-is, no. But I think it _could_. In the `python/private/common/entrypoint.tmpl.py` file we could add an import hook that tries to resolve imports with the repository name.",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\"",
      "hmm, I noticed this was closed without merging. any reason why? we are hitting this in our repo and would love to contribute to a proper fix. @philsc @rickeylev ",
      "The solution using the script bootstrap and making it the default is in #2521. See our official docs config settings page on how to enable it in the meantime."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210127ac254a19ac28f47f",
    "number": 1779,
    "body": "Fixes \"Error in format: Missing argument 'path'\" error and correctly templates the binary name and `PATH`.\r\n\r\n```\r\n(17:54:57) ERROR: /Users/jesses/work/canva/WORKSPACE:120:17: fetching whl_library rule //external:pypi_jsmin: Traceback (most recent call last):\r\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/pip_install/pip_repository.bzl\", line 783, column 59, in _whl_library_impl\r\n\t\tenvironment = _create_repository_execution_environment(rctx, python_interpreter)\r\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/pip_install/pip_repository.bzl\", line 257, column 47, in _create_repository_execution_environment\r\n\t\tcppflags.extend(_get_xcode_location_cflags(rctx))\r\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/pip_install/pip_repository.bzl\", line 121, column 46, in _get_xcode_location_cflags\r\n\t\targuments = [repo_utils.which_checked(rctx, \"xcode-select\"), \"--print-path\"],\r\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/private/repo_utils.bzl\", line 164, column 39, in _which_checked\r\n\t\t\"  PATH = {path}\".format(rctx.os.environ.get(\"PATH\"))))\r\nError in format: Missing argument 'path'\r\n```\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(internal): correctly template error message in repository rules (#1779)\n\nFixes \"Error in format: Missing argument 'path'\" error and correctly\ntemplates the binary name and `PATH`.\n\n```\n(17:54:57) ERROR: /Users/jesses/work/canva/WORKSPACE:120:17: fetching whl_library rule //external:pypi_jsmin: Traceback (most recent call last):\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/pip_install/pip_repository.bzl\", line 783, column 59, in _whl_library_impl\n\t\tenvironment = _create_repository_execution_environment(rctx, python_interpreter)\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/pip_install/pip_repository.bzl\", line 257, column 47, in _create_repository_execution_environment\n\t\tcppflags.extend(_get_xcode_location_cflags(rctx))\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/pip_install/pip_repository.bzl\", line 121, column 46, in _get_xcode_location_cflags\n\t\targuments = [repo_utils.which_checked(rctx, \"xcode-select\"), \"--print-path\"],\n\tFile \"/private/var/tmp/_bazel_jesses/06c990151bb0d0bcaaf7ea85520191a3/external/rules_python/python/private/repo_utils.bzl\", line 164, column 39, in _which_checked\n\t\t\"  PATH = {path}\".format(rctx.os.environ.get(\"PATH\"))))\nError in format: Missing argument 'path'\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210128ac254a19ac28f480",
    "number": 1776,
    "body": "This feature adds two new providers (`PyRequirementInfo` and `PyRequirementsInfo`) to `py_wheel.bzl`.\r\n\r\nDownstream users can use these Providers to supply additional requirement specifiers to the generated wheel metadata.\r\n\r\nThe use case is that we'd like wheels to contain files limited to transitive dependencies *not including* those which are available from pypi directly.  If we use `py_package` out of the box, we get \"fat wheels\" that contain too many files (all of `protobuf`, for example).  Rather, we'd like to be able to have our own \"thinner\" implementation of `py_package` that filters protobuf out, but also include `Requires-Dist: protobuf>=4.25.2` in the wheel metadata.\r\n\r\nThis is similar but more limited in scope than #1182.",
    "head_branch": "pcj/py_wheel_requires_dist",
    "is_a_fork": true,
    "comments": [
      "Example `py_project` rule that demonstrates usage:\r\n\r\n```bazel\r\n\"Implementation of py_package rule\"\r\n\r\nload(\"@rules_python//python:packaging.bzl\", \"PyRequrirementInfo\", \"PyRequrirementsInfo\")\r\n\r\nPYPI_LOCK_PREFIX = \"../pypi/_lock/\"\r\n\r\ndef _py_package_impl(ctx):\r\n    inputs = depset(\r\n        transitive = [dep[DefaultInfo].data_runfiles.files for dep in ctx.attr.deps] +\r\n                     [dep[DefaultInfo].default_runfiles.files for dep in ctx.attr.deps],\r\n    )\r\n\r\n    files = []\r\n    requirements = []\r\n\r\n    for input_file in inputs.to_list():\r\n        filename = input_file.short_path\r\n        if filename.startswith(PYPI_LOCK_PREFIX):\r\n            filename = filename[len(PYPI_LOCK_PREFIX):]\r\n            name, version = filename.split(\"@\")\r\n            if name and version:\r\n                requirements.append(PyRequrirementInfo(\r\n                    name = name,\r\n                    version = version,\r\n                    specifier = \"%s>=%s\" % (name, version),\r\n                ))\r\n        else:\r\n            files.append(input_file)\r\n\r\n    return [\r\n        DefaultInfo(\r\n            files = depset(direct = files),\r\n        ),\r\n        PyRequrirementsInfo(\r\n            label = ctx.label,\r\n            requirements = requirements,\r\n        ),\r\n    ]\r\n\r\npy_package = rule(\r\n    doc = \"\"\"\\\r\nA rule to select all files in transitive dependencies of deps which\r\nbelong to given set of Python packages.\r\n\r\nThis rule is intended to be used as data dependency to py_wheel rule.\r\n\"\"\",\r\n    implementation = _py_package_impl,\r\n    attrs = {\r\n        \"deps\": attr.label_list(\r\n            doc = \"\",\r\n        ),\r\n    },\r\n)\r\n```\r\n\r\n> The `_lock/` prefix is specific to https://github.com/jvolkman/rules_pycross",
      "I like the idea but was wondering if the py_project rule should be part of the rules_python, at least as an example if we are not sure that we want to increase the API surface we are maintaining. What do you think, @pcj?",
      "I'm happy to include it, perhaps under a directory like `examples/pycross_project/` since this particular implementation is specific to `rules_pycross`?\r\n\r\ncc @jvolkman ",
      "> I'm happy to include it, perhaps under a directory like `examples/pycross_project/` since this particular implementation is specific to `rules_pycross`?\r\n> \r\n> cc @jvolkman\r\n\r\nNot sure it makes sense to have this example in rules_python as written, with dependencies on `_lock` (a sort-of-implementation-detail, although it's described in a [comment](https://github.com/jvolkman/rules_pycross/blob/main/pycross/private/package_repo.bzl#L8-L9)) and `pypi` (a user-specified repo name).\r\n\r\nCould the example be retooled to rely only on stuff in rules_python?",
      "Added `examples/custom_py_project/`\r\n\r\n",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210129ac254a19ac28f481",
    "number": 1773,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 41.0.7 to 42.0.4.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>42.0.4 - 2024-02-20</p>\n<pre><code>\n* Fixed a null-pointer-dereference and segfault that could occur when creating\n  a PKCS#12 bundle. Credit to **Alexander-Programming** for reporting the\n  issue. **CVE-2024-26130**\n* Fixed ASN.1 encoding for PKCS7/SMIME signed messages. The fields ``SMIMECapabilities``\n  and ``SignatureAlgorithmIdentifier`` should now be correctly encoded according to the\n  definitions in :rfc:`2633` :rfc:`3370`.\n<p>.. _v42-0-3:</p>\n<p>42.0.3 - 2024-02-15\n</code></pre></p>\n<ul>\n<li>Fixed an initialization issue that caused key loading failures for some\nusers.</li>\n</ul>\n<p>.. _v42-0-2:</p>\n<p>42.0.2 - 2024-01-30</p>\n<pre><code>\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.1.\n* Fixed an issue that prevented the use of Python buffer protocol objects in\n  ``sign`` and ``verify`` methods on asymmetric keys.\n* Fixed an issue with incorrect keyword-argument naming with ``EllipticCurvePrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.exchange`,\n  ``X25519PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.exchange`,\n  ``X448PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.exchange`,\n  and ``DHPrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.exchange`.\n<p>.. _v42-0-1:</p>\n<p>42.0.1 - 2024-01-24\n</code></pre></p>\n<ul>\n<li>Fixed an issue with incorrect keyword-argument naming with <code>EllipticCurvePrivateKey</code>\n:meth:<code>~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.sign</code>.</li>\n<li>Resolved compatibility issue with loading certain RSA public keys in\n:func:<code>~cryptography.hazmat.primitives.serialization.load_pem_public_key</code>.</li>\n</ul>\n<p>.. _v42-0-0:</p>\n<p>42.0.0 - 2024-01-22</p>\n<pre><code>\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/fe18470f7d05f963e7267e34fdf985d81ea6ceea\"><code>fe18470</code></a> Bump for 42.0.4 release (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10445\">#10445</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/aaa2dd06ed470695de818405a982d4c459869803\"><code>aaa2dd0</code></a> Fix ASN.1 issues in PKCS#7 and S/MIME signing (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10373\">#10373</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10442\">#10442</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7a4d012991061974da5d9cb7614de65eac94f49b\"><code>7a4d012</code></a> Fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10422\">#10422</a> -- don't crash when a PKCS#12 key and cert don't match (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10423\">#10423</a>) ...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/df314bb182bdfd661333969a94325e4680d785f6\"><code>df314bb</code></a> backport actions m1 switch to 42.0.x (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10415\">#10415</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/c49a7a5271178c6e8ef36fa1c499f62c63ec19b9\"><code>c49a7a5</code></a> changelog and version bump for 42.0.3 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10396\">#10396</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/396bcf64c5be826ec00e7d7f45838c858c049cbc\"><code>396bcf6</code></a> fix provider loading take two (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10390\">#10390</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10395\">#10395</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/0e0e46f5f73f477b8ee9682738c42129d5d60177\"><code>0e0e46f</code></a> backport: initialize openssl's legacy provider in rust (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10323\">#10323</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10333\">#10333</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/2202123b50de1b8788f909a3e5afe350c56ad81e\"><code>2202123</code></a> changelog and version bump 42.0.2 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10268\">#10268</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/f7032bdd409838f67fc2b93343f897fb5f397d80\"><code>f7032bd</code></a> bump openssl in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10298\">#10298</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10299\">#10299</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/002e886f16d8857151c09b11dc86b35f2ac9aec3\"><code>002e886</code></a> Fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10294\">#10294</a> -- correct accidental change to exchange kwarg (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10295\">#10295</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10296\">#10296</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/41.0.7...42.0.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=41.0.7&new-version=42.0.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/tests/dupe_requirements/cryptography-42.0.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012aac254a19ac28f482",
    "number": 1772,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 41.0.6 to 42.0.4.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>42.0.4 - 2024-02-20</p>\n<pre><code>\n* Fixed a null-pointer-dereference and segfault that could occur when creating\n  a PKCS#12 bundle. Credit to **Alexander-Programming** for reporting the\n  issue. **CVE-2024-26130**\n* Fixed ASN.1 encoding for PKCS7/SMIME signed messages. The fields ``SMIMECapabilities``\n  and ``SignatureAlgorithmIdentifier`` should now be correctly encoded according to the\n  definitions in :rfc:`2633` :rfc:`3370`.\n<p>.. _v42-0-3:</p>\n<p>42.0.3 - 2024-02-15\n</code></pre></p>\n<ul>\n<li>Fixed an initialization issue that caused key loading failures for some\nusers.</li>\n</ul>\n<p>.. _v42-0-2:</p>\n<p>42.0.2 - 2024-01-30</p>\n<pre><code>\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.1.\n* Fixed an issue that prevented the use of Python buffer protocol objects in\n  ``sign`` and ``verify`` methods on asymmetric keys.\n* Fixed an issue with incorrect keyword-argument naming with ``EllipticCurvePrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.exchange`,\n  ``X25519PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.exchange`,\n  ``X448PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.exchange`,\n  and ``DHPrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.exchange`.\n<p>.. _v42-0-1:</p>\n<p>42.0.1 - 2024-01-24\n</code></pre></p>\n<ul>\n<li>Fixed an issue with incorrect keyword-argument naming with <code>EllipticCurvePrivateKey</code>\n:meth:<code>~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.sign</code>.</li>\n<li>Resolved compatibility issue with loading certain RSA public keys in\n:func:<code>~cryptography.hazmat.primitives.serialization.load_pem_public_key</code>.</li>\n</ul>\n<p>.. _v42-0-0:</p>\n<p>42.0.0 - 2024-01-22</p>\n<pre><code>\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/fe18470f7d05f963e7267e34fdf985d81ea6ceea\"><code>fe18470</code></a> Bump for 42.0.4 release (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10445\">#10445</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/aaa2dd06ed470695de818405a982d4c459869803\"><code>aaa2dd0</code></a> Fix ASN.1 issues in PKCS#7 and S/MIME signing (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10373\">#10373</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10442\">#10442</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7a4d012991061974da5d9cb7614de65eac94f49b\"><code>7a4d012</code></a> Fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10422\">#10422</a> -- don't crash when a PKCS#12 key and cert don't match (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10423\">#10423</a>) ...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/df314bb182bdfd661333969a94325e4680d785f6\"><code>df314bb</code></a> backport actions m1 switch to 42.0.x (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10415\">#10415</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/c49a7a5271178c6e8ef36fa1c499f62c63ec19b9\"><code>c49a7a5</code></a> changelog and version bump for 42.0.3 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10396\">#10396</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/396bcf64c5be826ec00e7d7f45838c858c049cbc\"><code>396bcf6</code></a> fix provider loading take two (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10390\">#10390</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10395\">#10395</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/0e0e46f5f73f477b8ee9682738c42129d5d60177\"><code>0e0e46f</code></a> backport: initialize openssl's legacy provider in rust (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10323\">#10323</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10333\">#10333</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/2202123b50de1b8788f909a3e5afe350c56ad81e\"><code>2202123</code></a> changelog and version bump 42.0.2 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10268\">#10268</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/f7032bdd409838f67fc2b93343f897fb5f397d80\"><code>f7032bd</code></a> bump openssl in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10298\">#10298</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10299\">#10299</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/002e886f16d8857151c09b11dc86b35f2ac9aec3\"><code>002e886</code></a> Fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10294\">#10294</a> -- correct accidental change to exchange kwarg (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10295\">#10295</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10296\">#10296</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/41.0.6...42.0.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=41.0.6&new-version=42.0.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/cryptography-42.0.4",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012aac254a19ac28f483",
    "number": 1771,
    "body": "The `python-build-standalone.readthedocs.io` site seems to be dead.\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs(getting-started): fix link to python-build-standalone quirks (#1771)\n\nThe `python-build-standalone.readthedocs.io` site seems to be dead.\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012bac254a19ac28f484",
    "number": 1770,
    "body": null,
    "head_branch": "arm",
    "is_a_fork": true,
    "comments": [
      "I'm not sure what the intended behavior is here. I've compiled a python toolchain for armv7 which works totally fine in my environment but `rules_python` gets mad at me for describing a platform that it doesn't currently know about. I would love to be able to inform the rules but I don't really know how to go about that. I get that this platform is not currently defined since it's not otherwise available like the rest of the toolchains but this restriction gates me from developing on new platforms. I figured I'd try to open this PR and see what maintainers say so I know if I need to live with a \"forever\" patch or if there's a worthy contribution to be made.",
      "I think this is in the right direction. From what I remember, I think that `PLATFORMS` variable is used to generate the urls to download and the repo names?\r\n\r\nIn general I'd love it if we didn't have to keep an enumerated list of platforms around.\r\n\r\n> but rules_python gets mad at me for describing a platform that it doesn't currently know about.\r\n\r\nCan you explain this part a bit more? I was going to merge this PR, but this comment makes it sound like, while CI is passing, you are seeing errors elsewhere, something that CI isn't covering?\r\n\r\nI think when we added...I think it was the apple arm platform? Most of the issues of having a platform entry in there that didn't have a corresponding _thing_ (url? repo?) were flushed out. Could always be more.\r\n\r\n> I've compiled a python toolchain for armv7\r\n\r\nNice! So that must mean you're manually defining py_runtime(), toolchain() etc to wire it into the rest of things? Does this mean you'd be interested in something like `python.local_toolchain(path=\"/path/to/my/runtime\")` in MODULE.bazel?",
      "@UebelAndre , could you please paste the error you get without this PR? Maybe we are only fixing the symptom if we add the linux arm constant to the platforms, that said, I am fine to have the real fix in a followup PR if the the change may become too invasive.",
      "> @UebelAndre , could you please paste the error you get without this PR? Maybe we are only fixing the symptom if we add the linux arm constant to the platforms, that said, I am fine to have the real fix in a followup PR if the the change may become too invasive.\r\n\r\nWithout this patch I run into\r\n```\r\nERROR: /home/user/Code/WORKSPACE.bazel:107:18: //external:python_3_10_armv7-unknown-linux-gnu: invalid value in 'platform' attribute: has to be one of 'aarch64-apple-darwin', 'aarch64-unknown-linux-gnu', 'ppc64le-unknown-linux-gnu', 's390x-unknown-linux-gnu', 'x86_64-apple-darwin', 'x86_64-pc-windows-msvc' or 'x86_64-unknown-linux-gnu' instead of 'armv7-unknown-linux-gnu'\r\nERROR: Error computing the main repository mapping: at /home/user/Code/tools/python/pip_deps.bzl:3:6: Encountered error while reading extension file '3.10/defs.bzl': no such package '@@python//3.10': error loading package 'external': Could not load //external package\r\n```\r\nWhen I add the following to my WORKSPACE file\r\n```starlark\r\npython_repository(\r\n    name = \"python_3_10_armv7-unknown-linux-gnu\",\r\n    platform = \"armv7-unknown-linux-gnu\",\r\n    python_version = \"3.10\",\r\n    release_filename = \"cpython-3.10-armv7-unknown-linux-gnueabihf-noopt.tar.gz\",\r\n    sha256 = \"4d5d44c0b25c6a1605be503e032be384e1472ba704536b7257459399e305be51\",\r\n    strip_prefix = \"python\",\r\n    urls = [\"https://python.tar.gz\"],\r\n)\r\n```",
      "> Can you explain this part a bit more? I was going to merge this PR, but this comment makes it sound like, while CI is passing, you are seeing errors elsewhere, something that CI isn't covering?\r\n\r\nI was referring to the error here: https://github.com/bazelbuild/rules_python/pull/1770#issuecomment-1967079750",
      "> Nice! So that must mean you're manually defining py_runtime(), toolchain() etc to wire it into the rest of things? Does this mean you'd be interested in something like `python.local_toolchain(path=\"/path/to/my/runtime\")` in MODULE.bazel?\r\n\r\nNo, I structured my artifact to be similar to https://github.com/indygreg/python-build-standalone, so I'm not really manually defining anything, just trying to use the existing plumbing like what I described on https://github.com/bazelbuild/rules_python/pull/1770#issuecomment-1967079750",
      "It looks like the `platform` is not used for anything but checking if `windows` is in the platform string, which suspects me that we could potentially remove the keyed attribute. I understand that it would be then basically unkeyed free-form string, but I don't think if having something like this is sustainable in the long run either. Maybe having an `os`, `cpu`, `libc` triplet could be a better choice?",
      "I am inclined to just merge this as is as this improves the compatibility. Any objections @rickeylev?",
      "> I am inclined to just merge this as is as this improves the compatibility. Any objections @rickeylev?\r\n\r\nDoes this mean no objections? 😅 ",
      "Could you please rebase? I think the changelog would be weirdly formatted if we merge as is.",
      "> Could you please rebase? I think the changelog would be weirdly formatted if we merge as is.\r\n\r\n@aignas done!"
    ],
    "commit_messages": [
      "feat(toolchains): Add armv7 linux platform to available toolchain platforms (#1770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012cac254a19ac28f485",
    "number": 1769,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 41.0.7 to 42.0.2.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>42.0.2 - 2024-01-30</p>\n<pre><code>\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.1.\n* Fixed an issue that prevented the use of Python buffer protocol objects in\n  ``sign`` and ``verify`` methods on asymmetric keys.\n* Fixed an issue with incorrect keyword-argument naming with ``EllipticCurvePrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.exchange`,\n  ``X25519PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.exchange`,\n  ``X448PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.exchange`,\n  and ``DHPrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.exchange`.\n<p>.. _v42-0-1:</p>\n<p>42.0.1 - 2024-01-24\n</code></pre></p>\n<ul>\n<li>Fixed an issue with incorrect keyword-argument naming with <code>EllipticCurvePrivateKey</code>\n:meth:<code>~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.sign</code>.</li>\n<li>Resolved compatibility issue with loading certain RSA public keys in\n:func:<code>~cryptography.hazmat.primitives.serialization.load_pem_public_key</code>.</li>\n</ul>\n<p>.. _v42-0-0:</p>\n<p>42.0.0 - 2024-01-22</p>\n<pre><code>\n* **BACKWARDS INCOMPATIBLE:** Dropped support for LibreSSL &lt; 3.7.\n* **BACKWARDS INCOMPATIBLE:** Loading a PKCS7 with no content field using\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n  or\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n  will now raise a ``ValueError`` rather than return an empty list.\n* Parsing SSH certificates no longer permits malformed critical options with\n  values, as documented in the 41.0.2 release notes.\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.0.\n* Updated the minimum supported Rust version (MSRV) to 1.63.0, from 1.56.0.\n* We now publish both ``py37`` and ``py39`` ``abi3`` wheels. This should\n  resolve some errors relating to initializing a module multiple times per\n  process.\n* Support :class:`~cryptography.hazmat.primitives.asymmetric.padding.PSS` for\n  X.509 certificate signing requests and certificate revocation lists with the\n  keyword-only argument ``rsa_padding`` on the ``sign`` methods for\n  :class:`~cryptography.x509.CertificateSigningRequestBuilder` and\n  :class:`~cryptography.x509.CertificateRevocationListBuilder`.\n* Added support for obtaining X.509 certificate signing request signature\n  algorithm parameters (including PSS) via\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/2202123b50de1b8788f909a3e5afe350c56ad81e\"><code>2202123</code></a> changelog and version bump 42.0.2 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10268\">#10268</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/f7032bdd409838f67fc2b93343f897fb5f397d80\"><code>f7032bd</code></a> bump openssl in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10298\">#10298</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10299\">#10299</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/002e886f16d8857151c09b11dc86b35f2ac9aec3\"><code>002e886</code></a> Fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10294\">#10294</a> -- correct accidental change to exchange kwarg (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10295\">#10295</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10296\">#10296</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/92fa9f2f606caea5d499c825e832be5bac6f0c23\"><code>92fa9f2</code></a> support bytes-like consistently across our asym sign/verify APIs (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10260\">#10260</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/1\">#1</a>...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/6478f7e28be54b51931277235de01b249ceabd96\"><code>6478f7e</code></a> explicitly support bytes-like for signature/data in RSA sign/verify (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10259\">#10259</a>) ...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/4bb8596ae02d95bb054dbcf55e8771379dbe0c19\"><code>4bb8596</code></a> fix the release script (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10233\">#10233</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10254\">#10254</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/337437dc2e62772bde4ad5544f4b1db9ee7572d9\"><code>337437d</code></a> 42.0.1 bump (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10252\">#10252</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/56255de6b2d1a2d2e502b0275231ca81907f33f1\"><code>56255de</code></a> allow SPKI RSA keys to be parsed even if they have an incorrect delimiter (<a href=\"https://redirect.github.com/pyca/cryptography/issues/1\">#1</a>...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/12f038b38af76e36efe8cef09597010c97647e8f\"><code>12f038b</code></a> fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10237\">#10237</a> -- correct EC sign parameter name (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10239\">#10239</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10240\">#10240</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/4e64baf360a3a89bd92582f59344c12b5c0bd3fd\"><code>4e64baf</code></a> 42.0.0 version bump (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10232\">#10232</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/41.0.7...42.0.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=41.0.7&new-version=42.0.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/tests/dupe_requirements/cryptography-42.0.2",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1773."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012dac254a19ac28f486",
    "number": 1768,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 41.0.6 to 42.0.2.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>42.0.2 - 2024-01-30</p>\n<pre><code>\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.1.\n* Fixed an issue that prevented the use of Python buffer protocol objects in\n  ``sign`` and ``verify`` methods on asymmetric keys.\n* Fixed an issue with incorrect keyword-argument naming with ``EllipticCurvePrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.exchange`,\n  ``X25519PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.exchange`,\n  ``X448PrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey.exchange`,\n  and ``DHPrivateKey``\n  :meth:`~cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey.exchange`.\n<p>.. _v42-0-1:</p>\n<p>42.0.1 - 2024-01-24\n</code></pre></p>\n<ul>\n<li>Fixed an issue with incorrect keyword-argument naming with <code>EllipticCurvePrivateKey</code>\n:meth:<code>~cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey.sign</code>.</li>\n<li>Resolved compatibility issue with loading certain RSA public keys in\n:func:<code>~cryptography.hazmat.primitives.serialization.load_pem_public_key</code>.</li>\n</ul>\n<p>.. _v42-0-0:</p>\n<p>42.0.0 - 2024-01-22</p>\n<pre><code>\n* **BACKWARDS INCOMPATIBLE:** Dropped support for LibreSSL &lt; 3.7.\n* **BACKWARDS INCOMPATIBLE:** Loading a PKCS7 with no content field using\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n  or\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n  will now raise a ``ValueError`` rather than return an empty list.\n* Parsing SSH certificates no longer permits malformed critical options with\n  values, as documented in the 41.0.2 release notes.\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.0.\n* Updated the minimum supported Rust version (MSRV) to 1.63.0, from 1.56.0.\n* We now publish both ``py37`` and ``py39`` ``abi3`` wheels. This should\n  resolve some errors relating to initializing a module multiple times per\n  process.\n* Support :class:`~cryptography.hazmat.primitives.asymmetric.padding.PSS` for\n  X.509 certificate signing requests and certificate revocation lists with the\n  keyword-only argument ``rsa_padding`` on the ``sign`` methods for\n  :class:`~cryptography.x509.CertificateSigningRequestBuilder` and\n  :class:`~cryptography.x509.CertificateRevocationListBuilder`.\n* Added support for obtaining X.509 certificate signing request signature\n  algorithm parameters (including PSS) via\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/2202123b50de1b8788f909a3e5afe350c56ad81e\"><code>2202123</code></a> changelog and version bump 42.0.2 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10268\">#10268</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/f7032bdd409838f67fc2b93343f897fb5f397d80\"><code>f7032bd</code></a> bump openssl in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10298\">#10298</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10299\">#10299</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/002e886f16d8857151c09b11dc86b35f2ac9aec3\"><code>002e886</code></a> Fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10294\">#10294</a> -- correct accidental change to exchange kwarg (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10295\">#10295</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10296\">#10296</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/92fa9f2f606caea5d499c825e832be5bac6f0c23\"><code>92fa9f2</code></a> support bytes-like consistently across our asym sign/verify APIs (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10260\">#10260</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/1\">#1</a>...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/6478f7e28be54b51931277235de01b249ceabd96\"><code>6478f7e</code></a> explicitly support bytes-like for signature/data in RSA sign/verify (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10259\">#10259</a>) ...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/4bb8596ae02d95bb054dbcf55e8771379dbe0c19\"><code>4bb8596</code></a> fix the release script (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10233\">#10233</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10254\">#10254</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/337437dc2e62772bde4ad5544f4b1db9ee7572d9\"><code>337437d</code></a> 42.0.1 bump (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10252\">#10252</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/56255de6b2d1a2d2e502b0275231ca81907f33f1\"><code>56255de</code></a> allow SPKI RSA keys to be parsed even if they have an incorrect delimiter (<a href=\"https://redirect.github.com/pyca/cryptography/issues/1\">#1</a>...</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/12f038b38af76e36efe8cef09597010c97647e8f\"><code>12f038b</code></a> fixes <a href=\"https://redirect.github.com/pyca/cryptography/issues/10237\">#10237</a> -- correct EC sign parameter name (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10239\">#10239</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10240\">#10240</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/4e64baf360a3a89bd92582f59344c12b5c0bd3fd\"><code>4e64baf</code></a> 42.0.0 version bump (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10232\">#10232</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/41.0.6...42.0.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=41.0.6&new-version=42.0.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/cryptography-42.0.2",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1772."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012eac254a19ac28f487",
    "number": 1766,
    "body": "Removes the `site-packages` path segment in unpacked external dependency installs.\r\n\r\nThis additional path segment causes issues when dealing with very large dependency trees, so much so that the value of `PYTHONPATH` exceeds the OS limit of what can be set. \r\n\r\nThis manifests due to the Python binary launcher adding workspace roots automatically to sys path, in addition to the `site-packages` segmented path, ie the `PYTHONPATH` var will end up with both (from printing the `PYTHONPATH` in `examples/pip_parse` in rules_python.\r\n\r\nBefore:\r\n```\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_certifi/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_chardet/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_idna/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_urllib3/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_requests/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_alabaster/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_babel/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_docutils/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_imagesize/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_zipp/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_importlib_metadata/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_markupsafe/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_jinja2/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_packaging/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_pygments/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_snowballstemmer/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_jsmath/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinx/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_serializinghtml/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_qthelp/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_htmlhelp/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_devhelp/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_applehelp/site-packages\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/_main\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_alabaster\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_babel\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_certifi\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_chardet\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_docutils\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_idna\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_imagesize\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_importlib_metadata\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_jinja2\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_markupsafe\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_packaging\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_pygments\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_requests\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_snowballstemmer\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinx\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_applehelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_devhelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_htmlhelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_jsmath\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_qthelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_serializinghtml\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_urllib3\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_zipp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~python~python_3_9_aarch64-apple-darwin\r\n```\r\n\r\nAfter:\r\n```\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_certifi\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_chardet\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_idna\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_urllib3\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_requests\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_alabaster\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_babel\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_docutils\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_imagesize\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_zipp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_importlib_metadata\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_markupsafe\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_jinja2\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_packaging\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_pygments\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_snowballstemmer\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_jsmath\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinx\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_serializinghtml\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_qthelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_htmlhelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_devhelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~pip~pypi_39_sphinxcontrib_applehelp\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/_main\r\n/private/var/tmp/_bazel_matt/3cf6080de036ce65f48725921520350e/execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/main.runfiles/rules_python~override~python~python_3_9_aarch64-apple-darwin\r\n```\r\n\r\nIn large graphs, this increase in env var length results in a catastrophic failure:\r\n\r\n```\r\n[REDACTED] line 374, in _RunExecv\r\n    os.execv(python_program, [python_program, main_filename] + args)\r\n\r\nOSError: [Errno 7] Argument list too long: /[REDACTED]/python3_9_x86_64-unknown-linux-gnu/bin/python3'\r\n```\r\n\r\nWhile this behaviour is possible to toggle via `--experimental_python_import_all_repositories`, there are a large number of dependencies that expect these roots to be available (runfiles for example iirc).",
    "head_branch": "no_site_packages",
    "is_a_fork": false,
    "comments": [
      "I am not sure if changing this won't have any unintended consequences. I've linked a few tickets here:\r\n1. People may depend on `site-packages` being present in the path. See the PR and the `rules_oci` example for splitting packages by layer in https://github.com/aspect-build/bazel-examples/blob/main/oci_python_image/py_layer.bzl#L14.\r\n2. The entries in the `PYTHONPATH` having the top level folder of `site-packages` is much better than `<whatever bzlmod layout currently is>` as the later might have extra characters that don't play nice with the `PYTHONPATH` spec. Maybe the solution could be to use `rules_py` way of constructing a `venv` but it sounds like a very invasive chaneg.\r\n\r\nProbably there are more things, but these are the only that come to my head right now.",
      "+1 to `site-packages` being a conventional stable path component, as in standard virtualenv and other interpreter deployments. I own machinery which relies on this and this would be a breaking change to me. I'd rather see work which either bypassed `$PYTHONPATH` for setup entirely (see the current draft of having a manifest and a bootstrap shim that manipulates `sys.path` directly) or which provided for \"flattening\" files from many PyPi `site-package` trees into a single `site-package` tree for all 3rdparty deps. ",
      "re: backwards compatibility concerns: Yeah, these are valid concerns. I'm fine with putting this behind an environment variable to control behavior. This at least removes Matt having to carry a patch indefinitely until we can fix it and he can upgrade to Bazel 7. Then the envvar can just be a no-op and we can drop it.\r\n\r\nUnfortunately, due to support for Bazel 6.x, our options for addressing the problem of the long PYTHONPATH env var are pretty limited because we can't change the binary generation or bootstrapping in that version of Bazel. With Bazel 7, its a much more solvable problem, as we can now just modify the rules and bootstrap directly (patches welcome). Unfortunately, Matt's situation needs to support Bazel 6.x\r\n\r\nThe only other idea we've been able to come up with is to hide the deps/PyInfo from the binary by having a generated site.py-based target capture it and perform path manipulations. I don't think anyone has tried to implement it yet, though.\r\n\r\n>  I own machinery which relies on this\r\n\r\nCan you explain why it relies on it? There aren't any promises about the unpacked layout of the downloaded packages. The targets are the unit of abstraction.\r\n\r\n> see the current draft ...\r\n\r\nWhat draft is this referring to?",
      "> until he can fix it\r\n\r\nlol, oops, typo. I meant \"we\" as in the rules_python owners. Patches welcome, too, of course.",
      "Thanks for the context, I'm fine with this behaviour being gated under a feature flag.",
      "@mattem, should this PR be continued?",
      "Just adding a note that I think this will break anyone using the `py_layers` or `py_oci_image` macros from [here](https://github.com/aspect-build/bazel-examples/blob/main/oci_python_image/py_layer.bzl).",
      "Feel free to reopen PR later. Closing to clean things up."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012fac254a19ac28f488",
    "number": 1764,
    "body": "This allows the code outside to decide what default is.\r\nThis is needed when we have the same version but different constraint\r\nvalues as the logic where we use the 'default_version' breaks.\r\n\r\nNoticed that otherwise the wheel hub repo default part may be non-deterministic in #1744.",
    "head_branch": "internal/render-pkg-aliases-default",
    "is_a_fork": true,
    "comments": [
      "I'll close this for now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621012fac254a19ac28f489",
    "number": 1763,
    "body": "Bumps [flask](https://github.com/pallets/flask) from 2.2.2 to 2.2.5.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/flask/releases\">flask's releases</a>.</em></p>\n<blockquote>\n<h2>2.2.5</h2>\n<p>This is a security fix release for the 2.2.x release branch. Note that 2.3.x is the currently supported release branch; please upgrade to the latest version if possible.</p>\n<ul>\n<li>Security advisory: <a href=\"https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq\">https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq</a>, CVE-2023-30861</li>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-5\">https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-5</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/30?closed=1\">https://github.com/pallets/flask/milestone/30?closed=1</a></li>\n</ul>\n<h2>2.2.4</h2>\n<p>This is a fix release for the 2.2.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-4\">https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-4</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/27?closed=1\">https://github.com/pallets/flask/milestone/27?closed=1</a></li>\n</ul>\n<h2>2.2.3</h2>\n<p>This is a fix release for the 2.2.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-3\">https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/26?closed=1\">https://github.com/pallets/flask/milestone/26?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/flask/blob/main/CHANGES.rst\">flask's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 2.2.5</h2>\n<p>Released 2023-05-02</p>\n<ul>\n<li>Update for compatibility with Werkzeug 2.3.3.</li>\n<li>Set <code>Vary: Cookie</code> header when the session is accessed, modified, or refreshed.</li>\n</ul>\n<h2>Version 2.2.4</h2>\n<p>Released 2023-04-25</p>\n<ul>\n<li>Update for compatibility with Werkzeug 2.3.</li>\n</ul>\n<h2>Version 2.2.3</h2>\n<p>Released 2023-02-15</p>\n<ul>\n<li>Autoescape is enabled by default for <code>.svg</code> template files. :issue:<code>4831</code></li>\n<li>Fix the type of <code>template_folder</code> to accept <code>pathlib.Path</code>. :issue:<code>4892</code></li>\n<li>Add <code>--debug</code> option to the <code>flask run</code> command. :issue:<code>4777</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/flask/commit/47af817c8fe01045c641b97f8fb784c7ad864eee\"><code>47af817</code></a> release version 2.2.5</li>\n<li><a href=\"https://github.com/pallets/flask/commit/afd63b16170b7c047f5758eb910c416511e9c965\"><code>afd63b1</code></a> Merge pull request <a href=\"https://redirect.github.com/pallets/flask/issues/5109\">#5109</a> from pallets/backport-vary-cookie</li>\n<li><a href=\"https://github.com/pallets/flask/commit/8646edca6f47e2cd57464081b3911218d4734f8d\"><code>8646edc</code></a> set <code>Vary: Cookie</code> header consistently for session</li>\n<li><a href=\"https://github.com/pallets/flask/commit/a6367dac747c1e149c60767eee7e8aa9c281c58e\"><code>a6367da</code></a> Merge pull request <a href=\"https://redirect.github.com/pallets/flask/issues/5108\">#5108</a> from pallets/werkzeug-compat</li>\n<li><a href=\"https://github.com/pallets/flask/commit/3fbfbad79fe294918459b70eb409d555b20de2c8\"><code>3fbfbad</code></a> werkzeug 2.3.3 compatibility</li>\n<li><a href=\"https://github.com/pallets/flask/commit/726d3f4fa9e8a2960541debc2d2713571da54441\"><code>726d3f4</code></a> start version 2.2.5</li>\n<li><a href=\"https://github.com/pallets/flask/commit/ddc7accaa2e83b328f969c120af2ce0804876b4a\"><code>ddc7acc</code></a> Merge pull request <a href=\"https://redirect.github.com/pallets/flask/issues/5081\">#5081</a> from pallets/release-2.2.4</li>\n<li><a href=\"https://github.com/pallets/flask/commit/74e03298200e33951ca350a35aa3a8c0b4ff8177\"><code>74e0329</code></a> release version 2.2.4</li>\n<li><a href=\"https://github.com/pallets/flask/commit/2d460685b1b3d66c713739ee91183c22fb2e5dc8\"><code>2d46068</code></a> update dev env</li>\n<li><a href=\"https://github.com/pallets/flask/commit/64bc45874daf4b9828830ea0037a19beb8364ee3\"><code>64bc458</code></a> update dev dependencies</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/flask/compare/2.2.2...2.2.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=flask&package-manager=pip&previous-version=2.2.2&new-version=2.2.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/build_file_generation/flask-2.2.5",
    "is_a_fork": false,
    "comments": [
      "@dependabot rebase",
      "Looks like this PR has been edited by someone other than Dependabot. That means Dependabot can't rebase it - sorry!\n\nIf you're happy for Dependabot to recreate it from scratch, overwriting any edits, you can request `@dependabot recreate`.\n",
      "My experiment to have a GH action push back gazelle manifest changes back failed, it seems that we would require extra permissions from the workflow.\r\n\r\n@dependabot recreate",
      "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210130ac254a19ac28f48a",
    "number": 1762,
    "body": "Bumps [werkzeug](https://github.com/pallets/werkzeug) from 2.2.2 to 2.3.8.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/werkzeug/releases\">werkzeug's releases</a>.</em></p>\n<blockquote>\n<h2>2.3.8</h2>\n<p>This is a security release for the 2.3.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-8\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-8</a></li>\n</ul>\n<h2>2.3.7</h2>\n<p>This is a fix release for the 2.3.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-7\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-7</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/33?closed=1\">https://github.com/pallets/werkzeug/milestone/33?closed=1</a></li>\n</ul>\n<h2>2.3.6</h2>\n<p>This is a fix release for the 2.3.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-6\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-6</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/32?closed=1\">https://github.com/pallets/werkzeug/milestone/32?closed=1</a></li>\n</ul>\n<h2>2.3.5</h2>\n<p>This is a fix release for the 2.3.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-5\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-5</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/31?closed=1\">https://github.com/pallets/werkzeug/milestone/31?closed=1</a></li>\n</ul>\n<h2>2.3.4</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-4\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-4</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/30?closed=1\">https://github.com/pallets/werkzeug/milestone/30?closed=1</a></li>\n</ul>\n<h2>2.3.3</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-3\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/29?closed=1\">https://github.com/pallets/werkzeug/milestone/29?closed=1</a></li>\n</ul>\n<h2>2.3.2</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-2\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-2</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/28?closed=1\">https://github.com/pallets/werkzeug/milestone/28?closed=1</a></li>\n</ul>\n<h2>2.3.1</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-1\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-1</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/27?closed=1\">https://github.com/pallets/werkzeug/milestone/27?closed=1</a></li>\n</ul>\n<h2>2.3.0</h2>\n<p>This is a feature release, which includes new features, removes previously deprecated code, and adds new deprecations. The 2.3.x branch is now the supported fix branch, the 2.2.x branch will become a tag marking the end of support for that branch. We encourage everyone to upgrade, and to use a tool such as <a href=\"https://pypi.org/project/pip-tools/\">pip-tools</a> to pin all dependencies and control upgrades. Test with warnings treated as errors to be able to adapt to deprecation warnings early.</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/werkzeug/blob/main/CHANGES.rst\">werkzeug's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 2.3.8</h2>\n<p>Released 2023-11-08</p>\n<ul>\n<li>Fix slow multipart parsing for large parts potentially enabling DoS\nattacks. :cwe:<code>CWE-407</code></li>\n</ul>\n<h2>Version 2.3.7</h2>\n<p>Released 2023-08-14</p>\n<ul>\n<li>Use <code>flit_core</code> instead of <code>setuptools</code> as build backend.</li>\n<li>Fix parsing of multipart bodies. :issue:<code>2734</code></li>\n<li>Adjust index of last newline in data start. :issue:<code>2761</code></li>\n<li>Parsing ints from header values strips spacing first. :issue:<code>2734</code></li>\n<li>Fix empty file streaming when testing. :issue:<code>2740</code></li>\n<li>Clearer error message when URL rule does not start with slash. :pr:<code>2750</code></li>\n<li><code>Accept</code> <code>q</code> value can be a float without a decimal part. :issue:<code>2751</code></li>\n</ul>\n<h2>Version 2.3.6</h2>\n<p>Released 2023-06-08</p>\n<ul>\n<li><code>FileStorage.content_length</code> does not fail if the form data did not provide a\nvalue. :issue:<code>2726</code></li>\n</ul>\n<h2>Version 2.3.5</h2>\n<p>Released 2023-06-07</p>\n<ul>\n<li>Python 3.12 compatibility. :issue:<code>2704</code></li>\n<li>Fix handling of invalid base64 values in <code>Authorization.from_header</code>. :issue:<code>2717</code></li>\n<li>The debugger escapes the exception message in the page title. :pr:<code>2719</code></li>\n<li>When binding <code>routing.Map</code>, a long IDNA <code>server_name</code> with a port does not fail\nencoding. :issue:<code>2700</code></li>\n<li><code>iri_to_uri</code> shows a deprecation warning instead of an error when passing bytes.\n:issue:<code>2708</code></li>\n<li>When parsing numbers in HTTP request headers such as <code>Content-Length</code>, only ASCII\ndigits are accepted rather than any format that Python's <code>int</code> and <code>float</code>\naccept. :issue:<code>2716</code></li>\n</ul>\n<p>Version 2.3.4</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/dc909431a6b399f341364233382aad73fb0ea56a\"><code>dc90943</code></a> Release version 2.3.8</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/f2300208d5e2a5076cbbb4c2aad71096fd040ef9\"><code>f230020</code></a> Fix: slow multipart parsing for huge files with few CR/LF characters</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/26f3e95168c5019d3dbf656c9042c19d621cb54f\"><code>26f3e95</code></a> reformat lines</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/828bab48b056f59c2884fe52eb5decd21415b4be\"><code>828bab4</code></a> Start version 2.3.8</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/3c2ba3da894c0767dd6dde7b2707cac65bad5422\"><code>3c2ba3d</code></a> Release version 2.3.7</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/ac9974c04fe44bf1a6fde752cad492432cd5c1b7\"><code>ac9974c</code></a> Fix qvalue parsing (<a href=\"https://redirect.github.com/pallets/werkzeug/issues/2753\">#2753</a>)</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/88f4ed649cf340f401c4225a418fb78aeec92e6f\"><code>88f4ed6</code></a> qvalue parsing accepts float without decimal</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/dd1f1371d092086095bc004dfbbdf3a29c4612f0\"><code>dd1f137</code></a> Fix: Improve Error Message (<a href=\"https://redirect.github.com/pallets/werkzeug/issues/2750\">#2750</a>)</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/fdc295a79c5a8a1da381d646b5430ac0e0230a92\"><code>fdc295a</code></a> clearer url rule slash error</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/a0f4bf4bb60a95a959314f3540a42f186f1f8ace\"><code>a0f4bf4</code></a> fix: improve error message</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/werkzeug/compare/2.2.2...2.3.8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=werkzeug&package-manager=pip&previous-version=2.2.2&new-version=2.3.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/build_file_generation/werkzeug-2.3.8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210131ac254a19ac28f48b",
    "number": 1759,
    "body": null,
    "head_branch": "fix/aignas/bcr-source-template",
    "is_a_fork": false,
    "comments": [
      "Please close this. Bad fix that I suggested. Real fix will be made in Publish to BCR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210132ac254a19ac28f48c",
    "number": 1758,
    "body": "With this change all of our deps have wheel distributions available\nfor Python 3.9 linux_x86_64, which means that we can more reliably\nexperiment with multi-platform hub repositories.\n\nSplit from #1744.\n",
    "head_branch": "chore/bump-deps-bzlmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore(examples/bzlmod): bump deps to use wheels on linux_x86_64 (#1758)\n\nWith this change all of our deps have wheel distributions available\nfor Python 3.9 linux_x86_64, which means that we can more reliably\nexperiment with multi-platform hub repositories.\n\nSplit from #1744."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210133ac254a19ac28f48d",
    "number": 1757,
    "body": "When adding a whl-only hub that gets selected for a particular\nplatform only, this check needed to be adjusted (as seen in #1744).\n",
    "head_branch": "test/improve-matching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test(bzlmod): make the check for hub repo naming less strict (#1757)\n\nWhen adding a whl-only hub that gets selected for a particular\nplatform only, this check needed to be adjusted (as seen in #1744)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210134ac254a19ac28f48e",
    "number": 1756,
    "body": "This does not change any logic/features in the bzlmod or legacy code, but\r\njust changes the interfaces and how the parameters are passed. The final\r\nresult should be the same.\r\n\r\nSummary:\r\n- introduce a `whl_alias` struct to make code more object oriented.\r\n- make the interface of the function as small as possible.\r\n- unify the bzlmod and legacy code paths and simplify tests.\r\n- allow to specify arbitrary repos and config settings\r\n  when generating aliases, which is useful in multi-platform hub\r\n  generation.\r\n",
    "head_branch": "refactor/render-pkg-aliases",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal: support repo prefixes and config settings in alias rendering (#1756)\n\nThis does not change any logic/features in the bzlmod or legacy code,\nbut\njust changes the interfaces and how the parameters are passed. The final\nresult should be the same.\n\nSummary:\n- introduce a `whl_alias` struct to make code more object oriented.\n- make the interface of the function as small as possible.\n- unify the bzlmod and legacy code paths and simplify tests.\n- allow to specify arbitrary repos and config settings\n  when generating aliases, which is useful in multi-platform hub\n  generation.\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210134ac254a19ac28f48f",
    "number": 1754,
    "body": "* Create 0.31.0 section\r\n* Move pystar note out of 0.30.0 section and into 0.31.0",
    "head_branch": "changelog.31",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: Update changelog for 0.31.0 (#1754)\n\n* Create 0.31.0 section\n* Move pystar note out of 0.30.0 section and into 0.31.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210135ac254a19ac28f490",
    "number": 1753,
    "body": "BCR now requires the presubmit configs to specify the Bazel versions to run tests with. Without this, the BCR checks fail and we can't do releases to BCR.",
    "head_branch": "fix.bcr.presubmit",
    "is_a_fork": true,
    "comments": [
      "I'm just going to force merge this. It's been waiting for mac workers for 10+ minutes, and this config doesn't actually affect anything in our CI."
    ],
    "commit_messages": [
      "tests(bcr): Set Bazel version in BCR presubmit config. (#1753)\n\nBCR now requires the presubmit configs to specify the Bazel versions to\r\nrun tests with. Without this, the BCR checks fail and we can't do\r\nreleases to BCR."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210136ac254a19ac28f491",
    "number": 1752,
    "body": "* Updates link and header\r\n* Adds a missing link to a prior release\r\n* Adds a mention of `:current_py_cc_libs` to the features added\r\n",
    "head_branch": "changelog.30",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: Update changelog for 0.30.0 release (#1752)\n\n* Updates link and header\n* Adds a missing link to a prior release\n* Adds a mention of `:current_py_cc_libs` to the features added"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210137ac254a19ac28f492",
    "number": 1750,
    "body": "The PR #1743 explored the idea of creating extra config settings for\neach target platform that our toolchain is targetting, however that has\na drawback of not being usable in `bzlmod` if someone built Python for\na platform that we don't provide a toolchain for and tried to use the\n`pip.parse` machinery with that by providing the\n`python_interpreter_target`. That is a niche usecase, but `rules_python`\nis a core ruleset that should only provide abstractions/helpers that\nwork in all cases or make it possible to extend things.\n\nThis explores a way to decouple the definition of the available\n`config_settings` values and how they are constructed by adding an extra\n`is_python_config_setting` macro, that could be used to declare the\nconfig settings from within the `pip.parse` hub repo. This makes the\nwork in #1744 to support whl-only hub repos more self-contained.\n\nSupersedes #1743.\n",
    "head_branch": "refactor/config-settings",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "internal(config_settings): make config_setting creation reusable (#1750)\n\nThe PR #1743 explored the idea of creating extra config settings for\neach target platform that our toolchain is targetting, however that has\na drawback of not being usable in `bzlmod` if someone built Python for\na platform that we don't provide a toolchain for and tried to use the\n`pip.parse` machinery with that by providing the\n`python_interpreter_target`. That is a niche usecase, but `rules_python`\nis a core ruleset that should only provide abstractions/helpers that\nwork in all cases or make it possible to extend things.\n\nThis explores a way to decouple the definition of the available\n`config_settings` values and how they are constructed by adding an extra\n`is_python_config_setting` macro, that could be used to declare the\nconfig settings from within the `pip.parse` hub repo. This makes the\nwork in #1744 to support whl-only hub repos more self-contained.\n\nSupersedes #1743.\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210138ac254a19ac28f493",
    "number": 1749,
    "body": "This is just a basic to to ensure the\r\n`@rules_python//python/cc:current_py_cc_libs` target is making the Python C libraries available; that the compiler and linker are both happy enough to resolve symbols.\r\n\r\nThe test program itself isn't actually runnable, as that requires more configuration than I can figure out in telling Python where its embedded runtime information is.\r\n\r\nFow now, the test is restricted to Linux. The Mac and Windows CC building isn't happy with it, but I'm out of my depth about how to make those happy.\r\n\r\nWork towards https://github.com/bazelbuild/rules_python/issues/824",
    "head_branch": "fix.libpython.linkopts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests(cclibs): Basic test that the `current_py_cc_libs` target works (#1749)\n\nThis is just a basic to to ensure the\n`@rules_python//python/cc:current_py_cc_libs` target is making the\nPython C libraries available; that the compiler and linker are both\nhappy enough to resolve symbols.\n\nThe test program itself isn't actually runnable, as that requires more\nconfiguration than I can figure out in telling Python where its embedded\nruntime information is.\n\nFow now, the test is restricted to Linux. The Mac and Windows CC\nbuilding isn't happy with it, but I'm out of my depth about how to make\nthose happy.\n\nWork towards https://github.com/bazelbuild/rules_python/issues/824"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210138ac254a19ac28f494",
    "number": 1748,
    "body": "This fixes the bug where the PyRuntimeInfo symbol rules_python exported wasn't matching the provider identity that `py_binary` actually provided.\r\n\r\nThe basic problem was, when pystar is disabled:\r\n * PyRuntimeInfo is the rules_python defined provider\r\n * py_binary is `native.py_binary`, which provides only the builtin PyRuntimeInfo provider.\r\n\r\nThus, when users loaded the rules_python PyRuntimeInfo symbol, it was referring to a provider that the underlying py_binary didn't actually provide. Pystar is always disabled on Bazel 6.4,\r\nand enabling it for Bazel 7 will happen eminently.\r\n\r\nThis typically showed up when users had a custom rule with an attribute definition that used the rules_python PyRuntimeInfo.\r\n\r\nTo fix, only use the rules_python define PyRuntimeInfo if pystar is enabled. This ensures the providers the underlying rules are providing match the symbols that rules_python is exported.\r\n\r\n* Also fixes `py_binary` and `py_test` to also return the builtin PyRuntimeInfo. This\r\n  should make the transition from the builtin symbols to the rules_python symbols a bit\r\n  easier.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1732",
    "head_branch": "fix.pyruntimeinfo.pybinary",
    "is_a_fork": true,
    "comments": [
      "Ah hm, looks like the pystar config isn't happy with this. I'll put this back into draft and figure out what's going on.",
      "Tests fix. PTAL.\r\n\r\nIt uncovered another gap in compatibility: pystar py_binary wasn't returning the builtin PyRuntimeInfo. It does now, which should allow it to (1) work with a builtin py_runtime defined toolchain, and (2) allow it to work with code that is expecting the builtin PyRuntimeInfo (i.e. users that aren't loading from rules_python)."
    ],
    "commit_messages": [
      "fix(PyRuntimeInfo): use builtin PyRuntimeInfo unless pystar is enabled. (#1748)\n\nThis fixes the bug where the PyRuntimeInfo symbol rules_python exported\nwasn't matching the provider identity that `py_binary` actually\nprovided.\n\nThe basic problem was, when pystar is disabled:\n * PyRuntimeInfo is the rules_python defined provider\n* py_binary is `native.py_binary`, which provides only the builtin\nPyRuntimeInfo provider.\n\nThus, when users loaded the rules_python PyRuntimeInfo symbol, it was\nreferring to a provider that the underlying py_binary didn't actually\nprovide. Pystar is always disabled on Bazel 6.4,\nand enabling it for Bazel 7 will happen eminently.\n\nThis typically showed up when users had a custom rule with an attribute\ndefinition that used the rules_python PyRuntimeInfo.\n\nTo fix, only use the rules_python define PyRuntimeInfo if pystar is\nenabled. This ensures the providers the underlying rules are providing\nmatch the symbols that rules_python is exported.\n\n* Also fixes `py_binary` and `py_test` to also return the builtin\nPyRuntimeInfo. This\nshould make the transition from the builtin symbols to the rules_python\nsymbols a bit\n  easier.\n\nFixes https://github.com/bazelbuild/rules_python/issues/1732"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210139ac254a19ac28f495",
    "number": 1747,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 41.0.6 to 42.0.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>42.0.0 - 2024-01-22</p>\n<pre><code>\n* **BACKWARDS INCOMPATIBLE:** Dropped support for LibreSSL &lt; 3.7.\n* **BACKWARDS INCOMPATIBLE:** Loading a PKCS7 with no content field using\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n  or\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n  will now raise a ``ValueError`` rather than return an empty list.\n* Parsing SSH certificates no longer permits malformed critical options with\n  values, as documented in the 41.0.2 release notes.\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.0.\n* Updated the minimum supported Rust version (MSRV) to 1.63.0, from 1.56.0.\n* We now publish both ``py37`` and ``py39`` ``abi3`` wheels. This should\n  resolve some errors relating to initializing a module multiple times per\n  process.\n* Support :class:`~cryptography.hazmat.primitives.asymmetric.padding.PSS` for\n  X.509 certificate signing requests and certificate revocation lists with the\n  keyword-only argument ``rsa_padding`` on the ``sign`` methods for\n  :class:`~cryptography.x509.CertificateSigningRequestBuilder` and\n  :class:`~cryptography.x509.CertificateRevocationListBuilder`.\n* Added support for obtaining X.509 certificate signing request signature\n  algorithm parameters (including PSS) via\n  :meth:`~cryptography.x509.CertificateSigningRequest.signature_algorithm_parameters`.\n* Added support for obtaining X.509 certificate revocation list signature\n  algorithm parameters (including PSS) via\n  :meth:`~cryptography.x509.CertificateRevocationList.signature_algorithm_parameters`.\n* Added ``mgf`` property to\n  :class:`~cryptography.hazmat.primitives.asymmetric.padding.PSS`.\n* Added ``algorithm`` and ``mgf`` properties to\n  :class:`~cryptography.hazmat.primitives.asymmetric.padding.OAEP`.\n* Added the following properties that return timezone-aware ``datetime`` objects:\n  :meth:`~cryptography.x509.Certificate.not_valid_before_utc`,\n  :meth:`~cryptography.x509.Certificate.not_valid_after_utc`,\n  :meth:`~cryptography.x509.RevokedCertificate.revocation_date_utc`,\n  :meth:`~cryptography.x509.CertificateRevocationList.next_update_utc`,\n  :meth:`~cryptography.x509.CertificateRevocationList.last_update_utc`.\n  These are timezone-aware variants of existing properties that return naïve\n  ``datetime`` objects.\n* Deprecated the following properties that return naïve ``datetime`` objects:\n  :meth:`~cryptography.x509.Certificate.not_valid_before`,\n  :meth:`~cryptography.x509.Certificate.not_valid_after`,\n  :meth:`~cryptography.x509.RevokedCertificate.revocation_date`,\n  :meth:`~cryptography.x509.CertificateRevocationList.next_update`,\n  :meth:`~cryptography.x509.CertificateRevocationList.last_update`\n  in favor of the new timezone-aware variants mentioned above.\n* Added support for\n  :class:`~cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20`\n  on LibreSSL.\n* Added support for RSA PSS signatures in PKCS7 with\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/4e64baf360a3a89bd92582f59344c12b5c0bd3fd\"><code>4e64baf</code></a> 42.0.0 version bump (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10232\">#10232</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7cb13a3bc91b7537c6231674fb5b0d2132a7edbe\"><code>7cb13a3</code></a> we'll ship 3.2.0 for 42 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9951\">#9951</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/605c74e41c75edc717f21afaa5e6a0eee9863a10\"><code>605c74e</code></a> Bump x509-limbo and/or wycheproof in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10231\">#10231</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/97578b98ffc417864e07d0ff9b76c02d2cb4e6da\"><code>97578b9</code></a> Bump BoringSSL and/or OpenSSL in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10230\">#10230</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/972a7b5896a6047ea43a86db87820ab474d898ff\"><code>972a7b5</code></a> verification: add test_verify_tz_aware (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10229\">#10229</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/41daf2d86dd9bf18081802fa5d851a7953810786\"><code>41daf2d</code></a> Migrate PKCS7 backend to Rust (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10228\">#10228</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/d54093e62e7e68c02efbb4d6a09162ddb39bf72f\"><code>d54093e</code></a> Remove some skips in tests that aren't needed anymore (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10223\">#10223</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/71929bd91f34213b9f4a3a0a493c218c35fa25eb\"><code>71929bd</code></a> Remove binding that's not used anymore (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10224\">#10224</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7ea4b89cea553ce0f641ed29e1ce2e3e34278f1d\"><code>7ea4b89</code></a> fixed formatting in changelog (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10225\">#10225</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/410f4a1ee4cbf46fe7e969bb48fccf261f74bbcd\"><code>410f4a1</code></a> Allow brainpool on libressl (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10222\">#10222</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/41.0.6...42.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=41.0.6&new-version=42.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/cryptography-42.0.0",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1768."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621013aac254a19ac28f496",
    "number": 1746,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 41.0.7 to 42.0.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>42.0.0 - 2024-01-22</p>\n<pre><code>\n* **BACKWARDS INCOMPATIBLE:** Dropped support for LibreSSL &lt; 3.7.\n* **BACKWARDS INCOMPATIBLE:** Loading a PKCS7 with no content field using\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n  or\n  :func:`~cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n  will now raise a ``ValueError`` rather than return an empty list.\n* Parsing SSH certificates no longer permits malformed critical options with\n  values, as documented in the 41.0.2 release notes.\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.2.0.\n* Updated the minimum supported Rust version (MSRV) to 1.63.0, from 1.56.0.\n* We now publish both ``py37`` and ``py39`` ``abi3`` wheels. This should\n  resolve some errors relating to initializing a module multiple times per\n  process.\n* Support :class:`~cryptography.hazmat.primitives.asymmetric.padding.PSS` for\n  X.509 certificate signing requests and certificate revocation lists with the\n  keyword-only argument ``rsa_padding`` on the ``sign`` methods for\n  :class:`~cryptography.x509.CertificateSigningRequestBuilder` and\n  :class:`~cryptography.x509.CertificateRevocationListBuilder`.\n* Added support for obtaining X.509 certificate signing request signature\n  algorithm parameters (including PSS) via\n  :meth:`~cryptography.x509.CertificateSigningRequest.signature_algorithm_parameters`.\n* Added support for obtaining X.509 certificate revocation list signature\n  algorithm parameters (including PSS) via\n  :meth:`~cryptography.x509.CertificateRevocationList.signature_algorithm_parameters`.\n* Added ``mgf`` property to\n  :class:`~cryptography.hazmat.primitives.asymmetric.padding.PSS`.\n* Added ``algorithm`` and ``mgf`` properties to\n  :class:`~cryptography.hazmat.primitives.asymmetric.padding.OAEP`.\n* Added the following properties that return timezone-aware ``datetime`` objects:\n  :meth:`~cryptography.x509.Certificate.not_valid_before_utc`,\n  :meth:`~cryptography.x509.Certificate.not_valid_after_utc`,\n  :meth:`~cryptography.x509.RevokedCertificate.revocation_date_utc`,\n  :meth:`~cryptography.x509.CertificateRevocationList.next_update_utc`,\n  :meth:`~cryptography.x509.CertificateRevocationList.last_update_utc`.\n  These are timezone-aware variants of existing properties that return naïve\n  ``datetime`` objects.\n* Deprecated the following properties that return naïve ``datetime`` objects:\n  :meth:`~cryptography.x509.Certificate.not_valid_before`,\n  :meth:`~cryptography.x509.Certificate.not_valid_after`,\n  :meth:`~cryptography.x509.RevokedCertificate.revocation_date`,\n  :meth:`~cryptography.x509.CertificateRevocationList.next_update`,\n  :meth:`~cryptography.x509.CertificateRevocationList.last_update`\n  in favor of the new timezone-aware variants mentioned above.\n* Added support for\n  :class:`~cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20`\n  on LibreSSL.\n* Added support for RSA PSS signatures in PKCS7 with\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/4e64baf360a3a89bd92582f59344c12b5c0bd3fd\"><code>4e64baf</code></a> 42.0.0 version bump (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10232\">#10232</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7cb13a3bc91b7537c6231674fb5b0d2132a7edbe\"><code>7cb13a3</code></a> we'll ship 3.2.0 for 42 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9951\">#9951</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/605c74e41c75edc717f21afaa5e6a0eee9863a10\"><code>605c74e</code></a> Bump x509-limbo and/or wycheproof in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10231\">#10231</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/97578b98ffc417864e07d0ff9b76c02d2cb4e6da\"><code>97578b9</code></a> Bump BoringSSL and/or OpenSSL in CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10230\">#10230</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/972a7b5896a6047ea43a86db87820ab474d898ff\"><code>972a7b5</code></a> verification: add test_verify_tz_aware (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10229\">#10229</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/41daf2d86dd9bf18081802fa5d851a7953810786\"><code>41daf2d</code></a> Migrate PKCS7 backend to Rust (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10228\">#10228</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/d54093e62e7e68c02efbb4d6a09162ddb39bf72f\"><code>d54093e</code></a> Remove some skips in tests that aren't needed anymore (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10223\">#10223</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/71929bd91f34213b9f4a3a0a493c218c35fa25eb\"><code>71929bd</code></a> Remove binding that's not used anymore (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10224\">#10224</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7ea4b89cea553ce0f641ed29e1ce2e3e34278f1d\"><code>7ea4b89</code></a> fixed formatting in changelog (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10225\">#10225</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/410f4a1ee4cbf46fe7e969bb48fccf261f74bbcd\"><code>410f4a1</code></a> Allow brainpool on libressl (<a href=\"https://redirect.github.com/pyca/cryptography/issues/10222\">#10222</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/41.0.7...42.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=41.0.7&new-version=42.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/tests/dupe_requirements/cryptography-42.0.0",
    "is_a_fork": false,
    "comments": [
      "This is changing the requirements file in a way that is not desirable.",
      "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621013bac254a19ac28f497",
    "number": 1745,
    "body": "Previously we would only symlink the interpreter binary itself\r\nwhen creating the hermetic host toolchain used in setting up the\r\n`whl_library` repositories. This works on UNIX platforms and Windows\r\nif they have the following in their `.bazelrc`:\r\n```\r\nstartup --windows_enable_symlinks\r\n```\r\n\r\nIn our CI we had the same lines but the users did not need to add them\r\nuntil the `0.29.0` forced them to have them because we actually started\r\nusing symlinks on Windows. If the symlinks are not enabled on the host\r\nplatform `bazel` tries to be helpful and copies the files over instead\r\nof making the links. We are leveraging this to just symlink all of the\r\ncontents of the python interpreter repository for the host platform to\r\nthe `_host` toolchain repository.\r\n\r\nFixes #1723\r\n",
    "head_branch": "fix/windows-host-toolchain",
    "is_a_fork": false,
    "comments": [
      "I don't think this is fixing anything yet, so I have removed it from the queue for now, I am working on an alternative fix. Will mark as a draft."
    ],
    "commit_messages": [
      "fix(toolchain): symlink all toolchain files for the host toolchain (#1745)\n\nPreviously we would only symlink the interpreter binary itself\nwhen creating the hermetic host toolchain used in setting up the\n`whl_library` repositories. This works on UNIX platforms and Windows\nif they have the following in their `.bazelrc`:\n```\nstartup --windows_enable_symlinks\n```\n\nIn our CI we had the same lines but the users did not need to add them\nuntil the `0.29.0` forced them to have them because we actually started\nusing symlinks on Windows. If the symlinks are not enabled on the host\nplatform `bazel` tries to be helpful and copies the files over instead\nof making the links. We are leveraging this to just symlink all of the\ncontents of the python interpreter repository for the host platform to\nthe `_host` toolchain repository.\n\nFixes #1723"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621013cac254a19ac28f498",
    "number": 1744,
    "body": "With this PR we can reuse the same `hub-repo` and setup `download_only = True`\r\nclosures, which use only wheels but download the right platform specific wheels\r\nindependent of the host platform. That should allow users to build images with\r\n`rules_oci` without needing to write extra code to create alias repos which\r\nmimic the behaviour of rules_python ones.\r\n\r\nThis is stacked on #1743.\r\n\r\nThe snippet of the resultant `pylint` hub repo alias that is the main goal is:\r\n```starlark\r\nalias(\r\n    name = \"pkg\",\r\n    actual = select(\r\n        {\r\n            \"//:is_python_3.9\": \"@pip_39_pylint//:pkg\",\r\n            \"//:is_python_3.9_linux_x86_64\": \"@pip_39_manylinux_2_17_x86_64_39_pylint//:pkg\",\r\n            \"//:is_python_3.10\": \"@pip_310_pylint//:pkg\",\r\n            \"//:is_linux_x86_64\": \"@pip_39_manylinux_2_17_x86_64_39_pylint//:pkg\",\r\n            \"//conditions:default\": \"@pip_39_pylint//:pkg\",\r\n        },\r\n    ),\r\n)\r\n```\r\n\r\nWork towards #1606",
    "head_branch": "feat/download-only-wheel-hubs",
    "is_a_fork": false,
    "comments": [
      "Right now the `examples/bzlmod` suceeds locally on a linux laptop:\r\n```\r\nbazel build @pip//pylint\r\n```\r\n\r\nHowever `pyyaml` is not available as a `whl` yet, hence the failure of the tests.",
      "This depends on #1750 and #1764. Will continue work on this once those get merged.",
      "This should merge #1811 as the right fix for platform specific wheel platform setting.",
      "I'll close this for now as I focus on the implementation outlined in [this design doc](https://docs.google.com/document/d/1vAupaen4tIZxeqdpkYleuUUjrVuptdps_mz4Y_V4EIo/edit#heading=h.ga06bz2494ba)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621013dac254a19ac28f499",
    "number": 1743,
    "body": "Prior to this PR `//python/config_settings` would contain only the\n`config_setting` targets for the Python versions from `//python:versions.bzl`.\nWe would only match the `python_version` configuration and if someone needed\nmatching against the `constraint_values` they would have to redefine the\n`config_setting` values themselves as `match_all` helper from bazel skylib\ncannot be used in this case do to how specialization priority of\n`config_setting` in a `select` works - `match_all` would create `select`\nstatement entries that are not specialized enough, i.e. they would not have the\npython version config setting and the target platform constraint values in a single\n`config_setting`.\n\nThis PR creates additional `config_setting` values that are useful for rulesets\nimplementing handling of platform-specific wheels in a multi-python version scenario\nand it lays a good foundation for supporting `download_only = True` in a better way\nwithin the `pip.parse` extension itself.\n\nNOTE: `config_setting` values are only created for the Python toolchain target\nplatforms.\n",
    "head_branch": "feat/config-settings-os-cpu",
    "is_a_fork": false,
    "comments": [
      "Thinking about it a little more, I am wondering if it is OK to have this code in here. It may be better to not expose extra `config` settings. If the `os/arch-specific` selects are needed, maybe they should be defined/passed in the `pip.parse` instead. This is so that the `rules_python` API surface is kept to a minimum and so that we don't make things too coupled.\r\n\r\nThat said, having the mapping between a python version string and the expected flag values that are passed to `match_any` would be useful, because that is a property of the `python_version` string flag.\r\n\r\nFeel free to comment if you disagree with my statement above."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621013dac254a19ac28f49a",
    "number": 1742,
    "body": "This is not a breaking change because previously we just failed at the runfiles with\r\n```\r\nlink or target filename contains space on line 9877: '_main/external/rules_python~override~pip~pypi_311_imgaug/site-packages/imgaug/augmenters/arithmetic (copy).py /root/.cache/bazel/_bazel_root/00e0182df830644af7af00c92693c660/external/rules_python~override~pip~pypi_311_imgaug/site-packages/imgaug/augmenters/arithmetic (copy).py'\r\n```\r\n\r\nthe only sane way to handle names in whitespaces in .py files from whl is to ignore it, so we can as well do this in the core rule itself.",
    "head_branch": "sergei/whitespace",
    "is_a_fork": true,
    "comments": [
      "I get where this change is coming from but I don't think this is the right solution. A Python wheel which lays down files that contain spaces needs to be patched to work under Bazel anyway. Allowing the install to succeed and produce a partially viable state isn't IMO desirable behavior. This isn't just an issue of `.py` files with ah invalid module names, but also data files. For instance https://github.com/jaraco/jaraco.text/pull/12.",
      "Thank you, just want to point out that data files already have exactly this exclusion https://github.com/bazelbuild/rules_python/blob/e7f8f0f786aa615bd60731ce1d151b19bf8dd18f/python/pip_install/private/generate_whl_library_build_bazel.bzl#L294\r\n\r\nIf anything then data is more important not to change: the python src file that uses space doesn't have any way to be used in the `import` statement.\r\n\r\nAnyway, if you feel strongly it's fine.\r\n\r\nI also want to ask about the right way to do the annotation exclusion for this package\r\n\r\n```\r\n    annotations = {\r\n        \"imgaug\": '{\"srcs_exclude_glob\": [\"**/* *\"]}',\r\n    },\r\n```\r\n\r\ntried this, but it doesn't seem to have any affect.",
      "For now I resorted to patching `rules_python` on the fly with\r\n```\r\nsingle_version_override(module_name = \"rules_python\", version = \"0.29.0\", patches=[\"//lib/bazel:rules_python.patch\"])\r\n```\r\nsince I cannot figure out how to use `annotations` even after reading the code 😅 ",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621013eac254a19ac28f49b",
    "number": 1740,
    "body": "* `bazel coverage ...` in the same fashion as `bazel test ...`\r\n",
    "head_branch": "break-bazelci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621013fac254a19ac28f49c",
    "number": 1738,
    "body": "This is a followup to #1720 to add better tests as commented in the PR\nand we ensure that we match correctly when the config setting is\nconfigured to a minor version.\n",
    "head_branch": "test/analysis-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: config_settings matching latest minor versions (#1738)\n\nThis is a followup to #1720 to add better tests as commented in the PR\nand we ensure that we match correctly when the config setting is\nconfigured to a minor version."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210140ac254a19ac28f49d",
    "number": 1736,
    "body": "Use this by running `bazel build @repro//..` in the `rules_python` module.\nThe build will fail all the time because I do `sys.exit(1)` in the\nscript but the expectation that on Windows we can reproduce the #1723\nand the python script will exit before `sys.exit(1)` is called with a\ndifferent error.\n",
    "head_branch": "repro/windows-pypi-import-failure",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210141ac254a19ac28f49e",
    "number": 1735,
    "body": "Debugging what the repo rules are up to can be difficult because Bazel doesn't provide many facilities to inspect what they're up to. This adds an environment variable, `RULES_PYTHON_REPO_DEBUG`, that, when set, will make our repo rules print out detailed information about the subprocesses they are running.\r\n\r\nThis also makes failed commands dump much more comprehensive information.\r\n\r\nThis was driven by the recent report of failures on Windows during a repo rule.",
    "head_branch": "repos.cmds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add debug logging of repo sub processes (#1735)\n\nDebugging what the repo rules are up to can be difficult because Bazel\ndoesn't provide many facilities to inspect what they're up to. This adds\nan environment variable, `RULES_PYTHON_REPO_DEBUG`, that, when set, will\nmake our repo rules print out detailed information about the\nsubprocesses they are running.\n\nThis also makes failed commands dump much more comprehensive\ninformation.\n\nThis was driven by the recent report of failures on Windows during a\nrepo rule."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210141ac254a19ac28f49f",
    "number": 1734,
    "body": "* examples/bzlmod - bazel coverage //tests:version_3_10_takes_3_9_subprocess_test was always failing due to .coveragerc generated file not being unique\r\n* generating the locv report resulted in messages going to stdout/stderr that resulted in test failures.  To fix this, we run with --quiet.  If VERBOSE_COVERAGE is defined we will output to stderr.\r\n\r\n\r\nReproduction steps:\r\n```bash\r\ngit co main\r\ncd examples/bzlmod\r\nbazel coverage //tests/...\r\n# failures occur\r\n```\r\n\r\n",
    "head_branch": "fix-coverage-lcov",
    "is_a_fork": true,
    "comments": [
      "Could you also update https://github.com/bazelbuild/rules_python/blob/main/.bazelci/presubmit.yml#L62 and related so that we can reproduce the failures in the CI?",
      "I updated the presubmit.yml to make the failing tests run.  I'm having troubles reproducing the Ubuntu 20.04 issues locally so I can debug, iterate, and fix it.\r\n\r\nI created a separate PR to show the issue without any changes in this PR. https://github.com/bazelbuild/rules_python/pull/1740\r\n\r\n** UPDATE **\r\nI'm able to reproduce the issue locally with:\r\n```\r\nUSE_BAZEL_VERSION=6.4.0 bazel coverage //...\r\n```",
      "Let me know when this becomes ready to review again.",
      "@aignas , this should be ready for review.",
      "Added the comments, hopefully they bring value ;)\r\n\r\nRewrote the CHANGELOG.md blurb while I was at it.",
      "@aignas This should be ready for review again."
    ],
    "commit_messages": [
      "fix(coverage): generating lcov was causing issues (#1734)\n\n* examples/bzlmod - bazel coverage\n//tests:version_3_10_takes_3_9_subprocess_test was always failing due to\n.coveragerc generated file not being unique\n* generating the locv report resulted in messages going to stdout/stderr\nthat resulted in test failures. To fix this, we run with --quiet. If\nVERBOSE_COVERAGE is defined we will output to stderr.\n\n\nReproduction steps:\n```bash\ngit co main\ncd examples/bzlmod\nbazel coverage //tests/...\n# failures occur\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210142ac254a19ac28f4a0",
    "number": 1731,
    "body": "#1453 added logic to manually set zipinfo for each file in the wheel archive. When wheel archives generated by `_Whlfile` are installed by the `installer` module (or `pip`), the file mode is inspected as such:\r\n\r\n* `installer`: https://github.com/pypa/installer/blob/fcc0d6f14f99974316c2e490cead07a9a0b7a6ac/src/installer/sources.py#L318-L321\r\n* `pip`: https://github.com/pypa/pip/blob/0f21fb92/src/pip/_internal/utils/unpacking.py#L96-L100\r\n\r\nas you can tell, if the regular file bit is not set, the installer thinks that the file being installed is not an executable and therefore the executable bit will not be preserved when the file from wheel is extracted onto the host filesystem.\r\n\r\nSince all files being archived into Whlfile are regular files anyway, we set `S_IFREG` on the file mode for all files in the zip archive.\r\n\r\nFixes #1711",
    "head_branch": "thomaslam-fix-whlfile-mode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure regular file bit set in wheel archives (#1731)\n\n#1453 added logic to manually set zipinfo for each file in the wheel\narchive. When wheel archives generated by `_Whlfile` are installed by\nthe `installer` module (or `pip`), the file mode is inspected as such:\n\n* `installer`:\nhttps://github.com/pypa/installer/blob/fcc0d6f14f99974316c2e490cead07a9a0b7a6ac/src/installer/sources.py#L318-L321\n* `pip`:\nhttps://github.com/pypa/pip/blob/0f21fb92/src/pip/_internal/utils/unpacking.py#L96-L100\n\nas you can tell, if the regular file bit is not set, the installer\nthinks that the file being installed is not an executable and therefore\nthe executable bit will not be preserved when the file from wheel is\nextracted onto the host filesystem.\n\nSince all files being archived into Whlfile are regular files anyway, we\nset `S_IFREG` on the file mode for all files in the zip archive.\n\nFixes #1711\n\n---------\n\nSigned-off-by: Thomas Lam <thomaslam@canva.com>\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210143ac254a19ac28f4a1",
    "number": 1730,
    "body": "This fixes wheels like ruff which want to emplace `bin/` and other dirs used as library data.",
    "head_branch": "arrdem/arbitrary-whl-data-files",
    "is_a_fork": true,
    "comments": [
      "Thanks for the PR @arrdem, could you please fix the tests and add a CHANGELOG item so that we can merge it? This looks like a really useful feature.",
      "Wilco. Work's a bit crazy atm just wanted to get this patch in the upstream pipe before I forgot about it since it was trivial.",
      "There we go. Ready @aignas.",
      "Could you add a Changelog note so that I can merge?",
      "Hrm. Reading through https://peps.python.org/pep-0491/#file-contents, I'm wondering if this actually makes sense. It feels like while it may well make sense to have a `:data` filegroup, we probably want to handle at lest `data`, `scripts` and `include` separately. While for my purposes it's good enough to just have _a_ build rule that encloses the `ruff` binary it would be better if we could identify scripts as part of unpacking the wheel and make them usable as entrypoint rules rather than just files.\r\n\r\nOn the same note whether the data should be a dependency of the library seems arguable.",
      "Looking at https://peps.python.org/pep-0491/#install-paths I am wondering if the right way to fix this would be to add the extra filegroup targets for each item listed in the UNIX install scheme.\r\n\r\nThat said, we may want to include all of those filegroups into the `py_library` so that the library can work correctly - Python can do whatever and assume that the files are installed in `site-packages` so I am wondering if adding the filegroups on the other hand would be not effective at all.\r\n\r\nThat said having the filegroups exposed would make the `numpy` header inclusion easier and users would not need to use `whl_filegroup` in their build graph to just extract a few files.",
      "Missclick.\r\n\r\nThat makes sense to me. The main other thing I want to do is to teach the wheel installer to identify scripts/binaries already in the `bin/` tree and add entrypoint metdata for them automagically. Will try to revisit this.",
      "Thanks! Is it so that you could later use the py_console_script_binary to use those scripts?",
      "I was thinking about this recently, and I'm wondering if the neatest way of solving this is to mirror what was done for `py_console_script_binary` aka `console_scripts` aka `entry_points`?\r\n\r\nThe main motivator for accessing `scripts` are static binaries such as `ruff`, `uv` etc. However, `scripts` are actually a non-standardized feature with distutils/setuptools origins. They're not actually recommended, but they can't be removed because they're load bearing...\r\n\r\nSee:\r\n* https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#scripts \r\n* https://setuptools.pypa.io/en/latest/deprecated/distutils/setupscript.html#distutils-installing-scripts \r\n\r\nMaybe we should consider the following:\r\n* Provide access to the `.data` from the wheel\r\n* Provide a `py_script_binary` so that users can fish out any named binaries (via ctx.run?)\r\n\r\nThere are some caveats that old school `scripts` can also be Python code. I see them periodically, but most of have been migrated to `console_scripts` so I think we can ignore these."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210144ac254a19ac28f4a2",
    "number": 1729,
    "body": "When installing `scikit-rf`, a directory with whitespace in it causes installation failures since there's a file in the filegroup that is an invalid Bazel label. https://github.com/scikit-rf/scikit-rf/pull/1019 also attempts to fix the directory name.\r\n\r\nThis is following the existing exclude that excludes files named with a space to also account for directories named with a space.\r\n",
    "head_branch": "fix_directory_exclude",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1729/checks?check_run_id=20997347360) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "I'm curious if you have any thoughts on how I could add a test of this behavior?",
      "What about using `scikit-rf` in one of the examples to test this? I think the part that you should change is in `//python/pip_install/private:generate_build_bazel_file.bzl` or something similar.",
      "> What about using `scikit-rf` in one of the examples to test this? I think the part that you should change is in `//python/pip_install/private:generate_build_bazel_file.bzl` or something similar.\r\n\r\nGood idea about the example.\r\n\r\nI don't quite follow what you think I should change in `pip_install/private`, is there a different exclude or other way to filter these targets out?\r\n\r\nEither way, it doesn't look like my current solution is doing the trick:\r\n```\r\n± bazel run main                                                                                                                                                                                                                                                                                                                                                                                                                   !10075\r\nINFO: Invocation ID: eafbe241-0040-4806-8544-fb26c3a72b94\r\nINFO: Analyzed target //:main (87 packages loaded, 10900 targets configured).\r\nERROR: /home/mchristen/tmp/rules_python/examples/pip_parse/BUILD.bazel:31:10: Creating runfiles tree bazel-out/k8-fastbuild/bin/main.runfiles failed: build-runfiles failed: error executing <shell command> command\r\n  (cd /home/mchristen/.cache/bazel/_bazel_mchristen/af6d72465951c01fc21525a92bd256c3/execroot/_main && \\\r\n  exec env - \\\r\n    PATH=/home/mchristen/.cache/bazelisk/downloads/bazelbuild/bazel-7.0.2-linux-x86_64/bin:/home/mchristen/.cargo/bin:/home/mchristen/tools/gh-diff:/home/mchristen/tools/nvm/current:/home/mchristen/tools/arcanist/arcanist/bin:/home/mchristen/tools/nvm/current:/home/mchristen/tools/bin:/home/mchristen/tools/bin/go/bin:/home/mchristen/go/bin:/home/mchristen/.local/bin:/home/mchristen/.cargo/bin:/home/mchristen/tools/gh-diff:/home/mchristen/tools/nvm/current:/home/mchristen/tools/arcanist/arcanist/bin:/home/mchristen/tools/nvm/current:/home/mchristen/tools/bin:/home/mchristen/tools/bin/go/bin:/home/mchristen/go/bin:/home/mchristen/.local/bin:/usr/local/bin:/usr/local/sbin:/home/mchristen/.cargo/bin:/home/mchristen/tools/nvm/versions/node/v14.15.5/bin:/home/mchristen/.local/bin:/home/mchristen/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/mchristen/tools/bin:/home/mchristen/tools/arcanist/arcanist/bin:/home/mchristen/tools/bin/go/bin:/home/mchristen/go/bin:/usr/local/go:/usr/local/go/bin:/home/mchristen/go:/home/mchristen/tools/gh-diff \\\r\n  /home/mchristen/.cache/bazel/_bazel_mchristen/install/14fb027596f626f2526df4873ea20b8b/build-runfiles --allow_relative bazel-out/k8-fastbuild/bin/main.runfiles_manifest bazel-out/k8-fastbuild/bin/main.runfiles): Process exited with status 1: Process exited with status 1\r\n/home/mchristen/.cache/bazel/_bazel_mchristen/install/14fb027596f626f2526df4873ea20b8b/build-runfiles (args bazel-out/k8-fastbuild/bin/main.runfiles_manifest bazel-out/k8-fastbuild/bin/main.runfiles): link or target filename contains space on line 4960: '_main/external/rules_python~override~pip~pypi_39_scikit_rf/site-packages/skrf_qtapps/skrf_qtwidgets/analyzers/driver development/__init__.py /home/mchristen/.cache/bazel/_bazel_mchristen/af6d72465951c01fc21525a92bd256c3/external/rules_python~override~pip~pypi_39_scikit_rf/site-packages/skrf_qtapps/skrf_qtwidgets/analyzers/driver development/__init__.py'\r\n\r\nTarget //:main failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 21.960s, Critical Path: 0.18s\r\nINFO: 2 processes: 2 internal.\r\nERROR: Build did NOT complete successfully\r\nERROR: Build failed. Not running target\r\n```",
      "Consider using https://rules-python.readthedocs.io/en/latest/api/pip.html#package-annotation instead in your setup to add the extra excludes. There is also a `bzlmod` example for this: https://github.com/bazelbuild/rules_python/blob/main/examples/bzlmod/MODULE.bazel#L84",
      "Thank you very much! I'll give that a shot",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "Still need to test",
      "Closing this as part of stale PR cleanup. Feel free to refer to `package_annotation` and `whl_modifications` documentation that can be found through the RTD docs: https://rules-python.readthedocs.io/"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210145ac254a19ac28f4a3",
    "number": 1728,
    "body": "Adds an `example/pypi_install` directory to show-case multi-arch py binaries.\r\n\r\nCaveats:\r\n* Doesn't use bzlmod yet.\r\n* Doesn't support multiple Python versions.\r\n* Need to re-lock requirements.txt files with the hermetic toolchain.\r\n* Probably more that I can't think of.",
    "head_branch": "unreviewed/phil/pypi_install",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210146ac254a19ac28f4a4",
    "number": 1727,
    "body": "Summary:    \r\n* chore(coverage): bump coverage to 7.4.1\r\n* style: update comments on how to update coverage\r\n* fix(coverage): add cp312 support",
    "head_branch": "feat-add-coverage-for-3.12",
    "is_a_fork": true,
    "comments": [
      "I've not figured out how to use my local instance of rules_python to verify the changes are working as expected.",
      "The bzlmod example is failing when it is just trying to run bazel coverage and it seems that tho patch that we apply to the wheel may need revising. I think just doing bazel fetch for all of the coverage deps whilst in the rules_python workspace should be enough to test this. Maybe adding a skylib build_test to do that in tests/coverage/BUILD.bazel or similar would be good.",
      "If I am working on `main` without any modifications:\r\n\r\n```bash\r\ncd /examples/bzlmod\r\nbazel coverage //...\r\n# 8 fail locally\r\n```",
      "Note that #1734 should be merged before this PR.",
      "@aignas this PR is ready for merge as well.  Thank you!"
    ],
    "commit_messages": [
      "fix(coverage) add coverage support for python 3.12 (#1727)\n\nSummary:    \n* chore(coverage): bump coverage to 7.4.1\n* style: update comments on how to update coverage\n* fix(coverage): add cp312 support\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210147ac254a19ac28f4a5",
    "number": 1725,
    "body": "Updates versions:\r\n* 3.11.6 -> 3.11.7\r\n* 3.12.0  -> 3.12.1\r\n\r\nAdds versions: 3.11.7, 3.12.1\r\n",
    "head_branch": "add-python-3.12.1",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1725/checks?check_run_id=20947417008) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Thanks for the PR!"
    ],
    "commit_messages": [
      "chore: add python 3.11.7, 3.12.1 toolchain (#1725)\n\nUpdates versions:\n* 3.11.6 -> 3.11.7\n* 3.12.0  -> 3.12.1\n\nAdds versions: 3.11.7, 3.12.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210147ac254a19ac28f4a6",
    "number": 1724,
    "body": "Wheel installer failures can be very confusing because they're run during the repository phase where the isn't a great understanding of what they're doing. This makes the error message for failures provide details to help understand exactly what it was up to.",
    "head_branch": "nicer.whl.installer.error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: provide more detailed error message when wheel installer fails (#1724)\n\nWheel installer failures can be very confusing because they're run\nduring the repository phase where the isn't a great understanding of\nwhat they're doing. This makes the error message for failures provide\ndetails to help understand exactly what it was up to."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210148ac254a19ac28f4a7",
    "number": 1720,
    "body": "This is inspired by how rules_go is registering their toolchains.\r\n\r\nTheir toolchains have multiple `target_settings` values. This\r\nallows for a simpler passing of `X.Y` version to the `py_binary` and\r\n`py_test` rules and does not strictly require us to provide the APIs\r\nthat pass the full python version value as the closure. This is only\r\npossible because #1555 introduced working aliases and now we can also\r\nhave this.\r\n\r\nSummary:\r\n- refactor: move the toolchain_def to starlark as opposed to templating\r\n- refactor: move the version setting as well\r\n- feat: support matching on X.Y versions\r\n- feat: X.Y.Z will match if X.Y is used as python_version flag and the\r\n  MINOR_MAPPING has `\"X.Y\": \"X.Y.Z\"`.\r\n- test: add tests checking the generated config settings.\r\n- doc: add an example of how we could use the transition files directly\r\n\r\nSee https://github.com/bazelbuild/rules_go/blob/master/go/private/go_toolchain.bzl#L181\r\n",
    "head_branch": "feat/x.y-transition",
    "is_a_fork": true,
    "comments": [
      "Hah, the build is unhappy, but not in all situations, however, wanted to submit this as it was in my local branch and #1555 added the missing pieces that I needed to get this almost working.",
      "I'm gonna merge this, but if you have a comment on how to make the test for the generated code better, let me know. It seemed like visual inspection was the easiest way for now.",
      "For testing, analysis_test can be used with selects and a small custom rule to hold values.\r\n\r\n```\r\n\r\nsubject = rule(\r\n  implementation = lambda ctx: None,\r\n  attrs = {\"match_a\": attr.bool()}\r\n)\r\n\r\ndef _test_config_matching(name):\r\n  subject(\r\n    name=\"subject\",\r\n    match_a = select({\"is_python_3.4.5\": True}, \"//conditions:default\": False})\r\n  )\r\n  analysis_test(\r\n    ...,\r\n    config_settings = {\r\n      \"@rules_python//python/config_settings:python_version\": \"3.4\"\r\n    }\r\n  )\r\n\r\ndef _test_config_matching_impl(env, target):\r\n  env.expect.that_target(target).attr(\"match_a\", factory=subjects.bool).equals(True)\r\n```\r\n\r\nOh, actually, it looks like there are some tests that do basically this in tests/config_settings/construct_config_settings_test."
    ],
    "commit_messages": [
      "feat(toolchain): support specifying x.y versions in transitions (#1720)\n\nThis is inspired by how rules_go is registering their toolchains.\n\nTheir toolchains have multiple `target_settings` values. This\nallows for a simpler passing of `X.Y` version to the `py_binary` and\n`py_test` rules and does not strictly require us to provide the APIs\nthat pass the full python version value as the closure. This is only\npossible because #1555 introduced working aliases and now we can also\nhave this.\n\nSummary:\n- refactor: move the toolchain_def to starlark as opposed to templating\n- refactor: move the version setting as well\n- feat: support matching on X.Y versions\n- feat: X.Y.Z will match if X.Y is used as python_version flag and the\n  MINOR_MAPPING has `\"X.Y\": \"X.Y.Z\"`.\n- test: add tests checking the generated config settings.\n- doc: add an example of how we could use the transition files directly\n\nSee\nhttps://github.com/bazelbuild/rules_go/blob/master/go/private/go_toolchain.bzl#L181\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210149ac254a19ac28f4a8",
    "number": 1719,
    "body": "The `requires_file` and `extra_requires_files` attributes added by https://github.com/bazelbuild/rules_python/pull/1710 break wheels by leaving trailing `;` and currently do not support `requirements.in` files with comments following a constraint on the same line. This PR fixes these issues.",
    "head_branch": "requires",
    "is_a_fork": true,
    "comments": [
      "@aignas Do you think this needs a note in the CHANGELOG since the original feature has yet to be released?"
    ],
    "commit_messages": [
      "fix(py_wheel): Fix parsing errors with `requires_file` attribute. (#1719)\n\nThe `requires_file` and `extra_requires_files` attributes added by\nhttps://github.com/bazelbuild/rules_python/pull/1710 break wheels by\nleaving trailing `;` and currently do not support `requirements.in`\nfiles with comments following a constraint on the same line. This PR\nfixes these issues."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014aac254a19ac28f4a9",
    "number": 1718,
    "body": "With this change we handle correctly the case where the requirements.txt\nmight be empty (e.g. during onboarding to `rules_python`). I have added\nan integration test because this usecase seems important enough to be covered\nto ensure that we have no regressions. It also creates a place to add more\n`pip.parse` and `pip_parse` tests.\n\nCloses #1623.\n",
    "head_branch": "fix/no-packages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(bzlmod): do not fail pip.parse with empty requirements.txt (#1718)\n\nWith this change we handle correctly the case where the requirements.txt\nmight be empty (e.g. during onboarding to `rules_python`). I have added\nan integration test because this usecase seems important enough to be\ncovered\nto ensure that we have no regressions. It also creates a place to add\nmore\n`pip.parse` and `pip_parse` tests.\n\nCloses #1623."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014bac254a19ac28f4aa",
    "number": 1717,
    "body": "This exposes the runtime's C libraries through the py cc toolchain. This allows tools to embed the Python runtime or otherwise link against it.\r\n\r\nIt follows the same pattern as with the headers: the toolchain consumes the cc_library,\r\nexports CcInfo, and a `:current_py_cc_libs` target makes it easily accessible to users.\r\n\r\nWork towards https://github.com/bazelbuild/rules_python/issues/824\r\n\r\n* Also upgrades to rules_testing 0.5.0 to make use of rules_testing's DefaultInfoSubject",
    "head_branch": "cc.toolchain.libs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: expose runtime's shared libraries through toolchain (#1717)\n\nThis exposes the runtime's C libraries through the py cc toolchain. This\nallows tools to embed the Python runtime or otherwise link against it.\n\nIt follows the same pattern as with the headers: the toolchain consumes\nthe cc_library,\nexports CcInfo, and a `:current_py_cc_libs` target makes it easily\naccessible to users.\n\nWork towards https://github.com/bazelbuild/rules_python/issues/824\n\n* Also upgrades to rules_testing 0.5.0 to make use of rules_testing's\nDefaultInfoSubject"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014bac254a19ac28f4ab",
    "number": 1716,
    "body": "With this move done, all of the tests (except the internal py_test ones)\nshould be under `//tests`.\n",
    "head_branch": "refactor/move-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: move bzl tests from pip_install to //tests (#1716)\n\nWith this move done, all of the tests (except the internal py_test ones)\nshould be under `//tests`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014cac254a19ac28f4ac",
    "number": 1715,
    "body": "The downloaded runtimes don't contain pyc files, which means Python tries to create them at runtime, and thus the set of files in the runtime changes. This normally just silently affects cache hits, but on Windows can result is errors. This is because Windows has stricter file access semantics (e.g. a file can't be deleted if its still opened) and the way Python programs are built involves a step to zip everything up (which then requires the pyc to exist to be put into the zip file).\r\n\r\nTo fix, always ignore pyc files for Windows hosts. This should prevent those files from being picked up by the glob and being considered part of the runtime.",
    "head_branch": "fix.windows.ignore.pyc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: make windows ignore pycs in runtime (#1715)\n\nThe downloaded runtimes don't contain pyc files, which means Python\ntries to create them at runtime, and thus the set of files in the\nruntime changes. This normally just silently affects cache hits, but on\nWindows can result is errors. This is because Windows has stricter file\naccess semantics (e.g. a file can't be deleted if its still opened) and\nthe way Python programs are built involves a step to zip everything up\n(which then requires the pyc to exist to be put into the zip file).\n\nTo fix, always ignore pyc files for Windows hosts. This should prevent\nthose files from being picked up by the glob and being considered part\nof the runtime.\n\nCo-authored-by: aignas <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014dac254a19ac28f4ad",
    "number": 1714,
    "body": "Updates the changelog headers and links for the 0.29.0 release",
    "head_branch": "changelog.29",
    "is_a_fork": true,
    "comments": [
      "@rickeylev would it be possible to include https://github.com/bazelbuild/rules_python/pull/1710 in this release?",
      "> include 1710\r\n\r\nNo, but remember that releases are somewhat ad-hoc. The monthly-ish history of releases is mostly because a maintainer goes, \"Oh, it's been awhile, we should do a release\". As long as CI is happy and there aren't any issues (i.e. maintainers think its fine), then we can do a release any time."
    ],
    "commit_messages": [
      "chore: update changelog for 0.29.0 release (#1714)\n\nUpdates the changelog headers and links for the 0.29.0 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014eac254a19ac28f4ae",
    "number": 1712,
    "body": "Latex output was shown, should just be escaped\r\n\r\n![image](https://github.com/bazelbuild/rules_python/assets/2636212/71b3a79a-41ea-4c01-8734-451c1f7b2157)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1712/checks?check_run_id=20704174307) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Thanks for the contribution! Could you please sign the CLA?",
      "Of course, signed and updated!\r\n\r\nLooks like there's an unrelated failure at \"examples/multi_python_versions: Windows, workspace on :windows: (OpenJDK 11, VS2022)\", anything I should do about that?"
    ],
    "commit_messages": [
      "docs: Update gazelle/README.md to fix `package_name` formatting (#1712)\n\nLatex output was shown, should just be escaped\n\n\n![image](https://github.com/bazelbuild/rules_python/assets/2636212/71b3a79a-41ea-4c01-8734-451c1f7b2157)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014fac254a19ac28f4af",
    "number": 1710,
    "body": "The `compile_pip_requirements` rule promotes having `requirements.in` files describe python dependencies. This change aims to allow these files to be the source of truth for constraints by allowing the `py_wheel` rule to use them for adding requirements to a wheel. This reduces overhead in needing to maintain two lists of equal information (one as he `.in` and the other as starlark data).",
    "head_branch": "requires",
    "is_a_fork": true,
    "comments": [
      "Relates to https://github.com/bazelbuild/rules_python/pull/644",
      "@aignas ready for another pass! 😄 ",
      "@aignas ready for another pass! 😄 ",
      "> LGTM, minus the changelog part\r\n\r\nBut I added a change log! What do I need to do differently 😅 \r\n\r\nedit: see https://github.com/bazelbuild/rules_python/pull/1710#discussion_r1462578451",
      "@aignas Curious that all the checks pass with auto-merge enabled but the PR did not merge 😢 \r\n\r\nEdit: Aaaaah! Merge queue!",
      "@aignas I rebased since I didn't understand what was up with the merge queue."
    ],
    "commit_messages": [
      "feat(py_wheel): Added `requires_file` and `extra_requires_files` attrs (#1710)\n\nThe `compile_pip_requirements` rule promotes having `requirements.in`\nfiles describe python dependencies. This change aims to allow these\nfiles to be the source of truth for constraints by allowing the\n`py_wheel` rule to use them for adding requirements to a wheel. This\nreduces overhead in needing to maintain two lists of equal information\n(one as he `.in` and the other as starlark data)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621014fac254a19ac28f4b0",
    "number": 1709,
    "body": "On macOS, some older versions of Python leak __PYVENV_LAUNCHER__ into\r\nthe interpreter's environment variables. Starting with Python 3.11, this\r\ncauses problems with Python being able to start correctly when launched\r\nfrom the Python bootstrap template. This change introduces a workaround\r\nto prevent the problematic environment variable from leaking into\r\nlaunched subprocesses.\r\n\r\nI've verified this problem exists with the version of Python 3.7\r\nincluded with Xcode, and there are reports of it also being an issue\r\nwith the Python 3.8 included with Xcode. Later versions of Python have\r\nfixed this.\r\n\r\nContext:\r\n- https://issues.pigweed.dev/310293060\r\n- https://github.com/xonsh/xonsh/issues/3576#issuecomment-629013991\r\n- https://github.com/pypa/virtualenv/issues/1458\r\n",
    "head_branch": "fix_bootstrap_on_older_macos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: fix launching Python 3.11 from <3.8 on macOS (#1709)\n\nOn macOS, some older versions of Python leak __PYVENV_LAUNCHER__ into\nthe interpreter's environment variables. Starting with Python 3.11, this\ncauses problems with Python being able to start correctly when launched\nfrom the Python bootstrap template. This change introduces a workaround\nto prevent the problematic environment variable from leaking into\nlaunched subprocesses.\n\nI've verified this problem exists with the version of Python 3.7\nincluded with Xcode, and there are reports of it also being an issue\nwith the Python 3.8 included with Xcode. Later versions of Python have\nfixed this.\n\nContext:\n- https://issues.pigweed.dev/310293060\n- https://github.com/xonsh/xonsh/issues/3576#issuecomment-629013991\n- https://github.com/pypa/virtualenv/issues/1458"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210150ac254a19ac28f4b1",
    "number": 1705,
    "body": "Bazel 7.0.1 has a bug where lockfiles can cause a bogus error about cyclic dependencies. Removing the lockfile or disabling the lockfiles prevents it from triggering. We aren't\r\nusing lockfiles anyways.\r\n\r\nThis should make CI happy, which uses 7.0.1 in some configurations. Local development\r\nisn't impacted because .bazelversion specifies 7.0.0\r\n\r\nSee https://github.com/bazelbuild/bazel/issues/20942",
    "head_branch": "disable.lockfile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: workaround cyclic dependency bzlmod bug by disabling lockfiles (#1705)\n\nBazel 7.0.1 has a bug where lockfiles can cause a bogus error about\ncyclic dependencies. Removing the lockfile or disabling the lockfiles\nprevents it from triggering. We aren't\nusing lockfiles anyways.\n\nThis should make CI happy, which uses 7.0.1 in some configurations.\nLocal development\nisn't impacted because .bazelversion specifies 7.0.0\n\nSee https://github.com/bazelbuild/bazel/issues/20942"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210151ac254a19ac28f4b2",
    "number": 1704,
    "body": "This upstreams a couple trivial Google patches to make rules_python more compatible with some Google-internal changes.\r\n\r\n* Use list(dict) instead of dict.keys(). This is because some bzl files are run through a Python-based testing framework, and dict.keys() can't be concatenated to a list in Python 3.\r\n* Expand visibility to all of rules_python instead of just the python subdirectory. This makes some patches that use internals easier to maintain, but also makes the visiblity more in line with the rest of the project (where `//:__subpackages__` is used for convenience, as it avoids having to change visibility frequently, but still prevents public dependencies).",
    "head_branch": "upstream.patches",
    "is_a_fork": true,
    "comments": [
      "It looks like CI is unhappy because of some issue with 7.0.1 and the pystar implementation. Ugh. This is gonna be annoying to fix...\r\n\r\nI'm just going to force-merge past this. The rest of CI OK."
    ],
    "commit_messages": [
      "refactor: broaden visibility and use list() instead of keys() (#1704)\n\nThis upstreams a couple trivial Google patches to make rules_python more\r\ncompatible with some Google-internal changes.\r\n\r\n* Use list(dict) instead of dict.keys(). This is because some bzl files\r\nare run through a Python-based testing framework, and dict.keys() can't\r\nbe concatenated to a list in Python 3.\r\n* Expand visibility to all of rules_python instead of just the python\r\nsubdirectory. This makes some patches that use internals easier to\r\nmaintain, but also makes the visiblity more in line with the rest of the\r\nproject (where `//:__subpackages__` is used for convenience, as it\r\navoids having to change visibility frequently, but still prevents public\r\ndependencies)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210152ac254a19ac28f4b3",
    "number": 1700,
    "body": "Encountering this error when running on a CI VM: https://stackoverflow.com/questions/11835833/why-would-shutil-copy-raise-a-permission-exception-when-cp-doesnt\r\n\r\nPer the accepted solution, this solves the problem and doesn't seem to impact functionality. Is this consistent with the intent here?\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "See https://github.com/bazelbuild/rules_python/pull/1053/commits/c6eb1af9ab8a0b2aca5c99e5d22a39ed8cf55451 from #1053, which is using `shutil.copyfile` instead of `shutil.copy`.\r\n\r\nIf you would still like to contribute in this area, changing the PR to add a comment why it is `shutil.copy` instead of `shutil.copyfile` would be really appreciated!",
      "On the other hand, let's close this PR, but please feel free to create a separate PR to improve docs or provide a better solution than the existing shutil.copy given this context."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210153ac254a19ac28f4b4",
    "number": 1699,
    "body": "This makes the base rules use the Starlark code in rules_python\r\n(\"pystar\") instead of what is built into Bazel 7.\r\n\r\nThe pystar implementation can be disabled by setting\r\n`RULES_PYTHON_ENABLE_PYSTAR=0` in your environment or using\r\n`--action_env`.\r\n\r\nEarlier versions of Bazel continue to use the rules built into Bazel\r\nregardless (the new implementation requires special APIs that only Bazel\r\n7 has).\r\n\r\nWork towards https://github.com/bazelbuild/rules_python/issues/1069",
    "head_branch": "pystar.enabled.by.default",
    "is_a_fork": true,
    "comments": [
      "Doh, forgot the changelog entry",
      "posterity, from maintainer's meeting:\r\n\r\nThe plan for this PR is to make it its own release. So immediately after the next release, I'll merge this and then do a subsequent release. This is to help decouple it from the other fixes/features/breaking-changes that have been going in. I'm not _too_ worried about regressions (Bazel 7 uses the new starlark impl this is based upon; Google has been using the starlark impl for many months and the rules_python variant for several weeks), but I'd rather be more cautious in this particular case."
    ],
    "commit_messages": [
      "feat: enable rules_python Starlark implemention by default for Bazel 7+ (#1699)\n\nThis makes the base rules use the Starlark code in rules_python\n(\"pystar\") instead of what is built into Bazel 7.\n\nThe pystar implementation can be disabled by setting\n`RULES_PYTHON_ENABLE_PYSTAR=0` in your environment or using\n`--action_env`.\n\nEarlier versions of Bazel continue to use the rules built into Bazel\nregardless (the new implementation requires special APIs that only Bazel\n7 has).\n\nWork towards https://github.com/bazelbuild/rules_python/issues/1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210153ac254a19ac28f4b5",
    "number": 1698,
    "body": "Respecting it for earlier versions was only done for testing purposes. The implementation requires the `py_internal` object, which only exists on Bazel 7 and higher.\r\n\r\nWork towards https://github.com/bazelbuild/rules_python/issues/1069",
    "head_branch": "pystar.only.bazel7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal(pystar): Only respect RULES_PYTHON_ENABLE_PYSTAR env var for Bazel 7+ (#1698)\n\nRespecting it for earlier versions was only done for testing purposes.\nThe implementation requires the `py_internal` object, which only exists\non Bazel 7 and higher.\n\nWork towards https://github.com/bazelbuild/rules_python/issues/1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210154ac254a19ac28f4b6",
    "number": 1697,
    "body": "This basically upstreams part of Google-internal patches for building native dep DSOs.\r\n\r\nThe APIs it uses are only available on Bazel rolling, but the code paths that activate them aren't enabled in rules_python.",
    "head_branch": "upstream.cc.build.info.api",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal: update native deps and linkstamp API updates to Bazel rolling APIs (#1697)\n\nThis basically upstreams part of Google-internal patches for building\nnative dep DSOs.\n\nThe APIs it uses are only available on Bazel rolling, but the code paths\nthat activate them aren't enabled in rules_python."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210155ac254a19ac28f4b7",
    "number": 1696,
    "body": "This allows better interoperability between toolchains and the wheels\r\nbuilt by the `whl_library`, as wheels are usually compatible across all\r\nof the python patch versions.\r\n",
    "head_branch": "refactor/use-minor-version-alias-in-pip",
    "is_a_fork": true,
    "comments": [
      "CI failure might be legit? it's a bit weird because it says there's a failure, but I don't see any test failure logs. Seems related to...the coverage command...?\r\n\r\nIt looks like env markers _could_ have a micro-version level of specificity, but I don't think I've seen that in practice. Does a wheel's metadata have that detail?\r\n\r\nI'm just musing out loud if this will ever, practically speaking, need to regain the ability to have a more specific version (e.g. `select({\":3.10\": ..., \":3.10.1\": ...})`",
      "> CI failure might be legit? it's a bit weird because it says there's a failure, but I don't see any test failure logs. Seems related to...the coverage command...?\r\n> \r\n> It looks like env markers _could_ have a micro-version level of specificity, but I don't think I've seen that in practice. Does a wheel's metadata have that detail?\r\n> \r\n> I'm just musing out loud if this will ever, practically speaking, need to regain the ability to have a more specific version (e.g. `select({\":3.10\": ..., \":3.10.1\": ...})`\r\n\r\nThe wheels are built for py3 (pure python), abi3 (subset of cpython abi, which is binary compatible with all cpython 3 versions), and cpxy, where there is no micro specificity. I have not seen any micro level specificity out there. That said, I think I once saw a python metadata file that excluded a particular micro version as a supported version, but I cannot remember where it was and if my brain is not making stuff up.",
      "Ok, I think I know what's going on. This exposed an interesting misconfiguration -> surprising behavior -> bug. The basic issue is the `:is_3.8` condition is matching the default flag value (3.8.10), which causes the 3.8 select path to be followed, which picks websockets 3.8.\r\n\r\nWhy was this passing before but failing now? Because all of these were true:\r\n1. The flag's default was 3.8.10\r\n2. The version-unaware rules will inherit the flag value (the default in this case)\r\n3. The MINOR_MAPPING maps 3.8 to 3.8.18\r\n4. the select condition was looking for _exactly_ 3.8.18.\r\n\r\nThe 3.8.10 value comes from `TOOL_VERSIONS.keys()[0]`. The 3.8.18 value comes from `MINOR_MAPPING[\"3.8\"]`.\r\n\r\nUnrolling things, the code looked like this:\r\n```\r\n# config.bzl\r\nstring_flag(default=\"3.8.10\", ...) # from TOOL_VERSIONS.keys()[0]\r\n# MODULE\r\npython.toolchain(python_version=\"3.8\") # turns into 3.8.18 from MINOR_MAPPING\r\npython.toolchain(python_version=\"3.9\", is_default=True)\r\n\r\n# bazel query --output=build @pypi//websockets:pkg\r\nalias(..., select({\r\n  \"@rules_python//python/config_settings:is_python_3.8.18\": \"...websockets 38...\"\r\n  \"//conditions:default\": \"..websockets 39...\"\r\n})\r\n```\r\n\r\nWhen you build a non-version aware target, it'll use `--python_version=3.8.10` (the default). When you build version aware target, it'll turn into 3.8.18.\r\n\r\nIn the new code, those select conditions match all 3.8.x.\r\n\r\nEach piece here is working as intended. The bug is really that the default flag value is set to a value that isn't the _actual_ default python. Fixing that is out of scope for this PR (I'm also not sure we can fix this without bzlmod). I think the best we can do is just set the default to some value that won't match. Empty string seems fine? It's that or a special value like \"default\"; not sure which is better. Mild preference for empty string (seems closer to \"undefined\")",
      "Thinking about it more, I think that bug is just in this PR. In order to trigger it prior to this PR, you would need to have somehow have a version-unaware build generate the 3.8.10 select condition -- but the MINOR_MAPPING would prevent that. Another way would be to have a 3.8.10 config condition, but being as how activating that version is rather hard (you'd have to patch I think), that seems unlikely. Plus its an older version of Python that is no longer supported."
    ],
    "commit_messages": [
      "fix(bzlmod): use X.Y select for the hub repo (#1696)\n\nThis allows better interoperability between toolchains and the wheels\nbuilt by the `whl_library`, as wheels are usually compatible across all\nof the python patch versions.\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210156ac254a19ac28f4b8",
    "number": 1695,
    "body": "The minimum version for the bzlmod example is controlled by the CI config, which uses 6.4",
    "head_branch": "rm.bzlmod.bazelversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: don't force bzlmod example to use Bazel 6.0 (#1695)\n\nThe minimum version for the bzlmod example is controlled by the CI\nconfig, which uses 6.4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210157ac254a19ac28f4b9",
    "number": 1693,
    "body": "With this PR we can deterministically parse the METADATA and generate a\r\n`BUILD.bazel` file using the config settings introduced in #1555. Let's\r\nimagine we had a `requirements.txt` file that used only wheels, we could\r\nuse the host interpreter to parse the wheel metadata for all the target\r\nplatforms and use the version aware toolchain at runtime. This potentially\r\nunlocks more clever layouts of the `bzlmod` hub repos explored in #1625\r\nwhere we could have a single `whl_library` instance for all versions within\r\na single hub repo.\r\n\r\nWork towards #1643.\r\n",
    "head_branch": "feat/python-impl-independent-2",
    "is_a_fork": true,
    "comments": [
      "Sorry, removed from queue -- just want to double check something about the unit tests."
    ],
    "commit_messages": [
      "feat: support parsing whl METADATA on any python version (#1693)\n\nWith this PR we can deterministically parse the METADATA and generate a\n`BUILD.bazel` file using the config settings introduced in #1555. Let's\nimagine we had a `requirements.txt` file that used only wheels, we could\nuse the host interpreter to parse the wheel metadata for all the target\nplatforms and use the version aware toolchain at runtime. This\npotentially\nunlocks more clever layouts of the `bzlmod` hub repos explored in #1625\nwhere we could have a single `whl_library` instance for all versions\nwithin\na single hub repo.\n\nWork towards #1643."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210158ac254a19ac28f4ba",
    "number": 1692,
    "body": "With this PR we prepare the dependency resolution machinery to support other\nthan host python versions. This may make it possible to generate select\nstatements based on the version but we target this usecase as it requires\nlittle code to be changed and once wired to the starlark code could be of use.\nCreating this PR for discussion so that we can decide on a suitable interface.\n\nIf this change was wired to `whl_library`, we could generate correct\n`BUILD.bazel` files for `whl` distributions when passing `/usr/bin/python3` as\nthe interpreter to the `pip_parse` repository rule or its `bzlmod` equivalent.\nThis means that users would only need to fetch a single `_host` toolchain repo\nor none at all if they are using the system interpreter for the `whl_library`\ngeneration.\n\nI also see this useful for eventual `select` statements involving the Python\ntoolchain ABI and the platform and selecting the right dependencies based on\nthat, which would be useful in downloading the `tomli` library only for Python\nversions that don't have the native `toml` support. This could allow us to\ndownload a pure python package once for all python interpreter versions making\nthe repository fetching faster.\n\nWork towards #1643.\n\nTODO:\n- [ ] Discuss on how we could expose the desired version of the python interpreter.\n  Should we add an optional `python_version` argument to the `whl_library` rules? Should\n  it be a `string_list`? Or should we have the `experimental_target_platforms` extended\n  to accept strings like `cp_3_9_0_linux_aarch64`?\n",
    "head_branch": "feat/python-impl-independent-2",
    "is_a_fork": true,
    "comments": [
      "Tried doing a stacked PR and this got auto-closed when the upstream PR's branch got merged in #1691. I'll reopen this as a separate PR, because I don't seem to be able to reopen this one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210158ac254a19ac28f4bb",
    "number": 1691,
    "body": "Summary:\n- refactor: add an OS.interpreter constructor\n- refactor: add an Arch.interpreter constructor\n- test: add a specializations tests\n- refactor: simplify sorting implementation\n- refactor: introduce `__str__` to enums\n\nMinor cleanup that will be useful to make this codebase\nwork for multiple Python versions.\n\nWork towards #1643.\n",
    "head_branch": "feat/python-impl-independent-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor(internal): simplify and cleanup dependency resolution (#1691)\n\nSummary:\n- refactor: add an OS.interpreter constructor\n- refactor: add an Arch.interpreter constructor\n- test: add a specializations tests\n- refactor: simplify sorting implementation\n- refactor: introduce `__str__` to enums\n\nMinor cleanup that will be useful to make this codebase\nwork for multiple Python versions.\n\nWork towards #1643."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210159ac254a19ac28f4bc",
    "number": 1688,
    "body": "Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/releases\">jinja2's releases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a href=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>. You are affected if you are using <code>xmlattr</code> and passing user input as attribute keys.</li>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent templates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a> release version 3.1.3</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a> skip test pypi</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a> update pre-commit hooks</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a> Make nested-trans-block exceptions nicer (<a href=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/jinja/compare/3.1.2...3.1.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/docs/sphinx/jinja2-3.1.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump jinja2 from 3.1.2 to 3.1.3 in /docs/sphinx (#1688)\n\nBumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/releases\">jinja2's\nreleases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a\nhref=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>.\nYou are affected if you are using <code>xmlattr</code> and passing user\ninput as attribute keys.</li>\n<li>Changes: <a\nhref=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a\nhref=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's\nchangelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent\ntemplates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces.\nGHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans\n%}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a>\nrelease version 3.1.3</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a>\nskip test pypi</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a>\nupdate pre-commit hooks</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a>\nMake nested-trans-block exceptions nicer (<a\nhref=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a>\nMake nested-trans-block exceptions nicer</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a>\nMerge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a>\nxmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/pallets/jinja/compare/3.1.2...3.1.3\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621015aac254a19ac28f4bd",
    "number": 1687,
    "body": "Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/releases\">jinja2's releases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a href=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>. You are affected if you are using <code>xmlattr</code> and passing user input as attribute keys.</li>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent templates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a> release version 3.1.3</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a> skip test pypi</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a> update pre-commit hooks</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a> Make nested-trans-block exceptions nicer (<a href=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/jinja/compare/3.1.2...3.1.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/jinja2-3.1.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump jinja2 from 3.1.2 to 3.1.3 in /examples/bzlmod (#1687)\n\nBumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/releases\">jinja2's\nreleases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a\nhref=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>.\nYou are affected if you are using <code>xmlattr</code> and passing user\ninput as attribute keys.</li>\n<li>Changes: <a\nhref=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a\nhref=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's\nchangelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent\ntemplates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces.\nGHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans\n%}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a>\nrelease version 3.1.3</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a>\nskip test pypi</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a>\nupdate pre-commit hooks</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a>\nMake nested-trans-block exceptions nicer (<a\nhref=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a>\nMake nested-trans-block exceptions nicer</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a>\nMerge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a>\nxmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/pallets/jinja/compare/3.1.2...3.1.3\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621015bac254a19ac28f4be",
    "number": 1686,
    "body": "Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/releases\">jinja2's releases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a href=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>. You are affected if you are using <code>xmlattr</code> and passing user input as attribute keys.</li>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent templates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a> release version 3.1.3</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a> skip test pypi</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a> update pre-commit hooks</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a> Make nested-trans-block exceptions nicer (<a href=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/jinja/compare/3.1.2...3.1.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse/jinja2-3.1.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump jinja2 from 3.1.2 to 3.1.3 in /examples/pip_parse (#1686)\n\nBumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/releases\">jinja2's\nreleases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a\nhref=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>.\nYou are affected if you are using <code>xmlattr</code> and passing user\ninput as attribute keys.</li>\n<li>Changes: <a\nhref=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a\nhref=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's\nchangelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent\ntemplates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces.\nGHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans\n%}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a>\nrelease version 3.1.3</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a>\nskip test pypi</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a>\nupdate pre-commit hooks</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a>\nMake nested-trans-block exceptions nicer (<a\nhref=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a>\nMake nested-trans-block exceptions nicer</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a>\nMerge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a>\nxmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/pallets/jinja/compare/3.1.2...3.1.3\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621015cac254a19ac28f4bf",
    "number": 1685,
    "body": "Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/releases\">jinja2's releases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a href=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>. You are affected if you are using <code>xmlattr</code> and passing user input as attribute keys.</li>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent templates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a> release version 3.1.3</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a> skip test pypi</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a> update pre-commit hooks</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a> Make nested-trans-block exceptions nicer (<a href=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/jinja/compare/3.1.2...3.1.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/build_file_generation/jinja2-3.1.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621015cac254a19ac28f4c0",
    "number": 1684,
    "body": "Bumps [jinja2](https://github.com/pallets/jinja) from 3.0.3 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/releases\">jinja2's releases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a href=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>. You are affected if you are using <code>xmlattr</code> and passing user input as attribute keys.</li>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n<h2>3.1.2</h2>\n<p>This is a fix release for the <a href=\"https://github.com/pallets/jinja/releases/tag/3.1.0\">3.1.0</a> feature release.</p>\n<ul>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-2\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-2</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/13?closed=1\">https://github.com/pallets/jinja/milestone/13?closed=1</a></li>\n</ul>\n<h2>3.1.1</h2>\n<ul>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-1\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-1</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/12?closed=1\">https://github.com/pallets/jinja/milestone/12?closed=1</a></li>\n</ul>\n<h2>3.1.0</h2>\n<p>This is a feature release, which includes new features and removes previously deprecated features. The 3.1.x branch is now the supported bugfix branch, the 3.0.x branch has become a tag marking the end of support for that branch. We encourage everyone to upgrade, and to use a tool such as <a href=\"https://pypi.org/project/pip-tools/\">pip-tools</a> to pin all dependencies and control upgrades. We also encourage upgrading to MarkupSafe 2.1.1, the latest version at this time.</p>\n<ul>\n<li>Changes: <a href=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-0\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-0</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/jinja/milestone/8?closed=1\">https://github.com/pallets/jinja/milestone/8?closed=1</a></li>\n<li>MarkupSafe changes: <a href=\"https://markupsafe.palletsprojects.com/en/2.1.x/changes/#version-2-1-1\">https://markupsafe.palletsprojects.com/en/2.1.x/changes/#version-2-1-1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent templates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n<h2>Version 3.1.2</h2>\n<p>Released 2022-04-28</p>\n<ul>\n<li>Add parameters to <code>Environment.overlay</code> to match <code>__init__</code>.\n:issue:<code>1645</code></li>\n<li>Handle race condition in <code>FileSystemBytecodeCache</code>. :issue:<code>1654</code></li>\n</ul>\n<h2>Version 3.1.1</h2>\n<p>Released 2022-03-25</p>\n<ul>\n<li>The template filename on Windows uses the primary path separator.\n:issue:<code>1637</code></li>\n</ul>\n<h2>Version 3.1.0</h2>\n<p>Released 2022-03-24</p>\n<ul>\n<li>\n<p>Drop support for Python 3.6. :pr:<code>1534</code></p>\n</li>\n<li>\n<p>Remove previously deprecated code. :pr:<code>1544</code></p>\n<ul>\n<li><code>WithExtension</code> and <code>AutoEscapeExtension</code> are built-in now.</li>\n<li><code>contextfilter</code> and <code>contextfunction</code> are replaced by\n<code>pass_context</code>. <code>evalcontextfilter</code> and\n<code>evalcontextfunction</code> are replaced by <code>pass_eval_context</code>.\n<code>environmentfilter</code> and <code>environmentfunction</code> are replaced\nby <code>pass_environment</code>.</li>\n<li><code>Markup</code> and <code>escape</code> should be imported from MarkupSafe.</li>\n<li>Compiled templates from very old Jinja versions may need to be\nrecompiled.</li>\n<li>Legacy resolve mode for <code>Context</code> subclasses is no longer\nsupported. Override <code>resolve_or_missing</code> instead of</li>\n</ul>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a> release version 3.1.3</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a> skip test pypi</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a> use trusted publishing</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a> update pre-commit hooks</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a> Make nested-trans-block exceptions nicer (<a href=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a href=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/jinja/compare/3.0.3...3.1.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.0.3&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n",
    "head_branch": "dependabot/pip/tests/integration/pip_repository_entry_points/jinja2-3.1.3",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate"
    ],
    "commit_messages": [
      "build(deps): bump jinja2 from 3.0.3 to 3.1.3 in /tests/integration/pip_repository_entry_points (#1684)\n\nBumps [jinja2](https://github.com/pallets/jinja) from 3.0.3 to 3.1.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/releases\">jinja2's\nreleases</a>.</em></p>\n<blockquote>\n<h2>3.1.3</h2>\n<p>This is a fix release for the 3.1.x feature branch.</p>\n<ul>\n<li>Fix for <a\nhref=\"https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95\">GHSA-h5c8-rqwp-cp95</a>.\nYou are affected if you are using <code>xmlattr</code> and passing user\ninput as attribute keys.</li>\n<li>Changes: <a\nhref=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>\n<li>Milestone: <a\nhref=\"https://github.com/pallets/jinja/milestone/15?closed=1\">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>\n</ul>\n<h2>3.1.2</h2>\n<p>This is a fix release for the <a\nhref=\"https://github.com/pallets/jinja/releases/tag/3.1.0\">3.1.0</a>\nfeature release.</p>\n<ul>\n<li>Changes: <a\nhref=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-2\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-2</a></li>\n<li>Milestone: <a\nhref=\"https://github.com/pallets/jinja/milestone/13?closed=1\">https://github.com/pallets/jinja/milestone/13?closed=1</a></li>\n</ul>\n<h2>3.1.1</h2>\n<ul>\n<li>Changes: <a\nhref=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-1\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-1</a></li>\n<li>Milestone: <a\nhref=\"https://github.com/pallets/jinja/milestone/12?closed=1\">https://github.com/pallets/jinja/milestone/12?closed=1</a></li>\n</ul>\n<h2>3.1.0</h2>\n<p>This is a feature release, which includes new features and removes\npreviously deprecated features. The 3.1.x branch is now the supported\nbugfix branch, the 3.0.x branch has become a tag marking the end of\nsupport for that branch. We encourage everyone to upgrade, and to use a\ntool such as <a href=\"https://pypi.org/project/pip-tools/\">pip-tools</a>\nto pin all dependencies and control upgrades. We also encourage\nupgrading to MarkupSafe 2.1.1, the latest version at this time.</p>\n<ul>\n<li>Changes: <a\nhref=\"https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-0\">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-0</a></li>\n<li>Milestone: <a\nhref=\"https://github.com/pallets/jinja/milestone/8?closed=1\">https://github.com/pallets/jinja/milestone/8?closed=1</a></li>\n<li>MarkupSafe changes: <a\nhref=\"https://markupsafe.palletsprojects.com/en/2.1.x/changes/#version-2-1-1\">https://markupsafe.palletsprojects.com/en/2.1.x/changes/#version-2-1-1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pallets/jinja/blob/main/CHANGES.rst\">jinja2's\nchangelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.1.3</h2>\n<p>Released 2024-01-10</p>\n<ul>\n<li>Fix compiler error when checking if required blocks in parent\ntemplates are\nempty. :pr:<code>1858</code></li>\n<li><code>xmlattr</code> filter does not allow keys with spaces.\nGHSA-h5c8-rqwp-cp95</li>\n<li>Make error messages stemming from invalid nesting of <code>{% trans\n%}</code> blocks\nmore helpful. :pr:<code>1918</code></li>\n</ul>\n<h2>Version 3.1.2</h2>\n<p>Released 2022-04-28</p>\n<ul>\n<li>Add parameters to <code>Environment.overlay</code> to match\n<code>__init__</code>.\n:issue:<code>1645</code></li>\n<li>Handle race condition in <code>FileSystemBytecodeCache</code>.\n:issue:<code>1654</code></li>\n</ul>\n<h2>Version 3.1.1</h2>\n<p>Released 2022-03-25</p>\n<ul>\n<li>The template filename on Windows uses the primary path separator.\n:issue:<code>1637</code></li>\n</ul>\n<h2>Version 3.1.0</h2>\n<p>Released 2022-03-24</p>\n<ul>\n<li>\n<p>Drop support for Python 3.6. :pr:<code>1534</code></p>\n</li>\n<li>\n<p>Remove previously deprecated code. :pr:<code>1544</code></p>\n<ul>\n<li><code>WithExtension</code> and <code>AutoEscapeExtension</code> are\nbuilt-in now.</li>\n<li><code>contextfilter</code> and <code>contextfunction</code> are\nreplaced by\n<code>pass_context</code>. <code>evalcontextfilter</code> and\n<code>evalcontextfunction</code> are replaced by\n<code>pass_eval_context</code>.\n<code>environmentfilter</code> and <code>environmentfunction</code> are\nreplaced\nby <code>pass_environment</code>.</li>\n<li><code>Markup</code> and <code>escape</code> should be imported from\nMarkupSafe.</li>\n<li>Compiled templates from very old Jinja versions may need to be\nrecompiled.</li>\n<li>Legacy resolve mode for <code>Context</code> subclasses is no longer\nsupported. Override <code>resolve_or_missing</code> instead of</li>\n</ul>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1\"><code>d9de4bb</code></a>\nrelease version 3.1.3</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc\"><code>50124e1</code></a>\nskip test pypi</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b\"><code>9ea7222</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/da703f7aae36b1e88baaa20de334d7ff6378fdde\"><code>da703f7</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/bce174692547464512383ec40e0f8338b8811983\"><code>bce1746</code></a>\nuse trusted publishing</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7277d8068be593deab3555c7c14f974ada373af1\"><code>7277d80</code></a>\nupdate pre-commit hooks</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/5c8a10522421270f66376a24ec8e0d6812bc4b14\"><code>5c8a105</code></a>\nMake nested-trans-block exceptions nicer (<a\nhref=\"https://redirect.github.com/pallets/jinja/issues/1918\">#1918</a>)</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895\"><code>19a55db</code></a>\nMake nested-trans-block exceptions nicer</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7\"><code>7167953</code></a>\nMerge pull request from GHSA-h5c8-rqwp-cp95</li>\n<li><a\nhref=\"https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23\"><code>7dd3680</code></a>\nxmlattr filter disallows keys with spaces</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/pallets/jinja/compare/3.0.3...3.1.3\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.0.3&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621015dac254a19ac28f4c1",
    "number": 1683,
    "body": "Sorry about #1681 - I had uploaded an older version. This one contains the correct behavior, in line with what I had written.\r\n\r\nThe goal is to inherit visibility from the BUILD file's default_visibility (or whatever defaults exist higher in the tree).\r\n\r\nI'm happy to discuss the issue further at #1682 if you have apprehensions about this change.",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Note that every failing test right now is for the same reason. They look like this: \r\n\r\n              \tpy_binary(\r\n              \t    name = \"main\",\r\n              \t    srcs = [\"main.py\"],\r\n            - \t    visibility = [\"//:__subpackages__\"],\r\n              \t    deps = [\"@pip//:pandas\"],\r\n              \t)\r\n\r\nThis is because the auto-generated visibility lines aren't produced by this PR. That's the intended behavior, but `grep`-ing for the test names didn't turn anything up. Otherwise, I'd update the tests myself.",
      "Let me know if we can close this since #1784 got merged. i think that should address your use-case."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621015eac254a19ac28f4c2",
    "number": 1681,
    "body": "This PR causes Gazelle to not write `visibility` lines for generated rules.\r\n\r\n# Context\r\n\r\nThis is necessary in monorepo situations where there are multiple `# gazelle:python_root` directives used, e.g. in the structure below:\r\n\r\n```\r\nROOT\r\n    proj_1\r\n        src  # is a python root and depends on proj_2\r\n            foo\r\n    pro_2\r\n        src  # is a python root\r\n            bar  ← The visibility here will be incorrect; proj_1 cannot see this.\r\n```\r\n\r\nAs it stands, we write a narrowly scoped `visibility` attribute for every generated rule; the visibility is `//{python-root-package}:__subpackages__`. Let's not!\r\n\r\n---\r\n\r\n# Alternatives\r\n\r\nTwo considered alternatives were:\r\n* Have the Gazelle Python extension respect the `# gazelle:default_visibility` directive. This is probably correct in the long run, but I'm not Go-literate.\r\n* Set all visibilities to `//visibility:public`. This achieves correct behavior but gives less control than the current PR. Instead of respecting any default visibility stanzas, it forces the entirety to be public.\r\n\r\n---\r\n\r\n# Preserving current behavior\r\n\r\nIf someone wants the current behavior, it can still be achieved by setting the following in Python root's BUILD file:\r\n```python\r\npackage(\r\n    default_visibility = [\"//\" + package_name() + \":__subpackages__\"],\r\n)\r\n```\r\n\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1681/checks?check_run_id=20366582963) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "This is very tragic in many ways. Do you want to have less working setting visibility and then set everything to public? You are defeating the purpose of the visibility attribute and wanting everyone to defeat it with you!\r\n\r\nOpen an issue first to discuss the alternatives, but setting everything to public is most likely not going to happen.",
      "I absolutely don't want to set everything to `//visibility:public`! But in the base implementation, visibilities are written per-rule, using a hardcoded value in Go. There's no way to inherit defaults from the package or up the tree.\r\n\r\nIf I have a rule like this in `proj_2`, it should be respected:\r\n\r\n```\r\npackage(\r\n    default_visibility = [\"proj_1:__subpackages__\", \"proj_2:__subpackages__\"],\r\n)\r\n```\r\nThis isn't public: `proj_3` and `proj_4` can't see this.\r\n\r\nI think that not writing a `visibility` attribute on each generated rule is safer here than setting to public.",
      "Okay, I see our problem. I had uploaded an older commit. The latest version does what the explanation above describes."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621015fac254a19ac28f4c3",
    "number": 1680,
    "body": "When we use the latest `bazel` release in the `rules_python`\r\nmodule, then the lock file gets created, but I am not sure if\r\nwe should commit it in. Since the lock file is very useful\r\nfor local development as it speeds up dependency refetching,\r\nthis PR disables it as advised in the issue below. Whilst at\r\nit, the `bzlmod` example also removes it for smaller diffs\r\nwhen we develop extensions.\r\n\r\nSee bazelbuild/bazel#20369\r\n",
    "head_branch": "chore/remove-and-ignore-module-lock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: remove MODULE.bazel.lock and ignore it (#1680)\n\nWhen we use the latest `bazel` release in the `rules_python`\nmodule, then the lock file gets created, but I am not sure if\nwe should commit it in. Since the lock file is very useful\nfor local development as it speeds up dependency refetching,\nthis PR disables it as advised in the issue below. Whilst at\nit, the `bzlmod` example also removes it for smaller diffs\nwhen we develop extensions.\n\nSee bazelbuild/bazel#20369"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210160ac254a19ac28f4c4",
    "number": 1678,
    "body": "In bzlmod, the name of the `@rules_python` repo directory name in the runfiles tree changed from simply `rules_python` to `rules_python~VERSION`, where \"VERSION\" includes the module version number and some other parts. This broke `import rules_python`. Worse, the name isn't knowable in advance and isn't a valid Python package name, so making it importable is very difficult. This makes it harder to switch to using bzlmod.\r\n\r\nAs a short term solution, we made `import python` work, which works but (1) requires users to update their code, and (2) requires us to take the more generic \"python\" top-level name, neither of which are things we want.\r\n\r\nTo fix, create an importable directory named \"rules_python\" and set it up so that `import rules_python.python.runfiles` works.\r\n\r\nThis importable `rules_python` directory is created under a `src` sub-directory so that we can better control our public interface, and, eventually, reduce the number of sys.path entries needed to just that single `src` directory.\r\n\r\nFor now, it's kept simple: `rules_python` just imports `pythons.runfiles` and patches up sys.modules to make it appear as-if it was an actual sub-module. This is done so that `import python.runfiles` still works and looks the same (e.g. same `__file__` etc).\r\n\r\nThis unfortunately means an extra entry on sys.path (`$repoRoot` is added by `//python/runfiles:runfiles`; `$repoRoot/src` is added by `//src/rules_python:__init__`). Fixing that can be done in a future change by moving the files around and doing some different import patching.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1679\r\n\r\nTODO: Update changelog",
    "head_branch": "runfiles.rulespython.import.name",
    "is_a_fork": true,
    "comments": [
      "Sending this out a bit earlier to get feedback. Hence no tests. This was inspired by a comment you (@aignas) made in a a recent PR.\r\n\r\nAnother approach I considered was `__path__.append(dirnames(python.__file__))`. I didn't really like that because it meant `import rules_python.python; import python; rule_python.python is python` was False, i.e. the same code gets imported twice.\r\n\r\nI'm not sure how much we should worry about the location of the implementation. I could just move everything under srcs/rules_python, and then setup shims and aliases for `import python` to work. I think this would be OK? I'm half tempted to just do that in this PR.",
      "I was also looking at namespace packages and if those would work, but I don't think they will or are a good fit. I was looking into this because having rules_python be a namespace package seems like a good idea -- it would give us flexibility to control sub-units of libraries, should we need it.\r\n\r\nFirst, implicit namespace creation would ruin the whole thing, I think. We'll turn that off, eventually, but even if it was off, I think we need a separate sys.path entry for each \"distribution\" ? This part isn't really clear to me.",
      "Agree with @aignas, I think we need to first decide if we want to ship this as python package (via PyPI) or a bazel package (via bzlmod), then decide if it's confusing or not in terms of how the user would import the library into their code.",
      "Out of interest, what are the other language rules doing for Runfiles support libraries these days? I'm wondering what rules_jvm_external rules_go etc are doing. ",
      "> I think we need to first decide if we want to ship this as python package (via PyPI) or a bazel package (via bzlmod), then decide if it's confusing or not in terms of how the user would import the library into their code.\r\n\r\nUnfortunately, that ship has pretty much sailed, at least for now. Both styles of dependency are in used today. That `import rules_python.python.runfiles` works in workspace, but not bzlmod, is essentially a regression (this was reported back as early as April 2023 in the bazel repo).\r\n\r\nI do agree we should try to figure out a coherent story here, though.",
      "I guess I think that allowing to consume the `runfiles` via `@rules_python//<some-label>` and the PyPI package should be allowed, but in the distant (or maybe not-so) I would love to see the same Python imports working across both. So maybe we could setup the `@rules_python//<some-label>` import to support both `from runfiles import Runfiles` and `from rules_python.python.runfiles import Runfiles` and then nudge people towards using the first import path, as it is the same as the one `PyPI` provides?",
      "> same Python imports working across both.\r\n\r\nI'm not sure this will be possible. The basic issue is a multi-version conflict: you can get one version of runfiles from pypi and a different version from `@rules_python`. Users will need some way to resolve that (e.g. being able to force one earlier in the import search), or we need a compelling technical reason why one is strictly better than the other.\r\n\r\nThis PR has turned into quite a bit of import trickery to make a src-layout work while providing backwards compatibility, so I don't want to introduce a third way of import runfiles and associated trickery.",
      "posterity, from the maintainers meeting:\r\n\r\n* re: consolidating how to import runfiles: we'll just continue on as we are now\r\n* re: src based layout: It's a bit of a wash because we have to use \"src-d\" to help avoid conflicts with _actual_ src-based layouts. Moving all the files also has some risk, too. I'll switch this over to adding a top-level `rules_python/__init__.py` shim that uses `__path__` instead and see how that works.",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210160ac254a19ac28f4c5",
    "number": 1673,
    "body": "Since `MODULE.bazel` files don't support `load()`, it is more difficult to grab the value of an environment variable such as `PIP_INDEX_URL` or `PIP_RETRIES` and feed it to `pip.parse()`. Some of these `PIP_*` variables are useful in `extra_pip_args`. To enable this use case, also for the bzlmod scenario, add the `envsubst` attribute, which is a list of environment variables to substitute in `extra_pip_args`. If `$VARNAME`, `${VARNAME}` or `${VARNAME:-default}` is found in `extra_pip_args`, substitute the value of the variable.",
    "head_branch": "envsubst",
    "is_a_fork": true,
    "comments": [
      "Retried the build and it was fine. There are feature requests to use the bazel downloader to download wheels/sdists from PyPI instead of using PyPI and I think `envsubst` would be required to be used separately from the `whl_library` as well. Would you be willing to create a separate file (maybe in `python/private/envsubst.bzl`) and add a few unit tests in `//tests/private/envsubst/<mychosenname>`? This and a CHANGELOG entry and this PR should be ready to be merged IMHO.",
      "I got a new error on Windows now, which at a glance seems unrelated to my patches:\r\n```\r\nThe process cannot access the file because it is being used by another process\r\n```\r\nLooks like I don't have the required access level to retry the job, however, so I'm afraid I'll have to ask you to take a look at it, if you don't mind: https://buildkite.com/bazel/rules-python-python/builds/6937#018d1cf7-6942-4148-af4c-2747940a0be6",
      "Yeah, that's a flake. I pressed retry.\r\n\r\nFew thoughts.\r\n\r\nre: extra index url being a security issue: I don't think it's any worse than a custom repository rule? An arbitrary module might implement a custom repo rule to download arbitrary things or execute arbitrary things and include it into a program that gets run at build time. extra index url isn't any worse. It's still scoped to their pip.parse/targets.\r\n\r\nre: environment variables: Should we add some PIP_* names to the repo rule's/module extensions environment variable settings? Or perhaps `pip.parse(consider_env=True)` flag, and under the hood it calls a variation of the pip repo rule that has repository_rule.environ set to the various pip environment variables.\r\n\r\nRight now, any changes to the environment won't be reflected in subsequent runs -- you'll have to manually sync/clean (and thus invalidate everything) to pick up any envvar changes.\r\n\r\n> it is more difficult to grab the value of an environment variable such as PIP_INDEX_URL or PIP_RETRIES and feed it to pip.parse()\r\n\r\nI think the thing you have to do is create a repo rule to read the env var and pass it as a file into pip.parse. Something like:\r\n\r\n```\r\n# MODULE.bazel\r\n\r\nuse_extension(\"//:pipenviron.bzl\", \"pipenviron\")\r\npip.parse(environ_file = \"@pipenviron//:environ.json\")\r\n\r\n# pipenviron.bzl\r\n\r\ndef module_impl(mctx):\r\n  pip_env(name=\"pipenviron\")\r\n\r\npip_env = repository_rule(..., environ=[\"PIP_RETRIES\", ..])\r\n\r\ndef pip_env_impl(rctx):\r\n  rctx.file(\"environ.json\", json.encode({\"PIP_RETRIES\": rctx.os.environ(...)}))\r\n```\r\n\r\nUnfortunately, a repository rule can't have a dynamic set of environment variables. We could put a \"includes all the env var\" rule in rules_python, but if you just want a subset, then you have to define the repository rule yourself (which rules_python could provide helpers to do to make simpler).\r\n\r\nedit: use_repo_rule() can simply the above; no need to create the extension",
      "> Right now, any changes to the environment won't be reflected in subsequent runs -- you'll have to manually sync/clean (and thus invalidate everything) to pick up any envvar changes.\r\n\r\nAh, yes, you're right. But the `environ` attribute of `repository_rule` is deprecated:\r\n> Deprecated. This parameter has been deprecated. Migrate to repository_ctx.getenv instead.\r\nProvides a list of environment variable that this repository rule depends on. If an environment variable in that list change, the repository will be refetched. \r\n\r\nhttps://bazel.build/rules/lib/globals/bzl#repository_rule\r\n\r\nI think switching from `rctx.os.environ` to `rctx.getenv` should be sufficient to make sure changes to the environment will be picked up.\r\n\r\n> When building incrementally, any change to the value of the variable named by name will cause this repository to be re-fetched. \r\n\r\nhttps://bazel.build/rules/lib/builtins/repository_ctx.html#getenv\r\n\r\n(Tough for things like `PIP_TIMEOUT`, do we really want a change of the variable to cause already-fetched things to be re-fetched? As long as it takes effect for things we haven't already fetched, that's sufficient for that use case.)",
      "Maybe I spoke too soon. The `repository_ctx.getenv()` function was introduced just 16 hours ago, and is not yet in any official Bazel release. I could write code that tries `getenv` if available and falls back to `rctx.os.environ` if it's not there, but then we'd not have environment changes reflected on Bazel releases older than today. Or we could go with an environment file, and that would work the same way with all Bazel versions, even though we could have done this in a nicer way on newer Bazel versions.",
      "> Tough for things like PIP_TIMEOUT, do we really want a change of the variable to cause already-fetched things to be re-fetched? As long as it takes effect for things we haven't already fetched, that's sufficient for that use case.\r\n\r\nYeah, I agree. We can skirt the \"correctness\" for something like PIP_TIMEOUT until getenv is more widely available. PIP_RETRIES falls into this category too, right?\r\n\r\ngetenv sounds much nicer, but yeah, we'll need to support Bazel 6 until Dec 2025 and Bazel until Dec 2026. So that's a ways off. If you're using the rolling bazel releases, then I'd be fine with conditional usage of getenv.\r\n\r\n@aignas WDYT: punt on this envvar-change-detection issue for now? We can always come back and set the `environ` list or add an `environ_file` arg."
    ],
    "commit_messages": [
      "feat: Add support for envsubst in extra_pip_args (#1673)\n\nSince `MODULE.bazel` files don't support `load()`, it is more difficult\nto grab the value of an environment variable such as `PIP_INDEX_URL` or\n`PIP_RETRIES` and feed it to `pip.parse()`. Some of these `PIP_*`\nvariables are useful in `extra_pip_args`. To enable this use case, also\nfor the bzlmod scenario, add the `envsubst` attribute, which is a list\nof environment variables to substitute in `extra_pip_args`. If\n`$VARNAME`, `${VARNAME}` or `${VARNAME:-default}` is found in\n`extra_pip_args`, substitute the value of the variable."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210161ac254a19ac28f4c6",
    "number": 1672,
    "body": "This is to prepare for the 0.28.0 release.",
    "head_branch": "changlog.28",
    "is_a_fork": true,
    "comments": [
      "The mac jobs on bazel CI fell over last night and they're working through a large backlog. It'll be several hours until they catch up.\r\n\r\nSince this i just a doc update, i'm going to force-merge this because it's the last thing to do for the 0.28.0 release to be made."
    ],
    "commit_messages": [
      "docs: update changelog for 0.28.0 release (#1672)\n\nThis is to prepare for the 0.28.0 release."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210162ac254a19ac28f4c7",
    "number": 1671,
    "body": "Adds an `interpreter_version_info` attribute to the `py_runtime` and associated provider that maps to the `sys.version_info` values. This allows the version of the interpreter to be known statically, which can be useful for rule sets that depend on the interpreter, and need to build environments / pathing that contain version info (virtualenvs for example).",
    "head_branch": "interpreter_version",
    "is_a_fork": false,
    "comments": [
      "@rickeylev Can I have another pass on this please?",
      "Looks pretty good! Thank you for adding tests.\r\n\r\nCan you please add an entry to CHANGELOG.md? Then it's ready to merge."
    ],
    "commit_messages": [
      "feat: add interpreter_version_info to py_runtime (#1671)\n\nAdds an `interpreter_version_info` attribute to the `py_runtime` and\nassociated provider that maps to the `sys.version_info` values. This\nallows the version of the interpreter to be known statically, which can\nbe useful for rule sets that depend on the interpreter, and need to\nbuild environments / pathing that contain version info (virtualenvs for\nexample).\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210163ac254a19ac28f4c8",
    "number": 1670,
    "body": "The workspace `python_register_toolchains()` function only registered the plain Python toolchain by its specific name. The py cc toolchain wasn't also being named. This meant things like `//python/cc:current_py_cc_headers` couldn't find their toolchain. Bzlmod doesn't have this problem because it uses the `:all` pattern to register everything.\r\n\r\nTo fix, also register the py cc toolchain where the plain Python toolchain is registered, which makes it available.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1669",
    "head_branch": "fix.register.cc.toolchain.workspace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(toolchains): register py cc toolchain for workspace builds (#1670)\n\nThe workspace `python_register_toolchains()` function only registered\nthe plain Python toolchain by its specific name. The py cc toolchain\nwasn't also being named. This meant things like\n`//python/cc:current_py_cc_headers` couldn't find their toolchain.\nBzlmod doesn't have this problem because it uses the `:all` pattern to\nregister everything.\n\nTo fix, also register the py cc toolchain where the plain Python\ntoolchain is registered, which makes it available.\n\nFixes https://github.com/bazelbuild/rules_python/issues/1669"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210164ac254a19ac28f4c9",
    "number": 1668,
    "body": "The tests have been deleted, so the supporting code is now unused.\r\n\r\nMoves the update_deleted_packages script to tools, since it isn't specific to the bazel_integration_test code.",
    "head_branch": "rm.old.bazel.integration.test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup(dev): remove remnants of old bazel_integration_test code (#1668)\n\nThe tests have been deleted, so the supporting code is now unused.\n\nMoves the update_deleted_packages script to tools, since it isn't\nspecific to the bazel_integration_test code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210165ac254a19ac28f4ca",
    "number": 1667,
    "body": "My default expectation would be that the keys to the `annotations` dictionary passed to `pip_parse` would use the `normalize_name(...)` convention, as is used elsewhere in the API. However, this does not appear to be the case. I originally was going to file a bug, but maybe just documenting the current behavior is enough?\r\n\r\nFor a minimal repro showing that this capitalization is indeed required, see https://github.com/bruno-digitbio/bug-rules-python-annotation-pyqt\r\n\r\nIn that repo, \r\n```bash\r\n$ bazel run //:test_has_comment\r\n$ tail $(bazel info output_base)/external/pip_pyqt6/BUILD.bazel\r\n$ tail $(bazel info output_base)/external/pip_wheel/BUILD.bazel\r\n```\r\nwill both show `# A comment` at the bottom, as requested in the `WORKSPACE` file. However, if you first run\r\n\r\n```bash\r\n$ bazel run //:requirements.update\r\n```\r\n\r\nthen the auto-generated requirements file will use lowercase for the requirement specification, breaking the desired behavior. \r\n\r\nPlease let me know if it makes more sense to just check in the docs, include this example (or something similar) as a small test, or something else. Apologies if I missed anything in the contribution guidelines!\r\n",
    "head_branch": "document-annotations-behavior",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1667/checks?check_run_id=20147535097) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Having trouble signing the CLA, is this transient/typical or should I reach out to someone for help?\r\n\r\n![image](https://github.com/bazelbuild/rules_python/assets/129457302/af45aae5-617d-4fe4-b78e-181c0315c1fd)\r\n",
      "Perhaps try again today? I didn't see any server errors when I triggered it to re-run; just the usual \"person hasn't signed CLA\" error. There isn't a CLA record for `bruno-digitbio`, so try re-submitting your CLA form.\r\n\r\nIt looks like your profile is marked pretty private ? Perhaps this requirement is what's tripping it up:\r\n\r\n> You may have [Keep my email address private](https://github.com/settings/emails#:~:text=Keep%20my%20email%20addresses%20private) enabled. Without a visible email address, the CLA cannot be checked. Uncheck it and re-create the offending commit, or have your CLA point of contact add your @users.noreply.github.com address to the CLA group.\r\n\r\n",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "> Perhaps try again today?\r\n\r\nI tried every couple of weeks and eventually gave up, but today I logged in and it magically worked!\r\n\r\n> It looks like your profile is marked pretty private ? Perhaps this requirement is what's tripping it up:\r\n> \r\n> > You may have [Keep my email address private](https://github.com/settings/emails#:~:text=Keep%20my%20email%20addresses%20private) enabled. Without a visible email address, the CLA cannot be checked. Uncheck it and re-create the offending commit, or have your CLA point of contact add your @users.noreply.github.com address to the CLA group.\r\n\r\nI don't think it was this specific setting, but it was probably some other similar privacy setting that I've since relaxed!\r\n\r\nNot sure how to un-mark this as stale but I rebased it and looks like the docs update would still be valuable, but let me know if I should change it at all!\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210165ac254a19ac28f4cb",
    "number": 1666,
    "body": "As per the discussion in #1465 and in this PR, this PR does the following:\r\n\r\n - Make the `requirements` parameter to the `gazelle_python_manifest` macro optional.\r\n - If `requirements` is not provided, no integrity field is added to the manifest, and `diff_test` is used to see if the manifest is stale instead of the existing `go_test` that just checks the integrity.\r\n - Migrates `go_binary` to `genrule` to generate the manifest file that can be used with `diff_test`. (There's still a `go_binary` under the hood, but the manifest macro itself uses a genrule now rather than a wrapper `go_binary`.)\r\n- It does not migrate the manifest generator from Go to Python; hopefully that can be deferred to another PR.\r\n\r\nA custom `copy_to_source.sh` script is included, which is used to update the manifest in the source tree.\r\n\r\nCompatibility discussion:\r\n - The update and test target names have not changed; they are still `//:gazelle_python_manifest.update` and `//:gazelle_python_manifest.test`.",
    "head_branch": "manifest-integrity-removal",
    "is_a_fork": true,
    "comments": [
      "When I introduced this integrity verification, the intent was to have speedy checks on whether the manifest was up to date without re-generating it. Did you consider this?",
      "@f0rmiga in my experience, and the reason I opened #1465, in a large repo the integrity field is an extremely common source of merge conflicts. The test itself pretty much only runs in our CI system; locally we always run update anyway so we don't notice any speed gains from a faster test. (And if you've run update before, then the test is fast anyway because everything gets cached.)\r\n\r\nAll in all, in our case it's a huge benefit to no longer run into these merge conflicts, because in the end they take much more engineering time to deal with than running the test. What do you think? ",
      "@adzenith, what is the time it takes to perform the check for staleness in the following scenarios:\r\n* no pypi deps present in repositoly cache.\r\n* pypi deps are present in the repository cache.\r\n\r\nIf we are removing this in the sake of simplicity it would be great to know the trade offs.\r\n\r\nIn reality I found that when having multiple requirements files (one for each os) this extra field may add extra mental overhead to understand how everything works, especially if the requirements files are updated incrementally.",
      "I just tested on our monorepo. With the integrity field, both with and without pypi repository cache it takes ~0.7s. Without the integrity field, if we have our pip deps cached it takes the same amount of time at about 0.7s.\r\n\r\nIn our case we depend on pytorch, which is 2.3GB. So a \"cold\" check takes about 3 minutes in our case - but in actuality we never encounter this case, because pytorch (and most of the pip deps) are downloaded and cached during the course of normal work. In real use cases it would probably be just a few seconds to download any pip deps that the developer doesn't have yet, and this would only need to happen once.",
      "I changed the permissions to 0644. Let me know your thoughts on the aspect dependency!",
      "Everything is passing CI except this one Windows job:\r\n>`(18:36:11) ERROR: C:/b/bk-windows-rksv/bazel/rules-python-python/examples/build_file_generation/BUILD.bazel:12:25: Middleman _middlemen/requirements.update.exe-runfiles failed: error reading file '@@python39_x86_64-pc-windows-msvc//:Lib/distutils/__pycache__/util.cpython-39.pyc': C:\\b\\igshgcm6\\external\\python39_x86_64-pc-windows-msvc\\Lib\\distutils\\__pycache__\\util.cpython-39.pyc (The process cannot access the file because it is being used by another process)`\r\n\r\nnot sure what's going on there... have you seen this before?",
      "> Everything is passing CI except this one Windows job:\r\n> \r\n> > `(18:36:11) ERROR: C:/b/bk-windows-rksv/bazel/rules-python-python/examples/build_file_generation/BUILD.bazel:12:25: Middleman _middlemen/requirements.update.exe-runfiles failed: error reading file '@@python39_x86_64-pc-windows-msvc//:Lib/distutils/__pycache__/util.cpython-39.pyc': C:\\b\\igshgcm6\\external\\python39_x86_64-pc-windows-msvc\\Lib\\distutils\\__pycache__\\util.cpython-39.pyc (The process cannot access the file because it is being used by another process)`\r\n> \r\n> not sure what's going on there... have you seen this before?\r\n\r\nThis is a Windows CI flake",
      "> @f0rmiga in my experience, and the reason I opened #1465, in a large repo the integrity field is an extremely common source of merge conflicts. The test itself pretty much only runs in our CI system; locally we always run update anyway so we don't notice any speed gains from a faster test. (And if you've run update before, then the test is fast anyway because everything gets cached.)\r\n> \r\n> All in all, in our case it's a huge benefit to no longer run into these merge conflicts, because in the end they take much more engineering time to deal with than running the test. What do you think?\r\n\r\nYou are missing the case when this test is performed on CI without a separate pypi cache, which is the most common case.",
      "I would assume that CI would either maintain the Bazel cache between runs (this is what we do), or be running `py_test` targets that already depend on these libraries anyway, or both. Would there be a case where this test would be run to check the Gazelle manifest but pip dependencies wouldn't otherwise be needed in the CI run?",
      "I guess the thing is that `bazel test ...` in the usual case will download all of the used `pip` dependencies in case the analysis cache was discarded in the previous run, so we need to download the third-party deps anyway. The only case where I see the lightweight gazelle manifest would help is to support a use-case of a quick `lint` type CI run, which can run really fast and not need to download all of the PyPI dependencies just for that. However, as @adzenith noted, I would expect it to be run on a runner which has all of the dependencies anyway.\r\n\r\n@f0rmiga, are we missing something else here? If I remember you were working at Aspect at the time of authoring this and I am wondering if this work was sponsored by some client who had some specific requirements?",
      "We have to be careful every time we use assumptions to make changes to a repository that countless repositories depend on. We can't force everyone to do what we believe to be the best workflow.\r\n\r\n@mattem can you shed some light here? You have a more recent experience with a very large Python repository.",
      "I don't think we've ever hit conflicts on the integrity field, but I think that depends on if the repo has one requirements or many (we have 1000's), so the likelihood of conflicts is reduced (fwiw, the main contention I see is from the `via` comments from pip compile).\r\n\r\nI'm on the fence about the removal of the field, however if it is removed, I don't think I agree with adding Aspect's bazel-lib as a dependency (seems odd for a core ruleset to depend on a 3p library).\r\n\r\nI'm also a -1 on \"manifest generator from Go to Python\", just for the speed of running the tool I'd prefer to keep it as a native binary.",
      "> I don't think we've ever hit conflicts on the integrity field, but I think that depends on if the repo has one requirements or many (we have 1000's), so the likelihood of conflicts is reduced (fwiw, the main contention I see is from the `via` comments from pip compile).\r\n\r\nWe have a monorepo with a 3k-line pip lockfile. When we submitted the Gazelle manifest last week, we had lots of conflicts -- so many that we nearly reverted the manifest. This PR was perfectly timed, so I grabbed the diff as a Bazel repository patch and we've been running with it for a few days now. It seems to be working well for us (anecdotally).\r\n\r\nI don't have strong feelings about the manner by which it is removed (i.e. 3p libs etc.) but it definitely has to go for this manifest to be usable in a monorepo (with a mono-lockfile). That's my two cents.",
      "Perhaps it could be configurable/opt-in/opt-out?",
      "I also wanted to propose this to be an opt out/in setting. We could make the requirements file passing an optional field, which would either use the go_test (old code) or the new code.\r\n\r\nExperience from @lpulley mirrors my experience as well and we opted to disabling the integrity check by using a different file as the source for the integrity.\r\n\r\n@f0rmiga, any other ideas how monorepos with many/single requirements lock files could coexist?",
      "I think an opt out feature is ideal since it doesn't require everyone else to opt in, and it still satisfies repos that change the requirements too often.",
      "@f0rmiga so I guess we are on the same page here that the `requirements` attribute for the gazelle manifest generation should be made optional and based on this we would be either including the integrity hash in the manifest or not. I think updating the examples within the `rules_python` repository to not have the integrity hash would help with `dependabot` dependency updates, which I think would facilitate the maintenance of the repo.\r\n\r\n@adzenith, what do you think?",
      "Works for me. I'll add an argument to the manifest target that lets you pick whether there's an integrity field. I'll default it to having the integrity there for back compat.",
      "Awesome. Thanks for the contribution, @adzenith!",
      "Ok, updated with a new `use_integrity_field` parameter to the `gazelle_python_manifest` macro. Let me know what you think!",
      "@f0rmiga let me know what you think!\r\nIt now populates the integrity field if you pass `requirements` to the `gazelle_python_manifest`, so if people upgrade without otherwise changing their setup they will see no change to their manifest format. But you can also omit the `requirements` arg and then the manifest won't have an integrity field, which helps with PR merge conflicts at the expense of slower manifest checks.",
      "Thanks all for the reviews and the feedback!"
    ],
    "commit_messages": [
      "feat(gazelle): Remove integrity field from Gazelle manifest (#1666)\n\nAs per the discussion in #1465 and in this PR, this PR does the\nfollowing:\n\n- Make the `requirements` parameter to the `gazelle_python_manifest`\nmacro optional.\n- If `requirements` is not provided, no integrity field is added to the\nmanifest, and `diff_test` is used to see if the manifest is stale\ninstead of the existing `go_test` that just checks the integrity.\n- Migrates `go_binary` to `genrule` to generate the manifest file that\ncan be used with `diff_test`. (There's still a `go_binary` under the\nhood, but the manifest macro itself uses a genrule now rather than a\nwrapper `go_binary`.)\n- It does not migrate the manifest generator from Go to Python;\nhopefully that can be deferred to another PR.\n\nA custom `copy_to_source.sh` script is included, which is used to update\nthe manifest in the source tree.\n\nCompatibility discussion:\n- The update and test target names have not changed; they are still\n`//:gazelle_python_manifest.update` and\n`//:gazelle_python_manifest.test`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210166ac254a19ac28f4cc",
    "number": 1664,
    "body": "[This previous PR](https://github.com/bazelbuild/rules_python/pull/1584) added the ability to make a `py_binary` target per file if `if __name__ == \"__main__\"` tokens were found in the file. This works great in the default case, but when `python_generation_mode` is set to `file`, the plugin now attempts to make both a `py_binary` and a `py_library` target for each main file, which results in an error.\r\n\r\nThis PR modifies the behavior to work properly with per-file target generation, and adds tests for this case.\r\n",
    "head_branch": "per-file-binary-target",
    "is_a_fork": true,
    "comments": [
      "What would happen if we have lib_and_main.py, which has code usable as library code (e.g. in lib2.py) but also should have a py_binary gerated for that because of an if name main statement?",
      "A `py_binary` can show up in another `py_binary`'s `deps` just as a `py_library` can. The `py_binary` just also affords the ability to use `bazel run`. I would think it would be best practice to extract library code to a `py_library` target and not have binaries depend on each other, but it is possible and the rules have no problem with it.\r\n\r\nI've added a new `lib_and_main.py` and it creates a `py_binary`. I've also added a dependency on it from another `py_binary`, and Gazelle works as expected.\r\n\r\nLet me know your thoughts!",
      "+1 for the need for this change.\r\n\r\nWithout this change, per-file generation mode does not really work for us if we are not strict about having the `if __name__ == \"__main__\"` line only in files named `__main__.py`.",
      "> In general I would like this to be merged, but not sure about the usage of py_binary as a py_library. Maybe @rickeylev could chime in and advise us here? Should we use py_binary as a convenient py_library implementation when a file supports both, being used as a lib and as a script, are there trade offs in doing so?\r\n\r\nA binary shouldn't be used as a library, insofar as Bazel dependencies are concerned. The main reasons are:\r\n1. The inner binary executable is still built and included into the runfiles, even though it isn't used. This means additional data in the binary, but also the additional analysis time cost of the binary.\r\n2. It's assumed that a binary is a \"top level\" node in \"the graph\". This lets binaries assume its OK to perform more expensive operations like flattening depsets or performing transitions. Another example is binaries are a natural place for decisions that can only be made by the user who knows the final runtime environment can be made (e.g., linking in an alternative malloc, choosing some alternative version of a dependency, specifying the python version to use, etc)\r\n3. Questions around visibility become more complicated. For example, one might want to expose a binary to be used only as a tool, but not as a library, as the interface for the former is much more narrow and easy to define and control. Similar questions arise for other attributes.",
      "Thanks @rickeylev.\r\n\r\nSome basic thoughts that come to mind:\r\n\r\n1. The cleanest separation is at the file level - keep the executable part in a separate file. This means having `lib.py` and `lib_bin.py` instead of one `lib_and_bin.py` file. This can ensure that Gazelle can generate two separate `py_library` and `py_binary` targets automatically. If the user is not doing this separation (i.e. has elected to keep lib_and_bin.py), then they should be ready to take some performance hit and some messiness regarding visibility. This can be documented.\r\n2. Some of the concerns, like the executable being built and included in runfiles, can/should be addressed within starlark. When dependency is through the `deps` attribute, do not do these things, but do so when the dependency is through `data` or `tools` attributes, etc.\r\n3. Setting a restrictive visibility on `py_library` does not really help if an alternative is available through `py_binary` which can provide `py_library` like behavior.\r\n\r\nWith the current behavior, unless the file is named `__main__.py`, Gazelle gets confused if there is an `if __name__ == \"__main__\"` line in the file (in principle, this line check can also be replaced with an explicit directive).\r\n\r\nOptions I can think of:\r\n\r\n1. Generate a `py_binary` target instead of `py_library`. Assume that either the module is not depended upon, or if it is depended upon, then the user understands the performance implications.\r\n2. Generate two separate identical targets for the same file - one `py_library` and one `py_binary`, and stop Gazelle from using `py_binary` targets for import resolution, thus enforcing that `py_binary` targets are not used in `deps` attribute.",
      "> Some of the concerns, like the executable being built and included in runfiles, can/should be addressed within starlark. When dependency is through the deps attribute, do not do these things, but do so when the dependency is through data or tools attributes, etc.\r\n\r\nUnfortunately, it's not so simple. I held that same opinion until a couple years ago (internally, there was a FR for exactly this, which I originally argued in favor of, but as time passed, it became more clear keeping the two separate is better architecturally).\r\n\r\nThe issue is that the [expected behavior of rules is that deps-like attributes also include the runfiles of a target](https://bazel.build/extending/rules#runfiles:~:text=Runfiles%20should%20also%20be%20merged%20in%20from%20data%2C%20as%20well%20as%20from%20any%20attributes%20which%20might%20provide%20code%20for%20eventual%20execution%2C%20generally%20srcs%20(which%20might%20contain%20filegroup%20targets%20with%20associated%20data)%20and%20deps.). And where is the executable file? It's part of the runfiles. Filtering it out of the runfiles can't be done without flattening the runfiles. So then the only other answer is a special provider with a different set of runfiles, and thus, we have re-invented the deprecated data_runfiles feature, except now we're calling to deps_runfiles (the reason data_runfiles is deprecated and discouraged is because it creates surprising behavior -- we don't expect that changing the name of the dependency edge changes the set of files received. I've been confused by that behavior several times and seen it bite others).\r\n\r\nWe're still left with the other major problem of unnecessary analysis time logic, though, as well as the other parts of points (2) and (3) I posted. It starts to turn into many special cases and special py-rule-specific behavior.\r\n\r\nPredominately, we (within Google) have found that binaries only need libraries to make testing easier -- a unit test typically wants to import some of the functions of the binary to test them. To serve that end, the popular py_binary-wrapping macros have an opt-in argument to generate a py_library that is testonly=true. If the same source file is supposed to be both a library and binary, people have to purposefully do that to consciously face the decisions it entails. I originally argued that this testonly lib be opt-out instead, but data indicated that it wouldn't be used much (it was something unequivocal like 25%)\r\n\r\n> Generate two separate identical targets for the same file - one py_library and one py_binary\r\n\r\nThis is fine. The same source file can be in the srcs of multiple targets. I'd recommend that, if both a binary and library are generated, that the binary depend on the library. This just reduces the amount of repetition in the definitions and looks a bit cleaner more than anything, so not strictly necessary.\r\n\r\nI don't know how advanced of analysis gazelle does, but if it can look around at other files, it could look for a test-looking file that imports the binary. Another heuristic might be to look if a file looks \"entry point like\", e.g., if the file that has `if name==main` imports main from another location to run it, it probably isn't meant to be a library itself.",
      "An extension of option 2 could be to give the user some control through an in-file directive that says whether the target type should be library, binary, or both. Hopefully, this will obviate the need for intelligence within Gazelle. \n\nWithout this directive, the ifmain line check can be used to generate both types of targets, or always library targets regardless of the file content (unless the file name is `__main__.py`). This behavior can also be controlled through a global directive.\n\nThe in-file directive can look like:\n```\n# gazelle:py_target_type=binary\n# gazelle:py_target_type=library,binary\n```\n\nUnfortunately, all of this makes the configurability of Gazelle more complex. But because the Python language spec itself is not strict, and Gazelle is not positioned high enough in the ecosystem for enforcing opinions, this is unavoidable.",
      "> Unfortunately, it's not so simple.\r\n\r\nSigh. For this reason, for better or worse, I did not create separate `r_library` and `r_binary` when writing rules for R ([my thoughts at that time](https://github.com/grailbio/rules_r/issues/34#issuecomment-533325583)). The language spec does not distinguish between what can be executed and what can not be, the build system should not either. The additional infrastructure around self-contained executable archives, etc. can be considered separately. Anyway, what's done is done.",
      "This turned out to be a much more controversial change than what I was expecting! I was trying to fix what I perceived as a bug in the current behavior. Thank you all for all the comments. I read through them all but it looks like there's not yet an agreement on the best path forward - so I'll throw my hat in the ring as well.\r\n\r\n> Options I can think of:\r\n>\r\n> 1. Generate a py_binary target instead of py_library. Assume that either the module is not depended upon, or if it is depended upon, then the user understands the performance implications.\r\n> 2. Generate two separate identical targets for the same file - one py_library and one py_binary, and stop Gazelle from using py_binary targets for import resolution, thus enforcing that py_binary targets are not used in deps attribute.\r\n\r\n> I would prefer the option 2 as it is the option with the least surprising behaviour.\r\n\r\nI personally would prefer option 1. I think option 2 is actually _more_ surprising. Why am I ending up with two targets? What are the implications of that? I think it's pushing an implementation detail onto the user, whereas with option 1 everything \"just works\" from the user perspective.\r\n\r\nI also am not sure how often this will actually come up. Do people frequently have `py_library` targets where the source files have `if __name__ == \"__main__\"` that this change would convert to `py_binary` targets? If so, why do they have them if they aren't able to run them? Note also that this change only affects people who have configured Gazelle for per-file target generation. Are we trying to over-optimize for a rare case?\r\n\r\n> A binary shouldn't be used as a library, insofar as Bazel dependencies are concerned. The main reasons are:\r\n>\r\n> 1. The inner binary executable is still built and included into the runfiles, even though it isn't used. This means additional data in the binary, but also the additional analysis time cost of the binary.\r\n> 2. It's assumed that a binary is a \"top level\" node in \"the graph\". This lets binaries assume its OK to perform more expensive operations like flattening depsets or performing transitions. Another example is binaries are a natural place for decisions that can only be made by the user who knows the final runtime environment can be made (e.g., linking in an alternative malloc, choosing some alternative version of a dependency, specifying the python version to use, etc)\r\n> 3. Questions around visibility become more complicated. For example, one might want to expose a binary to be used only as a tool, but not as a library, as the interface for the former is much more narrow and easy to define and control. Similar questions arise for other attributes.\r\n\r\nI feel like users generally fall into two camps:\r\n1. People who just want to write Python, and don't really care about the inner workings of Bazel (most devs). They don't know what runfiles are and they aren't flattening depsets or doing anything fancy. They just want to `bazel run` their code.\r\n2. Bazel devs, who understand things like analysis time cost and complications around visibility.\r\n\r\nI have the feeling that the first camp doesn't really mind the negative effects of depending on a `*_binary` target, and the second camp is knowledgeable enough to make things work the way they want in any case. I'm not sure if there's a set of people who would be upset or surprised about slightly more memory or analysis time when having a `py_binary` depend on a `py_binary` without also having the skills to remedy the situation.\r\n\r\n> The in-file directive can look like:\r\n> ```\r\n> # gazelle:py_target_type=binary\r\n> # gazelle:py_target_type=library,binary\r\n> ```\r\n\r\nMy preference would be simply to document the following:\r\n - if you have `if __name__ == \"__main__\"` and per-file generation enabled, a `py_binary` will be created\r\n - if you import that source file from another file, your target will depend on that `py_binary`, with possible negative effects on analysis time and runfiles size\r\n - to avoid this, extract library code into a separate file and don't import any files that contain `if __name__ == \"__main__\"`.\r\n\r\nThen users who just want things to work can just work, and for anybody who is looking into performance they will find that the best fix is to structure their code slightly differently (arguably better, perhaps).\r\n\r\nThoughts?",
      "+1 to all @adzenith said above.",
      "I added documentation about the negative effects of depending on a `py_binary` as well as how to avoid them. Let me know your thoughts!",
      "Thank you! I appreciate it"
    ],
    "commit_messages": [
      "fix: Fix per-file config interaction with one py_binary per main (#1664)\n\n[This previous PR](https://github.com/bazelbuild/rules_python/pull/1584)\nadded the ability to make a `py_binary` target per file if `if __name__\n== \"__main__\"` tokens were found in the file. This works great in the\ndefault case, but when `python_generation_mode` is set to `file`, the\nplugin now attempts to make both a `py_binary` and a `py_library` target\nfor each main file, which results in an error.\n\nThis PR modifies the behavior to work properly with per-file target\ngeneration, and adds tests for this case."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210167ac254a19ac28f4cd",
    "number": 1662,
    "body": "Only the root module should be able to decide `ignore_root_user_error`. Modules being depended upon don't know the final environment, so they aren't in the right position to know or decide what the correct setting is. This PR implements a solution to take the `ignore_root_user_error` value from the root module only.\r\n\r\nFixes #1658\r\n",
    "head_branch": "ignore_root_user_error_fix",
    "is_a_fork": true,
    "comments": [
      "Also, remember the root might might not explicitly setup any python toolchains; it might only be getting one because of some transitive module that needs python.\r\n\r\nAnd yes, only the root module should be able to set `ignore_root_user_error`. A module being used as a library doesn't know what the final runtime environment is, so it can't know what the correct decision is.",
      "@shabanzd could you think of a way to add an integration test for this? The `main` branch has support for `bazel-in-bazel` integration tests now and you could add one in `tests/integration` that would exercise the modified code.",
      "I originally requested tests when Ignas asked me about this PR, but I'm not so sure we should block on that now. The only idea I have for testing this is to add some print statements and check their output in the integration test. The prints would be guarded by an environment variable. However, doing that requires setting up a new test runner for the integration tests (one that can capture output and assert on it), which is maybe a bit too much to ask a new contributor in this PR.\r\n\r\nAny alternative testing ideas that might be easier?",
      "I would agree with @aignas that maybe the simplest way would be to have `bazel-in-bazel` integration tests with different scenarios and check for failures/successes based on the scenario ? ",
      "Ah, that gives me an idea: write an extra file somewhere with some info about what the extension did. Guard this behind an environment variable. Then we can write a test inside the integration test that reads that file and verifies its content. Maybe have the python repository repo rule write out what its settings were? Then it should be easy to use_repo() it and locate the file within it.",
      "Sorry was offline since Thursday, thanks for taking care of the testing @rickeylev 🙏🏼🙏🏼"
    ],
    "commit_messages": [
      "fix: ignore_root_user_error should be taken from root module only (#1662)\n\nOnly the root module should be able to decide `ignore_root_user_error`.\nModules being depended upon don't know the final environment, so they\naren't in the right position to know or decide what the correct setting\nis. This PR implements a solution to take the `ignore_root_user_error`\nvalue from the root module only.\n\nFixes #1658\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210168ac254a19ac28f4ce",
    "number": 1657,
    "body": "With this change we also fix a minor bug where the self edge dependencies\r\nwithin the wheels are correctly handled as per unit tests.\r\n\r\nAlso refactor the code to use the fact that the selects are chosen\r\nbased on the specificity of the condition. This can make the addition\r\nof deps incrementally correct without the need for extra processing in\r\nthe `build` method. This should hopefully make the implementation more\r\nfuture-proof as it makes use of these generic concepts and is likely to\r\nhelp to extend this code to work with selecting on multiple Python versions.\r\n\r\nI have added a test to ensure coverage of the new code.\r\n",
    "head_branch": "fix/make-deps-api-surface-smaller",
    "is_a_fork": true,
    "comments": [
      "When you have time, please take a look @rickeylev. My end-goal would be to support parsing the metadata to support select statements with version aware python toolchain config settings, which should hopefully land in another PR."
    ],
    "commit_messages": [
      "refactor(pip_install): make the API surface of deps parsing smaller (#1657)\n\nWith this change we also fix a minor bug where the self edge\ndependencies\nwithin the wheels are correctly handled as per unit tests.\n\nAlso refactor the code to use the fact that the selects are chosen\nbased on the specificity of the condition. This can make the addition\nof deps incrementally correct without the need for extra processing in\nthe `build` method. This should hopefully make the implementation more\nfuture-proof as it makes use of these generic concepts and is likely to\nhelp to extend this code to work with selecting on multiple Python\nversions.\n\nI have added a test to ensure coverage of the new code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210169ac254a19ac28f4cf",
    "number": 1656,
    "body": "With this change we allow for more ergonomic creation of the runfiles\r\nobject and using type annotations:\r\n```python\r\nfrom python.runfiles import Runfiles\r\n\r\ndef main() -> None:\r\n    runfiles: Runfiles | None = Runfiles.Create()\r\n```\r\n\r\nFurthermore, the docs have been updated to describe pulling `runfiles`\r\nlibrary directly from `rules_python` to avoid the complexity of needing\r\nto setup `pip_parse` to use this behavior.",
    "head_branch": "mypy",
    "is_a_fork": true,
    "comments": [
      "cc @aignas is this one ok as well?",
      "If there's no blockers is this something that could be merged soon? I think it'd be good to consolidate the import paths for pypi releases and rules_python releases but that should be a separate change.\r\n\r\ncc @aignas @rickeylev ",
      "@UebelAndre, just came back from holiday.\r\n\r\nSorry for being pedantic, but as per the PR template todo checklist, could you please add a `CHANGELOG.md` and make the PR description more like a commit message? Otherwise the change looks good to me.",
      "> @UebelAndre, just came back from holiday.\r\n> \r\n> Sorry for being pedantic, but as per the PR template todo checklist, could you please add a `CHANGELOG.md` and make the PR description more like a commit message? Otherwise the change looks good to me.\r\n\r\nWhat do you mean \"more like a commit message\"?\r\n\r\nIf you modify the description to your liking I can make sure my future PRs follow this pattern.",
      "Condensed the message slightly and used passive voice and reworded to sound more like what is being added/changed with the commit rather than what is proposed. Thanks a lot for the improvements to `rules_python`!"
    ],
    "commit_messages": [
      "feat(runfiles): Add static methods to `Runfiles` class to simplify interface (#1656)\n\nWith this change we allow for more ergonomic creation of the runfiles\nobject and using type annotations:\n```python\nfrom python.runfiles import Runfiles\n\ndef main() -> None:\n    runfiles: Runfiles | None = Runfiles.Create()\n```\n\nFurthermore, the docs have been updated to describe pulling `runfiles`\nlibrary directly from `rules_python` to avoid the complexity of needing\nto setup `pip_parse` to use this behavior.\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210169ac254a19ac28f4d0",
    "number": 1654,
    "body": "This change adds mypy types directly to the `rules_python.python.runfiles` library as well as regression testing to CI.",
    "head_branch": "mypy",
    "is_a_fork": true,
    "comments": [
      "> For me this looks good, but I'd like to wait for @rickeylev to have a look at this since this would constrain the `runfiles` library to Python `3.7` and I don't know if this is something we want to do now.\r\n> \r\n> EDIT: According to https://devguide.python.org/versions/, it is already EOL, so this concern may not be applicable and we can move forward to the better future with type annotations.\r\n\r\nFor what it’s worth, 3.7 was chosen because it’s EOL and I thought it would be a sufficiently low bar."
    ],
    "commit_messages": [
      "feat(runfiles): Added type hints to `@rules_python//python/runfiles` (#1654)\n\nThis change adds mypy types directly to the\n`rules_python.python.runfiles` library as well as regression testing to\nCI.\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621016aac254a19ac28f4d1",
    "number": 1652,
    "body": "Bumps [setuptools](https://github.com/pypa/setuptools) from 59.6.0 to 65.5.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/setuptools/releases\">setuptools's releases</a>.</em></p>\n<blockquote>\n<h2>v65.5.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.5.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.4.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.4.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.3.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.2.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.1.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.1.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.2</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.0</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.3</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.2</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.1</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.0</h2>\n<p>No release notes provided.</p>\n<h2>v63.4.3</h2>\n<p>No release notes provided.</p>\n<h2>v63.4.2</h2>\n<p>No release notes provided.</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/setuptools/blob/main/NEWS.rst\">setuptools's changelog</a>.</em></p>\n<blockquote>\n<h1>v65.5.1</h1>\n<h2>Misc</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3638\">#3638</a>: Drop a test dependency on the <code>mock</code> package, always use :external+python:py:mod:<code>unittest.mock</code> -- by :user:<code>hroncok</code></li>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>: Fixed REDoS vector in package_index -- by :user:<code>SCH227</code></li>\n</ul>\n<h1>v65.5.0</h1>\n<h2>Changes</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3624\">#3624</a>: Fixed editable install for multi-module/no-package <code>src</code>-layout projects.</li>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3626\">#3626</a>: Minor refactorings to support distutils using stdlib logging module.</li>\n</ul>\n<h2>Documentation changes</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3419\">#3419</a>: Updated the example version numbers to be compliant with PEP-440 on the &quot;Specifying Your Project’s Version&quot; page of the user guide.</li>\n</ul>\n<h2>Misc</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3569\">#3569</a>: Improved information about conflicting entries in the current working directory\nand editable install (in documentation and as an informational warning).</li>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3576\">#3576</a>: Updated version of <code>validate_pyproject</code>.</li>\n</ul>\n<h1>v65.4.1</h1>\n<h2>Misc</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3613\">#3613</a>: Fixed encoding errors in <code>expand.StaticModule</code> when system default encoding doesn't match expectations for source files.</li>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3617\">#3617</a>: Merge with pypa/distutils@6852b20 including fix for <a href=\"https://redirect.github.com/pypa/distutils/issues/181\">pypa/distutils#181</a>.</li>\n</ul>\n<h1>v65.4.0</h1>\n<h2>Changes</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/pypa/setuptools/issues/3609\">#3609</a>: Merge with pypa/distutils@d82d926 including support for DIST_EXTRA_CONFIG in <a href=\"https://redirect.github.com/pypa/distutils/issues/177\">pypa/distutils#177</a>.</li>\n</ul>\n<p>v65.3.0</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/setuptools/commit/a462cb5edb324dcc56f903524b742305e4087014\"><code>a462cb5</code></a> Bump version: 65.5.0 → 65.5.1</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/de35d8be997c9f8508b425e33a1b6e52431091fa\"><code>de35d8b</code></a> Merge pull request <a href=\"https://redirect.github.com/pypa/setuptools/issues/3656\">#3656</a> from bmorris3/typos</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/58e23de0d4c2ce0f2502d072bb9a2ed1e2ab0ba6\"><code>58e23de</code></a> Update changelog. Ref <a href=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/43a9c9bfa6aa626ec2a22540bea28d2ca77964be\"><code>43a9c9b</code></a> Limit the amount of whitespace to search/backtrack. Fixes <a href=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/579134321d4d9397c886a5cb50cc26d0e3fa4279\"><code>5791343</code></a> Add test capturing failed expectation. Ref <a href=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/1f97905bc40310ca454ff1ea3884f233b7dcc88c\"><code>1f97905</code></a> ⚫ Fade to black.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/6254567c6ae323bb8ce19a6930ae3cc5f7fb25cc\"><code>6254567</code></a> Remove workaround for emacs.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/729b180e926634930c21ccce5558780d42707763\"><code>729b180</code></a> ⚫ Fade to black.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/c068081a7234a0c5c322a9312654e7d0f4aaa8d1\"><code>c068081</code></a> Typo corrections</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/f777a40ed9abf529906c2939f80a184a5ed035fa\"><code>f777a40</code></a> Suppress deprecation warning in --rsyncdir. Workaround for <a href=\"https://redirect.github.com/pypa/setuptools/issues/3655\">#3655</a>.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/setuptools/compare/v59.6.0...v65.5.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=setuptools&package-manager=pip&previous-version=59.6.0&new-version=65.5.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/integration/pip_repository_entry_points/setuptools-65.5.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump setuptools from 59.6.0 to 65.5.1 in /tests/integration/pip_repository_entry_points (#1652)\n\nBumps [setuptools](https://github.com/pypa/setuptools) from 59.6.0 to\n65.5.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pypa/setuptools/releases\">setuptools's\nreleases</a>.</em></p>\n<blockquote>\n<h2>v65.5.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.5.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.4.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.4.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.3.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.2.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.1.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.1.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.2</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.0</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.3</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.2</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.1</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.0</h2>\n<p>No release notes provided.</p>\n<h2>v63.4.3</h2>\n<p>No release notes provided.</p>\n<h2>v63.4.2</h2>\n<p>No release notes provided.</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pypa/setuptools/blob/main/NEWS.rst\">setuptools's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>v65.5.1</h1>\n<h2>Misc</h2>\n<ul>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3638\">#3638</a>:\nDrop a test dependency on the <code>mock</code> package, always use\n:external+python:py:mod:<code>unittest.mock</code> -- by\n:user:<code>hroncok</code></li>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>:\nFixed REDoS vector in package_index -- by :user:<code>SCH227</code></li>\n</ul>\n<h1>v65.5.0</h1>\n<h2>Changes</h2>\n<ul>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3624\">#3624</a>:\nFixed editable install for multi-module/no-package\n<code>src</code>-layout projects.</li>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3626\">#3626</a>:\nMinor refactorings to support distutils using stdlib logging\nmodule.</li>\n</ul>\n<h2>Documentation changes</h2>\n<ul>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3419\">#3419</a>:\nUpdated the example version numbers to be compliant with PEP-440 on the\n&quot;Specifying Your Project’s Version&quot; page of the user\nguide.</li>\n</ul>\n<h2>Misc</h2>\n<ul>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3569\">#3569</a>:\nImproved information about conflicting entries in the current working\ndirectory\nand editable install (in documentation and as an informational\nwarning).</li>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3576\">#3576</a>:\nUpdated version of <code>validate_pyproject</code>.</li>\n</ul>\n<h1>v65.4.1</h1>\n<h2>Misc</h2>\n<ul>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3613\">#3613</a>:\nFixed encoding errors in <code>expand.StaticModule</code> when system\ndefault encoding doesn't match expectations for source files.</li>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3617\">#3617</a>:\nMerge with pypa/distutils@6852b20 including fix for <a\nhref=\"https://redirect.github.com/pypa/distutils/issues/181\">pypa/distutils#181</a>.</li>\n</ul>\n<h1>v65.4.0</h1>\n<h2>Changes</h2>\n<ul>\n<li><a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3609\">#3609</a>:\nMerge with pypa/distutils@d82d926 including support for\nDIST_EXTRA_CONFIG in <a\nhref=\"https://redirect.github.com/pypa/distutils/issues/177\">pypa/distutils#177</a>.</li>\n</ul>\n<p>v65.3.0</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/a462cb5edb324dcc56f903524b742305e4087014\"><code>a462cb5</code></a>\nBump version: 65.5.0 → 65.5.1</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/de35d8be997c9f8508b425e33a1b6e52431091fa\"><code>de35d8b</code></a>\nMerge pull request <a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3656\">#3656</a>\nfrom bmorris3/typos</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/58e23de0d4c2ce0f2502d072bb9a2ed1e2ab0ba6\"><code>58e23de</code></a>\nUpdate changelog. Ref <a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/43a9c9bfa6aa626ec2a22540bea28d2ca77964be\"><code>43a9c9b</code></a>\nLimit the amount of whitespace to search/backtrack. Fixes <a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/579134321d4d9397c886a5cb50cc26d0e3fa4279\"><code>5791343</code></a>\nAdd test capturing failed expectation. Ref <a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/1f97905bc40310ca454ff1ea3884f233b7dcc88c\"><code>1f97905</code></a>\n⚫ Fade to black.</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/6254567c6ae323bb8ce19a6930ae3cc5f7fb25cc\"><code>6254567</code></a>\nRemove workaround for emacs.</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/729b180e926634930c21ccce5558780d42707763\"><code>729b180</code></a>\n⚫ Fade to black.</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/c068081a7234a0c5c322a9312654e7d0f4aaa8d1\"><code>c068081</code></a>\nTypo corrections</li>\n<li><a\nhref=\"https://github.com/pypa/setuptools/commit/f777a40ed9abf529906c2939f80a184a5ed035fa\"><code>f777a40</code></a>\nSuppress deprecation warning in --rsyncdir. Workaround for <a\nhref=\"https://redirect.github.com/pypa/setuptools/issues/3655\">#3655</a>.</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/pypa/setuptools/compare/v59.6.0...v65.5.1\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=setuptools&package-manager=pip&previous-version=59.6.0&new-version=65.5.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621016bac254a19ac28f4d2",
    "number": 1651,
    "body": "Bumps [requests](https://github.com/psf/requests) from 2.27.1 to 2.31.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/psf/requests/releases\">requests's releases</a>.</em></p>\n<blockquote>\n<h2>v2.31.0</h2>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential\nforwarding of <code>Proxy-Authorization</code> headers to destination servers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a href=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>), Requests\nwill construct a <code>Proxy-Authorization</code> header that is attached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously reattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in the value being\nsent through the tunneled connection to the destination server. Users who rely on\ndefining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials through\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a href=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github Security Advisory</a>\nand <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>v2.30.0</h2>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing and\nreviewing <a href=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>v2.29.0</h2>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation to improve\nstandardization. (<a href=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/psf/requests/blob/main/HISTORY.md\">requests's changelog</a>.</em></p>\n<blockquote>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential\nforwarding of <code>Proxy-Authorization</code> headers to destination servers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a href=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>), Requests\nwill construct a <code>Proxy-Authorization</code> header that is attached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously reattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in the value being\nsent through the tunneled connection to the destination server. Users who rely on\ndefining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials through\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a href=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github Security Advisory</a>\nand <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing and\nreviewing <a href=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation to improve\nstandardization. (<a href=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n<h2>2.28.2 (2023-01-12)</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4\"><code>147c851</code></a> v2.31.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5\"><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>\n<li><a href=\"https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe\"><code>3022253</code></a> test on pypy 3.8 and pypy 3.9 on windows and macos (<a href=\"https://redirect.github.com/psf/requests/issues/6424\">#6424</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149\"><code>b639e66</code></a> test on py3.12 (<a href=\"https://redirect.github.com/psf/requests/issues/6448\">#6448</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be\"><code>d3d5044</code></a> Fixed a small typo (<a href=\"https://redirect.github.com/psf/requests/issues/6452\">#6452</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29\"><code>2ad18e0</code></a> v2.30.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773\"><code>f2629e9</code></a> Remove strict parameter (<a href=\"https://redirect.github.com/psf/requests/issues/6434\">#6434</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8\"><code>87d63de</code></a> v2.29.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc\"><code>51716c4</code></a> enable the warnings plugin (<a href=\"https://redirect.github.com/psf/requests/issues/6416\">#6416</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71\"><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=\"https://redirect.github.com/psf/requests/issues/6418\">#6418</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/psf/requests/compare/v2.27.1...v2.31.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.27.1&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/integration/pip_repository_entry_points/requests-2.31.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump requests from 2.27.1 to 2.31.0 in /tests/integration/pip_repository_entry_points (#1651)\n\nBumps [requests](https://github.com/psf/requests) from 2.27.1 to 2.31.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/psf/requests/releases\">requests's\nreleases</a>.</em></p>\n<blockquote>\n<h2>v2.31.0</h2>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to\npotential\nforwarding of <code>Proxy-Authorization</code> headers to destination\nservers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a\nhref=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>),\nRequests\nwill construct a <code>Proxy-Authorization</code> header that is\nattached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously\nreattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in\nthe value being\nsent through the tunneled connection to the destination server. Users\nwho rely on\ndefining their proxy credentials in the URL are <em>strongly</em>\nencouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their\nproxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials\nthrough\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a\nhref=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github\nSecurity Advisory</a>\nand <a\nhref=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>v2.30.0</h2>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing\nand\nreviewing <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to\n<code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>v2.29.0</h2>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation\nto improve\nstandardization. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str\nsubclasses. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/psf/requests/blob/main/HISTORY.md\">requests's\nchangelog</a>.</em></p>\n<blockquote>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to\npotential\nforwarding of <code>Proxy-Authorization</code> headers to destination\nservers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a\nhref=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>),\nRequests\nwill construct a <code>Proxy-Authorization</code> header that is\nattached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously\nreattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in\nthe value being\nsent through the tunneled connection to the destination server. Users\nwho rely on\ndefining their proxy credentials in the URL are <em>strongly</em>\nencouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their\nproxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials\nthrough\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a\nhref=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github\nSecurity Advisory</a>\nand <a\nhref=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing\nand\nreviewing <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to\n<code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation\nto improve\nstandardization. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str\nsubclasses. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n<h2>2.28.2 (2023-01-12)</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4\"><code>147c851</code></a>\nv2.31.0</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5\"><code>74ea7cf</code></a>\nMerge pull request from GHSA-j8r2-6x86-q33q</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe\"><code>3022253</code></a>\ntest on pypy 3.8 and pypy 3.9 on windows and macos (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6424\">#6424</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149\"><code>b639e66</code></a>\ntest on py3.12 (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6448\">#6448</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be\"><code>d3d5044</code></a>\nFixed a small typo (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6452\">#6452</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29\"><code>2ad18e0</code></a>\nv2.30.0</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773\"><code>f2629e9</code></a>\nRemove strict parameter (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6434\">#6434</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8\"><code>87d63de</code></a>\nv2.29.0</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc\"><code>51716c4</code></a>\nenable the warnings plugin (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6416\">#6416</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71\"><code>a7da1ab</code></a>\ntry on ubuntu 22.04 (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6418\">#6418</a>)</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/psf/requests/compare/v2.27.1...v2.31.0\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.27.1&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621016cac254a19ac28f4d3",
    "number": 1650,
    "body": "Bumps [pygments](https://github.com/pygments/pygments) from 2.11.2 to 2.15.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pygments/pygments/releases\">pygments's releases</a>.</em></p>\n<blockquote>\n<h2>2.15.0</h2>\n<ul>\n<li>\n<p>Added lexers:</p>\n<ul>\n<li>Carbon (<a href=\"https://redirect.github.com/pygments/pygments/issues/2362\">#2362</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2365\">#2365</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2366\">#2366</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2367\">#2367</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2368\">#2368</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2369\">#2369</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2370\">#2370</a>)</li>\n<li>Dax (<a href=\"https://redirect.github.com/pygments/pygments/issues/2335\">#2335</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2345\">#2345</a>)</li>\n<li>MediaWiki Wikitext (<a href=\"https://redirect.github.com/pygments/pygments/issues/2373\">#2373</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/827\">#827</a>)</li>\n<li>PostgreSQL Explain (<a href=\"https://redirect.github.com/pygments/pygments/issues/2398\">#2398</a>)</li>\n<li>WGSL (WebGPU Shading Language) (<a href=\"https://redirect.github.com/pygments/pygments/issues/2386\">#2386</a>)</li>\n<li>X++ (<a href=\"https://redirect.github.com/pygments/pygments/issues/2339\">#2339</a>)</li>\n</ul>\n</li>\n<li>\n<p>Updated lexers:</p>\n<ul>\n<li>\n<p>AMDGPU: Add support for <code>scratch_</code> instructions, the <code>attr*.*</code> argument,\nas well as the <code>off</code> modifier (<a href=\"https://redirect.github.com/pygments/pygments/issues/2327\">#2327</a>).</p>\n</li>\n<li>\n<p>APDL: Miscellaneous improvements (<a href=\"https://redirect.github.com/pygments/pygments/issues/2314\">#2314</a>)</p>\n</li>\n<li>\n<p>bash/tcsh:</p>\n<ul>\n<li>Move <code>break</code> to keywords (<a href=\"https://redirect.github.com/pygments/pygments/issues/2377\">#2377</a>)</li>\n<li>Improve bash math expansion lexing (<a href=\"https://redirect.github.com/pygments/pygments/issues/2255\">#2255</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2353\">#2353</a>)</li>\n</ul>\n</li>\n<li>\n<p>Chapel: Support attributes (<a href=\"https://redirect.github.com/pygments/pygments/issues/2376\">#2376</a>)</p>\n</li>\n<li>\n<p>CMake: Implement bracket style comments (<a href=\"https://redirect.github.com/pygments/pygments/issues/2338\">#2338</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2354\">#2354</a>)</p>\n</li>\n<li>\n<p>CSS: Improve lexing of numbers inside function calls (<a href=\"https://redirect.github.com/pygments/pygments/issues/2382\">#2382</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2383\">#2383</a>)</p>\n</li>\n<li>\n<p>diff: Support normal diff syntax, as opposed to unified diff syntax (<a href=\"https://redirect.github.com/pygments/pygments/issues/2321\">#2321</a>)</p>\n</li>\n<li>\n<p>GLSL, HLSL:</p>\n<ul>\n<li>Support line continuations in preprocessor code (<a href=\"https://redirect.github.com/pygments/pygments/issues/2350\">#2350</a>)</li>\n<li>Improve preprocessor directive handling (<a href=\"https://redirect.github.com/pygments/pygments/issues/2357\">#2357</a>)</li>\n</ul>\n</li>\n<li>\n<p>LilyPond: minor update of builtins</p>\n</li>\n<li>\n<p>PHP: support attributes (<a href=\"https://redirect.github.com/pygments/pygments/issues/2055\">#2055</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2347\">#2347</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2360\">#2360</a>), fix anonymous classes without\nparameters (<a href=\"https://redirect.github.com/pygments/pygments/issues/2359\">#2359</a>), improve lexing of variable variable syntax (<a href=\"https://redirect.github.com/pygments/pygments/issues/2358\">#2358</a>)</p>\n</li>\n<li>\n<p>Python:</p>\n<ul>\n<li>Add missing builtins (<a href=\"https://redirect.github.com/pygments/pygments/issues/2334\">#2334</a>)</li>\n<li>Fix inconsistent lexing of <code>None</code> (<a href=\"https://redirect.github.com/pygments/pygments/issues/2406\">#2406</a>)</li>\n</ul>\n</li>\n<li>\n<p>Rebol/Red: Don't require script headers (<a href=\"https://redirect.github.com/pygments/pygments/issues/2348\">#2348</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2349\">#2349</a>)</p>\n</li>\n<li>\n<p>Spice: Update keywords (<a href=\"https://redirect.github.com/pygments/pygments/issues/2336\">#2336</a>)</p>\n</li>\n<li>\n<p>SQL+Jinja (<code>analyse_text</code> method): Fix catastrophic backtracking (<a href=\"https://redirect.github.com/pygments/pygments/issues/2355\">#2355</a>)</p>\n</li>\n<li>\n<p>Terraform: Add <code>hcl</code> alias (<a href=\"https://redirect.github.com/pygments/pygments/issues/2375\">#2375</a>)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Declare support for Python 3.11 and drop support for Python 3.6 (<a href=\"https://redirect.github.com/pygments/pygments/issues/2324\">#2324</a>).</p>\n</li>\n<li>\n<p>Update <code>native</code> style to improve contrast (<a href=\"https://redirect.github.com/pygments/pygments/issues/2325\">#2325</a>).</p>\n</li>\n<li>\n<p>Update `github-dark`` style to match latest Primer style (<a href=\"https://redirect.github.com/pygments/pygments/issues/2401\">#2401</a>)</p>\n</li>\n<li>\n<p>Revert a change that made guessing lexers based on file names slower\non Python 3.10 and older (<a href=\"https://redirect.github.com/pygments/pygments/issues/2328\">#2328</a>).</p>\n</li>\n<li>\n<p>Fix some places where a locale-dependent encoding could unintentionally\nbe used instead of UTF-8 (<a href=\"https://redirect.github.com/pygments/pygments/issues/2326\">#2326</a>).</p>\n</li>\n<li>\n<p>Fix Python traceback handling (<a href=\"https://redirect.github.com/pygments/pygments/issues/2226\">#2226</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2329\">#2329</a>).</p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pygments/pygments/blob/master/CHANGES\">pygments's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 2.15.0</h2>\n<p>(released April 10th, 2023)</p>\n<ul>\n<li>\n<p>Added lexers:</p>\n<ul>\n<li>Carbon (<a href=\"https://redirect.github.com/pygments/pygments/issues/2362\">#2362</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2365\">#2365</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2366\">#2366</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2367\">#2367</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2368\">#2368</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2369\">#2369</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2370\">#2370</a>)</li>\n<li>Dax (<a href=\"https://redirect.github.com/pygments/pygments/issues/2335\">#2335</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2345\">#2345</a>)</li>\n<li>MediaWiki Wikitext (<a href=\"https://redirect.github.com/pygments/pygments/issues/2373\">#2373</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/827\">#827</a>)</li>\n<li>PostgreSQL Explain (<a href=\"https://redirect.github.com/pygments/pygments/issues/2398\">#2398</a>)</li>\n<li>WGSL (WebGPU Shading Language) (<a href=\"https://redirect.github.com/pygments/pygments/issues/2386\">#2386</a>)</li>\n<li>X++ (<a href=\"https://redirect.github.com/pygments/pygments/issues/2339\">#2339</a>)</li>\n</ul>\n</li>\n<li>\n<p>Updated lexers:</p>\n<ul>\n<li>\n<p>AMDGPU: Add support for <code>scratch_</code> instructions, the <code>attr*.*</code> argument,\nas well as the <code>off</code> modifier (<a href=\"https://redirect.github.com/pygments/pygments/issues/2327\">#2327</a>).</p>\n</li>\n<li>\n<p>APDL: Miscellaneous improvements (<a href=\"https://redirect.github.com/pygments/pygments/issues/2314\">#2314</a>)</p>\n</li>\n<li>\n<p>bash/tcsh:</p>\n<ul>\n<li>Move <code>break</code> to keywords (<a href=\"https://redirect.github.com/pygments/pygments/issues/2377\">#2377</a>)</li>\n<li>Improve bash math expansion lexing (<a href=\"https://redirect.github.com/pygments/pygments/issues/2255\">#2255</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2353\">#2353</a>)</li>\n</ul>\n</li>\n<li>\n<p>Chapel: Support attributes (<a href=\"https://redirect.github.com/pygments/pygments/issues/2376\">#2376</a>)</p>\n</li>\n<li>\n<p>CMake: Implement bracket style comments (<a href=\"https://redirect.github.com/pygments/pygments/issues/2338\">#2338</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2354\">#2354</a>)</p>\n</li>\n<li>\n<p>CSS: Improve lexing of numbers inside function calls (<a href=\"https://redirect.github.com/pygments/pygments/issues/2382\">#2382</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2383\">#2383</a>)</p>\n</li>\n<li>\n<p>diff: Support normal diff syntax, as opposed to unified diff syntax (<a href=\"https://redirect.github.com/pygments/pygments/issues/2321\">#2321</a>)</p>\n</li>\n<li>\n<p>GLSL, HLSL:</p>\n<ul>\n<li>Support line continuations in preprocessor code (<a href=\"https://redirect.github.com/pygments/pygments/issues/2350\">#2350</a>)</li>\n<li>Improve preprocessor directive handling (<a href=\"https://redirect.github.com/pygments/pygments/issues/2357\">#2357</a>)</li>\n</ul>\n</li>\n<li>\n<p>LilyPond: minor update of builtins</p>\n</li>\n<li>\n<p>PHP: support attributes (<a href=\"https://redirect.github.com/pygments/pygments/issues/2055\">#2055</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2347\">#2347</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2360\">#2360</a>), fix anonymous classes without\nparameters (<a href=\"https://redirect.github.com/pygments/pygments/issues/2359\">#2359</a>), improve lexing of variable variable syntax (<a href=\"https://redirect.github.com/pygments/pygments/issues/2358\">#2358</a>)</p>\n</li>\n<li>\n<p>Python:</p>\n<ul>\n<li>Add missing builtins (<a href=\"https://redirect.github.com/pygments/pygments/issues/2334\">#2334</a>)</li>\n<li>Fix inconsistent lexing of <code>None</code> (<a href=\"https://redirect.github.com/pygments/pygments/issues/2406\">#2406</a>)</li>\n</ul>\n</li>\n<li>\n<p>Rebol/Red: Don't require script headers (<a href=\"https://redirect.github.com/pygments/pygments/issues/2348\">#2348</a>, <a href=\"https://redirect.github.com/pygments/pygments/issues/2349\">#2349</a>)</p>\n</li>\n<li>\n<p>Spice: Update keywords (<a href=\"https://redirect.github.com/pygments/pygments/issues/2336\">#2336</a>)</p>\n</li>\n<li>\n<p>SQL+Jinja (<code>analyse_text</code> method): Fix catastrophic backtracking (<a href=\"https://redirect.github.com/pygments/pygments/issues/2355\">#2355</a>)</p>\n</li>\n<li>\n<p>Terraform: Add <code>hcl</code> alias (<a href=\"https://redirect.github.com/pygments/pygments/issues/2375\">#2375</a>)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Declare support for Python 3.11 and drop support for Python 3.6 (<a href=\"https://redirect.github.com/pygments/pygments/issues/2324\">#2324</a>).</p>\n</li>\n<li>\n<p>Update <code>native</code> style to improve contrast (<a href=\"https://redirect.github.com/pygments/pygments/issues/2325\">#2325</a>).</p>\n</li>\n<li>\n<p>Update `github-dark`` style to match latest Primer style (<a href=\"https://redirect.github.com/pygments/pygments/issues/2401\">#2401</a>)</p>\n</li>\n<li>\n<p>Revert a change that made guessing lexers based on file names slower\non Python 3.10 and older (<a href=\"https://redirect.github.com/pygments/pygments/issues/2328\">#2328</a>).</p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pygments/pygments/commit/6c187ad83267be9ce142af3fd5c9e670339dc7aa\"><code>6c187ad</code></a> Prepare 2.15 release.</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/00b9cb022cc9c05784c43c11bd7f73e64008b347\"><code>00b9cb0</code></a> Prepare for release.</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/a0824a45f0bd6c45528fa16132f09dd3570a8234\"><code>a0824a4</code></a> Update CHANGES</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/26f9f6c852846fe579c37fe936a872b68fa686ba\"><code>26f9f6c</code></a> Merge pull request <a href=\"https://redirect.github.com/pygments/pygments/issues/2406\">#2406</a> from rdbende/fix-fromimport-none</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/62b1bbbe6e329268eaa4c68f0e3eb8867c450acc\"><code>62b1bbb</code></a> Change token of None after from keyword</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/acee60e4e8dde9ea99fc494740e20b06188791ac\"><code>acee60e</code></a> Update CHANGES</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/eaca69091119e0ac5c97e626ba9e3b21b688c5ed\"><code>eaca690</code></a> Add lexer for MediaWiki Wikitext (<a href=\"https://redirect.github.com/pygments/pygments/issues/2373\">#2373</a>)</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/0e9c87bcf096908956e031f15a4e589e83be1691\"><code>0e9c87b</code></a> Update CHANGES</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/ef0abbaece522732031d61391567c017d48d87b7\"><code>ef0abba</code></a> Add PostgreSQL Explain lexer (<a href=\"https://redirect.github.com/pygments/pygments/issues/2398\">#2398</a>)</li>\n<li><a href=\"https://github.com/pygments/pygments/commit/3c6e2af8fbc44bb1ef77389d09118c37faea8746\"><code>3c6e2af</code></a> Update CHANGES</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pygments/pygments/compare/2.11.2...2.15.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pygments&package-manager=pip&previous-version=2.11.2&new-version=2.15.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/integration/pip_repository_entry_points/pygments-2.15.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump pygments from 2.11.2 to 2.15.0 in /tests/integration/pip_repository_entry_points (#1650)\n\nBumps [pygments](https://github.com/pygments/pygments) from 2.11.2 to\n2.15.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pygments/pygments/releases\">pygments's\nreleases</a>.</em></p>\n<blockquote>\n<h2>2.15.0</h2>\n<ul>\n<li>\n<p>Added lexers:</p>\n<ul>\n<li>Carbon (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2362\">#2362</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2365\">#2365</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2366\">#2366</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2367\">#2367</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2368\">#2368</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2369\">#2369</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2370\">#2370</a>)</li>\n<li>Dax (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2335\">#2335</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2345\">#2345</a>)</li>\n<li>MediaWiki Wikitext (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2373\">#2373</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/827\">#827</a>)</li>\n<li>PostgreSQL Explain (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2398\">#2398</a>)</li>\n<li>WGSL (WebGPU Shading Language) (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2386\">#2386</a>)</li>\n<li>X++ (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2339\">#2339</a>)</li>\n</ul>\n</li>\n<li>\n<p>Updated lexers:</p>\n<ul>\n<li>\n<p>AMDGPU: Add support for <code>scratch_</code> instructions, the\n<code>attr*.*</code> argument,\nas well as the <code>off</code> modifier (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2327\">#2327</a>).</p>\n</li>\n<li>\n<p>APDL: Miscellaneous improvements (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2314\">#2314</a>)</p>\n</li>\n<li>\n<p>bash/tcsh:</p>\n<ul>\n<li>Move <code>break</code> to keywords (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2377\">#2377</a>)</li>\n<li>Improve bash math expansion lexing (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2255\">#2255</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2353\">#2353</a>)</li>\n</ul>\n</li>\n<li>\n<p>Chapel: Support attributes (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2376\">#2376</a>)</p>\n</li>\n<li>\n<p>CMake: Implement bracket style comments (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2338\">#2338</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2354\">#2354</a>)</p>\n</li>\n<li>\n<p>CSS: Improve lexing of numbers inside function calls (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2382\">#2382</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2383\">#2383</a>)</p>\n</li>\n<li>\n<p>diff: Support normal diff syntax, as opposed to unified diff syntax\n(<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2321\">#2321</a>)</p>\n</li>\n<li>\n<p>GLSL, HLSL:</p>\n<ul>\n<li>Support line continuations in preprocessor code (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2350\">#2350</a>)</li>\n<li>Improve preprocessor directive handling (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2357\">#2357</a>)</li>\n</ul>\n</li>\n<li>\n<p>LilyPond: minor update of builtins</p>\n</li>\n<li>\n<p>PHP: support attributes (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2055\">#2055</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2347\">#2347</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2360\">#2360</a>),\nfix anonymous classes without\nparameters (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2359\">#2359</a>),\nimprove lexing of variable variable syntax (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2358\">#2358</a>)</p>\n</li>\n<li>\n<p>Python:</p>\n<ul>\n<li>Add missing builtins (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2334\">#2334</a>)</li>\n<li>Fix inconsistent lexing of <code>None</code> (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2406\">#2406</a>)</li>\n</ul>\n</li>\n<li>\n<p>Rebol/Red: Don't require script headers (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2348\">#2348</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2349\">#2349</a>)</p>\n</li>\n<li>\n<p>Spice: Update keywords (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2336\">#2336</a>)</p>\n</li>\n<li>\n<p>SQL+Jinja (<code>analyse_text</code> method): Fix catastrophic\nbacktracking (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2355\">#2355</a>)</p>\n</li>\n<li>\n<p>Terraform: Add <code>hcl</code> alias (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2375\">#2375</a>)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Declare support for Python 3.11 and drop support for Python 3.6 (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2324\">#2324</a>).</p>\n</li>\n<li>\n<p>Update <code>native</code> style to improve contrast (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2325\">#2325</a>).</p>\n</li>\n<li>\n<p>Update `github-dark`` style to match latest Primer style (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2401\">#2401</a>)</p>\n</li>\n<li>\n<p>Revert a change that made guessing lexers based on file names slower\non Python 3.10 and older (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2328\">#2328</a>).</p>\n</li>\n<li>\n<p>Fix some places where a locale-dependent encoding could\nunintentionally\nbe used instead of UTF-8 (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2326\">#2326</a>).</p>\n</li>\n<li>\n<p>Fix Python traceback handling (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2226\">#2226</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2329\">#2329</a>).</p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pygments/pygments/blob/master/CHANGES\">pygments's\nchangelog</a>.</em></p>\n<blockquote>\n<h2>Version 2.15.0</h2>\n<p>(released April 10th, 2023)</p>\n<ul>\n<li>\n<p>Added lexers:</p>\n<ul>\n<li>Carbon (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2362\">#2362</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2365\">#2365</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2366\">#2366</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2367\">#2367</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2368\">#2368</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2369\">#2369</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2370\">#2370</a>)</li>\n<li>Dax (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2335\">#2335</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2345\">#2345</a>)</li>\n<li>MediaWiki Wikitext (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2373\">#2373</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/827\">#827</a>)</li>\n<li>PostgreSQL Explain (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2398\">#2398</a>)</li>\n<li>WGSL (WebGPU Shading Language) (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2386\">#2386</a>)</li>\n<li>X++ (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2339\">#2339</a>)</li>\n</ul>\n</li>\n<li>\n<p>Updated lexers:</p>\n<ul>\n<li>\n<p>AMDGPU: Add support for <code>scratch_</code> instructions, the\n<code>attr*.*</code> argument,\nas well as the <code>off</code> modifier (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2327\">#2327</a>).</p>\n</li>\n<li>\n<p>APDL: Miscellaneous improvements (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2314\">#2314</a>)</p>\n</li>\n<li>\n<p>bash/tcsh:</p>\n<ul>\n<li>Move <code>break</code> to keywords (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2377\">#2377</a>)</li>\n<li>Improve bash math expansion lexing (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2255\">#2255</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2353\">#2353</a>)</li>\n</ul>\n</li>\n<li>\n<p>Chapel: Support attributes (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2376\">#2376</a>)</p>\n</li>\n<li>\n<p>CMake: Implement bracket style comments (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2338\">#2338</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2354\">#2354</a>)</p>\n</li>\n<li>\n<p>CSS: Improve lexing of numbers inside function calls (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2382\">#2382</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2383\">#2383</a>)</p>\n</li>\n<li>\n<p>diff: Support normal diff syntax, as opposed to unified diff syntax\n(<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2321\">#2321</a>)</p>\n</li>\n<li>\n<p>GLSL, HLSL:</p>\n<ul>\n<li>Support line continuations in preprocessor code (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2350\">#2350</a>)</li>\n<li>Improve preprocessor directive handling (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2357\">#2357</a>)</li>\n</ul>\n</li>\n<li>\n<p>LilyPond: minor update of builtins</p>\n</li>\n<li>\n<p>PHP: support attributes (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2055\">#2055</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2347\">#2347</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2360\">#2360</a>),\nfix anonymous classes without\nparameters (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2359\">#2359</a>),\nimprove lexing of variable variable syntax (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2358\">#2358</a>)</p>\n</li>\n<li>\n<p>Python:</p>\n<ul>\n<li>Add missing builtins (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2334\">#2334</a>)</li>\n<li>Fix inconsistent lexing of <code>None</code> (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2406\">#2406</a>)</li>\n</ul>\n</li>\n<li>\n<p>Rebol/Red: Don't require script headers (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2348\">#2348</a>,\n<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2349\">#2349</a>)</p>\n</li>\n<li>\n<p>Spice: Update keywords (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2336\">#2336</a>)</p>\n</li>\n<li>\n<p>SQL+Jinja (<code>analyse_text</code> method): Fix catastrophic\nbacktracking (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2355\">#2355</a>)</p>\n</li>\n<li>\n<p>Terraform: Add <code>hcl</code> alias (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2375\">#2375</a>)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Declare support for Python 3.11 and drop support for Python 3.6 (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2324\">#2324</a>).</p>\n</li>\n<li>\n<p>Update <code>native</code> style to improve contrast (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2325\">#2325</a>).</p>\n</li>\n<li>\n<p>Update `github-dark`` style to match latest Primer style (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2401\">#2401</a>)</p>\n</li>\n<li>\n<p>Revert a change that made guessing lexers based on file names slower\non Python 3.10 and older (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2328\">#2328</a>).</p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/6c187ad83267be9ce142af3fd5c9e670339dc7aa\"><code>6c187ad</code></a>\nPrepare 2.15 release.</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/00b9cb022cc9c05784c43c11bd7f73e64008b347\"><code>00b9cb0</code></a>\nPrepare for release.</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/a0824a45f0bd6c45528fa16132f09dd3570a8234\"><code>a0824a4</code></a>\nUpdate CHANGES</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/26f9f6c852846fe579c37fe936a872b68fa686ba\"><code>26f9f6c</code></a>\nMerge pull request <a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2406\">#2406</a>\nfrom rdbende/fix-fromimport-none</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/62b1bbbe6e329268eaa4c68f0e3eb8867c450acc\"><code>62b1bbb</code></a>\nChange token of None after from keyword</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/acee60e4e8dde9ea99fc494740e20b06188791ac\"><code>acee60e</code></a>\nUpdate CHANGES</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/eaca69091119e0ac5c97e626ba9e3b21b688c5ed\"><code>eaca690</code></a>\nAdd lexer for MediaWiki Wikitext (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2373\">#2373</a>)</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/0e9c87bcf096908956e031f15a4e589e83be1691\"><code>0e9c87b</code></a>\nUpdate CHANGES</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/ef0abbaece522732031d61391567c017d48d87b7\"><code>ef0abba</code></a>\nAdd PostgreSQL Explain lexer (<a\nhref=\"https://redirect.github.com/pygments/pygments/issues/2398\">#2398</a>)</li>\n<li><a\nhref=\"https://github.com/pygments/pygments/commit/3c6e2af8fbc44bb1ef77389d09118c37faea8746\"><code>3c6e2af</code></a>\nUpdate CHANGES</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/pygments/pygments/compare/2.11.2...2.15.0\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pygments&package-manager=pip&previous-version=2.11.2&new-version=2.15.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621016dac254a19ac28f4d4",
    "number": 1649,
    "body": "This PR is to fix an issue that coverage report is empty when using transition module.\r\nThis is due to the absence of the `_lcov_merger` and `_collect_cc_coverage` attributes.\r\nCoverage reports will be created adding these attributes.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1600",
    "head_branch": "coverage-report-in-transition",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(coverage): add test attributes in transition module (#1649)\n\nThis PR is to fix an issue that coverage report is empty when using\ntransition module.\nThis is due to the absence of the `_lcov_merger` and\n`_collect_cc_coverage` attributes.\nCoverage reports will be created adding these attributes.\n\nFixes https://github.com/bazelbuild/rules_python/issues/1600"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621016dac254a19ac28f4d5",
    "number": 1648,
    "body": "Before this PR the requirements files for `osx` and `linux` would be\r\nsplit, but in practise they would be always the same. This means that\r\n`linux` users would have to ask an `osx` user to run a command where\r\nwe could actually just reuse the same files.\r\n\r\nSummary:\r\n- chore: add absl-py to `osx` requirements\r\n- chore: remove the `osx` requirements and rename `requirements_linux.txt`\r\n  to just be `requirements.txt` as both of the files are the same.\r\n",
    "head_branch": "fix/update-sphinx-requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: fix sphinx requirements (#1648)\n\nBefore this PR the requirements files for `osx` and `linux` would be\nsplit, but in practise they would be always the same. This means that\n`linux` users would have to ask an `osx` user to run a command where\nwe could actually just reuse the same files.\n\nSummary:\n- chore: add absl-py to `osx` requirements\n- chore: remove the `osx` requirements and rename\n`requirements_linux.txt`\n  to just be `requirements.txt` as both of the files are the same."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621016eac254a19ac28f4d6",
    "number": 1646,
    "body": null,
    "head_branch": "alexeagle/repro_1645",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621016fac254a19ac28f4d7",
    "number": 1644,
    "body": "This is for passing it in repository_rules and relies on the canonical\r\nlabel representation introduced in bazel 6.0 and symlink support (needs\r\nto be present on Windows) to work.\r\n\r\nThis allows the users to not need to `load` the interpreter label from\r\na `.bzl` file but instead specify the label in the form of\r\n`@<mytoolchainrepo>_host//:python`.\r\n\r\nIn order to make it work robustly on Windows, we do\r\n`repository_ctx.path(python_interpreter_label).realpath` to get the actual\r\npath of the Python interpreter on both, bzlmod and non-bzlmod setups on\r\nWindows within the `whl_library` repository rule. \r\n\r\nWork towards #1643.\r\n",
    "head_branch": "feat/setup-a-host-interpreter-for-external-repo-usage",
    "is_a_fork": true,
    "comments": [
      "Oh this is gonna be tough to remember. @chrislovecnm do you remember what the issue was with windows and trying to symlink to the python interpreter from another repo?",
      "Ah, this might be it: https://github.com/bazelbuild/rules_python/pull/1265\r\n\r\nSomething about: the symlink can't be executed directly / powershell issue / dll's can't be found from the symlink's location ?",
      "I am wondering then why the CI is still passing. Maybe the\n`repository_ctx` usage is good enough with `symlinks`, because\nthe `symlink` gets always resolve the real path before executing?\n\nJust to be explicit, I am not using the symlink in toolchain\nresolution. For that we already have the `alias` repos and this\nis only for the `repository_ctx` usecase and the Windows CI seems\nto be still happy. Do we need to make this `host_python` repo\ninternal to `rules_python` in some way?\n",
      "Yeah, the previous `path.realpath` usage was only on Windows bzlmod, when I enabled it for everything, it started working again (the multi-python-version tests on non-bzlmod started failing because the `path.realpath` workaround was missing there."
    ],
    "commit_messages": [
      "feat(toolchain, pip.parse): introduce a new '_host' toolchain repo (#1644)\n\nThis is for passing it in repository_rules and relies on the canonical\nlabel representation introduced in bazel 6.0 and symlink support (needs\nto be present on Windows) to work.\n\nThis allows the users to not need to `load` the interpreter label from\na `.bzl` file but instead specify the label in the form of\n`@<mytoolchainrepo>_host//:python`.\n\nIn order to make it work robustly on Windows, we do\n`repository_ctx.path(python_interpreter_label).realpath` to get the\nactual\npath of the Python interpreter on both, bzlmod and non-bzlmod setups on\nWindows within the `whl_library` repository rule. \n\nWork towards #1643."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210170ac254a19ac28f4d8",
    "number": 1642,
    "body": "This fixes a bug where, if a module tries to register a non-default toolchain with the\r\nsame version as rules_python's default toolchain, an error would occur. This happened\r\nbecause the earlier (non-default) toolchain caused the later (default) toolchain to\r\nbe entirely skipped, and then no default toolchain would be seen. This most affects\r\nintermediary modules that need to register a toolchain, but can't specify a default one.\r\n\r\nTo fix, just skip creating and registering the duplicate toolchain, but still check\r\nits default-ness to determine if it's the default toolchain.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1638",
    "head_branch": "submodule.reregisters.default.toolchain",
    "is_a_fork": true,
    "comments": [
      "Hit this bug. Thank you so much for fixing. Is there a release that would include it on the horizon?",
      "Yes. The PR updating the changlog for 0.28.0 is in the merge queue now, a new release will be made once that's merged",
      "Amazing. Thank you!"
    ],
    "commit_messages": [
      "fix(bzlmod): allow modules to register the same toolchain as rules_python's default (#1642)\n\nThis fixes a bug where, if a module tries to register a non-default\ntoolchain with the\nsame version as rules_python's default toolchain, an error would occur.\nThis happened\nbecause the earlier (non-default) toolchain caused the later (default)\ntoolchain to\nbe entirely skipped, and then no default toolchain would be seen. This\nmost affects\nintermediary modules that need to register a toolchain, but can't\nspecify a default one.\n\nTo fix, just skip creating and registering the duplicate toolchain, but\nstill check\nits default-ness to determine if it's the default toolchain.\n\nFixes https://github.com/bazelbuild/rules_python/issues/1638"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210171ac254a19ac28f4d9",
    "number": 1640,
    "body": "This just writes down our support policies and puts them in a single location in the hosted\r\ndocs. Summarized:\r\n\r\n* Bazel version support is as discussed from the maintainers meeting: upcoming,\r\n  current, and last versions\r\n* Reference the Bazel rule compatibility guidelines (always having an incremental\r\n  path to upgrade)\r\n* Described what experimental features mean.\r\n* Only support the latest rules_python version; older ones are best effort.\r\n* Only support platforms CI can run.\r\n\r\nWork towards #1361\r\n",
    "head_branch": "support.docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: document support policies (#1640)\n\nThis just writes down our support policies and puts them in a single\nlocation in the hosted\ndocs. Summarized:\n\n* Bazel version support is as discussed from the maintainers meeting:\nupcoming,\n  current, and last versions\n* Reference the Bazel rule compatibility guidelines (always having an\nincremental\n  path to upgrade)\n* Described what experimental features mean.\n* Only support the latest rules_python version; older ones are best\neffort.\n* Only support platforms CI can run.\n\nWork towards #1361"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210171ac254a19ac28f4da",
    "number": 1637,
    "body": "Before this PR there was a typo, that was actually causing the\r\npatching function to not use the provided patches. With this change\r\nwe are finally correctly doing it. After fixing this bug I noticed\r\nthat `repository_ctx.patch` results in files with `CRLF` on Windows,\r\nwhich made me make the `RECORD` mismatch to be a warning rather than\r\na hard failure to make the CI happy and allow users on Windows to\r\npatch wheels but see a warning if they have a multi-platform bazel\r\nsetup.\r\n\r\nThe `CRLF` endings on Windows issue is fixed in\r\nbazelbuild/bazel@07e0d316a345a3cb2593f98525320590bbc56e30\r\n\r\nRelated #1631, #1639.\r\n",
    "head_branch": "fix/fix-patch-application",
    "is_a_fork": true,
    "comments": [
      "It seems that the tests started failing on windows, because `bazel`'s `rctx.patch` has different behaviour on Windows as it is replacing the line endings with `CRLF` as opposed to leaving them `LF`.\r\n\r\nI could reproduce this by changing the repackaging code with:\r\n```\r\n--- a/python/private/repack_whl.py\r\n+++ b/python/private/repack_whl.py\r\n@@ -148,6 +148,8 @@ def main(sys_argv):\r\n\r\n         with _WhlFile(args.output, mode=\"w\", distinfo_dir=distinfo_dir) as out:\r\n             for p in _files_to_pack(patched_wheel_dir, record_contents):\r\n+                if p.name == \"METADATA\":\r\n+                    p.write_text(p.read_text().replace(\"\\n\", \"\\r\\n\"))\r\n                 rel_path = p.relative_to(patched_wheel_dir)\r\n                 out.add_file(str(rel_path), p)\r\n```\r\n\r\nAnd the test started failing with:\r\n```\r\nrepack_whl: ERROR: Please also patch the RECORD file with:\r\n--- a/requests-2.25.1.dist-info/RECORD\r\n+++ b/requests-2.25.1.dist-info/RECORD\r\n@@ -17,7 +17,7 @@\r\n requests/structures.py,sha256=msAtr9mq1JxHd-JRyiILfdFlpbJwvvFuP3rfUQT_QxE,3005\r\n requests/utils.py,sha256=_K9AgkN6efPe-a-zgZurXzds5PBC0CzDkyjAE2oCQFQ,30529\r\n requests-2.25.1.dist-info/LICENSE,sha256=CeipvOyAZxBGUsFoaFqwkx54aPnIKEtm9a5u2uXxEws,10142\r\n-requests-2.25.1.dist-info/METADATA,sha256=fRSAA0u0Bi0heD4zYq91wdNUTJlbzhK6_iDOcRRNDx4,4177\r\n+requests-2.25.1.dist-info/METADATA,sha256=FIRoD6JzkS0gW2tgRJemIR-Dj9FVZPLY7ALIWbib-bg,4280\r\n requests-2.25.1.dist-info/WHEEL,sha256=Z-nyYpwrcSqxfdux5Mbn_DQ525iP7J2DG3JgGvOYyTQ,110\r\n requests-2.25.1.dist-info/top_level.txt,sha256=fMSVmHfb5rbGOo6xv-O_tUX6j-WyixssE-SnwcDRxNQ,9\r\n requests-2.25.1.dist-info/RECORD,,\r\n```\r\nwhich is exactly the same suggested sha value as on failing Windows tests.",
      "@rickeylev, feel free to merge if you agree with the warning refactor."
    ],
    "commit_messages": [
      "fix(whl_library): actually apply patches and warn if RECORD file patch is needed (#1637)\n\nBefore this PR there was a typo, that was actually causing the\npatching function to not use the provided patches. With this change\nwe are finally correctly doing it. After fixing this bug I noticed\nthat `repository_ctx.patch` results in files with `CRLF` on Windows,\nwhich made me make the `RECORD` mismatch to be a warning rather than\na hard failure to make the CI happy and allow users on Windows to\npatch wheels but see a warning if they have a multi-platform bazel\nsetup.\n\nThe `CRLF` endings on Windows issue is fixed in\nbazelbuild/bazel@07e0d316a345a3cb2593f98525320590bbc56e30\n\nRelated #1631, #1639."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210172ac254a19ac28f4db",
    "number": 1636,
    "body": "It seems that the CI did not catch the `macosx_10_9_universal2` wheels\r\nedge case, which this new code is handling. I moved the implementation\r\nto starlark because #1625 needs this.\r\n\r\nNo changelog is needed because the feature this is fixing/refactoring\r\nan unreleased feature.",
    "head_branch": "fix/universal2-mac-wheel-parsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor(whl_library): reimplement wheel platform parsing in starlark (#1636)\n\nIt seems that the CI did not catch the `macosx_10_9_universal2` wheels\nedge case, which this new code is handling. I moved the implementation\nto starlark because #1625 needs this.\n\nNo changelog is needed because the feature this is fixing/refactoring\nan unreleased feature.\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210173ac254a19ac28f4dc",
    "number": 1635,
    "body": "Updating doc on the generation of `py_binary` targets to include the new feature that creates a py_binary target per main module.",
    "head_branch": "py_binary_doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "doc: Updating doc on py_binary generation (#1635)\n\nUpdating doc on the generation of `py_binary` targets to include the new\nfeature that creates a py_binary target per main module."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210174ac254a19ac28f4dd",
    "number": 1634,
    "body": "When using Python 3.10 or earlier, the first `sys.path` entry is the directory containing the script. This can result in modules being loaded from the source root rather than the runfiles root, which the runfiles library previously didn't support.\r\n\r\nFixes #1631\r\n",
    "head_branch": "1631-fix-runfiles-lookup",
    "is_a_fork": true,
    "comments": [
      "@rickeylev Not sure what the CI failures are about.",
      "The CI should be happy again if you rebase. We had some issues when this PR was created, if I remember correctly.",
      "re: just assume the file is in the main repo if its loaded from outside the runfiles\r\n\r\nYeah, that's probably fine. This is to support older Python versions that were already relying on non-hermetic behavior.\r\n\r\nI think this problem would only happen for files that are in the same directory (or a subdirectory of) as the main .py file? I don't see how an import would be able to find such files otherwise. So I suppose the `sys.modules[\"__main__\"].__file__` could be used in lieu of the caller's file in this situation. A main entry point that is in another repo _and_ is relying on `sys.path[0]` being main's directory is likely for an ad-hoc tool in the main repo, but seems unlikely for any sort of library code.",
      "Any updates on this PR? I think I'm hitting the same issue",
      "I merged `main` into this PR, let's see how it goes.\n",
      "The problem indeed does only surface in edge-cases where:\r\n  - Bazel 7 is used, with or without bzlmod\r\n  - Python 3.9 or earlier is used\r\n  - Runfiles rlocation is called from a file which is in the same directory as the main.py file (or test entry point)\r\n\r\nBut still I think this looks like the best solution for now, so it would be great to get this integrated if possible. Gentle ping @rickeylev "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210175ac254a19ac28f4de",
    "number": 1632,
    "body": "This enables bzlmod by default so that, by default, builds are using it for both Bazel 6\r\nand Bazel 7.\r\n\r\nThis exposed some gaps in our test coverage, so some new jobs are created to cover\r\nminimum bzlmod and workspace versions. Basically, our CI config used mostly\r\nworkspace builds, while Bazel's downstream testing used bzlmod builds. Changing\r\nour config to default to bzlmod means we lost most workspace build coverage.\r\n\r\nUnfortunately, adding these new jobs goes over the CI job limit, so I consolidated\r\ntests a bit:\r\n* The py_proto_library example for bzlmod is moved under the bzlmod example. This saves\r\n  about 6 jobs\r\n* Change some tests with both (Bazel 7, workspace) and (Bazel 6, workspace) to have\r\n  just one of the two. This saves about 4 jobs. Many jobs still test both, so coverage\r\n  should still be sufficient.\r\n\r\nAlso some various cleanups:\r\n* Deletes the last bazel-in-bazel integration test using our old, private, fork of\r\n  bazel_integration_test. It hasn't been running in a long time and is broken.\r\n* Renames the CI jobs to have shorter names.",
    "head_branch": "enable.bzlmod.default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: enable bzlmod by default (for Bazel 6) (#1632)\n\nThis enables bzlmod by default so that, by default, builds are using it\nfor both Bazel 6\nand Bazel 7.\n\nThis exposed some gaps in our test coverage, so some new jobs are\ncreated to cover\nminimum bzlmod and workspace versions. Basically, our CI config used\nmostly\nworkspace builds, while Bazel's downstream testing used bzlmod builds.\nChanging\nour config to default to bzlmod means we lost most workspace build\ncoverage.\n\nUnfortunately, adding these new jobs goes over the CI job limit, so I\nconsolidated\ntests a bit:\n* The py_proto_library example for bzlmod is moved under the bzlmod\nexample. This saves\n  about 6 jobs\n* Change some tests with both (Bazel 7, workspace) and (Bazel 6,\nworkspace) to have\njust one of the two. This saves about 4 jobs. Many jobs still test both,\nso coverage\n  should still be sufficient.\n\nAlso some various cleanups:\n* Deletes the last bazel-in-bazel integration test using our old,\nprivate, fork of\nbazel_integration_test. It hasn't been running in a long time and is\nbroken.\n* Renames the CI jobs to have shorter names."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210176ac254a19ac28f4df",
    "number": 1630,
    "body": "When multiple main modules import the same package, the package is only added to one of the main module's deps, this is because the `allDeps` set returned from `parse` removed the duplicates based on the import's name.\r\n\r\nThis PR have every main module maintains a list of deps it imports to avoid this issue.",
    "head_branch": "main_deps",
    "is_a_fork": true,
    "comments": [
      "@aignas in case you missed this PR"
    ],
    "commit_messages": [
      "fix: missing dependencies of py_binary (#1630)\n\nWhen multiple main modules import the same package, the package is only\nadded to one of the main module's deps, this is because the `allDeps`\nset returned from `parse` removed the duplicates based on the import's\nname.\n\nThis PR have every main module maintains a list of deps it imports to\navoid this issue."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210176ac254a19ac28f4e0",
    "number": 1629,
    "body": "The template language Stardoc uses (Velocity) is niche and fairly\r\nesoteric, and requires a lot of experimenting to understand how to\r\nmake it produce the desired output. In particular, it largely assumes\r\nwhitespace doesn't matter, which makes it a poor fit for generating\r\nMarkdown, where whitespace often does matter.\r\n\r\nInstead, a small Python program is used to consume the binary proto\r\noutput of Stardoc, which converts it to Markdown. This also makes it\r\neasier to customize the overall output and re-use code for the different\r\ntypes of objects rendered.\r\n\r\nThe visible changes to the docs are:\r\n  * Module extensions are now documented\r\n  * Repository rules follow the style of the other generated docs\r\n  * Fixed the rendering of pip_repository docs -- it had an h2\r\n    section which broke the section grouping of the API objects.\r\n  * Puts some padding between the border and content for text in\r\n    params/attrs/fields listings.\r\n\r\nOther notable changes:\r\n  * Make RTD builds use bzlmod. This is necessary so that the pip\r\n    extension can be documented. It loads\r\n    `@pythons_hub//:interpreters.bzl`, but that repo is only created\r\n    when bzlmod is enabled)",
    "head_branch": "docs.proto.template",
    "is_a_fork": true,
    "comments": [
      "Ah doh, need to fix a few test failures before review.",
      "Ok, tests fixed. Just windows flakes left."
    ],
    "commit_messages": [
      "docs: use stardoc proto output to generate markdown docs (#1629)\n\nThe template language Stardoc uses (Velocity) is niche and fairly\nesoteric, and requires a lot of experimenting to understand how to\nmake it produce the desired output. In particular, it largely assumes\nwhitespace doesn't matter, which makes it a poor fit for generating\nMarkdown, where whitespace often does matter.\n\nInstead, a small Python program is used to consume the binary proto\noutput of Stardoc, which converts it to Markdown. This also makes it\neasier to customize the overall output and re-use code for the different\ntypes of objects rendered.\n\nThe visible changes to the docs are:\n  * Module extensions are now documented\n  * Repository rules follow the style of the other generated docs\n  * Fixed the rendering of pip_repository docs -- it had an h2\n    section which broke the section grouping of the API objects.\n  * Puts some padding between the border and content for text in\n    params/attrs/fields listings.\n\nOther notable changes:\n  * Make RTD builds use bzlmod. This is necessary so that the pip\n    extension can be documented. It loads\n    `@pythons_hub//:interpreters.bzl`, but that repo is only created\n    when bzlmod is enabled)\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210177ac254a19ac28f4e1",
    "number": 1628,
    "body": "This refactors the `whl_mods` tests to not rely on the layout of the\nrepositories, which I found to be needed whilst prototyping on #1625.\nWhilst doing this I realized that in general it would be great to\nsupport `Path` instances in the `runfiles` library, but that should be\ndone next time.\n",
    "head_branch": "test/refactor-example-tests",
    "is_a_fork": true,
    "comments": [
      "The change can be smaller, so I'll revert the path usage within the tests and will keep the helper methods returnitg strings. The implementation of those should return Path.name as opposed to just Path."
    ],
    "commit_messages": [
      "test(bzlmod): refactor tests to not depend on implementation details (#1628)\n\nThis refactors the `whl_mods` tests to not rely on the layout of the\nrepositories, which I found to be needed whilst prototyping on #1625.\nWhilst doing this I realized that in general it would be great to\nsupport `Path` instances in the `runfiles` library, but that should be\ndone next time."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210178ac254a19ac28f4e2",
    "number": 1627,
    "body": "This is a simple change to make it possible to reuse the vendored\r\nauthentication code for easier reuse within the repository.\r\n\r\nSplit from #1625\r\n",
    "head_branch": "refactor/extract-auth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: extract auth.bzl out of repositories.bzl (#1627)\n\nThis is a simple change to make it possible to reuse the vendored\nauthentication code for easier reuse within the repository.\n\nSplit from #1625"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210179ac254a19ac28f4e3",
    "number": 1626,
    "body": "Whilst prototyping for #1625, I realized that this feature would be useful\r\nin general when rendering external repositories. This does not include a\r\nCHANGELOG because it is not visible to the users.\r\n",
    "head_branch": "internal/support-visibility-alias",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal: support setting visibility when rendering aliases (#1626)\n\nWhilst prototyping for #1625, I realized that this feature would be\nuseful\nin general when rendering external repositories. This does not include a\nCHANGELOG because it is not visible to the users.\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017aac254a19ac28f4e4",
    "number": 1625,
    "body": "This is a reasonably polished POC to support bazel downloader to fetch wheels\nand to setup multi-platform whl targets which would allow us to almost\ncorrectly setup the dependency tree.\n\nIn general usecase this yield great performance improvements whilst running the\ntests as the fetching of the wheels is much faster.\n\nIdeas for improvements:\n- [x] Setup auth for the wheel fetching.\n- [x] Test with a private registry.\n- [ ] Add support for wheels located on the local file system.\n- [x] Make the whl metadata fetching optional.\n",
    "head_branch": "exp/whl-minihub",
    "is_a_fork": true,
    "comments": [
      "I've split out #1626, #1627, #1628 for easier review in the future, the rest of the changes are either new files or `bzlmod/pip.bzl` related changes.",
      "Given the latest developments and https://discuss.python.org/t/lock-files-again-but-this-time-w-sdists/46593, this is paused for some time.",
      "Some notes on the implementation of how this could be done reasonably cleanly.\r\n\r\n1. The `pip.parse` tag class can create the following repos: pip hub, pip spoke repos, whl `http_file` repos and whl hub repo. The whl hub repo is common for all pip hub repos and the pip spoke repos use the whl files downloaded by `http_file` repos.\r\n2. The `whl hub repo` is loaded by `rules_python` so that we can very easily pass around the `whl` label references when constructing the pip spoke repos.\r\n3. Ideally the `whl hub repo` is set as a default in a configurable attribute.\r\n4. The `whl` repos are setup in the same way as #1744 is done, but for multiple platforms.\r\n\r\nIf we would need to somehow split the whl hub and pip hub generation, then we would need to do as follows:\r\n1. Have a `pypi.index` tag class that can parse the lock files and generate the necessary URL and label references to the subset of the PyPI world that we need to include. It would generate a single hub repo with many spokes. Isolated mode of using the extension would still work.\r\n2. The `pip.parse` then uses the hub repo created by `pypi.index` tag class. It could have an attribute `index_hub = attr.label()` where we could set it to \"@pypi_index//:BUILD.bazel` after doing `use_repo(pypi_index, pypi_index = \"repo_from_extension\")`.\r\n\r\nIn the second option the user would use it as:\r\n```starlark\r\npypi = use_extension(\"@rules_python//python/extensions/pypi.bzl\", \"pypi\")\r\n# The following can be called multiple times\r\npypi.index_requirements(\r\n    index_url = \"foo\",\r\n    extra_index_urls = [\"bar\"],\r\n    srcs = [\r\n        \"//:my_requirements.txt\",\r\n    ],\r\n)\r\n\r\nuse_repo(pypi, \"pypi_index\")\r\n\r\npip = use_extension(\"@rules_python//python/extensions/pip.bzl\", \"pip\")\r\npip.index(index=\"@pypi_index//:packages.json\")  # contains the package and the labels to the metadata files for each package.\r\n\r\n# Use stuff as previously.\r\npip.parse(\r\n    hub_repo = \"pip\",\r\n    src = \"//:my_requirements.txt\",\r\n)\r\n```",
      "Will re-implement this in separate PRs."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017aac254a19ac28f4e5",
    "number": 1623,
    "body": null,
    "head_branch": "empty_whl_map",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1623/checks?check_run_id=19722375481) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017bac254a19ac28f4e6",
    "number": 1622,
    "body": "Before this PR all of our examples are referring to the default PyPI by its\nlegacy URL. This PR just makes things more consistent by updating URLs to point\nto the pypi.org as pypi.python.org does not have any guarantees to be up.\n\nSee https://packaging.python.org/en/latest/guides/migrating-to-pypi-org/\n",
    "head_branch": "chore/switch-to-pypi-org",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "doc: switch to pypi.org (#1622)\n\nBefore this PR all of our examples are referring to the default PyPI by\nits\nlegacy URL. This PR just makes things more consistent by updating URLs\nto point\nto the pypi.org as pypi.python.org does not have any guarantees to be\nup.\n\nSee https://packaging.python.org/en/latest/guides/migrating-to-pypi-org/"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017cac254a19ac28f4e7",
    "number": 1621,
    "body": "This PR allows `py_runtime` to accept an executable (e.g. `sh_binary`).\r\n\r\nThis makes it easier to customize the interpreter binary used, as it allows\r\nintercepting invocation of the interpreter. For example, it can be used to\r\nchange how the interpreter searches for dynamic libraries.\r\n\r\nRelated to https://github.com/bazelbuild/rules_python/issues/1612",
    "head_branch": "py-runtime-allow-executable-targets",
    "is_a_fork": true,
    "comments": [
      "Thanks for the review, I've also added a bare bones unit test",
      "Awesome, thank you for getting this over the line!"
    ],
    "commit_messages": [
      "feat(py_runtime): Allow `py_runtime` to take an executable target as the interpreter (#1621)\n\nThis PR allows `py_runtime` to accept an executable (e.g. `sh_binary`).\n\nThis makes it easier to customize the interpreter binary used, as it\nallows\nintercepting invocation of the interpreter. For example, it can be used\nto\nchange how the interpreter searches for dynamic libraries.\n\nRelated to https://github.com/bazelbuild/rules_python/issues/1612\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017dac254a19ac28f4e8",
    "number": 1620,
    "body": "Requirements files are permitted to have duplicate lines for the same package. An example\r\nof this is having separate lines for a package and its extras. When we parse requirements,\r\nthe parser discards the \"extra\" portion of the entry and returns a list of all the packages\r\nas-is. When a repository is created for each entry, this means the same name is used for\r\nmultiple repositories.\r\n\r\nUnder WORKSPACE builds, duplicate repository names aren't an error. It appears that last\r\ndefined repo takes affect. Under bzlmod, duplicate repo names are an error.\r\n\r\nTo fix, mimic the last-defined-wins behavior in bzlmod by using a map to dedupe the package names.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1615",
    "head_branch": "dupe.whl.lib.name",
    "is_a_fork": true,
    "comments": [
      "The test failures look like the `pre-commit` hook may need to be run or something similar?",
      "@rickeylev I patched this to our local environment and can confirm it works!"
    ],
    "commit_messages": [
      "fix(bzlmod pip.parse): allow requirements with duplicate package lines (#1620)\n\nRequirements files are permitted to have duplicate lines for the same\npackage. An example\nof this is having separate lines for a package and its extras. When we\nparse requirements,\nthe parser discards the \"extra\" portion of the entry and returns a list\nof all the packages\nas-is. When a repository is created for each entry, this means the same\nname is used for\nmultiple repositories.\n\nUnder WORKSPACE builds, duplicate repository names aren't an error. It\nappears that last\ndefined repo takes affect. Under bzlmod, duplicate repo names are an\nerror.\n\nTo fix, mimic the last-defined-wins behavior in bzlmod by using a map to\ndedupe the package names.\n\nFixes https://github.com/bazelbuild/rules_python/issues/1615"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017eac254a19ac28f4e9",
    "number": 1619,
    "body": "The `python_interpreter` arg wasn't being properly handled in the bzlmod code in two ways.\r\n\r\n1. Lookup of a hermetic runtime wasn't being skipped when it was set. The net effect was it\r\n   ignored the specified interpreter and would try to lookup a hermetic interpreter using\r\n   the python version. To fix, add a check for python_interpreter to the guard of the lookup. \r\n\r\n2. Specifying an absolute path for the value wasn't being converted to a `path` object,\r\n   which meant a plain string eventually made its way to some code expecting a `path`\r\n   object. To fix, call `repository_ctx.path()` on the path to convert it to a path object.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1618",
    "head_branch": "pip.parse.sys.python",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(pip.parse): allow absolute path for python_interpreter; skip hermetic toolchain lookup when used (#1619)\n\nThe `python_interpreter` arg wasn't being properly handled in the bzlmod\ncode in two ways.\n\n1. Lookup of a hermetic runtime wasn't being skipped when it was set.\nThe net effect was it\nignored the specified interpreter and would try to lookup a hermetic\ninterpreter using\nthe python version. To fix, add a check for python_interpreter to the\nguard of the lookup.\n\n2. Specifying an absolute path for the value wasn't being converted to a\n`path` object,\nwhich meant a plain string eventually made its way to some code\nexpecting a `path`\nobject. To fix, call `repository_ctx.path()` on the path to convert it\nto a path object.\n\nFixes https://github.com/bazelbuild/rules_python/issues/1618"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017eac254a19ac28f4ea",
    "number": 1617,
    "body": "This better unifies where docs can be viewed.\r\n\r\nAlso deletes some mentions of having to generate the docs manually.",
    "head_branch": "docs.changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: include changelog and contributing page in generated docs. (#1617)\n\nThis better unifies where docs can be viewed.\n\nAlso deletes some mentions of having to generate the docs manually."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621017fac254a19ac28f4eb",
    "number": 1616,
    "body": "The release notes were using the old `pip.parse` api that used the `name` arg and\r\nweren't mentioning the `python_version` arg.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: update pip.parse example in release notes (#1616)\n\nThe release notes were using the old `pip.parse` api that used the\n`name` arg and\nweren't mentioning the `python_version` arg."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210180ac254a19ac28f4ec",
    "number": 1614,
    "body": "The `py_binary` targets for main modules should only depend on the modules that it imports, not blindly inheriting from the py_library.",
    "head_branch": "main_deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: trimming deps in py_binary (#1614)\n\nThe `py_binary` targets for main modules should only depend on the\nmodules that it imports, not blindly inheriting from the py_library."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210181ac254a19ac28f4ed",
    "number": 1613,
    "body": "With the release of Bazel 7, support for 5 is no longer necessary.\r\n\r\nAlso deletes all the integration tests of the examples. They were broken when\r\nrun from the main repo, and CI was only building them, not running them, as part\r\nof the main repo due to having `--test_tag_filters=-integration-test`. CI runs them\r\nseparately in their own workspace.\r\n\r\nWork towards #1069",
    "head_branch": "bazel.5to7.ci",
    "is_a_fork": true,
    "comments": [
      "Huh. Apparently all those bazel_integration_test targets in the examples directory have been broken and CI has been skipping them as part of the main repo tests (CI runs them as separate jobs in separate workspace directories). I just went and deleted them."
    ],
    "commit_messages": [
      "chore: Update Bazel support: drop 5, minimum 6.2, current 7.0 (#1613)\n\nWith the release of Bazel 7, support for 5 is no longer necessary.\n\nAlso deletes all the integration tests of the examples. They were broken\nwhen\nrun from the main repo, and CI was only building them, not running them,\nas part\nof the main repo due to having `--test_tag_filters=-integration-test`.\nCI runs them\nseparately in their own workspace.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210182ac254a19ac28f4ee",
    "number": 1611,
    "body": "This fixes two bugs from https://github.com/bazelbuild/rules_python/pull/1574:\r\n* Bazel 6's py_binary rejects the rules_python Starlark implemented PyRuntimeInfo.\r\n* python_bootstrap_template.txt isn't public; this prevents py_runtime from being\r\n  used outside rules_python itself (e.g. in the python toolchain repos)\r\n\r\nWith Bazel 6, the `py_binary` rule performs a type check of the PyRuntimeInfo value it gets from the toolchain to verify it is an instance of the Java-implemented PyRuntimeInfo class. This type check fails when the provider is implemented in rules_python in Starlark.\r\n\r\nTo fix, make the `py_runtime_info` prefer the builtin PyRuntimeInfo provider when running under Bazel 6. The two providers are (currently) the same, so are mostly interchangable. This satisfies the type check that `py_binary` performs.\r\n\r\n`py_runtime` as an implicit dependency on `//python/private:python_bootstrap_template.txt`,\r\nbut that target is only visible to rules python itself. This means the py_runtime targets\r\ncreated in the toolchain repos fail. To fix, make the file public.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/1610",
    "head_branch": "fix.py.runtime.bazel.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(py_runtime): make py_runtime_pair return builtin PyRuntimeInfo under Bazel 6; make python_bootstrap_template public (#1611)\n\nThis fixes two bugs from\nhttps://github.com/bazelbuild/rules_python/pull/1574:\n* Bazel 6's py_binary rejects the rules_python Starlark implemented\nPyRuntimeInfo.\n* python_bootstrap_template.txt isn't public; this prevents py_runtime\nfrom being\n  used outside rules_python itself (e.g. in the python toolchain repos)\n\nWith Bazel 6, the `py_binary` rule performs a type check of the\nPyRuntimeInfo value it gets from the toolchain to verify it is an\ninstance of the Java-implemented PyRuntimeInfo class. This type check\nfails when the provider is implemented in rules_python in Starlark.\n\nTo fix, make the `py_runtime_info` prefer the builtin PyRuntimeInfo\nprovider when running under Bazel 6. The two providers are (currently)\nthe same, so are mostly interchangable. This satisfies the type check\nthat `py_binary` performs.\n\n`py_runtime` as an implicit dependency on\n`//python/private:python_bootstrap_template.txt`,\nbut that target is only visible to rules python itself. This means the\npy_runtime targets\ncreated in the toolchain repos fail. To fix, make the file public.\n\nFixes https://github.com/bazelbuild/rules_python/issues/1610"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210182ac254a19ac28f4ef",
    "number": 1608,
    "body": "Unlike Go, the main module of Python can still be imported by other modules. We should keep them in the `py_library` target to allow such imports.\r\n",
    "head_branch": "keep_py_library",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: keep main module in py_library (#1608)\n\nUnlike Go, the main module of Python can still be imported by other\nmodules. We should keep them in the `py_library` target to allow such\nimports."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210183ac254a19ac28f4f0",
    "number": 1605,
    "body": "With bazel 7 released, this example started failing on regular PRs.\n",
    "head_branch": "fix/pip-parse-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ci(example): provide a specific requirements.txt on windows (#1605)\n\nWith bazel 7 released, this example started failing on regular PRs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210184ac254a19ac28f4f1",
    "number": 1604,
    "body": "This makes rules_python compatible with disabling using the native rules in Bazel.\r\n\r\nWhile we're here, update some examples in docs to load py_runtime to better make\r\nclear the builtin py_runtime objects shouldn't be used.\r\n\r\nWork towards https://github.com/bazelbuild/rules_python/issues/1069",
    "head_branch": "load.py.runtime",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: use rules_python's py_runtime in generated toolchains (#1604)\n\nThis makes rules_python compatible with disabling using the native rules\nin Bazel.\n\nWhile we're here, update some examples in docs to load py_runtime to\nbetter make\nclear the builtin py_runtime objects shouldn't be used.\n\nWork towards https://github.com/bazelbuild/rules_python/issues/1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210185ac254a19ac28f4f2",
    "number": 1598,
    "body": "This patch deletes the old copy of `bazel_integration_test` that we\r\nhad vendored into the repo. It's replaced with the maintained\r\n`rules_bazel_integration_test`.\r\n\r\nSummary of changes:\r\n* Increases minimum tested bazel version to 6.4.0.\r\n  rules_bazel_integration_test depends on some features in 6.4\r\n* Moves several CI jobs to be BIT tests. This free ups\r\n  about 10 CI slots.\r\n* Runs these tests under a separate CI job. This is so that feedback\r\n  from the regular test jobs is faster.\r\n\r\nNotes about these bazel-in-bazel integration tests:\r\n* The tests are very heavy and easily overwhelm a system. Unfortunately,\r\n  there doesn't appear to be a way to cap their parallelism; only\r\n  disable it entirely using the `exclusive` tag. Some light\r\n  testing shows there is some speedup to be gained on CI\r\n  if we can, in the future, limit them to 2 or 4 concurrent\r\n  executions.\r\n* A special version named \"self\" is created that re-uses\r\n  whatever the outer Bazel program is. This is mainly so that\r\n  Bazel's \"at head\" testing pipelines (the one that runs tests\r\n  with Bazel built from head) are able to affect the integration tests.\r\n  It also comes in handy when locally testing a custom Bazel build.\r\n* The globbing of child workspace files can be somewhat prone to\r\n  following `bazel-*` symlinks, so its important the `.bazelignore`\r\n  and deleted packages configs are up-to-date. Otherwise the\r\n  globbing can turn into 30,000+ files and consume a system-freezing\r\n  level of memory and CPU.\r\n\r\nFixes #1209 ",
    "head_branch": "rules_bazel_integration_test-b",
    "is_a_fork": true,
    "comments": [
      "FYI: I found that all the integration tests in the examples directory were broken. And CI was skipping them (as part of the main repo tests; it ran them as separate jobs in separate workspace directories).\r\n\r\nYou might want to check if the other existing integration tests were working at head or not. If not, just delete them. We've been going awhile without them, so I don't think they were adding anything. You might be able to start with a clean slate and not have to worry about trying to convert any of the existing ones over.",
      "@philsc i rebased this to head and did some cleanup and pushed it to your branch. they were merges, so it should pull just fine for you. hope so anyways! never done such extensive changes to another person's branch",
      "Ok, I'm going to merge this. It sets up the basics we need to have better test coverage of stuff that happens during earlier phases (repo rules, modules, etc). I think we'll need some custom test runners to fully support those cases, but we at least have the basics to start."
    ],
    "commit_messages": [
      "chore: Migrate to rules_bazel_integration_test (#1598)\n\nThis patch deletes the old copy of `bazel_integration_test` that we\nhad vendored into the repo. It's replaced with the maintained\n`rules_bazel_integration_test`.\n\nSummary of changes:\n* Increases minimum tested bazel version to 6.4.0.\n  rules_bazel_integration_test depends on some features in 6.4\n* Moves several CI jobs to be BIT tests. This free ups\n  about 10 CI slots.\n* Runs these tests under a separate CI job. This is so that feedback\n  from the regular test jobs is faster.\n\nNotes about these bazel-in-bazel integration tests:\n* The tests are very heavy and easily overwhelm a system. Unfortunately,\n  there doesn't appear to be a way to cap their parallelism; only\n  disable it entirely using the `exclusive` tag. Some light\n  testing shows there is some speedup to be gained on CI\n  if we can, in the future, limit them to 2 or 4 concurrent\n  executions.\n* A special version named \"self\" is created that re-uses\n  whatever the outer Bazel program is. This is mainly so that\n  Bazel's \"at head\" testing pipelines (the one that runs tests\n  with Bazel built from head) are able to affect the integration tests.\n  It also comes in handy when locally testing a custom Bazel build.\n* The globbing of child workspace files can be somewhat prone to\n  following `bazel-*` symlinks, so its important the `.bazelignore`\n  and deleted packages configs are up-to-date. Otherwise the\n  globbing can turn into 30,000+ files and consume a system-freezing\n  level of memory and CPU.\n\nFixes #1209\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210186ac254a19ac28f4f3",
    "number": 1596,
    "body": "When the pip_parse example was updated to use sphinx to demonstrate circular deps, its MODULE.bazel config was forgotten to also be updated to use the requirement_cycles feature to break the circular deps.\r\n\r\nFixes #1595",
    "head_branch": "pip.parse.circular.sphinx.deps",
    "is_a_fork": true,
    "comments": [
      "Oops. Thanks Ricky"
    ],
    "commit_messages": [
      "examples(pip_parse): fix circular deps with sphinx by breaking cycles (#1596)\n\nWhen the pip_parse example was updated to use sphinx to demonstrate\ncircular deps, its MODULE.bazel config was forgotten to also be updated\nto use the requirement_cycles feature to break the circular deps.\n\nFixes #1595"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210187ac254a19ac28f4f4",
    "number": 1593,
    "body": "Before this change, the dependency closures would be influenced by the\r\nhost-python interpreter, this removes the influence by detecting the\r\nplatforms against which the `Requires-Dist` wheel metadata is evaluated.\r\nThis functionality can be enabled via `experimental_target_platforms`\r\nattribute to the `pip.parse` extension and is showcased in the `bzlmod`\r\nexample. The same attribute is also supported on the legacy `pip_parse`\r\nrepository rule.\r\n\r\nThe detection works in the following way:\r\n- Check if the python wheel is platform specific or cross-platform\r\n  (i.e., ends with `any.whl`), if it is then platform-specific\r\n  dependencies are generated, which will go through a `select`\r\n  statement.\r\n- If it is platform specific, then parse the platform_tag and evaluate\r\n  the `Requires-Dist` markers assuming the target platform rather than\r\n  the host platform.\r\n\r\nNOTE: The `whl` `METADATA` is now being parsed using the `packaging`\r\nPython package instead of `pkg_resources` from `setuptools`.\r\n\r\nFixes #1591",
    "head_branch": "exp/os-specific-deps",
    "is_a_fork": true,
    "comments": [
      "I think the resultant BUILD.bazel files are good enough for it to be considered for merging. @arrdem, cc-ing you as you've spent quite some time on this topic recently and would love to hear your opinion/feedback on the change."
    ],
    "commit_messages": [
      "feat(whl_library): generate platform-specific dependency closures (#1593)\n\nBefore this change, the dependency closures would be influenced by the\nhost-python interpreter, this removes the influence by detecting the\nplatforms against which the `Requires-Dist` wheel metadata is evaluated.\nThis functionality can be enabled via `experimental_target_platforms`\nattribute to the `pip.parse` extension and is showcased in the `bzlmod`\nexample. The same attribute is also supported on the legacy `pip_parse`\nrepository rule.\n\nThe detection works in the following way:\n- Check if the python wheel is platform specific or cross-platform\n  (i.e., ends with `any.whl`), if it is then platform-specific\n  dependencies are generated, which will go through a `select`\n  statement.\n- If it is platform specific, then parse the platform_tag and evaluate\n  the `Requires-Dist` markers assuming the target platform rather than\n  the host platform.\n\nNOTE: The `whl` `METADATA` is now being parsed using the `packaging`\nPython package instead of `pkg_resources` from `setuptools`.\n\nFixes #1591\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210187ac254a19ac28f4f5",
    "number": 1592,
    "body": "This only includes the source of the Python file as is as of\nhttps://github.com/jvolkman/rules_pycross/commit/9b601bd92e4a76dd948f624d78390338f396899b\n\nAlso adds the copyright header similar to the file next to it.\n\nI have in mind a subsequent PR to improve the `wheel_installer` to list per\nos/arch dependencies for the python version that is used and any additional\nchanges to this library will be done then. This should fix the corner case of\nthe dependency closure being incorrect when fetching for binary wheels for a\ndifferent platform.\n\nWork towards #1591\n",
    "head_branch": "chore/import-rules_pycross-target-env",
    "is_a_fork": true,
    "comments": [
      "@jvolkman, is it a good time to import this file? Do you have any objections for us doing so? @philsc, will this be useful for you as well?\n",
      "> @jvolkman, is it a good time to import this file? Do you have any objections for us doing so? @philsc, will this be useful for you as well?\r\n\r\nI have tentative plans to switch this implementation over to [packaging.tags](https://github.com/pypa/packaging/blob/main/src/packaging/tags.py) and get rid of the internal pip import. There's a lot of code in `tags` that defaults to the host platform, though, and I haven't yet studied it to determine whether I can avoid all of that. If not, though, the maintainers seemed open to a FR to support our use case. ",
      "Thanks @jvolkman, I'm gonna close this PR as I found a different solution."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210188ac254a19ac28f4f6",
    "number": 1590,
    "body": "Before this change there was a bug in how the parsing helpers were being\r\nused in case we were using Python 3.11 toolchain, which is using a more\r\nstrict version of the entrypoint template. This change adds `imports = [\".\"]`\r\nto ensure that the gazelle helper components are on PYTHONPATH and updates\r\nthe non-bzlmod tests to run under 3.11.\r\n\r\nWe also:\r\n* Change `.bazelrc` to use explicit `__init__.py` definition to avoid\r\n  non-reproducible errors in the future.\r\n* Add a dedicated `gazelle_binary` that uses `DEFAULT_LANGUAGES` *and*\r\n  `//python`.\r\n\r\nFixes #1589\r\n\r\n",
    "head_branch": "fix/gazelle/include-init-py",
    "is_a_fork": false,
    "comments": [
      "@rickeylev, what do you think about cherry-picking this into a `0.27.1` release?\n",
      "The build is failing on Windows with:\r\n```\r\n(00:26:41) ERROR: C:/b/bk-windows-g69g/bazel/rules-python-python/examples/BUILD.bazel:51:23: Building Python zip: //examples:py_proto_library_example_bzlmod failed: error reading file '@@python_3_11_6_x86_64-pc-windows-msvc//:Lib/__pycache__/compileall.cpython-311.pyc': C:\\b\\p4ogcjpt\\external\\python_3_11_6_x86_64-pc-windows-msvc\\Lib\\__pycache__\\compileall.cpython-311.pyc (The process cannot access the file because it is being used by another process)\r\n```"
    ],
    "commit_messages": [
      "fix(gazelle): ensure that gazelle helper modules are on PYTHONPATH (#1590)\n\nBefore this change there was a bug in how the parsing helpers were being\nused in case we were using Python 3.11 toolchain, which is using a more\nstrict version of the entrypoint template. This change adds `imports =\n[\".\"]`\nto ensure that the gazelle helper components are on PYTHONPATH and\nupdates\nthe non-bzlmod tests to run under 3.11.\n\nWe also:\n* Change `.bazelrc` to use explicit `__init__.py` definition to avoid\n  non-reproducible errors in the future.\n* Add a dedicated `gazelle_binary` that uses `DEFAULT_LANGUAGES` *and*\n  `//python`.\n\nFixes #1589"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210189ac254a19ac28f4f7",
    "number": 1588,
    "body": "This PR updates the docs for https://github.com/bazelbuild/rules_python/pull/1166 since there were some inconsistencies about the naming (`experimental_requirement_cycles` vs `requirement_cycles`). Also moved the entry in the changelog from `0.27` to `Unreleased` since it missed `0.27`. Can't wait for this feature to land!",
    "head_branch": "mzharov/fix-requirement_cycles-docs",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1588/checks?check_run_id=19168814203) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."
    ],
    "commit_messages": [
      "docs(pip_parse): Update docs about `experimental_requirement_cycles` (#1588)\n\nThis PR updates the docs for\nhttps://github.com/bazelbuild/rules_python/pull/1166 since there were\nsome inconsistencies about the naming (`experimental_requirement_cycles`\nvs `requirement_cycles`). Also moved the entry in the changelog from\n`0.27` to `Unreleased` since it missed `0.27`. Can't wait for this\nfeature to land!"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621018aac254a19ac28f4f8",
    "number": 1587,
    "body": "This appears to be an artifact of debugging when the circular reference feature was being developed.\r\n",
    "head_branch": "rm.report.txt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: delete extraneous report.txt file (#1587)\n\nThis appears to be an artifact of debugging when the circular reference\nfeature was being developed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621018bac254a19ac28f4f9",
    "number": 1586,
    "body": "The latest Sphinx version has several circular dependencies, but those can be handled with the requirements_cycles feature.",
    "head_branch": "docs.deps.update",
    "is_a_fork": true,
    "comments": [
      "Module.bazel and requirements darwin updated.\r\n\r\nMacs are still disabled in CI, so I hope the requirements are correct. I don't have a mac myself, but had a coworker regenerate it."
    ],
    "commit_messages": [
      "docs: update docs deps to latest versions (#1586)\n\nThe latest Sphinx version has several circular dependencies, but those\ncan be handled with the requirements_cycles feature."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621018cac254a19ac28f4fa",
    "number": 1585,
    "body": "This fixes several old cross references from when the docs were plain stardoc generated markdown files.\r\n\r\nAlso fixes how function parameters create their reference name so they can be referenced.\r\n\r\nAlso formats conf.py to reduce future diffs. The only semantic change to conf.py is\r\nremoving the suppressing of warnings.",
    "head_branch": "docs.fix.xrefs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: fix crossrefs and allow function parameters to be referenced (#1585)\n\nThis fixes several old cross references from when the docs were plain\nstardoc generated markdown files.\n\nAlso fixes how function parameters create their reference name so they\ncan be referenced.\n\nAlso formats conf.py to reduce future diffs. The only semantic change to\nconf.py is\nremoving the suppressing of warnings."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621018cac254a19ac28f4fb",
    "number": 1584,
    "body": "Many existing Python repos don't use `__main__.py` to indicate the the main module. Instead, they put something like below in any Python files:\r\n\r\n```python\r\nif __name__ == \"__main__\":\r\n  main()\r\n```\r\n\r\nThis PR makes the Gazelle extension able to recognize main modules like this, when `__main__.py` doesn't exist. This reduces the need to create `__main__.py` when enabling Gazelle extensions in existing Python repos.\r\n\r\nThe current behavior of creating single `py_binary` for `__main__.py` is preserved and takes precedence. So this is a backward-compatible change.\r\n\r\nCloses #1566.",
    "head_branch": "py_binary",
    "is_a_fork": true,
    "comments": [
      "Thanks for the PR, does this replace #1582? If so does it make to add some test cases from that PR in order to have coverage for:\r\n* Multiple `py_binary` targets in the output `BUILD.bazel`.\r\n* Ensuring that we are not generating `py_binary` for test files.",
      "I think #1582 addresses a different problem, but I added the test cases anyways.",
      "Sorry, I meant #1566 and thanks for adding the tests. I agree that #1582 addresses a different problem.\n",
      "I didn't realize there is already an open PR for this. Yes, this reimplements that, without parsing the Python files again. It also looks at tokens instead of string matches, with would cover cases like `if __name__==\"__main__\"` (no spaces) or `if __name__ ==  \r\n         \"__main__\"` (extra spaces)",
      "Thanks for doing this. I was thinking of adding this myself if I had not discovered your PR through one of mine. "
    ],
    "commit_messages": [
      "feat: Creating one py_binary per main module (#1584)\n\nMany existing Python repos don't use `__main__.py` to indicate the the\nmain module. Instead, they put something like below in any Python files:\n\n```python\nif __name__ == \"__main__\":\n  main()\n```\n\nThis PR makes the Gazelle extension able to recognize main modules like\nthis, when `__main__.py` doesn't exist. This reduces the need to create\n`__main__.py` when enabling Gazelle extensions in existing Python repos.\n\nThe current behavior of creating single `py_binary` for `__main__.py` is\npreserved and takes precedence. So this is a backward-compatible change.\n\nCloses #1566."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621018dac254a19ac28f4fc",
    "number": 1582,
    "body": "As per Python spec, `__init__.py` files are depended upon by every file\r\nin the package, so let's make sure that our generated targets also\r\nunderstand this implicit dependency. Note that because Python module\r\ndependencies are not a DAG, we can not depend on the Bazel target for\r\n`__init__.py` files (to avoid cycles in Bazel), and hence a non-empty\r\n`__init__.py` file is added to the `srcs` attribute of every\r\n`py_library` target.\r\n\r\nThe language spec also says that each package depends on the parent\r\npackage, but that is a less commonly used feature, and can make things\r\nmore complex.\r\n\r\nFrom [importlib] docs:\r\n> Changed in version 3.3: Parent packages are automatically imported.\r\n\r\nFrom [import] language reference:\r\n> Importing parent.one will implicitly execute parent/__init__.py and parent/one/__init__.py.\r\n\r\n\r\n[importlib]: https://docs.python.org/3/library/importlib.html#importlib.import_module\r\n[import]: https://docs.python.org/3/reference/import.html#regular-packages\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Test is failing because of a timeout in requirements_test. All other tests are passing.",
      "> As per Python spec, __init__.py files are depended upon by every file\r\nin the package\r\n\r\nFrom a Bazel point of view, would it not be more accurate to say that the `__init__.py` file depends on every other file in the package? I.e. you really shouldn't access `__init__.py` without having access to all the other files too. I.e. there should only be one public library in the package. And that's the `__init__.py` one. That one public library then pulls in all the other libraries.",
      "> would it not be more accurate to say init.py depends on every file in the package\r\n\r\nNo. But also Yes.\r\n\r\nNo in that, if an init.py only imports one sub module among many, init.py doesn't depend on the others. In theory, you _could_ have a module that _isn't_ part of the whole package and people opt-into pulling it in. e.g.\r\n\r\n```\r\npy_library(name = \"__init__\", srcs=[__init__.py, cheap.py])\r\npy_library(name = \"expensive\", srcs=[expensive.py], deps=[__init__])\r\n```\r\n\r\nWith the above, the expensive file only gets included if you depend on the expensive target. Yay, faster builds! But...\r\n\r\nYes in that, in practice, maintaining such a distinction is hard once any code or imports go into `__init__.py`. People love putting code in `__init__.py` to make their apis \"cleaner\", even though it often turns into importing unused stuff. Python's support for circular imports also exacerbates the issue. (This is a wide-spread issue with Python IMO, not specific to Bazel. Bazel just makes it more obvious because you begin to clearly see what you pay for every build). Anyways, yeah, every sub-module depends on init, and then the init has to depend on anything it imports, and then it snowballs from there, and you basically end up with a single target for the entire directory tree that looks like `srcs=glob(**.py)`.",
      "I think people are often confused about the spec of the `__init__.py` file. Python language spec says that each module depends on its package (the word \"package\" is sometimes used to refer to the directory and sometimes used for just the `__init__.py` module within the directory), **and** each package depends on the parent package. We have not attempted the dependency on the parent package in this change.\r\n\r\nWhat people have done in practice is used the package to re-export symbols from the modules in the package, so they can refactor code in between the modules in a package without breaking downstream uses. This is just a level of indirection that people opt into and they have chosen the `__init__.py` file for no special reason other than the import path looks cleaner; but it was not the purpose of the `__init__.py` file. This choice leads to circular dependencies (modules depend on package and package depends on module).\r\n\r\nIf a package is supplying a public interface through the `__init__.py` file (and keeping the modules private), then it makes sense to have a single target for the entire package. However, there are codebases that do not do this as often, especially codebases that are using Bazel. There, you would expect the individual modules to be exposed to the users as their own targets. But there might still be some initialization code common to the entire package in `__init__.py` files, like setting environment variables, checking the user's installed Python wheels, etc., which is what this change is trying to address. I think these kinds of initializations were the primary reason for the existence of `__init__.py` in the language spec.\r\n\r\nPS: I am new to Python and in trying to understand the language spec, and what Gazelle can do for it, I tried to experiment with different things in https://github.com/siddharthab/bazel-gazelle-python including transitive closures of module groups, but I think simply repeating the source file is as good a thing as any (with perhaps the label name used to resolve ambiguities for import resolution when multiple targets have the same file in srcs).",
      "@siddharthab, what do you think about making this behaviour optional via the gazelle directives?",
      "Sounds acceptable to me.\n\nBut note that this is the correct behavior as per the language spec. It will be surprising if it does not happen by default.",
      "My thinking is that this change may be a breaking change given that this makes the structure of the bazel dep graph more rigid and in certain cases the users may want to have time to migrate - first this feature becomes available, but is not the default, then in the subsequent version it becomes available as a default but users can still switch back and then the version after that we can remove the old behaviour.",
      "Sounds good. I have now put this feature behind a directive. Let me know if you would like to see more tests. Also happy to address any nits. If you would rather make changes to my branch directly, that is also OK.",
      "I know I'm piling on to the pile, so feel free to ignore this.\r\n\r\n> As per Python spec, __init__.py files are depended upon by every file\r\nin the package,\r\n\r\nWDYT about amending the Summary with a link to the relevant part of the spec?",
      "> WDYT about amending the Summary with a link to the relevant part of the spec?\r\n\r\nDone.",
      "> LGTM, could you add a `CHANGELOG.md` for the fix please?\r\n\r\nDone."
    ],
    "commit_messages": [
      "fix(gazelle): __init__.py in per-file targets (#1582)\n\nAs per Python spec, `__init__.py` files are depended upon by every file\nin the package, so let's make sure that our generated targets also\nunderstand this implicit dependency. Note that because Python module\ndependencies are not a DAG, we can not depend on the Bazel target for\n`__init__.py` files (to avoid cycles in Bazel), and hence a non-empty\n`__init__.py` file is added to the `srcs` attribute of every\n`py_library` target.\n\nThe language spec also says that each package depends on the parent\npackage, but that is a less commonly used feature, and can make things\nmore complex.\n\nFrom [importlib] docs:\n> Changed in version 3.3: Parent packages are automatically imported.\n\nFrom [import] language reference:\n> Importing parent.one will implicitly execute parent/__init__.py and\nparent/one/__init__.py.\n\n\n[importlib]:\nhttps://docs.python.org/3/library/importlib.html#importlib.import_module\n[import]:\nhttps://docs.python.org/3/reference/import.html#regular-packages\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621018eac254a19ac28f4fd",
    "number": 1581,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 39.0.0 to 41.0.6.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>41.0.6 - 2023-11-27</p>\n<pre><code>\n* Fixed a null-pointer-dereference and segfault that could occur when loading\n  certificates from a PKCS#7 bundle.  Credit to **pkuzco** for reporting the\n  issue. **CVE-2023-49083**\n<p>.. _v41-0-5:</p>\n<p>41.0.5 - 2023-10-24\n</code></pre></p>\n<ul>\n<li>Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.1.4.</li>\n<li>Added a function to support an upcoming <code>pyOpenSSL</code> release.</li>\n</ul>\n<p>.. _v41-0-4:</p>\n<p>41.0.4 - 2023-09-19</p>\n<pre><code>\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.1.3.\n<p>.. _v41-0-3:</p>\n<p>41.0.3 - 2023-08-01\n</code></pre></p>\n<ul>\n<li>Fixed performance regression loading DH public keys.</li>\n<li>Fixed a memory leak when using\n:class:<code>~cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305</code>.</li>\n<li>Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.1.2.</li>\n</ul>\n<p>.. _v41-0-2:</p>\n<p>41.0.2 - 2023-07-10</p>\n<pre><code>\n* Fixed bugs in creating and parsing SSH certificates where critical options\n  with values were handled incorrectly. Certificates are now created correctly\n  and parsing accepts correct values as well as the previously generated\n  invalid forms with a warning. In the next release, support for parsing these\n  invalid forms will be removed.\n<p>.. _v41-0-1:</p>\n<p>41.0.1 - 2023-06-01\n</code></pre></p>\n<ul>\n<li>Temporarily allow invalid ECDSA signature algorithm parameters in X.509\ncertificates, which are generated by older versions of Java.</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/f09c261ca10a31fe41b1262306db7f8f1da0e48a\"><code>f09c261</code></a> 41.0.6 release (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9927\">#9927</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/5012bedaef2dc60af3955306774b77ef379116e3\"><code>5012bed</code></a> bump for 41.0.5 release (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9766\">#9766</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/563b1193997512836603777d31e2ea281b3dc79a\"><code>563b119</code></a> Added binding needed for pyOpenSSL (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9739\">#9739</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9740\">#9740</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/fc11bce6930e591ce26a2317b31b9ce2b3e25512\"><code>fc11bce</code></a> bump for 41.0.4 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9629\">#9629</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/b22271cf3c3dd8dc8978f8f4b00b5c7060b6538d\"><code>b22271c</code></a> bump for 41.0.3 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9330\">#9330</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/774a4a16cbd22a89fdb4195ade9e4fcee27a7afa\"><code>774a4a1</code></a> Only check DH key validity when loading a private key. (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9071\">#9071</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9319\">#9319</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/bfa4d95f0f356f2d535efd5c775e0fb3efe90ef2\"><code>bfa4d95</code></a> changelog for 41.0.3 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9320\">#9320</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/0da7165aa73c0a4865b0a4d9e019db3c16eea55a\"><code>0da7165</code></a> backport fix the memory leak in fixedpool (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9272\">#9272</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9309\">#9309</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7431db737cf0407560fac689d24f1d2e5efc349d\"><code>7431db7</code></a> bump for 41.0.2 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9215\">#9215</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/e190ef190525999d1f599cf8c3aef5cb7f3a8bc4\"><code>e190ef1</code></a> Backport ssh cert fix (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9211\">#9211</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/39.0.0...41.0.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=39.0.0&new-version=41.0.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n",
    "head_branch": "dependabot/pip/tools/publish/cryptography-41.0.6",
    "is_a_fork": false,
    "comments": [
      "@dependabot rebase",
      "Looks like this PR has been edited by someone other than Dependabot. That means Dependabot can't rebase it - sorry!\n\nIf you're happy for Dependabot to recreate it from scratch, overwriting any edits, you can request `@dependabot recreate`.\n",
      "@dependabot recreate",
      "A newer version of cryptography exists, but since this PR has been edited by someone other than Dependabot I haven't updated it. You'll get a PR for the updated version as normal once this PR is merged."
    ],
    "commit_messages": [
      "build(deps): bump cryptography from 39.0.0 to 41.0.6 in /tools/publish (#1581)\n\nBumps [cryptography](https://github.com/pyca/cryptography) from 39.0.0\nto 41.0.6.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's\nchangelog</a>.</em></p>\n<blockquote>\n<p>41.0.6 - 2023-11-27</p>\n<pre><code>\n* Fixed a null-pointer-dereference and segfault that could occur when\nloading\ncertificates from a PKCS#7 bundle. Credit to **pkuzco** for reporting\nthe\n  issue. **CVE-2023-49083**\n<p>.. _v41-0-5:</p>\n<p>41.0.5 - 2023-10-24\n</code></pre></p>\n<ul>\n<li>Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL\n3.1.4.</li>\n<li>Added a function to support an upcoming <code>pyOpenSSL</code>\nrelease.</li>\n</ul>\n<p>.. _v41-0-4:</p>\n<p>41.0.4 - 2023-09-19</p>\n<pre><code>\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL\n3.1.3.\n<p>.. _v41-0-3:</p>\n<p>41.0.3 - 2023-08-01\n</code></pre></p>\n<ul>\n<li>Fixed performance regression loading DH public keys.</li>\n<li>Fixed a memory leak when using\n\n:class:<code>~cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305</code>.</li>\n<li>Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL\n3.1.2.</li>\n</ul>\n<p>.. _v41-0-2:</p>\n<p>41.0.2 - 2023-07-10</p>\n<pre><code>\n* Fixed bugs in creating and parsing SSH certificates where critical\noptions\nwith values were handled incorrectly. Certificates are now created\ncorrectly\n  and parsing accepts correct values as well as the previously generated\ninvalid forms with a warning. In the next release, support for parsing\nthese\n  invalid forms will be removed.\n<p>.. _v41-0-1:</p>\n<p>41.0.1 - 2023-06-01\n</code></pre></p>\n<ul>\n<li>Temporarily allow invalid ECDSA signature algorithm parameters in\nX.509\ncertificates, which are generated by older versions of Java.</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/f09c261ca10a31fe41b1262306db7f8f1da0e48a\"><code>f09c261</code></a>\n41.0.6 release (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9927\">#9927</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/5012bedaef2dc60af3955306774b77ef379116e3\"><code>5012bed</code></a>\nbump for 41.0.5 release (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9766\">#9766</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/563b1193997512836603777d31e2ea281b3dc79a\"><code>563b119</code></a>\nAdded binding needed for pyOpenSSL (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9739\">#9739</a>)\n(<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9740\">#9740</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/fc11bce6930e591ce26a2317b31b9ce2b3e25512\"><code>fc11bce</code></a>\nbump for 41.0.4 (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9629\">#9629</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/b22271cf3c3dd8dc8978f8f4b00b5c7060b6538d\"><code>b22271c</code></a>\nbump for 41.0.3 (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9330\">#9330</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/774a4a16cbd22a89fdb4195ade9e4fcee27a7afa\"><code>774a4a1</code></a>\nOnly check DH key validity when loading a private key. (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9071\">#9071</a>)\n(<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9319\">#9319</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/bfa4d95f0f356f2d535efd5c775e0fb3efe90ef2\"><code>bfa4d95</code></a>\nchangelog for 41.0.3 (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9320\">#9320</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/0da7165aa73c0a4865b0a4d9e019db3c16eea55a\"><code>0da7165</code></a>\nbackport fix the memory leak in fixedpool (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9272\">#9272</a>)\n(<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9309\">#9309</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/7431db737cf0407560fac689d24f1d2e5efc349d\"><code>7431db7</code></a>\nbump for 41.0.2 (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9215\">#9215</a>)</li>\n<li><a\nhref=\"https://github.com/pyca/cryptography/commit/e190ef190525999d1f599cf8c3aef5cb7f3a8bc4\"><code>e190ef1</code></a>\nBackport ssh cert fix (<a\nhref=\"https://redirect.github.com/pyca/cryptography/issues/9211\">#9211</a>)</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/pyca/cryptography/compare/39.0.0...41.0.6\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=39.0.0&new-version=41.0.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n---------\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621018fac254a19ac28f4fe",
    "number": 1580,
    "body": "Bumps [requests](https://github.com/psf/requests) from 2.25.1 to 2.31.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/psf/requests/releases\">requests's releases</a>.</em></p>\n<blockquote>\n<h2>v2.31.0</h2>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential\nforwarding of <code>Proxy-Authorization</code> headers to destination servers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a href=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>), Requests\nwill construct a <code>Proxy-Authorization</code> header that is attached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously reattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in the value being\nsent through the tunneled connection to the destination server. Users who rely on\ndefining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials through\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a href=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github Security Advisory</a>\nand <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>v2.30.0</h2>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing and\nreviewing <a href=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>v2.29.0</h2>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation to improve\nstandardization. (<a href=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/psf/requests/blob/main/HISTORY.md\">requests's changelog</a>.</em></p>\n<blockquote>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential\nforwarding of <code>Proxy-Authorization</code> headers to destination servers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a href=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>), Requests\nwill construct a <code>Proxy-Authorization</code> header that is attached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously reattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in the value being\nsent through the tunneled connection to the destination server. Users who rely on\ndefining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials through\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a href=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github Security Advisory</a>\nand <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing and\nreviewing <a href=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation to improve\nstandardization. (<a href=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n<h2>2.28.2 (2023-01-12)</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4\"><code>147c851</code></a> v2.31.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5\"><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>\n<li><a href=\"https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe\"><code>3022253</code></a> test on pypy 3.8 and pypy 3.9 on windows and macos (<a href=\"https://redirect.github.com/psf/requests/issues/6424\">#6424</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149\"><code>b639e66</code></a> test on py3.12 (<a href=\"https://redirect.github.com/psf/requests/issues/6448\">#6448</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be\"><code>d3d5044</code></a> Fixed a small typo (<a href=\"https://redirect.github.com/psf/requests/issues/6452\">#6452</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29\"><code>2ad18e0</code></a> v2.30.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773\"><code>f2629e9</code></a> Remove strict parameter (<a href=\"https://redirect.github.com/psf/requests/issues/6434\">#6434</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8\"><code>87d63de</code></a> v2.29.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc\"><code>51716c4</code></a> enable the warnings plugin (<a href=\"https://redirect.github.com/psf/requests/issues/6416\">#6416</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71\"><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=\"https://redirect.github.com/psf/requests/issues/6418\">#6418</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/psf/requests/compare/v2.25.1...v2.31.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.25.1&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/examples/pip_parse/requests-2.31.0",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate",
      "the `requests` version code in `examples/pip_parse/pip_parse_test.py` and `examples/pip_parse/test.py` need to be update to `2.31.0` to make the test pass. Or to pass the `requests` version code as a variable instead of hard code to avoid meaningless change of the test code.",
      "Superseded by #1912."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210190ac254a19ac28f4ff",
    "number": 1577,
    "body": "Enables use of `--incompatible_enable_proto_toolchain_resolution` flag that launched in Bazel 7. This allows users to choose a pre-built `protoc` or use the runtime from https://pypi.org/project/protobuf/ rather than be forced to use hard-coded values in Bazel core.\r\n\r\nThis change is also happening in other language rulesets that provide first-class protobuf support, e.g.\r\nhttps://github.com/bazelbuild/rules_go/issues/3895\r\n\r\nNo update to CHANGELOG.md in this PR as the feature is not yet documented for end-users, this just makes it possible to enable the flag. A follow-up PR will provide user instructions.",
    "head_branch": "toolchainize_py_proto",
    "is_a_fork": true,
    "comments": [
      "Not ready yet; waiting for https://github.com/bazelbuild/rules_proto/pull/194 to gate this feature.",
      "fixes https://github.com/bazelbuild/rules_python/issues/1080 consequently. ",
      "Okay this is green now. had to rename the workspace because https://github.com/bazelbuild/bazel/issues/18683#issuecomment-1843857373"
    ],
    "commit_messages": [
      "refactor: toolchainize py_proto_library (#1577)\n\nEnables use of `--incompatible_enable_proto_toolchain_resolution` flag\nthat launched in Bazel 7. This allows users to choose a pre-built\n`protoc` or use the runtime from https://pypi.org/project/protobuf/\nrather than be forced to use hard-coded values in Bazel core.\n\nThis change is also happening in other language rulesets that provide\nfirst-class protobuf support, e.g.\nhttps://github.com/bazelbuild/rules_go/issues/3895\n\nNo update to CHANGELOG.md in this PR as the feature is not yet\ndocumented for end-users, this just makes it possible to enable the\nflag. A follow-up PR will provide user instructions.\n\n---------\n\nCo-authored-by: Alex Eagle <alex@aspect.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210191ac254a19ac28f500",
    "number": 1574,
    "body": "This switches over to using the rules_python implementation of `py_runtime`,\r\n`py_runtime_pair`, and `PyRuntimeInfo` for Bazel 6 and higher. Bazel 5 lacks features\r\n(specifically provider ctors) to allow enabling it on that version.\r\n\r\nThis is possible because the rules don't directly use the PyRuntimeInfo provider\r\n(mostly, see below), they only care about the structure of it as exposed from the\r\nToolchainInfo provider.\r\n\r\nSwitching the toolchain providers and rules over early allows some development of\r\nthe toolchain prior to Bazel 7 and the rest of the rules_python Starlark implementation\r\nbeing enabled.\r\n\r\nThe builtin PyRuntimeInfo is still returned and accepted for two reasons:\r\n* Better compatibility with the builtin rules to make transitioning easier\r\n* `py_binary` has an old, possibly defunct (not sure) code path that will look up the\r\n  the PyRuntimeInfo from a flag/implicit attribute.",
    "head_branch": "pystar-pyruntime",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: use rules_python implemented py_runtime, py_runtime_pair, PyRuntimeInfo (#1574)\n\nThis switches over to using the rules_python implementation of\n`py_runtime`,\n`py_runtime_pair`, and `PyRuntimeInfo` for Bazel 6 and higher. Bazel 5\nlacks features\n(specifically provider ctors) to allow enabling it on that version.\n\nThis is possible because the rules don't directly use the PyRuntimeInfo\nprovider\n(mostly, see below), they only care about the structure of it as exposed\nfrom the\nToolchainInfo provider.\n\nSwitching the toolchain providers and rules over early allows some\ndevelopment of\nthe toolchain prior to Bazel 7 and the rest of the rules_python Starlark\nimplementation\nbeing enabled.\n\nThe builtin PyRuntimeInfo is still returned and accepted for two\nreasons:\n* Better compatibility with the builtin rules to make transitioning\neasier\n* `py_binary` has an old, possibly defunct (not sure) code path that\nwill look up the\n  the PyRuntimeInfo from a flag/implicit attribute."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210191ac254a19ac28f501",
    "number": 1573,
    "body": "This makes the rules_python Starlark implementation accept and return the builtin providers. This allows depending on, and being depended on by, the builtin rules, which enables the two rule sets to interoperate better.\r\n\r\nWork towards #1069",
    "head_branch": "pystar.builtins.interop",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pystar: support builtin providers for compatibility (#1573)\n\nThis makes the rules_python Starlark implementation accept and return\nthe builtin providers. This allows depending on, and being depended on\nby, the builtin rules, which enables the two rule sets to interoperate\nbetter.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210192ac254a19ac28f502",
    "number": 1572,
    "body": "Implements a test that starts a [`pypiserver`] and checks\r\nthat the publishing with the new machinery still works.\r\n\r\nFixes #1369\r\n\r\n[pypiserver]: https://github.com/pypiserver/pypiserver",
    "head_branch": "feat/bzlmod-wheel-publish",
    "is_a_fork": true,
    "comments": [
      "If this is something we may want to do, I could add a test checking that we can:\n1. Start a simple PyPI-like registry.\n2. Publish our `runfiles` package there.\n3. (optional) Download it from there.\n",
      "> If this is something we may want to do\r\n\r\nYes, +1 on making it work out of the box. As a user, I don't really want to care about twine. I just want it to be easy to publish to pypi.\r\n\r\n> , I could add a test checking that we can:\r\n> \r\n> 1. Start a simple PyPI-like registry.\r\n> 2. Publish our `runfiles` package there.\r\n> 3. (optional) Download it from there.\r\n\r\nIs this something we could generalize? We have quite a few tests that rely on external packages having particular structures (e.g. circular deps, native deps, extra, etc). If we had a \"local\" pypi registry, we'd be able to more easily define and test the relevant scenarios.",
      "> Is this something we could generalize? We have quite a few tests that rely on external packages having particular structures (e.g. circular deps, native deps, extra, etc). If we had a \"local\" pypi registry, we'd be able to more easily define and test the relevant scenarios.\r\n\r\nIt depends on how we want the testing to be done. If we want manual tests, then starting a script to launch a server and then running a test script manually would be doable.\r\n\r\nIf we want to integrate with the rest of the tooling so that it is automatic, it may be harder, but these are some ideas:\r\n1. We could have an integration test with a custom runner for bazel-in-bazel tests where the runner is written in python and starts a `pypiserver` just before running the bazel commands.\r\n2. Local iterations could be facilitated with running the server manually.\r\n3. We could potentially create a build action that creates the correct layout with the correct wheels made with py_wheel rule.\r\n\r\nI am not sure I am going to pursue this academic exercise, so if anyone finds this message and is interested, feel free :)",
      "Not sure what to do with the failing Windows tests. Any ideas?"
    ],
    "commit_messages": [
      "feat(twine): support 'bzlmod' users out of the box (#1572)\n\nImplements a test that starts a [`pypiserver`] and checks\nthat the publishing with the new machinery still works.\n\nFixes #1369\n\n[pypiserver]: https://github.com/pypiserver/pypiserver"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210193ac254a19ac28f503",
    "number": 1571,
    "body": "This behaviour should be in the latest release (0.27.0), so just\ndocumenting it for the future.\n\nFixes #1005\n",
    "head_branch": "test/py_proto_library",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "doc: add a py_proto_library example with well-known-types (#1571)\n\nThis behaviour should be in the latest release (0.27.0), so just\ndocumenting it for the future.\n\nFixes #1005"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210194ac254a19ac28f504",
    "number": 1570,
    "body": null,
    "head_branch": "chore/remove-pip-install",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore!: remove pip_install macro and cleanup docs (#1570)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210195ac254a19ac28f505",
    "number": 1569,
    "body": "Remove incompatible `whl` packaging flags that had been flipped\r\nin `0.27.0` release.\r\n\r\nAlso fixes a bug where the the build stamp values (e.g. build username) were lowercased\r\nwhen they shouldn't be.",
    "head_branch": "chore/remove-whl-flags",
    "is_a_fork": true,
    "comments": [
      "FYI @vonschultz "
    ],
    "commit_messages": [
      "chore/fix!: remove incompatible whl packaging flags (#1569)\n\nRemove incompatible `whl` packaging flags that had been flipped\nin `0.27.0` release.\n\nAlso fixes a bug where the the build stamp values (e.g. build username)\nwere lowercased\nwhen they shouldn't be."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210196ac254a19ac28f506",
    "number": 1567,
    "body": "According to our breaking change policy, we are removing the flag\r\nsince in the previous release it has been flipped by default and\r\nenabled to all users in 0.27.0.\r\n",
    "head_branch": "chore/remove-experimental-aliases-flag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore!: remove incompatible_generate_aliases and related flags (#1567)\n\nAccording to our breaking change policy, we are removing the flag\nsince in the previous release it has been flipped by default and\nenabled to all users in 0.27.0."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210196ac254a19ac28f507",
    "number": 1566,
    "body": "Previously a `py_binary` target was only created if a file named `__main__.py` existed in the package. All other Python files get put into one or more `py_library` targets. This change makes Gazelle look at each file that would otherwise be added to a `py_library` target and see if it contains a check for `if __name__ == \"__main__\"`. If such a check is found in the file, then a `py_binary` target is created for it instead.\r\n\r\nNo existing tests fail with this change, though I think in real code it's possible this could be a breaking change for target generation. New tests have been added to check the new functionality.\r\n\r\nI used the check for `if __name__ == \"__main__\"` because that seems like the most Pythonic way of showing that a script is meant to be run.",
    "head_branch": "py_binary-if-name-equals-main",
    "is_a_fork": true,
    "comments": [
      "Thanks for the feedback! I'll work on it and put up an improved version."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210197ac254a19ac28f508",
    "number": 1565,
    "body": "This is to prepare for the 0.27.0 release\r\n",
    "head_branch": "27rel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "release: update changelog for 0.27.0 release (#1565)\n\nThis is to prepare for the 0.27.0 release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210198ac254a19ac28f509",
    "number": 1564,
    "body": "This adds a pure starlark function to further parse the platform_tag from the\r\nwheel and set the correct attributes for the target generated by the whl_library\r\nrule. This should make errors much more easy to understand when users try to\r\nbuild a docker image using incompatible libraries.\r\n\r\nThis is currently hidden under an experimental flag described in the changelog.\r\n\r\nRelated #735, #260 ",
    "head_branch": "exp/pypi-library-target-compatible-with",
    "is_a_fork": false,
    "comments": [
      "This is not the direction we want to follow in the future, because `target_compatible_with` does not help with toolchain resolution and we would be looking to something like #1625 instead."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210199ac254a19ac28f50a",
    "number": 1563,
    "body": "Previously the per-file target generation only worked for py_library targets. This change makes it so that this feature works for py_test targets as well.\r\nThe change is careful to not affect any existing tests, so I'm not sure if it should count as a breaking change. New tests have been added to check the new functionality.",
    "head_branch": "per-file-test-generation",
    "is_a_fork": true,
    "comments": [
      "Right now if there is no `__test__` target or `__test__.py` file in the current package, gazelle should generate separate `py_test` targets. Is this PR adding functionality for cases where there is `__test__` target and more than one `_test.py` file, which was not handled previously?",
      "Yes, that's correct. You're right that it worked as expected before in cases where there was no target named `__test__` or file named `__test__.py`. This PR changes those scenarios to create separate targets as well.",
      "I clarified the changelog and added a second file to both those directories. Thanks for the feedback!",
      "Thanks!!"
    ],
    "commit_messages": [
      "feat(gazelle): allow per-file py_test generation (#1563)\n\nPreviously the per-file target generation only worked for py_library\ntargets. This change makes it so that this feature works for py_test\ntargets as well.\nThe change is careful to not affect any existing tests, so I'm not sure\nif it should count as a breaking change. New tests have been added to\ncheck the new functionality."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019aac254a19ac28f50b",
    "number": 1559,
    "body": "Upgrade bazel_features to 1.1.1 to pick up a [fix](https://github.com/bazel-contrib/bazel_features/pull/26)\r\n",
    "head_branch": "bazel_features",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Upgrade bazel_features to 1.1.1 (#1559)\n\nUpgrade bazel_features to 1.1.1 to pick up a\n[fix](https://github.com/bazel-contrib/bazel_features/pull/26)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019aac254a19ac28f50c",
    "number": 1558,
    "body": "Fixes the handling of transitive `proto_library` dependencies with `strip_import_prefix`.\r\n\r\nFixes #1557 ",
    "head_branch": "transitive_imports",
    "is_a_fork": true,
    "comments": [
      "I got one test failure, but I think it's an unrelated flake? The error is,\r\n\r\n```\r\n(17:31:06) ERROR: C:/b/bk-windows-d1v9/bazel/rules-python-python/tests/load_from_macro/BUILD.bazel:28:8: Executing genrule //tests/load_from_macro:test_current_py_toolchain failed: error reading file '@python_3_11_6_x86_64-pc-windows-msvc//:Lib/urllib/__pycache__/__init__.cpython-311.pyc': C:\\b\\ufzlsqcl\\external\\python_3_11_6_x86_64-pc-windows-msvc\\Lib\\urllib\\__pycache__\\__init__.cpython-311.pyc (The process cannot access the file because it is being used by another process)\r\n````"
    ],
    "commit_messages": [
      "fix: py_proto_library: transitive strip_import_prefix (#1558)\n\nFixes the handling of transitive `proto_library` dependencies with\n`strip_import_prefix`.\n\nFixes #1557"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019bac254a19ac28f50d",
    "number": 1555,
    "body": "Currently a user has to specify a full (x.y.z) version of Python when setting the `//python/config_settings:python_version` flag. When they upgrade `rules_python` or change `MINOR_MAPPING` in some other way, user has to update the flag's value to keep it in sync with `MINOR_MAPPING`.\r\n\r\nThis adds micro-version agnostic config settings to allow matching the minor version.\r\nFor example e.g. `//python/config_settings:is_python_3.8` will match any of\r\n`3.8.1, 3.8.2, ...' (or whatever other versions are listed in `TOOL_VERSIONS`)",
    "head_branch": "minor_version_in_flag",
    "is_a_fork": true,
    "comments": [
      ">### Could you please explain how this would be used?\r\n\r\nCurrently users can switch python toolchains by passing `--@rules_python//python/config_settings:python_version=3.9.18` flag. See https://github.com/bazelbuild/rules_python/pull/846#issuecomment-1302476859 for the design.\r\nThis flag allows users, for example, to run existing `py_test`s with a non-default toolchain to help evaluating interpreter version upgrade. Another use for this flag might be running a [matrix testing strategy](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs) in CI (testing on a multitude of OS + interpreter version combinations).\r\nAnyway, the flag is public, so by Hyrum's law, some users (including me) are using it for toolchain selection.\r\n\r\nAllowed values for this flag are `TOOL_VERSIONS.keys()`, e.g. full (x.y.z) versions. But `rules_python` uses minor (x.y) versions in most places, e.g. when calling `python.toolchain` and `pip.parse`: \r\nhttps://github.com/bazelbuild/rules_python/blob/a9032d2c241d3e5ff104e1d66f56148107b33af1/examples/multi_python_versions/MODULE.bazel#L13-L16\r\nhttps://github.com/bazelbuild/rules_python/blob/a9032d2c241d3e5ff104e1d66f56148107b33af1/examples/multi_python_versions/MODULE.bazel#L38-L42\r\nThe latter `pip.parse` call leads to generating a select for every wheel:\r\nhttps://github.com/bazelbuild/rules_python/blob/a9032d2c241d3e5ff104e1d66f56148107b33af1/python/pip.bzl#L188-L198\r\nTo land in a `3.9` branch in this select, you need to specify `3.9.18` as the flag's value, and when `MINOR_MAPPING` inevitably get updated, `pip.parse` call will renter the template with a different `full_python_version`, and after that moment passing `--@rules_python//python/config_settings:python_version=3.9.18` will lead to selecting the **default** toolchain (that might not even be 3.9), leading to confusion.\r\n\r\nThis PR allows users to specify `--@rules_python//python/config_settings:python_version=3.9`, and this flag value will select the correct 3.9.x toolchain behind the scenes.\r\n\r\n>### What implications for users?\r\nFlag starts to accept a new set of values in addition to previously accepted ones.\r\nNew values make flag-based toolchain selection more user-friendly: users that start using new values will not need to fix the flag value in their scripts when `rules_python` maintainers change `MINOR_MAPPING`.\r\n\r\n>### I see all of the new targets are `public`, do they have to be?\r\nI'm not expert here, but I got an error when I made `:python_version_flag_equals_Y` visible to `__pkg__` only.\r\nLooks like since `config_setting_group(name = X, match_any = [Y])` is expanded to `alias(name = X, actual = Y)` in case of one-element `match_any`, if we want a public `:is_python_X` to alias `:python_version_flag_equals_Y` the latter should be public as well.",
      "Thanks for the explanation, this is the first time I've heard you can switch the registered python like this and this is really interesting. And the Hyrum's law mention make sense in this case, just wanted to understand the Y in the [XY](https://xyproblem.info/).\r\n\r\nIf I understand correctly, what you are after is being able to select the version using `--@rules_python//python/config_settings:python_version=3.9.X` and then have the `select` statement in the `pip` rule repository work correctly and select a wheel for some `3.9.X` version that is registered. Please correct me if I got it wrong. If I haven't I do think that we may need to look at the `pip` repository select statements and how they work with the registered toolchains and this usecase and maybe the fix should be done in a different way.\r\n\r\n",
      "Thanks for this PR. This topic has come up in the back of my mind a few times, but I haven't had time to think on it. I, too, want to allow specifying and matching the version to work with both minor and patch levels specified. Libraries matching every patch version doesn't scale, for example.\r\n\r\n> This flag allows ... evaluating interpreter version upgrade. ... matrix testing strategy in CI\r\n\r\nYes! This is _exactly_ the intent of these flags :smile:. If you have remote execution, you can even take it a step further by putting a transition around the targets to force them to particular platforms or versions and thus test _everything_ in a single build invocation. It's pretty nice when it's all put together.",
      "@dizzy57, gentle ping. Is this something you would like to get merged? Having a config setting for Python `3.8` which is compatible would be something that would be very useful!",
      "@aignas Thanks for the ping, I plan to get back to this diff next week",
      "I modified this a bit from the original implementation, but I think the intent is the same. The flag value still requires a micro-level version (3.10.1), but an additional config setting is exposed to match a minor-version (3.10) against any of the (known) micro versions. This allows omitting the micro-version is most cases and switching between e.g. `--//python/config_settings:python_version=3.8.1` to 3.8.2 won't require updating the select conditions. For example, one can write this:\r\n\r\n```\r\nalias(actual = select({\r\n  \"//python/config_settings:is_python_3.8\": ...\r\n  })\r\n)\r\n```\r\n\r\nInstead of having to enumerate all the 3.8.x values explicitly, or having to map the minor version back to the full version (as we do in the pip build file generation code)."
    ],
    "commit_messages": [
      "feat(config_settings): allow matching minor version of python_version flag (#1555)\n\nCurrently a user has to specify a full (x.y.z) version of Python when\nsetting the `//python/config_settings:python_version` flag. When they\nupgrade `rules_python` or change `MINOR_MAPPING` in some other way, user\nhas to update the flag's value to keep it in sync with `MINOR_MAPPING`.\n\nThis adds micro-version agnostic config settings to allow matching the\nminor version.\nFor example e.g. `//python/config_settings:is_python_3.8` will match any\nof\n`3.8.1, 3.8.2, ...' (or whatever other versions are listed in\n`TOOL_VERSIONS`)\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019cac254a19ac28f50e",
    "number": 1554,
    "body": "Modify the Gazelle plugin so that when it adds a `dep` because of a `resolve` directive it makes it a relative import if possible.\r\n\r\nThe first commit adds a test for the existing behavior, where inside of `//package2` the dependency `//package2:resolved_package` is added. The second commit updates the test and the behavior so inside of `//package2` we add `:resolved_package` instead.",
    "head_branch": "relative-resolved-imports",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1554/checks?check_run_id=18575626302) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Thanks!"
    ],
    "commit_messages": [
      "feat(gazelle): use relative paths for resolved imports (#1554)\n\nModify the Gazelle plugin so that when it adds a `dep` because of a\n`resolve` directive it makes it a relative import if possible.\n\nThe first commit adds a test for the existing behavior, where inside of\n`//package2` the dependency `//package2:resolved_package` is added. The\nsecond commit updates the test and the behavior so inside of\n`//package2` we add `: resolved_package` instead.\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019dac254a19ac28f50f",
    "number": 1553,
    "body": "Only append the `[proto_root]` to PYTHONPATH when it's actually necessary, i.e. when the generated Python modules are under _virtual_imports. Do no append it in the general case, when `[proto_root]` is just the repository root.\r\n\r\nThis makes it much less likely that adding a transitive dep on a `py_proto_library` will reorder the `PYTHONPATH`. Such reordering is undesirable because it may lead to import errors.\r\n\r\nFixes #1551\r\n",
    "head_branch": "proto_root_fix",
    "is_a_fork": true,
    "comments": [
      "I updated the PR description.\r\n\r\nRe `CHANGELOG.md`: the bug this fixes was never released, so is a changelog entry still desirable?"
    ],
    "commit_messages": [
      "fix: py_proto_library: append to PYTHONPATH less (#1553)\n\nOnly append the `[proto_root]` to PYTHONPATH when it's actually\nnecessary, i.e. when the generated Python modules are under\n_virtual_imports. Do no append it in the general case, when\n`[proto_root]` is just the repository root.\n\nThis makes it much less likely that adding a transitive dep on a\n`py_proto_library` will reorder the `PYTHONPATH`. Such reordering is\nundesirable because it may lead to import errors.\n\nFixes #1551"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019eac254a19ac28f510",
    "number": 1552,
    "body": "closes #1544 \r\n\r\nThe tcl subdirectory of the interpreter Windows build needs to be kept otherwise packages such as matplotlib will break.\r\n",
    "head_branch": "issue-1544",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(toolchains): include tcl/** files in Windows interpreter (#1552)\n\ncloses #1544 \n\nThe tcl subdirectory of the interpreter Windows build needs to be kept\notherwise packages such as matplotlib will break.\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019eac254a19ac28f511",
    "number": 1550,
    "body": "It seems that the documentation for the `cmd.Wait` explicitly\r\nasks the users to not wait on the command immediately after\r\nstarting because it may close pipes too early and cause\r\nunintended side-effects as described in #1546.\r\n\r\nFixes #1546.\r\n",
    "head_branch": "fix/1546/move-gazelle-wait",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(gazelle): make cmd.Wait more idiomatic (#1550)\n\nIt seems that the documentation for the `cmd.Wait` explicitly\nasks the users to not wait on the command immediately after\nstarting because it may close pipes too early and cause\nunintended side-effects as described in #1546.\n\nFixes #1546.\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621019fac254a19ac28f512",
    "number": 1549,
    "body": "This fixes the cases where the 'default_version' is passed to the\r\n'render_pkg_aliases' utility but the 'default_version' is not present\r\nfor the wheels. This usually happens when a sub-module is using the\r\n'pip.parse' extension and the default_version can only be set by the\r\nroot module.\r\n\r\nPreviously, such a case would generate a `select()` expression that mapped\r\nthe default condition to a non-existent target (because the sub-module didn't\r\ncall `pip.parse()` with that version). This would either result in errors\r\ndue the target not existing, or silently using a target intended for a\r\ndifferent Python version (which may work, but isn't correct to so).\r\n\r\nNow, it results in a error via `select.no_match_error`.\r\n\r\nFixes #1548.\r\n",
    "head_branch": "fix/1548/default_version_render_aliases",
    "is_a_fork": true,
    "comments": [
      "An edge case I don't think is being handled: when the default python version is the sub-module's version. Recall that the version-unaware rules (//python:py_binary.bzl) won't match the `:is_py_X.Y` config conditions. So given something like:\r\n\r\n```\r\n# root/MODULE.bazel\r\npython.toolchain(python_version=\"3.9\", is_default=True)\r\n# submodule/MODULE.bazel\r\npip.parse(python_version=\"3.9\", ...)\r\n# submodule/BUILD.bazel\r\nload(\"@rules_python//python:py_binary.bzl\", \"py_binary\")\r\npy_binary(name=\"subbin\", ...) \r\n\r\n# generate foo/BUILD.bzl\r\n\r\nalias(name = \"foo\", actual = select({\r\n  \":is_py_3.9\": \"pip_39_foo//:pkg\",\r\n  no_match = \"error message\"\r\n}))\r\n```\r\n\r\nThen it'll result in an error when it should work.\r\n\r\nSo the logic needs to be something like...\r\n\r\n```\r\nif default in python_version_to_pip_target:\r\n  actuals[\"//conditions:default\"] = python_version_to_pip_target[default]\r\n```",
      "@rickeylev, I think the scenario you are thinking about is covered by https://github.com/bazelbuild/rules_python/pull/1549/files#diff-6b599a1257ef3562418f2372fe871a2a18bbd09517414d6085c87f7f9d994327L75 and it is as you would expect."
    ],
    "commit_messages": [
      "fix(bzlmod pip): ensure that sub-modules do not have invalid repos (#1549)\n\nThis fixes the cases where the 'default_version' is passed to the\n'render_pkg_aliases' utility but the 'default_version' is not present\nfor the wheels. This usually happens when a sub-module is using the\n'pip.parse' extension and the default_version can only be set by the\nroot module.\n\nPreviously, such a case would generate a `select()` expression that\nmapped\nthe default condition to a non-existent target (because the sub-module\ndidn't\ncall `pip.parse()` with that version). This would either result in\nerrors\ndue the target not existing, or silently using a target intended for a\ndifferent Python version (which may work, but isn't correct to so).\n\nNow, it results in a error via `select.no_match_error`.\n\nFixes #1548."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a0ac254a19ac28f513",
    "number": 1547,
    "body": "This is to have better test coverage. Only workspace for them is used because of limited CI slots.\r\n\r\nThis also fixes the test_basic_windows test. The `--build_python_zip` flag built into Bazel has a different default depending on the host OS (not target platform): true for windows, and false otherwise. Updated the test to force the flag value for reliable behavior between platforms.\r\n\r\nWork towards #1069",
    "head_branch": "pystar.macwin.ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test(pystar): run pystar under Windows and Mac (#1547)\n\nThis is to have better test coverage. Only workspace for them is used\nbecause of limited CI slots.\n\nThis also fixes the test_basic_windows test. The `--build_python_zip`\nflag built into Bazel has a different default depending on the host OS\n(not target platform): true for windows, and false otherwise. Updated\nthe test to force the flag value for reliable behavior between\nplatforms.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a1ac254a19ac28f514",
    "number": 1545,
    "body": "Python2 has been EOL for a while so this is just a small cleanup.\n",
    "head_branch": "chore/wheelmaker/remove-py2-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore(wheelmaker): drop Python 2 support (#1545)\n\nPython2 has been EOL for a while so this is just a small cleanup."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a2ac254a19ac28f515",
    "number": 1542,
    "body": "With this change users can use a previously private function to normalize a\nPyPI package name into something that bazel can use.\n",
    "head_branch": "feat/expose_normalize_name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: expose 'pip_utils.normalize_name' function (#1542)\n\nWith this change users can use a previously private function to\nnormalize a\nPyPI package name into something that bazel can use."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a3ac254a19ac28f516",
    "number": 1541,
    "body": "Part of the pyc compilation process is to create a temporary file named `<name>.pyc.NNNN`, where `NNNN` is a timestamp. Once the pyc is entirely written, this file is renamed to the regular pyc file name. These files only exist for brief periods of time, but its possible for different threads/processes to see the temporary files when computing the glob() values. Later, since the file is gone, an error is raised about the file missing.\r\n\r\nPR #1266 mostly fixed this issue, except that the exclude for the `.pyc.NNNN` files for an\r\ninterpreter runtime's files was behind the `ignore_root_user_error` flag, which meant it\r\nwasn't always applied. This changes it to always be applied, which should eliminate the\r\nfailures due to the missing NNNN files.\r\n\r\nFixes #1261\r\n\r\nWork towards #1520\r\n",
    "head_branch": "ignore.tmp.pyc.files",
    "is_a_fork": true,
    "comments": [
      "Not sure why we are moving some of the files in the ignore_root_user_error but not all. Could you please add more context to the description of the PR please?",
      "PR #1266 only added the `*.pyc.*` ignore to the glob. The other excludes, such as `*.pyc` (no trailing star) were already present. So this is just moving that one line affected. I updated the description to better describe its just the NNNN pattern from #1266 being moved.\r\n\r\nI'm not entirely sure as to why the pycs are only excluded as part of the ignore_root_user_error condition. It looks like it originates in https://github.com/bazelbuild/rules_python/pull/907. I can't tell why it is behind that guard, though. The conversation seems to go in the direction that it _shouldn't_ be behind that guard, but then it ended up being commited behind the guard (which a follow up https://github.com/bazelbuild/rules_python/pull/1038 fixing a typo in the original PR).\r\n\r\nPerhaps python-build-standalone changed something so the pyc files aren't invalidated anymore? Though I guess if that was true, there wouldn't be any NNNN files being created. Also, this pyc.NNNN failure seems to only show up on windows now; so perhaps this is a no-op for linux, but something about python-built-standalone on Windows still needs it.",
      "I think the reason it shows up on windows is that on linux when the runners are running as non root, the folders containing the interpreter are made read-only and then there is no way for extrafiles to appear. That is different for Windows, so maybe the actual fix should be different, because I would suspect pyc files ending up in the glob on Windows builds if pyc.NNN is a problem.\n\nOn 7 November 2023 08:27:15 GMT+09:00, Richard Levasseur ***@***.***> wrote:\n>PR #1266 only added the `*.pyc.*` ignore to the glob. The other excludes, such as `*.pyc` (no trailing star) were already present. So this is just moving that one line affected. I updated the description to better describe its just the NNNN pattern from #1266 being moved.\n>\n>I'm not entirely sure as to why the pycs are only excluded as part of the ignore_root_user_error condition. It looks like it originates in https://github.com/bazelbuild/rules_python/pull/907. I can't tell why it is behind that guard, though. The conversation seems to go in the direction that it _shouldn't_ be behind that guard, but then it ended up being commited behind the guard (which a follow up https://github.com/bazelbuild/rules_python/pull/1038 fixing a typo in the original PR).\n>\n>Perhaps python-build-standalone changed something so the pyc files aren't invalidated anymore? Though I guess if that was true, there wouldn't be any NNNN files being created. Also, this pyc.NNNN failure seems to only show up on windows now; so perhaps this is a no-op for linux, but something about python-built-standalone on Windows still needs it.\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bazelbuild/rules_python/pull/1541#issuecomment-1797024165\n>You are receiving this because your review was requested.\n>\n>Message ID: ***@***.***>"
    ],
    "commit_messages": [
      "fix: always ignore `.pyc.NNNN` files from the hermetic runtime tree (#1541)\n\nPart of the pyc compilation process is to create a temporary file named\n`<name>.pyc.NNNN`, where `NNNN` is a timestamp. Once the pyc is entirely\nwritten, this file is renamed to the regular pyc file name. These files\nonly exist for brief periods of time, but its possible for different\nthreads/processes to see the temporary files when computing the glob()\nvalues. Later, since the file is gone, an error is raised about the file\nmissing.\n\nPR #1266 mostly fixed this issue, except that the exclude for the\n`.pyc.NNNN` files for an\ninterpreter runtime's files was behind the `ignore_root_user_error`\nflag, which meant it\nwasn't always applied. This changes it to always be applied, which\nshould eliminate the\nfailures due to the missing NNNN files.\n\nFixes #1261\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a3ac254a19ac28f517",
    "number": 1540,
    "body": "The pip_repository_annoations example is workspace-only. Its equivalent functionality is demonstrated in examples/bzlmod with the whl_mods feature.\r\n\r\nWork towards #1520 ",
    "head_branch": "bzlmod.pip_repository_annotations",
    "is_a_fork": true,
    "comments": [
      "In order to save CI exec slots, we could merge this with the pip_parse example."
    ],
    "commit_messages": [
      "tests: disable bzlmod for workspace-only pip_repository_annotations example (#1540)\n\nThe pip_repository_annoations example is workspace-only. Its equivalent\nfunctionality is demonstrated in examples/bzlmod with the whl_mods\nfeature.\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a4ac254a19ac28f518",
    "number": 1539,
    "body": "The build_file_generation example only supports workspace style builds. The bzlmod equivalent is in `examples/bzlmod_build_file_generation`\r\n\r\nWork towards #1520",
    "head_branch": "bzlmod.build_file_generation",
    "is_a_fork": true,
    "comments": [
      "Merging them is probably feasible, especially now that the bzlmod work has settled down. There are some features that are workspace only (e.g. entry points), that might make a simple consolidation harder, but we can probably figure something out there."
    ],
    "commit_messages": [
      "tests: disable bzlmod for workspace-only build_file_generation example (#1539)\n\nThe build_file_generation example only supports workspace style builds.\nThe bzlmod equivalent is in `examples/bzlmod_build_file_generation`\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a5ac254a19ac28f519",
    "number": 1538,
    "body": "With a recent change to generate a single test target per python file\nwe introduced a regression for projects using\n`# gazelle:python_generation_mode project` configuration directive\nif there are multiple files with the same filenames but under different\ndirectories within the source tree. This PR fixes the behaviour so that\nwe just generate a single target containing all test files as there is\nno sure way to denormalize the paths so that they never clash.\n\nFixes #1442.\n",
    "head_branch": "test/gazelle-test-coarse-multiple-test-targets",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(gazelle): generate a single `py_test` for coarse_grained setups (#1538)\n\nWith a recent change to generate a single test target per python file\nwe introduced a regression for projects using\n`# gazelle:python_generation_mode project` configuration directive\nif there are multiple files with the same filenames but under different\ndirectories within the source tree. This PR fixes the behaviour so that\nwe just generate a single target containing all test files as there is\nno sure way to denormalize the paths so that they never clash.\n\nFixes #1442."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a6ac254a19ac28f51a",
    "number": 1537,
    "body": "This provides better caching and it allows us to have better\r\ndeveloper velocity whilst iterating on a single test case and\r\nit also solves some of the `timeout` errors I was seeing locally\r\nbecause now each `gazelle` invocation is run at a lower\r\nparallelism that `bazel` decides itself.\r\n",
    "head_branch": "test/gazelle-test-cache-separately",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test(gazelle): have a go_test target for each gazelle test (#1537)\n\nThis provides better caching and it allows us to have better\ndeveloper velocity whilst iterating on a single test case and\nit also solves some of the `timeout` errors I was seeing locally\nbecause now each `gazelle` invocation is run at a lower\nparallelism that `bazel` decides itself."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a7ac254a19ac28f51b",
    "number": 1536,
    "body": "Fix typo in MODULE.bazel commet\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a7ac254a19ac28f51c",
    "number": 1535,
    "body": "I forget to remove a commented out line before merging a PR; just cleaning that up.\r\n",
    "head_branch": "rm.commented.line",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: delete commented out line forgottenly left in (#1535)\n\nI forget to remove a commented out line before merging a PR; just\ncleaning that up."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a8ac254a19ac28f51d",
    "number": 1533,
    "body": "The non-bzlmod pip_repository code loads the bzlmod pip_repository code for some reason,\r\nbut nothing else uses that reference. A comment indicates it was only done to make\r\nmerge conflicts easier to manage for PR #1476.",
    "head_branch": "rm.bzlmod.pip.repository",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: delete defunct load of bzlmod pip_repository (#1533)\n\nThe non-bzlmod pip_repository code loads the bzlmod pip_repository code\nfor some reason,\nbut nothing else uses that reference. A comment indicates it was only\ndone to make\nmerge conflicts easier to manage for PR #1476."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101a9ac254a19ac28f51e",
    "number": 1532,
    "body": "Currently a BUILD file can load `all_whl_requirements` but then can't determine which one is associated with a given package installed by the user.\r\nThis makes it impossible to build rules where the user can choose a given package and then override the wheel used, for example. @mattem and I are working at a client where we need this ability.\r\n\r\nThis PR makes a small, non-breaking refactoring to the generated `requirements.bzl` file so that this information is available in a new `all_whl_requirements_by_package` symbol.\r\n\r\nUsers can then do something like this:\r\n\r\n```\r\nload(\"@pip//:requirements.bzl\", \"all_whl_requirements_by_package\")\r\n\r\nsome_rule(\r\n  wheels = dict(all_whl_requirements_by_package, **{\r\n    \"charset-normalizer\": \"@charset_1_2_3//:file\"\r\n  }),\r\n)\r\n```\r\n",
    "head_branch": "allow_wheel_reqs",
    "is_a_fork": false,
    "comments": [
      "Can you also update the changelog, please?",
      "@rickeylev attempting to update the bzlmod implementation, but I'm not seeing the code used. Even in `examples/pip_parse` with `--enable_bzlmod`, I still get the `requirements.bzl` produced by the implementation I modified. Is the new bzlmod implementation not wired up yet?",
      "Yes, it's wired up.\r\n\r\nThe dependency goes:\r\n\r\npython/extension/pip.bzl -> python/private/bzlmod/pip.bzl -> python/private/bzlmod/pip_repository.bzl -> python/private/bzlmod/requirements.bzl.tmpl\r\n\r\n",
      "Thanks, updated.\r\n\r\nI found one issue that I don't think I want to try to solve here: in this code\r\nhttps://github.com/bazelbuild/rules_python/blob/main/python/private/bzlmod/pip.bzl#L124-L128\r\nwe overwrite `whl_name` with the normalized name, but only after a comment about how users shouldn't need to guess our sanitization scheme. I agree with that comment - but FWICT we then use the normalized `whl_name` in places that ARE user-affordances like the `whl_overrides`.\r\n\r\nAs a consequence, under the bzlmod implementation, my feature has the normalized names appearing as the keys in `all_whl_requirements_by_package`. I think that's not desirable, but it seems like a substantial refactoring to instead take more care about the normalized `whl_name` vs. the original distribution name."
    ],
    "commit_messages": [
      "feat(pip): provide pypi -> whl target mapping in requirements.bzl (#1532)\n\nCurrently a BUILD file can load `all_whl_requirements` but then can't\ndetermine which one is associated with a given package installed by the\nuser.\nThis makes it impossible to build rules where the user can choose a\ngiven package and then override the wheel used, for example. @mattem and\nI are working at a client where we need this ability.\n\nThis PR makes a small, non-breaking refactoring to the generated\n`requirements.bzl` file so that this information is available in a new\n`all_whl_requirements_by_package` symbol.\n\nUsers can then do something like this:\n\n```\nload(\"@pip//:requirements.bzl\", \"all_whl_requirements_by_package\")\n\nsome_rule(\n  wheels = dict(all_whl_requirements_by_package, **{\n    \"charset-normalizer\": \"@charset_1_2_3//:file\"\n  }),\n)\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101aaac254a19ac28f51f",
    "number": 1531,
    "body": "The location of the `@bazel_tools` and `@platforms` repositories were originally part of the semantics.bzl config because performing rewrites on the code as part of the Bazel code export process was too difficult.\r\n\r\nWith the direction being reversed (imported instead of exported), and the scope of the codebase being reduced (just rules_python instead of the entire Bazel codebase), it's easier to perform copybara rewrites.\r\n\r\nIn particular, the `\"//` strings are problematic to rewrite because they look like intra-repo references instead of parts of a larger expression.",
    "head_branch": "semantics.cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup(pystar): inline @bazel_tools and @platforms references (#1531)\n\nThe location of the `@bazel_tools` and `@platforms` repositories were\noriginally part of the semantics.bzl config because performing rewrites\non the code as part of the Bazel code export process was too difficult.\n\nWith the direction being reversed (imported instead of exported), and\nthe scope of the codebase being reduced (just rules_python instead of\nthe entire Bazel codebase), it's easier to perform copybara rewrites.\n\nIn particular, the `\"//` strings are problematic to rewrite because they\nlook like intra-repo references instead of parts of a larger expression."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101abac254a19ac28f520",
    "number": 1529,
    "body": "Bazel at head enables bzlmod by default, but the pip_parse_vendored example doesn't work\r\nunder bzlmod.\r\n\r\nTo fix, explicitly disable bzlmod because vendoring requirements.bzl files isn't necessary\r\nunder bzlmod. This is because the pip bzlmod extension handles creating repos directly\r\nfrom the locked requirements file (which is the output of the pip dependency resolution\r\nprocess).\r\n\r\nWhile we're here, also enable `incompatible_generate_aliases = True`, in preparation for\r\nthat being switched.",
    "head_branch": "bzlmod.pip_parse_vendored",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: explicitly disable bzlmod for pip_parse_vendored example (#1529)\n\nBazel at head enables bzlmod by default, but the pip_parse_vendored\nexample doesn't work\nunder bzlmod.\n\nTo fix, explicitly disable bzlmod because vendoring requirements.bzl\nfiles isn't necessary\nunder bzlmod. This is because the pip bzlmod extension handles creating\nrepos directly\nfrom the locked requirements file (which is the output of the pip\ndependency resolution\nprocess).\n\nWhile we're here, also enable `incompatible_generate_aliases = True`, in\npreparation for\nthat being switched."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101abac254a19ac28f521",
    "number": 1528,
    "body": "Bazel at head enables bzlmod by default, so the tests must also be\r\nupdated to be bzlmod compatible.\r\n\r\nAlso makes compile_pip_requirements ignore its convenience symlinks.\r\nThis allows locally running the \"from external\" workspace test even if\r\nthe compile_pip_requirements workspace previously had convenience\r\nsymlinks in it from other builds.\r\n\r\nWork towards #1520",
    "head_branch": "bzlmod.compile_pip_requirements_external",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: make compile_pip_requirements_test_from_external_workspace work with bzlmod (#1528)\n\nBazel at head enables bzlmod by default, so the tests must also be\nupdated to be bzlmod compatible.\n\nAlso makes compile_pip_requirements ignore its convenience symlinks.\nThis allows locally running the \"from external\" workspace test even if\nthe compile_pip_requirements workspace previously had convenience\nsymlinks in it from other builds.\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101acac254a19ac28f522",
    "number": 1527,
    "body": "Bazel at head enables bzlmod by default, but the requirements.bzl entry_point functions aren't supported under bzlmod. Until workspace support is entirely dropped, explicitly disable bzlmod for the pip_repository_entry_points test.\r\n\r\nWork towards #1590",
    "head_branch": "bzlmod.pip_repository_entry_points",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: explicitly disable bzlmod for pip_repository_entry_points test (#1527)\n\nBazel at head enables bzlmod by default, but the requirements.bzl\nentry_point functions aren't supported under bzlmod. Until workspace\nsupport is entirely dropped, explicitly disable bzlmod for the\npip_repository_entry_points test.\n\nWork towards #1590"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101adac254a19ac28f523",
    "number": 1526,
    "body": "Bazel at head has bzlmod enabled by default, so the example needs to be updated to work with bzlmod enabled.\r\n\r\nWork towards #1520",
    "head_branch": "bzlmod.compile_pip_requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: make compile_pip_requirements work with bzlmod enabled (#1526)\n\nBazel at head has bzlmod enabled by default, so the example needs to be\nupdated to work with bzlmod enabled.\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101aeac254a19ac28f524",
    "number": 1525,
    "body": "This makes `pip_parse.incompatible_generate_aliases = True` the default. This only affects\r\nworkspace builds; it is already the default for bzlmod.\r\n\r\nSummary:\r\n- Enable the generation of aliases in `pip_repository`.\r\n- Flip usage of aliases in `gazelle`.\r\n- Remove usage of the old flags from the example code.\r\n- Update the `gazelle` manifest generator to leave the\r\n  `gazelle_python.yaml` manifest unchanged for people who have\r\n  `use_pip_repository_aliases = True` in their `BUILD.bazel` files.\r\n  Once they remove the flag, the `gazelle_python.yaml` will be updated.\r\n- Update `multi_pip_parse` to handle sub-hub repositories where\r\n  the `all_requirements` returns aliased targets.\r\n\r\nFixes #1498\r\n",
    "head_branch": "chore/flip-generate-aliases",
    "is_a_fork": true,
    "comments": [
      "What's the incompatible part again? I can't remember what the potential incompatibility is. The existing `@pip_foo` targets will still exist and can still be directly referenced, right? The only edge case I can think of is maybe pip_parse.annotations? e.g. changes to the BUILD file would be reflected in the `@pip_foo` repo, but not `@pip//foo`.\r\n\r\nLet's just make sure to note this in the changelog/docs.\r\n\r\nOtherwise lgtm.",
      "I think for `non-bzlmod` it is a backwards incompatible change, however, in the early days it was an incompatible change for `bzlmod` users and the name just stuck."
    ],
    "commit_messages": [
      "chore(pip_parse, gazelle): generate/use hub repo aliases by default (#1525)\n\nThis makes `pip_parse.incompatible_generate_aliases = True` the default.\nThis only affects\nworkspace builds; it is already the default for bzlmod.\n\nSummary:\n- Enable the generation of aliases in `pip_repository`.\n- Flip usage of aliases in `gazelle`.\n- Remove usage of the old flags from the example code.\n- Update the `gazelle` manifest generator to leave the\n  `gazelle_python.yaml` manifest unchanged for people who have\n  `use_pip_repository_aliases = True` in their `BUILD.bazel` files.\n  Once they remove the flag, the `gazelle_python.yaml` will be updated.\n- Update `multi_pip_parse` to handle sub-hub repositories where\n  the `all_requirements` returns aliased targets.\n\nFixes #1498"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101afac254a19ac28f525",
    "number": 1524,
    "body": "Bazel is enabling bzlmod by default, which means the examples need to be updated to be bzlmod compatible.\r\n\r\nWork towards #1520",
    "head_branch": "bzlmod.pip.parse",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: make pip_parse example work with bzlmod enabled (#1524)\n\nBazel is enabling bzlmod by default, which means the examples need to be\nupdated to be bzlmod compatible.\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b0ac254a19ac28f526",
    "number": 1523,
    "body": "Bazel is enabling bzlmod by default, which means the examples need to be updated to be bzlmod compatible.\r\n\r\nWork towards #1520",
    "head_branch": "bzlmod.multipythonversions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: make multi_python_verions example bzlmod compatible (#1523)\n\nBazel is enabling bzlmod by default, which means the examples need to be\nupdated to be bzlmod compatible.\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b0ac254a19ac28f527",
    "number": 1522,
    "body": "The Bazel downstream tests will use Bazel built at head, but the tests checking for support with the minimum Bazel version are specifically intended to only run with an older Bazel version.\r\n\r\nWork towards #1520",
    "head_branch": "skip.bazel.head.with.minimum",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ci: don't run minimum bazel version tests as part of bazel downstream… (#1522)\n\nThe Bazel downstream tests will use Bazel built at head, but the tests\nchecking for support with the minimum Bazel version are specifically\nintended to only run with an older Bazel version.\n\nWork towards #1520"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b1ac254a19ac28f528",
    "number": 1521,
    "body": "This fixes a few issues with the RTD doc building:\r\n\r\n* Warning banner is now shown for PR requests\r\n* Pages now link to the github source\r\n* The footer now shows the git commit they were built at\r\n\r\nThis works by passing the RTD environment variables to the sphinx build process, which allows the conf.py file to get their values. Env vars are passed by a new flag, `--//sphinxdocs:extra_env`, which allows passing arbitrary environment variable values into the sphinx build process. To make future usage of the RTD env vars easier, the build process passes along all the `READTHEDOCS*` environment variables.\r\n\r\nFixes #1516",
    "head_branch": "rtd-testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: show PR warning banner and fix links doc source pages (#1521)\n\nThis fixes a few issues with the RTD doc building:\n\n* Warning banner is now shown for PR requests\n* Pages now link to the github source\n* The footer now shows the git commit they were built at\n\nThis works by passing the RTD environment variables to the sphinx build\nprocess, which allows the conf.py file to get their values. Env vars are\npassed by a new flag, `--//sphinxdocs:extra_env`, which allows passing\narbitrary environment variable values into the sphinx build process. To\nmake future usage of the RTD env vars easier, the build process passes\nalong all the `READTHEDOCS*` environment variables.\n\nFixes #1516"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b2ac254a19ac28f529",
    "number": 1519,
    "body": "With this PR we can also use `pyproject.toml` in addition\nto `requirements.in` which helps in making the requirements\nin a more structured form. For example, we could parse the\ntoml itself and create aliases in the hub repos only for the\npackages outlined in the `pyproject.toml` file. The same for\n`gazelle`, we could restrict `gazelle_python.yaml` contents\nto only the dependencies listed in `pyproject.toml`.\n\nExamples can be migrated once we agree on the interface.\n\nSummary:\n- feat: support pyproject.toml in compile_pip_requirements\n- chore: use pyproject.toml for sphinx doc requirements\n",
    "head_branch": "feat/pyproject-toml-support",
    "is_a_fork": true,
    "comments": [
      "LGTM. I pushed a small update to the `src` arg doc.\r\n\r\nThe only comment, more question, I have is: should src default to `requirements.in` or `pyproject.toml`? If I understand correctly, toml files are the newer, better way?",
      "I have changed the code to default to `pyproject.toml` as I agree that people who are new to `rules_python` should use by default new standards, but that may cause issues for older users who were relying on default behaviour.\r\n\r\nIf you are OK with the changes, explanation, feel free to merge it during your working hours."
    ],
    "commit_messages": [
      "feat: support pyproject.toml in compile_pip_requirements (#1519)\n\nWith this PR we can also use `pyproject.toml` in addition\nto `requirements.in` which helps in making the requirements\nin a more structured form. For example, we could parse the\ntoml itself and create aliases in the hub repos only for the\npackages outlined in the `pyproject.toml` file. The same for\n`gazelle`, we could restrict `gazelle_python.yaml` contents\nto only the dependencies listed in `pyproject.toml`.\n\nExamples can be migrated once we agree on the interface.\n\nSummary:\n- feat: support pyproject.toml in compile_pip_requirements\n- chore: use pyproject.toml for sphinx doc requirements\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b3ac254a19ac28f52a",
    "number": 1518,
    "body": "Bumps [werkzeug](https://github.com/pallets/werkzeug) from 2.2.2 to 3.0.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/werkzeug/releases\">werkzeug's releases</a>.</em></p>\n<blockquote>\n<h2>3.0.1</h2>\n<p>This is a security release for the 3.0.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/3.0.x/changes/#version-3-0-1\">https://werkzeug.palletsprojects.com/en/3.0.x/changes/#version-3-0-1</a></li>\n</ul>\n<h2>3.0.0</h2>\n<p>This is a feature release, which includes new features, removes previously deprecated code, and adds new deprecations. The 3.0.x branch is now the supported fix branch, the 2.3.x branch will become a tag marking the end of support for that branch. We encourage everyone to upgrade, and to use a tool such as <a href=\"https://pypi.org/project/pip-tools/\">pip-tools</a> to pin all dependencies and control upgrades. Test with warnings treated as errors to be able to adapt to deprecation warnings early.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/3.0.x/changes/#version-3-0-0\">https://werkzeug.palletsprojects.com/en/3.0.x/changes/#version-3-0-0</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/21?closed=1\">https://github.com/pallets/werkzeug/milestone/21?closed=1</a></li>\n</ul>\n<h2>2.3.7</h2>\n<p>This is a fix release for the 2.3.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-7\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-7</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/33?closed=1\">https://github.com/pallets/werkzeug/milestone/33?closed=1</a></li>\n</ul>\n<h2>2.3.6</h2>\n<p>This is a fix release for the 2.3.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-6\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-6</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/32?closed=1\">https://github.com/pallets/werkzeug/milestone/32?closed=1</a></li>\n</ul>\n<h2>2.3.5</h2>\n<p>This is a fix release for the 2.3.x feature branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-5\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-5</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/31?closed=1\">https://github.com/pallets/werkzeug/milestone/31?closed=1</a></li>\n</ul>\n<h2>2.3.4</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-4\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-4</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/30?closed=1\">https://github.com/pallets/werkzeug/milestone/30?closed=1</a></li>\n</ul>\n<h2>2.3.3</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-3\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/29?closed=1\">https://github.com/pallets/werkzeug/milestone/29?closed=1</a></li>\n</ul>\n<h2>2.3.2</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-2\">https://werkzeug.palletsprojects.com/en/2.3.x/changes/#version-2-3-2</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/28?closed=1\">https://github.com/pallets/werkzeug/milestone/28?closed=1</a></li>\n</ul>\n<h2>2.3.1</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/werkzeug/blob/main/CHANGES.rst\">werkzeug's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 3.0.1</h2>\n<p>Released 2023-10-24</p>\n<ul>\n<li>Fix slow multipart parsing for large parts potentially enabling DoS\nattacks. :cwe:<code>CWE-407</code></li>\n</ul>\n<h2>Version 3.0.0</h2>\n<p>Released 2023-09-30</p>\n<ul>\n<li>Remove previously deprecated code. :pr:<code>2768</code></li>\n<li>Deprecate the <code>__version__</code> attribute. Use feature detection, or\n<code>importlib.metadata.version(&quot;werkzeug&quot;)</code>, instead. :issue:<code>2770</code></li>\n<li><code>generate_password_hash</code> uses scrypt by default. :issue:<code>2769</code></li>\n<li>Add the <code>&quot;werkzeug.profiler&quot;</code> item to the  WSGI <code>environ</code> dictionary\npassed to <code>ProfilerMiddleware</code>'s <code>filename_format</code> function. It contains\nthe <code>elapsed</code> and <code>time</code> values for the profiled request. :issue:<code>2775</code></li>\n<li>Explicitly marked the PathConverter as non path isolating. :pr:<code>2784</code></li>\n</ul>\n<h2>Version 2.3.8</h2>\n<p>Unreleased</p>\n<h2>Version 2.3.7</h2>\n<p>Released 2023-08-14</p>\n<ul>\n<li>Use <code>flit_core</code> instead of <code>setuptools</code> as build backend.</li>\n<li>Fix parsing of multipart bodies. :issue:<code>2734</code> Adjust index of last newline\nin data start. :issue:<code>2761</code></li>\n<li>Parsing ints from header values strips spacing first. :issue:<code>2734</code></li>\n<li>Fix empty file streaming when testing. :issue:<code>2740</code></li>\n<li>Clearer error message when URL rule does not start with slash. :pr:<code>2750</code></li>\n<li><code>Accept</code> <code>q</code> value can be a float without a decimal part. :issue:<code>2751</code></li>\n</ul>\n<h2>Version 2.3.6</h2>\n<p>Released 2023-06-08</p>\n<ul>\n<li><code>FileStorage.content_length</code> does not fail if the form data did not provide a\nvalue. :issue:<code>2726</code></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/ce4eff5902d4a6b41a20ecc6e4029741284a87fd\"><code>ce4eff5</code></a> Release version 3.0.1</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/b1916c0c083e0be1c9d887ee2f3d696922bfc5c1\"><code>b1916c0</code></a> Fix: slow multipart parsing for huge files with few CR/LF characters</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/726eaa28593d859548da3477859c914732f012ef\"><code>726eaa2</code></a> Release version 3.0.0</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/64275425888b6ca4f5ebdfa1a9df814317718290\"><code>6427542</code></a> Default the PathConverter (and descendants) to be non part isolating</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/4820d8c487e5db9f43645c31c4123fce5ac5ad32\"><code>4820d8c</code></a> Provide elapsed and timestamp info to filename_format</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/599993d7382eeb96add9f38b4431a2f50cd2c9f2\"><code>599993d</code></a> Bump pypa/gh-action-pypi-publish from 1.8.8 to 1.8.10 (<a href=\"https://redirect.github.com/pallets/werkzeug/issues/2780\">#2780</a>)</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/a2394ed51ed8697b5523243acb10cb589c0f7834\"><code>a2394ed</code></a> Bump slsa-framework/slsa-github-generator from 1.7.0 to 1.9.0 (<a href=\"https://redirect.github.com/pallets/werkzeug/issues/2779\">#2779</a>)</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/1efd6f3c2c31ec9479d8b8d9219bdb042e55bd15\"><code>1efd6f3</code></a> Bump actions/checkout from 3.5.3 to 3.6.0 (<a href=\"https://redirect.github.com/pallets/werkzeug/issues/2778\">#2778</a>)</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/76a5419d2ee8b7785c0304d58a94d6c0387c976c\"><code>76a5419</code></a> Bump pypa/gh-action-pypi-publish from 1.8.8 to 1.8.10</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/ce8cfe7dbb73b56c982a9c74162084cdb284c2f5\"><code>ce8cfe7</code></a> Bump slsa-framework/slsa-github-generator from 1.7.0 to 1.9.0</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/werkzeug/compare/2.2.2...3.0.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=werkzeug&package-manager=pip&previous-version=2.2.2&new-version=3.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/examples/build_file_generation/werkzeug-3.0.1",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate",
      "Superseded by #1762."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b4ac254a19ac28f52b",
    "number": 1517,
    "body": "The PyCcLinkParamsInfo export wasn't respecting the `config.enable_pystar` setting. This\r\nwould cause the Starlark implementation to look up the wrong provider symbol and result\r\nin an error later.\r\n\r\nWork towards #1069",
    "head_branch": "pystar-cclinkparams",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal(pystar): use rules_python PyCcLinkParamsProvider if pystar is enabled (#1517)\n\nThe PyCcLinkParamsInfo export wasn't respecting the\n`config.enable_pystar` setting. This\nwould cause the Starlark implementation to look up the wrong provider\nsymbol and result\nin an error later.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b5ac254a19ac28f52c",
    "number": 1515,
    "body": "do not submit",
    "head_branch": "doc-pr-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b5ac254a19ac28f52d",
    "number": 1514,
    "body": "This brings back the generated documentation for the pip_parse\nattributes making switches to default values more prominent.\n\nTowards #1496.\n",
    "head_branch": "refactor/pip_parse_arg_docs",
    "is_a_fork": true,
    "comments": [
      "Verified that the docs for `pip_parse` are in https://rules-python--1514.org.readthedocs.build/en/1514/api/pip.html"
    ],
    "commit_messages": [
      "refactor!: do not use a wrapper macro for pip_parse (#1514)\n\nThis brings back the generated documentation for the pip_parse\nattributes making switches to default values more prominent.\n\nTowards #1496."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b6ac254a19ac28f52e",
    "number": 1513,
    "body": "Towards #1498.\n",
    "head_branch": "chore/flip-py-wheel-flags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore!: switch py_wheel flags to True to start enforcing PEP440 (#1513)\n\nTowards #1498."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b7ac254a19ac28f52f",
    "number": 1512,
    "body": "Bumps [requests](https://github.com/psf/requests) from 2.28.2 to 2.31.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/psf/requests/releases\">requests's releases</a>.</em></p>\n<blockquote>\n<h2>v2.31.0</h2>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential\nforwarding of <code>Proxy-Authorization</code> headers to destination servers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a href=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>), Requests\nwill construct a <code>Proxy-Authorization</code> header that is attached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously reattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in the value being\nsent through the tunneled connection to the destination server. Users who rely on\ndefining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials through\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a href=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github Security Advisory</a>\nand <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>v2.30.0</h2>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing and\nreviewing <a href=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>v2.29.0</h2>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation to improve\nstandardization. (<a href=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/psf/requests/blob/main/HISTORY.md\">requests's changelog</a>.</em></p>\n<blockquote>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential\nforwarding of <code>Proxy-Authorization</code> headers to destination servers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a href=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>), Requests\nwill construct a <code>Proxy-Authorization</code> header that is attached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously reattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in the value being\nsent through the tunneled connection to the destination server. Users who rely on\ndefining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials through\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a href=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github Security Advisory</a>\nand <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing and\nreviewing <a href=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation to improve\nstandardization. (<a href=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4\"><code>147c851</code></a> v2.31.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5\"><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>\n<li><a href=\"https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe\"><code>3022253</code></a> test on pypy 3.8 and pypy 3.9 on windows and macos (<a href=\"https://redirect.github.com/psf/requests/issues/6424\">#6424</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149\"><code>b639e66</code></a> test on py3.12 (<a href=\"https://redirect.github.com/psf/requests/issues/6448\">#6448</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be\"><code>d3d5044</code></a> Fixed a small typo (<a href=\"https://redirect.github.com/psf/requests/issues/6452\">#6452</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29\"><code>2ad18e0</code></a> v2.30.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773\"><code>f2629e9</code></a> Remove strict parameter (<a href=\"https://redirect.github.com/psf/requests/issues/6434\">#6434</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8\"><code>87d63de</code></a> v2.29.0</li>\n<li><a href=\"https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc\"><code>51716c4</code></a> enable the warnings plugin (<a href=\"https://redirect.github.com/psf/requests/issues/6416\">#6416</a>)</li>\n<li><a href=\"https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71\"><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=\"https://redirect.github.com/psf/requests/issues/6418\">#6418</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/psf/requests/compare/v2.28.2...v2.31.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/docs/sphinx/requests-2.31.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump requests from 2.28.2 to 2.31.0 in /docs/sphinx (#1512)\n\nBumps [requests](https://github.com/psf/requests) from 2.28.2 to 2.31.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/psf/requests/releases\">requests's\nreleases</a>.</em></p>\n<blockquote>\n<h2>v2.31.0</h2>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to\npotential\nforwarding of <code>Proxy-Authorization</code> headers to destination\nservers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a\nhref=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>),\nRequests\nwill construct a <code>Proxy-Authorization</code> header that is\nattached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously\nreattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in\nthe value being\nsent through the tunneled connection to the destination server. Users\nwho rely on\ndefining their proxy credentials in the URL are <em>strongly</em>\nencouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their\nproxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials\nthrough\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a\nhref=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github\nSecurity Advisory</a>\nand <a\nhref=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>v2.30.0</h2>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing\nand\nreviewing <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to\n<code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>v2.29.0</h2>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation\nto improve\nstandardization. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str\nsubclasses. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/psf/requests/blob/main/HISTORY.md\">requests's\nchangelog</a>.</em></p>\n<blockquote>\n<h2>2.31.0 (2023-05-22)</h2>\n<p><strong>Security</strong></p>\n<ul>\n<li>\n<p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to\npotential\nforwarding of <code>Proxy-Authorization</code> headers to destination\nservers when\nfollowing HTTPS redirects.</p>\n<p>When proxies are defined with user info (<a\nhref=\"https://user:pass@proxy:8080\">https://user:pass@proxy:8080</a>),\nRequests\nwill construct a <code>Proxy-Authorization</code> header that is\nattached to the request to\nauthenticate with the proxy.</p>\n<p>In cases where Requests receives a redirect response, it previously\nreattached\nthe <code>Proxy-Authorization</code> header incorrectly, resulting in\nthe value being\nsent through the tunneled connection to the destination server. Users\nwho rely on\ndefining their proxy credentials in the URL are <em>strongly</em>\nencouraged to upgrade\nto Requests 2.31.0+ to prevent unintentional leakage and rotate their\nproxy\ncredentials once the change has been fully deployed.</p>\n<p>Users who do not use a proxy or do not supply their proxy credentials\nthrough\nthe user information portion of their proxy URL are not subject to this\nvulnerability.</p>\n<p>Full details can be read in our <a\nhref=\"https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q\">Github\nSecurity Advisory</a>\nand <a\nhref=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32681\">CVE-2023-32681</a>.</p>\n</li>\n</ul>\n<h2>2.30.0 (2023-05-03)</h2>\n<p><strong>Dependencies</strong></p>\n<ul>\n<li>\n<p>⚠️ Added support for urllib3 2.0. ⚠️</p>\n<p>This may contain minor breaking changes so we advise careful testing\nand\nreviewing <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html\">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>\nprior to upgrading.</p>\n<p>Users who wish to stay on urllib3 1.x can pin to\n<code>urllib3&lt;2</code>.</p>\n</li>\n</ul>\n<h2>2.29.0 (2023-04-26)</h2>\n<p><strong>Improvements</strong></p>\n<ul>\n<li>Requests now defers chunked requests to the urllib3 implementation\nto improve\nstandardization. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6226\">#6226</a>)</li>\n<li>Requests relaxes header component requirements to support bytes/str\nsubclasses. (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6356\">#6356</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4\"><code>147c851</code></a>\nv2.31.0</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5\"><code>74ea7cf</code></a>\nMerge pull request from GHSA-j8r2-6x86-q33q</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe\"><code>3022253</code></a>\ntest on pypy 3.8 and pypy 3.9 on windows and macos (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6424\">#6424</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149\"><code>b639e66</code></a>\ntest on py3.12 (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6448\">#6448</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be\"><code>d3d5044</code></a>\nFixed a small typo (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6452\">#6452</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29\"><code>2ad18e0</code></a>\nv2.30.0</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773\"><code>f2629e9</code></a>\nRemove strict parameter (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6434\">#6434</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8\"><code>87d63de</code></a>\nv2.29.0</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc\"><code>51716c4</code></a>\nenable the warnings plugin (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6416\">#6416</a>)</li>\n<li><a\nhref=\"https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71\"><code>a7da1ab</code></a>\ntry on ubuntu 22.04 (<a\nhref=\"https://redirect.github.com/psf/requests/issues/6418\">#6418</a>)</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/psf/requests/compare/v2.28.2...v2.31.0\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b8ac254a19ac28f530",
    "number": 1511,
    "body": "This makes the Sphinx-based docs hosted on readthedocs render a bit more nicely, fixes a few issues, and adds some features to //sphinxdocs\r\n\r\nThis also moves all the docs onto Sphinx, deleting the checked-in documentation.\r\n\r\nDoc fixes/improvements:\r\n* Ports various docs over to Sphinx pages. They're split out from the readme file.\r\n* Version RTD is building is reflected in the docs\r\n* Fixes some references to github files\r\n* Includes the custom CSS file that styled the api docs\r\n* Removes `-Q` from doc building; all warnings should be fixed now\r\n* Added Bazel inventory file. Bazel doesn't provide one, but we can manually provide on\r\n  and still use intersphinx functionality.\r\n* Added `gh-path` custom role. This is a shortcut for writing the whole github URL.\r\n* Sets the primary domain to None. The default is py, which we don't use much of, so it\r\n  just results in confusing crossref errors.\r\n* Enable nitpicky mode to catch more errors.\r\n* Remove the `starlark` marker from codeblocks; that name isn't recognized by Sphinx.\r\n  The highlighting is still sufficient.\r\n* Adds a glossary\r\n\r\nSphinxdocs improvements:\r\n* Added a flag to pass along arbitrary `-D` args to the Sphinx invocations. This allows\r\n  e.g., the `version` setting of the docs to be set on the command line from the\r\n  `READTHEDOCS_VERSION` environment variable\r\n* Added inventory file generation. These are files that allow referencing external\r\n  projects using intersphinx.\r\n* `sphinx_stardocs` have their public load path set as their page title. This groups the\r\n  API docs more naturally by file. The path can be customized.\r\n* `sphinx_stardocs` can have a footer specified for generated pages. This allows easily\r\n  added a list of link labels for easy re-use.\r\n* `readthedocs_install` now tries harder to find an open port\r\n* The conf.py file is moved into the generated sources directly. This was done because some\r\n  config settings are relative to the conf.py file, which was being placed one directory\r\n  above the regular sources.\r\n\r\nFixes #1484, #1481",
    "head_branch": "rtd-testing",
    "is_a_fork": false,
    "comments": [
      "This can be previewed at: https://rules-python.readthedocs.io/en/latest/",
      "Hm, you know, I think i'll just delete the old stuff in docs/ in this PR, too. That'll avoid any odd rendering issues with myst-markdown in the bzl code, and fix the issue with bazel's downstream testing. I'll make sure to copy over any of the manual merging like what py_console_script_binary was doing"
    ],
    "commit_messages": [
      "docs: make readthedocs render a bit nicer and port docs over to Sphinx (#1511)\n\nThis makes the Sphinx-based docs hosted on readthedocs render a bit more\nnicely, fixes a few issues, and adds some features to //sphinxdocs\n\nThis also moves all the docs onto Sphinx, deleting the checked-in\ndocumentation.\n\nDoc fixes/improvements:\n* Ports various docs over to Sphinx pages. They're split out from the\nreadme file.\n* Version RTD is building is reflected in the docs\n* Fixes some references to github files\n* Includes the custom CSS file that styled the api docs\n* Removes `-Q` from doc building; all warnings should be fixed now\n* Added Bazel inventory file. Bazel doesn't provide one, but we can\nmanually provide on\n  and still use intersphinx functionality.\n* Added `gh-path` custom role. This is a shortcut for writing the whole\ngithub URL.\n* Sets the primary domain to None. The default is py, which we don't use\nmuch of, so it\n  just results in confusing crossref errors.\n* Enable nitpicky mode to catch more errors.\n* Remove the `starlark` marker from codeblocks; that name isn't\nrecognized by Sphinx.\n  The highlighting is still sufficient.\n* Adds a glossary\n\nSphinxdocs improvements:\n* Added a flag to pass along arbitrary `-D` args to the Sphinx\ninvocations. This allows\ne.g., the `version` setting of the docs to be set on the command line\nfrom the\n  `READTHEDOCS_VERSION` environment variable\n* Added inventory file generation. These are files that allow\nreferencing external\n  projects using intersphinx.\n* `sphinx_stardocs` have their public load path set as their page title.\nThis groups the\n  API docs more naturally by file. The path can be customized.\n* `sphinx_stardocs` can have a footer specified for generated pages.\nThis allows easily\n  added a list of link labels for easy re-use.\n* `readthedocs_install` now tries harder to find an open port\n* The conf.py file is moved into the generated sources directly. This\nwas done because some\nconfig settings are relative to the conf.py file, which was being placed\none directory\n  above the regular sources.\n\nFixes #1484, #1481"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101b9ac254a19ac28f531",
    "number": 1510,
    "body": "This causes `pip_install` to fail by default. The `allow_pip_install` arg of it can be\r\nset to True to temporarily re-enable it.\r\n\r\nTowards #1498.\r\n",
    "head_branch": "chore/disable-pip-install",
    "is_a_fork": true,
    "comments": [
      "What is the mention of compile_pip_requirements for? pip_install is already just a pass-through to pip_parse. i.e. migration is just `s/pip_install/pip_parse`, nothing to do with pip_compile_requirements?\r\n\r\nOtherwise LGTM",
      "Reworded, I've seen somewhere in the main README.md about needing to use `compile_pip_requirements` + `pip_parse` as a replacement, but it could be outdated information by now."
    ],
    "commit_messages": [
      "chore!: disable pip_install and remove from examples and tests (#1510)\n\nThis causes `pip_install` to fail by default. The `allow_pip_install`\narg of it can be\nset to True to temporarily re-enable it.\n\nTowards #1498."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101baac254a19ac28f532",
    "number": 1509,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/docs/sphinx/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump certifi from 2022.12.7 to 2023.7.22 in /docs/sphinx (#1509)\n\nBumps [certifi](https://github.com/certifi/python-certifi) from\n2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a>\n2023.07.22</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a>\nBump actions/setup-python from 4.6.1 to 4.7.0 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a>\nBump dessant/lock-threads from 3.0.0 to 4.0.1 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a>\nHash pin Actions and enable dependabot (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a>\n2023.05.07</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a>\nci: Add Python 3.12-dev to the testing (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a>\nCreate a Security Policy (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a>\nSet up permissions to github workflows (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a>\nDon't let deprecation warning fail CI (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a>\nremove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101bbac254a19ac28f533",
    "number": 1508,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.15 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.15...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.15&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/docs/sphinx/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.26.15 to 1.26.18 in /docs/sphinx (#1508)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.15 to\n1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.\n(GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins would cause connection pools to be closed\nwhile requests are in progress (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(<code>[#3139](https://github.com/urllib3/urllib3/issues/3139)\n&lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins\nwould cause connection pools to be closed while requests are in progress\n(<code>[#2954](https://github.com/urllib3/urllib3/issues/2954)\n&lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a>\nRelease 1.26.18 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a>\nMerge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a>\n[1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a>\nRelease 1.26.17</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a>\nBackport GHSA-v845-jxx5-vc9f (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a>\nFix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a>\n[1.26] Configure OS for RTD to fix building docs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a>\n[1.26] Improve error message when calling urllib3.request() (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a>\n[1.26] Run coverage even with failed jobs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a>\nRelease 1.26.16</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.26.15...1.26.18\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.15&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101bbac254a19ac28f534",
    "number": 1507,
    "body": "This makes the necessary changes to the toolchains acceptance tests\r\nand also moves the tests to the `//tests` directory as this is the\r\ncurrent convention.\r\n\r\nFixes #1469.\r\nFixes #1496.\r\n",
    "head_branch": "fix/toolchain-integration-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test(bzlmod): support toolchain tests on bzlmod (#1507)\n\nThis makes the necessary changes to the toolchains acceptance tests\nand also moves the tests to the `//tests` directory as this is the\ncurrent convention.\n\nFixes #1469.\nFixes #1496."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101bcac254a19ac28f535",
    "number": 1506,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/examples/bzlmod_build_file_generation/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate",
      "@dependabot rebase",
      "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101bdac254a19ac28f536",
    "number": 1505,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.26.13 to 1.26.18 in /examples/bzlmod (#1505)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to\n1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.\n(GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins would cause connection pools to be closed\nwhile requests are in progress (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in\n<code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(<code>[#3139](https://github.com/urllib3/urllib3/issues/3139)\n&lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins\nwould cause connection pools to be closed while requests are in progress\n(<code>[#2954](https://github.com/urllib3/urllib3/issues/2954)\n&lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused\n(<code>[#2645](https://github.com/urllib3/urllib3/issues/2645)\n&lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899)\n&lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte\n(<code>[#2901](https://github.com/urllib3/urllib3/issues/2901)\n&lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0.\n(<code>[#2850](https://github.com/urllib3/urllib3/issues/2850)\n&lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the\ntype hint of <code>PoolKey.key_retries</code> by adding\n<code>bool</code> to the union.\n(<code>[#2865](https://github.com/urllib3/urllib3/issues/2865)\n&lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a>\nRelease 1.26.18 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a>\nMerge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a>\n[1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a>\nRelease 1.26.17</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a>\nBackport GHSA-v845-jxx5-vc9f (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a>\nFix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a>\n[1.26] Configure OS for RTD to fix building docs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a>\n[1.26] Improve error message when calling urllib3.request() (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a>\n[1.26] Run coverage even with failed jobs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a>\nRelease 1.26.16</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.18\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101beac254a19ac28f537",
    "number": 1504,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.17 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li>See full diff in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_install/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [
      "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101bfac254a19ac28f538",
    "number": 1503,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse_vendored/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\"",
      "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c0ac254a19ac28f539",
    "number": 1502,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.17 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li>See full diff in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_repository_annotations/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.26.17 to 1.26.18 in /examples/pip_repository_annotations (#1502)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.17 to\n1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.\n(GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a>\nRelease 1.26.18 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a>\nMerge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a>\n[1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li>See full diff in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c0ac254a19ac28f53a",
    "number": 1501,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.26.13 to 1.26.18 in /examples/pip_parse (#1501)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to\n1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.\n(GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins would cause connection pools to be closed\nwhile requests are in progress (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in\n<code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(<code>[#3139](https://github.com/urllib3/urllib3/issues/3139)\n&lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins\nwould cause connection pools to be closed while requests are in progress\n(<code>[#2954](https://github.com/urllib3/urllib3/issues/2954)\n&lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused\n(<code>[#2645](https://github.com/urllib3/urllib3/issues/2645)\n&lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899)\n&lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte\n(<code>[#2901](https://github.com/urllib3/urllib3/issues/2901)\n&lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0.\n(<code>[#2850](https://github.com/urllib3/urllib3/issues/2850)\n&lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the\ntype hint of <code>PoolKey.key_retries</code> by adding\n<code>bool</code> to the union.\n(<code>[#2865](https://github.com/urllib3/urllib3/issues/2865)\n&lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a>\nRelease 1.26.18 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a>\nMerge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a>\n[1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a>\nRelease 1.26.17</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a>\nBackport GHSA-v845-jxx5-vc9f (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a>\nFix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a>\n[1.26] Configure OS for RTD to fix building docs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a>\n[1.26] Improve error message when calling urllib3.request() (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a>\n[1.26] Run coverage even with failed jobs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a>\nRelease 1.26.16</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.18\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c1ac254a19ac28f53b",
    "number": 1500,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.7 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n<h2>1.26.13</h2>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and <code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port would be rejected even when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code> packaging metadata field.</li>\n</ul>\n<h2>1.26.12</h2>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the <code>urllib3.contrib.pyopenssl</code> module. Both will be removed in v2.x. See this <a href=\"https://redirect.github.com/urllib3/urllib3/issues/2680\">GitHub issue</a> for justification and info on how to migrate.</li>\n</ul>\n<h2>1.26.11</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to HTTPResponse.read would raise an OverflowError on Python 3.9 and earlier.</li>\n</ul>\n<h2>1.26.10</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<p>:closed_lock_with_key: <strong>This is the first release to be signed with Sigstore!</strong> You can verify the distributables using the <code>.sig</code> and <code>.crt</code> files included on this release.</p>\n<ul>\n<li>Removed support for Python 3.5</li>\n<li>Fixed an issue where a <code>ProxyError</code> recommending configuring the proxy as HTTP instead of HTTPS could appear even when an HTTPS proxy wasn't configured.</li>\n</ul>\n<h2>1.26.9</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n<h1>1.26.13 (2022-11-23)</h1>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and <code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port would be rejected\neven when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code> packaging metadata field.</li>\n</ul>\n<h1>1.26.12 (2022-08-22)</h1>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the <code>urllib3.contrib.pyopenssl</code> module.\nBoth will be removed in v2.x. See this <code>GitHub issue &lt;https://github.com/urllib3/urllib3/issues/2680&gt;</code>_\nfor justification and info on how to migrate.</li>\n</ul>\n<h1>1.26.11 (2022-07-25)</h1>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to <code>HTTPResponse.read</code> would</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.7...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.7&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/pip_repository_entry_points/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.26.7 to 1.26.18 in /tests/pip_repository_entry_points (#1500)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.7 to\n1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.\n(GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins would cause connection pools to be closed\nwhile requests are in progress (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in\n<code>urllib3.contrib</code> module.</li>\n</ul>\n<h2>1.26.13</h2>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and\n<code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port\nwould be rejected even when the port number after removing the zeroes\nwas valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code>\npackaging metadata field.</li>\n</ul>\n<h2>1.26.12</h2>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the\n<code>urllib3.contrib.pyopenssl</code> module. Both will be removed in\nv2.x. See this <a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2680\">GitHub\nissue</a> for justification and info on how to migrate.</li>\n</ul>\n<h2>1.26.11</h2>\n<p><strong>If you or your organization rely on urllib3 consider\nsupporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub\nSponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python\n2</strong>: <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read\nmore in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to\nHTTPResponse.read would raise an OverflowError on Python 3.9 and\nearlier.</li>\n</ul>\n<h2>1.26.10</h2>\n<p><strong>If you or your organization rely on urllib3 consider\nsupporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub\nSponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python\n2</strong>: <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read\nmore in the v2.0 Roadmap</a></p>\n<p>:closed_lock_with_key: <strong>This is the first release to be signed\nwith Sigstore!</strong> You can verify the distributables using the\n<code>.sig</code> and <code>.crt</code> files included on this\nrelease.</p>\n<ul>\n<li>Removed support for Python 3.5</li>\n<li>Fixed an issue where a <code>ProxyError</code> recommending\nconfiguring the proxy as HTTP instead of HTTPS could appear even when an\nHTTPS proxy wasn't configured.</li>\n</ul>\n<h2>1.26.9</h2>\n<p><strong>If you or your organization rely on urllib3 consider\nsupporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub\nSponsors</a>.</strong></p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(<code>[#3139](https://github.com/urllib3/urllib3/issues/3139)\n&lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins\nwould cause connection pools to be closed while requests are in progress\n(<code>[#2954](https://github.com/urllib3/urllib3/issues/2954)\n&lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused\n(<code>[#2645](https://github.com/urllib3/urllib3/issues/2645)\n&lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899)\n&lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte\n(<code>[#2901](https://github.com/urllib3/urllib3/issues/2901)\n&lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0.\n(<code>[#2850](https://github.com/urllib3/urllib3/issues/2850)\n&lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the\ntype hint of <code>PoolKey.key_retries</code> by adding\n<code>bool</code> to the union.\n(<code>[#2865](https://github.com/urllib3/urllib3/issues/2865)\n&lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n<h1>1.26.13 (2022-11-23)</h1>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and\n<code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port\nwould be rejected\neven when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code>\npackaging metadata field.</li>\n</ul>\n<h1>1.26.12 (2022-08-22)</h1>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the\n<code>urllib3.contrib.pyopenssl</code> module.\nBoth will be removed in v2.x. See this <code>GitHub issue\n&lt;https://github.com/urllib3/urllib3/issues/2680&gt;</code>_\nfor justification and info on how to migrate.</li>\n</ul>\n<h1>1.26.11 (2022-07-25)</h1>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to\n<code>HTTPResponse.read</code> would</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a>\nRelease 1.26.18 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a>\nMerge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a>\n[1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a>\nRelease 1.26.17</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a>\nBackport GHSA-v845-jxx5-vc9f (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a>\nFix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a>\n[1.26] Configure OS for RTD to fix building docs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a>\n[1.26] Improve error message when calling urllib3.request() (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a>\n[1.26] Run coverage even with failed jobs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a>\nRelease 1.26.16</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.26.7...1.26.18\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.7&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c2ac254a19ac28f53c",
    "number": 1499,
    "body": "[//]: # (dependabot-start)\n⚠️  **Dependabot is rebasing this PR** ⚠️ \n\nRebasing might not happen immediately, so don't worry if this takes some time.\n\nNote: if you make any changes to this PR yourself, they will take precedence over the rebase.\n\n---\n\n[//]: # (dependabot-end)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.14 to 1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses. (GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a> Release 1.26.18 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.14...1.26.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/urllib3-1.26.18",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.26.14 to 1.26.18 in /tools/publish (#1499)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.14 to\n1.26.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.18</h2>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.\n(GHSA-g4mx-q9vg-27p4)</li>\n</ul>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins would cause connection pools to be closed\nwhile requests are in progress (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.18 (2023-10-17)</h1>\n<ul>\n<li>Made body stripped from HTTP requests changing the request method to\nGET after HTTP 303 &quot;See Other&quot; redirect responses.</li>\n</ul>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(<code>[#3139](https://github.com/urllib3/urllib3/issues/3139)\n&lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins\nwould cause connection pools to be closed while requests are in progress\n(<code>[#2954](https://github.com/urllib3/urllib3/issues/2954)\n&lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused\n(<code>[#2645](https://github.com/urllib3/urllib3/issues/2645)\n&lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899)\n&lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte\n(<code>[#2901](https://github.com/urllib3/urllib3/issues/2901)\n&lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b\"><code>9c2c230</code></a>\nRelease 1.26.18 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3159\">#3159</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36\"><code>b594c5c</code></a>\nMerge pull request from GHSA-g4mx-q9vg-27p4</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73\"><code>944f0eb</code></a>\n[1.26] Use vendored six in urllib3.contrib.securetransport</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a>\nRelease 1.26.17</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a>\nBackport GHSA-v845-jxx5-vc9f (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a>\nFix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a>\n[1.26] Configure OS for RTD to fix building docs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a>\n[1.26] Improve error message when calling urllib3.request() (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a>\n[1.26] Run coverage even with failed jobs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a>\nRelease 1.26.16</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.26.14...1.26.18\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c3ac254a19ac28f53d",
    "number": 1497,
    "body": "This PR changes the specific version that is used to test starlark\r\nrules_python rules implementation, which broke in recent bazelbuild/bazel\r\ncommits. Once the following issue is fixed, this can be reverted.\r\n\r\n\r\nTowards #1496\r\nRelated bazelbuild/bazel#19838\r\n",
    "head_branch": "fix/pin-pystar-bazel-version",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ci: pin pystar bazel version (#1497)\n\nThis PR changes the specific version that is used to test starlark\nrules_python rules implementation, which broke in recent\nbazelbuild/bazel\ncommits. Once the following issue is fixed, this can be reverted.\n\n\nTowards #1496\nRelated bazelbuild/bazel#19838"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c4ac254a19ac28f53e",
    "number": 1495,
    "body": "After talking with @aignas [on Slack](https://bazelbuild.slack.com/archives/CA306CEV6/p1697502343785369) I threw together an example of the behavior I'm seeing when trying to use a specific patch version of Python 3.10.\r\n\r\nReplicate the error by running `bazel build //:lib` in examples/bzlmod.\r\n\r\nI noted there that the docs indicate no support for patch versions:\r\nhttps://github.com/bazelbuild/rules_python/blob/0.26.0/python/extensions/python.bzl#L257-L261\r\n",
    "head_branch": "me/3.10-patch-fail",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c4ac254a19ac28f53f",
    "number": 1494,
    "body": "`TestCase.assertEquals` is an alias for `TestCase.assertEqual`.\r\n[This method is deprecated since Python 3.2 and was removed in Python 3.12](https://docs.python.org/3/whatsnew/3.12.html#id3). ",
    "head_branch": "wheel_test_assertequals",
    "is_a_fork": true,
    "comments": [
      "Meta-question: should we have a linter for this?\r\nI'd like to suggest using [ruff](https://docs.astral.sh/ruff/). It is fast, configurable, and integrates well with existing pre-commit setup in `rules_python`.",
      "`ruff` could be a good addition as a separate PR. Feel free to add one and add me as a reviewer.\r\n\r\nI would be of an opinion to keep this change out of `CHANGELOG.md` as this is not visible from the stakeholder point of view.",
      "> `ruff` could be a good addition as a separate PR. Feel free to add one and add me as a reviewer.\r\n\r\nWill do.\r\n\r\n\r\n> I would be of an opinion to keep this change out of `CHANGELOG.md` as this is not visible from the stakeholder point of view.\r\n\r\nI was thinking the same, but decided to go by letter of PR checklist.\r\nReverted changes to `CHANGELOG.md`.\r\n",
      "Rebased to resolve merge conflicts."
    ],
    "commit_messages": [
      "test: remove usage of deprecated method `TestCase.assertEquals` (#1494)\n\n`TestCase.assertEquals` is an alias for `TestCase.assertEqual`.\n[This method is deprecated since Python 3.2 and was removed in Python\n3.12](https://docs.python.org/3/whatsnew/3.12.html#id3)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c5ac254a19ac28f540",
    "number": 1490,
    "body": "This was arguably made too-visible previously and since all of the consumable\nsymbols by the end users are re-exported via the //python:pip_bzl, we can keep\neverything that is in pip_install internal.\n\nThis could be a breaking change for people who are depending on internal\nsymbols or if they are using `whl_library` to create their own implementation\nof the `pip_repository` rule and are generating documentation internally.\nHowever, in that case they can apply a small patch to change the visibility of\nthe `pip_repository_bzl` target.\n",
    "head_branch": "refactor/limit-pip-repository-bzl-visibility",
    "is_a_fork": true,
    "comments": [
      "I have created this to start a discussion around visibility. I am OK to close\nthis without merging if others think that restricting the visibility does not\nbring enough value.\n",
      "Yeah, we want to make //docs private, see https://github.com/bazelbuild/rules_python/issues/1458\r\n\r\nI made //python/pip_install:pip_repository_bzl public because, ... hm why did I do that. I think I was just trying to provide some alternative to the prior public bzl_library targets in //docs that covered pip_repository.bzl. It's very unclear to me whether pip_repository.bzl is supposed to be a publicly loadable target or not, and some of the old targets in //docs were very broad. The top of the docs, for example, says `package_annotation` is public. So it wasn't entirely clear how to split and restrict things.",
      "@groodt when you do a lgtm could you push the merge button?"
    ],
    "commit_messages": [
      "refactor(visibility)!: limit visibility of an internal library (#1490)\n\nThis was arguably made too-visible previously and since all of the\nconsumable\nsymbols by the end users are re-exported via the //python:pip_bzl, we\ncan keep\neverything that is in pip_install internal.\n\nThis could be a breaking change for people who are depending on internal\nsymbols or if they are using `whl_library` to create their own\nimplementation\nof the `pip_repository` rule and are generating documentation\ninternally.\nHowever, in that case they can apply a small patch to change the\nvisibility of\nthe `pip_repository_bzl` target."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c6ac254a19ac28f541",
    "number": 1489,
    "body": "This lays the groundwork for using Sphinx to generate user-facing documentation and\r\nhaving it published on readthedocs. It integrates with Bazel Stardoc to generate\r\nMyST-flavored Markdown that Sphinx can process.\r\n\r\nThere are 4 basic pieces that are glued together:\r\n  1. `sphinx_docs`: This rule invokes Sphinx to generate e.g. html, latex, etc\r\n  2. `sphinx_stardoc`: This rule invokes Stardoc to generate MyST-flavored Markdown\r\n     that Sphinx can process\r\n  3. `sphinx_build_binary`: This rule defines the Sphinx executable with any necessary\r\n     dependencies (e.g. Sphinx extensions, like MyST) to process the docs in (1)\r\n  4. `readthedocs_install`: This rule does the necessary steps to build the docs and\r\n     put them into the location the readthedocs build process expects. This is basically\r\n     just `cp -r`, but its cleaner to hide it behind a `bazel run` command than have\r\n     to put various shell in the readthedocs yaml config.\r\n\r\n* Bump Bazel 6 requirement: 6.0.0 -> 6.20. This is necessary to support\r\n  bzlmod and Stardoc.\r\n\r\nWork towards #1332, #1484",
    "head_branch": "rtd",
    "is_a_fork": true,
    "comments": [
      "Ok, I've cleaned this up enough to be ready for an initial review. This PR just lays the groundwork -- I'm not writing the complete porting of docs over to RTD in this PR.\r\n\r\nWhat I'm going to do is:\r\n1. Land this PR\r\n2. Reconfigure RTD to read from a new branch, \"rtd-testing\". This is where I'll push commits to the RTD build process and get it working\r\n3. Land another PR on main with the changes from (2). At this point, RTD will be building and publish main and our tagged versions.\r\n4. Enable RTD building for PRs\r\n5. Then we can port our plain stardoc md/html docs over to Sphinx/RTD. This will require various changes to docstrings etc so that things group and render nicely.",
      "> linking #1332 should be mentioned in the PR description?\r\n\r\nDone"
    ],
    "commit_messages": [
      "docs: initial doc generation using Sphinx (#1489)\n\nThis lays the groundwork for using Sphinx to generate user-facing\ndocumentation and\nhaving it published on readthedocs. It integrates with Bazel Stardoc to\ngenerate\nMyST-flavored Markdown that Sphinx can process.\n\nThere are 4 basic pieces that are glued together:\n1. `sphinx_docs`: This rule invokes Sphinx to generate e.g. html, latex,\netc\n2. `sphinx_stardoc`: This rule invokes Stardoc to generate MyST-flavored\nMarkdown\n     that Sphinx can process\n3. `sphinx_build_binary`: This rule defines the Sphinx executable with\nany necessary\ndependencies (e.g. Sphinx extensions, like MyST) to process the docs in\n(1)\n4. `readthedocs_install`: This rule does the necessary steps to build\nthe docs and\nput them into the location the readthedocs build process expects. This\nis basically\njust `cp -r`, but its cleaner to hide it behind a `bazel run` command\nthan have\n     to put various shell in the readthedocs yaml config.\n\n* Bump Bazel 6 requirement: 6.0.0 -> 6.20. This is necessary to support\n  bzlmod and Stardoc.\n\nWork towards #1332, #1484"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c7ac254a19ac28f542",
    "number": 1488,
    "body": "This class is for being able to more easily recreate a wheel file after\r\nextracting it. This is not intended for usage outside the rules_python\r\nproject. Also stop sorting the entries when writing a RECORD file making\r\nthe order of the RECORD file to be the same as the order the files to\r\nthe zip file are added.\r\n\r\nTowards #1076\r\n",
    "head_branch": "feat/1076/whlmaker-whlfile",
    "is_a_fork": true,
    "comments": [
      "I would like to merge #1453  and then rebase and merge this.",
      "> I would like to merge #1453 and then rebase and merge this.\r\n\r\nSGTM"
    ],
    "commit_messages": [
      "feat(whlmaker): introduce an internal _WhlFile class and stop sorting RECORD (#1488)\n\nThis class is for being able to more easily recreate a wheel file after\nextracting it. This is not intended for usage outside the rules_python\nproject. Also stop sorting the entries when writing a RECORD file making\nthe order of the RECORD file to be the same as the order the files to\nthe zip file are added.\n\nTowards #1076"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c8ac254a19ac28f543",
    "number": 1487,
    "body": "Before the PR the downloading/building of the wheel and the extraction\r\nwould be done as a single step, which meant that for patching of the\r\nwheel to happen, we would need to do it within the python script. In\r\norder to have more flexibility in the approach, this PR splits the\r\nprocess to two separate invocations of the wheel_installer, which\r\nincidentally also helps in a case where the downloading of the wheel\r\nfile can happen separately via http_file.\r\n\r\nRelated issues #1076, #1357\r\n",
    "head_branch": "feat/1076/refactor-whl-library",
    "is_a_fork": true,
    "comments": [
      "Note, that with this we could in theory set up a cyclic dependency test with:\r\n* Creating a repository rule that creates two wheels via the `py_wheel`.\r\n* Creating two `whl_library` rules that instead of downloading a wheel from requirements use the wheel targets provided by the `py_wheel`."
    ],
    "commit_messages": [
      "refactor(whl_library): split wheel downloading and extraction into separate executions (#1487)\n\nBefore the PR the downloading/building of the wheel and the extraction\nwould be done as a single step, which meant that for patching of the\nwheel to happen, we would need to do it within the python script. In\norder to have more flexibility in the approach, this PR splits the\nprocess to two separate invocations of the wheel_installer, which\nincidentally also helps in a case where the downloading of the wheel\nfile can happen separately via http_file.\n\nRelated issues #1076, #1357"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c9ac254a19ac28f544",
    "number": 1485,
    "body": "The runtime dependencies of Gazelle Python extension makes it hard to distribute Gazelle binaries: we have to preserve the runfiles structure and distribute it with Gazelle binaries.\r\n\r\nInstead, we can build a single Python zip file that comes a built-in interpreter, and embed the zip file into the Go binary in compile time and avoid the runtime dependency.\r\n\r\nFixes #1455 ",
    "head_branch": "embed",
    "is_a_fork": true,
    "comments": [
      "\r\n> 1. It assumes that the Gazelle plugin repo is called `rules_python_gazelle_plugin\". This may not be the case when the Gazelle plugin is managed as a go dependency, and by convention named as \"com_github_bazelbuild_rules_python_gazelle\".\r\n\r\nThis could also be fixed by baking the `$(rlocationpath ...)` into `x_defs` of the `go_library`.\r\n\r\n> 2. It makes Gazelle only runnable under `bazel run`. So we won't be able to debug Gazelle using regular Go IDEs without special Bazel plugins, or distribute pre-built Gazelle binary\r\n\r\nCould you explain why that is the case? Runfiles discovery should work equally well when the binary is executed directly as long as its `.runfiles` directory is present beside it. If that doesn't work, then there is another bug to fix in the setup.\r\n\r\n\r\n",
      "> Could you explain why that is the case? Runfiles discovery should work equally well when the binary is executed directly as long as its .runfiles directory is present beside it. If that doesn't work, then there is another bug to fix in the setup.\r\n\r\nThe concept of \".runfiles\" doesn't exist outside Bazel world. If we want to distribute pre-built Gazelle binary, we have to also distribute the runfiles in a certain layout; if people want to debug Gazelle using IDEs that use \"go build\" under the hood, they won't be able to find the runfiles.\r\n\r\nIn addition, I think runtime dependency makes sense when we need to change it at runtime, e.g., a config file for prod, and another config file for staging. For such files, the location should be configurable through command line arguments or environment variables. For static content like html template or Python scripts like this, we never want to change them in runtime, it's better to embed them into the binary, so we have one less thing to worry about when deploying/distributing the binary.",
      "Makes sense. In the Go case, Gazelle with Bzlmod reads files generated by Bazel (the list of repos), so it would be difficult to distribute it as a single binary anyway. But if it works for Python, that's good.",
      "> In the long term, I think maight probably need include zip files for each X.Y interpreter version we support and add additional support in gazelle which would allow us to tell it to use a particular Python version to use. That way we could correctly handle edge cases where tomllib could be detected as a std_module in Python 3.11 and above but not in earlier versions. That is definitely outside the scope of this PR.\r\n\r\nWe can just document that for those who are prebuilding and distributing Gazelle binaries, the registered Python interpreter in the repo where Gazelle is built needs to be the same as the target repo. It's the distributor's responsibility to build a Gazelle binary for each combination of OS+arch+python interpreter version.",
      "> > In the long term, I think maight probably need include zip files for each X.Y interpreter version we support and add additional support in gazelle which would allow us to tell it to use a particular Python version to use. That way we could correctly handle edge cases where tomllib could be detected as a std_module in Python 3.11 and above but not in earlier versions. That is definitely outside the scope of this PR.\r\n> \r\n> We can just document that for those who are prebuilding and distributing Gazelle binaries, the registered Python interpreter in the repo where Gazelle is built needs to be the same as the target repo. It's the distributor's responsibility to build a Gazelle binary for each combination of OS+arch+python interpreter version.\r\n\r\n+1 for documenting this for now. The `gazelle_python.yaml` needs to be version aware for this to fully work, right now the `gazelle` Python plugin does not work well in cases where repos are using version aware rules and have multiple Python toolchains being used at the same time. However this is not something we can solve right now with the current structure.",
      "Updated the doc, but somehow caused integration tests on Windows to fail"
    ],
    "commit_messages": [
      "build(gazelle): embed Python zip file (#1485)\n\nThe runtime dependencies of Gazelle Python extension makes it hard to\ndistribute Gazelle binaries: we have to preserve the runfiles structure\nand distribute it with Gazelle binaries.\n\nInstead, we can build a single Python zip file that comes a built-in\ninterpreter, and embed the zip file into the Go binary in compile time\nand avoid the runtime dependency.\n\nFixes #1455\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101c9ac254a19ac28f545",
    "number": 1483,
    "body": "missing closing url paren\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Fix URL in README.md (#1483)\n\nmissing closing url paren"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101caac254a19ac28f546",
    "number": 1482,
    "body": "A few tests weren't compatible with bzlmod, so would fail when it was enabled. The various causes and fixes are:\r\n\r\n* Under bzlmod, `runfiles.CurrentRepository()` returns the empty string for the main repository. To fix, an environment variable is used to tell the test whether bzlmod is enabled or not.\r\n\r\n* Accessing data files through `TEST_SRCDIR` directly is error-prone under bzlmod because the directory name within runfiles changes from the workspace name to `_main`. To fix, use the runfiles libraries, which know how to map apparent repo names to the actual directory name. In the integration tests, the runfiles library isn't available, so just check for the `_main` directory instead.\r\n\r\nWork towards #1469\r\n",
    "head_branch": "bzlmod-default",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test(bzlmod): Make some tests bzlmod compatible with Bazel@HEAD (#1482)\n\nA few tests weren't compatible with bzlmod, so would fail when it was\nenabled. The various causes and fixes are:\n\n* Under bzlmod, `runfiles.CurrentRepository()` returns the empty string\nfor the main repository. To fix, an environment variable is used to tell\nthe test whether bzlmod is enabled or not.\n\n* Accessing data files through `TEST_SRCDIR` directly is error-prone\nunder bzlmod because the directory name within runfiles changes from the\nworkspace name to `_main`. To fix, use the runfiles libraries, which\nknow how to map apparent repo names to the actual directory name. In the\nintegration tests, the runfiles library isn't available, so just check\nfor the `_main` directory instead.\n\nWork towards #1469"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101cbac254a19ac28f547",
    "number": 1480,
    "body": "These were flagged by a spell checker when importing the code to Google\r\n",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Fix a few typos in various docs and comments (#1480)\n\nThese were flagged by a spell checker when importing the code to Google"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ccac254a19ac28f548",
    "number": 1479,
    "body": "Within Google, for historical reasons, the filegroup rule type is allowed in deps, which means `test_requires_pyinfo` test fails. This can be easily worked around by using a custom rule that doesn't have the same name.",
    "head_branch": "stricter-pyinfo-requires-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: use a custom rule instead of native.filegroup for testing that PyInfo is a required provider. (#1479)\n\nWithin Google, for historical reasons, the filegroup rule type is\nallowed in deps, which means `test_requires_pyinfo` test fails. This can\nbe easily worked around by using a custom rule that doesn't have the\nsame name."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101cdac254a19ac28f549",
    "number": 1478,
    "body": "Before this PR the documentation used to be next to the source. With\r\nthe adjustment of how we generate the markdown files, we can keep user\r\nfriendly documentation in markdown and leave the API docs in the `.bzl`\r\nsource code. This improve the maintainability of the docs as editors\r\nhave better support for editing markdown in markdown files as opposed to\r\ndocstrings within `.bzl` files.\r\n\r\nNOTE: This is implemented via a genrule in order to not expose a macro as an\r\nconsumable API.\r\n\r\nSummary:\r\n- chore: mark the documentation files as non-generated\r\n- chore: chmod -x markdown files\r\n- feat: adjust doc generation to retain headers and modify the header\r\n- refactor: move the docs from .bzl and improve them\r\n\r\nWork towards #1332",
    "head_branch": "doc/append-bottom-only",
    "is_a_fork": true,
    "comments": [
      "You sure you don't want to just bite the bullet and setup readthedocs? It lets us create rich docs, gives us versioned docs, integrates with PRs, is locally runnable/previewable, and sphinx's plugin system gives us a lot of future options :). I've been pretty impressed and happy with it. I've already reserved the project name on rtd (https://readthedocs.org/projects/rules-python/)",
      "I agree with the long term solution being RTD. I'll create a separate issue. If anyone would like an easy way to contribute to open source, that would be a good first task.\r\n\r\nThat said, I'll merge this one for now."
    ],
    "commit_messages": [
      "docs: allow manual edits to generated docs (#1478)\n\nBefore this PR the documentation used to be next to the source. With\nthe adjustment of how we generate the markdown files, we can keep user\nfriendly documentation in markdown and leave the API docs in the `.bzl`\nsource code. This improve the maintainability of the docs as editors\nhave better support for editing markdown in markdown files as opposed to\ndocstrings within `.bzl` files.\n\nNOTE: This is implemented via a genrule in order to not expose a macro\nas an\nconsumable API.\n\nSummary:\n- chore: mark the documentation files as non-generated\n- chore: chmod -x markdown files\n- feat: adjust doc generation to retain headers and modify the header\n- refactor: move the docs from .bzl and improve them\n\nWork towards #1332"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ceac254a19ac28f54a",
    "number": 1477,
    "body": "This PR just moves all of the private `bzlmod` code to `python/private/bzlmod`\nand adds minimal `bzl_library` bindings to make the docs the same. Once #1476\nis merged, we can start exposing documentation for `module_extension`.\n\nThis includes extras in `pip_install/pip_repository.bzl` just to make it\npossible to review and merge #1476 and this in parallel.\n",
    "head_branch": "refactor/move-bzlmod-hub-to-private",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor(bzlmod): move bzlmod code to private/bzlmod (#1477)\n\nThis PR just moves all of the private `bzlmod` code to\n`python/private/bzlmod`\nand adds minimal `bzl_library` bindings to make the docs the same. Once\n#1476\nis merged, we can start exposing documentation for `module_extension`.\n\nThis includes extras in `pip_install/pip_repository.bzl` just to make it\npossible to review and merge #1476 and this in parallel."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ceac254a19ac28f54b",
    "number": 1476,
    "body": "Before this PR we could not build `module_extension` docs because of a\nreally old `stardoc` version. This updates `stardoc` to the latest version\nand regenerates the documentation. The addition of the docs for\n`module_extension` is out of scope of this PR.\n\nWork towards #1178\n\nSummary:\n- feat(bzlmod): add stardoc as a dev dep\n- feat(docs): enable running on bzlmod\n- chore: USE_BAZEL_VERSION=latest bazel run --enable_bzlmod //docs:update\n- refactor: create wrappers for http_archive and http_file in internal_deps\n- chore(legacy): bump stardoc to 0.6.2\n",
    "head_branch": "feat/bzlmod-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "doc(bzlmod): bump stardoc to 0.6.2 and enable bzlmod docs building (#1476)\n\nBefore this PR we could not build `module_extension` docs because of a\nreally old `stardoc` version. This updates `stardoc` to the latest\nversion\nand regenerates the documentation. The addition of the docs for\n`module_extension` is out of scope of this PR.\n\nWork towards #1178\n\nSummary:\n- feat(bzlmod): add stardoc as a dev dep\n- feat(docs): enable running on bzlmod\n- chore: USE_BAZEL_VERSION=latest bazel run --enable_bzlmod\n//docs:update\n- refactor: create wrappers for http_archive and http_file in\ninternal_deps\n- chore(legacy): bump stardoc to 0.6.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101cfac254a19ac28f54c",
    "number": 1475,
    "body": "Within Google, we have to patch some files so some additional tooling can capture some metadata. To make patching easier, call some no-opt stubs, which makes the patches smaller and more likely to apply without issues.",
    "head_branch": "register.extension.info.stub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal: add stub register_extension_name to make patching easier (#1475)\n\nWithin Google, we have to patch some files so some additional tooling\ncan capture some metadata. To make patching easier, call some no-opt\nstubs, which makes the patches smaller and more likely to apply without\nissues."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d0ac254a19ac28f54d",
    "number": 1473,
    "body": "Some platforms don't contain every version, e.g. s390x doesn't have 3.8, which is\r\nindicated by a missing sha256 value. When this happens, no repository for the runtime\r\nis created (`python_repository` rule).\r\n\r\nSimilar logic needs to be in the toolchains setup logic because otherwise a reference\r\nto an undefined repository exists in the select() expression of the aliases. Because those\r\nreferences are lazily evaluated, they don't always cause a problem, but do mean that\r\nquery operations (e.g., `rdeps()`) can't work and the order of entries is important\r\n(which is surprising).\r\n\r\nCloses #1472\r\n\r\n",
    "head_branch": "skip_alias_creation",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1473/checks?check_run_id=17492391380) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "CI is unhappy, but it's not immediately apparent why. It gives me the feeling there might be a syntax error somewhere? Or maybe what's happening is the BUILD file is trying to load defs.bzl before something defs.bzl needs is ready? Maybe removing that `load(defs.bzl)` as I commented will fix it.",
      "@rickeylev I have addressed your concerns. CI is happy now, even without knowing the root cause of the original failures.\r\n\r\nCould you please re-review?"
    ],
    "commit_messages": [
      "fix(repo setup): Skip aliases for unloaded toolchains (#1473)\n\nSome platforms don't contain every version, e.g. s390x doesn't have 3.8,\nwhich is\nindicated by a missing sha256 value. When this happens, no repository\nfor the runtime\nis created (`python_repository` rule).\n\nSimilar logic needs to be in the toolchains setup logic because\notherwise a reference\nto an undefined repository exists in the select() expression of the\naliases. Because those\nreferences are lazily evaluated, they don't always cause a problem, but\ndo mean that\nquery operations (e.g., `rdeps()`) can't work and the order of entries\nis important\n(which is surprising).\n\nCloses #1472"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d1ac254a19ac28f54e",
    "number": 1470,
    "body": "This will help make sure [Bazel Downstream Pipeline](https://github.com/bazelbuild/continuous-integration/blob/master/docs/downstream-testing.md) is green after enabling Bzlmod at Bazel@HEAD\r\n\r\nSee https://github.com/bazelbuild/bazel/issues/18958#issuecomment-1749058780\r\n\r\nRelated issue: https://github.com/bazelbuild/rules_python/issues/1469\r\n",
    "head_branch": "meteorcloudy-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Disable Bzlmod explicitly in .bazelrc (#1470)\n\nThis will help make sure [Bazel Downstream\nPipeline](https://github.com/bazelbuild/continuous-integration/blob/master/docs/downstream-testing.md)\nis green after enabling Bzlmod at Bazel@HEAD\n\nSee\nhttps://github.com/bazelbuild/bazel/issues/18958#issuecomment-1749058780\n\nRelated issue: https://github.com/bazelbuild/rules_python/issues/1469"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d2ac254a19ac28f54f",
    "number": 1467,
    "body": "The new release tag has been pushed, so this can be also be updated.\n",
    "head_branch": "chore/changelog-bump-0.26.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: bump the CHANGELOG.md (#1467)\n\nThe new release tag has been pushed, so this can be also be updated."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d2ac254a19ac28f550",
    "number": 1461,
    "body": "Updates versions:\r\n* 3.8.15  -> 3.8.18\r\n* 3.11.4  -> 3.11.6\r\n\r\nAdds versions: 3.8.18, 3.11.6, 3.12.0\r\n\r\nFixes #1396\r\n",
    "head_branch": "chore/new-python-versions",
    "is_a_fork": true,
    "comments": [
      "Ah the diff is buried deep in the log. Here's a portion\r\n\r\n```\r\n-# This file is autogenerated by pip-compile with Python 3.11\r\n--\r\n  | +# This file is autogenerated by pip-compile with Python 3.12\r\n  | # by the following command:\r\n  | #\r\n  | #    bazel run //tools/publish:requirements.update\r\n  | @@ -204,9 +204,7 @@\r\n  | importlib-metadata==6.0.0 \\\r\n  | --hash=sha256:7efb448ec9a5e313a57655d35aa54cd3e01b7e1fbcf72dce1bf06119420f5bad \\\r\n  | --hash=sha256:e354bedeb60efa6affdcc8ae121b73544a7aa74156d047311948f6d711cd378d\r\n  | -    # via\r\n  | -    #   keyring\r\n  | -    #   twine\r\n  | +    # via twine\r\n\r\n```"
    ],
    "commit_messages": [
      "chore: add new Python toolchains from indygreg (#1461)\n\nUpdates versions:\n* 3.8.15  -> 3.8.18\n* 3.11.4  -> 3.11.6\n\nAdds versions: 3.8.18, 3.11.6, 3.12.0\n\nFixes #1396"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d3ac254a19ac28f551",
    "number": 1460,
    "body": "This largely covers how to introduce a breaking change.\r\n\r\nIt also attempts to clarify what is or isn't a breaking change.\r\n\r\nCloses #1424\r\nWork towards #1361",
    "head_branch": "breaking-changes-doc",
    "is_a_fork": true,
    "comments": [
      "Updated pull request template, per Ignas's request on slack"
    ],
    "commit_messages": [
      "docs: document a breaking changes policy (#1460)\n\nThis largely covers how to introduce a breaking change.\n\nIt also attempts to clarify what is or isn't a breaking change.\n\nCloses #1424\nWork towards #1361"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d4ac254a19ac28f552",
    "number": 1459,
    "body": "This moves the dependency management of what transitive files are needed to generate docs for a .bzl file out of the docs directory and into the respective bzl file's directory. This ensures that the bzl_library targets we expose to users contain all the necessary dependencies.\r\n\r\nBecause there are some projects using the bzl_library targets in //docs, some compatiblity aliases are added to make their migration path easier. Those targets only public for historical reasons and shouldn't be used.\r\n\r\nWork towards #1458",
    "head_branch": "docs-deps-cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: move dependency management into respective bzl packages (#1459)\n\nThis moves the dependency management of what transitive files are needed\nto generate docs for a .bzl file out of the docs directory and into the\nrespective bzl file's directory. This ensures that the bzl_library\ntargets we expose to users contain all the necessary dependencies.\n\nBecause there are some projects using the bzl_library targets in //docs,\nsome compatiblity aliases are added to make their migration path easier.\nThose targets only public for historical reasons and shouldn't be used.\n\nWork towards #1458"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d5ac254a19ac28f553",
    "number": 1457,
    "body": "This allows depending on just e.g. `//python:defs_bzl` without having to also depend on our internal //docs targets or manually including the extra bazel_tools files.\r\n\r\nThe missing files were hidden by the doc tests because those tests manually include the extra files. Under the hood, it goes:\r\n  * defs.bzl ->\r\n  * py_runtime_pair.bzl -> \r\n  * @bazel_tools//tools/python:toolchain.bzl ->\r\n  * @bazel_tools//tools/python:private/defs.bzl -> \r\n\r\n(Note the relationshps within @bazel_tools are Bazel-version specific)\r\n\r\nUnfortunately, there isn't a public target for just the subset of files we need from @bazel_tools, so we have to use the larger glob of all of `@bazel_tools//tools`.",
    "head_branch": "fix-defs-bzl-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: add missing `@bazel_tools` files to bzl_library dependencies. (#1457)\n\nThis allows depending on just e.g. `//python:defs_bzl` without having to\nalso depend on our internal //docs targets or manually including the\nextra bazel_tools files.\n\nThe missing files were hidden by the doc tests because those tests\nmanually include the extra files. Under the hood, it goes:\n  * defs.bzl ->\n  * py_runtime_pair.bzl -> \n  * @bazel_tools//tools/python:toolchain.bzl ->\n  * @bazel_tools//tools/python:private/defs.bzl -> \n\n(Note the relationshps within @bazel_tools are Bazel-version specific)\n\nUnfortunately, there isn't a public target for just the subset of files\nwe need from @bazel_tools, so we have to use the larger glob of all of\n`@bazel_tools//tools`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d6ac254a19ac28f554",
    "number": 1454,
    "body": "Remove incompatible_generate_aliases from docs as its no longer required.\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs(gazelle): Update README.md for gazelle (#1454)\n\nRemove incompatible_generate_aliases from docs as its no longer\nrequired."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d7ac254a19ac28f555",
    "number": 1453,
    "body": "Current implementation does not produce deterministic output because:\r\n- `ZipFile.writestr()` leaks current date and time\r\n- `ZipFile.write()` leaks the source file's mtime and mode bits (permissions) into the resulting zip archive.\r\n\r\nBy manually creating our own `ZipInfo` objects we can explicitly set date and time fields to `Jan 1, 1980, 00:00` (minimum value allowed by the zip file standard), and ensure that other file attributes are uniform across all entries in a zip file.",
    "head_branch": "py_wheel_deterministic",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1453/checks?check_run_id=17355640465) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "I'm not a wheel expert, but dropping the permissions might be problematic? My basic thinking is if a +x bit gets dropped, that might be a problem. Can't wheel contains arbitrary data, and someone might intend for a data file to have the executable bit?\r\n\r\nMaybe mask such that we keep the executable bit if set, but normalize to read only?",
      "If it helps, I've got code that canonicalizes wheels [here](https://github.com/jvolkman/repairwheel/blob/main/src/repairwheel/wheel.py#L78).\r\n\r\nAnother thing to watch out for is `ZipInfo.create_system` which differs based on whether you're running on windows or linux/unix.",
      "I talked to a Bazel dev about how permissions are handled\r\n\r\n1. Bazel doesn't make any guarantees about file permissions\r\n1. It ignores permissions when considering if the file changed\r\n1. Action outputs are set to rxrxrx\r\n1. Source files don't have permission changed\r\n1. They pointed out symlinks might be weird (no one was sure off-hand how symlinks + permissions would behave)\r\n\r\nPretty much any of those are a good reason for us to not preserve permissions. I find the second and third one particularly compelling.\r\n\r\nSo I think its really just a question of: do we set rx or rwx?\r\n\r\nMy vote is for rwx; it seems what is commonly done, and it \"preserves\" the writability of any files.",
      "(Ignas posted this, but it only shows up in my email not on the pr for some reason)\r\n\r\n> Whilst playing with the code, I have realized that the proposed solution does not fully solve determinism within wheels. Depending on the order that the files get passed to the wheelmaker we may end up with a different zip from time to time.\r\n>\r\n> nit: I think we should follow the convention of sorting the RECORD file entries in a particular way - first all of the files, then all of the dist-info files and then the RECORD file last in order to ensure that it is somewhat consistent with what repairwheel is doing.\r\n\r\nIs the order coming from depsets? Or is it coming from e.g. a Python dict/set re-ordering things?\r\n\r\nIf it's coming from a depset, then, insofar as Bazel is concerned, this is fine. Depsets (and input lists) have ordering and it's reflected in how bazel computes what is affected/changed (e.g. the argv of the action's command line). I don't think that can be avoided. The zip itself is still deterministic, just not \"predictable\".\r\n\r\nIf it's coming from Python doing a set/dict call somewhere, then we should fix that -- that's a source of non-determinism Bazel isn't aware of. Having that in a separate PR is fine; this one has been out for awhile.\r\n\r\nBut yes, I agree that sorting the zip entries is a good idea regardless.",
      "> Is the order coming from depsets? Or is it coming from e.g. a Python dict/set re-ordering things?\r\n\r\nWe're sorting file lists in `main()` [here](https://github.com/bazelbuild/rules_python/blob/382b6785a57ee428fc0ec367bcb380c6266cab7b/tools/wheelmaker.py#L442) and [here](https://github.com/bazelbuild/rules_python/blob/382b6785a57ee428fc0ec367bcb380c6266cab7b/tools/wheelmaker.py#L516).\r\nThe files end up getting added to the zip archive in deterministic order: \r\n - sorted files from `all_files`\r\n - `WHEEL`\r\n - `METADATA`\r\n - optional `entry_points.txt`\r\n - sorted files from `extra_distinfo_file`\r\n - `RECORD`\r\n",
      "Yeah, my previous comment (that I have deleted) was all wrong, I think all is good with the sorting of the contents within the wheelmaker, so the only things that I would love to see in this PR would be:\r\n* A test asserting that the sha256 of the wheel remains the same.\r\n* The `rwx` permission setting as @philsc has suggested.\r\n* (And as @jvolkman suggested below) `.create_system = 3`",
      "I have now realized what had confused me in the beginning - when writing the `RECORD` file we change the order of the entries in [this line](https://github.com/bazelbuild/rules_python/pull/1453/files#diff-b29be3845ac48e11fd0c22ac678e780fb376ae59cc4e894bf38cdcada2dea59bL186) and given that the order of files going into the zip file is deterministic and the order of the slice is also deterministic, I would vote for removing the `entries.sort()` on that line because it may be unnecessary. I am not sure if it is harmless. Maybe someone else with more knowledge into how things should be can comment.",
      "Rebased on top of main."
    ],
    "commit_messages": [
      "fix(py_wheel): produce deterministic wheel files (#1453)\n\nCurrent implementation does not produce deterministic output because:\n- `ZipFile.writestr()` leaks current date and time\n- `ZipFile.write()` leaks the source file's mtime and mode bits\n(permissions) into the resulting zip archive.\n\nBy manually creating our own `ZipInfo` objects we can explicitly set\ndate and time fields to `Jan 1, 1980, 00:00` (minimum value allowed by\nthe zip file standard), and ensure that other file attributes are\nuniform across all entries in a zip file.\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d7ac254a19ac28f556",
    "number": 1452,
    "body": "The CI currently only runs on Ubuntu, so it assumes that is the target platform. This ends\r\nup missing some notable Windows code paths, though.\r\n\r\nSince its analysis-phase logic, we can force the platform to be Windows for the analysis\r\ntests, and then the rules follow the code paths that should be taken under Windows.\r\nThis allows testing Windows logic under Ubuntu.",
    "head_branch": "pystar-windows-analysis-tests",
    "is_a_fork": true,
    "comments": [
      "For the paper trail https://github.com/bazelbuild/bazel/issues/19587 relates to this PR."
    ],
    "commit_messages": [
      "tests(pystar): add analysis tests to cover basic windows building (#1452)\n\nThe CI currently only runs on Ubuntu, so it assumes that is the target\nplatform. This ends\nup missing some notable Windows code paths, though.\n\nSince its analysis-phase logic, we can force the platform to be Windows\nfor the analysis\ntests, and then the rules follow the code paths that should be taken\nunder Windows.\nThis allows testing Windows logic under Ubuntu."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d8ac254a19ac28f557",
    "number": 1451,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.7 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n<h2>1.26.13</h2>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and <code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port would be rejected even when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code> packaging metadata field.</li>\n</ul>\n<h2>1.26.12</h2>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the <code>urllib3.contrib.pyopenssl</code> module. Both will be removed in v2.x. See this <a href=\"https://redirect.github.com/urllib3/urllib3/issues/2680\">GitHub issue</a> for justification and info on how to migrate.</li>\n</ul>\n<h2>1.26.11</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to HTTPResponse.read would raise an OverflowError on Python 3.9 and earlier.</li>\n</ul>\n<h2>1.26.10</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<p>:closed_lock_with_key: <strong>This is the first release to be signed with Sigstore!</strong> You can verify the distributables using the <code>.sig</code> and <code>.crt</code> files included on this release.</p>\n<ul>\n<li>Removed support for Python 3.5</li>\n<li>Fixed an issue where a <code>ProxyError</code> recommending configuring the proxy as HTTP instead of HTTPS could appear even when an HTTPS proxy wasn't configured.</li>\n</ul>\n<h2>1.26.9</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n<h1>1.26.13 (2022-11-23)</h1>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and <code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port would be rejected\neven when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code> packaging metadata field.</li>\n</ul>\n<h1>1.26.12 (2022-08-22)</h1>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the <code>urllib3.contrib.pyopenssl</code> module.\nBoth will be removed in v2.x. See this <code>GitHub issue &lt;https://github.com/urllib3/urllib3/issues/2680&gt;</code>_\nfor justification and info on how to migrate.</li>\n</ul>\n<h1>1.26.11 (2022-07-25)</h1>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to <code>HTTPResponse.read</code> would\nraise an <code>OverflowError</code> on Python 3.9 and earlier.</li>\n</ul>\n<h1>1.26.10 (2022-07-07)</h1>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.7...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.7&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/pip_repository_entry_points/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1500."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101d9ac254a19ac28f558",
    "number": 1450,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.14 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.14...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1499."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101daac254a19ac28f559",
    "number": 1449,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1505."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101dbac254a19ac28f55a",
    "number": 1448,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod_build_file_generation/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1506."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101dbac254a19ac28f55b",
    "number": 1447,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_repository_annotations/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.26.13 to 1.26.17 in /examples/pip_repository_annotations (#1447)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to\n1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins would cause connection pools to be closed\nwhile requests are in progress (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in\n<code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(<code>[#3139](https://github.com/urllib3/urllib3/issues/3139)\n&lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins\nwould cause connection pools to be closed while requests are in progress\n(<code>[#2954](https://github.com/urllib3/urllib3/issues/2954)\n&lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused\n(<code>[#2645](https://github.com/urllib3/urllib3/issues/2645)\n&lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899)\n&lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte\n(<code>[#2901](https://github.com/urllib3/urllib3/issues/2901)\n&lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0.\n(<code>[#2850](https://github.com/urllib3/urllib3/issues/2850)\n&lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the\ntype hint of <code>PoolKey.key_retries</code> by adding\n<code>bool</code> to the union.\n(<code>[#2865](https://github.com/urllib3/urllib3/issues/2865)\n&lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a>\nRelease 1.26.17</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a>\nBackport GHSA-v845-jxx5-vc9f (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a>\nFix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a>\n[1.26] Configure OS for RTD to fix building docs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a>\n[1.26] Improve error message when calling urllib3.request() (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a>\n[1.26] Run coverage even with failed jobs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a>\nRelease 1.26.16</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a>\nUse trusted publishing for PyPI</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a>\n[1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a>\n[1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.17\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101dcac254a19ac28f55c",
    "number": 1446,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse_vendored/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1503."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ddac254a19ac28f55d",
    "number": 1445,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.13 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.26.13...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.13&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1501."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101deac254a19ac28f55e",
    "number": 1444,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.25.11 to 1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in <code>urllib3.contrib</code> module.</li>\n</ul>\n<h2>1.26.13</h2>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and <code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port would be rejected even when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code> packaging metadata field.</li>\n</ul>\n<h2>1.26.12</h2>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the <code>urllib3.contrib.pyopenssl</code> module. Both will be removed in v2.x. See this <a href=\"https://redirect.github.com/urllib3/urllib3/issues/2680\">GitHub issue</a> for justification and info on how to migrate.</li>\n</ul>\n<h2>1.26.11</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to HTTPResponse.read would raise an OverflowError on Python 3.9 and earlier.</li>\n</ul>\n<h2>1.26.10</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<p>:closed_lock_with_key: <strong>This is the first release to be signed with Sigstore!</strong> You can verify the distributables using the <code>.sig</code> and <code>.crt</code> files included on this release.</p>\n<ul>\n<li>Removed support for Python 3.5</li>\n<li>Fixed an issue where a <code>ProxyError</code> recommending configuring the proxy as HTTP instead of HTTPS could appear even when an HTTPS proxy wasn't configured.</li>\n</ul>\n<h2>1.26.9</h2>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins\nwould cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0. (<code>[#2850](https://github.com/urllib3/urllib3/issues/2850) &lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the type hint of <code>PoolKey.key_retries</code> by adding <code>bool</code> to the union. (<code>[#2865](https://github.com/urllib3/urllib3/issues/2865) &lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n<h1>1.26.13 (2022-11-23)</h1>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and <code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port would be rejected\neven when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code> packaging metadata field.</li>\n</ul>\n<h1>1.26.12 (2022-08-22)</h1>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the <code>urllib3.contrib.pyopenssl</code> module.\nBoth will be removed in v2.x. See this <code>GitHub issue &lt;https://github.com/urllib3/urllib3/issues/2680&gt;</code>_\nfor justification and info on how to migrate.</li>\n</ul>\n<h1>1.26.11 (2022-07-25)</h1>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to <code>HTTPResponse.read</code> would\nraise an <code>OverflowError</code> on Python 3.9 and earlier.</li>\n</ul>\n<h1>1.26.10 (2022-07-07)</h1>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a> Release 1.26.17</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a> Fix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a> [1.26] Configure OS for RTD to fix building docs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a> [1.26] Improve error message when calling urllib3.request() (<a href=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a> [1.26] Run coverage even with failed jobs</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a> Release 1.26.16</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a> Use trusted publishing for PyPI</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.25.11...1.26.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.25.11&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_install/urllib3-1.26.17",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "build(deps): bump urllib3 from 1.25.11 to 1.26.17 in /examples/pip_install (#1444)\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.25.11 to\n1.26.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/releases\">urllib3's\nreleases</a>.</em></p>\n<blockquote>\n<h2>1.26.17</h2>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(GHSA-v845-jxx5-vc9f)</li>\n</ul>\n<h2>1.26.16</h2>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins would cause connection pools to be closed\nwhile requests are in progress (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2954\">#2954</a>)</li>\n</ul>\n<h2>1.26.15</h2>\n<ul>\n<li>Fix socket timeout value when HTTPConnection is reused (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2645\">urllib3/urllib3#2645</a>)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2899\">urllib3/urllib3#2899</a>)</li>\n<li>Fix IDNA handling of 'x80' byte (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2901\">urllib3/urllib3#2901</a>)</li>\n</ul>\n<h2>1.26.14</h2>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0 (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2850\">#2850</a>)</li>\n<li>Removed deprecated <code>HTTPResponse.getheaders()</code> calls in\n<code>urllib3.contrib</code> module.</li>\n</ul>\n<h2>1.26.13</h2>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and\n<code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port\nwould be rejected even when the port number after removing the zeroes\nwas valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code>\npackaging metadata field.</li>\n</ul>\n<h2>1.26.12</h2>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the\n<code>urllib3.contrib.pyopenssl</code> module. Both will be removed in\nv2.x. See this <a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/2680\">GitHub\nissue</a> for justification and info on how to migrate.</li>\n</ul>\n<h2>1.26.11</h2>\n<p><strong>If you or your organization rely on urllib3 consider\nsupporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub\nSponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python\n2</strong>: <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read\nmore in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to\nHTTPResponse.read would raise an OverflowError on Python 3.9 and\nearlier.</li>\n</ul>\n<h2>1.26.10</h2>\n<p><strong>If you or your organization rely on urllib3 consider\nsupporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub\nSponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python\n2</strong>: <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read\nmore in the v2.0 Roadmap</a></p>\n<p>:closed_lock_with_key: <strong>This is the first release to be signed\nwith Sigstore!</strong> You can verify the distributables using the\n<code>.sig</code> and <code>.crt</code> files included on this\nrelease.</p>\n<ul>\n<li>Removed support for Python 3.5</li>\n<li>Fixed an issue where a <code>ProxyError</code> recommending\nconfiguring the proxy as HTTP instead of HTTPS could appear even when an\nHTTPS proxy wasn't configured.</li>\n</ul>\n<h2>1.26.9</h2>\n<p><strong>If you or your organization rely on urllib3 consider\nsupporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub\nSponsors</a>.</strong></p>\n<p>:warning: <strong>urllib3 v2.0 will drop support for Python\n2</strong>: <a\nhref=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read\nmore in the v2.0 Roadmap</a></p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a\nhref=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's\nchangelog</a>.</em></p>\n<blockquote>\n<h1>1.26.17 (2023-10-02)</h1>\n<ul>\n<li>Added the <code>Cookie</code> header to the list of headers to strip\nfrom requests when redirecting to a different host. As before, different\nheaders can be set via <code>Retry.remove_headers_on_redirect</code>.\n(<code>[#3139](https://github.com/urllib3/urllib3/issues/3139)\n&lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>\n</ul>\n<h1>1.26.16 (2023-05-23)</h1>\n<ul>\n<li>Fixed thread-safety issue where accessing a <code>PoolManager</code>\nwith many distinct origins\nwould cause connection pools to be closed while requests are in progress\n(<code>[#2954](https://github.com/urllib3/urllib3/issues/2954)\n&lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>\n</ul>\n<h1>1.26.15 (2023-03-10)</h1>\n<ul>\n<li>Fix socket timeout value when <code>HTTPConnection</code> is reused\n(<code>[#2645](https://github.com/urllib3/urllib3/issues/2645)\n&lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>\n<li>Remove &quot;!&quot; character from the unreserved characters in\nIPv6 Zone ID parsing\n(<code>[#2899](https://github.com/urllib3/urllib3/issues/2899)\n&lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>\n<li>Fix IDNA handling of '\\x80' byte\n(<code>[#2901](https://github.com/urllib3/urllib3/issues/2901)\n&lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>\n</ul>\n<h1>1.26.14 (2023-01-11)</h1>\n<ul>\n<li>Fixed parsing of port 0 (zero) returning None, instead of 0.\n(<code>[#2850](https://github.com/urllib3/urllib3/issues/2850)\n&lt;https://github.com/urllib3/urllib3/issues/2850&gt;</code>__)</li>\n<li>Removed deprecated getheaders() calls in contrib module. Fixed the\ntype hint of <code>PoolKey.key_retries</code> by adding\n<code>bool</code> to the union.\n(<code>[#2865](https://github.com/urllib3/urllib3/issues/2865)\n&lt;https://github.com/urllib3/urllib3/issues/2865&gt;</code>__)</li>\n</ul>\n<h1>1.26.13 (2022-11-23)</h1>\n<ul>\n<li>Deprecated the <code>HTTPResponse.getheaders()</code> and\n<code>HTTPResponse.getheader()</code> methods.</li>\n<li>Fixed an issue where parsing a URL with leading zeroes in the port\nwould be rejected\neven when the port number after removing the zeroes was valid.</li>\n<li>Fixed a deprecation warning when using cryptography v39.0.0.</li>\n<li>Removed the <code>&lt;4</code> in the <code>Requires-Python</code>\npackaging metadata field.</li>\n</ul>\n<h1>1.26.12 (2022-08-22)</h1>\n<ul>\n<li>Deprecated the <code>urllib3[secure]</code> extra and the\n<code>urllib3.contrib.pyopenssl</code> module.\nBoth will be removed in v2.x. See this <code>GitHub issue\n&lt;https://github.com/urllib3/urllib3/issues/2680&gt;</code>_\nfor justification and info on how to migrate.</li>\n</ul>\n<h1>1.26.11 (2022-07-25)</h1>\n<ul>\n<li>Fixed an issue where reading more than 2 GiB in a call to\n<code>HTTPResponse.read</code> would\nraise an <code>OverflowError</code> on Python 3.9 and earlier.</li>\n</ul>\n<h1>1.26.10 (2022-07-07)</h1>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784\"><code>c9016bf</code></a>\nRelease 1.26.17</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb\"><code>0122035</code></a>\nBackport GHSA-v845-jxx5-vc9f (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3139\">#3139</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/e63989f97d206e839ab9170c8a76e3e097cc60e8\"><code>e63989f</code></a>\nFix installing <code>brotli</code> extra on Python 2.7</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/2e7a24d08713a0131f0b3c7197889466d645cc49\"><code>2e7a24d</code></a>\n[1.26] Configure OS for RTD to fix building docs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/57181d6ea910ac7cb2ff83345d9e5e0eb816a0d0\"><code>57181d6</code></a>\n[1.26] Improve error message when calling urllib3.request() (<a\nhref=\"https://redirect.github.com/urllib3/urllib3/issues/3058\">#3058</a>)</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/3c0148048a523325819377b23fc67f8d46afc3aa\"><code>3c01480</code></a>\n[1.26] Run coverage even with failed jobs</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d94029b7e2193ff47b627906a70e06377a09aae8\"><code>d94029b</code></a>\nRelease 1.26.16</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8\"><code>18e9214</code></a>\nUse trusted publishing for PyPI</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36\"><code>d25cf83</code></a>\n[1.26] Fix invalid test_ssl_failure_midway_through_conn</li>\n<li><a\nhref=\"https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263\"><code>25cca38</code></a>\n[1.26] Fix test_ssl_object_attributes</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/urllib3/urllib3/compare/1.25.11...1.26.17\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.25.11&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't\nalter it yourself. You can also trigger a rebase manually by commenting\n`@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101deac254a19ac28f55f",
    "number": 1443,
    "body": "These are restricted use APIs, so they have to go through py_internal.\r\n\r\nThey aren't caught by CI because tests don't currently cover their code paths; fixing that will\r\nbe done in a separate change.\r\n\r\nWork towards #1069",
    "head_branch": "fix-internal-api-calls",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(pystar): Use py_internal for runfiles_enabled, declare_shareable_artifact, share_native_deps (#1443)\n\nThese are restricted use APIs, so they have to go through py_internal.\n\nThey aren't caught by CI because tests don't currently cover their code\npaths; fixing that will\nbe done in a separate change.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101dfac254a19ac28f560",
    "number": 1441,
    "body": "These analysis tests verify that `py_runtime` and `py_runtime_pair` are working as intended\r\nfor both the native Bazel and Starlark implementations.\r\n\r\nWork towards #1069",
    "head_branch": "py-runtime-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests(pystar): py_runtime_pair and py_runtime analysis tests (#1441)\n\nThese analysis tests verify that `py_runtime` and `py_runtime_pair` are\nworking as intended\nfor both the native Bazel and Starlark implementations.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e0ac254a19ac28f561",
    "number": 1440,
    "body": "The tools/build_defs/python path is an artifact of some Google-internal\r\nnaming that isn't applicable to the rules_python source tree layout.\r\nWith the Starlark implementation running in CI and working in some\r\ncapacity, it's time to move them to a less mysterious location.\r\n\r\n* Also moves the py_wheel tests out of the base rule tests. Not sure\r\n  how they ended up there.\r\n\r\nWork towards #1069\r\n\r\n",
    "head_branch": "mv-starlark-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: Move base rule tests under tests instead of //tools/build_defs/python (#1440)\n\nThe tools/build_defs/python path is an artifact of some Google-internal\nnaming that isn't applicable to the rules_python source tree layout.\nWith the Starlark implementation running in CI and working in some\ncapacity, it's time to move them to a less mysterious location.\n\n* Also moves the py_wheel tests out of the base rule tests. Not sure\n  how they ended up there.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e1ac254a19ac28f562",
    "number": 1439,
    "body": "They aren't quite usable yet. This mostly fixes references and adds\r\nsurrounding infrastructure to make this mostly loadable and somewhat runnable.\r\n\r\nNote that the \"autodetecting\" name is misleading: it doesn't really\r\nautodetect anything. But it's the established name and part of the\r\npublic API.\r\n\r\nThe autodetecting toolchain is trimmed down from what Bazel does. The\r\nBazel version has a Python 2 variant and a \"non strict\" mode to support\r\nthat. With Python 2 no longer supported, that code is removed.\r\n\r\n* Also alphabetically sorts the bzl_libraries in //python/private\r\n\r\nWork towards #1069\r\n",
    "head_branch": "pystar-tools-bzl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal(pystar): Make py_runtime_pair and autodetecting toolchain mostly loadable. (#1439)\n\nThey aren't quite usable yet. This mostly fixes references and adds\nsurrounding infrastructure to make this mostly loadable and somewhat\nrunnable.\n\nNote that the \"autodetecting\" name is misleading: it doesn't really\nautodetect anything. But it's the established name and part of the\npublic API.\n\nThe autodetecting toolchain is trimmed down from what Bazel does. The\nBazel version has a Python 2 variant and a \"non strict\" mode to support\nthat. With Python 2 no longer supported, that code is removed.\n\n* Also alphabetically sorts the bzl_libraries in //python/private\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e2ac254a19ac28f563",
    "number": 1437,
    "body": "This copies the useful pieces from @bazel_tools//tools/python into rules_python. They're copied in relatively as-is, and not yet used. Subsequent commits will make them usable.\r\n\r\nThese pieces are:\r\n  * Bootstrap template (python_bootstrap_template.txt)\r\n  * The py_runtime_pair rule (split from toolchain.bzl)\r\n  * Autodetecting toolchain setup (split from toolchain.bzl)\r\n\r\nWork towards #1069",
    "head_branch": "pystar-autodetecting-toolchain",
    "is_a_fork": true,
    "comments": [
      "@chrislovecnm fixed. Windows has been flaky lately with that error about the \"pyc.NNNN\" files that we fixed for linux awhile back."
    ],
    "commit_messages": [
      "internal(pystar): Copy @bazel_tools//tools/python files to rules_python (#1437)\n\nThis copies the useful pieces from @bazel_tools//tools/python into\nrules_python. They're copied in relatively as-is, and not yet used.\nSubsequent commits will make them usable.\n\nThese pieces are:\n  * Bootstrap template (python_bootstrap_template.txt)\n  * The py_runtime_pair rule (split from toolchain.bzl)\n  * Autodetecting toolchain setup (split from toolchain.bzl)\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e3ac254a19ac28f564",
    "number": 1436,
    "body": "This patch adds a few arguments to `py_wheel_library` to simulate how\r\n`http_archive` accepts patch-related arguments.\r\n\r\nI also amended the existing test to validate the behaviour at a very\r\nhigh level.\r\n\r\nReferences: #1360",
    "head_branch": "add-patch-support-to-py-wheel-library",
    "is_a_fork": true,
    "comments": [
      "> I am not sure that having patching as part of the `build` action is the best way. Patches in general can modify the `METADATA` that is used to generate dependencies and as you mentioned, if we split patching into a separate action, then we may end up with double the space in the build action cache.\r\n> \r\n> If we introduce patching at this layer, then we will have to have a different type of patching for the dependencies. \r\n\r\nYou mean patching what the dependencies themselves are? If so, you are correct.  That can be done by modifying the intermediate file itself. The same place where you introduce what patches to apply.\r\nhttps://github.com/philsc/rules_python/blob/unreviewed/phil/pypi_install/examples/pypi_install/intermediate_file_patcher.py\r\n\r\n> What is more, making this hermetic requires the user to go through extra hoops and just leaving it in the repository rule world and non-hermetic by construction segregates the responsibilities slightly better, IMHO.\r\n\r\nThat does sound nice, but that's not really what my goal is. My goal is to cut the logic in repository rules to an absolute minimum. Everything else should go into actions.  I.e. I really just want to download the wheel, set up some minimal BUILD files that specify the dependencies and such, and leave everything else to actions.\r\n\r\nHaving a non-hermetic patch tool in an action is really no worse than having a non-hermetic patch tool in repository context. Making the patching hermetic is easier in action context because you can depend on the output of other actions (e.g. a bazel-compiled `patch` binary)."
    ],
    "commit_messages": [
      "pycross: Add patching support to py_wheel_library (#1436)\n\nThis patch adds a few arguments to `py_wheel_library` to simulate how\n`http_archive` accepts patch-related arguments.\n\nI also amended the existing test to validate the behaviour at a very\nhigh level.\n\nReferences: #1360"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e3ac254a19ac28f565",
    "number": 1435,
    "body": "Since Bazel 7 isn't yet available, and we need a couple recent commits in Bazel, the\r\nlast_green release is used. This will eventually be changed to \"rolling\" once the\r\nnecessary commits are available in the next rolling release.\r\n\r\nBecause we're at the limit of 80 test jobs, some existing jobs have to be removed\r\nand only a limited number of cases can be currently covered. I opted to remove\r\nthe pip_install tests, since they're redundant with the pip_parse tests, which\r\nfrees up 4 slots. Two test configs are added: one using workspace, the other using\r\nbzlmod; both run the default tests on Ubuntu. This will provide some basic coverage;\r\nmore slots will free up when Bazel 5.4 support is dropped and Bazel 7 is released.\r\n\r\nWork toward #1069",
    "head_branch": "test-bazel-rolling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests(pystar): CI configs that uses Starlark implementation of rules (#1435)\n\nSince Bazel 7 isn't yet available, and we need a couple recent commits\nin Bazel, the\nlast_green release is used. This will eventually be changed to \"rolling\"\nonce the\nnecessary commits are available in the next rolling release.\n\nBecause we're at the limit of 80 test jobs, some existing jobs have to\nbe removed\nand only a limited number of cases can be currently covered. I opted to\nremove\nthe pip_install tests, since they're redundant with the pip_parse tests,\nwhich\nfrees up 4 slots. Two test configs are added: one using workspace, the\nother using\nbzlmod; both run the default tests on Ubuntu. This will provide some\nbasic coverage;\nmore slots will free up when Bazel 5.4 support is dropped and Bazel 7 is\nreleased.\n\nWork toward #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e4ac254a19ac28f566",
    "number": 1433,
    "body": "This ensures that under bzlmod with `--lockfile-mode=update` we\r\nwould generate an entry per os/arch, which is needed because the\r\nhermetic toolchain interpreter path is os/arch dependent.\r\n\r\nSummary:\r\n- add bazel_features dep\r\n- mark the pip extension as arch/os dependent\r\n\r\nRelated: bazelbuild/bazel#19154\r\n",
    "head_branch": "feat/mark-extensions-os-dependent",
    "is_a_fork": true,
    "comments": [
      "Thanks for addressing this issue in rules_python. But I'm just wondering is there any specific reason why rules_python couldn't generate repos for all supported platforms and select the correct repo during build time? This is what the java toolchains do and could avoid using use_os/use_arch.\r\n\r\nOne problem I found is that there is a bit of a usability issue of use_os/use_arch: if we enforce `--lockfile_mode=error` on CI build, a user who updates rules_python has to update the lockfile on each supported platforms to pass check. This is sometimes hard because some users may not have access to specific machines.",
      "Hi, I agree that the ergonomics of this feature is not ideal because of this reason. The way rules_python is implemented today it needs to resolve the Python interpreter for the host platform and pass that to the repository rule that then uses that to generate the BUILD.bazel content and/or to build a python wheel. I think it would be great to write an overview doc and outline possible ways to move forward as there are many moving parts and getting rid of this platform dependence is not trivial."
    ],
    "commit_messages": [
      "feat(bzlmod): mark pip extension as os/arch dependent (#1433)\n\nThis ensures that under bzlmod with `--lockfile-mode=update` we\nwould generate an entry per os/arch, which is needed because the\nhermetic toolchain interpreter path is os/arch dependent.\n\nSummary:\n- add bazel_features dep\n- mark the pip extension as arch/os dependent\n\nRelated: bazelbuild/bazel#19154\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e5ac254a19ac28f567",
    "number": 1432,
    "body": "Changed `py_wheel` to load `py_binary` instead of using `native.py_binary`. This caused the doc generation to fail because of the additional loads(), so the doc libraries were refactored to represent the additional loads. This adds `//python:packaging_bzl`\r\nas a public target.\r\n\r\nDocs were failing to build because Stardoc wasn't able to process the value `cc_helper.use_cpp_toolchains()` returned. For some reason, under Stardoc, the value is some mocked out value that it can't handle. This is easily fixed by just using the regular way for referencing an optional toolchain; the labels the two use are the same.\r\n\r\nWork towards #1069",
    "head_branch": "pystar-run1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat, refactor(pystar): bzl_library for packaging.bzl; fix pystar doc building and py_wheel (#1432)\n\nChanged `py_wheel` to load `py_binary` instead of using\n`native.py_binary`. This caused the doc generation to fail because of\nthe additional loads(), so the doc libraries were refactored to\nrepresent the additional loads. This adds `//python:packaging_bzl`\nas a public target.\n\nDocs were failing to build because Stardoc wasn't able to process the\nvalue `cc_helper.use_cpp_toolchains()` returned. For some reason, under\nStardoc, the value is some mocked out value that it can't handle. This\nis easily fixed by just using the regular way for referencing an\noptional toolchain; the labels the two use are the same.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e6ac254a19ac28f568",
    "number": 1430,
    "body": "This change supports cross-platform remote execution where the Bazel client's platform can be different from the remote executors.",
    "head_branch": "cross",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1430/checks?check_run_id=17066069760) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "@rickeylev this is a followup to https://github.com/bazelbuild/bazel/issues/19587#issuecomment-1732206317 (related to https://github.com/bazelbuild/rules_python/issues/1069). I figured I'd sketch out a potential change that can remove the use of `_py_builtins.get_current_os_name()` to support cross-platform remote execution. Does something like this seem reasonable?",
      "Instead of adding a new rule and going through select(), use `ctx.target_platform_has_constraint` and add an implicit dependency on the various platform constraints. See attributes.bzl and `_appl_constraints` for an example.\r\n\r\nHm, I wonder if that's actually sufficient. If you look at the darwin support, it also has to add `ExecutionInfo({\"requires-darwin\": \"\"})` (common.bzl) so that tests/binaries _run_ on darwin, too. Is there a `requires-windows` magic tag, too?",
      "> Instead of adding a new rule and going through select(), use `ctx.target_platform_has_constraint` and add an implicit dependency on the various platform constraints. See attributes.bzl and `_appl_constraints` for an example.\r\n> \r\n> Hm, I wonder if that's actually sufficient. If you look at the darwin support, it also has to add `ExecutionInfo({\"requires-darwin\": \"\"})` (common.bzl) so that tests/binaries _run_ on darwin, too. Is there a `requires-windows` magic tag, too?\r\n\r\nI didn't know about [ctx.target_platform_has_constraint](https://bazel.build/rules/lib/builtins/ctx#target_platform_has_constraint), neat!\r\n\r\nI also don't expect to need more than a way to check the target platform. Execution constraints don't seem relevant to the code that was changed. Perhaps I'm mistaken?",
      "> Execution constraints don't seem relevant to the code that was changed. Perhaps I'm mistaken?\r\n\r\nIt's most relevant for cases like remote execution. When the local, execution, and target platform are all the same, the problem doesn't come up.\r\n\r\nTo clarify, this doesn't have to be addressed in this PR. Making the analysis phase do the right thing is a necessary first step. This was more idle chatter.\r\n\r\nAnyways, for your edification:\r\n\r\nUnder the hood, the \"build for platform X\" and \"run on platform X\" logic doesn't fully communicate. This shows up when the execution and target platforms differ, such as with remote execution. e.g. say you are on running `bazel test` on your linux laptop, and you want to make sure your code works on windows. You have a cluster of Linux, Windows, Mac, etc machines in the cloud setup for Bazel's remote execution.\r\n\r\nSo then you do something like `bazel test --config=mywindowsconfig //my:test`. This causes the analysis phase to use Windows as the target platform, so things like select() and target_platform_has_constraint will follow/match the windows conditions. The build-execution phase then takes those inputs and produces a Windows test.exe binary. Next, it has to run the binary as a test. This is where it breaks down, because the fact that it was built for windows is lost. Bazel looks at where it can run the program (local (linux), remote-linux, remote-windows, remote-mac), and then uses a different set of settings (\"execution requirements\", which are specified by various config settings and the ExecutionInfo provider) to decide which are eligble to run on. Because it's lost the fact it was built for windows, it doesn't inherently know to disqualify the linux and mac options. So it might run it on one of those, then fail.",
      "btw, you can now enable the starlark rule implementation by setting `RULES_PYTHON_ENABLE_PYSTAR=1` and `USE_BAZEL_VERSION=last_green`.",
      "Is it possible to add CI for windows and macOS that regression tests the starlark rules?",
      "> Is it possible to add CI for windows and macOS that regression tests the starlark rules?\r\n\r\nYou know, I think we have exactly 2 slots left for CI jobs, so I think we can, actually.\r\n\r\nPR #1452 (merged) switches to using platform detection, so I'll close this PR."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e7ac254a19ac28f569",
    "number": 1429,
    "body": "Pass the environment generated by the `runfiles` helper so that the\r\nPython launcher can find the runfiles correctly as implemented in\r\nbazelbuild/bazel#14740.\r\n\r\nFixes #1426\r\n",
    "head_branch": "fix/1426/gazelle-python",
    "is_a_fork": false,
    "comments": [
      "@fmeum, could you please take a look? This is an additional change needed on top of your work in #1415.\r\n\r\nI have tested it with:\r\n```console\r\ncd examples/bzlmod_build_file_generation\r\nUSE_BAZEL_VERSION=last_green bazel run //:gazelle\r\n```",
      "Just FYI: With https://github.com/bazelbuild/bazel-gazelle/pull/1632, the Gazelle wrapper will be setting these variables and this change should only matter for tests at that point.",
      "I'm not familiar with Go, so its not clear to me why this works. All it seems to be doing is passing Env() to the subprocess? I don't see Env being modified. Do subprocesses in Go not inherit the current env? I sort of expected to see the PYTHON_RUNFILES envvar being set.",
      "> I'm not familiar with Go, so its not clear to me why this works. All it seems to be doing is passing Env() to the subprocess? I don't see Env being modified. Do subprocesses in Go not inherit the current env? I sort of expected to see the PYTHON_RUNFILES envvar being set.\n\n`rfiles.Env()` discovers runfiles (potentially by looking next to `argv[0]`) and then returns the environment variables that subprocesses need to discover runfiles. If no runfiles env variables are set for the outer process, the inner process wouldn't be able to discover runfiles without this line (which has a bug, see my comment).",
      "Thanks. LGTM after Fabian's comments are addressed.",
      "I am going to leave this like this due to my observation in https://github.com/bazelbuild/rules_python/pull/1429#discussion_r1335314004. @rickeylev, @f0rmiga, feel free to merge it during your working hours if you agree to postpone including `os.Env()` in the `std_module.go`."
    ],
    "commit_messages": [
      "fix(gazelle): runfiles discovery (#1429)\n\nPass the environment generated by the `runfiles` helper so that the\nPython launcher can find the runfiles correctly as implemented in\nbazelbuild/bazel#14740.\n\nFixes #1426"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e7ac254a19ac28f56a",
    "number": 1428,
    "body": "Always loading the code provides several benefits:\r\n  * It's easier to reason about what code paths are taken.\r\n  * Iteratively working on them is simply changing an environment variable instead of editing several files.\r\n  * Ensures the files are loadable on older versions of Bazel.\r\n\r\nUsage of the Starlark implemenation is controlled by an environment variable, `RULES_PYTHON_ENABLE_PYSTAR=1`. An environment variable must be used because the decision\r\nabout which implementation to use must be made before regular build flags are able to\r\nrun (loading phase logic is affected).\r\n\r\nThe Starlark implementation is almost entirely compatible with pre-Bazel 7, except for the `py_internal` symbol. This symbol is special in a couple ways:\r\n  * It only exists within the `@rules_python` repo\r\n  * It does not exist prior to Bazel 7.\r\n\r\nThis requires using a repo rule, `@rules_python_internal`, to do some feature/version detection to generate a shim bzl file so that the `py_internal` symbol is always loadable. Regular rules_python code then loads the shim and can act accordingly.\r\n\r\nAlso fixes some other loading-time issues (beyond simply py_internal being None):\r\n  * `configuration_field()` args are validated at time of call, so those must\r\n    be guarded so Bazel 5.4 doesn't fail on them.\r\n  * The `init` arg of `provider()` isn't supported under Bazel 5.4; change them\r\n    to no-op stubs behind a guard.\r\n  * The `|` operator for dicts isn't supported under Bazel 5.4; change to use\r\n    skylib's `dicts.add`\r\n\r\n\r\nWork towards #1069",
    "head_branch": "pystar-conditional-usage",
    "is_a_fork": true,
    "comments": [
      "Don't need my review on this?",
      "I don't think so? Nothing behavior changing AFAIK. If you see an issue, though, feel free to point it out."
    ],
    "commit_messages": [
      "refactor(pystar): load (but don't use) Starlark implementation. (#1428)\n\nAlways loading the code provides several benefits:\n  * It's easier to reason about what code paths are taken.\n* Iteratively working on them is simply changing an environment variable\ninstead of editing several files.\n  * Ensures the files are loadable on older versions of Bazel.\n\nUsage of the Starlark implemenation is controlled by an environment\nvariable, `RULES_PYTHON_ENABLE_PYSTAR=1`. An environment variable must\nbe used because the decision\nabout which implementation to use must be made before regular build\nflags are able to\nrun (loading phase logic is affected).\n\nThe Starlark implementation is almost entirely compatible with pre-Bazel\n7, except for the `py_internal` symbol. This symbol is special in a\ncouple ways:\n  * It only exists within the `@rules_python` repo\n  * It does not exist prior to Bazel 7.\n\nThis requires using a repo rule, `@rules_python_internal`, to do some\nfeature/version detection to generate a shim bzl file so that the\n`py_internal` symbol is always loadable. Regular rules_python code then\nloads the shim and can act accordingly.\n\nAlso fixes some other loading-time issues (beyond simply py_internal\nbeing None):\n* `configuration_field()` args are validated at time of call, so those\nmust\n    be guarded so Bazel 5.4 doesn't fail on them.\n* The `init` arg of `provider()` isn't supported under Bazel 5.4; change\nthem\n    to no-op stubs behind a guard.\n* The `|` operator for dicts isn't supported under Bazel 5.4; change to\nuse\n    skylib's `dicts.add`\n\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e8ac254a19ac28f56b",
    "number": 1427,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 39.0.0 to 41.0.4.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>41.0.4 - 2023-09-19</p>\n<pre><code>\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.1.3.\n<p>.. _v41-0-3:</p>\n<p>41.0.3 - 2023-08-01\n</code></pre></p>\n<ul>\n<li>Fixed performance regression loading DH public keys.</li>\n<li>Fixed a memory leak when using\n:class:<code>~cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305</code>.</li>\n<li>Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.1.2.</li>\n</ul>\n<p>.. _v41-0-2:</p>\n<p>41.0.2 - 2023-07-10</p>\n<pre><code>\n* Fixed bugs in creating and parsing SSH certificates where critical options\n  with values were handled incorrectly. Certificates are now created correctly\n  and parsing accepts correct values as well as the previously generated\n  invalid forms with a warning. In the next release, support for parsing these\n  invalid forms will be removed.\n<p>.. _v41-0-1:</p>\n<p>41.0.1 - 2023-06-01\n</code></pre></p>\n<ul>\n<li>Temporarily allow invalid ECDSA signature algorithm parameters in X.509\ncertificates, which are generated by older versions of Java.</li>\n<li>Allow null bytes in pass phrases when serializing private keys.</li>\n</ul>\n<p>.. _v41-0-0:</p>\n<p>41.0.0 - 2023-05-30</p>\n<pre><code>\n* **BACKWARDS INCOMPATIBLE:** Support for OpenSSL less than 1.1.1d has been\n  removed.  Users on older version of OpenSSL will need to upgrade.\n* **BACKWARDS INCOMPATIBLE:** Support for Python 3.6 has been removed.\n* **BACKWARDS INCOMPATIBLE:** Dropped support for LibreSSL &lt; 3.6.\n* Updated the minimum supported Rust version (MSRV) to 1.56.0, from 1.48.0.\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.1.1.\n* Added support for the :class:`~cryptography.x509.OCSPAcceptableResponses`\n  OCSP extension.\n* Added support for the :class:`~cryptography.x509.MSCertificateTemplate`\n  proprietary Microsoft certificate extension.\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/fc11bce6930e591ce26a2317b31b9ce2b3e25512\"><code>fc11bce</code></a> bump for 41.0.4 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9629\">#9629</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/b22271cf3c3dd8dc8978f8f4b00b5c7060b6538d\"><code>b22271c</code></a> bump for 41.0.3 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9330\">#9330</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/774a4a16cbd22a89fdb4195ade9e4fcee27a7afa\"><code>774a4a1</code></a> Only check DH key validity when loading a private key. (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9071\">#9071</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9319\">#9319</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/bfa4d95f0f356f2d535efd5c775e0fb3efe90ef2\"><code>bfa4d95</code></a> changelog for 41.0.3 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9320\">#9320</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/0da7165aa73c0a4865b0a4d9e019db3c16eea55a\"><code>0da7165</code></a> backport fix the memory leak in fixedpool (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9272\">#9272</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9309\">#9309</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/7431db737cf0407560fac689d24f1d2e5efc349d\"><code>7431db7</code></a> bump for 41.0.2 (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9215\">#9215</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/e190ef190525999d1f599cf8c3aef5cb7f3a8bc4\"><code>e190ef1</code></a> Backport ssh cert fix (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9211\">#9211</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/bb204c8ca7bc0df0c24b6f6c1f59ed5f5bee9226\"><code>bb204c8</code></a> Backport: Added PyPy 3.10 to CI (<a href=\"https://redirect.github.com/pyca/cryptography/issues/8933\">#8933</a>) (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9210\">#9210</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/d02de9f26e9a2353e89427c1cea8b9ed2bae969e\"><code>d02de9f</code></a> changelog and version bump (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9008\">#9008</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/53dc686431f59658d892b83383a330d796105843\"><code>53dc686</code></a> Backport null fix (<a href=\"https://redirect.github.com/pyca/cryptography/issues/9007\">#9007</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pyca/cryptography/compare/39.0.0...41.0.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=39.0.0&new-version=41.0.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/cryptography-41.0.4",
    "is_a_fork": false,
    "comments": [
      "Superseded by #1581."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101e9ac254a19ac28f56c",
    "number": 1425,
    "body": "Work towards #1396",
    "head_branch": "chore/bump-minor-versions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: bump default python versions (#1425)\n\nWork towards #1396"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101eaac254a19ac28f56d",
    "number": 1423,
    "body": "Before this PR in numerous places we would check the MINOR_MAPPING dict.\nThis PR adds a function that also fails if the X.Y format is not in the\nMINOR_MAPPING dict making the code more robust.\n\nSplit from #1340 to unblock #1364.\n",
    "head_branch": "refactor/full_version",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor(toolchain): use a helper method to convert an X.Y version to X.Y.Z (#1423)\n\nBefore this PR in numerous places we would check the MINOR_MAPPING dict.\nThis PR adds a function that also fails if the X.Y format is not in the\nMINOR_MAPPING dict making the code more robust.\n\nSplit from #1340 to unblock #1364.\n\n---------\n\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ebac254a19ac28f56e",
    "number": 1422,
    "body": "This just makes the files able to get passed the loading stage under Bazel 7+.\r\n\r\nThis mostly involves fixing load statements, but also exposed a couple places where\r\npy_internal needs some small changes.\r\n\r\n* Also renames files to better distinguish rule vs macro vs Bazel-specific. This makes it easier to patch them within Google and more clear about which file is doing what.\r\n\r\nWork towards #1069",
    "head_branch": "pystar-loadable",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal(pystar): make starlark impl (mostly) loadable (#1422)\n\nThis just makes the files able to get passed the loading stage under\nBazel 7+.\n\nThis mostly involves fixing load statements, but also exposed a couple\nplaces where\npy_internal needs some small changes.\n\n* Also renames files to better distinguish rule vs macro vs\nBazel-specific. This makes it easier to patch them within Google and\nmore clear about which file is doing what.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ebac254a19ac28f56f",
    "number": 1421,
    "body": "This PR fixes some broken examples in `examples/build_file_generation` – because `gazelle` needed to be updated.\r\n\r\nAfter this PR, `bazel run //:requirements.update && bazel run //:gazelle_python_manifest.update && bazel run //:gazelle` no runs. Moreover if you delete the autogenerated sections of the `BUILD.bazel` file, it will regenerate them.\r\n\r\nFixes #1372\r\n",
    "head_branch": "oliver/fix-buildfile-generation",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1421/checks?check_run_id=16958808254) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Thanks for the PR @OliverFM, could you please sign the CLA and fix `buildifier` errors?",
      "> Thanks for the PR @OliverFM, could you please sign the CLA and fix `buildifier` errors?\r\n\r\nWill do! I've been away for the last week, but can fix this sometime in the next few days when I am back with my laptop :) ",
      "@aignas I think that this is all sorted – though the CLA change has not showed up yet",
      "@OliverFM It seems that `❌ https://github.com/bazelbuild/rules_python/commit/206537498aae89053230087ba987618cc5fb14f9 Author: <ol***r​@wayve.ai>` is the offender with the CLA. Could you please rewrite the git commit history with `git commit --amend --author` please? Squashing everything to a single commit and then doing it should fix the issue."
    ],
    "commit_messages": [
      "fix(examples): bump gazelle in examples/build_file_generation (#1421)\n\nThis PR fixes some broken examples in `examples/build_file_generation` –\nbecause `gazelle` needed to be updated.\n\nAfter this PR, `bazel run //:requirements.update && bazel run\n//:gazelle_python_manifest.update && bazel run //:gazelle` no runs.\nMoreover if you delete the autogenerated sections of the `BUILD.bazel`\nfile, it will regenerate them.\n\nFixes #1372"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ecac254a19ac28f570",
    "number": 1420,
    "body": "type!: fix examples\r\n\r\nThis PR fixes some broken examples in `examples/build_file_generation` – because `gazelle` needed to be updated.\r\n\r\nAfter this PR, `bazel run //:requirements.update && bazel run //:gazelle_python_manifest.update && bazel run //:gazelle` no runs. Moreover if you delete the autogenerated sections of the `BUILD.bazel` file, it will regenerate them.\r\n\r\nFixes #1372\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1420/checks?check_run_id=16958697067) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101edac254a19ac28f571",
    "number": 1418,
    "body": "This is a copy of the Starlark implementation of the Python rules from Bazel. This code isn't\r\nloaded and won't work as-is. Modifications to make it work will be made in\r\nsubsequent changes. It's almost pristine; changes are made to satisfy the\r\nbuildifier check.\r\n\r\nWork towards #1069",
    "head_branch": "pystar-clean",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "internal: copy Starlark rule implementation from Bazel (#1418)\n\nThis is a copy of the Starlark implementation of the Python rules from\nBazel. This code isn't\nloaded and won't work as-is. Modifications to make it work will be made\nin\nsubsequent changes. It's almost pristine; changes are made to satisfy\nthe\nbuildifier check.\n\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101eeac254a19ac28f572",
    "number": 1417,
    "body": "This change introduces support for `netrc` and `auth_patterns` attributes in `python_repository` (and by extension, `python_register_toolchains`). This allows consuming projects to fetch custom Python toolchain binaries from a private/authenticated HTTP host when specified directly by URL in `python_register_toolchains`.\r\n\r\nThe implementation proposed here mirrors that of `http_archive`: https://github.com/bazelbuild/bazel/blob/1cf392ff3918386858b8c038f82c013b1e04be98/tools/build_defs/repo/http.bzl#L116\r\n\r\nFixes #1215.",
    "head_branch": "python-repository-auth",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: Support netrc-based authentication for python_repository rule (#1417)\n\nThis change introduces support for `netrc` and `auth_patterns`\nattributes in `python_repository` (and by extension,\n`python_register_toolchains`). This allows consuming projects to fetch\ncustom Python toolchain binaries from a private/authenticated HTTP host\nwhen specified directly by URL in `python_register_toolchains`.\n\nThe implementation proposed here mirrors that of `http_archive`:\nhttps://github.com/bazelbuild/bazel/blob/1cf392ff3918386858b8c038f82c013b1e04be98/tools/build_defs/repo/http.bzl#L116\n\nFixes #1215."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101efac254a19ac28f573",
    "number": 1416,
    "body": "This is to eventually allow py_proto_library to use toolchain resolution for getting\r\nthe Python-specific protobuf information necessary to create protos.\r\n\r\nDesign doc: https://docs.google.com/document/d/1CE6wJHNfKbUPBr7-mmk_0Yo3a4TaqcTPE0OWNuQkhPs/edit#heading=h.5mcn15i0e1ch",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: create toolchain type for py_proto_library (#1416)\n\nThis is to eventually allow py_proto_library to use toolchain resolution\nfor getting\nthe Python-specific protobuf information necessary to create protos.\n\nDesign doc:\nhttps://docs.google.com/document/d/1CE6wJHNfKbUPBr7-mmk_0Yo3a4TaqcTPE0OWNuQkhPs/edit#heading=h.5mcn15i0e1ch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f0ac254a19ac28f574",
    "number": 1415,
    "body": "`bazel.Runfiles` is a deprecated way to look up runfiles that can result in non-hermetic lookups. `github.com/bazelbuild/rules_go/go/runfiles` is the recommended package for this.\r\n\r\n",
    "head_branch": "fix-gazelle-runfiles",
    "is_a_fork": true,
    "comments": [
      "CC @linzhp ",
      "@f0rmiga i got yah. CI restarted",
      "Thanks. Richard had already restarted. We had the same problem. Waiting on @fmeum now.",
      "@fmeum CI seems not happy. Thanks for the PR!",
      "Fixed by updating the dep on Gazelle.",
      "@fmeum thanks.",
      "FYI https://github.com/bazelbuild/bazel-gazelle/pull/1632, which will be in the next gazelle version, may help fix some further edge cases that so far I haven't been able to reproduce (https://bazelbuild.slack.com/archives/C01HMGN77Q8/p1694513237374049)."
    ],
    "commit_messages": [
      "fix: gazelle: Fix non-hermetic runfiles lookup (#1415)\n\n`bazel.Runfiles` is a deprecated way to look up runfiles that can result\nin non-hermetic lookups. `github.com/bazelbuild/rules_go/go/runfiles` is\nthe recommended package for this."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f0ac254a19ac28f575",
    "number": 1414,
    "body": "Towards #1396, defaults will be bumped in a separate PR.\n",
    "head_branch": "feat/1396/add-extra-pythons",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add new Python toolchain versions (#1414)\n\nTowards #1396, defaults will be bumped in a separate PR."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f1ac254a19ac28f576",
    "number": 1413,
    "body": "This patch changes the name of the rule to reflect the fact that it's\r\nnot exactly the same as the one in rules_pycross.\r\n\r\nI also took this opportunity to delete the superfluous\r\n`namespace_pkgs.py` library (plus test) since we have a nearly\r\nidentical version already in the main repo.\r\n\r\nI added a test to validate that the rule functions at a basic level.\r\n\r\nReferences: #1360",
    "head_branch": "make-py-wheel-library-work",
    "is_a_fork": true,
    "comments": [
      "> Should this be still under `third_party/rules_pycross` or should it be moved to `python/private/pycross` or similar?\r\n\r\nUntil Jeremy moves it, it has to stay in `third_party`. See #1360 for more details."
    ],
    "commit_messages": [
      "pycross: Rename `pycross_wheel_library` and make it work (#1413)\n\nThis patch changes the name of the rule to reflect the fact that it's\nnot exactly the same as the one in rules_pycross.\n\nI also took this opportunity to delete the superfluous\n`namespace_pkgs.py` library (plus test) since we have a nearly\nidentical version already in the main repo.\n\nI added a test to validate that the rule functions at a basic level.\n\nReferences: #1360"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f2ac254a19ac28f577",
    "number": 1412,
    "body": "This makes the version-aware transition rule compatible with an upcoming Bazel change that\r\ndisallows setting unknown attributes to None (the `distribs` attribute, in this case).\r\n\r\nThe `distribs` attribute was common to all rules, but it has been long deprecated and\r\nit won't be part of every rule in upcoming Bazel versions. The previous implementation\r\nresulted in setting `distribs = None` on the target. Bazel won't support setting\r\nundefined attributes to None.\r\n\r\nAddresses: https://github.com/bazelbuild/bazel/issues/19403\r\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "I'm assuming this means, in Bazel at head, that the `distribs` attribute is no longer part of the common attributes every rule has?"
    ],
    "commit_messages": [
      "fix: don't set distribs in version transitioning rule (#1412)\n\nThis makes the version-aware transition rule compatible with an upcoming\nBazel change that\ndisallows setting unknown attributes to None (the `distribs` attribute,\nin this case).\n\nThe `distribs` attribute was common to all rules, but it has been long\ndeprecated and\nit won't be part of every rule in upcoming Bazel versions. The previous\nimplementation\nresulted in setting `distribs = None` on the target. Bazel won't support\nsetting\nundefined attributes to None.\n\nAddresses: https://github.com/bazelbuild/bazel/issues/19403\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f3ac254a19ac28f578",
    "number": 1410,
    "body": "This makes rules_python's usage of Go work with upcoming Bazel versions. The\r\n`_whitelist_function_transition` attribute in the Go rules is being removed, per\r\nhttps://github.com/bazelbuild/bazel/issues/19493. Newer Go rule releases are compatible\r\nwith the upcoming Bazel versions.\r\n\r\nFixes : [1409](https://github.com/bazelbuild/rules_python/issues/1409)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Hi @rickeylev, Thanks for suggestions. I have added it above. "
    ],
    "commit_messages": [
      "fix(gazelle): upgrade rules_go: 0.39.1 -> 0.41.0 to work with upcoming Bazel versions (#1410)\n\nThis makes rules_python's usage of Go work with upcoming Bazel versions.\nThe\n`_whitelist_function_transition` attribute in the Go rules is being\nremoved, per\nhttps://github.com/bazelbuild/bazel/issues/19493. Newer Go rule releases\nare compatible\nwith the upcoming Bazel versions.\n\nFixes : [1409](https://github.com/bazelbuild/rules_python/issues/1409)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f4ac254a19ac28f579",
    "number": 1408,
    "body": "Fix typo in comment.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1408/checks?check_run_id=16697744619) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."
    ],
    "commit_messages": [
      "docs: Fix typo in comment (#1408)\n\nFix typo in comment.\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f4ac254a19ac28f57a",
    "number": 1407,
    "body": "If the python version is explicitly provided by the root module, they should not be warned for choosing the same version that rules_python provides as default.",
    "head_branch": "warning",
    "is_a_fork": true,
    "comments": [
      "@matts1, in order to better understand the behaviour, could you please post a snippet of a `MODULE.bazel` file that prints the warning, that with your PR would disappear?",
      "This is the relevant part of the file.\r\n```\r\npython = use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")\r\npython.toolchain(\r\n    is_default = True,\r\n    python_version = \"3.11\",\r\n)\r\n```\r\n\r\nSince rules_python declares the same version [here](https://github.com/bazelbuild/rules_python/blob/main/MODULE.bazel#L40-L48), it gives out a warning.",
      "I was confused about it and it seems that our examples have\r\n```\r\n    configure_coverage_tool = True,\r\n```\r\n\r\nand it means that the warning is not triggered because by default `rules_python` configures the toolchains without coverage.\r\n\r\nIf I add\r\n```\r\npython.toolchain(\r\n    python_version = \"3.11\",\r\n)\r\n```\r\nthen the warning is generated on `main`, but not with this patch.\r\n\r\nI'd be in favor of merging this patch as it seems weird that `rules_python` would raise a warning when the user passes `3.11` but not when `3.11.1` is passed.",
      "Yes, this is fine. It's expected that rules_python be overridden by the root module; we shouldn't warn when people do so."
    ],
    "commit_messages": [
      "fix: Skip printing unneccesary warning. (#1407)\n\nIf the python version is explicitly provided by the root module, they\nshould not be warned for choosing the same version that rules_python\nprovides as default."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f5ac254a19ac28f57b",
    "number": 1406,
    "body": "When the `proto_library` has `strip_import_prefix`, the py files from proto are generated into a directory like `bazel-bin/tests/py_proto_library/proto/_virtual_imports` and symlinked in the runfiles as `<runfilesroot>/<workspace name>/tests/py_proto_library/proto/_virtual_imports`.\r\nWe need to add `<workspace name>/tests/py_proto_library/proto/_virtual_imports` to the `imports` of `_PyProtoInfo`, so it will be appended to `PYTHONPATH`.\r\n\r\nModified an existing example to demonstrate the scenario and verify the fix.\r\n",
    "head_branch": "proto",
    "is_a_fork": true,
    "comments": [
      "Could you also please a line in the `CHANGELOG.md`?"
    ],
    "commit_messages": [
      "fix: allowing to import code generated from proto with strip_import_prefix (#1406)\n\nWhen the `proto_library` has `strip_import_prefix`, the py files from\nproto are generated into a directory like\n`bazel-bin/tests/py_proto_library/proto/_virtual_imports` and symlinked\nin the runfiles as `<runfilesroot>/<workspace\nname>/tests/py_proto_library/proto/_virtual_imports`.\nWe need to add `<workspace\nname>/tests/py_proto_library/proto/_virtual_imports` to the `imports` of\n`_PyProtoInfo`, so it will be appended to `PYTHONPATH`.\n\nModified an existing example to demonstrate the scenario and verify the\nfix.\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f6ac254a19ac28f57c",
    "number": 1403,
    "body": "This patch imports a few files from jvolkman/rules_pycross at\r\n757033ff8afeb5f7090b1320759f6f03d9c4615c.\r\n\r\nI would like to re-use this rule for the `pypi_install` repo rule that\r\nI'm working on. This rule extracts a downloaded wheel and generates an\r\nappropriate `PyInfo` provider for it.\r\n\r\nAll the .pyfiles are taken as-is without modification. I had to run buildifier\r\non all the bazel-related files. As per bazelbuild/rules_python#1360, that\r\nmeant that I had to add copyright headers.\r\n\r\nA followup patch will make tweaks so that the code can be used from\r\nwithin rules_python.\r\n\r\nReferences: #1360",
    "head_branch": "import-py-wheel-library",
    "is_a_fork": true,
    "comments": [
      "CC @jvolkman ",
      "Sorry @rickeylev , I realized that it's been a while since I've read your #1360 guidelines. Will clean up this PR and ping you afterwards. Sorry about the noise. ",
      "Not sure what to do about that Windows CI failure. Seems unrelated.",
      "Yeah, the windows failure is a flake. I hit retry."
    ],
    "commit_messages": [
      "Import pycross_wheel_library (#1403)\n\nThis patch imports a few files from jvolkman/rules_pycross at\n757033ff8afeb5f7090b1320759f6f03d9c4615c.\n\nI would like to re-use this rule for the `pypi_install` repo rule that\nI'm working on. This rule extracts a downloaded wheel and generates an\nappropriate `PyInfo` provider for it.\n\nAll the .pyfiles are taken as-is without modification. I had to run\nbuildifier\non all the bazel-related files. As per bazelbuild/rules_python#1360,\nthat\nmeant that I had to add copyright headers.\n\nA followup patch will make tweaks so that the code can be used from\nwithin rules_python.\n\nReferences: #1360"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f7ac254a19ac28f57d",
    "number": 1402,
    "body": "I'm working on adding a new pip package download rule to the repo\r\ncalled `pypi_install`. For that, I set up a new\r\n`examples/pypi_install` directory. When I imported `rules_python` via\r\na `local_repository`, however, the build complained about missing\r\nfiles. This patch aims to fix that issue by making the missing files\r\navailable.\r\n\r\nI tried copying the other `distribution` targets when creating this\r\none.",
    "head_branch": "add-missing-distribution-target",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: add missing `//python/config_settings/private:distribution` target (#1402)\n\nI'm working on adding a new pip package download rule to the repo\ncalled `pypi_install`. For that, I set up a new\n`examples/pypi_install` directory. When I imported `rules_python` via\na `local_repository`, however, the build complained about missing\nfiles. This patch aims to fix that issue by making the missing files\navailable.\n\nI tried copying the other `distribution` targets when creating this\none."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f8ac254a19ac28f57e",
    "number": 1400,
    "body": "Put the `PYTHONPATH` entries used in wheel building as a default value to a\nprivate attribute of the `whl_library` repository rule and use resolved path of\nthe interpreter target in creating execution environment to avoid repository\nrule restarts when fetching external dependencies.\n\nThe extra private attribute on the `whl_library` removes all but one restart\nand the extra refactor removes the last restart observed when running, which\nalso reduces the total execution time from around 50s to 43s on my machine:\n```console\n$ cd examples/bzlmod\n$ bazel clean --expunge --async && bazel build //entry_points:yamllint\n```\n\nFixes #1399\n",
    "head_branch": "fix/1399/whl-library-restarts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(whl_library): avoid unnecessary repository rule restarts (#1400)\n\nPut the `PYTHONPATH` entries used in wheel building as a default value\nto a\nprivate attribute of the `whl_library` repository rule and use resolved\npath of\nthe interpreter target in creating execution environment to avoid\nrepository\nrule restarts when fetching external dependencies.\n\nThe extra private attribute on the `whl_library` removes all but one\nrestart\nand the extra refactor removes the last restart observed when running,\nwhich\nalso reduces the total execution time from around 50s to 43s on my\nmachine:\n```console\n$ cd examples/bzlmod\n$ bazel clean --expunge --async && bazel build //entry_points:yamllint\n```\n\nFixes #1399"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f8ac254a19ac28f57f",
    "number": 1398,
    "body": "fixes #1150\r\nfixes #1323\r\n\r\nyou can no longer pre-define the name of the target by creating an empty `py_library` (see 3c84655). I don't think this was being used and it's straightforward to rename the generated per-project or per-package target if you want",
    "head_branch": "per-file",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1398/checks?check_run_id=16438041305) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "LGTM in general, but would love to get opinions on naming convention I mentioned in https://github.com/bazelbuild/rules_python/pull/1398#discussion_r1319400495. Maybe it should be supported to customize the naming convention for the `__init__.py` libraries using the naming convention gazelle direction directive?",
      "@f0rmiga or @rickeylev, could you please take a look?"
    ],
    "commit_messages": [
      "feat: generate py_library per file (#1398)\n\nfixes #1150\nfixes #1323\n\nyou can no longer pre-define the name of the target by creating an empty\n`py_library` (see 3c84655). I don't think this was being used and it's\nstraightforward to rename the generated per-project or per-package\ntarget if you want"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101f9ac254a19ac28f580",
    "number": 1397,
    "body": "Older versions of certifi allow for revoked HTTPS certificates. This\nchange updates usages of certifi to the first known-good version.\n\nSee https://security.snyk.io/vuln/SNYK-PYTHON-CERTIFI-5805047 and https://nvd.nist.gov/vuln/detail/CVE-2023-37920\n",
    "head_branch": "update-requirements",
    "is_a_fork": true,
    "comments": [
      "Can someone help me understand what's wrong with the Windows Bazel integration test? It's passing on *nix but not Windows, and I only have access to a Debian machine :(",
      "Chris and I tried to debug what was going on with Windows, but neither of us has a Windows machine, so it was slow going. We're still not entirely sure what's going on.\r\n\r\nOn the surface, the error is the requirements diff test failing on Windows. That isn't too unexpected (locked files are somewhat platform specific). However, the diff is about the certifi version (it wants 2021, while it gets 2023), which is exactly what is being changed. Ok, a bit weird, but whatever, lets just use `requirements_windows` and create windows-specific requirements file.\r\n\r\nSo Chris copy/pasted the locked requirements the tests wants into requirements_windows.txt. This then fails because `@pip_parsed_wheel` doesn't exist. Why? Because requirements_windows.txt doesn't have the `wheel` entry. Which is weird because `wheel` is specified in requirements.in.\r\n\r\nSo I'm not really sure what's going on. It almost seems like windows is ignoring requirements.in? Or partially ignoring it?\r\n\r\nIn any case, I'm in favor of just disabling the requirements_test diff checking for Windows. I'm pretty sure this isn't the first time Windows has given weird/incorrect behavior like this.",
      "I'll wait for whatever consensus y'all need to have the test disabled on Windows. Then just tell me what to do and I'll update the PR.",
      "I'll try push what I think is a fix to your branch. I think you've updated the wrong file. The repo is a bit of a mess, but I think the file you need to change is: `tests/pip_repository_entry_points/requirements_windows.txt`"
    ],
    "commit_messages": [
      "refactor: upgrade certifi (#1397)\n\nOlder versions of certifi allow for revoked HTTPS certificates. This\nchange updates usages of certifi to the first known-good version.\n\nSee https://security.snyk.io/vuln/SNYK-PYTHON-CERTIFI-5805047 and\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-37920\n\n---------\n\nCo-authored-by: Greg <groodt@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101faac254a19ac28f581",
    "number": 1395,
    "body": "Before this PR we would generate extra `alias` repos and the extra `hub` repo\r\nfor the `entry_point` macro usage. This PR removes the extras and delegates the\r\ncreation of version-aware aliases to the `render_pkg_aliases` internal\r\nfunction. This reduces the number of repositories created by the `pip.parse`\r\nextension.\r\n\r\nFixes #1255.\r\n\r\nBREAKING CHANGE:\r\n\r\nNote that this only affects bzlmod support, which is still beta.\r\n\r\n* Bzlmod `pip.parse` no longer generates `{hub_name}_{py_version}` hub repos.\r\n* Bzlmod `pip.parse` no longer generates `{hub_name}_{distribution}` hub repos.\r\n\r\nThese repos aren't part of a public API, but were typically used for the `entry_point`\r\nmacros. Instead, use `py_console_script_binary`, which is the supported replacement\r\nfor entry points under bzlmod. Directly referencing the underlying distribution\r\nrepos remains unsupported.",
    "head_branch": "refactor/1255/bzlmod-refactor",
    "is_a_fork": true,
    "comments": [
      "@rickeylev or @chrislovecnm, could you please take a look?",
      "Depends on #1423.\n"
    ],
    "commit_messages": [
      "refactor(bzlmod)!: simplify pip.parse repository layout (#1395)\n\nBefore this PR we would generate extra `alias` repos and the extra `hub`\nrepo\nfor the `entry_point` macro usage. This PR removes the extras and\ndelegates the\ncreation of version-aware aliases to the `render_pkg_aliases` internal\nfunction. This reduces the number of repositories created by the\n`pip.parse`\nextension.\n\nFixes #1255.\n\nBREAKING CHANGE:\n\nNote that this only affects bzlmod support, which is still beta.\n\n* Bzlmod `pip.parse` no longer generates `{hub_name}_{py_version}` hub\nrepos.\n* Bzlmod `pip.parse` no longer generates `{hub_name}_{distribution}` hub\nrepos.\n\nThese repos aren't part of a public API, but were typically used for the\n`entry_point`\nmacros. Instead, use `py_console_script_binary`, which is the supported\nreplacement\nfor entry points under bzlmod. Directly referencing the underlying\ndistribution\nrepos remains unsupported."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101fbac254a19ac28f582",
    "number": 1393,
    "body": "Before that the users had to rely on patching the actual wheel files and\r\nuploading them as different versions to internal artifact stores if they\r\nneeded to modify the wheel dependencies. This is very common when\r\nbreaking dependency cycles in `pytorch` or `apache-airflow` packages.\r\nWith this feature we can support patching external PyPI dependencies via\r\npip.override tag class to fix package dependencies and/or a broken\r\n`RECORD` metadata file.\r\n\r\nOverall design:\r\n* Split the `whl_installer` CLI into two parts - downloading and extracting.\r\n  Merged in #1487.\r\n* Add a starlark function which extracts the downloaded wheel applies patches\r\n  and repackages a wheel (so that the extraction part works as before).\r\n* Add a `override` tag_class to the `pip` extension and allow users to pass patches\r\n  to be applied to specific wheel files.\r\n* Only the root module is allowed to apply patches. This is to avoid far away modules\r\n  modifying the code of other modules and conflicts between modules and their patches.\r\n\r\nPatches have to be in `unified-diff` format.\r\n\r\nRelated #1076, #1166, #1120",
    "head_branch": "feat/1076/pip-parse-patch",
    "is_a_fork": true,
    "comments": [
      "NOTE: This PR is to initiate the discussion of how the API for patching `whl_library` could look like. Tests and better examples with real patches could follow later if the direction is agreed upon.\n\n@groodt, @rickeylev, could you please take a look?\n",
      "So I decided to not use the `annotation` API in `bzlmod` to make it better and more similar to how `bazel-gazelle` does it. This obviously is still missing tests and hardening, but I wanted to see how the `examples/bzlmod/MODULE.bazel` would look with this.\n\nI am looking for feedback about which option would be better. @fmeum could you also please chime in on designing this extension/API here?\n\n* Using the old `package_annotations` API to pass in patches from the outside looks like [this](https://github.com/bazelbuild/rules_python/blob/f622695ab85546781e9c2a626d78547b08bb1aa3/examples/bzlmod/MODULE.bazel).\n  * Drawbacks:\n    * The user has to supply patches as an argument to each `pip.parse` extension call they would do.\n    * We need to serialize the patches to JSON as we cannot route the labels to the `whl_library`.\n  * Benefits:\n    * We reuse the same API\n* Using a new `pip.module_override` API to pass in patches from the outside looks like [this](https://github.com/bazelbuild/rules_python/blob/ac1d5ced1c1d4f604f867ab2b8d51f3036b00e12/examples/bzlmod/MODULE.bazel).\n  * Drawbacks:\n    * A new API that has to be documented and designed.\n  * Benefits:\n    * With a single call we can make overrides for any combination of `{all python version,a single version}` and `{all hub repos,a single hub repo}`.\n    * We can add further validations that only the root module is calling.\n    * We don't need a call to `use_repo(pip, \"whl_mods\")` because we aren't generating any extra files.\n    * We can potentially pass patch files as labels from an external repo if needed.\n",
      "I don't know much about Python, but the `pip.module_override` API sounds much nicer to me!\n\n Is `module` the correct term here or should this rather be called `wheel_override`?",
      "I've not had time to look in depth, but the unified diff format patch files is a similar UX to what I've been advocating for and similar to what we use at my $dayjob. They're far more flexible and likely to support more use-cases with well understood semantics than a series of custom annotations for every indepent use-case like we've been doing in the past. \r\n\r\nAre you applying the patches before or after wheels are unpacked / installed?",
      "@groodt, thanks for the comment, the patches are applied after the wheels are unpacked so that we can also patch the BUILD.bazel files. Do you think doing the patching before unpacking would make more sense?",
      "It can be nice to apply the patch before install time in case you are modifying the setup.py",
      "There’s generally benefit to being able to patch the following:\r\n1. bdist contents (wheels)\r\n2. sdist contents (tarballs of source)\r\n3. The third-party dependency closure itself (optional)\r\n4. The generated BUILD.bazel files (optional)\r\n\r\nIf there is a capability to patch as early as possible, then there’s almost no need for option 3 and 4, because if one is able to modify all source and metadata from the foreign artifacts, then one is able to influence the structure of the dependency closure and generated BUILD files as well (albeit a little awkwardly).\r\n\r\nAt $dayjob, we optimise for patching the wheels, because most of the ecosystem distributes wheels (and it’s easy enough to populate a private wheel repository where required).\r\n\r\nI personally would prefer to patch earlier, but maybe we need a lifecycle of patching? Sounds complicated though. Patches for pre-install and post-install of the artifacts? I know what my preference is, but would love to hear opinions. \r\n\r\nAnd then maybe this is slightly controversial. For BUILD files, I would prefer the semantics of http_archive. I would prefer to specify “build_file” or “build_file_content” to fully replace the generated default. Hear me out. 😂 The defaults should be simpler and often work well enough so that it’s rare to swap them out. Also, with the capability to patch the foreign artifacts, it’s also possible to influence the generated BUILD.bazel. So, in a world where we simplify and remove a lot of the code generated in repository rules (move the convenience items to user land), we often won’t need to patch BUILD.bazel files. I think having to reason about patching generated code is just too complicated otherwise. \r\n\r\nThoughts?\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "My thinking is:\r\n1. `bdist` Patching this would be ideal, but we would have to refactor the `wheel_installer.py` and its usage heavily, but maybe it is worth it.\r\n2. `sdist` Patching would be good, but we would have to refactor the call of `pip wheel` which fetches `sdist` and builds it to become a separate call to fetch `sdist`, extract it, patch it and then build it. This is quite involved and I would love to keep it out of `rules_python` until there is a better, more hermetic way to build from `sdist`. People can always build `sdist` themselves and upload the wheel somewhere and we are back to `1.`.\r\n3. Dependency closure itself should be managed via `unified` diffs, however, this could also handle a case where you decide to use `bazel` to build from `sdist` and need to do some dependency rewiring.\r\n4. Generated `BUILD.bazel` files might need to be patched to expose extra things, e.g. `numpy` headers, which is used by `pytorch` if I remember correctly. Right now they can use `package_annotations` for this and supply `additional_content`.\r\n\r\nI agree that having `1.` and `3.` would be ideal, but right now the PR implements only `3.` because of the complexity involved in getting `1.` to work. I think you have hinted a great name for a possible API:\r\n```\r\n# extract the `whl`, modify it's contents and regenerate the `RECORD` metadata file and zip everything back together\r\npip.whl_override(\r\n    hub_name = \"pip\",\r\n    patch_strip = 1,\r\n    patches = [\r\n        \"@//patches:METADATA.patch\", # patching dependencies\r\n    ],\r\n    python_version = \"3.10\",\r\n    whl_name = \"requests\",\r\n    # extra parameters that may help us match the wheel filename, defaults could be:\r\n    # not sure about the API here yet...\r\n    # platform = \"*\",\r\n)\r\n\r\n# modify BUILD.bazel contents and the extracted `whl`\r\npip.whl_library_override(\r\n    hub_name = \"pip\",\r\n    patch_strip = 1,\r\n    patches = [\r\n        \"@//patches:empty.patch\",\r\n        \"@//patches:requests.patch\",\r\n    ],\r\n    python_version = \"3.10\",\r\n    whl_name = \"requests\",\r\n)\r\n```\r\n\r\nFor `bdist_patching` I am thinking that we could employ the `hack` outlined in https://github.com/pytorch/pytorch/issues/99622#issuecomment-1604812054. This could be scripted and could be compatible with the work that @philsc  is doing as hinted by #1403.",
      "Ready for initial review. Thanks @groodt for the initial comments on the API. I think the current state of the PR which provides bdist patching and whl_library patching is enough to cover most of the needs of modifying things. However, there are a few things that I am not sure about so am looking forward to comments on the API of pip.whl_override tag class.",
      "My main concern is ending up having 5 different apis to do patching:\r\n 1. pip.whl_mods (exists today; note that the whl_mods API implements \"annotations\", but was also loosely designed to support arbitrary patch files; I'm not suggesting to continue the a-special-arg-for-each-use-case pattern)\r\n 2. pip.whl_override (this pr)\r\n 3. pip.whl_library_override (this pr)\r\n 4. Another API to patch the extracted bdist/sdist (what Greg wants)\r\n 5. Two more patch APIs as part of Phillip's work (one to patch dependencies, another to patch the possible downloaded files from http_file)\r\n\r\nAlso, part of the goal with pip.whl_mods was to have less configuration directly in the MODULE file and move it to a separate file (hence the json config file). The rationale was two fold:\r\n1. Large MODULE files are difficult to manage (modules can't be decomposed into smaller units like a bzl/BUILD file can)\r\n2. API changes to module_extensions are very painful, and the MODULE language and capabilities is purposefully limited. So I'd like to minimize that API footprint. For example, figuring out what patch should apply requires matching some set of the (python version, library version, library name, \"life cycle phase\"?, etc) to a patch file, which doesn't have a concise expression in MODULE-language.\r\n\r\n\r\nre: naming:\r\n* -1 on the \"override\" name -- override implies replacing, while patching is a more selective action.\r\n* I agree \"module\" is an overloaded and ambiguous term in this context, so lets avoid that. \r\n\r\n> maybe we need a lifecycle of patching? Sounds complicated though\r\n\r\nI think so, at least for discussion purposes. It'd certainly help me with constructing a mental model of when patches could be applied, which might make it easier to figure out how to express \"apply patch P to X if Y\". I think the 4-point list and the \"5 apis\" captures most cases? I think a missing case is patching the \"alias\" repo that glues together the platform-specific repos (e.g. if you patch numpy bdists to expose headers, you have to patch the alias repo to expose the platform-specific build targets)\r\n\r\n\r\n",
      "So the last implementation that we have here was modelled after `bazel-gazelle` where they have 3 types of `override` tag classes which allows to override different parts of the dependency closure (e.g. the source of the package, applying patches to the package, etc) and I have found that having a `tag_class` per one things makes the API more maintainable because the API definition becomes much simpler.\r\n\r\nIn my limited experience with the `whl_mods` `tag_classe` I have the following observations:\r\n1. The user needs to repeat a lot of things - they first create a modification, then they need to pass that modification to the `pip.parse` rule and the size of the `MODULE.bazel` thus increases unless we use list comprehensions and/or define static variables which decreases the readability.\r\n2. The API that would accept a list of patches should ideally accept it as a `attr.label_list`, but when we do `str(label)` and then serialize to JSON in the `whl_mods` and then deserialize it in the context of `whl_library` repository rule execution the semantic of what that label points to may be lost due to repository remapping. The `rules_python` repo does not have access to the `_main` repository files and when you try to pass in such a label to the `repository_ctx.patch` function it fails with an error that `the file could not be found`, which means that the patch file has to live in a place accessible to `rules_python` and the only way I could think of to do it was to read the patch file via `module_ctx.read` in the `whl_mods` extension, put the contents of the patch to the `annotation.json` and then create the file just before using it in `repository_ctx.patch`. This extra indirection was not great in terms of maintainability.\r\n3. The fact that as a user I need to `use_repo(whl_mods)` just to pass some patch file labels to the `whl_library` looks like an API design smell.\r\n\r\nI agree with the sentiment that large `MODULE.bazel` files are hard to maintain, but I do think that having a JSON file that does not have a concept of a `Label` which we can pass around may be even harder due to the repo mapping in `bzlmod`, but maybe I have the wrong picture here.\r\n\r\nRegarding naming - I am open to change the `_override` to something better, but I just took the same names as `bazel-gazelle` uses for now.\r\n\r\nRegarding `apply patch P to X if Y`, this is something that I found it would be good to have, but the combinatorial explosion may be an annoying thing here. We may need to have for each set of patches something like:\r\n```\r\npip.whl_patch(\r\n    hub_name = \"pip\", # if Y: hub_name\r\n    version = \"3.10\", # if Y: python version\r\n    platform = \"manylinux_2014\", # if Y: platform\r\n    patches = [\"@//:foo.patch\"],\r\n    strip = 1,\r\n    apply_to = \"bdist\" # if Y: one of [bdist, sdist, library]\r\n)\r\n```\r\n\r\nHowever, I am wondering if this is better than having multiple tag classes, where we are solving the polymorphism of applying patches not via function parameters but via different `tag_classes` instead.\r\n\r\nI guess the interesting part here is that creating patches should be reasonably easy in order to make the API useful and I am not sure yet how we could achieve that.",
      "The `foo_override` name pattern in Gazelle is directly borrowed from Bazel itself and its `archive_override`, `git_override`, `single_version_override`, ... All of those are named such that `foo_override` overrides a thing (in this case Bazel modules) with a \"foo\", which is a convention I tried to follow in Gazelle. \r\n\r\nRegarding managing large MODULE.bazel files, please assume a solution to https://github.com/bazelbuild/bazel/issues/17880 and design with that in mind. Whatever the result is, it will be here to stay and basing it on non-Starlark helper files will haunt us (JSON doesn't have comments, requires separate formatting, etc.). I am pretty sure that we can resolve that issue quickly if needed, so please comment on it with your requirements.\r\n\r\nCC @Wyverald ",
      "You make some fair points @aignas. It sounds like we're all facing about the same direction, at least :).\r\n\r\n> So the last implementation that we have here was modelled after bazel-gazelle\r\n\r\nCan you link me to an example? I briefly looked at bazel-gazelle, but didn't see an example, and digging through the source wasn't produtive.\r\n\r\n> Regarding apply patch P to X if Y, ... the combinatorial explosion may be an annoying thing here.\r\n\r\nYeah, totally agree; this is the crux of the issue.\r\n\r\nThe `pip.whl_patch()` thing you proposed looks like it has some promise.\r\n\r\nMaybe `pip.patch()` or `pip.patch_<step>`? After all, we're patching the pip integration in general, not necessarily wheels. There's a bug/FR that requires being able to patch the \"alias\" build files, for example.\r\n\r\nI'm pretty mixed about tag-class-per-step vs arg-per-step. As a user, I think, \"I want to patch numpy\", not \"I want to patch the generate build file step\". The latter assumes I know the internals and already know what part I need to modify, which seems unlikely. Similarly, patching a package might cross multiple steps -- having that split up between different tag classes seems a chore (my immediate thought is: \"i need to go comment out a mishmash of lines\" vs \"here's a single contiguous block of numpy stuff\"). This makes me prefer e.g. `pip.patch(package=\"numpy\", ...)`.\r\n\r\nAlso: Part of the design goal of `pip.parse(whl_modifications=...)` was to make it clear and explicit what patches a particular pip.parse() is having applied to it, hence why `pip.parse()` has the `whl_modifications` arg. Otherwise, you have to look through the whole MODULE config to identify what is being applied. With the mapping between patch files and when/what they're applied to being non-trival, this seems important. The pip hub namespacing issues also complicates this: Another module could call e.g. `pip.do_patch(hub_name = \"yourhubname\")`, and now you're getting a patch from some dependency, much to your surprise.\r\n\r\nStepping back, if we can make the mapping trivial, then maybe a lot of this goes away. I have trouble seeing how to do that, though. For example, in conversations with Greg and Phillip, they want to have distribution-level granularity of patches (i.e. the specific `foo-1.0-cp10-abi3-linux_x86.whl` file), which basically equates to having an arg for each portion of the wheel file name format, and probably some way to express ranges or multiple values -- it starts to feel like a requirements.txt level of constraints expression (\"foo =>1.0 !=1.2 <4.1; python_version>3.10\" etc).\r\n\r\n> In my limited experience with the whl_mods tag_classe I have the following observations:\r\n\r\nSorry, I should clarify and correct what I said. I thought `pip.whl_mods()` processed config files, but that's actually done by `pip.parse(whl_modifications=...)`. That's the part of interest. `pip.whl_mods` is a way to generate a \"modifications to make\" config file, and is largely just to provide a migration path for pip_parse annotations for bzlmod.\r\n\r\nThe `whl_modifications` dict is a mapping of a file to the package the file applies to. I purposefully say the vague term \"file\" because we can decide what that file is and how it's interpreted.\r\n\r\nThe general idea is something like:\r\n\r\n```\r\n# MODULE.bazel\r\npip.parse(\r\n  hub_name = \"mypip\",\r\n  whl_modifications = {\r\n    \"@//patches/numpy:patches.json\": \"numpy\",\r\n  }\r\n)\r\n\r\n# File patches/numpy/patches.json\r\n{\r\n  \"patches\": [\r\n    {\"patch\": \"//patches/numpy:expose_headers_linux.patch\",\r\n     \"version\": \"==1.0\", \"platform_matches\": \"linux*\"},\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\nAnd then the module or repo processes the `patches.json` file.\r\n\r\nWhether you have 1 patch or 100, your MODULE file is about the same size. In the above scheme, it grows about linearly with the number of patched packages, but it'd be easy to modify it to do e.g. `whl_modifications = {\"@//patches:all_patches.json\": \"*\"}` or some-such.\r\n\r\n> Issues with resolving labels\r\n\r\nHow much of a problem is this in practice, though? My thinking is, given `whl_modification = {\"@something//:patches.json\": \"...\"}`, we have the mapping of what `@something` refers to. It seems reasonable to say that patches the config file reference must be within the config file's repo, or don't use label-notation and say the paths are relative to the config file.\r\n\r\n(on a side note, this makes me wonder if Philip's proposed way to express patching would run into this same issue under bzlmod)",
      "> please assume a solution to https://github.com/bazelbuild/bazel/issues/17880 and design with that in mind.\r\n\r\nOh, that would obviate much of my concern!",
      "Gazelle code is [here](https://github.com/bazelbuild/bazel-gazelle/blob/master/internal/bzlmod/go_deps.bzl#L214) and it is important to note that they also have a list of default overrides that are applied by default [here](https://github.com/bazelbuild/bazel-gazelle/blob/master/internal/bzlmod/default_gazelle_overrides.bzl).\r\n\r\nI personally wonder if instead of asking all of the `airflow 2.6` users to patch the wheels themselves to remove the dependency we should potentially have a similar file that allows us to do this for them. Similar with pytorch/triton circular dependency, or even the numpy headers. Just by default exposing headers for numpy in both, aliases and others would make the usability of `rules_python` better out of the box. However, that is a big scope creep in terms of responsibilities of the project. And we should discuss this topic outside the PR and the related ticket.\r\n\r\nAs for the rest of your comment, I'll try to come up with a set of proposals and potentially document them as a Markdown file in this PR, so that we can discuss in the PR as review comments.",
      "Ignas and I met to discuss design a bit. The highlights:\r\n\r\nStart with a whl-file level of specificity. This allows for the most fine-grained level of patching, something Greg, Phillip, and Ignas all agree is necessary. This also avoids having to figure out an API to conditionally match patches based on other criteria (e.g. platform, distribution, etc). The gist of the API is something like:\r\n\r\n```\r\npip.patch(\r\n    hub_name = \"mypip\",\r\n    file=\"triton-2.0-py3-cp39-manylinux_foo.whl\",\r\n    patches=[\"@//foo:my.patch\"],\r\n    ...\r\n)\r\n```\r\n\r\nI think this might even handle source distributions? You just use e.g. `foo-1.2.3.tar.gz` for the file name?\r\n\r\nThe downside of this API is you might have to repeat the same patch multiple times (e.g., once for each platform), which is a hassle if they're the same patch. This can be mitigated by using list-comprehensions in the MODULE file. Or maybe we change `file` to `files` and allow multiple files to be specified.\r\n\r\nWe decided to defer on how to specify the different \"steps\" of patching for now (tag class per step vs arg per step); we couldn't identify a technical argument that favors either.\r\n\r\nWe decided to defer on how to patch the generated build files (the distribution build file and alias build file). A combination of patching distributions and pip.whl_mods should, at the least, provide a work around, for now. At this point, I think the only thing blocking deprecating the annotations api in favor of a patching api is figuring out how to specify patches to the different steps of the pip process.\r\n\r\nIgnas also said he was going to try and include something to help generate patch files (the basic idea being to give the user two directories (the original and desired), so they can modify code and run diff between the dirs to generate patches).",
      "Marking this as a draft, because it still needs a little bit of cleanup.",
      "> distribution-level granularity of patches (i.e. the specific `foo-1.0-cp10-abi3-linux_x86.whl` file),\r\n\r\nFwiw, Im happy enough to have something boring and dumb where the patches just match string literals on the filename of the distribution. They don't need to be composed into multiple args necessarily. \r\n\r\nAnother small note: maybe we don't need a mechanism for `wheel` and for `sdist`. The general term for these things in python packaging ecosystem is \"distribution\". So you have a bdist/wheel (built distribution) and sdist (source distribution). You could perhaps provide a param that patches source or patches or wheel, or sniff it via the suffix which is either (.whl or .tar.gz or .zip)\r\n\r\n> I personally wonder if instead of asking all of the `airflow 2.6` users to patch the wheels themselves to remove the dependency we should potentially have a similar file that allows us to do this for them.\r\n\r\nWell yes, over time, we could provide a \"bazel-commons\" of common \"fixes\" patches and crowd source things for people. It also sounds like folks can just copy paste their patches into issues for folks to vendor so that we don't end up with a huge maintenance burden of random patches or be expected to author patches for very user of bazel.\r\n\r\n\r\n",
      "> At this point, I think the only thing blocking deprecating the annotations api in favor of a patching api is figuring out how to specify patches to the different steps of the pip process.\r\n\r\nMy preference is to copy the semantics we are all familiar with in bazel when patching things. i.e. see https://bazel.build/rules/lib/repo/http#attributes\r\n\r\nI would want to use:\r\n`build_file` and `build_file_content`\r\n\r\nIn general (over 90% of situations), the automatically generated file is completely fine. For the rare situations where I do need to patch the BUILD.bazel file, I'm *totally* happy with vendoring in a file with the necessary modifications. Maybe it's just me, but I'd prefer if the generated BUILD.bazel was a very simple `py_library` target with sensible defaults and also a `filegroup` with all the files. Now that we have an improved design for console_scripts, I would remove all the indirection and generation around `data_requirement`, `all_requirements` and annotations etc.\r\n\r\nDoesn't need to be for this feature of course. Lets land the patching of distributions first.",
      "OK, so apart from the `patch_whl.py` file needing extra tests, I am quite happy with the overall API that we have here. I thin we could reuse the `patch_whl` utility in #1436, because I am sure that we may need to have patching hardened and ensure that it works, so reusing the same tool may be interesting.\r\n\r\nThis is ready for review and I will add extra tests for the `patch_whl.py` later.",
      "Depends on #1453, #1487, #1488 but is good for a first review.",
      "Marking as draft because there are PRs that should be merged before this.",
      "General question: is there a way to expose / use the functionality of `pip.override()` for the non-bzlmod / WORKSPACE APIs of `rules_python`?",
      "@ph03 , this hack seems to work for me for now:\r\n```patch\r\ndiff --git a/python/private/pypi/requirements.bzl.tmpl.workspace b/python/private/pypi/requirements.bzl.tmpl.workspace\r\nindex 2f4bcd69..0d6c13a0 100644\r\n--- a/python/private/pypi/requirements.bzl.tmpl.workspace\r\n+++ b/python/private/pypi/requirements.bzl.tmpl.workspace\r\n@@ -35,7 +35,11 @@ def _get_annotation(requirement):\r\n     name = requirement.split(\" \")[0].split(\"=\")[0].split(\"[\")[0]\r\n     return _annotations.get(name)\r\n\r\n-def install_deps(**whl_library_kwargs):\r\n+def _get_patches(patch_spec, requirement):\r\n+    name = requirement.split(\" \")[0].split(\"=\")[0].split(\"[\")[0]\r\n+    return patch_spec.get(name)\r\n+\r\n+def install_deps(patch_spec = {}, **whl_library_kwargs):\r\n     \"\"\"Repository rule macro. Install dependencies from `pip_parse`.\r\n\r\n     Args:\r\n@@ -68,5 +72,6 @@ def install_deps(**whl_library_kwargs):\r\n             group_name = group_name,\r\n             group_deps = group_deps,\r\n             annotation = _get_annotation(requirement),\r\n+            whl_patches = _get_patches(patch_spec, requirement),\r\n             **whl_config\r\n         )\r\ndiff --git a/python/private/pypi/whl_library.bzl b/python/private/pypi/whl_library.bzl\r\nindex 77cbd4e2..98bacf2d 100644\r\n--- a/python/private/pypi/whl_library.bzl\r\n+++ b/python/private/pypi/whl_library.bzl\r\n@@ -308,8 +308,7 @@ def _whl_library_impl(rctx):\r\n         patches = {}\r\n         for patch_file, json_args in rctx.attr.whl_patches.items():\r\n             patch_dst = struct(**json.decode(json_args))\r\n-            if whl_path.basename in patch_dst.whls:\r\n-                patches[patch_file] = patch_dst.patch_strip\r\n+            patches[patch_file] = patch_dst.patch_strip\r\n\r\n         whl_path = patch_whl(\r\n             rctx,\r\n```\r\nThen in WORKSPACE it looks like so:\r\n```python\r\nload(\r\n    \"@pip_deps//:requirements.bzl\",\r\n    install_pip_deps = \"install_deps\",\r\n)\r\n\r\ninstall_pip_deps(\r\n    patch_spec =  {\r\n        \"matplotlib\": {\r\n            \"//third_party:python/matplotlib/init.patch\": {\r\n                \"patch_strip\": 1,\r\n            },\r\n        },\r\n        \"pygobject\": {\r\n            \"//third_party:python/pygobject/init.patch\": {\r\n                \"patch_strip\": 1,\r\n            },\r\n        }\r\n    }\r\n)\r\n```"
    ],
    "commit_messages": [
      "feat(bzlmod): support patching 'whl' distributions (#1393)\n\nBefore that the users had to rely on patching the actual wheel files and\nuploading them as different versions to internal artifact stores if they\nneeded to modify the wheel dependencies. This is very common when\nbreaking dependency cycles in `pytorch` or `apache-airflow` packages.\nWith this feature we can support patching external PyPI dependencies via\npip.override tag class to fix package dependencies and/or a broken\n`RECORD` metadata file.\n\nOverall design:\n* Split the `whl_installer` CLI into two parts - downloading and\nextracting.\n  Merged in #1487.\n* Add a starlark function which extracts the downloaded wheel applies\npatches\n  and repackages a wheel (so that the extraction part works as before).\n* Add a `override` tag_class to the `pip` extension and allow users to\npass patches\n  to be applied to specific wheel files.\n* Only the root module is allowed to apply patches. This is to avoid far\naway modules\nmodifying the code of other modules and conflicts between modules and\ntheir patches.\n\nPatches have to be in `unified-diff` format.\n\nRelated #1076, #1166, #1120"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101fcac254a19ac28f583",
    "number": 1392,
    "body": "Fixes https://github.com/bazelbuild/bazel-central-registry/pull/863.\r\n\r\nThe aspect email is no longer associated with the github user, so the CLA bot but doesn't\r\nthink think the CLA is signed. To fix, change the email the BCR PRs are published under\r\nto an address that is associated with the github user (and thus the CLA).",
    "head_branch": "f0rmiga/fix-email-releaser",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: bcr releaser email (#1392)\n\nFixes https://github.com/bazelbuild/bazel-central-registry/pull/863.\n\nThe aspect email is no longer associated with the github user, so the\nCLA bot but doesn't\nthink think the CLA is signed. To fix, change the email the BCR PRs are\npublished under\nto an address that is associated with the github user (and thus the\nCLA)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101fdac254a19ac28f584",
    "number": 1391,
    "body": "These patch level bumps were done in #1370 and are part of the 0.25.0 release.",
    "head_branch": "pyvers.changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "doc: Note Python version changes in CHANGELOG (#1391)\n\nThese patch level bumps were done in #1370 and are part of the 0.25.0\nrelease."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101fdac254a19ac28f585",
    "number": 1390,
    "body": "I'm not sure what happened, but the old image url doesn't work anymore.\r\n\r\nAlso links to the canonical build status page; the old postsubmit url simply\r\nredirects to the canonical url.",
    "head_branch": "build.badge",
    "is_a_fork": true,
    "comments": [
      "CI failed. I'm wondering if we have a problem with the test\r\n\r\nhttps://buildkite.com/bazel/rules-python-python/builds/5493#018a1f23-af2d-4943-b2db-3013e7c3391f",
      "That particular failure looks related to the CI setup -- it failed to download bazel. I posted on https://github.com/bazelbuild/continuous-integration/issues/1627 to mention it, which has some similar network issues mentioned."
    ],
    "commit_messages": [
      "docs: Use correct link to build badge image and build status page. (#1390)\n\nI'm not sure what happened, but the old image url doesn't work anymore.\n\nAlso links to the canonical build status page; the old postsubmit url\nsimply\nredirects to the canonical url."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101feac254a19ac28f586",
    "number": 1389,
    "body": "This is to prepare for the 0.25.0 release.\r\n",
    "head_branch": "changelog0.25.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update changelog for 0.25.0 (#1389)\n\nThis is to prepare for the 0.25.0 release."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662101ffac254a19ac28f587",
    "number": 1388,
    "body": "Newer Bazel versions default to not exporting files by default; this explicitly exports the file so it can be referenced.\r\n",
    "head_branch": "fake-header-export",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: Expose test's fake_header.h so py_cc_toolchain tests can use it. (#1388)\n\nNewer Bazel versions default to not exporting files by default; this\nexplicitly exports the file so it can be referenced."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210200ac254a19ac28f588",
    "number": 1387,
    "body": null,
    "head_branch": "story-record",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1387/checks?check_run_id=16117372618) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "sorry for the noise here! "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210201ac254a19ac28f589",
    "number": 1384,
    "body": "Now that we have a changelog, add a reminder to update it as part of PRs.",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: add update changelog as part of pull request instructions (#1384)\n\nNow that we have a changelog, add a reminder to update it as part of\nPRs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210201ac254a19ac28f58a",
    "number": 1382,
    "body": "This adds a changelog in a keepachanglog.com style format.\r\n\r\nIt's initially populated with currently unreleased behavior and the last release's (0.24.0) changes.\r\n\r\nWork towards #1361\r\n",
    "head_branch": "changelog",
    "is_a_fork": true,
    "comments": [
      "> This will make writing changelog entries much nicer.\r\n> \r\n> Should the `PR` template be updated as well to remind people about the need to add a change to this file?\r\n\r\nGood idea! #1384 sent"
    ],
    "commit_messages": [
      "feat: add CHANGELOG to make summarizing releases easier. (#1382)\n\nThis adds a changelog in a keepachanglog.com style format.\n\nIt's initially populated with currently unreleased behavior and the last\nrelease's (0.24.0) changes.\n\nWork towards #1361"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210202ac254a19ac28f58b",
    "number": 1381,
    "body": "The no-remote-exec is definitely not required.  I don't use no-sandbox and it seems to work, not sure if there's a case running locally that you would need it.\r\n\r\nshutil.copy copies file metadata.  In RBE, the source tree may have read-only permissions (Buildbarn does this, as it hardlinks input files in from a cache).  Using .copy means the destination file is then not writable and can't be modified subsequently.  copyfile copies the content only, the comment remarking that copyfile was not acceptable  is not supported by python documentation.\r\n",
    "head_branch": "remote-execution-tags",
    "is_a_fork": true,
    "comments": [
      "You may have caused tests to run that have not run in a while, or we hit a flake. If you push another commit it will rub CI again",
      "Is there something required for RBE actions to get network access in CI?",
      "@hrfuller @rickeylev Could you take a look please",
      "re: removing no-remote-exec: It can't be run remotely, though, because part of what it does is update a local file. If the generation of new content was split from the updating of the local file, then no-remote-exec could just be applied to the local file updater.\r\n\r\nRemoving no-sandbox is probably fine; I don't see why sandboxing would affect it.\r\n\r\nThe shutil.copy -> copyfile change: this part is a bit of mystery to us. There is another PR wanting a similar change. But the surrounding comments and originating PR make it sound pretty clear using copyfile didn't work in some cases.\r\n\r\nI did some light searching, and I didn't find much to verify that. There _are_ references about this with shutil.move, and some mentions of Python 2. Thinking maybe there was an old shutil.copy bug with Python 2, I lightly searched for that, but didn't see anything that indicated that.\r\n\r\nSo, I'm not sure whether switching is strictly better, or just trades one broken case for another.\r\n\r\n",
      "> re: removing no-remote-exec: It can't be run remotely, though\r\n\r\nAh actually, I think this is OK. If you do `bazel run :foo.updater`, then it'll run locally, by definition.\r\n\r\nIf you do `bazel build :foo.updater`, then it should skip the copy-back-to-local-file part because that won't have `BUILD_WORKSPACE_DIRECTORY` defined. Running that remotely is fine\r\n\r\n",
      "Update still works without the tags, because you are `bazel run`ing the updater which runs locally, so the tags there are useless.  no-remote-exec will never work in a scenario where the host and exec platforms are different (e.g. bazel on macos compiling to linux) \r\n\r\nSwitching has got to be strictly better.  I think the original committer had shutil.copy confused with os.replace/rename.  shutil.copy is implemented as shutil.copyfile followed by shutil.copymode, so copyfile must work fine in scenarios where .copy works.",
      "Ha you're way ahead of me.",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "Can someone review this PR? Should not be auto-closed.",
      "My concern is that it uses shutil.copyfile even though there was a comment that shutil.copyfile was not working under certain cirrumstances. It could be that the comment is wrong. I would be happy to see this rebased and merged if someone can explain me the history why and how the comments were written previously.\r\n\r\nOnce this is rebased we could ask people to test in corporate env.",
      "Closing stale PRs"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210203ac254a19ac28f58c",
    "number": 1379,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/examples/bzlmod/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate"
    ],
    "commit_messages": [
      "build(deps): bump certifi from 2022.12.7 to 2023.7.22 in /examples/bzlmod (#1379)\n\nBumps [certifi](https://github.com/certifi/python-certifi) from\n2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a>\n2023.07.22</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a>\nBump actions/setup-python from 4.6.1 to 4.7.0 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a>\nBump dessant/lock-threads from 3.0.0 to 4.0.1 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a>\nHash pin Actions and enable dependabot (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a>\n2023.05.07</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a>\nci: Add Python 3.12-dev to the testing (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a>\nCreate a Security Policy (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a>\nSet up permissions to github workflows (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a>\nDon't let deprecation warning fail CI (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a>\nremove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has\nbeen open for over 30 days.\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210204ac254a19ac28f58d",
    "number": 1378,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/examples/bzlmod_build_file_generation/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate"
    ],
    "commit_messages": [
      "build(deps): bump certifi from 2022.12.7 to 2023.7.22 in /examples/bzlmod_build_file_generation (#1378)\n\nBumps [certifi](https://github.com/certifi/python-certifi) from\n2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a>\n2023.07.22</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a>\nBump actions/setup-python from 4.6.1 to 4.7.0 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a>\nBump dessant/lock-threads from 3.0.0 to 4.0.1 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a>\nHash pin Actions and enable dependabot (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a>\n2023.05.07</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a>\nci: Add Python 3.12-dev to the testing (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a>\nCreate a Security Policy (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a>\nSet up permissions to github workflows (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a>\nDon't let deprecation warning fail CI (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a>\nremove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has\nbeen open for over 30 days.\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210205ac254a19ac28f58e",
    "number": 1377,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/tools/publish/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate"
    ],
    "commit_messages": [
      "build(deps): bump certifi from 2022.12.7 to 2023.7.22 in /tools/publish (#1377)\n\nBumps [certifi](https://github.com/certifi/python-certifi) from\n2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a>\n2023.07.22</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a>\nBump actions/setup-python from 4.6.1 to 4.7.0 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a>\nBump dessant/lock-threads from 3.0.0 to 4.0.1 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a>\nHash pin Actions and enable dependabot (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a>\n2023.05.07</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a>\nci: Add Python 3.12-dev to the testing (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a>\nCreate a Security Policy (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a>\nSet up permissions to github workflows (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a>\nDon't let deprecation warning fail CI (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a>\nremove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has\nbeen open for over 30 days.\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210205ac254a19ac28f58f",
    "number": 1376,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_repository_annotations/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [
      "Looks like certifi is up-to-date now, so this is no longer needed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210206ac254a19ac28f590",
    "number": 1375,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse_vendored/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [
      "Looks like certifi is up-to-date now, so this is no longer needed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210207ac254a19ac28f591",
    "number": 1374,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/examples/pip_parse/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate"
    ],
    "commit_messages": [
      "build(deps): bump certifi from 2022.12.7 to 2023.7.22 in /examples/pip_parse (#1374)\n\nBumps [certifi](https://github.com/certifi/python-certifi) from\n2022.12.7 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a>\n2023.07.22</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a>\nBump actions/setup-python from 4.6.1 to 4.7.0 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a>\nBump dessant/lock-threads from 3.0.0 to 4.0.1 (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a>\nHash pin Actions and enable dependabot (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a>\n2023.05.07</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a>\nci: Add Python 3.12-dev to the testing (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a>\nCreate a Security Policy (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a>\nSet up permissions to github workflows (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a>\nDon't let deprecation warning fail CI (<a\nhref=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a\nhref=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a>\nremove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a\nhref=\"https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22\">compare\nview</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility\nscore](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits\nthat have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after\nyour CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge\nand block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating\nit. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all\nof the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop\nDependabot creating any more for this major version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop\nDependabot creating any more for this minor version (unless you reopen\nthe PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop\nDependabot creating any more for this dependency (unless you reopen the\nPR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the\n[Security Alerts\npage](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has\nbeen open for over 30 days.\n\nSigned-off-by: dependabot[bot] <support@github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210208ac254a19ac28f592",
    "number": 1373,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2021.10.8 to 2023.7.22.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909\"><code>8fb96ed</code></a> 2023.07.22</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40\"><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b\"><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b\"><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/228\">#228</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0\"><code>8b3d7ba</code></a> 2023.05.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8\"><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/224\">#224</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8\"><code>c2fc3b1</code></a> Create a Security Policy (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01\"><code>c211ef4</code></a> Set up permissions to github workflows (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5\"><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=\"https://redirect.github.com/certifi/python-certifi/issues/219\">#219</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec\"><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2021.10.08...2023.07.22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2021.10.8&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/pip_repository_entry_points/certifi-2023.7.22",
    "is_a_fork": false,
    "comments": [
      "Looks like certifi is up-to-date now, so this is no longer needed."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210209ac254a19ac28f593",
    "number": 1370,
    "body": "This PR bumps mappings to latest version. \r\n\r\nAdding changes in a separate PR as discussed [here](https://github.com/bazelbuild/rules_python/pull/1352#pullrequestreview-1565600824).\r\n\r\ncc @chrislovecnm ",
    "head_branch": "update_minor_mapping",
    "is_a_fork": true,
    "comments": [
      "cc @aignas ",
      "Thank you @chrislovecnm \r\nIs there any plan to release a new version anytime soon?"
    ],
    "commit_messages": [
      "feat: Update MINOR_MAPPING to latest version (#1370)\n\nThis PR bumps mappings to latest version. \n\nAdding changes in a separate PR as discussed\n[here](https://github.com/bazelbuild/rules_python/pull/1352#pullrequestreview-1565600824).\n\ncc @chrislovecnm"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020aac254a19ac28f594",
    "number": 1368,
    "body": "At times binaries are not in the path. This commit tests that the binary exists before we try to execute the binary.\r\n\r\nThis allows us to provide a more informative error message to the user.\r\n\r\nCloses: https://github.com/bazelbuild/rules_python/issues/662",
    "head_branch": "update-which",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: Improve exec error handling (#1368)\n\nAt times binaries are not in the path. This commit tests that the binary\nexists before we try to execute the binary.\n\nThis allows us to provide a more informative error message to the user.\n\nCloses: https://github.com/bazelbuild/rules_python/issues/662\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020aac254a19ac28f595",
    "number": 1367,
    "body": "Updated two files that used 'load(\"@rules_python' instead of 'load(\"//python'.\r\n\r\nCloses: https://github.com/bazelbuild/rules_python/issues/1296",
    "head_branch": "import-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Feat: Using repo-relative labels (#1367)\n\nUpdated two files that used 'load(\"@rules_python' instead of\n'load(\"//python'.\n\nCloses: https://github.com/bazelbuild/rules_python/issues/1296"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020bac254a19ac28f596",
    "number": 1365,
    "body": "In certain releases of Python we do not have various platforms like\r\nppc. When using the call PLATFORMS.keys() we get all of the\r\nplatforms instead of the platforms that are included with the Python\r\nversion.\r\n\r\nWe get the error \"no such package\" because, for instance,\r\npython_3_10_ppc64le-unknown-linux-gnu does not exist in Python\r\n3.10.9 (see versions.bzl).\r\n\r\nYou can recreate this error by running a bazel query command inside\r\nthe examples/bzlmod directory. If you run:\r\n\r\n```\r\nbazel query \"deps(@python_3_10//:python_headers)\"\r\n```\r\n\r\nWith a version of the rules previous to this commit, you will get\r\nan error. With this commit, you get a printout of all of the\r\npython_headers for all of the platforms that are supported in the\r\nPython 3.10 version used by the repository.\r\n\r\nInstead of using PLATFORM.keys() we are only listing the actual\r\nrepository based on the host.  For instance:\r\n\r\n```starlark\r\nalias(\r\n    name = \"python_headers\",\r\n    actual = \"@python_3_10_x86_64-unknown-linux-gnu//:python_headers\",\r\n)\r\n```\r\n\r\nInstead of:\r\n\r\n```starlark\r\nalias(\r\n    name = \"python_headers\",\r\n    actual = select( {\":\" + item: \"@python_3_10_\" + item + \"//:python_headers\" for item in PLATFORM.keys()})),\r\n)\r\n```\r\n\r\nFixes: #1326",
    "head_branch": "platform_keys_test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020cac254a19ac28f597",
    "number": 1364,
    "body": "In certain releases of Python we do not have various platforms like ppc.  When using the call PLATFORMS.keys() we get all of the platforms instead of the platforms that are included with the Python version.\r\n\r\nWe get the error \"no such package\" because, for instance, python_3_10_ppc64le-unknown-linux-gnu does not exist in Python 3.10.9 (see versions.bzl).\r\n\r\nYou can recreate this error by running a bazel query command inside the examples/bzlmod directory.  If you run:\r\n\r\nbazel query \"deps(@python_3_10//:python_headers)\"\r\n\r\nWith a version of the rules previous to this commit, you will get an error.  With this commit, you get a printout of all of the python_headers for all of the platforms that are supported in the Python 3.10 version used by the repository.\r\n\r\nInstead of using PLATFORMS.keys(), we use the sha256 keys in TOOL_VERSIONS dict based on the full Python version. This change now returns only the platforms supported in the Python version.\r\n\r\nFixes: #1326",
    "head_branch": "platform_keys_fix",
    "is_a_fork": true,
    "comments": [
      "@rickeylev any idea why we are doing:\r\n\r\n```starlark\r\nalias(name = \"python_headers\",  actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:python_headers\" for item in TOOL_VERSIONS['3.10.9']['sha256'].keys()}))\r\n```\r\n\r\nInstead of:\r\n\r\n```starlark\r\nalias(name = \"python_headers\",  actual = \"@python_3_10_x86_64-unknown-linux-gnu//:python_headers\")\r\n```\r\n\r\nI'm uncertain how to test that this change does not break anything.  Here is most of the BUILD.bazel file that is created by this rule:\r\n\r\n```starlark\r\n alias(name = \"files\",           actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:files\" for item in TOOL_VERSIONS['3.10.9']['sha256'].keys()}))\r\n alias(name = \"includes\",        actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:includes\" for item in TOOL_VERSIONS['3.10.9']['sha256'].keys()}))\r\n alias(name = \"libpython\",       actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:libpython\" for item in TOOL_VERSIONS['3.10.9']['sha256'].keys()}))\r\n alias(name = \"py3_runtime\",     actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:py3_runtime\" for item in TOOL_VERSIONS['3.10.9']['sha256'].keys()}))\r\n #alias(name = \"python_headers\",  actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:python_headers\" for item in TOOL_VERSIONS['3.10.9']['sha256'].keys()}))\r\n alias(name = \"python_headers\",  actual = \"@python_3_10_x86_64-unknown-linux-gnu//:python_headers\")\r\n alias(name = \"python_runtimes\", actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:python_runtimes\" for item in TOOL_VERSIONS['3.10.9']['sha256'].keys()}))\r\n alias(name = \"python3\",         actual = select({\":\" + item: \"@python_3_10_\" + item + \"//:\" + (\"python.exe\" if \"windows\" in item else \"bin/python3\") for item in TOOL_VERSIONS['3.10.9']\r\n```\r\n\r\nRunning:\r\n\r\n```\r\nbazel query \"deps(@python_3_10//:python_headers)\"\r\n```\r\n\r\nWorks but only gives you the headers for specific host platform with the change.  With the select statement, we get the headers for every platform.",
      "Based on a conversation with @rickeylev we need to have a select with all of the PLATFORMS that are supported in it.  This PR wins ;)",
      "I will wait for https://github.com/bazelbuild/rules_python/pull/1340 to get in and use the code to find the full version.",
      "Implemented by #1473 and I have verified that the bug no longer exists. Verified that\r\n```\r\nbazel query \"deps(@python_3_10//:python_headers)\"\r\n```\r\nsucceeds in the `examples/bzlmod`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020dac254a19ac28f598",
    "number": 1363,
    "body": "Add `py_console_script_binary`, a macro/rule that allows better customization of how\r\nentry points are generated. Notable features of it are:\r\n  * It allows passing in additional dependencies, which makes it easier for plugin\r\n    dependencies to be added to tools such as pylint or sphinx.\r\n  * The underlying `py_binary` rule can be passed in, allowing custom rules,\r\n    such as the version-aware rules, to be used for the resulting binary.\r\n  * Entry point generation is based upon a wheel's `entry_points.txt` file. This helps\r\n    avoid loading external repositories unless they're actually used, allows entry\r\n    points to have better version-aware support, and allows bzlmod to provide a\r\n    supportable mechanism for entry points.\r\n\r\nBecause the expected common use case is an entry point for our pip generated repos,\r\nthere is special logic to make that easy and concisely do. Usage of\r\n`py_console_script_binary` is not tied to our pip code generation, though, and users can\r\nmanually specify dependencies if they need to.\r\n\r\nBREAKING CHANGE: This is a breaking change, but only for bzlmod users. Note that\r\nbzlmod support is still beta. Bzlmod users will need to replace using `entry_point`\r\nfrom `requirements.bzl` with loading `py_console_script_binary` and defining the\r\nentry point locally:\r\n\r\n```\r\nload(\"@rules_python//python/entry_points:py_console_script_binary.bzl, \"py_console_script_binary\")\r\n\r\npy_console_script_binary(name=\"foo\", pkg=\"@mypip//pylint\")\r\n```\r\n\r\nFor workspace users, this new macro is available to be used, but the old code is still\r\npresent.\r\n\r\nFixes #1362\r\nFixes #543\r\nFixes #979\r\nFixes #1262\r\nCloses #980\r\nCloses #1294\r\nCloses #1055 \r\n",
    "head_branch": "exp/979/entry_point-rule",
    "is_a_fork": true,
    "comments": [
      "Ideally, I would love to reuse the implementation for `py_binary` and have `entry_point` as an actual rule, but genrule can also work here initially.\r\n\r\n@rickeylev, @groodt, this may have some rough edges still (I am wondering if the workaround around the `sys.path` entries yields to correct behaviour, but I am not sure if there is a better solution yet), but it is ready for initial feedback. The benefit of this approach is that it does not require very clever tricks explored in #1294 in order to expose spoke contents via the hub repo and we can just use the stuff exposed in the hub repo directly.",
      "@aignas I'm getting the same error on Windows.  Not sure if this helps:\r\n\r\n```\r\nPS C:\\Users\\chris\\Workspace\\rules_python\\examples\\bzlmod\\bazel-bin\\entry_point> c:\\\\b\\\\r4du22do\\\\execroot\\\\_main\\\\bazel-out\\\\x64_windows-fastbuild\\\\bin\\\\entry_point\\\\entry_point_test.exe.runfiles\\\\_main\\\\entry_point\\\\yamllint.exe -v\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\chris\\AppData\\Local\\Temp\\Bazel.runfiles_mbclvpp2\\runfiles\\_main\\entry_point\\yamllint.py\", line 12, in <module>\r\n    from yamllint.cli import run\r\n  File \"C:\\Users\\chris\\AppData\\Local\\Temp\\Bazel.runfiles_mbclvpp2\\runfiles\\_main\\entry_point\\yamllint.py\", line 12, in <module>\r\n    from yamllint.cli import run\r\nModuleNotFoundError: No module named 'yamllint.cli'; 'yamllint' is not a package\r\nPS C:\\Users\\chris\\Workspace\\rules_python\\examples\\bzlmod\\bazel-bin\\entry_point\r\n```\r\n\r\nAlthough running `pylint.exe` does work.",
      "FYI: I have some pubic API-surface feedback to give, but gtg at the moment.\r\n\r\nSkimming the PR, I'll also likely have some implementation feedback, but need to look more closely.",
      "@aignas are we fixing https://github.com/bazelbuild/rules_python/issues/1055 as well?",
      "I'll be going on vacation from tomorrow, so will not respond to questions for a week and a bit.",
      "I'd be grateful if somebody could enlighten me as to why the Windows tests are failing.",
      "> I'd be grateful if somebody could enlighten me as to why the Windows tests are failing.\r\n\r\nGiven the error, it looks like the entry point's executable (the \"windows launcher\" wrapper thing) is running, and that the launcher is failing to find...something. There's a lot of something it could be :(. Do you have a windows machine?\r\n\r\nThe basic way the windows+zip mechanism work is...\r\n\r\nA native windows executable is created. This is called the \"windows launcher\". This binary has the path to python interpreter to use embedded into it by the py_binary build process. That interpreter path is uses comes from...it's supposed to be the toolchain. However, I seem to recall that `--python_path` could override it (and might have on windows?), but I'm having trouble finding the logic that did that.\r\n\r\nAdditionally, it looks like, in the launcher source code, it does `if <desired path doesn't exist>: use python.exe`.\r\n\r\nA few ideas:\r\n\r\n1. Strip down the test to just call the entry point without any args. That eliminates any of the other args being passed as potential issues.\r\n2. Try running `subprocess.run(\"python.exe\", shell=True)`. It's not clear to me if it's invoking python.exe via a shell (which would trigger PATH searching), or directly (e.g. via exec, which wouldn't perform PATH searching. I have to assume the former; I don't see how it could have worked without PATH lookup.\r\n3. The launcher source seems to indicate it has a special `--print_launcher_command` flag\r\n4. Replace pylint with a simple example. This eliminates any issues due to pylint.\r\n5. Check the runfiles environment; nested binaries can interact poorly sometimes\r\n6. I see the test changes the current working directory? If something is looking for a path relative to the execroot, that could confuse things.\r\n\r\nThe windows launcher source code is here: https://github.com/bazelbuild/bazel/tree/master/src/tools/launcher\r\n\r\n\r\nTo see how the launcher is built, see [here](https://github.com/bazelbuild/bazel/blob/master/src/main/starlark/builtins_bzl/common/python/py_executable_bazel.bzl#L318). Note that is the starlarkified code from Bazel head. The error is Bazel 6, which would be using the Java impl. The two _should_ be functionally the same, though.\r\n",
      "@rickeylev, it seems that trying to run `pylint_with_deps` inside of a `py_test` was the problem here and I have changed it to use `run_binary` instead to simulate better how the tool would be run in actual use and that has fixed the issue with the Windows test.\r\n\r\nI have rebased on the latest master and added a `CHANGELOG` entry."
    ],
    "commit_messages": [
      "feat(py_console_script_binary)!: entry points with custom dependencies (#1363)\n\nAdd `py_console_script_binary`, a macro/rule that allows better\ncustomization of how\nentry points are generated. Notable features of it are:\n* It allows passing in additional dependencies, which makes it easier\nfor plugin\n    dependencies to be added to tools such as pylint or sphinx.\n* The underlying `py_binary` rule can be passed in, allowing custom\nrules,\nsuch as the version-aware rules, to be used for the resulting binary.\n* Entry point generation is based upon a wheel's `entry_points.txt`\nfile. This helps\navoid loading external repositories unless they're actually used, allows\nentry\npoints to have better version-aware support, and allows bzlmod to\nprovide a\n    supportable mechanism for entry points.\n\nBecause the expected common use case is an entry point for our pip\ngenerated repos,\nthere is special logic to make that easy and concisely do. Usage of\n`py_console_script_binary` is not tied to our pip code generation,\nthough, and users can\nmanually specify dependencies if they need to.\n\nBREAKING CHANGE: This is a breaking change, but only for bzlmod users.\nNote that\nbzlmod support is still beta. Bzlmod users will need to replace using\n`entry_point`\nfrom `requirements.bzl` with loading `py_console_script_binary` and\ndefining the\nentry point locally:\n\n```\nload(\"@rules_python//python/entry_points:py_console_script_binary.bzl, \"py_console_script_binary\")\n\npy_console_script_binary(name=\"foo\", pkg=\"@mypip//pylint\")\n```\n\nFor workspace users, this new macro is available to be used, but the old\ncode is still\npresent.\n\nFixes #1362\nFixes #543\nFixes #979\nFixes #1262\nCloses #980\nCloses #1294\nCloses #1055\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020eac254a19ac28f599",
    "number": 1358,
    "body": "- Adds blacklisting of the well-known types in the python runtime provided by the toolchain/runtime, as this can cause duplicate generation of these protos in some cases. This conditionally tries to use proto_common.experimental_should_generate_code if it can since this API isn't necessarily stable\r\n- Tweaks how the runtime provided protos are injected in the runfiles, the current mechanism collects and propagates this in the aspect but it seems unnecessary, as this can just be done in the terminal rule once\r\n- Adds proper import prefixing/stripping support, including in external repos\r\n- Adds various unit tests that verify various import prefixing/stripping and external repo import combinations",
    "head_branch": "ch/fix_imports",
    "is_a_fork": true,
    "comments": [
      "not really sure why buildifier is failing in the tests...the file looks fine to me and my local buildifier is not complaining ",
      "@chancila here you go:\r\n\r\n```\r\n##### :bazel: buildifier: found 1 format issue in your WORKSPACE, BUILD and *.bzl files\r\n--\r\n  | If this repo uses a pre-commit hook, then you should install it. Otherwise, please download <a href=\"https://github.com/bazelbuild/buildtools/releases/tag/6.1.0\">buildifier 6.1.0</a> and run the following command in your workspace:<br/><pre><code>buildifier examples/py_proto_library/external_workspace/BUILD.bazel</code></pre>\r\n  | ##### :bazel: buildifier: found 1 lint issue in your WORKSPACE, BUILD and *.bzl files\r\n  | <pre><code><a href=\"https://github.com/chancila/rules_python/blob/98accb2de842a597da41f5c6d904f88852142d41/python/private/proto/py_proto_library.bzl#L235\">python/private/proto/py_proto_library.bzl:235:9</a>: <a href=\"https://github.com/bazelbuild/buildtools/blob/master/WARNINGS.md#unsorted-dict-items\">unsorted-dict-items</a>: Dictionary items are out of their lexicographical order.</pre></code>\r\n  | Uploading output via 'buildkite annotate'\r\n```\r\n\r\nSo the way I got this information is to go to the buildifier failing test and then expand this section:\r\n\r\n🛠️ Printing raw output for debugging\r\n\r\nI also have a hacked version of buildifier.py that I use locally.  It gives me \"most\" of the errors, but not all of them always.",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020fac254a19ac28f59a",
    "number": 1352,
    "body": "Include s390x in release and update python-build-standalone to 3.9.17, 3.10.12, 3.11.4.\r\n[Latest python-build-standalone release](https://github.com/indygreg/python-build-standalone/releases/tag/20230726) has s390x support added.\r\n\r\nThese changes are needed to build TensorFlow on s390x, which is currently blocked due to missing support.",
    "head_branch": "s390x-release",
    "is_a_fork": true,
    "comments": [
      "@rickeylev the error seen in the CI builds can be fixed with below patch:\r\n```\r\ndiff --git a/WORKSPACE b/WORKSPACE\r\nindex a833de8..7438bb8 100644\r\n--- a/WORKSPACE\r\n+++ b/WORKSPACE\r\n@@ -72,7 +72,7 @@ _py_gazelle_deps()\r\n # Install twine for our own runfiles wheel publishing.\r\n # Eventually we might want to install twine automatically for users too, see:\r\n # https://github.com/bazelbuild/rules_python/issues/1016.\r\n-load(\"@python//3.11.1:defs.bzl\", \"interpreter\")\r\n+load(\"@python//3.11.4:defs.bzl\", \"interpreter\")\r\n load(\"@rules_python//python:pip.bzl\", \"pip_parse\")\r\n\r\n pip_parse(\r\n```\r\nHowever I am not sure about the impact of this change.\r\nCould you please provide your inputs?\r\n\r\nAlso please let me know whether updating \"MINOR_MAPPING\" versions as done in this PR is not ideal.",
      "@namrata-ibm, #1340 should fix what you mention in your message, then we would only have `3.11:defs.bzl` instead of `3.11.1:defs.bzl`. That said, it would be fixing it only for `bzlmod` and for traditional workspaces we would likely need to do additional fixes.",
      "Thank you @aignas for pointing out. \r\nWill check #1340 for further updates. If it is ongoing work and might take longer, then I can revert the MINOR_MAPPING changes from this PR. \r\nHowever it would be good to have, to avoid explicit python version setting(eg in TensorFlow) during build on s390x.",
      "I think the minor mapping changes are good and they should stay in this PR,\r\nif any other code is broken, it should be fixed.\r\n\r\nOn Tue, 1 Aug 2023, 18:12 Namrata Bhave, ***@***.***> wrote:\r\n\r\n> Thank you @aignas <https://github.com/aignas> for pointing out.\r\n> Will check #1340 <https://github.com/bazelbuild/rules_python/pull/1340>\r\n> for further updates. If it is ongoing work and might take longer, then I\r\n> can revert the MINOR_MAPPING changes from this PR.\r\n> However it would be good to have, to avoid explicit python version\r\n> setting(eg in TensorFlow) during build on s390x.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bazelbuild/rules_python/pull/1352#issuecomment-1659904010>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AAB22KVIXRBISSLHB2I3H43XTDB7TANCNFSM6AAAAAA27G6IVE>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
      "@namrata-ibm please take a look at CI/CD failures: https://buildkite.com/bazel/rules-python-python/builds/5380#0189af9c-468d-4b55-ac85-9954d0197118",
      "@chrislovecnm Thank you for checking, all the CI failures are same and addressed in above [comments](https://github.com/bazelbuild/rules_python/pull/1352#issuecomment-1659721946). It would be great to hear comments about the queries listed up.",
      "@namrata-ibm, could you see if you can fix the WORKSPACE with the expected command please? Replacing `3.11.1` with `3.11.4` in the `WORKSPACE` and other places where it is failing would be good enough.",
      "@aignas I added the WORKSPACE change and all earlier failures have passed in latest run. However I see `Buildifier` failed with 1 format issue. I tried running `buildifier python/versions.bzl` with v6.1.0 , however I do not see any error. Could you please help?",
      "@namrata-ibm, this looks like a CI flake.",
      "> @namrata-ibm, this looks like a CI flake.\r\n\r\n@aignas did we hit a bug in buildifier?",
      "@aignas @chrislovecnm @rickeylev could you please provide your inputs on how to proceed further?\r\nThank you.",
      "@namrata-ibm the error from CI\r\n\r\n\r\n\r\n##### :bazel: buildifier: found 1 format issue in your WORKSPACE, BUILD and *.bzl files\r\n--\r\n  | If this repo uses a pre-commit hook, then you should install it. Otherwise, please download <a href=\"https://github.com/bazelbuild/buildtools/releases/tag/6.1.0\">buildifier 6.1.0</a> and run the following command in your workspace:<br/><pre><code>buildifier python/versions.bzl</code></pre>\r\n\r\n",
      "@chrislovecnm Thank you, I have updated this PR to keep only s390x and python version updates.\r\nWill raise PR for Minor mapping changes later.\r\n\r\nCould you please check and help merge this?"
    ],
    "commit_messages": [
      "feat: Add s390x release (#1352)\n\nInclude s390x in release and update python-build-standalone to 3.9.17,\n3.10.12, 3.11.4.\n[Latest python-build-standalone\nrelease](https://github.com/indygreg/python-build-standalone/releases/tag/20230726)\nhas s390x support added.\n\nThese changes are needed to build TensorFlow on s390x, which is\ncurrently blocked due to missing support."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621020fac254a19ac28f59b",
    "number": 1349,
    "body": "This explains the different ways to register toolchains and how to use them.\r\n\r\nAlso fixes python_aliases -> python_versions repo name\r\n",
    "head_branch": "readme.updates",
    "is_a_fork": true,
    "comments": [
      "Yeah good point, we should be explicit about that. Only major.minor is\r\nsupported. If major.minor.patch works, it's just incidental.\r\n\r\nOn Sat, Jul 29, 2023, 8:20 PM Ignas Anikevicius ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** approved this pull request.\r\n>\r\n> Thanks for this explanation, I think it becomes much clearer of what is\r\n> possible and how the toolchains can be used.\r\n>\r\n> That said, I wonder if if we should advise users to only use X.Y instead\r\n> of X.Y.Z in the python_version field. All of the docs only have examples\r\n> in that case and I am wondering if saying python_version = \"3.11.1\" even\r\n> makes sense here.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bazelbuild/rules_python/pull/1349#pullrequestreview-1553540409>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AIEXQ6STQUH7JS6T5CWGV23XSXHINANCNFSM6AAAAAA22L7PQ4>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
      "Updated the attribute docs for the python_version attributes."
    ],
    "commit_messages": [
      "docs: Better explain when and how to use toolchains for bzlmod (#1349)\n\nThis explains the different ways to register toolchains and how to use\nthem.\n\nAlso fixes python_aliases -> python_versions repo name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210210ac254a19ac28f59c",
    "number": 1346,
    "body": "Before this PR the only way to render aliases for PyPI package repos\r\nusing the version-aware toolchain was to use the `whl_library_alias` repo.\r\nHowever, we have code that is creating aliases for packages within the hub repo\r\nand it is natural to merge the two approaches to keep the number of layers of\r\nindirection to minimum.\r\n\r\n- feat: support alias rendering for python aware toolchain targets.\r\n- refactor: use render_pkg_aliases everywhere.\r\n- refactor: move the function to a private `.bzl` file.\r\n- test: add unit tests for rendering of the aliases.\r\n\r\nSplit from #1294 and work towards #1262 with ideas taken from #1320.\r\n",
    "head_branch": "feat/render_pkg_aliases",
    "is_a_fork": true,
    "comments": [
      "Also, does this overlap with https://github.com/bazelbuild/rules_python/pull/1344 ? The files don't, but I see `no_match_error` as part of the logic, but don't see `no_match_error` in the removed code, nor recall that in other existing code.",
      "> Also, does this overlap with #1344 ? The files don't, but I see `no_match_error` as part of the logic, but don't see `no_match_error` in the removed code, nor recall that in other existing code.\r\n\r\n@rickeylev, with regards to overlap with #1344, I wanted to ensure that the new alias rendering function can fail if the appropriate version is not found. Let me know if I should move addition of the error message to a separate PR.\r\n",
      "@aignas can you provide more details to @rickeylev about the error message so that we can get that error handling in this PR?",
      "After having a look at #1344 I see that the PRs overlap with a great extent. To keep this PR scoped I would like to not add more things here but leave it for a followup PR. My plan would be to:\n* Move of the `pip_hub_repository` from `python/pip_install` to `python/extensions/private.bzl` and remove the usage of `whl_library_alias` and use `render_pkg_aliases` for everything. This would not include anything to do with the `entry_point` macro usage from the main hub repo yet because I think it is a bit complex and I'd like to first do the refactor of getting rid of some of the complexity in the `pip.bzl` extension.\n* Fix the usage of the `pip.parse` extension with various toolchain versions, which is the #1340 PR (or a different one entirely). I am afraid that #1328 may have regressed the functionality in cases where we the users have the specific `X.Y.Z` Python toolchain versions specified in their `MODULE.bazel`. Previously it would work but we would have weird and undocumented `pip_XYZ_` prefixes and weird `@python_versions//X.Y.Z:defs.bzl` imports. If you would like to revert #1328 in the mean time, feel free to do so.\n",
      "FYI 1344 has been merged. If this PR obviates the no_match_error logic I put in that PR, that's mostly fine -- just retain the detailed error message. When select() fails to match, it's a very confusing state to figure out unless you're well acquainted with bazel query, bazel info, configurations, etc\r\n\r\n> I wanted to ensure that the new alias rendering function can fail if the appropriate version is not found.\r\n\r\nMakes sense, SGTM.\r\n\r\n> My plan would be to\r\n\r\nMostly SGTM, I think? I'd have to see the code to get a better sense of what this means and looks like. I'm convinced that whl_library_alias is extraneous. My gut says that something else is, too, but I'm not sure to what, especially with entry_point looming around.\r\n\r\n> If you would like to revert https://github.com/bazelbuild/rules_python/pull/1328 in the mean time, feel free to do so.\r\n\r\nI don't think that's necessary. We've only ever gave examples for and documented usage of Major.Minor formats. If anything, we can just fail or warn if a non-Major.Minor value is given until we figure out how to properly support that.",
      "@rickeylev, could you have a look at this once more? I have rebased on `main` and have made minor changes to reuse the same `no_match_error` between the `whl_library_alias` and this new utilitiy. I think this is ready to be merged as is without any extra work that I mentioned in my previous comment."
    ],
    "commit_messages": [
      "refactor: support rendering pkg aliases without whl_library_alias (#1346)\n\nBefore this PR the only way to render aliases for PyPI package repos\nusing the version-aware toolchain was to use the `whl_library_alias`\nrepo.\nHowever, we have code that is creating aliases for packages within the\nhub repo\nand it is natural to merge the two approaches to keep the number of\nlayers of\nindirection to minimum.\n\n- feat: support alias rendering for python aware toolchain targets.\n- refactor: use render_pkg_aliases everywhere.\n- refactor: move the function to a private `.bzl` file.\n- test: add unit tests for rendering of the aliases.\n\nSplit from #1294 and work towards #1262 with ideas taken from #1320."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210211ac254a19ac28f59d",
    "number": 1344,
    "body": "This fixes the issue where a sub-module was required to always have a pip.parse() call configured for the default Python version if it used any pip.parse() call. Such a\r\nrequirement puts sub-modules in an impossible situation:\r\n  * If they don't have the default version, they'll get an error.\r\n  * If they register the default version, but also register a specific version,\r\n    they'll potentially cause an error if a root module changes the default to\r\n    match their specific version (because two pip.parse() calls for the same version\r\n    are made, which is an error).\r\n\r\nThe requirement to have the default version registered for a pip hub was only present to satisfy the `whl_library_alias` repository rule, which needed a Python version to map `//conditions:default` to.\r\n\r\nTo fix, the `whl_library_alias` rule's `default_version` arg is made optional. When None is passed, the `//conditions:default` condition is replaced with a `no_match_error` setting. This prevents the pip hub from being used with the version-unaware rules, but that makes sense: no wheels were setup for that version, so it's not like there is something that\r\ncan be used anyways.\r\n\r\nFixes #1320\r\n",
    "head_branch": "pip.without.default.python",
    "is_a_fork": true,
    "comments": [
      "OK, CI is happy now. PTAL"
    ],
    "commit_messages": [
      "fix: Don't require default Python version for pip hubs (#1344)\n\nThis fixes the issue where a sub-module was required to always have a\npip.parse() call configured for the default Python version if it used\nany pip.parse() call. Such a\nrequirement puts sub-modules in an impossible situation:\n  * If they don't have the default version, they'll get an error.\n* If they register the default version, but also register a specific\nversion,\nthey'll potentially cause an error if a root module changes the default\nto\nmatch their specific version (because two pip.parse() calls for the same\nversion\n    are made, which is an error).\n\nThe requirement to have the default version registered for a pip hub was\nonly present to satisfy the `whl_library_alias` repository rule, which\nneeded a Python version to map `//conditions:default` to.\n\nTo fix, the `whl_library_alias` rule's `default_version` arg is made\noptional. When None is passed, the `//conditions:default` condition is\nreplaced with a `no_match_error` setting. This prevents the pip hub from\nbeing used with the version-unaware rules, but that makes sense: no\nwheels were setup for that version, so it's not like there is something\nthat\ncan be used anyways.\n\nFixes #1320"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210212ac254a19ac28f59e",
    "number": 1341,
    "body": "Reverts bazelbuild/rules_python#1303\r\n\r\nThe main issue is that `pip.parse()` accepts a locked requirements file -- this means\r\nthe requirements are specific to a particular Python version[1]. Because the default Python\r\nversion can arbitrarily change, the lock file may not be valid for the Python version\r\nthat is used at runtime. The net result is a module will use dependencies for e.g. Python\r\n3.8, but will use 3.9 at runtime. Additionally, the dependencies resolved for 3.8 will\r\nbe created under names such as `@foo_39` (because that's the python_version pip.parse sees),\r\nwhich is just more confusing.\r\n\r\nBREAKING CHANGE:\r\n  * pip.parse() must have `python_version` explicitly set. Set it to the Python version\r\n    used to resolve the requirements file.\r\n\r\n[1] Lock files aren't necessarily version specific, but we don't currently support the\r\nenvironment markers in lock files to make them cross-python-version compatible.",
    "head_branch": "revert-1303-default-interpreter",
    "is_a_fork": false,
    "comments": [
      "Mostly LGTM, but I want to rewrite the description to give more context. \"causes bugs\" and \"we decided\" doesn't give enough information for future readers. It's my EOD now, though, so I don't have the energy to the description and add to the merge queue."
    ],
    "commit_messages": [
      "revert(bzlmod)!: allow bzlmod pip.parse to implicitly use default python version (#1341)\n\nReverts bazelbuild/rules_python#1303\n\nThe main issue is that `pip.parse()` accepts a locked requirements file\n-- this means\nthe requirements are specific to a particular Python version[1]. Because\nthe default Python\nversion can arbitrarily change, the lock file may not be valid for the\nPython version\nthat is used at runtime. The net result is a module will use\ndependencies for e.g. Python\n3.8, but will use 3.9 at runtime. Additionally, the dependencies\nresolved for 3.8 will\nbe created under names such as `@foo_39` (because that's the\npython_version pip.parse sees),\nwhich is just more confusing.\n\nBREAKING CHANGE:\n* pip.parse() must have `python_version` explicitly set. Set it to the\nPython version\n    used to resolve the requirements file.\n\n[1] Lock files aren't necessarily version specific, but we don't\ncurrently support the\nenvironment markers in lock files to make them cross-python-version\ncompatible."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210212ac254a19ac28f59f",
    "number": 1340,
    "body": "Before this PR the `bzlmod` and legacy setups would only expose the\r\nmulti-version python toolchain aliases as the string that is passed to\r\nthe `python_register_multi_toolchains` function. This meant that if the\r\nuser decided to pass the full version (e.g. `3.11.1`) then they had to\r\nimport the version aware `py_*` defs via `@foo//3.11.1:defs.bzl`. This\r\nPR changes it such that the user can still do the old way of importing\r\nbut we print a deprecation warning and ask the user to use\r\n`3.11:defs.bzl` instead which better reflects how the multi-version\r\ntoolchain should be used. This also means that the PRs bumping the minor\r\nversions like in #1352 won't need updating Python code elsewhere.\r\n\r\nWhilst at it, we introduce a validation that disallows multiple Python\r\ntoolchains of the same `X.Y` version. This is handled in the `bzlmod` by\r\nprinting warnings that the toolchains are ignored, whilst the non-bzlmod\r\nusers will get validation errors, which is a potentially breaking\r\nchange.\r\n\r\nFixes #1339\r\n",
    "head_branch": "fix/1339/drop-minor-version",
    "is_a_fork": true,
    "comments": [
      "> Breaking for bzlmod users who previously used\r\n@python_versions//X.Y.Z:defs.bzl in their BUILD.bazel files and/or\r\ndepended on the @pip_XYZ//:requirements.bzl.\r\n\r\nHow is this a breaking change?  Can we make it non breaking?",
      "@chrislovecnm, because the bzlmod support is still in early stages I am not sure if we should spend more time to actually generate extra aliases in the `python_versions` repo. I am also not sure what the behaviour should be if there are two toolchains used with the same Python minor version.",
      "> fixes the python_versions to always contain\r\n> @python_versions//X.Y:defs.bzl imports.\r\n\r\n> #1328 also fixed the case where the Python-version specific pip hub repos would be named\r\n> <hub_name>_XYZ as opposed to the <hub_name>_XY, which is expected\r\nacross the codebase.\r\n\r\n> Breaking for bzlmod users who previously used\r\n> @python_versions//X.Y.Z:defs.bzl in their BUILD.bazel files and/or\r\n> depended on the @pip_XYZ//:requirements.bzl.\r\n\r\nTo clarify, these XYZ names were only occurring if `python_version = \"X.Y.Z\"` was specified, right? Such values were unsupported, so behavior change there is fine. We don't need to call fixing that a breaking change.\r\n\r\n----\r\n \r\nMy main question with allowing/supporting a patch-level specificity is how non-patch-level-specificity behaves when two different patch levels are requested. e.g. given\r\n\r\n```\r\npython.toolchain(python_version=\"3.8.1\")\r\npython.toolchain(python_version=\"3.8.2\")\r\n```\r\n\r\nKeep in mind those may occur across different modules.\r\n\r\nWhat version does `load(\"@python_version//3.11/defs.bzl\", ...)` use? Similar questions occur for e.g. the pip stuff.",
      "@rickeylev, I'll add a test for this in the `examples/bzlmod`.",
      "It seems that if the micro versions are different, then it will fail because of duplicate `coverage` repositories with:\r\n```\r\n$ bazel test ...\r\nStarting local Bazel server and connecting to it...\r\nERROR: Traceback (most recent call last):\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/extensions/python.bzl\", line 127, column 57, in _python_impl\r\n                toolchain_info = _python_register_toolchains(\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/extensions/python.bzl\", line 50, column 31, in _python_register_toolchains\r\n                python_register_toolchains(\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/repositories.bzl\", line 539, column 41, in python_register_toolchains\r\n                coverage_tool = coverage_dep(\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/private/coverage_deps.bzl\", line 127, column 10, in coverage_dep\r\n                maybe(\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/bazel_tools/tools/build_defs/repo/utils.bzl\", line 233, column 18, in maybe\r\n                repo_rule(name = name, **kwargs)\r\nError in repository_rule: A repo named python_3_9_aarch64-apple-darwin_coverage is already generated by this module extension at /private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/bazel_tools/tools/build_defs/repo/utils.bzl:233:18\r\nERROR: error evaluating module extension python in @rules_python~override//python/extensions:python.bzl\r\nINFO: Elapsed time: 9.593s\r\nINFO: 0 processes.\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\n    currently loading: tests ... (6 packages)\r\n    Fetching https://bcr.bazel.build/bazel_registry.json\r\nERROR: Couldn't start the build. Unable to run tests\r\n```\r\n\r\nIf we do not register the coverage for the second `3.9` toolchain the failure is due to the toolchain alias definition, I think:\r\n```\r\n$ bazel test ...\r\nERROR: Traceback (most recent call last):\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/extensions/python.bzl\", line 127, column 57, in _python_impl\r\n                toolchain_info = _python_register_toolchains(\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/extensions/python.bzl\", line 50, column 31, in _python_register_toolchains\r\n                python_register_toolchains(\r\n        File \"/private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/repositories.bzl\", line 552, column 26, in python_register_toolchains\r\n                python_repository(\r\nError in repository_rule: A repo named python_3_9_aarch64-apple-darwin is already generated by this module extension at /private/var/tmp/_bazel_ignas.anikevicius/ee423e5d9d08c035dfd0b914eadb5025/external/rules_python~override/python/repositories.bzl:552:26\r\n```\r\n\r\nI am not sure if it is in scope for this PR though.",
      "@rickeylev wrote:\r\n> ```\r\n> python.toolchain(python_version=\"3.8.1\")\r\n> python.toolchain(python_version=\"3.8.2\")\r\n> ```\r\n\r\nSo with the latest iteration of the patch, `3.8.1` would win and `3.8.2` would be ignored. This gives an added benefit that the `coverage` dependency registration does not need to be changed. I think that `bzlmod` example is testing this well enough now.\r\n\r\nThe log from the CI is:\r\n```\r\nbazel build --show_progress_rate_limit=5 --curses=yes --color=yes --terminal_columns=143 --show_timestamps --verbose_failures --jobs=30 --announce_rc --experimental_repository_cache_hardlinks --disk_cache= --sandbox_tmpfs_path=/tmp --google_default_credentials --remote_cache=remotebuildexecution.googleapis.com --remote_instance_name=projects/bazel-untrusted/instances/default_instance --bes_backend=buildeventservice.googleapis.com --bes_timeout=360s --project_id=bazel-untrusted --remote_timeout=60 --remote_max_connections=200 --remote_default_platform_properties=properties:{name:\"cache-silo-key\" value:\"8d289f2a1cea83df66f90efee75da8dc615b199c80f262fa30a652f2d174a951\"} --remote_download_toplevel --test_env=HOME --test_env=BAZELISK_USER_AGENT -- ...\r\n--\r\n <snip>\r\n  | (07:14:57) INFO: Current date is 2023-07-29\r\n  | (07:14:57) DEBUG: <redacted>: WARNING: Ignoring toolchain 'python_3_9' (3.9.10) from module 'other_module': Toolchain 'python_3_9' from module 'example_bzlmod' already registered Python version 3.9.16 and has precedence\r\n  | (07:14:57) DEBUG: <redacted>: WARNING: Ignoring toolchain 'python_3_11' (3.11.1) from module 'other_module': Toolchain 'python_3_11' from module 'rules_python' already registered Python version 3.11.1 and has precedence\r\n  | (07:15:08) INFO: Analyzed 115 targets (183 packages loaded, 12923 targets configured).\r\n<snip>\r\n```",
      "@chrislovecnm, @rickeylev made this a non-breaking change and updated the legacy setup to also use the same approach, where only a single `X.Y` python toolchain is supported per multi-version toolchain hub.",
      "Note that this is working without these code changes, see comment in #1371."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210213ac254a19ac28f5a0",
    "number": 1336,
    "body": "Before this PR, the `wheel_installer` was doing three things:\n1. Downloading the right wheel.\n2. Extracting it into the output directory.\n3. Generating BUILD.bazel files based on the extracted contents.\n\nThis PR is moving the third part into the `whl_library` repository rule\nand it has the following benefits:\n* We can reduce code duplication and label sanitization functions in\n  rules_python.\n* There are many things that the `wheel_installer` does not care anymore\n  and we don't need to change less code when extending `whl_library` as\n  we can now do many things in starlark directly.\n* It becomes easier to change the API of how we expose the generated\n  BUILD.bazel patching because we only need to change the Starlark\n  functions.\n\nWork towards #1330.\n",
    "head_branch": "refactor/1330/whl_library_refactor",
    "is_a_fork": true,
    "comments": [
      "FYI @chrislovecnm, I decided to see how this idea of generating BUILD.bazel and other extra files worked out in reality and I think I am happy with the solution. It makes working on the #1262 and extending the API easier, hence me doing this refactor before extending the `whl_library` more.\n"
    ],
    "commit_messages": [
      "refactor(whl_library): move bazel file generation to Starlark (#1336)\n\nBefore this PR, the `wheel_installer` was doing three things:\n1. Downloading the right wheel.\n2. Extracting it into the output directory.\n3. Generating BUILD.bazel files based on the extracted contents.\n\nThis PR is moving the third part into the `whl_library` repository rule\nand it has the following benefits:\n* We can reduce code duplication and label sanitization functions in\n  rules_python.\n* There are many things that the `wheel_installer` does not care anymore\n  and we don't need to change less code when extending `whl_library` as\n  we can now do many things in starlark directly.\n* It becomes easier to change the API of how we expose the generated\n  BUILD.bazel patching because we only need to change the Starlark\n  functions.\n\nWork towards #1330."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210214ac254a19ac28f5a1",
    "number": 1335,
    "body": "When gazelle:python_root is not set or is at the root of the repo, we don't need to set imports for python rules, because that's the Bazel's default. This would reduce unnecessary verbosity.",
    "head_branch": "imports",
    "is_a_fork": true,
    "comments": [
      "I don't think the logic is correct, based on the changed tests. Could you elaborate, please? I may be missing something.",
      "Consider this workspace, where `imports` are not set in any of the py rules:\r\n\r\n```\r\n-- MODULE.bazel --\r\nmodule(name = \"py_imports\")\r\n\r\nrules_python_version = \"0.24.0\"\r\n\r\nbazel_dep(name = \"rules_python\", version = rules_python_version)\r\nbazel_dep(name = \"rules_python_gazelle_plugin\", version = rules_python_version)\r\nbazel_dep(name = \"gazelle\", version = \"0.31.0\", repo_name = \"bazel_gazelle\")\r\n\r\npython = use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")\r\npython.toolchain(\r\n    configure_coverage_tool = True,\r\n    is_default = True,\r\n    python_version = \"3.9\",\r\n)\r\n-- WORKSPACE --\r\n-- pkg1/BUILD.bazel --\r\nload(\"@rules_python//python:defs.bzl\", \"py_binary\")\r\n\r\npy_binary(\r\n    name = \"pkg1\",\r\n    srcs = [\"__init__.py\", \"main.py\"],\r\n    main = \"main.py\",\r\n    deps = [\"//pkg2\"],\r\n)\r\n-- pkg1/__init__.py --\r\n-- pkg1/main.py --\r\nfrom pkg2 import lib\r\n\r\nprint(lib.hello())\r\n-- pkg2/BUILD.bazel --\r\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\r\n\r\npy_library(\r\n    name = \"pkg2\",\r\n    srcs = [\"__init__.py\", \"lib.py\"],\r\n    visibility = [\"//visibility:public\"],\r\n)\r\n-- pkg2/__init__.py --\r\n-- pkg2/lib.py --\r\ndef hello():\r\n    return \"hello world\"\r\n```\r\n\r\nIt's perfectly fine to run:\r\n\r\n```\r\nbazel run --enable_bzlmod //pkg1\r\nINFO: Analyzed target //pkg1:pkg1 (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nTarget //pkg1:pkg1 up-to-date:\r\n  bazel-bin/pkg1/pkg1\r\nINFO: Elapsed time: 0.125s, Critical Path: 0.01s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\nINFO: Running command line: bazel-bin/pkg1/pkg1\r\nhello world\r\n```\r\n\r\nThis is because Bazel use the root of the workspace as PYTHONPATH by default, so the module pkg2/lib.py is imported as `from pkg2 import lib`. From Gazelle's perspective, this means when `# gazelle:python_root` is not set or is set at the root of the repo, we don't need to assign any value to `imports` attribute. \r\n\r\nThe tests are updated because `# gazelle:python_root` is not set in those tests, and no `import` attribute is populated for the py rules in those tests, reflecting the new behavior.\r\n\r\nNote that the new behavior only affects new targets generated by Gazelle. Existing `imports` attribute will be preserved, whether they are written by hand or populated by Gazelle in the past.\r\n\r\nDoes this make sense?\r\n"
    ],
    "commit_messages": [
      "feat: stop generating imports when not necessary (#1335)\n\nWhen gazelle:python_root is not set or is at the root of the repo, we\ndon't need to set imports for python rules, because that's the Bazel's\ndefault. This would reduce unnecessary verbosity."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210215ac254a19ac28f5a2",
    "number": 1331,
    "body": "Added the `incompatible_normalize_name` feature flag to normalize the package distribution name according to latest Python packaging standards. Defaults to `False` for the time being.\r\n\r\nAdded the `incompatible_normalize_version` feature flag to normalize the package version according to PEP440 standard. This also adds support for local version specifiers (versions with a `+` in them), in accordance with PEP440. Defaults to `False` for the time being.\r\n\r\nInstead of following the obsolete PEP 427 escaping procedure for distribution names and versions, we should use the rules specified by https://packaging.python.org/en/latest/specifications (sections \"Package name normalization\" and \"Binary distribution format\"). For the versions, this means normalizing them according to PEP 440.\r\n\r\nAdded as feature flags to avoid forcing the user to deal with breaking changes when upgrading `rules_python`:\r\n\r\n- Distribution names have stronger requirements now: \"A valid name consists only of ASCII letters and numbers, period, underscore and hyphen. It must start and end with a letter or number.\" https://packaging.python.org/en/latest/specifications/name-normalization/\r\n\r\n- Versions must be valid PEP 440 version identifiers. Previously versions such as \"0.1-2-3\" would have been accepted; that is no longer the case.\r\n\r\n- The file name of generated wheels may have changed, if the distribution name or the version identifier wasn't in normalized form.\r\n\r\n- The wheelmaker now depends on `packaging.version`, which means the `py_wheel` user now needs to load pip dependencies in their `WORKSPACE.bazel` file:\r\n  ```\r\n  load(\"@rules_python//python/pip_install:repositories.bzl\", \"pip_install_dependencies\")\r\n\r\n  pip_install_dependencies()\r\n  ```\r\n\r\nFixes bazelbuild/rules_python#883. Fixes bazelbuild/rules_python#1132.",
    "head_branch": "pep440",
    "is_a_fork": true,
    "comments": [
      "Could I get some help with the test failures? They seem to be related to this line:\r\nhttps://github.com/bazelbuild/rules_python/blob/5c5ab5bd9577a284784d1c8b27bf58336de06010/python/runfiles/BUILD.bazel#L55\r\nwhere, of course, `{BUILD_EMBED_LABEL}` is not a valid version according to PEP 440. Now, I have been assuming that once we get to `wheelmaker.py` any stamping should already have taken place, taking care of all the placeholders, and the version we get should be a valid PEP 440 version. Is this mistaken? Should `wheelmaker.py` be forced to handle invalid versions with placeholders in them? Or should the `{BUILD_EMBED_LABEL}` be replaced with a valid version identifier?\r\n\r\nLooks like @alexeagle and @rickeylev were involved in the patch (https://github.com/bazelbuild/rules_python/commit/1722988c)  that introduced `{BUILD_EMBED_LABEL}`.  Any insights or opinions?",
      "I think by default we are not stamping the builds within the CI, so the `embed-label` is not substituted. This would mean that a restrictive version name validation may need to be conditional based on whether the build is being stamped.\r\n\r\nAnother approach could be to do `--stamp --embed-label 0.0.0` for the affected tests, but I am not sure if this is the right approach, but usage of some escape latch might be necessary here because of the fact that this `wheel` is being built within the `rules_python` workspace.",
      "@vonschultz does this change fix this issue: https://github.com/bazelbuild/rules_python/issues/1132",
      "Even in an unstamped build, version placeholders should be replaced by a constant value like `0.0.0-PLACEHOLDER`. IMO it was always incorrect that we left literal `{BUILD_EMBED_LABEL}` segments in output filenames.",
      "Yes, @chrislovecnm, this fixes #1132. I updated the pull request message accordingly.",
      "@aignas or @rickeylev PTAL",
      "> re: requiring pep 440 compliant names: I don't think we should try to perform such strict validation. Doing the basic transforms to make a string more pep 440 compatible (e.g. `-` to `.` or w/e) makes sense because we want to produce output that other tools can consume. But we don't really care if a user does e.g. `.after` instead of `.post`, or does `.post0.dev4.rc1`.\r\n\r\nI don't think we in `rules_python` should be making up our own rules for how Python versions work. The authoritative source is the specification for the binary distribution format at https://packaging.python.org/en/latest/specifications/binary-distribution-format/, and it says \"Version numbers should be normalised according to [PEP 440](https://peps.python.org/pep-0440/).\" We might also look at how influential projects such as `setuptools` handle it, and they require PEP 440-conforming versions. https://setuptools.pypa.io/en/latest/history.html#v66-0-0\r\n\r\nIn my mind one of two approaches makes sense. Either we take it upon us to do the normalization, in which case we should do it according to the specification, or we put the responsibility on the user entirely, documenting that the `version` attribute of a `py_wheel` needs to be a version normalized according to PEP 440, and skip any validation and sanitation whatsoever. That would certainly make for a less complex implementation, but I'm not sure that's a good idea.\r\n\r\n> > The wheelmaker now depends on packaging.version, which means the py_wheel user now needs to load pip dependencies in their WORKSPACE.bazel file\r\n> \r\n> I'm pretty sure we call pip_install_dependencies() internally, so users don't need to worry about this. You can remove this from the description.\r\n\r\nI tested this. If I just do a minimal `WORKSPACE.bazel` file,\r\n```\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"rules_python\",\r\n    sha256 = \"0a8003b044294d7840ac7d9d73eef05d6ceb682d7516781a4ec62eeb34702578\",\r\n    strip_prefix = \"rules_python-0.24.0\",\r\n    url = \"https://github.com/bazelbuild/rules_python/releases/download/0.24.0/rules_python-0.24.0.tar.gz\",\r\n)\r\n\r\nload(\"@rules_python//python:repositories.bzl\", \"py_repositories\")\r\n\r\npy_repositories()\r\n```\r\nin a toy project, as documented on https://github.com/bazelbuild/rules_python/releases/tag/0.24.0, and then try to use a `py_wheel` it will work with the 0.24.0 release, and it won't work when running with `bazel build --override_repository=rules_python=/home/von/src/github.com/vonschultz/rules_python ...`, unless we change the toy project to include a call to `pip_install_dependencies()`.\r\n\r\nIt's true that we call `pip_install_dependencies()` internally in `rules_python`, but the end user doesn't benefit from that, so from the point of view of the end user it's a breaking change.",
      "For wheel builds that don't require specific semantic versioning (e.g. for internal tools that are installed in multiple other projects at a company), I think it's pretty common to append a `+sha` suffix to the wheel version. Currently the validation doesn't support this, and it would be very helpful if it did as proposed in https://github.com/bazelbuild/rules_python/issues/883\r\n\r\nedit: My apologies - was following along on #883 and #1132 but misplaced my comment. Super happy to see this happening! :tada: ",
      "> For wheel builds that don't require specific semantic versioning (e.g. for internal tools that are installed in multiple other projects at a company), I think it's pretty common to append a `+sha` suffix to the wheel version. Currently the validation doesn't support this, and it would be very helpful if it did as proposed in #883\r\n\r\nNot sure I follow @alexmirrington. What you are talking about is a local version identifier. That is not currently supported on the main branch, which is #883. Fixing #883 that is the purpose of this pull request, and the validation that's done here does support local version identifiers: \r\nhttps://github.com/bazelbuild/rules_python/pull/1331/files#diff-e5abf313ad5bebb5c80d6984829326c40288f734daecb0217f5d13ef75adad23R600-R610",
      "Should I update the pull request description? Does this still count as a breaking change? Does this still count as fixing https://github.com/bazelbuild/rules_python/issues/883 and https://github.com/bazelbuild/rules_python/issues/1132, or should that wait for a pull request that changes the default value of the feature flags to \"True\"?",
      "Yes, the PR title and description should be updated and I would be of an opinion that it still fixes #883 and #1132 as users have a way to opt-into the new behavior."
    ],
    "commit_messages": [
      "feat(py_wheel): Normalize name and version (#1331)\n\nAdded the `incompatible_normalize_name` feature flag to normalize the\npackage distribution name according to latest Python packaging\nstandards. Defaults to `False` for the time being.\n\nAdded the `incompatible_normalize_version` feature flag to normalize the\npackage version according to PEP440 standard. This also adds support for\nlocal version specifiers (versions with a `+` in them), in accordance\nwith PEP440. Defaults to `False` for the time being.\n\nInstead of following the obsolete PEP 427 escaping procedure for\ndistribution names and versions, we should use the rules specified by\nhttps://packaging.python.org/en/latest/specifications (sections \"Package\nname normalization\" and \"Binary distribution format\"). For the versions,\nthis means normalizing them according to PEP 440.\n\nAdded as feature flags to avoid forcing the user to deal with breaking\nchanges when upgrading `rules_python`:\n\n- Distribution names have stronger requirements now: \"A valid name\nconsists only of ASCII letters and numbers, period, underscore and\nhyphen. It must start and end with a letter or number.\"\nhttps://packaging.python.org/en/latest/specifications/name-normalization/\n\n- Versions must be valid PEP 440 version identifiers. Previously\nversions such as \"0.1-2-3\" would have been accepted; that is no longer\nthe case.\n\n- The file name of generated wheels may have changed, if the\ndistribution name or the version identifier wasn't in normalized form.\n\n- The wheelmaker now depends on `packaging.version`, which means the\n`py_wheel` user now needs to load pip dependencies in their\n`WORKSPACE.bazel` file:\n  ```\nload(\"@rules_python//python/pip_install:repositories.bzl\",\n\"pip_install_dependencies\")\n\n  pip_install_dependencies()\n  ```\n\nFixes bazelbuild/rules_python#883. Fixes bazelbuild/rules_python#1132.\n\n---------\n\nCo-authored-by: Ignas Anikevicius <anikevicius@gmail.com>\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210216ac254a19ac28f5a3",
    "number": 1329,
    "body": "Before this PR there were at least 2 places where such a helper function\nexisted and it made it very easy to make another copy. This PR introduces a\nhardened version, that follows conventions from upstream PyPI and tests have\nbeen added.\n\nSplit from #1294, work towards #1262.\n",
    "head_branch": "refactor/normalize-name",
    "is_a_fork": true,
    "comments": [
      "@aignas I approved the PR but CI is failing",
      "@aignas, I also included a doc change that Richard recommended, but that is not why CI is failing.",
      "Thanks guys for the review. The `bazel.py` had a regression (missed `prefix +`) during the update and I have just pushed a fix with the docstring suggestion. Should be good now.\n"
    ],
    "commit_messages": [
      "refactor: have a single function for normalized PyPI package names (#1329)\n\nBefore this PR there were at least 2 places where such a helper function\nexisted and it made it very easy to make another copy. This PR\nintroduces a\nhardened version, that follows conventions from upstream PyPI and tests\nhave\nbeen added.\n\nSplit from #1294, work towards #1262."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210217ac254a19ac28f5a4",
    "number": 1328,
    "body": "Before this PR there would be at least a few places where we would be\r\nconverting a `X.Y.Z` version string to a shortened `X_Y` or `XY` string segment\r\nto be used in repository rule labels. This PR adds a small utility function\r\nthat helps making things consistent.\r\n\r\nWork towards #1262, split from #1294.\r\n",
    "head_branch": "refactor/version-label-func",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: add a version label function for consistent labels (#1328)\n\nBefore this PR there would be at least a few places where we would be\nconverting a `X.Y.Z` version string to a shortened `X_Y` or `XY` string\nsegment\nto be used in repository rule labels. This PR adds a small utility\nfunction\nthat helps making things consistent.\n\nWork towards #1262, split from #1294."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210217ac254a19ac28f5a5",
    "number": 1327,
    "body": "Upcoming Bazel versions enforce testonly-ness through toolchain lookup, so when `:current_py_cc_headers` depends on (via toolchain lookup) a `py_cc_toolchain(testonly=True)` target, an error occurs.\r\n\r\nTo fix, just remove testonly=True from the toolchain implementation.\r\n\r\nFixes #1324",
    "head_branch": "pycc.testonly.error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: Remove testonly=True from test toolchain implementations (#1327)\n\nUpcoming Bazel versions enforce testonly-ness through toolchain lookup,\nso when `:current_py_cc_headers` depends on (via toolchain lookup) a\n`py_cc_toolchain(testonly=True)` target, an error occurs.\n\nTo fix, just remove testonly=True from the toolchain implementation.\n\nFixes #1324"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210218ac254a19ac28f5a6",
    "number": 1322,
    "body": "Before this PR the dependencies were out of date and the `pyproject_hooks` was\r\nmissing allowing `pip-compile` to use `pyproject.toml` instead of\r\n`requirements.in`. With the update we are more likely to support the new\r\nfeatures but they are not tested in this PR as the main goal is to update all of\r\nthe files that need regenerating due to upgraded `pip-tools`.\r\n\r\nHere we:\r\n* Upgrade all of the deps to the latest versions.\r\n* Update all of the requirements and gazelle manifest files.\r\n* Add a quirk to ensure fix `pip_compile` on Windows.\r\n\r\nSummary of version changes:\r\n* build: 0.9.0 -> 0.10.0\r\n* click: 8.0.1 -> 8.1.6\r\n* importlib_metadata: 1.4.0 -> 6.8.0\r\n* more_itertools: 8.13.0 -> 10.1.0\r\n* packaging: 22.0 -> 23.1\r\n* pip: 22.3.1 -> 23.2.1\r\n* pip_tools: 6.12.1 -> 7.2.0\r\n* pyproject_hooks: 1.0.0\r\n* setuptools: 60.10.0 -> 68.0.0\r\n* wheel: 0.38.4 -> 0.41.0\r\n* zipp: 1.0.0 -> 3.16.2\r\n\r\nFixes #1351\r\n",
    "head_branch": "chore/upgrade-internal-deps-2",
    "is_a_fork": true,
    "comments": [
      "This is still failing on Windows, but I am not entirely sure why, maybe someone with Windows could look deeper in to this.",
      "The windows error is:\r\n```\r\n      File \"C:\\temp\\Bazel.runfiles_nst1tke9\\runfiles\\python39_x86_64-pc-windows-msvc\\lib\\pathlib.py\", line 276, in gethomedir\r\n        raise RuntimeError(\"Can't determine home directory\")\r\n    RuntimeError: Can't determine home directory\r\n```\r\n\r\nIt's originating via pip -> setuptools -> pathlib. As part of, what appears to be, looking for configuration files. Perhaps there's an issue filed upstream? Is this setuptools version compatible with Python 3.9?\r\n\r\nLooking at the Python 3.9 pathlib code, it checks for USERPROFILE in the environment, which _is_ set. Maybe that isn't filtering down to the the action? Adding --test_env=USERPROFILE in the CI config might fix that.",
      "> It's originating via pip -> setuptools -> pathlib. As part of, what appears to be, looking for configuration files. Perhaps there's an issue filed upstream? Is this setuptools version compatible with Python 3.9?\r\n\r\nI'm not finding an issue upstream in setuptools.  And I cannot find a compatibility matrix.",
      "So adding the parameter `--no-user-cfg` will bypass the code causing this problem.  See the parameter here:\r\n\r\nhttps://github.com/pypa/setuptools/blob/1d9420746741c6ad8bc0757b5dcf6cadf3c1444d/setuptools/_distutils/dist.py#L279\r\n\r\nSet the parameter and setuptools does not hit the `pathlib` call here:\r\n\r\nhttps://github.com/pypa/setuptools/blob/1d9420746741c6ad8bc0757b5dcf6cadf3c1444d/setuptools/_distutils/dist.py#L354C60-L354C60\r\n\r\nI don't think we want to pick up user configuration anyways.\r\n\r\nThere are long discussions around '~,' and Windows https://github.com/python/cpython/issues/80445 is one of them.\r\n\r\nsetuptools moved from using `os.path.expanduser('~')` a while ago, and there are inconsistencies between the two implementations in Python that I have read about.  See the setuptools commit here:\r\n\r\nhttps://github.com/pypa/setuptools/commit/c7d65dd5ee20e61bdd8f58768aeafb2562db8aa4#diff-1da6455033333a4ccf962e1f9f770e138d83c5775c11f72e16ebef1688026284L353-L355\r\n\r\nSo I am guessing that the older `os.path` implementation worked while the never implementation of using `pathlib` does not.\r\n\r\nAs I mentioned, if we set the `--no-user-cfg` parameter for setup tools, the setuptools code will not use the `pathlib` call, and setup tools won't try to find user configuration outside the sandbox.",
      "I spent some time debugging this and trying to understand the root cause of what is going on and I am not sure that the previous analysis in the comment above is entirely correct.\n\nLooking at [this log](https://storage.googleapis.com/bazel-untrusted-buildkite-artifacts/018a279d-6523-4cf6-a319-9142fca06d6a/requirements_test%5Ctest_attempts%5Cattempt_1.log), I think what is happening is the following:\n1. The `pip-tools` is trying to lock the requirements.\n1. Then it is calling `pip` internal to fully resolve everything.\n1. Then `pip` needs to do some processing of the package and it is calling the *vendored* `pyproject-hooks` which exists within the `pip/_vendor` folder.\n1. ...\n1. It calls a `subprocess.run` which due to some reason has it's `sys.path` include Python files from outside the `runfiles` directory:\n   ```\n   C:\\temp\\Bazel.runfiles_n6t3rqoq\\runfiles\\pypi__pip\\pip\\_vendor\\pyproject_hooks\\_in_process\n   C:\\temp\\pip-build-env-gejvde8f\\site\n   C:\\temp\\Bazel.runfiles_n6t3rqoq\\runfiles\\python39_x86_64-pc-windows-msvc\\python39.zip\n   C:\\temp\\Bazel.runfiles_n6t3rqoq\\runfiles\\python39_x86_64-pc-windows-msvc\\DLLs\n   C:\\temp\\Bazel.runfiles_n6t3rqoq\\runfiles\\python39_x86_64-pc-windows-msvc\\lib\n   C:\\temp\\pip-build-env-gejvde8f\\overlay\\Lib\\site-packages\n   C:\\temp\\pip-build-env-gejvde8f\\normal\\Lib\\site-packages\n   ```\n1. We fail whilst we are trying to build a wheel? This is where I get confused,\n   as locking down the requirements should not need to build them, but given\n   Python packaging complexity and non-hermeticity I would not be surprised if\n   this is the actual behaviour that we have here.\n\nI still think it would be good to get to the root cause of this and have the\nfull picture why `multi_versions`, `pip_install` and `pip_parse` integration\ntests. `multi_versions` example is also only failing with Python `3.11`,\nwhereas other examples are using `3.9`. What is more, `multi_versions`\nrequirements contain only websockets and I am curious why it would work with\none Python version but not others. The same goes for why it would work on Linux\nbut not on Windows.\n",
      "> 6\\. We fail whilst we are trying to build a wheel? This is where I get confused,\r\n>     as locking down the requirements should not need to build them, but given\r\n>     Python packaging complexity and non-hermeticity I would not be surprised if\r\n>     this is the actual behaviour that we have here.\r\n\r\nOh, yes, this is precisely what happens when locking dependencies. This happens automatically when an sdist is encountered, because there is no static metadata for sdists. So a wheel is built from the sdist. If I had my way, the rules would only support wheels (`--only-binary=:all:`), but I think that ship sailed long ago.\r\n\r\nThe test is failing on `yamllint` which is only provided as an sdist (https://pypi.org/project/yamllint/#files). Why does the test require yamllint? Can't we do something else instead?\r\n\r\nI personally think this might be too aggressive an upgrade? What's the motivation to upgrade everything at once? If we're upgrading the tooling dependencies, such as pip-tools and build, I can get behind that. \r\n\r\nIn general, upgrading `setuptools` needs to be done carefully, because we probably want the oldest version of `setuptools` thats compatible with `pip` and the rest of our tools? If we upgrade `setuptools` too aggressively, we risk breaking the ability to build older packages? From my quick skim of the upgrade, I don't see anything obvious, but setuptools is a load-bearing, so unless there's a strong reason to upgrade it, maybe upgrade it independently?\r\n",
      "I think the failure on Windows now, is due to the newer `setuptools` vendored distutils that is attempting to expand a home directory when building an `sdist` for `websocket` on py311 for the old version of `websocket`. \r\n\r\nI can bump the pinned version of `websocket` so that an `sdist` will not be but I think this will likely break rules_python for windows users who have any sdist that make use of distutils?"
    ],
    "commit_messages": [
      "chore: bump internal_deps (#1322)\n\nBefore this PR the dependencies were out of date and the\n`pyproject_hooks` was\nmissing allowing `pip-compile` to use `pyproject.toml` instead of\n`requirements.in`. With the update we are more likely to support the new\nfeatures but they are not tested in this PR as the main goal is to\nupdate all of\nthe files that need regenerating due to upgraded `pip-tools`.\n\nHere we:\n* Upgrade all of the deps to the latest versions.\n* Update all of the requirements and gazelle manifest files.\n* Add a quirk to ensure fix `pip_compile` on Windows.\n\nSummary of version changes:\n* build: 0.9.0 -> 0.10.0\n* click: 8.0.1 -> 8.1.6\n* importlib_metadata: 1.4.0 -> 6.8.0\n* more_itertools: 8.13.0 -> 10.1.0\n* packaging: 22.0 -> 23.1\n* pip: 22.3.1 -> 23.2.1\n* pip_tools: 6.12.1 -> 7.2.0\n* pyproject_hooks: 1.0.0\n* setuptools: 60.10.0 -> 68.0.0\n* wheel: 0.38.4 -> 0.41.0\n* zipp: 1.0.0 -> 3.16.2\n\nFixes #1351\n\n---------\n\nCo-authored-by: Greg <groodt@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210219ac254a19ac28f5a7",
    "number": 1321,
    "body": "Before this change the updates to the dependencies would happen very\nseldomly, with this script, I propose we do it before each minor version\nrelease. Adding a shell script and adding a reminder to the release\nprocess may help with that.\n",
    "head_branch": "chore/upgrade-internal-deps",
    "is_a_fork": true,
    "comments": [
      "@chrislovecnm, thanks for the initial comments. I have decided to rewrite the `jq` based approach with a little less magical Python implementation. This means that users don't have to have any extra dependencies on their machines.\n",
      "@aignas I'm going to let @rickeylev or some other Python guru do a code review on this.  My only comment is that you don't have public function docs."
    ],
    "commit_messages": [
      "feat: add a tool to update internal dependencies (#1321)\n\nBefore this change the updates to the dependencies would happen very\nseldomly, with this script, I propose we do it before each minor version\nrelease. Adding a shell script and adding a reminder to the release\nprocess may help with that."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021aac254a19ac28f5a8",
    "number": 1319,
    "body": "This just adds a no-op comment to defs.bzl to make patching its load statements easier.\r\n\r\nRather than looking for the last load (or the conveniently loaded \"# Export ...\" comment),\r\njust have an explicit comment for it.",
    "head_branch": "defs.bzl.patch.placeholder",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: Add placeholder comment to defs.bzl to make patching loads easier (#1319)\n\nThis just adds a no-op comment to defs.bzl to make patching its load\nstatements easier.\n\nRather than looking for the last load (or the conveniently loaded \"#\nExport ...\" comment),\njust have an explicit comment for it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021bac254a19ac28f5a9",
    "number": 1317,
    "body": "The project name was misspelled as \"rule_python\"; corrected to \"rules_python\"",
    "head_branch": "chore/typo-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "doc: correct name of rules_python in bzlmod support doc (#1317)\n\nThe project name was misspelled as \"rule_python\"; corrected to\n\"rules_python\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021bac254a19ac28f5aa",
    "number": 1316,
    "body": "This fixes a bug where the version-aware rules required `main` to always be explicitly\r\nspecified. This was necessary because the main file is named after the outer target\r\n(e.g. \"foo\"), but usage of the main file is done by the inner target (\"_foo\"). The net\r\neffect is the inner target looks for \"_foo.py\", while only \"foo.py\" is in srcs.\r\n\r\nTo fix, the wrappers set main, if it isn't already set, to their name + \".py\"\r\n\r\nWork towards #1262\r\n",
    "head_branch": "fix/transition-rules-main",
    "is_a_fork": true,
    "comments": [
      "Some fun trivia about how py_binary finds main: it's basically a suffix search. e.g.\r\n\r\n```\r\nsearch_for = name + \".py\"\r\nmain = None\r\nfor src in srcs:\r\n  if src.endswith(search_for):\r\n    main = None\r\n    break\r\n```",
      "@rickeylev, yeah, the fact that `main` parameter does not have to be a string ending with `.py` suffix also surprised me.\n\nAs for the comment about modification in place test, it is there already because the `contains_exactly` is used for assertions. Tested this by adding an extra `kwarg` (e.g. `tags`) into the input and the expectation started failing.\n"
    ],
    "commit_messages": [
      "fix(multi-versions): correctly default 'main' arg for transition rules (#1316)\n\nThis fixes a bug where the version-aware rules required `main` to always\nbe explicitly\nspecified. This was necessary because the main file is named after the\nouter target\n(e.g. \"foo\"), but usage of the main file is done by the inner target\n(\"_foo\"). The net\neffect is the inner target looks for \"_foo.py\", while only \"foo.py\" is\nin srcs.\n\nTo fix, the wrappers set main, if it isn't already set, to their name +\n\".py\"\n\nWork towards #1262"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021cac254a19ac28f5ab",
    "number": 1314,
    "body": "* Remove the interpreter extension usage; it's gone\r\n* Specify the Python interpreter by version instead of target.\r\n",
    "head_branch": "update.bzlmod.readme",
    "is_a_fork": true,
    "comments": [
      "@rickeylev i have a more extensive readme upward PR. I dropped the file into a google doc. Did you want to work on that PR?",
      "Superceded by Chris's PR"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021dac254a19ac28f5ac",
    "number": 1312,
    "body": "PR Instructions/requirements\r\n* Title uses `type: description` format. See CONTRIBUTING.md for types.\r\n* Common types are: build, docs, feat, fix, refactor, revert, test\r\n* Breaking changes include \"!\" after the type and a \"BREAKING CHANGES:\"\r\n  section at the bottom.\r\n* Body text describes:\r\n  * Why this change is being made, briefly.\r\n  * Before and after behavior, as applicable\r\n  * References issue number, as applicable\r\n* Update docs and tests, as applicable\r\n* Delete these instructions prior to sending the PR\r\n",
    "head_branch": "ahmed/add-annotations-deps-exclusion",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1312/checks?check_run_id=15013480587) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021eac254a19ac28f5ad",
    "number": 1310,
    "body": "Also add a note that bzlmod support is still beta.",
    "head_branch": "release.notes.cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Use correct pip extension path in generated release notes (#1310)\n\nAlso add a note that bzlmod support is still beta."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021fac254a19ac28f5ae",
    "number": 1308,
    "body": "Updated the requirements files under examples, except for bzlmod. I excluded bzlmod because I found a bug.\r\n\r\nThis commit also removes examples/bzlmod/gazelle_python.yaml, which we do not need.  This is there because the bzlmod example previously included gazelle.",
    "head_branch": "update-deps",
    "is_a_fork": true,
    "comments": [
      "Closing, duplicate PR"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621021fac254a19ac28f5af",
    "number": 1307,
    "body": "* Use public APIs for DictSubject and StrSubject.\r\n* Use rules_testing's StructSubject instead of our own.\r\n\r\nWork towards 1297",
    "head_branch": "rules_testing.cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup(tests): Use new APIs in rules_testing 0.4.0 (#1307)\n\n* Use public APIs for DictSubject and StrSubject.\n* Use rules_testing's StructSubject instead of our own.\n\nWork towards 1297"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210220ac254a19ac28f5b0",
    "number": 1306,
    "body": "This uses the 0.4.0 release of rules_python, which has several features we can make use of\r\n * Various internal APIs have been made public\r\n * target_compatible_with can be set to skip tests by platform\r\n * Unit tests are easier to write\r\n\r\nAlso adds rules_license 0.0.7, which is a dependency of rules_testing.\r\n\r\nWork towards #1297",
    "head_branch": "rules_testing.0.4.0",
    "is_a_fork": true,
    "comments": [
      "fyi @aignas this version of rules testing has the helpers that make writing unit tests easier",
      "Yeah, I bumped it in #1294 already, but I am happy to rebase/merge in once this is merged.",
      "I've found that I needed to also add `rules_licence` into the `internal_deps.bzl` to get it to work. I was having the following issue:\r\n```\r\nERROR: /private/var/tmp/_bazel_ignas.anikevicius/4dee77d851edd2d6539c56c842f51cfb/external/rules_testing/BUILD:26:8: @rules_testing//:package_license: missing value for mandatory attribute 'license_kinds' in '_license' rule\r\nERROR: /private/var/tmp/_bazel_ignas.anikevicius/4dee77d851edd2d6539c56c842f51cfb/external/rules_testing/lib/BUILD:110:11: every rule of type do_nothing implicitly depends upon the target '@rules_testing//:package_license', but this target could not be found because of: Target '@rules_testing//:package_license' contains an error and its package is in error\r\nERROR: Analysis of target '//tests/pip_hub_repository/entry_point:template_is_interpolated_correctly' failed; build aborted:\r\nINFO: Elapsed time: 9.603s\r\nINFO: 0 processes.\r\nFAILED: Build did NOT complete successfully (11 packages loaded, 131 targets configured)\r\nERROR: Couldn't start the build. Unable to run tests\r\n```",
      "> I've found that I needed to also add `rules_licence` into the `internal_deps.bzl` to get it to work. I was having the following issue:\r\n> \r\n> ```\r\n> ERROR: /private/var/tmp/_bazel_ignas.anikevicius/4dee77d851edd2d6539c56c842f51cfb/external/rules_testing/BUILD:26:8: @rules_testing//:package_license: missing value for mandatory attribute 'license_kinds' in '_license' rule\r\n> ERROR: /private/var/tmp/_bazel_ignas.anikevicius/4dee77d851edd2d6539c56c842f51cfb/external/rules_testing/lib/BUILD:110:11: every rule of type do_nothing implicitly depends upon the target '@rules_testing//:package_license', but this target could not be found because of: Target '@rules_testing//:package_license' contains an error and its package is in error\r\n> ERROR: Analysis of target '//tests/pip_hub_repository/entry_point:template_is_interpolated_correctly' failed; build aborted:\r\n> INFO: Elapsed time: 9.603s\r\n> INFO: 0 processes.\r\n> FAILED: Build did NOT complete successfully (11 packages loaded, 131 targets configured)\r\n> ERROR: Couldn't start the build. Unable to run tests\r\n> ```\r\n\r\nDoes this PR need to do that @aignas?",
      "@rickeylev see https://github.com/bazelbuild/rules_python/pull/1294#pullrequestreview-1523341958\r\n\r\ncan we get that update here?",
      "> Does this PR need to upgrade rules_license\r\n\r\nNot strictly, no. I think what's happening is the parts of rules_testing Ignas is using end up pulling in rules_license, while the parts we're currently using don't. CI is happy and all the existing rules_testing tests pass.\r\n\r\nBut sure, I can also add rules_license in this PR. Done.",
      "@rickeylev CI is being cranky",
      "Flakes, all good now."
    ],
    "commit_messages": [
      "chore: Bump rules_testing to 0.4.0 from 0.0.5 (#1306)\n\nThis uses the 0.4.0 release of rules_python, which has several features\nwe can make use of\n * Various internal APIs have been made public\n * target_compatible_with can be set to skip tests by platform\n * Unit tests are easier to write\n\nAlso adds rules_license 0.0.7, which is a dependency of rules_testing.\n\nWork towards #1297"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210221ac254a19ac28f5b1",
    "number": 1304,
    "body": "I think this name is more informative for a public API. The functionality it exposes are rules/macros that use a specific Python version to be used. These aren't really aliases.\r\n\r\nThis commit renames \"python_aliases\" to \"python_versions\". This isn't technically a breaking\r\nchange because bzlmod support is still beta, but we'll flag it as such just in case.\r\n\r\nBREAKING CHANGE:\r\n  * The `python_aliases` repo is renamed to `python_versions`. You will need to either\r\n    update references from `@python_aliases` to `@python_versions`, or use repo-remapping\r\n    to alias the old name (`use_repo(python, python_aliases=\"python_versions\")`)\r\n\r\nCloses #1273",
    "head_branch": "python-aliases-rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(bzlmod)!: Changing repository name \"python_aliases\" to \"python_versions\" (#1304)\n\nI think this name is more informative for a public API. The\nfunctionality it exposes are rules/macros that use a specific Python\nversion to be used. These aren't really aliases.\n\nThis commit renames \"python_aliases\" to \"python_versions\". This isn't\ntechnically a breaking\nchange because bzlmod support is still beta, but we'll flag it as such\njust in case.\n\nBREAKING CHANGE:\n* The `python_aliases` repo is renamed to `python_versions`. You will\nneed to either\nupdate references from `@python_aliases` to `@python_versions`, or use\nrepo-remapping\nto alias the old name (`use_repo(python,\npython_aliases=\"python_versions\")`)\n\nCloses #1273"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210222ac254a19ac28f5b2",
    "number": 1303,
    "body": "This commit defaults `the pip.parse` `python_version` attribute to the default version of\r\nPython, as configured by the `python.toolchain` extension. This allows a user to use the\r\nPython version set by rules_python or the root module. Also, this makes setting the\r\nattribute optional (as it has a default) and we automatically select the interpreter.\r\n\r\nCloses #1267",
    "head_branch": "default-interpreter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat(bzlmod): Allow bzlmod pip.parse to reference the default python toolchain and interpreter (#1303)\n\nThis commit defaults `the pip.parse` `python_version` attribute to the\ndefault version of\nPython, as configured by the `python.toolchain` extension. This allows a\nuser to use the\nPython version set by rules_python or the root module. Also, this makes\nsetting the\nattribute optional (as it has a default) and we automatically select the\ninterpreter.\n\nCloses #1267"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210223ac254a19ac28f5b3",
    "number": 1302,
    "body": "Various parts of the codebase detect whether bzlmod is enabled or not. Most of them copy/paste the same if @ in Label(..) trick and use a comment to explain what they're doing.\r\n\r\nRather than copy/paste that everywhere, this commit uses a constant defined that does this once and reuses the constant value to determine if bzlmod is enabled.\r\n\r\nCloses: https://github.com/bazelbuild/rules_python/issues/1295",
    "head_branch": "bzlmod-enabled",
    "is_a_fork": true,
    "comments": [
      "@rickeylev Thoughts on me breaking the `BZLMOD_ENABLED` to a separate file?  Otherwise, we have to depend on `bazel_skylib` in a bunch of new places.",
      "> @rickeylev Thoughts on me breaking the BZLMOD_ENABLED to a separate file? Otherwise, we have to depend on bazel_skylib in a bunch of new places.\r\n\r\nSGTM. From the error you shared, I think the issue is the skylib dependency becomes newly introduced during the workspace/module-extension phase. Which yeah, if we don't actually need it during that phase, +1 to refactor things such that it doesn't need to be loaded."
    ],
    "commit_messages": [
      "feat(bzlmod): Use a common constant for detecting bzlmod being enabled (#1302)\n\nVarious parts of the codebase detect whether bzlmod is enabled or not.\nMost of them copy/paste the same if @ in Label(..) trick and use a\ncomment to explain what they're doing.\n\nRather than copy/paste that everywhere, this commit uses a constant\ndefined that does this once and reuses the constant value to determine\nif bzlmod is enabled.\n\nCloses: https://github.com/bazelbuild/rules_python/issues/1295"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210224ac254a19ac28f5b4",
    "number": 1301,
    "body": "For certain workflows it is useful to calculate the integrity hash of\nthe manifest file based on a number of requirements files. The\nrequirements locking is usually done by executing a script on each\nplatform and having gazelle manifest generator be aware that more than\none requirements file may affect the outcome (e.g. the wheels that get\npassed to modules map may come from multi_pip_parse rule) is generally\nuseful.\n\nThis change modifies the generation macro to concatenate the requirements\nfiles into one before passing it to the manifest generator.\n",
    "head_branch": "feat/gazelle-support-multiple-requirements-files",
    "is_a_fork": true,
    "comments": [
      "Supersedes #1235.\n"
    ],
    "commit_messages": [
      "feat(gazelle): support multiple requirements files in manifest generation (#1301)\n\nFor certain workflows it is useful to calculate the integrity hash of\nthe manifest file based on a number of requirements files. The\nrequirements locking is usually done by executing a script on each\nplatform and having gazelle manifest generator be aware that more than\none requirements file may affect the outcome (e.g. the wheels that get\npassed to modules map may come from multi_pip_parse rule) is generally\nuseful.\n\nThis change modifies the generation macro to concatenate the\nrequirements\nfiles into one before passing it to the manifest generator."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210224ac254a19ac28f5b5",
    "number": 1294,
    "body": "Before this PR users would need to get the Python version specific entry_point\nwhich meant that the user may have issues when migrating from one default\nversion of Python to another. In this PR we:\n* Move bzlmod hub repo implementation to a private directory to avoid\n  generating docs.\n* Remove the old python version specific hub_repository with its template.\n* Add python version handling in the alias generation to decrease the number of\n  external repositories we create.\n* Create an `entrypoints.bzl` file whilst initializing the `whl_library` which\n  contains a dictionary of entrypoints available in this package.\n* Create python version-specific aliases for entry_points by utilising the new\n  `entrypoints.bzl` file.\n* Create an `entry_point` starlark macro, that is used from the hub repo macro.\n\nThis makes the `bazel query @pip//...` fetch all of the targets, but this might\nbe an acceptable price to pay given that there is now an easy way to query the\navailable entry_points in the hub repo.\n\nFixes #1262\n",
    "head_branch": "refactor/remove-bzlmod-requirements-usage",
    "is_a_fork": true,
    "comments": [
      "It seems that that the CI failure might have been a flake.\n",
      "This is ready for an initial review, I think.",
      "@aignas I have the test failing locally, but any ideas on how to debug the diff_test easier?  Also, can you give me a breakdown of what your update script is doing?  I can rewrite it in Powershell.",
      "@rickeylev, you are correct about the overall layout, the best is to checkout, run `bzlmod` example tests and inspect the `bazel-bzlmod/external` directory. I upload the folder tomorrow if it is still needed tomorrow.",
      "> overall layout\r\n\r\nI think a have a decent sense of the layout after looking at the render_pkg_aliases test -- that fairly nicely described the different build files, their content, and how they're referencing each other.",
      "Question -- what happens for the case where the available entry points differ? e.g. one has [foo], and the has [bar]? The resulting select expression would be e.g.\r\n\r\n```\r\nselect({\r\n  \"is_py3.8\": \"@pip_38_pylint//:foo\", # exists\r\n  \"is_py3.9\": \"@pip_39_pylint//:foo\", # doesn't exists\r\n```\r\n\r\nIs that going to work out OK? Or cause issues? I'm thinking of e.g. `bazel query` behavior specifically. A regular build or cquery should only evaluate the necessary dependencies.",
      "@rickeylev:\r\n> Question -- what happens for the case where the available entry points differ? e.g. one has [foo], and the has [bar]? The resulting select expression would be e.g.\r\n> \r\n> ```\r\n> select({\r\n>   \"is_py3.8\": \"@pip_38_pylint//:foo\", # exists\r\n>   \"is_py3.9\": \"@pip_39_pylint//:foo\", # doesn't exists\r\n> ```\r\n> \r\n> Is that going to work out OK? Or cause issues? I'm thinking of e.g. `bazel query` behavior specifically. A regular build or cquery should only evaluate the necessary dependencies.\r\n\r\nCorrect, `cquery` should be fine and this is a rough edge I am not sure how to work around with the `entry_point` helper. The user can still construct the alias themselves in such case:\r\n```\r\nalias(\r\n    name = \"foo\",\r\n    actual = select({\r\n        \"@rules_python//python:config_settings:is_python_3.8.X\": \"@pip//pylint/bin_py38:foo\",\r\n        \"@rules_python//python:config_settings:is_python_3.9.Y\": \"@pip//pylint/bin_py39:bar\",\r\n    }),\r\n)\r\n```\r\n\r\nThis is not the best user experience, because it hardcodes the minor version here, so the user would also need to use MINOR_MAPPING. If we want to be able to handle such a case more elegantly, maybe a different interface to `entry_point` macro needs to be designed. Something like below would be better IMHO:\r\n```\r\nalias(\r\n    name = \"foo_or_bar\",\r\n    actual = entry_point(\r\n        pkg = \"pylint\",\r\n        script = {\r\n            \"3.8\": \"foo\",\r\n            \"3.9\": \"bar\",\r\n        },\r\n    ),\r\n)```\r\n\r\nPros:\r\n* User does not need to specify `default` because the default_python version is already known to the `entry_point` implementation and is passed via the `@pip//:requirements.bzl`.\r\n* We can accept either a None, string or a dict in the `script` and handle all of the cases gracefully.\r\n* We know the `X.Y` version mapping to `X.Y.Z` because the versions are stored in the `@pip//:requirements.bzl` so the user does not need to worry.\r\nCons:\r\n* The user needs to list out all of the versions explicitly and there is some duplication in here.\r\n\r\nIf this is something that we want to support, I can do this in a followup PR, because the general usecase is `entry_point(\"pylint\")`.",
      "Are the entry points using the version aware rules? If not, then the generated py_binary won't actually know how to cause the corresponding Python version to be used.",
      "> Are the entry points using the version aware rules? If not, then the generated py_binary won't actually know how to cause the corresponding Python version to be used.\r\n\r\nGood point @rickeylev, the `whl_library` is using regular `py_binary` rule to generate the target and I am suspecting that the user story of how different Python version transitions work for entrypoints is not fully clear here. Or at least not fully clear in my head. It is perfectly reasonable to use a `pylint` with a `Python 3.9` list interpreter within a `py_test` rule that itself is using `Python 3.10` and given the following setup:\r\n```\r\npy_test(\r\n    name = \"my_test_with_default_version\",\r\n    data = [\r\n        \":pylint_py39_entrypoint\",\r\n    ],\r\n)\r\n```\r\nI am wondering what our version-aware transition are going to do as [this test](https://github.com/bazelbuild/rules_python/blob/main/examples/multi_python_versions/tests/BUILD.bazel#L107) shows that we would be using in this `py_test` whatever default Python version is and then the `pylint_py39_entrypoint` is going to be using `Python 3.9`.\r\n\r\nHence I am wondering if the actual `entry_point` macro should be:\r\n```\r\n# Use default python version\r\nalias(name=\"pylint\", actual=entry_point(\"pylint\"))\r\nalias(name=\"epylint\", actual=entry_point(\"pylint\", \"epylint\"))\r\n\r\n# Use a specific python version\r\nalias(name=\"epylint_py39\", actual=entry_point(\"pylint\", \"epylint\", \"3.9\"))\r\n```\r\n\r\nIn this case the macro should return not a select, but an actual alias defined in the `entry_points.bzl` file in the `whl_library` rule. What are your thoughts?",
      "re: query behavior: I played around with `bazel query` and non-existent targets. A target not existing itself is OK -- it'll report it, but won't crash. That's fine enough. An error occurs if a non-existent package is in the label, though. So as long as all the entry point targets are in the same package (and that package always exists), then it's fine enough.\r\n\r\nre: version-specific entry points using default py_binary: Yeah, I think this is an issue. The net effect is you can get a runnable target, but it isn't going to be what you expect. There isn't an easy way to force the underlying py_binary into the appropriate config state -- you might as well just define your own binary instead.\r\n\r\nre: how does a versions-specific binary as data within another binary work: It's just transitions. If you look at the definition of the `py_test_3_10` rule, you'll see it does `rule(cfg=<transition function>, ...)`, and what that transition function does is read an attribute and set a config flag. From there on out, all the inputs to instances of that rule (one of which is a plain py_binary target) will inherit that config setting, which propagates through the dependencies.\r\n\r\nThis also means that generating a version-aware entry point binary should be fairly easy: instead of using plain py_binary, use the lower-level version-aware wrapper and just have the repo-rule code gen the `version=X` attribute for it.\r\n\r\nThat said...(this line of thinking inspired by your `entry_point(..., \"3.9\")` proposal)...\r\n\r\nLets say there's two versions of pylint, and they both have the same entry point names. And we write `alias(name=\"epylint\", actual=entry_point(\"pylint\", \"epylint\"))`, i.e. we're giving an \"unversioned\" request for epylint.\r\n\r\nWhat does it mean to say `bazel run //foo:epylint`, or to put it as a dependency in `data` or `genrule.tools`? i.e., which version of epylint does the outer target want?\r\n  * With this PR as it is now, the outer target will get a matching version (the select expression causes that). I suppose that makes sense? It's definitely more build-performance friendly (fewer config transitions).\r\n  * But, yeah, I can imagine that one might want a specific version. So we need a way to allow that.\r\n\r\nre: api of e.g. `entry_point(..., \"3.9\")`: Eh, well, I'm not sure I really like that API, but I generally don't like _any_ of these macros, so I'm rather biased :). My main requirement is that there exist a reasonable way to directly address the necessary labels without having to go through these macros.\r\n\r\nI've gtg now, but those are the bulk of my thoughts/response.",
      "@rickeylev whilst looking at all this I've found a bug in the `transition` code and this PR is getting really big, so I have submitted #1316. Because `py_binary` in the `whl_library` generated rules do not specify `main` attribute it would be great to merge that before we have `entry_point` ready.\r\n\r\nI think I would also like to make a PR for the `whl_library` accept a `python_version` arg so that if it is present, the rule can use the `py_binary` from `@rules_python//python/config_settings:transitions.bzl`. Let me know of your preference about how you would like to review this work.\r\n\r\nI am not a huge fan of the `entry_point` macro either, but I am not sure how I would go about not using it at all. Maybe the `@pip//pylint/bin_py39:epylint` is a better user experience than using the `entry_point` macro. Previously the `hub` repo would not expose this sort of alias and the `entry_point` macro was certainly much better than `@pip_pylint//:rules_python_wheel_entry_point_epylint`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210225ac254a19ac28f5b6",
    "number": 1292,
    "body": "Minor change.\r\n\r\nI am creating a Python virtualenv with Bazel, and having `all_data_requirements` for data dependencies just like `all_requirements` would be very helpful.\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1292/checks?check_run_id=14751777440) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Hello @hrfuller @rickeylev, can I get a review? ",
      "How can we test this? Can we add something to one of our examples?",
      "> How can we test this? Can we add something to one of our examples?\r\n\r\nHi @chrislovecnm, I added a `build_test()`  under `examples/bzlmod`. Also, `examples/pip_parse_vendored/requirements.bzl` shows the generated output."
    ],
    "commit_messages": [
      "feat: Create `all_data_requirements` alias (#1292)\n\nMinor change.\n\nI am creating a Python virtualenv with Bazel, and having\n`all_data_requirements` for data dependencies just like\n`all_requirements` would be very helpful."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210226ac254a19ac28f5b7",
    "number": 1291,
    "body": "PR Instructions/requirements\n* Title uses `type: description` format. See CONTRIBUTING.md for types.\n* Common types are: build, docs, feat, fix, refactor, revert, test\n* Breaking changes include \"!\" after the type and a \"BREAKING CHANGES:\"\n  section at the bottom.\n* Body text describes:\n  * Why this change is being made, briefly.\n  * Before and after behavior, as applicable\n  * References issue number, as applicable\n* Update docs and tests, as applicable\n* Delete these instructions prior to sending the PR\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1291/checks?check_run_id=14751660730) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210227ac254a19ac28f5b8",
    "number": 1290,
    "body": "Add the new parameter `generate_hashes` (default True) to `compile_pip_requirements()`, letting the user control whether to put `--hash` entries in the requirements lock file generated. In particular if the generated file is supposed to be used as a constraints file the hashes don't make much sense.\r\n\r\nFixes bazelbuild/rules_python#894.",
    "head_branch": "generate_hashes",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1290/checks?check_run_id=14718808174) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "+1 to this change as right now I have a `genrule` that is stripping the hashes away in one of our projects."
    ],
    "commit_messages": [
      "feat: Add setting generate_hashes for requirements (#1290)\n\nAdd the new parameter `generate_hashes` (default True) to\n`compile_pip_requirements()`, letting the user control whether to put\n`--hash` entries in the requirements lock file generated. In particular\nif the generated file is supposed to be used as a constraints file the\nhashes don't make much sense.\n\nFixes bazelbuild/rules_python#894."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210228ac254a19ac28f5b9",
    "number": 1289,
    "body": "Adding kwargs to gazelle_python_manifest, so we can set the tags and size to the test. This is similar to:\r\n\r\nhttps://github.com/bazelbuild/rules_python/blob/5b8fa22a2f22501b18b4aea97c5dbfe3a6913a0c/python/pip_install/requirements.bzl#L20-L62\r\n\r\nAlternatively, we can add individual `go_test` attributes as needed. Please advice which way is preferred.",
    "head_branch": "kwargs",
    "is_a_fork": true,
    "comments": [
      "@chrislovecnm I updated the doc and added an example to use the new feature. Can you take another look?"
    ],
    "commit_messages": [
      "Adding kwargs to gazelle_python_manifest (#1289)\n\nAdding kwargs to gazelle_python_manifest, so we can set the tags and\nsize to the test. This is similar to:\n\n\nhttps://github.com/bazelbuild/rules_python/blob/5b8fa22a2f22501b18b4aea97c5dbfe3a6913a0c/python/pip_install/requirements.bzl#L20-L62\n\nAlternatively, we can add individual `go_test` attributes as needed.\nPlease advice which way is preferred."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210229ac254a19ac28f5ba",
    "number": 1287,
    "body": "This allows getting a build's `cc_library` of Python headers through\r\ntoolchain resolution instead of having to use the underlying toolchain's\r\nrepository `:python_headers` target directly.\r\n\r\nWithout this feature, it's not possible to reliably and correctly get\r\nthe C information about the runtime a build is going to use. Existing\r\nsolutions require carefully setting up repo names, external state,\r\nand/or using specific build rules. In comparison, with this feature,\r\nconsumers are able to simply ask for the current headers via a helper\r\ntarget or manually lookup the toolchain and pull the relevant\r\ninformation; toolchain resolution handles finding the correct headers.\r\n\r\nThe basic way this works is by registering a second toolchain to carry\r\nC/C++ related information; as such, it is named `py_cc_toolchain`. The\r\npy cc toolchain has the same constraint settings as the regular py\r\ntoolchain; an expected invariant is that there is a 1:1 correspondence\r\nbetween the two. This base functionality allows a consuming rule\r\nimplementation to use toolchain resolution to find the Python C\r\ntoolchain information.\r\n\r\nUsually what downstream consumers need are the headers to feed into\r\nanother `cc_library` (or equivalent) target, so, rather than have every\r\nproject re-implement the same \"lookup and forward cc_library info\" logic,\r\nthis is provided by the `//python/cc:current_py_cc_headers` target.\r\nTargets that need the headers can then depend on that target as if it\r\nwas a `cc_library` target.\r\n\r\nWork towards https://github.com/bazelbuild/rules_python/issues/824",
    "head_branch": "pycctoolchain",
    "is_a_fork": true,
    "comments": [
      "Ok, CI is happy now -- ready for review."
    ],
    "commit_messages": [
      "feat: Expose Python C headers through the toolchain. (#1287)\n\nThis allows getting a build's `cc_library` of Python headers through\ntoolchain resolution instead of having to use the underlying toolchain's\nrepository `:python_headers` target directly.\n\nWithout this feature, it's not possible to reliably and correctly get\nthe C information about the runtime a build is going to use. Existing\nsolutions require carefully setting up repo names, external state,\nand/or using specific build rules. In comparison, with this feature,\nconsumers are able to simply ask for the current headers via a helper\ntarget or manually lookup the toolchain and pull the relevant\ninformation; toolchain resolution handles finding the correct headers.\n\nThe basic way this works is by registering a second toolchain to carry\nC/C++ related information; as such, it is named `py_cc_toolchain`. The\npy cc toolchain has the same constraint settings as the regular py\ntoolchain; an expected invariant is that there is a 1:1 correspondence\nbetween the two. This base functionality allows a consuming rule\nimplementation to use toolchain resolution to find the Python C\ntoolchain information.\n\nUsually what downstream consumers need are the headers to feed into\nanother `cc_library` (or equivalent) target, so, rather than have every\nproject re-implement the same \"lookup and forward cc_library info\"\nlogic,\nthis is provided by the `//python/cc:current_py_cc_headers` target.\nTargets that need the headers can then depend on that target as if it\nwas a `cc_library` target.\n\nWork towards https://github.com/bazelbuild/rules_python/issues/824"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210229ac254a19ac28f5bb",
    "number": 1286,
    "body": "https://github.com/bazelbuild/rules_python/commit/1c581242c25925a1bd6764608877ec170724f11d introduces a change to the extension API provided by rules_python that are not backwards compatible so bump compatibility_level before the next release.\r\n\r\nBREAKING CHANGES\r\nThe extension API has changed in this release so the compatibility level has been bumped.",
    "head_branch": "bzlmod_compat",
    "is_a_fork": true,
    "comments": [
      "Note this may not be the correct solution. See discussion on slack: https://bazelbuild.slack.com/archives/C014RARENH0/p1687895823784159"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621022aac254a19ac28f5bc",
    "number": 1285,
    "body": "Currently, Python toolchain `:files` and `:py3_runtime` include some unnecessary files. This is because these globs result in literally `lib/libpython{python_version}.so` etc., which do not match anything. The formatting needs to be applied here since it will not be applied later.\r\n\r\nI believe this was introduced by a47c6cd681b34b1ad990ed40dcc01ab5f024406a.",
    "head_branch": "glob-exclude-format",
    "is_a_fork": true,
    "comments": [
      "~~Build fails without 61ec702f, though it's unrelated. Should that be separated?~~\r\n\r\nEDIT: Seems to be fixed on `main` now.",
      "@rickeylev do you know why the build is failing on Windows?",
      "@rickeylev I think this is ready to go now. I rebased onto main and that seems to have helped.",
      "@lpulley do you know if we are pulling in too many files with windows? I’m guessing we need to add a pattern for windows as well. If you don’t work with windows can you please file an issue so we investigate it?"
    ],
    "commit_messages": [
      "fix: add `format()` calls to `glob_exclude` templates (#1285)\n\nCurrently, Python toolchain `:files` and `:py3_runtime` include some\nunnecessary files. This is because these globs result in literally\n`lib/libpython{python_version}.so` etc., which do not match anything.\nThe formatting needs to be applied here since it will not be applied\nlater.\n\nI believe this was introduced by\na47c6cd681b34b1ad990ed40dcc01ab5f024406a."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621022bac254a19ac28f5bd",
    "number": 1284,
    "body": "Gazelle v0.30.0 introduced a lifecycle manager. We can use that to start and shutdown parser and stdmodule processes. So we don't need to use `init` function or creating `context.WithTimeout`.\r\n\r\nBREAKING CHANGES:\r\nThis requires the users of this Gazelle extension to upgrade to Gazelle v0.30.0 or above.\r\n",
    "head_branch": "external_process",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat!: using Gazelle's lifecycle manager to manage external processes (#1284)\n\nGazelle v0.30.0 introduced a lifecycle manager. We can use that to start\nand shutdown parser and stdmodule processes. So we don't need to use\n`init` function or creating `context.WithTimeout`.\n\nBREAKING CHANGES:\nThis requires the users of this Gazelle extension to upgrade to Gazelle\nv0.30.0 or above."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621022cac254a19ac28f5be",
    "number": 1283,
    "body": "Upgrading to the latest version of gazelle and rules_go.  This should address `--incompatible_config_setting_private_default_visibility` flag.",
    "head_branch": "default-visibility-fix",
    "is_a_fork": true,
    "comments": [
      "@rickeylev I have a flake.  If you could push the button on the flake and see if this passes."
    ],
    "commit_messages": [
      "feat: Upgrading gazelle and rules_go (#1283)\n\nUpgrading to the latest version of gazelle and rules_go. This should\naddress `--incompatible_config_setting_private_default_visibility` flag."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621022dac254a19ac28f5bf",
    "number": 1282,
    "body": "This commit updates the README to meet the current bzlmod API.  Some general tweaks and cleanup as well.",
    "head_branch": "readme-updates",
    "is_a_fork": true,
    "comments": [
      "I decided to do a more aggressive edit and moved the README to here for editing and comments: https://docs.google.com/document/d/1rXCgjDVV9Uv3_-Uk4adqywWjT2pEn-GpHUGpCju6Uo8/edit",
      "@rickeylev PTAL at the google doc ",
      "@chrislovecnm PTAL"
    ],
    "commit_messages": [
      "docs: Updating README (#1282)\n\nThis commit updates the README to meet the current bzlmod API. Some\ngeneral tweaks and cleanup as well."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621022dac254a19ac28f5c0",
    "number": 1281,
    "body": "The analysis tests transition to different platforms to test some platform-specific logic.\r\n\r\nWhen cc toolchain registration is enabled, this also requires that a more complete\r\ntoolchain be defined and available.",
    "head_branch": "cc-toolchainisation",
    "is_a_fork": true,
    "comments": [
      "Buildifier is spotting errors:\r\n\r\n<pre><code><a href=\"https://github.com/comius/rules_python/blob/c5034d2fc59c38c13ad218ac021ab052e7137733/tools/build_defs/python/tests/py_test/py_test_tests.bzl#L56\">tools/build_defs/python/tests/py_test/py_test_tests.bzl:56:13</a>: <a href=\"https://github.com/bazelbuild/buildtools/blob/master/WARNINGS.md#unsorted-dict-items\">unsorted-dict-items</a>: Dictionary items are out of their lexicographical order.\r\n--\r\n  | <a href=\"https://github.com/comius/rules_python/blob/c5034d2fc59c38c13ad218ac021ab052e7137733/tools/build_defs/python/tests/py_test/py_test_tests.bzl#L88\">tools/build_defs/python/tests/py_test/py_test_tests.bzl:88:13</a>: <a href=\"https://github.com/bazelbuild/buildtools/blob/master/WARNINGS.md#unsorted-dict-items\">unsorted-dict-items</a>: Dictionary items are out of their lexicographical order.</pre></code>\r\n",
      "> Buildifier is spotting errors:\r\n> \r\n> ```\r\n> [tools/build_defs/python/tests/py_test/py_test_tests.bzl:56:13](https://github.com/comius/rules_python/blob/c5034d2fc59c38c13ad218ac021ab052e7137733/tools/build_defs/python/tests/py_test/py_test_tests.bzl#L56): [unsorted-dict-items](https://github.com/bazelbuild/buildtools/blob/master/WARNINGS.md#unsorted-dict-items): Dictionary items are out of their lexicographical order.\r\n> --\r\n>   | [tools/build_defs/python/tests/py_test/py_test_tests.bzl:88:13](https://github.com/comius/rules_python/blob/c5034d2fc59c38c13ad218ac021ab052e7137733/tools/build_defs/python/tests/py_test/py_test_tests.bzl#L88): [unsorted-dict-items](https://github.com/bazelbuild/buildtools/blob/master/WARNINGS.md#unsorted-dict-items): Dictionary items are out of their lexicographical order.\r\n> ```\r\n\r\nFixed.",
      "If you can push an empty commit, we had a CI flake",
      "@rickeylev, @f0rmiga or @alexeagle PTAL.  This is a little above my knowledge of bazel."
    ],
    "commit_messages": [
      "tests: make analysis tests support --incompatible_enable_cc_toolchain_resolution (#1281)\n\nThe analysis tests transition to different platforms to test some\nplatform-specific logic.\n\nWhen cc toolchain registration is enabled, this also requires that a\nmore complete\ntoolchain be defined and available."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621022eac254a19ac28f5c1",
    "number": 1280,
    "body": "plugin_output was wrong in case multiple repositories are involved and/or _virtual_imports. \r\n\r\nThe code is taken from `cc_proto_library` and has been verified in practice.\r\n",
    "head_branch": "fix-plugin_output",
    "is_a_fork": true,
    "comments": [
      "> Is there an issue somewhere describing the bug in more detail? Or did you just come across this accidentally?\r\n> \r\n> Otherwise lgtm\r\n\r\nAccidentally. We had the same problem internally, reported on b/277335175.\r\n\r\nAnd I spent a month fixing _virtual_imports and otherwise generally cleaning up/optimising proto_library implementation."
    ],
    "commit_messages": [
      "fix: plugin_output in py_proto_library rule (#1280)\n\nplugin_output was wrong in case multiple repositories are involved\nand/or _virtual_imports.\n\nThe code is taken from `cc_proto_library` and has been verified in\npractice."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621022fac254a19ac28f5c2",
    "number": 1279,
    "body": "This adds some basic analysis tests of py_wheel to cover the functionality it's recently introduced.",
    "head_branch": "pywheel.tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: basic analysis tests for py_wheel (#1279)\n\nThis adds some basic analysis tests of py_wheel to cover the\nfunctionality it's recently introduced."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210230ac254a19ac28f5c3",
    "number": 1278,
    "body": "This commit implements a bzlmod extension that allows users to create \"annotations\" for wheel builds.  The wheel_builder.py accepts a JSON file via a parameter called annotations; this extension creates those JSON files. The pip extension accepts a Label -> String dict argument of the JSON files.\r\n\r\nThis feature is renamed to `whl_mods` because the JSON files are handled differently \r\nand the name \"annotations\" is uninformative. This modifies the creation of the BUILD\r\nfiles and their content, and is much more than just adding some notes about a whl.\r\n\r\nThe whl_mod extension wheel names and the wheel names in pip must match.\r\n\r\nCloses: https://github.com/bazelbuild/rules_python/issues/1213\r\n",
    "head_branch": "wheel-mod-extension",
    "is_a_fork": true,
    "comments": [
      "> Any thought to \"auto registering\" the modifications?\r\n\r\n@rickeylev I have thought about it, but we have a use case that I could see could cause us a problem.  \r\n\r\nI'm curious about what you think.  Here is my use case.\r\n\r\nWe have a `foo` wheel that differs between Python 3.10 and 3.11, and I need the BUILD files to differ between Python 3.10 and 3.11.  If we turn on auto registration, we would need to be able to turn it off as well because I would need to use different `hub_names` for 3.10 vs. 3.11.  \r\n\r\nSo that would be more code to maintain.  Also, it may make it more difficult to debug this because I cannot, as a user, easily change the label. \r\n\r\nWe could autoregister by a `hub_name`.  Create a `whl_mods_hub_name` attribute, and then autoregister off of that.  \r\n\r\nAs a user with tricky stuff like this, I like fine-grain control; for instance, I can remove an element from a dict rather than modify the entire `whl_mod`.\r\n\r\nI think the number of people that use this is low, so I would rather have less code and less \"magic\" happening in the background.  We need to document it well.",
      "@rickeylev, if when we merge, if the repo is not set up to do a squash on the commits; I need to open another PR on a different branch.  Somehow my commits got unmanageable, and doing a rebase is driving me up the wall.",
      "re: squash on commits: squash on commits is enabled. The PR description and title become the commit message.\r\n\r\nre: whl mods varying by python version: We could just have `python_versions` attribute of the whl_mod call that says what versions it applies to.\r\n\r\nBut, all this said, auto-registration is a nice to have, not a requirement. I'm kinda meh about using an extension for this already, and like the idea of having pip.parse have an arg to specify modifications (as we have now). This lets users create the config themselves if they want, and we can always allow specifying a bzl file, patch file, or w/e in the future to handle some of the other ideas posted in the issue.",
      "At Canva, we just provide an optional `patches` argument, which is semantically similar to the `patches` in `http_file` and other built-ins. We apply the patches to the unpacked wheels. I think this approach has benefits over providing a bespoke and less flexible implementation with similar behaviour. \r\n\r\nWe can look into upstreaming our implementation and deprecating annotations and whl_mods if you are interested?\r\n\r\nIt looks quite clumsy having to build a DSL that supports a weaker and less flexible form of patching. You've got provide arguments, teach people about new functionality, serialize data that represents the transformations to apply that are then deserialized and applied later. With patches, it would look similar I believe, but it wouldn't require a custom DSL or logic, we would just leverage `rctx.patch`."
    ],
    "commit_messages": [
      "feat(bzlmod): Implementing wheel annotations via whl_mods (#1278)\n\nThis commit implements a bzlmod extension that allows users to create\n\"annotations\" for wheel builds. The wheel_builder.py accepts a JSON file\nvia a parameter called annotations; this extension creates those JSON\nfiles. The pip extension accepts a Label -> String dict argument of the\nJSON files.\n\nThis feature is renamed to `whl_mods` because the JSON files are handled\ndifferently\nand the name \"annotations\" is uninformative. This modifies the creation\nof the BUILD\nfiles and their content, and is much more than just adding some notes\nabout a whl.\n\nThe whl_mod extension wheel names and the wheel names in pip must match.\n\nCloses: https://github.com/bazelbuild/rules_python/issues/1213"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210231ac254a19ac28f5c4",
    "number": 1276,
    "body": "`Project-URL` is a field available in core metadata since version 1.2, which allows specifying additional URLs and display as Project Links in PyPI package web page.\r\n\r\nhttps://packaging.python.org/en/latest/specifications/core-metadata/#project-url-multiple-use\r\n\r\nThis change adds the support to specify that.",
    "head_branch": "py_wheel_add_project_url",
    "is_a_fork": true,
    "comments": [
      "@sfc-gh-sdas FYI."
    ],
    "commit_messages": [
      "feat(py_wheel): Add support for specifying Project-URL in METADATA (#1276)\n\n`Project-URL` is a field available in core metadata since version 1.2,\nwhich allows specifying additional URLs and display as Project Links in\nPyPI package web page.\n\n\nhttps://packaging.python.org/en/latest/specifications/core-metadata/#project-url-multiple-use\n\nThis change adds the support to specify that."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210232ac254a19ac28f5c5",
    "number": 1275,
    "body": "* Corrects some typos in docs\r\n* Expands the user-facing documentation\r\n* Fixes errors having newlines in the middle of them\r\n* Renames some internal functions to be more self-describing.",
    "head_branch": "multi.pip.tidying",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: Typos, doc, and formatting cleanup in pip extension et al (#1275)\n\n* Corrects some typos in docs\n* Expands the user-facing documentation\n* Fixes errors having newlines in the middle of them\n* Renames some internal functions to be more self-describing."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210232ac254a19ac28f5c6",
    "number": 1274,
    "body": "`py_wheel` allows to supply a description file, but it does not allow specifying the content type of that file.\r\nBy default, the type is \"text/x-rst\", but many packages are using a markdown description.\r\n\r\nhttps://packaging.python.org/en/latest/specifications/core-metadata/#description-content-type\r\n\r\nThis change added the support.\r\n",
    "head_branch": "description-content-type",
    "is_a_fork": true,
    "comments": [
      "@sfc-gh-sdas (fyi)",
      "I also added the \"Summary\" field: https://packaging.python.org/en/latest/specifications/core-metadata/#summary",
      "Docs look great, thank you!"
    ],
    "commit_messages": [
      "feat(py_wheel): Add support for specifying Description-Content-Type and Summary in METADATA (#1274)\n\n`py_wheel` allows to supply a description file, but it does not allow\nspecifying the content type of that file.\nBy default, the type is \"text/x-rst\", but many packages are using a\nmarkdown description.\n\n\nhttps://packaging.python.org/en/latest/specifications/core-metadata/#description-content-type\n\nThis change added the support.\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210233ac254a19ac28f5c7",
    "number": 1272,
    "body": "Fixing the bzlmod docs to match latest pip changes.  Also, adding better docs for the release.",
    "head_branch": "doc-updates",
    "is_a_fork": true,
    "comments": [
      "Is this PR defunct? We've update the readme quite a bit now",
      "We have already done this work. Closing"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210234ac254a19ac28f5c8",
    "number": 1271,
    "body": "Also fix missing runfiles on the py_wheel.dist target.\r\n\r\nFixes #1130\r\nFixes #1270\r\n",
    "head_branch": "docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(py_wheel.publish): allow twine tags and args (#1271)\n\nAlso fix missing runfiles on the py_wheel.dist target.\n\nFixes #1130\nFixes #1270\n\n---------\n\nCo-authored-by: Richard Levasseur <rlevasseur@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210235ac254a19ac28f5c9",
    "number": 1266,
    "body": "We ignore pyc files most everywhere (because they aren't deterministic), but part of the pyc creation process involves creating temporary files named `*.pyc.NNN`. Though these are supposed to be temporary files nobody sees, they seem to get picked up by a glob somewhere, somehow. I'm unable to figure out how that is happening, but ignoring them in the glob expressions should also suffice.\r\n\r\nFixes #1261",
    "head_branch": "fix.ignore.pycn.files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Ignore tempoary pyc.NNN files in wheels (#1266)\n\nWe ignore pyc files most everywhere (because they aren't deterministic),\nbut part of the pyc creation process involves creating temporary files\nnamed `*.pyc.NNN`. Though these are supposed to be temporary files\nnobody sees, they seem to get picked up by a glob somewhere, somehow.\nI'm unable to figure out how that is happening, but ignoring them in the\nglob expressions should also suffice.\n\nFixes #1261"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210236ac254a19ac28f5ca",
    "number": 1265,
    "body": "When using Windows you cannot run the symlink directly.\r\n\r\nBecause of how symlinks work in Windows we need to path realpath resolve the link.\r\nUnlike Linux and OSX we cannot execute the Python symlink directly. Windows throws an error \"-1073741515\", when we execute the symlink directory.  This error means that the Python binary cannot find dlls. This is because the symlink that we create is not in the same folder as the dlls.",
    "head_branch": "windows-symlink-pip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(bzlmod): Fixing Windows Python Interpreter symlink issues (#1265)\n\nWhen using Windows you cannot run the symlink directly.\n\nBecause of how symlinks work in Windows we need to path realpath resolve\nthe link.\nUnlike Linux and OSX we cannot execute the Python symlink directly.\nWindows throws an error \"-1073741515\", when we execute the symlink\ndirectory. This error means that the Python binary cannot find dlls.\nThis is because the symlink that we create is not in the same folder as\nthe dlls.\n\n---------\n\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210236ac254a19ac28f5cb",
    "number": 1264,
    "body": "The bzlmod-compatible build_file_generation example was moved to the bzlmod_build_file_generation example.\r\n\r\nThis should fix the automatic build/release of the gazelle BCR module.",
    "head_branch": "fix.bzlmod.gazelle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(bzlmod+gazelle): update BCR release presubmit to use correct example (#1264)\n\nThe bzlmod-compatible build_file_generation example was moved to the\nbzlmod_build_file_generation example.\n\nThis should fix the automatic build/release of the gazelle BCR module."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210237ac254a19ac28f5cc",
    "number": 1259,
    "body": "This makes rules_python always provide a default toolchain when using\r\nbzlmod.\r\n\r\nNote that, unlike workspace builds, the default is not the local\r\nsystem Python (`@bazel_tools//tools/python:autodetecting_toolchain`).\r\n\r\nInstead, the default is a hermetic runtime, but no guarantees are made\r\nabout the particular version used. In practice, it will be the latest\r\navailable Python version.\r\n\r\nWork towards #1233",
    "head_branch": "register.default.toolchain",
    "is_a_fork": true,
    "comments": [
      "Note this is stacked atop #1258, so if you look at the diff, select the commits after the `feat(bzlmod): Remove ability to specify toolchain repo name` commit. It'll give a cleaner diff. Or just wait until 1258 is merged and that diff base goes away",
      "LGTM, but waiting on #1233.",
      "@rickeylev I put the PR into draft so it does not get accidentally merged.",
      "@rickeylev we need to update the readme and also check the bzlmod.md",
      "What in those files needs to be updated? I don't see mentions about registering toolchains.\r\n\r\nThe release notes mention it; i'm updating that now.",
      "Oh, I see the section in the readme. I'll tweak that text a bit",
      "PTAL",
      "PTAL, added the reference to the issue about the bootstrap needing a local python"
    ],
    "commit_messages": [
      "feat(bzlmod): Register a default toolchain (#1259)\n\nThis makes rules_python always provide a default toolchain when using\nbzlmod.\n\nNote that, unlike workspace builds, the default is not the local\nsystem Python (`@bazel_tools//tools/python:autodetecting_toolchain`).\n\nInstead, the default is a hermetic runtime, but no guarantees are made\nabout the particular version used. In practice, it will be the latest\navailable Python version.\n\nWork towards #1233"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210238ac254a19ac28f5cd",
    "number": 1258,
    "body": "The main reasons this is removed is because if modules choose different names for the same toolchain, only one of the two toolchains (which are, hopefully, identical) will be used. Which toolchain is used depends on the module graph dependency ordering.\r\n\r\nFurthermore, as of #1238, only one repo per version is created; others are ignored. This means a module doesn't know if the name it chooses will result in a repo being created with that name.\r\n\r\nInstead, the toolchain repos are named by rules_python: `python_{major}_{minor}`. These repo names are currently part of the public API, since they end up referenced in MODULE config (to wire the toolchain interpreter to pip).\r\n\r\nBREAKING CHANGES\r\n\r\nThis removes the `name` arg from `python.toolchain()`. Users will need to remove such usages from their `MODULE.bazel` and update their `use_repo()` statements. If keeping the custom repo name is necessary, then repo mappings can be used. See #1232 for additional migration steps, commands, and information.",
    "head_branch": "bzlmod.rm.name.arg",
    "is_a_fork": true,
    "comments": [
      "CI go boom 😂",
      "CI fixed"
    ],
    "commit_messages": [
      "fix(bzlmod)!: Remove ability to specify toolchain repo name. (#1258)\n\nThe main reasons this is removed is because if modules choose different\nnames for the same toolchain, only one of the two toolchains (which are,\nhopefully, identical) will be used. Which toolchain is used depends on\nthe module graph dependency ordering.\n\nFurthermore, as of #1238, only one repo per version is created; others\nare ignored. This means a module doesn't know if the name it chooses\nwill result in a repo being created with that name.\n\nInstead, the toolchain repos are named by rules_python:\n`python_{major}_{minor}`. These repo names are currently part of the\npublic API, since they end up referenced in MODULE config (to wire the\ntoolchain interpreter to pip).\n\nBREAKING CHANGES\n\nThis removes the `name` arg from `python.toolchain()`. Users will need\nto remove such usages from their `MODULE.bazel` and update their\n`use_repo()` statements. If keeping the custom repo name is necessary,\nthen repo mappings can be used. See #1232 for additional migration\nsteps, commands, and information."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210239ac254a19ac28f5ce",
    "number": 1257,
    "body": "The main reasons this is removed is because if modules choose different names for the same toolchain, only one of the two toolchains (which are, hopefully, identical) will be used. Which toolchain is used depends on the module graph dependency ordering.\r\n\r\nFurthermore, as of #1238, only one repo per version is created; others are ignored. This means a module doesn't know if the name it chooses will result in a repo being created with that name.\r\n\r\nInstead, the toolchain repos are named by rules_python: `python_{major}_{minor}`.\r\n\r\nBREAKING CHANGES\r\n\r\nThis removes the `name` arg from `python.toolchain()`. Users will need to remove such usages from their `MODULE.bazel` and update their `use_repo()` statements. If keeping the custom repo name is necessary, then repo mappings can be used. See #1232 for additional migration steps, commands, and information.\r\n",
    "head_branch": "bzlmod.rm.name.arg",
    "is_a_fork": true,
    "comments": [
      "Something is wrong with this PR; it's not getting updates that i'm pushing. I'm going to close it and reopen another."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621023aac254a19ac28f5cf",
    "number": 1254,
    "body": "Implementing the capability to call pip bzlmod extension multiple times.  We can now call the pip extension with the same hub name multiple times.  This allows a user to have multiple different requirement files based on the Python version.\r\n\r\nWith workspace, we need incompatible aliases because you get @pip//tabulate or @pip_tabulate//:pkg.\r\nThe requirement() macro hides this, but changing the flag becomes a breaking change if you've manually referenced things. With bzlmod, though, the @pip_tabulate style isn't a realistic option (you'd have to use_repo everything, which is a huge pain).\r\n\r\nSo we have chosen to have `@pip//tabulate`.\r\n\r\nThis commit implements that capability for pip.parse to determine the Python version from programmatically\r\nthe provided interpreter.\r\n\r\nSee \r\n\r\nhttps://github.com/bazelbuild/rules_python/blob/76aab0f91bd614ee1b2ade310baf28c38695c522/python/extensions/pip.bzl#L88\r\n\r\nFor more in-depth implementation details.\r\n\r\nINTERFACE CHANGE::\r\n\r\n- pip.parse argument python_version is introduced but not required. When possible, it is\r\n  inferred.\r\n\r\nBREAKING CHANGE:\r\n  * `pip.parse()` extension: the `name` attribute is renamed `hub_name`. This is to reflect\r\n    that the user-provided name isn't unique to each `pip.parse()` call.   We now have a hub that is created, and each\r\n   pip.parse call creates a spoke.\r\n  * `pip.parse()` extension: the `incompatible_generate_aliases` arg is removed; behavior\r\n     has changed to assume it is always True.\r\n  *  `pip.parse()` calls are collected under the same `hub_name` to support multiple Python versions under the same resulting repo name (the hub name0.\r\n\r\n\r\nClose: #1229\r\n\r\n",
    "head_branch": "pip",
    "is_a_fork": true,
    "comments": [
      "couple quick comments (only skimmed half of it thus far):\r\n\r\nWe need to keep a non-versioned compile_pip_requirements() call around. It's testing that the non-versioned variant of the rule, the one that uses the default python version, is working. Similarly, we'll want a non-versioned usage in the module config.\r\n\r\nI see the pip extension is loading the hub? Originally we decided to avoid doing that, but I'm not strongly tied to that idea. Loading it will probably make life easier and we could mostly avoid having the interpreter extension as an intermediary if do, I think.\r\n\r\n",
      "@rickeylev we have a non versioned requirement call here: https://github.com/bazelbuild/rules_python/blob/28e15c2092a9512064e4b2a97a0fa3d1a83bc5ae/examples/bzlmod_build_file_generation/BUILD.bazel#L18\r\n\r\nIn regards to the hub dependency. We need to pass through the python default version, so I put that in the hub.  I can create a different repo rule and put it in there if you like.\r\n\r\nAlso, any idea for getting the python version from the interpreter? I could not figure out how to map that.",
      "> In regards to the hub dependency. We need to pass through the python default version, so I put that in the hub. I can create a different repo rule and put it in there if you like.\r\n\r\nI think we can leave it in the hub? I don't see a downside. The hub being loaded is an internal detail, so it doesn't change our API surface. The hub is small, so loading it is cheap. While the hub has some label references to the platform repos, loading the hub doesn't cause the platform repos to load, so its still cheap.\r\n\r\n> Also, any idea for getting the python version from the interpreter? I could not figure out how to map that.\r\n\r\nWhy does that need to be looked up? It'd be simple to put a label->version mapping in the hub, but I don't see why we'd use it.",
      "> [rickeylev] how is the python version-ness of whl_library working?\r\n\r\nAh I think I see it now: in extensions/pip.bzl, the version gets put into the `pip_name` variable.",
      "\r\n> Why does that need to be looked up? It'd be simple to put a label->version mapping in the hub, but I don't see why we'd use it.\r\n\r\nif we could look it up the user would not need to pass in a version. We need the version for creating the wheel aliases so we can do the select statement that joins hub -> pip alias -> pip\r\n\r\nI thought it was easy, but I need to turn a canonical label back to its original label. I could not figure it out.\r\n\r\n",
      "I was going to ask to remove the other bzlmod template because it's unused...but no, I don't think it actually is?\r\n\r\nSo, just to make sure I understand what's going on here. Please correct me where I'm wrong.\r\n\r\n* `@pip` is the bzlmod pip hub. It has aliases to the whl alias hubs (`@pip_pylint`).\r\n* `@pip_{38,39}` are the regular pip \"aliases\" hubs (i.e. the incompatible_generate_aliases=True thing). Each points to their particular `@pip_{ver}_pylint` repo. I think these are only of interest because they have a working entry point function? \r\n* `@pip_pylint` is the whl alias hub. It has select-based aliases pointing to the `@pip_{ver}_pylint` repos.\r\n* `@pip_38_pylint` is a whl_library. Finally, something concrete.\r\n\r\nIs the whl alias intermediary really necessary? I don't see why the bzlmod pip hub can't point directly to the underlying wheels. I'm fine with addressing this in a separate PR.\r\n\r\nI think the regular pip hubs, e.g. `@pip_38`, are only around because they have a working entry point function, right? That's fine if so; just making sure I understand why they're here.",
      "> Something I didn't see (it must be hidden in the pip repo rules somewhere?) is where the python-version-specific-ness of the `whl_library` repos are. How is that being done?\r\n> \r\n> I was expecting to see something that generated a repo named e.g. \"pip_tabulate_3_10\", and it would have all the tabulate files in it for Python 3.10. And then \"pip_tabuleate_3_9\" for 3.9 etc.\r\n> \r\n> But i don't see code that puts the version in any repo name. But the pip alias repo is using select() to dispatch to other repos (right?). Any idea how things are wired together in this regard?\r\n\r\nSo because I am reusing how pip and multiple work, we are getting those repositories.  We have a pip-hub -> pip-whl-alias (which has the selects) -> pip versioned whl.\r\n\r\ncc: @rickeylev ",
      "> I was going to ask to remove the other bzlmod template because it's unused...but no, I don't think it actually is?\r\n> \r\n> So, just to make sure I understand what's going on here. Please correct me where I'm wrong.\r\n> \r\n> * `@pip` is the bzlmod pip hub. It has aliases to the whl alias hubs (`@pip_pylint`).\r\n> * `@pip_{38,39}` are the regular pip \"aliases\" hubs (i.e. the incompatible_generate_aliases=True thing). Each points to their particular `@pip_{ver}_pylint` repo. I think these are only of interest because they have a working entry point function?\r\n> * `@pip_pylint` is the whl alias hub. It has select-based aliases pointing to the `@pip_{ver}_pylint` repos.\r\n> * `@pip_38_pylint` is a whl_library. Finally, something concrete.\r\n> \r\n> Is the whl alias intermediary really necessary? I don't see why the bzlmod pip hub can't point directly to the underlying wheels. I'm fine with addressing this in a separate PR.\r\n> \r\n> I think the regular pip hubs, e.g. `@pip_38`, are only around because they have a working entry point function, right? That's fine if so; just making sure I understand why they're here\r\n\r\nWe can probably improve the code more, but I would like to do that by iterating on the code.  This is how, currently, multiple Python versions work, with the addition of a hub.  So I wanted to keep the code as close as possible.\r\n\r\nWe need a hub -> alias (with the selects) -> Python versioned pip.  I'm guessing that we could combine these some to reduce the number of repos, but I wanted to get something out that I can guarantee works.  Just getting this working took a bunch of time.\r\n\r\nTake a read of the documentation that I updated here: https://github.com/bazelbuild/rules_python/blob/76aab0f91bd614ee1b2ade310baf28c38695c522/python/extensions/pip.bzl#L88\r\n\r\ncc: @rickeylev ",
      "> Hm, I wonder if part of the solution to the multi-pip issue is to not load e.g. `@pip_39//:requirements.bzl`, but instead load `@pip//3.9:requirements.bzl`. Similar to what is done with `@python_aliases`.\r\n\r\nFor what @rickeylev? For entrypoint?",
      "@aignas do you mind taking a look?  This is another big PR and I would love another set of eyes."
    ],
    "commit_messages": [
      "feat(bzlmod)!: Calling pip multiple times allowing for multiple Python versions (#1254)\n\nImplementing the capability to call pip bzlmod extension multiple times.\nWe can now call the pip extension with the same hub name multiple times.\nThis allows a user to have multiple different requirement files based on\nthe Python version.\n\nWith workspace, we need incompatible aliases because you get\n@pip//tabulate or @pip_tabulate//:pkg.\nThe requirement() macro hides this, but changing the flag becomes a\nbreaking change if you've manually referenced things. With bzlmod,\nthough, the @pip_tabulate style isn't a realistic option (you'd have to\nuse_repo everything, which is a huge pain).\n\nSo we have chosen to have `@pip//tabulate`.\n\nThis commit implements that capability for pip.parse to determine the\nPython version from programmatically\nthe provided interpreter.\n\nSee \n\n\nhttps://github.com/bazelbuild/rules_python/blob/76aab0f91bd614ee1b2ade310baf28c38695c522/python/extensions/pip.bzl#L88\n\nFor more in-depth implementation details.\n\nINTERFACE CHANGE::\n\n- pip.parse argument python_version is introduced but not required. When\npossible, it is\n  inferred.\n\nBREAKING CHANGE:\n* `pip.parse()` extension: the `name` attribute is renamed `hub_name`.\nThis is to reflect\nthat the user-provided name isn't unique to each `pip.parse()` call. We\nnow have a hub that is created, and each\n   pip.parse call creates a spoke.\n* `pip.parse()` extension: the `incompatible_generate_aliases` arg is\nremoved; behavior\n     has changed to assume it is always True.\n* `pip.parse()` calls are collected under the same `hub_name` to support\nmultiple Python versions under the same resulting repo name (the hub\nname0.\n\n\nClose: #1229"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621023bac254a19ac28f5d0",
    "number": 1252,
    "body": "Before this PR the `coverage_tool` automatically registered by `rules_python`\nwas visible outside the toolchain repository. This fixes it to be consistent\nwith `non-bzlmod` setups and ensures that the default `coverage_tool` is not\nvisible outside the toolchain repos.\n\nThis means that the `MODULE.bazel` file can be cleaned-up at the expense of\nrelaxing the `coverage_tool` attribute for the `python_repository` to be a\nsimple string as the label would be evaluated within the context of\n`rules_python` which may not necessarily resolve correctly without the\n`use_repo` statement in our `MODULE.bazel`.\n",
    "head_branch": "chore/refactor-coverage-deps",
    "is_a_fork": true,
    "comments": [
      "@fmeum, do you have an idea of why the \"friendly\" name of the coverage tool does not work in this case when registering the toolchain? It does work for specifying the visibility, but it does not work for passing the label to the toolchain repository rule.\n",
      "@rickeylev gentle ping to get it merged if all looks good.",
      "@rickeylev is ooo. \r\n\r\n> Can you please delete coverage_deps.bzl#install_coverage_deps? It looks unused.\r\n\r\nDouble checking you did. And I will merge tomorrow for you"
    ],
    "commit_messages": [
      "fix(toolchain): restrict coverage tool visibility under bzlmod (#1252)\n\nBefore this PR the `coverage_tool` automatically registered by\n`rules_python`\nwas visible outside the toolchain repository. This fixes it to be\nconsistent\nwith `non-bzlmod` setups and ensures that the default `coverage_tool` is\nnot\nvisible outside the toolchain repos.\n\nThis means that the `MODULE.bazel` file can be cleaned-up at the expense\nof\nrelaxing the `coverage_tool` attribute for the `python_repository` to be\na\nsimple string as the label would be evaluated within the context of\n`rules_python` which may not necessarily resolve correctly without the\n`use_repo` statement in our `MODULE.bazel`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621023cac254a19ac28f5d1",
    "number": 1251,
    "body": "This allows the `distribution` attribute to expand workspace status keys, just as the\r\n`version` attribute can.\r\n\r\nThis allows, for example, the VCS's branch name (e.g test, release, etc) to be part of the\r\ndistribution name without having to modify the BUILD file. Having distinct distribution\r\nnames is necessary because tools like pip-compile, which determine version compatibility\r\nand replacements, and having the same distribution name would mean the different builds\r\nare seen as equivalent.\r\n\r\nCloses #1250",
    "head_branch": "add-variable-for-distribution",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1251/checks?check_run_id=14024931607) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "@ns-tkonduri can you sign the CLA?",
      "@chrislovecnm I just signed it. Thank you.\r\nCan you please review the PR and suggest changes for my feature request: https://github.com/bazelbuild/rules_python/issues/1250",
      "You need to run the doc update target please.",
      "@chrislovecnm @rickeylev I have updated the PR with my changes and the github checks are passing, Can you please review the changes? Thanks.",
      "@rickeylev I prepared these unit tests wheelmaker_test.py (file is in the PR) which I tested locally and it's working but I found no framework for hooking this into the builds, and also I looked for some sort of end-to-end test that I can piggyback on to enhance this logic, but could not find that either. So this seems like more of an effort than simply adding unit tests, for this, I will require to add a framework that exceeds my expertise as a new contributor like me to the project.",
      "Ah, sorry -- I should have pointed you more explicitly to what I had in mind. Thanks for creating `wheelmaker_test.py`, but you can delete that -- apparently we don't have any unit tests of that code; I'm not going require you to have to establish that from scratch.\r\n\r\nInstead:\r\n\r\nMost of py_wheel is tested using `examples/py_wheel/BUILD.bazel`. The basic structure is a `py_wheel` is defined, added as a data dependency to `:wheel_test`, and then `wheel_test.py` has code to load the file and assert on the contents.\r\n\r\nFor an example, see `:minimal_with_py_library_with_stamp`, and its corresponding test `test_rule_sets_stamped_version_in_wheel_metadata`. This is the test for the expansion of the version attribute.\r\n\r\nWhat I would suggest is either modifying the `:minimal_with_py_library_with_stamp` target and test to set e.g. `distribution=\"example_minimal_library.user_{BUILD_USER}\"` and just check that the output matches \"user_XXX\" where XXX isn't `{BUILD_USER}` (we need to test that the expansion occurred, but the value isn't stable).",
      "@rickeylev Thanks for pointing out the way you test.\r\nI updated the test case, but looks like there is some unrelated check that failed, can you please have a look and re-trigger it from your side?\r\n`Test the Gazelle extension using minimum supported Bazel version on :ubuntu: 20.04 LTS (OpenJDK 11, gcc 9.4.0)`",
      "Also: yes, that test is flaky; i retried and it passed.",
      "@rickeylev Thank you, I updated the test name, and all the checks are green now. \r\nCan you please help merge the PR as I don't have write access to this repository?"
    ],
    "commit_messages": [
      "feat: Adding variable support for distribution in py_wheel (#1251)\n\nThis allows the `distribution` attribute to expand workspace status\nkeys, just as the\n`version` attribute can.\n\nThis allows, for example, the VCS's branch name (e.g test, release, etc)\nto be part of the\ndistribution name without having to modify the BUILD file. Having\ndistinct distribution\nnames is necessary because tools like pip-compile, which determine\nversion compatibility\nand replacements, and having the same distribution name would mean the\ndifferent builds\nare seen as equivalent.\n\nCloses #1250"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621023dac254a19ac28f5d2",
    "number": 1249,
    "body": "Fixes #1196.\r\n\r\nCurrently the `coverage.py` module does not work if updated to the latest\r\nversion with the following error:\r\n```\r\nImportError: cannot import name 'MappingProxyType' from partially\r\ninitialized module 'types' (most likely due to a circular import)\r\n...~pypi__coverage_cp39_x86_64-unknown-linux-gnu/coverage/types.py)\r\n```\r\n\r\nWhere the `MappingProxyType` actually exists in Python's std lib. To fix,\r\nmodify sys.path before the first import of coverage.\r\n\r\nSummary:\r\n- chore(coverage): bump coverage.py to 7.2.7\r\n- fix(coverage): patch sys.path before importing anything from coverage\r\n- test(coverage): add extra assertions about the module names\r\n",
    "head_branch": "fix/coverage-import-shadow",
    "is_a_fork": true,
    "comments": [
      "@supercairos, could you please test this PR to see if it fixes the issue for you? I am thinking that the reason of why the `7.2.7` version of `coverage.py` was failing without updating the coverage patch was due to the same reason why you were observing `django` and `html` clash.\n",
      "Sure, could you do a tagged version on your branch so I can use the zip file directly from within Bazel ?"
    ],
    "commit_messages": [
      "fix(coverage): bump to latest coverage.py and fix import shadowing (#1249)\n\nFixes #1196.\n\nCurrently the `coverage.py` module does not work if updated to the\nlatest\nversion with the following error:\n```\nImportError: cannot import name 'MappingProxyType' from partially\ninitialized module 'types' (most likely due to a circular import)\n...~pypi__coverage_cp39_x86_64-unknown-linux-gnu/coverage/types.py)\n```\n\nWhere the `MappingProxyType` actually exists in Python's std lib. To\nfix,\nmodify sys.path before the first import of coverage.\n\nSummary:\n- chore(coverage): bump coverage.py to 7.2.7\n- fix(coverage): patch sys.path before importing anything from coverage\n- test(coverage): add extra assertions about the module names"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621023dac254a19ac28f5d3",
    "number": 1248,
    "body": "  Working on doing some cleanup of the pip_repository\r\n  and pip extension code. This refactor merges the two\r\n  seperate code paths we had for bzlmod vs. non-bzlmod\r\n  implementation.\r\n  \r\nThis commit also includes refactoring so that we do not\r\nhave multiple for loops over the same lists and other\r\ncode cleanup.",
    "head_branch": "pip-refactor",
    "is_a_fork": true,
    "comments": [
      "re: unifying the two styles of addressing the target: I suspect this has to do with repo visibility and the non-aliased code path.\r\n\r\nFrom what I can see, it looks like, in WORKSPACE style, doing `requirement(\"foo\")` with aliases disabled would up with `@pypi_foo//foo:pkg`. A direct translation of that to bzlmod would mean `@pypi_foo` would have to be `use_repo()`d, which doesn't generalize well. My point is: The `@pypi_foo`-style labels can't really be supported in bzlmod, so that style is workspace-specific.\r\n\r\nI think the only thing left do is make both impls use the same template, and that template is basically just the bzlmod template, i.e., it basically just does `\"%MACRO_TMPL%\".format(name, \"pkg\")`, and have the repo rule determine what `%MACRO_TMPL%` is.\r\n\r\nAs an aside, I don't immediately see why the bzlmod code has a non-alias based code path at all? It's always put into one repo, the only difference seems to be e.g. `@pypi//:foo_pkg` vs `@pypi//foo:pkg`; I don't grok why that difference matters.",
      "The foo_pkg convention was the initial convention, which meant that we had one big file with all of the aliases. foo:pkg convention was the best thing we could think of to support gazelle and bzlmod / non-bzlmod codebases at the same time and lastly, have a nice human readable label.",
      "@aignas, per your advice I choose to not remove the second template.  \r\n@rickeylev CI is failing with one of its usual fakes",
      "Sorry, looking at it now, I'm not really keen on this refactor overall. The reason I asked for separate bzlmod and workspace repo rules in the original PR is that they are almost entirely different implementations. They share a superficial structure, but have different attributes and internal logic. The net result is the implementation is basically a big if-else, and the rule definition itself carries several extra attributes. For example:\r\n\r\n* `macro_tmpl` is used in both cases, but has a unique value for each\r\n* The `all_whl_reqs_tmpl` variable is workspace-specific\r\n* `all_requirements` and `all_whl_requirements` are used in both cases, but each case\r\n  uses a separate algorithm to compute the value.\r\n* Both expand a template, but each has a different template, stored in a different attribute\r\n  that has different template variable names.\r\n\r\nOf the ~100 lines of code, they actually only share about three lines of code: calling `_pip_get_packages()`, checking the incompatible flag (which I'm still not convinced bzlmod even needs to do), and the call to write the build file; these are all very trivial lines.\r\n\r\n+1 to factoring out `_pip_get_packages`, but not so much on the rest.",
      "After the pip PR #1254 this PR does not make sense. But we do have some code we need to cleanup. The for loops in the templating integrate through packages multiple times.",
      "Closing as this refactor does not make complete sense with the pip changes "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621023eac254a19ac28f5d4",
    "number": 1247,
    "body": null,
    "head_branch": "bcr-multi-module",
    "is_a_fork": true,
    "comments": [
      "It seems that https://github.com/bazelbuild/bazel-central-registry/commit/02d356b65b613f688e3a4cf81a5406dd266103c7 does not include gazelle plugin changes. Did this work as intended?",
      "It created a second pull request for the gazelle module: https://github.com/bazelbuild/bazel-central-registry/pull/692"
    ],
    "commit_messages": [
      "chore: auto-publish gazelle module to BCR (#1247)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621023fac254a19ac28f5d5",
    "number": 1246,
    "body": "The generated toolchain BUILD file is confusing to read because it relies on a ternary expression in the BUILD file to set the `target_settings` attribute. This makes debugging harder because, upon first look, all the toolchains appear to have the version constraint set. It's only upon closer inspection that you can see the 1-character difference of \"False\" vs \"True\" embedded into the middle of a line amongst other similar looking lines.\r\n\r\nAlso:\r\n  * Adds a bit of validation logic for the `set_python_version_constraint` argument\r\n    because it's conceptually a boolean, but is passed as a string, so is prone to\r\n    having an incorrect value passed.\r\n  * Documents the `set_python_version_constraint` arg, since it has a particular range\r\n    of values it accepts.\r\n",
    "head_branch": "cleanup.toolchain.template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: Set toolchain target_setting directly instead of via inline ternary (#1246)\n\nThe generated toolchain BUILD file is confusing to read because it\nrelies on a ternary expression in the BUILD file to set the\n`target_settings` attribute. This makes debugging harder because, upon\nfirst look, all the toolchains appear to have the version constraint\nset. It's only upon closer inspection that you can see the 1-character\ndifference of \"False\" vs \"True\" embedded into the middle of a line\namongst other similar looking lines.\n\nAlso:\n* Adds a bit of validation logic for the `set_python_version_constraint`\nargument\nbecause it's conceptually a boolean, but is passed as a string, so is\nprone to\n    having an incorrect value passed.\n* Documents the `set_python_version_constraint` arg, since it has a\nparticular range\n    of values it accepts."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210240ac254a19ac28f5d6",
    "number": 1245,
    "body": "The documentation is currently ambiguous on whether or not to check requirements.txt into version control. This has raised some confusion in other projects (e.g., https://github.com/google/gematria/pull/3). This makes it clear that requirements.txt files produced by this rule should be checked into version control in an easy to find place to avoid confusion.\r\n",
    "head_branch": "add-note-compile-requirements-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs(compile_pip_requirements): Add note on requirements.txt VC (#1245)\n\nThe documentation is currently ambiguous on whether or not to check\nrequirements.txt into version control. This has raised some confusion in\nother projects (e.g., https://github.com/google/gematria/pull/3). This\nmakes it clear that requirements.txt files produced by this rule should\nbe checked into version control in an easy to find place to avoid\nconfusion."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210241ac254a19ac28f5d7",
    "number": 1244,
    "body": "This fixes an issue where the last submodule, instead of the first, was given precedence when creating versioned toolchains. To fix, when creating the map of versioned toolchains, if a version is already defined, then a subsequent usage is ignored. A warning is emitted when this occurs.\r\n\r\nThis also fixes a similar problem that can occur to the root module. If the root module uses a particular version marked as the default, and is using the versioned rules, and a submodule also uses that same version, then the submodule's toolchain would be used. This happened because the root module's toolchain would be moved last, so its versioned rules would match the submodule's versioned toolchain.\r\n\r\nThis also does some cleanup and refactoring to:\r\n  * Compute the toolchains in one loop iteration\r\n  * Give more informative error messages\r\n  * Reject duplicate names within a module, even for the non-root module.\r\n  * Reject duplicate versions within a module.",
    "head_branch": "cleanup.toolchain.logic",
    "is_a_fork": true,
    "comments": [
      "re: testing: Yeah, I feel bad because I don't have tests. Since we're bumping up so close to the bazel ci job limits, and there's a decent amount esoteric cases we have to cover for the MODULE configs, I think we'll have to resort to bazel-in-bazel tests.\r\n\r\nWe're going to have to switch over to using https://github.com/bazel-contrib/rules_bazel_integration_test at some point, so maybe I can try using that to test this to see how it'll go."
    ],
    "commit_messages": [
      "fix(bzlmod): give precedence to the first seen versioned toolchain (#1244)\n\nThis fixes an issue where the last submodule, instead of the first, was\ngiven precedence when creating versioned toolchains. To fix, when\ncreating the map of versioned toolchains, if a version is already\ndefined, then a subsequent usage is ignored. A warning is emitted when\nthis occurs.\n\nThis also fixes a similar problem that can occur to the root module. If\nthe root module uses a particular version marked as the default, and is\nusing the versioned rules, and a submodule also uses that same version,\nthen the submodule's toolchain would be used. This happened because the\nroot module's toolchain would be moved last, so its versioned rules\nwould match the submodule's versioned toolchain.\n\nThis also does some cleanup and refactoring to:\n  * Compute the toolchains in one loop iteration\n  * Give more informative error messages\n* Reject duplicate names within a module, even for the non-root module.\n  * Reject duplicate versions within a module."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210242ac254a19ac28f5d8",
    "number": 1243,
    "body": "Because `--experimental_python_import_all_repositories` defaults to true, every repository's directory is added to `sys.path`, which makes `import python.runfiles` work.\r\n\r\nHowever, we shouldn't rely on that behavior for a couple reasons:\r\n  * We recommend disabling it for fewer sys.path entries (even non-Python related\r\n    repos get added to the path).\r\n  * Some users _must_ disable it because the resulting PYTHONPATH is too long.\r\n\r\nTo fix, set the `imports` attribute on `//python/runfiles:runfiles` so that `import python.runfiles` works. The net result is the `rules_python` repo directory is added\r\nto sys.path even if `--experimental_python_import_all_repositories=false`.\r\n\r\nFixes #1241",
    "head_branch": "fix.runfiles.without.repo.on.path.flag",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: make `import python.runfiles` work with `--experimental_python_import_all_repositories=false` (#1243)\n\nBecause `--experimental_python_import_all_repositories` defaults to\ntrue, every repository's directory is added to `sys.path`, which makes\n`import python.runfiles` work.\n\nHowever, we shouldn't rely on that behavior for a couple reasons:\n* We recommend disabling it for fewer sys.path entries (even non-Python\nrelated\n    repos get added to the path).\n* Some users _must_ disable it because the resulting PYTHONPATH is too\nlong.\n\nTo fix, set the `imports` attribute on `//python/runfiles:runfiles` so\nthat `import python.runfiles` works. The net result is the\n`rules_python` repo directory is added\nto sys.path even if\n`--experimental_python_import_all_repositories=false`.\n\nFixes #1241"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210242ac254a19ac28f5d9",
    "number": 1240,
    "body": "Gazelle v0.31.0 comes with a lifecycle manager for extension, allowing the Python extension to properly shut down external Python processes without relying on timer.\r\n\r\nUpgrading Gazelle in this PR. Using the lifecycle manager will come next.\r\n",
    "head_branch": "upgrade_gazelle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "build: Upgrade Gazelle to v0.31.0 (#1240)\n\nGazelle v0.31.0 comes with a lifecycle manager for extension, allowing\nthe Python extension to properly shut down external Python processes\nwithout relying on timer.\n\nUpgrading Gazelle in this PR. Using the lifecycle manager will come\nnext."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210243ac254a19ac28f5da",
    "number": 1238,
    "body": "This commit moves the register.toolchains bzlmod call to inside\r\nof rules_python.  Instead of a user having to call register.toolchains\r\nin their MODULE.bazel, rules_python/MODULE.bazel calls it\r\non the internal hub.\r\n\r\nThis is a breaking change if you are using register.toolchains inside\r\nof submodules.  Using register.toolchains inside of submodules is\r\nnot recommended anyways.  This is now broken because we are not\r\ncreating a repo for every Python version toolchain.  All of the\r\ntoochain calls exist now in the hub's repo BUILD.bazel file.",
    "head_branch": "toolchain-hub",
    "is_a_fork": true,
    "comments": [
      "Related to: #1233",
      "re: breaking change: I don't think it's a breaking change? I think modules are executed in bread-first order, so a submodule's register_toolchain() calls will happen before rule_python's, giving the sub module precedence.\r\n\r\nre: the logic creating the snippets of `toolchain()` BUILD file content: This code is pretty awkward as-is. How about having `python_register_toolchain()` return a struct of values? Then pass that along to `hub_repo()`. The hub_repo function can then pick the final name more directly (i.e. adding the \"xxxx_\" prefix), and easily omit the version-constraint argument to construct the final default toolchain.",
      "@rickeylev passing datas into the build rule was getting messy.  That is why I chose just to pass in a string, not ideal, but we can also test what is creating the string."
    ],
    "commit_messages": [
      "feat(bzlmod): Moving register.toolchains internal (#1238)\n\nThis commit moves the register.toolchains bzlmod call to inside\nof rules_python.  Instead of a user having to call register.toolchains\nin their MODULE.bazel, rules_python/MODULE.bazel calls it\non the internal hub.\n\nThis is a breaking change if you are using register.toolchains inside\nof submodules.  Using register.toolchains inside of submodules is\nnot recommended anyways.  This is now broken because we are not\ncreating a repo for every Python version toolchain.  All of the\ntoochain calls exist now in the hub's repo BUILD.bazel file."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210244ac254a19ac28f5db",
    "number": 1235,
    "body": "For certain workflows it is useful to calculate the integrity hash of\nthe manifest file based on a number of requirements files. The\nrequirements locking is usually done by executing a script on each\nplatform and having gazelle manifest generator be aware that more than\none requirements file may affect the outcome (e.g. the wheels that get\npassed to modules map may come from `multi_pip_parse` rule) is generally\nuseful.\n\nThis change modifies the `generator` to support multiple\n`--requirements` flag specification and uses all files that got passed\nto generate the final integrity hash.\n\nNOTE: This may require users to regenerate the `gazelle_python.yaml` files due\nto a change in integrity, otherwise this is a backwards compatible change.\n",
    "head_branch": "feat/gazelle/support-multiple-requirements",
    "is_a_fork": true,
    "comments": [
      "This is probably not the best way, because we can use multiple requirements file and a `genrule` to generate a single requirements file that can be used in this function. That way the `hash` will change whenever any of the input requirements files changes, but we will be still correct. We can also strip away the comments for them to not affect the hash value."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210245ac254a19ac28f5dc",
    "number": 1234,
    "body": "This is being added in order to once again be able to build envoyproxy on the `ppc64le` architecture. \r\n\r\nLittle Endian Power support was added to release https://github.com/indygreg/python-build-standalone/releases/tag/20230507.",
    "head_branch": "add-ppc64le-pystandalone",
    "is_a_fork": true,
    "comments": [
      "There are tests failing that I'll fix ASAP, but wanted to drop this out here. For background: https://github.com/envoyproxy/envoy/issues/25090\r\n",
      "@clnperez I converted your PR to a draft.  Hope you don't mind",
      "I had completely forgotten that bazel uses `ppc` for `ppc64le`. Should be good to review now",
      "@rickeylev can you take a look?",
      "@clnperez you check that this ran on a ppc box?",
      "@clnperez ping",
      "sorry @chrislovecnm! i hadn't tested this iteration of it but am working on it. was also on vacation all last week after the long weekend. will update asap",
      "@chrislovecnm i'm having a little trouble with the tests now. they're not running on my power dev vm, or my laptop (x86 fedora). .\r\n\r\n on my power system (running ubuntu 20 with python 3.8, which is a limitation unless i move to a power10 system):\r\n```\r\n$ bazel test ...\r\nERROR: Failed to load Starlark extension '@publish_deps//:requirements.bzl'.\r\nCycle in the workspace file detected. This indicates that a repository is used prior to being defined.\r\nThe following chain of repository dependencies lead to the missing definition.\r\n - @publish_deps\r\n - @python_3_11_1_ppc64le-unknown-linux-gnu\r\nThis could either mean you have to add the '@python_3_11_1_ppc64le-unknown-linux-gnu' repository with a statement like `http_archive` in your WORKSPACE file (note that transitive dependencies are not added automatically), or move an existing definition earlier in your WORKSPACE file.\r\nINFO: Repository publish_deps instantiated at:\r\n  /home/christy/go/src/github.com/bazelbuild/rules_python/WORKSPACE:78:10: in <toplevel>\r\n  /home/christy/go/src/github.com/bazelbuild/rules_python/python/pip.bzl:155:19: in pip_parse\r\nRepository rule pip_repository defined at:\r\n  /home/christy/go/src/github.com/bazelbuild/rules_python/python/pip_install/pip_repository.bzl:621:33: in <toplevel>\r\nERROR: Error computing the main repository mapping: cycles detected during computation of main repo mapping\r\n```\r\n\r\nthey ran on my laptop before, and also ran & passed the CI checks. i'm wondering if they would fail here now too. is there a /retest or something similar for PRs here?",
      "If you push an empty commit it will run CI again",
      "ok, so after a few flakes, the CI checks still all pass. so maybe something is out of sync with my python env. i'm running using `pyenv shell 3.11.3`. all of the tests under `examples` seem to fail for me.\r\n\r\nthis is on my laptop on the main branch:\r\n\r\n `bazel test //examples:build_file_generation_example`\r\n\r\n```ERROR: An error occurred during the fetch of repository 'pip':\r\n   Traceback (most recent call last):\r\n        File \"/home/christy/.cache/bazel/_bazel_christy/ade38aff5a9e992d543725054f5ad7bc/sandbox/linux-sandbox/7/execroot/rules_python/_tmp/bd91c438619ed9704ba82a0174e067d0/_bazel_christy/1ac2fd8ffc8aee81172a2dcc32a2cc64/external/rules_python/python/pip_install/pip_repository.bzl\", line 485, column 18, in _pip_repository_impl\r\n                rctx.template(\"requirements.bzl\", rctx.attr._template, substitutions = {\r\nError in template: Not a regular file: /home/christy/.cache/bazel/_bazel_christy/ade38aff5a9e992d543725054f5ad7bc/sandbox/linux-sandbox/7/execroot/rules_python/_tmp/bd91c438619ed9704ba82a0174e067d0/_bazel_christy/1ac2fd8ffc8aee81172a2dcc32a2cc64/external/rules_python/python/pip_install/pip_repository_requirements.bzl.tmpl\r\n```\r\n\r\nany ideas @chrislovecnm ? are these examples tests supposed to pass? ",
      "@clnperez I usually let CI run those tests. You may want to look at the cli options we are using a n CI",
      "i see. it looks like the CI runs them from their respective directories, not from the top level. doing that works for all the examples tests locally. would it be worth a quick PR to the `CONTRIBUTING.md` page to either mention to check CI (`bazelci/presubmit.yml)`, or, run those tests that way (or both)? ",
      "It looks like those tests are already broken; not sure when they broke. CI doesn't run them because they're have `tags=[integration-test]`, which CI ignores (it runs them as their own workspaces instead, which works). I think we can just delete those since CI runs them directly. In any case, its unrelated to your change.",
      "hey @rickeylev -- thanks for merging -- but I think there's still something wrong. i did get the tests running on my laptop but never got them working on my power vm. since it's not breaking anything (power didn't have support before), i don't think we ~should~ have to revert this. i'll most likely need to open a followon pr when i figure out how to get the repository rule created for power (see https://github.com/bazelbuild/rules_python/pull/1234#issuecomment-1579612924)\r\n\r\nif you happen to have any tips, i'd love some help"
    ],
    "commit_messages": [
      "feat: add ppc64le releases and update to 3.10.11, 3.11.3 for python-build-standalone (#1234)\n\nThis is being added in order to once again be able to build envoyproxy\non the `ppc64le` architecture.\n\nLittle Endian Power support was added to release\nhttps://github.com/indygreg/python-build-standalone/releases/tag/20230507.\n\nSigned-off-by: Christy Norman <christy@linux.vnet.ibm.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210246ac254a19ac28f5dd",
    "number": 1231,
    "body": "Fixes the incorrect debug statement when downloading the toolchain for the first\ntime asking users to replace \"urls\" with \"url\" in the toolchain definition which\nwe maintain:\n```\n$ bazel build ...\n... indicated that a canonical reproducible form can be obtained by modifying ...\n```\n\nEven though this is seen only once by the user, it may confuse them.\n\nSummary of changes:\n- refactor(toolchain): rename a local variable url -> urls\n- fix(toolchain): set url return attrs correctly\n",
    "head_branch": "fix/urls-debug",
    "is_a_fork": true,
    "comments": [
      "Looks like https://buildkite.com/bazel/rules-python-python/builds/4855#0188271d-8328-4162-865b-df228a71e1ce is a flake that I have not seem before."
    ],
    "commit_messages": [
      "fix(toolchain): set correct return attrs to remove non-hermeticity warning (#1231)\n\nFixes the incorrect debug statement when downloading the toolchain for\nthe first\ntime asking users to replace \"urls\" with \"url\" in the toolchain\ndefinition which\nwe maintain:\n```\n$ bazel build ...\n... indicated that a canonical reproducible form can be obtained by modifying ...\n```\n\nEven though this is seen only once by the user, it may confuse them.\n\nSummary of changes:\n- refactor(toolchain): rename a local variable url -> urls\n- fix(toolchain): set url return attrs correctly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210246ac254a19ac28f5de",
    "number": 1230,
    "body": "We do this work for two reasons.\r\n\r\nFirst, we must support Module dependencies and sub-modules using `python.toolchain`. There are already two known instances of sub-modules setting up a Python toolchain and colliding with another module (nanobind and rules_testing both run into this).\r\n\r\nSecond, the upcoming multi-version support is going to work by having each `python.toolchain()` call register its particular version with the extra toolchain constraint. This also helps unify the version-aware and non-version-aware code paths (the non-version aware paths are just version-aware with a single version registered as the default)\r\n\r\nThis commit implements various business logic in the toolchain class.\r\n\r\nToolchains in Sub Modules\r\n\r\nIt will create a toolchain in a sub-module if the toolchain\r\nof the same name does not exist in the root module.  The extension stops name\r\nclashing between toolchains in the root module and sub-modules.\r\nYou cannot configure more than one toolchain as the default toolchain.\r\n\r\nToolchain set as the default version.\r\n\r\nThis extension will not create a toolchain in a sub-module\r\nif the sub-module toolchain is marked as the default version.  If you have\r\nmore than one toolchain in your root module, you need to set one of the\r\ntoolchains as the default version.  If there is only one toolchain, it\r\nis set as the default toolchain.\r\n\r\nSee #1229 for more information",
    "head_branch": "multiple-toolchains",
    "is_a_fork": true,
    "comments": [
      "Mostly LGTM.\r\n\r\n> This extension will not create a toolchain in a sub-module if the sub-module toolchain is marked as the default version.\r\n> TODO: should we create the toolchain anyways,\r\n> but set the default version to False?\r\n\r\nYeah, I'm not sure about this. My main concern is, because the repo will sometimes exist and sometimes not, it'll cause headaches. There are two cases I have in mind:\r\n\r\nCase 1: Leaky development-only dependencies. I'm doing development. I add `python.toolchain(X, default=True); use_repo(X)`. I run my tests, things work. I deploy. My users break, because my `use_repo(X)` call fails -- X was never created. I _should_ have marked something dev_only=True, but forgot; instead of some extra work being done, things have broken.\r\n\r\nCase 2: Some non-dev-only reason you want the repo, but don't need it to be registered as a toolchain? I don't know what this reason would be....Aha -- won't pip.parse stop working? For example, my module might have a tool, and my tool has dependencies, which it gets through pip.parse() and python_interpreter_target, so the toolchain repo has to be available.\r\n\r\nOk, yeah, I think we need the repo to be created. Just don't let it be registered as a toolchain when we move the register_toolchains() call into rules_python itself. So in this PR, create the repo. In the PR when we refactor where register_toolchains() is called, update the logic to respect this.\r\n\r\nThis does expose another issue, though: the submodule will use pip.parse() with one interpreter, but its py_binary targets might end up using a different one through toolchain resolution. I think the best we can do here is provide a \"default interpreter\" repo, so that the sub-module has a way to pass the same interpreter the default toolchain will use into its pip.parse calls. (Something for another PR, though). A default-interpreter repo might also simplify how much config the user has to do in their MODULE file? Haven't thought deeply here.\r\n\r\ncc @fmeum as a second pair of eyes on my thinking here.\r\n\r\n> If you have more than one toolchain in your root module, you need to set one of the\r\n> toolchains as the default version.\r\n\r\nFor posterity, recap of the convo Chris and I had:\r\n\r\nHaving a dependency allowed to change your Python version is bad because that dependency might be far away. A consumer might unexpectedly change their version updating a seemingly unrelated dependency. A producer might inadvertently break someone changing their python version. Neither has a good insight into the transitive effects.\r\n\r\nWe talked about the idea of taking the highest version of any toolchains marked default -- we rejected this idea for two reasons. The first is the same rationale as above. The second is: if you're introducing a new python version to a large project, it's beneficial to get the toolchain setup and installed, but leave it in an unused-by-default state. This allows work to progress to test and validate things incrementally. When you're finally ready, you can switch the default.",
      "So this PR is passing CI now, besides a known OSX flake.  For some reason, I am getting an error locally on Windows that I saw in a flake earlier.  Moreover, the example/bzlmod/.bazelrc did not enable Windows symlinks, so it should not have passed CI.  I am confused. cc: @rickeylev @aignas \r\n\r\nI have tried:\r\n\r\n```\r\nbazelisk.exe --output_user_root=C:/b build ...\r\n```\r\nand\r\n\r\n```\r\n bazelisk.exe --output_user_root=C:/b build --flaky_test_attempts=3 --local_test_jobs=8 --show_progress_rate_limit=5 --curses=yes --color=yes --terminal_columns=143 --show_timestamps --verbose_failures --jobs=30 --announce_rc --experimental_repository_cache_hardlinks --disk_cache= --sandbox_debug --subcommands=pretty_print ...\r\n```\r\n\r\nAnd I am getting:\r\n\r\n```\r\nERROR: An error occurred during the fetch of repository 'rules_python~override~pip~pip_requests':\r\n   Traceback (most recent call last):\r\n        File \"C:/b/r4du22do/external/rules_python~override/python/pip_install/pip_repository.bzl\", line 705, column 13, in _whl_library_impl\r\n                fail(\"whl_library %s failed: %s (%s)\" % (rctx.attr.name, result.stdout, result.stderr))\r\nError in fail: whl_library rules_python~override~pip~pip_requests failed:  ()\r\nERROR: <builtin>: fetching whl_library rule @rules_python~override//python/extensions:rules_python~override~pip~pip_requests: Traceback (most recent call last):\r\n        File \"C:/b/r4du22do/external/rules_python~override/python/pip_install/pip_repository.bzl\", line 705, column 13, in _whl_library_impl\r\n                fail(\"whl_library %s failed: %s (%s)\" % (rctx.attr.name, result.stdout, result.stderr))\r\nError in fail: whl_library rules_python~override~pip~pip_requests failed:  ()\r\nERROR: C:/b/r4du22do/external/rules_python~override~pip~pip/BUILD.bazel:286:6: @rules_python~override~pip~pip//:requests_pkg depends on @rules_python~override~pip~pip_requests//:pkg in repository @rules_python~override~pip~pip_requests which failed to fetch. no such package '@rules_python~override~pip~pip_requests//': whl_library rules_python~override~pip~pip_requests failed:  ()\r\nERROR: Analysis of target '//:all_requirements_14__deps' failed; build aborted:\r\n```\r\n",
      "Thanks for the review, @aignas. We're going to leave the aesthetics stuff for a separate PR so we can get this base functionality merged. There's still several functional pieces we need to get done to make the bzlmod support actually usable."
    ],
    "commit_messages": [
      "feat(bzlmod): Allowing multiple python.toolchain extension calls (#1230)\n\nWe do this work for two reasons.\n\nFirst, we must support Module dependencies and sub-modules using\n`python.toolchain`. There are already two known instances of sub-modules\nsetting up a Python toolchain and colliding with another module\n(nanobind and rules_testing both run into this).\n\nSecond, the upcoming multi-version support is going to work by having\neach `python.toolchain()` call register its particular version with the\nextra toolchain constraint. This also helps unify the version-aware and\nnon-version-aware code paths (the non-version aware paths are just\nversion-aware with a single version registered as the default)\n\nThis commit implements various business logic in the toolchain class.\n\nToolchains in Sub Modules\n\nIt will create a toolchain in a sub-module if the toolchain\nof the same name does not exist in the root module. The extension stops\nname\nclashing between toolchains in the root module and sub-modules.\nYou cannot configure more than one toolchain as the default toolchain.\n\nToolchain set as the default version.\n\nThis extension will not create a toolchain in a sub-module\nif the sub-module toolchain is marked as the default version. If you\nhave\nmore than one toolchain in your root module, you need to set one of the\ntoolchains as the default version.  If there is only one toolchain, it\nis set as the default toolchain.\n\nSee #1229 for more information"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210247ac254a19ac28f5df",
    "number": 1227,
    "body": "Bazel has built-in support for zstd [since 5.1](https://github.com/bazelbuild/bazel/pull/15087). This simplifies the logic and makes python_repository work on systems where building from source fails.",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1227/checks?check_run_id=13497125851) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Thanks @f0rmiga! I'll obviously make CI pass before asking to merge.",
      "Can you please sync to head and resolve the merge conflicts?\r\n\r\nCI also reports there are failures, something relating to setting file permissions for a directory that doesn't exist? They failed even after retrying, so they're likely legit.",
      "@jiawen im going to mark this as a draft. When you have this passing CI please take it out of draft.",
      "My apologies - my day job got in the way. Draft sounds good - looks like I have some fun chmod issues to resolve.",
      "Argh, this PR uncovered some grungy indygreg packaging details. The existing code works because:\r\n\r\n* The `.tar.gz` files are all `-install_only`, so the contents are `[\"python/bin\", \"python/include\", \"python/lib\", and \"python/share\"]`.\r\n* But the `zst` versions are \"full\". The contents are:\r\n  * `[\"python/build/lib\", \"python/build/Modules\",  ...]` (a couple of others)\r\n  * `[\"python/install/bin\", \"python/install/include\", \"python/install/lib\", and \"python/install/share\"]`\r\n  * (A few other files and dirs)\r\n\r\nSo the existing code happens to work because:\r\n* It uses `rctx.download_and_extract` in the `.tar.gz` case, which unpacks `python/lib` into the right place.\r\n* The `zstd` path uses `tar --strip-components=2`, which also unpacks the contents two levels deep into the right place. But interestingly, it relies on tar's behavior to *merge* the two `lib` directories together. It's obviously possible to do this with `rctx.execute([\"cp -R ...\", ])` but this is somewhat irritating.\r\n\r\n@rickeylev Any suggestions?",
      "FYI, the `.tar.gz` files were created due to https://github.com/indygreg/python-build-standalone/issues/79 if I remember correctly.",
      "Perhaps the `strip_prefix` arg or `rename_files` arg of `downloaded_and_extract`? I don't really have ideas otherwise.\r\n\r\nIf a separate command has to be run after download_and_extract to merge the two directories, I'm not sure it'll be a net win. Maybe `cp --link`?\r\n\r\n> This ... makes python_repository work on systems where building from source fails.\r\n\r\nI don't follow -- how does this PR fix building from source? This PR basically removes the need to have the zstd and tar tools locally available. What does that have to do with building from source?",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210248ac254a19ac28f5e0",
    "number": 1226,
    "body": "This commit refactors the files that contain the bzlmod\r\nextensions.\r\n\r\n- All extensions are moved under the new extensions folder\r\n- Private extensions are moved under extensions/private\r\n- All extension files are renamed to remove the _extension suffix\r\n- pip and internal_deps extensions are moved to their own file\r\n\r\nThis commit organizes the extensions better and also follows the\r\nbest practice of having a single extension per file. Having each\r\nextension in its own file allows them to use some additional features\r\nwhile helping avoid backwards incompatible changes.\r\n\r\n## BREAKING CHANGES\r\n\r\nThis splits `//python:extensions.bzl`, which previously held the `python`\r\nand `pip` extensions, into separate files (`python.bzl` and `pip.bzl`,\r\nrespectively). Unfortunately, moving the location of the extensions is a\r\nbreaking change due to how bzlmod extension identity works (see\r\nhttps://bazel.build/external/extension#extension_identity). Fortunately,\r\nby moving to one extension per file, we shouldn't have to ever do this again.\r\n\r\nUsers must update the file path in their `use_repo()` statements as follows:\r\n\r\n* `use_extension(\"@rules_python//python:extensions.bzl\", \"python\")` -> `use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")`\r\n* `use_extension(\"@rules_python//python:extensions.bzl\", \"pip\")` -> `use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")`\r\n\r\nThe following `sed` commands should approximate the necessary changes:\r\n\r\n```\r\nsed 'sXuse_extension(\"@rules_python//python:extensions.bzl\", \"python\")Xuse_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")X'`\r\nsed 'sXuse_extension(\"@rules_python//python:extensions.bzl\", \"pip\")Xuse_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")X'`\r\n\r\n```\r\n\r\nSee `examples/bzlmod_build_file_generation/MODULE.bazel` for an example of the new paths.\r\n",
    "head_branch": "hub-spoke",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat(bzlmod)!: Move each bzlmod extension into its own file (#1226)\n\nThis commit refactors the files that contain the bzlmod\nextensions.\n\n- All extensions are moved under the new extensions folder\n- Private extensions are moved under extensions/private\n- All extension files are renamed to remove the _extension suffix\n- pip and internal_deps extensions are moved to their own file\n\nThis commit organizes the extensions better and also follows the\nbest practice of having a single extension per file. Having each\nextension in its own file allows them to use some additional features\nwhile helping avoid backwards incompatible changes.\n\n## BREAKING CHANGES\n\nThis splits `//python:extensions.bzl`, which previously held the\n`python`\nand `pip` extensions, into separate files (`python.bzl` and `pip.bzl`,\nrespectively). Unfortunately, moving the location of the extensions is a\nbreaking change due to how bzlmod extension identity works (see\nhttps://bazel.build/external/extension#extension_identity). Fortunately,\nby moving to one extension per file, we shouldn't have to ever do this\nagain.\n\nUsers must update the file path in their `use_repo()` statements as\nfollows:\n\n* `use_extension(\"@rules_python//python:extensions.bzl\", \"python\")` ->\n`use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")`\n* `use_extension(\"@rules_python//python:extensions.bzl\", \"pip\")` ->\n`use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")`\n\nThe following `sed` commands should approximate the necessary changes:\n\n```\nsed 'sXuse_extension(\"@rules_python//python:extensions.bzl\", \"python\")Xuse_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")X'`\nsed 'sXuse_extension(\"@rules_python//python:extensions.bzl\", \"pip\")Xuse_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")X'`\n\n```\n\nSee `examples/bzlmod_build_file_generation/MODULE.bazel` for an example\nof the new paths."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210249ac254a19ac28f5e1",
    "number": 1225,
    "body": "Updating Windows lock file.\r\n",
    "head_branch": "windows-requirement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024aac254a19ac28f5e2",
    "number": 1223,
    "body": "Whilst it is for documentation purposes for maintainers it is also a regression\r\ntest for #1045. Also add a test to ensure that the `html` module is not\r\nshadowed when running under `coverage`.\r\n\r\nFixes #1196.\r\n",
    "head_branch": "test/coverage-syspath",
    "is_a_fork": true,
    "comments": [
      "The CI is red because of `bzlmod_build_file_generation` example, which I am not modifying here, so I'd say this is ready to be reviewed."
    ],
    "commit_messages": [
      "test(coverage): add a test to check the sys.path under bzlmod (#1223)\n\nWhilst it is for documentation purposes for maintainers it is also a\nregression\ntest for #1045. Also add a test to ensure that the `html` module is not\nshadowed when running under `coverage`.\n\nFixes #1196."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024aac254a19ac28f5e3",
    "number": 1220,
    "body": "Add `entry_point` macro to the repo generated by the `pip.parse` extension.\nThis works by using the canonical label literal, so should work without users\nneeding to add the spoke repos to the `use_repo` statement. We test this by\nhaving an extra folder in the `bzlmod` example.\n\nFixes #958.\n",
    "head_branch": "feat/entry-point-bzlmod-minimal",
    "is_a_fork": true,
    "comments": [
      "@rickeylev, I like this approach better than #1189 at least for now, because it does not require users to eagerly fetch the repo just to access the entrypoint struct as the label for the entrypoint in this PR is constructed from the hub repo macro without any imports from the spoke repos.\r\n\r\nThis means that the users wanting to use the `entry_point` have to add an extra `use_repo` statement, but it may be a good enough trade-off here.\r\n\r\nThe rough edges that I found when porting a test from the `//examples/pip_parse` to `bzlmod`:\r\n~1. I could not import `runfiles` library if I depend on the `@rules_python//python/runfiles` under `bzlmod`. It seems to me that it could be because in the runfiles directory the `rules_python` exists as `rules_python~override` and our python import machinery is not repo mapping aware.~\r\n2. The `py_test_with_transition` does not work with `$(location :yamllint)` and I am not sure exactly why.\r\n\r\n~Should we raise a ticket for 1. in the `bazel` repo and 2. is a non-issue if 1. works and we are using the `runfiles` library?~\r\n\r\nEDIT: it seems that whilst `rules_python.python.runfiles` import does not work, `python.runfiles` import does work and I remembered that there was a discussion when the `runfiles` examples was being contributed. So my complaint is non-existent.\r\n",
      "Switched to `$(rlocationpath` and everything started working, ready for the final review.",
      "As @fmeum suggested, it seems that we can avoid the `use_repo` here and the example just works without it. Learned something new about how `bzlmod` works.\n\n@fmeum, your last comment about the `%%FRIENDLY_NAME%%` works only if we have the `use_repo` statement, right? If the instructions to users are that they should not need to add additional `use_repo` statements, then the code should be good as is, right?\n",
      "> @fmeum, your last comment about the `%%FRIENDLY_NAME%%` works only if we have the `use_repo` statement, right? If the instructions to users are that they should not need to add additional `use_repo` statements, then the code should be good as is, right?\r\n\r\nEvery repo created by a module extension can see all other repositories created by the extension without any `use_repo`s. If you return `Label(\"@%%FRIENDLY_NAME%%...)`, that should also work. The currently approach looks alright too, so there is not need to change it.",
      "@rickeylev, the build is fixed, so should be ready to be merged.",
      "Squashed everything into a single commit and rebased on the current `main`. Tested the example with:\r\n```\r\n$ bazel test ...\r\nStarting local Bazel server and connecting to it...\r\nINFO: Analyzed 62 targets (121 packages loaded, 5685 targets configured).\r\nINFO: Found 55 targets and 7 test targets...\r\nWARNING: cleared convenience symlink(s) bazel-bin, bazel-testlogs because their destinations would be ambiguous\r\nINFO: Elapsed time: 67.466s, Critical Path: 10.95s\r\nINFO: 90 processes: 26 internal, 62 darwin-sandbox, 2 local.\r\nINFO: Build completed successfully, 90 total actions\r\n//:all_requirements                                                      PASSED in 0.8s\r\n//:all_wheels                                                            PASSED in 0.3s\r\n//:requirements_test                                                     PASSED in 10.1s\r\n//:test                                                                  PASSED in 1.1s\r\n//:test_with_transition                                                  PASSED in 1.4s\r\n//entry_point:entry_point_test                                           PASSED in 2.5s\r\n//runfiles:runfiles_test                                                 PASSED in 1.4s\r\n\r\nExecuted 7 out of 7 tests: 7 tests pass.\r\nThere were tests whose specified size is too big. Use the --test_verbose_timeout_warnings command line option to see which ones these are.\r\n```"
    ],
    "commit_messages": [
      "feat(bzlmod): support entry_point macro (#1220)\n\nAdd `entry_point` macro to the repo generated by the `pip.parse`\nextension.\nThis works by using the canonical label literal, so should work without\nusers\nneeding to add the spoke repos to the `use_repo` statement. We test this\nby\nhaving an extra folder in the `bzlmod` example.\n\nFixes #958."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024bac254a19ac28f5e4",
    "number": 1219,
    "body": "[`wheel_installer` assumes that if the pip command succeeded, there must be at least one `*.whl` file](https://github.com/lpulley/rules_python/blob/fdec44120aa45d748ab804f1d019002c6949b449/python/pip_install/tools/wheel_installer/wheel_installer.py#L439), but this is not currently true when `download_only` is enabled and the package provides no wheel; a `.tar.gz` will happily be downloaded, pip will succeed, and the `next(iter(glob.glob(\"*.whl\")))` call will fail, producing a mysterious `StopIteration`:\r\n\r\n```\r\nSaved ./artifactory-0.1.17.tar.gz\r\nSuccessfully downloaded artifactory\r\n (Traceback (most recent call last):\r\n  File \"[redacted]/lib/python3.8/runpy.py\", line 194, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"[redacted]/lib/python3.8/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"[redacted]/external/rules_python/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 450, in <module>\r\n    main()\r\n  File \"[redacted]/external/rules_python/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 438, in main\r\n    whl = next(iter(glob.glob(\"*.whl\")))\r\nStopIteration\r\n)\r\n```\r\n\r\nBy using `--only-binary=:all:` when using `pip download`, the pip command will fail if there is no suitable wheel to be downloaded. This should make the error much more obvious, since with `--only-binary=:all:` and no suitable wheel, pip fails and reports an error like this:\r\n\r\n```\r\nERROR: Could not find a version that satisfies the requirement artifactory (from versions: none)\r\nERROR: No matching distribution found for artifactory\r\n```",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1219/checks?check_run_id=13378159248) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Sorry for the delay! Happy to merge this."
    ],
    "commit_messages": [
      "fix: use `only-binary` for `download_only` `pip download` (#1219)\n\n[`wheel_installer` assumes that if the pip command succeeded, there must\nbe at least one `*.whl`\nfile](https://github.com/lpulley/rules_python/blob/fdec44120aa45d748ab804f1d019002c6949b449/python/pip_install/tools/wheel_installer/wheel_installer.py#L439),\nbut this is not currently true when `download_only` is enabled and the\npackage provides no wheel; a `.tar.gz` will happily be downloaded, pip\nwill succeed, and the `next(iter(glob.glob(\"*.whl\")))` call will fail,\nproducing a mysterious `StopIteration`:\n\n```\nSaved ./artifactory-0.1.17.tar.gz\nSuccessfully downloaded artifactory\n (Traceback (most recent call last):\n  File \"[redacted]/lib/python3.8/runpy.py\", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File \"[redacted]/lib/python3.8/runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"[redacted]/external/rules_python/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 450, in <module>\n    main()\n  File \"[redacted]/external/rules_python/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 438, in main\n    whl = next(iter(glob.glob(\"*.whl\")))\nStopIteration\n)\n```\n\nBy using `--only-binary=:all:` when using `pip download`, the pip\ncommand will fail if there is no suitable wheel to be downloaded. This\nshould make the error much more obvious, since with\n`--only-binary=:all:` and no suitable wheel, pip fails and reports an\nerror like this:\n\n```\nERROR: Could not find a version that satisfies the requirement artifactory (from versions: none)\nERROR: No matching distribution found for artifactory\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024cac254a19ac28f5e5",
    "number": 1218,
    "body": "  This commit cleans up the use of \"canonical resolution\" of\r\n  the Python interpreter. When the extension toolchains run\r\n  it collects a list of the interpreters and then\r\n  uses the hub_repo rule to create a map of names and the\r\n  interpreter labels.\r\n \r\n Next, we then use the interpreter_extension that, creates\r\n reports that have symlinks pointing to the different interpreter\r\n binaries.\r\n\r\nThe user can then pass in a label to the pip call for the\r\n specific hermetic interpreter.",
    "head_branch": "hub-spoke",
    "is_a_fork": true,
    "comments": [
      "Recapping the chat Chris and I had:\r\n\r\nThe basic trick here is having an extension in another file. This allows the extension to load the repos created by the `python.toolchain()` call, which, in turn, avoids having to manually compute the canonical repo.\r\n\r\nUltimately, we'll move the pip extension into its own file. This is to follow the (now) best practice to put each extension implementation in its own file. Doing that is for a separate PR, though.\r\n\r\nI suggested moving the pip extension to another file, then it can directly load `@pythons_hub`. Chris pointed out this meant pip.parse would always have to load the hub, even if it wasn't strictly necessary. Neither of us like that, which basically forces us into having a separate file to load the hub with the list of all the toolchains.\r\n\r\n-----\r\n\r\nI was looking at Rust and Go a bit and am thinking we should rename \"pythons_hub\" to \"python_toolchains\". It's basically an internal listing of all the known toolchains.\r\n\r\nWe can later (another PR) turn it into an actual hub repo for toolchains so that rules_python MODULE file can call `register_toolchains()` instead of the user.\r\n\r\n-----\r\n\r\nFor the pypi.install() code:\r\n\r\nAs discussed, rename to host_interpreter\r\n\r\nIs there some way to avoid a name arg? It'd be nice the user didn't have to specify a name when creating host_interpreter. The basic thought being: if two modules both use Python 3.9, then they both end up creating the same repos twice, which seems wasteful. Maybe this requires that the toolchain() calls stop allowing a custom name, too.\r\n\r\nI'm thinking host_interpreter should accept a label instead of a string. My logic here is twofold:\r\n 1. It makes the dependency relationship more explicit\r\n 2. I think it'll handle things like repo renaming?\r\n\r\n```\r\npython.toolchain(name=\"foo\")\r\nhost_interpreter = use_extension()\r\nhost_interpreter.interpreter(from_toolchain=\"@foo\")\r\nuse_repo(host_interpreter, \"foo_host_interpreter\")\r\n```\r\n\r\nThe host_interpreter extension then gets the canonical form of `@foo`, which will be the same value value as seen in the INTERPRETER_LABELS mapping.\r\n\r\nI think the INTERPRETER_LABELS list should also be keyed by Label objects instead of simple strings. I haven't checked this, but my concern is, if different modules use the same apparent name, then the map key in interpreters.bzl is ambiguous. e.g. this case:\r\n\r\n```\r\n# module A MODULE.bazel\r\npython.toolchain(name=\"mypython\", version=\"3.7\") # canonical name A~1.0~mypython\r\nhost_interpreter.interpreter(toolchain=\"mypython\")\r\n\r\n# module B MODULE.\r\npython.toolchain(name=\"mypython\", version=\"3.12\") # canonical name B~1.0~mypython\r\nhost_interpreter.interpreter(toolchain=\"mypython\")\r\n\r\n# Generates in @python_hub//interpreters.bzl:\r\nINTERPRETER_LABELS = {\r\n  \"mypython\": \"@B~1.0~mypython\"\r\n  \"mypython\": \"@A~1.0~mypython\"\r\n}\r\n```\r\n\r\nSo one or the other is going to get the the wrong Python version.",
      "CI failed on a known flake https://buildkite.com/bazel/rules-python-python/builds/4821#018811b8-b5d7-43df-ac72-06bc9eca84ce\r\n\r\nSee #1210 "
    ],
    "commit_messages": [
      "feat(bzlmod): Cleaning up interpreter resolution (#1218)\n\nThis commit cleans up the use of \"canonical resolution\" of\n  the Python interpreter. When the extension toolchains run\n  it collects a list of the interpreters and then\n  uses the hub_repo rule to create a map of names and the\n  interpreter labels.\n \n Next, we then use the interpreter_extension that, creates\n reports that have symlinks pointing to the different interpreter\n binaries.\n\nThe user can then pass in a label to the pip call for the\n specific hermetic interpreter."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024dac254a19ac28f5e6",
    "number": 1216,
    "body": "The bazel_url attribute allows the user to set a custom location (URL) that hosts the Python binaries.\r\n\r\nThe base_url attribute allows users to override the URL passed into python_register_toolchains, via kwargs. This URL is then passed to python_repository, which enables the download of a Python installation package from a custom URL. \r\n\r\nCloses #1172",
    "head_branch": "base_url",
    "is_a_fork": true,
    "comments": [
      "https://github.com/bazelbuild/rules_python/issues/1172#issuecomment-1542320897\r\n\r\nFolks are requesting feature parity",
      "Just to recap my post on the issue: An arg on the toolchain() tag class doesn't seem like the way to solve this. A separate tag class, probably only respected by the root module, to customize it would make more sense. Let's continue any design discussion on the issue and leave the PR for code review comments.",
      "Closing as we don't want to add an argument."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024eac254a19ac28f5e7",
    "number": 1214,
    "body": "This markdown file maintains the current status of our bzlmod implementation. Created section in README and linked to the bzlmod doc.\r\n",
    "head_branch": "bzlmod-status",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adding bzlmod support document (#1214)\n\nThis markdown file maintains the current status of our bzlmod\nimplementation. Created section in README and linked to the bzlmod doc."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024fac254a19ac28f5e8",
    "number": 1212,
    "body": "This is used to generate a path, which shouldn't have a trailing newline.",
    "head_branch": "strip-trailing-newline",
    "is_a_fork": true,
    "comments": [
      "The test failure looks like a network flake, but I can't restart the build so maybe try force pushing to the branch.",
      "@hrfuller yes, I have an issue filed about the flake that CI hit.  @rickeylev can you nudge CI?"
    ],
    "commit_messages": [
      "fix: Strip trailing newline from python output (#1212)\n\nThis is used to generate a path, which shouldn't have a trailing\nnewline."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621024fac254a19ac28f5e9",
    "number": 1208,
    "body": "Currently the users need to run the script manually and this PR adds a\npre-commit hook which should facilitate the maintenance of the deleted\npackages within the `rules_python .bazelrc`.\n",
    "head_branch": "feat/maintain-deleted-packages-2",
    "is_a_fork": true,
    "comments": [
      "Tested with:\n```\n$ pre-commit run update-deleted-packages -a\n...\n$ git diff\ndiff --git a/.bazelrc b/.bazelrc\nindex e7e4af7..5741a64 100644\n--- a/.bazelrc\n+++ b/.bazelrc\n@@ -3,8 +3,8 @@\n # This lets us glob() up all the files inside the examples to make them inputs to tests\n # (Note, we cannot use `common --deleted_packages` because the bazel version command doesn't support it)\n # To update these lines, run tools/bazel_integration_test/update_deleted_packages.sh\n-build --deleted_packages=examples/build_file_generation,examples/build_file_generation/get_url,examples/bzlmod_build_file_generation,examples/bzlmod_build_file_generation/other_module/other_module/pkg,examples/bzlmod_build_file_generation/runfiles,examples/bzlmod,examples/bzlmod/other_module/other_module/pkg,examples/bzlmod/runfiles,examples/multi_python_versions,examples/multi_python_versions/libs/my_lib,examples/multi_python_versions/requirements,examples/multi_python_versions/tests,examples/pip_install,examples/pip_parse,examples/pip_parse_vendored,examples/pip_repository_annotations,examples/py_import,examples/py_proto_library,examples/relative_requirements,tests/compile_pip_requirements,tests/pip_repository_entry_points,tests/pip_deps\n-query --deleted_packages=examples/build_file_generation,examples/build_file_generation/get_url,examples/bzlmod_build_file_generation,examples/bzlmod_build_file_generation/other_module/other_module/pkg,examples/bzlmod_build_file_generation/runfiles,examples/bzlmod,examples/bzlmod/other_module/other_module/pkg,examples/bzlmod/runfiles,examples/multi_python_versions,examples/multi_python_versions/libs/my_lib,examples/multi_python_versions/requirements,examples/multi_python_versions/tests,examples/pip_install,examples/pip_parse,examples/pip_parse_vendored,examples/pip_repository_annotations,examples/py_import,examples/py_proto_library,examples/relative_requirements,tests/compile_pip_requirements,tests/pip_repository_entry_points,tests/pip_deps\n+build --deleted_packages=examples/build_file_generation,examples/build_file_generation/random_number_generator,examples/bzlmod,examples/bzlmod/other_module/other_module/pkg,examples/bzlmod/runfiles,examples/bzlmod_build_file_generation,examples/bzlmod_build_file_generation/other_module/other_module/pkg,examples/bzlmod_build_file_generation/runfiles,examples/multi_python_versions/libs/my_lib,examples/multi_python_versions/requirements,examples/multi_python_versions/tests,examples/pip_install,examples/pip_parse,examples/pip_parse_vendored,examples/pip_repository_annotations,examples/py_proto_library,tests/compile_pip_requirements,tests/compile_pip_requirements_test_from_external_workspace,tests/ignore_root_user_error,tests/pip_repository_entry_points\n+query --deleted_packages=examples/build_file_generation,examples/build_file_generation/random_number_generator,examples/bzlmod,examples/bzlmod/other_module/other_module/pkg,examples/bzlmod/runfiles,examples/bzlmod_build_file_generation,examples/bzlmod_build_file_generation/other_module/other_module/pkg,examples/bzlmod_build_file_generation/runfiles,examples/multi_python_versions/libs/my_lib,examples/multi_python_versions/requirements,examples/multi_python_versions/tests,examples/pip_install,examples/pip_parse,examples/pip_parse_vendored,examples/pip_repository_annotations,examples/py_proto_library,tests/compile_pip_requirements,tests/compile_pip_requirements_test_from_external_workspace,tests/ignore_root_user_error,tests/pip_repository_entry_points\n\n test --test_output=errors\n```\n\nThe PR #1220 is modifying the deleted packages using the same script, so I think it is safe to scope this PR to be only about the addition of the pre-commit hook.\n",
      "Brilliant. Thank you!",
      "It seems that there was a conflict. Rebased and reran the `pre-commit` hook.\n"
    ],
    "commit_messages": [
      "chore: add a pre-commit hook to maintain deleted packages (#1208)\n\nCurrently the users need to run the script manually and this PR adds a\npre-commit hook which should facilitate the maintenance of the deleted\npackages within the `rules_python .bazelrc`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210250ac254a19ac28f5ea",
    "number": 1207,
    "body": "This correctly handles the integration tests and examples that are a part of\nthe `rules_python` workspace and should not be included in the deleted packages\nlist.\n\nThis brings the changes made to the `.bazelrc` very close to what is in `main`,\nbut I would like to update this later once #1155 and #1205 are merged.\n\nFixes #919.\n",
    "head_branch": "feat/maintain-deleted-packages",
    "is_a_fork": true,
    "comments": [
      "Marking as a draft as it depends on #1206.\n",
      "Changed #1206 and this PR to not depend on each other for easier merging and review. Right now this PR can be rebased on #1206 without any conflicts, so it should be safe to merge independently.\n",
      "dumb question, but can we run this using bazel and then find the directories more cleanly?",
      "It could be run using bazel, but it's such a simple shell script I don't think it would gain much. Bazel running for one workspace is likely to get an error if it tries to process the build, workspace, or module files of another workspace embedded workspace."
    ],
    "commit_messages": [
      "fix(update_deleted_packages.sh): wheels example should not be included in .bazelrc (#1207)\n\nThis correctly handles the integration tests and examples that are a\npart of\nthe `rules_python` workspace and should not be included in the deleted\npackages\nlist.\n\nThis brings the changes made to the `.bazelrc` very close to what is in\n`main`,\nbut I would like to update this later once #1155 and #1205 are merged.\n\nFixes #919."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210251ac254a19ac28f5eb",
    "number": 1206,
    "body": "It seems that the tool was correctly trying to modify the `.bazelrc` at the\nroot of the repo, but the `find` execution would run in the `$PWD`. This\nchange ensures that the `find` is consistent with the file we are trying\nto modify and allows the user to execute the script from anywhere in the\nrepo.\n\nTested:\n1. Update the deleted packages with the version of the script at HEAD\n1. Fix the bug\n1. Rerun the script from the 'tests' sub-folder in the repo to ensure that\n   running the script is noop.\n1. Revert the changes to '.bazelrc' to reduce conflicts as other PRs are\n   modifying it.\n\nWork towards #958.\n",
    "head_branch": "fix/update-deleted-paths",
    "is_a_fork": true,
    "comments": [
      "@rickeylev, yeah, the only reason why we are using this instead of `.bazelignore` is to support the `bazel_integration_test` rule, which allows one to include the example or the integration test directory in the test run.\r\n\r\nThat said, I noticed, that we are using the legacy version of the ruleset and we'd need to invest some time to port it to the current version that exists in bazel-contrib. We do not use the integration test rules in the CI and I personally find not using them on my local dev env due to how long it takes to execute the tests."
    ],
    "commit_messages": [
      "fix(update_deleted_packages.sh): allow to run from anywhere in the repo (#1206)\n\nIt seems that the tool was correctly trying to modify the `.bazelrc` at\nthe\nroot of the repo, but the `find` execution would run in the `$PWD`. This\nchange ensures that the `find` is consistent with the file we are trying\nto modify and allows the user to execute the script from anywhere in the\nrepo.\n\nTested:\n1. Update the deleted packages with the version of the script at HEAD\n1. Fix the bug\n1. Rerun the script from the 'tests' sub-folder in the repo to ensure\nthat\n   running the script is noop.\n1. Revert the changes to '.bazelrc' to reduce conflicts as other PRs are\n   modifying it.\n\nWork towards #958."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210252ac254a19ac28f5ec",
    "number": 1205,
    "body": "The PR #1190 fixed incompatible_generate_aliases breaking the\n`requirement` macro under `bzlmod`. This PR is a followup in\nestablishing the test infrastructure using the classic `bazel` only for\nnow.\n\nWork towards #958.\n",
    "head_branch": "test/non-example-pip-parse-tests",
    "is_a_fork": true,
    "comments": [
      "After #1155, #1176, #1204, we can add an integration test target which\nwould exercise the same `BUILD.bazel` files under `bzlmod` and we could\npotentially remove `build_test` definitions in the bzlmod example added\nin #1176.\n",
      "Ping"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210253ac254a19ac28f5ed",
    "number": 1204,
    "body": "Previously we would depend on the value of .bazelrc and this\nchange ensures that we are explicitly enable bzlmod via CLI\nargs. It seems that the `py_proto_library` integration tests\ndefined in the `//examples:BUILD.bazel` file were not running\nusing `bzlmod` before hand, however, they were correctly\nexecuted in the CI.\n\nWork towards #958.\n",
    "head_branch": "fix/integration-tests-correctly-enable-bzlmod",
    "is_a_fork": true,
    "comments": [
      "So this means those those bzlmod=True tests haven't actually been using bzlmod? Looking at py_proto_library, I don't see where it would be enabled...  :facepalm:  \r\n\r\nLGTM, just clean up the PR description to say as much more briefly. It'll become the commit description and I'd like to have a bit more concise commit description instead of a large log output.",
      "Moving the logs to a PR comment to make the PR description shorter, since I would still like to keep it for posterity.\n\nBefore:\n```\n  test/pass-bzlmod-explicitly\n$ bazel run //examples:py_proto_library_example_bzlmod\nINFO: Analyzed target //examples:py_proto_library_example_bzlmod (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //examples:py_proto_library_example_bzlmod up-to-date:\n  bazel-bin/examples/py_proto_library_example_bzlmod\nINFO: Elapsed time: 0.428s, Critical Path: 0.01s\nINFO: 1 process: 1 internal.\nINFO: Build completed successfully, 1 total action\nINFO: Running command line: external/bazel_tools/tools/test/test-setup.sh examples/py_proto_library_example_bzlmod examples/_py_proto_library_example_bzlmod_config.json\nexec ${PAGER:-/usr/bin/less} \"$0\" || exit 1\nExecuting tests from //examples:py_proto_library_example_bzlmod\n-----------------------------------------------------------------------------\n$TEST_TMPDIR defined: output root default is '/home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f' and max_idle_secs default is '15'.\nExtracting Bazel installation...\nStarting local Bazel server and connecting to it...\nINFO: Reading 'startup' options from /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/tmpppgjbjyt/.bazelrc: --max_idle_secs=1\n...\nDEBUG: Repository python39_x86_64-unknown-linux-gnu instantiated at:\n```\n\nAfter:\n```\n$ bazel run //examples:py_proto_library_example_bzlmod\nINFO: Analyzed target //examples:py_proto_library_example_bzlmod (24 packages loaded, 351 targets configured).\nINFO: Found 1 target...\nTarget //examples:py_proto_library_example_bzlmod up-to-date:\n  bazel-bin/examples/py_proto_library_example_bzlmod\nINFO: Elapsed time: 0.648s, Critical Path: 0.18s\nINFO: 5 processes: 5 internal.\nINFO: Build completed successfully, 5 total actions\nINFO: Running command line: external/bazel_tools/tools/test/test-setup.sh examples/py_proto_library_example_bzlmod examples/_py_proto_library_example_bzlmod_config.json\nexec ${PAGER:-/usr/bin/less} \"$0\" || exit 1\nExecuting tests from //examples:py_proto_library_example_bzlmod\n-----------------------------------------------------------------------------\n$TEST_TMPDIR defined: output root default is '/home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f' and max_idle_secs default is '15'.\nExtracting Bazel installation...\nStarting local Bazel server and connecting to it...\nINFO: Reading 'startup' options from /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/tmpt3rsi4ub/.bazelrc: --max_idle_secs=1\nINFO: Options provided by the client:\n  Inherited 'common' options: --isatty=0 --terminal_columns=80\nINFO: Reading rc options for 'info' from /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/tmpt3rsi4ub/.bazelrc:\n  Inherited 'common' options: --announce_rc\nbazel-bin: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd/execroot/_main/bazel-out/k8-fastbuild/bin\nbazel-genfiles: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd/execroot/_main/bazel-out/k8-fastbuild/bin\nbazel-testlogs: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd/execroot/_main/bazel-out/k8-fastbuild/testlogs\ncharacter-encoding: file.encoding = ISO-8859-1, defaultCharset = ISO-8859-1\ncommand_log: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd/command.log\ncommitted-heap-size: 153MB\nexecution_root: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd/execroot/_main\ngc-count: 12\ngc-time: 77ms\ninstall_base: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/install/97c81a3bdd984debe0ff1b26c2dc04e0\njava-home: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/install/97c81a3bdd984debe0ff1b26c2dc04e0/embedded_tools/jdk\njava-runtime: OpenJDK Runtime Environment (build 11.0.6+10-LTS) by Azul Systems, Inc.\njava-vm: OpenJDK 64-Bit Server VM (build 11.0.6+10-LTS, mixed mode) by Azul Systems, Inc.\nmax-heap-size: 1530MB\noutput_base: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd\noutput_path: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd/execroot/_main/bazel-out\npackage_path: %workspace%\nrelease: release 6.0.0\nrepository_cache: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/cache/repos/v1\nserver_log: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/_bazel_aignas/a7bf96f6a62e7e716cfc8c113d82f6dd/java.log.panda.aignas.log.java.20230504-043134.111533\nserver_pid: 111533\nused-heap-size: 18MB\nworkspace: /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/tmpi1yaxmh2/wksp\n$TEST_TMPDIR defined: output root default is '/home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f' and max_idle_secs default is '15'.\nINFO: Reading 'startup' options from /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/tmpt3rsi4ub/.bazelrc: --max_idle_secs=1\nINFO: Options provided by the client:\n  Inherited 'common' options: --isatty=0 --terminal_columns=80\nINFO: Reading rc options for 'test' from /home/aignas/.cache/bazel/_bazel_aignas/6f0de8c9128ee8d5dbf27ba6dcc48bdd/execroot/rules_python/_tmp/41318b910e34c2713da8c98c7c746a9f/tmpt3rsi4ub/.bazelrc:\n  Inherited 'common' options: --announce_rc\nLoading:\nLoading: 0 packages loaded\nLoading: 0 packages loaded\n    currently loading:\nLoading: 1 packages loaded\nAnalyzing: 3 targets (1 packages loaded, 0 targets configured)\nAnalyzing: 3 targets (4 packages loaded, 2 targets configured)\nAnalyzing: 3 targets (11 packages loaded, 9 targets configured)\nAnalyzing: 3 targets (39 packages loaded, 130 targets configured)\nAnalyzing: 3 targets (39 packages loaded, 130 targets configured)\nAnalyzing: 3 targets (40 packages loaded, 130 targets configured)\nAnalyzing: 3 targets (40 packages loaded, 130 targets configured)\nAnalyzing: 3 targets (40 packages loaded, 130 targets configured)\nAnalyzing: 3 targets (40 packages loaded, 130 targets configured)\nDEBUG: Rule 'rules_python~override~python~python3_9_x86_64-unknown-linux-gnu' indicated that a canonical reproducible form can be obtained by modifying arguments url = [\"https://github.com/indygreg/python-build-standalone/releases/download/20230116/cpython-3.9.16+20230116-x86_64-unknown-linux-gnu-install_only.tar.gz\"] and dropping [\"urls\"]\nDEBUG: Repository rules_python~override~python~python3_9_x86_64-unknown-linux-gnu instantiated at:\n```\n\nThis is needed before we can bring integration tests for pip.parse extension.\n",
      "@rickylev, done, did not know that all of the PR message is going to be taken as the commit message.\n",
      "@rickeylev ping"
    ],
    "commit_messages": [
      "test(bzlmod): explicitly enable bzlmod in the test harness (#1204)\n\nPreviously we would depend on the value of .bazelrc and this\nchange ensures that we are explicitly enable bzlmod via CLI\nargs. It seems that the `py_proto_library` integration tests\ndefined in the `//examples:BUILD.bazel` file were not running\nusing `bzlmod` before hand, however, they were correctly\nexecuted in the CI.\n\nWork towards #958."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210253ac254a19ac28f5ee",
    "number": 1203,
    "body": "py_wheel does not propagate \"visibility\" attribute to the \"publish\" rule.  The visibility attribute on py_wheel target is not propagated to the auto-generated \"publish\" target. This commit adds the visibility attribute.\r\n\r\nCloses: https://github.com/bazelbuild/rules_python/issues/1192",
    "head_branch": "wheel-vis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: propagate visibility attribute for py_wheel publishing (#1203)\n\npy_wheel does not propagate \"visibility\" attribute to the \"publish\"\nrule. The visibility attribute on py_wheel target is not propagated to\nthe auto-generated \"publish\" target. This commit adds the visibility\nattribute.\n\nCloses: https://github.com/bazelbuild/rules_python/issues/1192"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210254ac254a19ac28f5ef",
    "number": 1202,
    "body": null,
    "head_branch": "martis42-patch-1",
    "is_a_fork": true,
    "comments": [
      "You need to run `bazel run //docs:update` and check in the doc updates."
    ],
    "commit_messages": [
      "docs: fix typos in pip_repository docs (#1202)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210255ac254a19ac28f5f0",
    "number": 1201,
    "body": null,
    "head_branch": "martis42-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210256ac254a19ac28f5f1",
    "number": 1200,
    "body": "Having both bzlmod and a WORKSPACE file confuses the user, and I have #1155 which adds a new example for gazelle and bzlmod.",
    "head_branch": "remove-bzlmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: removing bzlmod from example (#1200)\n\nHaving both bzlmod and a WORKSPACE file confuses the user, and I have\n#1155 which adds a new example for gazelle and bzlmod."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210257ac254a19ac28f5f2",
    "number": 1199,
    "body": "This fixes a problem where bazel skylib does not load during the toolchain integration test.\r\n\r\nThe skylib dependency was introduced by #1191, but skylib was not present in the WORKSPACE configs of several things. To fix, skylib just needs to be added to the workspace files.",
    "head_branch": "skylib-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: Add skylib to various test dependencies to fix CI (#1199)\n\nThis fixes a problem where bazel skylib does not load during the\ntoolchain integration test.\n\nThe skylib dependency was introduced by #1191, but skylib was not\npresent in the WORKSPACE configs of several things. To fix, skylib just\nneeds to be added to the workspace files."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210257ac254a19ac28f5f3",
    "number": 1197,
    "body": "This is to avoid a clash when loading the html python std library;\r\n\r\nSee issue #1196 ",
    "head_branch": "rcaire/rename-html-file",
    "is_a_fork": true,
    "comments": [
      "See my comment on the issue -- the likely fix is to make sure sys.path is correct. If coverage's directly itself is on sys.path, that means all the files within coverage can potentially shadow a stdlib module, not just html.",
      "@chrislovecnm, this can be closed as #1196 was resolved."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210258ac254a19ac28f5f4",
    "number": 1195,
    "body": "This commit addresses issue #1194 (see issue for details).\r\n\r\nIt brings the `comment` detection of `requirements_parser.bzl` closer to the spec described here:\r\n- https://pip.pypa.io/en/stable/reference/requirements-file-format/#comments\r\n\r\n1. Lines that begin with `#` are comments.\r\n2. Content after (and including) ` #` is a comment.\r\n\r\nPrior to this commit, a dependency like this would result in invalid `pip wheel` arguments:\r\n\r\n```\r\nrequests @ https://github.com/psf/requests/releases/download/v2.29.0/requests-2.29.0.tar.gz#sha1=3897c249b51a1a405d615a8c9cb92e5fdbf0dd49\r\n```",
    "head_branch": "issue/1194",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: allow url fragments in requirements file (#1195)\n\nThis commit addresses issue #1194 (see issue for details).\n\nIt brings the `comment` detection of `requirements_parser.bzl` closer to\nthe spec described here:\n-\nhttps://pip.pypa.io/en/stable/reference/requirements-file-format/#comments\n\n1. Lines that begin with `#` are comments.\n2. Content after (and including) ` #` is a comment.\n\nPrior to this commit, a dependency like this would result in invalid\n`pip wheel` arguments:\n\n```\nrequests @ https://github.com/psf/requests/releases/download/v2.29.0/requests-2.29.0.tar.gz#sha1=3897c249b51a1a405d615a8c9cb92e5fdbf0dd49\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210259ac254a19ac28f5f5",
    "number": 1193,
    "body": "Bumps [flask](https://github.com/pallets/flask) from 2.2.2 to 2.3.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/flask/releases\">flask's releases</a>.</em></p>\n<blockquote>\n<h2>2.3.2</h2>\n<p>This is a security fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Security advisory: <a href=\"https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq\">https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq</a>, CVE-2023-30861</li>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.3.x/changes/#version-2-3-2\">https://flask.palletsprojects.com/en/2.3.x/changes/#version-2-3-2</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/29?closed=1\">https://github.com/pallets/flask/milestone/29?closed=1</a></li>\n</ul>\n<h2>2.3.1</h2>\n<p>This is a fix release for the 2.3.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.3.x/changes/#version-2-3-1\">https://flask.palletsprojects.com/en/2.3.x/changes/#version-2-3-1</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/28?closed=1\">https://github.com/pallets/flask/milestone/28?closed=1</a></li>\n</ul>\n<h2>2.3.0</h2>\n<p>This is a feature release, which includes new features, removes previously deprecated code, and adds new deprecations. The 2.3.x branch is now the supported fix branch, the 2.2.x branch will become a tag marking the end of support for that branch. We encourage everyone to upgrade, and to use a tool such as <a href=\"https://pypi.org/project/pip-tools/\">pip-tools</a> to pin all dependencies and control upgrades. Test with warnings treated as errors to be able to adapt to deprecation warnings early.</p>\n<ul>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.3.x/changes/#version-2-3-0\">https://flask.palletsprojects.com/en/2.3.x/changes/#version-2-3-0</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/24?closed=1\">https://github.com/pallets/flask/milestone/24?closed=1</a></li>\n</ul>\n<h2>2.2.4</h2>\n<p>This is a fix release for the 2.2.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-4\">https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-4</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/27?closed=1\">https://github.com/pallets/flask/milestone/27?closed=1</a></li>\n</ul>\n<h2>2.2.3</h2>\n<p>This is a fix release for the 2.2.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-3\">https://flask.palletsprojects.com/en/2.2.x/changes/#version-2-2-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/flask/milestone/26?closed=1\">https://github.com/pallets/flask/milestone/26?closed=1</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/flask/blob/main/CHANGES.rst\">flask's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 2.3.2</h2>\n<p>Released 2023-05-01</p>\n<ul>\n<li>Set <code>Vary: Cookie</code> header when the session is accessed, modified, or refreshed.</li>\n<li>Update Werkzeug requirement to &gt;=2.3.3 to apply recent bug fixes.</li>\n</ul>\n<h2>Version 2.3.1</h2>\n<p>Released 2023-04-25</p>\n<ul>\n<li>Restore deprecated <code>from flask import Markup</code>. :issue:<code>5084</code></li>\n</ul>\n<h2>Version 2.3.0</h2>\n<p>Released 2023-04-25</p>\n<ul>\n<li>\n<p>Drop support for Python 3.7. :pr:<code>5072</code></p>\n</li>\n<li>\n<p>Update minimum requirements to the latest versions: Werkzeug&gt;=2.3.0, Jinja2&gt;3.1.2,\nitsdangerous&gt;=2.1.2, click&gt;=8.1.3.</p>\n</li>\n<li>\n<p>Remove previously deprecated code. :pr:<code>4995</code></p>\n<ul>\n<li>The <code>push</code> and <code>pop</code> methods of the deprecated <code>_app_ctx_stack</code> and\n<code>_request_ctx_stack</code> objects are removed. <code>top</code> still exists to give\nextensions more time to update, but it will be removed.</li>\n<li>The <code>FLASK_ENV</code> environment variable, <code>ENV</code> config key, and <code>app.env</code>\nproperty are removed.</li>\n<li>The <code>session_cookie_name</code>, <code>send_file_max_age_default</code>, <code>use_x_sendfile</code>,\n<code>propagate_exceptions</code>, and <code>templates_auto_reload</code> properties on <code>app</code>\nare removed.</li>\n<li>The <code>JSON_AS_ASCII</code>, <code>JSON_SORT_KEYS</code>, <code>JSONIFY_MIMETYPE</code>, and\n<code>JSONIFY_PRETTYPRINT_REGULAR</code> config keys are removed.</li>\n<li>The <code>app.before_first_request</code> and <code>bp.before_app_first_request</code> decorators\nare removed.</li>\n<li><code>json_encoder</code> and <code>json_decoder</code> attributes on app and blueprint, and the\ncorresponding <code>json.JSONEncoder</code> and <code>JSONDecoder</code> classes, are removed.</li>\n<li>The <code>json.htmlsafe_dumps</code> and <code>htmlsafe_dump</code> functions are removed.</li>\n<li>Calling setup methods on blueprints after registration is an error instead of a\nwarning. :pr:<code>4997</code></li>\n</ul>\n</li>\n<li>\n<p>Importing <code>escape</code> and <code>Markup</code> from <code>flask</code> is deprecated. Import them\ndirectly from <code>markupsafe</code> instead. :pr:<code>4996</code></p>\n</li>\n<li>\n<p>The <code>app.got_first_request</code> property is deprecated. :pr:<code>4997</code></p>\n</li>\n<li>\n<p>The <code>locked_cached_property</code> decorator is deprecated. Use a lock inside the\ndecorated function if locking is needed. :issue:<code>4993</code></p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/flask/commit/f3b8f570545200c87465d18386f3fc9f2258307a\"><code>f3b8f57</code></a> release version 2.3.2</li>\n<li><a href=\"https://github.com/pallets/flask/commit/c990bba94ab9bc81adf2d33e83c9a9628a2098f2\"><code>c990bba</code></a> update min test env</li>\n<li><a href=\"https://github.com/pallets/flask/commit/adedb2a64ea7703369bc89021710b439ee79f8dc\"><code>adedb2a</code></a> Merge pull request <a href=\"https://redirect.github.com/pallets/flask/issues/5101\">#5101</a> from pallets/update-werkzeug</li>\n<li><a href=\"https://github.com/pallets/flask/commit/e1aedecdc689cc9a79131851dbdabf6c3bc49c9e\"><code>e1aedec</code></a> update werkzeug</li>\n<li><a href=\"https://github.com/pallets/flask/commit/37badc3ce8b0665e3454547839196a676729309f\"><code>37badc3</code></a> update changelog</li>\n<li><a href=\"https://github.com/pallets/flask/commit/70f906c51ce49c485f1d355703e9cc3386b1cc2b\"><code>70f906c</code></a> Merge pull request from GHSA-m2qf-hxjv-5gpq</li>\n<li><a href=\"https://github.com/pallets/flask/commit/8705dd39c4fa563ea0fe0bf84c85da8fcc98b88d\"><code>8705dd3</code></a> set <code>Vary: Cookie</code> header consistently for session</li>\n<li><a href=\"https://github.com/pallets/flask/commit/9532cba45d2339e90ebf04f178b1e4f2064e7328\"><code>9532cba</code></a> fix mypy finding</li>\n<li><a href=\"https://github.com/pallets/flask/commit/0bc7356ce1ae11e633426902aba76d525f4523da\"><code>0bc7356</code></a> start version 2.3.2</li>\n<li><a href=\"https://github.com/pallets/flask/commit/f07fb2b607c1eaa724ca9bfe43e2dc20d97d34de\"><code>f07fb2b</code></a> Merge pull request <a href=\"https://redirect.github.com/pallets/flask/issues/5086\">#5086</a> from pallets/release-2.3.1</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/flask/compare/2.2.2...2.3.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=flask&package-manager=pip&previous-version=2.2.2&new-version=2.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",
    "head_branch": "dependabot/pip/examples/build_file_generation/flask-2.3.2",
    "is_a_fork": false,
    "comments": [
      "@dependabot recreate",
      "Superseded by #1763."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621025aac254a19ac28f5f6",
    "number": 1191,
    "body": "Starlark rules allow giving the tags as a tuple. The helper function that added the special migration tag assumed tags was always a list, resulting in an error when it tried to concatenate a list and tuple.\r\n\r\nTo fix, check if tags is a tuple and concatenate a tuple if so. The input type of the tags attribute is preserved so that a test verifying tags can be passed to the underlying rule can be implemented (this test is to verify there isn't a regression during the rewrite to Starlark).",
    "head_branch": "fix.tags.tuple",
    "is_a_fork": true,
    "comments": [
      "CI failures are due to some experiments going awry in Bazel CI. Merging anyways."
    ],
    "commit_messages": [
      "fix: Allow passing a tuple to the `tags` attribute. (#1191)\n\nStarlark rules allow giving the tags as a tuple. The helper function\r\nthat added the special migration tag assumed tags was always a list,\r\nresulting in an error when it tried to concatenate a list and tuple.\r\n\r\nTo fix, check if tags is a tuple and concatenate a tuple if so. The\r\ninput type of the tags attribute is preserved so that a test verifying\r\ntags can be passed to the underlying rule can be implemented (this test\r\nis to verify there isn't a regression during the rewrite to Starlark)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621025bac254a19ac28f5f7",
    "number": 1190,
    "body": "It seems that the macros for specifying the requirements break when the\nuser starts using `incompatible_generate_aliases=True`. This PR fixes\nthis.\n\nTesting done:\n1. Modify the example:\n   ```\n   $ git diff\n   diff --git a/examples/bzlmod/MODULE.bazel b/examples/bzlmod/MODULE.bazel\n   index ce91228..1750210 100644\n   --- a/examples/bzlmod/MODULE.bazel\n   +++ b/examples/bzlmod/MODULE.bazel\n   @@ -26,6 +26,7 @@ register_toolchains(\n    pip = use_extension(\"@rules_python//python:extensions.bzl\", \"pip\")\n    pip.parse(\n        name = \"pip\",\n   +    incompatible_generate_aliases=True,\n        requirements_lock = \"//:requirements_lock.txt\",\n        requirements_windows = \"//:requirements_windows.txt\",\n    )\n   ```\n2. Run `bazel build ...` and check that it is still working.\n\nI noticed this when working on #1189 and creating a separate PR for easier cherry-picking if we wanted to make a patch release which includes this. I am not sure how I could make an automated test for this other than creating a separate example.\n",
    "head_branch": "fix/incompatible-generate-aliases-macros",
    "is_a_fork": true,
    "comments": [
      "CI is failing, but I think it's unrelated and due to https://github.com/bazelbuild/continuous-integration/issues/1605, so I'm going to merge\r\n"
    ],
    "commit_messages": [
      "fix(bzlmod): correctly template repository macros for requirements, etc (#1190)\n\nIt seems that the macros for specifying the requirements break when the\r\nuser starts using `incompatible_generate_aliases=True`. This PR fixes\r\nthis.\r\n\r\nTesting done:\r\n1. Modify the example:\r\n   ```\r\n   $ git diff\r\ndiff --git a/examples/bzlmod/MODULE.bazel b/examples/bzlmod/MODULE.bazel\r\n   index ce91228..1750210 100644\r\n   --- a/examples/bzlmod/MODULE.bazel\r\n   +++ b/examples/bzlmod/MODULE.bazel\r\n   @@ -26,6 +26,7 @@ register_toolchains(\r\n    pip = use_extension(\"@rules_python//python:extensions.bzl\", \"pip\")\r\n    pip.parse(\r\n        name = \"pip\",\r\n   +    incompatible_generate_aliases=True,\r\n        requirements_lock = \"//:requirements_lock.txt\",\r\n        requirements_windows = \"//:requirements_windows.txt\",\r\n    )\r\n   ```\r\n2. Run `bazel build ...` and check that it is still working.\r\n\r\nI noticed this when working on #1189 and creating a separate PR for\r\neasier cherry-picking if we wanted to make a patch release which\r\nincludes this. I am not sure how I could make an automated test for this\r\nother than creating a separate example."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621025cac254a19ac28f5f8",
    "number": 1189,
    "body": "Fixes #958.\n\nFor bzlmod users we did not have a working alternative for the `entry_point` macro for the non-bzlmod users. The reason it is tricky is that in order to know the name of the entry_point available to the user one needs to download the Python package and parse the metadata. This works around the limitation by exposing the list of entrypoints back to the hub repo as an opaque struct, which the users can use in their code.\n\nSummary:\n* Added support for users setting `incompatible_generate_aliases` to `True`. They can use the `bin` struct exposed via `@<hub_rep>//<dep>:bin.bzl`.\n* Added support for bzlmod users not setting `incompatible_generate_aliases`. They can use it via `use_repo(\"<hub_repo>_<dep\")` and then importing the same struct via `@<hub_repo>_<dep>//:bin.bzl`.\n* The legacy behaviour of the `entry_point` macro is unchanged for the remaining users for now.\n\nDesign notes:\n* Expose the struct in separate `.bzl` files in order to have no eager fetches.\n* Exposing it via a struct will give users an error message if the target with the specified name does not exist and it will tell the available struct attributes.\n* The inspiration comes from `rules_js` which @alexeagle has pointed to.\n\nOpen questions:\n* I know that @groodt was toying with an idea of removing the repository macros (`requirement`, et. al) and I am wondering if this may be the last piece that we need in order to give our users an alternative.\n* If the design looks good, I am wondering about the documentation we should have. Is the current addition to the `bzlmod` example sufficient?\n",
    "head_branch": "feat/opaque_entry_point",
    "is_a_fork": true,
    "comments": [
      "Depends on #1190 being merged to `main`. For now I have merged the contents of that PR into this branch to ensure that CI is happy.\n",
      "> I am wondering about the documentation we should have. \r\n\r\nProbably also update the \"entry_point\" function docs. If I'm trying to use an entry_point in a certain way, I'll consult its reference documentation to see how to use it. I'll look at examples when I'm first using a library, but after I use it a few times, I'm unlikely to look at the examples (they'll just tell me most of what I know).",
      "@rickylev, thanks for the great comments. It seems that the documentation for the bzlmod extensions is non-existent right now so I added minimal text to the right place even though it is not generated right now.\n\nIt will take me some time to fully understand how to best add the `extensions.bzl` documentation generation. I'll see how far I can get and I'll maybe include to this PR.\n",
      "So I have generated some docs for bzlmod extensions specifically, but I am not sure if how this is turning out is the best way it can be. See the link [here](https://github.com/bazelbuild/rules_python/blob/e16e3a944838a67345c94f611e161c6287845e12/docs/extensions.md).\n\nIt may be a good start, but without `stardoc` generating docs automatically for `module_extension`, there is just no good way to have consistent docs for this. Putting the docs to the non-bzlmod macros may be as, if not more, confusing.\n",
      "Depends on #1190, but marking as ready for review as I have addressed the first round of comments.\n",
      "Whilst trying to add tests for this I have noticed that it would be better to wait for a few PRs already in the queue, so that I can add better tests. What is more, maybe splitting the documentation for the `extensions.bzl` into its own PR would be a good idea.\n",
      "I am wondering if this is really the best way to solve this. The reason for it is that if the user would like to use a select statement to select the entrypoint based on a configuration option, it would inevitably eagerly fetch all of the repos used in the select statement. If we had an entry point macro that is in rules_python, it might be a different story.",
      "I am going to close this as #1220 is the approach I would recommend for now."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621025cac254a19ac28f5f9",
    "number": 1187,
    "body": "When a string label is passed to the `@rules_testing` analysis_test functions, the strings are evaluated within the context of @rules_testing because that is where the actual rule invocation happens. Without bzlmod, this just requires qualifying the labels with the repo name (which is what was being done) because there's just a flat global namespace of repos.\r\n\r\nWith bzlmod enabled, repo mapping happens, so rules_testing tries to resolve those repo names using its repo mapping, which doesn't work because rules_testing's mapping doesn't include every repo using it.",
    "head_branch": "fix.label.resolves",
    "is_a_fork": true,
    "comments": [
      "@rickeylev can we nudge CI and see if this is green?"
    ],
    "commit_messages": [
      "tests: Force analysis test labels to resolve within @rules_python context (#1187)\n\nWhen a string label is passed to the `@rules_testing` analysis_test\r\nfunctions, the strings are evaluated within the context of\r\n@rules_testing because that is where the actual rule invocation happens.\r\nWithout bzlmod, this just requires qualifying the labels with the repo\r\nname (which is what was being done) because there's just a flat global\r\nnamespace of repos.\r\n\r\nWith bzlmod enabled, repo mapping happens, so rules_testing tries to\r\nresolve those repo names using its repo mapping, which doesn't work\r\nbecause rules_testing's mapping doesn't include every repo using it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621025dac254a19ac28f5fa",
    "number": 1186,
    "body": "Change instruction to refer to `MODULE.bazel` instead of `MODULES.bazel`. \r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1186/checks?check_run_id=13101943414) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Hi @yuanweixin,\r\n\r\nThanks for you contribution. Before it can be reviewed and merged, you'll need to satisfy the CLA bot. Thanks!",
      "> Hi @yuanweixin,\r\n> \r\n> Thanks for you contribution. Before it can be reviewed and merged, you'll need to satisfy the CLA bot. Thanks!\r\n\r\nHi! I clicked through the agreements, and it appears the cla/google check is passing now. "
    ],
    "commit_messages": [
      "type:docs Update README.md  (#1186)\n\nChange instruction to refer to `MODULE.bazel` instead of\r\n`MODULES.bazel`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621025eac254a19ac28f5fb",
    "number": 1184,
    "body": "This just keeps it at a recent version, which makes errors easier to grok. rules_testing recently underwent a large refactor, so it's confusing when errors reference lines that no longer exist in recent versions.",
    "head_branch": "upgrade.rules.testing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: Upgrade rules_testing to 0.0.5 (#1184)\n\nThis just keeps it at a recent version, which makes errors easier to\r\ngrok. rules_testing recently underwent a large refactor, so it's\r\nconfusing when errors reference lines that no longer exist in recent\r\nversions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621025fac254a19ac28f5fc",
    "number": 1183,
    "body": "This is the inverse test of the one testing for the mac platform. As before, the line forcing the platform to a non-mac platform was commented out, which meant, when a mac host built it, it would build the underlying target for Mac, which violated the test's assumptions.\r\n\r\nWork towards bazelbuild/bazel/issues/18170\r\n\r\nFixes #1185",
    "head_branch": "fix.nonmac.requirements.test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "tests: Set linux platform for test_non_mac_doesnt_require_darwin_for_execution (#1183)\n\nThis is the inverse test of the one testing for the mac platform. As\r\nbefore, the line forcing the platform to a non-mac platform was\r\ncommented out, which meant, when a mac host built it, it would build the\r\nunderlying target for Mac, which violated the test's assumptions.\r\n\r\nWork towards bazelbuild/bazel/issues/18170\r\n\r\nFixes #1185"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210260ac254a19ac28f5fd",
    "number": 1182,
    "body": "Each commit should be self-contained but at a high level:\r\n- `py_package` now returns `PyInfo` with collected files and imports.\r\n- `py_package` now has an `exclude` attr that's applied after the `packages`.\r\n- Automatic third-party requirement collection in `py_wheel` via `auto_add_requirements`.\r\n- Respect `imports` of `py_library` targets added to the `py_wheel`. This aligns with how Bazel assembles the PYTHONPATH under the runfiles.\r\n- Added missing `imports` attributes to the `examples/wheel`.\r\n\r\nIt's only a breaking change for users not setting `imports` or some other behaviour that we cannot predict.\r\nDespite it introducing a breaking change, the fixes users should apply are not complex and can be done by combining `imports` attributes and other features introduced by this PR.\r\n\r\nAssemblyAI gently sponsored this work.",
    "head_branch": "f0rmiga/improve-py_package-py_wheel",
    "is_a_fork": false,
    "comments": [
      "The current test failure is due to files clashing inside the action. I'll patch an alternative.",
      "Generally LGTM, it would be good to show an example of use and have a test that confirms that we build wheels with some dependencies automatically included.",
      "Thanks for the reviews, @alexeagle, @rickeylev and @chrislovecnm. I believe I addressed most of the comments. I only pushed back the ones I really thought didn't make sense.",
      "re: using ctx.actions.symlink instead of a custom program to perform essentially the same\r\n\r\n> Trust me; I tried all the obvious solutions. CI would always fail for one of the platforms.\r\n\r\nWell, still, would you mind elaborating a bit, for the rest of us, please?\r\n\r\nctx.actions.symlink should be platform agnostic, and should work with both files and directories. A specialized program to perform an otherwise standard operation isn't bad per-se, but it does mean the specialized program needs to explain what about the standard method is lacking that justifies needing a specialized program.\r\n\r\n-----\r\n\r\nre: why all the logic about symlink vs copying and error handling:\r\n\r\n> Because the filesystem might not accept symlinks and we have to fallback to copying.\r\n\r\nWhat filesystem or platform is that? For Windows, we basically require that symlinks are enabled now; I'm pretty sure there's a few other places that rely on symlink support now. Mac and Linux's support symlinks.\r\n\r\nThis is the sort of detail that belongs in a comment -- OSError is a generic class of errors. Is this due to some esoteric permission issue? Something to do with hardlinks? Some esoteric platform or system that doesn't accept symlinks? While you may have gone through a gauntlet and know the answer, other readers don't. All they see is error handling code for code that doesn't look like it should be raising an error.\r\n\r\n-----\r\n\r\nre: magic pypi tags:\r\n\r\n> Nope, they are very magical.\r\n\r\nOk, so, we can't have magic tags that affect behavior without some sort of explanation about that. For example, I can trace through the code and can see how they are literally used, but that doesn't really provide an explanation. It just leaves me with several questions. For example:\r\n\r\n* Why are there two tags? If both aren't present, they are ignored. The two tags are,\r\n  in the end concatenated into a single value -- why are they separate tags?\r\n* Why does the last value win? Is this intentional, or just accidental?\r\n* Why can a target have only one requirement via its tags?\r\n* Why are tags used instead an augmenting target in `data` and/or having RequirementsInfo provided directly?\r\n\r\nI'm not saying we need a whole design doc or page long .md file about this. We do, however, need enough to understand the feature. That, and any publicly undocumented feature needs some sort of implementation comment about it, otherwise it's just a haunted graveyard people are afraid to touch.\r\n\r\n-----\r\n\r\nre: visiting srcs and gathering RequirementsInfo from them:\r\n\r\n> Because srcs may be plain source files, but it's not mandatory.\r\n\r\nOk, but that still doesn't really answer the question: providing a requirement at an individual source-file level looks gratitious. A source file doesn't really do much in isolation; it's part of some unit (e.g. a py_library), which, as a unit, has requirements as to its needs.",
      "@f0rmiga ping",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210260ac254a19ac28f5fe",
    "number": 1181,
    "body": "Normally, Bazel will ignore its convenience symlinks, so putting them in the .bazelignore file isn't necessary. However, when `--output_user_root` is set, which is beneficial to set when using different Bazel versions (it preserves the analysis cache between versions), the symlinks aren't ignored. Putting them in the bazelignore file fixes this.",
    "head_branch": "manual-bazel-ignore",
    "is_a_fork": true,
    "comments": [
      "@rickeylev can you nudge CI?"
    ],
    "commit_messages": [
      "fix: manually ignore bazel-* directories to make using custom Bazel builds easier (#1181)\n\nNormally, Bazel will ignore its convenience symlinks, so putting them in\nthe .bazelignore file isn't necessary. However, when\n`--output_user_root` is set, which is beneficial to set when using\ndifferent Bazel versions (it preserves the analysis cache between\nversions), the symlinks aren't ignored. Putting them in the bazelignore\nfile fixes this."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210261ac254a19ac28f5ff",
    "number": 1180,
    "body": "The latest versions of Bazel have removed the `@bazel_tools//tools/python:private/defs.bzl` file, so it can no longer be referenced.\r\n\r\nWork towards bazelbuild/bazel/issues/18170",
    "head_branch": "rm.defunct.bazel.tools.ref",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Don't reference deleted private bazel_tools bzl file (#1180)\n\nThe latest versions of Bazel have removed the\r\n`@bazel_tools//tools/python:private/defs.bzl` file, so it can no longer\r\nbe referenced.\r\n\r\nWork towards bazelbuild/bazel/issues/18170"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210262ac254a19ac28f600",
    "number": 1179,
    "body": "This makes the test pass on Bazel built from head. The failure appears due to not forcing the test to a Mac platform, so the underlying logic in `py_test` to detect the Mac platform fails and doesn't add the ExecutionInfo with the necessary info.\r\n\r\nWork towards bazelbuild/bazel/issues/18170",
    "head_branch": "fix-exec-info-mac-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: Set mac platform for test_mac_requires_darwin_for_execution (#1179)\n\nThis makes the test pass on Bazel built from head. The failure appears\r\ndue to not forcing the test to a Mac platform, so the underlying logic\r\nin `py_test` to detect the Mac platform fails and doesn't add the\r\nExecutionInfo with the necessary info.\r\n\r\nWork towards bazelbuild/bazel/issues/18170"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210263ac254a19ac28f601",
    "number": 1176,
    "body": "When `incompatible_generate_aliases = False`, `pip.parse` doesn't work in bzlmod, because requirements.bzl has:\r\n\r\n```\r\nall_requirements = [\"@rules_python~0.21.0~pip~pip_yapf//:pkg\"]\r\n\r\nall_whl_requirements = [\"@rules_python~0.21.0~pip~pip_yapf//:whl\"]\r\n```\r\n\r\nStarting Bazel 6, canonical names should be referred with double \"@\".\r\n\r\nThe reason why `incompatible_generate_aliases = True` worked is because it uses apparent name by parsing the canonical label with `repo_name = rctx.attr.name.split(\"~\")[-1]`. This is dangerous because Bazel may change its canonical name pattern in future versions.\r\n\r\nThis PR adds a new attribute \"repo_name\" to `pip_repository_bzlmod`, so we have access to the human-readable name in the implementation.\r\n",
    "head_branch": "canonical",
    "is_a_fork": true,
    "comments": [
      "How do we add a test for this?  I have noticed that bzlmod testing is a little light.  Happy to see a follow-up PR for testing.",
      "[This set of tests](https://github.com/bazelbuild/rules_python/blob/73aec8f29b12b1e0f69f2cb7fc8e7fa2c34ca591/.bazelci/presubmit.yml#L150-L174) should have failed without this PR, because it would build `//:modules_map`. With bzlmod, the target would be expanded to:\r\n\r\n```\r\nmodules_mapping(\r\n  name = \"modules_map\",\r\n  exclude_patterns = [\"^_|(\\\\._)+\", \"(\\\\.tests)+\"],\r\n  wheels = [\"@rules_python~override~pip~pip//click:whl\", \"@rules_python~override~pip~pip//flask:whl\", \"@rules_python~override~pip~pip//importlib_metadata:whl\", \"@rules_python~override~pip~pip//itsdangerous:whl\", \"@rules_python~override~pip~pip//jinja2:whl\", \"@rules_python~override~pip~pip//markupsafe:whl\", \"@rules_python~override~pip~pip//werkzeug:whl\", \"@rules_python~override~pip~pip//zipp:whl\"],\r\n)\r\n```\r\n\r\nLabels like `@rules_python~override~pip~pip//click:whl` are invalid. @chrislovecnm any idea why it didn't fail?\r\n\r\n",
      "@linzhp so that is interesting; I am uncertain why those are not failing.  We are removing bzlmod from the `build_file_generation` project in #1155.  But they are not failing on the bzlmod project either. Do you have any ideas on how to track this down?  We need more testing.",
      "> modules_mapping(\r\n>   name = \"modules_map\",\r\n>   exclude_patterns = [\"^_|(\\\\._)+\", \"(\\\\.tests)+\"],\r\n>   wheels = [\"@rules_python~override~pip~pip//click:whl\", \"@rules_python~override~pip~pip//flask:whl\", \"@rules_python~override~pip~pip//importlib_metadata:whl\", \"@rules_python~override~pip~pip//itsdangerous:whl\", \"@rules_python~override~pip~pip//jinja2:whl\", \"@rules_python~override~pip~pip//markupsafe:whl\", \"@rules_python~override~pip~pip//werkzeug:whl\", \"@rules_python~override~pip~pip//zipp:whl\"],\r\n> )\r\n\r\nThe tests are passing because the `incompatible_generate_aliases` is used in the mentioned tests and the wheel labels are different. Thanks for pointing out that the `else` clause on [this line](https://github.com/bazelbuild/rules_python/blob/main/python/pip_install/pip_repository.bzl#L373) has a bug. I don't think there are any users of the `whl` labels within the `rules_python` other than the `modules_mapping`.",
      "Good catch. I added two tests to cover this situation. @chrislovecnm Please take another look",
      "@rickeylev is this related to what we did with https://github.com/bazelbuild/rules_python/pull/1155/files#diff-93640e665695e91f5b56616af0477990bf3a0f90bcf03edb9b6bd73ae075ca95R137-R158\r\n\r\nIf so we may not need the user to set the repo name, but deduce it ourselves.",
      "@chrislovecnm Like I commented on #1155, the way you deduce from apparent name to canonical name assumes some Bazel implementation details, which is not a good idea. In this PR, I don't see a way to deduce apparent name from canonical name without assuming that same impl details either.",
      "@aignas I didn't see your comment?",
      "@aignas are we good to go?\r\n@linzhp can you rebase?",
      "Yeah, all is good, please go ahead.",
      "@chrislovecnm Done",
      "CI is hitting a known flake.  Merging again."
    ],
    "commit_messages": [
      "fix: Using canonical name in requirements.bzl (#1176)\n\nWhen `incompatible_generate_aliases = False`, `pip.parse` doesn't work\nin bzlmod, because requirements.bzl has:\n\n```\nall_requirements = [\"@rules_python~0.21.0~pip~pip_yapf//:pkg\"]\n\nall_whl_requirements = [\"@rules_python~0.21.0~pip~pip_yapf//:whl\"]\n```\n\nStarting Bazel 6, canonical names should be referred with double \"@\".\n\nThe reason why `incompatible_generate_aliases = True` worked is because\nit uses apparent name by parsing the canonical label with `repo_name =\nrctx.attr.name.split(\"~\")[-1]`. This is dangerous because Bazel may\nchange its canonical name pattern in future versions.\n\nThis PR adds a new attribute \"repo_name\" to `pip_repository_bzlmod`, so\nwe have access to the human-readable name in the implementation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210264ac254a19ac28f602",
    "number": 1175,
    "body": "Update the bzlmod version for Gazelle plugin to the next release so we can use it as bzlmod.\r\n\r\n@aignas FYI\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Should we close this as the the gazelle plugin is part of the BCR now?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210265ac254a19ac28f603",
    "number": 1173,
    "body": "The file was removed in Bazel@HEAD in https://github.com/bazelbuild/bazel/pull/17545\r\nThis fixes failures when using rules_python with Bazel@HEAD.\r\n\r\nAddresses: https://github.com/bazelbuild/bazel/issues/17874\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: remove reference to @bazel_tools//tools/python/private:defs.bzl (#1173)\n\nThe file was removed in Bazel@HEAD in\r\nhttps://github.com/bazelbuild/bazel/pull/17545\r\nThis fixes failures when using rules_python with Bazel@HEAD.\r\n\r\nAddresses: https://github.com/bazelbuild/bazel/issues/17874"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210265ac254a19ac28f604",
    "number": 1170,
    "body": "A very minor cleaup change.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "@blorente can you push a null update to get CI to run again?",
      "@chrislovecnm Sure thing :D ",
      "@f0rmiga, @alexeagle, @rickeylev can we merge?"
    ],
    "commit_messages": [
      "docs: Add starlark directive to code snippet (#1170)\n\nA very minor cleaup change."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210266ac254a19ac28f605",
    "number": 1168,
    "body": "Add python 3.8.16\r\n",
    "head_branch": "add_python_3_8_16",
    "is_a_fork": true,
    "comments": [
      "Can you push an empty update so CI will run again?",
      "> Can you push an empty update so CI will run again?\r\n\r\ndone"
    ],
    "commit_messages": [
      "feat: add Python 3.8.16 (#1168)\n\nAdd python 3.8.16"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210267ac254a19ac28f606",
    "number": 1167,
    "body": "This commit improves the toolchain tests to test that a hermetic version of Python is downloaded when running with bzlmod.\r\n",
    "head_branch": "bzlmod-toolchain",
    "is_a_fork": true,
    "comments": [
      "Have this in PR that was merged"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210268ac254a19ac28f607",
    "number": 1166,
    "body": "This patch reworks the `pip_repository` machinery to allow users to manually annotate groups of libraries which form packaging cycles in PyPi and must be simultaneously installed.\r\n\r\nThe strategy here is to transform any dependencies `A` and `B` which have dependencies and are mutually dependent\r\n\r\n```mermaid\r\ngraph LR;\r\n    A-->B;\r\n    A-->D;\r\n    A-->E;\r\n    B-->A;\r\n    B-->F;\r\n    B-->G;\r\n```\r\n\r\ninto a new \"dependency group\" `C` which has `A*` and `B*`  as dependencies, defined as `A` and `B` less any direct dependencies which are members of the group. This is viable _for python_ because Python files just need to be emplaced into a runfiles directory for the interpreter. We don't actually have a true hard dependency between the build definition of `A` requiring the build product `B` be available which requires that the build product of `A` be available.\r\n\r\n```mermaid\r\ngraph LR\r\n     C-->A*;\r\n     A*-->D;\r\n     A*-->E;\r\n     C-->B*;\r\n     B*-->F;\r\n     B*-->G;\r\n```\r\nThis gets us most of the way there, as a user can now safely write `requirement(\"A\")` and we can provide them with `C`, which has the desired effect of pulling in `A`, `B` and their respective transitives.\r\n\r\nThere is one remaining problem - a user writing `deps = [requirement(\"A\"), requirement(\"B\")]` will take a double direct dependency on `C`. So we need to insert a layer of indirection, generating `C_A` and `C_B` which serve only as unique aliases for `C` so that we can support the double dependency. Our final dependency graph then is as follows\r\n\r\n```mermaid\r\ngraph LR\r\n     C_A-->C;\r\n     C_B-->C;\r\n     C-->A*;\r\n     A*-->D;\r\n     A*-->E;\r\n     C-->B*;\r\n     B*-->F;\r\n     B*-->G;\r\n```\r\n\r\nAddresses #1076, #1188\r\n\r\n## To do\r\n- [x] Get rebased\r\n- [x] Get re-validated manually\r\n- [x] Buildifier\r\n- [x] Get CI happy\r\n- [x] Update documentation\r\n- [x] Update changelog",
    "head_branch": "arrdem/EE-603-pip-parse-cycles",
    "is_a_fork": true,
    "comments": [
      "Hrm. Maybe I'm missing something here but it looks like bazel-under-bazel for the tests isn't happy with the two new templates. Not sure how to proceed with a fix. ",
      "@arrdem The change you made is causing\r\n\r\n> (19:31:08) ERROR: error loading package under directory '': no such package '@rules_python~override~pip~pip//': in call to file(), parameter 'content' got value of type 'Label', want 'string'\r\n\r\n```\r\n--\r\n  | (19:31:08) ERROR: An error occurred during the fetch of repository 'rules_python~override~pip~pip':\r\n  | Traceback (most recent call last):\r\n  | File \"/var/lib/buildkite-agent/.cache/bazel/_bazel_buildkite-agent/31068de31d119d275d02c5ef2e251165/external/rules_python~override/python/pip_install/pip_repository.bzl\", line 362, column 14, in _pip_repository_bzlmod_impl\r\n  | rctx.file(\"BUILD.bazel\", rctx.attr._build_template, substitutions = {\r\n  | Error in file: in call to file(), parameter 'content' got value of type 'Label', want 'string'\r\n  | (19:31:08) ERROR: <builtin>: fetching pip_repository_bzlmod rule @rules_python~override//python:rules_python~override~pip~pip: Traceback (most recent call last):\r\n  | File \"/var/lib/buildkite-agent/.cache/bazel/_bazel_buildkite-agent/31068de31d119d275d02c5ef2e251165/external/rules_python~override/python/pip_install/pip_repository.bzl\", line 362, column 14, in _pip_repository_bzlmod_impl\r\n  | rctx.file(\"BUILD.bazel\", rctx.attr._build_template, substitutions = {\r\n  | Error in file: in call to file(), parameter 'content' got value of type 'Label', want 'string'\r\n  | (19:31:08) INFO: Repository gazelle~0.29.0 instantiated at:\r\n  | callstack not available\r\n```\r\n\r\nI'm seeing it here: https://buildkite.com/bazel/rules-python-python/builds/4591#018776ef-c472-4122-8b4b-2e30c38bee88\r\n\r\n\r\n\r\n",
      "@groodt ",
      "Okay - I think this is ready for a review. Includes test updates, passes the test updates. The bzlmod story for this is ... there isn't one yet. If there's a way to map this strategy onto bzlmod I'm all ears, I'm just not familiar with that machinery and opted to partition it and retain current `main` behavior.",
      "@arrdem please rebase.",
      "Will this address https://github.com/bazelbuild/rules_python/issues/1188?",
      "> There is one remaining problem - a user writing deps = [requirement(\"A\"), requirement(\"B\")] will take a double direct dependency on C. So we need to insert a layer of indirection, generating C_A and C_B which serve only as shims to C so that we can support the double dependency.\r\n\r\nIf we are not addressing this problem, do we have an open issue?",
      "@aignas, do you mind taking a look?",
      "> Will this address #1188?\r\n\r\nI believe it will.\r\n\r\n\r\n\r\n> > There is one remaining problem - a user writing deps = [requirement(\"A\"), requirement(\"B\")] will take a double direct dependency on C. So we need to insert a layer of indirection, generating C_A and C_B which serve only as shims to C so that we can support the double dependency.\r\n> \r\n> If we are not addressing this problem, do we have an open issue?\r\n\r\nI'll edit the PR description a bit to clarify. This problem was present in the original PR I submitted and was fixed yesterday. Note that [`requirement`](https://github.com/bazelbuild/rules_python/pull/1166/files#diff-45c1d09a54febf55b1b7c163b36d1940d9e3acfd61561682591f0ba0b5a1d516R29) is generating a reference to an [alias rule](https://github.com/bazelbuild/rules_python/pull/1166/files#diff-776a26dd44b340736e05824b49497b4534ea531698cf357c7dfff98266aa8365R14) to resolve this.",
      "Tightened this up a bunch. Removed all unneeded changes that impacted the bzlmod machinery. Backed out some of the formatting changes. Eliminated the generated `lib.bzl` file. Updated all the code, comments and attrs to consistently refer to `requirement clusters`.\r\n\r\nAs far as I can determine at this point the bzlmod CI failures on windows are unrelated. I don't have a windows test environment available and I've eliminated all the parts of this changeset which impact bzlmod machinery. Guidance on getting to green there would be appreciated.",
      "Hello here. I am  apache-airflow maintainer, and we used to have similar problem as other problems mentioned here: https://github.com/apache/airflow/issues/17795 \r\n\r\nWe \"fixed\" in the past by removing one part of the dependencies, but it starts causing us real issues, and we are going to bring dependency back, so without this PR bazel users will start to have again similar problems. We tried to workaround them but it causes more harm than good, so we are going to stop worrying about bazel (and we wil even explicitly state that bazel might have problems installing Airlfow (and we remove it when this PR is released). \r\n\r\nAs mentioned in https://github.com/apache/airflow/issues/17795#issuecomment-904329243 by maintainer of `pip`, dependencies of packages in PyPI are not DAGs, and cycles are allowed, so technically it's Bazel that is not following the standard (that's why I am happy this PR is here).\r\n\r\n\r\n",
      "Thanks for the inline comments -- helps a lot.\r\n\r\nre: bzlmod support: this should work with bzlmod; I don't see why not? In any case, we need to make sure it's possible with bzlmod because we'll be going bzlmod-only in a year or so.\r\n\r\nre: requirements cluster key: This is basically an arbitrary, internall value, right? It just gets used as the internal cluster target name.",
      "> re: bzlmod support: this should work with bzlmod; I don't see why not? In any case, we need to make sure it's possible with bzlmod because we'll be going bzlmod-only in a year or so.\r\n\r\nYes, this strategy (and probably all the associated machinery) should work under bzlmod, I'm just not familiar with how bzlmod works and we haven't adopted it yet so I haven't tried to wire it up here.\r\n\r\n> re: requirements cluster key: This is basically an arbitrary, internal value, right? It just gets used as the internal cluster target name.\r\n\r\nCorrect. We could maybe do away with it entirely by accepting a list of clusters and generating ordinal identifiers internally, but I'm not sure that's better at all.",
      "@rickeylev @arrdem, the comment about bzlmod is that we are not doing a bzlmod integration test with the example that you using to test this.  Is adding a test to the use under /examples/bzlmod possible?",
      "After #1254 I think we are at a pretty stable place with pip and bzlmod.  I'm sure that we will find more to do, but those changes will probably cause some heartache with merging.  I'm not planning on more big rewrites of pip and bzlmod.",
      "@arrdem so the PR is in, and the interface for pip is pretty stable.  If you could merge in I would love to get this in.",
      "I'm curious how this interacts with @philsc work to move fetches into the Bazel downloader. Will that also need to collapse cycles into a \"cluster\"?",
      "If the \"cluster\" approach is the desired approach, then yeah, I'll have to adopt it. Thanks for the heads up @alexeagle !\r\n\r\nThe way I solved this previously is to add annotation support for cutting dependencies. Circular dependencies really don't make sense and should get fixed upstream. I.e. our approach was to cut the dependency graph at a reasonable point and then file upstream tickets for them to fix it.",
      "there are too many python packages with circular dependencies, ideally this wouldn't be an issue, but it's baked into the language itself (two modules can import each other if properly ordered).\r\n\r\nIs there any stopgap measure I can take for this in the meantime? e.g. not load deps lazily?",
      "@shicholas the stopgap measure is to depend on rules_python via a `git_repository` with this patchset (or an equivalent) applied which is what my employer has been doing since this code reached feature completion in May. No promises on when I'll be able to revisit this, although my Q3 plan is full of Bazel stuff.",
      "I can tell you what we do at Canva: we patch wheels and / or BUILD files as necessary to fix broken upstream dependencies.\r\n\r\nWe often do try to work with upstream to fix their dependencies where possible. I personally don't think a clustering solution is really necessary here. There aren't that many places where there are dependencies between distributed packages and typically an end-user will just be taking a dependency on one of them at runtime. And for the other handlful of scenarios where it's not possible, the users just bring along the missing dependency in their targets.\r\n\r\nThe issue here isn't that python supports circular dependencies at runtime, its just that everything is expected to be installed into a flat dependency namespace and they don't really need to care about cycles because they aren't building a DAG. They're just downloading and installing a bunch of zip files into site-packages. Naturally, bazel can't do this, but we can easily handle it with simple patching of packages.",
      "Just to mention a case that just patching packages is not a good solution because there are legitimate cases where it makes sense to have circular deps and patching packages will break the dependencies.\n\nExample: we have airflow broken into 'apache-airflow' and 80+ providers. For example 'apache-airflow-providers-smtp'. The SMTP provider is a required dependency of 'apache-airflow'. But at some point we bump minimum version of supported airflow for our providers, so currently all our providers cannot be installed together with apache-airflow < 2.4.0 (API changed and they won't work). So SMTP provider has also the required dependency apache-airflow>=2.4.0.\n\nThis is a very legitimate case and there is no other way to express those dependencies to get them 'required'. You can make them into optional extras but not into requirements.\n\nIf you just patch the packages and remove one if those  dependencies one of the bad things happen:\n\n- if you remove SMTP from apache-airflow, then someone installing just airflow will not have SMTP installed (which is bad)\n\n- if you remove apache-airflow >= 2.4.0 from SMTP,  you will be able to install new provider with old version of airflow - which won't work.\n\nSo if you want to patch packages you have to remember the dependencies and apply them differently to serve similar cases  \n\n- \n",
      "Yes, I understand the problems and concerns. Python packaging is certainly a challenge and even worse for dependency heavy projects such as airflow.\r\n\r\n> So if you want to patch packages you have to remember the dependencies and apply them differently to serve similar cases\r\n\r\nIm not discounting that pip and python support installation of circular dependencies into `site-packages`. That is for sure what they support. However, there are less than 1% of dependencies that have circular dependencies, so it is an edge-case that does have workarounds. In a perfect world, all dependency management systems and build systems would all work together seamlessly, of course, that's not the world we live in. In your airflow example, it's not really a problem to remove the  edge from `apache-airflow-providers-smtp` -> `apache-airflow` because the lock-file generation happens outside bazel and can have cycles. All that is then necessary is to patch out the problematic edge in the wheel installer and everything will work.\r\n\r\nAs mentioned [here](https://github.com/bazelbuild/rules_python/pull/1166#issuecomment-1641088167), the reason that pip can get away with this is that they aren't building a DAG. They're just unzipping files into place. Bazel is doing a lot more and these rules are operating with a solution that solves for the 99% case of dependencies that don't have cycles and making them work as external dependencies for bazel.\r\n\r\nThere are solutions here that don't necessarily require complexity being added to the rules:\r\n* Fix upstream where possible\r\n* Patch the wheel as described [here](https://github.com/pytorch/pytorch/issues/99622#issuecomment-1604812054) by Stripe for pytorch\r\n* Patch the files in the unzipped wheel *before* they are used to generate a BUILD.bazel file (this is the approach that I often feel is overlooked)\r\n\r\nI can try and describe how the patching solution works at my workplace:\r\n* Provide a `patches` argument to `pip_parse` that contains the patches we want to apply to the wheel `METADATA` file. These patches remove the relevant `Requires-Dist` that creates the circular dependency\r\n* Where necessary, we then create a plain old `py_library` in user-space in our Bazel monorepo that merges everything back together\r\n\r\nSo you can easily create a `py_library` target in regular bazel user-space that merges things back together where necessary. It's not really necessary in the airflow example (where the requirement constraint is used for compatibility purposes, not at code import time). It's also not really necessary for the torch scenario, because the cycle from triton is actually only for tests. However, if it was for whatever reason necessary, it can be handled in user-space and end-users will use these dependencies in the rare situations of problematic packages.\r\n\r\ne.g.\r\n\r\n```\r\npy_library(\r\n    name = \"patched_torch\",\r\n    srcs = glob([\r\n        \"src/*.py\",\r\n    ]),\r\n    visibility = [\"//visibility:public\"],\r\n    deps = [\r\n        \"@pypi_torch//:pkg\",\r\n        \"@pypi_triton//:pkg\",\r\n    ],\r\n)\r\n```\r\n",
      "Greetings everybody :wave:\r\n\r\nPatch for Mitigating Circular Dependencies in Bazel\r\n\r\nIn the spirit of sharing solutions for technical challenges, I'd like to present a workaround we've developed with the help of the Bazel team for dealing with circular dependencies in Bazel\r\n\r\nThe problem at hand arose while working with Apache-Airflow, given Bazel's strong opinion concerning circular dependencies (unlike Pip which allows them). In our specific use case, we were encountering a Gazelle error due to the following circular dependencies:\r\n\r\n```\r\napache-airflow -> apache-airflow-providers-sqlite -> apache-airflow\r\napache-airflow -> apache-airflow-providers-common-sql -> apache-airflow\r\napache-airflow -> apache-airflow-providers-ftp -> apache-airflow\r\napache-airflow -> apache-airflow-providers-http -> apache-airflow\r\napache-airflow -> apache-airflow-providers-imap -> apache-airflow\r\n```\r\n\r\nOur devised workaround introduces a patch to the `package_annotations` within `rules_python`. This patch effectively omits the dependencies causing the circular loop. You can find the diff for this patch included at the end of this message.\r\n\r\nOnce the patch is applied, it should be added to the 'rules_python' http_archive invocation as illustrated below:\r\n\r\n```\r\nhttp_archive(\r\n        name = \"rules_python\",\r\n        patch_args = [\"-p1\"],\r\n        patches = [\r\n            \"//tools/bazel/patches:rules_python_annotation.patch\",\r\n        ],\r\n        sha256 = RULES_PYTHON_SHA256,\r\n        strip_prefix = \"rules_python-{}\".format(RULES_PYTHON_VERSION),\r\n        url = \"[https://github.com/bazelbuild/rules_python/archive/{}.tar.gz](https://github.com/bazelbuild/rules_python/archive/%7B%7D.tar.gz)\".format(RULES_PYTHON_VERSION),\r\n)\r\n```\r\n\r\nAfter applying the patch, we need to address the problematic dependencies. In our case, this meant introducing the following annotations to the WORKSPACE file for each apache-airflow dependency that caused a circularity:\r\n\r\n```\r\nANNOTATIONS = {\r\n    # This annotation verifies that annotations work correctly for pip packages with extras\r\n    # specified, in this case requests[security].\r\n    \"apache-airflow-providers-sqlite\": package_annotation(\r\n        excluded_deps = [\"apache-airflow\"],\r\n    ),\r\n    \"apache-airflow-providers-common-sql\": package_annotation(\r\n        excluded_deps = [\"apache-airflow\"],\r\n    ),\r\n    \"apache-airflow-providers-ftp\": package_annotation(\r\n        excluded_deps = [\"apache-airflow\"],\r\n    ),\r\n    \"apache-airflow-providers-http\": package_annotation(\r\n        excluded_deps = [\"apache-airflow\"],\r\n    ),\r\n    \"apache-airflow-providers-imap\": package_annotation(\r\n        excluded_deps = [\"apache-airflow\"],\r\n    ),\r\n}\r\n\r\npip_parse(\r\n    name = \"your_deps\",\r\n    annotations = ANNOTATIONS,\r\n    # ....\r\n)\r\n```\r\n\r\nLastly, it is essential to pin the packages listed in the annotations in the requirements:\r\n\r\n```\r\n# ...\r\napache-airflow-providers-imap==3.2.2\r\napache-airflow-providers-http==4.4.2\r\napache-airflow-providers-ftp==3.4.2\r\napache-airflow-providers-sqlite == 3.4.2\r\napache-airflow-providers-common-sql == 1.6.0\r\napache-airflow==2.4.3\r\napache-airflow-providers-google==10.1.1\r\n```\r\n\r\nI hope this solution will be useful to those facing similar circular dependency issues in Bazel. Your feedback and comments are always welcome.\r\n\r\nPatch:\r\n\r\n```\r\ndiff --git a/python/pip_install/pip_repository.bzl b/python/pip_install/pip_repository.bzl\r\nindex 41533b4..acb8b9c 100644\r\n--- a/python/pip_install/pip_repository.bzl\r\n+++ b/python/pip_install/pip_repository.bzl\r\n@@ -727,7 +727,8 @@ def package_annotation(\r\n         copy_executables = {},\r\n         data = [],\r\n         data_exclude_glob = [],\r\n-        srcs_exclude_glob = []):\r\n+        srcs_exclude_glob = [],\r\n+        excluded_deps = []):\r\n     \"\"\"Annotations to apply to the BUILD file content from package generated from a `pip_repository` rule.\r\n\r\n     [cf]: https://github.com/bazelbuild/bazel-skylib/blob/main/docs/copy_file_doc.md\r\n@@ -742,6 +743,7 @@ def package_annotation(\r\n         data_exclude_glob (list, optional): A list of exclude glob patterns to add as `data` to the generated\r\n             `py_library` target.\r\n         srcs_exclude_glob (list, optional): A list of labels to add as `srcs` to the generated `py_library` target.\r\n+        deps (list, optional): A list of labels to remove as `deps` to the generated `py_library` target.\r\n\r\n     Returns:\r\n         str: A json encoded string of the provided content.\r\n@@ -753,6 +755,7 @@ def package_annotation(\r\n         data = data,\r\n         data_exclude_glob = data_exclude_glob,\r\n         srcs_exclude_glob = srcs_exclude_glob,\r\n+        excluded_deps = excluded_deps,\r\n     ))\r\n\r\n # pip_repository implementation\r\ndiff --git a/python/pip_install/tools/lib/annotation.py b/python/pip_install/tools/lib/annotation.py\r\nindex c980080..c562340 100644\r\n--- a/python/pip_install/tools/lib/annotation.py\r\n+++ b/python/pip_install/tools/lib/annotation.py\r\n@@ -33,6 +33,7 @@ class Annotation(OrderedDict):\r\n             \"data\",\r\n             \"data_exclude_glob\",\r\n             \"srcs_exclude_glob\",\r\n+            \"excluded_deps\",\r\n         ):\r\n             if field not in content:\r\n                 missing.append(field)\r\n@@ -75,6 +76,10 @@ class Annotation(OrderedDict):\r\n     def srcs_exclude_glob(self) -> List[str]:\r\n         return self[\"srcs_exclude_glob\"]\r\n\r\n+    @property\r\n+    def excluded_deps(self) -> List[str]:\r\n+        return self[\"excluded_deps\"]\r\n+\r\n\r\n class AnnotationsMap:\r\n     \"\"\"A mapping of python package names to [Annotation]\"\"\"\r\ndiff --git a/python/pip_install/tools/wheel_installer/wheel_installer.py b/python/pip_install/tools/wheel_installer/wheel_installer.py\r\nindex 9b363c3..a4aa4f0 100644\r\n--- a/python/pip_install/tools/wheel_installer/wheel_installer.py\r\n+++ b/python/pip_install/tools/wheel_installer/wheel_installer.py\r\n@@ -16,6 +16,7 @@ import argparse\r\n import errno\r\n import glob\r\n import json\r\n+import logging\r\n import os\r\n import re\r\n import shutil\r\n@@ -369,6 +370,19 @@ def _extract_wheel(\r\n             if annotation.additive_build_content:\r\n                 additional_content.append(annotation.additive_build_content)\r\n\r\n+            if len(annotation.excluded_deps) > 0:\r\n+                filtered_whl_deps = [dep for dep in whl_deps if\r\n+                                     dep not in annotation.excluded_deps]\r\n+\r\n+                sanitised_dependencies = [\r\n+                    bazel.sanitised_repo_library_label(d, repo_prefix=repo_prefix) for d\r\n+                    in filtered_whl_deps\r\n+                ]\r\n+                sanitised_wheel_file_dependencies = [\r\n+                    bazel.sanitised_repo_file_label(d, repo_prefix=repo_prefix) for d in\r\n+                    filtered_whl_deps\r\n+                ]\r\n+\r\n         contents = _generate_build_file_contents(\r\n             name=bazel.PY_LIBRARY_LABEL,\r\n             dependencies=sanitised_dependencies,\r\n```",
      "Yes. Thanks for that. And thats precisely the same approach we use at my workplace. Except, rather than trying to overload the concept of `annotations` or create a custom DSL around what we can / cannot do to the contents of external dependencies, we simply expose a `patches` argument (with similar semantics to http_file) which lets us patch whatever we like, which is infinitely more flexible than having to keep exposing more and more patchable attributes via `annotations`. Just let users patch whatever they need to patch to make packages work with bazel.",
      "What is blocking further progress on this PR? Since the solution in [this comment](https://github.com/bazelbuild/rules_python/pull/1166#issuecomment-1641878169) seems to be the defacto standard, but, unfortunately this patch doesn't work with the latest version of rules_python.\r\nIt would be great if we could get this merged and stop depending on patches\r\n",
      "It's blocked by having no funding and is too big and hard to be a fun hobby weekend project. We have an OpenCollective and several users who want this. Can you discuss with your manager about donating?\r\n\r\nhttps://opencollective.com/bazel-python-dep-cycles is looking for a $5k goal",
      "> What is blocking further progress on this PR? Since the solution in [this comment](https://github.com/bazelbuild/rules_python/pull/1166#issuecomment-1641878169) seems to be the defacto standard, but, unfortunately this patch doesn't work with the latest version of rules_python. It would be great if we could get this merged and stop depending on patches\r\n\r\n```\r\ndiff --git python/pip_install/tools/wheel_installer/wheel_installer.py python/pip_install/tools/wheel_installer/wheel_installer.py\r\nindex c6c2961..b0f9f76 100644\r\n--- python/pip_install/tools/wheel_installer/wheel_installer.py\r\n+++ python/pip_install/tools/wheel_installer/wheel_installer.py\r\n@@ -129,7 +129,11 @@ def _extract_wheel(\r\n     # Packages may create dependency cycles when specifying optional-dependencies / 'extras'.\r\n     # Example: github.com/google/etils/blob/a0b71032095db14acf6b33516bca6d885fe09e35/pyproject.toml#L32.\r\n     self_edge_dep = set([whl.name])\r\n-    whl_deps = sorted(whl.dependencies(extras_requested) - self_edge_dep)\r\n+    deps = whl.dependencies(extras_requested)\r\n+    if (whl.name == \"triton\") and (\"torch\" in deps):\r\n+        deps.remove(\"torch\")\r\n+    \r\n+    whl_deps = sorted(deps - self_edge_dep)\r\n \r\n     with open(os.path.join(installation_dir, \"metadata.json\"), \"w\") as f:\r\n         metadata = {\r\n\r\n```\r\n\r\n\r\n```\r\nhttp_archive(\r\n    name = \"rules_python\",\r\n    patches = [\r\n        \"//tools/patches:circulardeps.patch\", # https://github.com/bazelbuild/rules_python/pull/1166#issuecomment-1701230930\r\n    ],\r\n    sha256 = \"5868e73107a8e85d8f323806e60cad7283f34b32163ea6ff1020cf27abef6036\",\r\n    strip_prefix = \"rules_python-0.25.0\",\r\n    url = \"https://github.com/bazelbuild/rules_python/releases/download/0.25.0/rules_python-0.25.0.tar.gz\",\r\n)\r\n```\r\n\r\nYou could use such simple option for now.",
      "We've got a few options in the works on landing some basic \"patch\" functionality to the pip rules (not annotations). Working out the details of the API and how to integrate it with bzlmod etc.\r\n\r\nIn the short-term, the workaround above is the best short-term workaround for anyone running into cycles that they need to support and can't fix upstream or in the short-term.",
      "Baselining question as I'm starting to overhaul this patch to actually apply again -- do we like the `cluster` terminology? Or do we want to call them `cycles` or something else little less ... artful.",
      "@arrdem We're likely going in this direction fwiw: https://github.com/bazelbuild/rules_python/pull/1393",
      "I'm aware of the patch, although I don't see it as a replacement for this work. Patching out the dependency cycle and implementing the required closure yourself requires your users and tooling being aware of the cycle rather than oblivious to it, which is the interface PyPi provides. ",
      "To confirm, it's not PyPI providing any interface. It's the fact that python installation into site-packages layouts doesn't check for cycles. Bazel does care about cycles and also doesn't use a site-packages layout, so patching is necessary anyway.\r\n\r\nTo reduce complexity and maintenance burden on the team, we've decided to provide first-class support for patching, which addresses cycles (and a host of other useful things), than introducing further complexity.\r\n\r\n`being aware of the cycle rather than oblivious to it`\r\n\r\nI think this is perhaps not realistic with bazel and third-party package dependencies. There will always be a requirement to patch packages, simply because most were written without bazel in mind. Much like an OS distribution needs to patch packages to make them fit into the OS package manager. You may have encountered `sudo apt-get install python3-venv` as an example of this, or conda-forge, which patches and builds packages to make them compatible with conda.",
      "I think our experience from rules_js may be useful here. We started from a google3 approach of patching the `require` algorithm in the node interpreter, a bit like how rules_python creates the runtime stub with a very long sys.path. This caused incompatibility with third-party packages and tools. The Google mantra at the time was \"tools aren't expected to be compatible with Bazel, anyway Googlers always re-write them\".\r\n\r\nThen we took a different philosophy: why are we patching the runtime? What if we laid out the packages on disk exactly the way a standard package manager does? And by closely mirroring `pnpm` (porting parts of it to Starlark) we achieved this. Now, you can use an idiomatic JavaScript build tool for some framework (take Vue for example: https://github.com/bazelbuild/examples/blob/main/frontend/vue/BUILD.bazel) WITHOUT any patching or accommodation for Bazel.\r\n\r\n> Bazel does care about cycles and also doesn't use a site-packages layout\r\n\r\nNot using a site-packages layout is the same mistake we made with rules_nodejs, I believe. This is a choice, not a requirement. In aspect-build/rules_py we're building the layer on top of rules_python that does lay out `site-packages` in a virtualenv exactly like `pip` does, so tools are expected to work with Bazel unchanged.\r\n\r\nFor cycles, you're right that Bazel doesn't care about them - it just can't express them in the dependency graph, so cycles have to be within a single node in the graph. I think our philosophical goal should be that we find the right way for Bazel to accommodate the existing tools and not suggest to users that they have to change them, or that they should have been \"written with Bazel in mind\".",
      "I really agree with what Alex said. Pushing the problem back to users to avoid complexity in the tools might be OK in the short term or in certain cases, but these are foundational things and maintaining higher fidelity between Bazel and not-Bazel contexts makes the user onboarding and interchangeability story much simpler. One could argue that Bazel was not built with interpreted languages in mind (it's an action dependency graph), but there are many things we can still do.\r\n\r\nAs an anecdote of my own, in [rules_r](https://github.com/grailbio/rules_r), I also used to construct a long library search path composed of individual package locations in the Bazel execution root, thinking it's closer to Bazel philosophy. But we would occasionally hit failures when this path would exceed character limits imposed on it. Such failure modes are not hit outside of the Bazel context and took the users some time to troubleshoot. Switching to a flat symlink structure in a new directory took less than one hour of feature development for me, and has been a much smoother experience for everyone.",
      "Yes, precisely. A more natural layout for third-party packages is a direction we wish to move in. This PR wouldn't be moving things towards this desired state. It would be introducing new concepts and user-facing complexity to support, when the complexity isn't with the cyclic dependencies per se, the complexity is with the historical decisions made by these rules and the context within which those decisions were made.\r\n\r\nWe have had some discussions about how to make the layout and `PYTHONPATH` a more natural fit for third-party packages. However, as I'm sure you realise, it's a big change that will take a while to land. It should hopefully be easier once [the Starlark implementation of the rules is the default](https://github.com/bazelbuild/rules_python/issues/1069)  because then the rules can be free to move without bazelbuild changes.\r\n\r\nThe need for `patch` semantics *will not* be removed when the layout is made to be more natural. It might be diminished slightly for the rare cases of cycles, but patching isn't only a solution to cycles. That's only one area where it is very useful.\r\n\r\nThat then naturally leads to the following:\r\n1. This PR solves a cyclic dependency problem by asking the user to take manual steps to annotate a new abstraction \"requirement groups\". This is a non-standard abstraction in python packaging and pushes the problem back to the user in a similar way that patching would. It doesn't improve the layout of packages at installation time.\r\n2. `patch` semantics are a necessary capability that can solve a wide variety of general issues with third-party dependencies. It can also be used to solve the cyclic dependency issues mentioned in the PR (i.e. https://github.com/bazelbuild/rules_python/issues/1076, https://github.com/bazelbuild/rules_python/issues/1188). It doesn't introduce additional abstractions (requirement groups) and it would still be required if there was an improved layout of packages at installation time.\r\n\r\n|                    | Problems Addressed                                                                                                                          | Users Manually Address Cycles | Maintenance / Complexity                                                                 | Improves layout of third-party dependencies            |\r\n|--------------------|---------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------|------------------------------------------------------------------------------------------|--------------------------------------------------------|\r\n| requirement groups (this PR) | 1. cyclic dependencies                                                                                                                      | Yes                           | A new single-purpose abstraction with additional complexity and maintenance burden       | No, it changes the layout to be even more non-standard |\r\n| patch semantics    | 1. cyclic dependencies 2. invalid or corrupt wheel RECORD 3. absolute paths to dynamic libs 4. code that loads outside bazel sandbox 5. etc | Yes                           | A multi-purpose abstraction, built into bazel with low complexity and maintenance burden | N/A patching isn't setting out to change layouts       |\r\n|                    |                                                                                                                                             |                               |                                                                                          |                                                        |",
      "Okay. It took a bit of head standing but I'd call this take II drastically cleaner. The previous magic in the `requirement()` macro has been eliminated entirely, support for groups now extends to wheels as as libraries, the `//:pkg` conventional interface is preserved  and the changes to how requirements are extracted during wheel installation made managing the deps to avoid cycles also drastically simpler.",
      "@chrislovecnm @rickeylev Sorry this patch sat for so long. It's rebased, functional, a fair bit simpler and definitely better tested than the original. I'd appreciate it if you'd take another review pass.\r\n\r\nAlso it looks like the windows `pip_parse` integration tests are persistently failing. If you've got any pointers on resolving this I'd appreciate them https://buildkite.com/bazel/rules-python-python/builds/6109#018b6548-a0bb-4d82-aeee-2e4ce480d10a",
      "@groodt I concur that this pushes the burden of managing cycles back onto the repository owner in the same sense patching cycles does. I don't see a way to get away from that given the present phasing of `rules_python`'s installation machinery.\r\n\r\nI suggest that prioritizing the simplicity of `rules_python`'s implementation over the ergonomics available both to repo owners and ultimately dependency users is not the right tradeoff. We should be absorbing complexity (within reason) here so that users get behavior they expect.\r\n\r\nif a user (or tooling a user runs) says `requirement(\"apache-airflow\")`, an `ImportError` in production because `@pypi_apache_airflow` doesn't depend on `@pypi_apache_airflow_providers_ftp` because the repo owner \"patched the cycle out\" would be surprising and undesirable. If a user typed `pip install apache-airflow` into a virtualenv or included it as part of a `pex` requirement set, they'd get `apache-airflow-providers-ftp` despite the cycle and without any intervention. We should prefer to make this mistake impossible, if possible within reason.\r\n\r\nSimilarly as a repository owner, authoring and maintaining patches is actually considerably higher effort than saying \"these deps run together, make it so\". Thanks to the intervening changes to the `whl_library` implementation, making groups work is now considerably simpler than it was before since we don't need to hack the installer -- just add a tiny bit of filtering and some `alias()` rules directly to the `BUILD.bazel` macro machinery. The complexity of this implementation is not that significant, and the convenience of not having to keep up patches especially for package groups like `apache-airflow` where many packages need to be \"fixed\" is high.\r\n\r\nWith regards to making the repository layout more nonstandard, I don't see that as an essential part of this change at all. The only essential part here is that we define groups and create alias and wrapper rules which allow us to implement them. This mechanism could easily be made to function if `rules_python` were to only create one repository and one `BUILD.bazel` in the future. If you feel strongly that the `@pip` repository should be used for these rules, I'd be happy to make that change. Today we seem to be leaning towards special-purpose repositories so this patch tries to fit with that pattern.",
      "Agree with @aignas \r\n\r\nThanks for making a simpler implementation here @arrdem. It looks a lot less intimidating than the original proposals to maintain. However, I still think we'd need this to work with bzlmod at a minimum before accepting it.\r\n\r\nIndependently, I think I'm also going to start an issue to start recording the instances of circular deps that are being encountered in the wild. It might help to highlight if we need to change the way that we approach third_party deps entirely. Or if it's only happening for a few rare packages.",
      "@aignas \r\n> I am not sure if this would work with gazelle. Right now the gazelle manifest generation pulls all wheels and it uses all_whl_requirements array. The whl filegroups will have circular dependencies, because here we are not patching them and will cause the operation to fail.\r\n\r\nThat's not quite right. This version of the patch applies the same cycle breaking strategy to dist wheels as to libraries, so the `all_whl_requirements` array is still entirely usable as a list of dependencies. Updated the Gazelle `BUILD.bazel` generation example to employ a cycle and prove the point.\r\n\r\n@groodt Thanks for taking another look! I started poking into the bzlmod side of the house last night and I don't see a reason why we couldn't make this work. Will take a more concerted pass if that's a requirement. We don't have a bzl7 timeline ourselves, but we're highly motivated to get some version of this patch upstreamed.",
      "I'd suggest that we leave automating groups to a future PR. It isn't super trivial because you have to run the dry-run install, parse the resulting manifest, deal with platform constraints and extras, and then run a connected components implementation on the resulting graph. It also sorta undoes all the hard work of `requirements_parser.bzl` by putting a Python interpreter phase back into setup. It's definitely doable, I just don't think it'll be dead simple.\r\n\r\nEdit: Having thought about this some more, it'd actually be a performance regression almost all the way back to the original monolithic `pip_install` implementation because the `pip install report` has to do equivalent work in fetching all the artifacts. Unless we can make sure that the subsequent `pip install` invocations hit the same cache, doesn't seem worthwhile.",
      "If we want to do something like `resolve_cycles=List[List[Requirement]]`, my immediate concern is that I don't think \"naming by first listed\" is the right choice for naming since cycles are really unordered. Naming by first in sort order, naming by a hash of the sorted components, ordinal naming or just letting the user provide a name seem like better choices.\r\n\r\nMy reason for letting users provide names was so there wasn't some surprisingly named element in the build graph.",
      "FTR:\r\n- Got Gazelle indexing/fixing working with cycle-broken wheels\r\n- Got cycle breaking working under bzlmod, thanks in large part to the previous `whl_library` refactor which made it nearly drop-in",
      "Okay. Got @aignas's comments sorted out, build is green, docs and changelog are updated.\r\n\r\nOne thing I note is that this approach to repairing dependency cycles promotes optional dependencies to strict dependencies. For instance `apache-airflow-providers-postgres` is cyclic with `apache-airflow`, which means it has to become part of the same cycle and thus a dep of targets which may never use Postgres. Maybe this makes sense given how `rules_python` handles requirement features, but it's also a case where to @groodt's previous commentary maybe we want to just remove one leg of the cycle via patching or something else. I don't think it really makes sense to introduce special behavior for breaking let's call them weak cycles, but I could see cases where this behavior could potentially produce build issues.",
      "@rickeylev would you please take a look when you get the chance",
      "This is some pretty solid work. Thanks, @arrdem!"
    ],
    "commit_messages": [
      "feat(pip_repository): Support pip parse cycles (#1166)\n\nThis patch reworks the `pip_repository` machinery to allow users to\nmanually annotate groups of libraries which form packaging cycles in\nPyPi and must be simultaneously installed.\n\nThe strategy here is to transform any dependencies `A` and `B` which\nhave dependencies and are mutually dependent\n\n```mermaid\ngraph LR;\n    A-->B;\n    A-->D;\n    A-->E;\n    B-->A;\n    B-->F;\n    B-->G;\n```\n\ninto a new \"dependency group\" `C` which has `A*` and `B*` as\ndependencies, defined as `A` and `B` less any direct dependencies which\nare members of the group. This is viable _for python_ because Python\nfiles just need to be emplaced into a runfiles directory for the\ninterpreter. We don't actually have a true hard dependency between the\nbuild definition of `A` requiring the build product `B` be available\nwhich requires that the build product of `A` be available.\n\n```mermaid\ngraph LR\n     C-->A*;\n     A*-->D;\n     A*-->E;\n     C-->B*;\n     B*-->F;\n     B*-->G;\n```\nThis gets us most of the way there, as a user can now safely write\n`requirement(\"A\")` and we can provide them with `C`, which has the\ndesired effect of pulling in `A`, `B` and their respective transitives.\n\nThere is one remaining problem - a user writing `deps =\n[requirement(\"A\"), requirement(\"B\")]` will take a double direct\ndependency on `C`. So we need to insert a layer of indirection,\ngenerating `C_A` and `C_B` which serve only as unique aliases for `C` so\nthat we can support the double dependency. Our final dependency graph\nthen is as follows\n\n```mermaid\ngraph LR\n     C_A-->C;\n     C_B-->C;\n     C-->A*;\n     A*-->D;\n     A*-->E;\n     C-->B*;\n     B*-->F;\n     B*-->G;\n```\n\nAddresses #1076, #1188\n\n## To do\n- [x] Get rebased\n- [x] Get re-validated manually\n- [x] Buildifier\n- [x] Get CI happy\n- [x] Update documentation\n- [x] Update changelog\n\n---------\n\nCo-authored-by: Ignas Anikevicius <240938+aignas@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210269ac254a19ac28f608",
    "number": 1164,
    "body": "This PR updates outdated README.md of example.\r\n\r\nCloses #1160 ",
    "head_branch": "fix/example-readme",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1164/checks?check_run_id=12678212793) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "Integration test failed but I don't know why. @f0rmiga \r\n\r\nThis PR only modified README.",
      "@ofey404 mist likely a flake. @f0rmiga or another admin would need to restart the build",
      "@chrislovecnm This PR has been around for a long time.\r\n\r\nWould anyone come and merge it? Since it's reviewed."
    ],
    "commit_messages": [
      "fix: `example/build_file_generation/README.md` (#1164)\n\nThis PR updates outdated README.md of example.\n\nCloses #1160\n\n---------\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026aac254a19ac28f609",
    "number": 1162,
    "body": "The docs explains that for activating coverage support we use `register_coverage_tool = True` inside the rule `register_python_toolchains`. There is no such rule, the actual rule name is `python_register_toolchains`\r\n\r\nSigned-off-by: Andrés Felipe Barco Santa <andres@engflow.com>",
    "head_branch": "andres-engflow-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[docs] Fixing rule name in coverage.md docs (#1162)\n\nThe docs explains that for activating coverage support we use\r\n`register_coverage_tool = True` inside the rule\r\n`register_python_toolchains`. There is no such rule, the actual rule\r\nname is `python_register_toolchains`\r\n\r\nSigned-off-by: Andrés Felipe Barco Santa <andres@engflow.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026aac254a19ac28f60a",
    "number": 1159,
    "body": "Whilst iterating on the gazelle plugin I noticed that the\ntests are taking a really long time to complete (`17s` on\nmy Linux laptop) and running them in parallel reduces that\ntime to less than `5s`, which becomes fast enough for the\ntime being.\n\nSummary:\n- refactor: define `inputs` and `goldens` on the same line\n- refactor: reduce indentation by early returns\n- feat: run tests in parallel and use t.Cleanup\n",
    "head_branch": "gazelle-refactor-generate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test: cleanup gazelle tests and run them in parallel (#1159)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026bac254a19ac28f60b",
    "number": 1158,
    "body": "When using the kind `gazelle:map_kind` directive, `gazelle` will correctly generate the buildfile on the first pass (or if no target of that type / name are present). \r\n\r\nHowever, when running gazelle a second time (or if a target of the mapped kind with the same name is present), `gazelle` will error out saying that it kind create a target of the original kind because a target of mapped kind is present and has the same name. \r\n\r\nEx:\r\nGiven the directive `# gazelle:map_kind py_test py_pytest_test //src/bazel/rules/python:py_pytest_test.bzl`, `gazelle` will correctly generate a `py_pytest_test` target where it would have generated a `py_test` target. \r\n\r\nBut on a second invocation of `gazelle` (and subsequent invocations) it will error our with:\r\n```\r\ngazelle: ERROR: failed to generate target \"//test/python/common:common_test\" of kind \"py_test\": a target of kind \"py_pytest_test\" with the same name already exists. Use the '# gazelle:python_test_naming_convention' directive to change the naming convention.\r\n```",
    "head_branch": "respect_kind_mapping",
    "is_a_fork": true,
    "comments": [
      "We can see the test correctly fails without the fix: https://buildkite.com/bazel/rules-python-python/builds/4567#01875d27-a8ef-4642-bea1-cba19d930bde/339-344"
    ],
    "commit_messages": [
      "fix: respect kind mapping (#1158)\n\nWhen using the kind `gazelle:map_kind` directive, `gazelle` will\r\ncorrectly generate the buildfile on the first pass (or if no target of\r\nthat type / name are present).\r\n\r\nHowever, when running gazelle a second time (or if a target of the\r\nmapped kind with the same name is present), `gazelle` will error out\r\nsaying that it kind create a target of the original kind because a\r\ntarget of mapped kind is present and has the same name.\r\n\r\nEx:\r\nGiven the directive `# gazelle:map_kind py_test py_pytest_test\r\n//src/bazel/rules/python:py_pytest_test.bzl`, `gazelle` will correctly\r\ngenerate a `py_pytest_test` target where it would have generated a\r\n`py_test` target.\r\n\r\nBut on a second invocation of `gazelle` (and subsequent invocations) it\r\nwill error our with:\r\n```\r\ngazelle: ERROR: failed to generate target \"//test/python/common:common_test\" of kind \"py_test\": a target of kind \"py_pytest_test\" with the same name already exists. Use the '# gazelle:python_test_naming_convention' directive to change the naming convention.\r\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026cac254a19ac28f60c",
    "number": 1155,
    "body": "This exposes a new repo and target, `@{name}_host_interpreter//:python`, created by `python.toolchain()`, that points to the host OS's Python interpreter for that particular toolchain.\r\n\r\nThis solves two problems:\r\n 1. `pip.parse()` can now refer to the same interpreter used in the toolchains\r\n 2. There is now a canonical, public, way to refer to the host OS Python interpreter\r\n    for repository rules.\r\n\r\nThe above were _sort of_ possible for users to do already, but it required them to write much more configuration and extension code to do so. This moves that sort of boilerplate into our code so they have a simpler configuration.\r\n\r\nAlso:\r\n- removing bzlmod support in the build_file_generation example; making examples work\r\n  with both WORKSPACE and MODULE is a pain, hence splitting them.\r\n- adding an example of bzlmod and gazelle\r\n- improved documentation in the pip arguments\r\n\r\nCloses: https://github.com/bazelbuild/rules_python/issues/1161",
    "head_branch": "gazelle-updates",
    "is_a_fork": true,
    "comments": [
      "We are having a few flakes, but the building on Windows OS is not working.  See https://github.com/bazelbuild/rules_python/issues/1163.  I have recreated the problem locally.",
      "Posterity/inform other maintainers:\r\n\r\nAlright, this is gonna be a long one. I'll try to keep it as brief as I can. Me and Chris have been talking and I spent the last couple days trying out some ideas. There's a couple ways to do this with some variations, but only one of them is appealing.\r\n\r\nThe tl;dr of that appealing option is a module config that looks like this:\r\n\r\n```\r\npython = use_extension(\"@rules_python:extension.bzl\", \"python\")\r\npython.toolchain(...)\r\n\r\nuse_repo(python, \"python3_9_linux_x86\", \"python3_9_mac_arm\", ...etc...)\r\nhost_python = use_extension(\"@rules_python:extension.bzl\", \"host_python\")\r\nhost_python.register(interpreters=[\"@python3_9_linux_x86\", \"@python3_9_mac_x86\", ...etc..])\r\n\r\nuse_repo(host_python, \"host_python\")\r\npip = use_extension(\"@rules_python:extension.bzl\", \"pip\")\r\npip.parse(..., python_interpreter_target=\"@host_python//:python\")\r\n```\r\n\r\nThe new bit is the middle part, the \"host_python\" parts. Users will have to use this extension to \"register\" which interpreters to use for repository rule commands (aside: maybe rename this to \"repo_python\", as \"host\" carries meaning with host/exec config/actions).\r\n\r\nIt's a bit annoying that users will have to manually list out all the host interpreters they might want to use, but I don't see a way around that. This is because bzlmod restricts when repositories are visible to who. Specifically:\r\n * Within a `module_extension` execution, repos are not visible to one another. e.g. if\r\n   an extension function does `repo(name=\"foo\"); repo(name=\"bar\", tool=\"@foo\")`, then\r\n   an error about \"foo\" not being defined will occur. This means it's required that\r\n   a separate extension consume the interpreter repos generated by the \"python\" extension.\r\n * use_repo() is required to make a repository visible to the current module (Chris said\r\n   this already, just reminding). This means it's required that all the platform-specific\r\n   interpreter repos are in a use_repo() call.\r\n\r\nIn Bazel 6.2, there's supposed to be a feature coming to eliminate a bit of the use_repo() repetition.\r\n\r\nAnyways, back to the host_python extension.\r\n\r\nThis extension is basically a hub to pick out the proper platform-specific interpreter. It's logic is pretty simple: loop through the interpreters list, figure out which one matches `repo_ctx.os`, and then create a symlink to the underlying interpreter (this last step must be done by a helper repository rule). All the possible choices have to be provided as input labels because otherwise it doesn't have access to the underlying files (and will give an error when trying to convert the label to its file location).\r\n\r\nThat's the high level overview. Now onto some alternatives, variations, and tricks.\r\n\r\n----\r\n\r\nThe main alternative is to duplicate the underlying repo that matches the host. e.g., in the \"python\" extension, make an additional call to `python_repository()`:\r\n\r\n```\r\n# python module extension impl\r\ndef _python_impl(module_ctx):\r\n  <loop that calls python_register_toolchains()>\r\n  python_repository(\r\n    name = \"python_host_interpreter\",\r\n    <duplicate the call that python_register_toolchains made that matches ctx.os>\r\n  )\r\n```\r\n\r\nThe downside of this is we're duplicating the whole repo. We _have_ to duplicate it because we can't reference the repos created within the extension function. Note I haven't tried this, but see no reason why it wouldn't work.\r\n\r\n-----\r\n\r\nTrick: The labels don't _entirely_ matter. Note in the tldr, I only wrote the repo name. This is because the label just forms a dependency on the repo, not any specific \"target\" in the repo. I put target in quotes because, as far as I can tell, the labels are just syntactic; they don't have to exist or actually be backed by any BUILD file during this phase. Within the repo rule and module extension, you can arbitrarily manipulate them to get arbitrary files in the repo they point to. **Why does this matter?** It just lets us eliminate some typing in the config is all. e.g., you can give \"@python3_9_linux_arm//:whatever\", and then the repo rule can root around the directory looking at other files to figure out if it matches `repo_ctx.os`. In my prototype, I had each interpreter write a json file of platform info that got read back.\r\n\r\n----\r\n\r\nVariation: The host_python extension isn't strictly necessary. Instead, `pip.parse()` could take a list of the platform-specific interpreters, then figure out which one it should use. This works, but further complicates the pip.parse() interface (it already has 2 ways of specifying an interpreter). I also just think having an explicit way to configure a Python to use for repo-rule stuff is just going to be helpful in general. It's not like repo rules are going away, so having a clear way to register and use a Python interpreter that works on the host sounds like a good idea.\r\n\r\nVariation: The above is _also_ true of the python extension _as long as the repo is passed in as an argument_. e.g. this appears to work:\r\n```\r\npython = use_extension(...)\r\npython.toolchain(...)\r\nuse_repo(python, [\"python_linux_arm\", ...])\r\npython.host_interpreter(interpreters=[\"@python_linux_arm\", ...])\r\nuse_repo(python, \"python_host_interpreter\")\r\n```\r\n\r\n----\r\n\r\nVariation: In my prototype, I made `python_repository()` write a config file of platform information. This could be moved to the extension calls, e.g.\r\n\r\n```\r\nhost_python.register(os=\"linux\", arch=\"arm\", interpreter=\"@python3_9_linux_arm\")\r\nhost_python.register(os=\"mac\", arch=\"arm\", interpreter=\"@python3_9_mac_arm\")\r\n```\r\n\r\nIt just turns into more typing is all. The module and repo can read files, so having the information available as args seems of limited value.\r\n\r\n----\r\n\r\nFuture consideration: Something the bzlmod docs say is that module extensions can access the transitive usages of themselves in the external dependency graph. I _think_ what this might translate to a separate module (specified by bazel_dep) can call the extension to register interprters, and then a higher level call to the extension can see those (by iterating over the modules), and mix them into what it does. Not really sure; haven't tried this, but it's an interesting idea. It seems like the only option that actually eliminates having to repeat all the repo names, though.",
      "Thanks for the thorough explanation of options. \r\n\r\nI align with this sentiment:\r\n\r\n`It's not like repo rules are going away, so having a clear way to register and use a Python interpreter that works on the host sounds like a good idea.`",
      "This pretty much sums it up: \r\n\r\n> Within a module_extension execution, repos are not visible to one another.  e.g., if\r\nan extension function does repo(name=\"foo\"); repo(name=\"bar\", tool=\"@foo\"), then\r\nan error about \"foo\" not being defined will occur.  This means it's required that\r\na separate extension consume the interpreter repos generated by the \"python\" extension.\r\n\r\nTo add to what @rickeylev is saving, the challenge is that we cannot pass the interpreter value into the rules Python extension.  Users can write an extension like the following (pseudo code) in their repo.\r\n\r\n```python\r\n# load interpreter\r\nload(\"@python3//:defs.bzl\", \"interpreter\")\r\n\r\n# inside a repository rule, we do this\r\n# when the extension is located inside a users repository\r\ndef _my_repo_rule_impl(repository_ctx):\r\n     python_bin_name = \"python.exe\" if not on windows\r\n     repo_ctx.symlink(get_path_from_label(interpreter), python_bin)\r\n\r\n# Note the code I got running is about 40 lines of Starklark, so it is nontrivial. \r\n```\r\n\r\nIf you write an extension inside of your project, you can access the `interpreter` label and pass that repo into the rules_python extension.    So the interpreter is already registered, but the rules_python extension cannot directly access it.  @rickeylev, please correct me if I am incorrect.  This is odd IMO.\r\n\r\nI will get this PR working across multiple platforms cause we have been messing with this for weeks, but we can optimize this code more internally.  I don't think we need to write JSON files to the different repositories; we have the information internally and can pass in the various Python binary labels instead.\r\n\r\nAlso, this is only needed when a module/project needs to support running on different operating systems.  If the project only runs on Linux, you set the Python interpreter target to a value like: `@python3_x86_64-unknown-linux-gnu//:bin/python3`.  When you need CI to build this program on Linux, Mac, and Windows, you have to jump through all of these hoops.",
      "CI is passing 🎆 - @rickeylev @f0rmiga PTAL",
      "TODO: update commit message and also the PR documentation.",
      "> So the interpreter is already registered, but the rules_python extension cannot directly access it. This is odd IMO.\r\n\r\nMaybe? It seems congruent with other behaviors we see (i.e. an extension can't see repos it creates within its own extension function). I get the feeling it might stem from the interaction of different behaviors. Something I noticed is if an extension calls `repo(name=\"foo\")`, then, within the `repo()` rule, printing `repo_ctx.attr.name` prints not \"foo\", but e.g. `rules_python~override~foo~foo` (or something like that). It almost seems like extensions intercept the creation of repos (probably to do repo mapping or something).\r\n\r\n----\r\n\r\nFYI, re: repo visibility in an extensions: I discovered that an extension can see repos it creates, _but_ it requires them to be passed as inputs. e.g., this works:\r\n\r\n```\r\n# extension.bzl\r\ndef extension_impl(...)\r\n  repo(name = \"foo\")\r\n  repo(name = \"bar\", other=ctx.tag.bar.other)\r\n\r\npython = extension(\r\n  foo=tag_class(),\r\n  bar=tag_class(attrs={other=attr.label()})\r\n)\r\n\r\npython = use_extension(...)\r\npython.foo(...)\r\nuse_repo(python, \"foo\")\r\npython.bar(other=\"@foo\")\r\n```\r\n\r\nThis doesn't change much, though. It just just allows changing `host_interpreter = use_extension(...); host_interpreter.register(...)` to simply `python.register(...)`.",
      "I am a little worried that this PR includes multiple changes:\r\n* Remove `bzlmod` from `build_file_generation`.\r\n* Include `gazelle` in `bzlmod` example.\r\n* Dynamic interpreter target.\r\n* Improving `bzlmod` example to make it easier to understand/follow to newcomers.\r\n\r\nWhen uploading to BCR, we ought to have a test module and for `rules_python` it was `examples/bzlmod`, which should not include `gazelle` in it, because it checks that `rules_python` can be used without it. In https://github.com/bazelbuild/bazel-central-registry/pull/583 I used `build_file_generation` example, which is the only test module that we have with `gazelle` and `rules_python`. Having separate test modules for both would be go good to retain.\r\n\r\nEven though it may be easier for users to understand how to use `rules_python` when they look at a single example, we may be complicating the release process. @rickeylev, what's your opinion on this?",
      "@aignas has some good points.\r\n\r\nLet's do this, then: \r\n\r\nTake gazelle out of the bzlmod example because, yeah, it's important that our BCR test can verify gazelle isn't required.\r\n\r\nAh oops -- tbh, it wasn't obvious to me that the build_file_generation example was about gazelle integration -- I just figured it was a regression test for one of the many parts of the code that generates BUILD/bzl files. But the readme in there makes it pretty clear it's about gazelle. I'd be +1 for another PR to rename it to \"gazelle\" to make it more clear. In any case, BCR is using it to verify bzlmod+gazelle work together, so lets respect that: keep bzlmod+gazelle in build_file_generation for now.\r\n\r\n@chrislovecnm Xudong sent me some ideas on another way to do this. I'm still trying to digest it. The key parts seem to be having rules_python's MODULE file call use_repo(), and then generating a .bzl file with Labels embedded in it that a separate (still within rules_python) extensions file loads.",
      "re: other ideas for another way to do this: we'll stick with this \"manually construct the canonical repo name\" implementation for now. The other solution has some appeal, but requires moving the pip extension into another file in order to work; moving the extension to another file means a breaking change. I'd rather we fix this bug with pip.parse using the wrong interpreter first; we can move it to a separate file and release that separately from the fix.",
      "@aignas I added a new example that includes bzlmod and gazelle.  We have some issues with the sub-module, which I will file.  I am not changing the build_file_generation example, and I will back out bzlmod support out of that example in another PR.",
      "@linzhp, maybe I do not understand what you recommend, but this is what I did as a test:\r\n\r\n```diff\r\ndiff --git a/python/extensions.bzl b/python/extensions.bzl\r\nindex 3bcbb50..3c3d582 100644\r\n--- a/python/extensions.bzl\r\n+++ b/python/extensions.bzl\r\n@@ -151,11 +151,12 @@ def _repo_mapped_label(module_label, extension_name, apparent):\r\n           name used by the extension named by `ext_name` (i.e. the value of the\r\n           `name` arg the extension passes to repository rules)\r\n     \"\"\"\r\n-    return Label(\"@@{module}~{extension_name}~{apparent}\".format(\r\n-        module = module_label.workspace_name,\r\n-        extension_name = extension_name,\r\n-        apparent = apparent,\r\n-    ))\r\n+    return Label(\"@python3_x86_64-unknown-linux-gnu\")\r\n+    #return Label(\"@@{module}~{extension_name}~{apparent}\".format(\r\n+    #    module = module_label.workspace_name,\r\n+    #    extension_name = extension_name,\r\n+    #    apparent = apparent,\r\n+    #))\r\n\r\n # We are doing some bazel stuff here that could use an explanation.\r\n # The basis of this function is that we need to create a symlink to\r\n```\r\n\r\nI used `return Label(\"@python3_x86_64-unknown-linux-gnu\")` on Linux instead of building the label in the fashion that is working.\r\n\r\nWe then get the error:\r\n\r\n```\r\n$ bazel clean --expunge && bazel build //...\r\nINFO: Starting clean (this may take a while). Consider using --async if the clean takes more than several minutes.\r\nStarting local Bazel server and connecting to it...\r\nDEBUG: gazelle@0.27.0/MODULE.bazel:7:6: WARNING: The bazel_gazelle Bazel module is still highly experimental and subject to change at any time. Only use it to try out bzlmod for now.\r\nDEBUG: rules_go@0.37.0/MODULE.bazel:8:6: WARNING: The rules_go Bazel module is still highly experimental and subject to change at any time. Only use it to try out bzlmod for now.\r\nDEBUG: rules_go@0.33.0/MODULE.bazel:7:6: WARNING: The rules_go Bazel module is still highly experimental and subject to change at any time. Only use it to try out bzlmod for now.\r\nINFO: Repository rules_python~override~python~python3_host_interpreter instantiated at:\r\n  callstack not available\r\nRepository rule _host_hub defined at:\r\n  /home/clove/.cache/bazel/_bazel_clove/e19dab5c65f1ab29c26be4ab0039d0eb/external/rules_python~override/python/extensions.bzl:209:28: in <toplevel>\r\nERROR: An error occurred during the fetch of repository 'rules_python~override~python~python3_host_interpreter':\r\n   Traceback (most recent call last):\r\n        File \"/home/clove/.cache/bazel/_bazel_clove/e19dab5c65f1ab29c26be4ab0039d0eb/external/rules_python~override/python/extensions.bzl\", line 205, column 21, in _host_hub_impl\r\n                repo_ctx.symlink(label, \"python\")\r\nError in symlink: Unable to load package for @[unknown repo 'python3_x86_64-unknown-linux-gnu' requested from @rules_python~override]//:python3_x86_64-unknown-linux-gnu: The repository '@[unknown repo 'python3_x86_64-unknown-linux-gnu' requested from @rules_python~override]' could not be resolved: No repository visible as '@python3_x86_64-unknown-linux-gnu' from repository '@rules_python~override'\r\nERROR: <builtin>: fetching _host_hub rule @rules_python~override//python:rules_python~override~python~python3_host_interpreter: Traceback (most recent call last):\r\n        File \"/home/clove/.cache/bazel/_bazel_clove/e19dab5c65f1ab29c26be4ab0039d0eb/external/rules_python~override/python/extensions.bzl\", line 205, column 21, in _host_hub_impl\r\n                repo_ctx.symlink(label, \"python\")\r\nError in symlink: Unable to load package for @[unknown repo 'python3_x86_64-unknown-linux-gnu' requested from @rules_python~override]//:python3_x86_64-unknown-linux-gnu: The repository '@[unknown repo 'python3_x86_64-unknown-linux-gnu' requested from @rules_python~override]' could not be resolved: No repository visible as '@python3_x86_64-unknown-linux-gnu' from repository '@rules_python~override'\r\nINFO: Repository bazel_tools~remote_coverage_tools_extension~remote_coverage_tools instantiated at:\r\n  callstack not available\r\nRepository rule http_archive defined at:\r\n  /home/clove/.cache/bazel/_bazel_clove/e19dab5c65f1ab29c26be4ab0039d0eb/external/bazel_tools/tools/build_defs/repo/http.bzl:372:31: in <toplevel>\r\nINFO: Repository rules_cc~0.0.2 instantiated at:\r\n  callstack not available\r\nRepository rule http_archive defined at:\r\n  /home/clove/.cache/bazel/_bazel_clove/e19dab5c65f1ab29c26be4ab0039d0eb/external/bazel_tools/tools/build_defs/repo/http.bzl:372:31: in <toplevel>\r\nINFO: Repository rules_java~5.3.5 instantiated at:\r\n  callstack not available\r\nRepository rule http_archive defined at:\r\n  /home/clove/.cache/bazel/_bazel_clove/e19dab5c65f1ab29c26be4ab0039d0eb/external/bazel_tools/tools/build_defs/repo/http.bzl:372:31: in <toplevel>\r\nERROR: /home/clove/.cache/bazel/_bazel_clove/e19dab5c65f1ab29c26be4ab0039d0eb/external/rules_python~override~pip~pip/tabulate/BUILD.bazel:3:6: no such package '@rules_python~override~pip~pip_tabulate//': no such package '@rules_python~override~python~python3_host_interpreter//': Unable to load package for @[unknown repo 'python3_x86_64-unknown-linux-gnu' requested from @rules_python~override]//:python3_x86_64-unknown-linux-gnu: The repository '@[unknown repo 'python3_x86_64-unknown-linux-gnu' requested from @rules_python~override]' could not be resolved: No repository visible as '@python3_x86_64-unknown-linux-gnu' from repository '@rules_python~override' and referenced by '@rules_python~override~pip~pip//tabulate:tabulate'\r\nERROR: Analysis of target '//:bzlmod_build_file_generation' failed; build aborted:\r\nINFO: Elapsed time: 3.694s\r\nINFO: 0 processes.\r\n```\r\n\r\nLet me know if there is a different approach.  We can always iterate to improve this, but we have already spent many hours of dev time on this.\r\n\r\n",
      "I think I remember why calling Label() there doesn't work: It's being called in the repo _implementation_ function, not as part of _evaluating_ the code generated by the repo.\r\n\r\nWhen Label() is called in the host_hub_impl implementation function in extensions.bzl, it's current context is the rules_python module. Since the rules_python module itself never called use_repo() on anything (it can't; the repo names are user selected), it's repo visibility mapping is empty.\r\n\r\nIf host_hub generated a .bzl file with e.g. `Label(\"@python3_x86_64-linux\")`, that _would_ work, because when someone loads the host hub repo, that Label call will be evaluated in the context of the host hub _repo_, which _does_ have access to the other repos that the extension generated.",
      "@rickeylev That's correct. This situation is especially tricky since the resolved label is needed in the implementation function of the repo rule. This may require introducing a helper extension.\n\n@Wyverald and I were discussing a `module_ctx.label_in_repo` function that would drastically simplify such situations. If you would like to see something like this realized, could you file an issue for it?"
    ],
    "commit_messages": [
      "feat(bzlmod): expose platform-agnostic repo target for toolchain interpreter (#1155)\n\nThis exposes a new repo and target, `@{name}_host_interpreter//:python`,\ncreated by `python.toolchain()`, that points to the host OS's Python\ninterpreter for that particular toolchain.\n\nThis solves two problems:\n1. `pip.parse()` can now refer to the same interpreter used in the\ntoolchains\n2. There is now a canonical, public, way to refer to the host OS Python\ninterpreter\n    for repository rules.\n\nThe above were _sort of_ possible for users to do already, but it\nrequired them to write much more configuration and extension code to do\nso. This moves that sort of boilerplate into our code so they have a\nsimpler configuration.\n\nAlso:\n- removing bzlmod support in the build_file_generation example; making\nexamples work\n  with both WORKSPACE and MODULE is a pain, hence splitting them.\n- adding an example of bzlmod and gazelle\n- improved documentation in the pip arguments\n\nCloses: https://github.com/bazelbuild/rules_python/issues/1161"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026dac254a19ac28f60d",
    "number": 1152,
    "body": "Bump the buildifier to the latest version in pre-commit and CI at the same time.\n\nTested by:\n```\n# Revert the fixes made by buildifier 6.1 in #1148\ngit revert 64684ae0498576ad2a09fa528fed07afa5e7307d\n\n# do not commit the changes\n\n# run buildifier on all files\npre-commit run -a buildifier\n\n# observe that the files got fixed\n```\n\nRelated to #1148 and #1151.\n",
    "head_branch": "upgrade-buildifier-6-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: bump buildifier to 6.1.0 (#1152)\n\nBump the buildifier to the latest version in pre-commit and CI at the\r\nsame time.\r\n\r\nRelated to #1148 and #1151."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026eac254a19ac28f60e",
    "number": 1151,
    "body": "The CI may be broken because it is using the latest version of buildifier (`6.1.0`) and the pre-commit hooks are using `6.0.0`. `6.1.0` added extra sorting, so it is now not enough to just run `pre-commit run -a buildifier` to fix the errors. I have submitted a PR to update the pre-commit hooks in https://github.com/keith/pre-commit-buildifier/pull/14 and until it is merged and a new version is tagged we should use an older version of the buildifier to ensure the build is green.\r\n",
    "head_branch": "consistent-buildifier-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: use a consistent buildifier version for CI and pre-commit (#1151)\n\nThe CI may be broken because it is using the latest version of\r\nbuildifier (`6.1.0`) and the pre-commit hooks are using `6.0.0`. `6.1.0`\r\nadded extra sorting, so it is now not enough to just run `pre-commit run\r\n-a buildifier` to fix the errors. I have submitted a PR to update the\r\npre-commit hooks in\r\nhttps://github.com/keith/pre-commit-buildifier/pull/14 and until it is\r\nmerged and a new version is tagged we should use an older version of the\r\nbuildifier to ensure the build is green.\r\n\r\n---------\r\n\r\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026eac254a19ac28f60f",
    "number": 1149,
    "body": "- Updated primary README.md to include documentation for using bzlmod or a WORKSPACE file.\r\n- Updated gazelle/README.md to include documentation for only using bzlmod and provided a link to the older docs.\r\n- Included other general updates for the gazelle documentation.\r\n",
    "head_branch": "bzlmod-docs",
    "is_a_fork": true,
    "comments": [
      "Updated changes for all comments expect https://github.com/bazelbuild/rules_python/pull/1149#discussion_r1156378195.",
      "Everything is updated.  @f0rmiga or @rickeylev are we good to go?",
      "I'm going to merge this despite that comment being addressed because the main point of this PR is to address the bzlmod instructions."
    ],
    "commit_messages": [
      "docs: Updating documentation for bzlmod (#1149)\n\n- Updated primary README.md to include documentation for using bzlmod or\r\na WORKSPACE file.\r\n- Updated gazelle/README.md to include documentation for only using\r\nbzlmod and provided a link to the older docs.\r\n- Included other general updates for the gazelle documentation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621026fac254a19ac28f610",
    "number": 1148,
    "body": "We have some changes with buildifier 6.1.0, and this commit fixes two files to allow ci to pass.",
    "head_branch": "buildifier-fixes",
    "is_a_fork": true,
    "comments": [
      "Looks like the failures are unrelated, so I'll force-merge this."
    ],
    "commit_messages": [
      "build: Fixing buildifier (#1148)\n\nWe have some changes with buildifier 6.1.0, and this commit fixes two\r\nfiles to allow ci to pass."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210270ac254a19ac28f611",
    "number": 1147,
    "body": "This commit updates the gazelle example to only use bzlmod.  The example was previously set up to support bzlmod and also pre-bzlmod configurations, but moving forward I recommend just using bzlmod.  We also missed a change in gazelle because bzlmod was picking up elements from the WORKSPACE file.\r\n\r\nThis commit removes the CI for the legacy bazel support as well.\r\n\r\nI have updated one of the Python unit test names as well.  Gazelle supports unit tests named __test__.py and also unit tests that are named the same as the package name and prefixed or suffixed with the word \"test\".  This example now includes two of the \r\nthree naming schemes.\r\n\r\nAnother commit in this PR contains the code in https://github.com/bazelbuild/rules_python/pull/1146. That commit will fall\r\noff once that PR is merged.",
    "head_branch": "bzlmod-updates",
    "is_a_fork": true,
    "comments": [
      "/retest",
      "Please rebase on #1146 as it has the empty `WORKSPACE.bzlmod` file. Given that we have fixed the example to be correct and work under `bzlmod` as expected should we still remove the old setup? There could be users that are still using legacy `WORKSPACE` way of including deps and using `bzlmod` may not be feasible for them yet.",
      "@aignas i would like to remove the WORKSPACE file contents. The readme refers to GitHub tag that contains a working version not using bzlmod. I am using this code for a tutorial and leaving the WORKSPACE file will make it confusing.",
      "LGTM to refer to a historic version of the example. My only reservation would be the fact that this is being used as an integration test that may be useful to check for regressions. Maybe we could split this into two examples then?",
      "@aignas that is a fair point about the testing.  I will modify the bzlmod example to include gazelle.  I don't want to create yet another example that we are maintaining.",
      "@chrislovecnm, SGTM. Having the `bzlmod` example contain gazelle support is probably the better alternative of the two.",
      "Closing because we have #1155."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210271ac254a19ac28f612",
    "number": 1146,
    "body": "This apparently was not working to begin with, but the CI running the\r\nexample did not catch it because we did not have an empty `WORKSPACE.bzlmod`\r\nfile.\r\n\r\nTested with the CI and with a clean cache on the local laptop.\r\n",
    "head_branch": "bzlmod-gazelle-repro",
    "is_a_fork": true,
    "comments": [
      "cc @f0rmiga as he may be the right person to review this.",
      "@aignas can you run buildifier?",
      "@chrislovecnm, I have, the build is broken for all of the recent PRs. @rickeylev, do you have any idea why?",
      "I cannot reproduce the failure after reverting and it is passing even locally, this definitely needs more investigation",
      "OK, it seems that we **have** to have an empty `WORKSPACE.bzlmod` in all examples that support `bzlmod` or we are running a risk of leaking old style dependencies to `bzlmod` setups.",
      "@f0rmiga or @hrfuller PTAL . I have work on the examples that needs this PR",
      "@aignas you introduced the `@@` in https://github.com/bazelbuild/rules_python/pull/1077/files - was there a mistake in that PR, or has something changed in the meantiime?\r\n\r\nIn other rulesets I work on, we needed the `@@` to get the canonical rather than apparent module name under bzlmod. for example https://github.com/aspect-build/rules_js/blob/8dc6d52c1224775c75c5cba2524837ca66b3b33b/npm/private/npm_translate_lock_generate.bzl#L913-L916\r\nSo I'm suspicious if this is correct. I see this PR is green, so maybe I should trust that there's enough testing.\r\n\r\nAlso to detect the `--enable_bzlmod` flag you can start from https://github.com/aspect-build/bazel-lib/blob/main/docs/utils.md#is_bzlmod_enabled by the way",
      "@alexeagle we found the problem by migrating the gazelle example over to only bzlmod.  The WORKSPACE file was bleeding into the setup.  This fixes the problem so the example can function using bzlmod or the WORKSPACE file.  I am removing bzlmod from the gazelle example and putting gazelle into the bzlmod example to resolve this further.\r\n\r\nWe would need gazelle in the bzlmod example to completely test this; the testing here is not covering the problem.   \r\n\r\n@aignas, I wonder if we need another unit test to recreate this problem.  Correct me if I am wrong, but the WORKSAPCE.bzl makes it so that \r\n\r\n@alexeagle I assume we should not have to support having a project that uses a WORKSPACE file, and a MODULES.bzl file at the same time.\r\n\r\n"
    ],
    "commit_messages": [
      "fix: correct the labels returned by all_requirements lists (#1146)\n\nThis apparently was not working to begin with, but the CI running the\r\nexample did not catch it because we did not have an empty\r\n`WORKSPACE.bzlmod`\r\nfile.\r\n\r\nTested with the CI and with a clean cache on the local laptop."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210272ac254a19ac28f613",
    "number": 1145,
    "body": "The interface of `repository_ctx.download` and `repository_ctx.download_and_extract` supports string lists as well as strings as the value of the `url` argument. This is the ultimate destination of the `url` attribute in the `tool_versions` dictionary, so it makes sense for it to support lists as well.\r\n\r\nIt is often useful to provide multiple download URLs, e.g. when vendoring deps through a mirror (to guard against issues like [git archive checksums changing](https://github.blog/changelog/2023-01-30-git-archive-checksums-may-change/) while still keeping the canonical download URL) or in an airgapped setting (to support internal URLs alongside external URLs). This is also pretty common around Bazel repository rules that download things, e.g. [http_archive](https://bazel.build/rules/lib/repo/http#http_archive-urls), so it can be expected to work with `tool_versions` too.",
    "head_branch": "urls-support",
    "is_a_fork": true,
    "comments": [
      "This looks reasonable. Can you describe the use case for this?",
      "I think this fixes #964.",
      "This change seems to have caused this DEBUG message for me:\r\n\r\n```\r\nDEBUG: Rule 'python_3_8_16_x86_64-unknown-linux-gnu' indicated that a canonical reproducible form can be obtained by modifying arguments url = [\"<my python url>\"] and dropping [\"urls\"]\r\n```\r\n\r\nwhich is fixed (after some digging and finding this PR) by changing my `tool_versions` `url` from a string to a singleton list.\r\n\r\nHowever, this was a bit tricky to figure out, and though I don't exactly understand *why* this change would cause that DEBUG message, it seems that it must be the culprit. @quval @rickeylev is there an obvious fix that can be made here? I would think both a string URL and a singleton list would be equally canonical/reproducible."
    ],
    "commit_messages": [
      "feat: Support specifying multiple download URLs in tool_versions. (#1145)\n\nThe interface of `repository_ctx.download` and\r\n`repository_ctx.download_and_extract` supports string lists as well as\r\nstrings as the value of the `url` argument. This is the ultimate\r\ndestination of the `url` attribute in the `tool_versions` dictionary, so\r\nit makes sense for it to support lists as well.\r\n\r\nIt is often useful to provide multiple download URLs, e.g. when\r\nvendoring deps through a mirror (to guard against issues like [git\r\narchive checksums\r\nchanging](https://github.blog/changelog/2023-01-30-git-archive-checksums-may-change/)\r\nwhile still keeping the canonical download URL) or in an airgapped\r\nsetting (to support internal URLs alongside external URLs). This is also\r\npretty common around Bazel repository rules that download things, e.g.\r\n[http_archive](https://bazel.build/rules/lib/repo/http#http_archive-urls),\r\nso it can be expected to work with `tool_versions` too."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210273ac254a19ac28f614",
    "number": 1143,
    "body": "Since https://github.com/bazelbuild/rules_python/pull/999, gazelle can generate multiple `py_test` rules in a single package (when it finds multiple `*_test.py` or `test_*.py` files and no `__test__.py` file). In this case, adding new test files to a package with pre-existing `py_test` rules is not handled properly due to the `MatchAny` property on the `py_test` kind - it will match the existing `py_test` rule and edit it instead of adding a new test rule. This PR disables the matching so that new `py_test` rules are properly generated.",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1143/checks?check_run_id=12440093615) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "@amartani do you mind signing the CLA?  I am working on the gazelle examples and I would love to get this fix in.",
      "Sorry for the delay. CLA signed; and I rebased my branch to re-run the tests with the buildifier fixes merged into main. Thanks!",
      "@chrislovecnm ☝️ (not sure if GitHub notified you on my reply)",
      "@linzhp fyi as the author of the PR referenced",
      "@amartani yep I got the email. We need someone to review the PR"
    ],
    "commit_messages": [
      "fix: gazelle correctly adds new py_test rules (#1143)\n\nSince https://github.com/bazelbuild/rules_python/pull/999, gazelle can\r\ngenerate multiple `py_test` rules in a single package (when it finds\r\nmultiple `*_test.py` or `test_*.py` files and no `__test__.py` file). In\r\nthis case, adding new test files to a package with pre-existing\r\n`py_test` rules is not handled properly due to the `MatchAny` property\r\non the `py_test` kind - it will match the existing `py_test` rule and\r\nedit it instead of adding a new test rule. This PR disables the matching\r\nso that new `py_test` rules are properly generated."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210273ac254a19ac28f615",
    "number": 1138,
    "body": "Fixes https://github.com/bazelbuild/rules_python/issues/1121.",
    "head_branch": "f0rmiga/bump-installer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: bump installer to handle windows better (#1138)\n\nFixes https://github.com/bazelbuild/rules_python/issues/1121.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210274ac254a19ac28f616",
    "number": 1137,
    "body": "This helps avoid loading one rule requiring loading everything.\r\n\r\nWithin Google, this makes some Starlark testing frameworks avoid having to mock far away dependencies of dependencies.",
    "head_branch": "split-exports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: factor reexports.bzl into the respective implementation files (#1137)\n\nThis helps avoid loading one rule requiring loading everything.\r\n\r\nWithin Google, this makes some Starlark testing frameworks avoid having\r\nto mock far away dependencies of dependencies."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210275ac254a19ac28f617",
    "number": 1133,
    "body": "If the import scanner stumbles across a file with a syntax error, gazelle dies with a message that fails to specify what file it choked on.  Fix that.\r\n\r\nBefore: \r\n```\r\n  File \"<unknown>\", line 28\r\n    class FilesystemDatasetProvider:\r\nIndentationError: expected an indented block\r\n\"\"\"\r\n```\r\n\r\nAfter:\r\n```\r\n  File \"libs/remote/python/filesystem_dataset.py\", line 28\r\n    class FilesystemDatasetProvider:\r\nIndentationError: expected an indented block\r\n\"\"\"\r\n```",
    "head_branch": "python-parse-filename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Include filename when parsing imports for gazelle (#1133)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210276ac254a19ac28f618",
    "number": 1131,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Bugfix\r\n- [X] Build related changes\r\n\r\n## What is the current behavior?\r\n\r\n`compile_pip_requirements`:\r\n- Forced the `no-remote-exec` tag on all its users, conflicting with our current toolchain + RBE setup.\r\n- Use `shutil.copy` to copy files around. While this works for the current script, it broke in our remote execution enviornment, since it tries to open the destination file for writing.\r\n\r\n## What is the new behavior?\r\n\r\n- Make the tags optional. I chose to implement them as an overridable default because it more closer resembles the current implementation, but I think there is latitude to make some required (e.g. `requires-network`) and some optional (`no-remote-exec`).\r\n- `shutil.move` can move files across namespaces, and preserves the semantics of `os.replace` better.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n",
    "head_branch": "blorente/compile-requirements",
    "is_a_fork": true,
    "comments": [
      "It looks like you still need to update the docs via `bazel run //docs:update` to fix the build failures.",
      "The change seems benign, but looking closer those tags seem to only apply to the generated `_test` target, unless the binary is used as a tool in an action elsewhere, so maybe those can be added to the test tags only. @f0rmiga do you remember if the no-sandbox and no-remote-exec tags were needed for the updater binary?",
      "I'll have to dig the history to remember the details.",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210277ac254a19ac28f619",
    "number": 1128,
    "body": "This provides a public entry point for loading the underlying `PyCcLinkParamsProvider` provider that is built into Bazel. This provider isn't yet usable from Bazel, but adding a loadable way for it to migrate off the built-in rules is the first step.\r\n\r\nWork towards #1069\r\n",
    "head_branch": "cc-link-params",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add public entry point for PyCcLinkParamsInfo (#1128)\n\nThis provides a public entry point for loading the underlying\r\n`PyCcLinkParamsProvider` provider that is built into Bazel. This\r\nprovider isn't yet usable from Bazel, but adding a loadable way for it\r\nto migrate off the built-in rules is the first step.\r\n\r\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210277ac254a19ac28f61a",
    "number": 1127,
    "body": "Silent r's are tricky.",
    "head_branch": "fixem-layberries",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: fix typo: libraries, not libaries (#1127)\n\nSilent r's are tricky."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210278ac254a19ac28f61b",
    "number": 1126,
    "body": "The extraneous newlines were bothering me.",
    "head_branch": "fix-defs-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: reformat defs.bzl doc string. (#1126)\n\nThe extraneous newlines were bothering me."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210279ac254a19ac28f61c",
    "number": 1124,
    "body": "Previously when running the compile_pip_requirements test from an external repository the test failed. This was due to the fact that paths in the annotations of the lock file contained paths from the external repository. Another problem was that the requirement files could not be located. \r\n",
    "head_branch": "fix-running-compile-pip-requirements-test-from-external-repo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: compile_pip_requirements test from external repositories (#1124)\n\nPreviously when running the compile_pip_requirements test from an\r\nexternal repository the test failed. This was due to the fact that paths\r\nin the annotations of the lock file contained paths from the external\r\nrepository. Another problem was that the requirement files could not be\r\nlocated."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027aac254a19ac28f61d",
    "number": 1123,
    "body": "Currently the dependency_resolver.py ignores that you give requirement lock files for different os's, except when checking if the golden file needs updating. This causes dependecy_resolver.py to update the wrong lock i.e the non platform specific one if ran in \"update mode\".",
    "head_branch": "fix-os-specific-requirements-lock",
    "is_a_fork": true,
    "comments": [
      "Should we add this functionality inside one of our examples?",
      "@aignas can you review? You are more familiar with this part of the code base",
      "@Rasrack can you rebase? Please also include a description in the PR."
    ],
    "commit_messages": [
      "fix: update correct requirements lock file when using os specific lock files (#1123)\n\nCurrently the dependency_resolver.py ignores that you give requirement\nlock files for different os's, except when checking if the golden file\nneeds updating. This causes dependecy_resolver.py to update the wrong\nlock i.e the non platform specific one if ran in \"update mode\"."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027bac254a19ac28f61e",
    "number": 1122,
    "body": "This is basically a performance optimization. Bazel can only see that a bzl file changed, not the particular contents. This means that any downstream bzl file loading it is invalidated, even if it doesn't load any of the affected code. As an example, if a package only loads `py_library.bzl`, then changing `py_test.bzl` doesn't need to invalidate all libraries.\r\n\r\n* Also removes some more extraneous license comments\r\n\r\nWork towards #1069\r\n",
    "head_branch": "bzl-per-rule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: bzl file per rule/provider (#1122)\n\nThis is basically a performance optimization. Bazel can only see that a\r\nbzl file changed, not the particular contents. This means that any\r\ndownstream bzl file loading it is invalidated, even if it doesn't load\r\nany of the affected code. As an example, if a package only loads\r\n`py_library.bzl`, then changing `py_test.bzl` doesn't need to invalidate\r\nall libraries.\r\n\r\n* Also removes some more extraneous license comments\r\n\r\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027bac254a19ac28f61f",
    "number": 1120,
    "body": null,
    "head_branch": "repro",
    "is_a_fork": false,
    "comments": [
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\"",
      "FYI, I deleted this branch because it was named `repro`, which makes it impossible to create branches like `repro/this-is-another-repro`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027cac254a19ac28f620",
    "number": 1119,
    "body": "The rest of the project uses BUILD.bazel",
    "head_branch": "rename-proto-build-file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: rename proto BUILD -> BUILD.bazel (#1119)\n\nThe rest of the project uses BUILD.bazel"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027dac254a19ac28f621",
    "number": 1118,
    "body": "The license comments aren't necessary anymore.",
    "head_branch": "remove-proto-license-coment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: Remove license comment in proto build file (#1118)\n\nThe license comments aren't necessary anymore."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027eac254a19ac28f622",
    "number": 1117,
    "body": "This is to prevent accidentally leaking targets that shouldn't be accessible. The `:python_toolchain` target is public because it's an implicit dependency of `py_proto_library`.",
    "head_branch": "fix-proto-visibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: restrict proto package visibility to private (#1117)\n\nThis is to prevent accidentally leaking targets that shouldn't be\r\naccessible. The `:python_toolchain` target is public because it's an\r\nimplicit dependency of `py_proto_library`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027fac254a19ac28f623",
    "number": 1116,
    "body": "This is mostly so Google internal tooling can find the complete deps, but also as a best practice for consumption by other rules and tools.\r\n",
    "head_branch": "add-bzl-library",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add bzl_library for proto.bzl (#1116)\n\nThis is mostly so Google internal tooling can find the complete deps,\r\nbut also as a best practice for consumption by other rules and tools."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621027fac254a19ac28f624",
    "number": 1115,
    "body": "This is so that the transitive dependencies of defs.bzl can be easily found and validated; some Google internal tooling does this validation.\r\n\r\nThe old comment indicated bzl_library wasn't used to avoid a dependency on skylib, however, we've since added a dependency on skylib.\r\n\r\nWork towards #1069\r\n",
    "head_branch": "add-bzl-library",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add bzl_library for defs.bzl and its dependencies (#1115)\n\nThis is so that the transitive dependencies of defs.bzl can be easily\r\nfound and validated; some Google internal tooling does this validation.\r\n\r\nThe old comment indicated bzl_library wasn't used to avoid a dependency\r\non skylib, however, we've since added a dependency on skylib.\r\n\r\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210280ac254a19ac28f625",
    "number": 1114,
    "body": null,
    "head_branch": "ignore_root_bzlmod",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(bzlmod): expose ignore_root_user_error attribute from python_register_toolchains (#1114)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210281ac254a19ac28f626",
    "number": 1113,
    "body": "As the title states - expands make variable substitution to abi and python tags.\r\n\r\nSee the example for usage.\r\n\r\nNB: It allows variables to be passed in via toolchains (in which case it appears under `ctx.var`) or via `deps` (in which case it appears under `dep[].variables`)",
    "head_branch": "stonier/py_wheel_make_variables",
    "is_a_fork": true,
    "comments": [
      "@alexeagle as discussed in slack."
    ],
    "commit_messages": [
      "feat: make variable substitution for py_wheel abi, python_tag args (#1113)\n\nExpands make variables in to `abi` and `python_tag` attributes\r\n\r\n---------\r\n\r\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210282ac254a19ac28f627",
    "number": 1112,
    "body": "PR Instructions/requirements\r\n\r\nExposes one of the many args that used to be exposed via pre-module functions.\r\n\r\n----\r\n\r\nQ: Was there a reason that a limited argument set was made available with the module api?",
    "head_branch": "stonier/expose_ignore_root_user_error",
    "is_a_fork": true,
    "comments": [
      "Ah, I saw Alex's PR before this one, sorry. His is merged already.\r\n\r\nThis PR adds some doc, though. Can you update to head? This PR can add the doc.",
      "For reference, alex's PR is in #1114 ",
      "> This PR adds some doc, though. Can you update to head? This PR can add the doc.\r\n\r\nDone."
    ],
    "commit_messages": [
      "fix: docs for ignore_root_user_error at the module level (#1112)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210282ac254a19ac28f628",
    "number": 1111,
    "body": "PR Instructions/requirements\r\n\r\nExposes one of the many args that used to be exposed via pre-module functions.\r\n\r\n----\r\n\r\nQ: Was there a reason that a limited argument set was made available with the module api?",
    "head_branch": "stonier/ignore_root_user_error",
    "is_a_fork": true,
    "comments": [
      "Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/bazelbuild/rules_python/pull/1111/checks?check_run_id=11811288449) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.",
      "> Q: Was there a reason that a limited argument set was made available with the module api?\r\n\r\nNot really. It's just a bit uncommon to need root, and the bzlmod support involved a decent amount of refactoring. It was probably just an oversight."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210283ac254a19ac28f629",
    "number": 1110,
    "body": "Currently we render:\r\n```\r\nvalidate with bazel test &lt;name&gt;_test\r\nupdate with bazel run &lt;name&gt;.update\r\n```",
    "head_branch": "alexeagle-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: fix syntax that stardoc misunderstands as HTML (#1110)\n\nUpdate requirements.bzl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210284ac254a19ac28f62a",
    "number": 1108,
    "body": "This was pointed out in a thread on bazel-discuss@googlegroups.com\r\n",
    "head_branch": "docs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: fix some lingering GH archive URLs (#1108)\n\nThis was pointed out in a thread on bazel-discuss@googlegroups.com"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210285ac254a19ac28f62b",
    "number": 1102,
    "body": "This is to provide some regression tests for the Starlark rewrite.\r\n\r\nThese tests are approximately the same as Bazel's Java-implemented tests.\r\n\r\nWork towards #1069",
    "head_branch": "pystar-add-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "test(core): Add analysis tests for base Python rules. (#1102)\n\nThis is to provide some regression tests for the Starlark rewrite.\r\n\r\nThese tests are approximately the same as Bazel's Java-implemented\r\ntests.\r\n\r\nWork towards #1069"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210286ac254a19ac28f62c",
    "number": 1100,
    "body": "The existing template is very verbose with many of the lines not being applicable to any given PR. This also makes the PR description poorly suitable for a commit description.\r\n\r\nBy having a cleaner PR description that is commit message friendly, whoever merges the PR can more easily create a meaningful commit message. It also allows other maintainer's to clean up the description prior to it being merged.\r\n",
    "head_branch": "pr-template",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Simplify pull request template (#1100)\n\nThe existing template is very verbose with many of the lines not being\r\napplicable to any given PR. This also makes the PR description poorly\r\nsuitable for a commit description.\r\n\r\nBy having a cleaner PR description that is commit message friendly,\r\nwhoever merges the PR can more easily create a meaningful commit\r\nmessage. It also allows other maintainer's to clean up the description\r\nprior to it being merged."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210287ac254a19ac28f62d",
    "number": 1099,
    "body": "Having a standard format for commit messages makes it easier to understand what general behaviors and functionality are being affected. This makes it easier to easier to generate changelog information for releases and quickly skim PRs.\r\n\r\nThe default commitizen style is used, which is Conventional Commits. Docs are updated to give a brief description of the format and common types.\r\n\r\nThis isn't enforced using pre-commit hooks because PRs squash commits and use the PR description for the merged commit message, which makes linting intermediate commits rather moot.",
    "head_branch": "pr-add-commitizen",
    "is_a_fork": true,
    "comments": [
      "Actually, after playing around with this a bit more, the commitizen local hook is kind of annoying. I'm not sure it _really_ helps, either. The thing I *really* want is for the commits that get merged to have the structured format. Having it in PRs is a nice to have, but not a necessity. I don't care about what an author's local chain of commits looks like.\r\n\r\nI'm going to update this to keep the docs, but remove the commitizen hook. Maybe I'll look into if there's a GH action that can do some basic checking of commit messages to enforce them upon merging.",
      "It would indeed be easy to check for the PR title in a GH Action. Can be done separately."
    ],
    "commit_messages": [
      "docs: doc that the Conventional Commit style should be used for merged commits and PRs (#1099)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210287ac254a19ac28f62e",
    "number": 1098,
    "body": "Having a standard format for commit messages makes it easier to\r\nunderstand what general behaviors and functionality are being affected.\r\nThis makes it easier to easier to generate changelog information for\r\nreleases and quickly skim PRs.\r\n\r\nThe default commitizen style is used, which is Conventional\r\nCommits. Docs are updated to give a brief description of the format\r\nand common types.",
    "head_branch": "add-commitizen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210288ac254a19ac28f62f",
    "number": 1097,
    "body": "The local script has the drawback that devs have to manually install the `addlicense` tool. In comparison, using the upstream repo's configuration allows pre-commit to install the tools automatically.",
    "head_branch": "precomp-from-repo",
    "is_a_fork": true,
    "comments": [
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210289ac254a19ac28f630",
    "number": 1096,
    "body": "This resolve an issue where an older isort version don't work with a newer poetry version.\r\n\r\nI think this problem occurs if you've upgraded isort (which upgrades poetry, I think), but then downgrade isort (which doesn't downgrade poetry, too). (I think this is what I ended up doing)",
    "head_branch": "update-precommit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Update pre-commit dependency versions so isort works. (#1096)\n\nThis resolve an issue where an older isort version don't work with a\r\nnewer poetry version.\r\n\r\nI think this problem occurs if you've upgraded isort (which upgrades\r\npoetry, I think), but then downgrade isort (which doesn't downgrade\r\npoetry, too)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028aac254a19ac28f631",
    "number": 1095,
    "body": "Integrate the addlicense.sh script with the pre-commit config so that it automatically runs when git committing.",
    "head_branch": "add-license-precommit",
    "is_a_fork": true,
    "comments": [
      "The standard way to do this is expose a pre-commit hook from the addlicense repo, so that everyone can add it, and you don't need a shell script or a new `.pre-commit-hooks.yaml` here",
      "Thanks for the pointer. I sent https://github.com/google/addlicense/pull/143. Once accepted (I don't see why it wouldn't be...), we'll have to wait for them to do a release with a stable tag to use in the configs. I have another PR ready for when that happens.\r\n\r\nIn the meantime, I found the docs that tell how to correctly setup a local hook and updated the code to do that. PTAL.",
      "It bothers me that pre-commit doesn't use Bazel for the binaries. The best way to deal with this is:\r\n\r\n- Pull the binaries using http_archives.\r\n- Create an alias with selects to resolve the platform.\r\n- Create a shell wrapper that cd into `BUILD_WORKSPACE_DIRECTORY` and execute the binary:\r\n```shell\r\n#!/usr/bin/env bash\r\n\r\nset -o errexit -o nounset\r\n\r\ncd \"${BUILD_WORKSPACE_DIRECTORY}\"\r\n\r\nexec \"${ADDLICENSE_BINARY}\" \"$@\"\r\n```\r\n- Add the `entry` attribute to the pre-commit hook with `entry: \"bazel run //<pre-commit wrappers package>:addlicense --\"`.",
      "Pre-commit running Bazel is not great due to https://github.com/pre-commit/pre-commit/issues/1003#issuecomment-485298512\r\nI think it does a pretty good job of providing the hermetic tooling and there's no need for Bazel where there's no dependency graph IMO",
      "Can we get this into a test?  CI should fail on this.",
      "@rickeylev ping",
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\""
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028aac254a19ac28f632",
    "number": 1094,
    "body": "Remembering the whole dance of commands and tools is hard, so put it in a script.\r\n\r\nWork towards #916",
    "head_branch": "add-license-tool",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a script to add missing license headers (#1094)\n\nWork towards #916"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028bac254a19ac28f633",
    "number": 1093,
    "body": "This is to prevent the issue where the checksum of the auto-generated archive files may change due to GitHub internal changes.\r\n\r\nFixes #1072",
    "head_branch": "fix-bcr-url",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Use GitHub download URL for BCR URL instead of archive URL. (#1093)\n\nThis is to prevent the issue where the checksum of the auto-generated\r\narchive files may change due to GitHub internal changes.\r\n\r\nFixes #1072"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028cac254a19ac28f634",
    "number": 1092,
    "body": "I can never remember what the syntax is of the compare URLs, so just doc it to make it easier.",
    "head_branch": "release-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "docs: Tell how to use GitHub to find commits in an upcoming release. (#1092)\n\nI can never remember what the syntax is of the compare URLs, so just doc\r\nit to make it easier."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028dac254a19ac28f635",
    "number": 1091,
    "body": "\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n- [x] Bugfix\r\n\r\n## What is the current behavior?\r\n\r\nSources from runtime needed by py_proto_library are not added to PyInfo.\r\n\r\n## What is the new behavior?\r\n\r\nThe sources are added.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "fix-py_proto_library",
    "is_a_fork": true,
    "comments": [
      "LGTM, but...\r\n\r\nWas there a failure you found from them missing? I'm not sure what, if anything, is actually using PyInfo.transitive_sources.",
      "It seems, this is not needed. This is related to https://github.com/bazelbuild/bazel/pull/17545. I tested that change with the main branch of rules_python and it also works.\r\n\r\nAny way and the other with 18.1, files from proto runtime were missing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028eac254a19ac28f636",
    "number": 1089,
    "body": "Bumps [markdown-it-py](https://github.com/executablebooks/markdown-it-py) from 2.1.0 to 2.2.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/executablebooks/markdown-it-py/releases\">markdown-it-py's releases</a>.</em></p>\n<blockquote>\n<h2>v2.2.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>⬆️ UPGRADE: Allow linkify-it-py v2 by <a href=\"https://github.com/hukkin\"><code>@​hukkin</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/218\">#218</a></li>\n<li>🐛 FIX: CVE-2023-26303 by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/246\">#246</a></li>\n<li>🐛 FIX: CLI crash on non-utf8 character by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/247\">#247</a></li>\n<li>📚 DOCS: Update the example by <a href=\"https://github.com/redstoneleo\"><code>@​redstoneleo</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/229\">#229</a></li>\n<li>📚 DOCS: Add section about markdown renderer by <a href=\"https://github.com/holamgadol\"><code>@​holamgadol</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/227\">#227</a></li>\n<li>🔧 Create SECURITY.md by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/248\">#248</a></li>\n<li>🔧 MAINTAIN: Update mypy's additional dependencies by <a href=\"https://github.com/hukkin\"><code>@​hukkin</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/217\">#217</a></li>\n<li>Fix typo by <a href=\"https://github.com/jwilk\"><code>@​jwilk</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/230\">#230</a></li>\n<li>🔧 Bump GH actions by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/244\">#244</a></li>\n<li>🔧 Update benchmark pkg versions by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/245\">#245</a></li>\n</ul>\n<h2>New Contributors</h2>\n<p>Thanks to 🎉</p>\n<ul>\n<li><a href=\"https://github.com/jwilk\"><code>@​jwilk</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/230\">#230</a></li>\n<li><a href=\"https://github.com/holamgadol\"><code>@​holamgadol</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/227\">#227</a></li>\n<li><a href=\"https://github.com/redstoneleo\"><code>@​redstoneleo</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/229\">#229</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/executablebooks/markdown-it-py/compare/v2.1.0...v2.2.0\">https://github.com/executablebooks/markdown-it-py/compare/v2.1.0...v2.2.0</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/executablebooks/markdown-it-py/blob/master/CHANGELOG.md\">markdown-it-py's changelog</a>.</em></p>\n<blockquote>\n<h2>2.2.0 - 2023-02-22</h2>\n<h3>What's Changed</h3>\n<ul>\n<li>⬆️ UPGRADE: Allow linkify-it-py v2 by <a href=\"https://github.com/hukkin\"><code>@​hukkin</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/218\">#218</a></li>\n<li>🐛 FIX: CVE-2023-26303 by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/246\">#246</a></li>\n<li>🐛 FIX: CLI crash on non-utf8 character by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/247\">#247</a></li>\n<li>📚 DOCS: Update the example by <a href=\"https://github.com/redstoneleo\"><code>@​redstoneleo</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/229\">#229</a></li>\n<li>📚 DOCS: Add section about markdown renderer by <a href=\"https://github.com/holamgadol\"><code>@​holamgadol</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/227\">#227</a></li>\n<li>🔧 Create SECURITY.md by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/248\">#248</a></li>\n<li>🔧 MAINTAIN: Update mypy's additional dependencies by <a href=\"https://github.com/hukkin\"><code>@​hukkin</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/217\">#217</a></li>\n<li>Fix typo by <a href=\"https://github.com/jwilk\"><code>@​jwilk</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/230\">#230</a></li>\n<li>🔧 Bump GH actions by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/244\">#244</a></li>\n<li>🔧 Update benchmark pkg versions by <a href=\"https://github.com/chrisjsewell\"><code>@​chrisjsewell</code></a> in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/245\">#245</a></li>\n</ul>\n<h3>New Contributors</h3>\n<p>Thanks to 🎉</p>\n<ul>\n<li><a href=\"https://github.com/jwilk\"><code>@​jwilk</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/230\">#230</a></li>\n<li><a href=\"https://github.com/holamgadol\"><code>@​holamgadol</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/227\">#227</a></li>\n<li><a href=\"https://github.com/redstoneleo\"><code>@​redstoneleo</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/pull/229\">#229</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/executablebooks/markdown-it-py/compare/v2.1.0...v2.2.0\">https://github.com/executablebooks/markdown-it-py/compare/v2.1.0...v2.2.0</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/73a01479212bfe2aea0b995b4d13c8ddca2e4265\"><code>73a0147</code></a> 🚀 RELEASE: v2.2.0 (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/250\">#250</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/53ca3e9c2b9e9b295f6abf7f4ad2730a9b70f68c\"><code>53ca3e9</code></a> 🐛 FIX: CLI crash on non-utf8 character (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/247\">#247</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/6491bc2491a07a8072e5d40f27eab6430585c42c\"><code>6491bc2</code></a> 📚 Add email to security section (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/249\">#249</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/cf8b2d8c561233d4c18c55e80b68c8d06850fda6\"><code>cf8b2d8</code></a> 🔧 Create SECURITY.md (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/248\">#248</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/ae03c6107dfa18e648f6fdd1280f5b89092d5d49\"><code>ae03c61</code></a> 🐛 FIX: CVE-2023-26303 (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/246\">#246</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/2c93e0b6a8aec7e5a6e1bdef502de7d95ec2a192\"><code>2c93e0b</code></a> 📚 DOCS: Update the example (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/229\">#229</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/4670f0cdd7a9e8ab7523f51b0beb1d4ea27bb1b7\"><code>4670f0c</code></a> ⬆️ UPGRADE: Allow linkify-it-py v2 (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/218\">#218</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/032c742671c4d6ad12ecd5cd072164e2f3812c12\"><code>032c742</code></a> 📚 DOCS: Add section about markdown renderer (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/227\">#227</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/c9f6856dcc3f5f73ce01571dd280d6139b0c1185\"><code>c9f6856</code></a> 🔧 Update benchmark pkg versions (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/245\">#245</a>)</li>\n<li><a href=\"https://github.com/executablebooks/markdown-it-py/commit/2160a3daec2a7a007e5a7f5f941eaaad001a2d95\"><code>2160a3d</code></a> 🔧 Bump GH actions (<a href=\"https://github-redirect.dependabot.com/executablebooks/markdown-it-py/issues/244\">#244</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/executablebooks/markdown-it-py/compare/v2.1.0...v2.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=markdown-it-py&package-manager=pip&previous-version=2.1.0&new-version=2.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n",
    "head_branch": "dependabot/pip/tools/publish/markdown-it-py-2.2.0",
    "is_a_fork": false,
    "comments": [
      "This Pull Request has been automatically marked as stale because it has not had any activity for 180 days. It will be closed if no further activity occurs in 30 days.\nCollaborators can add an assignee to keep this open indefinitely. Thanks for your contributions to rules_python!",
      "This PR was automatically closed because it went 30 days without a reply since it was labeled \"Can Close?\"",
      "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028eac254a19ac28f637",
    "number": 1088,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nWith `common --experimental_enable_bzlmod` option defs.bzl is generated as\r\n```\r\nload(\"@rules_python~override//python/config_settings:transition.bzl\", _py_binary = \"py_binary\", _py_test = \"py_test\")\r\nload(\"@rules_python~override//python:pip.bzl\", _compile_pip_requirements = \"compile_pip_requirements\")\r\n```\r\nand these lines cause a problem at\r\n```\r\nload(\"@python3_9//:defs.bzl\", \"interpreter\")\r\n```\r\nas\r\n```\r\n\r\nERROR: .../BUILD:25:11: error loading package 'src': at .../external/rules_python~override~python~python3_9/defs.bzl:4:6: Unable to find package for @[unknown repo 'rules_python~override' requested from @rules_python~override~python~python3_9]//python:pip.bzl: The repository '@[unknown repo 'rules_python~override' requested from @rules_python~override~python~python3_9]' could not be resolved: No repository visible as '@rules_python~override' from repository '@rules_python~override~python~python3_9'. and referenced by '...'\r\n```\r\n\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nGenerated load statements\r\n```\r\nload(\"@@rules_python~override//python/config_settings:transition.bzl\", _py_binary = \"py_binary\", _py_test = \"py_test\")\r\nload(\"@@rules_python~override//python:pip.bzl\", _compile_pip_requirements = \"compile_pip_requirements\")\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix/load_interpreter",
    "is_a_fork": true,
    "comments": [
      "@hrfuller @rickeylev please could you review the fix?",
      "@oxidase could you modify the example for bzlmod to assert this, please?",
      "@f0rmiga added `test_with_transition` to the example. Without the fix running tests fails as\r\n```\r\ncd examples/bzlmod && bazel test //...\r\nERROR: error loading package under directory '': error loading package '': at .../external/rules_python~override~python~python3_9/defs.bzl:4:6: \r\nUnable to find package for @[unknown repo 'rules_python~override' requested from @rules_python~override~python~python3_9]//python:pip.bzl: \r\nThe repository '@[unknown repo 'rules_python~override' requested from @rules_python~override~python~python3_9]' \r\ncould not be resolved: No repository visible as '@rules_python~override' from repository '@rules_python~override~python~python3_9'.\r\n```"
    ],
    "commit_messages": [
      "fix: generation of toolchain aliases //:defs.bzl file. (#1088)\n\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the\r\nREADME.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or\r\nlink to a relevant issue. -->\r\n\r\nWith `common --experimental_enable_bzlmod` option defs.bzl is generated\r\nas\r\n```\r\nload(\"@rules_python~override//python/config_settings:transition.bzl\", _py_binary = \"py_binary\", _py_test = \"py_test\")\r\nload(\"@rules_python~override//python:pip.bzl\", _compile_pip_requirements = \"compile_pip_requirements\")\r\n```\r\nand these lines cause a problem at\r\n```\r\nload(\"@python3_9//:defs.bzl\", \"interpreter\")\r\n```\r\nas\r\n```\r\n\r\nERROR: .../BUILD:25:11: error loading package 'src': at .../external/rules_python~override~python~python3_9/defs.bzl:4:6: Unable to find package for @[unknown repo 'rules_python~override' requested from @rules_python~override~python~python3_9]//python:pip.bzl: The repository '@[unknown repo 'rules_python~override' requested from @rules_python~override~python~python3_9]' could not be resolved: No repository visible as '@rules_python~override' from repository '@rules_python~override~python~python3_9'. and referenced by '...'\r\n```\r\n\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nGenerated load statements\r\n```\r\nload(\"@@rules_python~override//python/config_settings:transition.bzl\", _py_binary = \"py_binary\", _py_test = \"py_test\")\r\nload(\"@@rules_python~override//python:pip.bzl\", _compile_pip_requirements = \"compile_pip_requirements\")\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact\r\nand migration path for existing applications below. -->\r\n\r\n\r\n## Other information"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621028fac254a19ac28f638",
    "number": 1086,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nUsing rules_python with bzlmod in a cross-platform setup does not allow to specify an interpreter in `python_interpreter_target` attribute as \r\n```\r\nload(\"@python3_9//:defs.bzl\", \"interpreter\")\r\n\r\npip = use_extension(\"@rules_python//python:extensions.bzl\", \"pip\")\r\npip.parse(\r\n    ...\r\n    python_interpreter_target = interpreter,\r\n    ...\r\n)\r\n```\r\nis not allowed in MODULE.bazel and \r\n```\r\nuse_repo(python, \"python3_9\")\r\nload(\"@python3_9//:defs.bzl\", \"interpreter\")\r\n```\r\nfail with \r\n```\r\nERROR: <root>/MODULE.bazel:23:1: load statements must appear before any other statement\r\nERROR: <root>/MODULE.bazel:8:1: \tfirst non-load statement appears here\r\nERROR: Error computing the main repository mapping: error executing MODULE.bazel file for <root>\r\n```\r\nor\r\n```\r\nERROR: Traceback (most recent call last):\r\n\tFile \"<root>/MODULE.bazel\", line 8, column 1, in <toplevel>\r\nError: load statements may not be executed in this thread\r\n```\r\n\r\nThe issue can be solved with https://github.com/bazelbuild/bazel/issues/17048 feature as\r\n```\r\npython = use_extension(\"@rules_python//python:extensions.bzl\", \"python\")\r\nhost_interpreter = python.toolchain(name = \"python3_9\", python_version = \"3.9\")\r\n...\r\npip.parse(\r\n    ...\r\n    python_interpreter_target = host_interpreter,\r\n   ...\r\n)\r\n```\r\nWith the implemented feature only an update of the `python` extension in `@rules_python//python:extensions.bzl` will be necessary. \r\n\r\nTo reproduce the problem locally:\r\n1. Install python3.11 as a system python interpreter.\r\n2. Add to MODULE.bazel\r\n```\r\nbazel_dep(name = \"rules_python\", version = \"0.18.1\")\r\n\r\npython = use_extension(\"@rules_python//python:extensions.bzl\", \"python\")\r\npython.toolchain(name = \"python3_9\", python_version = \"3.9\")\r\nuse_repo(python, \"python3_9_toolchains\")\r\n\r\nregister_toolchains(\"@python3_9_toolchains//:all\")\r\n\r\npip = use_extension(\"@rules_python//python:extensions.bzl\", \"pip\")\r\npip.parse(\r\n    name = \"pip\",\r\n    requirements_lock = \"//third_party:requirements.txt\",\r\n)\r\nuse_repo(pip, \"pip\")\r\n```\r\n3. Add to `third_party/requirements.txt`\r\n```\r\npytest==7.2.1\r\n```\r\nwhich has the following entries in `site-packages/pytest-7.2.1.dist-info/METADATA`\r\n```\r\n...\r\nRequires-Dist: exceptiongroup (>=1.0.0rc8) ; python_version < \"3.11\"\r\nRequires-Dist: tomli (>=1.0.0) ; python_version < \"3.11\"\r\nRequires-Dist: importlib-metadata (>=0.12) ; python_version < \"3.8\"\r\n...\r\n```\r\n\r\n4. Add a target \r\n```\r\npy_test(\r\n    name = \"test\",\r\n    srcs = [\r\n        \"test.py\",\r\n    ],\r\n    deps = [\r\n         ...\r\n        \"@pip//:pytest_pkg\",\r\n    ],\r\n)\r\n```\r\n5. Running the test fails with the following stack trace\r\n```\r\n-----------------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../_main/test.py\", line 12, in <module>\r\n    import pytest\r\n  File \".../rules_python~override~pip~pip_pytest/site-packages/pytest/__init__.py\", line 5, in <module>\r\n    from _pytest._code import ExceptionInfo\r\n  File \".../rules_python~override~pip~pip_pytest/site-packages/_pytest/_code/__init__.py\", line 2, in <module>\r\n    from .code import Code\r\n  File \".../rules_python~override~pip~pip_pytest/site-packages/_pytest/_code/code.py\", line 60, in <module>\r\n    from exceptiongroup import BaseExceptionGroup\r\nModuleNotFoundError: No module named 'exceptiongroup'\r\n```\r\n6. The problem is in using the system interpreter v3.11 to unpack the pytest wheel which generates .../rules_python~override~pip~pip_pytest/BUILD.bazel as\r\n```\r\npy_library(\r\n    name = \"pkg\",\r\n...\r\n    deps = [\"@pip_attrs//:pkg\",\"@pip_iniconfig//:pkg\",\"@pip_packaging//:pkg\",\"@pip_pluggy//:pkg\"],\r\n    tags = [\"pypi_name=pytest\",\"pypi_version=7.2.1\"],\r\n)\r\n```\r\ninstead of one with python v3.9\r\n```\r\npy_library(\r\n    name = \"pkg\",\r\n...\r\n    deps = [\"@pip_attrs//:pkg\",\"@pip_exceptiongroup//:pkg\",\"@pip_iniconfig//:pkg\",\"@pip_packaging//:pkg\",\"@pip_pluggy//:pkg\",\"@pip_tomli//:pkg\"],\r\n    tags = [\"pypi_name=pytest\",\"pypi_version=7.2.1\"],\r\n)\r\n```\r\n\r\nIssue Number: #609 \r\n\r\n\r\n## What is the new behavior?\r\n\r\nAdded `python_interpreter_targets` attribute to [common_attrs](https://github.com/bazelbuild/rules_python/blob/b9865470/python/pip_install/pip_repository.bzl#L438) that can be used to resolve a host python interpreter in case of a cross-platform build or when a system interpreter has a different version as an interpreter registered as a toolchain. \r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "feature/add_attribute_python_interpreter_targets",
    "is_a_fork": true,
    "comments": [
      "closed as there a better solution for cross-platform wheels setup.",
      "@oxidase what's the better solution you speak of? 👀 ",
      "I have created a PoC repository where wheels installed in within a [rule context](https://github.com/oxidase/rules_poetry/blob/main/python/poetry_deps.bzl#L76-L95) instead of a repository rule one.\r\n\r\nThis allows to use resolved [Python toolchains](https://github.com/oxidase/rules_poetry/blob/main/python/poetry_deps.bzl#L63-L69) but requires some heuristics how to get [environment tags](https://github.com/oxidase/rules_poetry/blob/main/python/poetry_deps.bzl#L5-L26) from toolchain names and in-Bazel evaluation of [dependency markers](https://github.com/oxidase/rules_poetry/blob/main/python/poetry_deps.bzl#L36).\r\n\r\nIt is just a PoC that does not work on Windows but I don't see any other way how to solve the multiple-toolchains issue. In my case I need to create on MacOS packages to be deployable on arm64 and x86_64."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210290ac254a19ac28f639",
    "number": 1084,
    "body": "This makes modifying it with buildozer easier. When the empty line is present, Buildozer gets confused and adds loads() before the intended doc string.\r\n",
    "head_branch": "fix-pybuild-comment-location",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove empty line between copyright and build file docstring. (#1084)\n\nThis makes modifying it with buildozer easier. When the empty line is\r\npresent, Buildozer gets confused and adds loads() before the intended\r\ndoc string."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210291ac254a19ac28f63a",
    "number": 1083,
    "body": "Some packages (ex: [github3.py](https://pypi.org/project/github3.py/)) have a dot (`.`) character in their name.\r\n\r\n`pip_parse` will replace the dot (`.`) with an underscore (`_`) when generating the target name.\r\n\r\n`gazelle` however keeps the the dot (`.`) in the name when generating the target dependency name.\r\n\r\nThis discrepancy means that after a gazelle pass, the repo does not build.\r\n\r\nex:\r\n```\r\nERROR: <snip>/BUILD.bazel:3:11: no such package\r\n'@python_deps_github3.py//': The repository '@python_deps_github3.py'\r\ncould not be resolved: Repository '@python_deps_github3.py' is not\r\ndefined and referenced by '<snip>'\r\n```\r\n\r\nThis PR brings `gazelle` dependency target name generation in line with `pip_parse`.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\nThis introduces a breaking change in the sense that existing behavior will be changed. However, I do not believe the existing behavior actually leads to a functional state. \r\n\r\n## Other information\r\n\r\n",
    "head_branch": "handle_dot_in_package_name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: update gazelle to properly handle dot in package name. (#1083)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210292ac254a19ac28f63b",
    "number": 1079,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\nNeither of these are applicable.\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe: Update dependency setuptools. The current version used is vulnerable to https://nvd.nist.gov/vuln/detail/CVE-2022-40897\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nDepend on an old setuptools with a CVE.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nUpdate dependency\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n Probably not? This would move quite a few major versions forward but going to let CI tell me if anything breaks. Let me know if there are other tests usually done when packages are updated. \r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "update-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210293ac254a19ac28f63c",
    "number": 1078,
    "body": "The `# License type` comments are no longer required. Removing it makes it easier to import the source into Google.",
    "head_branch": "rm-license-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "cleanup: Remove license type comment; they're no longer required (#1078)\n\ncleanup: Remove license type comment; they're no longer required\r\n\r\nThe `# License type` comments are no longer required. Removing it makes\r\nit easier to import the source into Google."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210293ac254a19ac28f63d",
    "number": 1077,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nFixes #965.\r\n\r\nGazelle plugin cannot work with `--experimental_enable_bzlmod` flag because of:\r\n* missing `MODULE.bazel` file\r\n* the labels that it generates in `BUILD.bazel` files point to repositories that are not visible due to repository remapping.\r\n\r\n## What is the new behavior?\r\n\r\nThe new behaviour adds a flag to generate user friendly `alias` labels for third party libraries which follow a convention (where `<pip>` stands for the name attribute value passed to `pip_parse` and `<distro>` stands to the sanitised distribution name of the pip package, for example `python_multipart` for the `python-multipart` package on PyPI):\r\n* `@<pip>//<distro>` -> `@<pip>_<distro>//:pkg`\r\n* `@<pip>//<distro>:pkg` -> `@<pip>_<distro>//:pkg`\r\n* `@<pip>//<distro>:whl` -> `@<pip>_<distro>//:whl`\r\n* `@<pip>//<distro>:data` -> `@<pip>_<distro>//:data`\r\n* `@<pip>//<distro>:dist_info` -> `@<pip>_<distro>//:dist_info`\r\n\r\nThis is gated by the `incompatible_generate_aliases` parameter to `pip_repository` rule and the `pip_parse` bzlmod extension.\r\n\r\nIn order to tell gazelle to use these aliases, one needs to pass `use_pip_repository_aliases = True` to `gazelle_python_manifest` rule, which will store the value in the `gazelle_python.yaml` manifest after regeneration. This will then instruct `gazelle` to use a different label scheme for third party dependencies.\r\n\r\nSummary:\r\n- feat: add optional pkg alias generation to pip_repository\r\n- feat: support using aliases in gazelle\r\n- doc: migrate gazelle example to use user friendly aliases\r\n- feat: gazelle supports bzlmod\r\n- chore: update gazelle plugin deps\r\n- chore: bazel run //:gazelle\r\n- fix: remove deps that are imported as bazel deps\r\n- ci: add build_file_generation to show that we support bzlmod\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\nAll additions in this PR are guarded under feature toggles.\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "gazelle-bzlmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add bzlmod support for gazelle plugin (#1077)\n\n* feat: add optional pkg alias generation to pip_repository\r\n\r\n* feat: support using aliases in gazelle\r\n\r\n* doc: migrate gazelle example to use user friendly aliases\r\n\r\n* feat: gazelle supports bzlmod\r\n\r\n* chore: update gazelle plugin deps\r\n\r\n* chore: bazel run //:gazelle\r\n\r\n* fix: remove deps that are imported as bazel deps\r\n\r\nSee: bazelbuild/bazel-gazelle#1403\r\n\r\n* ci: add build_file_generation to show that we support bzlmod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210294ac254a19ac28f63e",
    "number": 1075,
    "body": "Bumps [werkzeug](https://github.com/pallets/werkzeug) from 2.2.2 to 2.2.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/werkzeug/releases\">werkzeug's releases</a>.</em></p>\n<blockquote>\n<h2>2.2.3</h2>\n<p>This is a fix release for the 2.2.x release branch.</p>\n<ul>\n<li>Changes: <a href=\"https://werkzeug.palletsprojects.com/en/2.2.x/changes/#version-2-2-3\">https://werkzeug.palletsprojects.com/en/2.2.x/changes/#version-2-2-3</a></li>\n<li>Milestone: <a href=\"https://github.com/pallets/werkzeug/milestone/26?closed=1\">https://github.com/pallets/werkzeug/milestone/26?closed=1</a></li>\n</ul>\n<p>This release contains security fixes for:</p>\n<ul>\n<li><a href=\"https://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323\">https://github.com/pallets/werkzeug/security/advisories/GHSA-xg9f-g7g7-2323</a></li>\n<li><a href=\"https://github.com/pallets/werkzeug/security/advisories/GHSA-px8h-6qxv-m22q\">https://github.com/pallets/werkzeug/security/advisories/GHSA-px8h-6qxv-m22q</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pallets/werkzeug/blob/main/CHANGES.rst\">werkzeug's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 2.2.3</h2>\n<p>Released 2023-02-14</p>\n<ul>\n<li>Ensure that URL rules using path converters will redirect with strict slashes when\nthe trailing slash is missing. :issue:<code>2533</code></li>\n<li>Type signature for <code>get_json</code> specifies that return type is not optional when\n<code>silent=False</code>. :issue:<code>2508</code></li>\n<li><code>parse_content_range_header</code> returns <code>None</code> for a value like <code>bytes */-1</code>\nwhere the length is invalid, instead of raising an <code>AssertionError</code>. :issue:<code>2531</code></li>\n<li>Address remaining <code>ResourceWarning</code> related to the socket used by <code>run_simple</code>.\nRemove <code>prepare_socket</code>, which now happens when creating the server. :issue:<code>2421</code></li>\n<li>Update pre-existing headers for <code>multipart/form-data</code> requests with the test\nclient. :issue:<code>2549</code></li>\n<li>Fix handling of header extended parameters such that they are no longer quoted.\n:issue:<code>2529</code></li>\n<li><code>LimitedStream.read</code> works correctly when wrapping a stream that may not return\nthe requested size in one <code>read</code> call. :issue:<code>2558</code></li>\n<li>A cookie header that starts with <code>=</code> is treated as an empty key and discarded,\nrather than stripping the leading <code>==</code>.</li>\n<li>Specify a maximum number of multipart parts, default 1000, after which a\n<code>RequestEntityTooLarge</code> exception is raised on parsing. This mitigates a DoS\nattack where a larger number of form/file parts would result in disproportionate\nresource use.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/22a254fca2ad0130adbbcbd11d3de51bcb04a08b\"><code>22a254f</code></a> release version 2.2.3</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/517cac5a804e8c4dc4ed038bb20dacd038e7a9f1\"><code>517cac5</code></a> Merge pull request from GHSA-xg9f-g7g7-2323</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/babc8d9e8c9fa995ef26050698bc9b5a92803664\"><code>babc8d9</code></a> rewrite docs about request data limits</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/09449ee77934a0c883f5959785864ecae6aaa2c9\"><code>09449ee</code></a> clean up docs</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/fe899d0cdf767a7289a8bf746b7f72c2907a1b4b\"><code>fe899d0</code></a> limit the maximum number of multipart form parts</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/cf275f42acad1b5950c50ffe8ef58fe62cdce028\"><code>cf275f4</code></a> Merge pull request from GHSA-px8h-6qxv-m22q</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/8c2b4b82d0cade0d37e6a88e2cd2413878e8ebd4\"><code>8c2b4b8</code></a> don't strip leading = when parsing cookie</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/7c7ce5cb73f3f7d3b9c09340e4f322aeb583dbc5\"><code>7c7ce5c</code></a> [pre-commit.ci] pre-commit autoupdate (<a href=\"https://github-redirect.dependabot.com/pallets/werkzeug/issues/2585\">#2585</a>)</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/19ae03e6a39b3f63fd08fef4fddae4385cdddf25\"><code>19ae03e</code></a> [pre-commit.ci] auto fixes from pre-commit.com hooks</li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/a83d3b8bf070810874c8e8d03dcce270666e10fe\"><code>a83d3b8</code></a> [pre-commit.ci] pre-commit autoupdate</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pallets/werkzeug/compare/2.2.2...2.2.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=werkzeug&package-manager=pip&previous-version=2.2.2&new-version=2.2.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n",
    "head_branch": "dependabot/pip/examples/build_file_generation/werkzeug-2.2.3",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210295ac254a19ac28f63f",
    "number": 1074,
    "body": "This is to replace the docs on bazel.build that talk about coverage support for Python.",
    "head_branch": "coverage-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add some docs about how to configure coverage. (#1074)\n\n* Add some docs about how to configure coverage.\r\n\r\nThis is to replace the docs on bazel.build that talk about coverage\r\nsupport for Python.\r\n\r\n* Update docs/coverage.md\r\n\r\n---------\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210296ac254a19ac28f640",
    "number": 1073,
    "body": "I found that in some cases, there are missing include directories or missing search paths for libraries. I tried to capture as much as possible for both clang and gcc. I'm not sure how breaking this could be for some people. If we decide to merge as is, we may need to do some tweaking before releasing the next version of rules_python.\r\n\r\nThis should be solved once we are able to do toolchain resolution for CC deps and inject into the wheel building using actions.",
    "head_branch": "f0rmiga/fix-missing-include-search-paths",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210297ac254a19ac28f641",
    "number": 1071,
    "body": "Using click makes it easier to parse arguments. Many args are now named arguments\r\n(options), and the need for using positional args with stub `\"None\"` values isn't\r\nnecessary anymore.\r\n\r\nThere is already a dependency on click via piptools, so this doesn't introduce a new\r\ndependency.\r\n\r\nRelates to #1067",
    "head_branch": "use-click",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: use click in dependency_resolver.py (#1071)\n\nUsing click makes it easier to parse arguments. Many args are now named\narguments\n(options), and the need for using positional args with stub `\"None\"`\nvalues isn't\nnecessary anymore.\n\nThere is already a dependency on click via piptools, so this doesn't\nintroduce a new\ndependency.\n\nRelates to #1067\n\nCo-authored-by: Logan Pulley <lpulley@ocient.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210297ac254a19ac28f642",
    "number": 1070,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n`pre-commit` fails to install `isort`\r\n\r\n## What is the new behavior?\r\n\r\n`pre-commit` succesfully installs `isort`\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nRelates to #1067",
    "head_branch": "fix-isort-pre-commit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210298ac254a19ac28f643",
    "number": 1068,
    "body": "These are the steps I did for the 0.18.1 release.\r\n\r\nI'm not _entirely_ sure these steps are 100% complete or accurate, but worked for me. A couple\r\noddities I encountered were:\r\n * I manually created a branch directly on the bazelbuild/rules_python repo through git;\r\n   I couldn't figure out how to make a PR from my personal fork create a new branch\r\n   in the bazelbuild/rules_python repo.\r\n * After syncing rickeylev/rules_python, pulling into my local rickeylev/rules_python repo,\r\n   and checking out the patch's branch, it's upstream was set directly to\r\n   bazelbuild/rules_python (not rickeylev/rules_python), so pushes started going directly\r\n   into the repo, not via PRs. Not sure how/why this happened.\r\n\r\n",
    "head_branch": "doc-patch-release",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210299ac254a19ac28f644",
    "number": 1067,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n`pip-compile` can compile multiple input files into a single output file, but `rules_python`'s `compile_pip_requirements` doesn't currently support this.\r\n\r\nWith this change, the `requirements_in` argument to `compile_pip_requirements` can now accept a list of strings (in addition to the previously accepted argument types).\r\n\r\nIn order to support a variable number of input files, my coworker (@lpulley) and I updated `dependency_resolver.py` to use the `click` CLI library. We felt this was acceptable since `pip-compile` already requires `click` to run, so we're not adding a new dependency.\r\n\r\nWe also made changes to the script to avoid mutating `sys.argv`, instead opting to build a new list (`argv`) from scratch that'll be passed to the `pip-compile` CLI. While subjective, I feel this improves readability, since it's not immediately obvious what's in `sys.argv`, but it's clear that `argv` begins empty, and is added to over the course of the program's execution.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nIn addition to supporting a single `requirements_in` file, a list of requirements input files can be specified and will be passed to be `pip-compile`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n## Other information\r\n\r\nI'm still awaiting CLA signature from my company, so I'll leave this as a draft for now. I'm _hoping_ to have it signed by end of week, but don't have an exact ETA.",
    "head_branch": "multiple-requirements-in",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029aac254a19ac28f645",
    "number": 1066,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [ ] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [X] Other... Please describe:\n\n## What is the current behavior?\n\nThis header was added in #1030 and since this file is generate we should potentially remove it.\n\nNoticed whilst working on #965.\n\n## What is the new behavior?\n\nRegenerate the file using `bazel run //:gazelle_python_manifest.update` , which removes the header. Not sure if we should have a test for it.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n",
    "head_branch": "chore-gazelle-manifest-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: regenerate gazelle_python.yaml manifest (#1066)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029bac254a19ac28f646",
    "number": 1065,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [X] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\n\r\nWe don't have CI tests that would help us avoid regressing the minimum supported version. This also means that `py_proto_dependency` addition broke the support for bazel <5 and we should think of better ways to support bazel 4 LTS if this is a requirement.\r\n\r\nIssue Number: #1056\r\n\r\n## What is the new behavior?\r\n\r\nTest all examples with the minimum supported version, which is now set to `bazel 5.4.0`. Feel free to set this to something lower.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\nThis may potentially break users, who expect the latest `rules_python` to work with a bazel version older than `5.4.0`. I'll do a few more tests to check what the actual lowest version is.\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "add-lowest-supported-version-ci",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: correctly advertise minimum supported version (#1065)\n\n* feat: bump the latest supported version to 5.4.0\r\n* feat: add gazelle and RBE minimum supported version tests\r\n* feat: pip_parse_vendored example is now 5.4.0 compatible"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029bac254a19ac28f647",
    "number": 1064,
    "body": "The `.dist` target depends on the wheel, so it must copy the `testonly` setting as well as some others.\r\n\r\n* Also adds a utility function to do this, since the multi-version rules also do this copying.\r\n\r\nFixes #1057",
    "head_branch": "fix-py-wheel-dist",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: Propagate testonly et al for wheel `.dist` targets (#1064)\n\n* Propagate testonly et al for wheel `.dist` targets\r\n\r\nThe `.dist` target depends on the wheel, so it must copy the\r\n`testonly` setting as well as some others.\r\n\r\n* Also adds a utility function to do this, since the multi-version\r\n  rules also do this copying.\r\n\r\nFixes #1057\r\n\r\n* fixup! Allow building with unreleased Bazel versions. (#1063)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029cac254a19ac28f648",
    "number": 1063,
    "body": "Unreleased Bazel versions don't set `native.bazel_version`, which was causing the version detection logic to error. To fix, just check it's non-empty. Treat a missing version as a sufficient version.\r\n\r\n",
    "head_branch": "fix-no-bazel-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow building with unreleased Bazel versions. (#1063)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029dac254a19ac28f649",
    "number": 1062,
    "body": "The latest Bazel build continous integration testing pipeline sets several flags and environment variables that end up interfering with each other:\r\n * `--sandbox_tmpfs_path=/tmp`\r\n * `--test_env=USE_BAZEL_VERSION`\r\n * `USE_BAZEL_VERSION=/tmp/<something>`\r\n * And Bazelisk is used to run Bazel\r\n\r\nWhat happens is `USE_BAZEL_VERSION` points to Bazel in /tmp, but then the `--sandbox_tmpfs_path` flag prevents it from being readable. Later, when a test wants to run Bazel, Bazelisk is invoked. It is able to see that it should use a custom Bazel binary because of `--test_env`, but then can't read the file because of `--sandbox_tmpfs_path`, so then fails.\r\n\r\nTo fix, make the test runner that will run `bazel` unset `USE_BAZEL_VERSION` so Bazelisk doesn't try to use it.\r\n\r\nThis also exposed an issue with Bazelisk demanding a cache directory be specified, so set that environment variable to the test's temp dir to keep Bazelisk happy.\r\n\r\nFixes #856\r\n\r\n",
    "head_branch": "fix-toolchains-acceptance-test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Make toolchain acceptance tests work with latest Bazel build CI pipeline (#1062)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029eac254a19ac28f64a",
    "number": 1061,
    "body": "Avoid setting it in earlier version by checking `native.bazel_version` in the repository rule and disabling it if less than Bazel 6 is detected. A warning is also printed if coverage was requested, but the Bazel version check is ignoring it.\r\n\r\nFixes #1056\r\n",
    "head_branch": "fix-coverage-usage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Only set `py_runtime.coverage_tool` for Bazel 6 and higher. (#1061)\n\nOnly set `py_runtime.coverage_tool` for Bazel 6 and higher.\r\n\r\nAvoid setting it in earlier version by checking `native.bazel_version`\r\nin the repository rule and disabling it if less than Bazel 6 is\r\ndetected. A warning is also printed if coverage was requested, but\r\nthe Bazel version check is ignoring it.\r\n\r\nFixes #1056"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029fac254a19ac28f64b",
    "number": 1060,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nServer processes of parser and std_module are killed in 5 minutes, but some large repos take more than 5 minutes for a full repo run of Gazelle\r\n\r\n\r\n## What is the new behavior?\r\nIdeally, we should close both processes by closing the stdin after we are done with resolving dependencies. However, this would require https://github.com/bazelbuild/bazel-gazelle/pull/1443. For now, we can just extend the timeout to 10 minutes.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Extending server process timeout (#1060)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621029fac254a19ac28f64c",
    "number": 1054,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n`gazelle:exclude` patterns in one directory may cause Python files getting excluded in a totally unrelated directory\r\n\r\n\r\n## What is the new behavior?\r\n* making sure that the exclusions are limited to the directories that they are targeting\r\n* also improve the test a bit the error message would point to the actual lines failing\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "exclude",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Making exclusions more strict (#1054)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a0ac254a19ac28f64d",
    "number": 1053,
    "body": "When trying to add a `-r requirements.in` that is generated inside a checked-in requirements.txt, the Python script that calls pip-compile was going to the wrong location and having problems resolving the relative generated `requirements.in`.",
    "head_branch": "f0rmiga/fix-pip-compile-generated-requirements-in",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: checked-in requirements imports generated requirements (#1053)\n\n* fix: checked-in requirements imports generated requirements\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: shutil.copy instead of shutil.copyfile\r\n\r\nThis allows copying from one filesystem to another, as the `os.rename` (used by copyfile)\r\ndoesn't work with multiple filesystems.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: patch os.replace to use shutil.copy\r\n\r\nSame as the previous commit.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: runfiles.Rlocation requires paths to be normalized\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: drop rules_python from import\r\n\r\nThis is not compatible with bzlmod. Importing python.runfiles works for both\r\nways.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: remove unnecessary runfiles\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* doc: why os.replace = shutil.copy\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: allow the test to still be remote cacheable\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* doc: why shutil.copy\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* doc: add missing punctuation\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: remove unnecessary _fix_up_requirements_in_path\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* test: make sure the locked requirements is updated\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: copy requirements back into src tree if needed\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: make sure windows uses forward slashes\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a1ac254a19ac28f64e",
    "number": 1052,
    "body": null,
    "head_branch": "publish",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "docs: fix requirement line for runfiles example (#1052)\n\nThe PyPI name is \"bazel-runfiles\", which is what should be used in `requirement()`; \"runfiles\" is the import name."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a2ac254a19ac28f64f",
    "number": 1051,
    "body": null,
    "head_branch": "publish",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(release): wrong replacement for $(location) during code review (#1051)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a3ac254a19ac28f650",
    "number": 1050,
    "body": ":requirements_test would previously fail if sandboxing was enabled.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add requires-network to pip requirements update. (#1050)\n\n:requirements_test would previously fail if sandboxing was enabled."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a3ac254a19ac28f651",
    "number": 1049,
    "body": "The mention in the release config isn't easily found and I want to make\nsure there is some reference for how to manage the account.\n\n## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [ ] Tests for the changes have been added (for bug fixes / features)\n- [x] Docs have been added / updated (for bug fixes / features)\n\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [x] Documentation content changes\n- [ ] Other... Please describe:\n\n\n## What is the current behavior?\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\n\nIssue Number: N/A\n\n\n## What is the new behavior?\n\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [x] No\n\n\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\n\n\n## Other information\n\n",
    "head_branch": "doc-pypi-password",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Document the pypi user and how to manage it. (#1049)\n\n* Document the pypi user and how to manage it.\r\n\r\nThe mention in the release config isn't easily found and I want to make\r\nsure there is some reference for how to manage the account.\r\n\r\n* Revert \"Document the pypi user and how to manage it.\"\r\n\r\nThis reverts commit bfcb3acb82a62c52eb84b60d8af05d90c1d291b9.\r\n\r\n* Document the pypi user and how to manage it.\r\n\r\nThis time without reformating everything."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a4ac254a19ac28f652",
    "number": 1048,
    "body": null,
    "head_branch": "publish_runfiles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "release: publish our runfiles wheel to pypi (#1048)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a5ac254a19ac28f653",
    "number": 1047,
    "body": "Bumps [cryptography](https://github.com/pyca/cryptography) from 39.0.0 to 39.0.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pyca/cryptography/blob/main/CHANGELOG.rst\">cryptography's changelog</a>.</em></p>\n<blockquote>\n<p>39.0.1 - 2023-02-07</p>\n<pre><code>\n* **SECURITY ISSUE** - Fixed a bug where ``Cipher.update_into`` accepted Python\n  buffer protocol objects, but allowed immutable buffers. **CVE-2023-23931**\n* Updated Windows, macOS, and Linux wheels to be compiled with OpenSSL 3.0.8.\n<p>.. _v39-0-0:\n</code></pre></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/commit/d6951dca25de45abd52da51b608055371fbcde4e\"><code>d6951dc</code></a> changelog + security fix backport (<a href=\"https://github-redirect.dependabot.com/pyca/cryptography/issues/8231\">#8231</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/138da90c8450446b19619e3faa77b9da54c34be3\"><code>138da90</code></a> workaround scapy bug in downstream tests (<a href=\"https://github-redirect.dependabot.com/pyca/cryptography/issues/8218\">#8218</a>) (<a href=\"https://github-redirect.dependabot.com/pyca/cryptography/issues/8228\">#8228</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/69527bc79095c9646d7e839121f0783477892ecc\"><code>69527bc</code></a> bookworm is py311 now (<a href=\"https://github-redirect.dependabot.com/pyca/cryptography/issues/8200\">#8200</a>)</li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/111deefb659b8d73c56d3ce89458f2df973d60e4\"><code>111deef</code></a> backport main branch CI to 39.0.x (<a href=\"https://github-redirect.dependabot.com/pyca/cryptography/issues/8153\">#8153</a>)</li>\n<li>See full diff in <a href=\"https://github.com/pyca/cryptography/compare/39.0.0...39.0.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=cryptography&package-manager=pip&previous-version=39.0.0&new-version=39.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tools/publish/cryptography-39.0.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a6ac254a19ac28f654",
    "number": 1046,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [X] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nCurrently the user needs to manually include the protobuf client runtime (e.g. via PyPI)   dependencies when consuming `py_proto_library` even though `py_proto_library` implicitly depends on them and they appear in runfiles.\r\n\r\n## What is the new behavior?\r\n\r\n`py_proto_library` now properly propagates the `imports` attribute the protobuf client runtime so that the libraries are added to `sys.path` correct.\r\n\r\nAlso adds an example for `bzlmod` and old way of using the `py_proto_library` as a test.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n",
    "head_branch": "fix-proto-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: make py_proto_library respect PyInfo imports (#1046)\n\npy_proto_library has an implicitly dependency on the protobuf client runtime, and it was ending up in runfiles, but it wasn't imported because the `imports` value it was setting wasn't be propagated.\r\n\r\nTo fix, make py_proto_library properly propagate the imports attribute the protobuf client runtime so that the libraries are added to sys.path correct.\r\n\r\nAlso adds an example for bzlmod and old way of using the py_proto_library as a test.\r\n\r\n---------\r\n\r\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a7ac254a19ac28f655",
    "number": 1045,
    "body": "When we run tests for the locked requirements files, pip-compile will import pip internally, and eventually, it tries to import `html.entries`, which is part of the standard library. Since the `coverage` package provides an `html.py` file, it ends up being picked up by pip if the `coverage` package is early on the `sys.path`.\r\n\r\nThis patch presents a generic fix for the problem with coverage by moving its own directory to the end of `sys.path`.",
    "head_branch": "f0rmiga/fix-pip-compile-with-coverage",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: move coverage pkg to end of sys.path to avoid collisions (#1045)\n\n* fix: move coverage to end of sys.path when running pip-compile\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: generic fix for getting the coverage package right\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a7ac254a19ac28f656",
    "number": 1044,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nIt builds a Go binary and run a shell script to call the binary to verify whether the manifest file is up-to-date\r\n\r\n\r\n## What is the new behavior?\r\nIt builds a Go test binary and verify the manifest directly\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nWhen the Python Gazelle extension is downloaded as a Go module, the shell script loses its runnable bit, so `sh_test` is not able to run it. This PR also fix the issue.\r\n\r\n",
    "head_branch": "manifest_test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use go_test to verify manifest (#1044)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a8ac254a19ac28f657",
    "number": 1043,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [X] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n- [ ] Bugfix\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [X] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\nPreviously we were using `pip_parse` python scripts. This has a few drawbacks:\n* Requires system python to be present.\n* Usage of a Python script makes it harder to reason as there is an extra layer of abstraction.\n* Extending/reusing code between `multi_pip_parse` and `pip_parse` is hard.\n\n## What is the new behavior?\n\nNow we use starlark to parse the `requirements.txt` into `requirements.bzl`. Whilst I tried my best to ensure that the implementation stays backwards compatible, I am marking this PR as WIP in order to give some more time.\n\nSummary:\n- feat: add new templates for pip_repository\n- feat: reimplement pip_repository in starlark\n- feat: simplify pip_parse_vendored example\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n## Other information\n\n",
    "head_branch": "refactor-pip-parse-starlark",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: starlark reimplementation of pip_repository (#1043)\n\nPreviously we were using pip_parse python scripts. This has a few drawbacks:\r\n\r\n* Requires system python to be present.\r\n* Usage of a Python script makes it harder to reason as there is an extra layer of abstraction.\r\n* Extending/reusing code between multi_pip_parse and pip_parse is hard.\r\n\r\nNow we use Starlark to parse the requirements.txt into requirements.bzl."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102a9ac254a19ac28f658",
    "number": 1041,
    "body": "@f0rmiga I think this is a better fix for the bug you ran into. It would prevent similar bugs from happening when importing other Python modules (e.g., `__init__.py` etc) in the same package.",
    "head_branch": "pyfilenames",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Collect all py file names in the same package (#1041)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102aaac254a19ac28f659",
    "number": 1040,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nBugfix\r\n\r\n## What is the current behavior?\r\n\r\nWhen using a layer of indirection to refer to a hermetic toolchain, python deps that compile local code fail to properly set the path to the local XCode install, causing compilation to fail (eg. when compiling `lxml`'s deps)\r\n\r\n## What is the new behavior?\r\n\r\nThe CPP_FLAGS are set properly, and `lxml` will install from a repository rule cleanly\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\nNo\r\n\r\n## Other information\r\n\r\nI'm not entirely sure how to reproduce this with a test in this repo. It only showed up when we had some particularly gnarly setup with a repo at work.",
    "head_branch": "be-less-cautious",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pass cpp flags through in all cases to repository rule compilations (#1040)\n\nRemove a line that prevents local builds of lxml to fail"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102abac254a19ac28f65a",
    "number": 1039,
    "body": "Since we had to revert #1029 due to a failure in resolving nested conftest files, this PR cherry-picks the merged commit, adds a test case to validate the expected behaviour, and adds the fix on top of it.",
    "head_branch": "f0rmiga/add-pr-1029-back",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: add logic from #1029 back with fix (#1039)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102abac254a19ac28f65b",
    "number": 1038,
    "body": "#907 ended up accidentally adding excludes to the includes",
    "head_branch": "fix-glob-include-excude",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix glob includes/exclues (#1038)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102acac254a19ac28f65c",
    "number": 1037,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n#907 put the comments as elements in the include list of the glob when `ignore_root_user_error` is True, causing test build failures\r\n\r\n\r\n## What is the new behavior?\r\nMake comments as comments\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n@illicitonion Are you sure you want to put .pyc files in the includes? The description of #907 indicates that you wanted to exclude them, but you ended up including them.\r\n\r\n",
    "head_branch": "ignore_root_user_error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed glob includes for ignore_root_user_error (#1037)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102adac254a19ac28f65d",
    "number": 1035,
    "body": "Reverts bazelbuild/rules_python#1029\r\n\r\nThis broke Gazelle on a project. I'm reverting this for now while figuring out why. I'll also add a test case to cover the failure I got.",
    "head_branch": "revert-1029-no_id",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Resolving sibling modules with absolute imports\" (#1035)\n\nRevert \"Resolving sibling modules with absolute imports (#1029)\"\r\n\r\nThis reverts commit 9fc7cfa82ac834f0dcc5ba321a46b93e9b728f87.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102aeac254a19ac28f65e",
    "number": 1034,
    "body": "Just a simple fix on the defaults of import sorting.",
    "head_branch": "f0rmiga/reorder-imports",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: reorder imports (#1034)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102afac254a19ac28f65f",
    "number": 1033,
    "body": "The annotations are written into the `repo` workspace (as in, where the `requirements.bzl` file is) rather than where the packages are. \r\nThese may well be the same if not setting `repo_prefix` (hence that `rstrip`), but if the user has set `repo_prefix`, then we no longer want to read annotations from the package path, but rather the repo workspace, which is just `repo`.\r\n\r\n(11-repo_prefix_on_annotations.patch)",
    "head_branch": "annotations_json_path",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: use 'repo' as prefix when constructing annotations label (#1033)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102afac254a19ac28f660",
    "number": 1032,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n\r\n## What is the current behavior?\r\n\r\nRight now, we use the automatically generated GitHub source archives. These have had issues with GitHub changing how they're generated, which affects the checksums, which then breaks users.\r\n\r\nIssue Number: #1031\r\n\r\n\r\n## What is the new behavior?\r\n\r\nA tar.gz is manually generated using `git export`. Some online sources indicate this is the underlying mechanism github uses for generate their archives. We also use this for computing the checksum, so that comports.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] No\r\n\r\nThough note that base filename changes\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nThis happened previously a year to so ago, too.",
    "head_branch": "manual-tar-pkg",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Manually generate distribution archives (#1032)\n\nGithub has a habit of changing how the automatic source archives are generated (e.g. compression), which\r\nchanges their checksums, which then breaks users. Instead of risking that happening again, generate\r\nthe distribution archive as part of the release workflow and upload it to the release. The same mechanism,\r\n`git export` is used, so the format and structure is the same as before."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b0ac254a19ac28f661",
    "number": 1030,
    "body": "Done by running:\r\n`addlicense -v -c \"The Bazel Authors. All rights reserved.\" .`\r\n\r\nFixes #916\r\n",
    "head_branch": "add-copyright-headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add missing copyright headers (#1030)\n\n* Add missing copyright headers\r\n\r\nDone by running:\r\n`addlicense -v -c \"The Bazel Authors. All rights reserved.\" .`\r\n\r\nWith a few changes reverted because they're for generated files or test goldens.\r\n\r\nFixes #916"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b1ac254a19ac28f662",
    "number": 1029,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n`py_test` and `py_binary` unconditionally depends on `py_library` in the same package. In order to do that, the Gazelle plugin introduce an virtual import to identify the `py_library` target.\r\n\r\n\r\n## What is the new behavior?\r\nWith the capability of resolving sibling modules introduced in #1027, we can resolve `py_library` as needed in `py_test` and `py_binary`, and we no longer need any virtual imports or id for `py_library` targets. This simplifies the logic.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "no_id",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Resolving sibling modules with absolute imports (#1029)\n\n* Resolving sibling modules with absolute imports\r\n\r\n* unconditionally importing conftest\r\n\r\n* handle from statements\r\n\r\n* adding tests\r\n\r\n* adding readme for the new test case"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b2ac254a19ac28f663",
    "number": 1028,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThere are still some variables and functions with \"UUID\" in their name, although we no longer used UUID to identify `py_library` targets. The `gazelle_deps` macro still includes the google/uuid library.\r\n\r\n\r\n## What is the new behavior?\r\n* Change from names from \"UUID\" to more general \"id\" to hide implementation details of the id generation\r\n* `bazel run //:gazelle_update_repos` to clean up google/uuid library\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n* `bazel run //:gazelle_update_repos` doesn't generate the `load` statement correctly. I had to manually revert it back.\r\n* We may also consider adding the `py_library`'s module name to `py_test` and `py_binary`'s deps, so it will be resolved just like regular imports and we no longer need any id for the `py_library`. The only problem is when a module is at the root of a Python project, the module name becomes empty, which is not valid.\r\n\r\n",
    "head_branch": "uuid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "clean up UUID (#1028)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b3ac254a19ac28f664",
    "number": 1027,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nWhen a Python module imports another one in the same package, it can use the file name without the directory names. When Gazelle generate the targets, they are either in the same target or in sibling targets already depending on each other. However, Gazelle still tries to resolve them, even though no dependency resolution is needed\r\n\r\n\r\n## What is the new behavior?\r\nIdentify imports in sibling modules and ignore them.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "sibling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handling imports from sibling modules (#1027)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b4ac254a19ac28f665",
    "number": 1026,
    "body": "I was hitting a problem when running pip-compile on a requirements.in file and being able to pass extra dependencies solved my problem, so this may be helpful to everyone.",
    "head_branch": "f0rmiga/pip-compile-extra-deps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: allow extra dependencies to be passed to pip-compile (#1026)\n\n* feat: allow extra dependencies to be passed to pip-compile\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: update docs\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b4ac254a19ac28f666",
    "number": 1023,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nGazelle plugin generates a UUID for each `py_library` target for `py_binary` and `py_test` in the same package to refer to. However, creating another identifier such as UUID is not necessary because Bazel already has id for each target, which is its label.\r\n\r\nFurthermore, in some large monorepos where it's too slow for Gazelle to index the whole repo, we turn off the indexing with `bazel run //:gazelle -- -index=false` and rely on [CrossResolver](https://github.com/bazelbuild/bazel-gazelle/blob/77e0f34c43a9f5e95f6af93485a4bd83942ed3c6/resolve/index.go#L66) to resolve dependencies based on paths conventions. The UUID makes it impossible to resolve dependencies without indexing the whole repository.\r\n\r\n\r\n## What is the new behavior?\r\nReuse Bazel label as the id for the library and avoid depending on the UUID library. Now CrossResolvers can easily resolve same-package dependencies\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\nIf this approach is acceptable, I can create a follow up PR to rename variables to reflect the fact that we are no longer using UUID\r\n",
    "head_branch": "uuid",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Using label as id for py targets (#1023)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b5ac254a19ac28f667",
    "number": 1022,
    "body": "our 0.17 release is stuck on this step.\r\nPartially reverts #995\r\n\r\nWe can try again after #1021 lands",
    "head_branch": "rm_publish",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: revert publish wheel on releases (#1022)\n\nour 0.17 release is stuck on this step.\r\nPartially reverts #995"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b6ac254a19ac28f668",
    "number": 1021,
    "body": "Earlier attempts to publish 0.17 have [failed mysteriously](https://github.com/bazelbuild/rules_python/actions/runs/4020082465/jobs/6907623158) at the `pypa/gh-action-pypi-publish` step. This PR replaces that with a command that I can test locally:\r\n\r\n```\r\nTWINE_USERNAME=__token__ TWINE_PASSWORD=pypi-*** bazel run --stamp --embed_label=1.2.4 //python/runfiles:wheel.publish -- --repository testpypi\r\n\r\nUploading bazel_runfiles-1.2.4-py3-none-any.whl\r\n100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 11.0/11.0 kB • 00:00 • 27.3 MB/s\r\n\r\nView at:\r\nhttps://test.pypi.org/project/bazel-runfiles/1.2.4/\r\n```\r\n\r\nThis is a (hopefully) less contentious subset of #1015 where we just run a binary ourselves but don't try to make a public API out of it yet.",
    "head_branch": "use_twine",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(release): minimum needed to run twine to publish (#1021)\n\n* fix(release): minimum needed to run twine to publish\r\n\r\nEarlier attempts to publish 0.17 have failed mysteriously at the pypa/gh-action-pypi-publish step.\r\nThis PR replaces that with a command that I can test locally.\r\n\r\nTWINE_USERNAME=__token__ TWINE_PASSWORD=pypi-*** bazel run --stamp --embed_label=1.2.4 //python/runfiles:wheel.publish -- --repository testpypi\r\nUploading bazel_runfiles-1.2.4-py3-none-any.whl\r\n100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 11.0/11.0 kB • 00:00 • 27.3 MB/s\r\n\r\nView at:\r\nhttps://test.pypi.org/project/bazel-runfiles/1.2.4/\r\n\r\n* fixup! fix(release): minimum needed to run twine to publish\r\n\r\n* refactor: move twine deps to its own folder\r\n\r\n* Update WORKSPACE\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update python/runfiles/BUILD.bazel\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* show CI failure\r\n\r\n* remove actual publish for this PR\r\n\r\n* chore: exclude requirements test on RBE\r\n\r\n* Add darwin requirements\r\n\r\n---------\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b7ac254a19ac28f669",
    "number": 1020,
    "body": "See https://docs.github.com/en/actions/learn-github-actions/contexts#github-context\r\n",
    "head_branch": "fix_release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(release): use correct GH workflows syntax (#1020)\n\nSee https://docs.github.com/en/actions/learn-github-actions/contexts#github-context"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b8ac254a19ac28f66a",
    "number": 1019,
    "body": "Fixes #741 \r\n\r\nAlso unblocks the stuck 0.17.0 release, which publishes a wheel for the first time.\r\n\r\nThis is a less ambitious attempt to solve our release problem than introducing `twine` in #1015 ",
    "head_branch": "dist_dir",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: produce publishable distribution archives (#1019)\n\n* feat: produce publishable distribution archives\r\n\r\nFixes #741\r\n\r\n* fix: give unique names to dist/ folders by default"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b8ac254a19ac28f66b",
    "number": 1018,
    "body": "Fixes the logspew I introduced in #1004\r\n\r\nBefore:\r\n```\r\nDEBUG: Rule 'python3_8_x86_64-unknown-linux-gnu' indicated that a canonical reproducible form can be obtained by dropping arguments [\"patches\"]\r\nDEBUG: Repository python3_8_x86_64-unknown-linux-gnu instantiated at:\r\n  /cache/repo/WORKSPACE:344:27: in <toplevel>\r\n  /cache/bazel/6fadd30f776596320f945376fa05bc65/external/rules_python/python/repositories.bzl:300:26: in python_register_toolchains\r\nRepository rule python_repository defined at:\r\n  /cache/bazel/6fadd30f776596320f945376fa05bc65/external/rules_python/python/repositories.bzl:204:36: in <toplevel>\r\n```\r\n\r\nAfter:\r\n```\r\n```",
    "head_branch": "spew",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: ensure 'patches' attr is included for the canonical representation of the toolchain (#1018)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102b9ac254a19ac28f66c",
    "number": 1017,
    "body": "This example is different from the others, making it annoying to update the deleted_packages line in .bazelrc and also getting in the way of making this example self-contained, so that it can have its own requirements for example.\r\n",
    "head_branch": "refactor_wheel_example",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102baac254a19ac28f66d",
    "number": 1015,
    "body": "Tested manually with:\r\n```\r\n$ cd examples/wheel\r\n$ bazel run --stamp --embed_label=1.2.3 -- :customized.publish --repository testpypi\r\n```\r\nThe result was published here: https://test.pypi.org/project/example-customized/1.2.3/\r\n",
    "head_branch": "i99",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: wheel publishing (#1015)\n\nfeat: add a .publish target to py_wheel macro"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102bbac254a19ac28f66e",
    "number": 1014,
    "body": "Pure refactoring that should have no user-visible effect.\r\n\r\nThis gives us the place to insert other targets produced by it, such as a publishing target.\r\n\r\nNote: due to stardoc limitation, we have to expose two different symbols to the user in the docs.\r\nI've linked them together and not tried to \"hide\" the fact that there's both a macro and a rule.\r\nThis way we don't have to duplicate all the docs for the attributes into the single docstring of the macro,\r\nand declare all the matching parameters and remember to pass them through to the rule.\r\n\r\nSee docs preview: https://github.com/bazelbuild/rules_python/blob/bc38c7e28a5684fecd0d7dd38fffc00b763f6ad2/docs/packaging.md#py_wheel\r\n\r\nPart of #99\r\n",
    "head_branch": "i99",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor: py_wheel now a macro (#1014)\n\nThis gives us the place to insert other targets produced by it, such as a publishing target.\r\n\r\nPart of #99"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102bcac254a19ac28f66f",
    "number": 1013,
    "body": "Pure refactoring with no implementation changes and no public-visible side effects. This is more in-line with better coding practices from e.g. bazel-skylib.\r\n\r\nThis is a pre-factoring to allow py_wheel to become a macro which produces a py_wheel rule, in addition to a publishing target.\r\n\r\nPart of #99\r\n",
    "head_branch": "i99",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor: pull implementations out of packaging.bzl (#1013)\n\nThis is a pre-factoring to allow py_wheel to become a macro which produces a py_wheel rule, in addition to a publishing target.\r\n\r\nPart of #99"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102bcac254a19ac28f670",
    "number": 1012,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThe repo mapping wasn't set up correctly to actually test that root symlinks aren't subject to repo mapping.\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "test-runfiles-edge-case",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "runfiles: Add proper test coverage for an edge case (#1012)\n\nThe repo mapping wasn't set up correctly to actually test that root\r\nsymlinks aren't subject to repo mapping."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102bdac254a19ac28f671",
    "number": 1011,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nRunfiles discovery relative to `argv[0]` isn't used as that logic lives in the launcher.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "remove-dead-code",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "runfiles: Remove dead code (#1011)\n\nRunfiles discovery relative to `argv[0]` isn't used as that logic lives\r\nin the launcher."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102beac254a19ac28f672",
    "number": 1009,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nBazel build fails when requirements.txt contains `--extra-index-url https://foo.bar/` with the following error\r\n```\r\nUsage:   \r\n  /home/tgeng/.pyenv/versions/3.10.7/bin/python3 -m pip wheel [options] <requirement specifier> ...\r\n  /home/tgeng/.pyenv/versions/3.10.7/bin/python3 -m pip wheel [options] -r <requirements file> ...\r\n  /home/tgeng/.pyenv/versions/3.10.7/bin/python3 -m pip wheel [options] [-e] <vcs project url> ...\r\n  /home/tgeng/.pyenv/versions/3.10.7/bin/python3 -m pip wheel [options] [-e] <local project path> ...\r\n  /home/tgeng/.pyenv/versions/3.10.7/bin/python3 -m pip wheel [options] <archive url/path> ...\r\n\r\nno such option: --extra-index-url https://foo.bar/\r\nTraceback (most recent call last):\r\n  File \"/home/tgeng/.pyenv/versions/3.10.7/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/home/tgeng/.pyenv/versions/3.10.7/lib/python3.10/runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/tgeng/.cache/bazel/_bazel_tgeng/11c8d744707d72bad124e809aecc8f07/external/rules_python~override/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 449, in <module>\r\n    main()\r\n  File \"/home/tgeng/.cache/bazel/_bazel_tgeng/11c8d744707d72bad124e809aecc8f07/external/rules_python~override/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 426, in main\r\n    subprocess.run(pip_args, check=True, env=env)\r\n  File \"/home/tgeng/.pyenv/versions/3.10.7/lib/python3.10/subprocess.py\", line 524, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['/home/tgeng/.pyenv/versions/3.10.7/bin/python3', '-m', 'pip', '--isolated', 'wheel', '--no-deps', '--extra-index-url https://foo.bar/', '-r', '/tmp/tmp4t4gnn79']' returned non-zero exit status 2.\r\n```\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nBuild works as expected\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix-requirement-parser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix requirement parser (#1009)\n\nFix requirements_parser.bzl\r\n\r\nSpace in requirement.txt should delimit options into distinct arguments.\r\nOtherwise, `pip` would be invoked with incorrect argument containing\r\nspace."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102bfac254a19ac28f673",
    "number": 1007,
    "body": "Fixes https://github.com/bazelbuild/rules_python/issues/1006\r\n\r\nAlso, set PYTHONNOUSERSITE so that the script doesn't even look in site packages when checking modules.\r\n\r\nFix typo with capitilize.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #1006 \r\n\r\n\r\n## What is the new behavior?\r\n```echo \"pygame\" | bazel run //gazelle:std_modules\r\nfalse\r\n```\r\nNo extraneous output.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "1006-fix-gazelle-crash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Redirect stdout when checking imports. (#1007)\n\nFixes https://github.com/bazelbuild/rules_python/issues/1006\r\n\r\nAlso, set PYTHONNOUSERSITE so that the script doesn't even look in site\r\npackages when checking modules.\r\n\r\nFix typo with capitilize."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c0ac254a19ac28f674",
    "number": 1004,
    "body": "Allows patching the unpacked interpreter, supports supplying a list of patches per platform.\r\n\r\n(`07-unpacked_interpreter_patches.patch`)",
    "head_branch": "feat/patch_fetched",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: allow patching the interpreter fetched via toolchains (#1004)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c0ac254a19ac28f675",
    "number": 1003,
    "body": "Following #1001 we require that users install bazel-skylib, so we are now free to load from it.\r\n\r\nFollow-up from #932",
    "head_branch": "skylib",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "cleanup: remove vendored copy of skylib (#1003)\n\nFollowing #1001 we require that users install bazel-skylib, so we are now free to load from it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c1ac254a19ac28f676",
    "number": 1001,
    "body": "#846 introduced this dependency, and solved the broken examples by installing the dependency only for our own code. However, this was an unintentional breaking change for users, who may not have had bazel_skylib installed in their workspace.\r\n(Note for reviewers, any change to the examples is an indication that it will be breaking to users, as it represents changes required for using the rules)\r\n\r\nThis effectively reverts #370. At that time we didn't want any dependencies, because managing them under Bazel's WORKSPACE semantics is so difficult for users. Now that bzlmod has reached General Availability in Bazel 6, such dependencies can be managed more easily.\r\n\r\nThis also allows us to introduce bzl_library calls in our BUILD files, making it less brittle to ensure that users can generate docs for their rules/macros which load from rules_python.\r\n",
    "head_branch": "dep_skylib",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(deps): declare our dependency on bazel_skylib (#1001)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c2ac254a19ac28f677",
    "number": 999,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThe Gazelle extension requires the existence of `__test__.py` or a target named `__test__` to generate `py_test` targets. Otherwise, all `_test.py` and `test_*.py` will be included into `py_library`.\r\n\r\nIssue Number: #714\r\n\r\n\r\n## What is the new behavior?\r\n`__test__.py` is not part of official Python specification. In fact, it is rarely used in existing open source Python projects. A more common scenario is to have `_test.py` or `test_*.py` files, each with something like:\r\n\r\n```\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```\r\n\r\nThis PR creates a `py_test` target per test Python file when neither `__test__.py` or a target named `__test__` exists.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "py_test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "generate py_test without __test__ (#999)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c3ac254a19ac28f678",
    "number": 998,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThe Python runfiles library fails to find runfiles specified with apparent repository names when Bzlmod is enabled.\r\n\r\n## What is the new behavior?\r\n\r\nWhen a repo mapping manifest is available in runfiles, it is parsed and used to map apparent repository names to canonical ones in paths passed to Rlocation. The current repository, which is required to know which part of the mapping to apply, is either determined using `CurrentRepository` or can be passed in explicitly.\r\n\r\nWith this commit, runfiles lookups should succeed with Bzlmod without code changes.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "mapped-rlocation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "runfiles: Apply repo mapping to Rlocation path (#998)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c4ac254a19ac28f679",
    "number": 996,
    "body": "Just need to format the file to get CI green again.",
    "head_branch": "fix_buildifier",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: fix red CI - buildifier was broken by #832 (#996)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c4ac254a19ac28f67a",
    "number": 995,
    "body": "Wire it up to GH actions so it is published for each release.\r\n\r\nTested locally with:\r\n```\r\n$ bazel build python/runfiles:wheel --embed_label=1.0.2 --stamp\r\n$ PYTHONPATH=bazel-bin/python/runfiles/bazel_runfiles-_BUILD_EMBED_LABEL_-py3-none-any.whl python\r\n>>> import runfiles\r\n>>> runfiles.Create()\r\n```\r\n\r\nNote, I would have liked to call the package bazel-runfiles, but this isn't possible without either refactoring the paths in this repo, or doing some fancy starlark to copy files around to create a folder that we turn into the wheel. There is no project https://pypi.org/project/runfiles though there is a https://pypi.org/project/runfile\r\n\r\nWe could try harder to get the name we prefer.\r\n",
    "head_branch": "runfiles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: publish a runfiles library as a wheel (#995)\n\n* chore: publish a runfiles library as a wheel\r\n\r\nWire it up to GH actions so it is published for each release.\r\n\r\nTested locally with:\r\nbazel build python/runfiles:wheel --embed_label=1.0.2 --stamp\r\nPYTHONPATH=bazel-bin/python/runfiles/bazel_runfiles-_BUILD_EMBED_LABEL_-py3-none-any.whl python\r\n>>> import runfiles\r\n>>> runfiles.Create()\r\n\r\nNote, I would have liked to call the package bazel-runfiles, but this isn't possible without either refactoring the paths in this repo, or doing some fancy starlark to copy files around to create a folder that we turn into the wheel.\r\nThere is no project https://pypi.org/project/runfiles though there is a https://pypi.org/project/runfile\r\n\r\nWe could try harder to get the name we prefer.\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>\r\n\r\n* more code review cleanup\r\n\r\nCo-authored-by: Richard Levasseur <richardlev@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c5ac254a19ac28f67b",
    "number": 993,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nGazelle extension uses [std_modules](https://github.com/bazelbuild/rules_python/blob/1487a0c416be8bb5d1033b3815fb662527c99197/gazelle/std_modules.go#L29) and [parser](https://github.com/bazelbuild/rules_python/blob/1487a0c416be8bb5d1033b3815fb662527c99197/gazelle/parser.go#L28) without declaring them as runtime dependencies, causing errors like: \r\n\r\n```\r\n2023/01/18 16:08:23 failed to initialize std_modules: Runfile gazelle/std_modules: could not locate file\r\n```\r\n\r\n\r\n## What is the new behavior?\r\nAdding them to the `data` attribute of Gazelle extension\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add runtime dependencies to gazelle extension (#993)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c6ac254a19ac28f67c",
    "number": 992,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [?] Tests for the changes have been added (for bug fixes / features)\r\n- [?] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\n\r\nAdd new entries to `versions.bzl`.\r\n\r\n\r\n## What is the current behavior?\r\nPython 3.11 has been out for a while but unsupported by the upstream `python-build-standalone` until recently.\r\n\r\nIssue Number: Fixes #866\r\n\r\n## What is the new behavior?\r\n3.11 can now be targeted by `python_register_toolchains`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "dev/3.11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add new Python versions including 3.11 (#992)\n\nAlso bumps some minor versions:\r\n * 3.9 from 3.9.15 to 3.9.16\r\n * 3.10 from 3.10.8 to 3.10.9"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c7ac254a19ac28f67d",
    "number": 991,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nWhen extra argument(e.g. --index-url  some-custom-index-url ) is added in `requriements.in`,  In `wheel_installer.py` the extra pip arguments will be added to `deserialized_args[\"extra_pip_args\"]`, however it seems that the extra_pip_args is not tokenized by white space and it will lead to a misleading error when the argument is invoked in the `subprocess.run`.\r\n\r\nthe error is something like below:\r\n```\r\n\r\nUsage:   \r\n  /usr/bin/python3 -m pip wheel [options] <requirement specifier> ...\r\n  /usr/bin/python3 -m pip wheel [options] -r <requirements file> ...\r\n  /usr/bin/python3 -m pip wheel [options] [-e] <vcs project url> ...\r\n  /usr/bin/python3 -m pip wheel [options] [-e] <local project path> ...\r\n  /usr/bin/python3 -m pip wheel [options] <archive url/path> ...\r\n\r\nno such option: --index-url <some custom index url>\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/runpy.py\", line 194, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/usr/lib/python3.8/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/sjinxin/.cache/bazel/_bazel_sjinxin/a422e9a4d68cc84752fecc9ec9aef261/external/rules_python~override/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 437, in <module>\r\n    main()\r\n  File \"/home/sjinxin/.cache/bazel/_bazel_sjinxin/a422e9a4d68cc84752fecc9ec9aef261/external/rules_python~override/python/pip_install/tools/wheel_installer/wheel_installer.py\", line 414, in main\r\n    subprocess.run(pip_args, check=True, env=env)\r\n  File \"/usr/lib/python3.8/subprocess.py\", line 516, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['/usr/bin/python3', '-m', 'pip', '--isolated', 'wheel', '--no-deps', '--index-url  <some custom index url>', '-r', '/tmp/tmp28ycsopc']' returned non-zero exit status 2.\r\n)\r\n```\r\n\r\n## What is the new behavior?\r\n\r\nthe above error shall not happen.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "bugfix/tokenize-extra-pip-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c8ac254a19ac28f67e",
    "number": 990,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nThe `incremental_dir` parameter is a confusing name. There are 2 unused private functions.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n`incremental_dir` renamed to `installation_dir` to be a more descriptive name. The 2 unused functions are removed.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-remove-unused",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor poor naming and unused code in wheel_installer (#990)\n\nThe incremental_dir parameter is a confusing name. There are 2 unused private functions.\r\n\r\nincremental_dir renamed to installation_dir to be a more descriptive name. The 2 unused functions are removed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c8ac254a19ac28f67f",
    "number": 989,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-artifacts-macro",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102c9ac254a19ac28f680",
    "number": 988,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThe runfiles library is not able to determine the canonical name of a repo that uses `Rlocation` and thus can't look up the corresponding entries in the repository mapping manifest created by Bazel.\r\n\r\n## What is the new behavior?\r\n\r\nUpstreams the `CurrentRepository` function from the Bazel version of the runfiles library. This function will be used in a follow-up change to make `Rlocation` aware of repository mapping.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "current_repository",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "runfiles: Import `CurrentRepository` from Bazel (#988)\n\nAlso adds an integration test to the BCR test module that replaces the\r\ntests maintained in Bazel itself."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102caac254a19ac28f681",
    "number": 987,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\n`bazel build //...` in the repo fails after running the same command in `examples/bzlmod`.\r\n\r\n## What is the new behavior?\r\n\r\nThe repo in `examples/bzlmod` is ignored in the main repo.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix-bazel-ignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102cbac254a19ac28f682",
    "number": 986,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nComments about the runfiles library being vendored from bazel_tools and canonically living there instead of in rules_python.\r\n\r\n## What is the new behavior?\r\n\r\nThe runfiles library now canonically lives in rules_python and has been updated multiple times since its original import from bazel_tools.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "runfiles-drop-vendor-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "runfiles: Drop outdated comments about vendoring (#986)\n\nThe runfiles library now canonically lives in rules_python and has been\r\nupdated multiple times since its original import from bazel_tools."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102ccac254a19ac28f683",
    "number": 985,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nDocs reference `bazel_tools` and import instructions fail with Bzlmod.\r\n\r\n## What is the new behavior?\r\n\r\nThe canonical location for the runfiles library going forward will be the rules_python repo, so users should load from it. Since repository names are essentially dynamic with Bzlmod, they should not be used in import statements.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "runfiles-fix-import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "runfiles: Fix usage instructions (#985)\n\nThe canonical location for the runfiles library going forward will be\r\nthe rules_python repo, so users should load from it. Since repository\r\nnames are essentially dynamic with Bzlmod, they should not be used in\r\nimport statements."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102ccac254a19ac28f684",
    "number": 983,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [X] Tests for the changes have been added (for bug fixes / features)\n- [X] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [X] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\n@alexeagle requested to split #972 into multiple PRs for easier review, so this is the first part.\n\nIssue Number: #965\n\n## What is the new behavior?\n\nThis is in order to make #972 easier to review. This PR is only moving files and addressing a few small review comments made in the initial review of #972. I have also made `alias` targets to make this a non-breaking change from the user point of view in case a release is made before the breaking change of introducing the new `WORKSPACE` is merged.\n\nWork towards #965.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n## Other information\n\n",
    "head_branch": "gazelle-move-plugin-to-dir",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor(gazelle): Move plugin to a separate directory. (#983)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102cdac254a19ac28f685",
    "number": 982,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nrules_python's runfiles library is affected by https://github.com/bazelbuild/bazel/issues/14336, which has been fixed upstream.\r\n\r\n## What is the new behavior?\r\n\r\nrules_python's version of the runfiles library contains https://github.com/bazelbuild/bazel/commit/486d153d1981c3f47129f675de20189667667fa7\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n\r\nAlso adds the tests contained in the Bazel repo.",
    "head_branch": "update-runfiles-lib",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update runfiles lib (#982)\n\n* runfiles: Find runfiles in directories that are themselves runfiles\r\n\r\nCherry-picks a fix added to the Bazel version of the runfiles library in\r\nhttps://github.com/bazelbuild/bazel/commit/486d153d1981c3f47129f675de20189667667fa7\r\n\r\n* runfiles: Add tests from Bazel"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102ceac254a19ac28f686",
    "number": 981,
    "body": "- General rewrites to improve the understandability of the documentation.\r\n- Improving the README so that the `py_test` support is more clear and more correct.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ X] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ X] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nThe documentation needs some wordsmithing, and the instructions for `py_test` targets are incorrect.\r\n\r\nIssue Number: N/A",
    "head_branch": "gazelle-docs-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102cfac254a19ac28f687",
    "number": 980,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/979\r\n\r\n```bazel\r\nalias(\r\n    name = \"flake8\",\r\n    actual = entry_point(pkg=\"flake8\", script=\"flake8\")\r\n)\r\n```\r\n\r\n## What is the new behavior?\r\n\r\n```bazel\r\nentry_point(\r\n    name = \"flake8\",\r\n    pkg = \"flake8\",\r\n    script=\"flake8\",\r\n    deps = [...]        # any other kwargs applicable to py_binary\r\n)\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "add_deps_entry_point",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d0ac254a19ac28f688",
    "number": 977,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Some examples have been modified to work with `bazel coverage`.\r\n- [ ] Docs have been added / updated (for bug fixes / features).\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\n\r\nThe `coverage_tool` cannot be included via the toolchian.\r\n\r\nIssue Number: #43\r\n\r\n## What is the new behavior?\r\n\r\nSummary:\r\n- A script to update URLs and sha256 values used to download platform specific coverage.py wheels.\r\n- Allow to specify `coverage_tool` attribute in `python_repository`.\r\n- Register `coverage.py` when running `pip_install_dependencies` function.\r\n- Ensure that `use_repo` includes coverage tool, so that `bzlmod` users can use it too.\r\n- Have a boolean flag, which disables setting `coverage_tool` in the toolchain code.\r\n\r\nDoes not work/bad/ugly:\r\n- Use coverage.py v6.5.0 because the latest has a file [`types.py` in the package directory, which imports from Python's stdlib `types`][1]. Somehow the Python interpreter is thinking that the `from types import FrameType` is referring to the currently interpreted file and everything breaks. I would have expected the package to use absolute imports and only attempt to import from `coverage.types` if we use `coverage.types` and not just a plain `types` import.\r\n- The `multi_python_versions` example cannot show coverage for the more complex tests that are using `subprocess`. I am wondering if this is related to the fact that we are including `coverage.py` via the toolchain and not through [other mechanisms][2].\r\n- The `__init__.py` files in the root of the WORKSPACE in `bzlmod` is breaking, when running under `bazel coverage //:test`. However, it started working when I renamed `__init__.py` to `lib.py`. I am suspecting that this has to do with the fact that the layer of indirection that `coverage` introduces could be something to do with that.\r\n- The coverage collection script is written in bash so I removed support for the automatic registration of coverage toolchain for Windows for now. The issue tracking upstream support for coverage in Windows is [here][3].\r\n\r\nWork towards #43.\r\n\r\n[1]: https://github.com/nedbat/coveragepy/blob/master/coverage/types.py\r\n[2]: https://bazel.build/configure/coverage\r\n[3]: https://github.com/bazelbuild/bazel/issues/15835\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\nWe may potentially break setups where coverage tooling is already included via\r\n`COVERAGE_PYTHON` variable setting. In that case the users should use the flag to\r\ndisable coverage_tool inclusion in the toolchain. Setting\r\n`register_coverage_tool = False` when registering toolchains would be sufficient.\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "coverage",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat(coverage): Register coverage.py to hermetic toolchains (#977)\n\nThis allows including the coverage package as part of the toolchain dependencies, which is mixed into a test's dependencies when `bazel coverage` is run (if coverage is not enabled, no extra dependency is added)\r\n\r\nFor now, it's disabled by default because enabling it poses the risk of having two versions of coverage installed (one from the toolchain, one from the user's dependencies).\r\n\r\nThe user can turn the coverage_tool setting by passing\r\n`register_coverage_tool=(True|False)` to `python_register_toolchains` or\r\n`python_register_multi_toolchains` call or specifying the\r\n`coverage_tool` label as described in the `versions.bzl` file.\r\n\r\nUse coverage.py v6.5.0 because the latest has `types.py` in the package\r\ndirectory, which imports from Python's stdlib `types` [1]. Somehow the\r\nPython interpreter is thinking that the `from types import FrameType` is\r\nreferring to the currently interpreted file and everything breaks. I\r\nwould have expected the package to use absolute imports and only attempt\r\nto import from `coverage.types` if we use `coverage.types` and not just\r\na plain `types` import.\r\n\r\nNOTE: Coverage is only for non-windows platforms.\r\n\r\nUpdate tests to:\r\n- ensure that we can still use the toolchain as previously.\r\n- ensure that we are not downloading extra deps if they are not needed.\r\n\r\n* Also changes the projects bazelrc to use a remotejdk, which makes it easier for contributors because they don't have to locally install a jdk to get going.\r\n\r\n[1]: https://github.com/nedbat/coveragepy/blob/master/coverage/types.py\r\n[3]: https://github.com/bazelbuild/bazel/issues/15835"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d0ac254a19ac28f689",
    "number": 976,
    "body": "A user might use `python_headers` to build an extension module that does not itself pull in the python shared library. On Windows, this needs to expose the `*.lib` interface file to compile correctly.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCurrently a user on Windows can not compile a native extension module and build against `python_headers`.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nIt is fixed.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "add-interface-file-in-python-headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: windows `*.lib` interface in `python_headers` (#976)\n\nfix: add the windows `*.lib` interface file to the `python_headers` library\r\n\r\nA user might use `python_headers` to build an extension module that does\r\nnot itself pull in the python shared library. On Windows, this needs to\r\nexpose the `*.lib` interface file to compile correctly."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d1ac254a19ac28f68a",
    "number": 975,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n\r\n- [x] Bugfix\r\n\r\n## What is the current behavior?\r\n\r\nCurrently `bazel` will error out if one does not specify a `strip_prefix` in a custom `tool_versions` dict. But if a user retrieves interpreter archives from another source, the `strip_prefix` might not be necessary.\r\n\r\nA workaround is `'strip_prefix': ''`.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nOmitting the `strip_prefix` in `tool_versions` is allowed.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No",
    "head_branch": "allow-empty-strip-prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: allow omitting the `strip_prefix` in `tool_versions` (#975)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d2ac254a19ac28f68b",
    "number": 973,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n> could not find any to adapt / not sure how/where to introduce them\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n> did not find relevant docs\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n\r\n\r\n## What is the current behavior?\r\n\r\n`python_register_toolchains()` allows to pass in `tool_version`. But the given `url` are appended to the `base_url` even if they are already an absolute `url`. \r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nWith the new behavior, a user can load `TOOL_VERSIONS` from `@rules_python` and extend the dictionary with custom versions  pulled from custom locations while still using the defaults `@rules_python` provides. More importantly, this allows to pull artifacts for different python versions from different hosts.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "feature-absolute-url",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: allow absolute urls in `tool_versions` (#973)\n\nfeat: allow absolute urls in `tools_versions`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d3ac254a19ac28f68c",
    "number": 972,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [X] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\n\r\nPreviously the gazelle plugin was part of the same `WORKSPACE`. This means that we cannot have a separate `bzlmod` module and make the `rules_python` repo work with both, `bzlmod` and legacy dependency management systems.\r\n\r\nIssue Number: #965\r\n\r\n## What is the new behavior?\r\n\r\nThe `gazelle` plugin is now isolated with its own `WORKSPACE` file. Whilst making this I have also moved the plugin source code to a separate directory.\r\n\r\nSummary:\r\n- Move go.mod to gazelle.\r\n- Move `gazelle` definition.\r\n- ~Move the gazelle plugin to a separate folder, just like `bazel-skylib` does, which helps with naming of the externally visible targets.~ This is now #983.\r\n- Fix file `distribution` for the gazelle module.\r\n- Update the example test.\r\n- Include rules_python_gazelle_plugin during integration tests\r\n- Update ignored packages\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [X] Yes\r\n- [ ] No\r\n\r\nSteps that need to be taken:\r\n- Add a new dependency to your `WORKSPACE` and change the import path for the plugin dependency setup.\r\n- If you are using the gazelle binary from the plugin repo, use the new label `@rules_python_gazelle_plugin//python:gazelle_binary`.\r\n- If you are using the gazelle language extension, use the new label `@rules_python_gazelle_plugin//python`.\r\n- `gazelle_python.yaml` integrity gets changed for all users.\r\n",
    "head_branch": "gazelle-bzlmod-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat(gazelle)!: Move the plugin to a separate workspace (#972)\n\nfeat!(gazelle): Move the plugin to a separate workspace\r\n\r\nSummary:\r\n* Move go.mod to gazelle.\r\n* Move gazelle definition.\r\n* Fix file distribution for the gazelle module.\r\n* Update the example test.\r\n* Include rules_python_gazelle_plugin during integration tests\r\n* Update ignored packages\r\n* Update CI configuration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d4ac254a19ac28f68d",
    "number": 971,
    "body": "Following #970, this is an alternative implementation of bzlmod and gazelle integration.\nThe code is not clean, but somewhat functional.\n\nThe main idea is that:\n* `gazelle_python_manifest` macro is generated in `@pip//gazelle.bzl`.\n* The user needs to worry only about that macro when generating gazelle python manifest.\n\nBenefits:\n* No need for extra directives in the build files. We just regenerate the manifest when switching to bzlmod and rerun gazelle.\n* No need to specify `modules_mapping` rule as we call it for the user.\n* Only the `name` argument to the `gazelle_python_manifest` is truly necessary, we can infer the rest.\n\nDrawbacks:\n* Whenever `gazelle.bzl` code is updated (e.g. codefixes), this will cause re-fetching of the pip wheels if not using `bzlmod`, because the code detects changes in the `@pip` repository.\n* The fact that the user is using bzlmod is leaking into the manifest.\n",
    "head_branch": "gazelle-bzlmod-poc-v2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d4ac254a19ac28f68e",
    "number": 970,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [ ] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n- [ ] Bugfix\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\nCurrently the bzlmod aliases are only generated if we are using bzlmod. This causes an inconvenience, because the gazelle configuration has to be different.\n\nWork towards #965.\n\n## What is the new behavior?\n\n With this change, we could make a backwards incompatible change of the default pip repo convention implemented in #967 and support both bzlmod and non-bzlmod setups with the same gazelle config at the same time.\n\n This is in essence implementing a very similar thing as to what was proposed in #814 and @rickeylev mentioned in there that having such aliases may lead to undefined behaviour, hence re-starting the discussion in the context of `bzlmod`.\n\n cc: @f0rmiga, @alexeagle for extra opinions on gazelle and bzlmod future.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n",
    "head_branch": "gazelle-bzlmod-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d5ac254a19ac28f68f",
    "number": 969,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [X] Tests for the changes have been added (for bug fixes / features)\n- [X] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n- [ ] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [X] Documentation content changes\n- [ ] Other... Please describe:\n\n\n## What is the current behavior?\n\nThere is no example on the `gazelle` setup with `bzlmod`.\n\nIssue Number: #965\n\n## What is the new behavior?\n\nThis is the example.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n## Other information\n\nDepends on #966, #967, #968.\n",
    "head_branch": "gazelle-bzlmod-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d6ac254a19ac28f690",
    "number": 968,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [ ] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n- [ ] Bugfix\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n\n## What is the current behavior?\n\nCurrently `rules_python` is missing dependencies required for the gazelle plugin operation.\n\nWork towards #965.\n\n## What is the new behavior?\n\nThe extra dependencies have been added.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n## Other information\n\nI saw that the gazelle plugin for `bazel-skylib` has a separate `MODULE.bazel` file and maybe we should follow that route. However, I assume that they have gone with that approach due to `bazel-skylib` being a much more low-level dependency than `rules_python`. Hence I chose the monolithic approach for now. Whichever approach we take here, it may need to be consistent with #832 of how the `py_proto_library` support is introduced.\n",
    "head_branch": "gazelle-bzlmod-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d7ac254a19ac28f691",
    "number": 967,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [X] Tests for the changes have been added (for bug fixes / features)\n- [X] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\nCurrently the external pip dependency convention is hardcoded to `@$repo_name$_$distribution_name$//:pkg`, which makes it not flexible enough to be used together with `bzlmod` and/or multi-platform builds (as per [[1]]).\n\nWork towards #965.\n\n## What is the new behavior?\n\nAllow setting conventions for each part of the external repo labels. This is also useful when creating multi-platform alias targets when using an approach described in 2022 bazelcon [[1]]. See the added docs in `gazelle/README.md`.\n\n[1]: https://www.youtube.com/watch?v=Bjaiu8tZZhs\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n",
    "head_branch": "gazelle-bzlmod-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d8ac254a19ac28f692",
    "number": 966,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [X] Tests for the changes have been added (for bug fixes / features)\n- [X] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [X] Bugfix\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\nCurrently the labels in the `all_requirements` and `all_whl_requirements` are not useable, which is needed for gazelle bzlmod support.\n\nIssue number: #965\n\n## What is the new behavior?\n\nWe change the labels to point to the aliases that are present when `bzlmod` is used.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n\n## Other information\n\n",
    "head_branch": "gazelle-bzlmod-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d9ac254a19ac28f693",
    "number": 963,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [ ] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [X] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\nCurrently the gazelle tests are running on my machine for more than `10s`. This makes experimenting with it too slow.\n\n## What is the new behavior?\n\nThe tests are running now in parallel.\n\nI've seen it fail a few times when I made them run in parallel on my machine when running in parallel, so hence all of the improvements that I made along the way whilst trying to isolate or fix the non-determinism.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n## Other information\n\nSummary of changes\n- Rename testYaml to testCase\n- Run tests in parallel\n- Use t.Cleanup instead of defer in tests\n- Use standard t.Errorf instead of an error list\n- Do not use ioutil\n- Move create files function to the testCase\n- Separate test setup and test execution\n- Remove strings.TrimSpace from the tests and fix white space handling in logging of errors\n\nI am still not 100% happy with how the `newTestCase` constructor turned out to be, but I will call it a day for now.\n",
    "head_branch": "parallel-gazelle-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102d9ac254a19ac28f694",
    "number": 962,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [ ] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [X] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n\n## What is the current behavior?\n\nWe are currently using `ioutil.ReadFile` in `gazelle` tests even though it has been deprecated since `1.16` as per [official docs](https://golang.google.cn/pkg/io/ioutil/#ReadFile).\n\n## What is the new behavior?\n\nUse `os.ReadFile` instead as the package suggests.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n## Other information\n\n",
    "head_branch": "ioutil-remove",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use 'os' instead of 'ioutil' in gazelle tests (#962)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102daac254a19ac28f695",
    "number": 961,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [X] Tests for the changes have been added (for bug fixes / features)\n- [X] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\n`gazelle` does not work with rules_python when using bzlmod.\n\n## What is the new behavior?\n\n`gazelle` works with rules_python when using bzlmod.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n## Change summary\n\n- Add gazelle target definition and fix bzlmod dependencies\n\n  Since with bzlmod we have isolation of module workspace, we only need to add `gazelle` to the example and there is no need to setup the go toolchain, which is an improvement over non-bzlmod usage.\n\n- Add modules_map generation based on the whl list\n\n  Even though I am changing the contents of the `all_requirements` and `all_whl_requirements` in `bzlmod` usecases, I believe these variables where not previously usable under `bzlmod`, so it should be fine.\n\n- Add gazelle_python_manifest generation to the example\n\n  The manifest generation part did not need any changes.\n\n- Allow configuring the pip dependency naming convention\n\n  This also allows us to support the multi-platform Python builds as described in https://www.youtube.com/watch?v=Bjaiu8tZZhs. The alias targets may be defined under `//third_party/pip:$distribution_name$_pkg`, so using the newly added `gazelle` directives allows the alias targets to be used by gazelle.\n",
    "head_branch": "gazelle-bzlmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102dbac254a19ac28f696",
    "number": 960,
    "body": "## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [ ] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [X] Refactoring (no functional changes, no api changes)\n- [X] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\nIn a few places there is some leftover `6.0.0rc1` usage.\n\nIssue Number: N/A\n\n## What is the new behavior?\n\nSince bazel 6.0.0 has been released, we should use that instead.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No\n\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\n\n## Other information\n\n",
    "head_branch": "bazel-6-examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fully switch to bazel 6.0.0 in all places (#960)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102dcac254a19ac28f697",
    "number": 959,
    "body": "Our docs are markdown with embedded html. Bare left-angle-brackets will be interpreted as HTML tags, so they should always be in code blocks\r\n",
    "head_branch": "docs_fmt",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore(docs): fix bad html formatting (#959)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102ddac254a19ac28f698",
    "number": 957,
    "body": "This fixes a issue with the repository generation function where it was missing a _clean_pkg_name() for the second reference to the requirement name.\r\n\r\nFixes #952\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #952 \r\n\r\n`requirement(\"dependency\")` didn't work if the dependency had any number of hyphens in its name (for example `requirement(\"google-cloud-storage\")`  did not work in a BUILD.bazel file.\r\n\r\nThe error encountered was, for example:\r\n```\r\nbazel:106:6: no such package '@[unknown repo 'pip_typing-extensions' requested from \r\n@rules_python~0.16.1~pip~pip]//': The repository '@[unknown repo 'pip_python-dateutil' requested from \r\n@rules_python~0.16.1~pip~pip]' could not be resolved: No repository visible \r\nas '@pip_python-dateutil' from repository '@rules_python~0.16.1~pip~pip' and referenced by \r\n'@rules_python~0.16.1~pip~pip//:python_dateutil_pkg'\r\n```\r\n\r\n## What is the new behavior?\r\n\r\n`requirement(\"dependency\")` now works with hyphens in the name.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "pr_gh_952",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix hyphen in requirement didn't work with bzlmod (#952) (#957)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102deac254a19ac28f699",
    "number": 955,
    "body": "The file that this refers to got renamed in commit 50ba3ed843b710259b9a4ca4634f4026a2294af2.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nLink is broken\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nLink is no longer broken\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix broken link. (#955)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102deac254a19ac28f69a",
    "number": 954,
    "body": "This was only introduced very\r\nrecently (https://github.com/bazelbuild/bazel/pull/14849/commits/98b064bddc80da95e46df7cd2ec7073108e62946#diff-be59c30c90e1bc4760029739db3469d256d7784e7e7335bf3180fde39b0bcd5b) and isn’t available in most Bazel versions.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nWhen building a `py_binary` target that comes from a hermetic toolchain (as described in https://github.com/bazelbuild/rules_python#toolchain-registration) under e.g. Bazel 5.1, the build will fail with an error such as\r\n\r\n```\r\nERROR: […]/BUILD:51:10: in _transition_py_binary rule //[…]: \r\nTraceback (most recent call last):\r\n\tFile \"[…]/external/rules_python/python/config_settings/transition.bzl\", line 65, column 32, in _transition_py_impl\r\n\t\ttesting.TestEnvironment(environment = env),\r\nError in TestEnvironment: TestEnvironment() got named argument for positional-only parameter 'environment'\r\n```\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nI haven't tested the change, but it seems trivial enough.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "env",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don’t use keyword argument for TestEnvironment. (#954)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102dfac254a19ac28f69b",
    "number": 953,
    "body": "Refactors the code that deals with external python packages retrieved from repositories (i.e. PyPI, artifactory etc) into 3 main concerns:\r\n\r\n1. wheel_installer: The intention is for this to be *only* Wheel unpacking, which would be a hermetic operation and could run as a build action. However, at the moment, there is also a pip interaction that happens here to build wheels. This can be refactored out into a wheel_builder in a future PR\r\n2. lock_file_generator: This generates a `requirements.bzl` lock file for the external python packages from a fully resolved `requirements.txt` file (optionally generated from dependency_resolver. See 3)\r\n3. dependency_resolver: Fully resolves a `requirements.in` file of direct dependencies into a `requirements.txt` file.\r\n\r\nI think the refactor makes the code easier to work with and understand. This should make further improvements easier over time.",
    "head_branch": "groodt-refactor-tools",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor and separate concerns of external python package handling code (#953)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e0ac254a19ac28f69c",
    "number": 951,
    "body": "Tiny docs ux touchup, found while reading https://blog.aspect.dev/avoid-eager-fetches :)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e1ac254a19ac28f69d",
    "number": 950,
    "body": "Bumps [setuptools](https://github.com/pypa/setuptools) from 59.6.0 to 65.5.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/setuptools/releases\">setuptools's releases</a>.</em></p>\n<blockquote>\n<h2>v65.5.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.5.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.4.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.4.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.3.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.2.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.1.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.1.0</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.2</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.1</h2>\n<p>No release notes provided.</p>\n<h2>v65.0.0</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.3</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.2</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.1</h2>\n<p>No release notes provided.</p>\n<h2>v64.0.0</h2>\n<p>No release notes provided.</p>\n<h2>v63.4.3</h2>\n<p>No release notes provided.</p>\n<h2>v63.4.2</h2>\n<p>No release notes provided.</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/setuptools/blob/main/CHANGES.rst\">setuptools's changelog</a>.</em></p>\n<blockquote>\n<h2>v65.5.1</h2>\n<p>Misc\n^^^^</p>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3638\">#3638</a>: Drop a test dependency on the <code>mock</code> package, always use :external+python:py:mod:<code>unittest.mock</code> -- by :user:<code>hroncok</code></li>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3659\">#3659</a>: Fixed REDoS vector in package_index.</li>\n</ul>\n<h2>v65.5.0</h2>\n<p>Changes\n^^^^^^^</p>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3624\">#3624</a>: Fixed editable install for multi-module/no-package <code>src</code>-layout projects.</li>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3626\">#3626</a>: Minor refactorings to support distutils using stdlib logging module.</li>\n</ul>\n<p>Documentation changes\n^^^^^^^^^^^^^^^^^^^^^</p>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3419\">#3419</a>: Updated the example version numbers to be compliant with PEP-440 on the &quot;Specifying Your Project’s Version&quot; page of the user guide.</li>\n</ul>\n<p>Misc\n^^^^</p>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3569\">#3569</a>: Improved information about conflicting entries in the current working directory\nand editable install (in documentation and as an informational warning).</li>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3576\">#3576</a>: Updated version of <code>validate_pyproject</code>.</li>\n</ul>\n<h2>v65.4.1</h2>\n<p>Misc\n^^^^</p>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3613\">#3613</a>: Fixed encoding errors in <code>expand.StaticModule</code> when system default encoding doesn't match expectations for source files.</li>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3617\">#3617</a>: Merge with pypa/distutils@6852b20 including fix for <a href=\"https://github-redirect.dependabot.com/pypa/distutils/issues/181\">pypa/distutils#181</a>.</li>\n</ul>\n<h2>v65.4.0</h2>\n<p>Changes\n^^^^^^^</p>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3609\">#3609</a>: Merge with pypa/distutils@d82d926 including support for DIST_EXTRA_CONFIG in <a href=\"https://github-redirect.dependabot.com/pypa/distutils/issues/177\">pypa/distutils#177</a>.</li>\n</ul>\n<p>v65.3.0</p>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/setuptools/commit/a462cb5edb324dcc56f903524b742305e4087014\"><code>a462cb5</code></a> Bump version: 65.5.0 → 65.5.1</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/de35d8be997c9f8508b425e33a1b6e52431091fa\"><code>de35d8b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3656\">#3656</a> from bmorris3/typos</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/58e23de0d4c2ce0f2502d072bb9a2ed1e2ab0ba6\"><code>58e23de</code></a> Update changelog. Ref <a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/43a9c9bfa6aa626ec2a22540bea28d2ca77964be\"><code>43a9c9b</code></a> Limit the amount of whitespace to search/backtrack. Fixes <a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/579134321d4d9397c886a5cb50cc26d0e3fa4279\"><code>5791343</code></a> Add test capturing failed expectation. Ref <a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3659\">#3659</a>.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/1f97905bc40310ca454ff1ea3884f233b7dcc88c\"><code>1f97905</code></a> ⚫ Fade to black.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/6254567c6ae323bb8ce19a6930ae3cc5f7fb25cc\"><code>6254567</code></a> Remove workaround for emacs.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/729b180e926634930c21ccce5558780d42707763\"><code>729b180</code></a> ⚫ Fade to black.</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/c068081a7234a0c5c322a9312654e7d0f4aaa8d1\"><code>c068081</code></a> Typo corrections</li>\n<li><a href=\"https://github.com/pypa/setuptools/commit/f777a40ed9abf529906c2939f80a184a5ed035fa\"><code>f777a40</code></a> Suppress deprecation warning in --rsyncdir. Workaround for <a href=\"https://github-redirect.dependabot.com/pypa/setuptools/issues/3655\">#3655</a>.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/setuptools/compare/v59.6.0...v65.5.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=setuptools&package-manager=pip&previous-version=59.6.0&new-version=65.5.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/pip_repository_entry_points/setuptools-65.5.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e2ac254a19ac28f69e",
    "number": 949,
    "body": "Disables bytecode optimization when wheels are installed.\r\n\r\nI've noticed some occasional failures in CI, which involve `__pycache__`. I believe this could be coming from bytecode compilation of third-party wheels. I think disabling this behaviour until there is a better understanding of the desired behaviour is a good idea.\r\n\r\nThe `installer` library is able to compile bytecode upon installation. https://buildkite.com/bazel/rules-python-python/builds/3864#01854d9d-9c71-4587-a8f4-86e6718c38e7 By default, level 0 is used (generates .pyc).",
    "head_branch": "groodt-disable-bytecode-optimization",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Disable bytecode optimization during wheel installation (#949)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e2ac254a19ac28f69f",
    "number": 948,
    "body": "In 0.13.0 (Sept 2022) `pip_parse` functionality became the default (and only) behaviour. See: https://github.com/bazelbuild/rules_python/pull/807\r\n\r\nThe incremental property has therefore been unused since then (even if set as False). This removes the property entirely.",
    "head_branch": "groodt-remove-unused-incremental",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Removes unused \"incremental\" property (#948)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e3ac254a19ac28f6a0",
    "number": 947,
    "body": null,
    "head_branch": "groodt-add-missing-gitignore",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing .gitignore for //examples/pip_parse_vendored (#947)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e4ac254a19ac28f6a1",
    "number": 946,
    "body": "We presently have a mix of usage of `BUILD` and `BUILD.bazel` in the repo. I'm not too fussed, but I do have a slight preference for `BUILD.bazel`. Not sure if others agree or not.\r\n\r\nIt does loosely appear that upstream prefers BUILD.bazel as well. Related: https://github.com/bazelbuild/bazel/issues/4517",
    "head_branch": "groodt-build-bazel",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Rename `BUILD` -> `BUILD.bazel` (#946)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e5ac254a19ac28f6a2",
    "number": 945,
    "body": "Everywhere else in the repo, the name is `requirements`. This updates the singular exception.\r\n\r\nThe only minor benefit to this change is that it's easier to update the lockfiles everywhere using:\r\n` bazel run //:requirements.update`",
    "head_branch": "groodt-compile-pip-requirements-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update name of `compile_pip_requirements` (#945)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e5ac254a19ac28f6a3",
    "number": 944,
    "body": "Changelog:\r\n* [pip](https://github.com/pypa/pip/blob/main/NEWS.rst)\r\n* [build](https://github.com/pypa/build/blob/main/CHANGELOG.rst)\r\n* [installer](https://github.com/pypa/installer/blob/main/docs/changelog.md)\r\n* [pip-tools](https://github.com/jazzband/pip-tools/blob/main/CHANGELOG.md)",
    "head_branch": "groodt-bump-deps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "pip: 22.2.1 -> 22.3.1; build: 0.8.0 -> 0.9.0; installer: 0.5.1 -> 0.6.0; pip-tools: 6.8.0 -> 6.12.1 (#944)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e6ac254a19ac28f6a4",
    "number": 943,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThere are a few outdated dependencies. See https://github.com/bazelbuild/rules_python/pull/928 https://github.com/bazelbuild/rules_python/pull/925 and a few others.\r\n\r\n\r\n## What is the new behavior?\r\nThis PR updates a the relevant lockfiles and tests.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nThis PR has highlighted that the process for updating the dependencies in the repo is a little clumsy. Perhaps it's necessary because this repo deals with pinned versions and lockfiles etc, but it does seem like some of the tests are fragile and duplicating logic by testing lockfile behaviour multiple times.\r\n\r\n",
    "head_branch": "groodt-bump-lockfiles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Updates lockfiles (#943)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e7ac254a19ac28f6a5",
    "number": 942,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\nThe PR adds a new attribute `deps` which allows to add cross-requirement dependencies like\r\n```\r\n# Pips\r\npip = use_extension(\"@rules_python//python:extensions.bzl\", \"pip\")\r\n\r\npip.parse(\r\n    name = \"pip\",\r\n    requirements_lock = \"//:requirements.txt\",\r\n    python_interpreter_target = \"@python3_10_x86_64-unknown-linux-gnu//:bin/python3\",\r\n    quiet = False,\r\n)\r\n\r\nuse_repo(pip, \"pip\")\r\n\r\nuse_repo(\r\n    pip,\r\n    \"pip_torch\",\r\n    \"pip_typing_extensions\",\r\n)\r\n\r\n\r\n# mmcv pips\r\npip.parse(\r\n    name = \"pip-mmcv\",\r\n    requirements_lock = \"//:requirements_mmcv.txt\",\r\n    python_interpreter_target = \"@python3_10_x86_64-unknown-linux-gnu//:bin/python3\",\r\n    environment = {\r\n        \"CC\": \"gcc\",\r\n        \"CXX\": \"g++\",\r\n        \"MAX_JOBS\": \"12\",\r\n        \"SETUPTOOLS_USE_DISTUTILS\": \"stdlib\",\r\n    },\r\n    quiet = False,\r\n    deps = [\r\n        \"@pip_torch//:site-packages/__init__.py\",\r\n        \"@pip_typing_extensions//:site-packages/__init__.py\",\r\n    ],\r\n    timeout = 10000,\r\n)\r\n\r\nuse_repo(pip, \"pip-mmcv\")\r\n```\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAdded new `deps` attribute.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "add-deps-attr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e8ac254a19ac28f6a6",
    "number": 941,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nThe PR adjusts parsing of requirements files with options where for\r\n```\r\n#\r\n# This file is autogenerated by pip-compile with python 3.10\r\n# To update, run:\r\n#\r\n#    bazel run //:requirements.update\r\n#\r\n--extra-index-url https://download.pytorch.org/whl/cu117\r\n```\r\nthe option is treated as a single line at https://github.com/bazelbuild/rules_python/blob/83315227/python/pip_install/pip_repository.bzl#L175 and a call `'python3', '-m', 'pip', '--isolated', 'wheel', '--no-deps', '--verbose', '--extra-index-url https://download.pytorch.org/whl/cu117', '-r', '/tmp/tmp2wl99vej'`  fails as\r\n```\r\nUsage:   \r\n  /home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/bin/python3 -m pip wheel [options] <requirement specifier> ...\r\n  /home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/bin/python3 -m pip wheel [options] -r <requirements file> ...\r\n  /home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/bin/python3 -m pip wheel [options] [-e] <vcs project url> ...\r\n  /home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/bin/python3 -m pip wheel [options] [-e] <local project path> ...\r\n  /home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/bin/python3 -m pip wheel [options] <archive url/path> ...\r\n\r\nno such option: --extra-index-url https://download.pytorch.org/whl/cu117\r\nTraceback (most recent call last):\r\n  File \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/lib/python3.10/runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override/python/pip_install/extract_wheels/extract_single_wheel.py\", line 125, in <module>\r\n    main()\r\n  File \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override/python/pip_install/extract_wheels/extract_single_wheel.py\", line 101, in main\r\n    subprocess.run(pip_args, check=True, env=env)\r\n  File \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/lib/python3.10/subprocess.py\", line 526, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~override~python~python3_10_x86_64-unknown-linux-gnu/bin/python3', '-m', 'pip', '--isolated', 'wheel', '--no-deps', '--verbose', '--extra-index-url https://download.pytorch.org/whl/cu117', '-r', '/tmp/tmp2wl99vej']' returned non-zero exit status 2.\r\n``` \r\n\r\n\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "adjust-options-parsing",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102e9ac254a19ac28f6a7",
    "number": 940,
    "body": "Fixes #930 the following errors with bzlmod modules:\r\n```\r\nERROR: An error occurred during the fetch of repository 'rules_python~0.16.1~pip~pip':\r\n   Traceback (most recent call last):\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/pip_install/pip_repository.bzl\", line 335, column 63, in _pip_repository_impl\r\n\t\tenvironment = _create_repository_execution_environment(rctx),\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/pip_install/pip_repository.bzl\", line 210, column 47, in _create_repository_execution_environment\r\n\t\tcppflags.extend(_get_toolchain_unix_cflags(rctx))\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/pip_install/pip_repository.bzl\", line 115, column 37, in _get_toolchain_unix_cflags\r\n\t\tif not is_standalone_interpreter(rctx, rctx.attr.python_interpreter_target):\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/repositories.bzl\", line 64, column 22, in is_standalone_interpreter\r\n\t\trctx.path(Label(\"@{}//:WORKSPACE\".format(rctx.attr.python_interpreter_target.workspace_name))).dirname,\r\nError in path: Unable to load package for @[unknown repo 'rules_python~0.16.1~python~python3_10_x86_64-unknown-linux-gnu' requested from @rules_python~0.16.1]//:WORKSPACE: The repository '@[unknown repo 'rules_python~0.16.1~python~python3_10_x86_64-unknown-linux-gnu' requested from @rules_python~0.16.1]' could not be resolved: No repository visible as '@rules_python~0.16.1~python~python3_10_x86_64-unknown-linux-gnu' from repository '@rules_python~0.16.1'\r\n```\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe PR correctly references python interpreter target labels as `@@rules_python~0.16.1~python~python3_10_x86_64-unknown-linux-gnu//:WORKSPACE`  and allows to use\r\n```\r\nuse_repo(python, \"python3_10_x86_64-unknown-linux-gnu\")\r\n\r\npip.parse(\r\n    name = \"pip\",\r\n    requirements_lock = \"//:requirements.txt\",\r\n    python_interpreter_target = \"@python3_10_x86_64-unknown-linux-gnu//:bin/python3\",\r\n)\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix/python_interpreter_target",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Python interpreter target labels with @@ prefixes. (#940)\n\nERROR: An error occurred during the fetch of repository 'rules_python~0.16.1~pip~pip':\r\n   Traceback (most recent call last):\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/pip_install/pip_repository.bzl\", line 335, column 63, in _pip_repository_impl\r\n\t\tenvironment = _create_repository_execution_environment(rctx),\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/pip_install/pip_repository.bzl\", line 210, column 47, in _create_repository_execution_environment\r\n\t\tcppflags.extend(_get_toolchain_unix_cflags(rctx))\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/pip_install/pip_repository.bzl\", line 115, column 37, in _get_toolchain_unix_cflags\r\n\t\tif not is_standalone_interpreter(rctx, rctx.attr.python_interpreter_target):\r\n\tFile \"/home/miha/.cache/bazel/_bazel_miha/bd93af10788cff1331d75ed739998a3c/external/rules_python~0.16.1/python/repositories.bzl\", line 64, column 22, in is_standalone_interpreter\r\n\t\trctx.path(Label(\"@{}//:WORKSPACE\".format(rctx.attr.python_interpreter_target.workspace_name))).dirname,\r\nError in path: Unable to load package for @[unknown repo 'rules_python~0.16.1~python~python3_10_x86_64-unknown-linux-gnu' requested from @rules_python~0.16.1]//:WORKSPACE: The repository '@[unknown repo 'rules_python~0.16.1~python~python3_10_x86_64-unknown-linux-gnu' requested from @rules_python~0.16.1]' could not be resolved: No repository visible as '@rules_python~0.16.1~python~python3_10_x86_64-unknown-linux-gnu' from repository '@rules_python~0.16.1'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102eaac254a19ac28f6a8",
    "number": 939,
    "body": "It was kind of ambiguous before about where the user should look to find instructions on how to resolve the issue.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "clarify-gazelle-instruction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore(gazelle): clarify a particular failure message (#939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102eaac254a19ac28f6a9",
    "number": 938,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCI is failing due to a diff_test failure. See https://buildkite.com/bazel/rules-python-python/builds/3802#01853209-eaee-4f51-b2e9-6eeb9308cb5c\r\nThe failure is caused by a small change in the formatting of labels.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe `incompatible_unambiguous_label_stringification` flag was flipped in https://github.com/bazelbuild/bazel/issues/16196, this changes the behaviour when labels are stringified.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-fix-ci",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix CI after bazel 6.0.0 (#938)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102ebac254a19ac28f6aa",
    "number": 937,
    "body": "Refactors `extract_single_wheel.py` into `wheel_installer.py`. Also relocates some (but not all) of the various methods and functions into this single script. There was a lot of confusing indirection between modules.\r\n\r\nThe `wheel_installer.py` logic is quite straightforward and there isn't much benefit in splitting it out across so many files. There is more refactoring that can be done, but this was a chunky first-pass.\r\n\r\nAlso ran the `black` formatter, so there are a few unrelated formatting changes.",
    "head_branch": "groodt-refactor-wheel-installer",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Refactor wheel_installer (#937)\n\n* .\r\n\r\n* .\r\n\r\n* .\r\n\r\n* .\r\n\r\n* .\r\n\r\n* ."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102ecac254a19ac28f6ab",
    "number": 936,
    "body": "Some entrypoints can be weird, calling a method of an imported class rather than directly calling a function.\r\n\r\nIn the case of `invoke`, having [this entrypoint](https://github.com/pyinvoke/invoke/blob/8f6c0617c7dc59b105dd1b92fb417e75adc21bea/setup.py#L51), the generated file had a line saying `from invoke.main import program.run`, which raises a syntax error.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nA syntax error comes up if an entrypoint is a method of a class.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nNo more syntax error.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102edac254a19ac28f6ac",
    "number": 935,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #845 \r\n\r\nPrior to `rules_python==0.14.0` the `dist-info/METADATA` file built by `py_wheel` resolved stamped data.\r\nThis can be confirmed by doing the following:\r\n\r\n```sh\r\ngit checkout 0.13.0\r\ngit cherry-pick 921ad79\r\nbazel test //examples/wheel/...\r\n```\r\n\r\nWhere `921ad79` is the commit from this PR that adds the test for the resolved version.\r\n\r\nBeginning with `0.14.0`, version is incorrectly set.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis PR restores the previous behavior by writing the `Version:` in `wheelmaker.py`.\r\nOne side effect is that the order of the `METADATA` file is modified.\r\n`Version:` was previously after `Name:`. Now `Version:` is the final key before the \"description\".\r\n\r\n> Note: I also had to run `bazel run //:vendor_requirements` from within `examples/pip_parse_vendored` to fix CI. Does not seem related to this PR, I can remove that change if it should not be included.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No",
    "head_branch": "issue/845",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: embed stamped version in py_wheel METADATA (#935)\n\n* fix: add test for stamped Version in METADATA\r\n\r\n* fix: resolve stamps in wheel Version METADATA\r\n\r\n* run //:vendor_requirements\r\n\r\nThis seems unrelated to the #845 issue fix.\r\nCI wants `requirements.bzl` to list `@//:requirements.txt`\r\nnot `//:requirements.txt`?\r\n\r\n* fix: simplify line breaks\r\n\r\nCo-authored-by: Matt Oberle <matt.r.oberle@gmail.com>\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102eeac254a19ac28f6ad",
    "number": 933,
    "body": "Removes unused code. The code that is generating `requirements.bzl` is `parse_requirements_to_bzl.py`\r\n\r\nAside: I do think these generated helper functions in the repository rule could probably be replaced with simpler macros similar to the macro included in rules_jvm_external. See: https://github.com/bazelbuild/rules_jvm_external#artifact-helper-macro",
    "head_branch": "groodt-confirm-unused",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unused code (#933)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102eeac254a19ac28f6ae",
    "number": 928,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.9.24 to 2022.12.7.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9e9e840925d7b8e76c76fdac1fab7e6e88c1c3b8\"><code>9e9e840</code></a> 2022.12.07</li>\n<li>See full diff in <a href=\"https://github.com/certifi/python-certifi/compare/2022.09.24...2022.12.07\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.9.24&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_repository_annotations/certifi-2022.12.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102efac254a19ac28f6af",
    "number": 927,
    "body": "When `rctx.which` can not find a program for the specified name, it returns `None`.\r\nWe should not override the original `python_interpreter` in this case, otherwise we'll see a misleading error message like ``Error in fail: python interpreter `None` not found in PATH``\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix-error-message",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix misleading error message (#927)\n\nWhen `rctx.which` can not find a program for the specified name, it\r\nreturns `None`.\r\nWe should not override the original `python_interpreter` in this case,\r\notherwise we'll see a misleading error message like `Error in fail:\r\npython interpreter `None` not found in PATH`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f0ac254a19ac28f6b0",
    "number": 926,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2021.10.8 to 2022.12.7.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9e9e840925d7b8e76c76fdac1fab7e6e88c1c3b8\"><code>9e9e840</code></a> 2022.12.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b81bdb269f1edb791bcd4ec8a9d0c053758f961a\"><code>b81bdb2</code></a> 2022.09.24</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/939a28ffc57b1613770f572b584745c7b6d43e7d\"><code>939a28f</code></a> 2022.09.14</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/aca828a78e73235a513dff9ebc181a47ef7dbf7b\"><code>aca828a</code></a> 2022.06.15.2</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/de0eae12a6d5794a4c1e33052af6717707ce1fcc\"><code>de0eae1</code></a> Only use importlib.resources's new files() / Traversable API on Python ≥3.11 ...</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b8eb5e9af9143b22b7f651942b393e369ed4c52a\"><code>b8eb5e9</code></a> 2022.06.15.1</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/47fb7ab715965684e035292d2ad3386aabdc4d25\"><code>47fb7ab</code></a> Fix deprecation warning on Python 3.11 (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/199\">#199</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b0b48e059995f455ac1e79b3ad373ad4ef355516\"><code>b0b48e0</code></a> fixes <a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/198\">#198</a> -- update link in license</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9d514b4cad79357071c89d7dc4dc1b4df72bb997\"><code>9d514b4</code></a> 2022.06.15</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/4151e8849481f396537c34812068e89b32731e52\"><code>4151e88</code></a> Add py.typed to MANIFEST.in to package in sdist (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/196\">#196</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2021.10.08...2022.12.07\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2021.10.8&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/bzlmod/certifi-2022.12.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f1ac254a19ac28f6b1",
    "number": 925,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2021.10.8 to 2022.12.7.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9e9e840925d7b8e76c76fdac1fab7e6e88c1c3b8\"><code>9e9e840</code></a> 2022.12.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b81bdb269f1edb791bcd4ec8a9d0c053758f961a\"><code>b81bdb2</code></a> 2022.09.24</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/939a28ffc57b1613770f572b584745c7b6d43e7d\"><code>939a28f</code></a> 2022.09.14</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/aca828a78e73235a513dff9ebc181a47ef7dbf7b\"><code>aca828a</code></a> 2022.06.15.2</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/de0eae12a6d5794a4c1e33052af6717707ce1fcc\"><code>de0eae1</code></a> Only use importlib.resources's new files() / Traversable API on Python ≥3.11 ...</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b8eb5e9af9143b22b7f651942b393e369ed4c52a\"><code>b8eb5e9</code></a> 2022.06.15.1</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/47fb7ab715965684e035292d2ad3386aabdc4d25\"><code>47fb7ab</code></a> Fix deprecation warning on Python 3.11 (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/199\">#199</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b0b48e059995f455ac1e79b3ad373ad4ef355516\"><code>b0b48e0</code></a> fixes <a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/198\">#198</a> -- update link in license</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9d514b4cad79357071c89d7dc4dc1b4df72bb997\"><code>9d514b4</code></a> 2022.06.15</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/4151e8849481f396537c34812068e89b32731e52\"><code>4151e88</code></a> Add py.typed to MANIFEST.in to package in sdist (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/196\">#196</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2021.10.08...2022.12.07\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2021.10.8&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse_vendored/certifi-2022.12.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f2ac254a19ac28f6b2",
    "number": 924,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2021.10.8 to 2022.12.7.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9e9e840925d7b8e76c76fdac1fab7e6e88c1c3b8\"><code>9e9e840</code></a> 2022.12.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b81bdb269f1edb791bcd4ec8a9d0c053758f961a\"><code>b81bdb2</code></a> 2022.09.24</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/939a28ffc57b1613770f572b584745c7b6d43e7d\"><code>939a28f</code></a> 2022.09.14</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/aca828a78e73235a513dff9ebc181a47ef7dbf7b\"><code>aca828a</code></a> 2022.06.15.2</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/de0eae12a6d5794a4c1e33052af6717707ce1fcc\"><code>de0eae1</code></a> Only use importlib.resources's new files() / Traversable API on Python ≥3.11 ...</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b8eb5e9af9143b22b7f651942b393e369ed4c52a\"><code>b8eb5e9</code></a> 2022.06.15.1</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/47fb7ab715965684e035292d2ad3386aabdc4d25\"><code>47fb7ab</code></a> Fix deprecation warning on Python 3.11 (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/199\">#199</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b0b48e059995f455ac1e79b3ad373ad4ef355516\"><code>b0b48e0</code></a> fixes <a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/198\">#198</a> -- update link in license</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9d514b4cad79357071c89d7dc4dc1b4df72bb997\"><code>9d514b4</code></a> 2022.06.15</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/4151e8849481f396537c34812068e89b32731e52\"><code>4151e88</code></a> Add py.typed to MANIFEST.in to package in sdist (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/196\">#196</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2021.10.08...2022.12.07\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2021.10.8&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/tests/pip_repository_entry_points/certifi-2022.12.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f2ac254a19ac28f6b3",
    "number": 923,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2021.10.8 to 2022.12.7.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9e9e840925d7b8e76c76fdac1fab7e6e88c1c3b8\"><code>9e9e840</code></a> 2022.12.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b81bdb269f1edb791bcd4ec8a9d0c053758f961a\"><code>b81bdb2</code></a> 2022.09.24</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/939a28ffc57b1613770f572b584745c7b6d43e7d\"><code>939a28f</code></a> 2022.09.14</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/aca828a78e73235a513dff9ebc181a47ef7dbf7b\"><code>aca828a</code></a> 2022.06.15.2</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/de0eae12a6d5794a4c1e33052af6717707ce1fcc\"><code>de0eae1</code></a> Only use importlib.resources's new files() / Traversable API on Python ≥3.11 ...</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b8eb5e9af9143b22b7f651942b393e369ed4c52a\"><code>b8eb5e9</code></a> 2022.06.15.1</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/47fb7ab715965684e035292d2ad3386aabdc4d25\"><code>47fb7ab</code></a> Fix deprecation warning on Python 3.11 (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/199\">#199</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b0b48e059995f455ac1e79b3ad373ad4ef355516\"><code>b0b48e0</code></a> fixes <a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/198\">#198</a> -- update link in license</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9d514b4cad79357071c89d7dc4dc1b4df72bb997\"><code>9d514b4</code></a> 2022.06.15</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/4151e8849481f396537c34812068e89b32731e52\"><code>4151e88</code></a> Add py.typed to MANIFEST.in to package in sdist (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/196\">#196</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2021.10.08...2022.12.07\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2021.10.8&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse/certifi-2022.12.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f3ac254a19ac28f6b4",
    "number": 922,
    "body": "Bumps [certifi](https://github.com/certifi/python-certifi) from 2020.12.5 to 2022.12.7.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9e9e840925d7b8e76c76fdac1fab7e6e88c1c3b8\"><code>9e9e840</code></a> 2022.12.07</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b81bdb269f1edb791bcd4ec8a9d0c053758f961a\"><code>b81bdb2</code></a> 2022.09.24</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/939a28ffc57b1613770f572b584745c7b6d43e7d\"><code>939a28f</code></a> 2022.09.14</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/aca828a78e73235a513dff9ebc181a47ef7dbf7b\"><code>aca828a</code></a> 2022.06.15.2</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/de0eae12a6d5794a4c1e33052af6717707ce1fcc\"><code>de0eae1</code></a> Only use importlib.resources's new files() / Traversable API on Python ≥3.11 ...</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b8eb5e9af9143b22b7f651942b393e369ed4c52a\"><code>b8eb5e9</code></a> 2022.06.15.1</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/47fb7ab715965684e035292d2ad3386aabdc4d25\"><code>47fb7ab</code></a> Fix deprecation warning on Python 3.11 (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/199\">#199</a>)</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/b0b48e059995f455ac1e79b3ad373ad4ef355516\"><code>b0b48e0</code></a> fixes <a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/198\">#198</a> -- update link in license</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/9d514b4cad79357071c89d7dc4dc1b4df72bb997\"><code>9d514b4</code></a> 2022.06.15</li>\n<li><a href=\"https://github.com/certifi/python-certifi/commit/4151e8849481f396537c34812068e89b32731e52\"><code>4151e88</code></a> Add py.typed to MANIFEST.in to package in sdist (<a href=\"https://github-redirect.dependabot.com/certifi/python-certifi/issues/196\">#196</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/certifi/python-certifi/compare/2020.12.05...2022.12.07\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2020.12.5&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/build_file_generation/certifi-2022.12.7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f4ac254a19ac28f6b5",
    "number": 920,
    "body": "The tags that are released already have a more comprehensive test run attached to them, so we don't need to spend a lot of time re-testing on GitHub Actions during release.",
    "head_branch": "f0rmiga/dont-test-release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: don't test on release (#920)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f5ac254a19ac28f6b6",
    "number": 918,
    "body": "This avoids automated code review requests that aren't actually necessary",
    "head_branch": "owners-gazelle-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add f0rmiga as codeowner of build_file_example (#918)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f5ac254a19ac28f6b7",
    "number": 917,
    "body": "The current behaviour of the Gazelle manifest is to include every single module it can find inside a Python wheel. This has the downside of adding specific modules that differ from one platform to another. E.g. `psutil` will have differing module files; therefore, generating the Gazelle manifest will yield different results on macOS vs Linux vs Windows. By excluding modules that start with `_` by default, we can reduce these differences.\r\n\r\nI made the exclude_patterns configurable in case the user hits another difference that is not captured by the default value.\r\n\r\nIn addition to this new feature, I changed the integrity hash logic to consider the generator source code as part of the input. This will enforce users upgrading to a new release of rules_python to re-generate the manifests.",
    "head_branch": "f0rmiga/gazelle-manifest-exclude-patterns",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: gazelle manifest exclude_patterns (#917)\n\n* feat: exclude_patterns for gazelle manifest\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: force gazelle manifest update on logic change\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f6ac254a19ac28f6b8",
    "number": 915,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nIf `# gazelle:ignore` line exists  gazelle panics. \r\n\r\ncommit hash  6434e34fb0b7f527d3f4451b702086a2d396b021 (added new test line)\r\n//gazelle:gazelle_test failes \r\n```go\r\n\r\nexec ${PAGER:-/usr/bin/less} \"$0\" || exit 1\r\nExecuting tests from //gazelle:gazelle_test\r\n-----------------------------------------------------------------------------\r\n--- FAIL: TestGazelleBinary (12.00s)\r\n    --- FAIL: TestGazelleBinary/ignored_invalid_imported_module (0.38s)\r\n        python_test.go:188: expected gazelle exit code: 0\r\n            got: 2\r\n        python_test.go:188: expected gazelle stderr: \r\n            got: panic: runtime error: index out of range [1] with length 1\r\n            \r\n            goroutine 1 [running]:\r\n            github.com/bazelbuild/rules_python/gazelle.(*comment).asAnnotation(0x1004293c0?)\r\n            \tgazelle/parser.go:207 +0x13c\r\n            github.com/bazelbuild/rules_python/gazelle.annotationsFromComments({0x14000031040, 0x4, 0x1f8?})\r\n            \tgazelle/parser.go:230 +0xac\r\n            github.com/bazelbuild/rules_python/gazelle.(*python3Parser).parse(0x140001c6338, 0x14000010130)\r\n            \tgazelle/parser.go:131 +0x5a4\r\n            github.com/bazelbuild/rules_python/gazelle.(*Python).GenerateRules(0x0?, {0x14000142370, {0x1400007a690, 0x6f}, {0x0, 0x0}, 0x140001a26e0, {0x0, 0x0, 0x0}, ...})\r\n            \tgazelle/generate.go:197 +0x68c\r\n            main.runFixUpdate.func1({0x1400007a690, 0x6f}, {0x0, 0x0}, 0x14000142370, 0x0?, 0x140001a26e0, {0x0, 0x0, 0x0}, ...)\r\n            \texternal/bazel_gazelle/cmd/gazelle/fix-update.go:298 +0xc88\r\n            github.com/bazelbuild/bazel-gazelle/walk.Walk.func1(0x14000142370, {0x1400007a690, 0x6f}, {0x0, 0x0}, 0x0)\r\n            \texternal/bazel_gazelle/walk/walk.go:179 +0x3ec\r\n            github.com/bazelbuild/bazel-gazelle/walk.Walk(0x14000142370, {0x1400007e730?, 0x5, 0x5}, {0x140000694f0, 0x1, 0x1}, 0x0, 0x1400015f588)\r\n            \texternal/bazel_gazelle/walk/walk.go:182 +0x190\r\n            main.runFixUpdate({0x1400001e084, 0x6f}, 0x16fd42c0c?, {0x14000012050, 0x1, 0x1})\r\n            \texternal/bazel_gazelle/cmd/gazelle/fix-update.go:275 +0x580\r\n            main.run({0x1400001e084?, 0x6f?}, {0x14000012050?, 0x1?, 0x1?})\r\n            \texternal/bazel_gazelle/cmd/gazelle/gazelle.go:95 +0x230\r\n            main.main()\r\n            \texternal/bazel_gazelle/cmd/gazelle/gazelle.go:72 +0xe4\r\n            \r\n        python_test.go:142: \"\" exists\r\n        python_test.go:142: \"/ignored_invalid_imported_module\" exists\r\n        python_test.go:142: \"/ignored_invalid_imported_module/BUILD\" exists\r\n        python_test.go:142: \"/ignored_invalid_imported_module/README.md\" exists\r\n        python_test.go:142: \"/ignored_invalid_imported_module/WORKSPACE\" exists\r\n        python_test.go:142: \"/ignored_invalid_imported_module/__init__.py\" exists\r\n        python_test.go:142: \"/ignored_invalid_imported_module/gazelle_python.yaml\" exists\r\n        python_test.go:142: \"/ignored_invalid_imported_module/test.yaml\" exists\r\nFAIL\r\n\r\n\r\n```\r\n\r\n## What is the new behavior?\r\n\r\nIgnores erorr. This is similar behavior if module name is invalid.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "panic-when-invalid-gazelle-ignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: gazelle panics when \"# gazelle:ignore\" doesn't have a value (#915)\n\n* add panic case\r\n\r\n* fix: return nil if invalid annotation is provided instead of panic\r\n\r\n* fix after review\r\n\r\n* Update gazelle/parser.go\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update gazelle/testdata/invalid_annotation/test.yaml\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f7ac254a19ac28f6b9",
    "number": 913,
    "body": "Fixes #912\n\n## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [x] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n<!-- Please check the one that applies to this PR using \"x\". -->\n\n- [X] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [X] Refactoring (no functional changes, no api changes)\n- [X] Build related changes\n- [X] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n\n## What is the current behavior?\n\nCurrently the build_file_generation example is not executed when running `bazel test //...`.\n\n## What is the new behavior?\n\nThis PR adds the `filegroup` targets for the `gazelle` subtree and allows us to run the `gazelle` test on Linux locally. I am creating this PR in order to see if it fails on other platforms.\n\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [X] No",
    "head_branch": "gazelle-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add gazelle distribution and enable build_file_generation test (#913)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f8ac254a19ac28f6ba",
    "number": 911,
    "body": "We were skipping some tests on CI. The `pip_parse_vendored` I still think is not worth testing it there, so I just removed the TODO and added a comment explaining why we don't test it on Windows.",
    "head_branch": "f0rmiga/fix-windows-ci",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: windows on ci (#911)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f9ac254a19ac28f6bb",
    "number": 910,
    "body": "Debian was not being tested before, and we found out that it failed when publishing to BCR. This PR should assert that Debian remains working.",
    "head_branch": "f0rmiga/test-debian11",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ci: add debian11 to the matrix (#910)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102f9ac254a19ac28f6bc",
    "number": 909,
    "body": "Fixes https://github.com/bazelbuild/rules_python/issues/908.",
    "head_branch": "f0rmiga/fix-generated-requirements",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: pip_compile to handle multiple generated requirements.in (#909)\n\n* fix: pip_compile to handle multiple generated requirements.in\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: only use requirements.in absolute when generated\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: use hermetic toolchain to lock the requirements\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: tests on CI\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: windows path separator madness\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102faac254a19ac28f6bd",
    "number": 907,
    "body": "After the first time the python_repository is used, files are created in\r\n`__pycache__` directories. These invalidate the configured target for\r\nthe python_repository target, and cause spurious rebuilds.\r\n\r\nHere's an example of the set of pycache files I've seen in one\r\nrepository.\r\n\r\n```\r\nlib/python3.8/distutils/__pycache__/__init__.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/archive_util.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/cmd.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/config.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/core.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/debug.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/dep_util.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/dir_util.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/dist.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/errors.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/extension.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/fancy_getopt.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/file_util.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/log.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/spawn.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/sysconfig.cpython-38.pyc\r\nlib/python3.8/distutils/__pycache__/util.cpython-38.pyc\r\nlib/python3.8/distutils/command/__pycache__/__init__.cpython-38.pyc\r\nlib/python3.8/distutils/command/__pycache__/build.cpython-38.pyc\r\nlib/python3.8/distutils/command/__pycache__/install.cpython-38.pyc\r\nlib/python3.8/email/__pycache__/_header_value_parser.cpython-38.pyc\r\nlib/python3.8/email/__pycache__/contentmanager.cpython-38.pyc\r\nlib/python3.8/email/__pycache__/headerregistry.cpython-38.pyc\r\nlib/python3.8/email/__pycache__/policy.cpython-38.pyc\r\n```\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nIf you cquery twice in a row, you get different output, because extra files were created in the repository by the first cquery invocation.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThe consecutive cqueries now produce identical results.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No",
    "head_branch": "exclude-pycache-in-python-repository",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "python_repository: Exclude pycache files (#907)\n\npython_repository: Exclude pycache files when root\r\n\r\nSome of these are missing from the upstream python distributions, and\r\nwhen they are, if running as root, this causes the files to be generated\r\nthe first time their associated .py file is evaluated, causing analysis\r\nand execution cache misses due to extra files matching the repository glob."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102fbac254a19ac28f6be",
    "number": 904,
    "body": "After we introduced multi-toolchain support, the release failed because `RunEnvironmentInfo` is only available on Bazel 5.3.0+ and there was a bug in how we checked for the existence of this provider. Apparently, there's no way to check for this provider, so I reverted to the deprecated `testing.TestEnvironment`. Once we are okay with not supporting Bazel < 5.3.0, we can move to `RunEnvironmentInfo`.",
    "head_branch": "f0rmiga/fix-missing-RunEnvironmentInfo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: missing RunEnvironmentInfo (#904)\n\n* fix: missing RunEnvironmentInfo\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add reference to github issue\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102fcac254a19ac28f6bf",
    "number": 902,
    "body": null,
    "head_branch": "f0rmiga/bump-python-versions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "bump: python toolchain releases (#902)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102fdac254a19ac28f6c0",
    "number": 897,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\n\r\nIssue Number: #895 \r\n\r\n\r\n## What is the new behavior?\r\n\r\n`rpyc` dependency generates separate `py_binary` rules.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n- [X] Unsure\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "895-dot-py-requirement-extension-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: #895 append _py if ending with .py"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102fdac254a19ac28f6c1",
    "number": 896,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\n\r\nIssue Number: #895 \r\n\r\n\r\n## What is the new behavior?\r\n\r\n`rpyc` dependency generates separate `py_binary` rules.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n- [X] Unsure\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "895-dot-py-extension-rework",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102feac254a19ac28f6c2",
    "number": 893,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nBzlmod extension generated incorrect repository name for some deps.\r\n\r\n## What is the new behavior?\r\n\r\nCorrectly sanitizes pip package name.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nAddresses https://github.com/bazelbuild/rules_python/issues/884.\r\n\r\nfyi @calliecameron",
    "head_branch": "issue-884",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: fix a bug where some transitive deps could not be resolved via bzlmod"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662102ffac254a19ac28f6c3",
    "number": 892,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nBCR metadata template had incorrect filename, causing the Publish to BCR app to fail to post an entry for `0.14.0`.\r\n\r\n## What is the new behavior?\r\n\r\nCorrect filename.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n",
    "head_branch": "fix-template-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: correct bcr metadata template filename (#892)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210300ac254a19ac28f6c4",
    "number": 891,
    "body": "This is based on my experience getting stated myself, where I have only minimal experience with GitHub, git, and many of the tools.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Documentation content changes\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] No\r\n",
    "head_branch": "contrib-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Document how to get started working on rules_python (#891)\n\n* Document how to get started working on rules_python\r\n\r\nThis is based on my experience getting stated myself, where I have only\r\nminimal experience with GitHub, git, and many of the tools.\r\n\r\n* Various Spelling/grammar fixes\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210301ac254a19ac28f6c5",
    "number": 890,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nThe libpython target does not have an associated interface_library attribute so it cannot be linked with on windows.\r\n\r\n## What is the new behavior?\r\n\r\nSpecify interface_library\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose python3n.lib as libpython's interface_library (#890)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210301ac254a19ac28f6c6",
    "number": 889,
    "body": "The current aliases hardcode the bazel host os, which does not work when cross compiling.  For example, when building for linux from bazel running macos, referencing @python3_9//:libpython would reference the macos library, not the linux one.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\nI don't know this can be tested without cross compile infrastructure set up in this repo.  Existing tests should verify that it continues to work when not cross compiling.\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nThe main repository alias references only the host platform.\r\n\r\n## What is the new behavior?\r\n\r\nUsing labels from the central repository will correctly reference the python toolchain corresponding to the current target/exec platform.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No?\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Correctly reference os-specific labels from central alias repo (#889)\n\n* Correctly reference os-specific labels from central alias repo\r\n\r\nThe current aliases hardcode the bazel host os, which does not work when cross compiling.\r\n\r\n* Update toolchains_repo.bzl\r\n\r\n* fix: remove spaces from key in dict\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210302ac254a19ac28f6c7",
    "number": 887,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\nPython 2 usages of the rules will immediately fail. Examples include:\r\n\r\n```\r\npy_binary(..., python_version=\"PY2\")\r\npy_library(..., srcs_version=\"PY2\")\r\npy_runtime_pair(..., py2_runtime=\"//something\")\r\n```\r\n",
    "head_branch": "fail-py2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fail if Python 2 values are specified (#887)\n\nFail for py2 python_version, srcs_version, and runtime values.\r\n\r\nSee https://github.com/bazelbuild/rules_python/issues/886"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210303ac254a19ac28f6c8",
    "number": 881,
    "body": "We install some pip packages to bootstrap the pip_install/pip_parse rules, and these were allowing .pyc files as data deps. In some clients I observe that pip install is creating these with non-determinism and busting the python action caches. We already had a correct solution for user-installed packages, so we just need to include those entries for the built-ins.\r\n",
    "head_branch": "v0.13.0",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(determinism): copy two missing entries from data_excludes (#881)\n\nWe install some pip packages to bootstrap the pip_install/pip_parse rules, and these were allowing .pyc files as data deps.\r\nIn some clients I observe that pip install is creating these with non-determinism and busting the python action caches.\r\nWe already had a correct solution for user-installed packages, so we just need to include those entries for the built-ins."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210304ac254a19ac28f6c9",
    "number": 879,
    "body": "`conftest.py` is a special file that should be used only with tests, so we create a `py_library` for it and add it as a dependency to `py_test`. By special-casing it, we take advantage of all the dependency resolution Gazelle offers. In contrast, when adding it to a `py_test` with `# keep` and excluding it from Gazelle, we also have to manage its dependencies manually.",
    "head_branch": "f0rmiga/gazelle-conftest",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: make conftest.py special with gazelle (#879)\n\n* fix: add conftest.py to py_test generated targets\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: use separate py_library for conftest.py\r\n\r\nThis allows the conftest.py to be used on sub-directories\r\nas pytest would pick them up.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add testonly to conftest py_library\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: testonly is a boolean, not a string\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210305ac254a19ac28f6ca",
    "number": 878,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the new behavior?\r\n\r\nConfirmed Thulio to be the releaser for BCR entries.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fixed-releaser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Setup fixed releaser for Publish to BCR app (#878)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210305ac254a19ac28f6cb",
    "number": 876,
    "body": "\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nRight now the command errors out on fresh clones or after a `bazel clean`.\r\n\r\n    $ bazel run //docs:update\r\n    cp: cannot stat 'bazel-bin/docs/packaging.md_': No such file or directory\r\n    cp: cannot stat 'bazel-bin/docs/pip.md_': No such file or directory\r\n    cp: cannot stat 'bazel-bin/docs/pip_repository.md_': No such file or directory\r\n    cp: cannot stat 'bazel-bin/docs/python.md_': No such file or directory\r\n\r\nI submitted bazelbuild/stardoc#139 to fix this. @brandjon pointed out that this should just work as-is, but doesn't because of bazelbuild/bazel#15043. Until the bazel bug is addressed, we can make `//docs:update` work by pulling in the latest stardoc version.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nOne side effect of this patch is that the generated documentation itself changed a decent amount.\r\n\r\nNow the tool works again without errors even after a fresh clone or a `bazel clean`\r\n\r\n    $ bazel run //docs:update\r\n    'bazel-bin/docs/packaging.md_' -> 'docs/packaging.md'\r\n    'bazel-bin/docs/pip.md_' -> 'docs/pip.md'\r\n    'bazel-bin/docs/pip_repository.md_' -> 'docs/pip_repository.md'\r\n    'bazel-bin/docs/python.md_' -> 'docs/python.md'\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix-docs-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix //docs:update (#876)\n\nFix //docs:update\r\n\r\nAlso regenerates docs with the new stardoc version.\r\n\r\nRight now the command errors out on fresh clones or after a `bazel\r\nclean`.\r\n\r\n    $ bazel run //docs:update\r\n    cp: cannot stat 'bazel-bin/docs/packaging.md_': No such file or directory\r\n    cp: cannot stat 'bazel-bin/docs/pip.md_': No such file or directory\r\n    cp: cannot stat 'bazel-bin/docs/pip_repository.md_': No such file or directory\r\n    cp: cannot stat 'bazel-bin/docs/python.md_': No such file or directory\r\n\r\nI submitted bazelbuild/stardoc#139 to fix this. @brandjon pointed out\r\nthat this should just work as-is, but doesn't because of\r\nbazelbuild/bazel#15043. Until the bazel bug is addressed, we can make\r\n`//docs:update` work by pulling in the latest stardoc version.\r\n\r\nOne side effect of this patch is that the generated documentation\r\nitself changed a decent amount.\r\n\r\nNow the tool works again without errors even after a fresh clone or a\r\n`bazel clean`\r\n\r\n    $ bazel run //docs:update\r\n    'bazel-bin/docs/packaging.md_' -> 'docs/packaging.md'\r\n    'bazel-bin/docs/pip.md_' -> 'docs/pip.md'\r\n    'bazel-bin/docs/pip_repository.md_' -> 'docs/pip_repository.md'\r\n    'bazel-bin/docs/python.md_' -> 'docs/python.md'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210306ac254a19ac28f6cc",
    "number": 875,
    "body": "I'm the original owner of the toolchains.",
    "head_branch": "f0rmiga/codeowner-toolchains",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: add f0rmiga as codeowner for toolchains (#875)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210307ac254a19ac28f6cd",
    "number": 874,
    "body": "In chat, @hrfuller said he was willing to be set as a code owner of it.\r\n\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add hrfuller as code owner for pip_parse (#874)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210308ac254a19ac28f6ce",
    "number": 873,
    "body": " * Remove brandjon, lberki, thundergolfer; they're no longer active in the repo.\r\n * Add rickeylev as replacement owner.",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove defunct owners, add new owners (#873)\n\n* Remove brandjon, lberki, thundergolfer; they're no longer active\r\n   in the repo.\r\n * Add rickeylev as replacement owner."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210309ac254a19ac28f6cf",
    "number": 871,
    "body": null,
    "head_branch": "groodt-temp-torchvision-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210309ac254a19ac28f6d0",
    "number": 870,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThe requirements file is parsed in a python script that generates `requirements.bzl` and passes information from the file into `whl_library` called by `install_deps` within the generated file. In order to declare the wheel repositories in a bzlmod extension, we need to be able to parse that same information in Starlark.\r\n\r\n## What is the new behavior?\r\n\r\nCan parse a requirements file in Starlark which will be uses in a pip_parse bzlmod extension. This in in a similar vein to how `rules_js` parses a pnpm lockfile in starklark for the `npm_translate_lock` extension.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nThis isn't currently used, but it's a nice reviewable chunk for the bzlmod work.",
    "head_branch": "requirements-parser",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Prepare for bzlmod release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621030aac254a19ac28f6d1",
    "number": 869,
    "body": "This PR covers various updates and addition to the example.  I am writing a python tutorial much like the go [tutorial](https://bazel-contrib.github.io/SIG-rules-authors/go-tutorial.html).\r\n\r\nUpdating the WORKSPACE file and BUILD file inline documentation.  \r\nAdded new source code\r\nAdded new unit test",
    "head_branch": "example-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Various updates build_file_generation example (#869)\n\n* Various updates build_file_generation example\r\n\r\nUpdating the WORKSPACE file and BUILD file inline documentation.\r\nAdded new code and new directories for example.  Added new\r\nunit test for example.\r\nAdded license headers.\r\n\r\n* Trying to get CI to run\r\n\r\n* Updating go and gazelle version\r\n\r\n- updating gazelle version to 0.28\r\n- updating go version to 1.19.4\r\n\r\n* Getting windows to build\r\n\r\n- added requirements_windows.txt from running //:requirements.update on\r\nwindows\r\n- modified WORKSPACE and BUILD files to include different\r\nrequirements.update when running the build on Windows"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621030bac254a19ac28f6d2",
    "number": 868,
    "body": "I ran into the problem where I did not have python installed, and I did not want to install it.  Hey I use bazel! When you do not have python installed you cannot use pre-submit to configure running buildifier.  It took me forever to figure out how to run it, so I included the command in the CONTRIBUTING.md.",
    "head_branch": "contrib-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updating docs (#868)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621030cac254a19ac28f6d3",
    "number": 867,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThe existing bzlmod example does not support the latest version of Bazel.\r\n\r\n## What is the new behavior?\r\n\r\nBzlmod example uses a prerelease version of Bazel 6 and properly overrides the module path during integration testing.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "bzlmod-prefactor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update bzlmod example to use latest Bazel release  (#867)\n\nUpdate bzlmod example to use latest Bazel release"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621030dac254a19ac28f6d4",
    "number": 865,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nWhen using `pip_parse` with packages with extras, e.g. `requests[security]>=2.8.1`, it is not possible to add annotations. The `requests` package will otherwise work correctly, but trying to add an annotation to `requests` will not result in the annotation actually being applied. This is because annotations have separate logic for parsing requirements in the generated .bzl file. It would previously turn the requirement into `requests[security]` rather than just `requests` and fail to match, as just `requests` is expected.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe custom parsing logic has been changed to support extras, e.g. `requests[security]>=2.8.1`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "annotation_extras_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support annotations on pip packages with extras. (#865)\n\n* Support annotations on pip packages with extras.\r\n\r\nE.g., the following requirement:\r\n\r\n```\r\nrequests[security]>=2.8.1\r\n```\r\n\r\nThis is handled correctly by all of the other plumbing, but trying\r\nto add an annotation to `requests` will fail. This is because\r\nannotations have separate logic for parsing requirements in the\r\ngenerated .bzl file. It would previously turn the requirement into\r\n`requests[security]` rather than just `requests`.\r\n\r\n* Add test verifying that annotations work for packages with extras."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621030eac254a19ac28f6d5",
    "number": 863,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCurrent custom toolchains allow the repo path and user's local Python packages to sneak in the Python path. For instance, `sys.path` can be something like:\r\n\r\n```\r\n[\r\n  \"/home/mvukov/dev/tmp/hermetic_python\",  # The repo root.\r\n  \"/home/mvukov/.cache/bazel/_bazel_mvukov/bc9f8eb0563a76ddb0353ce7869ddf8d/execroot/hermetic_python/bazel-out/k8-fastbuild/bin/demo.runfiles\",\r\n  \"/home/mvukov/.cache/bazel/_bazel_mvukov/bc9f8eb0563a76ddb0353ce7869ddf8d/execroot/hermetic_python/bazel-out/k8-fastbuild/bin/demo.runfiles/hermetic_python\",\r\n  \"/home/mvukov/.cache/bazel/_bazel_mvukov/bc9f8eb0563a76ddb0353ce7869ddf8d/execroot/hermetic_python/bazel-out/k8-fastbuild/bin/demo.runfiles/python3_8_x86_64-unknown-linux-gnu\",\r\n  \"/home/mvukov/.cache/bazel/_bazel_mvukov/bc9f8eb0563a76ddb0353ce7869ddf8d/external/python3_8_x86_64-unknown-linux-gnu/lib/python38.zip\",\r\n  \"/home/mvukov/.cache/bazel/_bazel_mvukov/bc9f8eb0563a76ddb0353ce7869ddf8d/external/python3_8_x86_64-unknown-linux-gnu/lib/python3.8\",\r\n  \"/home/mvukov/.cache/bazel/_bazel_mvukov/bc9f8eb0563a76ddb0353ce7869ddf8d/external/python3_8_x86_64-unknown-linux-gnu/lib/python3.8/lib-dynload\",\r\n  \"/home/mvukov/.local/lib/python3.8/site-packages\",  # The user's local folder.\r\n  \"/home/mvukov/.cache/bazel/_bazel_mvukov/bc9f8eb0563a76ddb0353ce7869ddf8d/external/python3_8_x86_64-unknown-linux-gnu/lib/python3.8/site-packages\"\r\n]\r\n```\r\n\r\nwith a toolchain registered as\r\n\r\n```\r\npython_register_toolchains(\r\n    name = \"python3_8\",\r\n    # Available versions are listed in @rules_python//python:versions.bzl.\r\n    # We recommend using the same version your team is already standardized on.\r\n    python_version = \"3.8\",\r\n)\r\n```\r\n## What is the new behavior?\r\n\r\nWith the proposed fix, based on [rules_py](https://github.com/aspect-build/rules_py/blob/6c90da27ee6495f93223aa1a5602264c59cbb919/py/private/utils.bzl#L4) I created a small wrapper script for the interpreter that removes the repo root and the local folder from the path.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nI didn't look into a wrapper for Windows yet. Please let me know if this could end up in the main branch and based on that I can proceed further. An alternative could be to have an extra argument like `interpreter_flags` in `python_register_toolchains`.\r\n\r\n",
    "head_branch": "oqton/python_exe_wrapper",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621030eac254a19ac28f6d6",
    "number": 862,
    "body": "I do not think we want the bazel examples to build as part of a top-level project build.  I am adding the gazelle example to the ignore file.\r\n\r\nI could not run `bazel build //...` from the root of this project.  The projects in the examples directory contain different WORKSPACE files and we may not want these projects to build with rules_python.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\nN/A on the above\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\n\r\nRemoving an example from the top-level build.\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "adding-ignore",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621030fac254a19ac28f6d7",
    "number": 857,
    "body": "Bumping the version of Gazelle in the WORKSPACE file.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\nBoth of the above are not applicable.\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\n\r\nUpdating the version of Gazelle that is used in the example.\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nWe are using an old version\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nWe are using the current version.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "update-gazelle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updating Gazelle version in example (#857)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210310ac254a19ac28f6d8",
    "number": 855,
    "body": "Refactor CI to run examples as integration tests as separate tasks. This makes CI faster and improves the iteration experience when developing features multi-platform.",
    "head_branch": "f0rmiga/refactor-ci",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor: ci with multiple tasks (#855)\n\n* refactor: ci with multiple tasks\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: tags\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add missing integration test to CI\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: comment about Gazelle and Windows\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210311ac254a19ac28f6d9",
    "number": 854,
    "body": "Update all Go dependencies for the Gazelle extension.",
    "head_branch": "f0rmiga/update-go",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: update go dependencies (#854)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210312ac254a19ac28f6da",
    "number": 853,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nThere is currently no way to inject a dependency into a pip package.\r\n\r\nOur primary use case at Aurora for this is to inject `setuptools`\r\ndependencies to packages that don't declare them. The majority of\r\npackages assume that it's installed by default. In fact, the default\r\ntoolchain that rules_python sets up provides it for that very reason:\r\nhttps://github.com/indygreg/python-build-standalone/blob/adff2af8605b6d64946d480651d20bc0df3582a1/cpython-unix/build-cpython.sh#L700-L710\r\n\r\nThe secondary use case is to help fix non-hermetic behaviour in\r\nwheels. Additional dependencies cannot by themselves fix non-hermetic\r\nbehaviour. But together with the ability to patch the wheel, we can\r\nstart making these fixes.\r\n\r\nAt the robotics team, we currently use relative paths in our patches\r\nfor fixing non-hermetic behaviour. For example:\r\n* https://github.com/frc971/971-Robot-Code/blob/f094a81f316a619ee887f694836e6050dad4efc8/debian/python_gi_init.patch#L7\r\n* https://github.com/frc971/971-Robot-Code/blob/f094a81f316a619ee887f694836e6050dad4efc8/debian/matplotlib_init.patch#L7\r\n\r\nThis approach works, but I would like to migrate to using the Python\r\nrunfiles library to find these files instead. For that to work, I need\r\nto inject the runfiles library as an extra dependency.\r\n\r\nThe act of patching code in a wheel is out of scope for this patch. I\r\nwill open a separate discussion for how to accomplish that.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe new behaviour is that you can add a `deps` annotation for a package. This new annotation injects extra entries into the final `py_library`'s `deps` list.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "add-deps-injection",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210312ac254a19ac28f6db",
    "number": 852,
    "body": "`pip_install` is deprecated and will be removed in a future release. The example has already been updated to `pip_parse`, but the caption has not been updated yet.",
    "head_branch": "kekesh-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update `pip_install` to `pip_parse` in README.md (#852)\n\n`pip_install` is deprecated and will be removed in a future release. The example has already been updated to `pip_parse`, but the caption has not been updated yet."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210313ac254a19ac28f6dc",
    "number": 851,
    "body": "Fixes https://github.com/bazelbuild/rules_python/issues/827.",
    "head_branch": "f0rmiga/fix-python_3_8_10_x86_64-apple-darwin_test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: re-enable python_3_8_10_x86_64-apple-darwin_test (#851)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210314ac254a19ac28f6dd",
    "number": 850,
    "body": "I noticed that Ubuntu 18.04 on CI is running Python 3.6 in the host, which is EOL already. Since Ubuntu 22.04 is the current LTS, I judged that using the previous LTS (20.04 - still under support) is the best option.",
    "head_branch": "f0rmiga/bump-ubuntu-ci",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "bump: ubuntu version on CI\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210315ac254a19ac28f6de",
    "number": 849,
    "body": "I had a client yesterday who tripped on this since their requirements were in some unrelated location, so Gazelle wasn't finding the modules manifest.",
    "head_branch": "alexeagle-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clarify location of gazelle_python.yaml\n\nI had a client yesterday who tripped on this since their requirements were in some unrelated location, so Gazelle wasn't finding the modules manifest."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210316ac254a19ac28f6df",
    "number": 848,
    "body": null,
    "head_branch": "f0rmiga/bump-pre-commit-linters",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "bump: pre-commit linters (#848)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210316ac254a19ac28f6e0",
    "number": 847,
    "body": "Asserts that the expected Bazel version is in sync between `.bazelversion` and `version.bzl`.",
    "head_branch": "f0rmiga/assert-expected-bazel-version",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: assert expected bazel version (#847)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210317ac254a19ac28f6e1",
    "number": 846,
    "body": "## PR Checklist\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nMost mono repos using Bazel have the problem of needing support for multiple Python versions. Currently, there's no simple way to accomplish this.\r\n\r\n## What is the new behavior?\r\n\r\nAdd support for registering multiple Python toolchains with different versions as an opt-in feature so that users can gradually migrate portions of their mono repos to this new feature.\r\n\r\nUsing load statements to override `py_binary` and `py_test`, this feature implementation also plays well with the Gazelle extension by using Gazelle's `# gazelle:map_kind from_kind to_kind to_kind_load` feature. Also, pure Python libraries can take advantage of this by testing against multiple Python versions in the same BUILD file (see examples).\r\n\r\nThis feature is achieved by using platform transitions behind the scenes.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information",
    "head_branch": "f0rmiga/multi-python-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: multi-toolchain support (#846)\n\n* feat: multi-toolchain support\r\n\r\nThis adds support for multiple Python versions on the same Bazel\r\nworkspace.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: cross-version testing\r\n\r\nA py_test using 3.10 runs a py_binary using 3.9.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: error message\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* doc: add link to bazelbuild/bazel PR fixing expand_location\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: set environment variables for py_binary too\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* test: extra case for default version taking another version\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: fail if args attribute is set\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: remove confusing output with same target name\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: buildifier\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* revert: use testing.TestEnvironment\r\n\r\nSee comment in code for the reasons.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: linting issues\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: black linter\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: move tests to a sub-dir\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: add multi_pip_parse\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add missing aliases\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: use requirement function in example\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: deleted packages\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: update generated docs\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: version checking of the rule is already done by other tests\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add python_interpreter_target to multi_pip_parse\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: windows\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: unify py_test and py_binary transition impls\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: test compatible with all platforms\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* rebase: adjust multi_python_versions on ci\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: use usr flags instead of platforms in transition\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: rename rule -> rule_impl\r\n\r\nThis avoids confusion with the global `rule`\r\nhttps://bazel.build/rules/lib/globals#rule.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: reduce repetition of args\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: missing test and binary-specific attributes\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add srcs and deps attrs for path expansion\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: missing bazel_skylib on integration tests\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: use ctx.target_platform_has_constraint over select\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* doc: why symlink <name>.zip under Windows\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: apply suggestions from code review\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: use incoming edge transitions\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: use RunEnvironmentInfo when available\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: cfg should be target not exec\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210318ac254a19ac28f6e2",
    "number": 844,
    "body": "Move construction of the METADATA (except appending description) file from wheelmaker to .bzl to avoid passing possibly unicode data on the commandline, which causes issues on windows an RBE due to UTF-16 vs UTF-8 confusion.\r\n\r\nAlso fix some wrong attribute descriptions.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n\r\n## What is the current behavior?\r\nWheels built on windows or RBE have mangled unicode data\r\n\r\n## What is the new behavior?\r\nWheels built on windows or RBE are identical to those created on other unixes.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move construction of the METADATA file from wheelmaker to .bzl (#844)\n\n* Move construction of the METADATA file (except for appending description)\r\nfrom wheelmaker to .bzl to avoid passing possibly unicode data on the commandline,\r\nwhich causes issues on windows an RBE due to UTF-16 vs UTF-8 confusion.\r\n\r\nAlso fix some wrong attribute descriptions.\r\n\r\n* Regenerated docs. Buildifier fixes.\r\n\r\n* Another missing docs update.\r\n\r\n* Fix tests: all platforms should produce identical wheels.\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210319ac254a19ac28f6e3",
    "number": 842,
    "body": "Reverts bazelbuild/rules_python#837",
    "head_branch": "revert-837-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert \"Use bazel 5.3.1\" (#842)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031aac254a19ac28f6e4",
    "number": 840,
    "body": "Reverts bazelbuild/rules_python#837",
    "head_branch": "revert-837-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031aac254a19ac28f6e5",
    "number": 839,
    "body": "Bumps the bazel version to be up to date\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031bac254a19ac28f6e6",
    "number": 838,
    "body": "Fix for issue #833 ",
    "head_branch": "groodt-json-struct",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Use json.encode(<struct>) (#838)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031cac254a19ac28f6e7",
    "number": 837,
    "body": "CI uses latest bazel it appears so it makes sense to specify the newest version here as well.\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use bazel 5.3.1 (#837)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031dac254a19ac28f6e8",
    "number": 836,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nCannot load dependencies via bzlmod.\r\n\r\n## What is the new behavior?\r\n\r\nComplete bzlmod support.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nThis is in progress.",
    "head_branch": "bzlmod",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031eac254a19ac28f6e9",
    "number": 835,
    "body": "Otherwise you can see this warning:\r\n\r\n```\r\nDEBUG: Rule 'python3_9_aarch64-apple-darwin' indicated that a canonical reproducible form can be obtained by dropping arguments [\"ignore_root_user_error\"]\r\nDEBUG: Repository python3_9_aarch64-apple-darwin instantiated at:\r\n  /Users/ksmiley/dev/lyft/ios4/WORKSPACE:113:27: in <toplevel>\r\n  /private/var/tmp/_bazel_ksmiley/c921e5b09fe02de914188528345349ce/external/rules_python/python/repositories.bzl:366:26: in python_register_toolchains\r\nRepository rule python_repository defined at:\r\n  /private/var/tmp/_bazel_ksmiley/c921e5b09fe02de914188528345349ce/external/rules_python/python/repositories.bzl:269:36: in <toplevel>\r\n```",
    "head_branch": "ks/include-ignore_root_user_error-in-repository_rule-keys",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Include ignore_root_user_error in repository_rule keys (#835)\n\nOtherwise you can see this warning:\r\n\r\n```\r\nDEBUG: Rule 'python3_9_aarch64-apple-darwin' indicated that a canonical reproducible form can be obtained by dropping arguments [\"ignore_root_user_error\"]\r\nDEBUG: Repository python3_9_aarch64-apple-darwin instantiated at:\r\n  /Users/ksmiley/dev/lyft/ios4/WORKSPACE:113:27: in <toplevel>\r\n  /private/var/tmp/_bazel_ksmiley/c921e5b09fe02de914188528345349ce/external/rules_python/python/repositories.bzl:366:26: in python_register_toolchains\r\nRepository rule python_repository defined at:\r\n  /private/var/tmp/_bazel_ksmiley/c921e5b09fe02de914188528345349ce/external/rules_python/python/repositories.bzl:269:36: in <toplevel>\r\n```\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031eac254a19ac28f6ea",
    "number": 832,
    "body": "`py_proto_library` was tested manually on Bazel repository using Bazel 6.0.0 with and without using bzlmod.\r\n\r\nExtend README.md to mention also `py_proto_library`.\r\n\r\nWith bzlmod `py_proto_library` just works. Users without bzlmod, need to import `rules_proto` and `protobuf` repositories into their `WORKSPACE` file. \r\n\r\n`py_proto_library` is compatible with Bazel `>=5.4.0` and `>=6.0.0`.",
    "head_branch": "add-py_proto_library",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Implement py_proto_library (#832)\n\n* Add py_proto_library\r\n\r\n* Bump versions of rules_proto and protobuf\r\n\r\n* Update documentation\r\n\r\n* Bump rules_pkg version"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621031fac254a19ac28f6eb",
    "number": 831,
    "body": "That would typically be LICENSE or similar files.\r\n\r\nFixes issue #828.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n\r\n## What is the current behavior?\r\nCustom files can't be added to dist-info directory in the wheel\r\nIssue Number: 828\r\n\r\n\r\n## What is the new behavior?\r\nAllows custom files to be added to dist-info directory in the wheel.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "issue828",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow extra files to be added to distinfo directory within the wheel. (#831)\n\n* Allow extra files to be added to distinfo directory within the wheel.\r\n\r\nThat would typically be LICENSE or similar files.\r\n\r\nFixes issue #828.\r\n\r\nCo-authored-by: Greg Roodt <groodt@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210320ac254a19ac28f6ec",
    "number": 830,
    "body": "…test`\r\n\r\n\r\nSee https://github.com/bazelbuild/rules_python/issues/827\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "meteorcloudy-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Disable `//python/tests/toolchains:python_3_8_10_x86_64-apple-darwin_… (#830)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210321ac254a19ac28f6ed",
    "number": 829,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nWe generate the `requirements_in` file from various input files roughly like so:\r\n\r\n    genrule(\r\n        name = \"generate_3.7_x86_requirements\",\r\n        srcs = [\r\n            \"requirements_base.in.txt\",\r\n            \"requirements_extra_37.in.txt\",\r\n        ],\r\n        outs = [\"requirements_3.7_x86.txt\"],\r\n        cmd = \"cat $(SRCS) > $(OUTS)\",\r\n    )\r\n\r\n    compile_pip_requirements(\r\n        name = \"compile_requirements_3.7_x86\",\r\n        requirements_in = \":requirements_3.7_x86.txt\",\r\n        requirements_txt = \"requirements_3.7_x86.lock.txt\",\r\n    )\r\n\r\nThe current code errors out with a message like this:\r\n\r\n    Updating common/python/requirements_3.7_x86.lock.txt\r\n    Usage: pip_compile.py [OPTIONS] [SRC_FILES]...\r\n    Try 'pip_compile.py -h' for help.\r\n\r\n    Error: Invalid value for '[SRC_FILES]...': Path 'common/python/requirements_3.7_x86.txt' does not exist.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis patch here fixes the issue by resolving the `requirements_in` path\r\nbefore the tool `cd`s into the workspace directory.\r\n\r\nThe downside is that the output of `pip` still contains the fully resolved\r\npaths on the terminal output. You'll see them in the following example.\r\n\r\n    $ cd examples/pip_parse\r\n    $ bazel run //:requirements.update\r\n\r\nThe console output will contain the full paths, but the saved\r\n`requirements_lock.txt` file will not. I could not think of a good way to\r\nalso fix up `pip`'s console output.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix-generated-requirements-in",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow requirements_in to be generated (#829)\n\n* Allow requirements_in to be generated\r\n\r\nWe generate the `requirements_in` file from various input files\r\nroughly like so:\r\n\r\n    genrule(\r\n        name = \"generate_3.7_x86_requirements\",\r\n        srcs = [\r\n            \"requirements_base.in.txt\",\r\n            \"requirements_extra_37.in.txt\",\r\n        ],\r\n        outs = [\"requirements_3.7_x86.txt\"],\r\n        cmd = \"cat $(SRCS) > $(OUTS)\",\r\n    )\r\n\r\n    compile_pip_requirements(\r\n        name = \"compile_requirements_3.7_x86\",\r\n        requirements_in = \":requirements_3.7_x86.txt\",\r\n        requirements_txt = \"requirements_3.7_x86.lock.txt\",\r\n    )\r\n\r\nThe current code errors out with a message like this:\r\n\r\n    Updating common/python/requirements_3.7_x86.lock.txt\r\n    Usage: pip_compile.py [OPTIONS] [SRC_FILES]...\r\n    Try 'pip_compile.py -h' for help.\r\n\r\n    Error: Invalid value for '[SRC_FILES]...': Path 'common/python/requirements_3.7_x86.txt' does not exist.\r\n\r\nThis patch here fixes the issue by resolving the `requirements_in`\r\npath before the tool `cd`s into the workspace directory.\r\n\r\n* Make tests pass\r\n\r\n* Run black\r\n\r\n* Fix some runtime problems\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210322ac254a19ac28f6ee",
    "number": 826,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\n\r\nLinux's requirement file is not found by pip_compile select_golden_requirements_file function. Common requirement.txt is used as default causing test to fail. \r\n\r\n## What is the new behavior?\r\n\r\nBy fixing select_golden_requirements_file arguments order at invocation, the configuration file is found.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "fix-pip-compile-golden-requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix pip_compile pip_compile select_golden_requirements_file invocation arguments (#826)\n\nfix arguments order"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210323ac254a19ac28f6ef",
    "number": 825,
    "body": ".pyc files are not hermetic and ruin hashes for remote-caching. Observed with pypi__pip and pypi__setuptools\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ X ] Bugfix\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nThe `py_library()`ies created by `pip_install_requirements()` have checksums for `.pyc` files included. These files don't match from one install to the next, and because they are build inputs they guarantee a `remote-cache` miss.\r\n\r\nI noticed this because the `requirements_test` target that's set up by `compile_pip_requirements()` is never a cache hit in my CI pipeline.\r\n\r\nRunning bazel with `--execution_log_json_file=` allowed me to debug. When run twice on the same machine with a remote-cache, even with a `bazel clean` in between still yields a cache hit.\r\n\r\nBut when running bazel on 2 different executors (docker containers), then diffing the runs yields only file hash changes:\r\n```diff\r\n--- exec1.json  2022-09-12 15:29:38.000000000 +0900\r\n+++ exec1-1.json        2022-09-12 15:34:03.000000000 +0900\r\n@@ -2343,21 +2343,21 @@\r\n   }, {\r\n     \"path\": \"external/pypi__pip/pip/_internal/utils/__pycache__/compat.cpython-310.pyc\",\r\n     \"digest\": {\r\n-      \"hash\": \"72f8ee456dd18c7b6b370e7705c1f4a254b56e9291182cf40445e2be6fbd0ef5\",\r\n+      \"hash\": \"6691abe643cd9e5aae626749720fa8c49d2b3bb3ed3e653e3a90378336b096ad\",\r\n       \"sizeBytes\": \"1534\",\r\n       \"hashFunctionName\": \"SHA-256\"\r\n     }\r\n   }, {\r\n     \"path\": \"external/pypi__pip/pip/_internal/utils/__pycache__/compat.cpython-39.pyc\",\r\n     \"digest\": {\r\n-      \"hash\": \"d1933621a8710b6b017e6b8c6516e81bf5c99a5f22e2aaac45161f13e5b9a501\",\r\n+      \"hash\": \"0078e3ce171c2162f656db8fe2b40bcfc27ae6d076f6194366ae85b027fd1603\",\r\n       \"sizeBytes\": \"1535\",\r\n       \"hashFunctionName\": \"SHA-256\"\r\n     }\r\n   }, {\r\n     \"path\": \"external/pypi__pip/pip/_internal/utils/__pycache__/compatibility_tags.cpython-310.pyc\",\r\n     \"digest\": {\r\n-      \"hash\": \"6b7d2b0c22492c289a93fbc34e11fea1f4c8941916b314074e515af2f0063ace\",\r\n+      \"hash\": \"7854acaf76bb430d0e57dcc878824114b5fcf1f44735c129bdcfc85298d82b0a\",\r\n       \"sizeBytes\": \"4103\",\r\n       \"hashFunctionName\": \"SHA-256\"\r\n     }\r\n...\r\n```\r\n\r\nIt seems to only include hashes from `pypi__pip` and `pypi__setuptools`.\r\n\r\n## What is the new behavior?\r\n\r\nWith my patch applied, the remote-cache is a hit on differing CI executors when previously it was not.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ X ] No\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix-pyc-hash-inclusion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210323ac254a19ac28f6f0",
    "number": 820,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #796 \r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis allows rust library targets that utilize `pyo3` to correctly be able to include `libpythonX.Y.so` via depending on `@python//:libpython`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cc_library_libpython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix: replace cc_import with cc_library for libpython (#820)\n\nReplace cc_import with cc_library for libpython\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210324ac254a19ac28f6f1",
    "number": 817,
    "body": "Fixes https://github.com/bazelbuild/rules_python/issues/802\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n\r\nI think this doesn't apply here, but LMK if there's something you want me to do.\r\n\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\nDitto\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nManifest test timeout is not set. Whatever it defaults to is too long, at least for my manifests, and bazel complains.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/802\r\n\r\n## What is the new behavior?\r\n\r\nmanifest test timeout is set to \"short\"\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\nIn theory if someone's manifest test takes too long to run, this could break them.\r\nIn practice this seems very unlikely.\r\nLMK if you want me to make this an option instead.\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "gazelle-manifest-test-timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "specify timeout for gazelle manifest test (#817)\n\nFixes https://github.com/bazelbuild/rules_python/issues/802\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210325ac254a19ac28f6f2",
    "number": 816,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: closes https://github.com/bazelbuild/rules_python/issues/521\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add CI job for RBE."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210326ac254a19ac28f6f3",
    "number": 815,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [X] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nPython toolchain tests did not include the rules_python distribution directly in the tests, and so bazel could cache a toolchain test result even if the toolchain bzl files changed. This could mean that toolchain bugs could be introduced but CI would pass because the tests were cached and did not run.\r\n\r\nIssue Number: #806 \r\n\r\n\r\n## What is the new behavior?\r\nAdd the rules_python distribution to the test files/runfiles so that bazel can detect changes in the bzl files and invalidate the\r\ntest cache. Therefore CI should correctly catch test failures.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "toolchain-test-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add .bzl files explicitly to toolchain tests to detect .bzl file changes (#815)\n\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210327ac254a19ac28f6f4",
    "number": 814,
    "body": "Generate alias packages and targets for `pip_parse` under the parent repository. This serves two purposes. It allows for users to reference packages using a simpler `@pypi//package_name` without the import issues associated with putting the contents of the package there (as may be the case with `pip_install` following this naming pattern). Additionally, this allows users to override individual libraries either by default or based on select statements.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nCurrently, in order to refer to a dependency by name with `pip_parse` one must use the syntax `@pypi_package_name//:pkg`.  It it also not currently possible to override the dependencies of pip repositories using local packages or those built with Bazel. The only workaround available now is to define a repository (e.g., `@pypi_package_name` prior to calling `pip_parse`. This is not ideal, and does not allow for selecting a version to use (e.g., local vs. from pip) via flags.\r\n\r\n## What is the new behavior?\r\n\r\nThe alias packages add the option to refer to dependencies under one central repository using the syntax `@pypi//package_name`.  Additionally, it allows users to override the library targets by default or using any valid select statement. \r\n\r\nNote that the original names (e.g., `@pypi_package_name//:pkg`) remain unmodified, as do all functions in `requirements.bzl`. The only exception is to `all_requirements`, which now uses the aliases instead. Happy to adjust this behavior as desired, my primary usage is `@pypi//package_name` and a few interactive targets that use `all_requirements`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nI originally was working on a version which made the creation of alias packages optional (and disabled by default). After trying to profile both with and without the alias repositories I could not find any measurable difference so I got rid of the option entirely.\r\n\r\nI've refactored the existing tests to work with these changes and added some notes to the `pip_parse` example, but I'd also be happy to add additional tests if need be.",
    "head_branch": "corypaik/feat-pip-parse-alias-generation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210328ac254a19ac28f6f5",
    "number": 813,
    "body": "When invoking the update rule on `gazelle_python_manifest`\r\nthe output generated to `gazelle_python.yaml` mapping file \r\nis not deterministic.\r\nThis non-determinism causes the test rule for `gazelle_python_manifest`\r\nto always fail. \r\nThis patch fixes the bug by sorting the keys before writing it to the\r\nmapping file, making the output deterministic\r\n\r\nTest Plan: Existing unit tests to verify the output\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/812\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/812\r\n\r\n\r\n## What is the new behavior?\r\nSee commit summary\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "issue_812",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make gazelle_python_manifest output deterministic (#813)\n\n* Make gazelle_python_manifest output deterministic\r\n\r\nFixes 812\r\n\r\n* address review comments\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210328ac254a19ac28f6f6",
    "number": 811,
    "body": "Reverts bazelbuild/rules_python#808 to reintroduce #773\r\n\r\nSummary:\r\n1. https://github.com/bazelbuild/rules_python/pull/773 (Merged)\r\n2. https://github.com/bazelbuild/rules_python/pull/808 (Reverted)\r\n3. https://github.com/bazelbuild/rules_python/pull/811 (Reintroduce code from 1)\r\n\r\ncc @jesseschalken @f0rmiga ",
    "head_branch": "revert-808-revert-773-cross-platform-wheel-download",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Revert \"Add option to use \"pip download\" instead of \"pip wheel\" to do…\" (#811)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210329ac254a19ac28f6f7",
    "number": 810,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe: `revert the revert`\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis reverts commit 4999f631c2af4483008039032dc7aacdcb82ec90.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621032aac254a19ac28f6f8",
    "number": 809,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThis PR fixes the current breakage on some platforms when building packages from sdist artifacts. \r\n\r\nThis change is an extension of https://github.com/bazelbuild/rules_python/pull/803 but applies part of the change to MacOS hosts to Linux hosts as well.\r\n\r\nIssue Number:\r\n- Includes https://github.com/bazelbuild/rules_python/pull/803 (Thank you @illicitonion!)\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAdds the correct import path to be able to find `Python.h`\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cppflags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing python includes for Unix hosts (#809)\n\n* Fix missing python includes for Unix hosts\r\n\r\n* Update python/pip_install/pip_repository.bzl\r\n\r\nCo-authored-by: Greg Roodt <groodt@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621032bac254a19ac28f6f9",
    "number": 808,
    "body": "…wnload wheels for other platforms (#773)\"\r\n\r\nThis reverts commit 6a43ebd6e4d8a11aaa5c303e7b03c72a136f62a0.\r\n\r\n<hr />\r\n\r\nExploring if this PR is causing main to fail. See: https://buildkite.com/bazel/rules-python-python/builds/3242#0182dec5-050b-4fa3-9506-5e606ad0c4e1\r\n\r\nUpdate: Reverting this PR will fix main. I think I should have updated the PR branch before merging because it was a bit old (25 days).\r\n\r\n",
    "head_branch": "revert-773-cross-platform-wheel-download",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"Add option to use \"pip download\" instead of \"pip wheel\" to do… (#808)\n\nRevert \"Add option to use \"pip download\" instead of \"pip wheel\" to download wheels for other platforms (#773)\"\r\n\r\nThis reverts commit 6a43ebd6e4d8a11aaa5c303e7b03c72a136f62a0."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621032cac254a19ac28f6fa",
    "number": 807,
    "body": "Less extreme version of the proposal outlined here:\r\nhttps://github.com/bazelbuild/rules_python/pull/757\r\n\r\n<hr />\r\n\r\n# What is changing?\r\nThis PR standardises on `pip_parse` behaviour as the only mechanism for installation of 3rd-party python packages. The internals of `pip_install` have been changed to use `pip_parse` behind the scenes, with a small compatibility shim over rule attribute names to ensure minimal disruption to any existing users of `pip_install`.\r\n\r\n# Why is it changing?\r\nHistorically, we had 2 rules to install packages from PyPI (pip_install and pip_parse), with pip_install being the original. It worked well, but had a significant flaw in that it would eagerly fetch and install all packages. This was slow and frustrating when there were a large number of dependencies, so pip_parse was born!\r\n\r\npip_parse (even though it is still a repository rule) lazily fetched and installed packages. This was adopted by most of the community based on evidence from issues raised, the bazel Slack channels and the rule maintainers.\r\n\r\nMaintaining both versions should no longer be necessary. There is a lot of duplication in both versions and it requires extra effort and time. This increases maintenance burden and significantly slows progress to improve the rules.\r\n\r\n# Breaking Changes:\r\n\r\n* A small breaking change in this PR, will be for users (probably a small number) who still use a pip_install version prior to this PR and who DO NOT use the requirement() macro to reference dependencies. The naming style of the external repositories has changed, so this will require a sed across any .bazel files if these users upgrade. This isn't a big deal in my opinion.\r\n* Users of `pip_install` will need to add the calls as you do with `pip_parse` e.g.\r\n```\r\nload(\"@pip//:requirements.bzl\", \"install_deps\")\r\n\r\ninstall_deps()\r\n```\r\n\r\n",
    "head_branch": "groodt-only-pip-parse",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Standardise on pip_parse (#807)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621032dac254a19ac28f6fb",
    "number": 805,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nFor python 3.8.10 on macos there is a Python directory in the python static archive. This conflicts with the symlink added in #782. Note that bazel \"incorrectly\" caches the repository tests so they may not run if the test code itself didn't change even if the repository rules do.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nDelete python directory/file before creating a symlink and tests pass.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nWe should look to ensure that repository integration tests aren't incorrectly cached for the toolchain in CI.\r\n",
    "head_branch": "rm-Python",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621032dac254a19ac28f6fc",
    "number": 804,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nA system installed python interpreter is required.\r\n\r\nIssue Number: #691\r\n\r\n\r\n## What is the new behavior?\r\nIt is possible to avoid a system install python interpreter by setting `hermetic_stub_shebang=True`\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n## Other information\r\n\r\nExtend the explanation (and added a warning) in ./README.md. A test is also added for every combination.",
    "head_branch": "stub-shebang",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621032eac254a19ac28f6fd",
    "number": 803,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n\r\n\r\n## What is the current behavior?\r\n\r\nWhen compiling pypi wheels, the rules do not set the correct includes on darwin-arm64. In our case we tried using the psutil package. And got the following error in [this repro](https://github.com/blorente/standalone-repros/blob/bd265700787101a8045bc6fad7aa757c5c25629d/BUILD.bazel#L4):\r\n\r\n```console\r\n$ bazel build :main\r\n[...]\r\nFailed to build psutil\r\n (  error: subprocess-exited-with-error\r\n\r\n  × Building wheel for psutil (pyproject.toml) did not run successfully.\r\n  │ exit code: 1\r\n  ╰─> [50 lines of output]\r\n      running bdist_wheel\r\n      running build\r\n      running build_py\r\n      creating build\r\n      creating build/lib.macosx-11.0-arm64-cpython-310\r\n      creating build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_pswindows.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_common.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/__init__.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_psosx.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_psbsd.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_psaix.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_pslinux.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_compat.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_psposix.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      copying psutil/_pssunos.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil\r\n      creating build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_contracts.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_connections.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/runner.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_misc.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_posix.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_linux.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_sunos.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/__init__.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_aix.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_process.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_bsd.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_system.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_osx.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_memleaks.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_windows.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/__main__.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/foo.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      copying psutil/tests/test_testutils.py -> build/lib.macosx-11.0-arm64-cpython-310/psutil/tests\r\n      running build_ext\r\n      building 'psutil._psutil_osx' extension\r\n      creating build/temp.macosx-11.0-arm64-cpython-310\r\n      creating build/temp.macosx-11.0-arm64-cpython-310/psutil\r\n      creating build/temp.macosx-11.0-arm64-cpython-310/psutil/arch\r\n      creating build/temp.macosx-11.0-arm64-cpython-310/psutil/arch/osx\r\n      Compiling with an SDK that doesn't seem to exist: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk\r\n      Please check your Xcode installation\r\n      clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -arch arm64 -mmacosx-version-min=11.0 -Wno-nullability-completeness -Wno-expansion-to-defined -Wno-undef-prefix -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk -fPIC -I/var/folders/nx/g31mzz4d2mx2t4fsl1dwhycc0000gn/T/tmps98q1tpw/tools/deps/include -I/var/folders/nx/g31mzz4d2mx2t4fsl1dwhycc0000gn/T/tmps98q1tpw/tools/deps/include/ncursesw -I/var/folders/nx/g31mzz4d2mx2t4fsl1dwhycc0000gn/T/tmps98q1tpw/tools/deps/include/uuid -Werror=unguarded-availability-new -g0 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DPSUTIL_POSIX=1 -DPSUTIL_SIZEOF_PID_T=4 -DPSUTIL_VERSION=591 -DPSUTIL_OSX=1 -I/install/include/python3.10 -c psutil/_psutil_common.c -o build/temp.macosx-11.0-arm64-cpython-310/psutil/_psutil_common.o\r\n      psutil/_psutil_common.c:9:10: fatal error: 'Python.h' file not found\r\n      #include <Python.h>\r\n               ^~~~~~~~~~\r\n      1 error generated.\r\n      error: command '/usr/bin/clang' failed with exit code 1\r\n      [end of output]\r\n\r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\n  ERROR: Failed building wheel for psutil\r\nERROR: Failed to build one or more wheels\r\nTraceback (most recent call last):\r\n  File \"/private/var/tmp/_bazel_xxx/yyy/external/python3_10_aarch64-apple-darwin/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/private/var/tmp/_bazel_xxx/yyy/external/python3_10_aarch64-apple-darwin/lib/python3.10/runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/private/var/tmp/_bazel_xxx/yyy/external/rules_python/python/pip_install/extract_wheels/extract_single_wheel.py\", line 81, in <module>\r\n    main()\r\n  File \"/private/var/tmp/_bazel_xxx/yyy/external/rules_python/python/pip_install/extract_wheels/extract_single_wheel.py\", line 57, in main\r\n    subprocess.run(pip_args, check=True, env=env)\r\n  File \"/private/var/tmp/_bazel_xxx/yyy/external/python3_10_aarch64-apple-darwin/lib/python3.10/subprocess.py\", line 524, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['/private/var/tmp/_bazel_xxx/yyy/external/python3_10_aarch64-apple-darwin/bin/python3', '-m', 'pip', '--isolated', 'wheel', '--no-deps', '--index=https://pypi.apple.com/simple', '--index-url', 'https://pypi.apple.com/simple', '--index-url', 'https://pypi.apple.com/simple', '-r', '/var/folders/0l/nfqx5j4j08dg3s3nwx51vqjw0000gn/T/tmpslxj3627']' returned non-zero exit status 1.\r\n)\r\n```\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAdds the correct import path to be able to find `Python.h`\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No",
    "head_branch": "fix-compile-cc-on-m1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621032fac254a19ac28f6fe",
    "number": 797,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nrelates to https://github.com/bazelbuild/rules_python/pull/769\r\n\r\nCurrently a `fail` message prevents downloading a windows toolchain on a case sensitive unix host.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nToolchains can now be downloaded.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "case",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix ability to download windows toolchains on case sensitive unix systems (#797)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210330ac254a19ac28f6ff",
    "number": 794,
    "body": "…ated requirements.txt (#690)\"\r\n\r\nThis reverts commit aef17ad72919d184e5edb7abf61509eb78e57eda.\r\n\r\nFixes #766\r\n",
    "head_branch": "revert_690",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"pip_compile: remove external/workspace_name prefix from gener… (#794)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210331ac254a19ac28f700",
    "number": 791,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nThe progress message for `py_wheel` is pretty generic and it makes logs less useful.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis change adds the label to the progress message so developers can quickly identify what's being built.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "wheel-prog",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added label to py_wheel progress message. (#791)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210331ac254a19ac28f701",
    "number": 790,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [x] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/509 (related but this PR does not close this)\r\n\r\nIt seems not all contributors have commit hooks setup. This change was caught when I tried to make a separate change.\r\n\r\n## What is the new behavior?\r\nThis change is only formatting.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ran black and isort to fix files missed by commit hook (#790)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210332ac254a19ac28f702",
    "number": 789,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: closes https://github.com/bazelbuild/rules_python/issues/745\r\n\r\n\r\n## What is the new behavior?\r\nThis fixes broken packages produced by `py_wheel`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "record",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix leading forward slashes in RECORD files produced by `py_wheel`. (#789)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210333ac254a19ac28f703",
    "number": 787,
    "body": "Provides a somewhat useful target as the \"default\" target for the macro, that is, the target that is the actual name of the macro. \r\n\r\nHaving this is incredibly useful when attempting to do static analysis of BUILD files to determine targets, but where those targets are macros and don't expand to a target with the given name it causes issues with any further bazel processing of that target (as it doesn't exist!). \r\n\r\nWhile there are workarounds, it seems sane and good practice to simply provide a target with that name.",
    "head_branch": "feat/gazelle_python_manifest_has_a_default_target_that_makes_query_better",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat(gazelle_python_manifest): provide a target with the given name (#787)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210334ac254a19ac28f704",
    "number": 785,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\nThe following tests were added automatically:\r\n\r\n//python/tests/toolchains:python_3_10_6_aarch64-unknown-linux-gnu_test\r\n//python/tests/toolchains:python_3_10_6_x86_64-apple-darwin_test\r\n//python/tests/toolchains:python_3_10_6_x86_64-pc-windows-msvc_test\r\n//python/tests/toolchains:python_3_10_6_x86_64-unknown-linux-gnu_test\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\nAdds Python version 3.10.6 and updates 3.10 to reference 3.10.6 (from 3.10.4)\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nPython 3.10.6 isn't available in rules_python\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf a user references 3.10 this would update that user from 3.10.4 to 3.10.6, but I don't think that should be a breaking change.\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "add-python-3.10.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210334ac254a19ac28f705",
    "number": 784,
    "body": "Since https://github.com/bazelbuild/rules_python/pull/587 we just distribute the whole source archive from GitHub",
    "head_branch": "stardoc",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210335ac254a19ac28f706",
    "number": 782,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThe python repository interpreter target is different for each platform\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAdds a consitent `:python` target that symlinks to the interpreter.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a consistent `python` interpreter symlink (#782)\n\nWhen a Python repository is created, there is a difference between Unix/Windows for the path to the python interpreter.\r\n\r\nThis patch adds a symlink from the platform specific path to the interpreter.\r\n\r\nThis means that on either platform the `:python` target will always point to the interpreter."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210336ac254a19ac28f707",
    "number": 781,
    "body": "## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nYou cannot run the `compile_pip_requirements.update` target with a Python interpreter at a version < 3.8 - it will fail on importing `importlib_metadata` in the `build` package\r\n\r\n## What is the new behavior?\r\nYou can run the `compile_pip_requirements.update` target with a Python interpreter at a version < 3.8 \r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n## Other information\r\n\r\nI could see a scenario where part of the setup instructions involve telling the user to produce a lockfile for `pip-compile` from their local env, but it's probably just easier to package up all the reqs for any version.",
    "head_branch": "asaf.add_importlib",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added importlib + reqs to pip-compile for python < 3.8 (#781)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210337ac254a19ac28f708",
    "number": 779,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\nUpdates the Python toolchain versions for 3.8.13, 3.9, and 3.10. Adds 3.9.13 and 3.10.6. The `install_only` archives of 3.8.13, 3.9.13, and 3.10.6 are smaller than before, because the static libpython libraries and tests for the stdlib itself are removed from the archives. This is essentially equivalent to what we do in #758, but now in the python-build-standalone side. We can remove our own filtering introduced in #758 once the support of earlier versions than 3.8.13, 3.9.13, and 3.10.6 is dropped.\r\nFor details of the toolchain side changes, see https://github.com/indygreg/python-build-standalone/releases/tag/20220802.\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nFor 3.9, 3.9.12 is installed.\r\nFor 3.10, 3.10.4 is installed.\r\n\r\n## What is the new behavior?\r\n\r\nFor 3.9, 3.9.13 is installed.\r\nFor 3.10, 3.10.6 is installed.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\nWhen user sets `python_version = \"3.9\"` in `python_register_toolchains`, 3.9.13 is installed.\r\nWhen user sets `python_version = \"3.10\"` in `python_register_toolchains`, 3.10.6 is installed.\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "update-tool-versions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update Python minor toolchain versions to allow smaller Python binaries (#779)\n\nUpdate Python minor toolchain versions to allow smaller Python toolchains\r\n\r\nCo-authored-by: Matt Mackay <mattem@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210338ac254a19ac28f709",
    "number": 778,
    "body": "Under bazel 5 this unused entry is okay, but with Bazel 6 you get an error\r\n\r\nERROR: Analysis of target '//:bzlmod' failed; build aborted: module extension \"pip_install\" from \"@@rules_python~override//python:extensions.bzl\" does not generate repository \"pypi__pkginfo\", yet it is imported as \"pypi__pkginfo\" in the usage at rules_python@_/MODULE.bazel:7:28\r\n\r\nThis was detected on BCR which runs against latest bazel, so I had to\r\nmake this change there already:\r\nhttps://github.com/bazelbuild/bazel-central-registry/commit/6e1bf0e63008fff663da70ae96cf1425c568fa31#diff-d133485c86e1650c9910643274be2051f2c714042c59de22b4c3fd6e546bd93c\r\n",
    "head_branch": "unused",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: remove pkginfo from bzlmod file (#778)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210338ac254a19ac28f70a",
    "number": 776,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nThere's currently a warning in the `//examples/wheel` package:\r\n```\r\nWARNING: /Users/user/Code/rules_python/examples/wheel/BUILD:43:8: output 'examples/wheel/someDir' of //examples/wheel:gen_dir is a directory; dependency checking of directories is unsound\r\n```\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe changes here fix the warning by implementing a rule to properly create the desired inputs to the examples.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "unsound",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210339ac254a19ac28f70b",
    "number": 774,
    "body": "Updates pip from 22.1.2 to 22.2.1. See [Changelog](https://pip.pypa.io/en/stable/news/#v22-2-1). This version is backwards compatible and no new functionality is introduced to the rules.\r\n\r\n<hr />\r\n\r\nSomething to keep an eye on is that an experimental feature has been added to prepare an \"installation report\".\r\n`pip install --dry-run --ignore-installed --report`\r\n\r\nThis approximates lock-file-like functionality, however, the maintainers explicitly mention that it is not intended to be a lock-file and it is experimental functionality. Even so, it may enable us to remove a dependency on `pip-tools` at some stage. This would be nice because it could eventually strip the rules back to only the Python standard library and pip. Or it could become the bones of a custom resolver.\r\n",
    "head_branch": "groodt-bump-pip",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      ". (#774)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621033aac254a19ac28f70c",
    "number": 773,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nRunning `pip_parse` or `whl_library` on Linux with a `requirements.txt` for Windows downloads the Linux instead of the Windows version of wheels.\r\n\r\nAdding `extra_pip_args = [\"--platform\", \"win_amd64\"]` doesn't work because `--platform` isn't a valid flag for `pip wheel`.\r\n\r\nIn the case that all pip dependencies are available as precompiled wheels, `pip download` can be used instead, which accepts the `--platform` flag.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAdd a new option `download_only` to `pip_parse` and `whl_library` to allow using `pip download` instead of `pip wheel` so that wheels for platforms other than the host platform can be downloaded by adding `--platform ...` to `extra_pip_args`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cross-platform-wheel-download",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add option to use \"pip download\" instead of \"pip wheel\" to download wheels for other platforms (#773)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621033bac254a19ac28f70d",
    "number": 772,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n#758 reduced the size of artifacts built by the `bazel build` command with the `--build_python_zip` option, but there is still room for improvement. The size of the artifacts is at least 43MB (e.g., a zipped python binary which just prints \"hello, world\"). This is still not great when build artifacts are included to docker images. It turned out that the --build_python_zip option includes the two identical shared libraries (not symlinks), `libpython{python_version}.so` and `libpython{python_version}.so.1.0` into the zip files, but rules_python doesn't use `libpython{python_version}.so`.\r\n`libpython{python_version}.so` occupies 16MB (37% of the total size of the artifact of size 43MB). By removing the unused shared library, users of rules_python can deploy smaller Python binaries.\r\n\r\n## Repro steps\r\n\r\n`WORKSPACE`:\r\n```starlark\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\ncommit = \"9cdb4f3f6aded1ccc62a10d004f9927ccc72702f\"\r\n\r\nhttp_archive(\r\n    name = \"rules_python\",\r\n    sha256 = \"7d048c530ca907013565fee907d358314c4cb329622284e07c50be76f2d961ee\",\r\n    strip_prefix = \"rules_python-\" + commit,\r\n    url = \"https://github.com/tetsuok/rules_python/archive/\" + commit + \".tar.gz\",\r\n)\r\n\r\nload(\"@rules_python//python:repositories.bzl\", \"python_register_toolchains\")\r\n\r\npython_register_toolchains(\r\n    name = \"python3_10\",\r\n    python_version = \"3.10.4\",\r\n)\r\n```\r\n\r\n`BUILD`:\r\n```starlark\r\nload(\"@rules_python//python:defs.bzl\", \"py_binary\")\r\n\r\npy_binary(\r\n    name = \"hello\",\r\n    srcs = [\"hello.py\"],\r\n)\r\n```\r\n\r\n`hello.py`:\r\n```python\r\nprint(\"hello, world!\")\r\n```\r\n\r\n```shell\r\n$ bazel build --build_python_zip //:hello\r\n$ ls -lh bazel-bin/hello.zip\r\n-r-xr-xr-x 1 t docker 43M Jul 29 00:15 bazel-bin/hello.zip\r\n```\r\n\r\nYou can see two identical shared libraries, `libpython{python_version}.so` and `libpython{python_version}.so.1.0` into zip files, and the shared libraries dominate the total size of zip files:\r\n\r\n```shell\r\n$ unzip -l bazel-bin/hello.zip | sort -n | tail -n 6\r\n   745004  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/python3.10/pydoc_data/topics.py\r\n   816725  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/python3.10/ensurepip/_bundled/setuptools-58.1.0-py3-none-any.whl\r\n  2123599  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/python3.10/ensurepip/_bundled/pip-22.0.4-py3-none-any.whl\r\n 38861696  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/libpython3.10.so\r\n 38861696  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/libpython3.10.so.1.0\r\n110513272                     2381 files\r\n```\r\n\r\n## What is the new behavior?\r\n\r\nThe unused shared library, `libpython{python_version}.so` included in the hermetic Python toolchain is excluded from Python runfiles built by Python rules. Artifacts built by the `bazel build` command with the `--build_python_zip` get smaller. The size of the resulting zipped Python executables reduces by 16 MB (43 MB → 27 MB in the above example).\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "exclude-unused-libpython-so",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Exclude unused libpython{python_version}.so to reduce the size of zipped Python executables (#772)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621033cac254a19ac28f70e",
    "number": 771,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n## Other information\r\n\r\nApplies @f0rmiga's [suggestion](https://github.com/bazelbuild/rules_python/pull/758#discussion_r932415910) to simplify glob pattern to exclude static libraries from the hermetic Python toolchain.\r\n",
    "head_branch": "simplify-glob-pattern-to-remove-static-libs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Simplify glob pattern to exclude static libraries (#771)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621033cac254a19ac28f70f",
    "number": 770,
    "body": "filepath.WalkDir lets us avoid calling stat on each file.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nN/A\r\n\r\n## What is the new behavior?\r\nAvoid a stat call for each file and slightly cleaner error handling\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "gazelle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[gazelle] Use filepath.WalkDir instead of filepath.Walk (#770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621033dac254a19ac28f710",
    "number": 769,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\n1. `python_repository` rule crashes with: `Failed to make interpreter installation read-only. 'chmod' error msg: chmod: cannot access 'lib': No such file or directory` because the `lib` directory is actually called `Lib`\r\n2. The glob in the generated repo doesn't include the `Lib` directory causing no builtin libraries to be found when running the cross compiled `py_binary`.\r\n\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n1. `python_repository` rule implementation doesn't crash.\r\n3. `Lib` directory is included correctly.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix-windows-toolchain-on-linux",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix download of Windows Python toolchain on Linux (#769)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621033eac254a19ac28f711",
    "number": 768,
    "body": "Wheels can contain their package within the `.data` directory, inside the `purelib` or `platlib` directories, which is then unpacked into the correct `site-packages` folder.\r\n\r\nPreviously these directories were ignored, but this causes issues with packages such as `semgrep` that don't set `Root-Is-Purelib: true` and instead have the `purelib` directory under the `.data` package.\r\n\r\nThis is the same as setting `Root-Is-Purelib: true` and having all the files at the root, so I'm unsure of the reasons to do it this way :shrug:\r\n\r\nThis results in the package being missing from the gazelle_python manifest files, and therefore causing issues with resolving dependencies.",
    "head_branch": "fix/what-s-the-deal-with-purelib-vs-platlib",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix(gazelle): handle purelib and platlib packages that don't set 'Root-Is-Purelib: true' (#768)\n\nCo-authored-by: Alex Eagle <alex@aspect.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621033fac254a19ac28f712",
    "number": 764,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe: Type annotations/documentation\r\n\r\n\r\n## What is the current behavior?\r\nNo annotations currently\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nAnnotations\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\nNo, unless we need to support very old python versions without `typing` in the stdlib?\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add type annotations to runfiles library (#764)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210340ac254a19ac28f713",
    "number": 763,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nRight now, there is no easy way to figure out pypi repo name to short requirment(numpy=1.0.0).  This change will make it possible to do that. \r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "get_annotions_from_lib_name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210340ac254a19ac28f714",
    "number": 762,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nUpdate pip-tools to 6.8.0\r\n[Changelog](https://github.com/jazzband/pip-tools/releases)\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-bump-pip-tools",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "pip-tools: 6.6.2 -> 6.8.0 (#762)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210341ac254a19ac28f715",
    "number": 761,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nUsing Bazel CLI option [incompatible_disallow_empty_glob](https://bazel.build/reference/command-line-reference#flag--incompatible_disallow_empty_glob) is not compatible with using a hermetic interpreter offered by rules_python.\r\n\r\nIt causes the error (exemplary for a Linux host):\r\n```\r\nERROR: Traceback (most recent call last):\r\n\tFile \"<path_to_bazel_out>/external/python3_10_x86_64-unknown-linux-gnu/BUILD.bazel\", line 9, column 16, in <toplevel>\r\n\t\tsrcs = glob(\r\nError in glob: glob pattern '*.exe' didn't match anything, but allow_empty is set to False (the default value of allow_empty can be set with --incompatible_disallow_empty_glob).\r\n```\r\n\r\nIssue Number: N/A\r\n\r\n### What is the underlying problem\r\n\r\nA [single filegroup](https://github.com/bazelbuild/rules_python/blob/834149dfcd9e0dcb9d713caeb6bf5b0584601392/python/repositories.bzl#L129) is used to aggregate the interpreter files. Its platform specific regex patterns are not compatible to the flag `--incompatible_disallow_empty_glob` which forbids any pattern to return an empty list. For example, on a Linux host the `\"*.exe\",` pattern will be empty.\r\n\r\n### Reproducing\r\n\r\nMinimal workspace for reproducing the problem.\r\n\r\n`WORKSPACE`\r\n```\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\nhttp_archive(\r\n    name = \"rules_python\",\r\n    sha256 = \"a3a6e99f497be089f81ec082882e40246bfd435f52f4e82f37e89449b04573f6\",\r\n    strip_prefix = \"rules_python-0.10.2\",\r\n    url = \"https://github.com/bazelbuild/rules_python/archive/refs/tags/0.10.2.tar.gz\",\r\n)\r\n\r\nload(\"@rules_python//python:repositories.bzl\", \"python_register_toolchains\")\r\npython_register_toolchains(\r\n    name = \"python3_10\",\r\n    python_version = \"3.10\",\r\n)\r\n```\r\n\r\n`BUILD`\r\n```\r\nload(\"@rules_python//python:defs.bzl\", \"py_binary\")\r\n\r\npy_binary(\r\n    name = \"foo\",\r\n    srcs = [\"foo.py\"],\r\n)\r\n```\r\n\r\n`foo.py`\r\n```\r\nimport sys\r\nprint(sys.version)\r\n```\r\n\r\nCommand to generate the error:\r\n`bazel run --incompatible_disallow_empty_glob //:foo`\r\n\r\n## What is the new behavior?\r\n\r\nOne can utilize flag `incompatible_disallow_empty_glob` while using a hermetic Python interpreter offered by rules_python.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n### What alternatives have been considered.\r\n\r\nWe could also introduce separate filegroups for the different platforms and use an alias with a platforms based select statement to provide the correct one to the user.\r\nHowever, given how unlikely it is that an interpreter without files is referenced by rules_python and this is not discovered in any test, we should use the straight forward solution offered in this PR instead of introducing this additional complexity.",
    "head_branch": "make_hermetic_interpreters_compatible_to_disallow_empty_glob",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make hermetic interpreters compatible to disallow_empty_glob (#761)\n\nA single filegroup is used to aggregate the interpreter files.\r\nIts platform specific regex patterns are not compatible to the flag\r\n`--incompatible_disallow_empty_glob` which forbids any pattern to return\r\nan empty list. For example, on a Linux host the `\"*.exe\",` will be empty."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210342ac254a19ac28f716",
    "number": 760,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n- `from foo import bar` adds `//foo` as a dep instead of `//foo/bar`.\r\n- `from foo.bar import baz` adds `//foo/bar` as a dep instead of `//foo/bar:baz` (when `//foo/bar:baz` is a separate py_library that contains foo/bar/baz.py as a source).\r\n- `from google.cloud import aiplatform` does not add `\"@gazelle_python_test_google_cloud_aiplatform//:pkg\",` as a dep (fails to resolve `from` imports for pip packages).\r\n\r\nIssue Number: #709 \r\n\r\n\r\n## What is the new behavior?\r\nWhen gazelle encounters `from foo.bar import baz`, try to resolve, in order from most specific to least specific:\r\n\r\n```\r\nfoo.bar.baz\r\nfoo.bar\r\nfoo\r\n```\r\n\r\nThis way, if `foo.bar.baz` is in the manifest file or in the index of existing rules (e.g. from a rule that contains the source file foo/bar/baz, it can be found). If `foo.bar.baz` can't be resolved, try `foo.bar` (maybe `baz` is just a function or variable in `foo/bar.py`).\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No - all existing tests continue to pass.\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nMay want to consider antagonistic cases - are there cases where imports are truly ambiguous?\r\n\r\n",
    "head_branch": "709/from-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "709/from imports (#760)\n\n* Support \"from\" imports in the python gazelle plugin.\r\n\r\nFixes #709.\r\n\r\n* Test case for pip imports using \"from foo import bar\".\r\n\r\n* Test cases for imports of the form \"from foo import bar\".\r\n\r\n* Remove unnecessary flag (replaced with continue's).\r\n\r\n* Make sure from imports work with std modules.\r\n\r\n- Add test case with `from __future__ import print_function`.\r\n\r\n* Fix indentation error.\r\n\r\n- Make sure that `from foo import bar, baz` works.\r\n- Add test case for this.\r\n\r\n* Fix error message.\r\n\r\n- Keep error the same as before.\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210343ac254a19ac28f717",
    "number": 759,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n- `from foo import bar` adds `//foo` as a dep instead of `//foo/bar`.\r\n- `from foo.bar import baz` adds `//foo/bar` as a dep instead of `//foo/bar:baz` (when `//foo/bar:baz` is a separate py_library that contains foo/bar/baz.py as a source).\r\n- `from google.cloud import aiplatform` does not add `\"@gazelle_python_test_google_cloud_aiplatform//:pkg\",` as a dep (fails to resolve `from` imports for pip packages).\r\n\r\nIssue Number: #709 \r\n\r\n\r\n## What is the new behavior?\r\nWhen gazelle encounters `from foo.bar import baz`, try to resolve, in order from most specific to least specific:\r\n\r\n```\r\nfoo.bar.baz\r\nfoo.bar\r\nfoo\r\n```\r\n\r\nThis way, if `foo.bar.baz` is in the manifest file or in the index of existing rules (e.g. from a rule that contains the source file foo/bar/baz, it can be found). If `foo.bar.baz` can't be resolved, try `foo.bar` (maybe `baz` is just a function or variable in `foo/bar.py`).\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No - all existing tests continue to pass.\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nMay want to consider antagonistic cases - are there cases where imports are truly ambiguous?\r\n\r\n",
    "head_branch": "709/from-imports",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210344ac254a19ac28f718",
    "number": 758,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nBuild artifacts by `bazel build` with the `--build_python_zip` option are unnecessary big. The size of the artifacts is at least 90MB (e.g., a zipped python binary which just prints \"hello, world\"). This is not great when build artifacts are included to docker images. The cause of this size issue is that the hermetic Python toolchain include the static libraries of the Python toolchain and tests for the standard libraries even though majority of users of rules_python don't need them. These files occupy 47MB (52% of an artifact of size 90MB).\r\n\r\n## Repro steps\r\n\r\n`WORKSPACE`:\r\n```starlark\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\n\r\nhttp_archive(\r\n    name = \"rules_python\",\r\n    sha256 = \"a3a6e99f497be089f81ec082882e40246bfd435f52f4e82f37e89449b04573f6\",\r\n    strip_prefix = \"rules_python-0.10.2\",\r\n    url = \"https://github.com/bazelbuild/rules_python/archive/refs/tags/0.10.2.tar.gz\",\r\n)\r\n\r\nload(\"@rules_python//python:repositories.bzl\", \"python_register_toolchains\")\r\n\r\npython_register_toolchains(\r\n    name = \"python3_10\",\r\n    python_version = \"3.10.4\",\r\n)\r\n```\r\n\r\n`BUILD`:\r\n```starlark\r\nload(\"@rules_python//python:defs.bzl\", \"py_binary\")\r\n\r\npy_binary(\r\n    name = \"hello\",\r\n    srcs = [\"hello.py\"],\r\n)\r\n```\r\n\r\n`hello.py`:\r\n```python\r\nprint(\"hello, world!\")\r\n```\r\n\r\n```shell\r\n$ bazel build --build_python_zip //:hello\r\n$ ls -lh bazel-bin/hello.zip\r\n-r-xr-xr-x 1 t docker 91M Jul 17 11:55 bazel-bin/hello.zip\r\n```\r\n\r\nYou can see some static libraries are included in the zip file (we have duplicated `libpython3.10.a`. The file size (uncompressed) of the static library is 38MB):\r\n\r\n```shell\r\n$ unzip -l bazel-bin/hello.zip | sort -n | grep \".a$\"\r\n     2356  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/itcl4.2.2/libitclstub4.2.2.a\r\n   149348  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/thread2.8.7/libthread2.8.7.a\r\n   496010  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/itcl4.2.2/libitcl4.2.2.a\r\n   526406  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/Tix8.4.3/libTix8.4.3.a\r\n 39633662  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/libpython3.10.a\r\n 39633662  2010-01-01 00:00   runfiles/python3_10_x86_64-unknown-linux-gnu/lib/python3.10/config-3.10-x86_64-linux-gnu/libpython3.10.a\r\n```\r\n\r\n## What is the new behavior?\r\n\r\nThe static libraries and tests for the standard libraries in the Python toolchain are excluded from Python runfiles built by Python rules. Build artifacts by `bazel build` with the `--build_python_zip` get smaller. The size of the artifacts is at least 43MB, saving 47MB.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "exclude-static-libs-and-tests-from-py-executables",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Exclude static libraries and tests to reduce zipped Python executables (#758)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210345ac254a19ac28f719",
    "number": 757,
    "body": "This is a fairly large refactor and unfortunately some breaking changes. The intent here is to reduce complexity and duplication.\r\n\r\nHistorically, we had 2 rules to install packages from PyPI (`pip_install` and `pip_parse`), with `pip_install` being the original. It worked well, but had a significant flaw in that it would eagerly fetch and install all packages. This was slow and frustrating when there were a large number of dependencies, so `pip_parse` was born!\r\n\r\n`pip_parse` (even though it is still a repository rule) lazily fetched and installed packages. This was adopted by most of the community based on evidence from issues raised, the bazel Slack channels and the rule maintainers.\r\n\r\nMaintaining both versions should no longer be necessary. There was a lot of duplication in both versions and it required extra effort and consideration for adding any new features.\r\n\r\nI've taken the approach (probably 🌶️ ) that `pip_install` is a better name, so I've introduced this change where both `pip_install` and `pip_parse` share the same code, but with a small shim to handle the `requirements_lock` vs `requirements` difference in argument. I think a deprecation log message should be added and then pip_parse should be removed.\r\n\r\n2 Breaking Changes:\r\n\r\n1. The small breaking change in this PR, will be for the users (probably a small number) who still use a pip_install version prior to this PR *and* who *DO NOT* use the `requirement()` macro to reference dependencies. The naming style of the external repositories has changed, so this will require a `sed` across any `.bazel` files if these users upgrade. This isn't a big deal in my opinion.",
    "head_branch": "groodt-rename-pip-parse",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210346ac254a19ac28f71a",
    "number": 756,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/742\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-fix-direct-url-refs",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix for requirements_lock with PEP440 direct references (#756)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210346ac254a19ac28f71b",
    "number": 755,
    "body": "Fixes #752 which was a bug introduced in a fix for #746\r\n\r\nDon't check for the python_interpreter_target workspace name unless it has actually been passed.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\nTesting with a host python interpreter is currently not possible because one of the rules_python runtime dependencies expect importlib.resources to be available. importlib.resources was introduced in python3.7 and our buildkite images only have python3.6.\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\npip_install without a python_interpreter_target fails as repo exec time.\r\n\r\nIssue Number: 752\r\n\r\n\r\n## What is the new behavior?\r\npip_install without python interpreter configuration works.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hfuller/fix-752",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Guard python_interpreter_target workspace name on None type check. (#755)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210347ac254a19ac28f71c",
    "number": 753,
    "body": "`rctx.attr.python_interpreter_target.workspace_name` was being accessed even if `rctx.attr.python_interpreter_target` was unset. This change returns from the `_maybe_set_xcode_location_cflags` function early if the preconditions aren't met.\r\n\r\nLooks like this was very-recently merged in #750",
    "head_branch": "patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210348ac254a19ac28f71d",
    "number": 751,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n\r\n\r\n## What is the current behavior?\r\n`pip_parse` generates a `requirements.bzl` which can be vendored by rulesets to install Pypi-sourced Python dependencies. But the `install_deps` function doesn't allow any configuration. Most importantly, it doesn't allow specifying the `python_interpreter_target` present in the consuming environment.\r\n\r\n## What is the new behavior?\r\n`install_deps` now takes an optional `**whl_library_kwargs` which can be used to override values that were specified when `requirements.bzl` was generated.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n",
    "head_branch": "dev/install_deps_overrides",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow overriding config attrs in pip_parse-generated install_deps (#751)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210349ac254a19ac28f71e",
    "number": 750,
    "body": "## PR Checklist\r\nFixes #746 \r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n     Tests omitted because we don't have a builtin interpreter which is not of the standalone interpreter variety. \r\n     Unfortunately we can't unit test these bzl files that use the rctx.\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nFixes regression to using custom python_interpreter_target \r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hfuller/fix-746",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "safely check for standalone interpreter sentinel files (#750)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034aac254a19ac28f71f",
    "number": 749,
    "body": "We have seen folks excluding the `.pyc` files due to cache misses. See:\r\n- https://github.com/bazelbuild/rules_python/pull/713\r\n- https://github.com/bazelbuild/rules_python/pull/748\r\n\r\nThis PR adds a check under Linux and macOS that fails if running as root. For those who want to still ignore it, I added a new attribute.",
    "head_branch": "f0rmiga/check-root-user",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: fail if the user is root (#749)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034aac254a19ac28f720",
    "number": 748,
    "body": "In some cases, the hermetic python toolchain would generate .pyc files\r\nwhen being used, resulting in a remote cache miss. This commit excludes\r\ngenerated files from the \"files\" filegroup to resolve this issue\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix_remote_cache_miss",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034bac254a19ac28f721",
    "number": 747,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ x ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #704 \r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n## Other information\r\nNot sure if people are relying on the exec_compatible_with also being set. \r\n",
    "head_branch": "molar-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "exec_compatible_with -> target_compatible_with #704 (#747)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034cac254a19ac28f722",
    "number": 744,
    "body": "Part of https://github.com/bazelbuild/bazel-central-registry/issues/124",
    "head_branch": "bzlmod",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: support bzlmod (#744)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034dac254a19ac28f723",
    "number": 743,
    "body": "This PR attempts to simplify the `pip_install / pip_parse` python source packages. The code had grown organically and I found it difficult to follow and unnecessarily nested into packages. \r\n\r\nIn general, the code should be quite simple:\r\n1. A tool to install all wheels eagerly in a requirements.txt (pip_install)\r\n2. A tool to parse a requirements.txt to a bzl file (pip_parse & parse_requirements_to_bzl)\r\n3. A tool to install a single wheel (pip_parse & whl_library)\r\n\r\nThere is some additional utility around annotations to bazel rules, extracting wheels and updating namespace_pkgs, but I still believe the code doesn't need to be so fragmented across multiple packages. There is a lot of very similar / duplicated logic when extracting wheels that is probably unnecessary. \r\n\r\nThis PR simply moves existing code and imports around and should be fully backwards compatible.\r\n\r\nGiven that `pip_parse` seems to be the more popular choice (based on discussions and most of the recent GH issues) it is probably justified to remove the eager installation logic (pip_install) and standardise on `pip_parse`. It should be possible to run with both aliases. I'll do this in a follow-up refactor.",
    "head_branch": "groodt-flatten-py-packages",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Flatten python packages (#743)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034eac254a19ac28f724",
    "number": 740,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.25.11 to 1.26.5.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.5</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed deprecation warnings emitted in Python 3.10.</li>\n<li>Updated vendored <code>six</code> library to 1.16.0.</li>\n<li>Improved performance of URL parser when splitting the authority component.</li>\n</ul>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a></strong></p>\n<h2>1.26.4</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Changed behavior of the default <code>SSLContext</code> when connecting to HTTPS proxy during HTTPS requests. The default <code>SSLContext</code> now sets <code>check_hostname=True</code>.</li>\n</ul>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a></strong></p>\n<h2>1.26.3</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>\n<p>Fixed bytes and string comparison issue with headers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2141\">#2141</a>)</p>\n</li>\n<li>\n<p>Changed <code>ProxySchemeUnknown</code> error message to be more actionable if the user supplies a proxy URL without a scheme (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2107\">#2107</a>)</p>\n</li>\n</ul>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a></strong></p>\n<h2>1.26.2</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where <code>wrap_socket</code> and <code>CERT_REQUIRED</code> wouldn't be imported properly on Python 2.7.8 and earlier (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2052\">#2052</a>)</li>\n</ul>\n<h2>1.26.1</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where two <code>User-Agent</code> headers would be sent if a <code>User-Agent</code> header key is passed as <code>bytes</code> (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2047\">#2047</a>)</li>\n</ul>\n<h2>1.26.0</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>\n<p>Added support for HTTPS proxies contacting HTTPS servers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1923\">#1923</a>, Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1806\">#1806</a>)</p>\n</li>\n<li>\n<p>Deprecated negotiating TLSv1 and TLSv1.1 by default. Users that\nstill wish to use TLS earlier than 1.2 without a deprecation warning\nshould opt-in explicitly by setting <code>ssl_version=ssl.PROTOCOL_TLSv1_1</code> (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2002\">#2002</a>)\n<strong>Starting in urllib3 v2.0: Connections that receive a <code>DeprecationWarning</code> will fail</strong></p>\n</li>\n<li>\n<p>Deprecated <code>Retry</code> options <code>Retry.DEFAULT_METHOD_WHITELIST</code>, <code>Retry.DEFAULT_REDIRECT_HEADERS_BLACKLIST</code>\nand <code>Retry(method_whitelist=...)</code> in favor of <code>Retry.DEFAULT_ALLOWED_METHODS</code>,\n<code>Retry.DEFAULT_REMOVE_HEADERS_ON_REDIRECT</code>, and <code>Retry(allowed_methods=...)</code>\n(Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2000\">#2000</a>) <strong>Starting in urllib3 v2.0: Deprecated options will be removed</strong></p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h1>1.26.5 (2021-05-26)</h1>\n<ul>\n<li>Fixed deprecation warnings emitted in Python 3.10.</li>\n<li>Updated vendored <code>six</code> library to 1.16.0.</li>\n<li>Improved performance of URL parser when splitting\nthe authority component.</li>\n</ul>\n<h1>1.26.4 (2021-03-15)</h1>\n<ul>\n<li>Changed behavior of the default <code>SSLContext</code> when connecting to HTTPS proxy\nduring HTTPS requests. The default <code>SSLContext</code> now sets <code>check_hostname=True</code>.</li>\n</ul>\n<h1>1.26.3 (2021-01-26)</h1>\n<ul>\n<li>\n<p>Fixed bytes and string comparison issue with headers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2141\">#2141</a>)</p>\n</li>\n<li>\n<p>Changed <code>ProxySchemeUnknown</code> error message to be\nmore actionable if the user supplies a proxy URL without\na scheme. (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2107\">#2107</a>)</p>\n</li>\n</ul>\n<h1>1.26.2 (2020-11-12)</h1>\n<ul>\n<li>Fixed an issue where <code>wrap_socket</code> and <code>CERT_REQUIRED</code> wouldn't\nbe imported properly on Python 2.7.8 and earlier (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2052\">#2052</a>)</li>\n</ul>\n<h1>1.26.1 (2020-11-11)</h1>\n<ul>\n<li>Fixed an issue where two <code>User-Agent</code> headers would be sent if a\n<code>User-Agent</code> header key is passed as <code>bytes</code> (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2047\">#2047</a>)</li>\n</ul>\n<h1>1.26.0 (2020-11-10)</h1>\n<ul>\n<li>\n<p><strong>NOTE: urllib3 v2.0 will drop support for Python 2</strong>.\n<code>Read more in the v2.0 Roadmap &lt;https://urllib3.readthedocs.io/en/latest/v2-roadmap.html&gt;</code>_.</p>\n</li>\n<li>\n<p>Added support for HTTPS proxies contacting HTTPS servers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1923\">#1923</a>, Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1806\">#1806</a>)</p>\n</li>\n<li>\n<p>Deprecated negotiating TLSv1 and TLSv1.1 by default. Users that\nstill wish to use TLS earlier than 1.2 without a deprecation warning</p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf\"><code>d161647</code></a> Release 1.26.5</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec\"><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637\"><code>2698537</code></a> Update vendored six to 1.16.0</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550\"><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b\"><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381\"><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4\"><code>f271c9c</code></a> Apply latest Black formatting</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52\"><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/a8913042b676c510e94fc2b097f6b514ae11a537\"><code>a891304</code></a> Release 1.26.4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/8d65ea1ecf6e2cdc27d42124e587c1b83a3118b0\"><code>8d65ea1</code></a> Merge pull request from GHSA-5phf-pp7p-vc2r</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.25.11...1.26.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.25.11&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_install/urllib3-1.26.5",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034eac254a19ac28f725",
    "number": 739,
    "body": "Moves all re-exported symbols in to `reexports.bzl`. \r\n\r\nThis is a needed prefactor step for https://github.com/bazelbuild/rules_python/pull/723 as we need to consume `py_library` internall in the macro, and doing so from `defs.bzl` would introduce a cycle.",
    "head_branch": "refactor/move_re-exports",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "refactor: move all re-exports to private/reexports.bzl (#739)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621034fac254a19ac28f726",
    "number": 738,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThe experimental folder re-exports functionality and has done so for a long-time. Perhaps this has been long-enough and no longer needs to exist? I don't feel too strongly about removing this, but it does seem like noise that could easily be restored if necessary.\r\n\r\n\r\n## What is the new behavior?\r\nRemoves the `//experimental` folder because everything has graduated out of it.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-remove-experimental",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      ". (#738)\n\nCo-authored-by: Alex Eagle <alex@aspect.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210350ac254a19ac28f727",
    "number": 737,
    "body": "This minor change is a followup to https://github.com/bazelbuild/rules_python/issues/725 where the user was receiving an empty error message from `rules_python` because the command we were using, `chmod`, was providing an empty error message. \r\n\r\nThis change introduce error message prefixes to a few of our toolchain code's `fail` usages, so that users can read the error message and at least be situated in what part of the setup they're experiencing an error.\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--verbose-starlark-err-msg",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "More verbose 'fail' msgs. Don't rely on executed tools err msg (#737)\n\n* More verbose 'fail' msgs. Don't rely on executed tools err msg\r\n\r\n* run buildifier\r\n\r\nCo-authored-by: Matt Mackay <mattem@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210351ac254a19ac28f728",
    "number": 736,
    "body": "We can still run integration tests against the 4.x version for now.\r\n",
    "head_branch": "up_bazel",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "chore: update to Bazel 5.2.0 (#736)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210352ac254a19ac28f729",
    "number": 732,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nCurrently nothing is checking if the `requirements_lock` is fully pinned. It's not technically possible to ensure that a lockfile is fully pinned (without actually attempting to resolve it), but a lightweight approximation is to ensure all individual requirements are pinned (i.e. have `==` or `===`).\r\n\r\n\r\n## What is the new behavior?\r\nChecks if the requirement is pinned, or throws an error.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-ensure-pinned",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Validation to ensure requirements_lock is pinned. (#732)\n\n* Light validation to ensure lockfile is pinned.\r\n\r\n* Clean up\r\n\r\n* .\r\n\r\nCo-authored-by: Alex Eagle <alex@aspect.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210353ac254a19ac28f72a",
    "number": 731,
    "body": "This PR introduces the current_py_toolchain rule, exposing the\r\nPYTHON2 and PYTHON3 \"make\" variables in bazel rules, analagous to\r\n@bazel_tools//tools/cpp:current_cc_toolchain.\r\n\r\nThis is useful when building 3rd party libraries which require python via rules_foreign_cc.\r\n\r\n\r\nSee\r\nhttps://docs.bazel.build/versions/main/be/make-variables.html#custom_variables\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nBazel rules can refer to the python interpreter via \"Make\" Variables. \r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "current_py_toolchain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Provide current_py_toolchain (#731)\n\nThis commit introduces the current_py_toolchain rule, exposing the\r\nPYTHON2 and PYTHON3 \"make\" variables in bazel rules, analagous to\r\n@bazel_tools//tools/cpp:current_cc_toolchain.\r\n\r\nSee\r\nhttps://docs.bazel.build/versions/main/be/make-variables.html#custom_variables\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210353ac254a19ac28f72b",
    "number": 730,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\n**Issue Number: #721**\r\n\r\n## What is the new behavior?\r\n\r\nPackages such as https://github.com/google/etils/blob/main/pyproject.toml can be installed with `rules_python`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "issue-721",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fixes #721. Remove self-link dependency pulled in sometimes by extras (#730)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210354ac254a19ac28f72c",
    "number": 729,
    "body": "We need the versioned shared object on Linux rather than the symlink that points to the versioned one.",
    "head_branch": "f0rmiga/fix-libpython-linux",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: versioned shared object for libpython on Linux (#729)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210355ac254a19ac28f72d",
    "number": 727,
    "body": "Exposes a `cc_import` target for libpython. So far, we've only been exposing the headers but on hermetic environments without libpython being found in the system search paths, we need to expose those libraries too.",
    "head_branch": "f0rmiga/libpython",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: cc_import for libpython (#727)\n\n* feat: cc_import for libpython\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: split macOS and Linux glob patterns\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: use select instead of glob\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210356ac254a19ac28f72e",
    "number": 726,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis functionality is no longer maintained or recommended. It is easy to migrate to better supported functionality, or alternatively remain on an old pin of these rules.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-remove-pip-import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove legacy pip_import (#726)\n\n* Remove legacy pip_import\r\n\r\n* Remove legacy pip_import\r\n\r\n* Generate docs"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210357ac254a19ac28f72f",
    "number": 724,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #720\r\n\r\n\r\n## What is the new behavior?\r\n\r\n[PEP 426](https://peps.python.org/pep-0426/#name) states that distribution\r\nnames are case-insensitive and \"-\" is interchangeable with \"_\".\r\n\r\nThe `pip-compile` command creates a lockfile where all package names are lowercase.\r\nThe tool may also modify interchangeable characters.\r\n\r\nThe following examples are all valid `requirements.txt` or `requirements_lock.txt` entries:\r\n\r\n```\r\nSQLAlchemy[postgresql_psycopg2binary]==1.4.36\r\nsqlalchemy[postgresql_psycopg2binary]==1.4.36\r\nsentry_sdk[flask]==1.5.8\r\nsentry-sdk[flask]==1.5.8\r\n```\r\n\r\nA distribution's `METADATA` file contains the case and delimiters chosen by the package publisher.\r\nBy applying a \"sanitise\" function when building the `extras` dict and when performing lookups we can eliminate this difference as a concern.\r\n\r\n> Note: Unlike the package name, the content inside the extras `[]` is case-sensitive and `-` vs `_` is significant.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nWhile I believe this PR covers the spots required to fix the issue, it's pretty clunky.\r\nOne has to remember to sanitize keys before looking them up in the `extras` dict.\r\nWe could get around that by sanitizing the wheel name parsed from the metadata but I didn't look into what consequences that might have.\r\n\r\nAdditionally, replacing `\"-\"` with `\"_\"` was an arbitrary decision.\r\nIt could easily be `\"_\"` to `\"-\"`.",
    "head_branch": "issue/720",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use PEP 508 rules when setting deps from extras (#724)\n\n* Use PEP 426 rules when setting deps from extras\r\n\r\nThis commit addresses issue #720.\r\n\r\n[PEP 426](https://peps.python.org/pep-0426/#name) states that distribution\r\nnames are case-insensitive and \"-\" is interchangeable with \"_\".\r\n\r\nThe `pip-compile` command creates a lockfile where all package names are lowercase.\r\nThe tool may also modify interchangeable characters.\r\n\r\nThe following examples are all valid `requirements.txt` or `requirements_lock.txt` entries:\r\n\r\n```\r\nSQLAlchemy[postgresql_psycopg2binary]==1.4.36\r\nsqlalchemy[postgresql_psycopg2binary]==1.4.36\r\nsentry_sdk[flask]==1.5.8\r\nsentry-sdk[flask]==1.5.8\r\n```\r\n\r\nA distribution's `METADATA` file contains the stylization chosen by the publisher.\r\nBy applying a \"sanitise\" function when building the `extras` dict and when performing lookups\r\nwe can eliminate this difference as a concern.\r\n\r\n* Use PEP 503 rules when sanitising extras\r\n\r\n* Normalize distribution name with pkg_resources\r\n\r\n`pypa/installer` is used to parse Wheel metadata, but does not currently\r\nprovide a method for normalizing distribution names:\r\n\r\n- https://github.com/pypa/installer/issues/97\r\n\r\n`pypa/pkg_resources` provides `Requirement.parse` which returns an instance\r\nof `Requirement` where `.key` is the canonical distribution name per PEP 503.\r\n\r\nThe `Requirement` class can also parse `extras`, but it returns a normalized\r\nform that I believe could break the installation of the extras.\r\n\r\n* Use Requirement.parse to populate extra reqs\r\n\r\n* Revert \"Use Requirement.parse to populate extra reqs\"\r\n\r\nThis reverts commit f0faa9795a219d865d579da430806598b8779753.\r\n\r\n* Test for distribution name normalization in extras\r\n\r\n* Replace pkg_resources with packaging.utils\r\n\r\nThis replaces `pkg_resources.Requirement.parse` with\r\n`packaging.utils.canonicalize_name`. Doing this pulls in a vendored\r\nrequirement from `pip`, which may be undesirable.\r\n\r\nThe code we want is just:\r\n\r\n```\r\nre.sub(r\"[-_.]+\", \"-\", name).lower()\r\n```\r\n\r\nThis commit also leaves a reference to `pkg_resources` in `wheel.py` which\r\ndoes not canonicalize the name.\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>\r\nCo-authored-by: Alex Eagle <alex@aspect.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210357ac254a19ac28f730",
    "number": 723,
    "body": "Adds a `py_pytest_main` entrypoint rule for templating a launcher for pytest that works in conjunction with the Gazelle extension.",
    "head_branch": "feat/py_pytest_main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210358ac254a19ac28f731",
    "number": 722,
    "body": "The tuple type helper isn't supported in python3.8, which is currently\r\nthe version macOS has in /usr/bin/python3.",
    "head_branch": "ks/fix-python3.8-type-compatibility",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix python3.8 type compatibility (#722)\n\nThe tuple type helper isn't supported in python3.8, which is currently\r\nthe version macOS has in /usr/bin/python3."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210359ac254a19ac28f732",
    "number": 719,
    "body": "This causes an error when running from latest main:\r\n\r\n```\r\nERROR: An error occurred during the fetch of repository 'my_deps':\r\n   Traceback (most recent call last):\r\n        File \".../gbobcgvx/external/rules_python/python/pip_install/pip_repository.bzl\", line 195, column 13, in _pip_repository_impl\r\n                fail(\"rules_python failed: %s (%s)\" % (result.stdout, result.stderr))\r\nError in fail: rules_python failed:  (Traceback (most recent call last):\r\n  File \"...\\gbobcgvx\\external\\python3_8_x86_64-pc-windows-msvc\\lib\\runpy.py\", line 185, in _run_module_as_main\r\n    mod_name, mod_spec, code = _get_module_details(mod_name, _Error)\r\n  \r\n  ...\r\n  \r\n    from python.pip_install.extract_wheels.lib import wheel\r\n  File \"...\\gbobcgvx\\external\\rules_python\\python\\pip_install\\extract_wheels\\lib\\wheel.py\", line 28, in <module>\r\n    class Wheel:\r\n  File \"...\\gbobcgvx\\external\\rules_python\\python\\pip_install\\extract_wheels\\lib\\wheel.py\", line 55, in Wheel\r\n    def entry_points(self) -> Dict[str, tuple[str, str]]:\r\nTypeError: 'type' object is not subscriptable\r\n```\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nErrors when using `pip_parse`.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nDoes not error.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nNot sure how to write a test for this, but would appreciate guidance on how to do so.",
    "head_branch": "fix-entry-points-return-type",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621035aac254a19ac28f733",
    "number": 718,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nUpgrades pip and pip-tools to the latest versions.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "bump-pip-tools",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pip: 22.0.4 -> 22.1.2; pip-tools: 6.6.0 -> 6.6.2 (#718)\n\n* pip/deps: Bump `pip-tools` -> 6.6.0\r\n\r\nSigned-off-by: Ryan Northey <ryan@synca.io>\r\n\r\n* pip-tools 6.6.2\r\n\r\nCo-authored-by: Ryan Northey <ryan@synca.io>\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621035bac254a19ac28f734",
    "number": 717,
    "body": "I ran into a sitation that triggered this failure. I have version 5.0.0 installed, so it was confusing to see a message telling me my version was lower than 0.2.1.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\nError message clarification.\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nI received the following output from a build:\r\n\r\n```\r\nFile \"/private/var/tmp/_bazel_jdob/300f9ff46946083ee2e5c32c9a7995b7/external/rules_python/third_party/github.com/bazelbuild/bazel-skyli\r\nb/lib/versions.bzl\", line 92, column 17, in _check_bazel_version\r\n                fail(\"Current Bazel version is lower than 0.2.1; expected at least {}\".format(\r\nError in fail: Current Bazel version is lower than 0.2.1; expected at least 4.0.0\r\n```\r\n\r\nRunning Bazel shows I have a higher version than 0.2.1:\r\n\r\n```\r\n$ bazel version\r\nBuild label: 5.0.0\r\nBuild target: bazel-out/darwin-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Wed Jan 19 14:15:55 2022 (1642601755)\r\nBuild timestamp: 1642601755\r\nBuild timestamp as int: 1642601755\r\n```\r\n\r\n## What is the new behavior?\r\n\r\nThe error message indicates that the version cannot be determined, rather than the message reflecting an old version.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Made version failure message better reflect the issue (#717)\n\nI ran into a sitation that triggered this failure. I have version 5.0.0 installed, so it was confusing to see a message telling me my version was lower than 0.2.1."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621035cac254a19ac28f735",
    "number": 715,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nCurrent behaviour uses bespoke code to unzip Python Wheels. This code does not utilise the PEP standards to unpack files and relies on some fragile globs to include and exclude files in the generated py_library.\r\n\r\n\r\n## What is the new behavior?\r\nAs mentioned in https://github.com/bazelbuild/rules_python/pull/700, `installer` can be used to unpack Wheels in a PEP standards compliant manner.\r\n\r\nIn this PR `installer` is used to replace the custom purelib handling. It also unpacks Wheels into more standard path names that align with a standard Python installation or `venv` when inspecting `sysconfig`.\r\n\r\n`site-packages` - The destination for the source code (both purelib and platlib)\r\n`include` - The location for any header files\r\n`bin` - The location for entry_point scripts\r\n`data` - The location for Wheel data\r\n\r\nThese path names more closely align with standard Python names either on a system or in a `venv`. See below.\r\n\r\n```\r\n❯ python3\r\nPython 3.9.12 (main, Mar 26 2022, 15:52:10)\r\n[Clang 13.0.0 (clang-1300.0.29.30)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sysconfig import get_paths\r\n>>> from pprint import pprint\r\n>>> info = get_paths()\r\n>>> pprint(info)\r\n{'data': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9',\r\n 'include': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/include/python3.9',\r\n 'platinclude': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/include/python3.9',\r\n 'platlib': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages',\r\n 'platstdlib': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9',\r\n 'purelib': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages',\r\n 'scripts': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/bin',\r\n 'stdlib': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9'}\r\n>>> quit()\r\n```\r\n\r\nSimilarly for a `venv`\r\n\r\n```\r\n/tmp\r\n❯ python3 -m venv myvenv\r\n\r\n/tmp\r\n❯ source myvenv/bin/activate.fish\r\n\r\n/tmp\r\nmyvenv ❯ python3\r\nPython 3.9.12 (main, Mar 26 2022, 15:52:10)\r\n[Clang 13.0.0 (clang-1300.0.29.30)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sysconfig import get_paths\r\n>>> from pprint import pprint\r\n>>> info = get_paths()\r\n>>> pprint(info)\r\n{'data': '/private/tmp/myvenv',\r\n 'include': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/include/python3.9',\r\n 'platinclude': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/include/python3.9',\r\n 'platlib': '/private/tmp/myvenv/lib/python3.9/site-packages',\r\n 'platstdlib': '/private/tmp/myvenv/lib/python3.9',\r\n 'purelib': '/private/tmp/myvenv/lib/python3.9/site-packages',\r\n 'scripts': '/private/tmp/myvenv/bin',\r\n 'stdlib': '/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9'}\r\n>>> quit()\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-replace-unzip-installer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use `installer` to remove custom unzip and spread code (#715)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621035cac254a19ac28f736",
    "number": 713,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\nI'm not sure how to test this.\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\n\r\nUsing rules_python with the hermetic toolchain via `python_register_toolchains` results in cache misses when using bazel with a remote cache. This appears to be because pyc files that are generated on the build host are included as part of one of the globs, but since pyc files don't appear to be generated deterministically. For example, from one run we saw one action that used the hermetic toolchain had the following file as an input:\r\n```\r\n        {\r\n          \"path\": \"external/python3_9_x86_64-pc-windows-msvc/lib/__pycache__/_markupbase.cpython-39.pyc\",\r\n          \"digest\": \"acc87949c12c0a73eace38bed1a4d9e311ff283fe29a7e28bdfb339ff267ed27\"\r\n        },\r\n```\r\nbut from another run we saw:\r\n```\r\n        {\r\n          \"path\": \"external/python3_9_x86_64-pc-windows-msvc/lib/__pycache__/_markupbase.cpython-39.pyc\",\r\n          \"digest\": \"afb43608c750e3f7d4dcb0c968aec6d84f678cebc506666325b43c24ce964e5a\"\r\n        },\r\n```\r\nThe hashes above are taken from the bazel execution log as per https://bazel.build/docs/remote-execution-caching-debug.\r\nNote that although the above are with the windows toolchain, we saw the same behaviour on all MacOS, Linux, and Windows.\r\n\r\n## What is the new behavior?\r\n\r\npyc files are excluded from the glob. We're no longer seeing cache misses when using a cache.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n",
    "head_branch": "improve-remote-caching",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621035dac254a19ac28f737",
    "number": 712,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nSome `bzl` source files were missing from `@rules_python//python:bzl`, leading to stardoc errors.\r\n\r\n\r\n## What is the new behavior?\r\nThis PR fixes issues related to missing sources in the `@rules_python//python:bzl` filegroup.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "bzl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed missing bzl sources from bzl filegroup (#712)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621035eac254a19ac28f738",
    "number": 711,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-replace-unzip-installer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621035fac254a19ac28f739",
    "number": 707,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\n\r\nUpdates the python toolchain version for 3.10 -> 3.10.4\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\n3.10.2 is installed\r\n\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n3.10.4 is installed\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [X] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\nif you have 3.10.2 hardcoded as your version it would break\r\n\r\nnot sure if it is preferable to add 3.10.4 in addition rather than replacing existing version\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "python-3.10.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "python: Update minor toolchain versions (#707)\n\n* python: Update 3.10 -> 3.10.4\r\n\r\n* keep-existing-version\r\n\r\nSigned-off-by: Ryan Northey <ryan@synca.io>\r\n\r\n* update-minors\r\n\r\nSigned-off-by: Ryan Northey <ryan@synca.io>\r\n\r\n* msvc-shared\r\n\r\nSigned-off-by: Ryan Northey <ryan@synca.io>\r\n\r\n* minor-mapping\r\n\r\nSigned-off-by: Ryan Northey <ryan@synca.io>\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210360ac254a19ac28f73a",
    "number": 702,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThere are some entry_points in the wild that end with a `.py` suffix. This is an extreme edge-case, but this clashes with the native Python rules in Bazel that forbids `py_binary` to end with `.py`.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nAn example entry_point in the wild that ends with `.py` https://github.com/jupyterhub/jupyterhub-idle-culler/blob/9dba16033485f3c70352edd3255bb0c5905f16ce/setup.py#L15\r\n",
    "head_branch": "groodt-fix-entrypoints",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Handle entry_points that end with .py (#702)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210361ac254a19ac28f73b",
    "number": 701,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-try-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210362ac254a19ac28f73c",
    "number": 700,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThe `Wheel` related parsing / unpacking / installation is using custom written code and the [pkginfo](https://pypi.org/project/pkginfo/) package to parse metadata. This logic is complex and fragile because of the many Python Packaging PEPs it relates to.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/671\r\n\r\n\r\n## What is the new behavior?\r\nThis PR introduces a modern, PEP standards-compliant library called [installer](https://pypi.org/project/installer/). This package is maintained in the [Python Packaging Authority](https://www.pypa.io/en/latest/) and is written by a few of the current maintainers of `pip`. It is therefore more likely to be processing Wheel files correctly.\r\n\r\nThis PR is only using [installer](https://pypi.org/project/installer/) for metadata parsing, but if this PR is accepted, I hope to replace all of the custom Wheel processing code.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nThere are modern Python packaging libraries and PRs emerging that these Bazel rules should adopt where appropriate.\r\n\r\nModern packaging libraries:\r\n\r\n[installer](https://pypi.org/project/installer/) from this PR, is able to correctly \"install\" (or rather unpack) Wheels into the desired location.\r\n[build](https://github.com/pypa/build) is able to replace the elements of `pip` that produces Wheels. Suitable for converting an `sdist` into a Wheel.\r\n[hatch](https://github.com/pypa/hatch) is a modern, extensible Python project manager that is a good example of how best to use the modern and emerging Python Packaging standards.\r\n\r\n<hr />\r\n\r\nPromising PRs:\r\n\r\n[pip metadata-only resolve with pip download --dry-run --report](https://github.com/pypa/pip/pull/10748) when this PR lands and becomes standardised, the new internal resolver of `pip` can be used to produce an approximation of a lockfile. Note: this is not a formal specification of a lockfile (which will require a PEP), but is a promising step in that direction. This would eventually remove the need for `pip-tools`.\r\n\r\n<hr />\r\n\r\nAll of these things together means that there will eventually be the following options for consuming third-party dependencies with `rules_python`.\r\n\r\nOption A - Install pre-built Wheels only in WORKSPACE (similar to rules_jvm_external where Bazel only needs to download and unpack)\r\n1. Produce Wheels either using [build](https://github.com/pypa/build) or `pip wheel`\r\n2. Store the Wheels somewhere (local filesystem, git LFS, private PyPI artifact repository\r\n3. Resolve urls for the dependencies against 2 using ` pip download --dry-run --report` and create `.bzl` file\r\n4. Bazel repository rule to consume the `.bzl` and unpack using [installer](https://pypi.org/project/installer/) \r\n\r\nOption B - Build and install in WORKSPACE (approach in this PR where Bazel does a combined build and unpack of third-party code)\r\n1. Bazel repository rule uses `pip wheel` and the fragile \"build on demand\" nature of `pip` to resolve and download existing Wheels *OR* convert `sdist` to Wheels\r\n2. Use [installer](https://pypi.org/project/installer/) to parse and unpack Wheels from 1.\r\n\r\nOption C - Something like rules_pycross (which attempts to fuse python package builds into Bazel as closely as possible)\r\nSee: https://github.com/jvolkman/rules_pycross\r\n\r\nOption D - Something like dbx_py_pypi_piplib (where you build cpython and libraries form pypi in Bazel)\r\nSee: https://github.com/dropbox/dbx_build_tools",
    "head_branch": "groodt-init-installer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Init: pypa/installer (#700)\n\n* .\r\n\r\n* .\r\n\r\n* .\r\n\r\n* .\r\n\r\n* Fixes from review.\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210362ac254a19ac28f73d",
    "number": 699,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features) **TODO**\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/691\r\n\r\n## What is the new behavior?\r\n\r\nBazel users on a version greater than or equal to version 5 will avoid using a system Python interpreter when running `py_binary` or `py_test` targets.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "jonathon--stub_template-hermeticity",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210363ac254a19ac28f73e",
    "number": 698,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] **Documentation content changes**\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Why\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/691\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] **No**\r\n\r\n\r\n\r\n",
    "head_branch": "thundergolfer-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add caveat about python_register_toolchain's hermeticty to README (#698)\n\n* Add caveat about `python_register_toolchains` rule's hermeticity.\r\n\r\n* Fix typos and grammar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210364ac254a19ac28f73f",
    "number": 697,
    "body": "Fixes issues in #646 by setting CPPFLAGS to the correct xcode sdks.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIf you use one of the hermetic standalone interpreters provided by rules_python pip fails to build sdists with native code extensions because the sysconfig clang flags provided by the standalone interpreters match the interpreter build environment which is almost always different than the execution environment. We fix this issue by providing the correct libc system headers location via CFLAGS env var.\r\n\r\n\r\n## What is the new behavior?\r\nPip installing a wheel which needs native code build will succeed.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nThe Windows image in buildkite doesn't have a c++ toolchain available for pip to use to in order to test changes I had to introduce a platform specific requirement into examples/pip_install/requirements.in. In order to appease the platform specific requirements.txt files resulting from compile_pip_requirements I added support for platform specific lock files to compile_pip_requirements. pip-compile can't generate cross platform requirement files from an arbitrary execution platform, so that is left up to the user to generate in their own environments.",
    "head_branch": "hfuller/646-fix-so-compiles",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Patch pip environment with xcode sdk location. (#697)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210365ac254a19ac28f740",
    "number": 696,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nDuplicate method invocation. \r\n\r\nhttps://github.com/bazelbuild/rules_python/issues/675 introduced the return code handling. \r\n\r\nhttps://github.com/bazelbuild/rules_python/pull/573/files#diff-cd80d344159f5c70b91dfc2caee848739096387abeda9152d53f601c812b41eaR38 removed the unnecessary type-check but intro'd the 🐛.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/675\r\n\r\n## What is the new behavior?\r\n\r\nOnly execute the method once.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "thundergolfer-issue-675",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update bazel.py (#696)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210365ac254a19ac28f741",
    "number": 695,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIf the attempt to build `zstd` locally fails, the error is hidden and somewhat non-obvious (it results in the tar extract failing). This can happen if, e.g., `make` is not installed on the local system.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nIf the `make` command fails, prints the `stderr` of that make command to the console.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "zstd_make_error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check return code of zstd make (#695)\n\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210366ac254a19ac28f742",
    "number": 694,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nUsing python packages with C modules, e.g. numpy, would fail when using\r\nthe \"static\" toolchain. See \r\nIssue Number: indygreg/python-build-standalone#124\r\n\r\n\r\n## What is the new behavior?\r\nWhen using the \"shared\" toolchain, importing numpy is successful\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "use_shared_msvc_toolchain",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use \"shared\" msvc hermetic toolchain (#694)\n\nUsing python packages with C modules, e.g. numpy, would fail when using\r\nthe \"static\" toolchain. See indygreg/python-build-standalone#124\r\n\r\nWhen using the \"shared\" toolchain, importing numpy is successful"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210367ac254a19ac28f743",
    "number": 693,
    "body": "\r\n\r\n## PR Checklist\r\n\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n> docs fix\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Documentation content changes\r\n\r\n\r\n## Other information\r\n\r\nUse a permalink instead of relative file path",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix example link in gazelle readme (#693)\n\nUse a permalink instead of relative file path"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210368ac254a19ac28f744",
    "number": 692,
    "body": "Signed-off-by: Ryan Northey <ryan@synca.io>\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [C] Other... Please describe:\r\n\r\nUpdates `pip-tools` to latest version \r\n\r\nThis may be a breaking change for some as more recent version of `pip-compile` enforce `-` separation of namespace package names (rather than `.`)\r\n\r\nOTOH it makes it usable with dependabot which uses (at least by default) a recent version  \r\n\r\n## What is the current behavior?\r\n\r\nCant be used with dependabot without a lot of unnecessary changes \r\n\r\n## What is the new behavior?\r\n\r\nHopefully at least - compiled files will be ~same as produced by dependabot so will not keep trying to revert each others changes\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [X] Yes - of sorts\r\n- [ ] No\r\n\r\n`requirements.txt` files compiled with `compile_pip_requirements` may need to be recompiled and/or fail existing test expectations\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "bump-pip-tools",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pip/deps: Bump `pip-tools` -> 6.6.0 (#692)\n\n* pip/deps: Bump `pip-tools` -> 6.6.0\r\n\r\nSigned-off-by: Ryan Northey <ryan@synca.io>\r\n\r\n* add-back-pep517\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210369ac254a19ac28f745",
    "number": 690,
    "body": "Fixes #689\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #689\r\n\r\n\r\n## What is the new behavior?\r\n\r\nIn the generated file `via -r filename` will be replaced with `via -r -`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\nThe existing generated tests will fail and a regeneration is required.\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix689",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pip_compile: remove external/workspace_name prefix from generated requirements.txt (#690)\n\n* pip_compile: remove external/workspace_name prefix from generated requirements.txt\r\n\r\n* add some tests and a demo impl of pip_deps\r\n\r\n* update pinned requirement\r\n\r\nCo-authored-by: Alex Eagle <alex@aspect.dev>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036aac254a19ac28f746",
    "number": 688,
    "body": "Something changed on Bazel CI (probably the version of buildifier) such that this suddenly broke on the latest nightly master despite us not changing anything.\r\n\r\nSee https://buildkite.com/bazel/rules-python-python/builds/2694#d430bd0c-f1cb-496c-81ae-6a9eae413f21",
    "head_branch": "lint",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace host cfg with exec (#688)\n\nSomething changed on Bazel CI (probably the version of buildifier) such that this suddenly broke on the latest nightly master despite us not changing anything"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036aac254a19ac28f747",
    "number": 686,
    "body": null,
    "head_branch": "f0rmiga/bump-go",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "bump: go from 1.17 to 1.18 (#686)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036bac254a19ac28f748",
    "number": 685,
    "body": "Fix a bug where path prefix could be stripped from the distinfo directory name.\r\n\r\nFixes bug #682\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Bugfix\r\n\r\n## What is the current behavior?\r\nstrip_prefixes was wrongly applied to files in .distinfo directory\r\n\r\nIssue Number: 682\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "issue682",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix issue #682 (#685)\n\nFix a bug where path prefix could be stripped from the distinfo directory name\r\n\r\nFixes bug #682"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036cac254a19ac28f749",
    "number": 679,
    "body": "Instead of printing something different in the pip_parse tooling, just suggest that users continue\r\nto run the repository rule, but check the output into their repo, then load from that instead\r\nof from the generated repository.\r\n\r\nThis is simpler than trying to work out what correct arguments to pass to the tool when running it\r\noutside of the pip_parse starlark context.\r\n\r\nFixes #677.",
    "head_branch": "i677",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "change approach for vendoring parsed requirements (#679)\n\nInstead of printing something different in the pip_parse tooling, just suggest that users continue\r\nto run the repository rule, but check the output into their repo, then load from that instead\r\nof from the generated repository.\r\n\r\nThis is simpler than trying to work out what correct arguments to pass to the tool when running it\r\noutside of the pip_parse starlark context."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036dac254a19ac28f74a",
    "number": 674,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nI have workspace A which uses uses these toolchains and want to load things from workspace A in workspace B. Workspace B does not use the new toolchains. Unfortunately, I'm not able to continue loading workspace A since I need the toolchain repositories defined or I'll fail to be able to load some `*.bzl` files. This change allows me to define the toolchain repositories without registering them so.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nUsers can now set `register_toolchains = False` on `python_register_toolchains` to define the toolchain repositories but not register them.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow toolchain registration to be optional (#674)\n\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036eac254a19ac28f74b",
    "number": 672,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "old",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036fac254a19ac28f74c",
    "number": 670,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nCurrently with the new hermetic toolchains some packages don't work like they used to when using system python. A potential solution is to build custom wheels that *do* work with the new toolchain and explicitly define them as an `http_archive`. Unfortunately, the repository you get (to me) is ambiguous since there's no `maybe` wrapper around the `whl_library` repositories.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change wraps `whl_library` repositories defined by `pip_parse` in maybe to guarantee repositories with the same name defined first in the workspace get used.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "maybe2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621036fac254a19ac28f74d",
    "number": 669,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [X] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nOn linux arm64, rules_python using the precompiled python toolchain fails:\r\n```\r\n(11:19:15) ERROR: An error occurred during the fetch of repository 'python3':\r\n   Traceback (most recent call last):\r\n\tFile \"/home/builder/.cache/bazel/_bazel_laz/99bd544777c52d5a0d8a66ea3b05626a/external/rules_python/python/private/toolchains_repo.bzl\", line 81, column 13, in _resolved_interpreter_os_alias_impl\r\n\t\tfail(\"No platform declared for host OS {} on arch {}\".format(os_name, arch))\r\nError in fail: No platform declared for host OS linux on arch aarch64\r\n```\r\nIssue Number: N/A\r\n\r\n## What is the new behavior?\r\nIt works on Linux arm64 now. `rules_python` tests pass on an m1 macbook pro in both OSX and Linux.\r\n\r\nSome tests on linux-arm64 fail because [bazel-integration-testing](https://github.com/bazelbuild/bazel-integration-testing/) is x86 only. Here's a [test.log](https://gist.github.com/f8cf2d157a4ef69ef971534a5d94ddbc\r\n) that includes running the failed tests.\r\n\r\nFunnily, these tests all pass on aarch64 OSX because of x86 binary emulation.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nI added `gen_python_config_settings()` to `python/versions.bzl` to avoid duplicating the constraints that were already codified in the file. I don't think it'd get much (any) use? I think most `rules_python` users would already have this style stuff setup in their repo ... though maybe I'm just biased by the monorepo I'm working on this for.",
    "head_branch": "linux-arm64-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "linux-arm64 python binary support (#669)\n\n* add aarch64-unknown-linux-gnu python binary release\r\n* unittests run & pass on my m1 macbook in OSX and Linux\r\n    * Note: most //examples/... tests fail when run due to lack of support\r\n      for non-x86 in https://github.com/bazelbuild/bazel-integration-testing/,\r\n      but those failing tests pass when run directly in the directory with\r\n      bazel\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210370ac254a19ac28f74e",
    "number": 666,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nQuite a few python packages have wheels that include C/C++ binaries built using python dev headers. Instead of needing to get these headers from an external source, it would be convenient to be able to get these straight from the toolchain.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change adds a `py_headers` `cc_library` target to toolchains that expose the python header files.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Exposed python headers from toolchains as cc_library (#666)\n\n* Exposed python headers in hermetic toolchains\r\n\r\n* Update naming"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210371ac254a19ac28f74f",
    "number": 665,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nCurrently this test fails on windows systems that don't support symlinks and use `\\r\\n` as the newline character for checkouts.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change updates `//python/pip_install/extract_wheels/lib:annotations_test` to work on these windows platforms by sanitizing some of the test inputs and using the `@rules_python//python/runfiles` library to locate test data.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "win",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix annotations_test on windows systems that don't support symlinks (#665)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210372ac254a19ac28f750",
    "number": 664,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nNot all toolchains are packaged the same. Even older releases of https://github.com/indygreg/python-build-standalone have different archive structures which are incompatible with how toolchains are currently setup.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change allows for a `strip_prefix` key to be added to `python_register_toolchains.tool_versions` so that users can use reasonably different archive layouts.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added support for custom `strip_prefix` args in toolchains (#664)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210373ac254a19ac28f751",
    "number": 663,
    "body": "I ran into a sitation that triggered this failure. I have version 5.0.0 installed, so it was confusing to see a message telling me my version was lower than 0.2.1.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\n\r\nError message clarification.\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nI received the following output from a build\r\n\r\n<pre><code>\r\n        File \"/private/var/tmp/_bazel_jdob/300f9ff46946083ee2e5c32c9a7995b7/external/rules_python/third_party/github.com/bazelbuild/bazel-skyli\r\nb/lib/versions.bzl\", line 92, column 17, in _check_bazel_version\r\n                fail(\"Current Bazel version is lower than 0.2.1; expected at least {}\".format(\r\nError in fail: Current Bazel version is lower than 0.2.1; expected at least 4.0.0\r\n</code></pre>\r\n\r\nRunning Bazel shows I have a higher version than 0.2.1:\r\n\r\n<pre><code>\r\nbazel version\r\nBuild label: 5.0.0\r\nBuild target: bazel-out/darwin-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Wed Jan 19 14:15:55 2022 (1642601755)\r\nBuild timestamp: 1642601755\r\nBuild timestamp as int: 1642601755\r\n</code></pre>\r\n\r\n## What is the new behavior?\r\n\r\nThe error message indicates that the version cannot be determined, rather than the message reflecting an old version.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n",
    "head_branch": "main",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210373ac254a19ac28f752",
    "number": 661,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nThe current pins of dependencies do not support python3.10. Now that `rules_python` can provide it's own toolchains, it feels like updating these dependencies is safer to do at this time.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nVarious packages were updated to support python3.10 as well as pick up some bug fixes and security patches.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated `pip`, `pkginfo`, `setuptools`, and `wheel`. (#661)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210374ac254a19ac28f753",
    "number": 659,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nThis broke my `stardoc` targets when I went to plug in the new toolchains to `pip_parse` since I have all that in macros that are called by other repositories.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis allows users to access `{name}_resolved_interpreter//:defs.bzl` as a target so `stardoc` can successfully generate documentation.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "stardoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose `defs.bzl` form `resolved_interpreter_os_alias` as a target (#659)\n\nCo-authored-by: Alex Eagle <alex.eagle@robinhood.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210375ac254a19ac28f754",
    "number": 658,
    "body": "Finally getting around to taking @andyscott off auto-enrolment in reviews. \r\n\r\nOthers should probably replace him, but that can be managed in a follow-up. For now, this saves me manually removing him from reviewers lists on new PRs.",
    "head_branch": "jonathon--update-codeowners-mar2022",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update CODEOWNERS. remove andy scott as maintainer (#658)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210376ac254a19ac28f755",
    "number": 657,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nIf you define your own `python_register_toolchains.tool_versions` for a version that is not a built in version, then the repository rule rejects it.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change allows users to define custom python versions that are not already registered in `@rules_python//python:versions.bzl`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow for custom python versions in `python_register_toolchains` (#657)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210377ac254a19ac28f756",
    "number": 656,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nCurrently documentation suggests that users write the following in their WORKSPACE file to produce a python toolchain\r\n```starlark\r\nload(\"@rules_python//python:repositories.bzl\", \"python_register_toolchains\")\r\n\r\npython_register_toolchains(\r\n    name = \"python3_9\",\r\n    # We recommend using the same version your team is already standardized on.\r\n    python_version = \"3.9\",\r\n)\r\n```\r\n\r\nThis then creates a \"magic\" repository called `python3_9_resolved_interpreter`, which is based on the `name` value. I call it magic because it's generally the next thing users want to use in their workspaces (needing to load dependencies via `pip_repository` rules) but will need to read docs to find the `_resolved_interpreter` name. I personally find it much more intuitive to allow anything that's called in a WORKSPACE and has a `name` parameter to actually create a repository matching that name. This makes things more discoverable and easier to maintain.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change introduces a second `resolved_interpreter_os_alias` rule which just uses the `name` attribute as it's name instead. This has the added benefit of allowing users to wrap the macro in `maybe` to avoid redundant calls to these repository rules.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "maybe2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow `python_register_toolchains.name` to be the resolved interpreter repo (#656)\n\n* Allow `python_register_toolchains.name` to be the resolved interpreter repo\r\n\r\n* Removed `{name}_resolved_interpreter` repository"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210377ac254a19ac28f757",
    "number": 655,
    "body": "fixes #608\r\n",
    "head_branch": "pip_parse_checkin",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Document how to vendor a pip_parse requirements.bzl file (#655)\n\n* Document how to vendor a pip_parse requirements.bzl file\r\n\r\nfixes #608\r\n\r\n* code review feedback"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210378ac254a19ac28f758",
    "number": 654,
    "body": "When providing a custom dict for the `tool_versions`, take this into account when selecting the filename and url.\r\n\r\nThis also changes the `get_release_url` function to allow for different URLs for each platform (where a platform is added after the initial release of the interpreter version).",
    "head_branch": "fix/custom_tools_versions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: take custom tools versions into account when selecting Python interpreter (#654)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210379ac254a19ac28f759",
    "number": 653,
    "body": null,
    "head_branch": "default-py",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "docs: avoid users on 3.10 by accident (#653)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037aac254a19ac28f75a",
    "number": 651,
    "body": "We don't put a 'v' prefix on tags, so we shouldn't trim a character from the tag\r\nAlso #650 had an incorrect url for stable SHAs :sweat:",
    "head_branch": "release2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "release: Fix release snippet (#651)\n\nWe don't put a 'v' prefix on tags, so we shouldn't trim a character from the tag.\r\nAlso #650 had an incorrect url for stable SHAs :sweat:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037bac254a19ac28f75b",
    "number": 650,
    "body": "Required per https://github.com/bazel-contrib/SIG-rules-authors/issues/11",
    "head_branch": "release2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: update GitHub archive url to produce stable SHA (#650)\n\nRequired per https://github.com/bazel-contrib/SIG-rules-authors/issues/11"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037bac254a19ac28f75c",
    "number": 648,
    "body": "The checksums were being evaluated on `bazel build` instead of `bazel run`.",
    "head_branch": "f0rmiga/lazy-fetch-checksums",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: lazy fetch checksums for toolchains (#648)\n\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037cac254a19ac28f75d",
    "number": 647,
    "body": "Allows setting the `TOOL_VERSIONS` and `base_url` from the repo rule.",
    "head_branch": "feat/override_tool_versions",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: allow overriding tool versions and base url for predefined Python interpreters (#647)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037dac254a19ac28f75e",
    "number": 645,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\nMore tests for the toolchains.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->",
    "head_branch": "f0rmiga/cpython-toolchain-native-modules",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037eac254a19ac28f75f",
    "number": 644,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "feat/add-requires-file",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037fac254a19ac28f760",
    "number": 643,
    "body": "Follow-up to https://github.com/bazelbuild/rules_python/pull/570#issuecomment-982143297\r\n",
    "head_branch": "tmps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621037fac254a19ac28f761",
    "number": 642,
    "body": null,
    "head_branch": "suggest_618",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Minor code review suggestions (#642)\n\n* Minor code review suggestions\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66210380ac254a19ac28f762",
    "number": 641,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix windows acceptance tests (#641)\n\n* Fix windows acceptance tests\r\n\r\n* test\r\n\r\n* todo: remove\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66210381ac254a19ac28f763",
    "number": 640,
    "body": "Fixes #631\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: 631\r\n\r\n## What is the new behavior?\r\n$(MAKE_VARIABLES) in py_wheel.version are recognized.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "issue631",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support configuration variables in py_wheel \"version\" attirbute. (#640)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210382ac254a19ac28f764",
    "number": 639,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nAnother batch of suggestions for https://github.com/bazelbuild/rules_python/pull/618\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210383ac254a19ac28f765",
    "number": 637,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nCurrently `*.dist-info/METADATA` files are excluded in `pip_repository` generated targets. This is incorrect as it's consumed by https://docs.python.org/3/library/importlib.metadata.html\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change allows `METADATA` files to be included in `pip_repository` generated targets, enabling the use of https://docs.python.org/3/library/importlib.metadata.html.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "dist_info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow METADATA files in pip_repository generated targets (#637)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210384ac254a19ac28f766",
    "number": 636,
    "body": "This gives us more python patch versions\r\n",
    "head_branch": "more_vers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow previous indygreg releases (#636)\n\nThis gives us more python patch versions"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66210384ac254a19ac28f767",
    "number": 635,
    "body": "This lets users and repository rules access the interpreter for whatever\r\nhost the repository is running on.",
    "head_branch": "toolchain_host",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: Provide a host platform alias (#635)\n\n* feat: Provide a host platform alias\r\n\r\nThis lets users and repository rules access the interpreter for whatever\r\nhost the repository is running on.\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "66210385ac254a19ac28f768",
    "number": 634,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nThis is another followup to https://github.com/bazelbuild/rules_python/pull/632\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n`WHEEL` files should be deterministic and could be used by certain packages.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "dist_info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow `*.dist-info/WHEEL` files into `pip_repository` generated targets (#634)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210386ac254a19ac28f769",
    "number": 633,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nGazelle doesn't support pip_parse incremental.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nGazelle supports pip_parse incremental.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "f0rmiga/pip_parse-gazelle-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: support pip_parse in Gazelle (#633)\n\n* feat: support pip_parse in Gazelle\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Apply suggestions from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210387ac254a19ac28f76a",
    "number": 632,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\nThis is a followup from https://github.com/bazelbuild/rules_python/pull/626 but allows a few files through\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "dist_info",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated pip_repository data ignore patterns (#632)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210387ac254a19ac28f76b",
    "number": 630,
    "body": "No breaking changes, just some performance improvements for the Gazelle extension.",
    "head_branch": "f0rmiga/improvements-gazelle",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: concurrent parsing for Gazelle (#630)\n\n* feat: concurrent parsing for Gazelle\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* rm: unused code\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* doc: why 2 workers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210388ac254a19ac28f76c",
    "number": 629,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nFor every use of `pip_repository`, a warning log will be printed about unused `package_annotations` when there aren't any (prints an empty list). There's no reason to print an empty list\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nA warning will only be printed about unsued annotations if there are actually some that are unused.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "noise",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "conditionally log unused annotations (#629)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210389ac254a19ac28f76d",
    "number": 628,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cython",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added windows support to hermetic toolchains (#628)\n\n* Added windows support to hermetic toolchains\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": true,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6621038aac254a19ac28f76e",
    "number": 627,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nIf a `compile_pip_requirements` target is setup in a separate package than where the `requirements_in` file is located, then an incorrect custom compile command is written into the `requirements_txt` file.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change fixes that so no matter where the `compile_pip_requirements` target is defined, it will always correctly be reflected in the generated files when running the `*.update` target.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "compile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed incorrect custom compile commands from `compile_pip_requirements` (#627)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621038bac254a19ac28f76f",
    "number": 626,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\nThis is a continuation of\r\n- https://github.com/bazelbuild/rules_python/pull/570#issuecomment-974237333\r\n- https://github.com/bazelbuild/rules_python/pull/618#discussion_r806945198\r\n\r\n\r\n## What is the new behavior?\r\nThe `dist-info` directory of a wheel is excluded from the `py_library` targets as they may contain volatile data.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "data",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Exclude dist-info data from pip_repository targets (#626)\n\n* Exclude dist-info data from pip_repository targets\r\n\r\n* recursive exclusion of dist-info\r\n\r\nCo-authored-by: Matt Mackay <mattem@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621038cac254a19ac28f770",
    "number": 623,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nCurrently you cannot pass a constraint file to pip_repository \r\n\r\n\r\n## What is the new behavior?\r\n\r\nYou can pass a constraints file to pip_repository\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "constraints",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621038cac254a19ac28f771",
    "number": 621,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "buildifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed buildifier defects (#621)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621038dac254a19ac28f772",
    "number": 620,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nhttps://github.com/bazelbuild/rules_python/pull/615 covers the coverage being removed from the `examples` targets. This change now enables https://github.com/bazelbuild/rules_python/pull/597 to be merged to fix Windows CI.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Removed examples that are not platform agnostic (#620)\n\n* Removed examples that are not platform agnostic\r\n\r\n* Update examples/pip_install/requirements.in\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update examples/pip_parse/requirements.txt\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Delete unused filegroup\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621038eac254a19ac28f773",
    "number": 618,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/293.\r\n",
    "head_branch": "f0rmiga/cpython-toolchain",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "feat: cpython toolchains (#618)\n\n* feat: cpython toolchains for linux and macos\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: compile zstd if missing\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: buildifier\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: make python_repositories reproducible\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* rename: python_repositories -> python_repository\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: linter\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: make interpreter files publicly visible\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add files to py_runtime\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Account for some platforms not having all versions\r\n\r\n* Added windows support to hermetic toolchains (#628)\r\n\r\n* Added windows support to hermetic toolchains\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Update python/repositories.bzl\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: simplify logic for release urls\r\n\r\nAlso, added a helper target to print the release hashes.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: Provide a host platform alias (#635)\r\n\r\n* feat: Provide a host platform alias\r\n\r\nThis lets users and repository rules access the interpreter for whatever\r\nhost the repository is running on.\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: files excludes\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: macOS dislikes --recursive\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: buildifier issues\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Allow previous indygreg releases (#636)\r\n\r\nThis gives us more python patch versions\r\n\r\n* fix: put back zstd support for older releases\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: hash calculator\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: use hermetic interpreter with pip_parse and pip_install\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add missing attrs back for zstd\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: expose zstd attributes\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: normalize OS names\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: linting issues\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: support windows in the aliases\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: linting issues\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: windows python.exe instead of python3.exe\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: use consts for OS names\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: always use latest toolchain for test\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: expose versions.bzl\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: move toolchain tests out of private\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: acceptance tests for the toolchains\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: rewrite test in py to work on windows\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: README example\r\n\r\nCo-authored-by: UebelAndre <github@uebelandre.com>\r\n\r\n* fix: use toolchain to run acceptance tests\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: use matrix for acceptance tests\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: support acceptance_tests on windows\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: alias for pip\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix?: include call to windows cmd\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Fix windows acceptance tests (#641)\r\n\r\n* Fix windows acceptance tests\r\n\r\n* test\r\n\r\n* todo: remove\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: polishing Windows testing support\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: unset py2_runtime\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* rename: host -> resolved_interpreter\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* doc: add reference to quirks in python-build-standalone\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: allow a distutils.cfg to be passed\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: buildifier (again)\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* Minor code review suggestions (#642)\r\n\r\n* Minor code review suggestions\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: depset concat\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nCo-authored-by: Alex Eagle <alex@aspect.dev>\r\nCo-authored-by: UebelAndre <github@uebelandre.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621038fac254a19ac28f774",
    "number": 616,
    "body": "This bumps the version of bazel used locally when building to 4.2.0. This version is the first bazel version in 4.x that supports M1 correctly.\r\nThis bump doesn't change what is expected from users. However, should it?",
    "head_branch": "chore/bazel410",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: bump local verison of bazel used to 4.1.0 (#616)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210390ac254a19ac28f775",
    "number": 615,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nhttps://github.com/bazelbuild/rules_python/pull/598 is too big to review so this PR breaks out a component of it.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThe tests in the `pip_parse` and `pip_install` examples are not cross platform since `sphinx` has differing dependency graphs between windows and linux/macos. This introduces a new integration test which continues to test important functionality on linux and macos until a cross platform solution is found.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added integration test for testing nuances of pip_repository macros (#615)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210391ac254a19ac28f776",
    "number": 614,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nhttps://github.com/bazelbuild/rules_python/pull/598 is too big to review so this PR breaks out a component of it.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis updates tests and examples to use a cross platform way of accessing runfiles. This is required to fix tests on windows.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "runfiles",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use `@rules_python//python/runfiles` for examples and tests (#614)\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210392ac254a19ac28f777",
    "number": 613,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nI ran into an issue where `pip_repository` rules would fail whenever flags were added to `requirements.txt` (or `requirements_lock`). With the diff below, the following exception occurs when running `bazel test //...` in any workspace (here I just happen to have chosen an example at random).\r\n```diff\r\ndiff --git a/examples/pip_repository_annotations/requirements.txt b/examples/pip_repository_annotations/requirements.txt\r\nindex 51d1dfc..db762cb 100644\r\n--- a/examples/pip_repository_annotations/requirements.txt\r\n+++ b/examples/pip_repository_annotations/requirements.txt\r\n@@ -4,6 +4,8 @@\r\n #\r\n #    bazel run //:requirements.update\r\n #\r\n+--extra-index-url https://pypi.python.org/simple/\r\n+\r\n wheel==0.37.1 \\\r\n     --hash=sha256:4bdcd7d840138086126cd09254dc6195fb4fc6f01c050a1d7236f2630db1d22a \\\r\n     --hash=sha256:e9a504e793efbca1b8e0e9cb979a249cf4a0a7b5b8c9e8b65a5e39d49529c1c4\r\n```\r\n```\r\nERROR: no such package '@pypi//': rules_python failed:  (Traceback (most recent call last):\r\n  File \"/usr/local/Cellar/python@3.9/3.9.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/runpy.py\", line 197, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/usr/local/Cellar/python@3.9/3.9.9/Frameworks/Python.framework/Versions/3.9/lib/python3.9/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/private/var/tmp/_bazel_user/1364d13d3d56e9f951a1c2e7037fc439/external/rules_python/python/pip_install/parse_requirements_to_bzl/__main__.py\", line 5, in <module>\r\n    main()\r\n  File \"/private/var/tmp/_bazel_user/1364d13d3d56e9f951a1c2e7037fc439/external/rules_python/python/pip_install/parse_requirements_to_bzl/__init__.py\", line 213, in main\r\n    install_requirements = parse_install_requirements(\r\n  File \"/private/var/tmp/_bazel_user/1364d13d3d56e9f951a1c2e7037fc439/external/rules_python/python/pip_install/parse_requirements_to_bzl/__init__.py\", line 43, in parse_install_requirements\r\n    extra_pip_args.extend(shlex.split(line))\r\nAttributeError: 'str' object has no attribute 'extend'\r\n)\r\n```\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis fixes this exception by correcting the regression introduced in https://github.com/bazelbuild/rules_python/pull/589 and adds regression tests.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed extra_pip_arg parsing error in pip_repository rules. (#613)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210392ac254a19ac28f778",
    "number": 612,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nUsers trying to wrap `pip_parse` or `pip_install` with [maybe](https://docs.bazel.build/versions/4.0.0/repo/utils.html#maybe) will run into a failure for attempting to use the rule recursively. This can be fixed by avoiding `maybe` in these macro repository rules.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n[maybe](https://docs.bazel.build/versions/4.0.0/repo/utils.html#maybe) can now be used with `pip_parse` and `pip_install`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "maybe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210393ac254a19ac28f779",
    "number": 611,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nWith the introduction of the `gazelle` stuff, I can no longer generate docs in my projects. All I really want is the python `bzl_library` target and think it'd make sense to allow it to be public.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change fixes the use of `stardoc` for generating documentation in external repositories that uses `rules_python` and *does not* use `bazel_gazelle`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "bzl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make python only `bzl_library` target publicly visible (#611)\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210394ac254a19ac28f77a",
    "number": 610,
    "body": null,
    "head_branch": "f0rmiga/bump-go",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "bump: go version from 1.16 to 1.17.6 (#610)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210395ac254a19ac28f77b",
    "number": 606,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis is a minor cleanup to help users easily identify what rules or macros are actually in use.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210396ac254a19ac28f77c",
    "number": 605,
    "body": "Reviewd #601 after it merged. Thanks for fixing this long outstanding annoyance 🙂  @UebelAndre \r\n\r\nIf I understand this code correctly the filegroup is only consumed by `//python/pip_install/private:srcs_module` and so you don't need public visibility on the target.",
    "head_branch": "jonathon--pr601-patch",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "restrict visibility on filegroup target only consumed in 1 place (#605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210396ac254a19ac28f77d",
    "number": 604,
    "body": "Follow up for #581 fixing undefined name.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hrfuller-patch-2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix undefined name in purelib.py (#604)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210397ac254a19ac28f77e",
    "number": 601,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n`pip_repository` rules currently only track the root of `rules_python` in order to determine the location of the necessary python files for rendering BUILD files for python packages. Because only the BUILD file is tracked, the repository rule is never made aware of the python sources. This results in situations where the `@rules_python//python/pip_install` source code may be changed but existing `pip_repository` rules will not be updated. \r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change generates a list of source files and passes them to the `pip_repository` rules so it can react to changes made. Now if a change is made to the python code, the repository rule will correctly be re-triggerd.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "react",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "changes to pip_repository source files now re-trigger the repo rule (#601)\n\n* changes to pip_repository source files now re-trigger the repo rule\r\n\r\n* update diff test message.\r\n\r\n* added note about auto-gen.\r\n\r\n* Updated docs\r\n\r\n* remove unnecessary snippet\r\n\r\n* installer -> updater\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210398ac254a19ac28f77f",
    "number": 599,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added `.gitignore` files to example directories (#599)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210399ac254a19ac28f780",
    "number": 598,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nCurrently the integration test runner does not report errors for windows.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThe test runner has been fixed and the examples/tests updated to be compatible with windows.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nThis PR includes the following which are both required to get passing windows builds.\r\n- https://github.com/bazelbuild/rules_python/pull/597\r\n- https://github.com/bazelbuild/rules_python/pull/595\r\n",
    "head_branch": "windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed integration test runner (#598)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039aac254a19ac28f781",
    "number": 597,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThe error code of the invocation of \"bazel shutdown\" was queried to\r\nascertain the result of \"bazel test\". \r\n\r\nIssue Number: #585\r\n\r\n\r\n## What is the new behavior?\r\nNow, if the invocation of any\r\nbazel command fails, the test_runner.py script will return code 3.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "propagate_test_return_code",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039bac254a19ac28f782",
    "number": 596,
    "body": "Follow up for typo in #594 \r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hrfuller-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix buildozer command for substituting deps (#596)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039bac254a19ac28f783",
    "number": 595,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nPR #529 updated `click` to a version which depends on `colorama` on Windows. This broke the generation of a `requirements.txt` lock file using the `compile_pip_requirements` rule on windows. \r\nIssue Number: #529 \r\n\r\n\r\n## What is the new behavior?\r\nThe generation of a `requirements.txt` lock file using the `compile_pip_requirements` rule on windows now works\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "fix_compile_pip_requirements_on_windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix compile_pip_requirements on windows (#595)\n\nPR #529 updated `click` to a version which depends on `colorama` on\r\nWindows. This broke `compile_pip_requirements` on windows. This commit\r\nresolves the issue by adding colorama as a dependency.\r\n\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039cac254a19ac28f784",
    "number": 594,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/414\r\n\r\nCurrently the documentation recommends only using `requirement()` to access the `py_library` targets generated by `pip_install` and `pip_parse`.\r\n\r\n## What is the new behavior?\r\nUpdate the documentation to specify that using `requirement()` is optional, and that accessing the labels directly is ok.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "requirements-fun-docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README to say that using `requirement()` is optional (#594)\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039dac254a19ac28f785",
    "number": 593,
    "body": null,
    "head_branch": "fix_release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix release automation: script was not chmod u+x (#593)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039eac254a19ac28f786",
    "number": 592,
    "body": null,
    "head_branch": "fix_release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add missing file for release automation (#592)\n\nThis tells Bazel where to put caches so that it lines up with GitHub Actions restoring them to the next worker"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039fac254a19ac28f787",
    "number": 591,
    "body": null,
    "head_branch": "fix_release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: release tags don't include v prefix (#591)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621039fac254a19ac28f788",
    "number": 590,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\nFixed broken pre-commit hook\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/pull/583\r\n\r\n\r\n## What is the new behavior?\r\nIn https://github.com/bazelbuild/rules_python/pull/583, the commit hooks were added but they were fighting each other. This change fixes it so they don't both always fail.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix broken pre-commit hook (#590)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a0ac254a19ac28f789",
    "number": 589,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nThis change adds an `annotations` field to `pip_parse` and `pip_install` which allow users to make changes to generated python targets. The goal of this functionality is to allow users to filter out any non-determinsitic behavior they may find in their dependencies to resolve remote cache issues.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/571\r\n\r\n\r\n## What is the new behavior?\r\n\r\nBelow is an example of `package_annotation`. The rule allows us to add additional targets or set additional flags to packages like `wheel` in the example.\r\n\r\n```python\r\nload(\"@rules_python//python:pip.bzl\", \"package_annotation\", \"pip_parse\")\r\n\r\npip_parse(\r\n    name = \"pip_parsed\",\r\n    annotations = {\r\n        \"wheel\": package_annotation(\r\n            build_content = \"\"\"\\\r\nload(\"@bazel_skylib//rules:write_file.bzl\", \"write_file\")\r\nwrite_file(\r\n    name = \"generated_file\",\r\n    out = \"generated_file.txt\",\r\n    content = [\"Hello world from build content file\"],\r\n)\r\n\"\"\",\r\n            copy_executables = {\"@pip_repository_annotations_example//:data/copy_executable.py\": \"copied_content/executable.py\"},\r\n            copy_files = {\"@pip_repository_annotations_example//:data/copy_file.txt\": \"copied_content/file.txt\"},\r\n            data = [\":generated_file\"],\r\n            data_exclude_glob = [\"*.dist-info/RECORD\"],\r\n        ),\r\n    },\r\n    requirements_lock = \"//:requirements.txt\",\r\n)\r\n\r\n```\r\n\r\nThe annotations here introduce the following changes to the `BUILD` file\r\n```diff\r\ndiff --git a/BUILD.pip_parsed_wheel.bazel b/BUILD.pip_parsed_wheel.bazel\r\nindex 74dbeb0..8e3f483 100644\r\n--- a/BUILD.pip_parsed_wheel.bazel\r\n+++ b/BUILD.pip_parsed_wheel.bazel\r\n@@ -22,7 +22,7 @@ filegroup(\r\n py_library(\r\n     name = \"pkg\",\r\n     srcs = glob([\"**/*.py\"], exclude=[], allow_empty = True),\r\n-    data = [] + glob([\"**/*\"], exclude=[\"**/* *\", \"**/*.py\", \"**/*.pyc\", \"**/__pycache__/**\", \"*.whl\", \"BUILD.bazel\", \"WORKSPACE\", \"rules_python_wheel_entry_point*.py\"]),\r\n+    data = [\":generated_file\", \"copied_content/executable.py\", \"copied_content/file.txt\"] + glob([\"**/*\"], exclude=[\"**/* *\", \"**/*.py\", \"**/*.pyc\", \"**/__pycache__/**\", \"*.dist-info/RECORD\", \"*.whl\", \"BUILD.bazel\", \"WORKSPACE\", \"rules_python_wheel_entry_point*.py\"]),\r\n     # This makes this directory a top-level in the python import\r\n     # search path for anything that depends on this.\r\n     imports = [\".\"],\r\n@@ -38,3 +38,24 @@ py_binary(\r\n     imports = [\".\"],\r\n     deps = [\"pkg\"],\r\n )\r\n+\r\n+copy_file(\r\n+    name = \"copied_content/file.txt.copy\",\r\n+    src = \"@pip_repository_annotations_example//:data/copy_file.txt\",\r\n+    out = \"copied_content/file.txt\",\r\n+    is_executable = False,\r\n+)\r\n+\r\n+copy_file(\r\n+    name = \"copied_content/executable.py.copy\",\r\n+    src = \"@pip_repository_annotations_example//:data/copy_executable.py\",\r\n+    out = \"copied_content/executable.py\",\r\n+    is_executable = True,\r\n+)\r\n+\r\n+load(\"@bazel_skylib//rules:write_file.bzl\", \"write_file\")\r\n+write_file(\r\n+    name = \"generated_file\",\r\n+    out = \"generated_file.txt\",\r\n+    content = [\"Hello world from build content file\"],\r\n+)\r\n```\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cache",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added support for annotating rendered pip dependencies (#589)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a1ac254a19ac28f78a",
    "number": 588,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\nThis is a follow up from https://github.com/bazelbuild/rules_python/pull/582\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAnother implementation of `whl_library` can be found in `pip_repository.bzl`\r\nhttps://github.com/bazelbuild/rules_python/blob/1152bd132806a64b174768e42bfb5b89553194f6/python/pip_install/pip_repository.bzl#L339-L346\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "legacy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove forgotten fragments of `pip_import` rule. (#588)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a2ac254a19ac28f78b",
    "number": 587,
    "body": "Instead of building our own .tgz file with release artifacts, just let GitHub do it.\r\nMakes the release instructions much quicker, and doesn't require a review pass for releases, so we'll do them more frequently.\r\n\r\nNote that GitHub does serve a stable SHA, and automated release notes include the workspace snippet with the SHA.\r\nThis produces an archive of 338K that users will fetch. Our previous release was 45K, so this is an order of magnitude larger since our test code, examples, and documentation are now included. However IMO it's not that important, compared with simpler maintenance.\r\n\r\nThis follows the new example from the rules authors SIG: https://github.com/bazel-contrib/rules-template\r\n\r\nfixes #586\r\n",
    "head_branch": "release2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Simplify release (#587)\n\nInstead of building our own .tgz file with release artifacts, just let GitHub do it.\r\nMakes the release instructions much quicker, and doesn't require a review pass for releases, so we'll do them more frequently.\r\nfixes #586"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a3ac254a19ac28f78c",
    "number": 585,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\nThis change includes all the necessary fixes and updates to support enabling CI for windows platforms.\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/2\r\nI don't know if this closes https://github.com/bazelbuild/rules_python/issues/2 but seems related\r\n\r\n\r\n## What is the new behavior?\r\nUpdated rules and tests to support windows platforms.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\ncloses https://github.com/bazelbuild/rules_python/pull/572\r\n",
    "head_branch": "windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enabled CI for Windows (#585)\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a4ac254a19ac28f78d",
    "number": 584,
    "body": "Bumps [gopkg.in/yaml.v2](https://github.com/go-yaml/yaml) from 2.2.2 to 2.2.8.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/53403b58ad1b561927d19068c655246f2db79d48\"><code>53403b5</code></a> Optimize cases with long potential simple_keys (<a href=\"https://github-redirect.dependabot.com/go-yaml/yaml/issues/555\">#555</a>)</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/1f64d6156d11335c3f22d9330b0ad14fc1e789ce\"><code>1f64d61</code></a> Fix issue in simple_keys improvements (<a href=\"https://github-redirect.dependabot.com/go-yaml/yaml/issues/548\">#548</a>)</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/a95acef3719e5e9f7614cc90a119dee4699291eb\"><code>a95acef</code></a> Update travis config to use latest go versions (<a href=\"https://github-redirect.dependabot.com/go-yaml/yaml/issues/540\">#540</a>)</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/36babc3691687601732d9e2571b698be4116469a\"><code>36babc3</code></a> Port stale simple_keys fix to v2 (<a href=\"https://github-redirect.dependabot.com/go-yaml/yaml/issues/543\">#543</a>)</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/770b8dae4cf00919e5eafffbd8d58186294b61b5\"><code>770b8da</code></a> Fix Decorder doc typo (<a href=\"https://github-redirect.dependabot.com/go-yaml/yaml/issues/494\">#494</a>)</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/1ed59511881fdb008c1e618e9f219ce0704e658e\"><code>1ed5951</code></a> Add Go 1.10-13 to travis setup.</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/f90ceb4f409096b60e2e9076b38b304b8246e5fa\"><code>f90ceb4</code></a> Fix check for non-map alias merging in v2 (<a href=\"https://github-redirect.dependabot.com/go-yaml/yaml/issues/529\">#529</a>)</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/970885f01c8bc1fecb7ab1c8ce8e7609bda45530\"><code>970885f</code></a> Trivial style tuning on last change.</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/f221b8435cfb71e54062f6c6e99e9ade30b124d5\"><code>f221b84</code></a> Improve heuristics preventing CPU/memory abuse (<a href=\"https://github-redirect.dependabot.com/go-yaml/yaml/issues/515\">#515</a>)</li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/bb4e33bf68bf89cad44d386192cbed201f35b241\"><code>bb4e33b</code></a> Add logic to catch cases of alias abuse.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/go-yaml/yaml/compare/v2.2.2...v2.2.8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=gopkg.in/yaml.v2&package-manager=go_modules&previous-version=2.2.2&new-version=2.2.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/go_modules/gopkg.in/yaml.v2-2.2.8",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump gopkg.in/yaml.v2 from 2.2.2 to 2.2.8 (#584)\n\nBumps [gopkg.in/yaml.v2](https://github.com/go-yaml/yaml) from 2.2.2 to 2.2.8.\r\n- [Release notes](https://github.com/go-yaml/yaml/releases)\r\n- [Commits](https://github.com/go-yaml/yaml/compare/v2.2.2...v2.2.8)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: gopkg.in/yaml.v2\r\n  dependency-type: direct:production\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a4ac254a19ac28f78e",
    "number": 583,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\nThis PR is a minor cleanup I've pulled out of another set of changes I'm working on. I noticed in quite a few files that there were some unused import warnings poping up around the code base so I'd fixed those and ran [isort](https://pycqa.github.io/isort/index.html) to get some \"import-exclusive\" formatting to reduce as much noise in git history as possible.\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [x] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nImport statements are unsorted and include unused imports. \r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nImports are sorted to try and promote good code hygiene.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "cleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "sorted imports statements and apply \"black\" formatting (#583)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a5ac254a19ac28f78f",
    "number": 582,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nAs described in https://github.com/bazelbuild/rules_python/issues/436#issuecomment-985699038, maybe it's time to clean out the old pip repository rules. In investigating cache invalidation issues. I've often been confused by what code path was being used since the two are quite similar.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/436#issuecomment-985699038\r\n\r\n\r\n## What is the new behavior?\r\nThis change deletes some old rules that have long since been considered legacy and have modern replacements that are actively being developed.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "legacy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Deleted legacy pip_import rule (#582)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a6ac254a19ac28f790",
    "number": 581,
    "body": "Merge purelib dir into toplevel even if purelib and toplevel have\r\nsubdirs with the same name. See tensorflow-io for an example of\r\na package which was not installed correctly by rules_python before this\r\nchange.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nIn pip_install and pip_parse rule if you try to install a wheel which has Root-Is-Purelib: false (tensorflow-io is an example), python sources in the .data/purelib dir will not be merged into the root because we skip children of the purelib which have the same basename as a directory in the top level of the wheel.\r\n\r\nWhat rules_python does currently: https://gist.github.com/hrfuller/ccc0420cd5b72b38f6151fa1b5c811e0\r\n\r\nAfter running the example open up the created repo in the bazel output base, and notice that purelib directory is not merged.\r\n\r\nThis leads to issues where tensorflow_io python sources cannot be imported.\r\n\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nDescendants of the purelib directory will be merged with existing directories in the top level, but will not overwrite any files in the toplevel. This is the same thing that pip does when you install a wheel.\r\n\r\nTo verify this run\r\n\r\n`pip install --no-deps --only-binary :all: --target tfio tensorflow-io==0.19.0`\r\n\r\nCompare the shape of the tfio directory with the external repo bazel generated using the gist above.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "merge-purelib-into-root",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make spread_purelib_into_root behave like the wheel was installed by (#581)\n\npip.\r\n\r\nMerge purelib dir into toplevel even if purelib and toplevel have\r\nsubdirs with the same name. See tensorflow-io for an example of\r\na package which was not installed correctly by rules_python before this\r\nchange."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a7ac254a19ac28f791",
    "number": 579,
    "body": "SUMMARY\r\nInclude the file path so it's easier to find the manifest that's causing issues\r\n\r\nTEST PLAN\r\nBreak a manifest file locally, run gazelle, enjoy the improved message:\r\n\r\n```\r\n$ bazel run //:update_build_files\r\nINFO: Invocation ID: e38c7bfb-1566-4f58-9485-efe66594e0d5\r\nINFO: Analyzed target //:update_build_files (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nTarget //:update_build_files up-to-date:\r\n  .bazel/bin/update_build_files-runner.bash\r\n  .bazel/bin/update_build_files\r\nINFO: Elapsed time: 0.323s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\nINFO: Build completed successfully, 1 total action\r\ngazelle: failed to load Gazelle manifest at /my-project/gazelle_python.yaml: failed to decode manifest file: EOF\r\n```",
    "head_branch": "fix/gazelle_manifest_err",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix(gazelle): include file path in manifest parsing error message (#579)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a8ac254a19ac28f792",
    "number": 578,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What has changes\r\n\r\nThe current `modules_mapping` is a repository rule. This changeset moves it to be a regular rule, consuming the wheels from pip_install instead of re-downloading and building (when necessary) them twice.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nSince the Gazelle plugin is not contained in any release, I don't consider it to be a breaking change.\r\n",
    "head_branch": "simplify-modules-mapping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "refactor: make modules_mapping a regular rule (#578)\n\n* refactor: make modules_mapping a regular rule\r\n\r\n* fix: remove unnecessary comment\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a9ac254a19ac28f793",
    "number": 575,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nSome python packages provide executable scripts that are not tracked as entry points in the wheel. These come from [setup.py](https://docs.python.org/3/distutils/setupscript.html#installing-scripts) and are only created once the package is installed (`setup.py` runs). I'm trying to find a way to use those scripts in other Bazel rules I've written.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe changes here introduce a `setup_py_script` macro to `pip_parse` and `pip_install` that are similar to `entry_point` but specifically access scripts that created by `setup.py` scripts. This change saves users from having to write their own workaround by accessing the wheel or the output `*.data` directory contents directly.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "setup-py",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103a9ac254a19ac28f794",
    "number": 573,
    "body": "Only floating-point objects have an is_integer\r\nmethod (cf. https://docs.python.org/3.10/library/stdtypes.html#typesnumeric),\r\nso this will actually raise an AttributeError whenever the main function\r\nreturns an integer or None.  sys.exit works just fine with any argument type,\r\nso there’s no need to check anything.  The example at\r\nhttps://packaging.python.org/specifications/entry-points/#use-for-scripts also\r\ndoesn’t contain a type check.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "entrypoint-retcode",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove return code type check. (#573)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103aaac254a19ac28f795",
    "number": 572,
    "body": "The zipfile module always uses forward slashes, so we shouldn't use\r\nos.path.join here.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nEntry points aren't found on Windows\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nEntry points should be found on Windows (haven't fully tested it though)\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "entrypoint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix entry point discovery on Windows. (#572)\n\nThe zipfile module always uses forward slashes, so we shouldn't use\r\nos.path.join here."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103abac254a19ac28f796",
    "number": 570,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nI noticed in some of my builds were getting a bunch of unexpected cache misses and found that some pypi dependencies were including some `__pycache__` contents and left-over `*.pyc` files. I don't believe these are needed or should ever be used by the Bazel rules.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis PR prevents these files from being included in the `pip_parse` and `pip_install` generated `py_library` targets.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "pyc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ignore `__pycache__` contents and `*.pyc` files in external dependencies (#570)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103acac254a19ac28f797",
    "number": 569,
    "body": "Bumps [pip](https://github.com/pypa/pip) from 9.0.3 to 21.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/pip/blob/main/NEWS.rst\">pip's changelog</a>.</em></p>\n<blockquote>\n<h1>21.1 (2021-04-24)</h1>\n<h2>Process</h2>\n<ul>\n<li>Start installation scheme migration from <code>distutils</code> to <code>sysconfig</code>. A\nwarning is implemented to detect differences between the two implementations to\nencourage user reports, so we can avoid breakages before they happen.</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Add the ability for the new resolver to process URL constraints. (<code>[#8253](https://github.com/pypa/pip/issues/8253) &lt;https://github.com/pypa/pip/issues/8253&gt;</code>_)</li>\n<li>Add a feature <code>--use-feature=in-tree-build</code> to build local projects in-place\nwhen installing. This is expected to become the default behavior in pip 21.3;\nsee <code>Installing from local packages &lt;https://pip.pypa.io/en/stable/user_guide/#installing-from-local-packages&gt;</code>_\nfor more information. (<code>[#9091](https://github.com/pypa/pip/issues/9091) &lt;https://github.com/pypa/pip/issues/9091&gt;</code>_)</li>\n<li>Bring back the &quot;(from versions: ...)&quot; message, that was shown on resolution failures. (<code>[#9139](https://github.com/pypa/pip/issues/9139) &lt;https://github.com/pypa/pip/issues/9139&gt;</code>_)</li>\n<li>Add support for editable installs for project with only setup.cfg files. (<code>[#9547](https://github.com/pypa/pip/issues/9547) &lt;https://github.com/pypa/pip/issues/9547&gt;</code>_)</li>\n<li>Improve performance when picking the best file from indexes during <code>pip install</code>. (<code>[#9748](https://github.com/pypa/pip/issues/9748) &lt;https://github.com/pypa/pip/issues/9748&gt;</code>_)</li>\n<li>Warn instead of erroring out when doing a PEP 517 build in presence of\n<code>--build-option</code>. Warn when doing a PEP 517 build in presence of\n<code>--global-option</code>. (<code>[#9774](https://github.com/pypa/pip/issues/9774) &lt;https://github.com/pypa/pip/issues/9774&gt;</code>_)</li>\n</ul>\n<h2>Bug Fixes</h2>\n<ul>\n<li>Fixed <code>--target</code> to work with <code>--editable</code> installs. (<code>[#4390](https://github.com/pypa/pip/issues/4390) &lt;https://github.com/pypa/pip/issues/4390&gt;</code>_)</li>\n<li>Add a warning, discouraging the usage of pip as root, outside a virtual environment. (<code>[#6409](https://github.com/pypa/pip/issues/6409) &lt;https://github.com/pypa/pip/issues/6409&gt;</code>_)</li>\n<li>Ignore <code>.dist-info</code> directories if the stem is not a valid Python distribution\nname, so they don't show up in e.g. <code>pip freeze</code>. (<code>[#7269](https://github.com/pypa/pip/issues/7269) &lt;https://github.com/pypa/pip/issues/7269&gt;</code>_)</li>\n<li>Only query the keyring for URLs that actually trigger error 401.\nThis prevents an unnecessary keyring unlock prompt on every pip install\ninvocation (even with default index URL which is not password protected). (<code>[#8090](https://github.com/pypa/pip/issues/8090) &lt;https://github.com/pypa/pip/issues/8090&gt;</code>_)</li>\n<li>Prevent packages already-installed alongside with pip to be injected into an\nisolated build environment during build-time dependency population. (<code>[#8214](https://github.com/pypa/pip/issues/8214) &lt;https://github.com/pypa/pip/issues/8214&gt;</code>_)</li>\n<li>Fix <code>pip freeze</code> permission denied error in order to display an understandable error message and offer solutions. (<code>[#8418](https://github.com/pypa/pip/issues/8418) &lt;https://github.com/pypa/pip/issues/8418&gt;</code>_)</li>\n<li>Correctly uninstall script files (from setuptools' <code>scripts</code> argument), when installed with <code>--user</code>. (<code>[#8733](https://github.com/pypa/pip/issues/8733) &lt;https://github.com/pypa/pip/issues/8733&gt;</code>_)</li>\n<li>New resolver: When a requirement is requested both via a direct URL\n(<code>req @ URL</code>) and via version specifier with extras (<code>req[extra]</code>), the\nresolver will now be able to use the URL to correctly resolve the requirement\nwith extras. (<code>[#8785](https://github.com/pypa/pip/issues/8785) &lt;https://github.com/pypa/pip/issues/8785&gt;</code>_)</li>\n<li>New resolver: Show relevant entries from user-supplied constraint files in the\nerror message to improve debuggability. (<code>[#9300](https://github.com/pypa/pip/issues/9300) &lt;https://github.com/pypa/pip/issues/9300&gt;</code>_)</li>\n<li>Avoid parsing version to make the version check more robust against lousily\ndebundled downstream distributions. (<code>[#9348](https://github.com/pypa/pip/issues/9348) &lt;https://github.com/pypa/pip/issues/9348&gt;</code>_)</li>\n<li><code>--user</code> is no longer suggested incorrectly when pip fails with a permission\nerror in a virtual environment. (<code>[#9409](https://github.com/pypa/pip/issues/9409) &lt;https://github.com/pypa/pip/issues/9409&gt;</code>_)</li>\n<li>Fix incorrect reporting on <code>Requires-Python</code> conflicts. (<code>[#9541](https://github.com/pypa/pip/issues/9541) &lt;https://github.com/pypa/pip/issues/9541&gt;</code>_)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/pip/commit/2b2a268d25963727c2a1c805de8f0246b9cd63f6\"><code>2b2a268</code></a> Bump for release</li>\n<li><a href=\"https://github.com/pypa/pip/commit/ea761a6575f37b90cf89035ee8be3808cf872184\"><code>ea761a6</code></a> Update AUTHORS.txt</li>\n<li><a href=\"https://github.com/pypa/pip/commit/2edd3fdf2af2f09dce5085ef0eb54684b4f9bc04\"><code>2edd3fd</code></a> Postpone a deprecation to 21.2</li>\n<li><a href=\"https://github.com/pypa/pip/commit/3cccfbf169bd35133ee25d2543659b9c1e262f8c\"><code>3cccfbf</code></a> Rename mislabeled news fragment</li>\n<li><a href=\"https://github.com/pypa/pip/commit/21cd124b5d40b510295c201b9152a65ac3337a37\"><code>21cd124</code></a> Fix NEWS.rst placeholder position</li>\n<li><a href=\"https://github.com/pypa/pip/commit/e46bdda9711392fec0c45c1175bae6db847cb30b\"><code>e46bdda</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/9827\">#9827</a> from pradyunsg/fix-git-improper-tag-handling</li>\n<li><a href=\"https://github.com/pypa/pip/commit/0e4938d269815a5bf1dd8c16e851cb1199fc5317\"><code>0e4938d</code></a> :newspaper:</li>\n<li><a href=\"https://github.com/pypa/pip/commit/ca832b2836e0bffa7cf95589acdcd71230f5834e\"><code>ca832b2</code></a> Don't split git references on unicode separators</li>\n<li><a href=\"https://github.com/pypa/pip/commit/1320bac4ff80d76b8fba2c8b4b4614a40fb9c6c3\"><code>1320bac</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/9814\">#9814</a> from pradyunsg/revamp-ci-apr-2021-v2</li>\n<li><a href=\"https://github.com/pypa/pip/commit/e9cc23ffd97cb6d66d32dc3ec27cf832524bb33d\"><code>e9cc23f</code></a> Skip checks on PRs only</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/pip/compare/9.0.3...21.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pip&package-manager=pip&previous-version=9.0.3&new-version=21.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/legacy_pip_import/boto/pip-21.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103adac254a19ac28f798",
    "number": 568,
    "body": "Bumps [pip](https://github.com/pypa/pip) from 9.0.3 to 21.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/pip/blob/main/NEWS.rst\">pip's changelog</a>.</em></p>\n<blockquote>\n<h1>21.1 (2021-04-24)</h1>\n<h2>Process</h2>\n<ul>\n<li>Start installation scheme migration from <code>distutils</code> to <code>sysconfig</code>. A\nwarning is implemented to detect differences between the two implementations to\nencourage user reports, so we can avoid breakages before they happen.</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Add the ability for the new resolver to process URL constraints. (<code>[#8253](https://github.com/pypa/pip/issues/8253) &lt;https://github.com/pypa/pip/issues/8253&gt;</code>_)</li>\n<li>Add a feature <code>--use-feature=in-tree-build</code> to build local projects in-place\nwhen installing. This is expected to become the default behavior in pip 21.3;\nsee <code>Installing from local packages &lt;https://pip.pypa.io/en/stable/user_guide/#installing-from-local-packages&gt;</code>_\nfor more information. (<code>[#9091](https://github.com/pypa/pip/issues/9091) &lt;https://github.com/pypa/pip/issues/9091&gt;</code>_)</li>\n<li>Bring back the &quot;(from versions: ...)&quot; message, that was shown on resolution failures. (<code>[#9139](https://github.com/pypa/pip/issues/9139) &lt;https://github.com/pypa/pip/issues/9139&gt;</code>_)</li>\n<li>Add support for editable installs for project with only setup.cfg files. (<code>[#9547](https://github.com/pypa/pip/issues/9547) &lt;https://github.com/pypa/pip/issues/9547&gt;</code>_)</li>\n<li>Improve performance when picking the best file from indexes during <code>pip install</code>. (<code>[#9748](https://github.com/pypa/pip/issues/9748) &lt;https://github.com/pypa/pip/issues/9748&gt;</code>_)</li>\n<li>Warn instead of erroring out when doing a PEP 517 build in presence of\n<code>--build-option</code>. Warn when doing a PEP 517 build in presence of\n<code>--global-option</code>. (<code>[#9774](https://github.com/pypa/pip/issues/9774) &lt;https://github.com/pypa/pip/issues/9774&gt;</code>_)</li>\n</ul>\n<h2>Bug Fixes</h2>\n<ul>\n<li>Fixed <code>--target</code> to work with <code>--editable</code> installs. (<code>[#4390](https://github.com/pypa/pip/issues/4390) &lt;https://github.com/pypa/pip/issues/4390&gt;</code>_)</li>\n<li>Add a warning, discouraging the usage of pip as root, outside a virtual environment. (<code>[#6409](https://github.com/pypa/pip/issues/6409) &lt;https://github.com/pypa/pip/issues/6409&gt;</code>_)</li>\n<li>Ignore <code>.dist-info</code> directories if the stem is not a valid Python distribution\nname, so they don't show up in e.g. <code>pip freeze</code>. (<code>[#7269](https://github.com/pypa/pip/issues/7269) &lt;https://github.com/pypa/pip/issues/7269&gt;</code>_)</li>\n<li>Only query the keyring for URLs that actually trigger error 401.\nThis prevents an unnecessary keyring unlock prompt on every pip install\ninvocation (even with default index URL which is not password protected). (<code>[#8090](https://github.com/pypa/pip/issues/8090) &lt;https://github.com/pypa/pip/issues/8090&gt;</code>_)</li>\n<li>Prevent packages already-installed alongside with pip to be injected into an\nisolated build environment during build-time dependency population. (<code>[#8214](https://github.com/pypa/pip/issues/8214) &lt;https://github.com/pypa/pip/issues/8214&gt;</code>_)</li>\n<li>Fix <code>pip freeze</code> permission denied error in order to display an understandable error message and offer solutions. (<code>[#8418](https://github.com/pypa/pip/issues/8418) &lt;https://github.com/pypa/pip/issues/8418&gt;</code>_)</li>\n<li>Correctly uninstall script files (from setuptools' <code>scripts</code> argument), when installed with <code>--user</code>. (<code>[#8733](https://github.com/pypa/pip/issues/8733) &lt;https://github.com/pypa/pip/issues/8733&gt;</code>_)</li>\n<li>New resolver: When a requirement is requested both via a direct URL\n(<code>req @ URL</code>) and via version specifier with extras (<code>req[extra]</code>), the\nresolver will now be able to use the URL to correctly resolve the requirement\nwith extras. (<code>[#8785](https://github.com/pypa/pip/issues/8785) &lt;https://github.com/pypa/pip/issues/8785&gt;</code>_)</li>\n<li>New resolver: Show relevant entries from user-supplied constraint files in the\nerror message to improve debuggability. (<code>[#9300](https://github.com/pypa/pip/issues/9300) &lt;https://github.com/pypa/pip/issues/9300&gt;</code>_)</li>\n<li>Avoid parsing version to make the version check more robust against lousily\ndebundled downstream distributions. (<code>[#9348](https://github.com/pypa/pip/issues/9348) &lt;https://github.com/pypa/pip/issues/9348&gt;</code>_)</li>\n<li><code>--user</code> is no longer suggested incorrectly when pip fails with a permission\nerror in a virtual environment. (<code>[#9409](https://github.com/pypa/pip/issues/9409) &lt;https://github.com/pypa/pip/issues/9409&gt;</code>_)</li>\n<li>Fix incorrect reporting on <code>Requires-Python</code> conflicts. (<code>[#9541](https://github.com/pypa/pip/issues/9541) &lt;https://github.com/pypa/pip/issues/9541&gt;</code>_)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/pip/commit/2b2a268d25963727c2a1c805de8f0246b9cd63f6\"><code>2b2a268</code></a> Bump for release</li>\n<li><a href=\"https://github.com/pypa/pip/commit/ea761a6575f37b90cf89035ee8be3808cf872184\"><code>ea761a6</code></a> Update AUTHORS.txt</li>\n<li><a href=\"https://github.com/pypa/pip/commit/2edd3fdf2af2f09dce5085ef0eb54684b4f9bc04\"><code>2edd3fd</code></a> Postpone a deprecation to 21.2</li>\n<li><a href=\"https://github.com/pypa/pip/commit/3cccfbf169bd35133ee25d2543659b9c1e262f8c\"><code>3cccfbf</code></a> Rename mislabeled news fragment</li>\n<li><a href=\"https://github.com/pypa/pip/commit/21cd124b5d40b510295c201b9152a65ac3337a37\"><code>21cd124</code></a> Fix NEWS.rst placeholder position</li>\n<li><a href=\"https://github.com/pypa/pip/commit/e46bdda9711392fec0c45c1175bae6db847cb30b\"><code>e46bdda</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/9827\">#9827</a> from pradyunsg/fix-git-improper-tag-handling</li>\n<li><a href=\"https://github.com/pypa/pip/commit/0e4938d269815a5bf1dd8c16e851cb1199fc5317\"><code>0e4938d</code></a> :newspaper:</li>\n<li><a href=\"https://github.com/pypa/pip/commit/ca832b2836e0bffa7cf95589acdcd71230f5834e\"><code>ca832b2</code></a> Don't split git references on unicode separators</li>\n<li><a href=\"https://github.com/pypa/pip/commit/1320bac4ff80d76b8fba2c8b4b4614a40fb9c6c3\"><code>1320bac</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/9814\">#9814</a> from pradyunsg/revamp-ci-apr-2021-v2</li>\n<li><a href=\"https://github.com/pypa/pip/commit/e9cc23ffd97cb6d66d32dc3ec27cf832524bb33d\"><code>e9cc23f</code></a> Skip checks on PRs only</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/pip/compare/9.0.3...21.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pip&package-manager=pip&previous-version=9.0.3&new-version=21.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/python/pip-21.1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103adac254a19ac28f799",
    "number": 567,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nCurrently stable stamps do not make their way into wheels, this is the result of a copy/paste error in https://github.com/bazelbuild/rules_python/pull/554\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThis change correctly wires up stable status stamp files for stamping `py_wheel` targets.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "whl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed stable stamping of wheels (#567)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103aeac254a19ac28f79a",
    "number": 564,
    "body": "Addresses #507\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: #507\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--fix-issue-507",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix #507 - Always run from WORKSPACE root in compile_pip_requirements update exe (#564)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103afac254a19ac28f79b",
    "number": 562,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use 0.5.0 in README (#562)\n\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b0ac254a19ac28f79c",
    "number": 560,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nFollowing https://github.com/bazelbuild/rules_python/pull/554, a regression was introduced that broke the ability to generate docs via stardoc. This PR fixes that.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/561\r\n\r\n\r\n## What is the new behavior?\r\nThis allows users to continue to generate docs after release `0.5.0`\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "bzl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed `stamp.bzl` missing form `@rules_python//:bzl` target. (#560)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b1ac254a19ac28f79d",
    "number": 559,
    "body": "Minor comment typo fix, noticed when reviewing https://github.com/bazelbuild/rules_python/pull/554. ",
    "head_branch": "thundergolfer-typo-fix-oct2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix minor typo in stamp.bzl (#559)\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b1ac254a19ac28f79e",
    "number": 558,
    "body": null,
    "head_branch": "release",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Release 0.5.0 (#558)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b2ac254a19ac28f79f",
    "number": 556,
    "body": "was broken by cd5416e3b2702e7ff7d7564c2a9395344e9e724a in such a way that it was testing the prior release and not the local code from HEAD\r\n",
    "head_branch": "fix_examples",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix bazel_integration_test runner to allow non-release URLs\n\nwas broken by cd5416e3b2702e7ff7d7564c2a9395344e9e724a in such a way that it was testing the prior release and not the local code from HEAD"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b3ac254a19ac28f7a0",
    "number": 555,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nSee https://github.com/bazelbuild/rules_python/issues/557\r\n\r\nThis turns `./python/private` into a Bazel package \r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/557\r\n\r\n\r\n## What is the new behavior?\r\nThis change adds the `//python/private` package \r\n\r\nInstead of loading `//python:private/reexports.bzl`, users will now need to load `//python/private:reexports.bzl`\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\nThis is not marked as a breaking change, because loads under the /private folder were never public API.\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "private",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Turn `//python/private` into a package. (#555)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b4ac254a19ac28f7a1",
    "number": 554,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nCurrently, there is now way to get [workspace status](https://docs.bazel.build/versions/main/user-manual.html#workspace_status) information into a wheel. This is particularly useful when trying to embed things like git hashes or build numbers into a wheel's patch version, which is normally easy outside of Bazel.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis change introduces the `stamp` attribute to the `py_wheel` rule which allows users to specify how their targets would interact with the [--stamp](https://docs.bazel.build/versions/main/user-manual.html#flag--stamp) flag.\r\n\r\nThe changes here follow the conventions of [py_binary::stamp](https://docs.bazel.build/versions/main/be/python.html#py_binary.stamp).\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "whl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added `stamp` attribute to `py_wheel` (#554)\n\n* Added `stamp` attribute to `py_wheel`\r\n\r\n* Add stable status to wheel stamping"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b5ac254a19ac28f7a2",
    "number": 552,
    "body": "## PR Checklist\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Typo: s/requiremenst/requirements (#552)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b5ac254a19ac28f7a3",
    "number": 551,
    "body": "Multiple people have been using `pip_parse` for months with no notable issues (from discussion in the #python Bazel Slack channel). This change removes the \"Experimental\" tag from the `pip_parse` section of the README, and adds a note about the relatively new `compile_pip_requirements` rule.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove 'experimental' from pip_parse section (#551)\n\nRemoves the \"Experimental\" tag from the `pip_parse` section of the README, and adds a note about the relatively new `compile_pip_requirements` rule.\r\n\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b6ac254a19ac28f7a4",
    "number": 550,
    "body": "## PR Checklist\n\nPlease check if your PR fulfills the following requirements:\n\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\n- [x] Tests for the changes have been added (for bug fixes / features)\n- [ ] Docs have been added / updated (for bug fixes / features)\n\n## PR Type\n\nWhat kind of change does this PR introduce?\n\n- [x] Bugfix\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\n- [ ] Code style update (formatting, local variables)\n- [ ] Refactoring (no functional changes, no api changes)\n- [ ] Build related changes\n- [ ] CI related changes\n- [ ] Documentation content changes\n- [ ] Other... Please describe:\n\n## What is the current behavior?\n\nEntry point used via the `entry_point` helper, if a function returning a int, the return int does not become the program return code.\n\n## What is the new behavior?\n\nEntry points are expected to return an int and this int is the status code.\n\n## Does this PR introduce a breaking change?\n\n- [ ] Yes\n- [x] No\n\n## Other information\n\nI tried looking for the code in setuptool that generates the shim but did not find it proper. The closest I found was [setuptools/command/easy_install.py](https://github.com/pypa/setuptools/blob/41a229bdf7d2f444f6f355042e816a53fbc5a3b2/setuptools/command/easy_install.py#L2076).\n\nMy use case is the [`sphinx-build` entry point](https://github.com/sphinx-doc/sphinx/blob/56f97d71a2b1733ebf401d357a634e2d7e4c896e/setup.py#L239) that maps to the [following code](https://github.com/sphinx-doc/sphinx/blob/56f97d71a2b1733ebf401d357a634e2d7e4c896e/sphinx/cmd/build.py#L287):\n\n```python\ndef main(argv: List[str] = sys.argv[1:]) -> int:\n    # ...\n```\n\nUsing `pipenv install` the following shim gets generated:\n\n```python\n#!SOMELOCATION/python\n# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom sphinx.cmd.build import main\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])\n    sys.exit(main())\n```\n\nThis does forward the error to `sys.exit`. In the case of rules_python, I am not sure we need the regex bit, but I do know.\n\n---\n\n#### Commits _(oldest to newest)_\n\nbc30a71 pip: entry_point: Add support for exit codes\n\n\n<br/>\n\n4a044b5 Add test for entrypoint exit codes\n\n\n<br/>\n\ncbe7c1a Update tests for entrypoint exit codes\n\n\n<br/>",
    "head_branch": "entry-point-return",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pip: entry_point: Add support for exit codes (#550)\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b7ac254a19ac28f7a5",
    "number": 547,
    "body": "Addresses https://github.com/bazelbuild/rules_python/issues/541\r\n\r\nwith fix I can get `:main` to run. Output is: \r\n\r\n```\r\nTarget //:main up-to-date:\r\n  bazel-bin/main\r\nINFO: Elapsed time: 22.670s, Critical Path: 0.58s\r\nINFO: 5 processes: 5 internal.\r\nINFO: Build completed successfully, 5 total actions\r\nINFO: Build completed successfully, 5 total actions\r\n['DEFAULT_SESSION', 'NullHandler', 'Session', '__author__', ....\r\n...\r\n```\r\n\r\n### Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n",
    "head_branch": "jonathon--fix-pip_install-example-oct2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix: rules_python 4.0.0 is not recent enough for pip_install example. latest 'main' commit is (#547)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b8ac254a19ac28f7a6",
    "number": 545,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nCurrently the version attribute for py_wheel is a string which requires hardcoding it in the BUILD file.\r\n\r\nIssue Number: 544\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe version attribute can either be a hardcoded string or it can be a stamped version which will be resolved during the process.\r\nExample:\r\n```\r\nversion = \"{STABLE_GIT_COMMIT}\"\r\n```\r\n\r\nIn the event that `py_wheel` has `stamp = True` then the output will be a directory with the stamp not resolved containing a whl file with the stamp resolved.   This is to work around bazel not being able to resolve stamps until the execution stage but we must declare an output.  Not completely ideal but it was the only way I was able to workaround the file being dynamic depending on the version stamp.\r\n\r\nExample of new usage:\r\n```py_wheel(\r\n              version = \"{STABLE_GIT_COMMIT}\",\r\n              stamp = True,\r\n              ...\r\n      )\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ X] No\r\n\r\n\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "allow_version_stamping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b9ac254a19ac28f7a7",
    "number": 540,
    "body": "Previously we just suggested you run a shell script to update, but there was no clue when that was needed in a PR\r\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix py_import example to work on python 3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103b9ac254a19ac28f7a8",
    "number": 539,
    "body": "…ers (#528)\"\r\n\r\nThis reverts commit 7609526f3d79c883dda52d2a2a72edbbce7093cf.\r\n\r\nFixes #538\r\n",
    "head_branch": "revert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert \"py_library generated from wheel shouldn't include tests/ folders (#528)\" (#539)\n\nThis reverts commit 7609526f3d79c883dda52d2a2a72edbbce7093cf.\r\n\r\nFixes #538\r\n\r\nCo-authored-by: Henry Fuller <hrofuller@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103baac254a19ac28f7a9",
    "number": 536,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nDependencies which have a potentially invalid `entry_points.txt` file will currently cause parsing dependencies to fail, rendering your code unbuildable.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThe `entry_points` functionality should at this point never result in a fatal error when parsing dependencies. This allows dependencies to continue to be generated as they did before in the event that `entry_points.txt` is malformed.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "entrypoint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Avoid failing to parse requirements due to invalid entry points config. (#536)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103bbac254a19ac28f7aa",
    "number": 535,
    "body": "Prompted by https://github.com/bazelbuild/rules_python/pull/534 and reading through the docstrings, I'm putting up these edits to clean up things.\r\n\r\n* Avoiding use of \"import\". Going way back to `pip_import`, I thought \"import\" was a misleading term. The rules need to install packages, and this involves running sometimes arbitrary on the system if a wheel isn't available. \"import\" also clashes with Python's `import` keyword. Rulesets such as `rules_jvm_external` use \"resolve\" and \"fetch\", which is appropriate for JVM dependencies because they are just file bundles you download, but this Python stuff you're installing.\r\n* Adding deprecation notices in docstrings, because #534 showed me that the generated documentation doesn't show anything for our deprecated rules and it's a bit confusing to see no detail.\r\n* Generally trying to bring docstring wording closer to rules_jvm_external. eg. use of \"generates\", \"this macro runs a repository rule\". \r\n\r\n---\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "jonathon--rule-docstring-updates-sept2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update docstrings for packaging rules/macros (#535)\n\n* update docstrings for packaging rules/macros\r\n\r\n\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103bcac254a19ac28f7ab",
    "number": 534,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n`compile_pip_requirements` is not currently in the docs and seems to otherwise be hidden as a result. This PR fixes that.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n`compile_pip_requirements` can now be loaded via `@rules_python//python:pip.bzl` which is also used to populate `docs/pip.md` with the appropriate docs for the rule.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "compile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Exposed docs for `compile_pip_requirements` (#534)\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103bdac254a19ac28f7ac",
    "number": 533,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/526\r\n\r\n\r\n## What is the new behavior?\r\n\r\nUpdates the min tested Bazel version to `4.0.0`\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\ncloses https://github.com/bazelbuild/rules_python/issues/526\r\n",
    "head_branch": "lts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Updated min tested Bazel version to 4.0.0 (#533)\n\n* Updated min tested Bazel version to 4.0.0\r\n\r\n* Assert that Bazel is at least 4.0.0 LTS\r\n\r\nSince we only test against bazel 4.0 now, and will start using features that require it, this gives users\r\nan obvious error message that they need to update.\r\n\r\n* Add third_party bzl files to integration test rules_python distro\r\n\r\n* remove helloworld test that relies on python2\r\n\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>\r\nCo-authored-by: Henry Fuller <hrofuller@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103beac254a19ac28f7ad",
    "number": 532,
    "body": null,
    "head_branch": "release",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Release 0.4.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103bfac254a19ac28f7ae",
    "number": 531,
    "body": "As a common example, we need a compiled requirements file for linux that differs from mac os\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "platform_requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow for requirements files to differ per platform (#531)\n\n* Allow for requirements files to differ per platform\r\n\r\nAs a common example, we need a compiled requirements file for linux that differs from mac os\r\n\r\n* Add pip_repository documentation\r\n\r\nThe macros are leaky and otherwise you have to read sources to find out about the kwargs\r\n\r\nFixes #384"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103bfac254a19ac28f7af",
    "number": 530,
    "body": "This allows tooling to use a bazel query to reverse-engineer a requirements.txt from a transitive closure of a py_binary\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "pypi_metadata_tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add tags pypi_name and pypi_version to generated py_library targets (#530)\n\nThis allows tooling to use a bazel query to reverse-engineer a requirements.txt from a transitive closure of a py_binary"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c0ac254a19ac28f7b0",
    "number": 529,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "update_pip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update to more recent pip version 21.0 -> 21.1 (#529)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c1ac254a19ac28f7b1",
    "number": 528,
    "body": "This is a python convention that wheels are shipped to pypi including their tests.\r\nThese shouldn't be used in user code.\r\nWe have observed these files expose modules which collide with first-party targets.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "ignore_tests_srcs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "py_library generated from wheel shouldn't include tests/ folders (#528)\n\nThis is a python convention that wheels are shipped to pypi including their tests.\r\nThese shouldn't be used in user code.\r\nWe have observed these files expose modules which collide with first-party targets."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c2ac254a19ac28f7b2",
    "number": 524,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nTo close the loop on https://github.com/bazelbuild/rules_python/pull/519#issuecomment-909849717, tests have been added for the `data_requirement` and `dist_info_requirement` utilities of `pip_parse` and `pip_install`.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added tests for additional utilities of `pip_install` and `pip_parse` (#524)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c3ac254a19ac28f7b3",
    "number": 523,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nCurrently, there is no way to access binaries (or [entry points](https://packaging.python.org/specifications/entry-points/)) associated with a wheel in python. This has been a rather annoying problem since it expects users to manually generate it themselves. A process for which there's currently there's no guidance on. This PR aims to solve that by generating these targets automatically.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/341\r\n\r\n\r\n## What is the new behavior?\r\n\r\nBoth [pip_install](https://github.com/bazelbuild/rules_python/blob/9a10fdb84911aad767acb60b603c62108f3228f4/docs/pip.md#pip_install) and [pip_parse](https://github.com/bazelbuild/rules_python/blob/9a10fdb84911aad767acb60b603c62108f3228f4/docs/pip.md#pip_parse) now generate `py_binary` targets for each [entry point](https://packaging.python.org/specifications/entry-points/) in a wheel. These are accessible via the `entry_point` macro which has been added to the `requirements.bzl` files generated by these repository rules.\r\n\r\nTo use this new functionality, you simply load the `entry_point` macro:\r\n```\r\nload(\"@pip_deps//:requirements.bzl\", \"entry_point\")\r\n\r\nalias(\r\n    name = \"flake8\",\r\n    actual = entry_point(\"flake8\"),\r\n)\r\n```\r\n\r\nThen. the target can be run just like any other `py_binary`.\r\n```\r\nbazel run //:flake8 -- --version\r\n```\r\n```\r\n3.9.2 (mccabe: 0.6.1, pycodestyle: 2.7.0, pyflakes: 2.3.1) CPython 3.9.6 on Darwin\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "entrypoint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "`pip_parse` and `pip_install` can now parse entry points from wheels (#523)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c3ac254a19ac28f7b4",
    "number": 520,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "rbe",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c4ac254a19ac28f7b5",
    "number": 519,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nA wheel is [documented](https://www.python.org/dev/peps/pep-0491/#file-contents) to contain both `.dist-info` and `.data` directories which contain additional metadata for a particular package. However, even though the pip repository rules extract wheel contents into the repository directory, data in these directories are not exposed. In order to access this, the `:whl` target must be consumed and unzipped again, even though this information already lives in the pip repository generated by Bazel. Something should be done to expose this data so users don't have to write additional parsers.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis pull request exposes files in `.data` and `.dist-info` in individual filegroups, allowing users to consume them without having to re-extract this data from the wheel.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "wheel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added targets for data and dist-info to pip generated targets (#519)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c5ac254a19ac28f7b6",
    "number": 518,
    "body": "Escape characters in the wheel filename.\r\n\r\nNote the implementation is buggy, it replaces non-ascii (unicode) letters in the filename. Unfortunately, starlark isalnum function returns wrong result here, and regexp support is not available yet.\r\n\r\nFixes #517.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #517\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Escape characters in the wheel filename. (#518)\n\nFixes #517."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c6ac254a19ac28f7b7",
    "number": 514,
    "body": "Hi there! 👋 \r\n\r\nThis is the initial Gazelle extension for Python.\r\n\r\nA good starting point for reviewing is the added README file under  `gazelle/`, the example workspace and the `testdata` directory.\r\n\r\nMore discussion on where Gazelle extensions should live here: https://github.com/bazelbuild/bazel-gazelle/issues/1030.",
    "head_branch": "gazelle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Gazelle extension for Python (#514)\n\nGazelle plugin\r\n\r\n* Add new example to --deleted_packages\r\n\r\n* Update examples/build_file_generation/BUILD\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>\r\n\r\n* fix: gazelle:exclude on coarse-grained\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: comment on Kinds()\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>\r\n\r\n* owner: f0rmiga\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: build and setuptools pinned versions\r\n\r\nWith the recent change in pypa/setuptools#2769, some wheels started to\r\nfail build immediately with an unpinned setuptools in isolation mode.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: use local_repository in examples\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* bump: examples Bazel version\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: add missing .gitignore to example\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* refactor: remove python_coarse_grained_generation\r\n\r\nAlso add the python_generation_mode directive.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: gazelle spam from org_golang_x_tools\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* revert: example .bazelversion\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: simplify std_modules.py\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: test py_library without __init__.py\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* feat: manifest generation tag manual\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\n* fix: check std modules last\r\n\r\nPerforming the check last is more correct and yields better performance,\r\nnoticeable on large repositories.\r\n\r\nSigned-off-by: Thulio Ferraz Assis <3149049+f0rmiga@users.noreply.github.com>\r\n\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c7ac254a19ac28f7b8",
    "number": 513,
    "body": "Missing this required update after doing the `master` -> `main` switch.\r\n\r\n----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "jonathon--fix-readme-badge-aug2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "replace obsolete 'master' branch refs (#513)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c8ac254a19ac28f7b9",
    "number": 512,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nIn adopting a wider use of `pip_parse` I've run into an issue where the pip config file which defines the cert location for my index_url is not being parsed, leading to failures when attempting to download packages.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis PR introduces flags for optionally disabling the use of the [--isolated](https://pip.pypa.io/en/stable/cli/pip/#cmdoption-isolated) flag that's currently always passed when invoking pip commands. Users can set `isolated = False` on uses of [pip_parse](https://github.com/bazelbuild/rules_python/blob/304b85cdb7be888a8aa8dce80c1e49374abdac18/docs/pip.md#pip_parse) and [pip_install](https://github.com/bazelbuild/rules_python/blob/304b85cdb7be888a8aa8dce80c1e49374abdac18/docs/pip.md#pip_install). Additionally, the environment variable `RULES_PYTHON_PIP_ISOLATED` can be set to a falsey value (`\"0\"`, `\"False\"`) to accomplish the same. The environment variable is intended to allow for this kind of configuration in `.bazelrc` files where users could define `common --repo_env=RULES_PYTHON_PIP_ISOLATED` to allow for this behavior in specific cases (like on CI machines).\r\n\r\nI'm not sure if making `--isolated` optional is the best approach, but I do want to be able to rely on the machine's pip config to determine how to download things. The first alternative I reached for was to use `extra_pip_args` to pass [--cert](https://pip.pypa.io/en/stable/cli/pip/#cmdoption-cert) but next ran into an issue where `--cert` was different on different machines. I'm happy to hear some other alternatives though.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "isolated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow the `--isolated` pip flag to be optionally unset (#512)\n\n* Allow the `--isolated` flag to be optionally unset\r\n\r\n* Update python/pip_install/pip_repository.bzl\r\n\r\nCo-authored-by: Henry Fuller <hrofuller@gmail.com>\r\n\r\nCo-authored-by: Henry Fuller <hrofuller@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c8ac254a19ac28f7ba",
    "number": 510,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nThere is no multi-platform support: https://github.com/bazelbuild/rules_python/issues/260\r\n\r\n## What is the new behavior?\r\n\r\nAdds a new argument, `pip_platform_definitions`, to `pip_parse`. The value of the argument looks like this:\r\n```\r\n    pip_platform_definitions = {\r\n        \"//platforms:linux_x86_64_build\": \"manylinux2014_x86_64-37-cp-cp37m\",\r\n        \"//platforms:macos_x86_64_build\": \"macosx_10_14_x86_64-37-cp-cp37m\",\r\n    },\r\n```\r\nEach key is a `config_setting`, and each value is a string of the fom `<platform>-<python_version>-<implementation>-<abi>`.\r\n\r\nWhen `pip_platform_definitions` is specified, instead of running `pip wheel`, the rules run `pip download` with constraints extracted from the values in the map values. This makes it possible to do cross-platform Python builds, e.g. on MacOS run bazel with `--platforms=//platforms:macos_x86_64` and have linux dependencies fetched properly. In the above example, we would end with 3 targets for a pip package called `foo`:\r\n* `@pip_pypi__macosx_10_14_x86_64_37_cp_cp37m__foo//:pkg` is the `py_library` for the MacOS version of the package.\r\n* `@pip_pypi__manylinux2014_x86_64_37_cp_cp37m__foo//:pkg` is the `py_library` for the Linux version of the package.\r\n* `@pip_pypi__foo` is an `alias` with its `actual` determined by a `select` over the provided `config_settings` pointing at the above two targets. This is the target that the `requirement` macro points at.\r\n\r\nOf course this only works if all of the required packages have wheels available which match the configured platform constraints, either in PyPI or another configured repository.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n## Other information\r\n\r\nIn its current state, this PR is more of a proof of concept that is intended to start a conversation rather than something that is ready to merge. If I get feedback from the maintainers that this general approach is something that could be merged, then I would be happy to do the work to get it into a better state.\r\n\r\nWe've been successfully been using this at my company to build Docker images with native Python dependencies (e.g. pandas, gRPC) on MacOS. We have a reasonably large collection of Python deps (124), and in practice it has not been a large problem to obtain wheels for all of them. All except 3 are already in PyPI, and for the 3 that are missing it's possible to build universal wheels, which we just do manually outside of Bazel.\r\n\r\nThings that I think likely need improvement before this is ready to merge are:\r\n* The interface to this new functionality is clunky. It's basically the fastest thing I could get working to see if the approach would work at all. I think the right way may be to create a `toolchain_type` for this purpose, and put the pip download constraints in a toolchain provider, but have not investigated this thoroughly.\r\n* Documentation\r\n* Examples/Tests\r\n* Some general code cleanup. The new interface for `repo_names_and_requirements` is pretty confusing.\r\nFeedback on any of these items would be great!",
    "head_branch": "python_platforms",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103c9ac254a19ac28f7bb",
    "number": 505,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\nWhen using `pip_parse` with a python wrapper script in `python_interpreter` or `python_interpreter_target`, the declared `whl_library` do not use the wrapper script but directly the underlying python interpreter given by `sys.executable`.\r\n\r\nWe use a portable python distribution that needs some environment adaptation in the `PATH` and `LD_LIBRARY_PRELOAD` variables to run properly. Calling directly the python interpreter binary fails, so `pip_parse` itself is successful but the wheels cannot be retrieved.\r\n\r\n\r\n## What is the new behavior?\r\n\r\n - `pip_parse` now transmits `python_interpreter` and `python_interpreter_target` attributes to the `whl_library` targets\r\n - `whl_library` now takes `python_interpreter_target` in account\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n",
    "head_branch": "pip_parse_interpreter",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pip_parse: Fix when using a python wrapper script (#505)\n\n* pip_parse: Transmit the interpreter arguments\r\n\r\n* Clarify --python_interpreter_target doc"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103caac254a19ac28f7bc",
    "number": 504,
    "body": "fixes #499 \r\nPathlib.Path normalizes path names, which caused lookups of relative\r\npaths using the special '.' directory path to fail to find parents of\r\nstandard packages.\r\n\r\nDrive-by change fixes passing quiet argument to child repos.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\npip_parse fails to find implicit namespace packages.\r\n\r\nIssue Number: #499 \r\n\r\n\r\n## What is the new behavior?\r\npip_parse can find implicit namespace packages.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hrfuller/fix-499-normalize-path-names",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix regression in pip parse for finding implicit namespace packages. (#504)\n\n* Fix regression in pip parse for finding implicit namespace packages.\r\nPathlib.Path normalizes path names, which caused lookups of relative\r\npaths using the special '.' directory path to fail to find parents of\r\nstandard packages.\r\n\r\n* use paths everywhere, add test for cwd case\r\n\r\n* refactor for mypy\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103cbac254a19ac28f7bd",
    "number": 502,
    "body": "Change directly related to #500 \r\n\r\nAs far as I can see these are the only relevant `master` refs in the codebase.\r\n\r\n----\r\n\r\n### PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n### PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "jonathon--master-to-main-jul2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Terminology update 'master' to 'main' in DEVELOPING.md (#502)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ccac254a19ac28f7be",
    "number": 501,
    "body": "On re-reading this part of the README, I thought the \"central repo\" and \"knows about\" wording could be improved.\r\n\r\n<a href=\"https://github.com/bazelbuild/rules_python/blob/jonathon--improve-README-code-cmmnt-june2021/README.md\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>🖱 Click me to preview README changes</strong></a>\r\n\r\n### PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n### Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n",
    "head_branch": "jonathon--improve-README-code-cmmnt-june2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Improve README documentation of pip_install rule [tiny] (#501)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ccac254a19ac28f7bf",
    "number": 498,
    "body": "On Windows, when using pip_parse, pip would fail with following error:\r\n\r\n    Could not open requirements file: [Errno 13] Permission denied: ...\r\n\r\nThis is due to Python holding a handle to the temporary file preventing\r\npip, which is run as a sub-process, from reading it. For more\r\ninformation, see: https://bugs.python.org/issue14243\r\n\r\nClosing the requirements file before running pip solves the problem.\r\n\r\n---\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n`pip_parse` works on Windows.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "windows_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix extract_single_wheel for Windows (#498)\n\nOn Windows, when using pip_parse, pip would fail with following error:\r\n\r\n    Could not open requirements file: [Errno 13] Permission denied: ...\r\n\r\nThis is due to Python holding a handle to the temporary file preventing\r\npip, which is run as a sub-process, from reading it. For more\r\ninformation, see: https://bugs.python.org/issue14243\r\n\r\nClosing the requirements file before running pip solves the problem."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103cdac254a19ac28f7c0",
    "number": 496,
    "body": "### PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n### PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n### What is the current behavior?\r\n\r\nThe `py_test` target created by `compile_pip_requirements` can receive tags via `**kwargs` but the `py_binary` target (.update) cannot. \r\n\r\n### What is the new behavior?\r\n\r\nBoth targets created by the `compile_pip_requirements` macro can receive tags.\r\n\r\n### Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n### Other information\r\n\r\n",
    "head_branch": "jonathon--pass-tags-properly-in-compile_pip_requirements-jun2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "ensure pip_compile_requirements py_binary target can recieve 'tags' (#496)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ceac254a19ac28f7c1",
    "number": 495,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n",
    "head_branch": "jonathon--remove-misleading-words-about-python2-23june2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove wording incorrectly suggesting python2 was supported by pip_install (#495)\n\nCo-authored-by: Henry Fuller <hrofuller@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103cfac254a19ac28f7c2",
    "number": 494,
    "body": "Should really include this step in the release, and it's not complicated to do that because the README isn't distributed and thus doesn't influence the sha256.\r\n\r\n**0.3.0 ->** https://github.com/bazelbuild/rules_python/releases\r\n\r\n----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [X] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--update-README-for-030-23june2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update README to point at latest release, 0.3.0, and latest master commit (#494)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d0ac254a19ac28f7c3",
    "number": 492,
    "body": "Noticed this a couple of week ago. How did it survive this long 😓. \r\n\r\n----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--remove-outdated-string-22jun2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove reference to 'rules_python_external', the original provinence of pip_install code (#492)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d1ac254a19ac28f7c4",
    "number": 488,
    "body": "Bumps [pip](https://github.com/pypa/pip) from 9.0.3 to 19.2.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/pip/blob/main/NEWS.rst\">pip's changelog</a>.</em></p>\n<blockquote>\n<h1>19.2 (2019-07-22)</h1>\n<h2>Deprecations and Removals</h2>\n<ul>\n<li>Drop support for EOL Python 3.4. (<code>[#6685](https://github.com/pypa/pip/issues/6685) &lt;https://github.com/pypa/pip/issues/6685&gt;</code>_)</li>\n<li>Improve deprecation messages to include the version in which the functionality will be removed. (<code>[#6549](https://github.com/pypa/pip/issues/6549) &lt;https://github.com/pypa/pip/issues/6549&gt;</code>_)</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Credentials will now be loaded using <code>keyring</code> when installed. (<code>[#5948](https://github.com/pypa/pip/issues/5948) &lt;https://github.com/pypa/pip/issues/5948&gt;</code>_)</li>\n<li>Fully support using <code>--trusted-host</code> inside requirements files. (<code>[#3799](https://github.com/pypa/pip/issues/3799) &lt;https://github.com/pypa/pip/issues/3799&gt;</code>_)</li>\n<li>Update timestamps in pip's <code>--log</code> file to include milliseconds. (<code>[#6587](https://github.com/pypa/pip/issues/6587) &lt;https://github.com/pypa/pip/issues/6587&gt;</code>_)</li>\n<li>Respect whether a file has been marked as &quot;yanked&quot; from a simple repository\n(see <code>PEP 592 &lt;https://www.python.org/dev/peps/pep-0592/&gt;</code>__ for details). (<code>[#6633](https://github.com/pypa/pip/issues/6633) &lt;https://github.com/pypa/pip/issues/6633&gt;</code>_)</li>\n<li>When choosing candidates to install, prefer candidates with a hash matching\none of the user-provided hashes. (<code>[#5874](https://github.com/pypa/pip/issues/5874) &lt;https://github.com/pypa/pip/issues/5874&gt;</code>_)</li>\n<li>Improve the error message when <code>METADATA</code> or <code>PKG-INFO</code> is None when\naccessing metadata. (<code>[#5082](https://github.com/pypa/pip/issues/5082) &lt;https://github.com/pypa/pip/issues/5082&gt;</code>_)</li>\n<li>Add a new command <code>pip debug</code> that can display e.g. the list of compatible\ntags for the current Python. (<code>[#6638](https://github.com/pypa/pip/issues/6638) &lt;https://github.com/pypa/pip/issues/6638&gt;</code>_)</li>\n<li>Display hint on installing with --pre when search results include pre-release versions. (<code>[#5169](https://github.com/pypa/pip/issues/5169) &lt;https://github.com/pypa/pip/issues/5169&gt;</code>_)</li>\n<li>Report to Warehouse that pip is running under CI if the <code>PIP_IS_CI</code> environment variable is set. (<code>[#5499](https://github.com/pypa/pip/issues/5499) &lt;https://github.com/pypa/pip/issues/5499&gt;</code>_)</li>\n<li>Allow <code>--python-version</code> to be passed as a dotted version string (e.g.\n<code>3.7</code> or <code>3.7.3</code>). (<code>[#6585](https://github.com/pypa/pip/issues/6585) &lt;https://github.com/pypa/pip/issues/6585&gt;</code>_)</li>\n<li>Log the final filename and SHA256 of a <code>.whl</code> file when done building a\nwheel. (<code>[#5908](https://github.com/pypa/pip/issues/5908) &lt;https://github.com/pypa/pip/issues/5908&gt;</code>_)</li>\n<li>Include the wheel's tags in the log message explanation when a candidate\nwheel link is found incompatible. (<code>[#6121](https://github.com/pypa/pip/issues/6121) &lt;https://github.com/pypa/pip/issues/6121&gt;</code>_)</li>\n<li>Add a <code>--path</code> argument to <code>pip freeze</code> to support <code>--target</code>\ninstallations. (<code>[#6404](https://github.com/pypa/pip/issues/6404) &lt;https://github.com/pypa/pip/issues/6404&gt;</code>_)</li>\n<li>Add a <code>--path</code> argument to <code>pip list</code> to support <code>--target</code>\ninstallations. (<code>[#6551](https://github.com/pypa/pip/issues/6551) &lt;https://github.com/pypa/pip/issues/6551&gt;</code>_)</li>\n</ul>\n<h2>Bug Fixes</h2>\n<ul>\n<li>Set <code>sys.argv[0]</code> to the underlying <code>setup.py</code> when invoking <code>setup.py</code>\nvia the setuptools shim so setuptools doesn't think the path is <code>-c</code>. (<code>[#1890](https://github.com/pypa/pip/issues/1890) &lt;https://github.com/pypa/pip/issues/1890&gt;</code>_)</li>\n<li>Update <code>pip download</code> to respect the given <code>--python-version</code> when checking\n<code>&quot;Requires-Python&quot;</code>. (<code>[#5369](https://github.com/pypa/pip/issues/5369) &lt;https://github.com/pypa/pip/issues/5369&gt;</code>_)</li>\n<li>Respect <code>--global-option</code> and <code>--install-option</code> when installing from\na version control url (e.g. <code>git</code>). (<code>[#5518](https://github.com/pypa/pip/issues/5518) &lt;https://github.com/pypa/pip/issues/5518&gt;</code>_)</li>\n<li>Make the &quot;ascii&quot; progress bar really be &quot;ascii&quot; and not Unicode. (<code>[#5671](https://github.com/pypa/pip/issues/5671) &lt;https://github.com/pypa/pip/issues/5671&gt;</code>_)</li>\n<li>Fail elegantly when trying to set an incorrectly formatted key in config. (<code>[#5963](https://github.com/pypa/pip/issues/5963) &lt;https://github.com/pypa/pip/issues/5963&gt;</code>_)</li>\n<li>Prevent DistutilsOptionError when prefix is indicated in the global environment and <code>--target</code> is used. (<code>[#6008](https://github.com/pypa/pip/issues/6008) &lt;https://github.com/pypa/pip/issues/6008&gt;</code>_)</li>\n<li>Fix <code>pip install</code> to respect <code>--ignore-requires-python</code> when evaluating\nlinks. (<code>[#6371](https://github.com/pypa/pip/issues/6371) &lt;https://github.com/pypa/pip/issues/6371&gt;</code>_)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/pip/commit/0e642958ada570358c3e095b28d78b6196c56a35\"><code>0e64295</code></a> Generate NEWS</li>\n<li><a href=\"https://github.com/pypa/pip/commit/0df416d66ee6c28512295de297f44597b45acf7a\"><code>0df416d</code></a> Bump version for release</li>\n<li><a href=\"https://github.com/pypa/pip/commit/5f0aa2a42fc1be8b0d0f6f48263a0d4d9ec8856e\"><code>5f0aa2a</code></a> Generate AUTHORS.txt</li>\n<li><a href=\"https://github.com/pypa/pip/commit/8582f7e40f3083e6713057122edb1143a1cd784d\"><code>8582f7e</code></a> Reduce dependency on ctypes when discovering glibc version. (<a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/6678\">#6678</a>)</li>\n<li><a href=\"https://github.com/pypa/pip/commit/e308497416e172b48e2d49a226f4d3e0b71a2a5f\"><code>e308497</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/6743\">#6743</a> from chrahunt/maint/remove-path-copytree</li>\n<li><a href=\"https://github.com/pypa/pip/commit/9281a7aac19a55ee85a631a148277f2863efd6ac\"><code>9281a7a</code></a> Remove copytree from tests.lib.path.Path.</li>\n<li><a href=\"https://github.com/pypa/pip/commit/0d286012f79784b05bd1ddbbe9ead01dcfb844fe\"><code>0d28601</code></a> Remove copy from tests.lib.path.Path. (<a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/6746\">#6746</a>)</li>\n<li><a href=\"https://github.com/pypa/pip/commit/c275e9d1ab6e2a3efb5e7d8cb4db18103bd675df\"><code>c275e9d</code></a> Drop a useless import in favor of explicitness</li>\n<li><a href=\"https://github.com/pypa/pip/commit/3732e791a5b1cbd9153bbb6645f302cac69c7bd0\"><code>3732e79</code></a> Remove normpath from tests.lib.path.Path.</li>\n<li><a href=\"https://github.com/pypa/pip/commit/358e690c547e4d62ed50385ee205e6794849ac4f\"><code>358e690</code></a> Remove move from tests.lib.path.Path.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/pip/compare/9.0.3...19.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pip&package-manager=pip&previous-version=9.0.3&new-version=19.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/legacy_pip_import/boto/pip-19.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d1ac254a19ac28f7c5",
    "number": 487,
    "body": "Bumps [pip](https://github.com/pypa/pip) from 9.0.3 to 19.2.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/pypa/pip/blob/main/NEWS.rst\">pip's changelog</a>.</em></p>\n<blockquote>\n<h1>19.2 (2019-07-22)</h1>\n<h2>Deprecations and Removals</h2>\n<ul>\n<li>Drop support for EOL Python 3.4. (<code>[#6685](https://github.com/pypa/pip/issues/6685) &lt;https://github.com/pypa/pip/issues/6685&gt;</code>_)</li>\n<li>Improve deprecation messages to include the version in which the functionality will be removed. (<code>[#6549](https://github.com/pypa/pip/issues/6549) &lt;https://github.com/pypa/pip/issues/6549&gt;</code>_)</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Credentials will now be loaded using <code>keyring</code> when installed. (<code>[#5948](https://github.com/pypa/pip/issues/5948) &lt;https://github.com/pypa/pip/issues/5948&gt;</code>_)</li>\n<li>Fully support using <code>--trusted-host</code> inside requirements files. (<code>[#3799](https://github.com/pypa/pip/issues/3799) &lt;https://github.com/pypa/pip/issues/3799&gt;</code>_)</li>\n<li>Update timestamps in pip's <code>--log</code> file to include milliseconds. (<code>[#6587](https://github.com/pypa/pip/issues/6587) &lt;https://github.com/pypa/pip/issues/6587&gt;</code>_)</li>\n<li>Respect whether a file has been marked as &quot;yanked&quot; from a simple repository\n(see <code>PEP 592 &lt;https://www.python.org/dev/peps/pep-0592/&gt;</code>__ for details). (<code>[#6633](https://github.com/pypa/pip/issues/6633) &lt;https://github.com/pypa/pip/issues/6633&gt;</code>_)</li>\n<li>When choosing candidates to install, prefer candidates with a hash matching\none of the user-provided hashes. (<code>[#5874](https://github.com/pypa/pip/issues/5874) &lt;https://github.com/pypa/pip/issues/5874&gt;</code>_)</li>\n<li>Improve the error message when <code>METADATA</code> or <code>PKG-INFO</code> is None when\naccessing metadata. (<code>[#5082](https://github.com/pypa/pip/issues/5082) &lt;https://github.com/pypa/pip/issues/5082&gt;</code>_)</li>\n<li>Add a new command <code>pip debug</code> that can display e.g. the list of compatible\ntags for the current Python. (<code>[#6638](https://github.com/pypa/pip/issues/6638) &lt;https://github.com/pypa/pip/issues/6638&gt;</code>_)</li>\n<li>Display hint on installing with --pre when search results include pre-release versions. (<code>[#5169](https://github.com/pypa/pip/issues/5169) &lt;https://github.com/pypa/pip/issues/5169&gt;</code>_)</li>\n<li>Report to Warehouse that pip is running under CI if the <code>PIP_IS_CI</code> environment variable is set. (<code>[#5499](https://github.com/pypa/pip/issues/5499) &lt;https://github.com/pypa/pip/issues/5499&gt;</code>_)</li>\n<li>Allow <code>--python-version</code> to be passed as a dotted version string (e.g.\n<code>3.7</code> or <code>3.7.3</code>). (<code>[#6585](https://github.com/pypa/pip/issues/6585) &lt;https://github.com/pypa/pip/issues/6585&gt;</code>_)</li>\n<li>Log the final filename and SHA256 of a <code>.whl</code> file when done building a\nwheel. (<code>[#5908](https://github.com/pypa/pip/issues/5908) &lt;https://github.com/pypa/pip/issues/5908&gt;</code>_)</li>\n<li>Include the wheel's tags in the log message explanation when a candidate\nwheel link is found incompatible. (<code>[#6121](https://github.com/pypa/pip/issues/6121) &lt;https://github.com/pypa/pip/issues/6121&gt;</code>_)</li>\n<li>Add a <code>--path</code> argument to <code>pip freeze</code> to support <code>--target</code>\ninstallations. (<code>[#6404](https://github.com/pypa/pip/issues/6404) &lt;https://github.com/pypa/pip/issues/6404&gt;</code>_)</li>\n<li>Add a <code>--path</code> argument to <code>pip list</code> to support <code>--target</code>\ninstallations. (<code>[#6551](https://github.com/pypa/pip/issues/6551) &lt;https://github.com/pypa/pip/issues/6551&gt;</code>_)</li>\n</ul>\n<h2>Bug Fixes</h2>\n<ul>\n<li>Set <code>sys.argv[0]</code> to the underlying <code>setup.py</code> when invoking <code>setup.py</code>\nvia the setuptools shim so setuptools doesn't think the path is <code>-c</code>. (<code>[#1890](https://github.com/pypa/pip/issues/1890) &lt;https://github.com/pypa/pip/issues/1890&gt;</code>_)</li>\n<li>Update <code>pip download</code> to respect the given <code>--python-version</code> when checking\n<code>&quot;Requires-Python&quot;</code>. (<code>[#5369](https://github.com/pypa/pip/issues/5369) &lt;https://github.com/pypa/pip/issues/5369&gt;</code>_)</li>\n<li>Respect <code>--global-option</code> and <code>--install-option</code> when installing from\na version control url (e.g. <code>git</code>). (<code>[#5518](https://github.com/pypa/pip/issues/5518) &lt;https://github.com/pypa/pip/issues/5518&gt;</code>_)</li>\n<li>Make the &quot;ascii&quot; progress bar really be &quot;ascii&quot; and not Unicode. (<code>[#5671](https://github.com/pypa/pip/issues/5671) &lt;https://github.com/pypa/pip/issues/5671&gt;</code>_)</li>\n<li>Fail elegantly when trying to set an incorrectly formatted key in config. (<code>[#5963](https://github.com/pypa/pip/issues/5963) &lt;https://github.com/pypa/pip/issues/5963&gt;</code>_)</li>\n<li>Prevent DistutilsOptionError when prefix is indicated in the global environment and <code>--target</code> is used. (<code>[#6008](https://github.com/pypa/pip/issues/6008) &lt;https://github.com/pypa/pip/issues/6008&gt;</code>_)</li>\n<li>Fix <code>pip install</code> to respect <code>--ignore-requires-python</code> when evaluating\nlinks. (<code>[#6371](https://github.com/pypa/pip/issues/6371) &lt;https://github.com/pypa/pip/issues/6371&gt;</code>_)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/pypa/pip/commit/0e642958ada570358c3e095b28d78b6196c56a35\"><code>0e64295</code></a> Generate NEWS</li>\n<li><a href=\"https://github.com/pypa/pip/commit/0df416d66ee6c28512295de297f44597b45acf7a\"><code>0df416d</code></a> Bump version for release</li>\n<li><a href=\"https://github.com/pypa/pip/commit/5f0aa2a42fc1be8b0d0f6f48263a0d4d9ec8856e\"><code>5f0aa2a</code></a> Generate AUTHORS.txt</li>\n<li><a href=\"https://github.com/pypa/pip/commit/8582f7e40f3083e6713057122edb1143a1cd784d\"><code>8582f7e</code></a> Reduce dependency on ctypes when discovering glibc version. (<a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/6678\">#6678</a>)</li>\n<li><a href=\"https://github.com/pypa/pip/commit/e308497416e172b48e2d49a226f4d3e0b71a2a5f\"><code>e308497</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/6743\">#6743</a> from chrahunt/maint/remove-path-copytree</li>\n<li><a href=\"https://github.com/pypa/pip/commit/9281a7aac19a55ee85a631a148277f2863efd6ac\"><code>9281a7a</code></a> Remove copytree from tests.lib.path.Path.</li>\n<li><a href=\"https://github.com/pypa/pip/commit/0d286012f79784b05bd1ddbbe9ead01dcfb844fe\"><code>0d28601</code></a> Remove copy from tests.lib.path.Path. (<a href=\"https://github-redirect.dependabot.com/pypa/pip/issues/6746\">#6746</a>)</li>\n<li><a href=\"https://github.com/pypa/pip/commit/c275e9d1ab6e2a3efb5e7d8cb4db18103bd675df\"><code>c275e9d</code></a> Drop a useless import in favor of explicitness</li>\n<li><a href=\"https://github.com/pypa/pip/commit/3732e791a5b1cbd9153bbb6645f302cac69c7bd0\"><code>3732e79</code></a> Remove normpath from tests.lib.path.Path.</li>\n<li><a href=\"https://github.com/pypa/pip/commit/358e690c547e4d62ed50385ee205e6794849ac4f\"><code>358e690</code></a> Remove move from tests.lib.path.Path.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/pypa/pip/compare/9.0.3...19.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pip&package-manager=pip&previous-version=9.0.3&new-version=19.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/python/pip-19.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d2ac254a19ac28f7c6",
    "number": 486,
    "body": "**Closes https://github.com/bazelbuild/rules_python/issues/255**\r\n\r\n---\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [N/A] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--issue-255-jun2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Replace <code> with backticks in docs. Addresses #255 (#486)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d3ac254a19ac28f7c7",
    "number": 485,
    "body": "Fixing https://github.com/bazelbuild/rules_python/issues/435\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/435\r\n\r\n`pip_install` can't install `catboost <= 2.25.0` because it doesn't specify 'Root-Is-Purelib' at all.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAbsence of `'Root-Is-Purelib'` in wheel metadata means the value is assumed false.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n",
    "head_branch": "jonathon--issue-435-june2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "pip_install: avoid assuming 'Root-Is-Purelib' is provided in all WHEEL files. https://github.com/bazelbuild/rules_python/issues/435 (#485)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d4ac254a19ac28f7c8",
    "number": 484,
    "body": "Using https://github.com/bazelbuild/stardoc/releases/tag/0.4.0\r\n\r\n> First release of Stardoc under the new repository location bazelbuild/stardoc. Please use this repository for future Stardoc releases instead of its old location.\r\n\r\nBegins addressing https://github.com/bazelbuild/rules_python/issues/255. We can close that issue once we've removed needless `<code>` tags in docs, and instead use backticks.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [X] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n",
    "head_branch": "jonathon--update-stardoc-ext-repo-dep-jun2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Migrate from bazelbuild/skydoc to bazelbuild/stardoc (#484)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d5ac254a19ac28f7c9",
    "number": 483,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/381\r\n\r\n(Issue contains a lot of detail so is worth reading for background)\r\n\r\n\r\n## What is the new behavior?\r\n\r\nPackages like `ciso8601` which previously weren't handled correctly (see #381) now work correctly.  Previously `pip_install` took any non-empty directory without `__init__.py` to be a namespace package, which is wrong. A namespace package is a directory that either includes Python module files as immediate children, or is the parent directory of a directory which is a package (may be namespace or regular). \r\n\r\n**Demo:** https://github.com/thundergolfer-playground/rules_python-issue-381\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n",
    "head_branch": "jonathon--issue-381-may2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Smarter namespace pkg detection in pip_install (issue #381) (#483)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d5ac254a19ac28f7ca",
    "number": 482,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #478 \r\n\r\nWhen pip-compile fails to resolve the dependency, `requirements_test` will pass regardless of the content of the lock file.\r\n\r\n## What is the new behavior?\r\n\r\nWhen pip-compile fails to resolve the dependency, exit with an error message, and the test will fail.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "catch-pip-compile-error",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check pip-compile failed to resolve requirements (#482)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d6ac254a19ac28f7cb",
    "number": 481,
    "body": "Matches the one just landed in rules_apple: bazelbuild/rules_apple@61bc7c0",
    "head_branch": "precommit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a buildifier pre-commit hook (#481)\n\n* Add a buildifier pre-commit hook\r\n\r\nMatches the one just landed in rules_apple: bazelbuild/rules_apple@61bc7c0\r\n\r\n* Update .pre-commit-config.yaml\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d7ac254a19ac28f7cc",
    "number": 480,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nCurrently there is no documentation for the `python/packaging.bzl` module making it's existence pretty invisible\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis adds a stardoc target and updated documentation such that it can be rendered at https://docs.aspect.dev/rules_python\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Added packaging docs (#480)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d8ac254a19ac28f7cd",
    "number": 479,
    "body": "Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.25.11 to 1.26.5.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/releases\">urllib3's releases</a>.</em></p>\n<blockquote>\n<h2>1.26.5</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed deprecation warnings emitted in Python 3.10.</li>\n<li>Updated vendored <code>six</code> library to 1.16.0.</li>\n<li>Improved performance of URL parser when splitting the authority component.</li>\n</ul>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a></strong></p>\n<h2>1.26.4</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Changed behavior of the default <code>SSLContext</code> when connecting to HTTPS proxy during HTTPS requests. The default <code>SSLContext</code> now sets <code>check_hostname=True</code>.</li>\n</ul>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a></strong></p>\n<h2>1.26.3</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>\n<p>Fixed bytes and string comparison issue with headers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2141\">#2141</a>)</p>\n</li>\n<li>\n<p>Changed <code>ProxySchemeUnknown</code> error message to be more actionable if the user supplies a proxy URL without a scheme (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2107\">#2107</a>)</p>\n</li>\n</ul>\n<p><strong>If you or your organization rely on urllib3 consider supporting us via <a href=\"https://github.com/sponsors/urllib3\">GitHub Sponsors</a></strong></p>\n<h2>1.26.2</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where <code>wrap_socket</code> and <code>CERT_REQUIRED</code> wouldn't be imported properly on Python 2.7.8 and earlier (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2052\">#2052</a>)</li>\n</ul>\n<h2>1.26.1</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>Fixed an issue where two <code>User-Agent</code> headers would be sent if a <code>User-Agent</code> header key is passed as <code>bytes</code> (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2047\">#2047</a>)</li>\n</ul>\n<h2>1.26.0</h2>\n<p>:warning: <strong>IMPORTANT: urllib3 v2.0 will drop support for Python 2</strong>: <a href=\"https://urllib3.readthedocs.io/en/latest/v2-roadmap.html\">Read more in the v2.0 Roadmap</a></p>\n<ul>\n<li>\n<p>Added support for HTTPS proxies contacting HTTPS servers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1923\">#1923</a>, Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1806\">#1806</a>)</p>\n</li>\n<li>\n<p>Deprecated negotiating TLSv1 and TLSv1.1 by default. Users that\nstill wish to use TLS earlier than 1.2 without a deprecation warning\nshould opt-in explicitly by setting <code>ssl_version=ssl.PROTOCOL_TLSv1_1</code> (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2002\">#2002</a>)\n<strong>Starting in urllib3 v2.0: Connections that receive a <code>DeprecationWarning</code> will fail</strong></p>\n</li>\n<li>\n<p>Deprecated <code>Retry</code> options <code>Retry.DEFAULT_METHOD_WHITELIST</code>, <code>Retry.DEFAULT_REDIRECT_HEADERS_BLACKLIST</code>\nand <code>Retry(method_whitelist=...)</code> in favor of <code>Retry.DEFAULT_ALLOWED_METHODS</code>,\n<code>Retry.DEFAULT_REMOVE_HEADERS_ON_REDIRECT</code>, and <code>Retry(allowed_methods=...)</code>\n(Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2000\">#2000</a>) <strong>Starting in urllib3 v2.0: Deprecated options will be removed</strong></p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/urllib3/urllib3/blob/main/CHANGES.rst\">urllib3's changelog</a>.</em></p>\n<blockquote>\n<h2>1.26.5 (2021-05-26)</h2>\n<ul>\n<li>Fixed deprecation warnings emitted in Python 3.10.</li>\n<li>Updated vendored <code>six</code> library to 1.16.0.</li>\n<li>Improved performance of URL parser when splitting\nthe authority component.</li>\n</ul>\n<h2>1.26.4 (2021-03-15)</h2>\n<ul>\n<li>Changed behavior of the default <code>SSLContext</code> when connecting to HTTPS proxy\nduring HTTPS requests. The default <code>SSLContext</code> now sets <code>check_hostname=True</code>.</li>\n</ul>\n<h2>1.26.3 (2021-01-26)</h2>\n<ul>\n<li>\n<p>Fixed bytes and string comparison issue with headers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2141\">#2141</a>)</p>\n</li>\n<li>\n<p>Changed <code>ProxySchemeUnknown</code> error message to be\nmore actionable if the user supplies a proxy URL without\na scheme. (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2107\">#2107</a>)</p>\n</li>\n</ul>\n<h2>1.26.2 (2020-11-12)</h2>\n<ul>\n<li>Fixed an issue where <code>wrap_socket</code> and <code>CERT_REQUIRED</code> wouldn't\nbe imported properly on Python 2.7.8 and earlier (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2052\">#2052</a>)</li>\n</ul>\n<h2>1.26.1 (2020-11-11)</h2>\n<ul>\n<li>Fixed an issue where two <code>User-Agent</code> headers would be sent if a\n<code>User-Agent</code> header key is passed as <code>bytes</code> (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/2047\">#2047</a>)</li>\n</ul>\n<h2>1.26.0 (2020-11-10)</h2>\n<ul>\n<li>\n<p><strong>NOTE: urllib3 v2.0 will drop support for Python 2</strong>.\n<code>Read more in the v2.0 Roadmap &lt;https://urllib3.readthedocs.io/en/latest/v2-roadmap.html&gt;</code>_.</p>\n</li>\n<li>\n<p>Added support for HTTPS proxies contacting HTTPS servers (Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1923\">#1923</a>, Pull <a href=\"https://github-redirect.dependabot.com/urllib3/urllib3/issues/1806\">#1806</a>)</p>\n</li>\n<li>\n<p>Deprecated negotiating TLSv1 and TLSv1.1 by default. Users that\nstill wish to use TLS earlier than 1.2 without a deprecation warning</p>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d1616473df94b94f0f5ad19d2a6608cfe93b7cdf\"><code>d161647</code></a> Release 1.26.5</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec\"><code>2d4a3fe</code></a> Improve performance of sub-authority splitting in URL</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637\"><code>2698537</code></a> Update vendored six to 1.16.0</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550\"><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b\"><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381\"><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4\"><code>f271c9c</code></a> Apply latest Black formatting</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52\"><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/a8913042b676c510e94fc2b097f6b514ae11a537\"><code>a891304</code></a> Release 1.26.4</li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/8d65ea1ecf6e2cdc27d42124e587c1b83a3118b0\"><code>8d65ea1</code></a> Merge pull request from GHSA-5phf-pp7p-vc2r</li>\n<li>Additional commits viewable in <a href=\"https://github.com/urllib3/urllib3/compare/1.25.11...1.26.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.25.11&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/bazelbuild/rules_python/network/alerts).\n\n</details>",
    "head_branch": "dependabot/pip/examples/pip_parse/urllib3-1.26.5",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Bump urllib3 from 1.25.11 to 1.26.5 in /examples/pip_parse (#479)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103d9ac254a19ac28f7ce",
    "number": 477,
    "body": "Some python packages are provided as `.tar.gz` instead of `.whl`.\r\nIn such cases globbing for \".whl\" files returns an empty result.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/476\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe behavior described in the issue is resolved and thus fetching dependencies lazily while using `--incompatible_disallow_empty_glob` becomes possible.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "make_lazily_fetching_compatible_to_disallow_empty_glob",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make lazily fetching dependencies compatible to disallow_empty_glob (#477)\n\nSome python packages are provided as \".tar.gz\" instead of \".whl\".\r\nIn such cases globbing for \".whl\" files returns an empty result.\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103daac254a19ac28f7cf",
    "number": 475,
    "body": "See https://github.com/dillon-giacoppo/rules_python_external/pull/54/files for change that removed usage of `wheel` module.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n\r\n",
    "head_branch": "jonathon--remove-unused-import-25may2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove unnecessary import. became unnecessary in https://github.com/dillon-giacoppo/rules_python_external/pull/54/files (#475)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103daac254a19ac28f7d0",
    "number": 474,
    "body": "",
    "head_branch": "beebs-update-pip-and-pip-tools",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103dbac254a19ac28f7d1",
    "number": 473,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nThis makes sure global pip config files don't leak into your pip-compile, similar to https://github.com/bazelbuild/rules_python/pull/389\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIf a user has a global pip config file, say with extra URLs, those will get included in the output from pip-compile, but it will not be reproducible for others.\r\n\r\n## What is the new behavior?\r\n\r\nThose files are completely ignored.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n- [x] Kinda\r\n\r\nIf folks were relying on this, it could cause issues. This leaves the escape hatch of people being able to manually specify the `PIP_CONFIG_FILE` in their `env` to set it explicitly.",
    "head_branch": "ks/ignore-global-pip-config-files-for-pip-compile",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ignore global pip config files for pip-compile (#473)\n\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103dcac254a19ac28f7d2",
    "number": 472,
    "body": "This way if users have bazel wrappers the error message can be correct\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCurrently the output recommendation is always `bazel run TARGET`\r\n\r\nIssue Number: N/A\r\n\r\n## What is the new behavior?\r\n\r\nIf users add `env = {\"CUSTOM_COMPILE_COMMAND\": \"foo\"}` the output recommendation will be `foo`\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\n\r\nWe might prefer an attribute over an env var override here, happy to go down either path",
    "head_branch": "ks/allow-overriding-custom_compile_command",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow overriding CUSTOM_COMPILE_COMMAND (#472)\n\nThis way if users have bazel wrappers the error message can be correct"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ddac254a19ac28f7d3",
    "number": 471,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThe `compile_pip_requirements` rule will list the requirements as coming from `./requirements.in`.\r\n\r\nIssue Number: closes https://github.com/bazelbuild/rules_python/issues/470\r\n\r\n## What is the new behavior?\r\n\r\nIt will be attributed to `requirements.in`, which lets it work out-of-the-box with tools like dependabot.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\n\r\nNone\r\n",
    "head_branch": "pip-compile-no-dotslash",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove leading ./ in compile_pip_requirements (#471)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103deac254a19ac28f7d4",
    "number": 469,
    "body": "Not a great fix, but should remove the 404 problem.\r\n\r\n----\r\n\r\n### PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n### PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n### What is the current behavior?\r\n\r\n**Issue Number:** https://github.com/bazelbuild/rules_python/issues/343\r\n\r\nhttps://bazelbuild.github.io/rules_python is a 404. \r\n\r\n![image](https://user-images.githubusercontent.com/12058921/117566856-6785c800-b0fc-11eb-838d-604ad90cb063.png)\r\n\r\nHowever each Markdown page in `docs/` has a HTML page. This page is working: https://bazelbuild.github.io/rules_python/pip.html\r\n\r\n### What is the new behavior?\r\n\r\nWith this PR's file addition the Github pages site should get an `index.html` file and thus https://bazelbuild.github.io/rules_python will stop being a 404.\r\n\r\n\r\n### Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--indexhtml-for-github-pages-site-may2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103deac254a19ac28f7d5",
    "number": 467,
    "body": "## What is the current behavior?\r\n\r\n* The `requirements_in` arg cannot be popped from `**kwargs` because it is a named argument. So the arg value is always: `name + \".in\"`\r\n* The `requirements_txt` arg is actually set by passing `requirements_locked` to the macro. If you pass the latter, you can set the former. If you just pass the former, the arg value is always `name + \".txt\"`, similar to the above.\r\n\r\nThe result is that the `.in` file must always be `${name}.in` and you have to set the lock file name via an undocumented kwarg.\r\n\r\n## What is the new behavior?\r\n\r\n**Both args are given `None` defaults which the macro body will immediately detect and replace with the `name + \".in\"` and `name + \".txt\"` value if needed.**\r\n\r\nWith this change the following macro instantiation now works as expected: \r\n\r\n```python\r\ncompile_pip_requirements(\r\n    name = \"requirements_annotated\",\r\n    requirements_in = \"requirements.in\",\r\n    requirements_locked = \"requirements.annotated.txt\",\r\n)\r\n```\r\n\r\nI could have done `requirements_in = requirements_in or name + \".in`, but I wanted to explictly check fo `None` and not catch anything falsey.\r\n\r\nAnother alternative is keeping the `= \"requirements.in\"` defaulting and abandoning the defaulting to the `name + <ext>` setup.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "jonathon--compile_pip_requirements-fix-may2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "fix defaulted macro args behaviour so users can actually set their values (#467)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103dfac254a19ac28f7d6",
    "number": 464,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "pytest",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e0ac254a19ac28f7d7",
    "number": 463,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nI have a `.bzl` file which loads the `requirements.bzl` file of a [pip_repository](https://github.com/bazelbuild/rules_python/blob/017eb4ffb87b97a66be968df33391ef36ba474cb/python/pip_install/pip_repository.bzl#L170-L212) and I want to use [stardoc](https://github.com/bazelbuild/stardoc) to generate documentation it. However, I'm not able to access `requirements.bzl` because it's not publicly visible outside of the repository.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThe change in this PR exports the file so it can be used for generating documentation.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "docs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "`requirements.bzl` is now visible outside `pip_repository`s (#463)\n\nThis allows stardoc to walk the load() statements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e1ac254a19ac28f7d8",
    "number": 462,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\nAn error message for `pip_install` still references `pip_install_incremental` instead of `pip_parse`.\r\n\r\nIssue Number: N/A\r\n\r\n## What is the new behavior?\r\nRefer to `pip_parse` instead.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\nNone\r\n",
    "head_branch": "pip-install-incremental-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace old pip_install_incremental reference (#462)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e2ac254a19ac28f7d9",
    "number": 461,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nWhen using pip_parse the .whl file which is part of the filegroup that we create in the BUILD file gets deleted.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThe .whl file isn't deleted from the root of a whl_library repo anymore, so it can be consumed.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hrfuller/dont-delete-whl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e3ac254a19ac28f7da",
    "number": 460,
    "body": "Allows specifying custom environment variables on the pip_repository and whl_library repository rules that are set when run.\r\n\r\nEdit: @hrfuller  Also incidentally fixes #490 ",
    "head_branch": "feat/environment_attr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: allow setting custom environment variables on pip_repository and whl_library (#460)\n\n* feat: allow setting custom environment variables on pip_repository and whl_library\r\n\r\n* Serialize and deserialize environment dict in python process instead\r\nof starlark.\r\n\r\n* Refactor shared functions between extract_wheel and extract_single_wheel.\r\n* Every structured arg now has the same key when serialized. fixes #490\r\n* test for pip_data_exclude in arguments parsing test.\r\n\r\n* Also update docs in repository rule attr definition\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>\r\nCo-authored-by: Henry Fuller <hrofuller@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e3ac254a19ac28f7db",
    "number": 459,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nIssue Number:\r\n- https://github.com/bazelbuild/rules_python/issues/414\r\n- Closes https://github.com/bazelbuild/rules_python/issues/450\r\n\r\nCurrently the prefix added to the generated repos for `pip_parse` is hard-coded to `<pip-parse-name>_pypi__` and the prefix added to the generated packages for `pip_install` is hard-coded to `pypi__`.\r\n\r\n## What is the new behavior?\r\nAllow the user to control the prefix. You still need some prefix to avoid https://github.com/bazelbuild/rules_python/issues/414#issuecomment-789416360, but for `pip_parse` in particular you can make the external repository names more memorable:\r\n\r\n```\r\n$ cat requirements.txt\r\nattrs==20.3.0\r\n$ cat WORKSPACE\r\nlocal_repository(\r\n    name = \"rules_python\",\r\n    path = \"../rules_python\",\r\n)\r\n\r\nload(\"@rules_python//python:pip.bzl\", \"pip_install\", \"pip_parse\")\r\n\r\npip_parse(\r\n    name = \"deps\",\r\n    requirements_lock = \"//:requirements.txt\",\r\n    repo_prefix=\"pypi_\",\r\n)\r\n\r\nload(\"@deps//:requirements.bzl\", \"install_deps\")\r\ninstall_deps()\r\n$ bazelisk build @pypi_attrs//:pkg\r\nINFO: Analyzed target @pypi_attrs//:pkg (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nTarget @pypi_attrs//:pkg up-to-date (nothing to build)\r\nINFO: Elapsed time: 0.095s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\nNone",
    "head_branch": "controllable-prefix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Allow controlling the prefix added to repos/packages (#459)\n\nThis consists of a breaking change for users who were directly depending on the prior pip_parse labels."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e4ac254a19ac28f7dc",
    "number": 458,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: N/A\r\n\r\nWheel targets are broken with `pip_parse`. This is because currently `pip_parse` extracts the wheel into the repository root, but then deletes it here:\r\n\r\nhttps://github.com/bazelbuild/rules_python/blob/master/python/pip_install/extract_wheels/lib/bazel.py#L251\r\n\r\nThis doesn't happen for `pip_install` because it copies the wheel into the relevant subdirectory:\r\n\r\nhttps://github.com/bazelbuild/rules_python/blob/master/python/pip_install/extract_wheels/lib/bazel.py#L212\r\n\r\n## What is the new behavior?\r\n\r\nInstead of deleting the wheel unconditionally, only do it for the non-incremental case.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\nNone\r\n",
    "head_branch": "pip-parse-keep-wheels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Don't delete wheels from external repos with pip_parse (#458)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e5ac254a19ac28f7dd",
    "number": 457,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCloses https://github.com/bazelbuild/rules_python/issues/440\r\n\r\nThe build file in the repository roots generated by `pip_repository` is still `BUILD` and not `BUILD.bazel`. Since `pip_parse` has only one layer of directories, the external repository then ends up with a `BUILD` and a `BUILD.bazel`.\r\n\r\n## What is the new behavior?\r\n\r\nIt's now called `BUILD.bazel`, which means `pip_parse` later overwrites it with the final `BUILD.bazel`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\n\r\nThis prevents a regression of https://github.com/bazelbuild/rules_python/pull/427 with `pip_parse`.",
    "head_branch": "build-bazel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Also name the BUILD file in external repository roots BUILD.bazel (#457)\n\n* Also name the BUILD file in external repository roots BUILD.bazel\r\n\r\n* Don't put empty BUILD.bazel into package-specific external repos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e6ac254a19ac28f7de",
    "number": 456,
    "body": "Follow up to #432 \r\nParse requirements files for global pip flags, then add them to the extra_pip_args array.\r\n\r\nPass a copy of each cleaned up line (comments and line-breaks removed) to\r\neach whl_library repo verbatim. Then link based requirements or requirement\r\nlines with requirement specific flags work.\r\n\r\nDue to the pip restriction on using requirement specific flags in\r\nrequirements.txt files only, write each requirement line to a temp file\r\nbefore invoking pip in each whl_library repo.\r\n\r\nFixes #438 \r\nFixes #447\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nAll flags and url requirements in pip_parse are ignored.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nGlobal pip flags requirement specific pip flags, and url style requirement specs are respected in pip_parse\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hrfuller/fix-pip-parse-follow-ups",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Parse requirements files for global pip flags. (#456)\n\nParse requirements files for global pip flags, then add them to the extra_pip_args array.\r\n\r\nPass a copy of each cleaned up line (comments and line-breaks removed) to\r\neach whl_library repo verbatim. Then link based requirements or requirement\r\nlines with requirement specific flags work.\r\n\r\nDue to the pip restriction on using requirement specific flags in\r\nrequirements.txt files only, write each requirement line to a temp file\r\nbefore invoking pip in each whl_library repo.\r\n\r\nFixes #438 #447"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e7ac254a19ac28f7df",
    "number": 454,
    "body": "Ideally we would have the resources to address and resolve all issues, and review and merge all pull requests. But we don't.\r\nRather than leave these open indefinitely, it's better to set user expectations that these will just age out.\r\n",
    "head_branch": "stale",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add configuration for stale bot (#454)\n\nIdeally we would have the resources to address and resolve all issues, and review and merge all pull requests. But we don't.\r\nRather than leave these open indefinitely, it's better to set user expectations that these will just age out."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e8ac254a19ac28f7e0",
    "number": 452,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\npy_wheel targets have a strip_path_prefixes argument, but not a map_path_prefixes argument.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\npy_wheel targets now have a map_path_prefixes argument, which allows developers to alter the prefixes within their wheels by passing in an array of '='-separated key-value pairs. this makes it easier for people shipping python wheels out of larger repositories to pull in dependencies from other directories.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "ac/py-wheel-prefix-map",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e8ac254a19ac28f7e1",
    "number": 451,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\n\r\nAt the moment a wheel version can only be entered manually. There is no rule at the moment for pushing wheels to repositories.\r\n\r\n## What is the new behavior?\r\n\r\nThis PR adds capability to do automatic versioning/stamping as e.g.:\r\n```python\r\npy_wheel(\r\n    name = \"my_wheel\",\r\n    distribution = \"my_wheel\",\r\n    version = \"{MY_WHEEL_VERSION}\",\r\n    deps = [\":my_lib\"],\r\n)\r\n```\r\nwhere `MY_WHEEL_VERSION` can be calculated via workspace status by using `--workspace_status_command` included through the use of `.bazelrc`. For instance, we can calculate `MY_WHEEL_VERSION` using some git info. This is handy for automating pushes of wheels on CI.\r\n\r\nThe second feature this PR introduces is a new `py_wheel_push` rule that internally uses `twine`. This enables pushing wheels to private wheel repositories.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\nThe new `py_wheel` outputs a wheel named `<target_name>.whl` and a version file `<target_name>_version.txt`. The old/current rule outputs the wheel with (already) compliant name. In principle, the version is only relevant when pushing wheels and the new rule for pushing wheels uses the version file to assemble the final compliant wheel file name.\r\n\r\n## Other information\r\n\r\nDocs/testing are still missing, but would like first we agree on the approach.\r\n",
    "head_branch": "feature/wheel_push",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103e9ac254a19ac28f7e2",
    "number": 449,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThis fixes buildifier defects which started appearing after a fix to Bazel CI was merged https://github.com/bazelbuild/continuous-integration/issues/1080\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nCI should now be passing.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "buildifier",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ran buildifier (#449)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103eaac254a19ac28f7e3",
    "number": 446,
    "body": "Requirements files may contain lines like:\r\n\r\n```\r\n--index-url=http://some-pypi-instance/whatever\r\n--trusted-host=some-pypi-instance\r\n```\r\n\r\nCurrently we're forced to manually redefine them as `extra_pip_args`.\r\nHere we introduce a minor change to pull appropriate lines from\r\nthe requirements lock file and register them as extra pip args.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\nI'm not sure if this warrants documentation updates (other than a changelog entry surely), because it seems like this is how things should've worked in the first place.  Which leaves me torn on whether this is a bugfix or a feature 😛  ... Anyways looking for guidance here, happy to make any documentation updates necessary.\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: 438\r\n\r\nCurrently, when we use:\r\n\r\n```\r\npip_parse(\r\n    name = \"my_pip_requirements\",\r\n    requirements_lock = \"@//3rdparty/python:full-requirements.txt\",\r\n)\r\n```\r\n\r\nWe have to also manually specify:\r\n\r\n```\r\nextra_pip_args=[\r\n        \"--index-url=http://our-pypi-server/repository/pypi-all/simple\",\r\n        \"--trusted-host=our-pypi-server\",\r\n]\r\n```\r\n\r\n... despite the fact that those flags are already in `full-requirements.txt`.  This is cumbersome because it means we have to define this in two places: one where we generate the `full-requirements.txt`, and they _have_ to line up.\r\n\r\n## What is the new behavior?\r\n\r\n`extra_pip_args` as passed are still used, but are augmented with lines from the `requirements_lock` file that correspond to pip arguments.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nA somewhat suboptimal implementation, as it reads the requirements file for a second time, and manually looks for flag-like lines (those that start with `-` when stripped).  While the main parsing routine (`parse_requirements()`) is already extracting the flags (and verifying them), I found that internally it sets attributes on objects like `session` and `finder` ... but there wasn't an obvious way to turn those values (which become somewhat \"esoteric\" in terms of the classes that need them) back into the args that constructed them.  So I thought I would propose this first before embarking on a more \"intrusive\" approach.",
    "head_branch": "extra-pip-args-from-requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ebac254a19ac28f7e4",
    "number": 445,
    "body": "@thekyz helpfully pointed out this issue in the README. Ref: https://github.com/bazelbuild/rules_python/issues/439\r\n\r\nDoing `requirement(\"foo[bar]\")` to specify extras is only supported/required in `pip_import`. \r\n\r\nThis functionality was introduced here: https://github.com/bazelbuild/rules_python/issues/439\r\n\r\n----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--fix-README-error-todowith-package-extras-1april2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "You only need to specify extras in the requirement macro if using legacy pip_import (#445)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ecac254a19ac28f7e5",
    "number": 444,
    "body": "I know of more changes that should be made to README, but I want to keep this minimal and concerned only with the recent release.\r\n\r\n----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n",
    "head_branch": "jonathon--update-README-after-020-release-31mar2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "0.2.0 README update (#444)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ecac254a19ac28f7e6",
    "number": 443,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nA patch is required to access the required bzl files for docs in external rulesets\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nDownstream rulesets can depend on `//:bzl` to provide all `.bzl` sources needed to build docs for bzl files that include loads from rules_python\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\nWe do a similar approach in rules_nodejs 🙂 \r\n",
    "head_branch": "feat/bzl_files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat: add public filegroups containing bzl files to allow downstream rulesets to generate docs (#443)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103edac254a19ac28f7e7",
    "number": 442,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nView rich diff to see content changes. The line wrapping obfuscates them a bit.\r\n\r\n- correct spelling\r\n- correct grammar\r\n- apply cohesive markdown\r\n- correct broken anchor references\r\n- wrap lines to ease readability from CLI\r\n\r\nChange wording to:\r\n    - increase readability\r\n    - create stronger intent\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103eeac254a19ac28f7e8",
    "number": 441,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## What is the current behavior?\r\n\r\nBazel appears to inject a `BUILD` file into the root of an external repository. For the non-incremental `pip_install` the external repository root ends up looking something like this:\r\n\r\n```\r\nBUILD            WORKSPACE        pypi__attrs      requirements.bzl\r\n```\r\n\r\nSince `pip_parse` doesn't have the extra layers of directories you end up with the external repository looking something like this:\r\n\r\n```\r\nBUILD                  WORKSPACE              attrs-20.3.0.dist-info\r\nBUILD.bazel            attr\r\n```\r\n\r\nThe build file is then picked up in the data glob and injected into the runfiles. \r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/440\r\n\r\n## What is the new behavior?\r\n\r\nThis adds the autogenerated `BUILD` to the `exclude` so that it doesn't end up in the runfiles. It still won't fix the issue identified in https://github.com/bazelbuild/rules_python/pull/427 however, but AFAICT that will require changes to Bazel itself to not autogenerate the `BUILD` files?\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\n\r\nNone",
    "head_branch": "pip-parsed-no-build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103efac254a19ac28f7e9",
    "number": 433,
    "body": "Alternate to #367 with a better implementation, thanks to @LouisStAmour\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: closes #366\r\n\r\nRelative requirements do not work due to pip wheel being run from the generated repository root.\r\n\r\n## What is the new behavior?\r\n\r\nPip is now run with the working directory being the folder containing the requirements.txt file, with `--wheel-dir` pointed back at the correct location to write the wheels.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nA new example has been added to satisfy the desire for this to be tested from the other PR. I'm happy to shuffle this around elsewhere if you prefer.",
    "head_branch": "support-local-wheel-alt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add support for relative requirements in pip_install (#433)\n\n* Run pip within the directory containing the requirements.txt file\r\n\r\nThis allows for relative requirements to be resolved in the way\r\nthat standalone pip would without patching or parsing the\r\nrequirements file manually\r\n\r\n* Print test errors of sub-workspaces in bazel_integration_test\r\n\r\nPrior to this, errors would be written to logs in the temp\r\ndirectory that would promptly be deleted on parent test\r\nteardown. This means at least the test logs will be printed\r\non failure\r\n\r\n* Add example of relative requirement as test\r\n\r\n* Explicitly cast Path to str to support Python 3.5\r\n\r\n* Fix multiple declarations of pip_args\r\n\r\n* Apply buildifier fix\r\n\r\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103efac254a19ac28f7ea",
    "number": 432,
    "body": "Commits in this PR can be reviewed individually, they build on each other.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThe current pip_install repository rule requires that all pip packages be resolved and downloaded before bazel can start to run build actions. This can lead to painful wait times when invoking pip_install with large requirement.txt files on clean repos, or whenever changes to the external repo configurations are made.\r\n\r\nIssue Number: #395 \r\n\r\n\r\n## What is the new behavior?\r\nAdd an experimental repository rule called pip_install_incremental. Which sets up an external repository for each package in the requirements lock file passed by users.\r\n\r\nThe largest difference from pip_install is that pip_install_incremental doesn't do a full resolve over the requirements_lock file passed in. As such users must supply a requirements_lock.txt file containing fully resolved and pinned transitive closure of the pypi dependencies needed by their workspace. We don't provide a way to resolve a requirements lock file in this PR, nor do we verify the integrity of the lock file, but we could provide something in the future to do this.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "hrfuller/incremental_deps_import",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Incrementally download wheels at workspace time. (#432)\n\n* Create support for lazily fetched repo's.\r\nRefactor pip_repository rule to invoke different scripts based on the\r\nvalue of the incremental attribute to the rule.\r\nCreate a new macro in repositories.bzl which will instantiate all the child repos representing\r\nindividual python packages.\r\nRefactor code which is repeated between the parse_requirements_to_bzl\r\nscripts and the extract_wheels script."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f0ac254a19ac28f7eb",
    "number": 430,
    "body": "Addressing https://github.com/bazelbuild/rules_python/issues/372\r\n\r\n---\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\n> expanding rules_python-0.1.0.tar.gz we see that `/python/pip_install/BUILD` has a load statement from `@bazel_skylib`.\r\n\r\n> Users weren't told to depend on that, nor did our WORKSPACE dependencies install such a thing.\r\nMoreover until the new Bazel external deps story is landed, adding such a dependency is a nasty breaking change for users where they may have a hard time getting the right version of bazel_skylib to satisfy rules_python along with anything else that transitively depends on it.\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/372\r\n\r\n\r\n## What is the new behavior?\r\n\r\n`/python/pip_install/BUILD` no longer has a load statement from `@bazel_skylib`. \r\n\r\nI've run `./update_docs.sh` to check that this doesn't break anything, and it seems fine.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n",
    "head_branch": "jonathon--issue-372",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove bzl_library from python/pip_install/BUILD so that skylib dep is not exposed to end-users (#430)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f1ac254a19ac28f7ec",
    "number": 428,
    "body": "## Description\r\n\r\nIntroduces a DEVELOPING.md document alongside CONTRIBUTING.md, just like [rules_nodejs](https://github.com/bazelbuild/rules_nodejs/blame/stable/DEVELOPING.md) does. The primary motivation for this addition is to document the release process better ahead of releasing `0.2.0`. \r\n\r\nFor convenience, can 'View File' on the new document here: [jonathon--add-DEVELOPING-dot-md-mar2021/DEVELOPING.md](https://github.com/bazelbuild/rules_python/blob/jonathon--add-DEVELOPING-dot-md-mar2021/DEVELOPING.md)\r\n\r\n### PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](https://github.com/bazelbuild/rules_python/blob/master/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n### PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n### Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n",
    "head_branch": "jonathon--add-DEVELOPING-dot-md-mar2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "add DEVELOPING.md to document release. Addresses https://github.com/bazelbuild/rules_python/issues/317 (#428)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f2ac254a19ac28f7ed",
    "number": 427,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nUsing wheels like keyring (https://pypi.org/project/keyring) , `pip_install` fails with an error like\r\n```\r\n  File \"/private/var/tmp/_bazel_gkorlam/a1f9cb65ef7d02cf04534e97e406c6b9/external/rules_python/python/pip_install/extract_wheels/lib/bazel.py\", line 187, in extract_wheel\r\n    with open(os.path.join(directory, \"BUILD\"), \"w\") as build_file:\r\nIsADirectoryError: [Errno 21] Is a directory: 'pypi__keyring/BUILD'\r\n```\r\n\r\nThis is because the extracted whl file has a `build` directory in it.\r\n![Screen Shot 2021-03-02 at 2 00 39 PM](https://user-images.githubusercontent.com/291148/109721028-aed16480-7b5f-11eb-878b-e833241c0cf9.png)\r\n\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nBy changing the build file to `BUILD.bazel` it is much less likely to encounter this issue. `pip_install` succeeds in importing the keyring whl after this change.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "build_bazel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use BUILD.bazel file when creating py_library rules of extracted whls (#427)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f3ac254a19ac28f7ee",
    "number": 426,
    "body": "🧹 🧹 ...\r\n\r\nJust removing a TODO we don't need anymore. We not longer use a `deps()` function to included dependencies and https://github.com/bazelbuild/rules_pkg/issues/72 shows that it's no longer a desired pattern.\r\n\r\n----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n----\r\n\r\ncc @brandjon \r\n",
    "head_branch": "jonathon--remove-TODO-in-distro-about-release-notes-mar2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove obsolete TODO (#426)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f4ac254a19ac28f7ef",
    "number": 425,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Description \r\n\r\n🧹🧹...\r\n\r\nJust addressing  a small `TODO`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "jonathon--remove-TODO-in-integration-test-file-mar2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove TODO now that rules_python 0.0.3 (and 0.1.0) have been released (#425)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f4ac254a19ac28f7f0",
    "number": 424,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Description\r\n\r\nThis TODO was introduced here: https://github.com/brandjon/rules_python/commit/29260b3203fec444a4a8d17038c6ce238de86a7f\r\n\r\nI figure this TODO is now well obsolete and we can undo it. CI should still pass, and it does. \r\n\r\n_Note:_ I don't know why it shouldn't just be `//...` instead of `...`. Both work in CI, but `bazel build ...` is invalid when run locally. \r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\ncc @brandjon \r\n",
    "head_branch": "jonathon--remove-TODO-in-CI-presubmit-mar2021",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "now past Bazel 0.29 so can go back to using '...' in CI for build_targets list (#424)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f5ac254a19ac28f7f1",
    "number": 423,
    "body": "Currently `CONTRIBUTING.md` links to `/CONTRIBUTING.md`, it's fine for markdown rendering but in the PR, it links to https://github.com/contributing.md instead\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update PR template link to master CONTRIBUTING.md (#423)\n\nCurrently `CONTRIBUTING.md` links to `/CONTRIBUTING.md`, it's fine for markdown rendering but in the PR, it links to https://github.com/contributing.md instead\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f6ac254a19ac28f7f2",
    "number": 422,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [?] Tests for the changes have been added (for bug fixes / features)\r\n- [?] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [X] Other... Please describe:\r\n\r\ndependency update\r\n\r\n## What is the current behavior?\r\n\r\nrules_python uses old version of setuptools which can break some packages on windows\r\n\r\nIssue Number: #421 \r\n\r\n\r\n## What is the new behavior?\r\n\r\nrules_python uses current setuptools stable (54.0) which fixes above problem\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n?\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "setuptools-bump-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "setuptools: Bump version to 54.0.0 (#422)\n\n* setuptools: Bump version to 54.0.0\r\n\r\n* requirements\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>\r\nCo-authored-by: Henry Fuller <hrofuller@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f7ac254a19ac28f7f3",
    "number": 420,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAdds multi-package feature to `py_wheel` - it allows a distribution to contain multiple packages. Also, it writes a `top_level.txt` file with the specified packages contained in the distribution.\r\n\r\nI added an example that serves as a test to this new feature as well. It basically contains packages `foo` and `bar` in a distribution named `example-multi-package`. The test installs the built `.whl` using `pip` and asserts that a program can import `foo` and `bar` correctly.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "multi-package-distributions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f8ac254a19ac28f7f4",
    "number": 418,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe: Move wheel-building rules out of //experimental.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\nNo, the rules are still re-exported at the old location\r\n\r\nFIXES #374 ",
    "head_branch": "graduate-wheel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Graduate wheel-building code out of //experimental (#418)\n\n* Move wheelmaker from //experimental/tools into //tools.\r\n\r\n* Move wheel-building rules from //experimental/python to //python.\r\nRename from wheel.bzl to packaging.bzl to avoid confusion with existing whl.bzl\r\nKeep a stub wheel.bzl file in the old location for backwards compatibility.\r\n\r\n* Move wheel building examples out of experimental."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f9ac254a19ac28f7f5",
    "number": 417,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nRemoves Ubuntu 16.04 (and Python 3.5) support from CI\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nThis will unblock the upgrade of pip 21.0.1 in this PR https://github.com/bazelbuild/rules_python/pull/412\r\n",
    "head_branch": "groodt-remove-py35-support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove Ubuntu 16.04 from CI (#417)\n\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103f9ac254a19ac28f7f6",
    "number": 416,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\n- It does not write a packages_mapping.json file to the generated Bazel repository for a pip install.\r\n- It does not write a top_level.txt file to the .whl file generated by a py_wheel target.\r\n\r\n\r\n## What is the new behavior?\r\n\r\n1. The packages_mapping.json file:\r\n  This file contains mappings from <package_name> to <distribution_name> so we can programmatically perform lookups and determine what require() statements to add to a py_{library,binary}.\r\n\r\n2. The top_level.txt:\r\n  This is a way to determine which packages a distribution provides, in cases when a single distribution provides many.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "packages-mapping",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103faac254a19ac28f7f7",
    "number": 412,
    "body": "**Note**: No urgency to rush this. It introduces a breaking change where pip_install will only work for Python3+. If any release of rules_python needs to be done prior to prepare a final Python2 compatible release, it should be done before merging this.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nFollow up to https://github.com/bazelbuild/rules_python/pull/405\r\n\r\nThis PR introduces pip 21.0.1 as the vendored version of pip. This version of pip will only support Python 3+ and is pip breaking away from Python 2 support since pip 21.0: https://pip.pypa.io/en/stable/news/#id1\r\n\r\nMy suggestion would be to first merge https://github.com/bazelbuild/rules_python/pull/405 and prepare a release or tag along with documentation around the `pip_install` Python 2 support. Then this PR can be rebased against upstream bazelbuild/rules_python and merged to support Python 3 `pip_jnstall` support only for future development.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nFollow up to https://github.com/bazelbuild/rules_python/pull/405\r\n\r\nThis PR introduces pip 21.0.1 as the vendored version of pip. This version of pip will only support Python 3+ and is pip breaking away from Python 2 support since pip 21.0: https://pip.pypa.io/en/stable/news/#id1\r\n\r\nMy suggestion would be to first merge https://github.com/bazelbuild/rules_python/pull/405 and prepare a release or tag along with documentation around the `pip_install` Python 2 support. Then this PR can be rebased against upstream bazelbuild/rules_python and merged to support Python 3 `pip_jnstall` support only for future development.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\nPython3 only support for `pip_install` due to pip upgrade.\r\n",
    "head_branch": "groodt-pip-21.0",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pip: 20.3.4 -> 21.0.1 (#412)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103fbac254a19ac28f7f8",
    "number": 407,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/406\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "jonathon--remove-obsolete-content-in-README-27jan2020",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "pip_repositories() is deprecated. remove directive to use it from README (#407)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103fcac254a19ac28f7f9",
    "number": 405,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nUpdates the vendored version of pip from 20.3.3 to 20.3.4.\r\n\r\nNotably, this is slated to be the last version of pip that will support Python 2.\r\nhttps://github.com/pypa/pip/issues/8936#issuecomment-762080038\r\n\r\nIt might be prudent to prepare and tag a release of rules_python if this is merged.\r\n\r\nI would also suggest that rules_python, at least from the `pip_install` perspective, should target Python 3 only and mention this in the README files. I understand that the Bazel rules_python, in general, will need to support Python 2 until this requirement is removed from Bazel itself (and perhaps internally at Google), but the `pip_install` elements of the rules need not support Python 2 in my opinion. It is EOL and further developments in Python packaging are not going to support Python 2 (or Python <3.5) so it might be time to start enforcing this too.\r\n\r\nNote, there is an additional PR [here](https://github.com/groodt/rules_python/pull/1) with pip 21.0 that can be merged after this one. Which I would then consider a clean breaking change for the Python 2 vs Python 3 support for rules_python `pip_install`. In the same way that pip supports Python 2 with `pip<21` it would be possible to point users at a commit or version of rules_python `pip_install` that does work with Python 2 if they need it. \r\n\r\nI suspect my recommendation is overly cautious, I suspect the number of users that are using rules_python (for external pip dependencies) and Python 2 to be 0 or vanishingly close to 0.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nThis PR would not be introducing a breaking change, the breaking change is in the follow-up PR that introduces pip 21.0\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-pip-20.3.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "pip: 20.3.3 -> 20.3.4 (#405)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103fcac254a19ac28f7fa",
    "number": 404,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nWhen following the guidelines in the [README](https://github.com/bazelbuild/rules_python/blob/master/README.md) for setting up a workspace using the pip packaging rules one receives the following warning when executing bazel commands:\r\n`DEBUG: .../external/rules_python/python/pip.bzl:61:10: DEPRECATED: the pip_repositories rule has been replaced with pip_install, please see rules_python 0.1 release notes`\r\nCaused [here](https://github.com/bazelbuild/rules_python/blob/a4a1ccffc666db5376342789ad021a943fb84256/python/pip.bzl#L61).\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nBy not including the depecated rule in the WORKSPACE file, no more warning is generated. No functionality is lost.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n\r\nN/A\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103fdac254a19ac28f7fb",
    "number": 402,
    "body": "Looks like the amended sentence was no longer accurate. See https://github.com/bazelbuild/rules_python/blob/master/python/pip_install/pip_repository.bzl#L85\r\n\r\n-------\r\n\r\n### PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n### PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n### Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "jonathon--fix-inaccuracy-in-README-21jan2020",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "remove inaccuracy in README about default py interpreter used by pip_install (#402)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103feac254a19ac28f7fc",
    "number": 398,
    "body": "Partially addresses https://github.com/bazelbuild/rules_python/issues/397, specifically: \r\n\r\n> Then I read the instructions again, tried `pip3_import`, which doesn't exist (under pip.bzl). ...\r\n\r\n`pip3_import` is legacy now and not provided in `python/pip.bzl`, so shouldn't be commented as an alternative to `pip_install`. \r\n\r\ncc @dayfine\r\n\r\n----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [X] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "jonathon--remove-pip3_import_refs-from-README",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "do not show 'pip3_import' as alternative to 'pip_install' in README (#398)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662103ffac254a19ac28f7fd",
    "number": 396,
    "body": "## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Other information\r\n\r\nanohter -> another.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in readme. (#396)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210400ac254a19ac28f7fe",
    "number": 393,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\nFix for release related workspace target.\r\n\r\n\r\n## What is the current behavior?\r\n\r\n```bash\r\nbazel build //distro:relnotes --sandbox_debug\r\nINFO: Analyzed target //distro:relnotes (2 packages loaded, 14 targets configured).\r\nINFO: Found 1 target...\r\nERROR: /Users/jonathon/work/rules_python/distro/BUILD:28:16: Executing genrule //distro:relnotes failed (Exit 1) sandbox-exec failed: error executing command\r\n  (cd /private/var/tmp/_bazel_jonathon/29bb5d8ab2ff174b67c235f3ce7964dd/sandbox/darwin-sandbox/8/execroot/rules_python && \\\r\n  exec env - \\\r\n    PATH=/Users/jonathon/Library/Caches/bazelisk/downloads/bazelbuild/bazel-3.3.1-darwin-x86_64/bin:/Users/jonathon/.nix-profile/bin:/usr/local/opt/scala@2.11/bin:/Users/jonathon/.yarn/bin:/Users/jonathon/.config/yarn/global/node_modules/.bin:/Users/jonathon/.cargo/bin:/Users/jonathon/bin:/Users/jonathon/.nix-profile/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/jonathon/go/bin:/usr/local/opt/go/libexec/bin:/Users/jonathon/.rvm/bin \\\r\n    TMPDIR=/var/folders/nd/gpn3vrt9793bpr1c_x0wy7kr0000gn/T/ \\\r\n  /usr/bin/sandbox-exec -f /private/var/tmp/_bazel_jonathon/29bb5d8ab2ff174b67c235f3ce7964dd/sandbox/darwin-sandbox/8/sandbox.sb /var/tmp/_bazel_jonathon/install/e74efe234cbfbe8b17b6baeb8c33e7ff/process-wrapper '--timeout=0' '--kill_delay=15' /bin/bash -c 'source external/bazel_tools/tools/genrule/genrule-setup.sh; bazel-out/host/bin/external/rules_pkg/releasing/print_rel_notes --repo=rules_python --version=0.1.0 --tarball=bazel-out/darwin-fastbuild/bin/distro/rules_python-0.1.0.tar.gz --setup_file=python:repositories.bzl >bazel-out/darwin-fastbuild/bin/distro/relnotes.txt')\r\nsetup_file can only be set if at least one of (deps_method, toolchains_method) is set.\r\nTarget //distro:relnotes failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 1.314s, Critical Path: 1.13s\r\nINFO: 1 process: 1 darwin-sandbox.\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\n\r\n## What is the new behavior?\r\n\r\nCommit 5be1f76e3ecd1f743f4213f3087c2a0961411782 upgraded `rules_pkg` and broke `//distro:relnotes` (checked with `git bisect`). The same commit made the use of `setup_file` in the broken target unnecessary, so the fix is to just remove it.\r\n\r\n```\r\nbazel build //distro:relnotes --sandbox_debug\r\nINFO: Analyzed target //distro:relnotes (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nTarget //distro:relnotes up-to-date:\r\n  bazel-bin/distro/relnotes.txt\r\nINFO: Elapsed time: 0.111s, Critical Path: 0.00s\r\nINFO: 0 processes.\r\nINFO: Build completed successfully, 1 total action\r\n```\r\n\r\nProducing... \r\n\r\n```bash\r\ncat bazel-bin/distro/relnotes.txt\r\n------------------------ snip ----------------------------\r\n**New Features**\r\n\r\n**Incompatible Changes**\r\n\r\n**WORKSPACE setup**\r\n\r\n\\```\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\nhttp_archive(\r\n    name = \"rules_python\",\r\n    url = \"https://github.com/bazelbuild/rules_python/releases/download/0.1.0/rules_python-0.1.0.tar.gz\",\r\n    sha256 = \"a95cc0980de136b777f4e3b1a9e6d2ad8e725b5cd9816352922d427d7f9394f7\",\r\n)\r\n\\```\r\n\r\n**Using the rules**\r\n\r\nSee [the source](https://github.com/bazelbuild/rules_python/tree/master).\r\n------------------------ snip ----------------------------\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "jonathon--fix-print_rel_notes-target",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Upgrading rules_pkg broke //distro:relnotes. Fix target by removing 'setup_file' as it's a no-op now (#393)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210400ac254a19ac28f7ff",
    "number": 391,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## Description\r\n\r\nThis `README` was carried over during the merge of `rules_python_external`, and it has info that's duplicating and sometimes contradictory of the documentation in the root `README`. I'd favour just removing it. \r\n\r\nIf there's anything in this `README` that you think should remain in the repo, I can pull it out and put it in the root `README` under _\"Using the packaging rules\"_.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n\r\n",
    "head_branch": "jonathon--remove-rules_python_external-README",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove the rules_python_external README (#391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210402ac254a19ac28f800",
    "number": 390,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nUpdates the versions of the PyPI dependencies that are used in the packaging rules.\r\n\r\npip: 19.3.1 -> 20.3.3 [Changelog](https://pip.pypa.io/en/stable/news/)\r\npkginfo: 1.5.0.1 -> 1.6.1 [Changelog](https://bazaar.launchpad.net/~tseaver/pkginfo/trunk/view/head:/CHANGES.txt)\r\nsetuptools: 42.0.2 -> 44.1.0 [Changelog](https://setuptools.readthedocs.io/en/latest/history.html)\r\nwheel: 0.33.6 -> 0.36.1 [Changelog](https://wheel.readthedocs.io/en/stable/news.html)\r\n\r\nMostly adds Python 3.9 support, removes Python 3.4 support, adds macos Big Sur support and includes general bug fixes and improvements.\r\n\r\n`setuptools` has been upgraded to the most recent version that supports Python 2.7. Newer versions remove support for Python 2.7 and ultimately start crashing on 2.7 from ~50.x.x. Until Bazel or the rules remove support for 2.7 it probably isn't appropriate to remove support for 2.7 in the packaging rules. If my assumption is incorrect, I can adjust to update `setuptools` to the latest version.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "groodt-bump-pip-install-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update pip_install dependencies (#390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210402ac254a19ac28f801",
    "number": 389,
    "body": "This fixes the same issue as https://github.com/bazelbuild/rules_python/pull/232 but in another place.\r\n\r\n## What is the current behavior?\r\n\r\nCurrently bad user level pip.conf files break pip installations\r\n\r\n## What is the new behavior?\r\n\r\nUser level pip.conf files are ignored.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\nPotentially if people are relying on user local pip.conf files. If they are they should likely be defining that in their build instead though.",
    "head_branch": "ks/pass-isolated-to-pip-wheel-invocation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pass --isolated to pip wheel invocation (#389)\n\nThis fixes the same issue as\r\nhttps://github.com/bazelbuild/rules_python/pull/232 but in another\r\nplace.\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210403ac254a19ac28f802",
    "number": 388,
    "body": "Also allow other Python tag specifiers like cp35, as binary wheels\r\ntypically list their required Python versions in the filename.\r\n\r\nWas successfully able to upload a binary wheel created with this to PyPI,\r\nand install it with pip.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nCurrently the code refuses to build a binary wheel.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nIt accepts platforms other than 'any'.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "binary-wheels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "support binary wheels (#388)\n\nSupport binary wheels\r\n\r\nAlso allow other Python tag specifiers like cp35, to constrain to\r\na particular Python version."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210404ac254a19ac28f803",
    "number": 379,
    "body": "This adds support for allowing people to specify which versions\r\nof python a wheel should run on. This was added in PEP 440\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [X] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\nThis adds support for PEP 440 to wheels\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #378\r\n\r\n\r\n## What is the new behavior?\r\n\r\nAllows people to specify which versions of python a wheel can support.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "python_requires",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Adds the \"Requires-Python\" metadata support. Fixes #378 (#379)\n\n* Adds the \"Requires-Python\" metadata support. Fixes #378\n\nThis adds support for allowing people to specify which versions\nof python a wheel should run on. This was added in PEP 440\n\n* Move 'Requires-Python' to a conditional\n\n* Add python test to check metadata\n\nCo-authored-by: Alex Eagle <eagle@post.harvard.edu>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210405ac254a19ac28f804",
    "number": 377,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThere isn't an equivalent to `all_requirements` for `whl_requirement`.\r\n\r\n## What is the new behavior?\r\nA list `all_whl_requirements` is added to `requirements.bzl` which contains all of the wheel targets.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n## Other information\r\nThe `all_whl_requirements` list is handy if you want to write a target that takes all of the wheels built by `rules_python` and upload them to a private wheelhouse say.",
    "head_branch": "all-whl-requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add `all_whl_requirements` to match `all_requirements` (#377)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210406ac254a19ac28f805",
    "number": 376,
    "body": "Addresses https://github.com/bazelbuild/rules_python/issues/375. \r\n\r\nFrom looking at the `git blame`, this commentary was introduced when https://github.com/dillon-giacoppo/rules_python_external was still a WIP project. I don't think the commentary reflects any current active intent of the maintainers to remove `all_requirements`. \r\n\r\ncc'ing @dillon-giacoppo to possibly learn original intent of deprecation. \r\ncc'ing @person142, issue #375 creator. \r\n\r\n-----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: https://github.com/bazelbuild/rules_python/issues/375\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "jonathon--all_requirements-not-deprecated",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove commentary indicating that 'all_requirements' is deprecated (#376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210406ac254a19ac28f806",
    "number": 373,
    "body": "This uses pip-tools to compile a requirements.in file to a requirements.txt file,\r\nallowing transitive dependency versions to be pinned so that builds are reproducible.\r\n\r\nFixes #176",
    "head_branch": "pip_requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Introduce compile_pip_requirements rule (#373)\n\nThis uses pip-tools to compile a requirements.in file to a requirements.txt file,\r\nallowing transitive dependency versions to be pinned so that builds are reproducible.\r\n\r\nFixes #176"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210407ac254a19ac28f807",
    "number": 371,
    "body": "Allows using --action_env=PIP_PYTHON=/path/to/python to specify the interpreter location on the Bazel command line.\r\n\r\nOn Windows, pip_install() fails when using a standard Python install. The toolchain logic is correctly able to find Python, but from I gather, we can't take advantage of it in a WORKSPACE file. While pip_repositories() accepts a python_interpreter argument, this seems to require hard-coding the value. If there is some other way for users of a workspace to specify a custom python path without editing the WORKSPACE file that I have missed, please let me know.\r\n\r\nI've added a mention of it in the docstring in pip_repository.bzl, but that file does not currently be appeared to be processed by stardoc, and I wasn't able to get it working without errors:\r\n\r\n```\r\nException in thread \"main\" java.lang.IllegalStateException: File python/pip_install/repositories.bzl imported '@bazel_tools//tools/build_defs/repo:http.bzl', yet external/bazel_tools/tools/build_defs/repo/http.bzl was not found, even at roots [.].\r\n```\r\n\r\nIf you'd like the update-docs.sh split off, please let me know.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [x] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "python-path-env-var",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210408ac254a19ac28f808",
    "number": 370,
    "body": "This adds useless setup code to a users WORKSPACE file.\r\n\r\nThe idea that we could add some transitive WORKSPACE dependencies is flawed without a working support for this in Bazel. Anything we add in that function later is a breaking change for users, in that they might call our py_repositories() before fetching rules_xx, and we already installed an incompatible rules_xx.\r\n\r\nSince adding anything here is a breaking change, we can always put it back later as a breaking change to the rules.\r\n\r\nHowever I would argue strongly that rules_python is too core in the dependency chain for it to *ever* grow transitive dependencies. Like rules_nodejs we should either vendor code we need privately or strip development-only dependencies from our distribution, and never suggest that users call a rules_python function that installs other starlark code.\r\n",
    "head_branch": "kill_dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove py_repositories (#370)\n\nThis adds useless setup code to a users WORKSPACE file.\r\n\r\nThe idea that we could add some transitive WORKSPACE dependencies is flawed without a working support for this in Bazel. Anything we add in that function later is a breaking change for users, in that they might call our py_repositories() before fetching rules_xx, and we already installed an incompatible rules_xx.\r\n\r\nSince adding anything here is a breaking change, we can always put it back later as a breaking change to the rules.\r\n\r\nHowever I would argue strongly that rules_python is too core in the dependency chain for it to *ever* grow transitive dependencies. Like rules_nodejs we should either vendor code we need privately or strip development-only dependencies from our distribution, and never suggest that users call a rules_python function that installs other starlark code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210409ac254a19ac28f809",
    "number": 369,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features) **N/A**\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "joanthon--README-update-2020-10-15",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "README update (related to 0.1.0 release) (#369)\n\n* README update: remove outdated refs to 'pip_import', add 'Recent Update', remove 'git_repository' usage\r\n\r\n* add section about legacy 'pip_import'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621040aac254a19ac28f80a",
    "number": 368,
    "body": "Minor cleanups:\r\n - rename experimental/rules_python to experimental/tools to avoid confusion,\r\n - change \"generator\" header in distinfo/WHEEL to be more informative.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Minor cleanups\r\n\r\n## What is the new behavior?\r\nChange in \"generator\" header in distinfo/WHEEL\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n",
    "head_branch": "cleanups",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanups (#368)\n\n* Rename experimental/rules_python to experimental/tools\r\n\r\nThis better reflects contents of this package.\r\n\r\n* Change \"generator:\" name embedded in wheels to bazel-wheelmaker.\r\n\r\nIt will be easier to identify origin of the wheels."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621040bac254a19ac28f80b",
    "number": 367,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: closes #366 \r\n\r\nRelative `file:` requirements do not work due to `pip wheel` being run from the generated repository root.\r\n\r\n## What is the new behavior?\r\n\r\nRelative `file:` URIs in requirements.txt are converted to absolute `file:///` URIs based on the directory containing the requirements.txt file. This allows wheel files within the workspace to take part in dependency resolution, since the alternative `whl_library` rule is both non-recommended and does not attempt to fetch dependencies based on the wheel metadata.\r\n\r\nSupports both `file:some/path/to/wheel.whl` and `requirement @ file:some/path/to/wheel.whl`. If a requirement is already absolute it will not be altered. For this to work, the requirements.txt file has to be copied into the generated repository, since we do not want to amend the source file in place.\r\n\r\nThis does not attempt to support local wheels with paths specified without `file:`, since these are equivalent but the bare requirement is harder to patch. Supporting that version consistently would require either writing a full parser for the requirements.txt format or depending on the internal implementation in `pip._internal`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nYou may be able to deprecate `whl_library` rule as a result of this, if desired.",
    "head_branch": "support-local-wheel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621040cac254a19ac28f80c",
    "number": 365,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nI ran into an issue where the pip_install rule does not re-run if the underlying http_archive that it is imported from changes. If the API in `@pip//:requirements.bzl` changes, say to create a new helper function, that function won't be importable unless you run `bazel clean --expunge` to force pip_install to re run with the new rules_python source in the http_archive.\r\n\r\nSteps to repro:\r\n1. run some some bazel command like `bazel query //...`\r\n2. switch to a commit with a different rules_python version, and a new function in @pip//:requirements.bzl generated by `python.pip_install.extract_wheels.lib:generate_requirements_file_contents`\r\n3. try to load that new symbol in a BUILD file and run `bazel query //...` see some error like:\r\n`file '@pip//:requirements.bzl' does not contain symbol '<new symbol you added>' `\r\n4. run `bazel clean --expunge`\r\n5. See that error go away as the pip_install repo rule is re-run.\r\n\r\nWhile it is surprising that the generated `@pip//:requirements.bzl` is not invalidated when the http_archive changes, it could be a corner case of invalidation that is not covered because that file is not actually a part of the archive. It is generated by the repo_rule that comes from the archive. If that .bzl file is the only thing requested from the repo_rule then the repo_rule may not be considered invalid.\r\n\r\n## What is the new behavior?\r\nRun steps 1-3 above and see no error. The pip_install repo rule is re-run if bazel sees the source of its import (the http_archive) change.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nThere may be other side effects of having the pip_install repository rule declared as local=True but this fixes the issue, and doesn't cause any extra analysis time work in the workspace. If there are other concerns with local=True I would appreciate input on how to invalidate the pip_install repo in other ways when the underlying bazel source changes.",
    "head_branch": "pip-repo-local",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621040dac254a19ac28f80d",
    "number": 364,
    "body": "This allows distribution tools that have their own mechanisms of\r\npackaging whls to take advantage of the pip resolve and dependency\r\ngraph creation that rules_python_external offers.\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThe downloaded .whl files used to create py_library targets in the repository rule are deleted after the contents is extracted.\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nThe .whl files are copied to the new //pypi__ package root and a filegroup target called `:whl` is created to capture the .whl file and its direct wheel dependencies. A dependency graph of wheel files is created in parallel to the py_library dependency graph.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "expose_wheel_files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expose resolved .whl files in filegroup target of pypi__ packages. (#364)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621040eac254a19ac28f80e",
    "number": 363,
    "body": "Not meant to open this here yet, closing.",
    "head_branch": "python-hermetic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621040fac254a19ac28f80f",
    "number": 362,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] Other... Please describe:\r\nChanges to experimental rules_python_external upstreamed from rules_python_external https://github.com/dillon-giacoppo/rules_python_external/pull/58\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\nUsers can pass in the hostname of a mirror of files.pythonhosted.org which is used to fetch rule dependencies.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "hrfuller/alternate-repo-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210410ac254a19ac28f810",
    "number": 361,
    "body": "## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "tylerprete-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210411ac254a19ac28f811",
    "number": 359,
    "body": "Follows up on next steps from https://github.com/bazelbuild/rules_python/pull/354\r\nSee individual commits for more detail (this should be rebased and merged, not squashed)\r\n\r\nReminder of the plan:\r\n\r\n- ~~bring in the repo to a subdirectory, preserving git history and contributors~~\r\n- ~~clean up the code, remove mypy, get it functional in that subdirectory~~\r\n- ~~add an example/integration test proving that it works~~\r\n- ~~cut a patch release and get some users to test it out~~\r\n- communicate our deprecation plan to rules_python users\r\n- **THIS PR** -> BIG SWITCH: move the rules_python_external implementation to the root, make a legacy/ directory for current impl\r\n- fill in any missing docstrings and include new rules in stardoc\r\n- cut a breaking release (a minor, since semver starting with 0. states that minors are breaking)\r\n- help users switch over\r\n- in a later breaking release, actually remove the old implementation",
    "head_branch": "external3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Restore the python/pip.bzl#pip_repositories function\n\nIt is called from rules_docker so we have to leave a placeholder until rules_docker is fixed and all users update"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210412ac254a19ac28f812",
    "number": 358,
    "body": "## Description \r\n\r\nAdding missing docstrings for `experimental/rules_python_external`. Does not add new rules into Stardoc yet. That will be a subsequent pull request.\r\n\r\n### Plan 🛣\r\n\r\nOur plan is in multiple steps:\r\n- ~bring in the repo to a subdirectory, preserving git history and contributors~\r\n- ~clean up the code, remove mypy, get it functional in that subdirectory~\r\n- ~add an example/integration test proving that it works~\r\n- ~cut a patch release and get some users to test it out~\r\n- communicate our deprecation plan to rules_python users\r\n- **fill in any missing docstrings and include new rules in stardoc** ← **PR is doing part one of this**\r\n- BIG SWITCH: move the rules_python_external implementation to the root, make a legacy/ directory for current impl\r\n- cut a breaking release (a minor, since semver starting with 0. states that minors are breaking)\r\n- help users switch over\r\n- in a later breaking release, actually remove the old implementation\r\n\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "jonathon--rules_python_external-fill-missing-docstrings-sep2020",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "rules_python_external: fill missing docstrings (#358)\n\nadd missing docstrings for rules_python_external\r\n\r\nalso remove unused attr on pip_repository repo rule"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210412ac254a19ac28f813",
    "number": 354,
    "body": "- Clean up files that aren't needed now that it's a subdirectory of rules_python\r\n- Move the example into the top-level examples\r\n\r\nReminder of the plan:\r\n\r\n- ~~bring in the repo to a subdirectory, preserving git history and contributors~~\r\n- ~~clean up the code, remove mypy, get it functional in that subdirectory~~\r\n- **THIS PR** add an example/integration test proving that it works\r\n- cut a patch release and get some users to test it out\r\n- communicate our deprecation plan to rules_python users\r\n- BIG SWITCH: move the rules_python_external implementation to the root, make a legacy/ directory for current impl\r\n- fill in any missing docstrings and include new rules in stardoc\r\n- cut a breaking release (a minor, since semver starting with 0. states that minors are breaking)\r\n- help users switch over\r\n- in a later breaking release, actually remove the old implementation",
    "head_branch": "external2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Make rules_python_external functional (#354)\n\n- Clean up files that aren't needed now that it's a subdirectory of rules_python\r\n- Move the example into the top-level examples\r\n\r\nFrom the checklist in https://github.com/bazelbuild/rules_python/pull/352\r\nthis is the third item."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210413ac254a19ac28f814",
    "number": 353,
    "body": "## Description \r\n\r\nRemoving [`bazel-mypy-integration`](https://github.com/thundergolfer/bazel-mypy-integration) from `experimental/rules_python_external` as the integration is not required at runtime by `rules_python_external` and keeping it in the project will make integration with the 'core' more complicated than necessary.\r\n\r\n### Plan 🛣\r\n\r\nOur plan is in multiple steps:\r\n- ~bring in the repo to a subdirectory, preserving git history and contributors~\r\n- **clean up the code, remove mypy, get it functional in that subdirectory** ← **This PR is here**\r\n- add an example/integration test proving that it works\r\n- cut a patch release and get some users to test it out\r\n- communicate our deprecation plan to rules_python users\r\n- BIG SWITCH: move the rules_python_external implementation to the root, make a legacy/ directory for current impl\r\n- fill in any missing docstrings and include new rules in stardoc\r\n- cut a breaking release (a minor, since semver starting with 0. states that minors are breaking)\r\n- help users switch over\r\n- in a later breaking release, actually remove the old implementation\r\n\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n",
    "head_branch": "jonathon--cleanup-rules_python_external-part1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove bazel-mypy-integration as it is not needed and makes integration into rules_python harder (#353)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210414ac254a19ac28f815",
    "number": 352,
    "body": "This is the beginning of making that the canonical way to get dependencies, replacing the pip features in this repo.\r\n\r\nOur plan is in multiple steps:\r\n- (this PR) bring in the repo to a subdirectory, preserving git history and contributors\r\n- clean up the code, remove mypy, get it functional in that subdirectory\r\n- add an example/integration test proving that it works\r\n- cut a patch release and get some users to test it out\r\n- communicate our deprecation plan to rules_python users\r\n- BIG SWITCH: move the rules_python_external implementation to the root, make a legacy/ directory for current impl\r\n- fill in any missing docstrings and include new rules in stardoc\r\n- cut a breaking release (a minor, since semver starting with 0. states that minors are breaking)\r\n- help users switch over\r\n- in a later breaking release, actually remove the old implementation\r\n\r\nThis is a second pass at this PR since the first one got squashed",
    "head_branch": "merge_external",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix buildifier warnings in rules_python_external\n\nJust enough to get CI green for now\nAlso ignore the merge commit in git blame and the subdirectory when expanding //... pattern"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210415ac254a19ac28f816",
    "number": 351,
    "body": "Was squashed and we lost merge history\r\nThis reverts commit 0d23d579fd93b72fe94b27b0077fbf3dc8680724.\r\n",
    "head_branch": "revert",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Revert \"Merge rules python external (#348)\" (#351)\n\nWas squashed and we lost merge history\r\nThis reverts commit 0d23d579fd93b72fe94b27b0077fbf3dc8680724."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210416ac254a19ac28f817",
    "number": 350,
    "body": "Issue: https://github.com/bazelbuild/rules_python/issues/14\r\nDuplicate issue: https://github.com/bazelbuild/rules_python/issues/55\r\n\r\nWorkaround patch source: https://github.com/AppliedIntuition/rules_python/commit/77f6258",
    "head_branch": "patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210417ac254a19ac28f818",
    "number": 349,
    "body": "## PR Checklist\r\n\r\n- [X] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n- [X] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n\r\n## What is the current behavior?\r\n\r\nPython wheels have a rich concept called `entry_points`. The most common use of these is the existing `console_scripts` support: command-line wrappers for Python code.\r\n\r\nHowever, there are many more uses. Another common one is `plugins` -- the Python version of, say, Java `@AutoService`. This is how `pytest` finds modules on the `PYTHONPATH`.\r\n\r\nThis PR is something we've been using for a while to add our own plugins to the `entry_points` file; but the change is worth discussing.\r\n\r\nIn one sense, this is stupid. There's some interference between `console_scripts` and `plugins` -- in reality, the underlying structure is:\r\n\r\n```\r\n[group name, like console_scripts]\r\nkey1 = value1\r\nkey2 = value2\r\n...\r\n\r\n[g2]\r\nkey3 = v3\r\nkey4 = v4\r\n...\r\n\r\n...\r\n```\r\n\r\nSo maybe this would be best as a single argument merging `console_scripts` in: `{group: {k1: v1, k2: v2, ...}, ...}`... if we wanted to make a breaking change.\r\n\r\nBut since `console_scripts` already existed, I added `plugins` separately. (I did not call it `entry_points` since it doesn't handle `console_scripts`).\r\n\r\n(There are of course, other backwards-compat options like adding an `entry_points` arg that throws if `console_scripts` is present.)\r\n\r\nIssue Number: not yet, but happy to file one if needed\r\n\r\n\r\n## What is the new behavior?\r\n\r\nWheels built by `rules_python` support `entry_points` other than `console_scripts`, hopefully without breaking existing `console_scripts` support.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [X] No - At least, I tried not to.\r\n\r\n## Other information\r\n\r\nSee https://packaging.python.org/specifications/entry-points/ and specifically https://packaging.python.org/guides/creating-and-discovering-plugins/#using-package-metadata\r\n\r\nSorry for not ticking all the boxes from jump - this has been sitting around a while and when I realized PRs are being reviewed again I thought it might be worth starting the discussion.\r\n\r\n<!-- Reviewable:start -->\r\n---\r\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/bazelbuild/rules_python/349)\r\n<!-- Reviewable:end -->\r\n",
    "head_branch": "for-pr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "wheel: support for 'plugin' type entry_points (#349)\n\n* wheel: support for 'plugin' type entry_points\r\n\r\nSee https://packaging.python.org/guides/creating-and-discovering-plugins/\\#using-package-metadata"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210417ac254a19ac28f819",
    "number": 348,
    "body": "This is the beginning of making that the canonical way to get dependencies, replacing the pip features in this repo.\r\n\r\nOur plan is in multiple steps:\r\n\r\n- (this PR) bring in the repo to a subdirectory, preserving git history and contributors\r\n- clean up the code, remove mypy, get it functional in that subdirectory\r\n- add an example/integration test proving that it works\r\n- cut a patch release and get some users to test it out\r\n- communicate our deprecation plan to rules_python users\r\n- BIG SWITCH: move the rules_python_external implementation to the root, make a legacy/ directory for current impl\r\n- fill in any missing docstrings and include new rules in stardoc\r\n- cut a breaking release (a minor, since semver starting with 0. states that minors are breaking)\r\n- help users switch over\r\n- in a later breaking release, actually remove the old implementation",
    "head_branch": "merge_rules_python_external",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge rules python external (#348)\n\nCo-authored-by: Dillon Giacoppo <dillon@canva.com>\r\nCo-authored-by: Dillon Giacoppo <dillon.giacoppo@gmail.com>\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>\r\nCo-authored-by: Greg Roodt <groodt@gmail.com>\r\nCo-authored-by: Kevin Gessner <kevin@kevingessner.com>\r\nCo-authored-by: benjamin-fleischmann <56046658+benjamin-fleischmann@users.noreply.github.com>\r\nCo-authored-by: Gergely Fábián <gergo.fb@gmail.com>\r\nCo-authored-by: JoshuaCrestone <57449606+JoshuaCrestone@users.noreply.github.com>\r\nCo-authored-by: Allan Clark <allanc@chickenandporn.com>\r\nCo-authored-by: Sebastian Pietras <seba00767@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210418ac254a19ac28f81a",
    "number": 347,
    "body": "This will fix recent test breakage in Bazel downstream:\r\nhttps://buildkite.com/bazel/bazel-at-head-plus-downstream/builds/1588#91ed10dd-2b13-4cee-99cc-88a2e8e58a31\r\n\r\nSimilar issue and fix:\r\nhttps://github.com/bazelbuild/bazel/issues/10554\r\nhttps://github.com/bazelbuild/rules_nodejs/pull/1538\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Does not include precompiled binaries, eg. `.par` files. See [CONTRIBUTING.md](/CONTRIBUTING.md) for info\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [x] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "presubmit.yml: Set skip_use_bazel_version_for_test: true (#347)\n\nThis will fix recent test breakage in Bazel downstream:\r\nhttps://buildkite.com/bazel/bazel-at-head-plus-downstream/builds/1588#91ed10dd-2b13-4cee-99cc-88a2e8e58a31\r\n\r\nSimilar issue and fix:\r\nhttps://github.com/bazelbuild/bazel/issues/10554\r\nhttps://github.com/bazelbuild/rules_nodejs/pull/1538"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210419ac254a19ac28f81b",
    "number": 344,
    "body": "Fixes #2 (if we can get it green)",
    "head_branch": "windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621041aac254a19ac28f81c",
    "number": 342,
    "body": "### Description \r\n\r\nPutting warning up front to contributors that we don't accept changes to the `.par` files in pull requests. \r\n\r\n-----\r\n\r\n## PR Checklist\r\n\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\n\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature (please, look at the \"Scope of the project\" section in the README.md file)\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nN/A\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\n- Example PR with changes to `.par` files: https://github.com/bazelbuild/rules_python/pull/333\r\n\r\n",
    "head_branch": "jonathon--update-pr-template-17jul2020",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "warn against putting .par file changes in PR. (#342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621041bac254a19ac28f81d",
    "number": 339,
    "body": "It's currently a stalled project so it's not useful for us to direct new users there in our README.\r\nSeparately it is harder to develop on rules_python since it is currently not self-contained.\r\nFor example it's hard to find or adjust the version of rules_pkg without looking/editing in the federation repo.\r\n\r\nTony says this is an okay change: https://github.com/bazelbuild/bazel-federation/commit/63f9746afd4e8564d1033c529ce5065f69d6c7f9#commitcomment-40577834\r\n",
    "head_branch": "no_federation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove mention and usage of Bazel Federation (#339)\n\nIt's currently a stalled project so it's not useful for us to direct new users there in our README.\nSeparately it is harder to develop on rules_python since it is currently not self-contained.\nFor example it's hard to find or adjust the version of rules_pkg without looking/editing in the federation repo.\nTony says this is an okay change: https://github.com/bazelbuild/bazel-federation/commit/63f9746afd4e8564d1033c529ce5065f69d6c7f9#commitcomment-40577834"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621041bac254a19ac28f81e",
    "number": 338,
    "body": "",
    "head_branch": "examples2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ci: add bazel_integration_test (#338)\n\nThis runs a py_test with a copy of bazel as a data dep.\r\nIt glob()s up the sources for each example and runs nested bazel test on them.\r\nThis detects whether the examples are fully working and self-contained.\r\n\r\nFollow-up step is to replace the rules_python.tgz with a HEAD version so we detect\r\nbreakages."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621041cac254a19ac28f81f",
    "number": 337,
    "body": "This lets users understand the example in isolation. They can copy/paste the example directory\r\nand it works correctly.\r\n\r\nThis refactors the existing examples which are quite weak, only really demonstrating pip usage.\r\nThis makes room for examples demonstrating other features (like protocol buffers) or package\r\nmanagers (like poetry).\r\n\r\nIn a later commit I'll add bazel-integration-testing so we get a test target that confirms\r\nthe examples build (including their WORKSPACE being self-contained)\r\n",
    "head_branch": "examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "feat(examples): move examples to a nested WORKSPACE (#337)\n\nThis lets users understand the example in isolation. They can copy/paste the example directory\r\nand it works correctly.\r\n\r\nThis refactors the existing examples which are quite weak, only really demonstrating pip usage.\r\nThis makes room for examples demonstrating other features (like protocol buffers) or package\r\nmanagers (like poetry).\r\n\r\nIn a later commit I'll add bazel-integration-testing so we get a test target that confirms\r\nthe examples build (including their WORKSPACE being self-contained)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621041dac254a19ac28f820",
    "number": 336,
    "body": "If in a dependency tree a directory is used as out this is passed as\r\ninput_file to wheelmaker which then generates an unhandled error as\r\nit tries to write the directory as a file.",
    "head_branch": "check_directory",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Check if input_file is directory and then add all files within that directory (#336)\n\nIf in a dependency tree a directory is used as out this is passed as\r\ninput_file to wheelmaker which then generates an unhandled error as\r\nit tries to write the directory as a file.\r\n\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621041eac254a19ac28f821",
    "number": 334,
    "body": "See https://docs.github.com/en/github/building-a-strong-community/using-templates-to-encourage-useful-issues-and-pull-requests\r\nThis will ask users filing an issue to indicate if it's a bug or a feature request and prompt them to include answers to common questions, reducing how many round-trips they need from maintainers.\r\nSame for pull requests, especially to think about whether this is a breaking change.\r\n\r\nAlso add a .bazelversion file to pin the version devs and CI use when developing in the repo.\r\n\r\nIn the future we might want rules_codeowners to generate the .github/CODEOWNERS file as we expand community maintainers",
    "head_branch": "github_files",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "chore: github setup improvements (#334)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621041fac254a19ac28f822",
    "number": 333,
    "body": "`zipfile.ZipFile` does not retain file permissions, which leads to the loss of the executable bit on files. This impacts the installation of any Python packages that rely on executable scripts (i.e. `pyspark`). The `unzip_file` function used by pip corrects this issue by adding the executable bit back:\r\n\r\nhttps://github.com/pypa/pip/blob/ebd331fb45f4994bc075a799e38252a0b77bd566/src/pip/_internal/utils/unpacking.py#L107\r\n\r\nThis request replaces the call to `zipfile.ZipFile` with a call to a slightly modified `unzip_file` function. The minor modifications to the original source code from unpacking.py remove any functions/classes that are not necessary for core functionality and/or error checking. Alternatively, pip could be added as a dependency and the function could be imported directly.",
    "head_branch": "pip-file-permissions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use internal pip unzip_file definition to ensure executable bit is retained when unpacking (#333)\n\n* keep file permissions when unpacking\r\n\r\n* regenerate tools\r\n\r\nCo-authored-by: Garrett Weaver <garrett.weaver@csscompany.com>\r\nCo-authored-by: Jonathon Belotti <jonathon@canva.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210420ac254a19ac28f823",
    "number": 331,
    "body": "py_wheel does not add `pip requirments` to the output wheel as Requires-Dist\r\n\r\nGiven the following example of building wheel\r\n\r\nhttps://github.com/bazelbuild/rules_python/blob/cfcc67538262cd592a372e8f4d03621c50857419/experimental/examples/wheel/BUILD#L49-L63\r\n\r\nThe `:main` target depends on  ` \"//examples/helloworld\", ` that depends of the `futures==3.3.0` library.\r\n\r\nhttps://github.com/bazelbuild/rules_python/blob/cfcc67538262cd592a372e8f4d03621c50857419/experimental/examples/wheel/BUILD#L22-L32\r\n\r\nTo build a complete wheel with all requirements should be py_wheel should be declared as.\r\n\r\npy_wheel( \r\n     name = \"minimal_with_py_package\", \r\n     # Package data. We're building \"example_minimal_package-0.0.1-py3-none-any.whl\" \r\n     distribution = \"example_minimal_package\", \r\n     python_tag = \"py3\", \r\n     version = \"0.0.1\", \r\n     deps = [\":example_pkg\"], \r\n    **requires = [\"futures==3.3.0\",]**\r\n ) \r\n\r\n\r\nThis PR attempts to add `futures==3.3.0` to the final wheels, without specifying the futures library in the `py_wheel` declaration.\r\nThe futures library will then be part of METADATA as a  `Requires-Dist`.\r\n",
    "head_branch": "extract-requirements-for-wheel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210421ac254a19ac28f824",
    "number": 329,
    "body": "`bazel build //...` was failing due to \"googleapis-common-protos[grpc]\"\r\npip package being unavailable.\r\n\r\nIt seems to be caused by latest googleapis-common-protos release.\r\nSpecify googleapis-common-protos in requirements.txt to be in the previous\r\nversion (1.51.0) to fix this.\r\n\r\nFixes #321.",
    "head_branch": "fix_failing_ci_build",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix failing build on CI by specifying pip package version (#329)\n\n`bazel build //...` was failing due to \"googleapis-common-protos[grpc]\"\r\npip package being unavailable.\r\n\r\nIt seems to be caused by latest googleapis-common-protos release.\r\nSpecify googleapis-common-protos in requirements.txt to be in the previous\r\nversion (1.51.0) to fix this.\r\n\r\nFixes #321."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210421ac254a19ac28f825",
    "number": 328,
    "body": "Addresses https://github.com/bazelbuild/rules_python/issues/289\r\n\r\n\r\n",
    "head_branch": "jonathon--deterministic-dependency-set-issue-289",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Address https://github.com/bazelbuild/rules_python/issues/289 (#328)\n\nCo-authored-by: Andy Scott <andyscott@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210422ac254a19ac28f826",
    "number": 327,
    "body": "master CI build [is currently failing with](https://buildkite.com/bazel/rules-python-python/builds/834#a478721a-3cda-4b27-903a-abe2d7def4d9): \r\n\r\n```\r\nhref=\"https://github.com/bazelbuild/rules_python/blob/eabd5344d8419eb0077e6be5df948c37a1186202/experimental/python/wheel.bzl#L43\">experimental/python/wheel.bzl:43</a>: <a href=\"https://github.com/bazelbuild/buildtools/blob/master/WARNINGS.md#skylark-comment\">skylark-comment</a>: \"Skylark\" is an outdated name of the language, please use \"starlark\" instead.</pre></code>\r\n```",
    "head_branch": "jonathon--buildifier-lint-skylark-name",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "\"Skylark\" is an outdated name of the language, please use \"starlark\" instead (#327)\n\nCo-authored-by: Andy Scott <andyscott@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210423ac254a19ac28f827",
    "number": 326,
    "body": "Update is motivated by https://github.com/bazelbuild/rules_python/issues/301\r\n\r\nThis change makes the 'helloworld' example much more copy-pasteable by beginners, by decoupling the code from project's `WORKSPACE`. I think it can be harder to understand this example given it's coupling to the main project, like with load statements like this: `load(\"//python:defs.bzl\", \"py_library\", \"py_test\")`\r\n\r\nI think I would prefer it if all the examples in the `examples/` folder were managed by one `WORKSPACE`, instead of a `WORKSPACE` per example, but I'll leave it as is for now and wait for comment. _Edit:_ @alexeagle has [good rebuttal to this below.](https://github.com/bazelbuild/rules_python/pull/326#issuecomment-655527483)\r\n\r\n----\r\n\r\ncc @oconnore",
    "head_branch": "jonathon--new-helloworld-example",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210424ac254a19ac28f828",
    "number": 323,
    "body": "This adds the ability to create wheels that will work\r\nagainst python2 or python3. Update targets to use it by\r\ndoing\r\n\r\npython_tag = [\r\n        \"py2\",\r\n        \"py3\",\r\n    ]",
    "head_branch": "multi_python_wheels",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210424ac254a19ac28f829",
    "number": 320,
    "body": "When there are to many file arguments to py_wheel from py_package on Windows 10 I was getting \r\nthis error related to wheelmaker.exe \r\n```\r\ncommand is longer than CreateProcessW's limit (32768 characters)\r\n```\r\nAdded additional rules to get around this issue.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix for when there are so many file arguments it creates the Command To Long error (#320)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210425ac254a19ac28f82a",
    "number": 319,
    "body": "…void long commands",
    "head_branch": "long_cmds",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210426ac254a19ac28f82b",
    "number": 316,
    "body": "…dle of path\r\n\r\nDirectory names may also contain spaces in some cases, that would fail\r\nBazel.\r\nFiles with spaces in their name were already excluded.",
    "head_branch": "remove_files_with_space_in_directory_name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210427ac254a19ac28f82c",
    "number": 315,
    "body": "Allow py_library sources to be empty.\r\nIf --incompatible_disallow_empty_glob is set then generated py_library\r\ntargets will fail if there are no .py files.\r\n\r\nExamples are pymssql==2.1.4 and cx-Oracle==7.2.3.\r\n\r\nSet `allow_empty = True` for glob().\r\n\r\nBazel issue for incompatible_disallow_empty_glob:\r\nhttps://github.com/bazelbuild/bazel/issues/8195",
    "head_branch": "allow_empty_glob_for_py_library",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix errors with incompatible_disallow_empty_glob (#315)\n\nAllow py_library sources to be empty.\r\nIf --incompatible_disallow_empty_glob is set then generated py_library\r\ntargets will fail if there are no .py files.\r\n\r\nExamples are pymssql==2.1.4 and cx-Oracle==7.2.3.\r\n\r\nSet `allow_empty = True` for glob().\r\n\r\nBazel issue for incompatible_disallow_empty_glob:\r\nhttps://github.com/bazelbuild/bazel/issues/8195\r\n\r\nCo-authored-by: Andy Scott <andyscott@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210428ac254a19ac28f82d",
    "number": 312,
    "body": "This allows users to use a custom python interpreter that is built by\r\nanother repository rule instead of using a pre-built interpreter binary\r\nthat is checked-in.\r\n\r\nThis tangentially addresses #257 since a common setup is to use the\r\ncustom built interpreter in the python toolchain.\r\n\r\nFor example, see: https://github.com/kku1993/bazel-hermetic-python",
    "head_branch": "kku-python-interpreter-path",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Support python interpreter target in pip_import. (#312)\n\n* Support python interpreter target in pip_import.\r\n\r\nThis allows users to use a custom python interpreter that is built by\r\nanother repository rule instead of using a pre-built interpreter binary\r\nthat is checked-in.\r\n\r\nThis tangentially addresses #257 since a common setup is to use the\r\ncustom built interpreter in the python toolchain.\r\n\r\nFor example, see: https://github.com/kku1993/bazel-hermetic-python\r\n\r\n* Actually use interpreter path.\r\n\r\nCo-authored-by: Andy Scott <andyscott@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210428ac254a19ac28f82e",
    "number": 309,
    "body": "This is a demo, not production ready.\r\n\r\nNotes for #241.",
    "head_branch": "starlarktrans",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210429ac254a19ac28f82f",
    "number": 308,
    "body": "This adds a more nuanced CODEOWNERS and explains its purpose in CONTRIBUTING.md.\r\n\r\nFixes #291.",
    "head_branch": "codeowners",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add documentation of community / Bazel team ownership (#308)\n\nThis adds a more nuanced CODEOWNERS and explains its purpose in CONTRIBUTING.md.\r\n\r\nFixes #291."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621042aac254a19ac28f830",
    "number": 305,
    "body": "We've found that turning off the quiet flag is useful for debugging issues with pip_import. Maybe it could be beneficial to allow users to pass in quiet=False if they wanted to debug or just to have more logging.",
    "head_branch": "bazel-master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621042bac254a19ac28f831",
    "number": 303,
    "body": "Just realised I [release `0.0.2` at latest `master`](https://github.com/bazelbuild/rules_python/releases) but neglected to bump this file beforehand 😖 . \r\n\r\n",
    "head_branch": "jonathon--bump-version-bzl",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "update version in version.bzl (#303)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621042cac254a19ac28f832",
    "number": 302,
    "body": "[`0.0.2`](https://github.com/bazelbuild/rules_python/releases/tag/0.0.2) is out.\r\n\r\nMainly addresses https://github.com/bazelbuild/rules_python/issues/261.\r\n\r\n**Related:** https://github.com/bazelbuild/rules_python/pull/303",
    "head_branch": "jonathon--update-readme-for-0.0.2",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "point README readers to new 0.0.2 release (#302)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621042cac254a19ac28f833",
    "number": 300,
    "body": "This for now only tests whether py_binary produces an executable script.",
    "head_branch": "binary_test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621042dac254a19ac28f834",
    "number": 295,
    "body": "This is a work in progress. Mostly to identify which issues are still to be fixed before this can happen.\r\nContributions very welcome.",
    "head_branch": "starlark",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621042eac254a19ac28f835",
    "number": 290,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add information regarding support (#290)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621042fac254a19ac28f836",
    "number": 286,
    "body": "",
    "head_branch": "lberki-update-setuptools",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210430ac254a19ac28f837",
    "number": 285,
    "body": "This allows new features in setuptools, like find_namespace_packages.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Upgrade to setuptools==44.0.0 (#285)\n\nThis allows new features in setuptools, like find_namespace_packages.\r\n\r\nCo-authored-by: lberki <lberki@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210431ac254a19ac28f838",
    "number": 284,
    "body": "This looks like it's left over from before the switch to buildkite.\r\nThe Travis tests are not run in precommit now, and I can't even tell\r\nif they were run in PR #1.\r\n\r\nThis causes pre-commit errors in forks if folks have Travis\r\nenabled in other projects.\n\n<!-- Reviewable:start -->\n---\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/bazelbuild/rules_python/284)\n<!-- Reviewable:end -->\n",
    "head_branch": "remove-travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove travis.yml (#284)\n\nThis looks like it's left over from before the switch to buildkite.\r\nThe Travis tests are not run in precommit now, and I can't even tell\r\nif they were run in PR #1.\r\n\r\nThis causes pre-commit errors in forks if folks have Travis\r\nenabled in other projects."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210431ac254a19ac28f839",
    "number": 283,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210432ac254a19ac28f83a",
    "number": 279,
    "body": "I ran into this while updating `gvisor` in NixOS (https://github.com/NixOS/nixpkgs/pull/80875); the `requirements.bzl` file generated by `rules_python` isn't reproducible, differing based on the filesystem-order-dependent return from `os.walk`.\r\n\r\nThis PR is a minimal fix that sorts the repositories in `requirements.bzl` and the return value from `Wheel.extras()`.",
    "head_branch": "andrew/piptool-sorted",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "packaging/piptool: sort wheels and extras for deterministic output (#279)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210433ac254a19ac28f83b",
    "number": 278,
    "body": "Import of #274, with minor doc change and tools/docs regeneration.",
    "head_branch": "pip_args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add extra_pip_args option to pip_import (#274)\n\nAdds the attr extra_pip_args to pip_import.  These args will be passed\r\nalong to the pip invocation inside piptool.\r\n\r\nCloses #274 and closes #278.\r\n\r\nCo-authored-by: scarito1 <scarito@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210434ac254a19ac28f83c",
    "number": 277,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move load statements to the top to remove the Buildifier warnings (#277)\n\nAlso fix a dict ordering issue"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210435ac254a19ac28f83d",
    "number": 274,
    "body": "Adds the attr extra_pip_args to pip_import.  These args will be passed along to the pip invocation inside piptool.  This enables special pip usage such as loading packages from an alternate repository or local directory.",
    "head_branch": "pip_args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210436ac254a19ac28f83e",
    "number": 267,
    "body": "This commit adds a `python_interpreter_label` attr to `pip_import` to allow\r\nusers to specify a Python interpreter for pip as a Bazel label.",
    "head_branch": "topic/beasleyr-vmw/interp_label",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210437ac254a19ac28f83f",
    "number": 266,
    "body": "Currently if you copy and paste the documented workspace methods you get a failure that `http_archive` is not specified: it needs to be imported.",
    "head_branch": "httparchive-doc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "README: Add missing http_archive import (#266)\n\nCurrently if you copy and paste the documented workspace methods you get a failure that `http_archive` is not specified: it needs to be imported.\r\n\r\nCo-authored-by: lberki <lberki@users.noreply.github.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210438ac254a19ac28f840",
    "number": 263,
    "body": "This updates pip, setuptools, and wheel, and switches to parsing METADATA instead of metadata.json\r\n```\r\npip==19.3.1\r\nsetuptools==42.0.2\r\nwheel==0.33.6\r\n```\r\n\r\nDue to changes in https://github.com/pypa/wheel/issues/195, wheel no longer includes a metadata.json, so I've also switched to using `pkg_resources` to parse the package metadata and resolve dependencies and extras. This was most obvious in packages where wheels were built locally, but after making the change it was obvious that this should also fix some metadata related bugs.\r\n\r\nAs it is currently, this might cause issues with extras for packages that only include the extras in metadata.json, but I wasn't able to find any packages that did this.\r\n\r\nFixes #126, #253, #95, #70, #185 ",
    "head_branch": "update-to-pip-19-3-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210439ac254a19ac28f841",
    "number": 262,
    "body": "When adding tags to a native `py_library` rule that is created through a macro we\r\nwere not properly considering the case where the tags came from a different\r\nfile and therefore were frozen. This caused an error.\r\n\r\nAnalog of https://github.com/bazelbuild/rules_cc/commit/cfe68f6bc79dea602f2f6a767797f94a5904997f.\r\n",
    "head_branch": "fix-immutable-frozen-set-bug",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix immutable frozen set bug in defs.bzl (#262)\n\nWhen adding tags to a native py_library rule that is created through a macro we\r\nwere not properly considering the case where the tags came from a different\r\nfile and therefore were frozen. This caused an error.\r\n\r\nAnalog of https://github.com/bazelbuild/rules_cc/commit/cfe68f6bc79dea602f2f6a767797f94a5904997f\r\n\r\nCo-authored-by: Googler <plf@google.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210439ac254a19ac28f842",
    "number": 256,
    "body": "Add `pip3_import` as a macro built on the new `python_interpreter` attribute to `pip_import`.\r\n\r\nAlso change canonical wheel repo naming to include the `pip_import` name, so the same wheel can be named by multiple `pip_import`s.\r\n\r\nUpdate README, regenerate docs and tools.\r\n\r\nThanks go out to the authors of similar PRs #179, #85, and #216.\r\n\r\nFixes #33 (yaml import problem).\r\nFixes #165 (documentation request).\r\nCloses #85 (similar PR).\r\nCloses #179 (similar PR).\r\nFixes #249 (feature tracking bug).",
    "head_branch": "pip3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add pip3_import (#256)\n\nThis adds `pip3_import` as a wrapper around `pip_import` that sets `python_interpreter` to `\"python3\"`. This is important for requesting the Python 3 version of a package on systems where the `\"python\"` command is Python 2 (which is most of them).\r\n\r\nWe decline to add an analogous `pip2_import` wrapper at this time, because the command `\"python2\"` does not exist on all platforms by default (e.g. macOS).\r\n\r\n`piptool.py` is updated to prefix the names of the wheel repos (an implementation\r\ndetail of rules_python) with the name given to `pip_import`. This is needed to\r\navoid shadowing wheel repos when the same wheel name is used by separate\r\n`pip_import` invocations -- in particular when the same wheel is used for both\r\nPY2 and PY3. (Thanks to @joshclimacell for pointing this detail out in\r\nhis prototype 90a70d5a550a01646966ce61156e6f83f02b4b73.)\r\n\r\nRegenerated the .par files and docs.\r\n\r\nAlso updated the README to better explain the structure of the packaging rules. This includes mentioning `pip3_import`, concerns around versioning / hermeticity, and not depending on the wheel repo names (use `requirement()` instead)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621043aac254a19ac28f843",
    "number": 252,
    "body": "This is a rebase of @acumon's #158. It adds a `python_interpreter` attribute to `pip_import` and `whl_library` to allow customizing the command used to launch the Python interpreter. We'll follow this up with creating `pip2_import` and `pip3_import` as wrappers around this feature.\r\n\r\nDiffbased against #251, which fixes documentation for these rules.\r\n\r\nWork toward #249. Closes #158.",
    "head_branch": "pyattr",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add python_interpreter attr to pip rules (#252)\n\nThis adds a `python_interpreter` attribute to `pip_import` and `whl_library` that can be used to select the system command used to run Python's packaging tools. This provides the basis for invoking pip under Python 3 to install PY3 dependencies.\r\n\r\nExample usage:\r\n```\r\npip_import(\r\n    name = 'pip_deps',\r\n    requirements = '//:requirements.txt',\r\n    python_interpreter = 'python3.7',\r\n)\r\n```\r\n\r\nThe par files have been regenerated. (This required a little bootstrapping since piptool.py needs to be modified to accept the flag before pip.bzl is modified to pass it.)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621043cac254a19ac28f844",
    "number": 251,
    "body": "Fix formatting of docstrings and regenerate the pages. Fixes #250.",
    "head_branch": "updatedocs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix packaging rules documentation generation (#251)\n\nFor some reason the rendered docs for the packaging rules' weren't up-to-date. The docstrings also used an outdated format.\r\n\r\nThis change moves docstrings into `doc=` notation where applicable, switches to markdown syntax where possible (but see #255), and regenerates the rendered docs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621043dac254a19ac28f845",
    "number": 248,
    "body": "Renovate is a bot that automatically creates PRs that update dependencies.",
    "head_branch": "add_renovate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add renovate.json (#248)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621043dac254a19ac28f846",
    "number": 247,
    "body": "https://buildkite.com/bazel/rules-python-plus-bazelisk-migrate",
    "head_branch": "hlopko-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add badge for incompatible flag pipeline (#247)\n\nhttps://buildkite.com/bazel/rules-python-plus-bazelisk-migrate"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621043eac254a19ac28f847",
    "number": 245,
    "body": "This PR enables all buildifier checks on presubmit, plus it migrates the repo to fix violations.",
    "head_branch": "enable_buildifier_presubmit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enable buildifier presubmit check (#245)\n\nThis migrates the repo to satisfy buildifier and adds buildifier as a presubmit."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621043fac254a19ac28f848",
    "number": 243,
    "body": "Ported from https://bitbucket.org/pstradomski/rules_python_extra.\r\n\r\nFixes #240.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210440ac254a19ac28f849",
    "number": 239,
    "body": "Follow-up to #237. Moves development workflow info to CONTRIBUTING.md. Fixes\r\nthe instructions for how to use the Bazel Federation.\r\n\r\nAlso updates the project WORKSPACE to use a released version of the Federation.",
    "head_branch": "readmework",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "README improvements (#239)\n\nFollow-up to #237. Moves development workflow info to CONTRIBUTING.md. Fixes\r\nthe instructions for how to use the Bazel Federation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210441ac254a19ac28f84a",
    "number": 238,
    "body": "We don't have a toolchain method, so don't try to call one in WORKSPACE. Add\r\noptional pip_repositories() call to README and add note that relnotes need\r\nmanual editing for this.\r\n\r\n+aiuto FYI but force-submitting.",
    "head_branch": "fixboilerplate",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix WORKSPACE/distro boilerplate (#238)\n\nWe don't have a toolchain method, so don't try to call one in WORKSPACE. Add\r\noptional pip_repositories() call to README and add note that relnotes need\r\nmanual editing for this."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210442ac254a19ac28f84b",
    "number": 237,
    "body": "Expand the Overview. Add more context on core rules vs packaging rules and\r\nlevel of support. Add instructions for using Bazel Federation. Move pip stuff\r\nto sub-headings.\r\n\r\nFixes #229.",
    "head_branch": "readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README (#237)\n\nExpand the Overview. Add more context on core rules vs packaging rules and\r\nlevel of support. Add instructions for using Bazel Federation. Move pip stuff\r\nto sub-headings."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210442ac254a19ac28f84c",
    "number": 236,
    "body": "The default 600 second timeout can be insufficient for projects with lots of requirements or if packages need to be built from source.",
    "head_branch": "pip_import_timeout",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210443ac254a19ac28f84d",
    "number": 235,
    "body": "",
    "head_branch": "whooops",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove a load which we missed in an earlier pr (#235)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210444ac254a19ac28f84e",
    "number": 234,
    "body": "- set up for release 0.0.1\r\n- update to Federation pre-release",
    "head_branch": "distro",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use rules_pkg to create distributions (#234)\n\nThis adds a packaging target to create a Bazel Federation-compliant distribution."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210445ac254a19ac28f84f",
    "number": 233,
    "body": "stardoc does not need  them",
    "head_branch": "stardoc",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove unneeded references to sass and skydoc. stardoc does not need them (#233)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210446ac254a19ac28f850",
    "number": 232,
    "body": "This fixes an issue where if you have bad URLs in your ~/.pip/pip.conf,\r\npip would pick them up and end up failing bazel. This way we make\r\npip_import more hermetic and ignore user config.\r\n\r\nYou can reproduce this issue by adding:\r\n\r\n```\r\n[global]\r\nextra-index-url =\r\n    https://foo.com/bar\r\n```\r\n\r\nTo your local `~/.pip/pip.conf`, and executing a `pip_import` rule (it fails faster if your URL returns 500s rather than is just unaccessible)",
    "head_branch": "ks/add-isolated",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pass --isolated to pip (#232)\n\nThis fixes an issue where if you have bad URLs in your ~/.pip/pip.conf,\r\npip would pick them up and end up failing bazel. This way we make\r\npip_import more hermetic and ignore user config."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210447ac254a19ac28f851",
    "number": 231,
    "body": "Change code for handling relative short_paths to fix bug #225.\r\n\r\nFixes #225.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change code for handling relative short_paths to fix bug #225. (#231)\n\nChange code for handling relative short_paths.\r\n\r\nFixes #225."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210447ac254a19ac28f852",
    "number": 228,
    "body": "This avoids a name clash between the package name and the repo name, which\r\nprevented whl_test from running in the Bazel federation's CI.\r\n\r\nRegenerated the par files.\r\n\r\nTested that this still works in environments where the system Python has a\r\nlibrary named \"packaging\" installed, by creating a virtualenv, pip installing\r\n\"packaging\", and running `bazel test //examples/...`.\r\n\r\nFixes #227.",
    "head_branch": "mv-test",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename //rules_python package to //packaging (#228)\n\nThis avoids a name clash between the package name and the repo name, which\r\nprevented whl_test from running in the Bazel federation's CI.\r\n\r\nRegenerated the par files.\r\n\r\nTested that this still works in environments where the system Python has a\r\nlibrary named \"packaging\" installed, by creating a virtualenv, pip installing\r\n\"packaging\", and running `bazel test //examples/...`.\r\n\r\nFixes #227."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210448ac254a19ac28f853",
    "number": 226,
    "body": "Expecting CI to fail if I did this right, then we can modify this PR to include the fix.",
    "head_branch": "fix-filtering",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Expand CI coverage to detect #225 (#226)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210449ac254a19ac28f854",
    "number": 224,
    "body": "This PR uses two yaml mechanisms (anchors and the Merge Key Language-Independent Type) to avoid duplicate code.",
    "head_branch": "fweikert-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove duplicate code from presubmit config (#224)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621044aac254a19ac28f855",
    "number": 223,
    "body": "This commit allows rules_python to be a member of the Bazel federation, since it adds the required bzl files related to setup and dependencies.\r\nMoreover, it also changes the WORKSPACE to fetch all non-pip_import dependencies through the federation.\r\n\r\nrules_python_internal_setup() in internal_setup.bzl still needs some work since some of the dependencies don't export their proper setup functions yet, which means that the present commit has to work around that particular problem.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Comply with the standards of the Bazel federation (#223)\n\nThis commit allows rules_python to be a member of the Bazel federation, since it adds the required bzl files related to setup and dependencies.\r\nMoreover, it also changes the WORKSPACE to fetch all dependencies through the federation.\r\n\r\nrules_python_internal_setup() in internal_setup.bzl still needs some work since some of the dependencies don't export their proper setup functions yet, which means that the present commit has to work around that particular problem."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621044bac254a19ac28f856",
    "number": 219,
    "body": "This migrates rules_python itself for bazelbuild/bazel#9006. This entails\r\nadding or updating load() statements to refer to //python:defs.bzl (not\r\n//python:python.bzl), and updating whl.py so the generated repos refer to\r\n@rules_python. Also updated the dependency on subpar for compatibility with\r\nthe flag. Par files are regenerated.",
    "head_branch": "migrate-bzl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Ensure all core Python rules are loaded from defs.bzl (#219)\n\nThis migrates rules_python itself for bazelbuild/bazel#9006. This entails\r\nadding or updating load() statements to refer to //python:defs.bzl (not\r\n//python:python.bzl), and updating whl.py so the generated repos refer to\r\n@rules_python. Also updated the dependency on subpar for compatibility with\r\nthe flag. Par files are regenerated."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621044cac254a19ac28f857",
    "number": 218,
    "body": "Update the README file to explain the difference between the core Python rules\r\nand the packaging rules. Add the py_repositories() hook and recommend that\r\nusers add it to their WORKSPACE files.\r\n\r\nBackground on the py_repositories() hook: I don't know what this might be\r\nuseful for at the moment, but I found pip_repositories() to be helpful when I\r\nadded a deprecation message for renaming the workspace to @rules_python. So\r\nit's probably a good idea to have this just in case.\r\n\r\nWork toward bazelbuild/bazel#9006.",
    "head_branch": "py-repo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README and add py_repositories() (#218)\n\nUpdate the README file to explain the difference between the core Python rules\r\nand the packaging rules. Add the py_repositories() hook and recommend that\r\nusers add it to their WORKSPACE files.\r\n\r\nBackground on the py_repositories() hook: I don't know what this might be\r\nuseful for at the moment, but I found pip_repositories() to be helpful when I\r\nadded a deprecation message for renaming the workspace to @rules_python. So\r\nit's probably a good idea to have this just in case.\r\n\r\nAlso fix and regenerate docs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621044dac254a19ac28f858",
    "number": 217,
    "body": "The combination of a large `requirements.txt` file and a slow network can\r\ncause the default timeout for `repository_ctx.execute()` to be reached.\r\nThis patch exposes that timeout to the `pip_import()` caller so they can\r\nmanually specify a longer timeout. E.g.\r\n\r\n    pip_import(\r\n        name = \"requirements\",\r\n        requirements = \"//long_list_of_requirements.txt\",\r\n        timeout = 3600,\r\n    )",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add a timeout attribute to pip_import rules. (#217)\n\nThe combination of a large requirements.txt file and a slow network can\r\ncause the default timeout for repository_ctx.execute() to be reached.\r\nThis patch exposes that timeout to the pip_import() caller so they can\r\nmanually specify a longer timeout. E.g.\r\n\r\n    pip_import(\r\n        name = \"requirements\",\r\n        requirements = \"//long_list_of_requirements.txt\",\r\n        timeout = 3600,\r\n    )"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621044dac254a19ac28f859",
    "number": 216,
    "body": "As part of the `whl_library` rule, we run a python script (packaged here as `whltool.par`) to generate `py_library` instances for each wheel. One of the functions of running that script is to parse the wheels' declared dependencies. In some cases, the sets of dependencies may vary depending on what python version is being used, even for a wheel file that is compatible with both python 2 and 3. This pull request adds an argument to the `whl_library` rule allowing the user to specify the desired version of python to run the `whltool` script - in my case, I pass the value `python3`. It defaults to the original behavior of just running `python` by itself.\r\n\r\nTo give a concrete example of where this can come up, the `cryptography` package relies on a backported package when used under python<3.4, but does not require that backport for newer python versions: https://github.com/pyca/cryptography/blob/master/setup.py#L239-L240 . When attempting to install this library with python 3.7, it's not possible to find that backported library, and so we can't resolve the dependencies.\r\n\r\nI'm very open to renaming things here if desired, or to (say) attempt to resolve the path to the python interpreter using something like https://docs.bazel.build/versions/master/skylark/lib/repository_ctx.html#which. I elected to use `python_target` so that the user would understand that this should correspond to the target python version that will eventually run whatever code relies on the `whl_library`.",
    "head_branch": "df-whl-py-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621044eac254a19ac28f85a",
    "number": 215,
    "body": "Re-add https://github.com/bazelbuild/rules_python/pull/85 on top of rules_python",
    "head_branch": "pip3_import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621044fac254a19ac28f85b",
    "number": 213,
    "body": "Blocked on a couple other PRs, after which I'll force-update the branch with a rebase.",
    "head_branch": "regen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Migrate to stardoc and regenerate documentation (#213)\n\n* Upgrade documentation generation to Stardoc\r\n\r\nThis was a long time coming. Our previous Skydoc workflow no longer worked, and\r\nSkydoc has been deprecated for a while.\r\n\r\nThis commit updates the WORKSPACE deps for Stardoc, and rewrites the docgen\r\nworkflow in docs/BUILD and update_docs.sh. Note that running the workflow\r\nrequires some visibility changes to @bazel_tools, which will be in Bazel 0.29.\r\n\r\nFixes #144.\r\n\r\n* Regenerate documentation using Stardoc\r\n\r\nThis rips out the old documentation, which was malformed and unreproducible,\r\nand adds documentation generated by Stardoc.\r\n\r\nIt was generated using a development version of Bazel that makes some\r\n@bazel_tools targets publically visible. These changes will be in Bazel 0.29.\r\n\r\nFollow-up for #144.\r\n\r\n* Exclude docs/ from CI config\r\n\r\nThe new docgen workflow requires Bazel 0.29, which is currently unreleased.\r\nThis commit excludes the docgen from being tested on CI. We'll undo this\r\nafter 0.29 is released (#144)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210450ac254a19ac28f85c",
    "number": 212,
    "body": "Fixes #203.",
    "head_branch": "rename",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Rename canonical workspace name to \"@rules_python\" (#212)\n\n* Change official workspace name to @rules_python\r\n\r\nThis includes regenerating the par files to use the new name. Neat trick: Since\r\nthe par file regeneration depends on the previous par files, I had to bootstrap\r\nthis change by temporarily editing the WORKSPACE to include:\r\n\r\nlocal_repository(\r\n    name = \"io_bazel_rules_python\",\r\n    path = \".\",\r\n)\r\n\r\n* Add a nice error message to help with the workspace name migration\r\n\r\nThis hooks into pip_repositories(), which users are *supposed* to be calling in\r\ntheir WORKSPACE files, to emit a nice fail() message alerting them that they\r\nneed to update their repo definition.\r\n\r\nWithout this change (and even with it, for users who do not call\r\n`pip_repositories()`), users will instead see a confusing cyclic dependency\r\nerror."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210451ac254a19ac28f85d",
    "number": 211,
    "body": "This will remove duplicate dependencies. Without this patch we are seeing errors like:\r\n\r\n```\r\nLabel '@pypi__enum34_1_1_6//:pkg' is duplicated in the 'deps' attribute of rule 'pkg'\r\n```",
    "head_branch": "fix-extra-dependencies",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix extra dependencies (#211)\n\nRemove duplicate dependencies to avoid errors in deps attribute, and regenerate the .par files."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210452ac254a19ac28f85e",
    "number": 210,
    "body": "Fixes: #208\r\nIt looks like you just reference the latest bazel, which means your builds will just break on bazel releases. Instead I suggest pinning to a certain version and then you can walk the version up at your leisure without master sitting there broken.",
    "head_branch": "pin-bazel-version",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Pin bazel version used for update_tools.sh (#210)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210453ac254a19ac28f85f",
    "number": 209,
    "body": "I created a (not yet pushed) fix for #208, and reran `update_tools.sh` in the docker container. This PR is to verify these files in CI.\r\n\r\nPoint of order: Do we even have integration tests for the precompiled par files, or only of the source code? Must look into that. We can also test other projects manually against this commit.\r\n\r\nThe regenerated `piptool.par` and `whltool.par` files grew by 9731 bytes and 9733 bytes respectively, relative to a total filesize of 5.7 MB and 1.4 MB respectively. The similar increases suggests that the growth is due to changes in common tooling (i.e. subpar), and is any case not in and of itself problematic.\r\n\r\nAssuming these files are good, I'll merge the fix for #208 and then update this PR.",
    "head_branch": "updatetools",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactor update_tools.sh workflow and regenerate par files (#209)\n\nThis reorganizes and comments some package dependencies in the Dockerfile.\r\n\r\nIt also regenerates the par files, so that we're now using pars based on the\r\ncurrent version of Bazel.\r\n\r\nFixes #208."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210453ac254a19ac28f860",
    "number": 207,
    "body": "Forgot to push a change from my previous PR (#206).",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refine the fix for examples breakage (#207)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210454ac254a19ac28f861",
    "number": 206,
    "body": "The boto example indirectly requires docutils, but the docutils-0.15.post1\r\nrelease appears to have a broken wheel: its dist-info directory omits the\r\n`post1` suffix which is part of the version identifier.\r\n\r\nWe simply prohibit this particular release in requirements.txt.\r\n\r\nFixes #205.",
    "head_branch": "fixdeps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Work around breakage in a dep of the examples (#206)\n\nThe boto example indirectly requires docutils, but the docutils-0.15.post1\r\nrelease appears to have a broken wheel: its dist-info directory omits the\r\n`post1` suffix which is part of the version identifier.\r\n\r\nWe simply prohibit this particular release in requirements.txt.\r\n\r\nFixes #205."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210455ac254a19ac28f862",
    "number": 204,
    "body": "Right now python_rules does not support pip imports where the module is not in the top-level of the directory (such as tensorflow). This patch would fix that; see the proposed changes to `rules_python/why.py`. \r\n\r\nIncorporating this into Applied's Bazel build would require running the `update_tools.sh` script in this repo to generate a new `.par` file that we could import as a dependency. Right now this script is broken because of changes to Bazel itself and I am in the process of debugging it. ",
    "head_branch": "anelise/tf_support",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210456ac254a19ac28f863",
    "number": 202,
    "body": "This series of commits adds exports to `rules_python` for Bazel-packaged Python rule logic. Most importantly, this includes the native rules and providers like `py_binary` and `PyInfo`, but it also includes Starlark-defined constructs that are distributed in `@bazel_tools`.\r\n\r\nWork toward bazelbuild/bazel#8893. These exports constitute the new API we wish to migrate users to for that change.\r\n\r\nBlocked on:\r\n- [x] Still needs redirects for the runfiles library\r\n- [x] Need to rename the canonical workspace name from `@io_bazel_rules_python` to `@rules_python` (#203)",
    "head_branch": "out-of-bazel",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add exports for core Python logic that's bundled with Bazel (#202)\n\n* Introduce defs.bzl as the official home of the core Python rules\r\n\r\nThe \"core\" Python rules are the rules that traditionally have been bundled with\r\nBazel. This includes native rules like `py_binary`, and Starlark-defined rules\r\nunder `@bazel_tools` like `py_runtime_pair`. These should all live in\r\nor around `@rules_python//python:defs.bzl`.\r\n\r\nCurrently we re-export the native rules here, with a magic tag to allow them to\r\nsurvive the flag flip for `--incompatible_load_python_rules_from_bzl`. When\r\nnative rules are ported to Starlark their definitions will live here.\r\n\r\n* Add re-exports for Starlark-defined symbols\r\n\r\nThis adds export definitions for built-in symbols like `PyInfo` and\r\n`@bazel_tools`-defined symbols like py_runtime_pair.\r\n\r\n* Vendor in runfiles library\r\n\r\nThis vendors in the @bazel_tools//tools/python/runfiles target as\r\n//python/runfiles. See comment in the BUILD file for why we couldn't re-export\r\nthe bundled implementation.\r\n\r\n* Fix README to prefer defs.bzl over python.bzl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210456ac254a19ac28f864",
    "number": 201,
    "body": "",
    "head_branch": "regen",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210457ac254a19ac28f865",
    "number": 200,
    "body": "This PR suggests a possible way to address the issues described in https://github.com/bazelbuild/rules_python/issues/199. I added an optional attribute `package_root_path` to the `py_wheel` rule, that specifies the root of the package, relative to the workspace path. \r\n\r\nThis patch only fixes the problem for cases in which the entire package is under the same path. If the package bundles dependencies from other paths, those will not be fixed. It would be nice if we could define the prefix on the sources and strip the prefix when we create the final package. Not sure how to do that and will be very happy to hear suggestions, or alternative approaches.\r\n\r\nThanks.\r\n\r\n```\r\npy_wheel(\r\n    package_root_path = \"experimental\"\r\n    name = ...\r\n    distribution = ...\r\n    python_tag = ...\r\n    version = ...\r\n    deps = ...\r\n)\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "added the ability to specify a custom wheel package root (#200)\n\nadded the ability to specify a custom wheel package root"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210458ac254a19ac28f866",
    "number": 198,
    "body": "Replaces the incomplete METADATA parsing with pkginfo. Adds tests using real-world packages.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/102",
    "head_branch": "marian/whl_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210459ac254a19ac28f867",
    "number": 196,
    "body": "Targets under //rules_python/... still won't build because subpar doesn't work on Windows yet.\r\n`//experimental/examples/wheel:wheel_test` is broken on Windows (Filed https://github.com/bazelbuild/rules_python/issues/197)",
    "head_branch": "meteorcloudy-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621045aac254a19ac28f868",
    "number": 195,
    "body": "Related https://github.com/bazelbuild/rules_python/issues/2",
    "head_branch": "windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621045bac254a19ac28f869",
    "number": 193,
    "body": "Doesn't find the google.cloud.storage module for some reason.",
    "head_branch": "gcs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621045bac254a19ac28f86a",
    "number": 192,
    "body": "Fails like this as beam transitive dependencies are not in scope.\r\n\r\n  File \"/usr/local/google/home/sorenj/.cache/bazel/_bazel_sorenj/4ac712636e67a1f87a02bdf9338c2f63/sandbox/linux-sandbox/7/execroot/io_bazel_rules_python/bazel-out/k8-py2-fastbuild/bin/examples/dataflaw/dataflow_test.runfiles/io_bazel_rules_python/examples/dataflaw/dataflow_test.py\", line 52, in <module>\r\n    import apache_beam as beam\r\n  File \"/usr/local/google/home/sorenj/.cache/bazel/_bazel_sorenj/4ac712636e67a1f87a02bdf9338c2f63/sandbox/linux-sandbox/7/execroot/io_bazel_rules_python/bazel-out/k8-py2-fastbuild/bin/examples/dataflaw/dataflow_test.runfiles/pypi__apache_beam_2_13_0/apache_beam/__init__.py\", line 95, in <module>\r\n    import apache_beam.internal.pickler\r\n  File \"/usr/local/google/home/sorenj/.cache/bazel/_bazel_sorenj/4ac712636e67a1f87a02bdf9338c2f63/sandbox/linux-sandbox/7/execroot/io_bazel_rules_python/bazel-out/k8-py2-fastbuild/bin/examples/dataflaw/dataflow_test.runfiles/pypi__apache_beam_2_13_0/apache_beam/internal/pickler.py\", line 40, in <module>\r\n    import dill\r\nImportError: No module named dill",
    "head_branch": "dataflaw",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621045cac254a19ac28f86b",
    "number": 188,
    "body": "Added `python_version = \"PY2\"` to some examples, and updated subpar dependency.",
    "head_branch": "incompat",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update to work with --incompatible_use_python_toolchains (#188)\n\nAdded `python_version = \"PY2\"` to some examples, and updated subpar dependency."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621045dac254a19ac28f86c",
    "number": 186,
    "body": "",
    "head_branch": "zen-chetan/mods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621045eac254a19ac28f86d",
    "number": 183,
    "body": "Ubuntu 14.04 is about to be end-of-life and Bazel CI will stop supporting it shortly afterwards.\r\n\r\nContext: https://groups.google.com/d/msg/bazel-dev/_D6XzfNkQQE/8TNKiNmsCAAJ",
    "head_branch": "philwo-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Don't test on Ubuntu 14.04 (#183)\n\nUbuntu 14.04 is about to be end-of-life and Bazel CI will stop supporting it shortly afterwards.\r\n\r\nContext: https://groups.google.com/d/msg/bazel-dev/_D6XzfNkQQE/8TNKiNmsCAAJ"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621045fac254a19ac28f86e",
    "number": 182,
    "body": "",
    "head_branch": "zen-chetan/mods",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210460ac254a19ac28f86f",
    "number": 181,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210460ac254a19ac28f870",
    "number": 180,
    "body": "Stop using deprecated depset.union() API - use transitive argument to depset constructor instead.\r\n\r\nAlso switch to Args api for building the command line instead of flattening the depset.\r\n\r\nFixes #175 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Stop using deprecated depset.union API (#180)\n\nAlso switch to using Args api for building args instead of flattening the depset."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210461ac254a19ac28f871",
    "number": 179,
    "body": "CentOS 6 provides Python 2.6.6, which is too old to satisfy `pip_import`'s\r\ndict comprehension requirement.  I need some way to point `pip_import` to\r\nan alternate Python distribution.\r\n\r\nThis change adds system Python override to `pip_import` and `whl_library`\r\nvia the `PYTHON` environment variable.\r\n\r\nResolves https://github.com/bazelbuild/rules_python/issues/178.",
    "head_branch": "topic/beasleyr/userinterp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210462ac254a19ac28f872",
    "number": 174,
    "body": "This change adds adds a `py_import` rule to import Python eggs like\r\n`java_import` imports Java jars.\r\n\r\npy_import.egg generated using `zipper`[1]:\r\n\r\n```console\r\n$ third_party/ijar/zipper Cc examples/py_import/py_import.egg examples/py_import/helloworld.py=examples/helloworld/helloworld.py examples/__init__.py= examples/py_import/__init__.py=\r\n```\r\n\r\nPartially addresses bazelbuild/bazel#7312.\r\nAddresses #222 .\r\n\r\n[1]: https://github.com/bazelbuild/bazel/tree/master/third_party/ijar\r\n\r\nTesting Done:\r\n```console\r\n$ bazelisk test --override_repository=rules_python=$PWD/../.. ...\r\n//:py_import_test                                                        PASSED in 0.6s\r\n```",
    "head_branch": "topic/beasleyr-vmw/py_import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add py_import rule (#174)\n\nThis change adds adds a `py_import` rule to import Python eggs like\r\n`java_import` imports Java jars.\r\n\r\npy_import.egg generated using `zipper`[1]:\r\n\r\n```console\r\n$ third_party/ijar/zipper Cc examples/py_import/py_import.egg examples/py_import/helloworld.py=examples/helloworld/helloworld.py examples/__init__.py= examples/py_import/__init__.py=\r\n```\r\n\r\nPartially addresses bazelbuild/bazel#7312.\r\nAddresses #222.\r\n\r\n[1]: https://github.com/bazelbuild/bazel/tree/master/third_party/ijar\r\n\r\nTesting Done:\r\n```console\r\n$ bazelisk test --override_repository=rules_python=$PWD/../.. ...\r\n//:py_import_test                                                        PASSED in 0.6s\r\n```"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210463ac254a19ac28f873",
    "number": 173,
    "body": "This change adds adds a `py_import` rule to import Python eggs like\r\n`java_import` imports Java jars.\r\n\r\nPartially addresses bazelbuild/bazel#7312.",
    "head_branch": "topic/beasleyr-vmw/py_import",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210464ac254a19ac28f874",
    "number": 169,
    "body": "Our verification machines were filling up /tmp/ with this temporary\r\nfolder.  This patch removes it when piptool exits.",
    "head_branch": "tmpcleanup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove the temporary directory containing cacert.pem when done (#169)\n\nOur verification machines were filling up /tmp/ with this temporary\r\nfolder.  This patch removes it when piptool exits."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210464ac254a19ac28f875",
    "number": 168,
    "body": "This lets us build under `--incompatible_remove_old_python_version_api`, and should make us good with https://buildkite.com/bazel/bazelisk-plus-incompatible-flags for Bazel 0.23.",
    "head_branch": "deps",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update subpar dep for incompatible change migrations in Bazel 0.23 (#168)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210465ac254a19ac28f876",
    "number": 167,
    "body": "Welcome to [Renovate](https://renovatebot.com)! This is an onboarding PR to help you understand and configure settings before regular Pull Requests begin.\n\n:vertical_traffic_light: To activate Renovate, merge this Pull Request. To disable Renovate, simply close this Pull Request unmerged.\n\n\n\n---\n### Detected Package Files\n\n * `WORKSPACE` (bazel)\n * `tools/update_tools/Dockerfile` (dockerfile)\n * `python/requirements.txt` (pip_requirements)\n\n### Configuration Summary\n\nBased on the default config's presets, Renovate will:\n\n  - Start dependency updates only once this Configure Renovate PR is merged\n  - Separate major versions of dependencies into individual branches/PRs\n  - Do not separate patch and minor upgrades into separate PRs for the same dependency\n  - Upgrade to unstable versions only if the existing version is unstable\n  - Raise PRs immediately (after branch is created)\n  - Use <code>renovate/</code> as prefix for all branch names\n  - If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others\n  - Keep existing branches updated even when not scheduled\n  - Disable automerging feature - wait for humans to merge all PRs\n  - Ignore `node_modules`, `bower_components`, `vendor` and various test/tests directories\n  - Update existing lock files only when <code>package.json</code> is modified\n  - Autodetect whether to pin dependencies or maintain ranges\n  - Rate limit PR creation to a maximum of two per hour\n  - Limit to maximum 20 open PRs at any time\n  - Group known monorepo packages together\n  - Use curated list of recommended non-monorepo package groupings\n\n:abcd: Would you like to change the way Renovate is upgrading your dependencies? Simply edit the `renovate.json` in this branch with your custom config and the list of Pull Requests in the \"What to Expect\" section below will be updated the next time Renovate runs.\n\n---\n\n### What to Expect\n\nWith your current configuration, Renovate will create 7 Pull Requests:\n\n<details>\n<summary>Update io_bazel_rules_sass commit hash to 223c8d3</summary>\n\n  - Schedule: \"at any time\"\n  - Branch name: `renovate/io_bazel_rules_sass-digest`\n  - Upgrade io_bazel_rules_sass to `223c8d3b853d24a7e4b4fd59223fcb8424691d1b`\n\n\n</details>\n\n<details>\n<summary>Update io_bazel_skydoc commit hash to 2d9566b</summary>\n\n  - Schedule: \"at any time\"\n  - Branch name: `renovate/io_bazel_skydoc-digest`\n  - Upgrade io_bazel_skydoc to `2d9566b21fbe405acf5f7bf77eda30df72a4744c`\n\n\n</details>\n\n<details>\n<summary>Update subpar commit hash to a4f9b23</summary>\n\n  - Schedule: \"at any time\"\n  - Branch name: `renovate/subpar-digest`\n  - Upgrade subpar to `a4f9b23bf01bcc7a52d458910af65a90ee991aff`\n\n\n</details>\n\n<details>\n<summary>Update dependency setuptools to v38.7.0</summary>\n\n  - Schedule: \"at any time\"\n  - Branch name: `renovate/setuptools-38.x`\n  - Upgrade [setuptools](https://togithub.com/pypa/setuptools) to `==38.7.0`\n\n\n</details>\n\n<details>\n<summary>Update dependency wheel to v0.33.1</summary>\n\n  - Schedule: \"at any time\"\n  - Branch name: `renovate/wheel-0.x`\n  - Upgrade [wheel](https://togithub.com/pypa/wheel) to `==0.33.1`\n\n\n</details>\n\n<details>\n<summary>Update dependency pip to v19</summary>\n\n  - Schedule: \"at any time\"\n  - Branch name: `renovate/pip-19.x`\n  - Upgrade pip to `==19.0.3`\n\n\n</details>\n\n<details>\n<summary>Update dependency setuptools to v40</summary>\n\n  - Schedule: \"at any time\"\n  - Branch name: `renovate/setuptools-40.x`\n  - Upgrade [setuptools](https://togithub.com/pypa/setuptools) to `==40.8.0`\n\n\n</details>\n\n<br />\n\n:children_crossing: Branch creation will be limited to maximum 2 per hour, so it doesn't swamp any CI resources or spam the project. See docs for `prhourlylimit` for details.\n\n\n---\n\n:question: Got questions? Check out Renovate's [Docs](https://renovatebot.com/docs/), particularly the Getting Started section.\nIf you need any further assistance then you can also [request help here](https://togithub.com/renovatebot/config-help/issues).\n\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/marketplace/renovate). View repository job log [here](https://renovatebot.com/dashboard#bazelbuild/rules_python).\n",
    "head_branch": "renovate/configure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210466ac254a19ac28f877",
    "number": 166,
    "body": "mrovner and nlopezgi LGTM'd in bazelbuild/bazel#7375, and you made a few comments that I have addressed.",
    "head_branch": "prop-pytool",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Mark Python toolchain proposal as formally accepted (#166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210467ac254a19ac28f878",
    "number": 164,
    "body": "I was going to add a boolean field \"is_hermetic\" to the provider, but the word \"hermetic\" is problematic and the field really isn't necessary. So instead I clarified some wording and added a short description of the provider constructor.",
    "head_branch": "prop-pytool",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update toolchain proposal to clarify wording around platform runtimes (#164)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210468ac254a19ac28f879",
    "number": 163,
    "body": "Ddoc update to reflect what we just discussed. (No detailed review required on your part, but feel free to discuss any issues in bazelbuild/bazel#7375.) Thanks again for the pointer.",
    "head_branch": "prop-pytool",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update toolchain proposal to say PyRuntimeInfo is natively defined (#163)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210468ac254a19ac28f87a",
    "number": 162,
    "body": "",
    "head_branch": "prop-pytool",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Remove 'host_python_toolchain' from the toolchain proposal (#162)\n\nAlso clarify wording around deleting flags."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210469ac254a19ac28f87b",
    "number": 161,
    "body": "This PR adds a design doc on making the native Python rules use the toolchain framework to find their runtimes. Follow bazelbuild/bazel#7375 for discussion and design review.\r\n\r\n@katre Please do a quick validation-review that the doc is publishable for review.\r\n\r\nReviewer roles:\r\n- @katre for Bazel team and platform/toolchain domain expertise\r\n- @mrovner for Python rules expertise\r\n- @nlopezgi for remote execution rule logic expertise",
    "head_branch": "pytoolchain",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add 'Design for a Python Toolchain' proposal (#161)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621046aac254a19ac28f87c",
    "number": 160,
    "body": "Adding all GitHub repo admins to Global CODEOWNERS",
    "head_branch": "dslomov-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Create CODEOWNERS (#160)\n\n* Create CODEOWNERS\r\n\r\n* Update CODEOWNERS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621046bac254a19ac28f87d",
    "number": 159,
    "body": "Currently only pure python wheels are supported.\r\n\r\nThis extension builds wheels directly, invoking a simple python script\r\nthat creates the zip archive in the desired format instead of using\r\ndistutils/setuptools.\r\n\r\nThis will make building platform-dependent wheels easier in the future,\r\nas bazel will have full control on how extension code is built.\r\n\r\nThis replaces previous pull request (#128) that had bad merge history.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add experimental support for building wheels. (#159)\n\nAdd experimental support for building wheels.\r\n\r\nCurrently only pure python wheels are supported.\r\n\r\nThis extension builds wheels directly, invoking a simple python script\r\nthat creates the zip archive in the desired format instead of using\r\ndistutils/setuptools.\r\n\r\nThis will make building platform-dependent wheels easier in the future,\r\nas bazel will have full control on how extension code is built."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621046cac254a19ac28f87e",
    "number": 158,
    "body": "While it's possible to select which interpreter to run python rules with, pip will always be run with python from the system path.\r\n\r\nThis is an alternative solution to PR #82 and PR #85. it doesn't add pip3_import(). instead it adds python_interpreter attribute to pip_import(). Rationale is that if people want to use python3 for pip without changing the system's default ```python```, they are likely also want to use ```python3.6``` or ```python3.7``` without changing the system's default ```python3``` (for me it points to python 3.5) Using this approach users can any version of python, including customized built python with the interpreter path specified.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621046cac254a19ac28f87f",
    "number": 156,
    "body": "I don't like the way I was going to add extra provider fields to report better error messages. This updates the doc to say we're not committed to any particular approach. But I think in practice I'll probably do warning messages when a py2-only or py3-only library is depended on by any other py library that's not also py2-only or py3-only respectively. Then when py_binary fails due to version conflicts, it'll direct users to check the log, e.g. by repeating the build with --output_filter.",
    "head_branch": "py23-prov",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Py23 proposal: Update plan for py provider fields (#156)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621046dac254a19ac28f880",
    "number": 155,
    "body": "This is an overdue formality at this point. The proposal is mostly implemented.",
    "head_branch": "py23-accept",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Mark Py 2/3 proposal accepted (#155)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621046eac254a19ac28f881",
    "number": 153,
    "body": "This splits the syntactic and semantic changes into separate migration flags. The experimental flag for syntax is 100% backwards compatible.\r\n\r\nThis way, we can flip and eliminate both experimental flags before the incompatible changes are introduced. This allows us to do the incompatible change procedure in a single Bazel release cycle.",
    "head_branch": "py23-flags",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update migration path for py23 proposal (#153)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621046fac254a19ac28f882",
    "number": 152,
    "body": "Newer versions of Bazel do not contain a native `git_repository` rule so users of `rules_python` are required to load the `git_repository` rule before they can use it to fetch `rules_python`. This PR updates the documentation accordingly.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add loading of git_repository rule to README (#152)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210470ac254a19ac28f883",
    "number": 151,
    "body": "The piptool run is not properly sandboxed and the temporary folder\r\ncreated during extraction of cacert.pem does not get cleaned on\r\nexit. This leads to accumulation in /tmp and may result in out of\r\nspace errors over long a period of time.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210471ac254a19ac28f884",
    "number": 149,
    "body": "",
    "head_branch": "py23-select",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clarify plan for select() again (#149)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210471ac254a19ac28f885",
    "number": 147,
    "body": "Tested:\r\n  `bazel-0.21 test //... --all_incompatible_changes`\r\n\r\nFixes #134",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update subpar dependency (#147)\n\nTested:\r\n  bazel-0.21 test //... --all_incompatible_changes\r\n\r\nFixes #134"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210472ac254a19ac28f886",
    "number": 146,
    "body": "Merge of https://github.com/bazelbuild/rules_python/pull/101/files to our fork",
    "head_branch": "patchextraindex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210473ac254a19ac28f887",
    "number": 145,
    "body": "Merged of https://github.com/bazelbuild/rules_python/pull/101/files to our fork of rules_python",
    "head_branch": "patchextraindex",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210474ac254a19ac28f888",
    "number": 143,
    "body": "This adds a generation of tests that simply import the package.",
    "head_branch": "generate-tests",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210475ac254a19ac28f889",
    "number": 142,
    "body": "A quick sanity check run in parallel to ensure that the rule contains no syntax errors or undefined names.\r\n\r\nE901,E999,F821,F822,F823 are the \"showstopper\" [flake8](http://flake8.pycqa.org) issues that can halt the runtime with a SyntaxError, NameError, etc. Most other flake8 issues are merely \"style violations\" -- useful for readability but they do not effect runtime safety.\r\n\r\n    F821: undefined name name\r\n    F822: undefined name name in __all__\r\n    F823: local variable name referenced before assignment\r\n    E901: SyntaxError or IndentationError\r\n    E999: SyntaxError -- failed to compile a file into an Abstract Syntax Tree",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210476ac254a19ac28f88a",
    "number": 141,
    "body": "",
    "head_branch": "py23-select",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update py2/3 proposal to address select() behavior (#141)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210476ac254a19ac28f88b",
    "number": 139,
    "body": "Remaining issues are caused by subpar\r\n\r\nProgress towards #134",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update sass and skydoc dependencies (#139)\n\nRemaining issues are caused by subpar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210477ac254a19ac28f88c",
    "number": 138,
    "body": "This reformats the files and applies some automated fixes. This should\r\nhelp get the repository forward-compatible with Bazel incompatible\r\nchanges.\r\n\r\nProgress towards #134",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Run `buildifier --lint=fix` (#138)\n\nThis reformats the files and applies some automated fixes. This should\r\nhelp get the repository forward-compatible with Bazel incompatible\r\nchanges.\r\n\r\nProgress towards #134"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210478ac254a19ac28f88d",
    "number": 136,
    "body": "Updates pip, setuptools and wheel. Based on #82 because there's no way to merge the par files, but logically independent of it.\r\n\r\nDiff between the two PRs: https://github.com/uri-canva/rules_python/compare/f96a5dbf2ebc035f7fbda51a3da068d7933f14ea..be39b7906da9c924b09ca78ce3fa152a10f782ae.",
    "head_branch": "update-deps",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210479ac254a19ac28f88e",
    "number": 135,
    "body": "This upgrades our dependencies to newer versions that are compatible with the new repo rules, and handles the fallout. Also add some comments to WORKSPACE.\r\n\r\nrules_python now builds under Bazel 0.19.1 with `--incompatible_remove_native_git_repository` and `incompatible_remove_native_http_archive`.\r\n\r\nFixes #105.",
    "head_branch": "migrate-repo-rules",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Switch to new http repo rules (#135)\n\nThis upgrades our dependencies to newer versions that are compatible with the new repo rules, and handles the fallout. Also add some comments to WORKSPACE.\r\n\r\nrules_python now builds under Bazel 0.19.1 with `--incompatible_remove_native_git_repository` and `incompatible_remove_native_http_archive`.\r\n\r\nFixes #105."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621047aac254a19ac28f88f",
    "number": 133,
    "body": "The test is brittle and shouldn't be used as a security guarantee anyway. See https://github.com/bazelbuild/rules_python/issues/117#issuecomment-438704277 for more context.\r\n\r\nFixes #117.",
    "head_branch": "fix-partest",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Delete //tools:par_test (#133)\n\nThe test is brittle and shouldn't be used as a security guarantee anyway. See https://github.com/bazelbuild/rules_python/issues/117#issuecomment-438704277 for more context.\r\n\r\nFixes #117."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621047bac254a19ac28f890",
    "number": 131,
    "body": "WIP toward fixing #98. AFAIK creating a PR is necessary so I can trigger our CI to run.",
    "head_branch": "fix-boto_test",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add six as explicit dep of boto_test (#131)\n\nThis fixes the breakage in #98 by working around #70."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621047bac254a19ac28f891",
    "number": 130,
    "body": "This proposal is a response to [bazel #137](https://github.com/bazelbuild/bazel/issues/137) and [bazel #6632](https://github.com/bazelbuild/bazel/pull/6632). It has some open questions that we can take to the discussion bug and mailing lists.",
    "head_branch": "proposal-stub-template",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add proposal for custom stub template (#130)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621047cac254a19ac28f892",
    "number": 129,
    "body": "Making sure the execute permissions are persisted when extracting the wheel.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621047dac254a19ac28f893",
    "number": 128,
    "body": "Currently only pure python wheels are supported.\r\n\r\nThis extension builds wheels directly, invoking a simple python script that creates the zip archive in the desired format instead of using distutils/setuptools.\r\n\r\nThis will make building platform-dependent wheels easier in the future, as bazel\r\nwill have full control on how extension code is built.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621047eac254a19ac28f894",
    "number": 127,
    "body": "Reviewer TBD. This design impacts native behavior so it'll also be indexed on bazelbuild/proposals and subject to Bazel design review.",
    "head_branch": "proposal-2-3-support",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Selecting Between Python 2 and 3 (#127)\n\nAdd proposals directory and proposal for 2/3 mode"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621047fac254a19ac28f895",
    "number": 121,
    "body": "`wheel` has dropped support for `metadata.json`. This change adds the\r\nfunctionality to parse METADATA 2.1 file and return the same\r\ndictionary as deprecated `metadata.json`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210480ac254a19ac28f896",
    "number": 111,
    "body": "Sometimes, the dependency hierarchy produced by pip will contain edges such as `a → b[a]`, however the graph itself only contains dependency `b`.  This adds logic such that if `b[a]` doesn't exist, then we will look for `b`.",
    "head_branch": "dependency-fallbacks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210481ac254a19ac28f897",
    "number": 109,
    "body": "This adds an option to the `pip_import()` rule that allows users to\r\nspecify a prebuilt tarball which skips the slow `pip wheel ...` command\r\nthat happens frequently during bazel commands. Details:\r\n\r\n - `prebuilt`: Tar archive that contains `*.whl` and `requirements.txt`\r\n   generated from running `pip wheel -r requirements.txt`\r\n - `generate_prebuilt_and_exit`: Development option that allows users to\r\n   generate the prebuilt archive in order to get it into their\r\n   workspace.\r\n\r\nThe update process looks like this:\r\n\r\n - Developer updates their `requirements.txt`, runs a `bazel command`\r\n   which will fail because the `requirements.txt` in the prebuilt\r\n   doesn't match the one in the repository\r\n - Add `generate_prebuilt_and_exit = True` to the `pip_import()` command\r\n   and run the build again\r\n - The prebuilt will be generated and the command will fail\r\n - The developer takes the prebuilt, uploads it for deployment, updates\r\n   the reference in the `WORKSPACE`, removes\r\n   `generate_prebuilt_and_exit`, and is off to the races",
    "head_branch": "add-prebuilt-option",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210482ac254a19ac28f898",
    "number": 108,
    "body": "This is needed for some packages like python_dateutil which have not yet started using metadata.json.",
    "head_branch": "metadata",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210482ac254a19ac28f899",
    "number": 106,
    "body": "Fixes #105",
    "head_branch": "dslomov-update-repo-rules",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210483ac254a19ac28f89a",
    "number": 101,
    "body": "This should fix #74 but was really motivated by the fact that I wanted to install https://github.com/uploadcare/pillow-simd with the `cc -mavx2` option reliably. So I needed the option to pass in environment variables that get propagated to pip and I further ran into this issue: https://github.com/uploadcare/pillow-simd/pull/26 so also needed to be able to pass in custom arguments.\r\n\r\nSo an example would be:\r\n\r\n```\r\npip_import(\r\n   name = \"py_deps\",\r\n   requirements = \"//:requirements.txt\",\r\n   environment = {\r\n       \"CC\": \"cc -maxv2\",\r\n   },\r\n   extra_args = [\"--no-binary\", \"pillow-simd\"],\r\n)\r\n```",
    "head_branch": "env-extra-args",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210484ac254a19ac28f89b",
    "number": 100,
    "body": "",
    "head_branch": "topic/ARCH-109_add_multiple_pip",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210485ac254a19ac28f89c",
    "number": 94,
    "body": "",
    "head_branch": "dgreiman/debug",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210486ac254a19ac28f89d",
    "number": 91,
    "body": "",
    "head_branch": "dgreiman/docker",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #91 from bazelbuild/dgreiman/docker\n\nUpdate par files in a Docker container with known-good Python"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210486ac254a19ac28f89e",
    "number": 90,
    "body": "Some wheels only include METADATA files (examples: wheel 0.31.0,\r\ntenacity 4.10.0). Previously whl did not parse the requirement\r\nsections. Add code to parse these sections.\r\n\r\nThe most complicated part is parsing out the extra == 'something'\r\nclauses from the boolean expression. Use the same expression parser\r\nused by pkg_resources.evaluate_marker which is already used by this\r\ncode to find those clauses and produce a version with them removed.",
    "head_branch": "parse-metadata-requires",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210487ac254a19ac28f89f",
    "number": 89,
    "body": "",
    "head_branch": "dgreiman/regen88",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #89 from bazelbuild/dgreiman/regen88\n\nRegenerate piptool.par for PR 88"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210488ac254a19ac28f8a0",
    "number": 88,
    "body": "Partial fix for #87 . This still needs `./update_tools.sh` to be run; but I figured the binary files should be added by a trusted source.",
    "head_branch": "pip_upgrade",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #88 from jkinkead/pip_upgrade\n\nUpdate pip version to 9.0.3."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210489ac254a19ac28f8a1",
    "number": 86,
    "body": "The [pep-427](https://www.python.org/dev/peps/pep-0427/#file-name-convention) spec that is being followed when discovering dist_info data in python wheels allows for an optional build tag to exist. \r\n\r\nPreviously this was not taken into account and could make the dist_info appear missing when a build tag was used.\r\n \r\nThese changes update the way the dist_info path is generated to allow for the case where a build tag is included.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621048aac254a19ac28f8a2",
    "number": 85,
    "body": "Fix / workaround for #33 .\r\n\r\nMuch thanks to @joshclimacell for doing essentially this.",
    "head_branch": "pip3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621048bac254a19ac28f8a3",
    "number": 84,
    "body": "In short, the python infrastructure is using a brownout period which causes pip install to fail:\r\n\r\n> During that window, clients accessing pypi.python.org with clients that do not support TLSv1.2 will receive an HTTP 403 with the error message \"This is a brown out of TLSv1 support. TLSv1 support is going away soon, upgrade to a TLSv1.2+ capable client.\".\r\n\r\nSee: \r\nhttp://pyfound.blogspot.fi/2017/01/time-to-upgrade-your-python-tls-v12.html\r\n\r\n\r\nThe errors provided by bazel aren't very clear either (even though it's mostly due to pip):\r\n```\r\n$> bazel --batch run apps/yap/etl:etl --define CONFIG=prod --  bank_operations_importer_job -c ~/Downloads/1712\\ Looker\\ DrillDown.csv\r\nERROR: error loading package '': Encountered error while reading extension file 'requirements.bzl': no such package '@all_requirements//': pip_import failed: Collecting awscli==1.11.133 (from -r /Users/J-B/Work/backend/requirements.txt (line 1))\r\n (  Could not find a version that satisfies the requirement awscli==1.11.133 (from -r /Users/J-B/Work/backend/requirements.txt (line 1)) (from versions: )\r\nNo matching distribution found for awscli==1.11.133 (from -r /Users/J-B/Work/backend/requirements.txt (line 1))\r\n)\r\nERROR: error loading package '': Encountered error while reading extension file 'requirements.bzl': no such package '@all_requirements//': pip_import failed: Collecting awscli==1.11.133 (from -r /Users/J-B/Work/backend/requirements.txt (line 1))\r\n (  Could not find a version that satisfies the requirement awscli==1.11.133 (from -r /Users/J-B/Work/backend/requirements.txt (line 1)) (from versions: )\r\nNo matching distribution found for awscli==1.11.133 (from -r /Users/J-B/Work/backend/requirements.txt (line 1))\r\n)\r\nINFO: Elapsed time: 8.291s\r\nFAILED: Build did NOT complete successfully (0 packages loaded)\r\nERROR: Build failed. Not running target\r\n```\r\n\r\nFrom the official mailing list: https://mail.python.org/pipermail/python-announce-list/2018-April/011885.html\r\n> Pip 9.0.3 supports TLSv1.2 when running under system Python on macOS <\r\n10.13. Official release notes: https://pip.pypa.io/en/stable/news/\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621048bac254a19ac28f8a4",
    "number": 83,
    "body": "",
    "head_branch": "dgreiman/moreinfo",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #83 from bazelbuild/dgreiman/moreinfo\n\nAdd verbose failure messages to par_test.py"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621048cac254a19ac28f8a5",
    "number": 82,
    "body": "While it's possible to select which interpreter to run python rules with, pip will always be run with `python` from the system path.\r\n\r\nThis uses the interpreter names as described in [PEP 394](https://www.python.org/dev/peps/pep-0394/) to be able to run pip in both python 2 and python 3 as an interim solution until `py_toolchain` is finalised, since the values for the current mechanism in Bazel to configure the python interpreter at the invocation level (`python_path`, `python_top`) are not forwarded to the skylark context.\r\n\r\nSee discussion in #62.",
    "head_branch": "pip3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621048dac254a19ac28f8a6",
    "number": 81,
    "body": "Addresses #67 \r\n\r\nThis vendors several third_party packages, which increases the repository size by 12MB and 116000 lines.  Deleting the .par files will get about 6MB of that back.\r\n\r\nThe .par files will be removed in a separate change.\r\n\r\nThis change was tested against the rules_k8s repository, and various manual testing.\r\n\r\nAlternatives to this change are:\r\n1) Do nothing, continue with the current process\r\n2) Create an actual release process for the .par files, which builds and stores them in a separate repository along with the .bzl files.\r\n",
    "head_branch": "dgreiman/parectomy",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621048eac254a19ac28f8a7",
    "number": 79,
    "body": "#77: Properly escape \"+\" in package version strings.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #79 from calder/master\n\nSupport \"+\" in package versions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621048fac254a19ac28f8a8",
    "number": 78,
    "body": "Properly escape \"+\" in package version strings.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210490ac254a19ac28f8a9",
    "number": 68,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #68 from buchgr/master\n\nadd new bazel ci config"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210490ac254a19ac28f8aa",
    "number": 66,
    "body": "",
    "head_branch": "duggelz-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add disclaimer about alpha release status (#66)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210491ac254a19ac28f8ab",
    "number": 61,
    "body": "In this patch is proposed the way to resolve the issue of building platform independent python binaries and images with BAZEL. This will allow to build a docker image for any platform using python_rules and still be able to run python binary using bazel native rule.\r\n\r\n> I would like to mention that it was difficult to patch your code, so I created piptool_v2.py and whl_v2.py modules as well as additional rules for pip.bzl.\r\n\r\nThere are two main steps I did for solution implementation:\r\n\r\n1. Download and extract wheel files for specified platforms. I implemented this using “pip download --platform <platform>” instead of “pip wheel”.\r\n2. Extract wheel files for the same package in a single directory so that all platform dependens .so files could be found in a package directory.\r\n\r\nTo solve the problem with packages that can’t be downloaded with “pip download” I create them manually and connect as external repository. Then I pass the path to this external repository to “pip download” using [--find links](https://pip.pypa.io/en/stable/reference/pip_download/#cmdoption-f) command. Pip will automatically resolve all existing wheel files and copy them to requirements repo. This solution also allowed me to cache the files which are already downloaded with pip.\r\n\r\nHere you can find the example where I use my patch.\r\nhttps://github.com/dududko/example_rules_python\r\n\r\n",
    "head_branch": "multiplatforom",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210492ac254a19ac28f8ac",
    "number": 52,
    "body": "An extra blank line makes `## py_library` display correctly as a header.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #52 from mapx/patch-1\n\nUpdate python.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210493ac254a19ac28f8ad",
    "number": 51,
    "body": "Necessary in order to work on Windows\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use literal '/'s to build internal zip file paths (#51)\n\n* Use posixpath to build internal zip file paths\r\n\r\n* Use literal / instead of posixpath\r\n\r\n* Update piptool.par and whltool.par"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210494ac254a19ac28f8ae",
    "number": 50,
    "body": "Previously any wheel dependencies that had an environment marker\r\n(such as 'python_version>3.3') were simply ignored, leading to\r\nmissing packages in the Python environment constructed by bazel.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/49",
    "head_branch": "feat/python-version-markers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Evaluate PEP 508 environment markers for package dependencies (#50)\n\n* Evaluate PEP 508 environment markers for package dependencies\r\n\r\nPreviously any wheel dependencies that had an environment marker\r\n(such as 'python_version>3.3') were simply ignored, leading to\r\nmissing packages in the Python environment constructed by bazel.\r\n\r\nFixes https://github.com/bazelbuild/rules_python/issues/49\r\n\r\n* Regenerate the piptool.par\r\n\r\nRequired after making changes to whl.py\r\n\r\n* Pin the version of setuptools in piptool & extract whltool\r\n\r\nSome common operators in version markers (e.g., <=) are only supported\r\nin setuptools>=17.1. Rather than risk failing because the environment\r\nhas an old setuptools version it's better to include it. Pinning to\r\nan exact version (currently the latest) to make things as predictable\r\nas possible.\r\n\r\nIn addition, whl.py used during workspace setup also now depends on\r\nsetuptools. We package this in a separate whltool.par to make this\r\npredictable as well."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210495ac254a19ac28f8af",
    "number": 46,
    "body": "When the bazel implementation calls into the wheel python script, it joins the extras arg by commas (https://github.com/bazelbuild/rules_python/blob/3e167dcfb17356c68588715ed324c5e9b76f391d/python/whl.bzl#L27).\r\n\r\nWhen that arg is parsed, it should be split by commas. In the case of multiple args being passed with the same argument name, we should continue to use an Append parser, but with modifications to split by comma.",
    "head_branch": "jac/splits",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #46 from jac-stripe/jac/splits\n\nSplit the extras param by comma"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210495ac254a19ac28f8b0",
    "number": 40,
    "body": "This also fixes a couple bugs I hit after regenerating `piptool.par`:\r\n - `os.environ['PYTHONPATH']` may result in a `KeyError`\r\n - The cert expansion logic was removed, but things fail without it (after I `./update_tools.sh`).  I thought this was intentional (should the PAR changes have fixes this?), but I'm restoring for now to keep `HEAD` in a good state.",
    "head_branch": "test-head",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #40 from mattmoor/test-head\n\nThis updates WORKSPACE to the latest subpar, and ./update_tools.sh."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210496ac254a19ac28f8b1",
    "number": 39,
    "body": "Use the skylark `fail` function instead of letting Python throw a\r\nkey-not-found exception.\r\n\r\n(There may be a prettier way of doing this: I'm happy to be shown\r\ndifferently, or to bikeshed the prose.)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #39 from hwright/master\n\nAdd a better error message when deps not found"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210497ac254a19ac28f8b2",
    "number": 38,
    "body": "Fixes bazelbuild/rules_python#36",
    "head_branch": "empty-requirements",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #38 from hwright/empty-requirements\n\nHandle empty requirements.txt"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210498ac254a19ac28f8b3",
    "number": 34,
    "body": "According to https://www.python.org/dev/peps/pep-0427/:\r\n```\r\n{distribution}-{version}.dist-info/METADATA is Metadata version 1.1 or greater format metadata.\r\n```\r\n\r\nCurrently, rules_python fails when metadata.json is not present. Let's also check for a METADATA file. Tested with `futures==2.2.0` wheel and rules_python can now include that as a requirement, where it couldnt before.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #34 from jac-stripe/master\n\nHandle METADATA files in python wheels"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "66210499ac254a19ac28f8b4",
    "number": 32,
    "body": "Fixes #17 \r\n\r\nDepends on https://github.com/google/subpar/pull/52",
    "head_branch": "dgreiman/issue17",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #32 from bazelbuild/dgreiman/issue17\n\nAllow piptool to build wheels."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049aac254a19ac28f8b5",
    "number": 31,
    "body": "The warning is:\r\n   You are using pip version 1.5.4, however version 9.0.1 is available.\r\n   You should consider upgrading via the 'pip install --upgrade pip' command.\r\n\r\nIn reality, pip is at 9.0.1, but its bundled version of pkg_resources\r\ndoesn't know that.\r\n\r\nSee https://github.com/google/subpar/issues/38",
    "head_branch": "dgreiman/pipwarning",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #31 from bazelbuild/dgreiman/pipwarning\n\nSilence a warning erroneously emitted by pip."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049aac254a19ac28f8b6",
    "number": 29,
    "body": "",
    "head_branch": "fix-comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #29 from drigz/fix-comment\n\nFix comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049bac254a19ac28f8b7",
    "number": 28,
    "body": "",
    "head_branch": "davidstanke-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #28 from bazelbuild/davidstanke-patch-1\n\nUpdate build status badge to use https"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049cac254a19ac28f8b8",
    "number": 25,
    "body": "Fixes: https://github.com/bazelbuild/rules_python/issues/24",
    "head_branch": "mattmoor-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #25 from bazelbuild/mattmoor-patch-1\n\nNote that \"{HEAD}\" is invalid, not special."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049dac254a19ac28f8b9",
    "number": 22,
    "body": "Without this, the metadata.json file is read as bytes instead of a str, and the call\r\nto json.loads() fails with the following error:\r\n```bash\r\nTypeError: the JSON object must be str, not 'bytes'\r\n```",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #22 from kgreenek/master\n\nCorrectly decode metadata.json into a utf8 str"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049eac254a19ac28f8ba",
    "number": 21,
    "body": "`boto3`s `metadata.json` file doesn't delimit the version specifier the way other packages I've come across seem to, so support splitting on the kinds of characters this variation might foist upon us.\r\n\r\nFixes: https://github.com/bazelbuild/rules_python/issues/20",
    "head_branch": "boto-repro",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #21 from mattmoor/boto-repro\n\nSplit on more characters when stripping the version metadata."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049eac254a19ac28f8bb",
    "number": 18,
    "body": "\"Extras\" are additional dependencies of a given library, which are consumed by passing the \"extra\" name in brackets after the distribution name, for example:\r\n```\r\nmock[docs]==1.0.1\r\n```\r\n\r\nWe see this in the dependencies of several Google Cloud libraries, which depend on: `googleapis_common_protos[grpc]`\r\n\r\nI've added a simple test that the dependency structure we synthesize for this kind of thing is correct via an \"extras\" test that has a `requirements.txt` of:\r\n```\r\ngoogle-cloud-language==0.27.0\r\n```\r\n\r\nFixes: https://github.com/bazelbuild/rules_python/issues/12",
    "head_branch": "just-par",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #18 from mattmoor/just-par\n\nThis adds support for \"extras\"."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6621049fac254a19ac28f8bc",
    "number": 16,
    "body": "Some wheel files have metadata files marked as `pydist.json` instead of `metadata.json`. This adds some conditional logic to handle either of these metadata files.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a0ac254a19ac28f8bd",
    "number": 15,
    "body": "Some packages use the lowercased version of their dependencies, and pip would install them. So even if I have `pillow==3.8.1` in my `requirements.txt`, it would still work.\r\n\r\nHowever, it looks like that `pip_import` always uses the case sensitive name of a package. So even if I have `django==1.10` in my requirements.txt, `pip_import` would always name the package as `Django` because that's what pip uses.\r\n\r\nThis fixes that issue by always using the lowercase version of packages in the `_requirement` dictionary.\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a1ac254a19ac28f8be",
    "number": 13,
    "body": "",
    "head_branch": "depset",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #13 from vladmos/depset\n\nUpdate dependencies for compatibility with Bazel 0.6.0"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a2ac254a19ac28f8bf",
    "number": 11,
    "body": "Quoting @duggelz\r\n\r\n> From PEP 508 it appears that you can register packages with any capitalization, and install them with any capitalization, even if it's different. I.e. you can register package 'MyPackage' and install it with mypackage, MYPACKAGE, or even mYpAcKaGe.\r\n>\r\n> That is not an ideal spec, but is it the spec, and the tools implement it, so we should to.\r\n\r\nThanks to @justinwb for the original PR.",
    "head_branch": "lowercase",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #11 from mattmoor/lowercase\n\nAllow any capitalization in requirement names."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a3ac254a19ac28f8c0",
    "number": 10,
    "body": "",
    "head_branch": "par-check",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add a simple test that the built and checked in PAR files match. (#10)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a3ac254a19ac28f8c1",
    "number": 9,
    "body": "not sure if this has any other ramifications",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a4ac254a19ac28f8c2",
    "number": 8,
    "body": "Fixes: https://github.com/bazelbuild/rules_python/issues/7",
    "head_branch": "fix-7",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #8 from bazelbuild/fix-7\n\nFix documentation bug"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a5ac254a19ac28f8c3",
    "number": 6,
    "body": "Fixes: https://github.com/bazelbuild/rules_python/issues/2",
    "head_branch": "windows",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a6ac254a19ac28f8c4",
    "number": 5,
    "body": "Fixes: https://github.com/bazelbuild/rules_python/issues/4",
    "head_branch": "rename-package",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #5 from mattmoor/rename-package\n\nRename package to requirement to avoid conflict with Bazel built-in."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a6ac254a19ac28f8c5",
    "number": 3,
    "body": "I'd meant to clean this up when I renamed this update_tools.sh, but clearly missed it.",
    "head_branch": "delete-update_piptool.sh",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Delete update_piptool.sh (#3)\n\nI'd meant to clean this up when I renamed this update_tools.sh, but clearly missed it."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662104a7ac254a19ac28f8c6",
    "number": 1,
    "body": "This is a proposal for some PIP rules that are heavily based on a prototype I wrote a month or two back.  Very open to suggestions here, but it seems to work across a number of examples I've tried so far.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "PIP dependency support (#1)\n\n* Check in an initial version of the pip rules.\r\n\r\nThis is broken off of my prototype repository, and there are a handful of TODOs left to resolve.\r\n\r\n* Remove some vestigial convenience code.\r\n\r\nElaborate on why the TODO to rewrite {pip,whl}.sh as Python is harder than it looks.\r\n\r\n* Incorporate Code Review Feedback\r\n\r\n* First cut at skydoc-based documentation.\r\n\r\n* Move whl.sh into a Python script that has unit testing.\r\n\r\n* Migrate pip.sh into piptool.py\r\n\r\nThis migrates the logic from pip.sh into piptool.py, which should improve portability by removing the bash dependency.\r\n\r\nThis also has the beginnings of wrapping piptool as a closed redistributable that doesn't rely on a system-installed copy of PIP, but instead uses these rules to pull pip into a PAR bundle.  Besides needing to work out the details of releasing and redistributing the PAR, we have two unresolved issues:\r\n * When bundled as a PAR (vs. py_binary), piptool seems to pick up the system-installed version of pip.\r\n * When bundled as a PAR, piptool sometimes sees cert issues resolving requirements (similar to what we see with httplib2).\r\n\r\n* Address the cert issue in piptool as a PAR.\r\n\r\nWith this change I am able to build/test my PR on my macbook without pip installed.  The only additional change I have locally is to switch from running piptool.py as a simple .py file to downloading/using a PAR built from this change.\r\n\r\nI believe we still have the problem that the .par picks the host's version of pip instead of our embedded copy, but I haven't reverified that issue still exists (this just does nothing to address that issue).\r\n\r\n* Fix assorted buildifier issues.\r\n\r\n* Fix a typo in docs\r\n\r\n* Incorporate @duggelz code review feedback.\r\n\r\n* Incorporate review feedback\r\n\r\nmove python tools under a top-level rules_python package\r\n\r\nsimplify version_test\r\n\r\n* Adopt a canonical naming format for imported whl_library rules.\r\n\r\n`whl_library` rules generated by `pip_import` are now named as:\r\n```\r\n   pypi__{distribution}_{version}\r\n```\r\n\r\nSubstituting illegal characters (e.g. `-`, `.`) with underscores.\r\n\r\n* Move the piptool dependency into a .PAR file.\r\n\r\nAdd a script for updating the tools and document this and the docs script.\r\n\r\n* Fix buildifier issues."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]