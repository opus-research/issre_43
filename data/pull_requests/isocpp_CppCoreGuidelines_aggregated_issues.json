[
  {
    "_id": "6620739518912b45d36991eb",
    "number": 2194,
    "body": "This PR fixes the dead link to ~~[MISRA C++ 2008: Guidelines for the use of the C++ language in critical systems](https://misra.org.uk/product/misra-c2008/).~~ MISRA C++ Guidelines.",
    "head_branch": "misra_cpp_2008_dead_link_patch",
    "is_a_fork": true,
    "comments": [
      "Would it make sense to use https://misra.org.uk/product/misra-cpp2023/ instead? i.e. MISRA C++:2023",
      "@jwakely I followed your suggestion: b186b893326bab9b7234f9aeabbbbe351fdb017b.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739618912b45d36991ec",
    "number": 2192,
    "body": "Note this content is very rough.  It seemed to me unlikely that I could meet the style and tone that is desired here and also there might be significant disagreement in principle or priority.\r\n\r\nAccordingly, I'm willing to work on this PR to the extent that the editors find it useful but I am also happy to let this PR be abandoned or replaced by something it inspires that is more to your liking.  You may find it easier to harvest the parts you like, rewrite them in your own style, and then apply them as needed.  Perhaps in a different order.\r\n\r\nIf you would like additional thoughts in one or more areas, feel free to comment and I can add something.  I intend this PR to be a discussion tool.  I cannot foresee it actually being merged anytime soon if ever.",
    "head_branch": "ricomariani_perf_edits",
    "is_a_fork": true,
    "comments": [
      "Thanks for the micro-fixes. I don't have an opinion whether it should be merged as-is, I'll leave that to the other editors (I'm semi-retired from this project these days). I do think there's a lot of good content here and some of it would be valuable to use.",
      "I don't even think it should be merged as is. I think it's likely better to cherry pick from the PR and use as they fit.  Really what ever easier is fine with me.  Some of this section is still rough anyway and it's not like it's cast in stone..",
      "It's fine, the comments were very helpful and this is hardly *advanced* changes we're talking about here😄\r\n",
      "After some out-of-band discussion with the editors we decided that it's best for the guidelines to make reference to content like this rather than directly put them in there.  The article this PR inspired https://medium.com/p/f316c9bc4146 is probably a better landing place for this kind of advice.  I recommended that the group harvest some text from here about considering what type of requirements you have and then maybe coloring the guidelines according to those requirements.  i.e. better is relative to your goal so you are likely to want different things if you need binary size vs. throughput vs. power consumption vs. latency.\r\n\r\nIn any case, it seems appropriate to close this PR now.  It will always be here to harvest."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739718912b45d36991ed",
    "number": 2185,
    "body": "Code like `if (my_condition == true)` does occasionally occur \"in the wild\", so it seems worth adding this as an example.",
    "head_branch": "ES87-my_condition==true",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! We agree with the intent of the example, but we think this is stated in the rule title and description. The reason there is a pointer example is that case might be less obvious from the title and description.",
      "@hsutter OK, no problem, thanks for reviewing my pull request!\r\n\r\nThere are still lots of `x == true` cases at GitHub, looking at https://github.com/search?q=%22%3D%3D+true%22++language%3AC%2B%2B&type=code&ref=advsearch  But I guess my proposed wording would not have chased them away, anyway 🤷  "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739818912b45d36991ee",
    "number": 2179,
    "body": "This rule is about \"don’t use [=] default capture\". It is stated in the synopsis but also in the enforcement. The description contains an example that contains two comments that are about something else, forbidding other constructs as well:\r\n\r\n // [&] has identical semantics and copies the this pointer under the current rules\r\n // [=,this] and [&,this] are not much better, and confusing\r\n\r\nC++ core guideline rules should have all one clear purpose. So if this is really important extra info, I suggest to create a separate rule for this. The comments that are removed avoid questions that I get about this rule.",
    "head_branch": "pauljansen42-patch-2076",
    "is_a_fork": true,
    "comments": [
      "Agree.  I don't think those lines add any thing to the rule",
      "The rule under discussion, F.54, starts stating that its reason is that \"using `[=]` default capture\" is confusing in this case.\r\n\r\nThe comments in the source code example could be helpful documentation because they describe lambda captures.\r\n\r\nIn case there's interest in continuing the discussion, may I ask what is confusing about the comments?\r\n\r\n",
      "Thanks for asking. The extra comments haven't got anything to do with the rule description. The rule synopsis states \"Don't use A\", in the comments it is stated \"Using B is not much better\" and \"Using C is not much better either\". But the rule is not about B or C. There are 3 possibilities:\r\n\r\n1. Remove the comments about B and C (my proposal)\r\n2. Extend rule F.54 to forbid B and C as well\r\n3. Create new rules for B and C\r\n",
      "Editors call: Thanks! We agree the comment could be a distraction."
    ],
    "commit_messages": [
      "Removed confusing comments (#2076) (#2179)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739918912b45d36991ef",
    "number": 2175,
    "body": "I've found this to be much more legible:\r\n```cpp\r\nauto x = std::invoke([&] { \r\n   ...\r\n});\r\n```\r\nrather than \r\n```cpp\r\nauto x = [&] {\r\n    ...\r\n}();\r\n```\r\nbecause the prior makes it obvious that `x` is the result not the lambda itself. I'm curious what you think.",
    "head_branch": "ES.28-use-std-invoke",
    "is_a_fork": true,
    "comments": [
      "Unfortunately this will run a little slower and compile much slower. I don't think it's a good idea to promote this as the default way to income things that are already directly invocable, like lambdas.\r\n\r\nMaybe one day all compilers will implement std::invoke with compiler intrinsics that remove the overhead.",
      "This was suggested previously in #898 (though @jwakely 's counterpoints here weren't mentioned there and are, in my opinion, a lot more compelling than the reasons used in #898)",
      "> This was suggested previously in #898 (though @jwakely 's counterpoints here weren't mentioned there and are, in my opinion, a lot more compelling than the reasons used in #898)\r\n\r\nCompiler vendors would be a lot more prone to implement an intrinsic if `std::invoke` were used more, no? To me this is all about readability and the performance aspects are QoI issues. The quality of implementation isn’t that problematic and if it is, that’s the compiler’s fault.",
      "> Compiler vendors would be a lot more prone to implement an intrinsic if `std::invoke` were used more, no?\r\n\r\n`std::invoke` is used extensively throughout `<ranges>`, any additional uses from immediately-invoked lambdas will be a drop in the ocean compared to that, and unlikely to move the needle in terms of whether an intrinsic is desirable or not.\r\n\r\n(So arguably, it won't hurt to use it for immediately-invoked lambdas ... although code bases that don't use `<ranges>` might notice the impact sooner.)\r\n\r\nStill, it feels like you're saying \"I don't care if this redundant syntactic sugar I'm using is slower, that's somebody else's problem\". There's an abstraction penalty for using `std::invoke`, and it doesn't even do anything that the original code can't do, it just looks different.",
      "You could always just do:\r\n\r\n```c++\r\nauto x = /* invoked */ [&] {\r\n    ...\r\n}();\r\n```\r\n\r\ninstead :smiley: ",
      "Well, I think @feroldi was onto something. Seven years later and I still find `auto x = [&] { …` to read like a garden-path sentence. Good point that `<ranges>` puts pressure on `std::invoke` performance, so perf probably isn’t an issue. And to be clear, I’m not saying “perf be damned”, I’m saying for me “clarity is paramount”.\r\n\r\nFeel free to close if the editors don’t want to encourage this pattern.",
      "> You could always just do:\r\n> \r\n> ```c++\r\n> auto x = /* invoked */ [&] {\r\n>     ...\r\n> }();\r\n> ```\r\n> \r\n> instead 😃\r\n\r\nYou could, but comments are a code smell: better to spell it in C++ than in comments, IMO.",
      "FWIW I don't hate the suggestion, I'm just cautious about recommending it when there's a cost. For some people, the improved readability is worth the cost. But not everybody, so some people will consider that to be bad advice (and they'll misquote \"you don't pay for what you don't use\" in another inappropriate context :wink:).",
      "I understand why the prefix syntax might be preferred, but as a library feature std::invoke IMHO carries too many small drawbacks. \r\n- I need to include the appropriate header\r\n- it comes with a compile time cost and potentially even with a runtime cost.\r\n-  for an inexperienced reader, it is one more thing they might have to look up to learn the exact semantics.\r\n- IIRC it isn't available prior to c++17 and only became constexpr in 20.\r\n- the additional level(s) of indirection potentially make compiler errors less readable and debugging /reading stack traces a tad more annoying.\r\n\r\nAnd that's just from the top of my head. None of this is a deal breaker and if you consider it a net-win, good for you. But it shows that it isn't a strict improvement over the language solution (actually a nice example, why I find it so annoying, when functionality is shoved into the standard library instead of into the language).\r\n\r\nBtw : not sure, if it would make a difference here, but when discussing readability questions, the first question coming to my mind is usually: what does this look like in real code , when function bodies are not elided and the functions/type/variables do not have placeholder names like foo/bar/widget/x/y/z, but meaningful names instead.\r\n",
      "7 years later, I don't agree with my own suggestion anymore.",
      "> 7 years later, I don't agree with my own suggestion anymore.\r\n\r\n@feroldi Interesting. Care to elaborate?",
      "> Compiler vendors would be a lot more prone to implement an intrinsic if `std::invoke` were used more, no? To me this is all about readability and the performance aspects are QoI issues. The quality of implementation isn’t that problematic and if it is, that’s the compiler’s fault.\r\n\r\nJoining in late, just in case there might still be interest continue aligning, Following-up to OP: I can understand that `std::invoke` can be more readable than the trailing `()` as they are more characters and in English. Plus, the trailing parentheses can be elusive. However, why would either of them be a choice when prioritizing expressiveness; isn't a traditional function definition together with a call to it more readable?\r\n\r\nAnother just in case, for the record, I like using Lambdas, just following along the readability argument in this issue.\r\n\r\n",
      "> > Compiler vendors would be a lot more prone to implement an intrinsic if `std::invoke` were used more, no? To me this is all about readability and the performance aspects are QoI issues. The quality of implementation isn’t that problematic and if it is, that’s the compiler’s fault.\r\n> \r\n> Joining in late, just in case there might still be interest continue aligning, Following-up to OP: I can understand that `std::invoke` can be more readable than the trailing `()` as they are more characters and in English. Plus, the trailing parentheses can be elusive. However, why would either of them be a choice when prioritizing expressiveness; isn't a traditional function definition together with a call to it more readable?\r\n> \r\n> Another just in case, for the record, I like using Lambdas, just following along the readability argument in this issue.\r\n\r\nTo be clear, I think IILs are useful but a code smell — not necessarily a problem, but they suggest there may be more work to do to clean things up, like writing a named factory function. I. That sense I see `std::invoke` over `()` as like `static_cast<int>` over `(int)`, but more so in that the parens could be many lines down.",
      "Editors call: Thanks! We see the potential benefit but there is a drawback to compile time as well. We think the style as recommended is clearer and direct."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739a18912b45d36991f0",
    "number": 2173,
    "body": "The placeholder link should lead to #Rp-leak.",
    "head_branch": "Rr-ptr",
    "is_a_fork": true,
    "comments": [
      "I think the change looks good and I just tested navigating.\r\n\r\nAs a minor, potentially rather nitpicking follow-up, would it be possible to fix the typo in the modified line; for example editing \"suffering from the problem from\" to \"suffering from the problem of\"?",
      "Of course."
    ],
    "commit_messages": [
      "R.3: Fill in placeholder link (#2173)\n\n* fill in placeholder link\r\n\r\n* fixed a typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739b18912b45d36991f1",
    "number": 2172,
    "body": "Closes #2170",
    "head_branch": "2170-hs",
    "is_a_fork": false,
    "comments": [
      "Re expensive to copy: Right, this assumes that we know we want to make a copy, to the programmer has already taken that into account.",
      "Editors call: Approved."
    ],
    "commit_messages": [
      "Add \"take a copy for immediate local use\" case to F.16 (#2172)\n\nCloses #2170"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739c18912b45d36991f2",
    "number": 2168,
    "body": "The second ES.87 example seemed to mistakenly assume that `Circle` is pointer type, by the way it was using `dynamic_cast`. However, `Circle` is meant to be a class type instead. This fix is consistent with other examples, that also do `dynamic_cast<Circle*>`.",
    "head_branch": "ES.87-dynamic_cast-to-Circle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ES.87 (redundant `==` or `!=`) Fix dynamic_cast to Circle pointer (#2168)\n\nThe second ES.87 example seemed to mistakenly assume that `Circle` is pointer type, by the way it was using `dynamic_cast`. However, `Circle` is meant to be a class type instead. This fix is consistent with other examples, that also do `dynamic_cast<Circle*>`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739d18912b45d36991f3",
    "number": 2166,
    "body": "This PR overhauls and modernizes the current advice. In short, we should not recommend returning `pair` or `tuple`.\r\n\r\n## Rationale\r\n\r\n### 1. Modern C++ has excellent support for `struct`\r\n\r\nC++20 has added `operator<=> = default` eliminates practically all uses of `std::pair`. Furthermore, it has made direct-initialization of aggregate types possible, so that `struct`s can be used with `emplace`, taking away even more reasons to use `std::pair`.\r\n\r\n`struct` also supports aggregate initialization with designated initializers, unlike `std::pair` and `std::tuple`, which aren't aggregates.\r\n\r\n### 2. `std::pair` and `std::tuple` are bad for code quality\r\n\r\n`std::pair` hurts code quality. Replacing meaningful member names with `first` and `second` is strictly worse. The few cases where there is no meaningful name are usually homogeneous cases (e.g. `std::minmax` could return `std::array<T, 2>`).\r\n\r\nConsensus in the C++ community has overwhelmingly shifted against the use of `std::pair` or `std::tuple`:\r\n- `std::minmax` returned `std::pair` but `std::ranges::minmax` return `std::ranges::min_max_result`.\r\n- `std::from_chars` returns `std::from_chars_result`.\r\n- ...\r\n\r\n`std::tuple` is even worse because it forces the user to access members with `std::get<N>` which is even more confusing than `.first` and `.second`, and tremendously more confusing than `.meaningful_name`. `std::tuple` is only useful in variadic templates. This exception is left in the guideline.\r\n\r\n### 3. `std::pair` and `std::tuple` have legacy baggage\r\n\r\n `std::pair` is an incredibly bloated type for what it does. It has 11 constructors while providing relatively little value in most of its uses. `std::tuple` has 28 constructors.\r\n\r\nFurthermore, `std:tuple` is not ABI-trivial in libstdc++, which results in `std::tuple<int>` being passed via stack and not via register. Overall, a simple `struct` can be a major boost to compilation speed and even runtime performance.\r\n\r\n### 4. Almost no return type *obviously* meets the requirement in the old guideline\r\n\r\nThe old wording states:\r\n> The overly-generic `pair` and `tuple` should be used only when the value returned represents independent entities rather than an abstraction.\r\n\r\nAlmost no function *obviously* meets this hurdle. `std::minmax` doesn't because it returns a one-dimensional range, specified by a minimum and maximum, not two entirely independent entities. `std::from_chars` doesn't because it returns a pre-C++23 `std::expected`-like type. In general, pairs where one member indicates success are abstracted by an optional/expected value.\r\n\r\nI find this guideline wishy washy because you can almost always argue that the two entities are not independent, or the other way.\r\n\r\nThe only example in the standard library I can think of where `std::pair` clearly makes sense is key/value pairs in `std::map, since the key and value can be accessed and used independently, other than being located in the same data structure. Even so, I'm sure you'll find someone who would argue they are not two independent entities.\r\n\r\n### 5. `std::tie` is often bad practice\r\n\r\nThe current guideline contains the positive example:\r\n> ```cpp\r\n> Sometype iter;                                // default initialize if we haven't already\r\n> Someothertype success;                        // used these variables for some other purpose\r\n> \r\n> tie(iter, success) = my_set.insert(\"Hello\");   // normal return value\r\n> if (success) do_something_with(iter);\r\n> ```\r\n\r\nThis is bad because\r\n1. the advice conflicts with [C.49: Prefer initialization to assignment in constructors](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-initialize) (this is not a constructor, but the same rationale applies)\r\n2. this advice conflicts with [Con.1: By default, make objects immutable](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-immutable) (the result could easily be immutable, but late-initialization through `std::tie`-assignment prevents this)\r\n3. this advice (at least in this style) conflicts with [ES.20: Always initialize an object](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-always) (assuming `Someothertype` is meant to be `bool`-like)\r\n4. structured bindings have largely obsoleted this practice\r\n\r\n`std::tie` still has a small handful of uses, but most have been replaced by\r\n- structured bindings (C++17)\r\n- defaulted comparisons (C++20)\r\n\r\n`std::tie` is more of a historical relic and increasingly niche utility, rather than something we need to recommend in this guideline, especially if what we're recommend is bad practice that conflicts with other rules.",
    "head_branch": "dont-return-tuple",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! We're favorable to removing the suggestion to use `tuple`, but the changes here are more extensive than that. In particular, we would like not to delete the existing Note about `Distance` example, and not add the new Note about `expected`. Can this be tightened up to just remove `tuple` as a return type on the grounds that it is hard to use (has anonymous members etc.)?",
      "@hsutter I have mostly kept the old note, but with some modernizing changes now. The old note also mentioned a \"`variant<T, error_code>` type, which I have modernized to `optional<T>` or `expected<T, error_code>`, and removed the new note.\r\n\r\nIs this a good compromise?\r\n\r\nThe current build fails because of a spell check in some part I haven't touched.",
      "Interim ack: Thanks! This looks much better. I fixed the spell check issue.",
      "> `std::from_chars` doesn't because it returns a pre-C++23 `std::expected`-like type.\r\n\r\nAs I noted in [P2497R0](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2497r0.html#Something-something--3c-code-3e-std::expected-3c--2f-code-3e-), it's not an expected-like type, because both members have meaning in the error case. It's not a sum type, it's a product type.\r\n\r\nThe reason it's a named struct not a pair is for the reasons you've given elsewhere in the PR why `pair` would be a worse choice, but it's not because `pair` _couldn't_ have been used. The rationale is given in [P0067R5](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r5.html).",
      "Thanks!"
    ],
    "commit_messages": [
      "F.21 Don't return tuples (#2166)\n\n* F.21 don't return tuples\r\n\r\n* F.21 implement Herb's suggestions\r\n\r\n* Mini-rebase for spell check fix\r\n\r\n* elaborate on optional/expected\r\n\r\nCo-authored-by: Jonathan Wakely <github@kayari.org>\r\n\r\n* improve wording in one sentence\r\n\r\nCo-authored-by: Jonathan Wakely <github@kayari.org>\r\n\r\n* fix incorrect code transformation\r\n\r\nCo-authored-by: Jonathan Wakely <github@kayari.org>\r\n\r\n* fix missing word\r\n\r\n---------\r\n\r\nCo-authored-by: Herb Sutter <herb.sutter@gmail.com>\r\nCo-authored-by: Jonathan Wakely <github@kayari.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739e18912b45d36991f4",
    "number": 2161,
    "body": "The term _default member initializer_ is used in later standard revisions (via [P0134R0](https://wg21.link/p0134r0)), and I think it's clearer to use that term instead of \"in-class (member) initializer\".\r\n\r\nThe anchor (`#Rc-in-class-initializer`) is unchanged for the sake of stability of links.",
    "head_branch": "default-member-initializer",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Use the term \"default member initializer\" (#2161)\n\nwithout changing the anchor."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620739f18912b45d36991f5",
    "number": 2158,
    "body": null,
    "head_branch": "typos",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Fix typos (#2158)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a018912b45d36991f6",
    "number": 2156,
    "body": "GSL.owner link was missing the section title in the link. All other GSL links have section titles in them.",
    "head_branch": "gsl-owner-link",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "added missing title to GSL.owner link (#2156)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a218912b45d36991f7",
    "number": 2151,
    "body": "C.65 requires move assignment to be safe for self-assignment. The given example is not safe for self-assignment as given right now. This commit fixes this.\n",
    "head_branch": "move_self_assign",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Make example code adhere to C.65 (#2151)\n\nC.65 requires move assignment to be safe for self-assignment. The given example is not safe for self-assignment as given right now. This commit fixes this.\r\n\r\nCo-authored-by: Werner Henze <w.henze@avm.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a318912b45d36991f8",
    "number": 2150,
    "body": "The example suggests that `int z = gsl::narrow_cast<int>(7.9);;` is OK. The rule says \"Use `=` only when you are sure that there can be no narrowing conversions.\", which matches, but is also says \"For built-in arithmetic types, use `=` only with `auto`.\", and this is not respected here. So replace the one line with both possibilities suggested by the rule.\n",
    "head_branch": "es_23",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "ES.23: change example code to better match the rule (#2150)\n\nThe example suggests that `int z = gsl::narrow_cast<int>(7.9);;` is OK. The rule says \"Use `=` only when you are sure that there can be no narrowing conversions.\", which matches, but is also says \"For built-in arithmetic types, use `=` only with `auto`.\", and this is not respected here. So replace the one line with both possibilities suggested by the rule.\r\n\r\nCo-authored-by: Werner Henze <w.henze@avm.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a418912b45d36991f9",
    "number": 2149,
    "body": "add a new rule governing how to compose portable header path identifiers such that they respect proper casing (\\<vector\\>, not \\<VECTOR\\>) and portable path separators ('/' and not '\\\\')\r\n",
    "head_branch": "use-portable-header-identifiers",
    "is_a_fork": true,
    "comments": [
      "can someone help me fix the spelling warning? as far as I can tell it's complaining about the word \"utils\" appearing in code sample where \"utils\" already appears and possibly the only complaint is it appears in the comment of the code, which seems just way over done.",
      "> can someone help me fix the spelling warning? as far as I can tell it's complaining about the word \"utils\" appearing in code sample where \"utils\" already appears\r\n\r\nyes, it wants you to add 'utils' next to `util` to ./scripts/hunspell/isocpp.dic",
      "> > can someone help me fix the spelling warning? as far as I can tell it's complaining about the word \"utils\" appearing in code sample where \"utils\" already appears\r\n> \r\n> yes, it wants you to add 'utils' next to `util` to ./scripts/hunspell/isocpp.dic\r\n\r\nthanks, I guess if that's an indication util is the more normalized thing for \"utilities\" I'll probably just rename the example to use util",
      "I did some searching on the webs, I think practically people name these things \"utils\" but standard has:\r\nhttps://en.cppreference.com/w/cpp/header/utility\r\n\r\nso util it is",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Use portable header identifiers (#2149)\n\n* SF.13  Use portable header identifiers in `#include` statements\r\n\r\nadd a new rule governing how to compose portable header path identifiers such that they respect proper casing (<vector>, not <VECTOR>) and portable path separators ('/')\r\n\r\n* anchor\r\n\r\n* fix typos\r\n\r\n* fix warnings\r\n\r\n* nit\r\n\r\n* nit\r\n\r\n* nit\r\n\r\n* normalize on 'util'\r\n\r\n* clean up wording\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\n---------\r\n\r\nCo-authored-by: Herb Sutter <herb.sutter@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a518912b45d36991fa",
    "number": 2148,
    "body": "I just tried building the core guidelines for the first time, and got a `DeprecationWarning`.\r\n\r\n```\r\n./python/md-split.py:13: DeprecationWarning: 'cgi' is deprecated and slated for removal in Python 3.13\r\n  import re, cgi\r\n```\r\n\r\nThis package is imported but seems completely unused in the script. This removes the import.\r\n\r\nEDIT: I do not have commit access, please accept and ship.",
    "head_branch": "fix-cgi-deprecation-warning",
    "is_a_fork": true,
    "comments": [
      "Editors: Thanks!"
    ],
    "commit_messages": [
      "Fix DeprecationWarning for cgi package (#2148)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a618912b45d36991fb",
    "number": 2146,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "This is not an improvement."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a718912b45d36991fc",
    "number": 2143,
    "body": "The example should be passing in a constexpr and validating it at compile time like a macro, but instead passes a unknown value at compile time. Which may cause mislead and the code doesn't even work.\r\n\r\nRef: #2136",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Editors call: We agree the example is incorrect and want to adjust the proposed solution.",
      "Let me know if there's any change needed in the pull request, thanks!",
      "I think the main reaction was that use of numbers made it harder to quickly grasp and the out-of-range constant was distracting, how about make it go like this:\r\n```\r\n        string s1 = stringify<a>(); \r\n        string s2 = stringify<b>(); \r\n```\r\n",
      "Sure! The change is done in the latest commit.",
      "thanks. lgtm"
    ],
    "commit_messages": [
      "ES.30 fix example code (#2143)\n\n* ES.30 fix example code \r\n\r\nThe example should be passing in a constexpr and validating it at compile time like a macro, but instead passes a unknown value at compile time. Which may cause mislead and the code doesn't even work.\r\n\r\nRef: #2136\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\nUsed enums instead of raw numbers."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a818912b45d36991fd",
    "number": 2141,
    "body": "to mimic the previous examples and avoid an infinite loop.",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "F.21 add loop increment in bad example (#2141)\n\nto mimic the previous examples and avoid an infinite loop."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073a918912b45d36991fe",
    "number": 2140,
    "body": "to signal that they will not modified",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thank you!"
    ],
    "commit_messages": [
      "I.30: use const c-string to pass filename and input string in example (#2140)\n\nto signal that they will not modified"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073aa18912b45d36991ff",
    "number": 2139,
    "body": "use a const string as mentioned in the text",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "I.12: use a const string as mentioned in the text"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ab18912b45d3699200",
    "number": 2138,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks, but everyone will likely want to ignore different files, so these changes are best made in your own branch/fork. Thanks though!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ac18912b45d3699201",
    "number": 2137,
    "body": "The original text was \"If the `new` and the `delete` are in the same scope, mistakes can be flagged.\" This has been [misinterpreted](https://stackoverflow.com/q/75905524) to mean \"Any `new` and `delete` in the same scope is a mistake and should be flagged.\"\r\n\r\nReword the Enforcement clauses to follow the pattern established by the other Enforcement clauses: \"Flag (bad thing)\". Also, call the issue a \"mismatch\" rather than a \"mistake\", so that it is more clear that the underlying issue is the mismatch between scalar and array new/deletion.",
    "head_branch": "ES.61-wording",
    "is_a_fork": true,
    "comments": [
      "@cubbimew Sorry, I'm new to this repo. I can't merge this PR myself (no permission). Is there something more I need to do to get this merged in?",
      "Thanks, Raymond! Sorry for the lag."
    ],
    "commit_messages": [
      "ES.61 clarify wording (#2137)\n\nThe original text was \"If the `new` and the `delete` are in the same scope, mistakes can be flagged.\" This has been [misinterpreted](https://stackoverflow.com/q/75905524) to mean \"Any `new` and `delete` in the same scope is a mistake and should be flagged.\"\r\n\r\nReword the Enforcement clauses to follow the pattern established by the other Enforcement clauses: \"Flag (bad thing)\". Also, call the issue a \"mismatch\" rather than a \"mistake\", so that it is more clear that the underlying issue is the mismatch between scalar and array new/deletion."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ae18912b45d3699202",
    "number": 2131,
    "body": "I feel like the current suggestion just reads like a stylistic recommendation.\r\n\r\nIn reality, your code might fail to compile, or it could be IFNDR if you use one of those reserved names. There should be at least a little bit of rationale, and leading underscores should also be banned.\r\n\r\nTechnically, leading underscores aren't always reserved, but it's difficult to memorize all the rules, and it's easy to be safe by just banning them.",
    "head_branch": "patch-13",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! Merged with friendly amendments."
    ],
    "commit_messages": [
      "NL.8: elaborate on reserved identifiers (#2131)\n\n* NL.8: elaborate on reserved identifiers\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\n---------\r\n\r\nCo-authored-by: Herb Sutter <herb.sutter@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073af18912b45d3699203",
    "number": 2130,
    "body": null,
    "head_branch": "fix-nl9-use-all_caps-for-macro-names-only",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "fix NL.9 ALL_CAPS does not apply to non-macro symbolic constants (#2130)\n\n* fix NL.9 ALL_CAPS does not apply to non-macro symbolic constants\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\nfix according to comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b018912b45d3699204",
    "number": 2129,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Spam",
      "Okay"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b118912b45d3699205",
    "number": 2128,
    "body": "why not use the \"const char * is\" previously declared (even if it is the bad example)?",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "yes, it was probably intended to be used"
    ],
    "commit_messages": [
      "ES.34: use the previously declared \"const char * is\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b218912b45d3699206",
    "number": 2127,
    "body": "small typo",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "not a typo, the Y here is capitalized because it's what makes up the (intentionally grotesque) acronym"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b318912b45d3699207",
    "number": 2125,
    "body": "Corrected an auto return type to void",
    "head_branch": "F_3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "F_3 void auto (#2125)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b418912b45d3699208",
    "number": 2122,
    "body": "Found small typo in Dual hierarchy example chapter.",
    "head_branch": "dual_hierarchy_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "dual hierarchy example: interface hierarchies fix (#2122)\n\nCo-authored-by: Mikhail Berezhanov <mpb@martistel.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b518912b45d3699209",
    "number": 2120,
    "body": "The C++20 standard has officially deprecated the *PODType* named requirement, and the `std::is_pod` type trait. These terms have been superseded by C++11 *TrivialType*, *TriviallyCopyable*, *StandardLayout*, *ScalarType*, and appropriate type traits to test for these requirements.\r\n\r\nWith the term now being more than 10 years out-of-date, and learning resources rarely mentioning it, POD should be modernized in CppCopreGuidelines.\r\n\r\nMost changes are benign, but T.65 needs to be updated substantially to use modern types and traits. Also note that the change replaces the exposition-only `Value_type` trait with the concrete C++20 `std::iter_value_t` trait, among other changes which shift the assumed standard to C++20 in the test.",
    "head_branch": "master-1",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Modernize uses of POD types (#2120)\n\n* modernize uses of POD types\r\n\r\n* update isocpp.dic"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b618912b45d369920a",
    "number": 2117,
    "body": null,
    "head_branch": "C_181",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.181 Fix missing type specifier (#2117)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b718912b45d369920b",
    "number": 2116,
    "body": null,
    "head_branch": "C_146",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix variable name in example (#2116)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b818912b45d369920c",
    "number": 2114,
    "body": "Update for Issue #1905",
    "head_branch": "C_1",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Con.1 Issue #1905 Return local const (#2114)\n\n* Con.1 const return\r\n\r\n* minor"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073b918912b45d369920d",
    "number": 2113,
    "body": "suffixes without underscore are reserved for future standardization",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "sorry, hadn't known of std::chrono::duration :-("
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ba18912b45d369920e",
    "number": 2104,
    "body": null,
    "head_branch": "patch-12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix stray inline link (#2104)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073bb18912b45d369920f",
    "number": 2102,
    "body": "According to [C.66: Make move operations noexcept](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c66-make-move-operations-noexcept), move operations should generally be `noexcept`.\r\n\r\nThis must have been forgotten by authors in a few cases, and this PR adds the missing `noexcept` specifiers.",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix missing noexcept specifiers (#2102)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073bc18912b45d3699210",
    "number": 2101,
    "body": "There cannot be a mismatch between the exception specification of a declaration and definition. The example in its current form fails to compile.",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix ill-formed example C.65 (missing noexcept on declaration) (#2101)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073be18912b45d3699211",
    "number": 2100,
    "body": "> With guaranteed copy elision, it is now almost always a pessimization to expressly use `std::move` in a return statement.\r\n\r\nThe reasoning in **F.48** is misleading because it only refers to *guaranteed* copy elision, but the example listed underneath shows NRVO, for which this elision is *not guaranteed*.\r\n\r\nI think it the reasoning is much better if it is made clear to the reader that a return statement will always move local variables. It is also helpful to distinguish between RVO and NRVO in the example, as the two have optimization differences.",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! We like the PR with Sergey's suggested change, Sergey please make it and merge."
    ],
    "commit_messages": [
      "Improve reasoning and examples for F.48 (#2100)\n\n* fix incorrect reason for F.48\r\n\r\n* distinguish rvo and nrvo\r\n\r\n* the issue is about local, so limiting example to local\r\n\r\n---------\r\n\r\nCo-authored-by: Sergey Zubkov <cubbi@cubbi.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073bf18912b45d3699212",
    "number": 2098,
    "body": "This document conventionally uses spaces around operators, and spaces at the beginning and end of a brace-enclosed list. This PR adds these spaces in places where they were missing.",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "add spaces in requires expressions (#2098)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c018912b45d3699213",
    "number": 2097,
    "body": null,
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix missing return *this (#2097)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c118912b45d3699214",
    "number": 2096,
    "body": "This PR fixes multiple issues with the example code:\r\n\r\n- The previous example was leaking the resource `elem`, which is presumably heap-allocated. While correct resource-management is not subject of this example, it is still a bug which shouldn't be included.\r\n- In the move constructor, the members `a.sz` and `a.elem` were assigned in the opposite order in which they are declared. This is not incorrect, just annoying.\r\n- The move assignment operator failed to `return *this;`, leading to undefined behavior. No indication was made that code was missing, e.g. using `/* ... */`.",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix memory leak in example of C.66 (#2096)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c218912b45d3699215",
    "number": 2092,
    "body": "The function:\r\n```cpp\r\ntemplate<class F, class... Args>\r\ninline auto invoke(F f, Args&&... args)\r\n{\r\n    return f(forward<Args>(args)...);\r\n}\r\n```\r\nshould have a forwarded parameter `F`, because it is demonstrates the example prose much better, and is also \"more correct\".\r\n\r\n> Usually you forward the entire parameter (or parameter pack, using `...`) exactly once on every static control flow path\r\n\r\n`f` is being used exactly once in this function, so it only makes sense to use perfect forwarding here, and to `forward` it when it is called. Forwarding function objects has the benefit that any rvalue overloads of the call operator are going to be called.\r\n\r\nFurthermore, using `auto` as a return type seems wrong, because it results in unnecessary copies if `f` returns an lvalue-reference, and unnecessary moves if `f` returns an rvalue-reference. If `f` returns a reference, so should the `invoke` wrapper.\r\n\r\nYou can find a very similar function the one I have suggested at [`std::apply` on cppreference](https://en.cppreference.com/w/cpp/utility/apply)",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "fix missing forward for function object parameter (#2092)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c318912b45d3699216",
    "number": 2091,
    "body": "This PR removes a stray ellipsis where the author clearly didn't intend to use a parameter pack.\r\n\r\nThe code is ill-formed without this fix.",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix stray ellipsis (#2091)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c418912b45d3699217",
    "number": 2089,
    "body": "Both going past a minimum and maximum are called *\"overflow\"*. The term *\"underflow\"* refers to when a floating-point number is decreased so much in magnitude that its value becomes zero due to lack of precision.\r\n\r\nIt is a common misunderstanding that *\"underflow\"* refers to overflow when decrementing.\r\n\r\n*See also: [Wikipedia article on arithmetic underflow](https://en.wikipedia.org/wiki/Arithmetic_underflow)*",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "\"Underflow\" is used in other contexts (stack underflow etc)\r\n\r\nES.104 is about integer underflow - even if we're going by wikipedia definitions, https://en.wikipedia.org/wiki/Integer_overflow says that term is used and discusses its meaning.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c518912b45d3699218",
    "number": 2088,
    "body": "This PR does what the title says. Spelling [modular arithmetic](https://en.wikipedia.org/wiki/Modular_arithmetic) as *\"modulo arithmetic\"* is so unusual that Google searches offer a correction:\r\n\r\n> Including results for *modular arithmetic*",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "The term is not unusual; google scholar lists 5,680 papers using \"modulo arithmetic\" vs 23,000 papers using \"modular arithmetic\"\r\n\r\n(general google search is a bit more skewed towards modular: 77k vs 644k)\r\n",
      "> The term is not unusual; google scholar lists 5,680 papers using \"modulo arithmetic\" vs 23,000 papers using \"modular arithmetic\"\r\n> \r\n> (general google search is a bit more skewed towards modular: 77k vs 644k)\r\n\r\nIt's good to know that the spelling isn't totally unusual. I've just been surprised by it because I've seen it here for the first time, and the C++ standard also refers to it as modular arithmetic.\r\n\r\nEven if it's not the only possible spelling, it would be less surprising to readers to implement the more common spelling, and it may improve search engine discoverability."
    ],
    "commit_messages": [
      "replace \"modulo arithmetic\" with \"modular arithmetic\" (#2088)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c618912b45d3699219",
    "number": 2087,
    "body": "This PR implements #1191.\r\n\r\nThe colloquial term *\"member variable\"* is replaced with either:\r\n- the C++ standardese term *\"data member\"*\r\n- just *\"reference member*\",  in the case of *\"reference member variable\"*, a wording choice that is usually made in the C++ standard\r\n\r\nIt would be even less ambiguous to say *\"static data member\"* or *\"non-static data member\"*, but this is very verbose and the reader can contextually understand whether non-static members are referred to.\r\nFor example, when we write:\r\n> If a destructor is modifying a data member\r\n\r\nThis almost certainly doesn't refer to static data members, because it is impossible to initialize them in the constructor (unless lifetimes are managed explicitly).\r\n\r\nWhile many C++ developers understand what a *\"member variable\"* is, it:\r\n- can't be found anywhere in the C++ standard, making it more or less colloquial\r\n- causes needless inconsistency with the term *\"data member\"*, which is also used in this document\r\n- has already sparked discussions such as #2078",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "The referenced discussion (#2078) doesn't seem to be much of a discussion with many commentators - it's three people, one of which asked the question and two of which (myself included) provided responses; both of which are more or less in agreement.\n\nI'm not sure the request here really clarifies much if anything. When referencing classes `memeber variable` is probably more clear than `data member` in most circumstances. If anything the C++ standard should be updated to reflect the community.\n\nFWIW - my :-1: is not so much opposition to the change itself, but the reasoning behind the change as the term `member variable` has a long history within the C and C++ communities.",
      "> I'm not sure the request here really clarifies much if anything. When referencing classes `memeber variable` is probably more clear than `data member` in most circumstances. If anything the C++ standard should be updated to reflect the community.\r\n\r\nThat's just your personal opinion. At the end of the day, cppreference, most StackOverflow questions, the C++ standard, most C++ books, etc. all use the term \"data member\". It is the *correct* term, whether you personally prefer it or not.\r\n\r\nWhether the guidelines should be using *data member* or *member variable* is one question, another one is: should they be using the same term consistently in the whole document? The answer is obviously yes, and this PR adds that consistency. If you dislike the use of the term *data member* and want it changed to *member variable*, why don't you just make another PR that implements that throughout the document? For now, let's just be consistent. ",
      "Whatever decision we take, I think it is important to not use the word \"variable\" in the term we use to describe a _non syatic data member_. The term _variable_ has already a meaning defined in the standard. Briefly, it is the _name_ of an object or reference. But a non static data member declaration does not define an object. The distinction is important because most guidelines that would apply to objects or variables do not apply to non static data members and vice versa. In particular, regarding the use of const qualifier in the declarations: non static data members should never be declared const, but variables/objects declarations may favor the const qualifier depending on circumstances.",
      "The referenced discussion (https://github.com/isocpp/CppCoreGuidelines/issues/2078) suggests using *non-static* data member, whereas this change only renamed to data member.",
      "> The referenced discussion (#2078) suggests using _non-static_ data member, whereas this change only renamed to data member.\r\n\r\nThat's a separate issue and a shortcoming of the original text. You would also need to disambiguate between\r\n- *static member variables*\r\n- *non-static member variables*\r\n\r\nbut this wasn't done because people sort of assume that \"data member\" or \"member variable\" refer to non-static, unless otherwise stated. I personally think it's fine to keep it this way as well. I'd be equally fine disambiguating it everywhere.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "#1191 replace member variable with data member (#2087)\n\nCo-authored-by: Herb Sutter <herb.sutter@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c718912b45d369921a",
    "number": 2085,
    "body": "This language matches that of the paragraph a few lines above",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "yes, better that it matches the few lines above"
    ],
    "commit_messages": [
      "C++20 is more up to date than C++17 (#2085)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c818912b45d369921b",
    "number": 2075,
    "body": null,
    "head_branch": "what-to-do",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "remove redundant \"what to do\" (#2075)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073c918912b45d369921c",
    "number": 2068,
    "body": "Update CppCoreGuidelines.md\r\nchange Int --> int in P5 example.",
    "head_branch": "feature/fix-p5-Int",
    "is_a_fork": true,
    "comments": [
      "Seems like Int is used as a typedef."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ca18912b45d369921d",
    "number": 2065,
    "body": "Minor code change in Enum.4's example using a class enum over a \"plain\" enum as per Enum.3.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks."
    ],
    "commit_messages": [
      "Use enum class in Enum.4 example. (#2065)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073cb18912b45d369921e",
    "number": 2061,
    "body": "I feel like the original statement...\r\n\r\n> **Enforcement** Flag multiple `using namespace` directives for different namespaces in a single source file.\r\n\r\n\r\n...doesn't take into consideration that it can be okay to use multiple `using namespace` directives as long as they're in different scopes -- possibly within the same file.\r\n\r\nI propose the following alternative, which may better target the real culprit...\r\n\r\n> **Enforcement** Flag multiple `using namespace` directives for different namespaces in the same scope.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: We agree that Enforcement is not correct, and we prefer to remove it. The key Enforcement we must have is already in SF.7.",
      "Is using multiple different `using namespace` directives within the same (local) scope potentially dangerous?",
      "Not really. You might do that for convenience when using multiple libraries (e.g., `std` and `qt`), and you can always use `scope::` disambiguate a name in the rare case when there happens to be a collision.",
      "I feel like \"not really\" is a bit of a hand wavy answer?  What if the collision is subtle?  Isn't the \"rare case\" what the guidelines are to help avoid?  Are all compilers expected to catch (and at least warn about) such collisions?\r\n\r\n_(Sorry to continue commenting on this but it's now more than a year later and I still feel uncomfortable about it.)_\r\n",
      "Does it cause problems in practice? Not that I'm aware of. So it's not really a problem.\r\n\r\nIf you don't want to do it, don't do it. But I don't think it needs to be recommended against as a guideline.\r\n\r\nDo you have a concrete example of a subtle collision?",
      "As far as I know, compilers will report such collisions as an error.  (I'm just unsure if this is specified in the actual standard.)",
      "That's a bit hand wavy 😉 \r\n\r\nYes, the standard requires a diagnostic for ambiguous overloads.",
      "Pointing me to the specific section of the standard would be a lot less hand wavy, wouldn't it?  (I've tried searching it myself.)",
      "The specific section for what? You haven't actually said what your concern is. Just \"collisions\" and \"I feel uncomfortable\". \r\n\r\nAre you talking about collisions of type names? Functions? The rules are different because when name lookup finds multiple names for a function it forms an overload set, and then overload resolution applies.\r\n\r\nProbably what you want to search for is \"name lookup\", e.g. in [basic.lookup.general]:\r\n>  If the declarations found by name lookup all denote functions or function templates, the declarations are said to form an _overload set_. Otherwise, if the declarations found by name lookup do not all denote the same entity, they are ambiguous and the program is ill-formed.\r\n\r\nAnd \"overload resolution\", e.g. in [over.match.general]:\r\n>  If a best viable function exists and is unique, overload resolution succeeds and produces it as the result.\r\nOtherwise overload resolution fails and the invocation is ill-formed.\r\n\r\nThere's no problem when identical names are brought into scope by a using-directive, an ambiguity only happens if you try to actually use those names, so this is fine:\r\n\r\n```c++\r\nnamespace A {\r\n  struct S { };\r\n}\r\nnamespace B {\r\n  struct S { };\r\n}\r\n\r\nusing namespace A;\r\nusing namespace B;\r\n```\r\n\r\nBut writing `S s;` after that would be ill-formed, so you would have to write `A::S s;` or `B::S s;` as appropriate. Which is exactly what Herb said already.\r\n\r\nIf you have more concrete concerns, please spell them out. I'm not going to spend any more time quoting the standard and showing examples of actual working code to address vague unspecified concerns.",
      "I wasn't aware that \"typedef-name\" effectively represents all non-class, non-namespace identifiers (and not just `typedef`'s, per se) in the language standard.\r\n\r\nYou pretty much hit the nail on the head with what I was looking for but the standard seemed to leave me hanging.  I could _assume_ that \"ill-formed\" means the compiler must throw error or warning but I was curious if the behavior was actually required by the letter of the standard.  It turns out it is, as evidenced by the following redirections: \"ill-formed\" -> \"ill-formed program\" -> inversion of \"well-formed program\" -> a textual search for \"semantic rules\" -> reading down section 4.1.1 to arrive at (2.3)...\r\n\r\n> Otherwise, if a program contains a violation of any diagnosable rule or an occurrence of a construct\r\n> described in this document as “conditionally-supported” when the implementation does not support\r\n> that construct, a conforming implementation shall issue at least one diagnostic message.\r\n\r\nUltimately, I feel a better glossary, beyond the sparsely populated & vaguely defined \"Terms and definitions\" section, could really help disambiguate a lot of this for more casual readers, like myself.\r\n\r\n_Thank you both for all of your hard work & efforts toward this tremendous language._\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073cd18912b45d369921f",
    "number": 2055,
    "body": "Section C.21 shows a code example which typed\r\na class name in two different ways:\r\n\r\n- CloneableBase\r\n- ClonableBase\r\n\r\nIt is easy to overlook but it would not compile.\r\n\r\nMy commit prefers CloneableBase over ClonableBase and uses just that name then. I prefered CloneableBase because Java's SDK uses the same writing, so I guess this can be consired to be more widely used.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I searched all of github:\r\n\r\n* \"clonable\" has 322,754 code results\r\n* \"cloneable\" has 6,470,956 code results\r\n\r\nlooks like your guess was correct\r\n"
    ],
    "commit_messages": [
      "Fixed typo (#2055)\n\nSection C.21 shows a code example which typed\r\na class name in two different ways:\r\n\r\n- CloneableBase\r\n- ClonableBase\r\n\r\nIt is easy to overlook but it would not compile.\r\n\r\nMy commit prefers CloneableBase over ClonableBase and uses just that\r\nname then. I prefered CloneableBase because Java's SDK uses the same\r\nwriting, so I guess this can be consired to be more widely used."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ce18912b45d3699220",
    "number": 2053,
    "body": "The introduction of the method is needed, for instance, for constructions like std::is_abstract<AbstractBase>::value to be evaluated to true.\r\nAnother option is to make the destructor pure virtual as well (=0), but that would defeat the purpose of the explanation of having a default destructor for the class.\r\n\r\nSee example in compiler explorer: https://godbolt.org/z/z1Y6nG93q",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Abstract class needs at least one abstract method to be considered abstract (#2053)\n\nThe introduction of the method is needed, for instance, for constructions like std::is_abstract<AbstractBase>::value to be evaluated to true"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073cf18912b45d3699221",
    "number": 2051,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo (#2051)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d018912b45d3699222",
    "number": 2040,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix typo in code example in C.43 (#2040)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d118912b45d3699223",
    "number": 2038,
    "body": " * Standard library and GSL anchors do not work anymore.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "they should still work on gh-pages, but let's see"
    ],
    "commit_messages": [
      "Fix broken anchors (#2038)\n\n* Standard library and GSL anchors do not work anymore."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d218912b45d3699224",
    "number": 2037,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix minor typo in ES.59 (#2037)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d318912b45d3699225",
    "number": 2035,
    "body": "Fix typos when using names",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "```\r\nWarning: Spellcheck failed, fix words or add to dictionary:\r\nLine 1276: fprintf's -> printf's\r\nLine 20807: picture1 -> picture\r\n```"
    ],
    "commit_messages": [
      "Fix typos when using names (#2035)\n\n* Fix typos when using names\r\n\r\n* Update isocpp.dic"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d418912b45d3699226",
    "number": 2031,
    "body": "Add simple example",
    "head_branch": "SL_3",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "SL_3 'Do not add non-standard entities to namespace `std`' add example (#2031)\n\n* SL_3 add example\r\n\r\n* Update isocpp.dic\r\n\r\nadd My_Vector"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d518912b45d3699227",
    "number": 2030,
    "body": "Standard library and GSL anchors do not work anymore. ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d618912b45d3699228",
    "number": 2029,
    "body": "F.10: small code fix",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "yes, thanks"
    ],
    "commit_messages": [
      "F.10: small code fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d718912b45d3699229",
    "number": 2028,
    "body": null,
    "head_branch": "cp44-unnamed-lock",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "CP.44 improve example and add more accurate discussion (#2028)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d818912b45d369922a",
    "number": 2022,
    "body": "Fix minor typos",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "```\r\nWarning: Spellcheck failed, fix words or add to dictionary:\r\nLine 1073: tolower -> toLower\r\n```\r\nyou'll have to also update `scripts/hunspell/isocpp.dic`",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Fix minor typos (#2022)\n\n* Fix minor typos\r\n\r\nFix minor typos\r\n\r\n* Update isocpp.dic"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073d918912b45d369922b",
    "number": 2016,
    "body": "Opening to get a question answered, along with a possible editorial fix. The standard document does not refer to \"default capture,\" but always refers to \"capture-default\" (when referring to the language grammar). Is there a preferred way to say this? Would it be cleaner to stick to a single phrase, \"capture default\" as done in my PR here?\r\n\r\nNote: [cppreference](https://en.cppreference.com/w/cpp/language/lambda) uses \"capture default\" or \"capture-default\" in all places, although I will add that I [*just* changed](https://en.cppreference.com/mwiki/index.php?title=cpp%2Flanguage%2Flambda&diff=146169&oldid=145543) the lone occurrence of \"default capture\" to be consistent with the other 15 references on this page.",
    "head_branch": "capture-default",
    "is_a_fork": true,
    "comments": [
      "These are not precisely the same thing:\r\n`capture-default` is syntactic element of `lambda-capture` which is a syntactic element of `lambda-introducer`, etc.\r\n\"default capture\" is semantics; it is what the lambda in which `capture-default` appears does to variables that are used but aren't listed explicitly in the introducer.\r\n\r\nSpeaking for cppreference, some of us very much prefer using semantics over grammar productions unless talking about syntax, since our audience are programmers rather than compiler writers, but it's an endless tug-of-war with \"what's in the standard\" editors. Your edit was OK though, that bit was talking about the syntactic element.",
      "Thanks. It looks like the standard only ends up referring to the syntactic element.\r\n\r\nIn this PR, I think the one place that refers to the syntactic element is on line 4135 (the first reference): `Flag any lambda capture-list that specifies a default capture and also captures..` -> `capture-default`. Although, since this is a different document from the standard itself with a potentially different audience etc, I'll take your guidance on how to proceed.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Editorial - use \"capture default\" for syntactic element (#2016)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073db18912b45d369922c",
    "number": 2015,
    "body": null,
    "head_branch": "fix-non",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "non-built-in -> built-in (#2015)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073dc18912b45d369922d",
    "number": 2014,
    "body": null,
    "head_branch": "fix-space",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "R.33 add missing space in the title (#2014)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073dd18912b45d369922e",
    "number": 2010,
    "body": "Currently these guidelines conflict with R.34, R.35, and R.36.\r\n\r\nThis conflict has led to confusion, where it's unclear which guidelines to prefer for `shared_ptr` types.\r\n\r\nIn a [previous PR](https://github.com/isocpp/CppCoreGuidelines/pull/1989) I proposed preferring the \"F\" series of guidelines.  This PR takes the opposite approach and prefers the \"R\" guidelines for `shared_ptr` types.\r\n\r\nI don't feel strongly about which guidelines to prefer, I just want to make sure the guidelines are internally consistent.",
    "head_branch": "add-exceptions-to-f-15-18",
    "is_a_fork": true,
    "comments": [
      "> This conflict has led to confusion, where it's unclear which guidelines to prefer for `shared_ptr` types.\r\n\r\nIt seems pretty obvious to me that for `shared_ptr` you should follow the rule that is specifically referring to `shared_ptr`, not a more general rule that covers all types and doesn't mention `shared_ptr`.\r\n\r\nIf there's a real problem to be solved (which I'm not convinced about), rather than three additions, wouldn't it be simpler to just add a single note in R.34 saying that for `shared_ptr` this guideline overrides the more general rules?\r\n",
      "In a large document there’s much value in having the guidelines be “locally understandable” in the sense that developers are able to correctly follow a guideline after reading it.  Allowing guidelines to conflict harms this, since in that case one can only understand exceptions to the guideline after one has read every other guideline.\r\n\r\nSince this is a living document that changes over time, allowing conflicts means that changing or adding a guideline in one section could cause a change to the enforcement rules for a guideline in a totally different section.  Maintainers of tooling for a guideline-specific enforcement would then have to monitor the whole document for changes rather than just one guideline.\r\n\r\nIn this case the explicit exceptions required to make the guidelines non-conflicting are quite minor, so it seems worth it to me.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Add exceptions to F.15, F.16, and F.18 for `shared_ptr` types (#2010)\n\nCurrently these guidelines conflict with R.34, R.35, and R.36.\r\n\r\nThis conflict has led to confusion, where it's unclear which\r\nguidelines to prefer for `shared_ptr` types.\r\n\r\nIn a [previous\r\nPR](https://github.com/isocpp/CppCoreGuidelines/pull/1989) I proposed\r\npreferring the \"F\" series of guidelines.  This PR takes the opposite\r\napproach and prefers the \"R\" guidelines for `shared_ptr` types.\r\n\r\nI don't feel strongly about which guidelines to prefer, I just want to make\r\nsure the guidelines are internally consistent."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073de18912b45d369922f",
    "number": 2008,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! Yes, that's what we intended, thanks for the bug fix."
    ],
    "commit_messages": [
      "Clarify F.16 enforcement rule about passing by value (#2008)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073df18912b45d3699230",
    "number": 2004,
    "body": null,
    "head_branch": "fix-to-all",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! Yes, the double \"for all\" was intended but we see the point, it's hard to read without a comma. Will add a comma. Thanks again."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e018912b45d3699231",
    "number": 2002,
    "body": "by explicitly saying what should be done this rule should be easier to understand, especially for less experienced C++ developers.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e118912b45d3699232",
    "number": 2000,
    "body": "Extend Enum.7 `Note` section for #1977",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Extend \"when necessary\" explanation (#2000)\n\n* Extend \"when necessary\" explanation\r\n\r\n* Rephrase sentence"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e218912b45d3699233",
    "number": 1999,
    "body": "The code example is intended to show bad style, but it should not be utterly wrong.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "good catch, thanks"
    ],
    "commit_messages": [
      "ES.2: Fix wrong code logic in the example (#1999)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e318912b45d3699234",
    "number": 1995,
    "body": "- [x] Fix argument name in comment in example of Per.7\r\n- [x] Use the grammar checker of languagetool.org on chapter \"Per\" and improve it a little, mainly adding commas.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Per: fix some typos (#1995)\n\n* Per.7: fix typo in example\r\n* Per: improve grammar\r\n* Apply suggestions from code review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e418912b45d3699235",
    "number": 1994,
    "body": "pandoc failed to process it without the missing grave accent.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "SL.io.50: missing backticks (#1994)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e518912b45d3699236",
    "number": 1992,
    "body": "Simplified the example and clarified the enforcement to only apply for owning pointers.",
    "head_branch": "R_20",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks, this is a good improvement!"
    ],
    "commit_messages": [
      "R.20: 'represent ownership' clean up example and enforcement (#1992)\n\n* Clean up R.20 example; enforcement\r\n\r\n* Clarified enforcement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e618912b45d3699237",
    "number": 1991,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in SL.C.1 link title (#1991)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e718912b45d3699238",
    "number": 1989,
    "body": "As it stands now, to my understanding R.34 and R.36 conflict with F.16-F.18.\r\n\r\nR.34 suggests taking `shared_ptr` by value in a \"sink\" function, but F.18 mentions explicitly that these sort of functions should pass by `&&`, and specifically _not_ by value.  This is mentioned by @hsutter in [this comment](https://github.com/isocpp/CppCoreGuidelines/issues/1916#issuecomment-1183468209)\r\n\r\nSo, this PR attempts to resolve the conflict by preferring the \"F.16-F.18\" guidelines and attempting to modify the R guidelines to fit.\r\n\r\nThere are a number of other ways to avoid this conflict, for example we could explicitly state that `shared_ptr` is not subject to F.16-F.18 somewhere in those guidelines.  R.34 could also be made to fit if it were explicitly stated that `shared_ptr` be considered \"cheap to copy\", although I don't see how R.36 could be made to fit with F.16-F.18.\r\n\r\nI don't have any strong opinion on what the \"right\" resolution is here, but the fact that these two sets of guidelines seem to disagree has been a source of confusion.",
    "head_branch": "modify-r-34-to-conform-with-f-18",
    "is_a_fork": true,
    "comments": [
      "Any thoughts on how we might resolve this inconsistency in the guidelines?  Not having a clear recommendation for passing `shared_ptr` is a pretty acute pain point for those trying to use these guidelines.",
      "> There are a number of other ways to avoid this conflict, for example we could explicitly state that shared_ptr is not subject to F.16-F.18 somewhere in those guidelines.\r\n\r\nI think those guidelines could link to the R guidelines (r.34 in particular). And name them as an exception.  F 16-F18 describe the general case, R.34 a very specific case, where other considerations take precedence.",
      "> R.34 suggests taking shared_ptr by value in a \"sink\" function.\r\n\r\nWhere does [R.34](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-owner) talk about sink functions?",
      "I'll open a new PR preferring the \"R\" rules for `shared_ptr` types.",
      "opened https://github.com/isocpp/CppCoreGuidelines/pull/2010"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e818912b45d3699239",
    "number": 1986,
    "body": "Without having a `delete p2` statement at the end, the claim that \"the object pointed to by `p2` is leaked\" would just seem trivial.",
    "head_branch": "ES.24-delete-p2",
    "is_a_fork": true,
    "comments": [
      "fair point, yes"
    ],
    "commit_messages": [
      "ES.24 (Use a unique_ptr) Example should `delete` the raw pointer (#1986)\n\nWithout having a `delete p2` statement at the end, the claim that \"the object pointed to by `p2` is leaked\" would just seem trivial."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073e918912b45d369923a",
    "number": 1985,
    "body": "clang-tidy has [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-union-access.html) that refers to the  pro-type-union. Unfortunately there's an typo. This commit tries to fix the type",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo reference to pro-type-union (#1985)\n\nclang-tidy has [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines/pro-type-union-access.html) that refers to the  pro-type-union. Unfortunately there's an typo. This commit tries to fix the type"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ea18912b45d369923b",
    "number": 1984,
    "body": "The warning for a local smart pointer should only be produced when this smart pointer was initialized by `new`, or by one of the \"make\" functions like `make_unique`.\r\n\r\nIt is OK to initialize a local smart pointer by a \"factory method\", even when it is not moved, copied, reassigned or reset afterwards:\r\n\r\n    void print_product_properties(std::string_view product_name)\r\n    {\r\n      // Local smart pointer initialized by a \"factory method\", OK.\r\n      const std::unique_ptr<abstract_product> product = factory::create_product(product_name);\r\n      std::cout << product->get_price() << ' ' << product->get_size() << '\\n';\r\n    }\r\n\r\nChanged the enforcement rule from Simple to Moderate, because of this adjustment, as well as the exception that was added by pull request https://github.com/isocpp/CppCoreGuidelines/pull/1969 commit f4a9420e3225fa29034a4b1c911bdb1c1e61a45c.\r\n\r\n----\r\n\r\nInspired by a comment by @Xeverous at https://github.com/isocpp/CppCoreGuidelines/pull/1969#issuecomment-1246811951",
    "head_branch": "R.5-only-warn-if-initialized-by-new-or-make",
    "is_a_fork": true,
    "comments": [
      "Editors call: We see that on #1969 this suggestion wasn't applied:\r\n\r\n> Change the enforcement rule to just add the word \"non-const\":\r\n\r\n> Warn if a local **non-const** Unique_pointer [...]\r\n\r\nAnd that would address your example... you correctly declare the local `const` which declares the intent not to change it. And if the `const` were missing the Enforcement should fire, and the way to silence it would be to add `const` to declare the intent.",
      "Thanks for looking at this issue again, Herb. Do you mean that this enforcement rule can be silenced by simply applying the rule [Use const to define objects with values that do not change after construction](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rconst-const) to smart pointers as well?\r\n\r\nWould it reduce the enforcement rule for \"Prefer scoped objects, don't heap-allocate unnecessarily\" to just the following?\r\n\r\n_Warn if a local `Unique_pointer` or `Shared_pointer` that is not moved, copied, reassigned or `reset` before its lifetime ends is not declared `const`._",
      "@N-Dekker Yes that's the idea. I like that text, thanks!",
      "> I like that text, thanks!\r\n\r\nThanks, but I'm not so sure about that text myself. The example I posted before has the `const` there, but I believe it still deserves a warning:\r\n\r\n```\r\nvoid write_hello()\r\n{\r\n    const auto const_ptr = std::make_unique<std::ofstream>(\"hello.txt\"); // Bad! Please warn me! \r\n    (*const_ptr) << \"Hello!\\n\";\r\n}\r\n\r\n```"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ec18912b45d369923c",
    "number": 1981,
    "body": null,
    "head_branch": "fix-f21-variable-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "F.21: fix variable name in example and text (#1981)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ed18912b45d369923d",
    "number": 1979,
    "body": "The enforcement rule on \"an object is allocated and then deallocated on all paths\" is not _specifically_ about objects declared by the `auto` keyword, and `auto` does not just mean \"automatic storage duration\" anymore.",
    "head_branch": "R5-Remove-auto-keyword-from-enforcement",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "R.5 (scoped objects): Remove `auto` from Enforcement section (#1979)\n\nThe enforcement rule on \"an object is allocated and then deallocated on all paths\" is not _specifically_ about objects declared by the `auto` keyword, and `auto` does not just mean \"automatic storage duration\" anymore."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ee18912b45d369923e",
    "number": 1973,
    "body": "Fix #1972 style issue.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I think `T* name = nullptr` is much more ideomatic, but if `{}` should indeed be preferred for consistency reasons, what about `T* name{}` instead of `T* name {nullptr}`?\r\n\r\nSorry fo the bikeshedding",
      "> I think `T* name = nullptr` is much more ideomatic, but if `{}` should indeed be preferred for consistency reasons, what about `T* name{}` instead of `T* name {nullptr}`?\r\n> \r\n> Sorry fo the bikeshedding\r\n\r\nI think you are right. There are several examples in the guidelines with an empty {} for default member initialization. For pointers, it looks even better.",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Change = to {} for default member initialization (#1973)\n\n* Change = to {} for default member initialization\r\n\r\n* Remove nullptr"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ef18912b45d369923f",
    "number": 1971,
    "body": "Fix broken links from #1795 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix Adobe and CERT links (#1971)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f018912b45d3699240",
    "number": 1970,
    "body": null,
    "head_branch": "fix/typos",
    "is_a_fork": true,
    "comments": [
      "all good catches, thanks"
    ],
    "commit_messages": [
      "Fix typos (#1970)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f118912b45d3699241",
    "number": 1969,
    "body": "`unique_ptr<T[]>` is being used in practice to declare a local dynamically allocated buffer, for example:\r\n\r\n    const auto local_buffer = std::make_unique_for_overwrite<int[]>(size);\r\n\r\nEspecially when the `unique_ptr` is declared \"const\", a warning that it is not moved, copied, reassigned or `reset` does not appear suitable.\r\n\r\n----\r\nFor the record, here is a complete code example, using such a local `Unique_pointer` ~~(not included with the proposed commit)~~:\r\n\r\n```\r\nint get_median_value(const std::list<int>& integers)\r\n{\r\n  const auto size = integers.size();\r\n  const auto local_buffer = std::make_unique_for_overwrite<int[]>(size);\r\n\r\n  std::copy_n(begin(integers), size, local_buffer.get());\r\n  std::nth_element(local_buffer.get(), local_buffer.get() + size/2, local_buffer.get() + size);\r\n  \r\n  return local_buffer[size/2];\r\n}\r\n\r\n``` \r\n----\r\n\r\nUpdate: the code example above here is now part of the proposed text itself, as requested by Herb Sutter at https://github.com/isocpp/CppCoreGuidelines/pull/1969#issuecomment-1255555334",
    "head_branch": "Suppress-warning-for-const-unique_ptr-to-array",
    "is_a_fork": true,
    "comments": [
      "Just for clarification, this pull request addresses the enforcement rule, which says:\r\n> (Simple) Warn if a local `Unique_pointer` or `Shared_pointer` is not moved, copied, reassigned or `reset` before its lifetime ends.",
      "I think the way this rule is worded covers much greater set of situations than it should. One such situation has just been presented with unbounded arrays.\r\n\r\nAnother: what if you need to access some information and the only way to obtain it is to call a function which returns a unique pointer? Basically: obtain a handle, read stuff, let the handle die.",
      "Editors call: We agree, thanks. Could you please make two changes to your PR:\r\n\r\n1) Change the enforcement rule to just add the word \"non-const\":\r\n\r\n>  Warn if a local **non-const** `Unique_pointer`  [...]\r\n\r\n2) Please add the succinct explanation and your example in a new \"Exception: ... Example: ...\" in the body of the Guideline/\r\n\r\nThanks!\r\n",
      ">Editors call: We agree, thanks.\r\n\r\n@hsutter Hi Herb, thank you very much for your encouragement! I have recently been sprinkling around a lot of local `const unique_ptr<T[]>` variables (e.g., https://github.com/InsightSoftwareConsortium/ITK/commit/15d09d6c756b46b4d1c296d8bb13b85f82654ef9), replacing lots of manual `new[]`s and `delete[]`s, and I would very much like these changes to be in accordance with the C++ Core Guidelines!\r\n\r\n>  1. Change the enforcement rule to just add the word \"non-const\":\r\n> \r\n> > Warn if a local **non-const** `Unique_pointer`  [...]\r\n\r\nSorry, I think I overemphasized the \"const\" aspect, when I submitted the PR! The original warning still appears relevant for a local `const unique_ptr<T>` variable, initialized by `make_unique` or `make_unique_for_overwrite`. For example, the following code should still trigger a warning, as the file stream should be declared as a local object, not a heap object, in this case:\r\n\r\n```\r\nvoid write_hello()\r\n{\r\n    const auto const_ptr = std::make_unique<std::ofstream>(\"hello.txt\"); // Bad! Please warn me! \r\n    (*const_ptr) << \"Hello!\\n\";\r\n}\r\n\r\n``` \r\n\r\nSo I would rather not add the term **non-const** to this enforcement rule. I hope you agree.\r\n\r\n>  2. Please add the succinct explanation and your example in a new \"Exception: ... Example: ...\" in the body of the Guideline/\r\n\r\nSure, I'd be glad to add the `get_median_value` example to the proposed text itself. I'll prepare an amend + force-push. Coming soon...",
      "> sprinkling around a lot \r\n\r\nSounds like an opportunity to privately resurrect [std::dynarray](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3820.html#dynarray)",
      "> Sounds like an opportunity to privately resurrect [std::dynarray](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3820.html#dynarray)\r\n\r\n@cubbimew Thanks for the suggestion Sergey, but personally I'd rather have it resurrected publicly 😃 Until then, I think we should be able to use local `const unique_ptr<T[]>` variables without a warning.",
      "This is a good change.  Another exception would be using large objects that you don't want local:\r\n\r\n    const auto huge = make_unique<MassiveLegacyObject>(3);\r\n\r\nBasing the enforement around 'const unique_ptr' seems to be a good general case.  In practice, I don't think this is a common problem with unique_ptr's.  It is more likely to happen with raw ```new``` (like is shown in the example) with developers comming from other languages.",
      "> This is a good change. Another exception would be using large objects that you don't want local:\r\n\r\nThanks @bgloyer I got your point. An object might be too large to be placed on the stack. However, I'm still in favor of having this particular pull request specifically about scoped unbounded arrays, as it appears a very common use case for local `unique_ptr`s. (Much more common than the use case for such a large scoped object, as far as I have seen.) We already have an agreement about adding an exception for scoped unbounded arrays, as Herb Sutter wrote at https://github.com/isocpp/CppCoreGuidelines/pull/1969#issuecomment-1255555334   I think it would be more difficult to get an agreement on an exception for \"large\" objects, especially because it's hard to specify in a generic way when _exactly_ an object would be too large to be placed on the stack. I would be in favor of deferring that to another PR (or issue).",
      "Editors call: Looks good, thank you!"
    ],
    "commit_messages": [
      "R.5 (scoped objects): Do not warn on a const `unique_ptr<T[]>` (#1969)\n\n`unique_ptr<T[]>` is being used in practice to declare a local dynamically allocated buffer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f218912b45d3699242",
    "number": 1967,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "NR.4: fix typo (declaration => definition) (#1967)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f318912b45d3699243",
    "number": 1957,
    "body": "The classes are missing appropriate access specifiers.\r\nUse struct for simplicity.",
    "head_branch": "C.87-Fix-missing-public",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks for pointing this out! We agree with fixing the example but we prefer to fix it in the other direction, leaving `class` and adding `public` before the the base class and `public:` before the virtual functions.",
      "added the other-direction fix in https://github.com/isocpp/CppCoreGuidelines/commit/9d28e32999d75b2d3b4970172c9146705a13810c"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f418912b45d3699244",
    "number": 1956,
    "body": "Fixes #1946:\r\n - copy_trait type argument needs to be a container element type.\r\n   Use Value_type<Iter> like in other examples.\r\n\r\n - Fix name typo in the definition of copy_helper.",
    "head_branch": "T.65-Fix-typos",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "[#1946] T.65 Fix two typos (#1956)\n\nFixes #1946:\r\n - copy_trait type argument needs to be a container element type.\r\n   Use Value_type<Iter> like in other examples.\r\n\r\n - Fix name typo in the definition of copy_helper."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f518912b45d3699245",
    "number": 1954,
    "body": "Fix the syntax of the code example",
    "head_branch": "C.168-define-operator-in-same-namespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.168 Fix code example (#1954)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f618912b45d3699246",
    "number": 1949,
    "body": "Avoided a potential misunderstanding that `throw e` would slice *any* `e` to `std::exception`.\r\n\r\nThe note about rethrowing appears to be written when the example of this item still did `catch (const exception& e)`, which was prior to commit d568d190f65a2cd9d3a3fde74cddbc5b5489bd99, \"Generalized E.15, closes #1848\".",
    "head_branch": "E.15-rethrow-slice",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "E.15 Clarify when a rethrow would slice to `std::exception` (#1949)\n\nAvoided a potential misunderstanding that `throw e` would slice *any* `e` to `std::exception`.\r\n\r\nThe note about rethrowing appears to be written when the example of this item still did `catch (const exception& e)`, which was prior to commit d568d190f65a2cd9d3a3fde74cddbc5b5489bd99, \"Generalized E.15, closes #1848\"."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f718912b45d3699247",
    "number": 1944,
    "body": "Applies change stated in issue #1943.\r\n\r\nSigned-off-by: Daniel Kříž <Daniel.kriz@protonmail.com>",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "SF.5: prefer relative import to absolute one (#1944)\n\nSigned-off-by: Daniel Kříž <Daniel.kriz@protonmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f818912b45d3699248",
    "number": 1942,
    "body": "The code was likely copied from the example above, but the return type was not replaced.",
    "head_branch": "Fix-T.21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "T.21 Fix wrong return type (#1942)\n\nCo-authored-by: Nikolay Panov <pn.interface@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073f918912b45d3699249",
    "number": 1941,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "not a typo, but if we're rephrasing it, i'd shorten to \"once, for all derived\"",
      "Thank you for pointing out my mistake. I will close the request as unnecessary."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073fa18912b45d369924a",
    "number": 1940,
    "body": null,
    "head_branch": "guidelines/initial-changes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073fb18912b45d369924b",
    "number": 1939,
    "body": "Minor fixes to get the C.64 example to compile",
    "head_branch": "C.64",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.64 Minor fix to make example compile (#1939)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073fc18912b45d369924c",
    "number": 1938,
    "body": "Cleaned up [C.65: Make move assignment safe for self-assignment](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-move-self)\r\nbased on the discussions in #1892  #1649 #1606.",
    "head_branch": "C.65-self-move",
    "is_a_fork": true,
    "comments": [
      "This seems more radical than #1606:\r\n* current C.65 requires that self-move is a no-op and insists on not doing the STL thing (self-destructive self-move)\r\n* #1606 points out that it is incompatible with rule of zero for classes that have members of STL types but can be worked around with copy/swap,\r\n* this PR flips C.65 around to do the STL thing and not require no-op\r\n\r\nAs I recall, response to #1606 stalled because there was a draft paper on that topic.",
      "Can we use 'valid-but-uspecified' until it is offically settled?  I don't think it is practical to have the rule stronger than what the stl types do.  Any type with an stl memeber that uses the rule of zero or `= default` would violate this rule.  Or maybe have two rules, one that says 'valid-but-unspecified' and a stronger one for 'nop'?  Then developers could choose which is appropriate for them?  Setting 'valid-but-uspecified' as a minimum is important so that a type will work with `swap`.",
      "I like the Idea to stick with the stl behavior for now,  but would love to see more data about the need for stronger rules.  Has anyone had anekdotal or regular encounters with a self-move outside of self swap (where you don't care about the value)? What were the consequences for this?",
      "Editors call: This would invert the guidance and we agree with the current guidance -- self-move should be a  no-op."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073fe18912b45d369924d",
    "number": 1936,
    "body": "When I stumbled upon E.19 \"Use a `final_action` object to express\r\ncleanup if no suitable resource handle is available\" I was hopeful\r\nthat this `final_action`/`finally()` thing is from the STL, but, alas,\r\nit isn't.\r\n\r\nMake it clear that `finally` is a GSL construct.",
    "head_branch": "gsl-finally",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "E.19: clarify that `finally` is from the GSL (#1936)\n\nWhen I stumbled upon E.19 \"Use a `final_action` object to express\r\ncleanup if no suitable resource handle is available\" I was hopeful\r\nthat this `final_action`/`finally()` thing is from the STL, but, alas,\r\nit isn't.\r\n\r\nMake it clear that `finally` is a GSL construct."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662073ff18912b45d369924e",
    "number": 1935,
    "body": null,
    "head_branch": "master_c32_merge",
    "is_a_fork": true,
    "comments": [
      "dupicate"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740018912b45d369924f",
    "number": 1933,
    "body": "Avoid ending the sentence with a dangling \"see\".",
    "head_branch": "c9link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.9: Improve an inline link (#1933)\n\nAvoid ending the sentence with a dangling \"see\"."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740118912b45d3699250",
    "number": 1932,
    "body": "In README for the section \"Background and scope\". ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Issue #1931: C++20 wasn't included in \"modern C++\" (#1932)\n\n* Issue #1931 - Include C++20 as 'modern C++'\r\n\r\n* \"modern C++\" means C++11 and newer"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740218912b45d3699251",
    "number": 1929,
    "body": "Replaced the link in this format\r\n```\r\n<http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4477.pdf>\r\n```\r\n\r\nFor this one\r\n```\r\n[Operator Dot (R2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4477.pdf)\r\n```\r\n\r\nThe document title is the link text.\r\n",
    "head_branch": "fix_link_operator_dot_R2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.166: Use markdown format and document title for link (#1929)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740318912b45d3699252",
    "number": 1925,
    "body": "Addressed:\r\n> 16132:1-16132:75   warning  Marker style should be `*`  unordered-list-marker-style\r\n> 16133:1-16133:39   warning  Marker style should be `*`  unordered-list-marker-style\r\n> 16134:1-16134:57   warning  Marker style should be `*`  unordered-list-marker-style\r\n> 16135:1-16135:62   warning  Marker style should be `*`  unordered-list-marker-style\r\n> 16136:1-16136:240  warning  Marker style should be `*`  unordered-list-marker-style\r\n> 16137:1-16137:194  warning  Marker style should be `*`  unordered-list-marker-style\r\n> 16141:1-16141:72   warning  Marker style should be `*`  unordered-list-marker-style\r\n> 16142:1-16142:49   warning  Marker style should be `*`  unordered-list-marker-style",
    "head_branch": "GitHubActions-Warning-Marker-style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix GitHub Actions build warnings, Marker style should be `*` (#1925)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740418912b45d3699253",
    "number": 1924,
    "body": "Instead of using the term \"word\" to define the size of a small object, it appears clearer to consistently use `sizeof(void*)`. Also mentioned that pass by value is especially preferred when objects are trivially copyable.\r\n\r\nExplicitly recommended pass by value for fundamental types, enumeration types, and raw pointer types.\r\n\r\nAddressed issues:\r\n\r\n- #1421 (submitted by @palotasb-conti)\r\n- #1784 (submitted by @pauljansen42)",
    "head_branch": "F.16-Adjust-pass-by-value",
    "is_a_fork": true,
    "comments": [
      "> an argument of a fundamental type, an enumeration type, or a raw pointer type is usually best passed by value.\r\n\r\nNot a lot of people remember which types are [classified as](https://en.cppreference.com/w/cpp/language/type#Type_classification) \"fundamental\" (it's arithmetic, void, and nullptr_t). What this sentence is describing is closer to [scalar types](https://en.cppreference.com/w/cpp/named_req/ScalarType).\r\n\r\nOr you could merge your two sentences together, since they are talking about the same thing: [trivially-copyable types](https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable) (of relatively small size)",
      "Thanks for your suggestions, @cubbimew The term \"scalar type\" is also fine to me. Or what do you think about using the term \"built-in type\"? \"Built-in type\" is already being throughout the Guidelines.\r\n\r\n> Or you could merge your two sentences together, since they are talking about the same thing: [trivially-copyable types](https://en.cppreference.com/w/cpp/named_req/TriviallyCopyable) (of relatively small size)\r\n\r\nIt my intention to _only_ mention the size aspect (smaller than X is considered cheap) for class types. So that users do not have to worry whether their `intmax_t`, `long double`, or pointer-to-member-function is small enough to be passed by value. We do recommend passing `intmax_t`, `long double`, and pointer-to-member-function by value, right? So then, for the sake of clarity, I would prefer a separate sentence for class types. Is that OK to you?\r\n\r\nOr would you prefer it as follows (for example)? \r\n\r\n_Pass by value is recommended for an argument of any trivially copyable type (including any scalar type), although for a class type, the size of the object should also be taken into account: a compile-time size of up to `2 * sizeof(void*)` is then typically small enough._\r\n",
      "Editors call: Thanks! We agree the wording needs to be vague enough to be useful now but also future-proof. We think the old and new words say about the same thing and each has advantages but there is not consensus to adopt the change.",
      "@hsutter Thanks Herb, for taking the time to consider my pull request (as well as thanks to Sergey @cubbimew). Regarding this item, you wrote before (May 9, 2019):\r\n\r\n> Editors call: We think the Enforcement gives a clear size, but agree with @cubbimew that the Enforcements (and probably the Guideline) should additionally be triggered only when the type is trivially copyable.\r\nhttps://github.com/isocpp/CppCoreGuidelines/issues/1421#issuecomment-491015041\r\n\r\nI hope someone may still address that comment."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740518912b45d3699254",
    "number": 1923,
    "body": "In accordance with C++ Coding Standards, item 27,  [Prefer the canonical forms of arithmetic and assignment operators](https://www.oreilly.com/library/view/c-coding-standards/0321113586/ch28.html), by Herb Sutter (@hsutter) and Andrei Alexandrescu (@andralex), 2004 (!), which said:\r\n\r\n> If you a+b, also a+=b: When defining binary arithmetic operators, provide their assignment versions as well, and write to minimize duplication and maximize efficiency.\r\n...\r\n> In general, for some binary operator @ (be it +, -, *, and so on), you should define its assignment version such that a @= b and a = a @ b have the same meaning (other than that the first form might be more efficient and only evaluates a once). The canonical way of achieving this goal is to define @ in terms of @=",
    "head_branch": "Define-Matrix-operator-canonical-way",
    "is_a_fork": true,
    "comments": [
      "This advice should be amended with the note that certain architectures may perform better when copying than in read-modify-write operations.",
      "Maybe make new rule(s) about recommended operator overloading techniques and trade-offs, rather than sneak it into an example on returning from functions? Like all those bits of advice squeezed into cppreference's  [binary arithmetic operators](https://en.cppreference.com/w/cpp/language/operators#Binary_arithmetic_operators)",
      "> This advice should be amended with the note that certain architectures may perform better when copying than in read-modify-write operations.\r\n\r\n@andralex  Thank you for your prompt comment, Andrei! Do you have any pointer (hyperlink 😺) to support your note?\r\n\r\nNow assuming that this specific Matrix example keeps its elements in a std::vector, as suggested by https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#example-46 In that case, wouldn't it just be the right thing to do, to just follow the original guideline from the book of Herb and you?",
      "> Maybe make new rule(s) about recommended operator overloading techniques and trade-offs, rather than sneak it into an example on returning from functions?\r\n\r\nThanks for your comment @cubbimew My intention with this PR is not to \"sneak\" an off-topic recommendation into an example on returning from functions. But rather, just to make the example more realistic, and in accordance with previously established best practices. But I agree that it could be worth adding new rules about those operator overloading techniques anyway.",
      "> > This advice should be amended with the note that certain architectures may perform better when copying than in read-modify-write operations.\r\n> \r\n> @andralex Thank you for your prompt comment, Andrei! Do you have any pointer (hyperlink 😺) to support your note?\r\n\r\nDifficult to find an authoritative reference in a matter that so much depends on circumstance. In GPGPU programming (such as CUDA - btw I work with NVIDIA now!) RMW operations are not recommended by default. The typical way of doing things in the [SIMT](https://en.wikipedia.org/wiki/Single_instruction,_multiple_threads) model is to organize computation in stages that read from one portion of memory and write to another. The next stage may reuse memory from the previous stage, but in order to work properly it must assume that all writes in the previous stage have completed. At least in theory RMW could be used, but the interlocking necessary would be prohibitively expensive.\r\n\r\n> Now assuming that this specific Matrix example keeps its elements in a std::vector, as suggested by https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#example-46 In that case, wouldn't it just be the right thing to do, to just follow the original guideline from the book of Herb and you?\r\n\r\nEven in that case I'm tempted to say \"it depends\". Consider a program using unified memory (CPU+GPU memory in the same address space). A custom allocator for the vector may use GPU memory, where doing operations in a streaming manner may work a lot better if they wrote to new memory.",
      "> Even in that case I'm tempted to say \"it depends\". Consider a program using unified memory (CPU+GPU memory in the same address space). A custom allocator for the vector may use GPU memory, where doing operations in a streaming manner may work a lot better if they wrote to new memory.\r\n\r\n @andralex Thanks Andrei, interesting. So it that case, would you consider something like the following implementation (https://godbolt.org/z/s8Wshxch4) instead?\r\n\r\n```\r\nMatrix operator+(const Matrix& a, const Matrix& b)\r\n{\r\n  assert(size(b.elements) == size(a.elements));\r\n\r\n  Matrix res;\r\n  res.elements.reserve(size(a.elements));\r\n  std::transform(cbegin(a.elements), cend(a.elements), cbegin(b.elements), std::back_inserter(res.elements), std::plus<>{});\r\n  return res;\r\n}\r\n\r\n```\r\n\r\nJust for the sake of discussion (I think this is far beyond the scope of [guideline F.20](https://github.com/isocpp/CppCoreGuidelines/blob/d5907d6dd505844237249f37c0a6f7cc02c9ab56/CppCoreGuidelines.md?plain=1#L3040))! \r\n",
      "Spoke to my coworker Duane Merrill, he mentioned an interesting view on RMW vs RW: when the pattern of dependence of outputs on inputs is simple, parallelization with in-place is often trivial or at least efficiently feasible. That would be the case with matrix addition. So in such cases the guideline applies. For a counterexample, matrix multiplication would be a more complex case because one element in the output depends on the entire row in the input. So if you want to parallelize that as a RMW operation, you'd need a lot of interlocking because some threads will want to modify the elements that other threads are reading.\r\n\r\nFrom that perspective, the code you show for matrix addition is unnecessary: the in-place equivalent is trivially parallelizable anyway so why bother with a distinct implementation. If you showed matrix multiplication, you'd have a much better case for implementing `*` and `*=` in distinct ways.",
      "Thanks Andrei, So if I understand correctly, you'd agree that with [_this specific Matrix operator+ example_](https://github.com/isocpp/CppCoreGuidelines/blob/d5907d6dd505844237249f37c0a6f7cc02c9ab56/CppCoreGuidelines.md#example-46) you would define `operator@` in terms of `@=` (even though the guideline from 2004 should only be followed _carefully_, after having considered otherwise).  Would you then still pass the first argument by-value, to allow copy-elision? \r\n\r\n    Matrix operator+(Matrix a, const Matrix& b)\r\n    {\r\n        a += b;\r\n        return a;\r\n    }\r\n\r\nI think it's a clever and useful optimization, passing one argument by-value, although I don't like the asymmetry between the two arguments. (And yes I'm still aware that this discussion is beyond the scope of [guideline F.20, \"prefer return values to output parameters\"](https://github.com/isocpp/CppCoreGuidelines/blob/d5907d6dd505844237249f37c0a6f7cc02c9ab56/CppCoreGuidelines.md?plain=1#L3040).)",
      "Yes! I've been an advocate of \"if you plan to make a copy of a parameter, pass it by value in the first place\" ever since C++98. It reduces the number of total copies if people pass rvalues around. In C++11+, I saw code defining two overloads (one for rvalue ref, the other for `const&`), which is an unnecessarily complicated to achieve the same goal.\r\n\r\nThat said, @hsutter would need to weigh in as well.",
      "Editors call: Thanks! We understand the motivation but we think the example as currently written is clearer to talk about the Item that it's in and making it more subtle would be a distraction.",
      "@hsutter Thanks for considering my pull request. Honestly I agree in the sense that an example on how to correctly and efficiently implement `operator+` would have subtleties that are beyond this item, [F.20: For “out” output values, prefer return values to output parameters](https://github.com/isocpp/CppCoreGuidelines/blob/2b05a48a050664cb1039b3efb958057a91b36f82/CppCoreGuidelines.md#f20-for-out-output-values-prefer-return-values-to-output-parameters). \r\n\r\nInstead I think it would be clearer for this particular item (F.20) to have a simple example of return by-value _without_ presenting an `operator+` overload. For example:\r\n\r\n```\r\n\r\nMatrix create_identity_matrix()\r\n{\r\n  Matrix res;\r\n  // ... fill the diagonal with ones ...\r\n  return res;\r\n}\r\n\r\nMatrix x = create_identity_matrix();  // move constructor\r\ny = create_identity_matrix();         // move assignment\r\n\r\n```\r\n\r\nInstead of [the operator+ example here](https://github.com/isocpp/CppCoreGuidelines/blob/2b05a48a050664cb1039b3efb958057a91b36f82/CppCoreGuidelines.md#example-46). Would it still be useful to make that another pull request?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740618912b45d3699255",
    "number": 1922,
    "body": "Moved the `Matrix` example and the notes about assignment from rule F.16 (_For \"in\" parameters, pass cheaply-copied types by value..._) to rule F.20 (_For \"out\" output values, prefer return values..._).\r\n\r\nWith help from Sergey Zubkov (@cubbimew).\r\n\r\nCredits: My [LKEB](https://lkeb.lumc.nl) colleague Denis P. Shamonin (@dpshamonin) originally mentioned to me that the example appears off-topic, in the context of rule F.16.",
    "head_branch": "F.16-Remove-Matrix-example",
    "is_a_fork": true,
    "comments": [
      "technically it is showing pass by reference to const, though content-wise it is really an example for F.20 (return by value). \r\nI'd move it there, just before the counter-example with Package",
      "> technically it is showing pass by reference to const, though content-wise it is really an example for F.20 (return by value).\r\nI'd move it there, just before the counter-example with Package\r\n\r\n@cubbimew Thanks again for your comment! Please check the force-push I just did!  ",
      "Editors call: Great, thanks!"
    ],
    "commit_messages": [
      "F.16 (\"in\" parameters): Move Matrix example to F.20 (return values) (#1922)\n\nThe `Matrix` example and the notes about assignment appear off-topic in rule F.16, as F.16 is specifically about \"in\" parameters.\r\n\r\nWith help from Sergey Zubkov."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740718912b45d3699256",
    "number": 1920,
    "body": "Explicitly mentioned string streams as `endl` insertions into string streams do actually occur in the wild.\r\n\r\nPeople have been wondering whether `endl` is specifically useful for a stringstream to get a _platform-specific_ end-of-line character sequence (apparently not): \r\n\"Inserting endline into a stringstream\"\r\nhttps://stackoverflow.com/questions/6865398/inserting-endline-into-a-stringstream\r\n\r\nBut there have also been concerns about the performance effect of `endl` on an `ostringstream`:\r\n\"Why does using std::endl with ostringstream affect output speed?\"\r\nhttps://stackoverflow.com/questions/12675273/why-does-using-stdendl-with-ostringstream-affect-output-speed\r\n",
    "head_branch": "SL.io.50-Mention-string-streams",
    "is_a_fork": true,
    "comments": [
      "CI wants `ostringstream` to be added to `scripts/hunspell/isocpp.dic`\r\n\r\nAnd yes, I've also seen the \"platform-specific end-of-line\" urban legend, I wonder if it should be called out explicitly.",
      "@cubbimew Thanks for your comments. Can you please check if I addressed them correctly and sufficiently?",
      "cool - glad to have this documented.  too bad we can't link back to the definition of `std::endl` for more authority; but this should do just fine and help curb those urban legends.",
      "On a Mac running modern macOS (MacOS X or later; anything currently\nsupported by Apple), the default line ending is Unix-style \\n line endings.\n\nAFAIK, the older Macs (20+ years old now) and MacOS 9 or earlier used \\r\n(only; not either \\r\\n or \\n\\r) for the line endings.\n\n\nOn Tue, Jun 7, 2022 at 9:56 AM Benjamen Meyer ***@***.***>\nwrote:\n\n> ***@***.**** commented on this pull request.\n> ------------------------------\n>\n> In CppCoreGuidelines.md\n> <https://github.com/isocpp/CppCoreGuidelines/pull/1920#discussion_r891411198>\n> :\n>\n> > @@ -20308,6 +20308,14 @@ For writing to a file, there is rarely a need to `flush`.\n>\n>  ##### Note\n>\n> +For string streams (specifically `ostringstream`), the insertion of an `endl` is entirely equivalent\n> +to the insertion of a `'\\n'` character, but also in this case, `endl` might be significantly slower.\n> +\n> +`endl` does *not* take care of producing a platform specific end-of-line sequence (like \"\\r\\n\" on\n> +Windows). So for a string stream, `s << endl` just inserts a *single* character, `'\\n'`.\n>\n> @N-Dekker <https://github.com/N-Dekker> AFAIK mac is still doing the \\n\\r\n> - now, perhaps it changes from application to application, but I've still\n> seen it in recent years. The new text called out the Windows behavior as an\n> example; it could be worth noting (legacy or otherwise) the Mac behavior\n> too.\n>\n> —\n> Reply to this email directly, view it on GitHub\n> <https://github.com/isocpp/CppCoreGuidelines/pull/1920#discussion_r891411198>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ACCAHBXD2POYTHTRCU7RZWTVN5WLNANCNFSM5XWA6X7Q>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n\n\n-- \nJonathan Leffler ***@***.***>  #include <disclaimer.h>\nGuardian of DBD::Informix - v2018.1031 - http://dbi.perl.org\n\"Blessed are we who can laugh at ourselves, for we shall never cease to be\namused.\"\n",
      "Editors call: Great, thanks!"
    ],
    "commit_messages": [
      "SL.io.50 (Avoid `endl`): Mention string streams (#1920)\n\nExplicitly mentioned string streams as `endl` insertions into string streams do actually occur in the wild.\r\n\r\nWith help from Sergey Zubkov."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740818912b45d3699257",
    "number": 1914,
    "body": "In the TOC F.60 comes after F.21, but in the text it appears after F.27. I moved the text to be in line with the TOC",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Move F.60 to align with TOC (#1914)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740918912b45d3699258",
    "number": 1913,
    "body": null,
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "I don't know what you think this repository is for, but please stop it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740a18912b45d3699259",
    "number": 1912,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740b18912b45d369925a",
    "number": 1911,
    "body": "Fix of issue #1650.\r\n\r\nI wrote a [script](https://gist.github.com/Nexer8/b523ddc954d0a01539d594af95639821) that allows the conversion of Markdown's _\"default\"_ code blocks to fenced code blocks and executed it in the following way:\r\n`python md_cb2fb.py -i CppCoreGuidelines.md -l cpp -p`\r\n\r\n## Before\r\n\r\n    void f(vector<string>& v)\r\n    {\r\n        string val;\r\n        cin >> val;\r\n        // ...\r\n        auto p = find(begin(v), end(v), val);  // better\r\n        // ...\r\n    }\r\n\r\n## After\r\n\r\n```cpp\r\nvoid f(vector<string>& v)\r\n{\r\n    string val;\r\n    cin >> val;\r\n    // ...\r\n    auto p = find(begin(v), end(v), val);  // better\r\n    // ...\r\n}\r\n```",
    "head_branch": "cpp-code-blocks",
    "is_a_fork": true,
    "comments": [
      "our CI hates this PR, because [md-split.py](https://github.com/isocpp/CppCoreGuidelines/blob/master/scripts/python/md-split.py) needs to learn about backtick-cpp code blocks.",
      "Editors call: Thanks! We're just going to leave it in the current style for now, but note that in the github.io pages there is colorization available."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740c18912b45d369925b",
    "number": 1910,
    "body": "According to discussion in #1317 \"Why should a base class destructor be virtual, if the class doesn't have virtual functions?\" It is not clear how to deal with non-virtual destructors.\r\n\r\nAdditionaly, the current rule [C.139: Use final on classes sparingly](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-final) forces to not use `final` statement to allow extensions. It conflicts with [C.35: A base class destructor should be either public and virtual, or protected and non-virtual](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-dtor-virtual).\r\n\r\nBy this PR the additional rule is proposed as summary of the #1317 discussion.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Two typos were fixed.\r\nThe usage of `CamelCase` were replaced by `Snake_case` in example class names to resolve spell checker errors.",
      "Restored missed link in `C.139: Use `final` on classes sparingly` rule.",
      "Spell checking and code formatting issues were fixed.",
      "Editors call: We think we shouldn't add this rule for two reasons.\r\n\r\n1) It would require annotating as `final` every non-base class, including most types in the standard library. That would be very noisy... perhaps it could make sense in the case where the class has virtual functions, but C.35 already bans that case outright (it says not just to mark it `final`, but not to do it at all).\r\n\r\n2) It is sometimes useful to derive from a class (properly! avoiding polymorphic delete) in order to write a wrapper class around a type (e.g., an overloaded struct that derives from a bunch of lambdas) instead of containing a value of that type which can be cumbersome. When done carefully and without attempting to polymorphically destroy through a pointer to the wrapped type, that can be okay. Other parts of the language, such as delegating constructors, were designed with this in mind and we don't want to ban this feature."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740e18912b45d369925c",
    "number": 1909,
    "body": "Added a simple example for [C.32: If a class has a raw pointer (`T*`), consider whether it might be owning](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-dtor-ptr)\r\n\r\nAlso removed mentioning of owning references.  I think owning referecnce are rare and generally not a problem in legacy code.  \r\nR.3 gives an exception for legacy code to have owing raw pointers but R.4 does not for owning references.  If we want to keep the owing references C.33 should probably be updated to delete owing references.",
    "head_branch": "C_32",
    "is_a_fork": true,
    "comments": [
      "Editors call: Owning raw pointers and references are already banned under R.3 and R.4. Sometimes they do get used, so we think owning references should still be mentioned. Otherwise, the PR looks good, if you can please restore the owning references we can approve it.",
      "How about extending the example to something like\r\n```\r\nfoo* owning = new foo; // change to unique_ptr or owner<T*>\r\nbar* observer = &b; // keep\r\nbaz& owning_ref = *new baz; // owning reference; banned\r\nxyz& observer_ref = x; // keep\r\n```",
      "> How about extending the example to something like\r\n> \r\n> ```\r\n> foo* owning = new foo; // change to unique_ptr or owner<T*>\r\n> bar* observer = &b; // keep\r\n> baz& owning_ref = *new baz; // owning reference; banned\r\n> xyz& observer_ref = x; // keep\r\n> ```\r\n\r\nIs it enough just to leave examples for pointers?  It is true that when working with legacy code, ownership of member pointers is often not clear and requires some digging.  Owning member pointers was a common practice in older C++.  That is not true for references.  Owning references have always been a bad idea.  Why would anyone have used an owning ```T&``` instead of just ```T```?  I'm not sure I have ever seen one in the wild.  Even in legacy classes, references should be assumed to be non-owning without second guessing if they are really owned.  There are many more owning pointers than references in legacy code - I like examples that reflect what is common.",
      "I merge the latest so the diff's are clean now.  Anything more on this one?",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Clean up and add example for C.32 - raw pointers (#1909)\n\n* Update CppCoreGuidelines.md\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\n* Update isocpp.dic\r\n\r\n* use snake casing\r\n\r\n* sake case naming\r\n\r\n* C 32 comments (#3)\r\n\r\n* F.16 (\"in\" parameters): Move Matrix example to F.20 (return values) (#1922)\r\n\r\nThe `Matrix` example and the notes about assignment appear off-topic in rule F.16, as F.16 is specifically about \"in\" parameters.\r\n\r\nWith help from Sergey Zubkov.\r\n\r\n* SL.io.50 (Avoid `endl`): Mention string streams (#1920)\r\n\r\nExplicitly mentioned string streams as `endl` insertions into string streams do actually occur in the wild.\r\n\r\nWith help from Sergey Zubkov.\r\n\r\n* Extended E.16 to include copy ctor for exception type, closes #1921\r\n\r\n* Fix GitHub Actions build warnings, Marker style should be `*` (#1925)\r\n\r\n* restored reference\r\n\r\n* Added references to note\r\n\r\nCo-authored-by: Niels Dekker <N.Dekker@lumc.nl>\r\nCo-authored-by: Herb Sutter <herb.sutter@gmail.com>\r\n\r\nCo-authored-by: Niels Dekker <N.Dekker@lumc.nl>\r\nCo-authored-by: Herb Sutter <herb.sutter@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620740f18912b45d369925d",
    "number": 1904,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[C.148] Fix 1 anchor link (#1904)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741018912b45d369925e",
    "number": 1895,
    "body": "To me it looks like this is a formatting type. I don't see why data should be emphasized. The point is in mixing `public` and `private`, so these both should be emphasized, not `public` and `data`.",
    "head_branch": "formatting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "formatting typo (#1895)\n\nCo-authored-by: Werner Henze <w.henze@avm.de>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741118912b45d369925f",
    "number": 1891,
    "body": null,
    "head_branch": "formatting/I.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "formatting: Updates to I.4 (#1891)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741218912b45d3699260",
    "number": 1890,
    "body": "Added Example for SF.21 'Don't use an unnamed (anonymous) namespace in a header'",
    "head_branch": "SF_21",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Added example for SF.21 (#1890)\n\n* Example for SF.21\r\n\r\n* Update isocpp.dic\r\n\r\n* remove space\r\n\r\n* revert isocpp.dic change"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741318912b45d3699261",
    "number": 1888,
    "body": "One more new line is necessary after the text \"Return statements in a case label are also OK:\" to make the code excerpt after it be formatted as code.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "code formating fix: +1 new line (#1888)\n\nOne more new line is necessary after the text \"Return statements in a case label are also OK:\" to make the code excerpt after it be formatted as code."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741418912b45d3699262",
    "number": 1886,
    "body": null,
    "head_branch": "gitignore-for-mac",
    "is_a_fork": true,
    "comments": [
      "A not-so-well known feature of git is that you can define files/patterns to ignore globally (see the [`gitignore` manpage](https://git-scm.com/docs/gitignore)). This also comes in handy if your preferred editor/or CI creates swapfiles or caches."
    ],
    "commit_messages": [
      "Adding .DS_Store to the .gitignore file since MacOS loves touching those files. (#1886)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741518912b45d3699263",
    "number": 1885,
    "body": null,
    "head_branch": "remove-dump-cpp",
    "is_a_fork": true,
    "comments": [
      "This should fix issue #1884 1884",
      "Might someone with write access be able to merge this?",
      "> Might someone with write access be able to merge this?\r\n\r\nyes, but if it waits three more days (to next editors call) we get to find out whether its provenance is indeed questionable.",
      "> > Might someone with write access be able to merge this?\r\n> \r\n> yes, but if it waits three more days (to next editors call) we get to find out whether its provenance is indeed questionable.\r\n\r\n:+1:"
    ],
    "commit_messages": [
      "Remove irrelevant source file mistakenly committed (#1885)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741618912b45d3699264",
    "number": 1883,
    "body": "quick pass updating all mentions of Concepts to C++20, to address #1547\r\nDo we even need \"GSL concepts\" at this point?",
    "head_branch": "concepts",
    "is_a_fork": true,
    "comments": [
      "> Do we even need \"GSL concepts\" at this point?\r\n\r\nI wouldn't think so.\r\n\r\nLooks good\r\n\r\n",
      "Note to self from the editors call; I missed one (at least) mention of Concepts TS syntax, and removing (or not) Boolean, String, and Number is out of scope for this PR."
    ],
    "commit_messages": [
      "modernizing concepts (#1883)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741718912b45d3699265",
    "number": 1880,
    "body": "The documentation still mentions C++17, while C++20 is already out for some time. So I updated the introduction paragraphs.\r\n\r\nMentioning C++20, but still including C++17 of course.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "@cubbimew Check it out 👍🏽 ",
      "yep, \"currently C++20\" is correct"
    ],
    "commit_messages": [
      "Promote C++20 (#1880)\n\nThe documentation still mentions C++17, while C++20 is already out for some time. So I updated the introduction paragraphs."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741818912b45d3699266",
    "number": 1878,
    "body": "Hit these today. Figured I'd offer a fix :) Surprised the CI didn't find these, it looks like it should be validating refs...",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "oops, it was my fault, a `vi` typo that lowercased that paragraph"
    ],
    "commit_messages": [
      "Fix broken cross-references. (#1878)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741918912b45d3699267",
    "number": 1876,
    "body": "Fix minor typos",
    "head_branch": "typos",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Fixed typos (#1876)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741a18912b45d3699268",
    "number": 1875,
    "body": "A local copy of a global was used to prevent a data race, but it was uses without validation. The beautiful syntax of the sample distracts from the core problem to solve.",
    "head_branch": "cp.4-change-example-proposal",
    "is_a_fork": true,
    "comments": [
      "This appears to be unnecessary, especially in the context of the rule in question.",
      "> This appears to be unnecessary, especially in the context of the rule in question.\r\n\r\nI remember, some  time ago I read a sentence that reinterpret_cast<> and static_cast<> were designed to look ugly compared to the c-style cast to catch the programmers attention. Furthermore there is a lot of guidance to use explicit conversions like string::c_str(). So if I use an atomic operation, I normally have to reason about the code some time. And then:  why not making that explicit in code instead of writing a comment? ",
      "this is cp.8",
      "> why not making that explicit in code instead of writing a comment?\r\n\r\nIt seems you're proposing a rule then, something like \"For atomic types, prefer functions to overloaded operators\". I'd probably vote for such rule especially for inc/dec operators vs fetch_add/sub. But a fragment in an  example on the rule about misuse of volatile wouldn't do it justice.",
      "> why not making that explicit in code instead of writing a comment?\r\n\r\nbecause comments carry intent; where code only shows what function.\r\nYou need both - code and comment - for long term maintenance.",
      "> > why not making that explicit in code instead of writing a comment?\r\n> \r\n> It seems you're proposing a rule then, something like \"For atomic types, prefer functions to overloaded operators\". I'd probably vote for such rule especially for inc/dec operators vs fetch_add/sub. But a fragment in an example on the rule about misuse of volatile wouldn't do it justice.\r\n\r\nI like the rule you made from the comment. Here is a good reason for it: Matthew Kulukundis on Cppcon 2021 demonstrated the motivation and the pitfalls behind lock-free programming. I think it's a detailed example for being explicit using 'atomic'/lock-free functionality. ",
      "Editors call: Perhaps open an issue regarding whether to consider guidance about using atomic operators vs. named function calls, but this example doesn't seem to benefit from having that discussed added here."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741c18912b45d3699269",
    "number": 1874,
    "body": "1. Changed the cp2 example to show a global race problem was intended to show.\r\n2. Added a lock-free example with copy before use strategy.",
    "head_branch": "cp2-fix-example",
    "is_a_fork": true,
    "comments": [
      "How is your code solving the problem mentioned in CP.2?\r\n\r\n>In a nutshell, if two threads can access the same object concurrently (without synchronization), and at least one is a writer (performing a non-const operation), you have a data race.\r\n\r\nYour code has exactly this. One is a write (not shown) and one is a reader - in your case a reader that is making a copy of `val`. If `val` is not an atomic value, then there is not even a guarantee that you read a valid value (`val´ before the write or `val´ after the write), it might be value that consists of parts of `val` before the write and parts of `val` after the write.",
      "Editors call: We don't think this change is correct, if it's a race to read it at all then it's a race to take a copy."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741d18912b45d369926a",
    "number": 1873,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741e18912b45d369926b",
    "number": 1872,
    "body": "This is an update to #1843.  This pull request [adds an index page](https://github.com/joeedh/CppCoreGuidelines/blob/gh-pages/CppCoreGuidelines.md#I-index) to the guidelines.  \r\n\r\nThe basic idea is to add tags to the rule anchor elements.   These are collated by a custom remark plugin during `make` into an index page, which is then inserted at the string \"# put-index-page-here\" in `CppCoreGuidelines.md`; the final result is written to `scripts/build/CppCoreGuidelines.md.indexed` (`CppCoreGuidelines.md` itself is not modified).\r\n\r\nHere is an example of adding tags:\r\n\r\n`### <a name=\"Rc-interface\" tags=\"class,interfaces,code clarity\"></a>C.3: Represent the distinction between an interface and an implementation using a class`\r\n\r\nNote that tags are separated by commas and may contain spaces.\r\n\r\nNote: minimal modifications were done to the build system to make it compatible with Windows.  There is now a \"nospell\" build target that skips spell checking (hunspell, or at least its mingw incarnation, is\r\nbroken on Windows) and md_split.py was modified to explicitly treat input files as UTF8\r\n(which is not the default on Windows).\r\n\r\nFor those reluctant to click on strange links, here is a screenshot of the final result:\r\n\r\n![image](https://user-images.githubusercontent.com/3221485/147037554-d9060270-53e2-4fbd-a7c3-2c4574af71c0.png)\r\n\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! Most of the work for a good index is maintaining it, and we don't have the capacity to maintain a good index over the coming years. The Guidelines are intended to be used as a reference to link to individual items, rather than as a narrative book intended to be readable and where an index is most useful."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620741f18912b45d369926c",
    "number": 1871,
    "body": "code example error with Int",
    "head_branch": "Int-int",
    "is_a_fork": true,
    "comments": [
      "Editors call: Actually `Int` was intended here, per the comment above it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742018912b45d369926d",
    "number": 1869,
    "body": "Prior to C++20's [P1825R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1825r0.html), subobjects of local variables are not considered as move candidates. This can lead to a costly copy when trying to return a subobject of a local or a structured binding. This PR notes an exception to F.48 for this reason.\r\n\r\nHere is a live example:\r\nhttps://godbolt.org/z/fjMKhbMjd",
    "head_branch": "f48-exception-subobjects",
    "is_a_fork": true,
    "comments": [
      "Editors call: Good point, thanks. But given that the rules for this case have been changed for both C++17 and C++20, we don't think we need to add this special case. (We thought that in Cologne 2019 we adopted P1825 as a defect report (i.e., retroactive) also for C++17.)\r\n\r\nWe should make an update in the Abstract though: Within the parentheses in the first paragraph, add \"only when there are significant differences will we mention the exact version of the standard\"."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742118912b45d369926e",
    "number": 1863,
    "body": "conditionally unused parameters can be declared using maybe_unused attribute.",
    "head_branch": "apenn-msft/maybe-unused",
    "is_a_fork": true,
    "comments": [
      "Editors call: Could you give an example of where a parameter might or might not be used in a TU, that is not an ODR violation? We only know cases involving `if constexpr` in templates. Also, the suggestion should be in a Note because it's a special case, rather than in the Reason for the rule.",
      "> Editors call: Could you give an example of where a parameter might or might not be used in a TU, that is not an ODR violation? We only know cases involving `if constexpr` in templates. Also, the suggestion should be in a Note because it's a special case, rather than in the Reason for the rule.\r\n\r\nmoved to notes and added example\r\n\r\n    X* find(set<Blob>& s, const string& str, [[maybe_unused]] Hint h) \r\n    { \r\n        #if DEBUG\r\n            // a hint is used only in debug builds\r\n        #endif\r\n\r\n        if constexpr (Blob::MaxSize > 1000)\r\n        {\r\n            // a hint is used only if blobs are of a certain size\r\n        }\r\n    }\r\n",
      "Editors call: Thanks! This is better, but a couple of changes please:\r\n- remove \"depending on the translation unit\" because we think that may not be actually right (it sounds like it's asking for an ODR problem)\r\n- in the body, remove the `ifdef` and make the example a function template and the `if constexpr` condition a dependent condition",
      "> Editors call: Thanks! This is better, but a couple of changes please:\r\n> \r\n> * remove \"depending on the translation unit\" because we think that may not be actually right (it sounds like it's asking for an ODR problem)\r\n> * in the body, remove the `ifdef` and make the example a function template and the `if constexpr` condition a dependent condition\r\n\r\nthe translation unit was in terms of translations where DEBUG is defined. I think #ifdef DEBUG is probably the most common example, but yep, sure I can move to an if constexpr example to keep it pure C++ and avoid precompiler\r\n",
      "Editors call: Thanks. We don't see the requested changes, were you going to update the PR?",
      "> Editors call: Thanks. We don't see the requested changes, were you going to update the PR?\r\n\r\nyep, will do, along with @markyin's suggestion. look out for a PR update",
      "Editors call: Great, thanks!"
    ],
    "commit_messages": [
      "conditionally unused parameters can be declared using maybe_unused attribute. (#1863)\n\n* conditionally unused parameters can be declared using maybe_unused attribute.\r\n\r\n* move to Notes and add example\r\n\r\n* whitespace?\r\n\r\n* ok got the whitespace\r\n\r\n* adjust example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742218912b45d369926f",
    "number": 1859,
    "body": null,
    "head_branch": "es48-fix-wording-in-reasoning",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ES.48: fix wording in reasoning (#1859)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742318912b45d3699270",
    "number": 1857,
    "body": "Added some examples of good and bad exception types for #1852.  It is just showing the throwing side.  I think showing the catching as well makes the examples too long and the rule itself is just about the types.",
    "head_branch": "e_14",
    "is_a_fork": true,
    "comments": [
      "@cubbimew Any thoughts on this PR?",
      "@bgloyer I'm okay with it, but Bjarne wanted to sign off, too.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "E.14 exception type examples for #1852 (#1857)\n\n* E.14\r\n\r\n* clean-up\r\n\r\n* add final\r\n\r\n* Added words to dictionary\r\n\r\n* cleanup\r\n\r\n* fix typo\r\n\r\n* Update CppCoreGuidelines.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742418912b45d3699271",
    "number": 1855,
    "body": "To follow the Rule of Zero.\r\n\r\n#1423",
    "head_branch": "c_130",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "C.130: drop a destructor in the D class (#1855)\n\nTo follow the Rule of Zero."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742518912b45d3699272",
    "number": 1851,
    "body": "Update [C.130](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-copy) example for Issue #1635 and #1423. ",
    "head_branch": "c_130",
    "is_a_fork": true,
    "comments": [
      "Editor's call: thanks, we'll merge it, omitting final to allow further derivation."
    ],
    "commit_messages": [
      "Update CppCoreGuidelines.md (#1851)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742618912b45d3699273",
    "number": 1849,
    "body": "Added examples for https://github.com/isocpp/CppCoreGuidelines/issues/1763",
    "head_branch": "ES_11",
    "is_a_fork": true,
    "comments": [
      "Editors call: Good examples, thanks!"
    ],
    "commit_messages": [
      "ES.11 Issue #1763 (#1849)\n\n* Update for Issue 1763\r\n\r\n* add copy case\r\n\r\n* Add 'DataRecord'"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742818912b45d3699274",
    "number": 1843,
    "body": "This pull requests provides a remark plugin to generate an index page.  The basic idea \r\nis to add tags to the anchor elements of headers:\r\n\r\n`# <a name=\"anchor\" tags=\"tag1, tag2\"></a> Header `\r\n\r\nThe generated index page replaces a header in the final markdown, like so:\r\n\r\n`#put-index-page-here`\r\n\r\nIn terms of the build process, the Makefile takes `CppCoreGuidelines.md`, puts it through\r\n remark (with the new plugin) and spits out `build/CppCoreGuidelines.md.indexed`.\r\n\r\nNote that I've added a few example tags to `CppCoreGuidelines.md`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Sorry but we aren't confident we understand what is being suggested, and we aren't able to review and validate the executable code at this time.",
      "![image](https://user-images.githubusercontent.com/3221485/146068143-f3907999-c6e4-4a3f-9140-dcc24275d216.png)\r\n\r\nSee [https://joeedh.github.io/CppCoreGuidelines/CppCoreGuidelines](https://joeedh.github.io/CppCoreGuidelines/CppCoreGuidelines)\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742918912b45d3699275",
    "number": 1840,
    "body": "Closes #1655",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Replace structured bindings example in ES.11 (#1840)\n\nCloses #1655"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742a18912b45d3699276",
    "number": 1839,
    "body": "Rewrite copy vs move example to actually involve copy/move as opposite to be copy elided",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Looks good, thanks."
    ],
    "commit_messages": [
      "Update example in F20 (#1839)\n\nRewrite copy vs move example to actually involve copy/move as opposite to be copy elided"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742b18912b45d3699277",
    "number": 1835,
    "body": "C.147: Add missing example.\r\n\r\nLet me know if you think this is a suitable example to illustrate usage of `dynamic_cast<T&>`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Perhaps something shorter, along the lines of this?\r\n\r\n```\r\nstd::string f(Base& b) {\r\n    return dynamic_cast<Derived&>(b).to_string();\r\n}\r\n```\r\n",
      "Make it a template to emphasize the danger of not casting to a reference? Otherwise the function argument type will prevent us from ending up with an invalid object, assuming `Base` is indeed base of `Derived`.\r\n\r\n```\r\ntemplate<class T = Base>\r\nstd::string stringify(T* b) {\r\n    return dynamic_cast<Derived*>(b)->to_string(); // bad, may invoke undefined behavior\r\n}\r\n\r\n// If you must cast:\r\ntemplate<class T = Base> // intended to be called by interfaces of Derived only\r\nstd::string stringify(T& b) {\r\n    return dynamic_cast<Derived&>(b).to_string(); // ok, runtime check, cast must succeed\r\n}\r\n\r\n\r\n```\r\n",
      "How does making it a template emphasise that? What is the default template argument for? It will never be used by either of those examples, `T` will always be deduced from the function argument (or explicitly provided).\r\n\r\nThe first one needs to use `->to_string()` not `.to_string()`.\r\n\r\nI think it would be more helpful to explicitly say it dereferences a null pointer, rather than just generically referring to undefined behaviour. There are lots of ways to get undefined behaviour, we're specifically talking about a null dereference here.",
      "\r\n\r\n\r\n> How does making it a template emphasise that? What is the default template argument for? It will never be used by either of those examples, `T` will always be deduced from the function argument (or explicitly provided).\r\n\r\nIn the following example, you could safely cast to a pointer without ending up will a nullptr dereference, because the function argument type is fixed and ensures the cast will succeed. (given that Base is actually a base of Derived). Making it a templated function was meant to construct an example where dynamic casting to a pointer could actually cause UB.\r\n```\r\nstd::string f(Base& b) {\r\n    return dynamic_cast<Derived*>(&b)->to_string();\r\n}\r\n```\r\nFurthermore you are correct, the default template argument in this case will never be used for type deduction. It was meant to state intended use of this function.\r\n\r\n> The first one needs to use `->to_string()` not `.to_string()`.\r\n\r\nYou got me copy pasting there.\r\n\r\n> I think it would be more helpful to explicitly say it dereferences a null pointer, rather than just generically referring to undefined behaviour. There are lots of ways to get undefined behaviour, we're specifically talking about a null dereference here.\r\n\r\nAgreed.\r\n\r\n\r\n",
      "\r\n> In the following example, you could safely cast to a pointer without ending up will a nullptr dereference, because the function argument type is fixed and ensures the cast will succeed. (given that Base is actually a base of Derived). \r\n\r\nWhat if the dynamic type of the object is OtherDerived? Just because it has a Base base doesn't mean it is a Derived. I don't think the template version helps anything.",
      "> What if the dynamic type of the object is OtherDerived? Just because it has a Base base doesn't mean it is a Derived. I don't think the template version helps anything.\r\n\r\nRight, I did not consider that. Changed the example to the basic one. It was good to discuss this, though.\r\n\r\n",
      "If you know a priori that the cast can't fail, then you can just use `static_cast`. The whole point of dynamic cast is that it checks if the cast is correct, and so can fail. What is relevant here is whether it reports failure by returning null or throwing, not whether it fails at all."
    ],
    "commit_messages": [
      " C.147: Add missing example. (#1835)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742c18912b45d3699278",
    "number": 1829,
    "body": null,
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typos. (#1829)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742d18912b45d3699279",
    "number": 1828,
    "body": "Duplicated `is` is redundant.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in \"Using the GSL: A Tutorial and FAQ\" (#1828)\n\nDuplicated `is` is redundant."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742e18912b45d369927a",
    "number": 1824,
    "body": "Added note for narrowing to bool. See  #1797.\r\n\r\nAlso qualified gsl::narrow",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I think this should be coupled with a modification of the note on ES.87 http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es87-dont-add-redundant--or--to-conditions which explicitly contradicts it.\r\n\r\nSeparately to that, It's not obvious to me why ```bool b = ptr; // bad: narrowing``` is bad when compared to ```if (ptr) do_something(*ptr);```. If ```if (myint)``` should be interpreted as ```if (myint != 0)``` then shouldn't ```bool b = myint``` be interpreted as ```bool b = myint != 0```? ",
      "\r\nI see a fundamental difference between creating a new variable that holds a narrowed value, and testing a condition.",
      "Another fundamental difference is that imho\r\n\r\n    bool b  = <pointer expression >\r\n\r\nis much more likely a typo/error (e.g. the author expected that a function returns a boolean when in reality it returns a pointer) than `if( <pointer expression> )` .\r\n",
      "> I think this should be coupled with a modification of the note on ES.87 http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es87-dont-add-redundant--or--to-conditions which explicitly contradicts it.\r\n> \r\n> Separately to that, It's not obvious to me why `bool b = ptr; // bad: narrowing` is bad when compared to `if (ptr) do_something(*ptr);`. If `if (myint)` should be interpreted as `if (myint != 0)` then shouldn't `bool b = myint` be interpreted as `bool b = myint != 0`?\r\n\r\nYea, it is somewhat inconsistent.  I wouldn't mind allowing the assignment to ````bool```` as well for consistency.  It is less dangerous than other narrowing because all possible floating and integral values map unambiguously to bool values unlike types like ````short```` which have problems with large values and NaN.",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "ES.46 Issue 1797 - narrowing to bool (#1824)\n\n* ES.46 Issue 1797\r\n\r\n* spacing\r\n\r\n* remove spaces\r\n\r\n* dereference ptr\r\n\r\n* spacing\r\n\r\n* used contextual conversions to bool wording"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620742f18912b45d369927b",
    "number": 1820,
    "body": "Added update dictionary instructions to CONTRIBUTING.md.",
    "head_branch": "update-dictionary",
    "is_a_fork": true,
    "comments": [
      "That's useful, thanks."
    ],
    "commit_messages": [
      "Added update dictionary instructions (#1820)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743018912b45d369927c",
    "number": 1818,
    "body": null,
    "head_branch": "salman",
    "is_a_fork": true,
    "comments": [
      "Spam"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743118912b45d369927d",
    "number": 1813,
    "body": "Several fixes for [T.61](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#t61-do-not-over-parameterize-members-scary) example:\r\n\r\n- makes it compile (by fixing copy/paste related mistakes)\r\n- proper pointer types in `Link` struct",
    "head_branch": "T.61-example-fix",
    "is_a_fork": true,
    "comments": [
      "Thanks, merged."
    ],
    "commit_messages": [
      "T.61 example fixes (#1813)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743218912b45d369927e",
    "number": 1812,
    "body": "Address the following two issues by adding new core guidelines (CP.52 and CP.53)\r\n\r\n#1805 [Proposal] Locks or other synchronization primitives should not be held across suspension points in a coroutine (CP.coro section)\r\n#1806 [Proposal] Parameters to coroutines should not be passed by reference (CP.coro section)\r\n\r\nThese guidelines are adjacent in the document so I'm creating a single pull request to avoid having to resolve merge conflicts with myself.\r\n\r\nresolves #1805, resolves #1806",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> > These guidelines are adjacent in the document so I'm creating a single pull request to avoid having to resolve merge conflicts with myself.\r\n> \r\n> Git-person-mode: well, you still could have made it two commits instead of one.\r\n\r\n*shrug* I was making the changes to the same file at the same time.  One commit or two doesn't seem significant.  The commit title mentions both so there shouldn't be any confusion about what work is in this commit.\r\n\r\n",
      "Editors call: Merging, thanks!"
    ],
    "commit_messages": [
      "Add CP.52 and CP.53 guidelines, closes #1805, closes #1806 (#1812)\n\n* Add CP.52 and CP.53 guidelines\r\n\r\n* Address some feedback on CP.52\r\n\r\n* Fix PR break caused by code line longer than 100 characters in CP.53\r\n\r\n* Fix spelling error and one line of trailing whitespace\r\n\r\n* Tweaks to CP.53 based on feedback"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743318912b45d369927f",
    "number": 1808,
    "body": "I added some examples for R.34 and R.35 for Issue #1753.  I couldn't come up with a good example for R.36 so I ended up deleting it (hope that is OK).  I couldn't think of a good/safe use for a function to know the reference count.  It seems like it wouldn't be common enough to have its own rule.\r\n\r\nI also made a slight wording change to the title of R.34 to not imply that the function itself is owning the object.\r\n\r\nThanks for writing/maintaing these guidelines.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: This is promising. A few tweaks please:\r\n    - Don't remove rule R.36...  you could use [this example](https://twitter.com/herbsutter/status/1417951247735300101) I just received a few days ago, which is the `shared_ptr` instance of the general class of examples of the form `f(X /*...*/ x) { if (something) copy = x; }` where `X` is expensive to copy\r\n   - To make the merge checks pass, could you also please update the dictionary\r\n\r\nThanks!",
      "> Editors call: This is promising. A few tweaks please:\r\n> - Don't remove rule R.36... you could use [this example](https://twitter.com/herbsutter/status/1417951247735300101) I just received a few days ago, which is the `shared_ptr` instance of the general class of examples of the form `f(X /*...*/ x) { if (something) copy = x; }` where `X` is expensive to copy\r\n> \r\n>     * To make the merge checks pass, could you also please update the dictionary\r\n> \r\n> \r\n> Thanks!\r\n\r\nI restored R.36 and updated the dictionary.  The rewording of R.36 and an example could be a separate PR.  The best examples for R.36 are to avoid unnecessary reference count changes (like the twitter thread) but the rule itself is about retaining the reference count implying that the function would keep use_count() for later use - which would be an unusual thing to do.",
      "Editors call: Looking good -- please restore the R.36 bullet too and we'll be ready to merge. Thanks!"
    ],
    "commit_messages": [
      "R.34-35 shared_ptr examples (#1808)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743418912b45d3699280",
    "number": 1801,
    "body": "I also created [the issue](https://github.com/isocpp/CppCoreGuidelines/issues/1800) since I was not sure how to best approach this and if there are references to this using the letters. This solves it by using a numbered lists hence deprecating the lettered one.\r\n\r\nNew version:\r\nhttps://github.com/madeso/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile\r\n\r\nCurrent version:\r\nhttps://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#prosafety-type-safety-profile",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "the CI is hating on this\r\n     20949:3-20952:167  warning  Missing blank line before block node  no-missing-blank-lines\r\n",
      "I added a blank line to please the CI. If it doesn't I'll install npm and run remark locally.\r\n\r\nI'm not sure about your squash policy, if I should squash the commits or not, so for now I've kept them separate.",
      "meh, looks like it wanted a blank before the sub-list, not after. Anyway, I'll fix it up"
    ],
    "commit_messages": [
      "[Pro.safety] Changed lettered list to a numbered (isocpp#1800) (#1801)\n\n* Changed lettered list to a numbered (isocpp##1800)\r\n\r\n* Added blank line for CI (isocpp##1800)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743518912b45d3699281",
    "number": 1798,
    "body": null,
    "head_branch": "concrete-terminology",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Clarify \"concrete type\" and make type category descriptions consistent (closes #1780) (#1798)\n\n* Clarify \"concrete type\" and make type category descriptions consistent (closes #1780)\r\n\r\n* markdown fixup\r\n\r\nCo-authored-by: Jonathan Wakely <cxx@kayari.org>\r\n\r\n* Elaborated that we can't generally add comparison operators to C structs\r\n\r\nCo-authored-by: Sergey Zubkov <cubbi@cubbi.com>\r\nCo-authored-by: Jonathan Wakely <cxx@kayari.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743618912b45d3699282",
    "number": 1792,
    "body": "Please apologize if my added text is wrong.\r\n\r\nMy question is: the *copy and move assignment* quoted in the text are the ones implicitly generated by the compiler?\r\n\r\nIf the answer is yes then I will appreciate a clarification as the one I add (maybe written in a better English than mine :-).\r\n\r\nIf the answer is no then I do not understand the example and I need more study :-)\r\n\r\nThank you for these very useful guidelines.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I don't know what \"both will implicitly destroy an object\" means here, so I agree it should be clarified.\r\n\r\nMaybe:\r\n\r\n> Given that \"special attention\" was needed for the destructor (here, to deallocate), the likelihood that the implicitly-defined copy and move assignment operators will be correct is low (here, we would get double deletion).",
      "Editors' call: Thanks! We will merge the PR and then wordsmith in from Jonathan's suggestion."
    ],
    "commit_messages": [
      "Add clarification at C.21 (#1792)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743718912b45d3699283",
    "number": 1789,
    "body": "Concerns [C.164](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c164-avoid-implicit-conversion-operators).\r\n\r\nC.164 recommends avoiding implicit conversion operators and using `explicit` ones instead.\r\nHowever, the rule's enforcement enforces to flag *all* conversion operators. \r\n\r\nIn my opinion, this enforcement does not coincide with what the rest of the rule states.\r\n\r\nThus, the enforcement was rewritten and (hopefully) clarified. It now coincides with the rule's message. \r\n\r\n",
    "head_branch": "c164-clarify-enforcement",
    "is_a_fork": true,
    "comments": [
      "Editors' call: Thanks!"
    ],
    "commit_messages": [
      "Rewrite C.164 enforcement (#1789)\n\nRewrite C.164 enforcement to flag non-explicit conversion operators only."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743818912b45d3699284",
    "number": 1788,
    "body": "This reverts commit de20b33dabfda58b1bf210450b2e61d71e552e67.\r\n\r\nSee [this comment](https://github.com/isocpp/CppCoreGuidelines/commit/de20b33dabfda58b1bf210450b2e61d71e552e67#r50815941).",
    "head_branch": "do-not-allocate-excessive-amount-of-memory-in-example-code",
    "is_a_fork": true,
    "comments": [
      "Editors call: Yup, that's a bug. Thanks!"
    ],
    "commit_messages": [
      "Do not allocate an excessive amount of memory in example code. (#1788)\n\nThis reverts commit de20b33dabfda58b1bf210450b2e61d71e552e67."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743918912b45d3699285",
    "number": 1787,
    "body": "fix typo",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[I.9] fix typo (#1787)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743b18912b45d3699286",
    "number": 1779,
    "body": "Proposing to add an exception to es.48 in instances where the implicit cast involves upcasting objects with multiple inheritance. Due to the various rules that define memory layout it is not always clear to the average developer which upcasts can be performed implicitly. ",
    "head_branch": "es.48_implicit_exception",
    "is_a_fork": true,
    "comments": [
      "Editors call: Wouldn't this be possible without a cast?\r\n\r\n~~~\r\nbase_1* v1 = d1;\r\nbase_2* v1 = d1;\r\nbase_1* v3 = d2;\r\nbase_3* v4 = d2; \r\n// all these should work\r\n~~~\r\n\r\nOther guidelines such as Per.10 and CPL.1 discourage using `void*`.",
      "@hsutter Those you provide would work since they are performing an implicit cast to their bases. The problem I'm trying to highlight concerns keeping a base class pointer as `void*`.\r\n\r\nMy proposal is: When tracking base class pointers as `void*`, you should first cast it to the base pointer you want to maintain before assigning it to `void*`. \r\n\r\nhttps://godbolt.org/z/oPqsd6r8x\r\n\r\nIn the conversion to `void*`, you lose the offset of the base class unless you first have an explicit cast to the base. However, unless you're familiar with how the memory is laid out in all cases, it is not always clear which of these casts to `void*` can be performed implicitly. \r\n\r\nThis can lead to \r\n```c++\r\nvoid* v1 = d1;\r\nvoid* v2 = static_cast<base_2*>(d1);\r\nvoid* v3 = d2;\r\nvoid* v4 = static_cast<base_3*>(d2); \r\n```\r\nor \r\n```c++\r\nvoid* v1 = static_cast<base_1*>(d1);\r\nvoid* v2 = d1;\r\nvoid* v3 = static_cast<base_1*>(d2);\r\nvoid* v4 = d2; \r\n```\r\ndepending on the content of the base classes and the rules that determine memory layout.\r\n\r\nThe goal of this proposal is that if multiple inheritance is involved and you need to track base pointers as `void*` that developers perform an explicit cast to the base before casting to void regardless of whether or not the cast can be performed implicitly while maintaining the offset. \r\n \r\n```c++\r\nvoid* v1 = static_cast<base_1*>(d1);\r\nvoid* v2 = static_cast<base_2*>(d1);\r\nvoid* v3 = static_cast<base_1*>(d2);\r\nvoid* v4 = static_cast<base_3*>(d2); \r\n```",
      "I feel like \"multiple inheritance is involved and you need to track base pointers as void*\" that's already two strikes against the chances of your code working correctly. I'm not saying it wont work but it's not going to be easy. I'm also not saying there's a better way. There may not be in your circumstance. How common is your circumstance though? The rule in question says \"Avoid\" which to me is an acknowledgement that sometimes there's no getting around it. Does it need to outline all the exceptions or is this one special?\r\n\r\nI am weakly of the opinion that it does not need to outline all the exceptions and that this exception is not special.",
      "From the GSL maintainers call: We agree that the right thing to do is treat this as a `void*` problem, and if our users want to not get warnings on these casts they should just disable all warnings related to `void*` not just specifically these base cast warnings (they'll likely be hitting others too)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743c18912b45d3699287",
    "number": 1778,
    "body": "The example code\r\n```cpp\r\nchange_speed(23m / 10s);\r\n```\r\nis not valid. `10s` is fine, because that is defined in `std::chrono_literals`, but I'm unaware of any `operator \"\"m` in the standard library.\r\n\r\nI'm proposing changing this example to use user-defined literal syntax.",
    "head_branch": "fix-user-literal-suffix",
    "is_a_fork": true,
    "comments": [
      "Editors call: Agreed, thanks!"
    ],
    "commit_messages": [
      "Update change_speed example in P.1 to use user-defined literal syntax (#1778)\n\nCo-authored-by: Bill Rose <neptoess@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743d18912b45d3699288",
    "number": 1776,
    "body": "Not sure all of these are for the better, but think that on average they should be.",
    "head_branch": "minor-fixes",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "A mixed bag of minor fixes, mostly related to language use (I mean English, not C++) (#1776)\n\n* Minor comment fix\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Minor clarification\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Remove whitespace for clarity\r\n\r\n* Make whitespace consistent (again, it wasn't the \"bad\" here, right?)\r\n\r\n* Minor language fix\r\n\r\n* Change weird formatting for emphasis\r\n\r\n* Fix (what I believe is) a slightly distracting typo\r\n\r\n* Minor language fix\r\n\r\n* Suggest to highlight even security vulnerabilities as a possible outcome of concurrency errors\r\n\r\n* Minor language fix\r\n\r\n* Suggest to add new section for a seemingly unrelated note\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix (not sure what this intended to say in the first place?)\r\n\r\n* Minor language fix\r\n\r\n* Add minor remark\r\n\r\n* Minor language improvement\r\n\r\n* Minor language fix\r\n\r\n* Point out a bad example\r\n\r\n* Minor fixes\r\n\r\n* Minor language fix\r\n\r\n* Add missing period (the lack of which doesn't look bad here, but does a bit in the rendered html)\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Minor typo fix (but is this what was meant?)\r\n\r\n* Minor language improvement (?)\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix (?)\r\n\r\n* Add missing closing quotation mark\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Remove extra dot (or was it supposed to be three dots instead?)\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Minor language improvement\r\n\r\n* Minor formatting improvements\r\n\r\n* Minor improvements\r\n\r\n* Minor language fix\r\n\r\n* More fixing\r\n\r\n* Add missing parentheses (did I get it right?)\r\n\r\n* Minor language fix (?)\r\n\r\n* Minor language fix\r\n\r\n* Minor language fix\r\n\r\n* Fix language (but is this what was meant in the first place?)\r\n\r\n* Update heading to match content (in particular, the example)\r\n\r\n* Remove superfluous whitespace\r\n\r\n* Update also the \"bad\" example to use int*"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743e18912b45d3699289",
    "number": 1775,
    "body": "The example of C.127 won't compile because D is of abstract class type. ~Making `f()` non-pure virtual seems like the simplest fix.~",
    "head_branch": "fix-example-c127",
    "is_a_fork": true,
    "comments": [
      "There are all sort of rules recommending pure virtual interfaces. Maybe better to just put a `// ...` in the derived class, like in C.121?",
      "Yep, don't want to break a rule that's been defined just before, I overlooked that. I pushed the change to `// ...`",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Fix C.127 example (#1775)\n\n- fix for D being abstract but trying to create an object of type D in make_unique<D>()"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620743f18912b45d369928a",
    "number": 1774,
    "body": "Btw, if you don't want these at this point, please say so... Or if you want them in larger chunks. (The [instructions](https://github.com/isocpp/CppCoreGuidelines/blob/652b71b2c0a4273086a2ea62412307046b4eb385/CONTRIBUTING.md) say that separate PRs are preferred, but maybe this is a bit extreme...)",
    "head_branch": "improve-language-just-a-bit-4",
    "is_a_fork": true,
    "comments": [
      "Separate PRs for separate issues, but I think \"fix typos and grammatical errors\" throughout the document can be considered a single issue.\r\nThe fixes are definitely welcome though, thank you!"
    ],
    "commit_messages": [
      "C.86: Improve language just a bit (#1774)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744018912b45d369928b",
    "number": 1773,
    "body": "",
    "head_branch": "improve-language-just-a-bit-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.other: Improve language just a bit (#1773)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744118912b45d369928c",
    "number": 1772,
    "body": "",
    "head_branch": "improve-language-just-a-bit-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.31: Improve language just a bit (#1772)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744218912b45d369928d",
    "number": 1771,
    "body": "",
    "head_branch": "improve-language-just-a-bit-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.66: Improve language just a bit (#1771)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744318912b45d369928e",
    "number": 1770,
    "body": "",
    "head_branch": "improve-language-a-bit-more",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "F.52: Improve language just a bit (#1770)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744418912b45d369928f",
    "number": 1769,
    "body": "(because that wasn't the intended \"bad\" here, I suppose...)",
    "head_branch": "improve-code-formatting-just-a-bit",
    "is_a_fork": true,
    "comments": [
      "good catch, I just did it in https://github.com/isocpp/CppCoreGuidelines/commit/077a29ee3c4030647e51359aa9be3aa8b70c9aa2 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744518912b45d3699290",
    "number": 1768,
    "body": "",
    "head_branch": "improve-language-just-a-bit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "F.20: Improve language just a bit (#1768)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744618912b45d3699291",
    "number": 1767,
    "body": "Add monospace tags around `using` keyword in a couple of places.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "> This is wrong. The term \"using declaration\" is the formal name for one of the language features that uses the `using` keyword. It's not a \"`using` declaration\".\r\n\r\n1) I considered this too. Then I checked other cases in text. \"Using declaration\" is used as `using` declaration on Line 17760: _* Flag use of `typename` as a disambiguator outside `using` declarations_.\r\nSo at least it's about consistency. One of cases should be changed to make document more consistent.\r\n\r\n2) Also \"using declaration\" is misleading, compare: \r\n> using using declaration \r\n\r\nand \r\n\r\n> using `using` declaration \r\n\r\nThe second is better.\r\n\r\n=> To my opinion `using` declaration is better, more consistent and readable.",
      "P.S. The auto-check is broken, isn't it? The PR is not breaking anything obviously but check fails for other reasons. Should it be posted as an issue in the tracker?",
      "I'm not a native speaker and maybe @jwakely is right that `using declaration` is fine like it is, but I doubt it.\r\n\r\nAnyway, I stumbled on  _`without a using  something`_ because it initially looked like poor English. But in a second you understand what the author means (declaration of `using`). So I decided to make that place clean, clear and consistent with the other usage of _`using` declaration_ in the same text.",
      "OK, if you think current text does not need changes I'm fine with that."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744718912b45d3699292",
    "number": 1766,
    "body": "",
    "head_branch": "feature/F.56-updates",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Remove 2 redundant else, according to rule F.56 (#1766)\n\n* Remove 2 redundant else, according to rule F.56\r\n\r\n* Remove continue from example code\r\n\r\nUpdate after pull request comment."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744818912b45d3699293",
    "number": 1760,
    "body": "In accordance with the title at line 4568, use `const&` instead of `const &`.",
    "head_branch": "C.63",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "C.63: Fix a minor typo (#1760)\n\nIn accordance with the title at line 4568, use `const&` instead of `const &`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744a18912b45d3699294",
    "number": 1759,
    "body": "C++20's three-way comparison operator should respect the same rules as other\r\ncomparison operators.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "It seems a bit odd to mention `<=>` in C.86 (about symmetry for comparisons) without mentioning the C++20 changes that make that easier.",
      "Editors call: Looks great, thnks!"
    ],
    "commit_messages": [
      "Add '<=>' to comparison operators related rules (C.87, C.167) (#1759)\n\n* Add '<=>' to comparison operators related rules (C.87, C.167)\r\n\r\nC++20's three-way comparison operator should respect the same rules as other\r\ncomparison operators.\r\n\r\n* Fix a minor typo\r\n\r\nCo-authored-by: Jonathan Wakely <github@kayari.org>\r\n\r\nCo-authored-by: Jonathan Wakely <github@kayari.org>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744b18912b45d3699295",
    "number": 1758,
    "body": "This allows the example to remain simple while not misleading a beginner\r\nsuch a comparison is safe. Including an epsilon comparison or something\r\nsimilar would overly complicate this example.",
    "head_branch": "ComputationCache-comparing-doubles-without-epsilon-comparison",
    "is_a_fork": true,
    "comments": [
      "Good idea. Maybe you could replace all doubles with ints to further simplify the example.",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Change comparison to use int instead of double (#1758)\n\nThis allows the example to remain simple well not misleading a beginner\r\nsuch a comparison is safe. Including an epsilon comparison or something\r\nsimilar would overly complicate this example.\r\n\r\nCo-authored-by: Martin O'Shea <martin.oshea@native-instruments.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744c18912b45d3699296",
    "number": 1751,
    "body": "As @Skewjo commented in #1750, the phrasing between the index and the actual rule differ. This PR changes the phrasing in the index to the one used in the actual rule.\r\n\r\nCloses #1750",
    "head_branch": "f6-phrasing-in-the-index",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use the same phrasing in index and actual rule"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744d18912b45d3699297",
    "number": 1745,
    "body": "I added a few notes I think was critical to mention.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks. We discussed this addition but we think this is mostly covered by the sentence before the note.",
      "@hsutter but it does not mention conflects from within an cpp file that does use the namespace but then later uses internet api's in the same file, which this one mentions that danger (and how to fix it)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744e18912b45d3699298",
    "number": 1739,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Potentially closes #1740 ?",
      "indeed, the example won't compile otherwise, and all other Enum.N sections use capitalized names."
    ],
    "commit_messages": [
      "update Enum.7 note with consistent capitalization (#1739)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620744f18912b45d3699299",
    "number": 1735,
    "body": "Looks like the rule was changed in 768e4620 and most references were updated but this one was missed. Since the meaning is quite different I've updated this text to match the rule.\r\n\r\nNote #1667 in its current form does correctly update this text so supersedes this change when merged.",
    "head_branch": "fixsf7reference",
    "is_a_fork": true,
    "comments": [
      "Editors call: Good catch, thanks!"
    ],
    "commit_messages": [
      "Update reference to SF.7 to match text (#1735)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745018912b45d369929a",
    "number": 1724,
    "body": "Changed the example so that objects are not passed by reference to other thread contexts (though threads are properly synchronized).",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Improve example in CP.4 to not contradict F.53. (#1724)\n\nChanged the example so that objects are not passed by reference to other thread contexts (though threads are properly synchronized)."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745118912b45d369929b",
    "number": 1723,
    "body": "T.68 currently seems to conflate two almost-issues-but-not-really.\r\n\r\n- Using `T x(y);` can hit the Most Vexing Parse. `T x{y};` can't.\r\nT.68 describes this as an \"ambiguity,\" which of course it isn't;\r\nthe compiler considers that code completely unambiguous.\r\nThis issue has nothing to do with templates.\r\n\r\n- Using `auto x = T(y);` can cause unexpected narrowing conversions,\r\nor even cause a hidden `reinterpret_cast` or `const_cast`.\r\n`T x(y);` can't. `auto x = T{y};` can't. This issue cannot possibly\r\nbe described as an \"ambiguity,\" and has nothing to do with templates.\r\nThis is a pure duplicate of rule ES.23, \"Prefer the `{}`-initializer syntax.\"\r\n\r\n----\r\n\r\nFinally, on the flip side, T.68 fails to point out that unicorn\r\ninitialization tends to *cause* ambiguities in template contexts\r\nwhere you might not know what the constructor overload set of `T`\r\nlooks like.\r\n\r\nFor example, if `T` is `std::vector<std::string>`, then\r\n`T(2).size() == 2`, `T(1).size() == 1`, and `T(0).size() == 0`.\r\nContrariwise,\r\n`T{2}.size() == 2`, `T{1}.size() == 1`, and `T{0}.size()` segfaults.\r\n\r\nIf you're intending to hit a constructor with a specific signature\r\n(such as in a template, like `make_shared` or `make_unique`), as\r\nunambiguously as possible, you actually *should* use `T(x)` syntax.\r\nSo I would say not only was T.68 unsupported, its subject line\r\nwas actually precisely *backwards*, at least in the context of\r\n\"rules about templates.\"",
    "head_branch": "t68-is-es23",
    "is_a_fork": true,
    "comments": [
      "Potentially relevant reading which seems to agree with you: https://abseil.io/tips/88",
      "Editors call: We discussed it and we think the existing rule is still what we should teach, but the example should be improved, such as:\r\n\r\n    T v1(T(u)); // confusion in declaration\r\n    T v2{u};  // initializer is wrong\r\n\r\nWe'll improve the example as a separate commit. Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745218912b45d369929c",
    "number": 1716,
    "body": "Described more explicitly what pure functions are preferred over.\r\n\r\nRemoved template from example code, as it does not appear to be essential to the example.",
    "head_branch": "F.8-mention-impure-functions",
    "is_a_fork": true,
    "comments": [
      "A proper definition of what pure means would be nice. Are exceptions allowed? Is reading from a global constant allowed? Are parameters with pointers allowed?",
      "Thanks for your encouragement, @MikeGitb \r\n\r\n> A proper definition of what pure means would be nice. Are exceptions allowed? Is reading from a global constant allowed? Are parameters with pointers allowed?\r\n\r\nGood questions, thanks! Please say so if you already have the answers, and also if you have a reference to a proper definition of a pure function!  😃 \r\n\r\nBy the way, my first intention with this pull request is just to clarify what the rule (F.8) is about. So that it is obvious to anyone that it is about _pure_ versus _impure_ (rather than about _functions_ versus _other things_). A further extension of the text of this rule could also be taken care of in another pull request, of course.",
      "I agree that the key thing that is missing here is a definition and I'm not confident to provide one myself.\r\n\r\nI'm not sure the comparison to  \"impure\" functions adds anything. Firstly because I've never heard the term impure applied to a function and secondly because I think if you say pure functions are better then you implicitly mean better than functions that are not pure functions.",
      "@shaneasd\r\n> I agree that the key thing that is missing here is a definition and I'm not confident to provide one myself.\r\n\r\nThanks for your feedback. What do you think of the following one, by Brian Lonsdorf alias @DrBoolean, (which is also mentioned at https://en.wikipedia.org/wiki/Pure_function) ?\r\n\r\n> A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect.\r\n\r\nAnd do you still think my proposed adjustments to the code example would add anything?  😃 \r\n\r\n\r\n",
      "It looks like that wiki page does a pretty good job of explaining pure functions and their advantages (and also uses the term \"impure\" so maybe I was wrong about that being an uncommon term).\r\n\r\nI think at a high level that is a good definition but it might be worth subsequent clarification on what we mean by \"input\" and \"side effect\".\r\n\r\nFor input the primary question I see is whether \"input\" includes the current state of the program. Personally I would have said no it doesn't but the wiki page does say the definition has some flexibility there and in particular it notes an ambiguity where pointers are involved. given ```int* x;``` then ```f(x)``` will clearly depend on whatever x points to, not just the value of x. Does that make it inherently impure or are we including indirection? Indirection becomes trickier with something like const& where it may only exist to save us some copying.\r\n\r\nFor side effects I think there is a broad spectrum. Modifying a global variable variable is clearly a side effect because it can affect the behavior of other functions after your function has returned. Writing to std::err is less clearly a side effect because generally speaking it won't affect the rest of your program. It is, however, quite user visible so from that respect it's still a side effect. Is allocating memory a side effect? It prevents (or prevented? I don't recall) functions from being defined as constexpr (a good test of purity?). There isn't (to my knowledge) a reliable way to observe the side effects of memory allocation provided by c++ so you might argue its not an observable side effect. However allocating memory here could cause fragmentation that affects performance over there. It could even result in a total failure to allocate later on (if you're targeting 32bit especially) which is certainly observable. Execution time is another subtle consideration. If two functions return the same value but one takes twice as long to do so are they equivalent? If not then I think you could argue that therefore they both have a side effect of using time. Worth noting that a lot of functions _designed_ to take time e.g. ```this_thread::sleep_for``` inherently depend on global state.\r\n\r\nMore questions than answers there for you I'm sorry to say.",
      "Just a nitpick, because this is a pet peeve of mine:\r\n\r\n\"Impurity\" does not (and I believe it never has) prevent a function from being constexpr no matter what exact definition you use. This was even falsy claimed in the guidelines at some point.",
      "Fair point. I possibly should have used consteval instead (correct me if I'm wrong). In any case it seems to me that there is enough conceptually linking these concepts that a discussion of one would incomplete without a treatment of the other (even if it's just to make the point you have made).",
      "The short of it is that a function marked constexpr can exibit any number of sideeffects (including e.g. writing/readin from stdin/out) when not executed in the context of a core constant expression. With consteval I think it is less clear, but at the very least, consteval functions can modify parameters passed via pointer:\r\n\r\nhttps://godbolt.org/z/8bKWoa",
      "> Does that make it inherently impure or are we including indirection? Indirection becomes trickier with something like const& where it may only exist to save us some copying.\r\n\r\nI think that is the main difficulty when trying to define \"pure\". Even something simple as `std::max` isn't pure when you are applying the strictest definiton of pure that doesn't allow references as inputs (which IIRC corresponds to gcc's  __attribute__ ((const)) ).",
      "Editors call: This is a good suggestion, but \"pure\" is notoriously difficult to define. For example, incrementing a global variable or emitting output generally is indeed a side effect a pure function shouldn't do... unless it's a statistic counter and debug logging. Also, some libraries optimize \"pure\" functions and in that case the actual semantics boil down to \"it's a pure function if the programmer says it's pure.\" So we definitely sympathize with wanting to define it, but we don't think we can usefully add more without creating more questions than we're answering."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745318912b45d369929d",
    "number": 1715,
    "body": "See issue [New guideline ES.3 \"don't repeat yourself\" (was: Add section about duplicated code to P.3: \"Express Intent\") #1712](https://github.com/isocpp/CppCoreGuidelines/issues/1712)",
    "head_branch": "feature/ES.3-dont-repeat-yourself",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! This could use more examples but this is a good start and we'll merge it. We also want to cross-reference ES.11."
    ],
    "commit_messages": [
      "Add new rule ES.3 Don't repeat yourself (#1715)\n\n* Add new rule ES.3 Don't repeat yourself\r\n\r\n* Replace function example with more inclusive/neutral language\r\n\r\nAdd a reference to topic on libraries."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745418912b45d369929e",
    "number": 1714,
    "body": "See issue [Add section about duplicated code to P.3: \"Express Intent](https://github.com/isocpp/CppCoreGuidelines/issues/1712)",
    "head_branch": "feature/P.3-redundant-code",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thank you, we agree this is a good example but it's not really specific to expressing intent. Rather, it made us realize we don't have a guideline about 'don't repeat yourself' and we want one. Could you please redo this PR to add a new guideline ES.3 about \"don't repeat yourself\"? Thanks!",
      "I close this pull request and open a new one, according to Herb Sutters suggestion."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745518912b45d369929f",
    "number": 1711,
    "body": "The C-style cast in the example of constructing a `nullptr` reference appears unnecessary, in \"F.60: Prefer T* over T& when “no argument” is a valid option\". The example would also compile without any cast.\r\n\r\nOf course, `T* p = nullptr; T& r = *p;` is still not valid C++, but that is according to the intention of the example.",
    "head_branch": "F.60-Remove-C-style-cast",
    "is_a_fork": true,
    "comments": [
      "@jwakely Thank you for your approval, Jonathan. By the way, do you agree that the word \"only\" could be added to the subject of the rule, as in _Prefer T* over T& only when \"no argument\" is a valid option_ ? "
    ],
    "commit_messages": [
      "F.60: Remove C-style cast (T&) from example of invalid C++ (#1711)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745618912b45d36992a0",
    "number": 1694,
    "body": "The swap is useful to implement assignments idiomatically (e.g. copy-swap idiom).\r\n\r\nWith the current enforcement, to non-virtual classes, very simple classes (e.g. `trivially_copyable`, a struct encapsulating an stl container) are suggested to have a swap. This suggestion can be argued wrong since for very simple classes copy-swap idiom is not efficient (the creation of a third object on assignment is not needed, which copy-swap does).",
    "head_branch": "iglesias-c83-swap-for-resource",
    "is_a_fork": true,
    "comments": [
      "Why would a class encapsulating a container not want a swap function?\r\n\r\nA swap function is used for more than just the copy-and-swap idiom, e.g. std::sort, std::remove and other algorithms.",
      "I agree that the new criterion is too narrow,  but the old one it's definitely far too wide. Is there already an issue for this where one could discuss a proper criterion ?",
      "Hi @MikeGitb. I am not aware of another discussion on this issue. How can we find out if there's any?",
      "Hi @jwakely, clarifying: as the guideline is stated now, very simple classes like mentioned in the examples would be flagged if they do not contain a swap function.\r\n\r\nIs this reasonable? It feels like it is asking too much.\r\n\r\nThe guideline does not mention std::sort or any other algorithm (is it implicit, perhaps?). Do you think it should be added?",
      "> as the guideline is stated now, very simple classes like mentioned in the examples would be flagged if they do not contain a swap function.\r\n\r\nYou mentioned a class encapsulating a container. Why is that too simple to need a `swap` function? If you don't define one then swapping your type would use the generic `std::swap` which means doing a move construction and two move assignments. If you define a custom swap that calls swap on the encapsulated vector, then it uses the vector's swap which is optimal.\r\n\r\nSo again, why do you think such a class is too simple to benefit from a swap function? If you ever do anything which might try to swap it (including most of the algorithms in `<algorithm>`, or putting it in a `std::vector`) then it should define its own swap.\r\n\r\nThe whole premise of this issue (that swap is for copy-and-swap and not needed otherwise) seems flawed.\r\n\r\nFor trivially copyable types I agree that a custom swap won't have any benefit compared to relying on the default `std::swap`.\r\n",
      "How about \"non-trivially copyable value types should provide a member swap or a free swap overload\"?",
      "Although I personally still would deactivate this rule in any checker I'd use on our code base - there are just too many cases, where the improvement over std::swap is not worth the added complexity/maintence.\r\n\r\nE.g. \r\n\r\n     struct Person {\r\n        std::string name;\r\n        std::string surname;\r\n    };\r\n\r\nHaving a custom swap that swaps members individually may well be more efficient than just calling std::swap, but now I also have to update it if I ever add members to the type",
      "Not saying it isn't generally worth it - just that I wouldn't use a linter for it, because it would probably generate faaaar too many false positives and instead wait for this to pop up in a profiler.",
      "Thanks a lot to both for the explanations :-)\r\n\r\n> So again, why do you think such a class is too simple to benefit from a swap function? If you ever do anything which might try to swap it (including most of the algorithms in `<algorithm>`, or putting it in a `std::vector`) then it should define its own swap.\r\n> \r\n> The whole premise of this issue (that swap is for copy-and-swap and not needed otherwise) seems flawed.\r\n>\r\n> For trivially copyable types I agree that a custom swap won't have any benefit compared to relying on the default `std::swap`.\r\n\r\nI agree. This is what I managed to conclude reading C.83 text, the copy-swap idiom, and short experimentation. Thank you @jwakely for explaining other use cases where a custom `swap` would be beneficial.\r\n\r\n",
      "Friendly nudge 🙂",
      "Is \"value type\" the right category? I guess so, since we already say value types should be copyable elsewhere.",
      "Yes, I think so too.\r\nAlso C.83 title \"for value-like types, consider providing [...]\". With the new enforcement we are further specifying non-trivially copyable value types.",
      "Does it look ready to merge? Or is there anything else to update first?",
      "@MikeGitb, @jwakely, what do you think, can we get this done?",
      "Fine with me, but I'm not involved in the project. ",
      "Editors call: We agree this is an improvement. Thanks!"
    ],
    "commit_messages": [
      "Update C.83 with swap for resource mgmt. (#1694)\n\n* Update C.83 with swap for resource mgmt.\r\n\r\nThe swap is useful to implement assignments idiomatically (e.g. copy-swap idiom).\r\n\r\nWith the current enforcement, to non-virtual classes, very simple classes (e.g. `trivially_copyable`, a struct encapsulating an stl container) are suggested to have a swap. This suggestion can be argued wrong since for very simple classes copy-swap idiom is not efficient (the creation of a third object on assignment is not needed, which copy-swap does).\r\n\r\n* Rework C.83 according to PR comments."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745718912b45d36992a1",
    "number": 1691,
    "body": "I'm adding examples for: \r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c147-use-dynamic_cast-to-a-reference-type-when-failure-to-find-the-required-class-is-considered-an-error\r\nhttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c148-use-dynamic_cast-to-a-pointer-type-when-failure-to-find-the-required-class-is-considered-a-valid-alternative\r\n\r\nHopefully you would like them. Those 2 rules quite tricky. But with help of the example I understood them.",
    "head_branch": "c_147_c_148",
    "is_a_fork": true,
    "comments": [
      "Editors call: We're not sure this yet adds something significantly new, and the examples seem to still have problems (e.g., slicing)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745818912b45d36992a2",
    "number": 1688,
    "body": "Closes #1686.\r\nThings added/changed:\r\n\r\n- Switch from Travis CI to GitHub Actions.\r\n",
    "head_branch": "add_github_actions",
    "is_a_fork": true,
    "comments": [
      "hm, this gets \"/bin/sh: 1: hunspell: not found\"",
      "Ping?\r\n",
      "> Ping?\r\n\r\nit failed to run hunspell even though you mention it the env section, any ideas why?\r\nI see some other people use \"SPELLCHECKER_PREFER_HUNSPELL: true\" there",
      "> any ideas why?\r\n\r\nNo idea, it should work properly.\r\n\r\n> I see some other people use \"SPELLCHECKER_PREFER_HUNSPELL: true\" there\r\n\r\nThat's for [AppVeyor](https://github.com/marketplace/appveyor) I think? I've tried that, though: doesn't work yet.\r\n",
      "[Hunspell](https://github.com/hunspell/hunspell) installation and use should be working properly now. 🙂\r\n",
      "awesome, thanks"
    ],
    "commit_messages": [
      "Replace Travis CI with GitHub Actions (#1688)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745918912b45d36992a3",
    "number": 1687,
    "body": "C Program to Swap Numbers (Using Temporary Variable)",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "What open issue is this PR trying to resolve? Is there an issue noting a missing example of what shouldn't be done anymore in favor of `std::swap`?",
      "PSA: It's Hacktoberfest (https://hacktoberfest.digitalocean.com/). Other projects on Github report an increase in spammy pull requests (https://hacktoberfest.digitalocean.com/hacktoberfest-update) so be prepared for some more PRs that are not exactly high quality or on topic."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745a18912b45d36992a4",
    "number": 1685,
    "body": "The various guidelines now have consistent Enforcements.\r\nAll C-style casts are now consistently banned, including to `(void)`.\r\nCast to `(void)` should be `std::ignore =` instead.\r\nAll functional-style casts are now consistently banned,  instead of\r\n`T(x)` use `T{x}`.",
    "head_branch": "cast-to-void-cleanup",
    "is_a_fork": false,
    "comments": [
      "Another unnecessary function call for my debug build :(. \r\nBut I guess ignoring a function parameter or discarding a no-discatd return value is rare enough that it doesn't matter. ",
      "Editors call: Approved."
    ],
    "commit_messages": [
      "Cleaned up casting guidance (#1685)\n\nThe various guidelines now have consistent Enforcements.\r\nAll C-style casts are now consistently banned, including to `(void)`.\r\nCast to `(void`)` should be `std::ignore =` instead.\r\nAll functional-style casts are now consistently banned,  instead of\r\n`T(x)` use `T{x}`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745c18912b45d36992a5",
    "number": 1682,
    "body": "Add an example return value in the example of ES.50 (dont cast away const) to showcase the use of argument \"t\".",
    "head_branch": "ES.50-example-improvement",
    "is_a_fork": true,
    "comments": [
      "Could you please change the summary line in the commit log and force-push to your branch.\r\n\r\n\"Update CppCoreGuidelines.md\" is not very helpful when 99% of changes do that.",
      "Editors call: Thanks! You've convinced us the example needs fixing, but doesn't actually need a `-> decltype(...)` at all so we are changing the return type to `auto&` instead which we think is better. Thanks for pointing this out!",
      "And the reason we didn't change the body of `get_bar_impl` was because in context this is showing a refactoring from the example above it where the original had the same body that was just a comment, so if we did change it we should change it in both places to keep the examples consistent."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745d18912b45d36992a6",
    "number": 1680,
    "body": null,
    "head_branch": "string_span-excision",
    "is_a_fork": false,
    "comments": [
      "+1, I always feel slightly confused by \"cstring\" vs \"zstring\"",
      "Editors call: Approved."
    ],
    "commit_messages": [
      "Remove string_span, recommend using `std::string_view`, `std:::span,<char>` or `gsl::span<char>` instead (#1680)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745e18912b45d36992a7",
    "number": 1679,
    "body": "Removed the suggestion to use `throw()` from E.30 (\"Don't use exception specifications\"), as it was deprecated by C++11, and is rejected by C++20.",
    "head_branch": "E.30-Remove-suggestion-to-use-throw()",
    "is_a_fork": true,
    "comments": [
      "@gdr-at-ms Thanks Gabriel, for merging my little pull request! While it is just a tiny adjustment, it is kind of special to me, as it is my very first little contribution to the C++ Core Guidelines!",
      "You're welcome @N-Dekker - great to see you here :-)"
    ],
    "commit_messages": [
      "Merge pull request #1679 from N-Dekker/E.30-Remove-suggestion-to-use-throw()\n\nE.30: Remove suggestion to use `throw()`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620745f18912b45d36992a8",
    "number": 1676,
    "body": "in the spirit of the directions from #1612 (comment)",
    "head_branch": "issue1612.2",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks great, please remove the indeterminate OOE example that has been fixed in C++17 and merge. Thanks!"
    ],
    "commit_messages": [
      "merge C.150 in R.23, leaving a redirect behind (#1676)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746018912b45d36992a9",
    "number": 1675,
    "body": "this applies the directions from https://github.com/isocpp/CppCoreGuidelines/issues/1612#issuecomment-639026822",
    "head_branch": "issue1612",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "merge C.151 into R.22, leaving a redirect behind (#1675)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746118912b45d36992aa",
    "number": 1674,
    "body": "this applies the directions from https://github.com/isocpp/CppCoreGuidelines/issues/1671#issuecomment-686669318",
    "head_branch": "issue1671",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "merge R.30 and F.7, closes #1671 (#1674)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746218912b45d36992ab",
    "number": 1672,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! Merged."
    ],
    "commit_messages": [
      "added minor clarification. (#1672)\n\n* added minor clarification.\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\nUpdated comment.\r\n\r\n* Update CppCoreGuidelines.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746318912b45d36992ac",
    "number": 1667,
    "body": "#1658",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Is there a fundamental difference between adding a namespace containing my classes and adding a namespace containing someone else's? i.e. supposing namespace other consisted entirely of\r\n```\r\n   namespace other\r\n   {\r\n      class A {};\r\n      class B {};\r\n   }\r\n```\r\nclearly adding ``` using namespace other``` at the global scope would pollute the global scope but how is \r\n```\r\n    namespace mine\r\n    {\r\n        using namespace other; // bad\r\n    }\r\n```\r\n\r\nany worse than\r\n\r\n```\r\n   namespace mine\r\n   {\r\n      class A {};\r\n      class B {};\r\n   }\r\n```\r\n?\r\n\r\nboth add two names to the namespace ::mine.\r\n\r\nI guess I'm really just saying the same thing as @oldnewthing when he says \"Importing names into private namespaces is fine (that's why they're private)\". I think maybe my complain is just the naming of your example namespace \"mine\" as to me that certainly implies it's a private namespace. Perhaps using a namespace like std, gsl or boost would match your intent better?",
      "Editors call: @gdr-at-ms and @ChrisGuzak have converged on a solution and @gdr-at-ms is assigned to implement it."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746418912b45d36992ad",
    "number": 1666,
    "body": "The major change here is simply to delete parentheticals that muddy the waters\r\nby talking about files belonging to \"projects\" or \"components\". My experience\r\nhas been that in industry we have \"codebases,\" which are sometimes split up into\r\n\"repositories\" and/or \"libraries\" (which may be installed in e.g. /usr/local/include\r\nor may be used straight from their source tree), and everyone works on everything\r\nor at least knows someone who works on the other thing. Figuring out what's\r\n\"in the same project\" and what's \"in a different project\" is often fuzzy.\r\n\r\nI would try to set up the build system so that its `target_include_directories`\r\n(or equivalent) could find every header via `<>`, and then use `<>` everywhere:\r\neven for files in the \"same\" component. (This does require that you follow SF.12's\r\nadvice for \"Library creators\", though, which I admit I don't for just about all\r\nof my hobby projects.)\r\n\r\nStrangely, the \"Enforcement\" section seems to have been written by a `<>` partisan\r\nlike me, even though the rule itself is `\"\"`-endian.\r\nI copyedited the \"Enforcement\" section for grammar; did I unconsciously misinterpret\r\nwhat it was trying to say? What *was* it trying to say? Should it just be deleted?\r\n\r\n----\r\n\r\nBtw, I think there's an English style question here: what is a \"header search path\"? Is it the ordered set of directories that the compiler traverses when searching for headers (similar to `$PATH` on a POSIX system)? or is it one individual _pathname_, such as \"/usr/include\" or \"/usr/local/include\"? If the latter, then we need a different name for the ordered set of directories manipulated via `g++ -I`. In my copyedits, I assumed the former: there is _one_ \"header search path\", searched by `<>`; and `\"\"` searches the same set plus `.`.",
    "head_branch": "include-style",
    "is_a_fork": true,
    "comments": [
      "I agree with this; there should not be mention of 'project' or other names for arbitrary structure we impose on our code, but note that @gdr-at-ms in #1596 wanted to see \"structure\" referenced in a way that would prevent the case where some_library/foo.h, installs as usr/include/foo.h and then the guidance is retro-actively interpreted as preferring foo.h to \"\"-include headers in usr/include.\r\n\r\nPersonally I don't think such an interpretation is reasonable and it seems obvious the guidance applies to the code where/as it is being authored and not where it is installed to later (the author applying the guidance cannot reason about the future location and relativity of where their code is installed).\r\n\r\n> what is a \"header search path\"\r\n\r\n@Quuxplusone I thought you added this term in this PR?\r\nThe original text is \"the alternate search path\" which is interpreted from 19.2.2:\r\n> \"...searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence\r\nbetween the < and > delimiters, and causes the replacement of that directive by the entire contents of the\r\nheader. How the places are specified or the header identified is implementation-defined.\"\r\n\r\nA more precise term then might be \"implementation-defined places\", reading instead as: \"... or a header from an implementation-defined place\"\r\n\r\n>  the \"Enforcement\" section... What was it trying to say? \r\n\r\nIt enforces that headers under \"\" are relative, but only when those same headers are not also added to the <> search. So it is missing a case (e.g. the case you mentioned where a codebase may add _all_ headers to the <> search) and it should probably instead read something like \"a tool to check that files included via \"\" exist at a _relative_ location to the including file, and those included via <> do not exist relatively to the including file\".\r\n\r\nemphasis on _relative_ because the filesystem definition only may not be appropriate and it may need to take into consideration things like policy (e.g. a path like \"../../foo/bar.h\" is relative, but is \"..\" permitted?) and the implementation-defined places (e.g. <foo/bar.h> could be relative if it was installed _under_ user code)",
      "> I thought you added this term in this PR?\r\n\r\nWell, yes :) but only as a replacement for the phrase \"the alternate search path\" which has the same question (\"what does _path_ mean in this context?\") plus the additional question \"alternative to, or alternating with, what?\"\r\n\r\n> A more precise term then might be \"implementation-defined places\", reading instead as: \"... or a header from an implementation-defined place\"\r\n\r\nThat would at least be greppable back to the Standard's \"a sequence of implementation-defined places,\" but I think anything as user-facing as the Core Guidelines should avoid phrases like \"implementation-defined.\" What we mean is the thing manipulated with `-I`; we should look up what that's actually called and call it by name. GCC calls it the [\"search path\"](https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html) (or \"search directory list\"); Clang calls it the [\"include search path\"](https://clang.llvm.org/docs/UsersManual.html) (but also refers to a file being \"found within a header search path\" which sounds like the alternative definition of _path_ I mentioned).",
      "I'm ok with standardese where the alternative means using terms partial to an implementation; we do already mention \"implementation defined\" in the guidelines, e.g.:\r\n> and be aware of constructs with implementation defined meaning (e.g., sizeof(int)).\r\n\r\nWe also mention the term \"compiler\" elsewhere; it's a more approachable term, but also less accurate.\r\nI think we can fairly expect any C++ reader to be familiar with what \"implementation\" means since it's critical to understanding common concepts like \"implementation defined\" and \"undefined\" behavior which are used quite often without explanation or euphemism)\r\n\r\nTo add a few more terms to the pile:\r\n- Apple calls it \"header search path\" and \"user header search path\"\r\n- MSVC refers to \"Additional include directories\"\r\nYou've noted what GCC and clang call it.\r\n\r\nIf we do pick a term rooted in something quotable, I'd prefer it quote the standard than any specific compiler.",
      "@apenn-msft \r\n> [...] the author applying the guidance cannot reason about the future location and relativity of where their code is installed\r\n\r\nIn fact, reasoning about where the library/header is installed is not uncommon in the world outside of Windows platforms, and to some degree made very easy with build tools :-)  We have to exercise some caution about the hypotheses we make in the formulation of the guidelines.\r\n\r\n@Quuxplusone : I think _include search path_ is a reasonable term to use in the Guidelines.\r\n",
      "@gdr-at-ms \"include search path\" is ambiguous; 19.2.2 and 19.2.3 both refer to a \"search\" being conducted for both <> and \"\" forms. I think the term could work if we qualify it as \"angle-bracket include search path\", which is wordier than \"implementation-defined places\" but probably more understandable (at the cost of being less 'grep'-able).\r\n\r\nIn terms of reasoning about install locations, I guess I can only provide my interpretation, but if it were not uncommon to interpret it as applying to the install location, is there a way to have the guidance distinguish the code as it exists in the install location versus the authored location, without introducing a term that refers to the code's structure (i.e. 'project' or 'library')?",
      "> \"include search path\" is ambiguous; 19.2.2 and 19.2.3 both refer to a \"search\" being conducted for both <> and \"\" forms. I think the term could work if we qualify it as \"angle-bracket include search path\"\r\n\r\nMy mental model is that the \"quoted include search path\" is simply the \"angle-bracket include search path\" with `.` prepended. So, if `<foo.h>` is searched for in `../mylib/include`, `/usr/local/include` and `/usr/include`, then `\"foo.h\"` is searched for in `.`, `../mylib/include`, `/usr/local/include` and `/usr/include`. So there's still only one path; it's just used in slightly different ways for the two lookups. (In fact, if Clang fails to find `<foo.h>` in the angle-bracket include search path, Clang will look it up in `.` as well, and emit a warning if it is found in `.` recommending that you switch from `<>` to `\"\"`.)\r\n\r\nIf my mental model is wrong, I'd be interested to know how to adjust it.",
      "It's partially correct, except:\r\n> there's still only one path;\r\n\r\n\r\nas you noted, there are _two_ paths:\r\n>  for the two lookups\r\n\r\nthis is why the term \"include search path\" is ambiguous unless we know which form is being used.\r\nIn the case of your earlier comment, you're looking for a term to represent:\r\n> the thing manipulated with -I\r\n\r\nwhich would accrue into the search path used by the angle-bracket form (although I realize now, this (-I) is what I was referring to by the term \"alternate\", see below).\r\n\r\nWhen used in the original sentence, things becomes clearer why it needs to be qualified:\r\n> It makes it easy to understand at a glance whether a header is being included from a local relative file versus a standard library header or a header from the _angle-bracket include search path _\r\n\r\nif it were just \"include search path\", the distinction would be redundant since the header _always_ comes from the include search path (depending on which form is used).\r\nI think I also realize now why I used the term \"alternate\" and that was a nod to: \r\n> an implementation may provide a mechanism for making arbitrary source files available to\r\nthe < > search,\r\n\r\n\"alternate\" was my attempt to name the \"mechanism\", which you also named \"the thing manipulated with -I\". I'm not sure what name we could give it that wouldn't raise questions, except for using verbose standardese like \"the mechanism by which arbitrary source files are made available to the <> search\", or just not naming it all. It means we lose the third distinction, but I think that is fine versus introducing a new term or cumbersome language. e.g. just the two cases is fine too: \"relative file versus angle-bracket include search path\"\r\n(also you can copy-edit remove any other instances of \"local\", it's already covered by \"relative\")",
      "@apenn-msft \r\n> @gdr-at-ms \"include search path\" is ambiguous; 19.2.2 and 19.2.3 both refer to a \"search\" being conducted for both <> and \"\" forms. I think the term could work if we qualify it as \"angle-bracket include search path\", which is wordier than \"implementation-defined places\" but probably more understandable (at the cost of being less 'grep'-able)\r\n\r\nI am sorry, I don't see the ambiguity here.  The term designates a **set of paths** consulted by two similar algorithms.\r\n\r\nThe Core Guidelines, deliberately, are not trying to emulate the a Bourbaki-level of precision so that they can communicate the right level of information to the majority of C++ programmers, giving enough leads to the experts to further specialized interests.  So, by necessity it won't be able to satisfy every possible imaginable nuance.",
      "@apenn-msft: \"...as you noted, there are two paths: _for the two lookups_ this is why the term \"include search path\" is ambiguous unless we know which form is being used. In the case of your earlier comment, you're looking for a term to represent: _the thing manipulated with `-I`_ which would accrue into the search path used by the angle-bracket form...\"\r\n\r\nWell, in Clang and GCC at least, AFAIK, there is only one search path; it's just used in slightly different ways for the two lookups. The thing manipulated with `-I`/`-isystem` is that single search path. Lookup for `<foo>` will look _only_ in the directories in the header search path. Lookup for `\"foo\"` will look _first_ in `.` and _then_ in the directories in the header search path.\r\n\r\nDoes MSVC have separately manipulable search paths for `<foo>` versus `\"foo\"`?\r\n\r\n(Clang and GCC also have a notion of \"system headers\" versus \"[non-system] headers,\" but they use that notion only for suppressing diagnostics in system headers based on where the file is _physically_ found; I've verified that it is 100% orthogonal to whether an inclusion was _syntactically_ triggered via `<stdio.h>` or `\"stdio.h\"`.)",
      "Not MSVC, but Apple does:\r\nhttps://stackoverflow.com/questions/3429031/header-search-paths-vs-user-header-search-paths-in-xcode\r\n\r\nthat's a concrete example although I was more referring to the abstract standard language, which mentions both \"\" and <> as performing a \"search\" (and I guess Apple did take that part of the standard to heart)\r\n\r\nThe part I mean about \"include search path\" being ambiguous is that if someone asks \"is foo.h in the include search path?\" the question would have to clarified as \"it depends, are you including it using \"foo.h\" or <foo.h>?\"",
      "Ah, I see that Xcode (and Clang via `-iquote`) support putting more things in the \"user header search path\" than just `.` (and in fact Clang has a dead codepath for taking `.` _out_ of the \"user header search path,\" too). Basically Clang has one path plus an `AngledDirIdx` into it, where `AngledDirIdx` says \"if you're including via `<>`, start at this point in the path, instead of at index 0.\" (And if you're including via `#include_next`, start at an index that varies dynamically.)\r\n\r\n    // clang++ -iquote foo -I bar test.cc\r\n    #include \"x.h\"  // finds foo/x.h before bar/x.h\r\n    #include <x.h>  // finds only bar/x.h\r\n\r\nOkay, that's close enough to \"two search paths\" that I'll stop arguing for the moment, at least. ;) I do think it will be good to stay away from the unadorned term \"alternat[iv]e search path,\" though, since it's not at all obvious which of the two paths (the longer one used by `\"\"` or its shorter suffix used by `<>`) should be considered \"alternative.\"",
      "Editors call: Thanks! This looks good, just waiting to see if there's a last reply from @apenn-msft and then this is ready to merge.",
      "To summarize the current state of the various comments:\r\napenn-msft:\r\nI'm approved with comments; if we can slip in some of the copy-edits @Quuxplusone brought up, that would be great, here they are again:\r\n- \"alternate search path\" - I think we all agree it's not descriptive enough and we should refer to either the \"angle-bracket search path\" or the \"quoted search path\" (or <> and \"\" respectively)\r\n- re-reading the Enforcement section, I'm walking back my earlier comment and I think it is actually ok as-is: \"A tool could identify headers referenced via \"\" that could have been referenced with <>.\" (we just need to enforce that if \"\" is used, it is relative; we don't need the converse since one could use <> even where a header is relative if they actually intended the header from the <>-search)\r\n\r\nThese aren't new to this PR so they don't have to be addressed here. If we can fit them in great, otherwise minor enough we can also do it on another PR.\r\n\r\n@johnmcfarlane:\r\nwants to see an example that illustrates including a file from _the same_ project but using the <>-form (to dispel any myth that \"\" must always be used from within the same project). I'm not sure this can be done without giving a formal treatment of the term \"project\" or whatever we decide to call the cohesive organization of a collection of code.\r\n\r\n@gdr-at-ms:\r\nwants this notion (of a project / organization of code) to address the case where someone might interpret it to mean \"\"-include could be used if the including file will be relative _at the location of installation_ (even though it is not relative at the location where the file is authored). For example, someone does #include \"system.h\" because they know their header will be installed in usr/include alongside file system.h. My take on this is that I don't think the guideline is likely to be interpreted in this way and it naturally _has_ to apply to the code at the location it is being authored (and we don't need to give this location a formal treatment) because the guidelines are applied while _authoring_ code. I think it would be nice to address any possible misinterpretation, but if it is an unlikely one, and addressing it comes at the price of the guidelines attempting to define what is going to be such a contested and liberally-defined concept like a \"project\" or \"structure of code\", I think it's not worth it (or at least it would be a large undertaking for another PR).",
      "> These aren't new to this PR so they don't have to be addressed here. If we can fit them in great\r\n\r\nIIUC, this sentence referred only to the two bullets in your list above? which were:\r\n\r\n* _\"alternate search path\" - I think we all agree it's not descriptive enough_ — I wouldn't object to a PR that changes my text \"a header from the header search path\" to \"a header from the search path used for angle-bracket headers\". However, as I was making that commit, I realized that it's kind of tautological in context: \"use the `<>` syntax as an indication to the reader that you want to use the `<>` search path\"? I mean, duh. 🙂 Thus I'm not confident enough to just roll that addition into this PR: it might be seen as unnecessary tautology, thus slightly _increasing_ controversy and delaying the merging of this otherwise-converging-to-consensus PR. So, \"someone make a separate PR to add the words 'angle-bracket'\" sounds good to me.\r\n\r\n* _re-reading the Enforcement section_ — IIUC, this isn't a proposed change at all; you're saying that this PR's text is good as-is! So, good. 🙂",
      "> kind of tautological in context:\r\n\r\nhere's how it is used:\r\n> from a locally relative file, versus a standard library header or **a header from the header search path** (e.g. a header from another library or from a common set of includes).\r\n\r\nthe example tries to draw a distinction between 3 types of include locations:\r\n1.  locally relative (edit: just \"relative\")\r\n2. standard library\r\n3. another library, common includes\r\n\r\nWe know 1 is the \"\"-form, and 2 is the <>-form, but we are struggling to find a name for 3, which verbosely I would call \"the angle-bracket search path configurable by the user\".\r\nIf we refer to it as \"header search path\" it's ambiguous whether this is the \"\" search or the <> search path (and this matters, because the guideline is attempting to espouse that headers in 3 be located from the <> search path)\r\n\r\nLike coming up with a term for \"project\", this may be more trouble than it's worth; feel free to side-step having to name this thing by just enumerating the example:\r\n> from a relative file, versus a standard library header or a header from another library or from a common set of includes."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746518912b45d36992ae",
    "number": 1664,
    "body": "The examples in SF.12 are likely to encourage readers to always use the `\"\"` form of `'#include` when including headers from the same project ([discussion](https://github.com/isocpp/CppCoreGuidelines/pull/1596#issuecomment-673266275)). However, in larger projects this may not always be appropriate; `<>` should be used for includes located via a header search path.\r\n\r\nThis proposed solution adds an example of the later, i.e. where `<>` is used to include a header from the same project.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1664 from johnmcfarlane/patch-1\n\nAdd clarifying example to SF.12"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746618912b45d36992af",
    "number": 1662,
    "body": "",
    "head_branch": "fix-c++cs-refs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change [C++CS] refs to [SuttAlex05] Issue #1660 (#1662)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746718912b45d36992b0",
    "number": 1659,
    "body": "Fixes incorrect bad example and clarifies why examples are bad.  Addresses Issue #1656 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks, @markyin.\n\nI’m not sure what (if anything) I need to do next.  I assume that an authorised maintainer will merge the request into master at some point.  Will he/she close the issue at that point, or is that something I need to do when it has been merged?\n\nDavid  \n\n> On 10 Aug 2020, at 12:02, yinyonghong <notifications@github.com> wrote:\n> \n> \n> @markyin approved this pull request.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub <https://github.com/isocpp/CppCoreGuidelines/pull/1659#pullrequestreview-464133634>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AQAVG2X6QY2YEXY4SHCLCHTR77HTNANCNFSM4PYWVVYA>.\n> \n\n",
      "@dboyce-gh Just wait. Normally small changes are merged by a maintainer in a timely manner. Some changes are first discussed in a commitee meeting and then Herb Sutter comes back to these PRs after the meeting.\r\n\r\nSo nothing to do on your side. Just wait for the PR to be merged. When it is merged you can delete the branch and the fork if you don't need it anymore.",
      "> Some changes are first discussed in a commitee meeting\r\n\r\nTo be clear, those are meetings of the C++ Core Guidelines editors, not the C++ committee.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "ES.103 examples updated, addresses Issue #1656 (#1659)\n\n* ES.103 examples updated, addresses Issue #1656\r\n\r\n* Fix cpplint report: Res-overflow0.cpp:18:  Missing spaces around <=  [whitespace/operators] [3]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746818912b45d36992b1",
    "number": 1654,
    "body": "",
    "head_branch": "CP.2-extra-space",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "removed extra space in an example in CP.2 (#1654)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746918912b45d36992b2",
    "number": 1648,
    "body": "Part of SL.str.1 references replacing “const string*” with “string_view”, but the example code above shows “const string&” instead.\r\nThis changes the comment to the reference rather than pointer.",
    "head_branch": "Fix-SL-str-1-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in SL.str.1 (#1648)\n\nPart of SL.str.1 references replacing “const string*” with “string_view”, but the example code above shows “const string&” instead.\r\nThis changes the comment to the reference rather than pointer."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746a18912b45d36992b3",
    "number": 1646,
    "body": "It worth to mention the *structured bindings* right in the *Reason* section.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "+= structured bindings mentioning; -= '\\n' (#1646)\n\nIt worth to mention the *structured bindings* right in the *Reason* section."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746b18912b45d36992b4",
    "number": 1645,
    "body": "the alternate spelling also currently causes a spell checker alert. Sorry about this.",
    "head_branch": "fix-diaeresis",
    "is_a_fork": true,
    "comments": [
      "I fixed the dictionary, no need to change spelling."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746c18912b45d36992b5",
    "number": 1644,
    "body": "Reverts isocpp/CppCoreGuidelines#1640",
    "head_branch": "revert-1640-inclusive-language",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Revert \"replace non-inclusive adjective usage (#1640)\" (#1644)\n\nThis reverts commit cf93fce65adb76af0fe625250c1c51f8defa59d1."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746e18912b45d36992b6",
    "number": 1641,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed broken link (Res-nonnegative) (#1641)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620746f18912b45d36992b7",
    "number": 1640,
    "body": "Disclaimers: I am not an activist, I don't care if any of the suggested changes are accepted. Also I am not a technical writer, I make no claim to be an expert on inclusive language, there may be better alternatives to the changes I suggest. I am also not part of any marginalized groups, this is not about me.\r\n\r\nThe changes here attempt to improve inclusiveness, that means making all people feel welcome. To that extend, words which are known or alleged to support discrimination are avoided when adequate (or better) neutral words exist.\r\n\r\nI make no claim that in it's current state the document is \"offensive\" to anyone, though activists might make such claims.\r\n\r\nIf anyone wants to contest my suggestions, I would suggest to first read through guidelines such as:\r\n* https://developers.google.com/style/inclusive-documentation\r\n* https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html\r\n\r\nRegarding metaphors and idioms, I am sure there are several more left in the document, but much more difficult to grep for. I just fixed a few as examples. Metaphors are mostly a hurdle for readers whose first language is not English.\r\nSome examples remaining in the document:\r\n\r\n* \"Realistic types, such as the standard-library iterators can be made to exhibit similar anti-social tendencies.\" (\"anti-social\" is likely a metaphor here)\r\n* \"And don't get us started on macros!\" (\"don't get me started\" is an idiom)\r\n* \"There is a useful function lurking here\" (\"lurking\" is a metaphor here)\r\n\r\nFrom the code comment:\r\n\r\n* blind==unthinking is obviously ableist against the blind\r\n* strong==good, weak==bad is ableist language affecting people with weak physiques (disabilities)\r\n* poor=bad affects people of low income\r\n* pretty=good, ugly==bad affects people with self-esteem issues\r\n* insanity=bad is healthyist, also it is a medical condition, not to be abused as joke or emphasis\r\n\r\nThe adjectives can still be used when their main meaning applies, a strong horse, a poor person, a pretty girl, an ugly caricature. I did not change instances of \"strong opinion\" though, I am not sure if it should.",
    "head_branch": "inclusive-language",
    "is_a_fork": true,
    "comments": [
      "@jwakely: I reverted most changes that you did not agree with, two comments left for a second review.",
      "Neither of your links mentions anything about the word \"ugly\". Is it really a problem in the context of code?",
      "> Neither of your links mentions anything about the word \"ugly\". Is it really a problem in the context of code?\r\n\r\nI can't find a reference about that word in particular, actually same about the usage of the word \"pretty\". Most word lists that I can find online are about disabilities, gender, ethnicity. Lookism does not have as strong a lobby. So this might be my own inference. I am happy to revert those, too, if you say so.",
      "I reverted several more instances of \"poor\" and \"strong\".",
      "@jwakely : github has a \"Resolve conversation\" button, if you could please resolve discussions that you started which I commented on, that would help to see how far we are off a mergeable solution. I resolved all discussions myself where I reverted to original or applied suggestions.",
      "> Metaphors are mostly a hurdle for readers whose first language is not English\r\n\r\nBy the way, as someone who learned English as an adult, I believe this statement is false and mildly insulting. But it's an opinion based on one person's experience; I'd like to see evidence.",
      "Yes, true, sorry. I guess a more neutral way is to just say metaphors are a burden for anyone not familiar with them, just like English words that are not common, abbreviations, jargon, Latin, cultural references...",
      "Looks great, thanks again!",
      "This should have been merged into `master`, not `gh-pages`, right?",
      "@johelegp Thanks, good catch. I've reverted and in the interests of efficiency will just apply the final edits manually to master* as a separate commit instead of asking to retarget this PR. But it is approved and we'll jump through the right hoop to effectively merge it as is. Thanks again @tkruse and everyone!\r\n\r\n* [sic] !\r\n"
    ],
    "commit_messages": [
      "replace non-inclusive adjective usage (#1640)\n\nblind==unthinking is obviously ableist against the blind\r\ninsanity is a medical condition, not to be abused as joke or emphasis"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747018912b45d36992b8",
    "number": 1638,
    "body": "As a general rule, `operator()` should be const-qualified.\r\nThe exceptions are few and far between.\r\n\r\nI was actually looking for a Guideline on that subject;\r\nI grepped for `operator()` and found that not only is there\r\nno such Guideline yet, the doc actually contained these\r\nplaces that (needlessly) violated the general rule.",
    "head_branch": "constop",
    "is_a_fork": true,
    "comments": [
      "boost.accumulators turns non-const operator()s into an art form. Good point for these examples, though.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Const-qualify operator()s. NFC. (#1638)\n\nAs a general rule, `operator()` should be const-qualified.\r\nThe exceptions are few and far between.\r\n\r\nI was actually looking for a Guideline on that subject;\r\nI grepped for `operator()` and found that not only is there\r\nno such Guideline yet, the doc actually contained these\r\nplaces that (needlessly) violated the general rule."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747118912b45d36992b9",
    "number": 1637,
    "body": "Using `this` in a free function makes the program ill-formed;\r\nit doesn't magically give you a `std::thread*`.",
    "head_branch": "threads",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Remove a broken example, and copyedit. (#1637)\n\nUsing `this` in a free function makes the program ill-formed;\r\nit doesn't magically give you a `std::thread*`."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747218912b45d36992ba",
    "number": 1632,
    "body": "The anti-CamelCase comments are at odds with rule NL.8 which offers up CamelCase as a viable naming style.\r\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#nl8-use-a-consistent-naming-style\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Removed anti-CamelCase comments. (#1632)\n\nThe comments were:\r\n// ???Must we suffer CaMelcAse???\r\nand\r\n// ugly CaMeLcAsEvArIaBlE"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747318912b45d36992bb",
    "number": 1631,
    "body": "The word 'template' is often wrongly used as an adjective to the 'thing'\r\nit becomes when instantiated.\r\n\r\nThis pull request 'blindly' replaces the occurences of [tT]emplate [cC]lass and [fF]unction [tT]emplate.",
    "head_branch": "thing_templates__not__template_things",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Use '<thing> template' i.s.o. 'template <thing>' (#1631)\n\n* Use '<thing> template' i.s.o. 'template <thing>'\r\n\r\nThe word 'template' is often wrongly used as an adjective to the 'thing'\r\nit becomes when instantiated.\r\n\r\n* Expand succinct formulation for readability\r\n\r\nCo-authored-by: Kristoffel Pirard <kristoffel.pirard@vanhool.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747418912b45d36992bc",
    "number": 1629,
    "body": "The rules NL.11 (Make literals readable) and NL.15 (Use spaces\r\nsparingly) are placed in inverted order in the text flow, swap them.",
    "head_branch": "bring-nl-11-and-nl-15-in-order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[NL.{11,15}] Bring rules in order (#1629)\n\nThe rules NL.11 (Make literals readable) and NL.15 (Use spaces\r\nsparingly) are placed in inverted order in the text flow, swap them."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747518912b45d36992bd",
    "number": 1628,
    "body": "The original example uses a std header to demonstrate transitive\r\ninclusion, which makes it relate to real code, on the one hand. Yet, the\r\nheader is too long to be put in the example, so it's omitted and thus\r\nthe example is rather obscure, on the other hand.\r\n\r\nSwitch to a constructed example which uses a short header which is\r\npresented right there to make the point clearer.",
    "head_branch": "sf-10-simplify-example",
    "is_a_fork": true,
    "comments": [
      "The original example demonstrates a common beginner blunder, how is it \"obscure\"?",
      "Editors call: We prefer the original example because it's a real example and a little more concise.",
      "> The original example demonstrates a common beginner blunder, how is it \"obscure\"?\r\n\r\nIt's obscure as readers need to look up where `getline()` is supposed to be declared (e.g. I don't know by heart because I don't use the function much). To me, the real issue with violating the rule is that code gets fragile and prone to breaking on refactoring of included headers. Compile-time errors at the time offending code (i.e. missing an `#include`) is written isn't a big issue, IMHO.\r\n\r\nSo in short, I believe currently the example fails to demonstrate what the rule is good for.\r\n\r\nIf you aim for examples which are rather concise and less explanatory (require readers to do research), I don't mind."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747618912b45d36992be",
    "number": 1627,
    "body": "In one example, a _bad_ annotation was marking a perfectly fine function\r\nname instead of the incorrect local variable declaration.\r\n\r\nIn another example, a _fine_ annotation of the aforementioned variable\r\ndeclaration was missing.",
    "head_branch": "sf-10-fix-example-annotations",
    "is_a_fork": true,
    "comments": [
      "\"bad\" refers to the entire first example, and should not be a comment, but rather the standard \"Example, bad\" heading\r\n\r\nstring s; is \"fine\" in both examples, in the same meaning of \"fine\" as used here, that is \"always compiles\"\r\n\r\n",
      "> \"bad\" refers to the entire first example, and should not be a comment, but rather the standard \"Example, bad\" heading\r\n\r\ntrue, will adjust later\r\n \r\n> string s; is \"fine\" in both examples, in the same meaning of \"fine\" as used here, that is \"always compiles\"\r\n\r\nDepends on whether _\\<iostream\\> exposes the definition of std::string_ is guaranteed. Is it part of the _iostream_ 's contract? Not really, IMHO.\r\n\r\nAll in all, I believe the example is a too complex demonstration of a simple principle.",
      "> Is it part of the iostream 's contract? Not really, IMHO.\r\n\r\nyes it is, because of getloc()",
      "Editors call: Thank you, we'll merge this and add an \"Example: good\" tag as well."
    ],
    "commit_messages": [
      "[SF.10] Fix annotation of the _bad_ example (#1627)\n\nThe _bad_ example wasn't annotated as such and a perfectly fine function\r\nname was marked bad.\r\n\r\nAnnotate the example as bad and remove the misleading function name\r\nannotation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747718912b45d36992bf",
    "number": 1626,
    "body": "There are some inconsistency in spacing and I corrected them\r\n\r\n**corrections**\r\n \r\n1. templates  \r\n`template <class T>` ➝ `template<class T>`\r\n\r\n2. classes\r\n    ```cpp\r\n    class A  ➝  class A {\r\n    {           };\r\n    };\r\n    ```\r\n3. functions\r\n    ```cpp\r\n    void foo {  ➝  void foo\r\n    }              {\r\n                   }\r\n    ```\r\n4. lambda expressions  \r\n`[](buffer& b){ ➝ [](buffer& b) {`\r\n\r\n---------\r\n\r\n**references**\r\n\r\nI applied spacing to the following priorities\r\nHowever, there were cases in which several forms were used in a single document\r\nIn such cases, more frequently used forms were applied\r\n\r\n1. TC++PL\r\n2. [NL: Naming and layout](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#nl-naming-and-layout-rules)\r\n3. [the standard](http://eel.is/c++draft)\r\n4. other guidelines such as [google c++ style guide](https://google.github.io/styleguide/cppguide.html)",
    "head_branch": "spacing",
    "is_a_fork": true,
    "comments": [
      "seeing as NL.17 recommends \"Stroustrup style\" as the default, I would say TC++PL would be the golden source here",
      "I could find there is no space between class's constructors and its initializer lists in TC++PL\r\nand so I will make an additional patche for this\r\n\r\nFor example the space between `:` and `var_` should be removed  \r\n\r\nas is\r\n```\r\nclass A {\r\npublic:\r\n  A(int var) : var_(var)\r\n  {\r\n  }\r\nprivate:\r\n  int var_;\r\n};\r\n```\r\n\r\nto be\r\n```\r\nclass A {\r\npublic:\r\n  A(int var) :var_(var)\r\n  {\r\n  }\r\nprivate:\r\n  int var_;\r\n};",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Adjust the spacing for consistency (#1626)\n\n* Adjust the spacing for consistency\r\n\r\n* Adjust the spacing for consistency-2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747818912b45d36992c0",
    "number": 1625,
    "body": "Based on :\r\nhttps://www.modernescpp.com/index.php/c-core-guidelines-type-erasure-with-templates",
    "head_branch": "ExampleForTypeErasure",
    "is_a_fork": true,
    "comments": [
      "As you point out it's based on @RainerGrimm 's  blog post about this Core Guidelines rule - is he ok with the example circling back here?\r\nIn any case \"Concept\" is a rather loaded word",
      "Hi,\n\nI'm totally fine with it and I hoped for it.\n\nMy post about the C++ Core Guidelines and my book about the C++ Core \nGuidelines should help to improve the original document. The same holds \nthe other way around.\n\nRainer\n\nOn 5/28/20 4:06 PM, Sergey Zubkov wrote:\n>\n> As you point out it's based on @RainerGrimm \n> <https://github.com/RainerGrimm> 's blog post about this Core \n> Guidelines rule - is he ok with the example circling back here?\n> In any case \"Concept\" is a rather loaded word\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub \n> <https://github.com/isocpp/CppCoreGuidelines/pull/1625#issuecomment-635371652>, \n> or unsubscribe \n> <https://github.com/notifications/unsubscribe-auth/AEN5M5PPVL7BKXLXIYO3P2LRTZVWTANCNFSM4ND46SKA>.\n>\n-- \n\n-- \nModernes C++\n\nOnline Seminare (Deutsch):\n- Embedded Programmierung mit modernem C++: 07.07.2020 - 07.09.2020\n\nOffene Seminare (Deutsch):\n- Embedded Programmierung mit modernem C++: 24.08.2020 - 26.08.2020\n\nOnline seminar (English):\n- C++11 and C+14: 13 July 2020 - 17 July 2020 (5 * 1/2 day)\n- Clean Code with modern C++: 03 August 2020 - 07 August 2020 (5 * 1/2 day)\n\nRainer Grimm\nCottbuser Weg 20\n72108 Rottenburg\n\nTel.: +49 7472 917441\nMobil: +49 152 31965939\nMail:schulung@ModernesCpp.de\nwww.ModernesCpp.de  (Deutsch)\nwww.ModernesCpp.net  (English)\n\n",
      "Editors call: T.49 should have an example, but one that shows when and how to remove type erasure with something similar. This example belongs better in T.5 -- would you please move it there instead?",
      "I moved the example to T.5.\r\nI changed the type of `concept_` to `shared_ptr` as the rule T.5 says.",
      "@hyukmyeong Thanks, I have fixed everything."
    ],
    "commit_messages": [
      "T.5: Add an example for Type erasure (#1625)\n\nBased on :\r\nhttps://www.modernescpp.com/index.php/c-core-guidelines-type-erasure-with-templates\r\n\r\nCo-authored-by: Vincent Legarrec <vincent.legarrec@csdental.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747918912b45d36992c1",
    "number": 1623,
    "body": "",
    "head_branch": "F36-Typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "[F.36] Typo (missing s) (#1623)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747a18912b45d36992c2",
    "number": 1621,
    "body": "This PR is along the same lines as #1610. The general rule is \"don't touch raw resources with your hands; use an RAII factory instead.\"",
    "head_branch": "cp61",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Expand CP.61 to talk about the general \"factory\" pattern. (#1621)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747b18912b45d36992c3",
    "number": 1619,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "code typo in R.20 (#1619)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747c18912b45d36992c4",
    "number": 1618,
    "body": "Use explicit `new` instead of `make_shared()` when you must hold out-of-scope `weak_ptr` to your `shared_ptr` object to force resource block allocation/deallocation separately from control block. \r\n\r\nSee detailed explanation here: https://dev.to/fenbf/how-a-weakptr-might-prevent-full-memory-cleanup-of-managed-object-i0i",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "What you describe sounds like a bug to me. I wouldn't expect a weak pointer to keep the underlying object alive though I could be mislead in my expectation. Is this vendor specific? I just tried  this code in msvc\r\n\r\n```\r\nstruct X\r\n{\r\n    ~X()\r\n    {\r\n        std::cout << \"destroying\\n\";\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    {\r\n        std::weak_ptr<X> weak;\r\n        {\r\n            auto shared = std::make_shared<X>();\r\n            weak = shared;\r\n        }\r\n        std::cout << \"Hello World!\\n\";\r\n    }\r\n    std::cout << \"end\\n\";\r\n}\r\n```\r\n\r\nand it produced the output\r\n```\r\ndestroying\r\nHello World!\r\nend\r\n```\r\nsuggesting that X was destroyed when the shared_ptr went out of scope as one would expect rather than when the weak_ptr went out of scope.\r\n\r\nAm I misunderstanding?",
      "The object gets destroyed,  but if make_shared is used, the object and the control block are allocated together and thus the allocated block can only be released once the control block us destroyed(a.k.a when the last (weak) pointer is destroyed)",
      "oh I see so the concern is the memory used to store the object rather than the lifetime of the object itself. Fair enough.",
      "Editors call: Thanks for the suggestion, we considered it and we think this is not a case we want to cover, and using explicit new is not a desirable workaround."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747d18912b45d36992c5",
    "number": 1617,
    "body": "These rules have no examples, no rationale, no enforcement.\r\nAs such, I don't think they belong in the list of Guidelines.",
    "head_branch": "context-switches",
    "is_a_fork": true,
    "comments": [
      "It does seem like the only people who are going to properly understand this rule as written are people for whom it's already obvious.",
      "the triple-question marks are basically \"// TODO\", and however the CPUs improve, this is still a notable hidden cost.\r\n\r\nAn direction to useful wording for CP.40 could be something like \"avoid creating too many threads, prefer fixed-size thread pools instead\" and for Per.30 perhaps pin critical thread to a dedicated core",
      "But who benefits from having these rules here in their current form? The assertion made in this pull request (at the risk of putting words in Quuxplusone's mouth) is that the end user doesn't benefit. Yes they could be completed and then they would be good actionable advice but that's not the case currently. If the benefit is to the authors of the guidelines then wouldn't it be better to have these as an Issue in github. There appear to be plenty of examples of this.\r\n\r\nPerhaps this is a placeholder for structural reasons (e.g. to ensure nothing else claims the index)?",
      "Editors call: We agree with the point that the rules shouldn't stay empty, but we also believe that they ought to be in the \"C++ Core\" Guidelines because C++ is about performance, this is often violated accidentally. We continue to plan to fill these in."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620747f18912b45d36992c6",
    "number": 1615,
    "body": "\"Make your code thread-safe\" usually means \"don't use global state.\"\r\nAdvice to replace global state with `thread_local` state is usually misguided.\r\nhttps://quuxplusone.github.io/blog/2018/11/14/fiber-local-storage/",
    "head_branch": "cp1",
    "is_a_fork": true,
    "comments": [
      "> I think this is a typo\n> \"context.\" --> \"context\".\n\n\nIn English English, (Oxford rules; Economist rules), the full stop (period\nin US English) goes outside the double quotes in this case (but the\npositioning is flexible depending on context).\n\nIn American English (Chicago rules, etc), the period (full stop in English\nEnglish) goes inside the double quotes.\n\nI don't know which dialect the document is written in, but I guess it is\nprobably American and not English.\n\n-- \nJonathan Leffler <jonathan.leffler@gmail.com>  #include <disclaimer.h>\nGuardian of DBD::Informix - v2018.1031 - http://dbi.perl.org\n\"Blessed are we who can laugh at ourselves, for we shall never cease to be\namused.\"\n",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "CP.1: Simplify example, show good example, expand on rationale (#1615)\n\n\"Make your code thread-safe\" usually means \"don't use global state.\"\r\nAdvice to replace global state with `thread_local` state is usually misguided.\r\nhttps://quuxplusone.github.io/blog/2018/11/14/fiber-local-storage/"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748018912b45d36992c7",
    "number": 1614,
    "body": "Following from #1600 (after a glowing 2 out of 2 thumbs up)\r\n\r\nAs mentioned in the issue this rule is for the benefit of developers who use forward declarations and is irrelevant to those who don't. It's not advocating one way or the other.\r\n\r\nI'm curious to know if this is how everyone does it and it just wasn't obvious to me or whether there are good reasons not to do it this way.\r\n\r\nI also highlight that the reason given for closing #1248 was that modules make the problem go away which I think is also true here (?). Personally I would prefer the cpp core guidelines to be useful to me now rather than when my code is ported to c++20 but it's worth highlighting (if only to save people searching for precedent).\r\n\r\nNote: The bad example may look worse than it needs to (it's not the way I'd have written it) but this is at the insistence of the linter.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! We've thought about it and have three concerns: It leads to repetition; the entire set of enclosing namespace names would be repeated for every class forward declaration (and wouldn't the same be expected to be done for forward declarations of non-member functions too?). We try to document guidance that has community consensus from wide experience and we're not aware of broad experience using this style. It's one of several things that would need to be done when moving a class from one namespace to another.\r\n\r\nIf there is strong experience with this approach please reply in a followup comment and we could reopen and look at it again.",
      "Thanks @hsutter \r\n\r\nI think your concerns are valid reasons why it's not definitely a good idea (and as such it shouldn't be in the core guidelines) but haven't convinced me that it's definitely a bad idea. With that in mind I'll continue to do it this way myself and encourage others at my company to try it. If we do see great success I may return!\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748118912b45d36992c8",
    "number": 1613,
    "body": "For C++17's guarantees, see\r\nhttps://stackoverflow.com/questions/38501587/what-are-the-evaluation-order-guarantees-introduced-by-c17\r\n\r\nThe line of code\r\n\r\n    int x = ++i + ++j;\r\n\r\nshould never ever pass code review. So it's not \"OK\" and shouldn't\r\nbe used as a positive example.\r\n\r\nVice versa, there is literally nothing wrong with\r\n\r\n    v[i] = v[j] + v[k];\r\n\r\nIt does two loads, an add, and a store. Its single side-effect\r\n(on v[i]) is completely unaffected by any aliasing relationships\r\nbetween i, j, and k. So the comment was misleading. But rather\r\nthan mark it \"OK\", let's just show an unambiguously bad example\r\ncreated by combining the two examples above.",
    "head_branch": "es40",
    "is_a_fork": true,
    "comments": [
      "one could weakly argue that incrementing two (different) things in an expression while also assigning is OK because K&R does it, but I have to read such expressions a few times over every time.",
      "Editors call: We think that the text is okay as is, with the note reminding about aliasing."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748218912b45d36992c9",
    "number": 1611,
    "body": "For some reason the trailing `e = 3` seemed more of a red flag\r\nthan anything else about this line. Let's imply that the programmer\r\nis trying to make some constants for hexadecimal translation.",
    "head_branch": "es10",
    "is_a_fork": true,
    "comments": [
      "If you were creating constants for hexadecimal translation wouldn't you say ```int a = 0xa```? At which point wouldn't you conclude there's no need for a custom constant at all?\r\n\r\nThe situation where I most commonly encounter seemingly arbitrary single letter numeric variables is implementations of papers that define those variables. If you're implementing some physics simulation paper then it's probably reasonable to use ```c``` to denote the speed of light despite it being incomprehensible to a reader unfamiliar with the context. Of course normally I'd expect a comment linking to the paper...",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Tweak one of ES.10's examples for verisimilitude. (#1611)\n\nFor some reason the trailing `e = 3` seemed more of a red flag\r\nthan anything else about this line. Let's imply that the programmer\r\nis trying to make some constants for hexadecimal translation."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748318912b45d36992ca",
    "number": 1610,
    "body": "R.12 and R.13 were both written for a C-style world where the idea was\r\nto get raw resource pointers and then quickly \"give\" them to RAII types.\r\nThe modern C++ approach is actually to use RAII types exclusively,\r\nand never handle raw resource pointers even for an instant. R.13 was\r\nkind of getting there, in that it knew `make_shared` existed; but we\r\ncan strengthen the rule by just saying \"Please, use `make_shared`.\"\r\n\r\n\"Raw pointers are like raw meat: don't touch them with your hands.\"\r\n\r\nAlso update for C++17: it's no longer true that `shared_ptr<T>(new T())`\r\ncan ever cause a leak due to interleaved evaluations.\r\nBut it's still a nasty habit. Use `make_shared`.",
    "head_branch": "raii",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748418912b45d36992cb",
    "number": 1608,
    "body": "The old example was irrelevant to C.121, but belonged with C.35.",
    "head_branch": "abstract",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748518912b45d36992cc",
    "number": 1606,
    "body": "Also mention the strong exception guarantee and maintainability; the\r\n\"obviously correct\" code in the old snippet was in fact NOT correct.\r\n\r\nAlso fix a ton of grammar issues in these sections.",
    "head_branch": "copy-and-swap",
    "is_a_fork": true,
    "comments": [
      "Didn't the standard have wording at some point that effectively forbid self move, because the implementation is allowed to assume that, if it has an r-value reference, that reference is the only one referencing that particular object? Has that been cleared up?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748618912b45d36992cd",
    "number": 1605,
    "body": "",
    "head_branch": "deleted-dtor",
    "is_a_fork": true,
    "comments": [
      "huh, this was also a mismatch between the name of the actual rule and this line. Thanks"
    ],
    "commit_messages": [
      "You should never =delete a destructor! (#1605)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748718912b45d36992ce",
    "number": 1601,
    "body": "* dumb -> inefficient",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Editors call: We agree, thanks for the improvement."
    ],
    "commit_messages": [
      "Modified slightly impolite language (#1601)\n\n* dumb -> inefficient"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748818912b45d36992cf",
    "number": 1596,
    "body": "… including file\r\n\r\nThe current guidance on SF.12 can be over-applied and devolves into \"always use <>\" because all compilers support adding include directories to the <> search. In this case, even the current directory may be added and so it is always possible to use <> for every header. Applying the guidance then devolves into an undesirable state where <> is always used and include\"\" is never used.\r\n\r\nInstead, the proposed guidance leverages and encourages the distinction between <> and \"\" to create an easy-to-understand rule that the original guidance hints at and that most developers already follow and understand: \"\" is for local headers and <> is for library and external headers.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "I like it.",
      "If you're writing a library, you *must* use the angle-bracket form:\r\n\r\n    // inside mine/mine.h\r\n    #include <mine/detail.h>\r\n\r\nThis line will work no matter whether `mine/mine.h` is located in `~/sourcetree/src/` or in `/usr/include` — basically, if anybody ever includes this file via `#include <mine/mine.h>`, then we automatically know that the exact same include-search-path will be able to find `<mine/detail.h>`. On the other hand, doing `#include \"detail.h\"` might or might not work (depending on compiler options that ought to be irrelevant to us as library writers).",
      "> If you're writing a library, you _must_ use the angle-bracket form:\r\n\r\nCorrect; I didn't mention it in SF.12 because it's not an exception to the rule: including \"mine/detail.h\" is not an option. But there should be another guideline that says as a library creator, you should place your headers along a unique path (author/component/header.h) and include your own headers the same way your users will (e.g. prefer <quux/mine/detail.h> vs \"detail.h\"). Checking the GSL I can't find it such a guidance, so I created an issue for us to go create one:\r\nhttps://github.com/isocpp/CppCoreGuidelines/issues/1609\r\n\r\n",
      "@Quuxplusone can you describe in detail more what you meant?\r\n\r\nI think I misinterpreted it when I created:\r\nhttps://github.com/isocpp/CppCoreGuidelines/issues/1609\r\n\r\nI mistakenly thought using \"detail.h\"  from mine.h would not be found when included from user code, but I'm reminded that the include is relative from the including file (and not just the final cpp file). In this case, as @MikeGitb suggests, I think it's reasonable for library writers to also use the #include \"detail.h\" form since this will almost always locate the same detail.h as #include <mine/detail.h>.\r\n\r\nIf we also exactly follow the guideline of this PR for SF.12, then it would also suggest that the latter form is preferred (e.g. detail.h will always be at a local relative path to mine.h, so #include \"detail.h\" should be preferred)",
      "Hmm.\r\n\r\n[Bloomberg BDE guideline 4.3.4](http://bloomberg.github.io/bde/knowledge_base/coding_standards.html#include-directives): \"All include directives must use angle brackets (i.e., `'< >'`); the quoted form must not be used.\"\r\n\r\n[JSF AV Rule 33](http://stroustrup.com/JSF-AV-rules.pdf): \"The `#include` directive _shall_ use the `<filename.h>` notation to include header files. [...] The include form `\"filename.h\"` is typically used to include local header files. However, due to the unfortunate divergence in vendor implementations, only the `<filename.h>` form will be used.\" (No further information on what this implementation divergence might be.)\r\n\r\n[Google C++ style guide](https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes) doesn't directly address it, but shows a mix of `\"\"` and `<>` essentially matching Facebook's guideline. Interestingly, they _do not_ treat `\"\"` paths as relative to the current directory; \"base/foo.cc\" will do `#include \"base/foo.h\"`, not `#include \"foo.h\"`.\r\n\r\n[Facebook HHVM guidelines](https://github.com/facebook/hhvm/blob/master/hphp/doc/coding-conventions.md): \"Use double quotes for Folly and HHVM headers, and angle brackets for all others.\"\r\n\r\nSo I guess the trouble with `\"\"`, if there is one, is illustrated by Google's guideline: they clearly expect that if \"myProject/src/base/foo.cpp\" contains the line `#include \"base/foo.h\"`, it will start its search in `myProject/include/`, whereas @MikeGitb expects it to start its search in `myProject/src/base/`. These can't both be true for the same project, right?\r\n\r\nThere may be a distinction to be made (even though none of the guidelines above explicitly make this distinction) between \"public-facing headers\" and \"private implementation headers.\" For example, if your project contains\r\n\r\n    myProject/\r\n    - src/\r\n    - - base/\r\n    - - - foo.cpp\r\n    - - - foo_internal.h\r\n    - include/\r\n    - - base/\r\n    - - - foo.h\r\n    - - - config.h\r\n\r\nthen it might be reasonable for \"src/base/foo.cpp\" to contain the lines\r\n\r\n    #include <base/foo.h>  // never \"foo.h\" or \"base/foo.h\"\r\n    #include \"foo_internal.h\"  // or \"base/foo_internal.h\" in Google terms?\r\n\r\nHowever, I hope we all agree that the public-facing header \"foo.h\" should never ever contain\r\n\r\n    #include \"../../src/base/foo_internal.h\"  // NO!\r\n\r\nand if the public-facing header \"foo.h\" needs to consume one of its public-facing siblings, it should do it via its \"public-facing identifier\"\r\n\r\n    #include <base/config.h>  // never \"config.h\" or \"base/config.h\"\r\n\r\nI believe Bloomberg gets by with the simpler guideline (which is also what I was pushing for) simply because they never write \"private implementation headers.\"",
      "> So I guess the trouble with \"\", if there is one, is illustrated by Google's guideline: they clearly expect that if \"myProject/src/base/foo.cpp\" contains the line #include \"base/foo.h\", it will start its search in myProject/include/, whereas @MikeGitb expects it to start its search in myProject/src/base/. These can't both be true for the same project, right?\r\n\r\nIt's quite simple: On clang, gcc, msvc and a few other compilers that I don't remember,\r\n\r\n     #include \"some/path/header.h\"\r\n\r\nwill **first** look relative to the current directory (the directory in which the file currently being processed resides) and **second** relative to whatever include paths are built-in to the compiler (/usr/include) or have been specified on the command line (`-I/path/to/lib/foo/include`).\r\n\r\n    #include <some/path/header.h>\r\n\r\nWill **only** look relative to the paths built-in or specified on the command line.\r\nNot sure what implementation divergence some of the guidelines mentioned, but of course there are many, many old and embedded compilers that I don't have any experience with.",
      "This is surprising. My conclusion was precisely the opposite last time I thought about this.\r\n\r\nIf the library uses angle brackets, then it relies on compiler configuration (include paths) be passed. After all, the user code could be doing:\r\n```\r\n#include <root_of_project/third_party/some_other_grouping/library/header.h>\r\n```\r\nThat won't work unless I add `root_of_project/third_party/some_other_grouping` to the include path as well.\r\n\r\nIf the library uses quotes (which I believe to mean \"relative includes\"), then there is no extra configuration needed. As soon as the user code can include the `header.h`, it will be able to find any other headers it needs from its own installation.\r\n\r\n\r\n\r\n",
      "@Quuxplusone \r\n\r\n> However, I hope we all agree that the public-facing header \"foo.h\" should never ever contain\r\n>\r\n> `#include \"../../src/base/foo_internal.h\"  // NO!`\r\n\r\nI disagree and would like to know what your reasoning is. Consider contributing to the discussion [here](https://stackoverflow.com/a/52144130/671509). (To clarify, I agree that the choice to include -- at all -- this particular file looks highly dubious, but the general belief that `../` should never be used is common and misguided. Can we be clear on that?)",
      "Just a note. The c++ stanard draft actually says: use <> for standard library and \"\" for anything else:\r\n\r\n> Although an implementation may provide a mechanism for making arbitrary source files available to the < > search, in general programmers should use the < > form for headers provided with the implementation, and the \" \" form for sources outside the control of the implementation.\r\nFor instance:\r\n\r\n```cpp\r\n#include <stdio.h>\r\n#include <unistd.h>\r\n#include \"usefullib.h\"\r\n#include \"myprog.h\"\r\n```\r\n\r\nhttp://eel.is/c++draft/cpp.include#8.note-1\r\n\r\nthis is a note however, and it might be an outdated one.",
      "I think it completely ignores the reality, but it is an interesting point.",
      "Editors call: We agree the existing guideline is somewhat vague, but the quoted form is less portable and there is no consensus at this time for an improvement in the wording. We agree with the feedback mentioned in the discussion thread, including that if writing a library one should prefer the angle form so that you can have a more predictable search algorithm.",
      "> but the quoted form is less portable\r\n\r\nCan you give an example?",
      "@hsutter +1 yes please provide a justification for your claim that `\"\"` is less portable. I was satisfied that this PR finally fixed the inaccurate, misleading advice currently found in SF.12.",
      "@dawidpilarski yes that passage is unfortunate. It contradicts what all major toolchains do.",
      "Editors call: Fair enough! Reopening and assigning to GDR as expert.",
      "This is a much better version than the original version that was submitted.  However, I still see some issues.  When it says \"exist at a relative path\", is that an invitation to scrutinize the installation location and decide based on that whether to use the quoted form, or is that an invitation to exploit the internal coherence of a component?  That is, if my library's header is going to be installed in `/usr/include` next to `gmp.h` , should I use `\"gmp.h\"`?  I think that would be terrible advice.\r\n\r\nI agree that terms such as \"project\" are too ambiguous.",
      "> is that an invitation to scrutinize the installation location and decide based on that whether to use the quoted form, or is that an invitation to exploit the internal coherence of a component?\r\n\r\nthe latter but not the former: the library author can't know where the library will be installed or what headers will be co-located with it, outside of the headers it provides. ",
      "> > is that an invitation to scrutinize the installation location and decide based on that whether to use the quoted form, or is that an invitation to exploit the internal coherence of a component?\r\n> \r\n> the latter but not the former: the library author can't know where the library will be installed or what headers will be co-located with it, outside of the headers it provides.\r\n\r\nFantastic!\r\n\r\nThe wording isn't reflecting that though since it talks about \"exist at a relative path\": once the library header is installed, it will exist at a relative path.  So we need to clarify that.\r\n\r\nHow about \"use the quoted form if the header being included is part of the same component therefore is expected to exist with the including header as a coherent whole\"?",
      "it should be covered under the same rule, but with the implication being \"at the current location of authoring the file\". I can make that explicit if need be?\r\ne.g. use the \"\" form for headers that exist at a relative path, _to the location of the header being modified._\r\n\r\n(but I do feel it's pretty clear that \"the header\" here refers to the one being authored and not any future copy of itself placed into the compiler install location, since no one could reason about the location or neighbors of such a file or hope to edit it  ... except if doing something unorthodox like authoring a header library directly in /usr/include!)\r\n\r\nadded the following blurb:\r\n\"\r\nNote that this guidance applies to the including file as it exists in the location where it is typically authored/edited, and not any other location to which it may subsequently be copied or installed or otherwise made available to the implementation.\r\n\"",
      "> added the following blurb:\r\n> \"\r\n> Note that this guidance applies to the including file as it exists in the location where it is typically authored/edited, and not any other location to which it may subsequently be copied or installed or otherwise made available to the implementation.\r\n> \"\r\n\r\nThat makes clearer your intent; thanks!  The rule as written is still approaching the issue from an \"implementation\" perspective (_\"at it exists in the location where it is typically authored/edited\"_) versus expressing clearly the desired structure.  The desired structure is invariable independently of where the header ended up being found by the compiler or a reader -- either during build time of the component, or after installation.  The reason I am emphasizing this aspect is because people will copy the structure they see when they are consulting/reading.  This is one of the reasons why in my previous message I talked about component.  The header file could have been generated on the fly -- that shouldn't matter.  What matters is the final structure and what form of includes is used to express intent.\r\n\r\nIf you can adjust the text to express that, that would be awesome.  Thanks!\r\n\r\n",
      "I want to avoid referring to a component or project because of the case where headers are included from separate components along the relative path: mylib/foo.h includes mylib/deps/otherlib/bar.h. In that case, one might conclude the guidance doesn't apply because \"otherlib\" is a different component. but I suppose if entire dependent projects or headers are placed within the project (as opposed to consuming them from an external location) then, like it or not, those separate projects have now become an inseparable part of the project.\r\n\r\nclarified this as:\r\n\"... files that exist at a relative path to the file containing the `#include` statement (from within the same component or project) \"",
      "Thanks @gdr-at-ms. This section is improved now. Unfortunately, @apenn-msft , the merged wording suffers from exactly the ambiguity I mentioned [here](https://github.com/isocpp/CppCoreGuidelines/pull/1596#discussion_r415030639). \r\n\r\n[These lines](https://github.com/isocpp/CppCoreGuidelines/pull/1596/commits/94d6123c9a9e7e6bf825ccaf36f7dd1f1244bad7#diff-feb71ecadc563b52e66838adbd6b8e30R19199-R19200) reintroduce use of problematic term, 'project'.\r\n\r\nWhether or not an included file is from the same project is not sufficient to determine whether `\"\"` or `<>` is appropriate, but I suspect that readers will now be encouraged always to use `\"\"` -- even when a header search path was used to locate the header.",
      "@johnmcfarlane I also wanted to avoid the use of terms like 'project' or 'component', but the statement is qualified as \"locally relative\":\r\n\"A file _locally relative_ to foo.cpp in the same project\"\r\n\r\nIf a header search path (<>) was used to locate a file at the same path where it exists relatively then the guidance applies, and \"\" should be used instead.\r\nCan you think of a counter-example?\r\n\r\nExample:\r\nmyproject/componentA/foo.h\r\nmyproject/componentA/bar.h\r\n\r\nIn this case, the guidance is recommending foo.h include bar.h using \"\", this seems correct to me and in the spirit of the guidance. While myproject could be on the header search path, the guidance makes it more portable: using \"\" to access bar.h relatively will work in either case (whether it's on the search path or not) and more concisely names bar.h as \"the bar.h that is co-existent with foo.h\" increasing likelihood that the correct bar.h is selected.\r\n\r\nNote that in a case like:\r\nmyproject/componentA/foo.h\r\nmyproject/componentB/bar.h\r\n\r\nWhether \"\" or <> is used (in context of this guideline) does depend on whether the reader considers foo.h to be relatively reachable from bar.h and that depends on their policy of using \"..\" in include paths. That decision is intentionally left up to the reader.",
      "> I also wanted to avoid the use of terms like 'project' or 'component'\r\n\r\nCouldn't you remove the words \"project\" and \"component\", then?\r\n\r\n> Nevertheless, the guidance is to use the quoted form for including files that exist at a relative path to the file containing the `#include` statement <s>(from within the same component or project)</s> and to use the angle bracket form everywhere else, where possible.\r\n\r\n> `#include \"foo.h\"                 // A file locally relative to foo.cpp`<s>` in the same project`</s>`, use the \"\" form`",
      "@Quuxplusone, they were originally removed in response to @johnmcfarlane  original comment; but see @gdr-at-ms comments:\r\n> \"expressing clearly the desired structure.\"\r\n\r\nwhere the worry was a possible interpretation that leaves readers coding against the header _where it resides_ rather than the header _from where it is authored_ (e.g. the difference between /usr/include/foo.h and myproj/foo.h).\r\nWe needed a name for this \"authorship location\" that satisfied gdr's desire to express \"structure\" and well...  structure, component, library, project, these are all synonyms, so I just picked the most accessible/recognizable term.\r\n\r\nI felt I was able to satisfy both gdr's comment by naming the structure (\"project\") and john's comment by stating that even within a \"project\" local relative-ness must apply if using \"\" (which I think addresses the issue with the original reason to remove it which is where someone might interpret needing to use \"\" _anywhere_ within the project).",
      "@apenn-msft I fully understand. This isn't the first PR on this topic which was pulled in competing directions! I've opened [another PR](https://github.com/isocpp/CppCoreGuidelines/pull/1664) with an additional example:\r\n\r\n```c++\r\n#include <component_b/bar.h>     // A file in the same project located via a search path, use the <> form\r\n```\r\n\r\nI'd appreciate any feedback as this is perhaps the hardest example for many readers to comprehend.",
      "I agree with @Quuxplusone  and @johnmcfarlane  about the use of the term \"project\".  I continue to believe \"component\" is more appropriate than \"project\".  Talk of \"relative path\" sounds too low level to provide an effective guidelines, at least what we want to convey -- which is why I asked the question earlier.  Also, talk of \"where the header is authored\" fails to capture the common scenario that headers can be generated at build time. \r\n\r\n@Quuxplusone  - would you mind preparing a PR that reflects your suggested edit?",
      "\"component\" is not a sufficient enough level to reason over because it is many-to-one to a \"project\". A project or \"library\" can consist of multiple \"component\"s; see @johnmcfarlane's example in #1664 which implies this interpretation as well.\r\n\r\nBorrowing from the example in #1664, if you have structure:\r\n> some_library/componentA/componentB\r\n\r\nThe syntax for including componentB/bar.h from componentA/foo.h is impacted by this guidance; if reasoning at the \"project\" level (e.g. considering relativity from anywhere within some_library), you would apply the guidance as using the \"\" form. This is the better outcome since it increases the likelihood of locating the correct header (see my earlier example on when <> and \"\" can locate different headers even when used within the same project).",
      "> @Quuxplusone - would you mind preparing a PR that reflects your suggested edit?\r\n\r\nOpened #1666.",
      "Sorry, but it's not clear which form of `#include` I should use as a library creator **when including my own headers** from within my own library.\r\n\r\nOther practical matters aside, I find\r\n```c++\r\n#include <mylib/foo.hpp>\r\n```\r\nto be cleaner than\r\n```c++\r\n#include <../include/mylib/foo.hpp>\r\n```\r\nwhile considering the common case where *.cpp files live in a different directory than *.hpp files within the library project structure."
    ],
    "commit_messages": [
      "Merge pull request #1596 from apenn-msft/patch-1\n\nSF.12: Prefer the quoted form of `#include` for files relative to the…"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748918912b45d36992d0",
    "number": 1592,
    "body": "Hi,\r\n\r\nThe example does not compile with `;` in that place. :)",
    "head_branch": "sfraczek-F.21-remove-semicolon",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "F.21 remove `;` in function definition (#1592)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748a18912b45d36992d1",
    "number": 1588,
    "body": "As written, that rule would permit the code\r\n```\r\n[[nodiscard]] getX() { return INT_MAX; }\r\nfloat x = (float)getX();\r\n```\r\nwhich I don't believe is the intention. I've clarified the wording. Prompted by discussion in #1580 ",
    "head_branch": "ES48Enforcement",
    "is_a_fork": true,
    "comments": [
      "`getX` <-> `getMyInt`? You probably meant to write the same function name in both lines!?",
      "Editors call: Looks good, thanks for the catch!"
    ],
    "commit_messages": [
      "Clarify ES.48 enforcement rule for void cast of [[nodiscard]] (#1588)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748b18912b45d36992d2",
    "number": 1587,
    "body": "new[] needs delete[]",
    "head_branch": "bugfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.180 example bugfix (#1587)\n\nnew[] needs delete[]"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748c18912b45d36992d3",
    "number": 1586,
    "body": "And don't senselessly use one letter names.",
    "head_branch": "use-gslindex",
    "is_a_fork": true,
    "comments": [
      "Editors call: We agree the members should be signed, we'll merge the PR and then change them to `int` just to mirror the \"bad\" example. Thanks!"
    ],
    "commit_messages": [
      "Actually detect negative sizes by following ES.106 (#1586)\n\n* Actually detect negative sizes by following ES.106\r\n\r\nAnd don't use senseless one letter names\r\n\r\n* fix grammar\r\n\r\nCo-Authored-By: Johel Ernesto Guerrero Peña <johelegp@gmail.com>\r\n\r\nCo-authored-by: Johel Ernesto Guerrero Peña <johelegp@gmail.com>"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748d18912b45d36992d4",
    "number": 1581,
    "body": "this addresses the anchor naming errors spotted in #1569\r\nI am not changing the \"???\"s or the externally-visible Res-macros/Res-macros2/Res-MACROS.",
    "head_branch": "issue1569",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fix mismatched anchors, closes #1569 (#1581)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620748e18912b45d36992d5",
    "number": 1577,
    "body": "I noticed much of the example code does not (yet) follow rule ES.23.\r\nSo I replaced occurrences of the form `int x = 1;` with the `int x{ 1 };` form.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks, you are correct that we are not consistent with ES.23 and we should be.\r\n\r\nNote that ES.23 adds: \"Use `=` only when you are sure that there can be no narrowing conversions. For built-in arithmetic types, use `=` only with `auto`.\"\r\n\r\nSo could you please change the PR to do the following:\r\n\r\n1) Auto: For every `auto x = expr;` there should be no change. For example, line 901 is already correct for ES.23.\r\n\r\n2) For loops: For `for` loop scope variables of integer type with a literal initializer (usually `0`), change to `auto` and a `u` suffix on the initializer. For example, line 507 should change from `for (int i = 0;` to `for (auto i = 0u;`.\r\n\r\n3) Int: Wherever the current text explicitly writes `int`, use `auto` instead. For example, line 506 should change from `int index = -1;` to `auto index = -1;`.",
      "Also note in line 927 there is a bug in the PR where we lost the identifier `x`.",
      "> Auto: For every auto x = expr; there should be no change.\r\n\r\n> Also note in line 927 there is a bug in the PR where we lost the identifier x.\r\n\r\nIt seems I went over it too hastily. Thanks for pointing these out.",
      "Feel free to merge this PR, as I will leave it unchanged for now.\r\n\r\n> For built-in arithmetic types, use `=` only with `auto`\r\n\r\nShould this not only apply when using a pre-17 standard? Which of course raises the question:\r\nWhat standard should the _example code_ follow?\r\nUsing C++17 - or a later standard - we could write `for (auto i{ 0u };`.",
      "Editors call: Looks just about ready, thanks! One last minor thing please, especially in case you are planning to next do the same for other sections of the guidelines -- please use the `int i {0};` style rather than `int i{ 0 };` style. For example, line 975/976 is different only in that style and we prefer the first one. Would you be able to update it that way and then we can merge? ",
      "Shouldn't that be `int i{0}`?",
      "Good luck.",
      "int i {0};  is better than int i{0} . :)",
      "...but nothing beats `int i{ 0 };` シ\r\nTo better compare:\r\n\r\n```\r\nint i{ 7 };\r\n\r\nint i {7};\r\n\r\nint i{7};\r\n```\r\n\r\n```\r\ntype name{ value };\r\n\r\ntype name {value};\r\n\r\ntype name{value};\r\n```\r\n\r\n```\r\nstd::vector<int> v{ 7, a, d };\r\n\r\nstd::vector<int> v {7, a, d};\r\n\r\nstd::vector<int> v {7,a,d};\r\n\r\nstd::vector<int> v{7, a, d};\r\n\r\nstd::vector<int> v{7,a,d};\r\n```",
      "https://quuxplusone.github.io/blog/2019/02/18/knightmare-of-initialization/#simple-guidelines-for-variable-i\r\n\r\nIn particular, please don't write `for (auto i{ 0 }; i < 10; ++i)` when you could write\r\n`for (int i=0; i < 10; ++i)`.",
      "It's a shame they seem to prefer `i {0}` because I find `i{ 0 }` much more aesthetically pleasing and easy to parse. `i { 0 }` is fine too, though it can look a bit too spacious in a minimal-character example like that, and I personally tend to favor visually acquiring the value first.\r\n\r\nHaving space around the value makes it easier to acquire at a glance because it has good visual blocking. Blocking is crucial to how most people perceive structure, from which we use derive visual meaning. Contextual color-coding in fancy editors can help, but structure is typically the primary mechanism which is why it's such an important aspect of visual design.\r\n\r\n`i = 0;` has a very distinct signature (`A a Aa`). `i=0;` is okay at a glance due to typographical volume differences which help convey structure (`AaAa`). But `i {0};` is slightly less obvious (`A AAAa`) and `i{0};` would be the worst option available (`AAAAa`). Both `i{ 0 };` (`AA A Aa`) and `i { 0 };` (`A A A Aa`) are superior at being able to 'acquire' the rhs value. The former puts more emphasis on the rhs while the latter has equal emphasis on both lhs and rhs. It looks odd in small cases but it's a lot better when you `have { more_letters }`\r\n\r\nEdit: the distinction is less pronounced here because the font on this page seems to distend the `{};` glyphs further bellow alpha-numeric ones `a{};` more than most other monospace and terminal fonts do.\r\n\r\nThough it's only an anecdote, I've heard strong preference for `{ value };` opposed to `{value};` from a few neurodivergent people. Personally, I find it much easier to acquire and parse at a glance, as it feels less busy? cluttered? noisy? claustrophobic? Also, whitespace after the `{` is visually invariant under many different circumstances; it maintains it's visual structure even in rare cases like a multi-line init (which I end up doing a lot when working with older code).\r\n\r\n```\r\nconst T variable {\r\n    []{\r\n        T t;\r\n        t.setup();\r\n        return t;\r\n    }()\r\n};\r\n```\r\n\r\nBut ultimately, it doesn't matter. The (local maximum) \"best\" style is the one that you can convince people to apply consistently..."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749018912b45d36992d6",
    "number": 1576,
    "body": "I noticed much of the example code does not (yet) follow rule [ES.23](https://github.com/Modanung/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-list). Me and some other programmers seem in agreement that non-empty `{}` with added spaces are more readable than without, and on par with - if not clearer than - using ` = `.\r\nSo `int x{ 1 };` and not `int x{1};` instead of `int x = 1;`.\r\n\r\nAlso, to alleviate searching for blocks of code I figured grave accents would be more convenient than tabs. Before applying this logic to the entire document I would like some feedback as to whether these changes are welcomed in its current form.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Sorry for not reading the contribution guidelines first. I will remove the grave fencing.",
      "Whoops, fumbled the git juggle."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749118912b45d36992d7",
    "number": 1573,
    "body": "A code example in C.22 aims to illustrate inconsistent behaviour with a copy ctor making a deep copy and a move ctor making a shallow copy.\r\n\r\nYet the copy ctor actually make a shallow copy too (please see: https://godbolt.org/z/Ssx6Su), because it copies the shared_ptr (share semantic) instead of constructing a new shared_ptr.\r\n\r\nThis fixes the sample by creating a new shared_ptr, assuming Silly::Impl has a default ctor.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "C.22 Fixes a mistake in the code example not making a deep copy (#1573)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749218912b45d36992d8",
    "number": 1570,
    "body": "",
    "head_branch": "add_SF_12_2",
    "is_a_fork": true,
    "comments": [
      "I agree with what I believe to be the intended reading of this rule. Is it sufficiently clear, though, that if angle brackets don't work the solution is to use quotes rather than change search paths? i.e. in the scenario where ```<helpers.h>``` doesn't work I could fix this by either adding the directory in question to the includes search path or by using quotes.\r\n\r\nPerhaps clarifying this would be too much in the direction of hand-holding but I can imagine this cropping up in a code review where a less experienced developer has interpreted literally as \"where you can\" rather than \"where you can without breaking other implied rules\"",
      "@shaneasd\r\n> ... in the scenario where `<helpers.h>` doesn't work I could fix this by either adding the directory in question to the includes search path or by using quotes.\r\n\r\ngood point, I can see how some will be tempted to do this. in fact in the windows OS build \".\" is added to the include path making <> work in cases where normally it does not.\r\n\r\nI'm open to edits that address this but maybe it does need to be.\r\n",
      "> I'm open to edits that address this but maybe it does need to be.\r\n\r\nIf I think of a way to express this concisely I'll suggest it but at the moment I'm struggling.",
      "Editors call: Great, thanks again for iterating on this and contributing it!",
      "Sorry for the infrequent feedback and thanks for putting the time into adding this rule.\r\n\r\nThe title could be read the right way if only the details were correct. However, the advise is the same as in #1456 and I still suspect it's not quite right. I know a lot of people follow this practice so that's understandable. However, it isn't aligned with what our common toolchains do so I'm still concerned that it will cause confusion and perpetuate bad habits.\r\n\r\n> #include \"helpers.h\"    // A project specific file, use \"\" form\r\n\r\nProject-specific files may need to use either `<>` or `\"\"` depending on whether the user intends to locate *helpers.h* via a header search *within the project scope* or relative to the including file (respectively). The fact that the two files are within the confines of a single project is of no consequence.\r\n\r\n> Failing to follow this results in difficult to diagnose errors due to picking up the wrong file by incorrectly specifying the scope when it is included.\r\n\r\nThis would be true if the advise were correct. But again, using `\"\"` in an intra-project inclusion where `<>` is the correct thing to do is still going result in occasional errors. That's now worse if the user was following advise from the CCG.\r\n\r\nApart from anything else, how does this apply to libraries outside the project? They are projects too. Should they use `<>` or `\"\"` when including their own headers? From their point of view, they're including project-specific headers, so we're saying they should use `\"\"`. But from the point of view of a depenent project, they should be using `<>`. How does one resolve this contradiction if \"being in a project\" is the way we're distinguishing files?\r\n\r\n> Library creators should put their headers in a folder and have clients include those files using the relative path `#include <some_library/common.h>`\r\n\r\nThe use of \"relative\" here is confusing because `\"\"`-style inclusion is relative to the including file, whereas the `<>` style is absolute.\r\n\r\nPlease read the tool-chain documentation (***my emphasis***):\r\n\r\n* [GCC](https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html): \"By default, the preprocessor looks for header files included by the quote form of the directive #include \"file\" first ***relative to the directory of the current file***\"\r\n* [MSVC](https://docs.microsoft.com/en-us/cpp/preprocessor/hash-include-directive-c-cpp?view=vs-2019): \"The quotation marks mean that the preprocessor first searches ***the directory that contains the parent source file***.\"\r\n\r\nWould anybody mind if I fix this or is everybody in disagreement with me? I ask because my [posts on the subject](https://github.com/isocpp/CppCoreGuidelines/pull/1456#issuecomment-565734871) in the previous PR didn't receive much feedback so I still don't know if I'm onto a losing battle here.",
      "It seems to me like your objection is purely to ```// A project specific file, use \"\" form```? If so, I agree. It adds a new concept (project ownership) in the example where it should really be illustrating the established concepts and I agree with you that the new concept it introduces is not strictly appropriate."
    ],
    "commit_messages": [
      "Add SF.12, 3rd try (#1570)\n\n* add SF.12\r\n\r\n* add incscope to isocpp.dic to get the CI build to pass\r\n\r\n* expand INCLUDES, update dictionary for the ci build to pass\r\n\r\n* pr feedback\r\n\r\n* in the same directory\r\n\r\n* update based on feedback\r\n\r\n* 3rd try\r\n\r\n* PR feedback\r\n\r\n* update lable\r\n\r\n* Update CppCoreGuidelines.md\r\n\r\n* Update CppCoreGuidelines.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749318912b45d36992d9",
    "number": 1564,
    "body": "There are a total of 256 words that begin with `non` \r\nAnd some inconsistent cases were found to use  hyphens(`-`) even though they were the same words\r\n\r\nI matched this part by the [rule](https://github.com/cplusplus/draft/wiki/Specification-Style-Guidelines#hyphens-nonx-vs-non-x)",
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! We'll take this and then just do a followup commit to change the two anchors back (anchors need to stay stable and don't display visibly anyway) and switch \"non-public\" back to hyphernated (to use hyphenation consistently)."
    ],
    "commit_messages": [
      "Add and remove hyphens to words that begin with non (#1564)\n\n* Add hyphens to words that begins with a non\r\n\r\n* Remove hyphens in nonpublic"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749418912b45d36992da",
    "number": 1559,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Corrected link to noexcept anchor (#1559)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749518912b45d36992db",
    "number": 1557,
    "body": "Added example to CP.61: Use an async() to spawn a concurrent task",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Assigned to Sergey, thanks!"
    ],
    "commit_messages": [
      "Added example to CP.61: Use an async() to spawn a concurrent task (#1557)\n\nAdded example to CP.61: Use an async() to spawn a concurrent task"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749618912b45d36992dc",
    "number": 1556,
    "body": "Fixes inconsistency in \"Enum.3: Prefer class enums over \"plain\" enums\".\r\n\r\nSecond example (current version):\r\n```\r\nvoid Print_color(int color);\r\n\r\nenum class Web_color { red = 0xFF0000, green = 0x00FF00, blue = 0x0000FF };\r\nenum class Product_info { red = 0, purple = 1, blue = 2 };\r\n\r\nWeb_color webby = Web_color::blue;\r\nPrint_color(webby);             // Error: cannot convert Web_color to int.\r\nPrint_color(Product_info::Red); // Error: cannot convert Product_info to int.\r\n```\r\n\r\nhas an error in the last line => enum has no member \"Red\". Although the example tries to show something else. This fix just renames the values in `Product_info`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Isn't the example also showing the two scoped enumerations can have enumerators with the same name, and not clash? Changing one from `red` to `Red` doesn't show that.\r\n",
      "That's an advantage of enum class but is it a good idea to have the example show two different concepts at once like that? To make the example clear I think you want to change as little as possible between the good and bad versions. For this reason I also think it was an odd decision to change from webby+Blue in the bad example to webby+Red in the good one.\r\n\r\nThe justification given in the rule is \"traditional enums convert to int too readily\" rather than traditional enums are more likely to have naming collisions. That's not to say this additional justification should not also be given with its own example.",
      "Editors call: Thanks for pointing out this inconsistency. We realize this example is being used in a couple of guidelines and we'd rather make them consistent the other way (all lowercase) so we'll reject this PR but accept the spirit your change. Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749718912b45d36992dd",
    "number": 1555,
    "body": "If I did not misinterpret the intention of the examples than there are two inconsistencies in the rule Enum.3 which this PR tries to fix. Separated into two commits.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749818912b45d36992de",
    "number": 1554,
    "body": "MISRA C++ 2008 and the AUTOSAR guidelines are widely used in safety critical systems. The latest AUTOSAR document is publicly available on their site - MISRA I believe hides their document, although it can easily be found.\r\n\r\nThese standards are commonly used in static analysis tools such as Polyspace Bug Finder, so they have some significant influence.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks, added. After merging we'll update the note to refer to the web link. Also, AUTOSAR and MISRA are currently being merged, and MISRA is being revised, so once there is a combined/new publication we can update this list with a more current reference."
    ],
    "commit_messages": [
      "Added two coding references (#1554)\n\n* Added two commonly used coding guideline documents\r\n\r\n* Update CppCoreGuidelines.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749918912b45d36992df",
    "number": 1553,
    "body": "I.2 and R.6 seem to address the same issue,\r\nthus I propose removing R.6 and moving some of its contents into I.2.\r\n\r\nReview of a submitted change to clang-tidy, for a check implementing I.2,\r\nrevealed conflicting interpretations of whether to warn about non-const\r\nvariables in anonymous namespace: Therefor this patch also includes a\r\nsuggestion to add the excplicit exception that variables in anonymous\r\nnamespace should not be considered \"global\".\r\nhttps://reviews.llvm.org/D70265",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Related to issue: #1541\r\n",
      "Editors call: Thanks for spotting this duplication. We would like two changes to this PR please:\r\n\r\n- Please leave a stub for R.6 so that existing tools can still refer to it, but just replace the body with a \"See I.2\" link.\r\n- Please remove the anonymous namespace exemption. We're not convinced that should be excluded, and it wasn't intended to be excluded. We think the advice applies also to variables in anonymous namespaces.\r\n",
      "Thanks for feedback, will make the suggested changes to the PR.",
      "Are static and or public member variables also to be considered global?\r\nAre even private member variables to be considered global variables?",
      "I have noticed the guideline only talks about namespace scope variables and not class scope. The reason I still ask about member variables is that the guidelines talks about the risk of data races and avoiding that by making data immutable, since that risk applies to member variables as well I'm not sure whether the guide also applies to member variables or strictly to namespace scoped variables.",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Merge I.2 and R.6 seem to address the same issue, (#1553)\n\nthus I propose removing R.6 and moving some of its contents into I.2."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749a18912b45d36992e0",
    "number": 1551,
    "body": "Replace ??? by code examples in ES.77",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Editors call: The examples look good, thank you. We are going to remove the Enforcement because the guideline is to minimize the use of `break` and `continue`, rather than to ban them. However, we also don't know of a crisp guideline to mechanically diagnose so for now we'll leave it as `???`."
    ],
    "commit_messages": [
      "Add code examples to CppCoreGuidelines ES.77 (#1551)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749b18912b45d36992e1",
    "number": 1550,
    "body": "Some changes in the last 24 hours contained some typos which I've corrected.",
    "head_branch": "fixtrivialtypos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix trivial recent typos (#1550)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749c18912b45d36992e2",
    "number": 1549,
    "body": "* R.37 : it callees -> its callees\r\n* ES.65 : a different part from the original paper",
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Fix typos (#1549)\n\n* R.37 : it callees -> its callees\r\n* ES.65 : a different part from the original paper"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749d18912b45d36992e3",
    "number": 1548,
    "body": "* R.37 : it callees -> its callees\r\n* ES.65 : a different part from the original paper",
    "head_branch": "typo",
    "is_a_fork": true,
    "comments": [
      "mistake.. closed"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749e18912b45d36992e4",
    "number": 1539,
    "body": "Added a new rule specifically for the memset & memcpy case as mentioned in #1424 .  Open to continued wordsmithing!",
    "head_branch": "Issue1424",
    "is_a_fork": true,
    "comments": [
      "This commit mixes a) a new rule, b) change to an existing rule and c) empty lines in example code.\r\nWouldn't it be better to split these unrelated changes into different commits?",
      "Editors' call: Looks good, thank you! We'll accept it and then I'll go add an Enforcement."
    ],
    "commit_messages": [
      "Address items called out in Issue 1424 (#1539)\n\n* Address items called out in Issue 1424\r\n\r\n* Fix issues caught by CI\r\n\r\n* Updates based on PR review"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620749f18912b45d36992e5",
    "number": 1538,
    "body": "Addressing the issues from #1418 .  Best guess on @hsutter 's comment \"the 3rd bullet could use some cleanup\"",
    "head_branch": "Issue1418",
    "is_a_fork": true,
    "comments": [
      "Editors' call: This look great -- clear and correct. Thanks!"
    ],
    "commit_messages": [
      "Address items called out in Issue 1418 (#1538)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a018912b45d36992e6",
    "number": 1537,
    "body": "The high level aim for ES.78 was changed to \"no implicit fallthrough\".  Added an example switch statement with a return from each case.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors' call: We agree and this is a good improvement. Thanks!"
    ],
    "commit_messages": [
      "Allow return statements from case labels (#1537)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a118912b45d36992e7",
    "number": 1533,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors' call: Thanks for the suggestion. We've looked at it and we think the original expresses the intent best."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a318912b45d36992e8",
    "number": 1530,
    "body": "When a reference in the Bibliography is available online, it would seem to be nice to have a link. In this example, the original article was published in C/C++ User's Journal, with the content later ported to the DDJ web site. The DDJ site is no longer reliable, but a good copy exists in archive.org, and I've linked to it here.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "link to archived version of Collecting Shared Objects (#1530)\n\nWhen a reference in the Bibliography is available online, it would seem to be nice to have a link. In this example, the original article was published in C/C++ User's Journal, with the content later ported to the DDJ web site. The DDJ site is no longer reliable, but a good copy exists in archive.org, and I've linked to it here."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a418912b45d36992e9",
    "number": 1526,
    "body": "Otherwise rather suggests a quadratic growth.",
    "head_branch": "do-not-suggest-quadratic",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "T.25: Fix number in exponential sequence. (#1526)\n\nOtherwise rather suggests a quadratic growth."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a518912b45d36992ea",
    "number": 1523,
    "body": "The link to discussion on ```C.36: A destructor may not fail``` was linking to ```Discussion: Make base class destructors public and virtual, or protected and nonvirtual``` which seems only peripherally related to the topic. I presume the intent was instead to link to the discussion ```Discussion: Destructors, deallocation, and swap must never fail```.",
    "head_branch": "fixdestructordiscussionlink2",
    "is_a_fork": true,
    "comments": [
      "Editors' call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Fix discussion link in C.36 (#1523)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a618912b45d36992eb",
    "number": 1522,
    "body": "The links in [E.15](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#e15-catch-exceptions-from-a-hierarchy-by-reference) have absolute URLs which point Github repository, not relative anchors.",
    "head_branch": "fix-wrong-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wrong markdown links in E.15 (#1522)\n\nFixed markdown links in E.15 which direct readers to Github repository, not currently viewing page"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a718912b45d36992ec",
    "number": 1520,
    "body": "Bjarne mentioned jthread in his talk: https://youtu.be/u_ij0YNkFUs?t=3165\r\nI believe gsl::joining_thread should reflect that.",
    "head_branch": "jthread",
    "is_a_fork": true,
    "comments": [
      "Editors' call: `gsl::joining_thread` will be superseded by C++20 `std::jthread`. For C++17, people should use `gsl::joining_thread` and we won't rename it now to avoid disturbing existing users since it's going away anyway and they will eventually need to change to `std::jthread`. If you have a C++20 compiler, use `std::jthread` directly.",
      "Thanks @hsutter, I agree with that.\r\nBut then probably as soon as C++20 is released, examples in the guidelines should be updated to use `std::jthread` instead of `gsl::joining_thread`, am I right? Similarly like with smart pointers, there are gsl counterparts of `std::unique_ptr` and `std::shared_ptr` but the guidelines prefer the ones from std."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a818912b45d36992ed",
    "number": 1516,
    "body": "When I was reading the chapter about [GSL](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gsl-guidelines-support-library) I was quite confused by the current listing of some entities. For example, the entire component about Concepts will simply not work unless someone writes non-portable compiler / extensions. Another example is use of unrecognised attributes - before C++17 it's technically an error.\r\nI believe it should be stated that some constructs are yet unavailable in the language and users should always consult the GSL version of their preference to find out what is supported. Otherwise, we get quite premature specification that little to no people can use in their code.",
    "head_branch": "gsl-unsupported-types",
    "is_a_fork": true,
    "comments": [
      "Editors' call: The Guidelines in general are written with the baseline that C++17 is available, and for the concepts sections the Concepts TS. For the GSL.concept section, we will update it to conform to C++20 and label any places where we refer to these concepts as depending on C++20.",
      "I think we should mention that we use types from the standard (C++17) in addition to from the GSL."
    ],
    "commit_messages": [
      "clarify that GSL semi-specification of some types does not reflect actual support of them (#1516)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074a918912b45d36992ee",
    "number": 1510,
    "body": "ever => even",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update CppCoreGuidelines.md (#1510)\n\ntypo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074aa18912b45d36992ef",
    "number": 1509,
    "body": "You can cast away `const` as much as you like, as long as you never write to the variable.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "You're correct, but I think the new wording is not very clear. The first half of the sentence is talking about  \"the variable\" (definite article) but your new wording just refers to \"a const variable\" (indefinite article).\r\n\r\nHow about:\r\n\r\n> If the variable is actually declared `const`, modifying it results in undefined behaviour.",
      "@jwakely I've applied your suggested changes (minus the British spelling of behavior, for consistency within the file)",
      "Editors call: Looks great, thanks!"
    ],
    "commit_messages": [
      "Casting away const isn't undefined behavior, but modifying a constant is (#1509)\n\n* Casting away const isn't undefined behavior, but modifying a constant is\r\n\r\nYou can cast away `const` as much as you like, as long as you never write to variable.\r\n\r\n* rewording for clarification"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ab18912b45d36992f0",
    "number": 1508,
    "body": "The 'complex' example is actually a bit faster with [clang](http://quick-bench.com/DrXvcvhjS1zDmMkgxrzIjbMByYA) 8 /w -O3, and equally fast as the 'simple' example with [gcc](http://quick-bench.com/03VXPgDSxiMAmZMItiEA0iwTJgM) 9.1 /w -O3\r\n\r\nOn GCC, the 'simple' example compiles to: \r\n\r\n```\r\n.L3:\r\n        movdqu  xmm0, XMMWORD PTR [rax]\r\n        add     rax, 16\r\n        pxor    xmm0, xmm1\r\n        movups  XMMWORD PTR [rax-16], xmm0\r\n        cmp     rax, rbx\r\n        jne     .L3\r\n```\r\n... and the 'complex' example compiles to the same. \r\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Editors' call: Looks good, thank you!"
    ],
    "commit_messages": [
      "Update Rper-simple example comment (#1508)\n\nThe example that is 'intended' to be faster is actually faster on clang 8 /w -O3, and marginally slower than the 'simple' example on GCC 9.1 /w -O3\r\nhttp://quick-bench.com/DrXvcvhjS1zDmMkgxrzIjbMByYA\r\nhttp://quick-bench.com/03VXPgDSxiMAmZMItiEA0iwTJgM"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ac18912b45d36992f1",
    "number": 1505,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors' call: Looks good, thank you!"
    ],
    "commit_messages": [
      "Correct the examples to match guideline NL.16 (#1505)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ad18912b45d36992f2",
    "number": 1501,
    "body": "Corrected in Non-Rules and Myths, Nr. 5 (full section name: \"NR.5: Don’t: Don’t do substantive work in a constructor; instead use two-phase initialization\")\r\n\r\nIt doesn't make sense otherwise. Or am I wrong?",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Corrected variables in Init() to mx, my. (#1501)\n\nIt doesn't make sense otherwise"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ae18912b45d36992f3",
    "number": 1496,
    "body": "Fixes #1491 ",
    "head_branch": "issue-126",
    "is_a_fork": true,
    "comments": [
      "> Fixes #126\r\n\r\nDid you mean \"Fixes #1491\"?",
      "I certainly did. I think I looked at this and thought it was the issue number:\r\n\r\n![Screenshot_20190815_161325](https://user-images.githubusercontent.com/1254480/63104896-b3cbc480-bf77-11e9-8e08-14acaf454386.png)\r\n\r\n:man_facepalming: ",
      "The commit log and this P/R are fixed now - thanks!",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Reword how C11 Annex K functions are described (#1496)\n\nFixes #1491"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074af18912b45d36992f4",
    "number": 1489,
    "body": "- make the sample in Sd-factory compileable\r\n  - fixed wrong capitalization: create/Create -> create\r\n  - `make_shared` cannot access protected constructors, so made them public. To still have access protection introduced a protected `class Token` in each class. That token can only be created by the class itself (and derived classes) and needs to be passed to the constructor.\r\n- changed order: `public` first, then `protected`\r\n- same sample for C.50 and Sd-factory\r\n- removed spurious \"see Item 49.1\" as it is unclear what this means",
    "head_branch": "issue_1488",
    "is_a_fork": true,
    "comments": [
      "Can you give a better commit message please? When looking at the `git log` output \"Closes #1488\" is not very informative.",
      "> Can you give a better commit message please? When looking at the git log output \"Closes #1488\" is not very informative.\r\n\r\nLooking at git log I got the impression that just writing \"Closes #...\" seems to be common here. But you are right, a better commit message helps. So I updated it.",
      "Sorry, but this does still not compile:\r\n```\r\n/opt/local/bin/clang++ -g -Wall -Wextra -Wpedantic -std=c++17 -Wno-unused-parameter -Wno-unused-local-typedef -Wno-unused-varia\r\nble -I/usr/local/include -MMD -MP  -c factory_function.cpp -o factory_function.o\r\nfactory_function.cpp:20:41: error: expected ')'\r\n        auto p = make_shared<T>(T::Token{});\r\n                                        ^\r\nfactory_function.cpp:20:32: note: to match this '('\r\n        auto p = make_shared<T>(T::Token{});\r\n                               ^\r\n1 error generated.\r\n```",
      "> Sorry, but this does still not compile:\r\n\r\nThanks for testing! I had tested my code on VS2019 but using godbolt I see that it fails to compile for gcc and clang. I have just added `typename` before `T::Token` and now it compiles on VS2019, gcc and clang. I hope it now compiles also on your machine.",
      "Thanks, now it compiles.\n\n// regards\n\n> Am 31.07.2019 um 22:31 schrieb beinhaerter <notifications@github.com>:\n> \n> Sorry, but this does still not compile:\n> \n> Thanks for testing! I had tested my code on VS2019 but using godbolt I see that it fails to compile for gcc and clang. I have just added typename before T::Token and now it compiles on VS2019, gcc and clang. I hope that now compiles also on your machine.\n> \n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub <https://github.com/isocpp/CppCoreGuidelines/pull/1489?email_source=notifications&email_token=AAN7QWVNK3IW62P7NO2SJL3QCHZDRA5CNFSM4IIJLG62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD3IO22I#issuecomment-517008745>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAN7QWQF373JIEDYTFVM6F3QCHZDRANCNFSM4IIJLG6Q>.\n> \n\n",
      "Editors call: Assigned to Sergey, who will also check the related issue #1205 and address that as well.",
      "There are two occurrences of this code fragment in the guidelines:\r\n\r\n- [C.50](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-factory) \r\n\r\n- [Sd-factory](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Sd-factory) (the discussion section for C.50)\r\n\r\nLGTM, but could you add a similar fix to C.50? This will also close #1205\r\n",
      "also could be useful to mark the single-argument constructor `B(Token) { /* ... */ }` `explicit`",
      "@cubbimew\r\n- I have merged the code from C.50 and Sd-factory, so they are now the same. \r\n- added explicit\r\n- The notes after the sample needed to be changed, too.\r\n- What was that Item 49.1? Shall I put it back in and link it somewhere?\r\n- In Sd-Factory: what about \"Items 45 and 46\"?\r\n- In Sd-Factory: can we keep the sentence \"`D` must define a constructor with the same parameters that `B` selected. Defining several overloads of `create` can assuage this problem, however; and the overloads can even be templated on the argument types.\" or should we change it?",
      "> What was that Item 49.1? Shall I put it back in and link it somewhere?\r\n> In Sd-Factory: what about \"Items 45 and 46\"?\r\n\r\nThose are chapters from \"C++ Coding Standards: 101 Rules, Guidelines, and Best Practices\";. 45 is \"Always provide new and delete together,\", 46 \"If you provide any class-specific new, provide all of the standard forms (plain, in-place, and nothrow).\", and 49 \"Avoid calling virtual functions in constructors and destructors.\", which implies @hsutter wrote that paragraph. \r\n\r\nThat book is mentioned in references with the anchor \"#SuttAlex05 \", you could link to it (as in \"`Items 45 and 46 in [SuttAlex05](#SuttAlex05)`\")\r\n\r\n> In Sd-Factory: can we keep the sentence \"D must define...\r\n\r\nI think it's still true: B requires B(Token, other args), and D must define one to match and create() hides that from the user.",
      "Travis-CI fails with some issues related to Travis, not to my changes. How can we proceed?",
      "I re-ran travis checks\r\n\r\nOne more tweak: these guidelines also have a \"no virtual calls in constructors\" rule, it's [C.82](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rc-ctor-virtual). Better link to that than to 49.1 from another book.",
      "The Travis-CI rule \"Lines should be <= 100 characters long  [whitespace/line_length] [2]\" is a pain. And it doesn't feel better when I see other lines with up to 642 chars in one line :/."
    ],
    "commit_messages": [
      "make the sample in Sd-factory and C.50 compileable (closes #1205, #1488) (#1489)\n\n* make the sample in Sd-factory compileable (closes #1488)\r\n\r\n- make the sample in Sd-factory compileable\r\n  - fixed wrong capitalization: create/Create -> create\r\n  - `make_shared` cannot access protected constructors, so made them public. To still have access protection introduced a protected `class Token` in each class. That token can only be created by the class itself (and derived classes) and needs to be passed to the constructor.\r\n- changed order: `public` first, then `protected`\r\n- same sample for C.50 and Sd-factory\r\n- removed spurious \"see Item 49.1\" as it is unclear what this means\r\n\r\n* line length\r\n\r\n* tabs -> spaces\r\n\r\n* spelling\r\n\r\n* input from cubbimew\r\n\r\n- added back in Item 49.1\r\n- added link for items as suggested (\"in [SuttAlex05](#SuttAlex05)\")\r\n\r\n* changed link to Item 49.1 to link to C.82"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b018912b45d36992f5",
    "number": 1487,
    "body": "- typo \"a\" -> \"as\"\n- added \"???\" to mark incomplete sentence\n- typo \"than\" -> \"that\"\n- \"scanf using s\" -> \"scanf using %s\" (same as for printf)\n- added missing comma",
    "head_branch": "section_sl",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thank you."
    ],
    "commit_messages": [
      "section_sl, different stuff (#1487)\n\n- typo \"a\" -> \"as\"\r\n- added \"???\" to mark incomplete sentence\r\n- typo \"than\" -> \"that\"\r\n- \"scanf using s\" -> \"scanf using %s\" (same as for printf)\r\n- added missing comma"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b218912b45d36992f6",
    "number": 1486,
    "body": "",
    "head_branch": "sf10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "SF.10: remove double `#include <vector>` from example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b318912b45d36992f7",
    "number": 1485,
    "body": "",
    "head_branch": "cpl",
    "is_a_fork": true,
    "comments": [
      "The period inside the quotation marks is correct in American English (but a full stop outside the quotation marks is correct in British English).",
      "Yepp, I learned that yesterday and thus already deleted this PR and modified my other PRs.\r\nBTW, there are places where `\"foo bar\",` is written (British English). Maybe that should be changed to `\"foo bar,\"` (American English)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b418912b45d36992f8",
    "number": 1484,
    "body": "- put dot as end of sentence outside quotation mark\n- added space between two sentences\n- added missing closing bracket\n- typo \"of\" -> \"or\"",
    "head_branch": "section_t",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thank you."
    ],
    "commit_messages": [
      "section T, minor stuff (#1484)\n\n- added space between two sentences\r\n- added missing closing bracket\r\n- typo \"of\" -> \"or\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b518912b45d36992f9",
    "number": 1482,
    "body": "",
    "head_branch": "ts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "same capitalization for \"Technical Specification\" on all occurances (#1482)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b618912b45d36992fa",
    "number": 1481,
    "body": "",
    "head_branch": "e18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "E.18: fix grammar (#1481)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b718912b45d36992fb",
    "number": 1480,
    "body": "- E.15: \"of\" -> \"or\"\n- E.25: dot as end of sentence should be outside the quotation\n- E.27: capitalization",
    "head_branch": "section_e",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thank you."
    ],
    "commit_messages": [
      "E section, different stuff (#1480)\n\n- E.15: \"of\" -> \"or\"\r\n- E.27: capitalization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b818912b45d36992fc",
    "number": 1474,
    "body": "Simple typo fix. I agree to the Contributor License Agreement. :)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixes typo: \"code based\" -> \"code bases\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074b918912b45d36992fd",
    "number": 1473,
    "body": "- ES.26: same capitalization for all function names in example\r\n- ES.34: fix wrong formatting (first line of example was formatted as text)\r\n- ES.46: corrected value in comment (new value read out in debugger)\r\n- ES.46: Capitalize Enforcement bullet points (as in other ES rules)\r\n- ES.46/ES.47: added period at end of sentence\r\n- ES.65: fix formatting of code after list (compare https://meta.stackexchange.com/a/34325/172717)",
    "head_branch": "es_section",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thank you."
    ],
    "commit_messages": [
      "ES section, different stuff (#1473)\n\n* ES section, different stuff\r\n\r\n- ES.26: same capitalization for all function names in example\r\n- ES.34: fix wrong formatting (first line of example was formatted as text)\r\n- ES.46: corrected value in comment (new value read out in debugger)\r\n- ES.46: Capitalize Enforcement bullet points (as in other ES rules)\r\n- ES.65: fix formatting of code after list (compare https://meta.stackexchange.com/a/34325/172717)\r\n\r\n* review-feedback from jwakely\r\n\r\nand:\r\n- ES.46/ES.47: added period at end of sentence"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ba18912b45d36992fe",
    "number": 1469,
    "body": " [Travis are now recommending removing the __sudo__ tag](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration).\r\n\r\n\"_If you currently specify __sudo: false__ in your __.travis.yml__, we recommend removing that configuration_\"",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Travis CI: (#1469)\n\n[Travis are now recommending removing the __sudo__ tag](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration).\r\n\r\n\"_If you currently specify __sudo: false__ in your __.travis.yml__, we recommend removing that configuration_\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074bb18912b45d36992ff",
    "number": 1468,
    "body": "",
    "head_branch": "es1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ES.1: fixed wrong capitalization (#1468)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074bc18912b45d3699300",
    "number": 1467,
    "body": "Fixes #1466",
    "head_branch": "uncapitalize",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074bd18912b45d3699301",
    "number": 1465,
    "body": "",
    "head_branch": "r3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "R.3: \"a\" -> \"an\" (#1465)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074be18912b45d3699302",
    "number": 1463,
    "body": "",
    "head_branch": "enum2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Enum.2: typo/formatting (#1463)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074bf18912b45d3699303",
    "number": 1462,
    "body": "",
    "head_branch": "c181",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "typo in C.181: 'it' -> 'is' (#1462)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c018912b45d3699304",
    "number": 1461,
    "body": "- remove unnecessary space in section Reason",
    "head_branch": "c150_c151",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.150/C.151: fix compiler syntax error in Example (#1461)\n\n- remove unnecessary space in section Reason"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c118912b45d3699305",
    "number": 1460,
    "body": "C.145 says what not to do and how the compiler can warn us. But the \"see also C.67\" gives a hint what the programmer can do to prevent slicing effectively.",
    "head_branch": "c145",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thank you."
    ],
    "commit_messages": [
      "C.145: add \"see also\" C.67 (#1460)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c318912b45d3699306",
    "number": 1459,
    "body": "The last sentence in C.102 is formatted as code but looks like it should be formatted as text.",
    "head_branch": "c102",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.102: format note as text, not as code (#1459)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c418912b45d3699307",
    "number": 1457,
    "body": "Fixes #1440",
    "head_branch": "SF6_and_7",
    "is_a_fork": true,
    "comments": [
      "Spellchecker failed on \"UDLs\" which has to be added to isocpp.dic to pass",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "exception in SF.7 for issue 1440, allow std::literals (#1457)\n\n* exception in SF.7 for issue 1440, allow std::literals\r\n\r\n* PR feedback\r\n\r\n* add UDLs to spelling dictionary\r\n\r\n* put in alpha order"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c518912b45d3699308",
    "number": 1456,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "What is \"INCLUDES\"?",
      "The spellchecker doesn't understand that HTML anchors aren't readable text, so the word \"incscope\" needs to be added to `scripts/hunspell/isocpp.dic` to fix the failing Travis CI test.",
      "> What is \"INCLUDES\"?\r\n\r\nSee my update. for MSVC how these are specified is described [here](https://docs.microsoft.com/en-us/cpp/build/reference/i-additional-include-directories?view=vs-2019).",
      "I assumed it must be a MSVC thing, but the docs say `INCLUDE` not `INCLUDES`. And other compilers don't use anything by either of those names.\r\n\r\nIs this really something that should be enforced by the checker?",
      "> Is this really something that should be enforced by the checker?\r\n\r\nno. I've generalized this.",
      "Editors' call: Several of us are personally sympathetic to using `<>` for standard headers and `\"\"` for other headers, which is implied by the standard (http://eel.is/c++draft/cpp.include) but not sure this warrants a rule. Does this have a reasonable chance of not being ignored if we try to mandate it?\r\n\r\n(We are looking forward to a future guidelines to not use `#include` at all, in a modules world, someday.)",
      "FWIW, cppreference [suggests](https://en.cppreference.com/w/cpp/preprocessor/include#Explanation) \"intent\" and \"typical implementation\" for both angle bracketed and quoted includes, while the standard  just says \"[implementation-defined](http://eel.is/c++draft/cpp.include)\" for both.",
      "Editors call: We know we should use `<>` for standard headers. We know we should use `\"\"` for our own project's files. We don't have a rule for the \"in between\" that we think people can follow universally and welcome new suggestions in this thread.",
      "Any progress on this? I'd really like something to point to when people write\r\n`#include \"string\"`",
      "The standard already seems pretty clear that `#include \"string\"` is ~~dumb~~ wrong. It says angle brackets searches for \"a header\" which in standardese means one of the standard library headers. It says double quotes searches for \"a source file\" which in standardese means some other header file, not a standard library header. Since `<string>` is certainly \"a header\" (i.e. a standard library header) it should be included with angle brackets.\r\n\r\nThere's also a note that says \"in general programmers should use the `< >` form for headers provided with the implementation, and the `\" \"` form for sources outside the control of the implementation.\"\r\n",
      "thanks... I was not aware of that distinction. I suspect many others (most?) are not either. I guess a pointer to the standard would be a second choice to having this guideline added. ",
      "The remaining question is what is \"a header\" and what isn't \"a header\", but that's why the non-normative note suggests distinguishing headers/files that are \"provided by the implementation\" from other ones. But in any case, there's no question about `<string>`.",
      "Editors call: Thanks! @ChrisGuzak could you please update the PR to:\r\n\r\n- say we should use `<>` always, and only, for standard headers, and `\"\"` for all non-standard headers\r\n- link to the standard paragraph\r\n\r\nand we'd be glad to merge it.",
      "been a while but I updated the PR.",
      "I'm opposed to this advice.\r\n\r\nOn both POSIX systems and under MSVC (with minor caveats) the other major difference between `\"\"` and `<>` forms is that `\"\"` first searches for the header relative to the including file. Hence, using `\"\"` to include a file which is not a system file but which is intended to be found via a search path (e.g. on specified with `-I`, `-isystem` or `/I`) has correctness and efficiency problems:\r\n\r\n* The wrong file might be included by mistake or\r\n* a nonsensical path will be searched first.\r\n\r\nI think that the correct advice should be to use `<>` for headers/files which are intended to be found via a search path and for `\"\"` to be used to located files which are located physically relative to the including file.\r\n\r\nI've written more about this in a S.O. answer [here](https://stackoverflow.com/a/52144130/671509).",
      "@johnmcfarlane that was my position coming into this but I took the turn that Herb suggested. ",
      "Sorry, but that's ridiculous. In addition to what @johnmcfarlane said,  standard library headers are already easy identifiable,  because a) most c++ probably know them by heart and b) they are virtually the only headers without a file extension. \r\n\r\n> Does this have a reasonable chance of not being ignored if we try to mandate it?\r\n\r\nVirtually every code base I've worked on ignores this and follows the rule suggested by John. I really don't see what this is supposed to accomplish. ",
      "I'm not convinced the guidelines should be trying to codify this at all.\r\n\r\nIf the original motivation is just to be able to correct nonsense like `#include \"string\"` then [point to the standard](https://github.com/isocpp/CppCoreGuidelines/pull/1456#issuecomment-521401707), or just use a stick to drive those people off a cliff into the sea.\r\n",
      "@jwakely, I don't agree with the recommendation being made in this pull request but I think it does make sense to codify something.\r\n\r\nI think the distinction between ```<>``` and ```\"\"``` is far from obvious particularly given how much it does (or is allowed to?) vary between implementations. I suspect that in many cases the distinction is largely moot and it's more about communicating intent through the choice made and it's useful for the guidelines to give a definite meaning that is communicated by each choice. There are certainly some things where it seems like a programmer would have to go out of their way to shoot themselves in the foot but I don't think this is such a case.\r\n\r\nThe target readership is \"All C++ programmers\" and I would be especially sympathetic to programmers coming from other languages where there aren't two near identical ways of importing referenced code.\r\n\r\nI'd also like to think that a c++ programmer could do well referencing only the core guidelines and other online material without having to read the standard. Perhaps I'm mistaken in my understanding of the purpose of the document but I didn't think the average c++ programmer was expected to read it. As someone who hasn't read most of it, I am of the understanding that it provides instruction on how to correctly implement a compiler/stl, not an arbitrary c++ program. I think there are lots of ways in which the c++ standard allows you to write bad c++ code and the point of the core guidelines is to tell you how not to.\r\n\r\nIt also seems given your and @ChrisGuzak 's contradictory interpretations of the standard that it is not sufficiently explicit to provide unambiguous guidance.\r\n\r\nIt's possible that your position is simply that regardless of whether it is obvious or not, the impact of getting it wrong is low, to which I offer no counterargument. I haven't considered the demands on the editors time or the negative impact of overly numerous or overly strict rules.",
      "> I haven't considered the demands on the editors time or the negative impact of overly numerous or overly strict rules.\r\n\r\nI certainly consider that every time there's a proposal for a new rule. Many suggestions look reasonable in isolation, but adding every one of them to the guidelines makes them bloated and less useful.\r\n\r\n",
      "... and if the subject is divisive or not universally agreed upon, pretending there's only one right way to do it can actually have negative value. The current proposed wording (\"the angle form (`<>`) identifies standard headers, the quoted (`\"\"`) everything else\") falls into that category for me.\r\n\r\nIt might be better to say nothing than to give bad advice.",
      "tl;dr +1 @jwakely, let's maybe back away from this\r\n\r\n> @johnmcfarlane that was my position coming into this but I took the turn that Herb suggested.\r\n\r\nI'm not entirely sure about that. I find it tricky to explain my reservation about the advice: \"Use the quoted or angle bracket form of `#include` to distinguish standard headers from others\".\r\n\r\nIf a header or source file from a project includes another header from the same project, but that included header is found via a header search path (as opposed to being relative to the including file), then angle brackets are appropriate. I believe that's contrary to the title of this PR at this time.\r\n\r\nI don't believe that this is opinion or style. This is my interpretation of docs such as [these (somewhat ambiguous) ones for GCC](https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html) and [this MSVC page](https://docs.microsoft.com/en-us/cpp/build/reference/i-additional-include-directories?view=vs-2019). What they document is valuable functionality. However, they do somewhat contradict [this note in the standard](http://eel.is/c++draft/cpp.include#8) which @hsutter points to. (I think the standard maybe takes a wrong turn here!)\r\n\r\nI think it's ill advised to use `\"\"` to include a file that is found via a search path (e.g. one provided by `-I`). It's inefficient and will occasionally result in the wrong file being included.\r\n\r\nFor example, consider a user's project in the */my_project/* directory. Say it includes a copy of GSL at */my_project/external/*, and uses the flag, `-I/my_project/external/gsl/include` (GCC/Clang) or `/I/my_project/external/gsl/include` (MSVC).\r\n\r\nNow consider a file, */my_project/src/my_source.cpp* which observes F.12:\r\n\r\n```c++\r\n#include \"gsl/gsl_assert\"\r\n```\r\n\r\nA typical compiler will first look for the file, */my_project/src/gsl/gsl_assert*. That's the wrong location and a waste of time. If (by freak accident) there's a file in that location, you included the wrong file in a way which was rather surprising, a pain to diagnose and entirely avoidable.\r\n\r\nIf, however, your file looks like this:\r\n\r\n```c++\r\n#include <gsl/gsl_assert>\r\n```\r\n\r\nThen everything works as intended but F.12 is violated.\r\n\r\nGiven the hot air required to explain this, I sympathize with @jwakely's inclination to slowly walk away from this topic. However, I'm also happy to help draft an amended rule (and/or the note) which plays nice with common toolchains. Perhaps:\r\n\r\n## F.12 Prefer the angle bracket form of `#include` where you can and the quoted form everywhere else",
      "I would prefer always use '<...>', so if we have to substitute a .h file for unit test compilation we can do it for each and every file.\r\n",
      "@alex4747-pub you can achieve this without contravening my suggested advice if you add every location to your header search path. I'm not sure it's necessary for situations where *foo.cpp* includes *foo.h* located in the same source file. But it's no need to prevent other users from using `\"\"` correctly and safely.",
      "I'd be happy to go with \r\n> F.12 Prefer the angle bracket form of #include where you can and the quoted form everywhere else\r\n\r\nif others agree",
      "#1570. This works well for me, avoids the 3rd rails and matches my (naive) take on this going in.",
      "#1570 replaces this, so I'll close this one."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c618912b45d3699309",
    "number": 1455,
    "body": "content should speak for itself",
    "head_branch": "add_SF_12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c718912b45d369930a",
    "number": 1453,
    "body": "It's a minor typo, see title.\r\nThank you!",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove extra backtick in ES.23 (#1453)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c818912b45d369930b",
    "number": 1449,
    "body": "Looks like the comments were copied from the previous example and modified but not quite vigorously enough, continuing to refer to the class from the previous example instead of the new class.",
    "head_branch": "c.128comment",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix comment in C.128 example (#1449)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074c918912b45d369930c",
    "number": 1448,
    "body": "This PR affirms that all virtual functions, *including destructors*, should be declared exactly one of `virtual`, `override`, or `final`.\r\n\r\nOf course a virtual destructor is a virtual function: It behaves polymorphically, and it has a vtable entry that can be overwritten == overridden in a derived class exactly the same as any other derived virtual override. See also [class.virtual]/7: \"Even though destructors are not inherited, a destructor in a derived class overrides a base class destructor declared virtual; see [class.dtor] and [class.free].\"\r\n\r\nHowever, the following exception text currently appears in C.128:\r\n\r\n> If a base class destructor is declared `virtual`, one should avoid declaring derived class destructors  `virtual` or `override`. Some code base and tools might insist on `override` for destructors, but that is not the recommendation of these guidelines.\r\n\r\n... with rationale in #721, but this exception is (a) not well-founded, and (b) inconsistent with the Guidelines' practice in other examples and with the rationale a few lines earlier for C.128 itself.\r\n\r\nRe (a):\r\n\r\n- The exception is overly broad: The rationale given for this exception is entirely against marking destructors `override` (not `virtual`). So clearly the exception to write neither keyword is too broad: At most, the exception should be to write `virtual` rather than `override`. (Additionally, I think it's clear that `final` should be allowed, and it is inconsistent to recommend writing one of the three virtual control keywords and not the other two.)\r\n\r\n- Explicit `virtual` is primarily for class users, not class authors: The arguments given in #721 favoring this exception are from the viewpoint of the implementation of the function (even then, the arguments are debatable and debated). But `virtual`, `override`, and `final` are primarily for the far larger audience of *class users and call sites* of the function, for whom of course we should document each declared function that is polymorphic, *especially* the destructor -- this tells calling code whether the function is safe to call through a (smart or built-in) pointer or reference to base, which will nearly always be the case for such types. We should not make the reader of the code go away to look in the base classes to figure out whether a function declared in this class is virtual or not -- the reason this Item exists is primarily to avoid that implicit virtual antipattern via convention and automated enforcement. For class users, all virtual functions including destructors are equally polymorphic.\r\n\r\nRe (b):\r\n\r\n- The Guidelines already don't follow this. For instance, two Items later (in C.130) we have this example that correctly uses `override`:\r\n\r\n~~~\r\nvirtual ~D() override;\r\n~~~\r\n\r\n... though per C.128 it should not also specify `virtual` (also fixed in this PR).\r\n\r\n- Finally, the exception also contradicts the rationale given earlier in the same Item.",
    "head_branch": "For-1446",
    "is_a_fork": false,
    "comments": [
      "Editors call: We're going to accept this PR to revert back to the previous status quo of no exception for the destructor. We are open to seeing if there is editors' consensus for this special rule for the destructor, if someone wants to promote that please create a new issue proposing reinstating this wording."
    ],
    "commit_messages": [
      "Closes #1446 (#1448)\n\nThis PR affirms that all virtual functions, *including destructors*,\r\nshould be declared exactly one of `virtual`, `override`, or `final`, and\r\ntakesa pass through the document to make the examples and guidance\r\nconsistent with that.\r\n\r\nOf course a virtual destructor is a virtual function: It behaves\r\npolymorphically, and it has a vtable entry that can be overwritten ==\r\noverridden in a derived class exactly the same as any other derived\r\nvirtual override. See also [class.virtual]/7: \"Even though destructors\r\nare not inherited, a destructor in a derived class overrides a base\r\nclass destructor declared virtual; see [class.dtor] and [class.free].\"\r\n\r\nHowever, the following exception text currently appears in C.128:\r\n\r\n> If a base class destructor is declared `virtual`, one should avoid\r\ndeclaring derived class destructors  `virtual` or `override`. Some code\r\nbase and tools might insist on `override` for destructors, but that is\r\nnot the recommendation of these guidelines.\r\n\r\n... but this exception is (a) not well-founded, and (b) inconsistent\r\nwith the Guidelines' practice in other examples and with the rationale a\r\nfew lines earlier for C.128 itself.\r\n\r\nRe (a):\r\n\r\n- The exception is overly broad: The rationale given for this exception\r\nis entirely against marking destructors `override` (not `virtual`). So\r\nclearly the exception to write neither keyword is too broad: At most,\r\nthe exception should be to write `virtual` rather than `override`.\r\n- Explicit `virtual` is primarily for class users, not class authors:\r\nThe arguments given in #721 favoring this exception are from the\r\nviewpoint of the implementation of the function (even then, the\r\narguments are debatable and debated). But `virtual`, `override`, and\r\n`final` are primarily for the far larger audience of *class users and\r\ncall sites* of the function, for whom of course we should document each\r\ndeclared function that is polymorphic, *especially* the destructor --\r\nthis tells calling code whether the function is safe to call through a\r\n(smart or built-in) pointer or reference to base, which will nearly\r\nalways be the case for such types. We should not make the reader of the\r\ncode go way to look in the base classes to figure out whether a function\r\ndeclared in this class is virtual or not -- the reason this Item exists\r\nis primarily to avoid that implicit virtual antipattern via convention\r\nand automated enforcement. For class users, all virtual functions\r\nincluding destructors are equally polymorphic.\r\n\r\nRe (b): The Guidelines already don't follow this. For instance, two\r\nItems later (in C.130) we have this example that correctly uses\r\n`override`:\r\n\r\n~~~\r\nvirtual ~D() override;\r\n~~~\r\n\r\n... though per C.128 it should not also specify `virtual` (also fixed in\r\nthis PR).\r\n\r\nFinally, the exception also contradicts the rationale given earlier in\r\nthe same Item."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ca18912b45d369930d",
    "number": 1443,
    "body": "- \"a C-style, zero-terminated strings\" is wrong, it must be either \"C-style, zero-terminated strings\" or \"a C-style, zero-terminated string\"\n- added hint to `std::string_view",
    "head_branch": "i13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "I.13: grammar and hint to `std::string_view` (#1443)\n\n- \"a C-style, zero-terminated strings\" is wrong, it must be either \"C-style, zero-terminated strings\" or \"a C-style, zero-terminated string\"\r\n- added hint to `std::string_view"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074cb18912b45d369930e",
    "number": 1442,
    "body": "- C++17 is already available\n- synchronize with F.21:\n  - put quotes around \"structured bindings\"\n  - remove link to proposal",
    "head_branch": "i10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "I.10: structured bindings is now available (#1442)\n\n- C++17 is already available\r\n- synchronize with F.21:\r\n  - put quotes around \"structured bindings\"\r\n  - remove link to proposal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074cc18912b45d369930f",
    "number": 1439,
    "body": "Hi there, this example came up in a discussion with a newer coder in an #include channel. We explained what was going on with it and had a little talk about how it didn't seem helpful not to just explain it. Thus this PR was born.",
    "head_branch": "users/playmer/RewriteExampleText",
    "is_a_fork": true,
    "comments": [
      "Seems like the build failed due to it detecting `toLower` being \"misspelled\" by my reading. But let me know if there's something I can do to fix that.",
      "See `scripts/hunspell/isocpp.dic` for the custom dictionary.",
      "Okay, added it to the dictionary. Looks like it passed! Thanks for the tip off on that!",
      "Editors call: Merged, thank you!"
    ],
    "commit_messages": [
      "Editing P.9: \"Don't waste time or space\" Example Text (#1439)\n\n* Initial rewrite\r\n\r\n* Fixed a couple of inaccuracies and minor grammar mistakes\r\n\r\nThanks to twitter user @lunasorcery for these changes!\r\n\r\n* Added toLower to dictionary"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074cd18912b45d3699310",
    "number": 1430,
    "body": "See #1429",
    "head_branch": "Rem-redundant-asterisk",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove extra asterisk in example in C.60 (#1430)\n\ncloses #1429"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ce18912b45d3699311",
    "number": 1428,
    "body": "Below heading \"Example, better still\" there was a missing backtick after gsl::string_span",
    "head_branch": "Fix-backtick-C.49",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Inserts a missing backtick in C.49 (#1428)\n\nBelow heading \"Example, better still\" there was a missing backtick after gsl::string_span"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074cf18912b45d3699312",
    "number": 1427,
    "body": "",
    "head_branch": "hotfix/fix-c49-typo",
    "is_a_fork": true,
    "comments": [
      "I also made a PR for the same yesterday and it got merged. So this PR can be closed. (#1428)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d018912b45d3699313",
    "number": 1426,
    "body": "Minor correction: C.120 has a good example which violates C.128 by\r\nspecifying both `virtual` and `override` for methods.",
    "head_branch": "hotfix/C.120_example_violates_C.128",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix C.120 good example (#1426)\n\nC.120 has a good example which violates C.128 by specifying both virtual and override for methods.\r\ncloses #1425"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d118912b45d3699314",
    "number": 1422,
    "body": "Added a simple example for T.48, which didn't have any.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Add example code for T.48 (#1422)\n\n* Add example code for T.48\r\n\r\n* Fix whitespace in end of line\r\n\r\n* Use better syntax for concept constraint\r\n\r\n* Revert \"Use better syntax for concept constraint\"\r\n\r\nThis reverts commit f071920d7f9189909a59343aebe34e2db583a519."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d218912b45d3699315",
    "number": 1416,
    "body": null,
    "head_branch": "es23-updates",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Update ES.23 to allow = initialiization (#1416)\n\n* Update ES.23 to allow = initialiization\r\n\r\n* Silencing Travis\r\n\r\n* Changed title back to original, it's fine\r\n\r\n* Add note about explicit"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d318912b45d3699316",
    "number": 1414,
    "body": "* simplify first sentence\r\n* change second sentence to \"bored with\"\r\n* \"toolchain\" (no space) is a word",
    "head_branch": "P.12",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks for the suggestions. We think most of these are really choices that boil down to \"author's voice\" -- stylistic preferences that don't seem to be addressing a technical ambiguity or problem."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d418912b45d3699317",
    "number": 1413,
    "body": "* reword the A.1 rule title\r\n* add candidate content for the A.1 rule\r\n* make minor improvements to the A.2 note\r\n* simplify wording in the first bullet of A.4's Reason",
    "head_branch": "A.all",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! We like most these improvements.\r\n\r\nWe'll take the whole PR, but in general we want to discourage changes that are purely about style -- that doesn't actually make the document more consistent unless we were to globally rewrite it. Author's voice is important, and there's more than one way to say a thing clearly.\r\n\r\n(We are aware of Strunk & White and _Chicago_ and why to prefer active voice and so on... consistency is good but those rules are not always improvements and shouldn't be followed slavishly. :))",
      "Totally understand, @hsutter , thank you for the explanation."
    ],
    "commit_messages": [
      "Improve A.all (#1413)\n\n* reword the A.1 rule title\r\n* add candidate content for the A.1 rule\r\n* make minor improvements to the A.2 note\r\n* simplify wording in the first bullet of A.4's Reason"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d518912b45d3699318",
    "number": 1412,
    "body": "As I discussed in #1407, I found the existing wording confusing as I\r\nexpected that the guidelines would provide me with one recommended way\r\nto author function arguments in all situations.  However, the\r\ndiscussion on the issue clarified that the intent was to allow many\r\nways to author functions, and only to disallow specific clearly\r\nnon-optimal cases.\r\n\r\nThis is my attempt to reduce that confusion, by explicitly calling out\r\nwhen such freedoms exist.\r\n\r\nAs I mentioned also in #1407, I'm somewhat doubtful that providing\r\nthis much developer freedom is a good idea.  A different way to solve this confusion\r\nwould have been to provide an explicit recommendation for these ambiguous cases.\r\nHowever, I don't feel especially qualified to provide such a recommendation, hence\r\nthis PR.",
    "head_branch": "clarify-developer-freedom-functions",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks, we've reviewed this and we think we see where you're coming from.\r\n\r\nWe believe that the guidance does actually provide a deterministic decision tree for how to write parameters. Note that each Item is about \"what I want to do with the argument\" -- e.g., \"in\" means \"I want an X I can read from.\" So for example the last edit for F.18, which correctly notes that `const&` and `&&` overloads can be used, doesn't actually belong in that item because F.18 is intended to be about \"my functions wants an argument I will move from,\" and in that case there will not be a `const&` overload. Rather, the `const&`/`&&` overloading comes from the \"in\" parameter (F.16), where we use by-value or by-`const&` by default, then only if we want to optimize we can add a `&&` overload. So we think that the guidance as written is correct, based on each Item being about wanting to do a specific thing with the argument.\r\n\r\nWith that in mind, are there other changes that would make that clearer?",
      "Thanks for your time. I really appreciate the consideration and thought, as well as the rest of the work the editors do on this document.\r\n\r\nI completely see your point regarding my note in F.18 being inappropriate.  I'll drop that part without further comment.\r\n\r\nHowever, unfortunately, I just can't agree with you that the guidelines as written provide a deterministic method for choosing a function's signature.  As I mentioned in the discussion on the linked issue (#1407), many rules can apply to a given scenario, and the exact set of signature(s) you end up with depends deeply on which rule you choose to apply.\r\n\r\n``` c++\r\nstruct A { vector<int> data; };\r\nstruct B { vector<int> data; };\r\n\r\n\r\n// Follows F.16 - no optimization\r\nB convert(const A& a) {\r\n return B{a.data};\r\n}\r\n\r\n// Follows F.16 - with optimization\r\nB convert(const A& a) {\r\n return B{a.data};\r\n}\r\n\r\nB convert(A&& a) {\r\n  return B{std::move(a).data};\r\n}\r\n\r\n// Follows F.18\r\nB convert(A&& a) {\r\n  return B{std::move(a).data};\r\n}\r\n\r\n// Follows F.19\r\ntemplate <typename A>\r\nB convert(A&& a) {\r\n return B{std::forward<A>(a).data};\r\n}\r\n```\r\n\r\nSo, from the same starting point (\"I want to convert A to B\"), the guidelines can point me in four different directions regarding the type signatures in the overload set.  To me, seeing the chart after F.15 made me think there would be a single recommended overload set for each scenario.  This is what my edit was trying to clarify.\r\n\r\nI'm totally open to the idea that I'm missing something about how I'm supposed to think about this set of guidelines - if I am, please let me know!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d618912b45d3699319",
    "number": 1411,
    "body": "* change comment to \"possible leak\" in first Example\r\n* add a comma after \"multiple possible `throw`s\"\r\n* shorten `f3` and `f4` comments to \"via handle\"\r\n* remove \"really\", since no difference between \"need\" and \"really need\"\r\n* shorten `f5` comment to \"via local object\"\r\n* split \"handle is infeasible\" run-on sentence in two\r\n* change to \"no distinct resource handle\" (away from \"obvious\")\r\n* change to active verb in \"represent cleanup actions\"\r\n* change to active verb in \"can't use exceptions\" paragraph\r\n* add a comma in \"First, challenge\"\r\n* add a comma to \"hard-real-time system\" sentence, change to active verb\r\n* change to active verb in \"simulate RAII\" sentence\r\n* remove \"Obviously,\" phrase from conclusion, since it adds no meaning",
    "head_branch": "E.6",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks for the suggestions. We think most of these are really choices that boil down to \"author's voice\" -- stylistic preferences that don't seem to be addressing a technical ambiguity or problem, but one or two are improvements so instead of asking you to redo the PR we've gone ahead and accepted those via a separate commit. Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d818912b45d369931a",
    "number": 1410,
    "body": "* Change to active verb in Reason\r\n* Remove unnecessary preposition repeat in first Note sentence\r\n* Change to active verbs in \"Put another way\" section",
    "head_branch": "Per.3",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks for the suggestion. We think these are just stylistic preferences that don't seem to be addressing a technical ambiguity or problem, so we think the original and proposed text are equally good."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074d918912b45d369931b",
    "number": 1406,
    "body": "Fix small grammatical errors",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.129 Small fixes (#1406)\n\n* C.129 Fix typos and conjugation\r\n\r\nI noticed some grammatical errors in this section and fixed them to match my interpretation of the author's intention.\r\n\r\n* One more fix\r\n\r\nPluralization"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074da18912b45d369931c",
    "number": 1405,
    "body": "* balanced verb usage in first sentence\r\n* changed third sentence to \"libraries not using threads\", as I\r\n  believe this was the original author's intended meaning.\r\n* clarified \"this\" in fourth sentence\r\n* cut wordiness of \"thanks to the magic of cut-and-paste\", as it\r\n  added no value\r\n* changed \"Example\" heading to \"Example, bad\"\r\n* added \"bad:\" comment above statics in the example\r\n* added an explanatory sentence immediately after the example\r\n* changed \"works perfectly in a single-threaded\" after example to\r\n  \"works as intended in a single threaded\".  Also balanced the\r\n  structure of the two comma separated phrases inside this sentence.\r\n* strengthened parenthetical explanation in second bullet of \"could\r\n  be made safe\" section",
    "head_branch": "CP.1",
    "is_a_fork": true,
    "comments": [
      "Editors call: The editorial parts generally look like an improvement (thanks!) but could you remove or simplify the specific cache details (which may not be necessary and might not age well over time)?",
      "I agree, @hsutter .  I think it reads more cleanly without those details.",
      "Editors call: Looks good, thanks!"
    ],
    "commit_messages": [
      "Tighten up CP.1 (#1405)\n\n* Tighten up CP.1\r\n\r\n* balanced verb usage in first sentence\r\n* changed third sentence to \"libraries not using threads\", as I\r\n  believe this was the original author's intended meaning.\r\n* clarified \"this\" in fourth sentence\r\n* cut wordiness of \"thanks to the magic of cut-and-paste\", as it\r\n  added no value\r\n* changed \"Example\" heading to \"Example, bad\"\r\n* added \"bad:\" comment above statics in the example\r\n* added an explanatory sentence immediately after the example\r\n* changed \"works perfectly in a single-threaded\" after example to\r\n  \"works as intended in a single threaded\".  Also balanced the\r\n  structure of the two comma separated phrases inside this sentence.\r\n* strengthened parenthetical explanation in second bullet of \"could\r\n  be made safe\" section\r\n\r\n* Correct grammar mistake pointed out by @cubbimew\r\n\r\n* Remove specific cache details in CP.1 per @hsutter's request"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074db18912b45d369931d",
    "number": 1404,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ES.49: added lvalue in std::forward description (#1404)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074dc18912b45d369931e",
    "number": 1403,
    "body": "There was an uninitialized variable `i`",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ES.42: index in an example was not declared (#1403)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074dd18912b45d369931f",
    "number": 1402,
    "body": "Some of the naming and layout have the following sentence: \"Thus rule was added ...\". I'm assuming that this was meant to be \"This rule was added\". If the intent was really to have a \"Thus\", it feels like it still needs a definite article or a demonstrative, e.g., \"Thus, this rule\".",
    "head_branch": "nl-typofix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in some of the NL rules, \"thus rule\" -> \"this rule\" (#1402)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074de18912b45d3699320",
    "number": 1401,
    "body": "Hello, \r\nI added a bad and good example to NR.5 Don’t: Don’t do substantive work in a constructor; instead use two-phase initialization.\r\nI think it could be suitable. If you think it illustrates the reason for the \"don't\" rule well, I would be happy if you integrate the change.\r\nAnyway I would be happy about any thoughts and comments.\r\nThank you very much.\r\nFlorian",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Hi, I am not familar yet with the common procedure on github, but I am willing to learn fast. So, please apologize if I do sth. uncommon here.\r\nAre there any more thought for this pull request? Do the examples fit well for illustrate the \"Don't\" rule?\r\nThank you very much in advance for any input.",
      "> I am not familar yet with the common procedure on github\r\n\r\nThe procedure on Core Guidelines has been that non-trivial decisions are made on the telecons when Bjarne Stroustrup, Herb Sutter, and others get to review and discuss pull requests and new issues. Until then, it's just comments such as these.",
      "Editors call: Looks good, thank you!"
    ],
    "commit_messages": [
      "Added bad and good example to NR.5 in CppCoreGuidelines.md (#1401)\n\n* Added bad and goof example to NR.5 in CppCoreGuidelines.md\r\n\r\nAdded bad and good example to NR.5 Don’t: Don’t do substantive work in a constructor; instead use two-phase initialization.\r\nI think it could be suitable.\r\n\r\n* adjusted coding style\r\n\r\n* removed extra space\r\n\r\n* removed one more whitespace\r\n\r\n* removed spaces before note to make it a blank line\r\n\r\n* made Cleanup method from bad example return void\r\n\r\n* some changes after review comments\r\n\r\n- removed try catch\r\n- removed defaulted dtor\r\n- changed int to size_t, removed check for even.\r\n- Expects() for invariant check\r\n- typo\r\n\r\n* spell check adjustment\r\n\r\n* moved comment up for met the line length\r\n\r\n* changed variablename in good example\r\n\r\n... they were named same after removed the try catch scope\r\n\r\n* changed afer comments\r\n\r\n- changed check_size() function to a static member function \r\n- fixed comment mentioning the default contract violation behavior."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074df18912b45d3699321",
    "number": 1399,
    "body": "The \\<a\\> tags in [Pro.bounds](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#probounds-bounds-safety-profile) and [Pro.lifetime](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#prolifetime-lifetime-safety-profile) sections have the wrong attribute: they have \"href\" instead of \"name\" so anchors to them are not working correctly. (e.g : The link to \"bounds.2\" in [In.force](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#inforce-enforcement))",
    "head_branch": "fix-a-tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix wrong <a> tags in Pro.bounds and Pro.lifetime (#1399)\n\nReplaced \"href\" attribute to \"name\" of <a> tags in Pro.bounds and Pro.lifetime sections, to make the anchors to them work correctly"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e018912b45d3699322",
    "number": 1398,
    "body": "Hello: \r\n\r\nI've added a basic support for creating an azw file (kindle file). For that, after building just run \"make ebook\" and it will generate a correct azw. \r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks! We are interested but we're not ebook experts or able to commit to maintaining this. If you are willing to maintain this, perhaps the best thing would be to create your own GitHub project which regularly pulls from ours to stay in sync and just adds the azw work. We could link to it as a community project associated with us and advertised by us but not something we know the details about or directly support. Would you be interested in doing something like that?",
      "Ok, that's fine for me. \nThanks.\nEnviado desde la nevera // Sent from the fridge Raul Luna Rodríguez superman_ha_muerto@yahoo.com \n\n    El jueves, 4 de abril de 2019 8:06:54 p. m. GMT+2, Herb Sutter <notifications@github.com> escribió:  \n \n \nEditors call: Thanks! We are interested but we're not ebook experts or able to commit to maintaining this. If you are willing to maintain this, perhaps the best thing would be to create your own GitHub project which regularly pulls from ours to stay in sync and just adds the azw work. We could link to it as a community project associated with us and advertised by us but not something we know the details about or directly support. Would you be interested in doing something like that?\n\n—\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n   "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e118912b45d3699323",
    "number": 1396,
    "body": "There was an extra character in front of the markdown title.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Ah yes, introduced the other day with 142fc6ad3371ba5dca806b64a4379805ca0b1c19\r\n\r\nThanks!"
    ],
    "commit_messages": [
      "MD typo fix (#1396)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e218912b45d3699324",
    "number": 1391,
    "body": "* Reduce pronoun confusion in 1st sentence.\r\n* Correct to \"vary\" conjugation in 2nd sentence.\r\n* Balance verbs across the 3 examples in parenthetical portion of 2nd sentence by using \"waiting\" instead of \"wanting to wait\".\r\n* Correct to \"so do\" conjugation in 2nd sentence.\r\n* Drop \"a few general\" filler from \"we articulate principles\", last sentence, 1st paragraph.\r\n* Rewrite 1st sentence, 2nd paragraph, making \"Threads\" the subject.\r\n* Remove colloquial style from 2nd paragraph, 2nd sentence.\r\n* Reduce sloppiness of \"running multiple instances of your program independently\", 2nd paragraph. \"Multiple instances of a program\" could be confused by many readers with \"multiple processes\", which is not the topic here.\r\n* Simplify the \"Concurrent programming is tricky\" sentence, 2nd paragraph, and keep its content introductory. Leave specifics for rules that follow.\r\n* Remove colloquial style from 1st and 3rd bullets of \"three goals\" section.\r\n* Remove \"it seems that\" from \"an unfinished story\" paragraph, since the phrase adds no meaning.\r\n",
    "head_branch": "CP.intro",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Tighten up the intro to CP (#1391)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e418912b45d3699325",
    "number": 1390,
    "body": "- Parentheses around \"(try to)\" in rule title add no meaning.\r\n- The sentence fragment \"To avoid unpleasant surprises.\" in Reason adds no info that hasn't already been stated.\r\n- \"There are exceedingly clever uses of this 'idiom', but...\" seems like a distraction instead of a tight conclusion to the example section.  We're not seeking \"exceedingly clever\" in this guide.  Per Bjarne's own words, we're seeking the \"smaller, simpler, safer language struggling to get out.\"\r\n- Added a period to the end of the Enforcement sentence.\r\n",
    "head_branch": "ES.84",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Remove elements that don't add value in ES.84 (#1390)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e518912b45d3699326",
    "number": 1389,
    "body": "",
    "head_branch": "patch-20",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar in T.41 (#1389)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e618912b45d3699327",
    "number": 1388,
    "body": "",
    "head_branch": "patch-19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar in Con.2 (#1388)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e718912b45d3699328",
    "number": 1387,
    "body": "",
    "head_branch": "patch-18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in T.22 (#1387)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e818912b45d3699329",
    "number": 1386,
    "body": "",
    "head_branch": "patch-17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      " Make sentence in T.41 complete (#1386)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074e918912b45d369932a",
    "number": 1385,
    "body": "",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [
      "Leaving this one for the next editors call since it adds content, not just fixes typos as your other PRs did, and, by the way, those are very much appreciated!",
      "Editors call: That's a good bad example. :) Thanks!"
    ],
    "commit_messages": [
      "Add example for E.28 (#1385)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ea18912b45d369932b",
    "number": 1383,
    "body": "While apparently, 'mnemonizes' is a word, I don't think it's the best choice here.",
    "head_branch": "patch-14",
    "is_a_fork": true,
    "comments": [
      "    Warning: Spellcheck failed, fix words or add to dictionary:\r\n    Line 16259: memoizes -> memoized\r\n\r\nyou'll have to update isocpp.dic too",
      "Fixed"
    ],
    "commit_messages": [
      "Use `memoizes` instead of `mnemonizes` in the context of caching (#1383)\n\n* Use `memoizes` instead of `mnemonizes` in the context of caching\r\n\r\nWhile apparently, 'mnemonizes' is a word, I don't think it's the best choice here.\r\n\r\n* Update isocpp.dic"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074eb18912b45d369932c",
    "number": 1381,
    "body": "",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [
      "Those references could use updating, since both concepts TS and the standard library concepts (along with other things) from Ranges TS are now part of C++20 working draft."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ec18912b45d369932d",
    "number": 1380,
    "body": "",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar in T.11 (#1380)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ed18912b45d369932e",
    "number": 1379,
    "body": "",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar in T.13 (#1379)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ee18912b45d369932f",
    "number": 1378,
    "body": "This sentence probably needs more work.",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1378)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ef18912b45d3699330",
    "number": 1377,
    "body": "malloc() takes a single argument.",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [
      "Fixed"
    ],
    "commit_messages": [
      "Fix calls to malloc() with 2 arguments (#1377)\n\n* Fix calls to malloc() with 2 arguments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f018912b45d3699331",
    "number": 1376,
    "body": "",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove extra space from README (#1376)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f118912b45d3699332",
    "number": 1375,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove extra parenthesis (#1375)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f218912b45d3699333",
    "number": 1374,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use 'an' instead of 'a' where appropriate (#1374)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f318912b45d3699334",
    "number": 1373,
    "body": "",
    "head_branch": "patch-33",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix capitalization in CP.200 (#1373)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f418912b45d3699335",
    "number": 1372,
    "body": "",
    "head_branch": "patch-32",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use consistent tense and remove repetition in E introduction (#1372)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f518912b45d3699336",
    "number": 1371,
    "body": "",
    "head_branch": "patch-30",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar in E.4 note (#1371)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f718912b45d3699337",
    "number": 1366,
    "body": "",
    "head_branch": "patch-29",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix punctuation in CP.1 (#1366)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f818912b45d3699338",
    "number": 1365,
    "body": "",
    "head_branch": "patch-28",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix spacing in CP.4 example (#1365)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074f918912b45d3699339",
    "number": 1364,
    "body": "",
    "head_branch": "patch-27",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typos (#1364)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074fa18912b45d369933a",
    "number": 1363,
    "body": "",
    "head_branch": "patch-15",
    "is_a_fork": true,
    "comments": [
      "Just want to say that I'm very grateful that someone finally makes an editorial pass of the guidelines. It is sorely needed."
    ],
    "commit_messages": [
      "Fix punctuation in ES.77 (#1363)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074fb18912b45d369933b",
    "number": 1362,
    "body": "",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in ES.86 example (#1362)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074fc18912b45d369933c",
    "number": 1361,
    "body": "",
    "head_branch": "patch-26",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in ES.87 (#1361)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074fd18912b45d369933d",
    "number": 1359,
    "body": "Obviously, the comparisons are intended to compare `Sorted_vector`s, not `T` values",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix args. of == and != operators in C.100 (#1359)\n\nObviously, the comparisons are intended to compare `Sorted_vector`s, not `T` values"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074fe18912b45d369933e",
    "number": 1358,
    "body": "If it *can* throw, then it is *not* noexcept, therefore `noexcept(false)`",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Given that this is an enforcement for the rule that says \r\n\r\n> Declare  a destructor `noexcept`. That will ensure that it either completes normally or terminate the program.\r\n\r\nI suspect it was as intended",
      "Oh, now I understand. I was confused by the old advice of _not_ marking destructors noexcept, in combination with the wording (\"could\")... and my poor understanding…\r\n\r\nWhat is the exact meaning of \"if it could throw\"? \"If the static analysis can't prove otherwise\", maybe?\r\n\r\nWell, sorry and thanks :-)\r\n\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662074ff18912b45d369933f",
    "number": 1357,
    "body": "The code fails to set the type when a number value is assigned to a (formerly) string value. As a result, later access to the value or destruction of the object cause undefined behaviour (access to arbitrary memory address and/or heap corruption). The string field of the union is accessed, but its the number what is there…\r\n\r\nIt's also wrong in the book!\r\n\r\nThe fact that this bug has survived so long pretty much proves the point that code with unions is hard to get right ;-)\r\n\r\nOh, by the way, in order to test this, I had to add a constructor. Though, I'm not including it in the change. I suppose this just stuff we take for granted in the \"// …\" comment.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Oh, the section is:\r\nC.182: Use anonymous unions to implement tagged unions",
      ":+1: \r\nkeeping open for @BjarneStroustrup to look at the next editors call.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Fix union example taken from TC++PL4 (#1357)\n\nThe code fails to set the type when a number value is assigned to a (formerly) string value. As a result, later access to the value or destruction of the object cause undefined behaviour (access to arbitrary memory address and/or heap corruption). The string field of the union is accessed, but its the number what is there…\r\n\r\nIt's also wrong in the book!\r\n\r\nThe fact that this bug has survived so long pretty much proves the point that code with unions is hard to get right ;-)\r\n\r\nOh, by the way, in order to test this, I had to add a constructor. Though, I'm not including it in the change. I suppose this just stuff we take for granted in the \"// …\" comment."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750018912b45d3699340",
    "number": 1353,
    "body": "",
    "head_branch": "patch-24",
    "is_a_fork": true,
    "comments": [
      "To be fair, it does say \"This example has many more problems.\". Perhaps the unused parameter was meant to be one of them?\r\n\r\nAlso, it's ES.62 example, not ES.61",
      "What's the purpose of including problems in the example that are unrelated to the rule it serves? These problems distract from its main point.\r\n\r\nYou're right about the rule number. I can amend.",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Remove unused parameter in ES.62 example (#1353)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750118912b45d3699341",
    "number": 1352,
    "body": "",
    "head_branch": "patch-21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar in ES.50 (#1352)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750218912b45d3699342",
    "number": 1351,
    "body": "",
    "head_branch": "patch-25",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix spacing in ES.63 example (#1351)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750318912b45d3699343",
    "number": 1350,
    "body": "",
    "head_branch": "patch-23",
    "is_a_fork": true,
    "comments": [
      "We're inconsistent across the ES section on this, sometimes within individual rules (e.g. ES.65, ES.107).  On an exhaustive search of the entire ES section, uppercase bullets (24 rules) occur in 4x as many rules as lowercase bullets (6 rules).",
      "These are complete sentences, therefore I believe they should be capitalized.",
      "Could harmonize \"is in\" / \"are in\" between those two sentences while at it."
    ],
    "commit_messages": [
      "Fix capitalization in ES.61 enforcement (#1350)\n\n* Fix capitalization in ES.61 enforcement\r\n\r\n* Fix grammar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750518912b45d3699344",
    "number": 1349,
    "body": "",
    "head_branch": "patch-22",
    "is_a_fork": true,
    "comments": [
      "Could make it a proper sentence while at it (e.g. \"This rule is also known as...\")",
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Fix capitalization in ES.56 note (#1349)\n\n* Fix capitalization in ES.56 note\r\n\r\n* Make proper sentence"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750618912b45d3699345",
    "number": 1348,
    "body": "Reusing the name `i` violates ES.12 and distracts from the point of the example.",
    "head_branch": "patch-20",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "Don't reuse variable name in ES.50 example (#1348)\n\nReusing the name 'i' violates ES.12 and distracts from the point of the example."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750718912b45d3699346",
    "number": 1347,
    "body": "",
    "head_branch": "patch-18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove superfluous word in ES.42 enforcement (#1347)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750818912b45d3699347",
    "number": 1346,
    "body": "",
    "head_branch": "patch-17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar in ES.42 (#1346)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750918912b45d3699348",
    "number": 1345,
    "body": "",
    "head_branch": "patch-16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix comment grammar in ES.40 example (#1345)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750a18912b45d3699349",
    "number": 1344,
    "body": "",
    "head_branch": "patch-14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1344)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750b18912b45d369934a",
    "number": 1343,
    "body": "",
    "head_branch": "patch-13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove unnecessary hyphenation (#1343)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750c18912b45d369934b",
    "number": 1342,
    "body": "",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix comment stating incorrect assigned variable (#1342)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750d18912b45d369934c",
    "number": 1341,
    "body": "",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo (#1341)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750e18912b45d369934d",
    "number": 1340,
    "body": "",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1340)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620750f18912b45d369934e",
    "number": 1339,
    "body": "",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix indentation in example (#1339)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751018912b45d369934f",
    "number": 1338,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo (#1338)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751218912b45d3699350",
    "number": 1336,
    "body": "",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1336)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751318912b45d3699351",
    "number": 1335,
    "body": "",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1335)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751418912b45d3699352",
    "number": 1334,
    "body": "",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Remove redundant word (#1334)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751518912b45d3699353",
    "number": 1333,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1333)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751618912b45d3699354",
    "number": 1331,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1331)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751718912b45d3699355",
    "number": 1329,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo and grammar (#1329)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751818912b45d3699356",
    "number": 1327,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix grammar (#1327)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751918912b45d3699357",
    "number": 1326,
    "body": "text rephrased as suggested by @hsutter in #1236.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Editors call: Thanks!"
    ],
    "commit_messages": [
      "issue #1236 - there is no reason to use the Hungarian notation in C (#1326)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751a18912b45d3699358",
    "number": 1320,
    "body": "Hello: \r\n\r\nI've created using kindlegen a version of the cpp core guidelines for the kindle readers. \r\n\r\nAlthough it is said in the guidelines that they are not intended for a linear reading, I will try to do that. So, I've migrated your guidelines to a nice kindle version, and I propose the file in case you want to add to the repository. \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "How would that file be kept up to date?\r\nPerhaps the steps you took to produce it could be committed here in script form.",
      "I did it manually, but I think I could produce an awk file to create it.... I will keep you posted. \n\nEnviado desde la cafetera \n \n  El jue., feb. 7, 2019 a 8:16, Sergey Zubkov<notifications@github.com> escribió:   \nHow would that file be kept up to date?\nPerhaps the steps you took to produce it could be committed here in script form.\n\n—\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n   \n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751b18912b45d3699359",
    "number": 1318,
    "body": "Nits (see commit messages).",
    "head_branch": "normalize",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Standardize example and note headers (minor) (#1318)\n\n* Standardize example headings\r\n\r\nSome example headings used \"Example, [good,bad]\" and others used\r\n\"Example; [good,bad]\" (note the comma verses semicolon). The vast\r\nmajority of the headings used the comma version, so this commit\r\nnormalizes all example headings to use a comma instead of a semicolon.\r\n\r\n* Standardize note heading level\r\n\r\nTwo of the \"Note\" headings were set to level four, but the rest are at\r\nlevel 5. Fix the level fours to make them level fives."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751c18912b45d369935a",
    "number": 1316,
    "body": "Missing \"if\", I believe.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good, thanks!\r\n"
    ],
    "commit_messages": [
      "Pro.bounds: Correct impact wording (minor) (#1316)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751d18912b45d369935b",
    "number": 1313,
    "body": "F.21 says \"With C++17 we should be able to...\". That seems to have been written in a time where C++17 was not yet finalised. Today we exactly know what \"with C++17 we are able to...\".",
    "head_branch": "f21",
    "is_a_fork": true,
    "comments": [
      "Looks good, thanks!"
    ],
    "commit_messages": [
      "F.21 wording changed to current status of the standard (#1313)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620751f18912b45d369935c",
    "number": 1312,
    "body": "The value -2 is signed, so the word \"unsigned\" is clearly wrong.  The\r\ntext notes that negative subscripts are a source of surprises and\r\nbugs, so the correction to \"negative\" seems to reflect Bjarne's\r\noriginal intent.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good, thank you!"
    ],
    "commit_messages": [
      "Fix typo in ES.102 (#1312)\n\nThe value -2 is signed, so the word \"unsigned\" is clearly wrong.  The\r\ntext notes that negative subscripts are a source of surprises and\r\nbugs, so the correction to \"negative\" seems to reflect Bjarne's\r\noriginal intent."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752018912b45d369935d",
    "number": 1310,
    "body": "It'd be better to have bullet points than writing the points in a long\r\nsentence even with description in parenthesis.",
    "head_branch": "bullet-points",
    "is_a_fork": true,
    "comments": [
      "Hi, I just found something tiny but less readable so submitted this PR. Please take a look. Thanks!",
      "Thanks for the patch.\r\n\r\nI'd prefer it to say \"the following advantages\" instead of \"the below advantages\".\r\n\r\nYou no longer have a grammatical sentence. Either each bullet point should be a complete sentence (start with capital letter and end with period) or there should be a period after the last bullet point, and maybe end the first and second bullets with a semi-colon.",
      "I just updated it following your suggestions. Thanks so much for the review.",
      "Thanks for your help :)",
      "Thank you!"
    ],
    "commit_messages": [
      "Prefer bullet points to a long sentence in SL section (#1310)\n\nIt'd be better to have bullet points than writing the points in a long\r\nsentence even with description in parenthesis."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752118912b45d369935e",
    "number": 1307,
    "body": "F.4 and F.8 made this erroneous claim as parts of notes which are entirely removed.  In particular, F.4 contained this snippet:\r\n> `constexpr` functions are pure: they can have no side effects.\r\n>\r\n>     int dcount = 0;\r\n>     constexpr int double(int v)\r\n>     {\r\n>         ++dcount;   // error: attempted side effect from constexpr function\r\n>         return v + v;\r\n>     }\r\nWhich is full of problems:\r\n  1. the function name is `double`;\r\n  2. the code is ill-formed NDR because there are no values of the argument `v` for which the function is usable in a constant expression; most importantly\r\n  3. the underlying claim that \"constexpr functions are pure\" is wrong as this counterexample ([Godbolt\r\n     link](https://godbolt.org/z/Cxc20A)) demonstrates:\r\n\r\n    int fcount = 0;\r\n    constexpr int f(int v)\r\n    {\r\n        if (v < 0)\r\n            ++fcount;\r\n        return v + v;\r\n    }\r\n",
    "head_branch": "patch-f-functions",
    "is_a_fork": true,
    "comments": [
      ":+1: See also https://github.com/isocpp/CppCoreGuidelines/issues/964 for context.\r\n\r\nAlso, now that we have `consteval` functions, they could be mentioned when (if) talking about purity.",
      "Thanks! This used to be true of `constexpr` but not now. We'll add `consteval` in the future as it gets rolled out in compilers.",
      "Thanks to both of you!"
    ],
    "commit_messages": [
      "Remove claims that \"constexpr functions are pure\" (#1307)\n\nF.4 and F.8 made this erroneous claim as parts of notes which are\r\nentirely removed."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752218912b45d369935f",
    "number": 1305,
    "body": "It is not 2-d array but a 1-d array.\r\nLink - http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c152-never-assign-a-pointer-to-an-array-of-derived-class-objects-to-a-pointer-to-its-base",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "It is a 1D array of aggregates, each initialized by two integers.\r\n\r\nlive demo: https://wandbox.org/permlink/HbX570lNvfdWbO2x "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752318912b45d3699360",
    "number": 1301,
    "body": "It did not compile previously due to missing type specifier on placement new.\r\n\r\n[before](https://godbolt.org/z/3qMpyk) [after](https://godbolt.org/z/cONTl1)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good, thanks"
    ],
    "commit_messages": [
      "Fixing tagged union example (#1301)\n\nIt did not compile previously due to missing type specifier on placement new."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752418912b45d3699361",
    "number": 1300,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Looks good, thanks!"
    ],
    "commit_messages": [
      "Fix a typo (#1300)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752518912b45d3699362",
    "number": 1294,
    "body": "The example looks like it previously used i to represent date, but now the variable is called d. I updated the use and related parameters to match.",
    "head_branch": "fix-example-c51",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix example in C.51 (#1294)\n\nThe example looks like it previously used i to represent date, but now the variable is called d. I updated the use and related parameters to match."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752618912b45d3699363",
    "number": 1291,
    "body": "This relates to issue #1288 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This relates to #1288 ",
      "travis CI checks\r\nLine 1405: impliclty -> simplicity (should be \"implicitly\")\r\nLine 1410: undescribable -> indescribable\r\nLine 1423: rect -> cert  (\"rectangle\" could work here)"
    ],
    "commit_messages": [
      "update to I.4: Make interfaces precisely and strongly typed (#1291)\n\n* updates to I.4: Make interfaces precisely and strongly typed\r\n\r\n* Update enforcement list\r\n\r\n* address PR feedback from blakehawkins"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752718912b45d3699364",
    "number": 1290,
    "body": "C has no support for the exceptions; basically it means C functions are always `noexcept`. When calling a C++ function from C it is a good idea to convert exceptions in another error management way.\r\n\r\nFor this reason, this commit updates the example in setting up `errno` in case of exception. It is well possible to expose the error in different ways, but probably it is better describe those in another place.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "> basically it means C functions are always `noexcept`\r\n\r\nNo it doesn't. It depends on the implementation, but a C++ function can throw an exception that propagates through C functions in the call stack, to be caught by another C++ function.\r\n\r\nFor example:\r\n\r\n    #include <stdexcept>\r\n    extern \"C\" int cmp(const void*, const void*) {\r\n      throw std::logic_error(\"unimplemented\");\r\n    }\r\n    #include <stdlib.h>\r\n    int main()\r\n    {\r\n      try {\r\n        ::qsort(nullptr, 0, 0, &cmp);\r\n      } catch (const std::logic_error&) {\r\n      }\r\n    }\r\n\r\nI disagree with the proposed change, as it appears to imply that functions called by C must be `noexcept`. That isn't true, and it's not even true that they must not throw exceptions.",
      "`gcc`, for example, has the option `-fexceptions` that allows to generate the extra code to propagate the exception in C code. But C has no capabilities to catch and act on those exceptions; we can rethink the wording but ignore the problem makes the answer incomplete. Please note that I did not say that is mandatory in the text file, I expressed badly in the commit comment.",
      ">  Please note that I did not say that is mandatory in the text file, I expressed badly in the commit comment.\r\n\r\nIn the proposed change you said \"for C compilers may expect `noexcept` functions\" but this is not true. A `noexcept` function means that an exception will not propagate and will call terminate. C compilers certainly don't expect that, they either expect no exceptions (but not automatic termination) or are transparent to exceptions (and propagate them untouched, also not calling terminate). Some (but not all) C compilers might expect functions to not throw, but that's not the same as being declared `noexcept`.\r\n\r\nAnd your proposed change to the code example could imply that an `extern \"C\"` function must be declared `noexcept` which is not true (and the absence or presence of `noexcept` makes absolutely no difference to how it's called by C code).",
      "And in fact your change to the signature makes it harder to declare the function in a common header shared by C and C++ code, because the `noexcept` must not be present in the C declaration. So the idiomatic form shown below is complicated by needing to conditionally add `noexcept` to the signature:\r\n\r\n    #ifdef __cplusplus\r\n    extern \"C\" {\r\n    #endif \r\n    X call_f(struct Y*, int);\r\n    // ... other declarations ...\r\n    #ifdef __cplusplus\r\n    }\r\n    #endif\r\n\r\nIt has to become something like:\r\n\r\n    #ifdef __cplusplus\r\n    extern \"C\" {\r\n    #define NOEXCEPT noexcept\r\n    #endif \r\n    X call_f(struct Y*, int) NOEXCEPT;\r\n    // ... other declarations ...\r\n    #ifdef __cplusplus\r\n    #undef NOEXCEPT\r\n    }\r\n    #endif\r\n\r\nI don't think your proposed change is an improvement.\r\n\r\nIMHO if you want to add something about error reporting in C then add that separately, don't make these changes to the existing example. They don't improve clarity.",
      "Good points, better to start from the beginning. My problem with this question and answer is that ignores the problem that C (or other languages able to call C functions like python via `ctypes`) have no means to work on exceptions thrown by C++.\r\n\r\nAs you said, some C compiler can be instructed to let the C++ exception to work properly, but it won't help the C programmer that wants to handle the error; but it will help if the C code is in turn called by C++ as the exception will work properly.\r\n\r\nSo, thanks to your input, I think the best would be: to add a note about the problem in the current example and add another example with a possible solution (but without `noexcept`). I will commit.",
      "I'm not convinced anything needs to be said. We already say \"define the low-level interface in the common subset of C and C++\" which means the interface should not use exceptions for error reporting. A detailed tutorial on how to do it is out of scope.\r\n\r\n ",
      "Exception are good to report errors because (among other reasons) they cannot be ignored; on the other hand it is very easy to forget about their existence. For this reason, I instead think a note is in order. Not a full blown tutorial, just a quick reminder.",
      "For the reasons above we don't think this fits here, but we do think we should open an issue to add content about error handling somewhere in the Guidelines, possibly CPL. Opened #1298. Thanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752818912b45d3699365",
    "number": 1289,
    "body": "This pull request addresses #1287.\r\n\r\nGitHub's markdown renderer automatically generates HTML anchors for any headers in the document. These anchors are generated from the text content of the header, using the following steps:\r\n1. Convert text to lower-case ASCII\r\n2. Remove all characters other than letters, numbers, spaces, and dashes\r\n3. Replaces spaces with dashes\r\n4. Append a numerical suffix (`-1`, `-2`, `-3`, etc) if the anchor is not unique\r\n\r\nThe renderer embeds a link to the anchor beside each header, which can be found by hovering your cursor the header text. The browsable guidelines at http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines do the same thing, with the same anchors.\r\n\r\nThis change fixes a handful of broken links in the first two commits, and then updates all anchor links to use the GitHub generated anchors.\r\n\r\nI decided to leave all of the old anchors in place in order to avoid breaking any existing links to the browsable guidelines because they still function correctly.\r\n\r\nThere are a couple anchor links which did not refer to headers however. These links were still broken because it seems like the GitHub page does the same processing steps on the anchor text in the HTML link, so every anchor containing capital letters cannot be referred to. I've added lower-case processed versions of these anchors alongside the old ones and updated any references to them.",
    "head_branch": "AnchorFix",
    "is_a_fork": true,
    "comments": [
      "An alternative solution would be to simply process all existing anchors with the GitHub processing steps, which essentially amounts to converting them to lower-case. This has the benefit of simplity when extending and updating the document, but it has the drawback of breaking existing links to http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines and being inconsistent with the embeded GitHub anchors (which are visible to readers through the hoverable link icon).",
      "Unfortunately it seems like the spell checker is running over all of the new anchor links. Since the links are intentionally lower-case and have symbols removed, there are a number of results which might not be great to add to the dictionary. Is there any way we can omit parts of the document (like links or code blocks) from the spell check?",
      "glad to see this getting fixed. I don't feel strongly about breaking existing links for not.",
      "I feel the same, no strong desire to keeping existing links alive. To be clear, existing anchor links to https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md cannot be kept alive because of github's changes. Only links to http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines can potentially be kept alive.",
      "Editors call: The links seem to be working again now without our having accepted any change. Let's watch this one and see if it stays unbroken before doing anything.",
      "For now we'll just close this, we can reopen it again if it recurs."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752918912b45d3699366",
    "number": 1286,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "What does this change do?",
      "This might either be a bot, a throwaway account trying to establish credible history, or someone trying to benefit from https://hacktoberfest.digitalocean.com/.\r\nI would recommend reporting to GitHub as abusive.",
      "Reported.",
      "Sir ,this is neither a bot nor a throwaway account ,I am just a beginner trying to improve look of readme.md and basically learning to do PR. I request you not to report it "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752a18912b45d3699367",
    "number": 1284,
    "body": "At least I was struggling with that quite long line combining two static_casts, ternary operator, and the increment by one.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752b18912b45d3699368",
    "number": 1280,
    "body": "",
    "head_branch": "fixed-es-23-typo",
    "is_a_fork": true,
    "comments": [
      "The CI test fails because \"x22\" is not in the dictionary. Could you please add it to `scripts/hunspell/isocpp.dic` and push that to the branch for this pull request?\r\n",
      "Thanks very much!"
    ],
    "commit_messages": [
      "Fixed a typo within ES.23"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752c18912b45d3699369",
    "number": 1278,
    "body": "[C.33 - misassumption of double deletion](https://github.com/isocpp/CppCoreGuidelines/issues/1277)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "No double deletion (#1278)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752d18912b45d369936a",
    "number": 1274,
    "body": "The link to the Lifetime paper was pointing a previous version of the PDF with a different name. Therefore, the link was broken. Updated the link to the current version of the paper.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Ah, I missed one. Good catch, thank you."
    ],
    "commit_messages": [
      "Fix broken link to Lifetime paper (#1274)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620752e18912b45d369936b",
    "number": 1258,
    "body": "This pull request adds ability to translate Guide using gettext.\r\nSource markdown is split on lines. Each line is prepended with a line number and converted into `msgid` of a new `.pot` file. This is done with `scripts/translation/make_pot.sh`. \r\nThis `.pot` file is converted to each language via `msginit` and `msgfmt` into `.po` and `.mo` files repectively.\r\nTo get translated file run `scripts/translation/make_translated.sh` with language code of `.mo`. This script loads translation from `.mo` file using Python's standard `gettext` module and prints translated markdown file on stdout.\r\nThis code is used for [this translation project.](https://translate.zanata.org/project/view/RuCppCoreGuidelines?dswid=6926)",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "We appreciate the interest and encourage use and translation of the Guidelines, but that should be in separate repos please. We would like this main repo to contain only the master English copy and to be dependent on a minimal set of tools."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753018912b45d369936c",
    "number": 1255,
    "body": "Replaced Res-simple with Res-ptr.",
    "head_branch": "issue1253",
    "is_a_fork": true,
    "comments": [
      "Good catch, thank you!"
    ],
    "commit_messages": [
      "Fixes Issue #1253: wrong link in SS-bounds to Res-simple (#1255)\n\nReplaced Res-simple with Res-ptr."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753118912b45d369936d",
    "number": 1252,
    "body": "As per #574, fixes the example in ES.70 to emphasize good use of a switch over a sequence of if-else-if statements.",
    "head_branch": "neilmacintosh-ES70-fix",
    "is_a_fork": false,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Fix example for ES.70 (#1252)\n\nAs per #574, fixes the example in ES.70 to emphasize good use of a switch over a sequence of if-else-if statements."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753218912b45d369936e",
    "number": 1249,
    "body": "This addresses https://github.com/isocpp/CppCoreGuidelines/issues/1246.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "travis-ci errors:\r\ntwo counts of  \"Line ends in whitespace.  Consider deleting these extra spaces.\"\r\nand three counts of \"Spellcheck failed, fix words or add to dictionary:\"\r\nLine 6070: b2 -> b\r\nLine 6070: 'B' -> B'S\r\nLine 6093: inadvertant -> inadvertent",
      "Thanks for the report. I have fixed white spaces and \"inadvertant\". However b2 (name of a variable) and 'B' (quoted characters) are fine, and adding them to dictionary does not seem to make sense?",
      "> adding them to dictionary does not seem to make sense?\r\n\r\nThe dictionary (https://github.com/isocpp/CppCoreGuidelines/blob/master/scripts/hunspell/isocpp.dic) has all sort of variable names and quoted characters in it. It could be improved, but as-is it's simpler to satisfy the check by updating that file.",
      "Ok, updated dictionary.",
      "Editors call: Looks good! We also want to make sure C.130 discourages copy assignment, but can edit that in post-merge."
    ],
    "commit_messages": [
      "Updated C.67 and C.130 (#1249)\n\n* Updated C.67 and C.130\r\n\r\nThis addresses https://github.com/isocpp/CppCoreGuidelines/issues/1246.\r\n\r\n* fixed typeos\r\n\r\n* updated dictionary"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753318912b45d369936f",
    "number": 1245,
    "body": "Fixed the \"Example, good\" in ES.42:\r\n`a[count - 1] = 2;` is wrong (`count` is not even defined).\r\nThe correct one should be `a[a.size() - 1] = 2;`.\r\n\r\nFixed typos in ES.64 and Con.1:\r\nlng is long long.\r\nbe is repeated twice.\r\n\r\nFixed the \"Example bad\" in T.3, no value in subscript:\r\nThe c.elem had no value subscript.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good, thank you!"
    ],
    "commit_messages": [
      "Fix example good in ES.42, count to a.size() (#1245)\n\n* Fix example good in ES.42, count to a.size()\r\n\r\n* Fix typos in ES.64 and Con.1\r\n\r\n* Fix Example bad in T.3, no value in subscript"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753418912b45d3699370",
    "number": 1243,
    "body": "Changed instances of **guideline support library** to **guidelines support library**.\r\n\r\n### Rationale:\r\n\r\n> The GSL is a small library of facilities designed to support this set of guidelines.\r\n\r\nSince the GSL is related to a *set of guidelines* (plural), the **G** in GSL should be **guidelines** (plural) instead of **guideline** (singular).  If, hypothetically, the GSL only applied to a single guideline, or only applied to one guideline at a time, then the singular form would be correct, but this is not the case.  The GSL is a support library for multiple guidelines, making it the **guidelines support library**.",
    "head_branch": "gsl-naming-fix",
    "is_a_fork": true,
    "comments": [
      "Thanks for noticing this! I agree, it makes sense and the plural was already used in two places.",
      "It is probably too late now but this change is based on a premise that is not really correct. Grammatically it is *just as correct* to use \"Guideline Support Library\" as \"Guidelines Support Library\". However the latter is much harder to pronounce and as far as I can see a somewhat less usual.\r\n\r\nFor example we do not say \"Trains Station\", we simply say \"Train Station\" which is the station we go to to find a train. Also the \"Child Support Agency\" is for any child that needs support (not just one child). If you think about it we do not try to say \"The Taxis Rank\" because it is harder to say than \"Taxi Rank\" and can easily be confused with the rank that pertains to the taxi (Taxi's rank).\r\n\r\nIn the same way \"Guidelines Support\" is hard to pronounce and could, in conversation, be confused with support for only one guideline (The Guideline's Support Library).\r\n\r\nThe *original* \"Guideline Support Library\" is not audibly ambiguous in that way and is just as correct (and arguably more so) than the technically also correct \"Guidelines Support Library\".\r\n\r\nIt is simply a library that provides support for any guideline that needs it (which not all do).\r\n\r\nBeing harder to pronounce I suspect it will end up being pronounced as \"Guideline Support Library\" anyway by a lot of people which may lead to a greater instance of misspellings."
    ],
    "commit_messages": [
      "GSL grammar fix, added missing plurality in full name (#1243)\n\n* Renamed all appropriate instances of \"guideline support library\" to \"guidelines support library\".\r\n\r\n* Renamed additional instances of \"guideline support library\" to \"guidelines support library\" in remaining files."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753518912b45d3699371",
    "number": 1240,
    "body": "…d/broken links\r\n\r\n'lifetime profile' is only used twice with bad/broken links. 'lifetime safety' and 'lifetime safety profile' are used more frequently, and make more sense.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Change 'lifetime profile' to 'lifetime safety profile' and fix the bad/broken links (#1240)\n\n'lifetime profile' is only used twice with bad/broken links. 'lifetime safety' and 'lifetime safety profile' are used more frequently, and make more sense."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753618912b45d3699372",
    "number": 1227,
    "body": "A minor problem I found while reading. A quick pattern search did not find any other reference links that were disconnected.",
    "head_branch": "dewhurst-reference",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Correct Dewhurst link to reference found in discussion for C.47"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753718912b45d3699373",
    "number": 1213,
    "body": "To me, the previous formulation made it sound like the return value is always `last` if `val` is not in the range. It seems confusing to me, hence the clarification.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1213 from kugelrund/patch-1\n\nClarify result of lower_bound"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753818912b45d3699374",
    "number": 1212,
    "body": "Signed-off-by: Stefan Weil <sw@weilnetz.de>",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "upstream cpplint.py still has those \"supress\"'s",
      "Perhaps it would be best to submit the fixes to upstream cpplint.py and then just pull down the latest version into the repo?",
      "Editors call: We don't want to fork, could you please submit the fix upstream?"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753918912b45d3699375",
    "number": 1210,
    "body": "This mainly fixes a slight uglyness of the rendered html on http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines for code blocks, you can notice on the left and right side of the codeblocks the letters touch the border between white and grey.\r\n\r\nTo preview the fix, have a look at my rendering with the patch applied http://tkruse.github.io/CppCoreGuidelines/CppCoreGuidelines.html\r\n\r\nAlso the front matter for jekyll is optional now: https://blog.github.com/2016-12-09-publishing-with-github-pages-now-as-easy-as-1-2-3/\r\nSo I removed it from the md and the INSTRUCTIONS.txt. ",
    "head_branch": "feature/fix-padding",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1210 from tkruse/feature/fix-padding\n\nfix padding of rendered codeblocks on github pages"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620753a18912b45d3699376",
    "number": 1208,
    "body": "Fixes #1207.",
    "head_branch": "1207-cp-31-memory-corruption-from-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1208 from mabuchner/1207-cp-31-memory-corruption-from-example\n\nPass parameter as reference in CP.31 example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753b18912b45d3699377",
    "number": 1204,
    "body": "I believe creating array of 100 `Vector0`s will call default constructor 100 times, so will cost 100 allocations.\r\n`Vector0(100)` is one constructor call, so one allocation.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Also `Vector0` isn't a type, it should be `Vector0<int>` or something similar.",
      "Oh right"
    ],
    "commit_messages": [
      "Merge pull request #1204 from gumb0/patch-2\n\nFix typo in C.44"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753c18912b45d3699378",
    "number": 1202,
    "body": "Examples there don't have `init()` function, but comments still mention it",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1202 from gumb0/patch-1\n\nRemove unnecessary comments from C.42 examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753d18912b45d3699379",
    "number": 1201,
    "body": "Fixes #1200.",
    "head_branch": "1200-es-102-odd-loop-condition-in-second-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1201 from mabuchner/1200-es-102-odd-loop-condition-in-second-example\n\nFix ES.102 odd loop condition in example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753e18912b45d369937a",
    "number": 1199,
    "body": "Fix a couple typos/grammar mistakes and lines ending with whitespace.\r\n\r\nLet me know if these should be broken up into multiple pull requests or if the commits should be squashed.",
    "head_branch": "typo-whitespace-fixes",
    "is_a_fork": true,
    "comments": [
      "Thanks."
    ],
    "commit_messages": [
      "Fix typo in error handling intro"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620753f18912b45d369937b",
    "number": 1198,
    "body": "std::literals::string_literals::operator\"\"s is available since C++14\r\nwhile std::pair class template argument deduction is available since\r\nC++17",
    "head_branch": "SL-str-12-cpp-14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1198 from ianhattendorf/SL-str-12-cpp-14\n\nSL.str.12: s suffix is available in C++14"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754018912b45d369937c",
    "number": 1195,
    "body": "added link to GitHub Markdown spec",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1195 from draeger-charles-wilson/patch-3\n\nUpdate README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754118912b45d369937d",
    "number": 1194,
    "body": "C++17 has been released for a bit now.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1194 from draeger-charles-wilson/patch-2\n\nUpdate README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754218912b45d369937e",
    "number": 1193,
    "body": "Herb replaced the joke at the beginning of the document, so the parenthetical referring to it is no longer needed.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1193 from draeger-charles-wilson/patch-1\n\nUpdate CONTRIBUTING.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754318912b45d369937f",
    "number": 1190,
    "body": "close #1188 \r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754418912b45d3699380",
    "number": 1189,
    "body": "Still not really sure about taking .front() from a 0 element vector but sure whatever",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [
      "Those calls to `front()` are undefined, so it would be better to construct the vector non-empty. Maybe just something like:\r\n\r\n    vector<string> v{ \"abc\", \"xyz\" };",
      "Yes, or maybe just put a `= ...` to imply generality. Wasn’t intending on fixing that as this PR though.",
      "Thank you! jwakely, we'll also pull in your suggestion. "
    ],
    "commit_messages": [
      "Fix T.12's incorrect usage of vector::begin() (#1189)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754618912b45d3699381",
    "number": 1184,
    "body": "At the top of the document there are links sorted by language features. For operators there is a link to \"conventional\" and one to \"avoid conversion operators\". Both links pointed to \"conventional\" (copy paste error?). This commit fixes the link to \"avoid conversion operators\".",
    "head_branch": "link_avoid_conversion",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1184 from beinhaerter/link_avoid_conversion\n\nFixed link for \"avoid conversion operators\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754718912b45d3699382",
    "number": 1183,
    "body": "In PR #1169 I added a short note. Now I realize that the word \"explicit\" in the note should better be formatted as code, as it is done in the rest of the document. This small commit changes that.\nI am not sure if the \"Explicit\" at the start of the next sentence should also be formatted as code and how to write it (upper case E, lower case E?). So I only changed the first \"explicit\" in the note.",
    "head_branch": "formatting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1183 from beinhaerter/formatting\n\nFormatting in C.46"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754818912b45d3699383",
    "number": 1182,
    "body": "changed scale factor for `milli` from 1e-4 to 1e-3",
    "head_branch": "example-unit-conversion-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed scale factor for millimeters (#1182)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754918912b45d3699384",
    "number": 1181,
    "body": "per issue #1168",
    "head_branch": "SF11",
    "is_a_fork": true,
    "comments": [
      "I think, self-contained is a more commonly used term. And maybe the some explanation would be good (e.g. just use the part from enforcement section)",
      "@MikeGitb, @hsutter suggested this title, so I'd like to hear what he thinks.",
      "Either term works for me.",
      "> \"Usability, headers should be simple to use and work when included by themselves.\"\r\n\r\nThis first made be wonder why headers might include themselves. I am not a native English speaker but does the following make more sense?\r\n\r\n\"Usability. Headers should be simple to use and work by themselves when included.\"\r\n\r\nIt think it is also worth mentioning that if you add a dependency in a header file (so you change an existing file) but forget to add the corresponding #include then existing code might break. It might be added to the Note.\r\n\r\nWhat I like to do to enforce this rule is that in file.cpp I include file.h at the top of the file to see if it compiles. But I also heard different opinions on the include order. So I think this should not be a guideline. But it might be added as a note.",
      "> does the following make more sense?\r\n\r\nNo, not really. How about \"simple to use and work when included on their own\" or \"... when included without any other headers\".\r\n\r\n",
      "I went with @jwakely's suggestion",
      "The enforcement section still mentions, that the header file shall include itself.\r\n\r\n> A test should verify that each header file can be included by itself and successfully compile.\r\n\r\nI suggest changing this. Maybe to\r\n\r\n> A test should verify that the header file itself compiles or that a cpp file which only includes the header file compiles.",
      "I took @beinhaerter comment.",
      "Looks good, thanks Chris."
    ],
    "commit_messages": [
      "SF.11, Header files should be self-contained (#1181)\n\n* SF.11 Header files should be self-sufficient added\r\n\r\n* PR feedback addressed\r\n\r\n* explain more\r\n\r\n* update reason baed on PR feedback\r\n\r\n* add VS code dir to .gitignore\r\n\r\n* more PR feedback"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754a18912b45d3699385",
    "number": 1179,
    "body": "Also fix missing references and add cross-reference to F.22.\r\n\r\nFixes #1177",
    "head_branch": "issue-1177",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1179 from jwakely/issue-1177\n\nFix comment to match code"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754b18912b45d3699386",
    "number": 1170,
    "body": "The bad example in P.5 checks if Int is at least 32 bits long.\nThe good example checks if Int is at least 4 bytes long.\nC++ intro.memory.1 says that a byte is wide enough for eight bit code of UTF-8, so checking for 4 bytes is OK. But the foot note for intro.memory.1 says that \"The number of bits in a byte is reported by the macro CHAR_BIT in the header <climits>.\".\n\nI suggest the change in my PR because:\n1. It better aligns the bad and the good example. In both cases the number of bits is directly checked against 32.\n2. It would work on platforms with 11 bits per byte (other than the current version).\n3. It makes readers think about the wrong but often made assumption that a byte is always 8 bits wide.",
    "head_branch": "p5_char_bit",
    "is_a_fork": true,
    "comments": [
      "Thanks for the suggestion! We discussed this in our editors' meeting and we don't agree with your second and third points. Comparing `sizeof(Int)` to 4 abstracts the size of bytes. We're not motivated by the first point: we think that use of 32 illustrates the old assumptions that a byte is always 8 bits. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754c18912b45d3699387",
    "number": 1169,
    "body": "This would closes issue #1158.",
    "head_branch": "issue1158_c46_not_copy_move_ctors",
    "is_a_fork": true,
    "comments": [
      "I think I'd put this at the end, before the **Enforcement** section.\r\n",
      "OK, I'll change that. I wanted to be consistent and took the order from C.50. But looking at In.struct it seems like Notes should be quite at the end of a guideline.",
      "This is a good addition! Thank you!"
    ],
    "commit_messages": [
      "Note that C.46 does not apply for copy/move ctors (#1169)\n\n* Note that C.46 does not apply for copy/move ctors\r\n\r\n* moved Note section before Enforcement section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754d18912b45d3699388",
    "number": 1166,
    "body": "Hi everyone,\r\n\r\nI think this example, although it is a bad example is not about public data, so the data members were probably meant to be private.\r\n\r\nThanks!\r\n\r\nStephan",
    "head_branch": "fix-public-private-confusion-in-c.129",
    "is_a_fork": true,
    "comments": [
      "Good catch, thank you!"
    ],
    "commit_messages": [
      "Replace erroneous public keyword by private in C.129. (#1166)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754e18912b45d3699389",
    "number": 1164,
    "body": "updating the code to follow best practice, using sizeof(var) instead of hard coding the known size.",
    "head_branch": "ChrisGuzak-sizeof-not_max",
    "is_a_fork": true,
    "comments": [
      "Can you provide a comment? This change is related to a so-called \"bad\" example.",
      "the \"bad\" is for failure to express the post conditions. the code should, otherwise, follow best practice. that is what this change does. not repeating the information that can be determined with sizeof()",
      "I agree - not to mention that the \"good\" example is still broken https://github.com/isocpp/CppCoreGuidelines/issues/11.",
      "@ChrisGuzak Why did you close the PR?",
      "I did not mean to.  I'll reopen. Thanks for pointing that out.  Rusty on my github workflows.\n\nChris\n\n________________________________\nFrom: beinhaerter <notifications@github.com>\nSent: Wednesday, March 14, 2018 1:09:36 AM\nTo: isocpp/CppCoreGuidelines\nCc: Chris Guzak (WINDOWS); Mention\nSubject: Re: [isocpp/CppCoreGuidelines] use sizeof(buffer) instead of MAX (#1164)\n\n\n@ChrisGuzak<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fchrisguzak&data=04%7C01%7Cchrisg%40microsoft.com%7C1888e10f58604f091a1a08d58982ee16%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636566117790564236%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwifQ%3D%3D%7C-1&sdata=rAR%2FM7KXKj5ke2wabuOL1cFy0yobFokOFNHOlGb7ha0%3D&reserved=0> Why did you close the PR?\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fisocpp%2FCppCoreGuidelines%2Fpull%2F1164%23issuecomment-372936879&data=04%7C01%7Cchrisg%40microsoft.com%7C1888e10f58604f091a1a08d58982ee16%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636566117790564236%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwifQ%3D%3D%7C-1&sdata=wDOYjCUGtv9MTpaNUU7mxQPxYkEyqqEYMzOQOWm4iRg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FACZCEI3zNRJivPSkvy0D2CnMYxd28k2Iks5teNBAgaJpZM4Spjr0&data=04%7C01%7Cchrisg%40microsoft.com%7C1888e10f58604f091a1a08d58982ee16%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636566117790564236%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwifQ%3D%3D%7C-1&sdata=mFh5VfBrQtVhdEnLrnCXFSpScQSFDKs%2FXQA4h%2BYnQGM%3D&reserved=0>.\n",
      "This seems to be the first `sizeof` applied to an expression (as opposed to type) in the whole document and I wonder what others think about redundant parentheses around expressions.",
      "Love 'em.",
      "@cubbimew good topic. I prefer to not have things that are not needed, the parens in this case. Unless others disagree I'd like to not block this pending a conclusion on that.",
      "There was a time that you would often see parens around return values too. But that was probably a matter of fashion and code style."
    ],
    "commit_messages": [
      "Merge pull request #1164 from ChrisGuzak/ChrisGuzak-sizeof-not_max\n\nuse sizeof(buffer) instead of MAX"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620754f18912b45d369938a",
    "number": 1162,
    "body": "Fix minor block comment alignment for clearer read.",
    "head_branch": "bugfix/es.28-comment",
    "is_a_fork": true,
    "comments": [
      "Thanks!\r\n"
    ],
    "commit_messages": [
      "Align comment block (#1162)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755018912b45d369938b",
    "number": 1161,
    "body": "It appears as though the max read int size is larger than the int array size itself.  Was this the intention in showing that there are possible bugs associated with such non-compile-time code?  If so, I think it would be clearer to put an exact equivalent approach.",
    "head_branch": "bugfix/p.5-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "P.5 example read int array size mismatch (#1161)\n\nExpand comment to clarify problem."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755118912b45d369938c",
    "number": 1160,
    "body": "In the 'all values as return value' example in F.21, the passed istream was not used in the function.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "The `get_string` function has still extra semicolon \";\".",
      "@razzorflame Feel free to do the change and start a pull request.",
      "The example needs to be rethought, because the loop runs forever (or never), as `p` is never reassigned. The trivial fix of reassigning `p` in the iteration expression does not compile because the reference cannot be reassigned. `for (auto p = get_string(cin); p.first; p.second = get_string(cin).second)` would work, but it is too easy to consider it \"less elegant\" than the other variation, it only proves \"do not return a reference in a tuple\"; I mean, if the return value is ignored, why return it at all?\r\n`while (true) {\r\n    auto p = get_string(cin);\r\n    if (!p.first) break;\r\n    // do something with p.second\r\n}` is equally ugly, I guess."
    ],
    "commit_messages": [
      "Fixed get_string example in F.21 (#1160)\n\nIn the 'all values as return value' example in F.21, the passed istream was not used in the function."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755218912b45d369938d",
    "number": 1154,
    "body": "`E.15` states that exceptions should be catched from a hierarchy by (const) reference, but the samples provided in `E.14` and `E.18` catches the exceptions by value.\r\n\r\nIt s not the focus of those sample to explain whats the best practice on how to catch exceptions, but the first thing I thought when reading those was \"what if we have a subclass?\"\r\n\r\nEven if this is probably not the first thought of every reader, being consistent on how to catch exception in the samples with the Core Guidelines should not harm, especially because it is a little difference.",
    "head_branch": "feat/catch_by_ref",
    "is_a_fork": true,
    "comments": [
      "This looks good to me.",
      "Thank you!"
    ],
    "commit_messages": [
      "catch by reference in all samples (#1154)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755318912b45d369938e",
    "number": 1152,
    "body": "Add examples.\r\n\r\nFixes #870.",
    "head_branch": "issue-870",
    "is_a_fork": true,
    "comments": [
      "Shouldn't it say non-default constructor special member functions, instead of special member functions? I think the default constructor doesn't participate in wether any other special member functions are implicitly generated or not.",
      "@johelegp I've pushed an update clarifying that.",
      "Thank you!"
    ],
    "commit_messages": [
      "Rephrase C.21 to talk about declaring not defining (#1152)\n\n* Rephrase C.21 to talk about declaring not defining\r\n\r\nAdd examples.\r\n\r\nFixes #870.\r\n\r\n* Define special functions, clarify default constructor effects"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755418912b45d369938f",
    "number": 1149,
    "body": "I fix the inconsistency in naming convention https://github.com/isocpp/CppCoreGuidelines/issues/1148.\r\nAlso, as suggested by @blakehawkins, I edited `CONTRIBUTING.md`.",
    "head_branch": "use-stroustrup",
    "is_a_fork": true,
    "comments": [
      "Per our editor's discussion, the point of this example is that `HashTable` is not necessarily a recommended style, but one that is used. There is no standard style.\r\n\r\nIt might also be a little strong to recommend just Stroustrup's style for everyone. \r\n\r\nThank you for the suggestions, but we are declining this PR. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755518912b45d3699390",
    "number": 1145,
    "body": "One of the samples for ES.87 says:\nif (p == 0) { ... }       // redundant `!= 0`; bad: don't use `0` for pointers\n\nIt looks like this line was copied from a sample some lines above and \"p!=0\" in the code was changed to \"p==0\", but the comment was left unchanged.\nThis PR makes the comment consistent with the sample code.",
    "head_branch": "typo_es87",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Copy-Paste-Typo in Comment for ES.87 sample (==0/!=0) (#1145)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755618912b45d3699391",
    "number": 1144,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good to me.",
      "Thank you for doing this PR for us!"
    ],
    "commit_messages": [
      "Do Not Check For nullptr Explicitely In Examples (closes #1142) (#1144)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755718912b45d3699392",
    "number": 1143,
    "body": "In C4 class Foobar under Exceptions, the function void Foobar::foo(double x) is supposed to call the overloaded void Foobar::foo(int x), but in the call foo(std::round(x)), std::round returns a double. Hence, it will get stuck in an infinite recursive loop. Added static_cast<int>(..) to enforce the call to right overload. Added also keyword public to be more consistent.",
    "head_branch": "bug-fix-C4-exception",
    "is_a_fork": true,
    "comments": [
      "Using static_cast for this conversion contradicts \"ES.46: Avoid narrowing conversions\" (https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-narrowing). In the ES.46 sample there is a cast from double to unsigned and narrow_cast and narrow are suggested as better alternatives.",
      "Looks good to me.",
      "Isn't the more natural thing to do here to use std::lround (and adapt the parameter to `long`)? ",
      "@MikeGitb I was thinking of that also. At the end, I didn't do that because I usually avoid long due to the different sizes in Windows and Linux. But maybe you are right as these guidelines do not say anything about avoiding the long. If nobody opposes I'll make an update.",
      "Yeah, it is unfortunate that there isn't an iround or a std::round template where you can specify the return type.",
      "Thank you, and thanks to the others in the discussion for improving upon the original suggestion!"
    ],
    "commit_messages": [
      "Bug fix C4 class Foobar  (#1143)\n\n* Fixed bug in example code of C4 Expecptions. In C4, the class function void Foobar::foo(double x) is supposed to call the overloaded void Foobar::foo(int x), but in the call foo(std::round(x)), std::round returns a double. Hence, it will get stuck in an infinite recursive loop. Added static_cast<int>(..) to enforce the call to right overload. Added also keyword public to be more consistent.\r\n\r\n* Changed static_cast<int> to narrow_cast<int> following ES.46.\r\n\r\n* Modified C4 Foobar class, s.t, std::lround(x) is now called in\r\nvoid foo(double) and the overload is changed to void foo(long) from (int). Now there is\r\nno need for conversions."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755818912b45d3699393",
    "number": 1138,
    "body": "Right? Depository is a word, but \"source code depository\" returns 34,400 Google hits (unrelated) while \"source code repositories\" returns 14,500,000.",
    "head_branch": "typo-fix-depositories",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Should say repository instead of depository (#1138)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755a18912b45d3699394",
    "number": 1135,
    "body": "Title page: \r\n* updated the titles listing to match the section titles\r\n* modified titles from camel case to sentence case to be in accordance with the majority\r\n* modified abbreviation N to NR (Non-Rules and myths), since the section states it as NR\r\n\r\nIn.sec:\r\n* reordered the titles accordingly\r\n* same updates as on the title page\r\n\r\nGeneral:\r\n* updated broken links\r\n* suggest names to be uniformly in capital case (C++ Standard Library vs. C++ standard library; same for C Standard Library)\r\n\r\nProposal:\r\n* one sentence per line, makes diff more readable",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "title page/In.sec: reordered and updated titles (#1135)\n\n* title page: updated titles and unified titles' camel case to sentence case\r\n\r\n* In.sec: reordered bullets to match document's workflow, updated titles\r\n\r\n* updated several links and link names, modified names to title case\r\n\r\n* redirected broken link to new anchor Rf-value-return at 'value return sematic rules' block\r\n\r\n* updated links\r\n\r\n* reverted unindended broken artistic prose\r\n\r\n* updated links, modified \"see also's\" formatting to comply with the majority\r\n\r\n* modified \"see also's\" formatting to comply with the majority\r\n\r\n* fix spellcheck: 'Componentization -> Compartmentalization'\r\n\r\n* updated link name"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755b18912b45d3699395",
    "number": 1134,
    "body": "Fixed issues with hunspell and linter when running `make` in scripts sub folder as listed below:\r\n\r\n```\r\n[...]\r\n##################### Spell check ##################\r\nsed -e 's!http\\(s\\)\\{0,1\\}://[^[:space:]]*!!g' build/plain-nohtml.txt | hunspell -d hunspell/en_US -p hunspell/isocpp.dic -u  > build/hunspell-report.txt\r\nWarning: Spellcheck failed, fix words or add to dictionary:\r\nLine 20210: stringlike -> springlike\r\nLine 20235: cnt -> ctn\r\nmake: *** [hunspell-check] Error 1\r\n[...]\r\n````\r\n```\r\n[...]\r\nRl-name-type3.cpp:20:  Complex multi-line /*...*/-style comment found. Lint may give bogus warnings.  Consider replacing these with //-style comments, with #if 0...#endif, or with more clearly structured multi-line comments.  [readability/multiline_comment] [5]\r\nDone processing Rl-name-type3.cpp\r\nTotal errors found: 1\r\n 14  // ../CppCoreGuidelines.md : 20229\r\n 15  auto p = new User();\r\n 16  auto p = make_unique<User>();\r\n 17  // note: \"p\" is not being used to say \"raw pointer to type User,\"\r\n 18  //       just generally to say \"this is an indirection\"\r\n 19  \r\n 20  auto cntHits = calc_total_of_hits(/*...*);\r\n 21  // note: \"cnt\" is not being used to encode a type,\r\n 22  //       just generally to say \"this is a count of something\"\r\nDone processing Rl-name-type4.cpp\r\n[...]\r\nDone processing S-unclassified0.cpp\r\nmake[1]: *** [cpplint-all] Error 1\r\nmake[1]: Leaving directory `...`\r\nmake: *** [cpplint-all] Error 2\r\n```",
    "head_branch": "fix-spellcheck/lint-issues-on-make",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "fixed spellcheck/lint issues on running make in ./scripts/ (#1134)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755c18912b45d3699396",
    "number": 1127,
    "body": "taken from https://cpppatterns.com/patterns/weak-reference.html, where\r\nit's published under CC0 Public Domain Dedication",
    "head_branch": "example-for-R.24",
    "is_a_fork": true,
    "comments": [
      "Thanks! Merged the example."
    ],
    "commit_messages": [
      "add example for R.24 (#1127)\n\n* add example for R.24\r\n\r\ntaken from https://cpppatterns.com/patterns/weak-reference.html, where\r\nit's published under CC0 Public Domain Dedication\r\n\r\n* improve example for R.24"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755d18912b45d3699397",
    "number": 1125,
    "body": "With the exception of missing boilerplate code (`#include` statements for STL headers, `using namespace std`, etc.) the example code in C.61 now compiles.\r\n\r\nThere were various compilation failures before, including:\r\n- Use of undefined operator!= function.\r\n- Attempted access of private members in non-friend operator== function.\r\n- Incorrect argument type in copy constructor of X2.\r\n\r\nAdditionally:\r\n- Some incorrect comment text has been addressed.\r\n- Methods of X in the first example have been reordered to be consistent with those of X2 in the second example.\r\n- Use of `assert()` rather than `throw Bad{}`. This is preferable since:\r\n  - `assert()` is a standard library function whereas 'Bad' is not a standard library class.\r\n  - An `assert()` failure indicates a programming error, which would be the case in these examples.",
    "head_branch": "C.61-Example-fixes",
    "is_a_fork": true,
    "comments": [
      "Thank you for the suggestion! Per our editor's discussion, we don't believe that there's a need to make this a complete example. It's more important that the example instructs the reader. Adding additional code to satisfy a compiler hides the real purpose of the example.\r\n\r\nIn general, our examples aren't meant to be code samples that are copy-pasted into your code. Rather, they should illustrate a key concept. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755e18912b45d3699398",
    "number": 1123,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Are concepts not supported in GCC 7/8?",
      "> Are concepts not supported in GCC 7/8?\r\n\r\nThey are, so this pull request changes it from something that was correct in July 2016, and is now outdated, into something that is just blatantly wrong.\r\n\r\nTo remove the \"July 2016\" references to GCC 6.1 should be changed to something like \"GCC 6 and later\".\r\n",
      "Please provide the exact phrase that should be there or I will close this pull request and you do the changes.",
      "Maybe have it say: \"Concepts are supported only in GCC 6 and later.\"",
      "Updated",
      "And now these will become outdated as soon as MS, Clang, and others catch up with at least the C++20 WP Concepts (if not the TS). "
    ],
    "commit_messages": [
      "Removed useless \"Currently (July 2016)\" (#1123)\n\n* Removed useless \"Currently (July 2016)\"\r\n\r\n* replaced `GCC 6.1` with `GCC 6.1 or later`\r\n\r\n* Correct usage of `and/or` in `GCC 6.1 _ later`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620755f18912b45d3699399",
    "number": 1117,
    "body": "The example code won't compile if it attempts to use an undefined != operator.\r\nUse of (!(x == y)) is consistent with existing code in C.11.",
    "head_branch": "bondms-Do-not-use-undefined-operator-ne",
    "is_a_fork": true,
    "comments": [
      "Imho, when you define operator== you should also define operator!= and use it. Let's not make c++ more ugly than it already is.",
      "@MikeGitb is right: you should have `!=` defined if you define `==`, and vice versa.  You should write your C++ program so it is easily read and understood. The expression `!(x ==y)` is not an improvement over `x != y`.  The former should be expected only in the implementation of `operator!=`.",
      "@MikeGitb and @GabrielDosReis, I agree with you both that in real code an `operator!=` should be defined in addition to an `operator==`, but I think that would distract from the point being made in this example. Ideally, example code should be concise and not detract from the point of the specific rule it is demonstrating. Requiring an `operator!=` to complement the `operator==` should be a separate rule.\r\nI originally chose the `(!(x == y))` option because it was consistent with the example code already in C.11. Would it be more acceptable to you if I inverted the logic and used an assert, i.e. `assert(x == y)`? This would eliminate the ugly `(!(x == y)` and keep the example concise. Most importantly, it would still solve the original problem of using an undefined `operator!=`."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756018912b45d369939a",
    "number": 1116,
    "body": "The example code won't compile if it attempts to use an undefined != operator.\r\nUse of (!(a == b)) is consistent with existing code in C.11.",
    "head_branch": "Do-not-use-undefined-operator-ne",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756118912b45d369939b",
    "number": 1115,
    "body": "(Thanks to many WG21 experts for their comments and feedback into this note.)\r\n\r\nAdd the following typedef to GSL\r\n\r\n    namespace gsl { using index = ptrdiff_t; }\r\n\r\nand recommend `gsl::index` for all container indexes/subscripts/sizes.\r\n\r\n\r\n## Rationale\r\n\r\nThe Guidelines recommend using a signed type for subscripts/indices. See ES.100 through ES.107. C++ already uses signed integers for array subscripts.\r\n\r\nWe want to be able to teach people to write \"new clean modern code\" that is simple, natural, warning-free at high warning levels, and doesn’t make us write a \"pitfall\" footnote about simple code.\r\n\r\nIf we don’t have a short adoptable word like `index` that is competitive with `int` and `auto`, people will still use `int` and `auto` and get their bugs. For example, they will write `for(int i=0; i<v.size(); ++i)` or `for(auto i=0; i<v.size(); ++i)` which have 32-bit size bugs on widely used platforms, and `for(auto i=v.size()-1; i>=0; ++i)` which just doesn't work. I don’t think we can teach `for(ptrdiff_t i = ...` with a straight face, or that people would accept it.\r\n \r\nIf we had a saturating arithmetic type, we might use that.\r\nOtherwise, the best option is `ptrdiff_t` which has nearly all the advantages of a saturating arithmetic unsigned type, except only that `ptrdiff_t` still makes the pervasive loop style `for(ptrdiff_t i=0; i<v.size(); ++i)` emit signed/unsigned mismatches on `i<v.size()` (and similarly for `i!=v.size()`) for today's STL containers. (If a future STL changes its `size_type` to be signed, even this last drawback goes away.)\r\n\r\nHowever, it would be hopeless (and embarrassing) to try to teach people to routinely write `for (ptrdiff_t i = ... ; ... ; ...)`. (Even the Guidelines currently use it in only one place, and that's a \"bad\" example that is unrelated to indexing`.)\r\n\r\nTherefore we should provide `gsl::index` (which can later be proposed for consideration as `std::index`) as a typedef for `ptrdiff_t`, so we can hopefully (and not embarrassingly) teach people to routinely write `for (index i = ... ; ... ; ...)`.\r\n\r\n\r\n## Q&A\r\n\r\n**Why not just tell people to write `ptrdiff_t`?** Because we believe it would be embarrassing to tell people that's what you have to do in C++, and even if we did people won't do it. Writing `ptrdiff_t` is too ugly and unadoptable compared to `auto` and `int`. The point of adding the name `index` is to make it as easy and attractive as possible to use a correctly sized signed type.\r\n\r\n**Should it be called `index_t`, following the C convention for typedefs?** Please no. We are competing with `auto` and `int`, both of which have pitfalls for the unwary, and the point of adding this common name is to make it as easy and attractive as possible to use routinely. The extra characters `_t`  (one of which requires hitting Shift; seriously) are a significant uglification for this type that we want to be pervasively used, and I fear those two extra characters will cause needless impedance compared to `auto` and `int`.\r\n\r\n**Is `ptrdiff_t` big enough?** Yes. Standard containers are already required to have no more elements than can be represented by `ptrdiff_t`, because subtracting two iterators must fit in a `difference_type`.\r\n\r\n**But is `ptrdiff_t` really big enough, if I have a built-in array of `char` or `byte` that is bigger than half the size of the memory address space and so has more elements than can be represented in a `ptrdiff_t`?** Yes. C++ already uses signed integers for array subscripts. So use `index` as the default option for the vast majority of uses including all built-in arrays. (If you do encounter the extremely rare case of an array, or array-like type, that is bigger than half the address space and whose elements are `sizeof(1)`, and you're careful about avoiding truncation issues, go ahead and use a `size_t` for indexes into that very special container only. Such beasts are very rare in practice, and when they do arise often won't be indexed directly by user code. For example, they typically arise in a memory manager that takes over system allocation and parcels out individual smaller allocations that its users use, or in an MPEG or similar which provides its own interface; in both cases the `size_t` should only be needed internally within the memory manager or the MPEG class implementation.)\r\n\r\n**Will this still leave noisy signed/unsigned mixed comparison warnings?** Hopefully not. The guidance in this PR allow-lists comparisons between `index` (aka `ptrdiff_t`) and either `sizeof` or a container `.size()` for compatibility with the current standard language and library. (Thanks to Robert Douglas for pointing out the `sizeof` noisy case.)\r\n\r\n**Why not use a saturating unsigned type? Then those big arrays would work, and I wouldn't get any signed/unsigned comparison mismatch warnings even using today's standard containers.** Because we don't have a general-purpose saturating type in the standard. If we get one, we can revisit and consider using it.\r\n\r\n**Should `gsl::span` be updated to use `index`?** Yes. In fact, it effectively already does so because it uses `ptrdiff_t`. Once we add `index`, GSL should change all of its other uses of `ptrdiff_t` to be `index` for stylistic consistency.\r\n",
    "head_branch": "hs-index",
    "is_a_fork": false,
    "comments": [
      "Travis CI needs an update to the dictionary, otherwise it thinks you're talking about triffids\r\n\r\n> Line 12495: ptrdiff -> triffid\r\nLine 12584: ptrdiff -> triffid\r\nLine 12816: ptrdiff -> triffid\r\nLine 19907: ptrdiff -> triffid",
      "I've added `ptrdiff` to the dictionary."
    ],
    "commit_messages": [
      "Add gsl::index, closes #1098 (#1115)\n\n* Add gsl::index, closes #1098\r\n\r\nAnd update examples throughout to use `index` as appropriate\r\n\r\n* Actually adding `index` to the GSL.util section\r\n\r\n* Added `sizeof` to whitelisted signed/unsigned comparisons\r\n\r\nSame reason as container `.size()` -- better backward compatibility with\r\nthe existing standard"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756218912b45d369939c",
    "number": 1114,
    "body": "",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Add logo to isocpp.github.io/CppCoreGuidelines (#1114)\n\n* Adding logo png & text changes\r\n\r\n* Minor fixes\r\n\r\n* Adding image to sidebar\r\n\r\n* fixed image location\r\n\r\n* fixed image location\r\n\r\n* squash me\r\n\r\n* sidebar\r\n\r\n* sidebar\r\n\r\n* sidebar\r\n\r\n* sidebar\r\n\r\n* update\r\n\r\n* update\r\n\r\n* Image size\r\n\r\n* image\r\n\r\n* image\r\n\r\n* image\r\n\r\n* Smaller image\r\n\r\n* Smaller image\r\n\r\n* Smaller image"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756318912b45d369939d",
    "number": 1113,
    "body": "inhibits readability/brace warning for compound literals in return\r\nstatement",
    "head_branch": "return-compound-literal",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "add \"return\" to the compound literal exclusions (#1113)\n\ninhibits readability/brace warning for compound literals in return\r\nstatement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756418912b45d369939e",
    "number": 1111,
    "body": "This fixes an issue discussed at https://github.com/isocpp/CppCoreGuidelines/issues/1110",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Please see the discussion in 1110. Thank you for the suggestion!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756518912b45d369939f",
    "number": 1109,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix example code in F.20. (#1109)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756618912b45d36993a0",
    "number": 1108,
    "body": "The link to section T.21 in the section T overview (https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#t-templates-and-generic-programming) used a different anchor name from the section header.",
    "head_branch": "linkfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed anchor name for T.21 (#1108)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756718912b45d36993a1",
    "number": 1107,
    "body": "",
    "head_branch": "wordfix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed a word (should be 'that' not 'the') (#1107)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756818912b45d36993a2",
    "number": 1106,
    "body": "I think there should be a 'which' instead of the 'the' in the edited sentence.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "This may bait English language-lawyers, but I bet \"that\", rather than \"which\", was the intent. There is \"Flag classes that are copyable\" elsewhere.",
      "As English is just a second language for me, I had to read up on which vs. that. \r\nI agree, there should be a \"that\" not a which. ",
      "I'm guessing this pull-request should be closed and a new one has to be created?",
      "> a new one has to be created?\r\n\r\nNo, you can just force-push a different commit to the same branch and re-use the same pull request. It might even be possible to edit it via the github web UI."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756918912b45d36993a3",
    "number": 1105,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed error in code comment (#1105)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756a18912b45d36993a4",
    "number": 1103,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "fixed minor typo: \"on the on the\" -> \"on the\" (#1103)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756b18912b45d36993a5",
    "number": 1100,
    "body": "The properly defined `Number` concept used as the template type is fully expressive.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1100 from breyed/patch-1\n\nT.concept: Remove comment unnecessary in good example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756c18912b45d36993a6",
    "number": 1096,
    "body": "Adding note to recommend public deleted methods according to discussion on #1083 \r\n",
    "head_branch": "hotfix/recommend-public-deleted-methods",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1096 from brenoguim/hotfix/recommend-public-deleted-methods\n\nRecommend deleted methods to be public."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756e18912b45d36993a7",
    "number": 1095,
    "body": "Making deleted methods public according to discussion on #1083 \r\n",
    "head_branch": "hotfix/public-deleted-methods",
    "is_a_fork": true,
    "comments": [
      "Thank you, and thank you for separating the comment from the code sample changes!"
    ],
    "commit_messages": [
      "Merge pull request #1095 from brenoguim/hotfix/public-deleted-methods\n\nAdd public access modifier to examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620756f18912b45d36993a8",
    "number": 1093,
    "body": "Different typos found at Interface rule.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I think you could [squash](http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html) the 4 commits into one.",
      "Thank you!"
    ],
    "commit_messages": [
      "Typos found at I.* (#1093)\n\n* Typo: change word compute by inserted code .  is the name of a previous function.\r\n\r\n* Typo: add missing comma\r\n\r\n* Typo: minor period typo\r\n\r\n* Typo: form lower to upper case\r\n\r\n* Typos found at I.*\r\n\r\nTypo: add missing comma\r\n\r\nTypo: minor period typo\r\n\r\nTypo: form lower to upper case\r\n\r\nTypos found at I.*"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757018912b45d36993a9",
    "number": 1092,
    "body": "c.49's old example contradicted c.45 so I have updated it to a better good and bad example",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you for the suggestions. We discussed this in our editor's meeting. \r\n\r\nOn first look, we believe that maybe we should be using a `string_view` be used as a parameter or a `span<char>`. See SL.str.* for example. ",
      "Example fixed and reference to string_view added"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757118912b45d36993aa",
    "number": 1087,
    "body": "While translating I suppose I will find all kinds of things.  Missing semicolon on Example 1, P.5. #",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "According to the \"preface,\"\r\n\r\nProblems:\r\n* Triple question marks (???) mark known missing information\r\n\r\nI understand that \"It's known\" that the Guidelines are \"incomplet, incorrekt, and has lots of b**a**d **for**~mat~ting.\"",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1087 from leoperezpulido/master\n\nTypo: add missing semicolon"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757218912b45d36993ab",
    "number": 1086,
    "body": "",
    "head_branch": "fixup/add-delete-to-assignment-list",
    "is_a_fork": true,
    "comments": [
      "We thank you for the suggestion, but the `=delete` rule doesn't appear to the editors to have the significance of the other rules suggested in the \"examples\" section. We don't want to focus our efforts on making this list complete right now. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757318912b45d36993ac",
    "number": 1082,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fixed comment in example code of F.54 (#1082)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757418912b45d36993ad",
    "number": 1079,
    "body": "https://github.com/isocpp/CppCoreGuidelines/pull/1077#issuecomment-344056953",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks."
    ],
    "commit_messages": [
      "fixed minor typo: `it this` -> `this` (on master) (#1079)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757518912b45d36993ae",
    "number": 1078,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Use correct header level (#1078)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757618912b45d36993af",
    "number": 1077,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "just noticed, this went into the gh-pages branch. Could you re-apply to master branch?",
      "I can't.\r\n\r\n```bash\r\n$ git cherry-pick e854e47\r\nerror: could not apply e854e47... fixed minor typo: `it this` -> `this` (#1077)\r\nhint: after resolving the conflicts, mark the corrected paths\r\nhint: with 'git add <paths>' or 'git rm <paths>'\r\nhint: and commit the result with 'git commit'\r\n```\r\n\r\nThe conflicts\r\n\r\n```\r\ndiff --cc CppCoreGuidelines.md\r\nindex d81e8fc,7a7346e..0000000\r\n--- a/CppCoreGuidelines.md\r\n+++ b/CppCoreGuidelines.md\r\n@@@ -12414,43 -12373,79 +12414,55 @@@ whereas `if (p != nullptr)` would be a \r\n  \r\n  ##### Example\r\n  \r\n++<<<<<<< HEAD\r\n +This rule is especially useful when a declaration is used as a condition\r\n++=======\r\n+     void f(int* p)\r\n+     {\r\n+         int x = *p; // BAD: how do we know that p is valid?\r\n+     }\r\n+ \r\n+ There is a huge amount of such code.\r\n+ Most works -- after lots of testing -- but in isolation it is impossible to tell whether `p` could be the `nullptr`.\r\n+ Consequently, this is also a major source of errors.\r\n+ There are many approaches to dealing with this potential problem:\r\n++>>>>>>> e854e47... fixed minor typo: `it this` -> `this` (#1077)\r\n  \r\n -    void f1(int* p) // deal with nullptr\r\n -    {\r\n -        if (p == nullptr) {\r\n -            // deal with nullptr (allocate, return, throw, make p point to something, whatever\r\n -        }\r\n -        int x = *p;\r\n -    }\r\n +    if (auto pc = dynamic_cast<Circle>(ps)) { ... } // execute is ps points to a kind of Circle, good\r\n  \r\n -There are two potential problems with testing for `nullptr`:\r\n +    if (auto pc = dynamic_cast<Circle>(ps); pc != nullptr) { ... } // not recommended\r\n  \r\n -* it is not always obvious what to do what to do if we find `nullptr`\r\n -* the test can be redundant and/or relatively expensive\r\n -* it is not obvious if the test is to protect against a violation or part of the required logic.\r\n +##### Example\r\n  \r\n +Note that implicit conversions to bool are applied in conditions.\r\n +For example:\r\n  \r\n -    void f2(int* p) // state that p is not supposed to be nullptr\r\n -    {\r\n -        assert(p != nullptr);\r\n -        int x = *p;\r\n -    }\r\n +    for (string s; cin >> s; ) v.push_back(s);\r\n  \r\n -This would carry a cost only when the assertion checking was enabled and would give a compiler/analyzer useful information.\r\n -This would work even better if/when C++ gets direct support for contracts:\r\n +This invokes `istream`'s `operator bool()`.\r\n  \r\n -    void f3(int* p) // state that p is not supposed to be nullptr\r\n -        [[expects: p != nullptr]]\r\n -    {\r\n -        int x = *p;\r\n -    }\r\n +##### Example, bad\r\n  \r\n -Alternatively, we could use `gsl::not_null` to ensure that `p` is not the `nullptr`.\r\n +It has been noted that\r\n  \r\n -    void f(not_null<int*> p)\r\n -    {\r\n -        int x = *p;\r\n -    }\r\n +    if(strcmp(p1, p2)) { ... }   // are the two C-style strings equal? (mistake!)\r\n  \r\n -These remedies take care of `nullptr` only.\r\n -Remember that there are other ways of getting an invalid pointer.\r\n +is a common beginners error.\r\n +If you use C-style strings, you must know the `<cstring>` functions well.\r\n +Being verbose and writing \r\n  \r\n -##### Example\r\n +    if(strcmp(p1, p2) != 0) { ... }   // are the two C-style strings equal? (mistake!)\r\n  \r\n -    void f(int* p)  // old code, doesn't use owner\r\n -    {\r\n -        delete p;\r\n -    }\r\n +would not save you.\r\n  \r\n -    void g()        // old code: uses naked new\r\n -    {\r\n -        auto q = new int{7};\r\n -        f(q);\r\n -        int x = *q; // BAD: dereferences invalid pointer\r\n -    }\r\n +##### Note\r\n  \r\n -##### Example\r\n +The opposite condition is most easily expressed using a negation:\r\n  \r\n -    void f()\r\n -    {\r\n -        vector<int> v(10);\r\n -        int* p = &v[5];\r\n -        v.push_back(99); // could reallocate v's elements\r\n -        int x = *p; // BAD: dereferences potentially invalid pointer\r\n -    }\r\n +    // These all mean \"if `p` is `nullptr`\"\r\n +    if (!p) { ... }           // good\r\n +    if (p == 0) { ... }       // redundant `!= 0`; bad: don't use `0` for pointers\r\n +    if (p == nullptr) { ... } // redundant `== nullptr`, not recommended\r\n  \r\n  ##### Enforcement\r\n  \r\n```\r\n\r\nI can make it as a separate/manual change and pull request for `master`, but you will get conflict when will merge `master` in `gh-pages`. To do so?",
      "If the workflow is still the same, the gh-pages branch is manually generated from the master branch from time to time. Work on the master branch will eventually appear in the gh-pages. If you can't cherry-pick your change, you'll have to do it manually as you mention."
    ],
    "commit_messages": [
      "fixed minor typo: `it this` -> `this` (#1077)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757718912b45d36993b0",
    "number": 1075,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1075 from Eliyahu-Ravuna/patch-2\n\nLink added for function objects and lambdas"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757818912b45d36993b1",
    "number": 1074,
    "body": "Itream -> Istream in I.30: Encapsulate rule violations > Example > code snippet",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo in destructor name (#1074)\n\nItream -> Istream in I.30: Encapsulate rule violations code snippet"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757918912b45d36993b2",
    "number": 1073,
    "body": "In the example, the literal `4` was duplicated as the `array` size and in the `Expects` precondition (violates ES.45). Fixed that, so the `Expects` uses `array`'s `size()` instead.",
    "head_branch": "hotfix/avoid-magic-constant",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1073 from martinfinke/hotfix/avoid-magic-constant\n\nAvoid magic constant in F.44"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757b18912b45d36993b3",
    "number": 1069,
    "body": "Broken line into two to respect the 100 character limit. Also using \"bad: \" instead of \"bad (\" since it appears to be more common over the document",
    "head_branch": "hotfix/break-line",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Break comment to respect 100 column limit (#1069)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757c18912b45d36993b4",
    "number": 1066,
    "body": "Add virtual destructor to interface class following recommendation of [C.127](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c127-a-class-with-a-virtual-function-should-have-a-virtual-or-protected-destructor).",
    "head_branch": "hotfix/add-virtual-destructor",
    "is_a_fork": true,
    "comments": [
      "Hm... There is still something fishy here.\r\n\r\n[C.127](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c127-a-class-with-a-virtual-function-should-have-a-virtual-or-protected-destructor) specifies that one should use virtual destructor. That's fine, I did that.\r\n\r\nBut it doesn't say if one should use a pure virtual destructor or a defaulted virtual destructor.\r\nIt uses a pure virtual destructor, but I added a defaulted destructor on my pull request.\r\n\r\nI'm not sure which is better, if any.\r\n",
      "There is no advantage to making it pure virtual, because the class is already abstract. Defaulted seems fine here.",
      "Ok, cool!\r\nNow let me just figure out why that change failed on the CI",
      "Just inspect at the test results:\r\n````\r\nWarning: Spellcheck failed, fix words or add to dictionary:\r\nLine 11728: nodiscard -> no discard\r\nLine 11728: nodiscard -> no discard\r\nLine 11728: nodiscard -> no discard\r\nLine 11740: nodiscard -> no discard\r\nmake: *** [hunspell-check] Error 1\r\n````\r\n\r\nThis isn't caused by your change. I'll fix it.\r\n",
      "Thanks!",
      "I guess it is still failing due to this:\r\n\r\n```\r\nRconc-task0.cpp:17:  Lines should be <= 100 characters long  [whitespace/line_length] [2]\r\nDone processing Rconc-task0.cpp\r\nTotal errors found: 1\r\n 14  // ../CppCoreGuidelines.md : 13401\r\n 15  void some_fun() {\r\n 16      std::string  msg, msg2;\r\n 17      std::thread publisher([&] { msg = \"Hello\"; });       // bad (less expressive and more error-prone)\r\n 18      auto pubtask = std::async([&] { msg2 = \"Hello\"; });  // OK\r\n 19      // ...\r\n 20      publisher.join();\r\n 21  }\r\n```",
      "Created PR #1069 to fix the line length problem.",
      "Thank you for the change, and for maintaining it per our feedback."
    ],
    "commit_messages": [
      "Merge pull request #1066 from brenoguim/hotfix/add-virtual-destructor\n\nAdd virtual destructor to base class \"Device\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757d18912b45d36993b5",
    "number": 1063,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "Thee's no need to create a new pull request, just force push a new HEAD to the branch of the existing pull request and it will update (and re-run the CI checks).",
      "Thank you, Jay!"
    ],
    "commit_messages": [
      "Merge pull request #1063 from JayBazuzi/patch-2\n\nUpdate forward looking statement."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757e18912b45d36993b6",
    "number": 1061,
    "body": "In \"C.9: Minimize exposure of members\", we are given an example of `struct pair` to illustrate that since `a` and `b` are public, no matter what interface functions etc. are introduced, we will not be able to enforce an invariant on them. As a 'good' example, we are shown `struct Distance`, which has public interface functions and private data. However, in the directly preceding section, we are advised to \"C.8: Use class rather than struct if any member is non-public\". Therefore, `struct Distance` sends a mixed message to the reader, and should be amended to `class Distance`.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good to me.",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1061 from planetchili/master\n\nstruct -> class to conform to C8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620757f18912b45d36993b7",
    "number": 1060,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Simple typo fix. (#1060)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758018912b45d36993b8",
    "number": 1059,
    "body": "Task vs thread example CP.4",
    "head_branch": "example-cp.4",
    "is_a_fork": true,
    "comments": [
      "I think what's tripping up the CI now is that the blank lines still have spaces in them."
    ],
    "commit_messages": [
      "Merge pull request #1059 from luav/example-cp.4\n\nExample CP.4 (task vs thread)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758118912b45d36993b9",
    "number": 1057,
    "body": "There were some very long lines in Python script files (comments and\r\ncpplint execution command), really painful to read, so I decided to\r\nbreak them into several lines in order to increase readability.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you!",
      "The commit included pycache file, which should not be added to git. To cleanup, delete the file, and add a line to .gitignore to prevent this in the future.",
      "Good catch, thanks. I've removed the file and updated the .gitignore"
    ],
    "commit_messages": [
      "Merge pull request #1057 from kwachmat/master\n\nBreak long lines to increase readability in files"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620758218912b45d36993ba",
    "number": 1056,
    "body": "There were some very long lines in Python script files (comments and\r\ncpplint execution command), really painful to read, so I decided to\r\nbreak them into several lines in order to increase readability.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "I've realised that my change broke Travis build, so I'll fix it quickly."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758318912b45d36993bb",
    "number": 1053,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "The change to use `delete[]` is correct, but I think the other cases should change the `plus(x, y)` calls to be `algo(x, y)` instead i.e. change the calls to use the right name, don't rename the function. Maybe I'm wrong, I'll check with the original author of that example.",
      "Thank you! We've gone with the `algo` name instead of `plus.`"
    ],
    "commit_messages": [
      "Merge pull request #1053 from sgkim126/master\n\nFix typos in example."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758418912b45d36993bc",
    "number": 1047,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Travis said:\r\n\r\n```\r\n##################### Bad chars check ##################\r\nmake: Target `default' not remade because of errors.\r\n```\r\n\r\nWhat does this mean?",
      "@JayBazuzi you'd have to scroll up to see why it failed. In your case, it was \"Spellcheck failed, fix words or add to dictionary: Line 11: att -> tat\", which has since been fixed by https://github.com/isocpp/CppCoreGuidelines/commit/e251862408dcc3dbc6e6257a60c0c4d50714fad5"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758518912b45d36993bd",
    "number": 1046,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Merged - thanks!"
    ],
    "commit_messages": [
      "#1045 Fix reference to narrow_cast (#1046)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758618912b45d36993be",
    "number": 1044,
    "body": "This is a new Pull Request, that does the reorder of ES.stmt and ES.expr in text, since they were swapped.",
    "head_branch": "fix_ordering_ES",
    "is_a_fork": true,
    "comments": [
      "This PR includes the whitespace fix correctly. Only the joke from the beginning is now complained about (this time not the germans ;) )",
      "I've updated the dictionary to fix those errors.\r\n\r\nThere was no need to create a new pull request, you could have just force-pushed to the existing branch and the existing pull request would have updated.",
      "I rebased and committed this as 8a408d850093183fa34e2e4b925fa18005e70568\r\n\r\nThanks!"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758718912b45d36993bf",
    "number": 1043,
    "body": "In the Bjarne's keynote Q&A session, it was pointed out that \"inkorrekt and incompleat\" at the start of Core Guidelines was a blocker for adoption somewhere because the joke did not translate well.",
    "head_branch": "incorrekt-fix",
    "is_a_fork": true,
    "comments": [
      "I saw that on YouTube, but didn't actually understand, what the problem was. Did they consider the document of poor quality, because it contained \"typos\"?",
      "\"inkorrekt\" is an actual german word (meaning incorrect). \r\nthe cryptic signs sometimes exist when porting german (ä,ö,ü,ß) into ascii, which is again a common thing germans see and judge as bad quality.\r\nGermans don't get that kind of humor very well, too ;)",
      "*sigh* I wish this wasn't necessary. Isn't the poorly formatted \"poorly formatted\" text a big enough clue?\r\n\r\nJust because some people miss the joke doesn't mean it must be removed. It's not offensive or hurting anybody.",
      "This line is pulled directly from the draft Standard: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4687.pdf. If the joke is acceptable there, it should be acceptable here. ",
      ">\"This line is pulled directly from the draft Standard...\"\r\n\r\nIt's good to know that some jokes are being standardized. We wouldn't want them to get too funny too soon.",
      "We will remove the Unicode characters and replace the \"bad formatting\" with random bits of italics and bold. Also, the misspelling of \"incomplet\" should be fixed.\r\n",
      "> In the Bjarne's keynote Q&A session, it was pointed out that \"inkorrekt and incompleat\" at the start of Core Guidelines was a blocker for adoption somewhere because the joke did not translate well.\r\n\r\nN.B. in the IS and TS drafts it's incomplet not incompleat. We should get the joke right :)",
      "> \"inkorrekt\" is an actual german word (meaning incorrect).\r\nthe cryptic signs sometimes exist when porting german (ä,ö,ü,ß) into ascii, which is again a common thing germans see and judge as bad quality.\r\nGermans don't get that kind of humor very well, too ;)\r\n\r\nI happen to be German and found the joke quite obvious (unless there are some subtleties I'm oblivious to) and would vote for keeping it. On the other hand, if someone found it problematic enough to speak up at a conference about it, some action might be in order.",
      "I've adjusted the text to match what's in the working drafts of the C++ standard, including replacing the non-ASCII characters with some (valid) markdown formatting. Hopefully it's a bit more obvious now.",
      "@MikeGitb yes me too, just wanted to explain it a little bit. But i certainly know some people i would suspect of getting it wrong, too :D \r\nThe state now is better and even if some germans complain, shouldn't be changed again :)"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758818912b45d36993c0",
    "number": 1042,
    "body": "See https://github.com/isocpp/CppCoreGuidelines/issues/964",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "@MikeGitb, thank you for the suggestion! We will improve this paragraph greatly."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758918912b45d36993c1",
    "number": 1041,
    "body": "The bigger sections ES.stmt and ES.expr were swapped in text, but not in the navigations.\r\nThis patch will reorder the text and fix this issue.",
    "head_branch": "fix_ordering_ES",
    "is_a_fork": true,
    "comments": [
      "This build fails from the issue mentioned fixing #1037.\r\nYou can wait with the merge, i will integrate the fix when it lands.",
      "I screwed up with git. The easiest thing for me is to reopen that pull request.\r\nSince git did create such a weird diff, rebasing it to master didn't do what i wanted and now iam lost :D "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758a18912b45d36993c2",
    "number": 1040,
    "body": "This is a attempt to fix the ci error currently existing. I think the `...` were the problem, and therefore i created a comment around them. If this does not fix the errors, i will remove the PR again.",
    "head_branch": "fix_syntax_errors",
    "is_a_fork": true,
    "comments": [
      "No, it tells you the problem:\r\n\r\n> Res-if1.cpp:17:  Missing spaces around !=  [whitespace/operators] [3]\r\n\r\nThis is fixed by #1037",
      "But #1037 did still fail.\r\n\r\nI oversaw it sorry. Shall i fix the linelength error then or just leave it as it is?",
      "> But #1037 did still fail.\r\n\r\nFor a different reason, and nothing to do with `...`",
      "Yes. Sorry for the noise."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758b18912b45d36993c3",
    "number": 1037,
    "body": "",
    "head_branch": "travis-errors",
    "is_a_fork": false,
    "comments": [
      "This still fails, but now because the lines are too long:\r\n\r\n````\r\nRes-if0.cpp:16:  Lines should be <= 100 characters long  [whitespace/line_length] [2]\r\nDone processing Res-if0.cpp\r\nTotal errors found: 1\r\n 14  // ../CppCoreGuidelines.md : 11170\r\n 15  if (p) { ... }          // means \"if `p` is not `nullptr`, good\r\n 16  if (p != 0) { ... }       // means \"if `p` is not `nullptr`, redundant `!=0`; bad: don't use 0 for pointers\r\n 17  if (p != nullptr) { ... } // means \"if `p` is not `nullptr`, redundant `!=nullptr`, not recommended\r\nDone processing Res-if1.cpp\r\nDone processing Res-if2.cpp\r\nDone processing Res-if3.cpp\r\nDone processing Res-if4.cpp\r\nRes-if5.cpp:16:  Lines should be <= 100 characters long  [whitespace/line_length] [2]\r\nDone processing Res-if5.cpp\r\nTotal errors found: 1\r\n 14  // ../CppCoreGuidelines.md : 11212\r\n 15  if (!p) { ... }         // means \"if `p` is`nullptr`, good\r\n 16  if (p == 0) { ... }       // means \"if `p` is `nullptr`, redundant `!= 0`; bad: don't use `0` for pointers\r\n 17  if (p == nullptr) { ... } // means \"if `p` is `nullptr`, redundant `== nullptr`, not recommended\r\n````",
      "Jonathan, please merge this as-is and fix the Travis failure. "
    ],
    "commit_messages": [
      "Fix CI errors due to missing whitespace around operators (#1037)\n\nAlso rephrase comments to avoid overlong lines."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758c18912b45d36993c4",
    "number": 1036,
    "body": "",
    "head_branch": "issue_#999_C128_applied_to_C129",
    "is_a_fork": true,
    "comments": [
      "Looks good, could you squash it?",
      "I did a \"squash and merge\" to squash the commits into one.\r\n\r\n(The alternative would have been for Franz to rebase his branch and force push it as a single commit.)",
      "Many thanks at @jwakely. I had put it on my TODO list. But as I am not that familar with git I am glad that you addressed it in the meantime.",
      "Thanks!\r\n\r\nFrom: Jonathan Wakely [mailto:notifications@github.com]\r\nSent: Tuesday, September 26, 2017 3:30 AM\r\nTo: isocpp/CppCoreGuidelines <CppCoreGuidelines@noreply.github.com>\r\nCc: Gabriel Dos Reis <gdr@microsoft.com>; Comment <comment@noreply.github.com>\r\nSubject: Re: [isocpp/CppCoreGuidelines] Issue #999 c128 applied to c129 (#1036)\r\n\r\n\r\nI did a \"squash and merge\" to squash the commits into one.\r\n\r\n(The alternative would have been for Franz to rebase his branch and force push it as a single commit.)\r\n\r\n—\r\nYou are receiving this because you commented.\r\nReply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fisocpp%2FCppCoreGuidelines%2Fpull%2F1036%23issuecomment-332156267&data=02%7C01%7Cgdr%40microsoft.com%7C33ac188e4fc44d5289e008d504c993e0%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636420186179987864&sdata=SBZZGK2CCJr3dW%2FVlk%2BIz6Yff%2FYJda3vgj4lng9xbKg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAKhUYuidu939mxaTIJxV18-7-fmxlTHAks5smNIPgaJpZM4Ph2Km&data=02%7C01%7Cgdr%40microsoft.com%7C33ac188e4fc44d5289e008d504c993e0%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636420186179987864&sdata=8nIpxt78ay3TmNFEJfYgYfBZlfcECT7VYVtds4uo1ww%3D&reserved=0>.\r\n"
    ],
    "commit_messages": [
      "Issue #999 c128 applied to c129 (#1036)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758d18912b45d36993c5",
    "number": 1034,
    "body": "This is a quick fix of wrong ordering i found in the document.\r\nThe order is correct in the navigation links, but the text wasn't.",
    "head_branch": "fix_ordering",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "reorder sections C.167 and C.168 to be in numerical ascending order (#1034)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620758e18912b45d36993c6",
    "number": 1033,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "ES.20: Fix typo (#1033)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759018912b45d36993c7",
    "number": 1031,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1031 from WPMGPRoSToTeMa/patch-1\n\nR.1: Fix finally link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759118912b45d36993c8",
    "number": 1030,
    "body": "span a task -> spawn a task",
    "head_branch": "CP2-typo",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "CP.2: Fixed a typo in the async example code. (#1030)\n\nspan a task -> spawn a task"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759218912b45d36993c9",
    "number": 1027,
    "body": "",
    "head_branch": "typos/sl.4-umbrella",
    "is_a_fork": true,
    "comments": [
      "@jwakely It somehow generated new number, i.e., 1027. Sorry...",
      "Yes, that's how GitHub works - pull requests are distinct \"issues\" with their own number. If you want to submit a pull request then just do that, don't open an issue and then also a pull request to fix it.\r\n\r\nAnyway I've merged the fix - thanks!\r\n",
      "OK. That's what I wanted to do initially, but then I've noticed that there is an issue about a typo (#1025 I guess), so I've made another one. Thanks for the info.",
      "1025 is a pull request, not an issue."
    ],
    "commit_messages": [
      "Fix issue #1026 (#1027)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759318912b45d36993ca",
    "number": 1025,
    "body": " `Public` -> `public`",
    "head_branch": "ivan/fix-typo",
    "is_a_fork": true,
    "comments": [
      "Thanks for the fix."
    ],
    "commit_messages": [
      "Fix typo: `Public` -> `public` (#1025)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759418912b45d36993cb",
    "number": 1023,
    "body": "Instead of constructing an array, it constructs and deletes a single double, and accesses elements as if it had constructed an array.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1023 from marzojr/master\n\nFixing memory handling in E.5 example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759518912b45d36993cc",
    "number": 1018,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "+1\r\nhttps://github.com/isocpp/CppCoreGuidelines/issues/357\r\n",
      "The reason to avoid `endl` is because the flush is not usually needed. If the flush _is_ wanted, then using `endl` is appropriate. This doesn't look like an improvement to me.",
      "Since `cerr` is unbuffered by default the flush doesn't do anything. So I would suggest either this should use `'\\n'` and not flush, or should continue to use `endl` (to handle the unlikely case where somebody has changed `cerr` to be buffered, but I doubt the author of this example was thinking of that case).",
      "`endl` is often just used everywhere though, rather than when a flush is needed, hence why the rule is there to avoid using `endl` because it doesn't really make your intention clear. The fact that this piece of code used `endl` when cerr is unbuffered just goes to show that `endl` is misused very often.",
      "@jwakely  is right.\r\nI am a bit surprised by the intense focus on `std::endl` in recent days.  I don't see any of the various proposals as actually improving on the situation.",
      "Then the fix should not include the `flush`.",
      "Like you said cerr can be redirected though. Either way I've removed the `std::flush`. I don't particularly care, and I think the 'avoiding std::endl' shouldn't even be in here as it's an insanely minor thing, I only commited it because the guidelines state to avoid it while still doing it.",
      "People say _'avoid std::endl'_ because beginners (and sometimes non-beginners as well) tend to overuse `std::endl` at places where a simple `'\\n'` would have been sufficient. `std::endl` sounds like _End Line_ to me and not _End Line and Flush Please_, plus the fact some other languages don't necessarily flush with their print line functions and people usually assume same here, make this much worse. That's the reason why people aren't saying - _'avoid std::flush'_!\r\n\r\nMost of this suggestion originated from students and other programmers participating on competitive programming websites(eg. [codechef](https://www.codechef.com/), [codeforces](http://codeforces.com/) etc) and using `std::endl` in abundance. They seem surprised when they notice other interpreted/compiled languages getting ahead because they aren't necessarily flushing the output every time. Now instead of giving the advice to use `'\\n'` in place of `std::endl`, other peeps who're familiar in C-lang wrote popular guides on how to make your program execute faster (which is utmost priority on such websites) by using `printf` family of functions instead of `<iostream>` and thus the _intense focus on std::endl in recent days_.",
      "@agauniyal: Thanks for the explanation.\r\n\r\nFirst of all, I don't think the core guidelines are a good fit for completive programming/will be adopted for those tasks anyway. Many programs In see there do far worse things than using printf.\r\n\r\nSecond, the (now closed) issue about this topic proposed to ban std::endl outright - not just to avoid it.\r\n\r\nThird, even using `\\n` it is quite likely that cout will still be slower than printf, unless `sync_with_stdio(false)` is called.\r\n\r\nFinally, the PR at hand wants to remove the std::endl just before an std::exit. If there ever is a situation, where I want an output steam to be flushed it is for sure before that program gets terminated.\r\n\r\nI'm completely fine with a guideline cautioning against using endl when it is not needed and explaining the reason behind it, but people shouldn't get zealous about it",
      "Looks perfectly reasonable to us."
    ],
    "commit_messages": [
      "Merge pull request #1018 from Cleroth/patch-1\n\nAvoid `std::endl` :)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759618912b45d36993cd",
    "number": 1016,
    "body": "This was a global edit on the document changing examples that had move constructors and move assignments to add **noexcept** keyword.\r\n\r\nFor consistency, it seemed like the keyword should be there.  But perhaps the keyword was left out intentionally to keep the example on topic?  If this is the case, then feel free to reject this pull request.",
    "head_branch": "noexcept_Move",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Per C.66: a global edit adding noexcept to move constructor/assignment examples (#1016)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759718912b45d36993ce",
    "number": 1015,
    "body": "Per C.150/C.151:\r\nSwitched to make_unique/make_shared in example rather than using operator new.",
    "head_branch": "R.20_fixExample",
    "is_a_fork": true,
    "comments": [
      "I think this changes the meaning of the example in an unwanted way. The **Enforcement** no longer relates to it after this change, because there is no new-expression, and no function returning a pointer.\r\n\r\nIt might be better to add a note saying something like \"this example uses `new` but in reality it should use `make_unique` and `make_shared`\" or alternatively, change the example to use custom deleters (which is a realistic case where the `make_xxx` functions aren't usable).\r\n",
      "What @jwakely said.  Plus add two new variables using the factory functions.",
      "Addressed by adding the examples, rather than replacement"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759818912b45d36993cf",
    "number": 1014,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1014 from HazardyKnusperkeks/master\n\nFix typo in ES.84"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759918912b45d36993d0",
    "number": 1013,
    "body": "",
    "head_branch": "opening_brace_in_same_line_as_switch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1013 from franzhollerer/opening_brace_in_same_line_as_switch\n\nopening brace in same line with switch statement to be aligned with NL.17"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759a18912b45d36993d1",
    "number": 1012,
    "body": "",
    "head_branch": "aligning_case_with_switch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #1012 from franzhollerer/aligning_case_with_switch\n\naligning case with switch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759b18912b45d36993d2",
    "number": 1009,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #1009 from bgianinetti/patch-1\n\nFix example in C.61"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759c18912b45d36993d3",
    "number": 1007,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "good catch"
    ],
    "commit_messages": [
      "Fix example in CP.21 (#1007)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759d18912b45d36993d4",
    "number": 1005,
    "body": "Current text has a plurality typo (\"separates\" vs \"separate\"), modified version more precisely conveys the idea.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "Fixing typo / improving language in NR.3 (#1005)\n\nCurrent text has a plurality typo (\"separates\" vs \"separate\"), modified version more precisely conveys the idea."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759e18912b45d36993d5",
    "number": 1004,
    "body": "",
    "head_branch": "franz_hollerer_typo_fixes",
    "is_a_fork": true,
    "comments": [
      "Thank you for the PR! \r\n\r\nPer our editors' discussion, we think the second edit is incorrect--it's better, but can still be overlooked. We'll add to the comment on the second. ",
      "`display_error_window` should not have a comment, there should be a comment on the fallthroughs:\r\n\r\n- The first fallthrough is very bad--the point being that there is no visual indication of the fallthrough. \r\n- The second fallthrough, with the annotation, is still not good but better. ",
      "Thank you for the suggestion! This is close, but per our dicussion not exactly what we want. @gdr-at-ms, please fix this PR. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620759f18912b45d36993d6",
    "number": 992,
    "body": "These items were removed, or folded into other ones, by 89bf79e00cd09043d073003085f14f988a6c8a21 for issue #1 and so the links no longer go anywhere.\r\n\r\nI think F.18 and F.19 are the closest replacements.",
    "head_branch": "broken-links",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #992 from isocpp/broken-links\n\nReplace broken links to #Rf-pass-ref-ref and #Rf-pass-ref-move"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a018912b45d36993d7",
    "number": 991,
    "body": "Link to it when talking about the strong and basic exception-safety\r\nguarantees.",
    "head_branch": "exception-safety-guarantees",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Add [Abrahams01] bibliography entry for exception-safety (#991)\n\nLink to it when talking about the strong and basic exception-safety\r\nguarantees.\r\n\r\nAdd it to the dictionary."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a118912b45d36993d8",
    "number": 990,
    "body": "Fixes #989",
    "head_branch": "issue-989",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #990 from isocpp/issue-989\n\nRemove confusing \"copy\" in discussion of move ops"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a318912b45d36993d9",
    "number": 987,
    "body": "Fixed two minor typos in section C.64",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "C.64 fixed typo (#987)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a418912b45d36993da",
    "number": 986,
    "body": "Pull request for Issue #984\r\n\r\nChanges to Getting Started section of README.md \r\n\r\n\r\n>The guidelines themselves are found at CppCoreGuidelines. The document is in GH-flavored MarkDown.\r\n...\r\n Note that it manually integrated and can be slightly older than the version in the master branch.\r\n\r\nChanged to:\r\n\r\n\"Note that it is manually integrated and can be slightly older than the version in the master branch.\"\r\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Update README.md (#986)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a518912b45d36993db",
    "number": 985,
    "body": "> C.8: Use `class` rather than `struct` if any member is non-public\r\n> ...\r\n> Enforcement: Flag classes declared with `struct` if there is a `private` or `public` member.\r\n\r\nThe enforcement line should read \"`private` or `protected`\".",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thanks for the fix.\r\n"
    ],
    "commit_messages": [
      "Fix typo in C.8 (#985)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a618912b45d36993dc",
    "number": 979,
    "body": "A number sequence called `fib` should be the Fibonacci sequence or have a different name.\r\n\r\nhttps://en.wikipedia.org/wiki/Fibonacci_number",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [
      "thanks"
    ],
    "commit_messages": [
      "Merge pull request #979 from fkaelberer/patch-4\n\nFix Fibonacci sequence"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a718912b45d36993dd",
    "number": 976,
    "body": "Comments in sections  SL.str.3 and GSL.view disagree on whether czstring may be the nullptr.\r\n\r\nThis PR fixes the first comment definition in SL.str.3 that czstring `is a C-style string that is not the nullptr`\r\n\r\n### SL.str.3: Use zstring or czstring to refer to a C-style, zero-terminated, sequence of characters\r\n```\r\nvoid f1(zstring s);     // s is a C-style string or the nullptr\r\nvoid f1(czstring s);    // s is a C-style string that is not the nullptr\r\n```\r\n### GSL.view: Views\r\n`zstring` // a `char*` supposed to be a C-style string; that is, a zero-terminated sequence of `char` or `nullptr`\r\n`czstring` // a `const char*` supposed to be a C-style string; that is, a zero-terminated sequence of const `char` or `nullptr`",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #976 from willwray/patch-1\n\nFix Inconsistent definition of czstring in comments"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a818912b45d36993de",
    "number": 974,
    "body": "Example mentions that it handles error, and errors are commonly non-zero values.\r\n\r\nCloses #970",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #974 from Talkless/patch-1\n\nFix if statement for checking error condition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075a918912b45d36993df",
    "number": 972,
    "body": "Based on findings in a PR (#959) and the discussion about previous whitespace changes (#948), this reverts the addition of whitespaces in given interval notations, and consistently wraps such expressions in inverted commas (preformatted text) as a whole.\r\n",
    "head_branch": "interval-fix",
    "is_a_fork": true,
    "comments": [
      "Thank you for fixing these up, Thibault."
    ],
    "commit_messages": [
      "Merge pull request #972 from tkruse/interval-fix\n\nInterval-notation fix (attempt 2)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075aa18912b45d36993e0",
    "number": 971,
    "body": "Hi,\r\nmaking usages of the terms more consistent. I consider these usages correct, based on majority usage in the document and grammar rules\r\n```\r\nThe C++ standard library is ...\r\nThe standard-library function foo...\r\n\r\nThis can be checked at run time or at compile time.\r\nUse run-time checks not compile-time checks when ...\r\n\r\nMemory allocation is difficult ...\r\nA Memory-allocated variable ...\r\n```\r\nFor ambiguous things like 'side effect' vs 'side-effect' I considered which style the document uses most, leaning towards what online dictionaries seemed to suggest in case of a tie.\r\n\r\nFor 'non-local' and 'type-safe' adjectives I did not dare make a decision, see statistics below.\r\n\r\nSome staticstics:\r\n```\r\n0 realtime\r\n4 real time\r\n9 real-time      <- wins\r\n\r\n39 lifetime     <- wins\r\n0  life time\r\n1  life-time\r\n\r\n15 nonvirtual  <- wins\r\n2  non-virtual\r\n\r\n17 non-local   ???\r\n9  nonlocal\r\n\r\n19 type safe ???\r\n14 type-safe\r\n\r\n4  re-use\r\n27 reuse    <- wins\r\n```\r\n\r\nMy decisions might be controversial, though being consistent also helps with later changing consistently.",
    "head_branch": "style-fixes2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #971 from tkruse/style-fixes2\n\nStyle fixes for compile-time, run-time and similar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ab18912b45d36993e1",
    "number": 967,
    "body": "The table of contents has changed (some time ago), and has to be manually updated in the sidebar for the pretty-rendered github page. Also I finally took some time to make the highlight button look prettier (arguably).\r\n\r\nBefore merging, while you may not wish to debate the css/html code, you can at least preview the results here:\r\nhttp://tkruse.github.io/CppCoreGuidelines/CppCoreGuidelines.html\r\n\r\nOpen with various browsers to test compatibility.",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [
      "Thank you for your continued contributions on the infrastructure!"
    ],
    "commit_messages": [
      "Merge pull request #967 from tkruse/gh-pages\n\nupdate rendered page sidebar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ac18912b45d36993e2",
    "number": 965,
    "body": "Would fall through in the example, which was unintended.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "We definitely want the `break` statements there, I'm not sure about the whitespace to align them though.",
      "Each case label starts to be crowded.\r\n\r\nWhat about the following?\r\n~~~c++\r\nbool owned;\r\nowner<istream*> inp;\r\nswitch (source) {\r\ncase std_in:\r\n  owned = false; \r\n  inp = &cin;                       \r\n  break;\r\ncase command_line:\r\n  owned = true;  \r\n  inp = new istringstream{argv[2]}; \r\n  break;\r\ncase file:\r\n  owned = true;  \r\n  inp = new ifstream{argv[2]};      \r\n  break;\r\n}\r\nistream& in = *inp;\r\n~~~",
      "That'd be fine. I was just emulating the current formatting for that section, but you're right--it should be one statement per line for readability.",
      "Is the semantics of `owner<T*>` being compromised here because it is being used to point to objects it does own and objects it does not own?",
      "Okay I knew I recognized this from somewhere. Accordig to this thread https://github.com/isocpp/CppCoreGuidelines/pull/894 I think Bjarne is planning to rewrite this item anyways.",
      "Just saying, I find the \"one line per case\" /  \"table\" version much more readable, than the \"one line per statement\" one, as long as each statement is properly aligned. \r\nOf course there is a limit, but for relatively short pieces of code as this, it imho makes it easier to see and understand the differences between the cases.",
      "Bjarne will rewrite this item, but the breaks are fixing an error. I'm merging this so that it's more correct in the interim. "
    ],
    "commit_messages": [
      "Merge pull request #965 from rsjaffe/master\n\nAdded break to each case in switch statement"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ad18912b45d36993e3",
    "number": 961,
    "body": "I changed the shell line that invokes hunspell to make a small sed-effort to ignore URLs, since the last batch of changes introduced a lot of false positive detections.",
    "head_branch": "spellcheck",
    "is_a_fork": true,
    "comments": [
      "Looks like you corrected `Cppcon` to `CppCon`, but also added `Cppcon` to dictionary. Seems like one or the other is what you meant?",
      "you're right. forgot to remove it after ignoring URls. Removed it now."
    ],
    "commit_messages": [
      "Fix typos and change spellcheck call to not check URLs (#961)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ae18912b45d36993e4",
    "number": 960,
    "body": "F.22 appears in the table of contents as\r\n\r\n    F.22: Use T* or owner<T*> or a smart pointer to designate a single object\r\n\r\nand in the main body of text as\r\n\r\n    F.22: Use T* or owner<T*> to designate a single object\r\n \r\nThis was that way since the initial commit in 9/2015, https://github.com/isocpp/CppCoreGuidelines/blob/947cf3affcdfc392a316a32f73cdea7383ae55bd/CppCoreGuidelines.md (it was called F.16 back then)\r\n\r\nThis PR proposes to use the main body version for both, this is a rule that explains what raw pointers are for and smart pointers are not mentioned in text.",
    "head_branch": "f22title",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #960 from cubbimew/f22title\n\nfix mismatch between title and toc for F.22"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075af18912b45d36993e5",
    "number": 959,
    "body": "This 'fixes' mathematical interval notation as suggested by myself in #948.\r\n\r\nThis PR should not be merged without consensus on #948. \r\n\r\nPlease add general comments on the choice of notation there instead of here.\r\n\r\nTo make sure I find all such occurrences, I searched the code for the regexes \"\\[[^]]*:\" and \"([a-z]:\", might still have missed something.",
    "head_branch": "interval-notation",
    "is_a_fork": true,
    "comments": [
      "We prefer the colon to denote intervals. Many countries use , as a decimal separator meaning that [1,2] is read as 1 and 2/10ths. See for example https://en.wikipedia.org/wiki/Interval_(mathematics), which currently says: \r\n\r\nThe interval of numbers between a and b, including a and b, is often denoted [a, b]. The two numbers are called the endpoints of the interval. In countries where numbers are written with a decimal comma, a semicolon may be used as a separator, to avoid ambiguity.\r\n\r\n",
      "I guess that decision is final, so I'll just add my 5 cents:\r\n* If you set a blank after a comma (as per most public code style guidelines), then 1, 2 is not easily confused with 1,2 or 1.2\r\n* In no case is p,q ever confused with p + q / 10. That only works for digits, and in the document all except one interval use letters, not digits\r\n* The colon has it's own historical meanings. As per wikipedia (https://en.wikipedia.org/wiki/Division_(mathematics)): 'In some non-English-speaking cultures, \"a divided by b\" is written a : b. This notation was introduced in 1631 by William Oughtred in his Clavis Mathematicae and later popularized by Gottfried Wilhelm Leibniz.[6] However, in English usage the colon is restricted to expressing the related concept of ratios (then \"a is to b\").' That's what I got taught in primary school.\r\n* The colon is a poor choice as an alternative because it commonly is used for map / dictionary semantics, such as in python `x = [7: 3]`, where it means: key 7 is mapped to value 3. While the examples in the document currently only has examples of half-open intervals, you can easily have closed intervals and hence strong ambiguity with the dictionary notation\r\n* C++ like most languages separates numbers with a comma in plenty of places anyways, such as f(1,2), which by your argument means this is easily misread as f(1.2). Your readers are C++ programmers, they can be expected to handle the comma semantics when reading the document.\r\n* Nobody else in the world seems to use the colon for intervals (EDIT: Matlab uses colons for vectors, but without parentheses)\r\n\r\nBut well, maybe there was more to the editors discussion than revealed so far.\r\n\r\nIn any case, you might want to add a note to the glossary on arrays and ranges to tell the reader that you are aware of the colon being non-standard",
      "Sorry for chiming in after the fact, but here are two small datapoints from my personal experience:\r\nI'm coming from a country that uses `,` as a decimal separator, but we also where taught `[a, b)` in school and I find it the more natural notation in text.\r\n\r\nOn the other hand, a prominent example where the colon is used to denote a range is matlab, where e.g. `1:5` denotes the numbers 1, 2, 3, 4, 5.\r\n\r\nIn any case, the one thing I absolutely dislike is `[a:b + k]` or `[a, b + k]`, because for me, both styles indicate a stronger binding betwen a and b than b and K. So my prefered solution would be \r\n`[a : b+k]` or `[a, b+k]`"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b018912b45d36993e6",
    "number": 958,
    "body": "At first, I assumed that this is \"rand\" function, not \"round\" function, and was confused why exactly is it a problem that this returns different values. While it's easy to notice when actually reading the code, this slows down the comprehension, and bad function naming is not point of that particular guideline.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "It would be even more clearer if the variable round_up was declared. For example above the function. A comment to the variable explaining it's purpose, would let a novice understand the example easier.",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #958 from xfix/patch-1\n\nRename rnd to round in I.1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b118912b45d36993e7",
    "number": 957,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #957 from eliaskosunen/master\n\nAdd braces to for loop in P.1 example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b218912b45d36993e8",
    "number": 956,
    "body": null,
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #956 from parsley72/master\n\nFix link to constructor virtual"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b318912b45d36993e9",
    "number": 955,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #955 from codeboost/patch-3\n\nC.133 - Grammar/semantic issues fixed"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b518912b45d36993ea",
    "number": 954,
    "body": "The link currently doesn't work.\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Squash commits?",
      "Screwed this up, I'll try again.\r\n",
      "Redone as https://github.com/isocpp/CppCoreGuidelines/pull/956.\r\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b618912b45d36993eb",
    "number": 952,
    "body": "",
    "head_branch": "code-fixes",
    "is_a_fork": true,
    "comments": [
      "added a few more tiny issues, squashed.",
      "I removed the additional 2 whitespaces around the arithmetic expression as requested.",
      "Thank you! Merging this, but will also manually fix references to <Foo> in the Enforcement section of C.151."
    ],
    "commit_messages": [
      "Merge pull request #952 from tkruse/code-fixes\n\nsmall issues found trying to compile examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b718912b45d36993ec",
    "number": 951,
    "body": "(CP.3: Minimize explicit sharing of writable data)\r\n\r\nUse 'ES.28: Use lambdas for complex initialization,\r\nespecially of const variables' to ensure we can see from the body\r\nof the function that the function called in async only require const\r\nparameter.\r\n\r\nThis ensure that if a non local change to the function signature\r\n(making the const parameter non const) it will result in a compilation\r\nerror.\r\n\r\nAlso fix minor compilation issues (missing ')' and one async return void)\r\n\r\nAdded necessary construct and compiled with https://godbolt.org/g/tjGXbV",
    "head_branch": "fixcp3_withlambda",
    "is_a_fork": true,
    "comments": [
      "Herb will take care of this",
      "Good improvements, thanks."
    ],
    "commit_messages": [
      "Fix CP.3 to allow local reasoning and compilation without error (#951)\n\n* Fix CP.3 to allow local reasoning and compilation without error\r\n\r\n(CP.3: Minimize explicit sharing of writable data)\r\n\r\nUse 'ES.28: Use lambdas for complex initialization,\r\nespecially of const variables' to ensure we can see from the body\r\nof the function that the function called in async only require const\r\nparameter.\r\n\r\nThis ensure that if a non local change to the function signature\r\n(making the const parameter non const) it will result in a compilation\r\nerror.\r\n\r\nAdded necessary construct and compiled with https://godbolt.org/g/tjGXbV\r\n\r\n* Update CppCoreGuidelines.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b818912b45d36993ed",
    "number": 950,
    "body": "There are three dangling references to PIMPL in the guidelines. I believe it fits naturally as rule I.27 (right after another ABI rule). \r\n\r\nI also attempt to regularize the spelling as \"Pimpl\" (following gotw 100, wikipedia, c2, drdobbs), rather than \"PIMPL\" (current guidelines) or \"pImpl\" (cppreference), feel free to suggest changes.",
    "head_branch": "pimpl",
    "is_a_fork": true,
    "comments": [
      "Thank you for this!"
    ],
    "commit_messages": [
      "Merge pull request #950 from cubbimew/pimpl\n\nNew rule: I.27 Pimpl"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075b918912b45d36993ee",
    "number": 949,
    "body": "I think it's a minor typo  ... the second 'string_span' should be string_view.",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [
      "How about changing this to `std::string_view`",
      "Changed to std::string_view",
      "Thanks, looks good!"
    ],
    "commit_messages": [
      "Merge pull request #949 from robert-andrzejuk/patch-2\n\nMinor typo (I think)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ba18912b45d36993ef",
    "number": 947,
    "body": "Use of `<iostream>` without backticks causes the Markdown render to fail from this point onwards on GitHub pages. See [SF.10 on the pretty gh-pages version](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-implicit) - everything below it is interpreted as raw text due to `<iostream>` being interpreted as an HTML tag.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #947 from AbigailBuccaneer/patch-1\n\nFix Markdown rendering failure"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075bb18912b45d36993f0",
    "number": 946,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075bc18912b45d36993f1",
    "number": 945,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #945 from Bledson/patch-2\n\n`#include`d instead of `#included`"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075bd18912b45d36993f2",
    "number": 944,
    "body": "Old example causes stack overflow (inifinite recursion call to operator++)",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Shouldn't we return here a reference?",
      "\r\nAll checks have failed\r\n... Hmm I wonder what is wrong?\r\n\r\n    make[1]: *** [cpplint-all] Error 1\r\n    \r\n    make[1]: Leaving directory `/home/travis/build/isocpp/CppCoreGuidelines/scripts/build/codeblocks'\r\n    \r\n    make: *** [cpplint-all] Error 2\r\n    \r\n    ##################### Bad chars check ##################\r\n    \r\n    make: Target `default' not remade because of errors.\r\n    \r\n    The command \"cd scripts; make -k\" exited with 2.\r\n",
      "@robert-andrzejuk  scroll up to where it says\r\n\r\n```\r\nRenum-oper0.cpp:27:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\nDone processing Renum-oper0.cpp\r\nTotal errors found: 1\r\n 14  // ../CppCoreGuidelines.md : 8389\r\n```",
      ":-D Thanks! that did it :-)",
      "Squash?",
      "Squashed.",
      "Removed EOL whitespace",
      "`Day tomorrow = ++today;` in the original example effectively makes `today` equal to `tomorrow`, could / should we make a change to this as well?",
      "Extended the example:\r\n- added a while loop which demonstrates the use of the increment operator, \r\n- added a function \"after\" to remove the issue from above comment.",
      "Now that we illustrated the usage of `operator ++` by:\r\n```\r\nDay some_day = Day::wed;\r\n\r\nwhile (some_day != Day::sat)\r\n    ++some_day;\r\n```\r\nMaybe we could remove `today` and `tomorrow` entirely? (As they're no longer related to defining operators on enumerations.)",
      "The  title is **Enum.4: Define operations on enumerations for safe and simple use**\r\nSo not only operators.\r\n\r\nI think the function _after_ is also a good example.\r\n\r\nI'll leave it to the scrutiny of the editors. ",
      "My bad. I misread the title. :)",
      "Thank you for the suggested fix on this. We discussed it, and Bjarne had a different change he wanted to make to the sample. We're tracking this in your issue #716."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075be18912b45d36993f3",
    "number": 943,
    "body": "A few of these targets used a different case lettering from the others\r\n\r\nSL.str.5, SL.str.10, SL.str.11, SL.str.12",
    "head_branch": "fix_unique_target_case",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #943 from galik/fix_unique_target_case\n\nFix case of unique anchors to match others"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075bf18912b45d36993f4",
    "number": 942,
    "body": "",
    "head_branch": "gh-pages2",
    "is_a_fork": true,
    "comments": [
      "Thank you, Thibault! I trust you did the right thing so I'm just merging it."
    ],
    "commit_messages": [
      "Merge pull request #942 from tkruse/gh-pages2\n\nMinor fixes to gh-pages branch, makes rendered output with highlighting slightly prettier"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "662075c018912b45d36993f5",
    "number": 941,
    "body": "",
    "head_branch": "style-fixes",
    "is_a_fork": true,
    "comments": [
      "squash commits?",
      "rebased, squashed"
    ],
    "commit_messages": [
      "Merge pull request #941 from tkruse/style-fixes\n\nStyle fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c118912b45d36993f6",
    "number": 940,
    "body": "",
    "head_branch": "Per.11",
    "is_a_fork": true,
    "comments": [
      "Related issue: #936 ",
      "Thank you for the suggested rule! Per our editors' discussion we have some feedback.\r\n\r\nFirst, don't inline all the other fixes that have happened into your PR. Just add this rule, Git will merge it nicely.\r\n\r\nSecond, while we appreciate the suggested rule it is a little lengthy. Maybe you could start with an Issue where we discuss what points should be made and we can sketch out the rule we'd like to see in that discussion? Then you can write a PR that fits with the style of the section we can merge more easily. ",
      "Sounds like a plan! Thank you for taking the time to look it over.\r\n\r\nI had originally opened #940 to discuss the suggested content of the rule. Perhaps it was too bold to open the PR so quickly.  Could you point me to an example issue which I should emulate?  (I'm looking at the closed issues for the past 3 months, and with only a couple exceptions, they all end with just a few comments)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c218912b45d36993f7",
    "number": 939,
    "body": "I.2, C.10, A.1, A.2, A.4, NL.5",
    "head_branch": "fix_item_tags",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #939 from galik/fix_item_tags\n\nFix various item tags (missing colons)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c318912b45d36993f8",
    "number": 937,
    "body": "",
    "head_branch": "add-missing-period",
    "is_a_fork": true,
    "comments": [
      "There is a missing period after \"Exception performance is not predictable\" and so the following \"If ...\" sounds like a continuation of the thought.\r\n\r\nDespite being on a separate line in the raw data, the GitHub md format presents it as one fluid sentence.\r\n\r\nThe other near by bullets have some form of punctuation."
    ],
    "commit_messages": [
      "Merge pull request #937 from ProgramMax/add-missing-period\n\nAdd missing period"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c418912b45d36993f9",
    "number": 935,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [
      "Thanks."
    ],
    "commit_messages": [
      "Fix broken links (#935)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c518912b45d36993fa",
    "number": 934,
    "body": "Fixing stuff so that the script tests passes",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Whew. Fixed **all** the issues that the scripted tests discovered. They were all either typos or formatting.\r\n\r\nThe one exception is the word \"tock\" which I added to the dictionary, to allow for \"tick tock\" as two words. I'm not sure that was a good thing."
    ],
    "commit_messages": [
      "Fixing link to C.146 to be valid, and a link to ??? to be unlinked (#934)\n\nthis fixes links and the issues discovered by travis CI"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c618912b45d36993fb",
    "number": 931,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #931 from sizeofvoid/master\n\nfix: unsigned int value comment"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c818912b45d36993fc",
    "number": 927,
    "body": "[Issue #926 for discussion](https://github.com/isocpp/CppCoreGuidelines/issues/926)\r\n\r\n- Warn on unnecessary casts\r\n- Avoid casts on arithmetic types\r\n- Add specializations of the rules for Pro-type-reinterpretcast",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good to me.  Bjarne may have more comments.",
      "Thank you, Zachary!"
    ],
    "commit_messages": [
      "Merge pull request #927 from ZachHenkel/master\n\nAdditional guidance around casts:"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075c918912b45d36993fd",
    "number": 922,
    "body": "Per conversation in #918 there are no other references to these anchors in the document. External references--if they exist--will probably get close enough.",
    "head_branch": "issue-918",
    "is_a_fork": true,
    "comments": [
      "lgtm"
    ],
    "commit_messages": [
      "Merge pull request #922 from AndrewPardoe/issue-918\n\nFix anchors in C.147/148"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ca18912b45d36993fe",
    "number": 921,
    "body": "Per conversation in #918 there are no other references to these anchors in the document. External references--if they exist--will probably get close enough.",
    "head_branch": "Issue918",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075cb18912b45d36993ff",
    "number": 920,
    "body": "Proposed fix for issue #899  \r\nNote that it is undoing the re-categorization of the release-acquire DCLP example as \"bad\" done by #754 - there appears to be consensus in current talks/articles/SO posts that it is correct, though if the guidelines are going to encourage SC atomics over release-acquire, we can just drop the release-acquire example and leave note that it can be done.",
    "head_branch": "issue899",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #920 from cubbimew/issue899\n\nCP.111 more precise motivation and examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075cc18912b45d3699400",
    "number": 919,
    "body": "Following the heading levels throughout the doc, it seems these are typos.",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #919 from Bledson/patch-1\n\nIntended heading level?"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075cd18912b45d3699401",
    "number": 917,
    "body": "Following the discussion in #910, this gives an example for C.148 that uses dynamic_cast that cannot easily be replaced with another method.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "The remaining failure is due to:\r\n\r\n````\r\nWarning: Spellcheck failed, fix words or add to dictionary:\r\nLine 7299: behaviour -> behavior\r\nLine 7306: ShapeOwner -> Shape Owner\r\nLine 7333: GeometricAttributes -> Geometric Attributes\r\nmake: *** [hunspell-check] Error 1\r\n````",
      "@jwakely I'm sorry about the error and mistakes! I'll close this and create a new PR that will satisfy your comments so far.",
      "You don't need to keep closing and creating new ones, just do a force push to the same branch and the pull request will update to the new content.",
      "Oh, ok. I'll do that. (Sorry, I'm not very proficient with git or how Travis CI reacts to changes.)",
      "Hi,\r\nAny reason a simpler example like the following couldn't be used?\r\n\r\n```\r\nstruct Shape {\r\n    virtual ~Shape() {}\r\n    virtual bool equal(const Shape&) const = 0;\r\n};\r\n\r\nstruct Square : public Shape {\r\n    bool equal(const Shape& s) const override {\r\n        if (const Square* sq = dynamic_cast<const Square*>(&s)) {\r\n            return m_side == sq->m_side;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    unsigned m_side;\r\n};\r\n```",
      "I'm not sure I have a good reason, just a bunch of bad ones:\r\n\r\n1. Side stepping C.146: In this example, the dynamic_cast is used to traverse the class hierarchy of Shape. In the example I gave, I go further - the function accepts a `Shape` but then traverses the hierarchy of `GeometricAttributes`, which is unrelated to `Shape`.\r\n\r\n> C.146: Use `dynamic_cast` where class hierarchy navigation is unavoidable\r\n\r\n2. Accepting `Shape&` in the `equals` example feels confusing to me. I don't want to confused C.148 and C.147. Although the use of it is superb, and great example of the difference between C.147 and C.148.\r\n\r\n3. There is a nerdy part of me that wants every part of the documentation to stand on its own. Every sentence should be a tautology. The `equals` code example doesn't justify the need for an `equals` function in `Shape`. In this respect, I'm also unhappy with the example I wrote, but I've tried to justify the use of `dynamic_cast` as part of function working on objects belonging to multiple class trees.\r\n",
      "@brenoguim please feel free to propose further improvements and simplifications in a new pull request, although the example of casting to a type which isn't a `Shape` is useful.\r\n\r\n",
      "@jwakely, I thought my example above was simpler.\r\n\r\nNow that I think about it, if someone further extends the class Square but forgets to implement the \"equals\" functions, it would be a mess. In which case Square should be made final, but then I feel like working around a bad example.\r\n\r\nI'm fine with what's been done here, and thanks @jwakely and @scraimer for taking the time to evaluate my suggestion."
    ],
    "commit_messages": [
      "Merge pull request #917 from scraimer/master\n\nC.148 adding Reason and Example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ce18912b45d3699402",
    "number": 916,
    "body": "Following the discussion in #910, this gives an example for C.148 that uses `dynamic_cast` that cannot easily be replaced with another method.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Oh, so I can run `make -k` on my laptop to test it. OK. I'll try again after fixing the issues."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075cf18912b45d3699403",
    "number": 914,
    "body": "Address issue #911. On second through, R.3 reads fine. Made changes to I.11. ",
    "head_branch": "issue911",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #914 from AndrewPardoe/issue911\n\nClarify I.11 with regards to recommending smart pointers/owner<T>."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d018912b45d3699404",
    "number": 909,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #909 from tvaneerd/patch-2\n\nNote -> Not, are -> is"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d118912b45d3699405",
    "number": 908,
    "body": "Talking about multiple assertions here.",
    "head_branch": "gsl_assert_macros_wording",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "GSL.assert: replace is by are (#908)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d218912b45d3699406",
    "number": 907,
    "body": "a 2nd pull request, with far less lines with added spaces\r\nfirst one broke CI, curious to see what this one will do",
    "head_branch": "fix_nr1_example_2",
    "is_a_fork": true,
    "comments": [
      "That makes the indentation inconsistent.\r\n\r\nI've fixed it with e3fe0c5b5e0637e38b9b98d7e2fe82b074bb21ac (which is exactly the same as your first pull request but without the spaces on the blank lines that caused the CI failure)."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d318912b45d3699407",
    "number": 906,
    "body": "one space short to qualify as an example for MarkDown apparently",
    "head_branch": "fix_nr1_example",
    "is_a_fork": true,
    "comments": [
      "filed a second pull request, with less spaces, that didn't break the build\r\nsee https://github.com/isocpp/CppCoreGuidelines/pull/907"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d418912b45d3699408",
    "number": 905,
    "body": "see https://github.com/isocpp/CppCoreGuidelines/issues/904\r\n",
    "head_branch": "es24_toc_rule_correction",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #905 from ewoudvc/es24_toc_rule_correction\n\nES.24: have TOC rule match body rule"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d518912b45d3699409",
    "number": 897,
    "body": "Spaces are not allowed in the URL, so the link is broken. Spaces in the URL should be encoded as `%20` to make the link be rendered correctly.\r\nSee also: github/markup#1030",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #897 from tsekityam/patch-1\n\nFix markdown syntax error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d618912b45d369940a",
    "number": 896,
    "body": "In the TOC the ES.45 was tagged for narrowing and ES.46 was tagged for magic.  But later in the file where the anchors are given, they were swapped.  So I changed the Table of Contents to match the tags used later in the file.\r\n\r\nIf the preference is to keep ES.45 for narrowing and ES.46 for magic in the TOC.  I can put those back and fix up the usage later in the file instead.  I just went with the easier change.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "You've got a merge commit, suggest squashing",
      "Good point.  Looking into getting rid of it.",
      "Ok, the merge commit is removed.\r\n\r\nBefore someone accepts this they should make sure renaming ES.45 and ES.46 is an acceptable action.  If there is a desire to keep the original order in the TOC, then the alternative is to fix the anchors in the document body. ",
      "Thanks!"
    ],
    "commit_messages": [
      "Merge pull request #896 from tlanc007/master\n\nES.45/ES.46 renamed and reordered to match anchors found later in file"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d718912b45d369940b",
    "number": 894,
    "body": "The example showed a bad practice - expressing ownership with an unrelated type (`bool`).  R.5 explicitly\r\nadvises expressing ownership with a smart pointer.",
    "head_branch": "use-raii",
    "is_a_fork": true,
    "comments": [
      "@galik: In the default case the unique ptr just doesn't point at anything.\r\n\r\nWhile this is imho certainly an improvement to the current state, I'd vote for replacing this example with a simple factory function-type lambda (e.g. by removing the default case and the `in` reference).\r\nAs it stands, the lambda function has effectively a return value AND and output parameter. One could probably return a pair and use structured binding, but in the end, I think it is hard to see, how a lambda imrpoves the situation compared to regular code.  \r\n\r\nBtw. Doesn't the lambda have to be mutable for this to work?",
      "Thank you for the suggestion! This led to a fantastic discussion with the editors. Bjarne's going to take over the Issue and rewrite this item. Based on that, we're declining this specific pull request. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d818912b45d369940c",
    "number": 892,
    "body": "Attempt to add an example (that is as non-controversial as possible) of an inheritance hierarchy to C.120\r\n\r\nRelated in part to https://github.com/isocpp/CppCoreGuidelines/issues/580.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #892 from lbrandy/master\n\nExample of an inheritance hierarchy for C.120."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075d918912b45d369940d",
    "number": 891,
    "body": null,
    "head_branch": "hs-gsl-intro-branch",
    "is_a_fork": false,
    "comments": [
      "One thing that surprised me and might deserve a note is that you can't compare iterators from different spans even if they refer to the same array.\r\n\r\nAnother thing that might be obvious to most (but was initially overlooked by me) is that an iterator is bound to the lifetime of a span. Hence, e.g. returning an iterator that was created from a local span (think an implementation of `find` that has a gsl::span as a value parameter) leads to undefined behavior.",
      "Assigning to Herb, please integrate changes from the notes at the bottom of the document. ",
      "Thanks Mike, added notes."
    ],
    "commit_messages": [
      "Merge pull request #891 from isocpp/hs-gsl-intro-branch\n\nGSL intro"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075da18912b45d369940e",
    "number": 890,
    "body": "Fills in **Example, bad** in section NR.1",
    "head_branch": "remyabel-NR.1-add_example",
    "is_a_fork": true,
    "comments": [
      "I would be tempted to initialize `i` at the top as `int i = 0;` because at the moment it looks like the problem is an *uninitialized variable* whereas the real problem being highlighted is that the variable may have been *changed* between it's initialization and use.",
      "@galik Possibly. Right now I'm trying to figure out why it's not building. I removed the extraneous whitespace as cpp-lint suggested. \r\n\r\nOK. Turns out the spellcheck error is actually from a completely different spot in the document. Line 13576: objct -> object",
      "Superseded by https://github.com/isocpp/CppCoreGuidelines/commit/098dd3ee900bc13ae190f68712408e332b6cb5cd"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075db18912b45d369940f",
    "number": 885,
    "body": "A possible improvement as I insinuated in https://github.com/isocpp/CppCoreGuidelines/issues/884.",
    "head_branch": "f.52-rephrasing",
    "is_a_fork": true,
    "comments": [
      "The title is no longer grammatically correct.",
      "Thanks for initiating the conversation. We agree F.52 should be expanded, per #884. We don't think this PR is the change we want though, especially we don't want to remove \"correctness\" because it's about both efficiency and correctness."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075dc18912b45d3699410",
    "number": 877,
    "body": "",
    "head_branch": "travis-fixes-3-30-17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #877 from cubbimew/travis-fixes-3-30-17\n\ntravis fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075dd18912b45d3699411",
    "number": 867,
    "body": "This includes and supersedes #855 and #865, which could be closed early in favour of this PR, original author information is kept.\r\n\r\nAs suggested in #865, this also adds an additional check for Unicode EN space instead of plain space (I tired, the original version of the document generates warnings as expected). ",
    "head_branch": "fix-warnings",
    "is_a_fork": true,
    "comments": [
      "Thank you, and thank you for including the other two PRs!",
      "Thank you! Much appreciated!"
    ],
    "commit_messages": [
      "Merge pull request #867 from tkruse/fix-warnings\n\nFix travis warnings, includes other PRS"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075de18912b45d3699412",
    "number": 865,
    "body": "First pull request to this project. I was trying to compile the Markdown into an end PDF on Windows 10 using Pandoc -> MiKTeX. I found that there were some EN-SPACE characters encoded in the document, whereas every other space was the standard SPACE encoding. Pandoc moved them transparently, but PDFLaTeX choked on it. To fix the issue, and for consistency, I changed the EN-SPACE (U+2002) to a standard SPACE character. \r\n\r\nExample PDF output is attached. \r\n\r\nI need this to work as I tend to be offline for long periods of the day and having the Core Guidelines available for reference would be very useful. Obviously I can repeat this process over and over, but I believe that fixing it at the source will save me (and potentially others) time.\r\n\r\n[CPPCG.pdf](https://github.com/isocpp/CppCoreGuidelines/files/853234/CPPCG.pdf)\r\n",
    "head_branch": "FixUnicodeChar",
    "is_a_fork": true,
    "comments": [
      "Looks like the travis build doesn't catch these. @tkruse would it be easy to create a `no-en-space` remark rule, or something similar?",
      "So far in the makefile I just used shell commands for such things, using grep and sed. I can have a look."
    ],
    "commit_messages": [
      "Change Unicode EN SPACE (U+2002) characters to SPACE (U+0020) so that Pandoc-generated LaTeX can compile without Error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075df18912b45d3699413",
    "number": 861,
    "body": "Proper em dashes and quotes.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "N.B. there's no need to create a second pull request, if you push something different to your master branch your original request would have been updated.\r\n",
      "@jwakely\r\n> there's no need to create a second pull request, if you push something different to your master branch your original request would have been updated.\r\n\r\nOh, thanks. Didn’t know about that.",
      "It should be the renderer's job to format these. Suggest close.",
      "@blakehawkins Automatic formatting is error-prone and only somewhat reasonable when verified manually by a human anyway.",
      "See https://travis-ci.org/isocpp/CppCoreGuidelines/builds/207216964#L1132\r\n\r\nIt's much easier to improve a renderer than it is to require that changes to the doc use proper dashes and quote characters",
      "@blakehawkins\r\n> See https://travis-ci.org/isocpp/CppCoreGuidelines/builds/207216964#L1132\r\n\r\nHow should I treat this? I suspect this is an automated check intended to check _code_ while C++ Core Guidelines are a book-like document, not code. Fwiw, please note that I didn’t touch the _code_ examples (both block-level and inline) in any way, only text parts are formatted of course.\r\n\r\n> It's much easier to improve a renderer than it is to require that changes to the doc use proper dashes and quote characters\r\n\r\nIt’s impossible to create a 100% non-error-prone automatic formatter (even aside from that such formatting is currently _not_ applied to C++ Core Guidelines anyway, and is unlikely going to in the foreseeable future).\r\n\r\nAn automation tool could _help_ in generating some _draft_ formatting that a human could (and should) then verify manually, but it couldn’t be the _only_ thing we could rely on. I’m in web development since 2002, quality text formatting is an important part of a quality website, so I know quite well what I am talking about.\r\n\r\nYou are free to create a better renderer in the future (though I’m not sure how this could influence the Markdown renderer built into GitHub), but the entire current text is already carefully formatted by me manually, and there is no reason to drop this work.",
      "> How should I treat this? I suspect this is an automated check intended to check code while C++ Core Guidelines are a book-like document, not code. Fwiw, please note that I didn’t touch the code examples (both block-level and inline) in any way, only text parts are formatted of course.\r\n\r\nThat isn't what it is. Remark is for linting markdown quality. See https://github.com/wooorm/remark-lint\r\n\r\n> It’s impossible to create a 100% non-error-prone automatic formatter (even aside from that such formatting is currently not applied to C++ Core Guidelines anyway, and is unlikely going to in the foreseeable future).\r\n\r\nThat's a pretty bold statement. Usually if you have a renderer that uses a real parser and it can't display something correctly, it points to a problem in the input data.\r\n\r\nI'm not sure what the second clause in your sentence is trying to say.\r\n\r\n> An automation tool could help in generating some draft formatting that a human could (and should) then verify manually, but it couldn’t be the only thing we could rely on. I’m in web development since 2002, quality text formatting is an important part of a quality website, so I know quite well what I am talking about.\r\n\r\nMarkdown isn't a \"webpage format\" and we aren't doing \"web development\". Real books are rendered using text rendering engines.\r\n\r\nTake a look at what `pandoc` + `xelatex` make of the most recent successful build (`8a9bb3bc61a97aaf9a649e07dcdeaa28daf20407`):\r\n\r\nhttps://www.docdroid.net/z4FvVsi/out.pdf.html#page=25\r\n\r\n> You are free to create a better renderer in the future (though I’m not sure how this could influence the Markdown renderer built into GitHub), but the entire current text is already carefully formatted by me manually, and there is no reason to drop this work.\r\n\r\nI realize it's painful to drop hard work, but it seems that you made a thousand changes to this doc without understanding what the CI build does. Is that a fair assessment?",
      "@blakehawkins\r\n\r\n> Remark is for linting markdown quality.\r\n\r\nIf a tool recommends to use wrong keyboard characters in UTF-8 _text_ (not code) instead of correct typographic ones, the tool is just plain wrong and harmful. There is no such thing as “markdown quality” outside of its _syntax_ validity. Checking text for being ANSI-only (we are in 2017 with UTF-8 everywhere, hello?) is out of MD-linter responsibility, so its recommendations as for text (not code) are in no way something that should be taken into account.\r\n\r\n> it points to a problem in the input data\r\n\r\nThis is it. Problem in the input data is a broad term. You can never guarantee the input data is perfectly correct from a specific automated-tool perspective. For example, if an inline code fragment like `i--` wasn’t marked-down as code by wrapping it in back-ticks, the renderer could blindly replace `--` with `—`, thus making the text incorrect and confusing: `i—`.\r\n\r\nAlso, as I said, you could most likely not influence the existing MD renderer of GitHub itself in any way even if a third-party renderer could be able to produce correct typography-wise result.\r\n\r\n> Markdown isn't a \"webpage format\" and we aren't doing \"web development\". Real books are rendered using text rendering engines.\r\n\r\nThat looks like an offtopic, but afaik, real books aren’t usually written (at least commercially) in Markdown. Markdown is certainly not a webpage format (HTML is), it’s a _content_ format that just somewhat more low-level and garbage-free than WYSIWYG while still being simple enough to be used by nonadvanced authors compared with HTML.\r\n\r\n> it's painful to drop hard work\r\n\r\nIt’s not just hard work, it’s work _nobody_ will probably _ever_ do for you again anymore. Given that the guidelines are now apparently mostly complete, its current typography state (after accepting my pull request) would cover the most of the text even if subsequent (rather minor compared with the whole document) commits still didn’t account for typography (moreover, I could just make minor corrections periodically to maintain high typography-wise quality of the Guidelines).\r\n\r\n> understanding what the CI build does\r\n\r\nI’m aware of what continuous integration is. And I believe the actual reason why you are against the change is _exactly_ that it conflicts with other pending pull requests. I see the two solutions for preventing such conflicts:\r\n\r\n* making such massive changes only when there are no previous unmerged pull requests at all. Almost impossible — there are almost always some pull requests;\r\n\r\n* VCS should be able to diff on _per-character_ (instead of per-line) basis. This either should be already enableable via Git settings (and available at least for users of paid GitHub accounts) or is a good and natural way for Git to be improved. This way, VCS could easily merge most of pull requests affecting the same lines with no conflict-related issues at all.\r\n\r\nFwiw, I’m open to help (though I’m not sure how exactly to do this technically on GitHub yet) you with updating the pull requests existed at the moment of creating my pull request.",
      "Hi again,\r\n\r\n> If a tool recommends to use wrong keyboard characters in UTF-8 text (not code) instead of correct typographic ones, the tool is just plain wrong and harmful.\r\n\r\nSo, that isn't quite right. The tool's recommendations are very much dependent on the config we provide - see https://github.com/isocpp/CppCoreGuidelines/blob/master/scripts/nodejs/remark/.remarkrc\r\n\r\nI think you'll find that your *opinion* on use of proper UTF-8 characters will be a bit contentious. I'm sure you can think of more than one argument for why the use of straight quotes and hyphens only *might* be preferred by someone, no?\r\n\r\n> There is no such thing as “markdown quality” outside of its syntax validity.\r\n\r\nThat isn't right either. Markdown quality includes things like consistency (are all your code blocks fenced the same way?) and flavor preference (github flavored markdown in this case).\r\n\r\n> Checking text for being ANSI-only (we are in 2017 with UTF-8 everywhere, hello?) is out of MD-linter responsibility, so its recommendations as for text (not code) are in no way something that should be taken into account.\r\n\r\nObjection: appeal to novelty.\r\n\r\nThe value in using ANSI-only text in a text data format is that this document is maintained by people typing with keyboards. If your keyboard has proper quote characters and em-dashes, that's cool, but it isn't standard. Don't forget that your target audience here is quite a lot of people who still write (everything) in vim. Copy-pasting utf characters is not something people are going to like.\r\n\r\nIf you really do think proper UTF characters are right here, probably the best course of action would be to push for changes to the remark config, so that proper UTF characters are *consistently* preferred, and therefore straight quotes and double hyphens are flagged by the CI build.\r\n\r\nI don't think people will go for that, though.\r\n\r\n> This is it. Problem in the input data is a broad term. You can never guarantee the input data is perfectly correct from a specific automated-tool perspective. For example, if an inline code fragment like i-- wasn’t marked-down as code by wrapping it in back-ticks, the renderer could blindly replace -- with —, thus making the text incorrect and confusing: i—.\r\n\r\nDo you really mean to say that we can push for UTF quotes and em-dashes, but can't push to ensure all code (inline or block) is wrapped in markdown code formatting? I think that's an absurd claim.\r\n\r\n> Also, as I said, you could most likely not influence the existing MD renderer of GitHub itself in any way even if a third-party renderer could be able to produce correct typography-wise result.\r\n\r\nI'm not really interested in changing the github renderer.\r\n\r\n> That looks like an offtopic, but afaik, real books aren’t usually written (at least commercially) in Markdown. \r\n\r\nI don't think this is really a valid point. LaTeX will also flag \"correct\" quote characters and em-dashes as invalid.\r\n\r\n> It’s not just hard work, it’s work nobody will probably ever do for you again anymore.\r\n\r\nSurely the computer will do it for me again when I write `pandoc -r markdown -w latex --latex-engine=xelatex CppCoreGuidelines.md` - just the same way as it did in the link above.\r\n\r\n> I’m aware of what continuous integration is.\r\n\r\nSo, sorry if that wasn't clear. I didn't mean to insinuate that you don't know what CI is (actually, I wrote \"the CI build\", not \"CI builds\". My point is that you don't seem to know the expectations for what this particular CI build checks.\r\n\r\n> And I believe the actual reason why you are against the change is exactly that it conflicts with other pending pull requests. I see the two solutions for preventing such conflicts:\r\n\r\nThat is not correct. The CI build, if anything, would compare your build against the master branch.\r\n\r\nIt is definitely true that the current master branch is failing the CI build, though. My objection is not that your PR is failing (it's not your job to necessarily fix existing remark moans) - my objection is that your changes intentionally make existing passing text *stop passing*.\r\n\r\n> making such massive changes only when there are no previous unmerged pull requests at all. Almost impossible — there are almost always some pull requests;\r\n\r\nThat wouldn't be necessary at all. Your branch doesn't have any conflicts, just new CI moans.\r\n\r\nI hope this clears some of your confusion.\r\n\r\n--\r\n\r\nFinally, two suggestions from myself:\r\n\r\n* to prevent this from happening in future, it would really have been good to open an issue first to suggest the changes, before actually performing them. That's what's suggested here - https://github.com/isocpp/CppCoreGuidelines/blob/master/CONTRIBUTING.md#pull-requests\r\n\r\n* It might be worth making a new branch (perhaps called `proper_utf_chars`?) with *different remark settings* so you can consistently maintain proper quote characters and em dashes. I bet the maintainers of this repo would be happy to host that branch here, officially, so long as you were willing to maintain it.",
      "@blakehawkins\r\n\r\n> Objection: appeal to novelty.\r\n\r\nUnicode has nothing to do with novelty. Unicode is our objective reality for at least 15+ years (e.&thinsp;g. Windows&nbsp;XP released in 2001 already had Unicode support).\r\n\r\nSorry, preferring ANSI over Unicode in regular texts (not code) today looks like over-old-school’ish divorcement from reality I can’t help with. But that’s your right and choice.\r\n\r\n> If your keyboard has proper quote characters and em-dashes, that's cool, but it isn't standard.\r\n\r\nFwiw, I have a regular keyboard like you or others have. I typically insert special characters via `Alt + 4-digit code` key sequences (e.&thinsp;g. `Alt+0151` for em dash) available at least in Windows.\r\n\r\n> Do you really mean to say that we can push for UTF quotes and em-dashes, but can't push to ensure all code (inline or block) is wrapped in markdown code formatting?\r\n\r\nLike with the example I’ve provided, that’s called human factor. Anything is possible when input data are provided by a human.\r\n\r\n> I'm not really interested in changing the github renderer.\r\n\r\nBut the truth is that people most likely tend to read exactly the _GitHub_ version of Guidelines that in fact has poor typography.\r\n\r\n> Surely the computer will do it for me again when I write `pandoc -r markdown -w latex --latex-engine=xelatex CppCoreGuidelines.md` - just the same way as it did in the link above.\r\n\r\nSince this command requires a complex toolchain besides pandoc itself, I can’t say for sure what the result it should have.\r\n\r\nCould you clarify whether the command you’ve provided does automatically replace ANSI surrogates for characters like quotes and em dashes to corresponding correct typographic characters (the command itself seems not to have an explicit option to enable such replacement, so it’s unclear)?\r\n\r\n> I bet the maintainers of this repo would be happy to host that branch here, officially, so long as you were willing to maintain it.\r\n\r\nNo, sorry, I don’t have time resources and motivation for that. Aside from that I consider maintaining a separate typography-correct version totally unreasonable: the main version itself should be as correct and readable as possible.",
      "I don't care much one way or the other but out of curiosity: What exactly is the reason behind the \"use straight quotes instead\" rule?\r\n\r\n@Marat-Tanalin: blakehawkins provided a link to the pdf created by the command: https://www.docdroid.net/z4FvVsi/out.pdf.html#page=25",
      "@MikeGitb It’s unclear whether the PDF is generated using _default_ settings or with some explicit typography-related flags (I don’t see such flags in the command provided by @blakehawkins, hence my question).",
      "@Marat-Tanalin \r\n\r\n> Unicode has nothing to do with novelty. Unicode is our objective reality for at least 15+ years (e. g. Windows XP released in 2001 already had Unicode support).\r\n\r\n> we are in 2017 with UTF-8 everywhere, hello?\r\n\r\n*Appeal to Novelty* doesn't mean that I think unicode is a novelty - it means that I object to your argument on the grounds that it's a logical fallacy to imply that something newer is necessarily better in all contexts. https://en.wikipedia.org/wiki/Appeal_to_novelty\r\n\r\n> Like with the example I’ve provided, that’s called human factor. Anything is possible when input data are provided by a human.\r\n\r\nI think the whole point is that changes to this document are reviewed by other humans. I think you'd have a hard time finding code examples in this doc that aren't wrapped in the proper code blocks.\r\n\r\n> Since this command requires a complex toolchain besides pandoc itself, I can’t say for sure what the result it should have.\r\n\r\nThe result should be consistent, and this is just one example of a tool for rendering markdown.\r\n\r\n> Could you clarify whether the command you’ve provided does automatically replace ANSI surrogates for characters like quotes and em dashes to corresponding correct typographic characters (the command itself seems not to have an explicit option to enable such replacement, so it’s unclear)?\r\n\r\nThe command is just invoking `LaTeX` (or in this case, xelatex) and wrapping the markdown doc in a latex template.\r\n\r\nLaTeX expects all quote characters as straight quotes, and typesets them in publish quality. Of course, as you mentioned, for printing and distributing such a thing, a large company like O'Reilly would probably have a human editor verify the quality as well.\r\n\r\nOne final note on this: as mentioned above, I used a particular commit to generate that pdf (where the build was *passing*). If I did it with your PR, I suspect it would probably fail.\r\n\r\n> No, sorry, I don’t have time resources and motivation for that. Aside from that I consider maintaining a separate typography-correct version totally unreasonable: the main version itself should be as correct and readable as possible.\r\n\r\nI think this is a key point. You don't have time to maintain consistency in this style, and everyone else has *neither* the time *nor* the interest to maintain it.\r\n\r\n> I don't care much one way or the other but out of curiosity: What exactly is the reason behind the \"use straight quotes instead\" rule?\r\n\r\nI think @tkruse might have a better answer, but I suspect the rule is for consistency. It's much more desirable to have 100% consistent straight quotes, than to have some straight quotes and some curly ones. Straight quote are also less likely to rot since someone modifying the document doesn't have to be interested/capable of maintaining the curly ones. Finally, straight quotes are the standard charset expected when typesetting with a tex engine.\r\n\r\n> It’s unclear whether the PDF is generated using default settings or with some explicit typography-related flags\r\n\r\nJust to repeat for clarity: there are no special typography flags; `tex` expects straight quotes.",
      "I added the rule for straight quotes after finding that some 1% of quotes were non-straight, and  inconsistency is worse than anything. But also in Markdown, the straight quotes in non-preformated text are the correct representation (coding) of typographic quotes in the rendering results, I think.\r\n\r\nGithub chose to use rendering of quotes and dashes in Markdown without transformation as the default for __viewing files in the source tree__ presumably because that view is targeted at contributors to the document, who commonly need to the the raw source of documents. Not for readers. That's a github feature, not a bug.\r\n\r\nFor github, the correct channel for actual readers of the document are github pages or any other form of presentation that went through a publishing step. I helped this project to set up a gh-pages branch for that effect, it is linked at the top of the github pages (maybe not prominently enough).\r\nThe jekyll renderer does the transformation of quotes and dashes correctly, I think, check: http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines\r\n(Note that inside code blocks, double-minus and quotes remain as in the source)\r\n\r\nSo I believe this PR provides a technical solution where there is no technical problem.\r\n\r\nPossibly the rendered github page could be advertized more. As an example, the github-pages version is not mentioned in the ```README.md```, and not visible on the page at all when opening ```CppCoreGuidelines.cpp```. Also I think @Marat-Tanalin could probably make that one look much better than I did.\r\n\r\nBut the ```CppCoreGuidelines.cpp``` files should probably remain as it is now with respect to quotes and dashes.",
      "Personally I don't think this is worth doing. I don't want to have to avoid using simple quote characters when editing the document.",
      "@blakehawkins\r\n> Appeal to Novelty doesn't mean that I think unicode is a novelty - it means that I object to your argument on the grounds that it's a logical fallacy to imply that something newer is necessarily better in all contexts.\r\n\r\nUnicode is better _not_ because it’s newer, but because it is _universal_ and makes documents looking better and more readable with no need for extra pre-/post-processing while being extremely widely supported. Again, it has _nothing to do_ with appeal to novelty.\r\n\r\n> I used a particular commit to generate that pdf (where the build was passing). If I did it with your PR, I suspect it would probably fail.\r\n\r\nI have no idea why it should fail, other than just due to a current automated-check rule (that could easily be removed) that forces quotes to be necessarily straight.\r\n\r\n> I think this is a key point. You don't have time to maintain consistency in this style, and everyone else has neither the time nor the interest to maintain it.\r\n\r\nMaintaining a _separate_ version existing _besides_ the main _permanently-unformatted_ version would apparently involve making the _same_ typography corrections _over and over again_ (be it manually or automatically) — _that_’s what I consider unreasonable.\r\n\r\nOn the contrary, once the corrections I’ve _already_ made are merged with the _main_ version of the document, I could easily make additional _minor_ corrections periodically, while the document would already always be 99% typography-correct (and 100% _up-to-date_ at the same time unlike a possible entirely separate version) even with no any typography-wise maintenance at all.\r\n\r\n> Straight quote are also less likely to rot since someone modifying the document doesn't have to be interested/capable of maintaining the curly ones.\r\n\r\nI have no idea how the proper typography already existing in the document could impact contributors in a bad way regardless of whether they are interested/capable of maintaining anything.\r\n\r\n> straight quotes are the standard charset expected when typesetting with a tex engine.\r\n\r\nAs long as a tex engine supports Unicode (and it obviously can’t not to), that probably doesn’t matter.\r\n\r\n@tkruse\r\n> I added the rule for straight quotes after finding that some 1% of quotes were non-straight, and inconsistency is worse than anything.\r\n\r\nWell, _inconsistently good_ (that the document would be once my pull request is merged) is probably much better than _consistently bad_.\r\n\r\n> Github chose to use rendering of quotes and dashes in Markdown without transformation as the default for viewing files in the source tree presumably because that view is targeted at contributors to the document, who commonly need to the the raw source of documents. Not for readers.\r\n\r\nFwiw, exactly as a _reader_, I prefer to use the GitHub version just to get the most recent version not outdated in any way.\r\n\r\n> Note that inside code blocks, double-minus and quotes remain as in the source\r\n\r\nThat’s quite expected given that corresponding code parts are properly marked-down. As I said, my example was solely about possible code _not marked-down explicitly_.\r\n\r\n> I think @Marat-Tanalin could probably make that one look much better than I did.\r\n\r\nCould you clarify how exactly this could be done? Thanks.",
      "@Marat-Tanalin : Unless you find (many) other people to support your view, I think you should get used to the idea that the PR wont get merged.\r\n\r\nThere are alternatives to achieve what you want. One is to use the master branch to render the github-pages, that way the latter is always up-to-date. Another is to use CI for publishing, that could publish both HTML and PDF as an example, for every new version. Lastly it is possible to write an html5 app that can read any raw version of the document and render it to  pretty html on the fly. None is easy to achieve, but all of them are far more likely to happen then your PR being merged, I think.\r\nAnd there is the alternative of you reading the file on your local machine rendering it locally in whatever way you like, updating to the latest version is then as cheap as git pull.\r\n\r\nI personally prefer the first alternative, and since github added features to manage the rendering from a docs folder on the master branch, there is a slim chance the core maintainers may accept a PR with that effect:\r\nhttps://help.github.com/articles/configuring-a-publishing-source-for-github-pages/\r\n\r\nIf you want to help improving the version published at http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines , you can check out the ```gh-pages``` branch, and then edit the HTML templates and CSS.\r\n\r\nThere are github tutorials on how to use jekyll locally to render locally, but you can also just create a gh-pages branch in your repository, and github will create a rendered site at http://Marat-Tanalin.github.io/CppCoreGuidelines/CppCoreGuidelines whenever you push that branch to your repository.\r\nWhen making a PR, you then would have to take care to make it against the 'gh-pages' branch of isocpp/CppCoreGuidelines, as opposed to 'master', which is the default.",
      "I'm favoring the simpler formatting, based on recommendations of @tkruse, @blakehawkins, @jwakely. People edit this document with a number of editors--I'd prefer to keep the text as simple as possible. Unfortunately, we live in a world where ASCII rules. ",
      "@AndrewPardoe\r\nThat’s OK. Thanks to all participated in the thread.\r\n\r\nI would like to summarize the points I stated in the comments above:\r\n\r\n* Unicode is today’s objective reality, _not a novelty_ in any way. Unicode is better _not_ because it’s newer, but because it is _universal_ and makes documents looking better and more readable with no need for extra pre-/post-processing while being extremely widely supported.\r\n\r\n* No special keyboard is needed for inserting non-keyboard characters. For example, in Windows, such characters can be inserted via `Alt + 4-digit code` key sequences (e.&thinsp;g. `Alt+0151` for em dash).\r\n\r\n* Converting Markdown to PDF requires a _complex toolchain_ not reasonable for everyone to set up and use.\r\n\r\n* **99% good** is much better than **100% bad**. Once my corrections are merged with the main version of the document, the document would always be 99% typography-correct (and 100% up-to-date at the same time unlike a possible entirely separate version) even with no any typography-wise maintenance at all.\r\n\r\n> we live in a world where ASCII rules.\r\n\r\nUsing ASCII should be reasonable. It sometimes is in _code_, but typically not in regular _text_. I’m curious what you would do if the document was written in a _nonlatin language_ like Russian/Cyrillic.\r\n\r\n@tkruse\r\n> There are alternatives to achieve what you want. One is to use the master branch to render the github-pages, that way the latter is always up-to-date.\r\n> I personally prefer the first alternative\r\n\r\nFwiw, I like this option too. What could we do to make that happen?",
      "@Marat-Tanalin : The first step would be to validate that my idea works. Github allows using the master branch for docs, and allows using a doc folder to keep the ugly stuff aside a bit. \r\n\r\nBut I now remember that the github-pages branch always needs an additional conversion step, e.g. see:\r\nhttps://github.com/isocpp/CppCoreGuidelines/blob/gh-pages/INSTRUCTIONS.txt\r\nStep 5. and 6.\r\n\r\nI cannot vouch that there is a solution.\r\n\r\nThis can be done on any fork of this repo (any github account).\r\n\r\nOnce there is a viable solution, this has to be proposed as a ticket. I am not sure whether the core maintainers would accept a \"doc\" folder in the master branch of the repository root that exists only for github rendering."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e118912b45d3699414",
    "number": 860,
    "body": "Proper em dashes, quotes.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e218912b45d3699415",
    "number": 857,
    "body": "Patch for #856 ",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good but we'll massage the text as we want to keep C++17-specific features distinct for now until people have broad access to compilers that support them."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e318912b45d3699416",
    "number": 855,
    "body": "This cleans up a number of minor build issues.\r\n\r\nThe only issue I see remaining after this is:\r\n14013:15-14013:58  warning  Don’t pad `emphasis` with inner spaces               no-inline-padding\r\n14014:21-14014:45  warning  Don’t pad `emphasis` with inner spaces               no-inline-padding\r\n\r\nThese appear to be unresolvable with the current version of remark.  Very similar lines are on 14032-33 and don't generate these errors.  Moving the reported lines there results in no break.  Moving the lines at 14032-33 to 14013 results in them having the same issue.  If you just put the header blocks around the inline code block as in 14030-35 then the issue also goes away.\r\n\r\nHaven't had a chance to investigate if a newer version of remark would fix the issue.",
    "head_branch": "jacobl/lint",
    "is_a_fork": true,
    "comments": [
      "Oh, I noticed some of these typo fixes and made the same changes myself earlier today. Thanks for addressing some more of them.",
      "Possible solutions/workarounds for the last remaining issues:\r\n\r\n- indent code block by 2 additional blanks\r\n- indent *all* bullet point contents by 2 additional blanks, and enable that remark rule to enforce it\r\n- Add a text line between the bullet and the code block:\r\nLike this\r\n```\r\n* Bullet\r\nExample code:\r\n   \r\n    code\r\n\r\n```\r\n\r\nNote:\r\nNot sure if any version of remark would ever be able to parse the current text without change. The general problem being that 2 additional indents are the canonical way to embed more lines within bullet points. Without that, the parser has to heuristically guess the intention, with caveats such as code blocks not being recognized. So it might not be a remark bug, just a caveat for people who refuse the 2-blank indent inside bullets.",
      "I took the extra line of text between bullets and code block since it seemed the least intrusive and now travis looks clean again.",
      "closing per #867 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e418912b45d3699417",
    "number": 854,
    "body": "This is just a minor bit of cleanup in order to get travis closer to compiling.  With these changes the only two remaining issues I see are:\r\n\r\n  14012:15-14012:58  warning  Don’t pad `emphasis` with inner spaces  no-inline-padding\r\n  14013:21-14013:45  warning  Don’t pad `emphasis` with inner spaces  no-inline-padding\r\n\r\nThese don't appear to be resolvable without more significant rewriting.  Lines 14032-33 have very similar content but don't result in this error where they are currently located.  If you move them up to this location then they do.\r\n\r\nIf you wrap the 14012-13 lines inside the header blocks (###) like 14032-33 then the error goes away.\r\n",
    "head_branch": "jacobl/buildfixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e518912b45d3699418",
    "number": 853,
    "body": "Pull request #783 points out a problem with the example, but there are more. This makes it compile, and avoids uninitialized data members.",
    "head_branch": "t84-example",
    "is_a_fork": false,
    "comments": [
      "Closing per #867 "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e618912b45d3699419",
    "number": 846,
    "body": "in philosophy",
    "head_branch": "bs-local-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Merge pull request #846 from isocpp/bs-local-1\n\ntools and library rules"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e718912b45d369941a",
    "number": 845,
    "body": "For https://github.com/isocpp/CppCoreGuidelines/issues/844\r\n\r\n- Replace grep -P/sed with perl one-liners\r\n- Add hunspell en_US dictionaries to the repo and reference them in make rule",
    "head_branch": "jacobl.macbuild",
    "is_a_fork": true,
    "comments": [
      "The travis build apparently times out with the newer/up-to-date hunspell dictionary.  It would be nice to know what dictionary files travis is using and use them instead.\r\n\r\nA local build has this for timing:\r\nreal\t10m59.031s\r\nuser\t10m39.996s\r\nsys\t0m6.120s\r\n",
      "Looks like revision f2dfcfc43839e0a623665e03b55527e0a4fec890 introduced remark and cpp lint style checking issues which I'm also now seeing on this branch."
    ],
    "commit_messages": [
      "Merge pull request #845 from jacobl-at-ms/jacobl.macbuild\n\nEnable building directly on a mac"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e818912b45d369941b",
    "number": 834,
    "body": "Even though it's a \"bad\" example, getters should be const member functions.",
    "head_branch": "c131-constify",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #834 from cubbimew/c131-constify\n\nC.131: getters should be const member functions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075e918912b45d369941c",
    "number": 833,
    "body": "The comments in the example in C.127 support the popular misconception that it's only bad to destroy a polymorphic object through base with non-virtual destructor if there are some resources in the derived object that would be leaked.\r\n\r\n[[expr.delete]/3](http://eel.is/c++draft/expr.delete#3)  is very explicit that it is undefined behavior. See also [Stack Overflow](http://stackoverflow.com/questions/2100644/will-using-delete-with-a-base-class-pointer-cause-a-memory-leak) \r\n",
    "head_branch": "c127-ub",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #833 from cubbimew/c127-ub\n\nC.127 should not claim that there is a defined behavior"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ea18912b45d369941d",
    "number": 831,
    "body": "When the title (and content) of ES.56 was changed by https://github.com/isocpp/CppCoreGuidelines/commit/1b3efdf1e8ed7edc6ba2dc6ea539ea104d84e1b6  its entry in the ES ToC wasn't, this brings them back in sync.",
    "head_branch": "es.56-link-name",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "When the title of ES.56 was changed, its entry in the ES ToC wasn't (#831)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075eb18912b45d369941e",
    "number": 830,
    "body": "",
    "head_branch": "copyass-link-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "uncross links to the self-assignment rules (#830)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ec18912b45d369941f",
    "number": 828,
    "body": "Greetings!\r\n\r\nThis Pull request exists for peer review of my proposed edits from this first contribution to the core guidelines.\r\n\r\nLooking forward to further review and editing.\r\n\r\nThanks,\r\ncoast\r\n\r\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "@jwakely @galik Edits have been updated to reflect your Suggestions.\r\n\r\nThanks!",
      "Thank you!"
    ],
    "commit_messages": [
      "Merge pull request #828 from mancoast/master\n\nReview/Rework of English Language Readability"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ed18912b45d3699420",
    "number": 825,
    "body": "",
    "head_branch": "interfaces_non_trivial_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #825 from johelegp/interfaces_non_trivial_fixes\n\nI: Enforcement fixes/completion"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ee18912b45d3699421",
    "number": 824,
    "body": "",
    "head_branch": "interfaces_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #824 from johelegp/interfaces_fixes\n\nI: Grammar, spacing and typo fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ef18912b45d3699422",
    "number": 823,
    "body": "Described in #407, 4a9e41d7 added the section but didn't fix the links.",
    "head_branch": "gsl_concept_dead_link_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #823 from johelegp/gsl_concept_dead_link_fix\n\nGSL.concept: Dead link fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f018912b45d3699423",
    "number": 822,
    "body": "",
    "head_branch": "gsl_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #822 from johelegp/gsl_fixes\n\nGSL: Grammar, spacing and markdown fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f118912b45d3699424",
    "number": 821,
    "body": "",
    "head_branch": "philosophy_fixes",
    "is_a_fork": true,
    "comments": [
      "Looks good."
    ],
    "commit_messages": [
      "Merge pull request #821 from johelegp/philosophy_fixes\n\nP: Grammar, correction and typo fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f218912b45d3699425",
    "number": 818,
    "body": "Proposed content to the stub rule C.138 \"Create an overload set for a derived class and its bases with using\", based on bs_faq2 entry [Why doesn't overloading work for derived classes?](http://www.stroustrup.com/bs_faq2.html#overloadderived) and openoffice guideline on [Name hiding](https://wiki.openoffice.org/wiki/Writing_warning-free_code#Name_hiding).",
    "head_branch": "c138",
    "is_a_fork": true,
    "comments": [
      "Thank you, Sergiy!"
    ],
    "commit_messages": [
      "Merge pull request #818 from cubbimew/c138\n\nC.138 initial content"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f418912b45d3699426",
    "number": 815,
    "body": "Rule C.84 and C.85 are redundant and can be merged into one.\r\nAddtionally a new rule C.85 is proposed: C.85: If a user defined swap member function is used, a namespace-level swap(a, b) function should be provided",
    "head_branch": "C84/85_merge",
    "is_a_fork": true,
    "comments": [
      "Does this seem more fitting for an Issue than a PR? It may deserve discussion before action.",
      "Rejecting this as we prefer many rules in favor of bigger rules. We like the suggestion for the new rule, but it is more general than just swap(a,b). I've created issue #839 for Bjarne to generalize this and write up a new rule. "
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f518912b45d3699427",
    "number": 804,
    "body": "Before opening my previous pull requests, I had a look at the existing issues to prevent duplicate typo fixes. There, I found issue #556, which is seemingly abandoned. Most of the mentioned typos have been fixed already, and this branch fixes the remaining typos to allow the issue to be closed.\r\n\r\nES.23: Correct the Fibonacci series\r\nES.71: Fix bug in example code\r\nT.61: Use the correct type for the class member\r\nAppendix C: Use an example string that is not identical to a C++ keyword and clarify comment",
    "head_branch": "Issue-556",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #804 from severinmeyer/Issue-556\n\nFix remaining typos mentioned in issue #556"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f618912b45d3699428",
    "number": 803,
    "body": "F.22: Fix typos\r\nC.128: Update the title in the ToC, to match the new title from commit f0e29f0\r\nCon.1: Fix typo\r\nT.84: Fix typo\r\nNR.2: Remove duplicated word from title (single single)",
    "head_branch": "Other-Typos-squashed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #803 from severinmeyer/Other-Typos-squashed\n\nFix a few more typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f718912b45d3699429",
    "number": 802,
    "body": "E.25: Fix several typos\r\nE.25: Add missing comma\r\nE.2: Add missing verb",
    "head_branch": "E-Typos-squashed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #802 from severinmeyer/E-Typos-squashed\n\nFix typos in section E: Error handling"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f818912b45d369942a",
    "number": 801,
    "body": "ES.dcl: Fix typo\r\nES.25: Use the singular form for the title, to correct it and to match it with the entry in the ToC\r\nES.30: Fix several typos\r\nES.40: Fix typo in code comments\r\nES.61: Capitalize first word of title\r\nES.63: Fix typo\r\nES.70: Fix typo and capitalization\r\nES.74: Fix typo in title\r\nES.102: Fix typo and add missing comma",
    "head_branch": "ES-Typos-squashed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #801 from severinmeyer/ES-Typos-squashed\n\nFix typos in section ES: Expressions and statements"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075f918912b45d369942b",
    "number": 800,
    "body": "CP.8: Add missing colon to title\r\nCP.30: In title, close inline code block with backtick\r\nCP.101: Correct saying, Icarus flew to close to the sun, not the wind",
    "head_branch": "CP-Typos-squashed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #800 from severinmeyer/CP-Typos-squashed\n\nFix typos in section CP: Concurrency"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075fa18912b45d369942c",
    "number": 799,
    "body": "NL.1: Add missing period to title in ToC\r\nNL.5: Fix typo\r\nNL.8: Fix several typos\r\nNL.9: Add missing period in title\r\nNL.9: Fix typo\r\nNL.19: Fix typo",
    "head_branch": "NL-Typos-squashed",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #799 from severinmeyer/NL-Typos-squashed\n\nFix typos in section NL: Naming and layout"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075fb18912b45d369942d",
    "number": 796,
    "body": "This branch fixes several typos in the regular text of the C section. Code is not affected.\r\n\r\nCONTRIBUTING.md states that:\r\n\"_If you are making many small changes, please create separate PRs to minimize merge issues._\"\r\n\r\nHowever, it seems a bit excessive to open 11 pull requests. As a compromise, I have created a separate commit for each typo, and offer them here as a branch.\r\n\r\nIf you prefer another form, let me know.",
    "head_branch": "C-Typos",
    "is_a_fork": true,
    "comments": [
      "All looks good to me.\n",
      "No problem at all with the single PR. The note is more meant for people who want to do huge refactorings across the whole doc. Typos in one section are easy! Thank you!",
      "That is good to know, thank you.\r\n\r\nNow, I have lined up 28 more typo fixes for 5 other sections. But I noticed that the approach of the individual commit per typo still somewhat inflates the log.\r\n\r\nWould you prefer if I pushed a single commit for all typos within a section?\r\n\r\nAnd should I continue to open a pull request per section, or should I combine them into a single request?",
      "I suggest just using your preferred workflow in this case. Viewing all the commits together isn't a problem as you can just unify them - see here for example:\r\n\r\nhttps://github.com/isocpp/CppCoreGuidelines/pull/796/files\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1418966/20500531/aa45032e-b02d-11e6-90f1-8a215d3bb627.png)\r\n",
      "I'm still new to Github, so I'm probably making this far more complicated than necessary. I will go ahead and simply squash the commits per section and open respective pull requests. Thank you for your assistance."
    ],
    "commit_messages": [
      "Merge pull request #796 from severinmeyer/C-Typos\n\nFix typos in section C: Classes and class hierarchies"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075fc18912b45d369942e",
    "number": 795,
    "body": "",
    "head_branch": "CP.41-Typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #795 from severinmeyer/CP.41-Typo\n\nCP.41: Fix typo in code example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075fd18912b45d369942f",
    "number": 792,
    "body": "The current title of C.10 is:\r\n**Prefer a concrete type over more complicated classes**\r\n\r\nHowever, without the explanatory text, it is unclear what \"complicated classes\" means. I therefore propose the more descriptive title:\r\n**Prefer concrete types over class hierarchies**\r\n\r\nIf desired, I can open an issue for further discussion.",
    "head_branch": "C.10-Title",
    "is_a_fork": true,
    "comments": [
      "Yes, open an issue instead. Thanks.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075fe18912b45d3699430",
    "number": 791,
    "body": "",
    "head_branch": "P.9-Typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #791 from severinmeyer/P.9-Typo\n\nP.9: Fix typo in code example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662075ff18912b45d3699431",
    "number": 790,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Looks good.\n"
    ],
    "commit_messages": [
      "Merge pull request #790 from stephanemagnenat/master\n\nFixed missing `"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760018912b45d3699432",
    "number": 789,
    "body": "auto will deduce as unique_ptr<D> and the correct destructor will call. Anyway, this should be a bad example.",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Thanks!"
    ],
    "commit_messages": [
      "fix c.127 example issue. (#789)\n\nauto will deduce as unique_ptr<D> and the correct destructor will call. Anyway, this should be a bad example."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760118912b45d3699433",
    "number": 787,
    "body": "For issue 529",
    "head_branch": "thread-tooling",
    "is_a_fork": true,
    "comments": [
      "To fix travis failure, fix mentioned spelling mistakes / add new words to the dictionary at\nhttps://github.com/isocpp/CppCoreGuidelines/blob/master/scripts/hunspell/isocpp.dic\n\nfrom the travis report:\n\n```\nLine 11644: verisons -> versions\nLine 11644: gcc -> GCC\nLine 11652: Clang's -> Slang's\nLine 11653: tsan -> tan\nLine 11656: 10x -> 10s\nLine 11656: 20x -> 20s\nLine 11657: unittests -> unit tests\nLine 11658: tsan -> tan\n```\n",
      "Missed line 11657 \"unittests\"\n",
      "I added \"unittest\" to the dictionary. \n",
      "Per our editors' discussion, we think this discussion about tooling might be better in the Philosophy discussion. I've created Issue #840 for Bjarne to create this new item. Thank you for the starting text and suggestion, Titus!"
    ],
    "commit_messages": [
      "unittest is a word"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760218912b45d3699434",
    "number": 786,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #786 from mserdarsanli/master\n\nFix broken anchor link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760318912b45d3699435",
    "number": 783,
    "body": "[T.84](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#t84-use-a-non-template-core-implementation-to-provide-an-abi-stable-interface) example performs incorrect `Link` struct initialization in `put_front` method:\n`void put_front(const T& e) { add_front(new Link<T>{e}); }`\n\n`Link` is derived from `Link_base` so that initialization is ill-formed in C++14 and will try to initialize `Link_base` from `e` in C++17 according to [P0017R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html).\n\nThis pull request fixes the issue.\n",
    "head_branch": "T.84.Link-init-fix",
    "is_a_fork": true,
    "comments": [
      "There are several other issues with the example, and this doesn't solve them. I've created pull request #853 as a better fix. Thanks for pointing out the problem."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760518912b45d3699436",
    "number": 782,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix typo (#782)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760618912b45d3699437",
    "number": 780,
    "body": "The members of Link_base in this example have to be of type Link_base, since Link is not know at this place and one wants to be independent from Link<T>.\n",
    "head_branch": "T.84.Link_base",
    "is_a_fork": true,
    "comments": [
      "Good catch, thank you!"
    ],
    "commit_messages": [
      "Merge pull request #780 from zingsheim/T.84.Link_base\n\nT.84 Correction of Example: Change type of suc and pre to Link_base"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760718912b45d3699438",
    "number": 779,
    "body": "Instead of 4 whitespaces used `cpp` around code blocks.\nUsing the cpp style flag enables syntax highlighting.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "[This](https://gist.github.com/Voultapher/ec1840178c186827b52df3afeb308802) is the code used for changing the syntax.\n",
      "Note that [Travis checks fail](https://travis-ci.org/isocpp/CppCoreGuidelines/builds/168660130) with 700+ of the same error saying. Here's the first:\n\n>   `275:1-277:105      warning  Missing blank line before block node  no-missing-blank-lines`\n\n(I'm not saying the PR would be merged if this was fixed, just pointing out a mechanical issue.)\n",
      "What is a block node?\n",
      "@Voultapher \n\n> 275:1-277:105      warning  Missing blank line before block node  no-missing-blank-lines\n\nIn line 275 (and other lines), it's necessary to insert a blank line after ```\n",
      "Can someone please run the tests again to if it fixed the node block problem\n",
      "See #328, #96, #33 . Maybe it would be good to leave a syntax highlighting PR open, just so that nobody else goes through the trouble of creating yet another such PR.\n",
      "**Compromise**: Have a script that builds a highlighted version of the guidelines. Best of 2 worlds, make the non-highlight the default and link the willing to the highlighted version.\n\nSame benefits of the current solution and people such as those reading the document on github can enjoy the objectively more pleasant to read version if they want.\n",
      "I helped creating a github page that has a button to switch on/off highlighting, see http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines and see the gh-pages branch.\n\nAnd while your python isn't bad (much better than my scripts), using remark is much safer to create fenced code blocks.\nSee https://github.com/wooorm/remark\n\nE.g. see \"check-markdown\" in https://github.com/isocpp/CppCoreGuidelines/blob/master/scripts/Makefile\n\nOne general issue is that not every literal block in the document is necessarily a cpp code snippet, so from this point of view it would make a little more sense to make highlighting the default, and non-highlighting the derivative with loss of information.\n\nTravis would allow for automatic commits, so in theory it would be possible to create a different github branch that automatically has new commits when the master branch has a new commit. That could be used for highlighting or even for pushing PDFs to github (Recipes exist to use pandoc, latex and docker to create PDFs). However, at the end of the day, there is nobody to maintain any such added tooling / infrastructure.\n",
      "I'm updating the contributing.MD to note discussions that we have already had. ",
      "**FWIW** For a while I have been maintaining a syntax highlighted version of the guidelines with an automated update script that synchronizes with the main repository every 6 hours.\r\n\r\nhttps://github.com/galik/CppCoreGuidelines/blob/syntax-highlights/CppCoreGuidelinesSH.md\r\n\r\nThe code to convert the Markdown is here:\r\n\r\nhttps://github.com/galik/CppCoreGuidelines/blob/syntax-highlights/contrib/add-github-syntax-highlights.cpp\r\n\r\nSome may prefer this as the highlighted code in the `gh-pages` version does not seem to be particularly colorful or highlighted. ",
      "Just making sure... the gh-pages version requires enabled javascript and the user to click the \"highlighting\" button, which is \"hidden\" in the sidebar.\r\n\r\nAnd with some more hacking, any of the highlight.js schemes should be possible:\r\nhttps://highlightjs.org/static/demo/\r\n\r\nIn https://github.com/isocpp/CppCoreGuidelines/blob/gh-pages/_includes/head.html\r\nI included the github.min.css, which I assumed would be close to github (no other reason for my choice). I think nobody would complain much about switching to a more colourful highlighting."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760818912b45d3699439",
    "number": 777,
    "body": "Since it appears that #768 is not reaching consensus, let's drop this from TODO/proto-rules section.\n",
    "head_branch": "nvi",
    "is_a_fork": true,
    "comments": [
      "Yes, this is a decent rule but frequently misunderstood and people always ask about it. It's not worth the distraction."
    ],
    "commit_messages": [
      "Merge pull request #777 from cubbimew/nvi\n\ndropping NVI from proto-rules due to no consensus on #768"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760918912b45d369943a",
    "number": 766,
    "body": "The example has a small typo with the name of variable used for index.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #766 from congdanhqx/master\n\nES.7 Fix typo, \"i\" -> \"current_element_index\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760a18912b45d369943b",
    "number": 763,
    "body": "Atomic variables are safe with the sequentially consistent memory model (**memory_order_seq_cst**) only. Weakly ordered atomics cannot be considered safe for mainstream use. The exception clause of CP.100 refined.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #763 from Eliyahu-Ravuna/patch-1\n\nException of CP.100 refined to include the \"sequentially consistent memory model\" only"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760b18912b45d369943c",
    "number": 762,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "How far is synchronized_value in the standardization process?\n",
      "SG1 like the synchronized_value proposal, but it hasn't gone to LWG yet.\n",
      "This refers to the variadic `lock_guard` but that got renamed in Issaquah, so this would need an update before merging it. Looks good to me otherwise though.",
      "I've rebased this and updated it to refer to `scoped_lock`, see https://github.com/isocpp/CppCoreGuidelines/compare/issue-762 (now merged to master and deleted).",
      "I've also pushed another commit (37d58236baa307c1d541d9d75946a1653c98468c) to fix the invalid example using `std::defer_lock` with `std::lock_guard` / `std::scoped_lock`. You don't defer the lock and then acquire it with `std::lock`, you acquire it with `std::lock` and then adopt it.",
      "Merged as the series of commits leading up to 65aa60fe1036f5e10f452aae70ec000c35ecf399 - thanks."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760c18912b45d369943d",
    "number": 761,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #761 from pepsiman/patch-2\n\nCorrect spelling of nullptr"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760d18912b45d369943e",
    "number": 760,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "May I ask why the change? Afaik the existing code is also valid.\n",
      "Valid, but probably not what was intended. The bad code it replaces didn't have 100 zeros followed by the integers read from stdin.\n"
    ],
    "commit_messages": [
      "Merge pull request #760 from derekxgl/patch-1\n\nP.11 call vector reserve(100) instead of vector(100)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760e18912b45d369943f",
    "number": 758,
    "body": "",
    "head_branch": "patch-22",
    "is_a_fork": true,
    "comments": [
      "Could you squash your commits?.\n",
      "Squashed.\n",
      "All braces revised (including the braces of the union and the braces of the class itself) to make them consistent with the rest of the examples.\n"
    ],
    "commit_messages": [
      "Merge pull request #758 from Eliyahu-Ravuna/patch-22\n\nShort string optimization example for C.180"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620760f18912b45d3699440",
    "number": 756,
    "body": "Revert d9562f683d4cbefd5c8b5ab356ab3de6bcc35baf and part of 9590bb94b10ee78439589b658c6fdfa6234bd6ed\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [
      "Thank you!\n"
    ],
    "commit_messages": [
      "Merge pull request #756 from pepsiman/patch-1\n\nP.5 Correct case of Int alias"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761018912b45d3699441",
    "number": 755,
    "body": "",
    "head_branch": "executionpolicy",
    "is_a_fork": true,
    "comments": [
      "Thank you!\n"
    ],
    "commit_messages": [
      "Merge pull request #755 from pepsiman/executionpolicy\n\nP.3 Split execution policy and container"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761118912b45d3699442",
    "number": 754,
    "body": "CP.110 renamed as \"Do not write your own double-checked locking\".\nExplanation and two examples added.\n",
    "head_branch": "patch-21",
    "is_a_fork": true,
    "comments": [
      "Just as a comment: I'm not an expert on this, but IIRC there are other usecases for double-checked locking than just threadsafe initialization (Fedor talks about this towards the end of this talk at [cppcon 2015](https://www.youtube.com/watch?v=1obZeHnAwz4)). So thread safe statics or `std::call_once` might not always be the solution. \n\nWhether those cases are relevant for the wider audience I cannot say.\n",
      "Hi Mike, You are right. Double-checked locking may be very useful in lock-free programming. I added this case as an exception, but with a disclaimer: \"**See the rule CP.100: Don't use lock-free programming unless you absolutely have to**\".\n",
      "I squashed the original commit with the one that incorporates Mike's feedbacks.\n",
      "Another thought: Maybe this should be two distinct rules:\n- Don't use double checked locking for threadsafe initialization \n- If you really need double-checked locking use a conventional pattern\n",
      "It looks much better when they are two distinct rules.\nCommits squashed.\n",
      "Thank you! We like this content. \n\nIn future, please don't change the anchors. We merged this PR to get the content and will fix the anchors by hand. \n"
    ],
    "commit_messages": [
      "Merge pull request #754 from Eliyahu-Ravuna/patch-21\n\nCP.110 & CP.111: Double-checked locking"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761218912b45d3699443",
    "number": 752,
    "body": "> Rules with no enforcement are unmanageable for large code bases.\n\nAn unenforceable rule isn't, by definition, a rule. I believe it meant to be rules without mechanical enforcement.\n\n> Enforcement of all rules is possible only for a small weak set of rules or for a specific user community.\n\nThe first part of the disjunction doesn't make sense. It has the problem mentioned above, and also mentions that \"all is only a part\". Thus, I divided it and applied the same fix as above to the first part.\n",
    "head_branch": "introduction_wording",
    "is_a_fork": true,
    "comments": [
      "Thank you for the suggestion. This might have been better raised as an Issue.\n\nThe rule as it stands is precise. You can only have  strong enforcement if the rules are weak or if you have a specific community.\n",
      "You're right. Having read it again, it makes sense.\n\nThanks for the feedback.\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761318912b45d3699444",
    "number": 751,
    "body": "We use letters to identify the first part of a rule \"number\", not just one letter.\nThe rest are grammar fixes.\n",
    "head_branch": "introduction_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #751 from johelegp/introduction_fixes\n\nIn: Grammar and correction fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761418912b45d3699445",
    "number": 746,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #746 from blackjack/master\n\nRemove mode string from ifstream constructor in R.12"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761618912b45d3699446",
    "number": 745,
    "body": "### NL.7: Make the length of a name roughly proportional to the length of its scope\n\n`https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rl-name-length`\n\nExample: `sqrt double(double x);   // return the square root of x; x must be non-negative`, changed to `double sqrt(double x);   // return the square root of x; x must be non-negative`\n\nThis fixes the `master` branch, while #744 fixed it in `gh-pages`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "Yes, as you wrote, needs to be merged to master too.\n"
    ],
    "commit_messages": [
      "Merge pull request #745 from kks32/master\n\nFixes wrong order of type and function name in naming scheme - master branch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761718912b45d3699447",
    "number": 744,
    "body": "### NL.7: Make the length of a name roughly proportional to the length of its scope\n\n`https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rl-name-length`\n\nExample: `sqrt double(double x);   // return the square root of x; x must be non-negative`, changed to `double sqrt(double x);   // return the square root of x; x must be non-negative`\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #744 from kks32/gh-pages\n\nFixes incorrect order of type and function name in the naming scheme example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761818912b45d3699448",
    "number": 743,
    "body": "",
    "head_branch": "glossary_fixes",
    "is_a_fork": true,
    "comments": [
      "Hmm, what is the actual change here?\n",
      "To put \"regular expression\" in the correct lexicographical order of the entries in the glossary.\n"
    ],
    "commit_messages": [
      "Merge pull request #743 from johelegp/glossary_fixes\n\nCorrect glossary entry order"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761918912b45d3699449",
    "number": 740,
    "body": "Abstract class: A class isn't abstract for having a protected constructor, but for only having protected constructors.\nGlobal variable: Make grammar consistent.\nMutable: Said to be the opposite of variable instead of invariable.\n",
    "head_branch": "glossary_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #740 from johelegp/glossary_fixes\n\nFix glossary definitions and grammar"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761a18912b45d369944a",
    "number": 737,
    "body": "Clang Tidy has a a check called (modernize-use-override) that explicitly verifies that `override` be placed on destructors of derived classes whose base class is `virtual` as seen [here](https://github.com/Microsoft/clang-tools-extra/blob/master/test/clang-tidy/modernize-use-override.cpp#L48). This issue was brought up by @jaredgrubb in the following [ticket](https://github.com/isocpp/CppCoreGuidelines/issues/721#issuecomment-246627077) and was also seen [here](https://github.com/Bareflank/hypervisor/issues/208) as well. @gdr-at-ms closed the ticket stating that the C++ Core Guideline Editors have decided that `override` should not be placed on destructors, but the documentation makes no mention of this decision. The following PR addresses this issue. With the documentation updated, an issue ticket can be generated for Clang Tidy to have the destructor check modified to reflect the C++ Core Guidance.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #737 from rianquinn/patch-1\n\nUpdate C.128 to remove override from destructors"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761b18912b45d369944b",
    "number": 736,
    "body": "@AndrewPardoe : thanks for merging all. A git conflict slipped in. this PR removes it.\n",
    "head_branch": "git-conflict",
    "is_a_fork": true,
    "comments": [
      "Thanks for maintaining this!\n"
    ],
    "commit_messages": [
      "Merge pull request #736 from tkruse/git-conflict\n\nRemove merged git conflict"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761c18912b45d369944c",
    "number": 732,
    "body": "Sorry, there were other issues I had overlooked.\n",
    "head_branch": "fix-t.65",
    "is_a_fork": true,
    "comments": [
      "Thank you for the suggestion! This code is either fine as it is, or we should use the Concept name. We shouldn't do something custom. I'll create an issue for this. \n\nThanks for finding the bug! \n",
      "I'm not sure I understand why the patch was not installed but the merge request closed.  The current document is still buggy in many regards, addressed by my changes.  Concepts can be an improvement, sure, but meanwhile, something correct seems useful.\n\nBTW, elsewhere `typename` seems preferred to `class` for type parameters.  I stayed with `class` to be consistent with the original author, but that might have been the wrong choice.\n",
      "I think it was recognized that you found a genuine bug and that will be fixed.  However the abbreviation `IterIn` was not considered a good change.  The editors preferred either retaining the existing parameter name or use full concept names as has been the practice over the last two decades or so.\n",
      "Hi Gabriel.  Thanks for the clarification.\n\nIn the rest of the document `Iter` is often used together with a `require` to specify the nature of `Iter`.  So I guess with could have `Iter1` which models the `Input_iterator` concept and `Iter2` for `Output_iterator`, but we probably should not use `InputIterator` and `OutputIterator` for the template parameters, as it really looks like the names of the concept.  Yet `Iter1` and `Iter2` are really not sexy.\n\nFWIW, Andrew Sutton used `I` and `O` in his implementation (https://github.com/asutton/origin/blob/master/origin/algorithm/copy.hpp).\n\nCppReference use `InputIt` and `OutputIt` (http://en.cppreference.com/w/cpp/algorithm/copy).\n\nI thought I saw somewhere a draft of the C++ standard's section about the library updated with concepts, but cannot put the hand on it.  I would have liked to see the naming convention used there.\n",
      "> I thought I saw somewhere a draft of the C++ standard's section about the library updated with concepts, but cannot put the hand on it. I would have liked to see the naming convention used there.\n\nDo you mean?\nhttp://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4569.pdf\n\nAlso worth a look: https://github.com/CaseyCarter/cmcstl2\n",
      "@maikel Thanks.  I was not thinking about that precise documentation, I thought there was a companion draft to the report that adds concepts to the language that was about the changes in the library to support concepts.\n\nIn the document you mention, Eric uses `I` and `O`.  However, note that the concepts are `InputIterator` and `OutputIterator`, not `Input_iterator` and `Output_iterator`.  Who is right?  See for example [alg.copy], p.154 (25.3.1).\n\n``` c++\ntemplate<InputIterator I, Sentinel<I> S, WeaklyIncrementable O>\n  requires IndirectlyCopyable<I, O>()\n  tagged_pair<tag::in(I), tag::out(O)>\n    copy(I first, S last, O result);\n```\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761d18912b45d369944d",
    "number": 731,
    "body": "Straightforward fixes.\n",
    "head_branch": "fix-t.65",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #731 from akimd/fix-t.65\n\nT.65: fix code examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761e18912b45d369944e",
    "number": 730,
    "body": "",
    "head_branch": "spelling",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #730 from olafdietsche/spelling\n\nMinor spelling fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620761f18912b45d369944f",
    "number": 729,
    "body": "much better speed (6s instead of 1minute), fixed output in corner cases\n",
    "head_branch": "python-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "minor improvement, strip newlines from end of code snippets"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620762018912b45d3699450",
    "number": 728,
    "body": "Changed names of function declarations.\nFixed spelling: temparature -> temperature\n",
    "head_branch": "issue_cp_3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #728 from olafdietsche/issue_cp_3\n\nCP.3: Fix example: function declarations"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762118912b45d3699451",
    "number": 726,
    "body": "",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [
      "@gdr-at-ms this PR makes Travis pass again, at long last.\n"
    ],
    "commit_messages": [
      "Merge pull request #726 from tkruse/fix-typos\n\nFix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762218912b45d3699452",
    "number": 724,
    "body": "The previous merge inserted the whitespaces at the wrong positions\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [
      "+1, my bad.\n"
    ],
    "commit_messages": [
      "Merge pull request #724 from fmorgner/master\n\nMove whitespace to right place"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762318912b45d3699453",
    "number": 722,
    "body": "Hi, I believe when switching from \n\n```\n*Exception*\n```\n\nto\n\n```\n#### Exception\n```\n\nA mistake was made in 4d7b1d7.\n\nSee the part of the diff:\n\n```\n@@ -11283,7 +11330,7 @@ There are several ways that this example could be made safe for a multi-threaded\n * Refuse to build and/or run in a multi-threaded environment.\n * Provide two implementations, one which is used in single-threaded environments and another which is used in multi-threaded environments.\n\n-**Exception**: Code that is never run in a multi-threaded environment.\n+ Code that is never run in a multi-threaded environment.\n```\n",
    "head_branch": "fix-text",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #722 from tkruse/fix-text\n\nFix text mistake"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762418912b45d3699454",
    "number": 720,
    "body": "This also includes parse_expectations.cpp which describes the format used to specify expectations.\n",
    "head_branch": "initial_tests",
    "is_a_fork": true,
    "comments": [
      "@sergiyor So the idea here is to propose a set of test cases for the enforcement of each rule and a simple format for describing the results that are expected from a tool that wants to enforce that rule. At least, for each rule that is deterministically enforceable.\n\nAm I right?\n",
      "@neilmacintosh Yes, you are right. \n",
      "@mgehre would you have time to take a look at this PR and see if is something that clang-tidy developers working on supporting the core guidelines might also find useful? Feel free to loop in anyone else you think would be relevant.\n",
      "@jwakely: Could you please review this as well?\n",
      "@jwakely we would love any GCC-informed feedback on the suggested approach here as well.\n",
      "We are going to create a separate repository for these tests and the `parse_expectations` tool. These tests are currently used to validate CppCoreCheck, so it is useful to ensure they are recognized as separate from the Guidelines. However, any other tool vendors are welcome to join us in using them and contributing to them."
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762518912b45d3699455",
    "number": 719,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #719 from VeXocide/patch-1\n\nFixes the NL.26 link."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762618912b45d3699456",
    "number": 717,
    "body": "As per #668, fixing order of declarations in example to match NL.16.\n",
    "head_branch": "neilmacintosh-patch-1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [
      "Fix order of declarations inside example\n\nFixes #668."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762818912b45d3699457",
    "number": 715,
    "body": "",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #715 from tkruse/fix-typos\n\nfix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762918912b45d3699458",
    "number": 710,
    "body": "@AndrewPardoe : This PR is against gh-pages, it wont affect the master branch (github should say  somewhere at the top \"wants to merge into isocpp:gh-pages\").\n\nThe changes are:\n- on github.io, the code did not use monospace (shame on me)\n- Un-highlighting did not work\n- upgrade all dependency versions\n- minor improvements to Browser-printing\n\nUntil you merge, you can preview the difference on my fork:\nhttp://tkruse.github.io/CppCoreGuidelines/CppCoreGuidelines.html\n",
    "head_branch": "gh-pages",
    "is_a_fork": true,
    "comments": [
      "With regards to the IO page I trust you blindly and completely. Thank you!\n"
    ],
    "commit_messages": [
      "Merge pull request #710 from tkruse/gh-pages\n\nseveral fixes / minor improvements to github.io view of guidelines"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762a18912b45d3699459",
    "number": 709,
    "body": "",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #709 from tkruse/fix-typos\n\nFix typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762b18912b45d369945a",
    "number": 708,
    "body": "Bad indentation is visible in the rendered document.\n\nI could make this part of the cpplint checks, but sadly cpplint insists that within a class declaration, the visibility keywords should be indented by 1 space (driven by the google C++ styleguide). If that were okay as style for the Core Guidelines, I could create a PR with that change.\n",
    "head_branch": "fix-code-indentation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #708 from tkruse/fix-code-indentation\n\nstyle: fix code indentation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762c18912b45d369945b",
    "number": 707,
    "body": "Now, allowing the [build/c++11] and [build/class] cpplint categories does not find issues anymore, so I see no reason to ignore these categories in the travis checks.\n",
    "head_branch": "stricter-cpplint-checks",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #707 from tkruse/stricter-cpplint-checks\n\nstricter cpplint checks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762d18912b45d369945c",
    "number": 706,
    "body": "fix minor issues in examples I detected by trying to compile the samples\n",
    "head_branch": "fix-examples2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #706 from tkruse/fix-examples2\n\nFix examples2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762e18912b45d369945d",
    "number": 705,
    "body": "Somehow my changes in 2333364 do not work (check never fails), so basically reverting that.\n",
    "head_branch": "fix-spellchecks",
    "is_a_fork": true,
    "comments": [
      "Also added a commit that greatly improves the speed of the cpplint checks, merely by doing everything in python, instead of calling python for each of the 800 c++ snippets from the guidelines. That reduces check time from 1 minute to 6 seconds.\n\nIf you want this PR to be in smaller chunks or otherwise modified, just say so.\n",
      "Removed that commit and put into #729 with other code changes to the python script, hopefully that helps you\n"
    ],
    "commit_messages": [
      "Merge pull request #705 from tkruse/fix-spellchecks\n\nFix markdown checks and spell checks"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620762f18912b45d369945e",
    "number": 703,
    "body": "As written, the type for \"Hamlet\" without the `s` suffix will be deduced to `const char*` instead of the intended `std::string`, see example earlier for auto deduced `std::string` for \"Ophelia\"s with the `s` suffix.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #703 from amdn/master\n\nT.44: Added `s` suffix to string literal"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763018912b45d369945f",
    "number": 700,
    "body": "Not sure if initializer_list is what the authors intended, but this way compiles.\n",
    "head_branch": "fix-examples",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #700 from tkruse/fix-examples\n\nfix code examples"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763118912b45d3699460",
    "number": 698,
    "body": "",
    "head_branch": "fix/hunspell-blog",
    "is_a_fork": true,
    "comments": [
      "works without for me and travis, depends on system dictionary I guess. Anyway, added \"blog\" to my PR #696, just in case.\n",
      "was merged as b6ab4ed066, this PR can be closed\n"
    ],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763218912b45d3699461",
    "number": 696,
    "body": "several small fixes\n",
    "head_branch": "style-fixes",
    "is_a_fork": true,
    "comments": [
      "I moved out commits to separate PRs (#705, #707, #708, ), I think you prefer many small PRs over big PRs.\n",
      "@gdr-at-ms : Is there anything I can do to help get this PR merged? I can remove any part that seems controversial and move it to a separate PR.\n\nJust asking because typo-PRs get fixed quickly, and this one does not do much more.\n"
    ],
    "commit_messages": [
      "Merge pull request #696 from tkruse/style-fixes\n\nStyle fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763318912b45d3699462",
    "number": 695,
    "body": "",
    "head_branch": "fix-google-link",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #695 from tkruse/fix-google-link\n\nGoogle styleguide now lives on github"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763418912b45d3699463",
    "number": 694,
    "body": "@AndrewPardoe, thanks for all the merges, a few conflicts were badly merged, this cleans them up\n",
    "head_branch": "merge-leftovers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #694 from tkruse/merge-leftovers\n\nBad Merge leftovers"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763518912b45d3699464",
    "number": 689,
    "body": "A quick inspection with 'aspell -l en_US'.\n",
    "head_branch": "correct_some_typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #689 from ascherer/correct_some_typos\n\nCorrect a few typos."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763618912b45d3699465",
    "number": 685,
    "body": "Adding a description and justification for the single return non-rule.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763718912b45d3699466",
    "number": 683,
    "body": "- NL.8 says to use consistent naming style\n- Stroustrup style mentioned suggests Capital for custom classes.\n\nThe current Core guidelines are not consistent in that respect, also sometimes inconsistent between sample code and explaining test. This PR fixes many such inconsistencies.\n",
    "head_branch": "fix-style-classname",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "R.1 example: change names according to NL.8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763818912b45d3699467",
    "number": 681,
    "body": "mergeable PR aggregating #657, #651, #650, keeping original author metadata\n",
    "head_branch": "rebased-typo-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #681 from tkruse/rebased-typo-fixes\n\nRebased typo fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763918912b45d3699468",
    "number": 680,
    "body": "Since #656 takes a long time to merge, here I extracted only the style changes to the Coreguidelines file.\n\nNote that merging #656 soon would still be useful in covering all code snippets, and improve markdown validation\n",
    "head_branch": "fix-style",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #680 from tkruse/fix-style\n\nstyle fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763a18912b45d3699469",
    "number": 679,
    "body": "Given that #607 takes a long time to be merged, this PR contains only the typo fixes, so maybe that can be merged quicker, and save other people the trouble of manually doing what spellcheckers were made for.\n",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #679 from tkruse/fix-typos\n\nFix many typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763b18912b45d369946a",
    "number": 678,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #678 from alex-weej/patch-3\n\nTypos in NL.7"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763c18912b45d369946b",
    "number": 677,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #677 from alex-weej/patch-2\n\nTypo \"intelligible\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763d18912b45d369946c",
    "number": 672,
    "body": "",
    "head_branch": "fix-typo-in-readme",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #672 from ascherer/fix-typo-in-readme\n\nMinor improvements for README.md."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620763f18912b45d369946d",
    "number": 671,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #671 from ypyf/master\n\nfixed typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764018912b45d369946e",
    "number": 667,
    "body": "Those duplicates sneaked in due to a bug in my checks for duplicate anchors, sorry.\n\nI am dispassionate about the deduplication anchor naming.\n",
    "head_branch": "fix-unique-anchors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix duplicate/wrong anchors. Fix Makefile uniq check for anchors, must sort"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764118912b45d369946f",
    "number": 666,
    "body": "example code looks bad to me.\n",
    "head_branch": "dodgy-code",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #666 from tkruse/dodgy-code\n\nMinor dodgy code issues"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764218912b45d3699470",
    "number": 661,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #661 from pschella/master\n\nFix link"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764318912b45d3699471",
    "number": 659,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #659 from lekv/patch-1\n\nFix typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764418912b45d3699472",
    "number": 657,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764518912b45d3699473",
    "number": 656,
    "body": "Just staying up-to-date.\npypi cpplint copied latest from https://github.com/theandrewdavis/cpplint/commits/master.\n",
    "head_branch": "upgrade-checkers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Refactor remark plugin configuration into package.json, add link validation"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764618912b45d3699474",
    "number": 654,
    "body": "especially for this example :-)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764718912b45d3699475",
    "number": 652,
    "body": "This rule is about indentation, and conflicts with choices offered in NL.8\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764818912b45d3699476",
    "number": 651,
    "body": "Fixed typo shuld -> should and incorrect/incomplete sentence\n\nBased on the context I assumed \"the top\" was meant in this non-rule.\n",
    "head_branch": "fixed_shuld_typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #651 from robindegen/fixed_shuld_typo\n\nFixed typo shuld -> should and incorrect/incomplete sentence"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764918912b45d3699477",
    "number": 650,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764a18912b45d3699478",
    "number": 649,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix a few typos"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764b18912b45d3699479",
    "number": 648,
    "body": "fixing multiple Travis CI issues from the recent commits (and a couple typos)\n",
    "head_branch": "travis-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #648 from cubbimew/travis-fixes\n\nfix Travis CI issues caused by recent direct commits"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764c18912b45d369947a",
    "number": 647,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764d18912b45d369947b",
    "number": 646,
    "body": "Ironically enough, the \"bad example\" is in fact a poor example. The `+` and `+=` expressions which the concepts supposedly constrain operate on a `T` and an `A`, but the concepts are only parameterized over a single type. Replacing 'A' with 'T' here results in a clearer example with no distractions.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764e18912b45d369947c",
    "number": 644,
    "body": "This fixes Travis CI failure \"Lines should be <= 100 characters long  [whitespace/line_length] [2]\" by reverting commit c2f54b5ed1cd72523ccdf454e013e2b7df177955.\n\nBesides, \"static array\" is not a thing\n",
    "head_branch": "fix_travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #644 from cubbimew/fix_travis\n\nFix Travis CI by reverting \"Better comment for implicit conversion example\""
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620764f18912b45d369947d",
    "number": 643,
    "body": "Use square brackets, not curlies, for structured binding.\nAlso, this example is a perfect fit for the new if statement syntax.\n",
    "head_branch": "F21_vS_cpp17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #643 from cubbimew/F21_vS_cpp17\n\nF.21 updated C++17 example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765018912b45d369947e",
    "number": 642,
    "body": "I presume the following fixes were typos and not intended.\n",
    "head_branch": "SL.50fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #642 from galik/SL.50fix-typos\n\nFix typos in SL.50"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765118912b45d369947f",
    "number": 639,
    "body": "C.87 only states that naive approaches would not work but had no example to show a proper implementation. I added an example in this PR.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765218912b45d3699480",
    "number": 636,
    "body": null,
    "head_branch": "fix-cpporg-url",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #636 from jhh/fix-cpporg-url\n\nFix the URL to isocpp.org."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765318912b45d3699481",
    "number": 635,
    "body": "I believe the intention is to call `constexpr span(T (&arr)[N])`, not the copy c-tor in this example.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #635 from grzebiel/master\n\nuse proper argument for creation of span from array"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765418912b45d3699482",
    "number": 631,
    "body": "This should address the error spotted in #630. In addition, example in ES.100 was both outdated and not illustrating the guideline; moved to ES.102. New realistic ES.100 example added.\n",
    "head_branch": "issue630",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765518912b45d3699483",
    "number": 625,
    "body": "This PR adds an example for ES.34\n",
    "head_branch": "example-update",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #625 from GlassAndOneHalf/example-update\n\nIssue #624 ES.34 Add Example."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765718912b45d3699484",
    "number": 622,
    "body": "recursive mutexes don't solve the problem of deadlocking via holding a lock and calling unknown code.\n\nSo I've attempted a (poor, first try, strawman,...) rewrite.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765818912b45d3699485",
    "number": 619,
    "body": "As discussed in issue #616, constexpr functions can throw exceptions just like normal functions when evaluated during runtime.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765918912b45d3699486",
    "number": 618,
    "body": "Removing the redunancy of repeating the type and size for the span.  See issue #617.\n",
    "head_branch": "CP.2_617",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #618 from tlanc007/CP.2_617\n\nCP.2_617: Changed variable s to a tigher form of span."
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765a18912b45d3699487",
    "number": 613,
    "body": "Did not change the owner<T> to owner<T*> in the Enforcement section.  \nThe document is littered with  owner<T> references in the text.  So assuming this \nis the intended style guideline for now.\n",
    "head_branch": "C.33_610",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #613 from tlanc007/C.33_610\n\nC.33_610: changed owner<T>* to owner<T*> per issue 610"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765b18912b45d3699488",
    "number": 612,
    "body": "In guideline R.3: changed owner<T> references to owner<T*> described in issue #609.\n",
    "head_branch": "R.3_609",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #612 from tlanc007/R.3_609\n\nR.3_609: changed owner<T> to owner<T*> in R.3 per issue #609"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765c18912b45d3699489",
    "number": 607,
    "body": "This installs hunspell on travis and runs a spell-checker against all test and code comments (marked with //).\n\nNote I am not a professor of English literature (or even native English speaker), so the dictionary of words not to be warned about may be flawed.\n\nThe travis build should fail initially with a report of failures, so probably it's best if you do not merge immediately, but wait until I add a commit with the spelling fixes. (I let this fail first so we can have a look at travis output).\n",
    "head_branch": "hunspell",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Cleanup travis file (reference check already done in Makefile)"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765d18912b45d369948a",
    "number": 605,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #605 from anthonywilliams/master\n\nFix some typos in the concurrency section"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765e18912b45d369948b",
    "number": 603,
    "body": "replaced end with size\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #603 from royalbee/patch-1\n\nES.7 fix mixed index / iterator loop condition"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620765f18912b45d369948c",
    "number": 601,
    "body": "updating FAQ.55 as proposed in #583 \n",
    "head_branch": "issue583",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #601 from cubbimew/issue583\n\nupdate FAQ.55"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766018912b45d369948d",
    "number": 600,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766118912b45d369948e",
    "number": 599,
    "body": "",
    "head_branch": "fix-code-whitespace",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #599 from tkruse/fix-code-whitespace\n\nfix cpplint style warnings"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766218912b45d369948f",
    "number": 598,
    "body": "this should get travis green again\n",
    "head_branch": "fix-bad-chars2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #598 from tkruse/fix-bad-chars2\n\nfix slanted quotes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766318912b45d3699490",
    "number": 597,
    "body": "Hi,\n\nthis PR will split the core guidelines files into snippets, to be able to run further tools on these snippets to ensure quality.\n\nAs a first step, I added a cpplint to this PR, which travis will perform.\ncpplint originates at Google (https://github.com/google/styleguide) but is not really maintained there anymore. It's a very bad linter based on regular expressions (meaning several false positives and negatives can easily be produced forcefully), a very far shot from Facebooks Infer. But it's small and lightweight, and get's things right 90% of the time.\n\nAnyway, I have been using it in the past to make PRs to improve code style here, and I think by now it should be possible to include it in the travis build. It should fail for this PR right now, because of the latest code example additions, but that suits me fine, that way you can judge whether you'd lke to have such a tool in the Pull request validation or not.\n\nTo run locally, the only dependency it adds to running `make` is to have a python installed (2 or 3).\n",
    "head_branch": "add-cpplint",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #597 from tkruse/add-cpplint\n\nadd ability to split md into code snippets, check with cpplint"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": true
  },
  {
    "_id": "6620766418912b45d3699491",
    "number": 596,
    "body": "fixes markdown style issues introduced with the latest commits.\nTaken from #570 \n",
    "head_branch": "style-fix27",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #596 from tkruse/style-fix27\n\nStyle fix27"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766518912b45d3699492",
    "number": 595,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix bounds.3 example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766618912b45d3699493",
    "number": 594,
    "body": "Shortening the code lines is important for several alternative kinds of display (PDF, print, mobile phone), because long code lines either crosses some right margin, or code is wrapped like text which is horrible to read.\n\nMaybe an 80 chars limit would be even better, but choosing a slightly smaller font should give acceptable results as well.\n",
    "head_branch": "fix-linelength",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix whitespace around operator"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766718912b45d3699494",
    "number": 593,
    "body": "",
    "head_branch": "span-c-style-traversal-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #593 from ubique/span-c-style-traversal-example\n\nFix span C-style traversal example"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766818912b45d3699495",
    "number": 591,
    "body": "This includes and supercedes #340, it also adds checks to the makefle used by travis so that these undesired chars do not creep back in.\n",
    "head_branch": "check-badchars",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Fix further typographic mistakes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766918912b45d3699496",
    "number": 589,
    "body": "Fix warnings on travis builds. After merging this, rebasing all PRs should trigger travis, and failed travis builds should be fixed.\n",
    "head_branch": "remark-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #589 from tkruse/remark-fix\n\nRemark fix"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766b18912b45d3699497",
    "number": 588,
    "body": "",
    "head_branch": "fix-library-pull",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766c18912b45d3699498",
    "number": 587,
    "body": "",
    "head_branch": "style-fix26",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Consistently use simple function name for meaningless functions"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766d18912b45d3699499",
    "number": 586,
    "body": "mostly fixes whitespace issues found by running cpplint checker on code samples\n",
    "head_branch": "style-fix25",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #586 from tkruse/style-fix25\n\nStyle fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766e18912b45d369949a",
    "number": 584,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #584 from d3faultdotxbe/master\n\nFix tiny typo in CP.2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620766f18912b45d369949b",
    "number": 582,
    "body": "This is an update of https://github.com/isocpp/CppCoreGuidelines/pull/564 based on the comments there. The only difference with respect to that is that I removed all questioned changes.\n\nSeveral small edits, not trying to change the meaning.\n\nTrying to make the text more inclusive. For example, few can write a completely correct make_unique. \"supercalifragilisticexpialidocious\" is funny but distracting.\n",
    "head_branch": "friendly_language_2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767018912b45d369949c",
    "number": 581,
    "body": "Must be\n\n```\nint* p = new int[12];\ndelete[] p;\n```\n",
    "head_branch": "kpp-new-delete-mistatch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #581 from kpp/kpp-new-delete-mistatch\n\nnew[] delete[] mismatch"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767118912b45d369949d",
    "number": 575,
    "body": "Fixes detected by using remark. Except for the ones fixing backticks, the changes made have no impact on the rendered html.\n",
    "head_branch": "style-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #575 from tkruse/style-fixes\n\nStyle fixes"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767218912b45d369949e",
    "number": 572,
    "body": "The example casted a pointer between to a more strict aligned type which is undefined behaviour . \nSo i changed the example to use structs instead of primitives. This forces the compiler to allign the data structure and thus makes it valid C. \n\nhttps://github.com/isocpp/CppCoreGuidelines/issues/542\n\nhttps://www.securecoding.cert.org/confluence/display/c/EXP36-C.+Do+not+cast+pointers+into+more+strictly+aligned+pointer+types\n",
    "head_branch": "fix_c_example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767318912b45d369949f",
    "number": 570,
    "body": "I have programmed in C for 6 months on very limited embedded system (8bit 4k memory) and i used unions regularly. \nI used unions for two reasons:\n-The reuse of static memory for a shared I/O buffer\n-Type punning to deliberately violate the type system. To avoid a copy. Otherwise this required undefined behaviour like casting a pointer to a different type. \nSo i have added it to the guide but its only useful for limited systems and should only be used there, \n(it might be a better idea to say its only for embedded C/C++)\n\nSo I added it to show what the best practices are with unions. However they are should be avoided anyway. \n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767418912b45d36994a0",
    "number": 564,
    "body": "Several small edits, not trying to change the meaning.\n- Trying to make the text more inclusive. For example, few can write a completely correct make_unique. \"supercalifragilisticexpialidocious\" is funny but distracting.\n- Trying to turn negative statements into positive ones. Examples.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767518912b45d36994a1",
    "number": 563,
    "body": "The entry point for many is README.md. I tried to make it more friendly by adding sections and links to the actual guideline text.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #563 from jmlundberg/master\n\nAdd links to GSL, structure to README.md"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767618912b45d36994a2",
    "number": 562,
    "body": "",
    "head_branch": "I.5-Enforcement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767718912b45d36994a3",
    "number": 561,
    "body": "Sumething -> Something\n",
    "head_branch": "P.10-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #561 from jmihalicza/P.10-typo\n\nP.10 typo"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767918912b45d36994a4",
    "number": 560,
    "body": "stared_ptr -> shared_ptr\n",
    "head_branch": "stared",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #560 from scpeters/stared\n\nCppCoreGuidelines.md spelling error"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767a18912b45d36994a5",
    "number": 559,
    "body": "could use an epsilon, but that just distracts from the point of the example, so changed double to int instead\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767b18912b45d36994a6",
    "number": 558,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767c18912b45d36994a7",
    "number": 552,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767d18912b45d36994a8",
    "number": 551,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767e18912b45d36994a9",
    "number": 546,
    "body": "really should be +/- epsilon, or change double to int\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620767f18912b45d36994aa",
    "number": 543,
    "body": "In order to let Russian C++ developers have access to the Guidelines\nthis translation has been started.\n",
    "head_branch": "translation",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768018912b45d36994ab",
    "number": 537,
    "body": "Code examples for \n\n> F.18: For \"consume\" parameters, pass by `X&&` and `std::move` the parameter\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768118912b45d36994ac",
    "number": 536,
    "body": "expecially => especially (This is expecially important for)\ndeafault => default (This is what a deafault == would do)\nAnd `==` marked-down as code.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768218912b45d36994ad",
    "number": 535,
    "body": "",
    "head_branch": "hotfix/contrib-updates",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768318912b45d36994ae",
    "number": 534,
    "body": "spelling fixes\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768418912b45d36994af",
    "number": 531,
    "body": "",
    "head_branch": "per-opt",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768518912b45d36994b0",
    "number": 530,
    "body": "Regarding issue 491\n",
    "head_branch": "es-casts",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768618912b45d36994b1",
    "number": 528,
    "body": "",
    "head_branch": "per-editorial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768718912b45d36994b2",
    "number": 521,
    "body": "",
    "head_branch": "Minor-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768818912b45d36994b3",
    "number": 520,
    "body": "",
    "head_branch": "F.53",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768918912b45d36994b4",
    "number": 519,
    "body": "expecially => especially (This is expecially important for)\ndeafault => default (This is what a deafault == would do)\nAnd `==` marked-up as code.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768a18912b45d36994b5",
    "number": 517,
    "body": "transfering => transferring (ownership transfering APIs)\nprefent => prevent (to prefent range errors)\nstandarization => standardization (active discussion in standarization)\neffectivily => effectively (This effectivily means)\ndeclarate => declared (Flag classes declarate with `struct`)\nMimimize => Minimize (Mimimize the chance of untended access.)\nThe The => The (The The standard-library containers)\ncontaiers => containers (Users of hashed contaiers)\ndefie => define (to defie a specialization)\nibrary => library (combine standard-ibrary specializations)\nspecoalists => specialists (\"cleverness\" for non-specoalists)\nyur => your (don't invent yur own names)\ndeploymenta => deployment (deploymenta and use of such tools)\nsuprises => surprises (perennial source of suprises and bugs)\nimplementating  => implementing (essential for implementating)\nmovesemantics => move semantics (movesemantics and certain rare optimizations)\nassingment => assignment (copying only part of an object using assingment)\nuser => used (type can be user for a wide variety)\nTemplatizing => Templating (Templatizing a class hierarchy)\nsourcefiles => source files (declarations used in multiple sourcefiles) [2 times]\nalternatives.These => alternatives. These (// space between sentences)\nits => it’s (the first time its called)\nLanguagesC++ => Languages — C++ ([C++03]: ISO/IEC 14882:2003(E), Programming LanguagesC++)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768b18912b45d36994b6",
    "number": 515,
    "body": "wil => will;\ndevelopemnt => development.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768c18912b45d36994b7",
    "number": 513,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768d18912b45d36994b8",
    "number": 510,
    "body": "add a missing bracket in F.24 second example\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620768f18912b45d36994b9",
    "number": 498,
    "body": "As before, hopefully non-controversial stuff, but let me know if anything should be discussed individually and I'll split it out.\n",
    "head_branch": "editorial-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 20ed3d12fd90daaab7e3482b5931796cccec567c into 8452e8ae84a627078bd4f53e270f6d9b0a52178d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769018912b45d36994ba",
    "number": 495,
    "body": "",
    "head_branch": "c.30-fix-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769118912b45d36994bb",
    "number": 490,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769218912b45d36994bc",
    "number": 487,
    "body": "If you want me to pull any of these out for separate discussion, let me know.  \n",
    "head_branch": "es-editorial",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d653d5e89c6b42b410a328981c475d05f46d6fc7 into 46f38a7917d69d6a9edccfdc48bb23866e2c7f3a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769318912b45d36994bd",
    "number": 486,
    "body": "Some small typos.\n",
    "head_branch": "fix/c168-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 97716ed28af9f7b5e025ae29d8950d03ce79560e into 84cd5df35d1828a0704b9b0bbd0a75bcdb0d7602"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769418912b45d36994be",
    "number": 483,
    "body": "In C++, (a,b) evaluates to b. This is the \"comma operator\".\n\nMost of the time the comma operator makes the code unreadable; in the worst case the comma operator is just an unintended typo in the code. There are only very few legitimate cases, such as the initialization or increase expression of for statements, where the comma operator really increases the readability of the code.\n\nSee the suggested rule.\n",
    "head_branch": "patch-23",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769518912b45d36994bf",
    "number": 482,
    "body": "",
    "head_branch": "F.44",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769618912b45d36994c0",
    "number": 481,
    "body": "This commit makes small changes and corrections to the first two sections, Intro and Wording.\n",
    "head_branch": "intro-philosophy",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769718912b45d36994c1",
    "number": 475,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 3f51ca23fac4a7d345e76a14e6c1cf0a493d4d4b into c07d9189d75dd07e5a985302d6ae75e31a73864d"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769818912b45d36994c2",
    "number": 473,
    "body": "",
    "head_branch": "C.61",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769918912b45d36994c3",
    "number": 472,
    "body": "",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769a18912b45d36994c4",
    "number": 471,
    "body": "",
    "head_branch": "C.40",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769b18912b45d36994c5",
    "number": 470,
    "body": "",
    "head_branch": "C.ctor",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769c18912b45d36994c6",
    "number": 469,
    "body": "",
    "head_branch": "C.37",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769d18912b45d36994c7",
    "number": 468,
    "body": "",
    "head_branch": "C.36",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769e18912b45d36994c8",
    "number": 467,
    "body": "several small and independent fixes split off from PR #342\n",
    "head_branch": "fixesUL",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620769f18912b45d36994c9",
    "number": 466,
    "body": "",
    "head_branch": "C.30",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a018912b45d36994ca",
    "number": 465,
    "body": "The bigger picture issue of \"What context is your code executing in?\"\nand \"What type of code are the core guidelines addressing?\" should be\nhandled separately with text in the overview.\n\n(This was discussed further in https://github.com/isocpp/CppCoreGuidelines/issues/421)\n",
    "head_branch": "f.6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a118912b45d36994cb",
    "number": 464,
    "body": "New F.47, as per https://github.com/isocpp/CppCoreGuidelines/issues/422\n",
    "head_branch": "f.47",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a218912b45d36994cc",
    "number": 463,
    "body": "As discussed in https://github.com/isocpp/CppCoreGuidelines/issues/420\n",
    "head_branch": "f.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a318912b45d36994cd",
    "number": 462,
    "body": "",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a418912b45d36994ce",
    "number": 460,
    "body": "",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c0a4d1a0875904963c9fe8c55e5d770bbb8c4872 into 1356a6d0463d90a91f68395bd369750723c62857"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a518912b45d36994cf",
    "number": 459,
    "body": "As discussed in #146, this changes the css hack to provide spacing between paragraphs.\n\nAn Alternative would be to delete that whole section in `custom.css` and have the h5 headers be above the text instead of left of it. I made this css hack initially only because the initial open-source version of the guidelines used that style:\n\n\"\n**Note** Some note txt etc.\n\"\n\nI am personally dispassionate about this style.\n\nThis PR als makes minor fixes to the sidebar navigation.\n",
    "head_branch": "gh-pages-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a618912b45d36994d0",
    "number": 458,
    "body": "It seems there are two table of contents, and in the second the given item is in the wrong place, given the actual order of sections in the document.\n",
    "head_branch": "fix-toc2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 24df4ed549035440ae760c5b88edac7101e9998c into 88502c5c271c70d0d54dcdd2ecfcbeb351ba7c3b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a718912b45d36994d1",
    "number": 457,
    "body": "was:\n### F.45\n\n...\n### F.50\n\n...\n### F.46\n\n...\n### F.51\n",
    "head_branch": "F.order",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076a818912b45d36994d2",
    "number": 456,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076aa18912b45d36994d3",
    "number": 454,
    "body": "",
    "head_branch": "F.27",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ab18912b45d36994d4",
    "number": 453,
    "body": "",
    "head_branch": "tabs",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ac18912b45d36994d5",
    "number": 452,
    "body": "",
    "head_branch": "F.16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ad18912b45d36994d6",
    "number": 451,
    "body": "Based on the example above, we have `status` of type `int` and `something()` of type `string`.\n",
    "head_branch": "F.21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ae18912b45d36994d7",
    "number": 450,
    "body": "",
    "head_branch": "F.19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076af18912b45d36994d8",
    "number": 449,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b018912b45d36994d9",
    "number": 448,
    "body": "Looks like a style that deviated at some point:\n### F.1\n\n...\n### Rule F.15\n\n...\n### F.22\n",
    "head_branch": "rule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b118912b45d36994da",
    "number": 447,
    "body": "",
    "head_branch": "F.4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b218912b45d36994db",
    "number": 446,
    "body": "While it's not the point of the guideline, an accessor function `center` and a function like `draw` should still be marked `const`.\n",
    "head_branch": "I.25",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b318912b45d36994dc",
    "number": 445,
    "body": "",
    "head_branch": "I.23",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b418912b45d36994dd",
    "number": 444,
    "body": "",
    "head_branch": "NL.5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b518912b45d36994de",
    "number": 443,
    "body": null,
    "head_branch": "H1",
    "is_a_fork": false,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b618912b45d36994df",
    "number": 441,
    "body": "",
    "head_branch": "P3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b718912b45d36994e0",
    "number": 439,
    "body": "(1) The index result of a `std::find`-like loop needs to be initialized to `-1`, otherwise it's ambiguous as to whether `index == 0` means \"first element\" or \"not found\".\n(2) We should still pass begin/end iterators to `std::find` (unless we're already using the ranges library?)\n",
    "head_branch": "P1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b818912b45d36994e1",
    "number": 438,
    "body": "More illustrative example of bad/good scenario instead of simple example.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076b918912b45d36994e2",
    "number": 435,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ba18912b45d36994e3",
    "number": 433,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076bb18912b45d36994e4",
    "number": 432,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076bc18912b45d36994e5",
    "number": 431,
    "body": " Uses a custom deleter instead so the file handle is properly closed.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076bd18912b45d36994e6",
    "number": 430,
    "body": "In this paragraph are at least three more objects that should be typeset as `code`.\n",
    "head_branch": "fix-note-on-ranges",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076be18912b45d36994e7",
    "number": 429,
    "body": "",
    "head_branch": "consistent-enforcement",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076bf18912b45d36994e8",
    "number": 428,
    "body": "There are two occurrences of 'NaN', differently typeset.\n",
    "head_branch": "typeset-NaN",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c018912b45d36994e9",
    "number": 427,
    "body": "Replace 'illegal' characters in `<a>`nchors with more neutral items.\n\nThe Markdown code is put through `pandoc -s --smart ...`\nand the resulting HTML is positively tested by the\n[W3C validator](https://validator.w3.org/#validate_by_upload).\n",
    "head_branch": "validate-html-output",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c218912b45d36994ea",
    "number": 426,
    "body": "The majority of `const`-ness have the code-word joined with a hyphen to\nits 'ness'. Make two slightly different versions consistent with this.\n",
    "head_branch": "fix-const-ness",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c318912b45d36994eb",
    "number": 425,
    "body": "",
    "head_branch": "fix-mdstyle22",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c418912b45d36994ec",
    "number": 424,
    "body": "This fixes up a poor example used in a recent PR. #176 \n\nThanks @slx7R4GDZM for catching this.\n",
    "head_branch": "no_endl",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c518912b45d36994ed",
    "number": 417,
    "body": "Many of the guidelines in here are contradictory to legacy behavior, they don't get similar notes about \"billions of lines that contradict.\"\n\n\"This code cannot all be rewritten ...\" - I actually think this is false, we (Google) have been doing a lot of large-scale refactoring, and this is pretty solidly within the realm of what I think we _could_ do.\n\nThe example of owning raw pointers in resource handles (specifically unique_ptr and shared_ptr) is pretty minor, and pretty easily handled by just not rewriting code in the standard library itself.\n\nThe ABI issue seems (as discussed elsewhere) potentially to be out of scope or misleading.\n\nTo my mind, seems best to drop the whole note.\n",
    "head_branch": "r.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c618912b45d36994ee",
    "number": 416,
    "body": "Reverting Capitalization of Red/Purple/Blue in enum class example.\n\n(Also some trailing whitespace trimming, apparently.)\n",
    "head_branch": "enum.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c718912b45d36994ef",
    "number": 415,
    "body": "As discussed in #176, `CONTRIBUTING.md` could do with some standardization of markdown style, which should help maintain a consistent style throughout the guideline document.\n\nI believe there is room for more in this section, for example:\n- Whitespace at end of line\n- Line length for text and code\n\nThis Pull Request addresses the points agreed on thus far, and re-writes some surrounding text to maintain the existing document style.\n",
    "head_branch": "pull_request_additions",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c818912b45d36994f0",
    "number": 414,
    "body": "# Issue #337 proposed these changes\n\nThe space character between `<a>`nchors and title text in headers is transfered to the rendered HTML and produces a noticable raggedness in the resulting output. In a first attempt to fix this, I moved the `<a>`nchors _after_ the title text; this works perfectly with [Pandoc](https://github.com/jgm/pandoc), but not with the Github Markdown renderer, which does some weird code duplications resulting in misplaced jump points.\n\nThis PR simply removes the offending space and produces correct output with both renderers.\n\nBTW, Pandoc 1.11 introduced [header attributes](http://pandoc.org/README.html#header-identifiers), which would greatly simplify this construct.\n",
    "head_branch": "flush-left-headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076c918912b45d36994f1",
    "number": 413,
    "body": "The space character between `<a>`nchors and title text in headers is transfered to the rendered HTML and produces a noticable raggedness in the resulting output. In a first attempt to fix this, I moved the `<a>`nchors _after_ the title text; this works perfectly with [Pandoc](https://github.com/jgm/pandoc), but not with the Github Markdown renderer, which does some weird code duplications resulting in misplaced jump points.\n\nThis PR simply removes the offending space and produces correct output with both renderers.\n\nMoreover, the Pandoc output was put into the [W3C validator](https://validator.w3.org/#validate_by_upload), which complained about illegal (unescaped) characters in several internal links. These were also replaced with legal alternatives.\n",
    "head_branch": "flush-left-headers",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ca18912b45d36994f2",
    "number": 409,
    "body": "It is usually a bad idea to share mutable object between threads, this can lead to a race condition or unnecessary thread contention. \nThis change request is intended to improve correctness of example in concurrent environment.\n",
    "head_branch": "F-27-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076cb18912b45d36994f3",
    "number": 408,
    "body": "Thank you for the feedback in #402.\nchar replaced with uint8_t.\n",
    "head_branch": "patch-20",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076cc18912b45d36994f4",
    "number": 406,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076cd18912b45d36994f5",
    "number": 405,
    "body": "Another misunderstanding: how container can be modified (side-effect in a call of `f(&v[i])` ) if we passing only an address to element, not a address to container?\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ce18912b45d36994f6",
    "number": 404,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076cf18912b45d36994f7",
    "number": 403,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d018912b45d36994f8",
    "number": 402,
    "body": "The vector was missing template arguments. Fixed.\nSee #263 for the rationale.\n",
    "head_branch": "patch-13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d118912b45d36994f9",
    "number": 400,
    "body": "Discussion: Make base class destructors public and virtual, or protected and nonvirtual\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d218912b45d36994fa",
    "number": 397,
    "body": "The existing example didn't compile (\"blue\" conflicted in both definitions, for example), and the big benefit of enum class is to avoid conversion-to-int (type safety).\n",
    "head_branch": "enum.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d318912b45d36994fb",
    "number": 396,
    "body": "Default arguments have more subtle gotchas than overloads, generally.  (I expect this might be slightly contentious).\n",
    "head_branch": "i.23",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d418912b45d36994fc",
    "number": 395,
    "body": "C++11 (and later) will synchronize on function-static object initialization, but will still allow un-joined threads to access the object after destruction during program teardown.  The better option is to heap allocat that initialization so that it isn't destructed during program shutdown, avoiding both the initialization AND shutdown races.\n",
    "head_branch": "i.3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d518912b45d36994fd",
    "number": 394,
    "body": "I'm not sure if this is redundant with the existing text \"or may only need part of the value that is more easily checked than the whole.\"  (A more aggressive change would excise that clause.)\n",
    "head_branch": "p.7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d618912b45d36994fe",
    "number": 393,
    "body": "The extension that causes us the most grief is the compiler-support for designated initializers:\nhttps://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html\n\nIt'd be good to extend this with deeper reasoning - non standard extensions don't have well-defined semantics (gcc and clang disagree on initialization semantics and ordering IIRC for designated initializers), limit portability/compatibility, etc.\n",
    "head_branch": "p.2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b3e6c82aded2c44b2962b0832a83518273770edb into fdd230366495074250c6229f0b76cde32f623237"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d718912b45d36994ff",
    "number": 392,
    "body": "As discussed: these should be relatively non-controversial.  I'll start assembling pull requests for changes that might require more detailed discussion individually.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076d918912b45d3699500",
    "number": 389,
    "body": "Fix typo, tabs, and grammar.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076da18912b45d3699501",
    "number": 387,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076db18912b45d3699502",
    "number": 386,
    "body": "## Changes to `R.12`\n- Added missing capture clause from lambda expression\n- Added missing identifier from file object declaration\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076dc18912b45d3699503",
    "number": 385,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076dd18912b45d3699504",
    "number": 384,
    "body": "T a[n]={0} is misleading because a novice programmer might think that it\n\"fills array with zeros\", and then try to write ={1} to fill array with ones.\n",
    "head_branch": "array_initializer",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076de18912b45d3699505",
    "number": 380,
    "body": "Fix F.16 (Use T\\* or owner<T*> to designate a single object) to use consistent variable name in the example provided.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f13a89539ec8960bb0722a6b74da42c5ebed280e into ccdb10b403a1e596ca145512ad947991092293ee"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076df18912b45d3699506",
    "number": 378,
    "body": "typo: \"preformance\"\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e018912b45d3699507",
    "number": 377,
    "body": "At the WG21 meeting in Kona, the Library Evolution Working Group gave helpful guidance on the `array_view` and `string_view` types from the GSL that we had proposed for standardization. Part of that guidance was preferred naming: `array_view` should become `span` and `string_view` become `string_span` (which also clearly differentiates it from the existing Library Fundamentals TS `string_view`). This change updates the Core Guidelines to reflect this guidance. The Microsoft GSL implementation has already been updated to reflect this change.\n",
    "head_branch": "dev/neilmac/rename-span",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e118912b45d3699508",
    "number": 374,
    "body": "Proposal revised as agreed in #266.\n",
    "head_branch": "patch-19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e218912b45d3699509",
    "number": 372,
    "body": "The original text has an end parenthesis at the end of a sentence, but it should be at the end of the next-to-last word to make the sentence grammatically correct.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e318912b45d369950a",
    "number": 371,
    "body": "",
    "head_branch": "es31_typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e418912b45d369950b",
    "number": 370,
    "body": "Good to keep things like this consistent and highlight the acronym\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e518912b45d369950c",
    "number": 369,
    "body": "Clarification that you only need to ensure one default constructor. If the auto-generated default constructor is enough, you don't need to define one.\n\nAlso mentions C.45, which could seem like a contradiction before as mentioned in #344.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e618912b45d369950d",
    "number": 368,
    "body": "Changed from 'memoized' to 'memorized'.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e718912b45d369950e",
    "number": 365,
    "body": "The comment in the second line below seems wrong.\n\n```\nif (a && b == 1)    // OK: means a&&(b == 1)\nif (a & b == 1) // bad: means (a&b) == 1\n```\n\nAs both `&` and `&&` has lower precedence than `==`, `a & b == 1` should mean `a&(b == 1)`. \nAfter correcting it, the original example becomes irrelevant, so I propose a different one. (a more elaborate version can be tried out [here](http://cpp.sh/6zdyj)).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e818912b45d369950f",
    "number": 361,
    "body": "Rules T.67 and T.68 are missing, but referenced. Empty stubs added.\n",
    "head_branch": "addemptyrule",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076e918912b45d3699510",
    "number": 360,
    "body": "Types changed from `initializer_int<int>` to `initializer_list<int>`.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ea18912b45d3699511",
    "number": 358,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076eb18912b45d3699512",
    "number": 355,
    "body": "I created a [question on StackOverflow](http://stackoverflow.com/q/33306553/261217) and realized there are no corresponding tags. I added the tags and want other people to use them too.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ec18912b45d3699513",
    "number": 350,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ed18912b45d3699514",
    "number": 349,
    "body": "Small typo. Was _pointer_, should be _pointed_.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ee18912b45d3699515",
    "number": 345,
    "body": "Added links to talks from Gabriel Dos Reis and Neil MacIntosh on Contracts for Dependable C++ and A few good types: Evolving `array_view` and `string_view` for safe C++ code...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f018912b45d3699516",
    "number": 343,
    "body": "I added a reason why to make member function `const` by default and a little example.\nLet me know if you agree with me :-)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f118912b45d3699517",
    "number": 342,
    "body": "During the conversion of the Markdown-markup to LaTeX-markup several issues with the structure of the document became apparent.\n",
    "head_branch": "fixstructure",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f218912b45d3699518",
    "number": 341,
    "body": "Fixing typographic glitches in the first 50 percent of the C++ Guidelines.\n",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f318912b45d3699519",
    "number": 340,
    "body": "This branch collects numerous small changes that try to improve the typographic consistency of the Guidelines. It may be necessary to cherry-pick commits into separate PRs.\n- En-dashes are set using double-hyphens (`--`), not the UTF-8 character. They are surrounded by single whitespaces\n- Double-quotes are consistently set in their “straight” form (`\"`); opening and ending double-quotes can easier be set by the markdown interpreter\n- Accents are consistently set in their ‘straight’ form (`'`), not the UTF-8 character\n\nAlthough Github’s markdown interpreter doesn’t support fine points of typography, other markdown converters are better equipped, e.g., `pandoc --smart` can be used for local, offline or dead-tree reading.\n",
    "head_branch": "consistent-typography",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f418912b45d369951a",
    "number": 338,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f518912b45d369951b",
    "number": 335,
    "body": "I think that this is easier to read.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f618912b45d369951c",
    "number": 334,
    "body": "After the first two large commits, I try to add smaller changes. :innocent:\n",
    "head_branch": "fix-typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f718912b45d369951d",
    "number": 333,
    "body": "Several minor issues with the markup were discovered when converting the Markdown-markup to LaTeX-markup. The commits on this branch correct the issues.\n",
    "head_branch": "fixmarkup",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f818912b45d369951e",
    "number": 328,
    "body": "",
    "head_branch": "highlighting",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076f918912b45d369951f",
    "number": 327,
    "body": "Several issues with the cross-references were discovered when converting the Markdown-markup to LaTeX-markup. The commits on this branch correct the issues.\n",
    "head_branch": "fixcrossref",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076fa18912b45d3699520",
    "number": 326,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076fb18912b45d3699521",
    "number": 324,
    "body": "Added Gabriel Dos Reis' talk on Large Scale C++ With Modules: What You Should Know...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076fc18912b45d3699522",
    "number": 322,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076fe18912b45d3699523",
    "number": 319,
    "body": "fix #291 and fix #184.\n\nI pretty-formatted example and preserved commit authorship\n",
    "head_branch": "pr/291",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662076ff18912b45d3699524",
    "number": 318,
    "body": "",
    "head_branch": "fix-mdstyle-21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770018912b45d3699525",
    "number": 317,
    "body": "",
    "head_branch": "patch-18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770118912b45d3699526",
    "number": 315,
    "body": "The comment in this example says \"Int is an alias used for integers\". If `Int` has signed type then shifts will eventually make variable `i` negative and the next shift will invoke undefined behavior (in any version of the standard; shifting 1 into the sign bit was also undefined prior to C++14).\nThough this is an anti-example, it is considered bad because it performs some checks at run time (but not because of UB). I propose to make the type unsigned to get rid of undefined behavior.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770218912b45d3699527",
    "number": 314,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770318912b45d3699528",
    "number": 309,
    "body": "Rebased version of #305  \n",
    "head_branch": "typo_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770418912b45d3699529",
    "number": 308,
    "body": "The heading is \"you should define a constructor\", so thats what should\nbe enforced...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770518912b45d369952a",
    "number": 306,
    "body": "…, deallocation, and swap must never fail\n",
    "head_branch": "fix_discussion_dtorneverfail",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770618912b45d369952b",
    "number": 305,
    "body": "",
    "head_branch": "typo_fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770718912b45d369952c",
    "number": 304,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770818912b45d369952d",
    "number": 301,
    "body": "…Milewski\nI found it useful when learning concurrency with C++11/14.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770918912b45d369952e",
    "number": 298,
    "body": "F.44: Return a `T&` when \"returning no object\" isn't an option.\nExample with emphasis on the lifetime of the returned object.\n",
    "head_branch": "patch-17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770a18912b45d369952f",
    "number": 297,
    "body": "Have been noting some small mistakes/inconsistencies as I've been reading\n",
    "head_branch": "copyedit",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770b18912b45d3699530",
    "number": 296,
    "body": "Two argument comparison operator in both code examples for \"C.61: A copy operation should copy\" has a body of single argument member operator. This fix keeps comparison operator outside class, but corrects its body.\n",
    "head_branch": "kpx1894-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770c18912b45d3699531",
    "number": 295,
    "body": "Two argument comparison operator in code example for \"C.61: A copy operation should copy\" has a body of single argument member operator. This fix keeps comparison operator outside class, but corrects its body.\n",
    "head_branch": "kpx1894-patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770d18912b45d3699532",
    "number": 291,
    "body": "Did PR #184 cleanly from scratch.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770e18912b45d3699533",
    "number": 289,
    "body": "I suggest adding the attached sentence to the guidelines:\n\nEliyahu Ravuna\n",
    "head_branch": "patch-12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620770f18912b45d3699534",
    "number": 288,
    "body": "Mostly missing blanks\n",
    "head_branch": "fix-mdstyle20",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 8a4550c8f9666212b149f4ba8c3b0f70b44d6e5e into 130989e3aaa98f54fff6e50b3987d2024c184af6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771018912b45d3699535",
    "number": 287,
    "body": "",
    "head_branch": "space-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771118912b45d3699536",
    "number": 285,
    "body": "Make interfaces precisely and strongly typed\n",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771318912b45d3699537",
    "number": 283,
    "body": "Make interfaces precisely and strongly typed.\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771418912b45d3699538",
    "number": 281,
    "body": "Some tabs were converted to spaces.\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771518912b45d3699539",
    "number": 280,
    "body": "This PR changes the wording \"`T*` may be `nullptr`\" to \"`T*` may be null\". The point is that `nullptr` is a keyword, not a value. Moreover, the value of the expression formed by this keyword is the unique value of type `std::nullptr_t`, and not a value of `T*`. Finally, I think it's much nicer to use plain English rather than (incorrect) jargon; just \"the pointer may be null\" is perfectly appropriate.\n\nThe PR also makes some wording (\"can\" vs \"may\"), punctuation and capitalization more consistent.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771618912b45d369953a",
    "number": 279,
    "body": "```\n    int area(int h, int w) { return h*w; }\n    auto a = area(10'000'000 * 100'000'000);    // bad\n```\n\nThe `*` in the second line should be a comma\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771718912b45d369953b",
    "number": 278,
    "body": "",
    "head_branch": "fix-mdstyle19",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771818912b45d369953c",
    "number": 277,
    "body": "",
    "head_branch": "fix-mdstyle18",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771918912b45d369953d",
    "number": 276,
    "body": "",
    "head_branch": "fix-mdstyle17",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771a18912b45d369953e",
    "number": 275,
    "body": "",
    "head_branch": "fix-mdstyle16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771b18912b45d369953f",
    "number": 274,
    "body": "",
    "head_branch": "fix-mdstyle15",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771c18912b45d3699540",
    "number": 273,
    "body": "Avoid data races.\nNote about thread-safety of shared_ptr moved to CP.2, example added.\n",
    "head_branch": "patch-16",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771d18912b45d3699541",
    "number": 269,
    "body": "Just minor formatting.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771e18912b45d3699542",
    "number": 268,
    "body": "Added an example and a suggestion for an empty virtual destructor to C.121: If a base class is used as an interface, make it a pure abstract class.\n\nThis is the classical case where the omission of a virtual destructor in the interface would cause a memory leak.\n",
    "head_branch": "patch-14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620771f18912b45d3699543",
    "number": 266,
    "body": "Look for every class T where one of the static data members or static local variables is of type T, T\\* or T&.\n",
    "head_branch": "patch-13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772018912b45d3699544",
    "number": 265,
    "body": "Look for every class T where one of the static data members or static local variables is of type T, T\\* or T&.\n",
    "head_branch": "patch-12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772118912b45d3699545",
    "number": 264,
    "body": "",
    "head_branch": "md-style14",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772318912b45d3699546",
    "number": 263,
    "body": "Don't assume that complicated code is necessarily faster than simple code.\n\nThe suggested example has been tested with GCC 4.9.2 with the -O3 flag and with MSVC 19.00 with the /Ox flag.\n- The simple version takes about 35 - 70 ms depending on the compiler.\n- The complicated version with handcrafted optimization takes about 130 ms.\n\nThe simple code is faster because most modern compilers will translate it to SIMD instructions via automatic vectorization.\n\nThe full code of the example is below.\n(given here for the comment of the pull request only, not for the guidelines. The example suggested for the guidelines is a subset of this code)\n\n```\n#include <iostream>\n#include <functional>\n#include <chrono>\n#include <vector>\n#include <string>\n\nusing namespace std;\nusing namespace std::chrono;\n\nvector<char> v(100000);\n\nvoid measure_time(const string& title, function<void()> f)\n{\n    constexpr int times_to_test = 10000;\n    auto start = system_clock::now();\n    for(int i=0; i<times_to_test; ++i)\n        f();\n    auto duration = system_clock::now() - start;\n    cout << title << \": \" << duration_cast<milliseconds>(duration).count() << \" milliseconds \\n\";\n}\n\nvoid good_example()\n{\n    for(auto& c : v)\n        c = ~c;\n}\n\nvoid bad_example()\n{    \n    for(size_t i=0; i<v.size(); i+=sizeof(uint64_t))\n    {\n        uint64_t& quad_word = *reinterpret_cast<uint64_t*>(&v[i]);\n        quad_word = ~quad_word;\n    }    \n}\n\nint main()\n{  \n  //cout << \"Tested with GCC version \" << __VERSION__ << '\\n';\n  //cout << \"Tested with MSVC version \" << _MSC_VER << '\\n';\n\n  constexpr int times_to_repeat = 3;\n  for(int i=0; i<times_to_repeat; ++i)\n  {\n      measure_time(\"good_example\", good_example);\n      measure_time(\"bad_example\", bad_example);\n  }\n}\n```\n\nThis is the output with GCC 4.9.2:\n\n```\nTested with GCC version 4.9.2\ngood_example: 76 milliseconds \nbad_example: 136 milliseconds \ngood_example: 68 milliseconds \nbad_example: 135 milliseconds \ngood_example: 69 milliseconds \nbad_example: 132 milliseconds\n```\n\nAnd the difference is even larger with MSVC 19.00:\n\n```\nTested with MSVC version 1900\ngood_example: 35 milliseconds\nbad_example: 128 milliseconds\ngood_example: 34 milliseconds\nbad_example: 127 milliseconds\ngood_example: 35 milliseconds\nbad_example: 127 milliseconds\n```\n\nThis reinforces the idea that handcrafted optimizations trying to outsmart the compiler hurt more than they help. The version with clear expression of the intent is not only more understandable but also faster.\n\nEliyahu Ravuna\n",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge dda7a868b1d6b20e35dfd24abe2c4949e13e3fc3 into 4abbd0618fcbec83c734455084bcfc51f00eb35e"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772418912b45d3699547",
    "number": 262,
    "body": "Capitalization revised according to the feedback in #256.\n(Access memory predictably)\n",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772518912b45d3699548",
    "number": 261,
    "body": "As agreed in #255, two commits squashed.\n(ES.100: Don't mix signed and unsigned arithmetic)\n",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge c4b3b8b0c6c58793cf209b491fd13fb08e7879cf into ea5b270a53f603546d50c4bde4c23ae3f0d6dbc5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772618912b45d3699549",
    "number": 260,
    "body": "As agreed in #253, three commits squashed into one.\n(Suggested 'return containers by value' example + Title made more concise)\n",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772718912b45d369954a",
    "number": 258,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772818912b45d369954b",
    "number": 257,
    "body": "In the code snippet that demonstrates how to use the finally method, the capture clause is missing from the lambda expression in order to pass it into the free function...\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772918912b45d369954c",
    "number": 256,
    "body": "- The suggested bad example makes very inefficient use of the cache.\n- The suggested good example reads cache lines sequentially.\n",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772a18912b45d369954d",
    "number": 255,
    "body": "In the suggested example, abs requires a signed number but x-y is unsigned.\nThe execution will not give the expected result, which is 2.\n",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772b18912b45d369954e",
    "number": 254,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772c18912b45d369954f",
    "number": 253,
    "body": "On the suggested example, most modern compilers will do named return value optimization (NRVO), which is a variant of copy elision.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772d18912b45d3699550",
    "number": 250,
    "body": "Pull request for the suggestion in issue#249.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772e18912b45d3699551",
    "number": 247,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 9d4a7627c7ff26e3db3a94ad7564cc8f704ecd90 into 0a2523372ebec61aa50967a0669f98f850a3c29c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620772f18912b45d3699552",
    "number": 244,
    "body": "",
    "head_branch": "p2_typo_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773018912b45d3699553",
    "number": 242,
    "body": "Hi,\n\nthis is painful but I believe beneficial. Currently **strong** emphasis is abused for section headers. While this looks ok in simple rendering, this is far from ideal. When rendering the text in smaller parts, like pages in books, printouts, or other pagination, there is not enough information to relate the fake headers to their bodies. So fake headers end up at the bottom of pages with their bodies on the next page.\nAlso the styling of emphasized text and mini-section headers becomes intertwined, while it should be separate.\n\nIn this PR I changed fake headers for real headers in most places for Examples, Enforcements, Reasons and Notes. In some places there is some ambiguity, and it is not clear whether something should be a section or not.\n\nIt is also possible to declare this a non-issue and just keep going with fake headers for a while.\n",
    "head_branch": "fix-minisections",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773118912b45d3699554",
    "number": 240,
    "body": "Bibliography references are in html anchors, I did this wrong earlier, sorry.\n",
    "head_branch": "fix-mdstyle13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773218912b45d3699555",
    "number": 238,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773318912b45d3699556",
    "number": 237,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773418912b45d3699557",
    "number": 236,
    "body": "",
    "head_branch": "patch-13",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773518912b45d3699558",
    "number": 234,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773618912b45d3699559",
    "number": 232,
    "body": "Have fixed/formatted markup for links.\n\nI think its better looking this way.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773718912b45d369955a",
    "number": 230,
    "body": "",
    "head_branch": "patch-12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773818912b45d369955b",
    "number": 229,
    "body": "",
    "head_branch": "patch-11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 7d82c95191ebe736b0dad6826bee44ce70b8cbbe into cda8d7ad5cb6aeb7ce5ff332660b8a8e8242b70c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773918912b45d369955c",
    "number": 228,
    "body": "",
    "head_branch": "patch-10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773a18912b45d369955d",
    "number": 223,
    "body": "I corrected a typo, minor formatting errors, and added minor clarifications to FAQ.59 and FAQ.60.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773c18912b45d369955e",
    "number": 221,
    "body": "",
    "head_branch": "patch-9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773d18912b45d369955f",
    "number": 220,
    "body": "",
    "head_branch": "patch-8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773e18912b45d3699560",
    "number": 219,
    "body": "This PR fixes consecutive blank lines (most of which were those created by me in #153, sorry).\n\nThis PR also consistently uses 4 space indent for all code blocks, regardless of what they were before (spaces, tabs, fences).\nAfter this PR, the document is idempotent to mdast(https://github.com/wooorm/mdast) with the following non-default settings:\n\n```\n{\"settings\": {\n  \"bullet\": \"*\", \n  \"listItemIndent\": \"1\", \n  \"strong\": \"*\", \n  \"emphasis\": \"*\"}}\n```\n\nThis means all future changes can be verified using the mdast tool. (see #191 / #215) to be viable markup, either via github integration, or manually.\n\nThis does not yet use 4-space indent inside code blocks for C++, leaving an ugly mix of 4 spaces + tabs, which should also be adressed sooner than later.\n",
    "head_branch": "mdast-idempot",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge d844553169cefdbf2816b19796cf2038d18cbe1e into 149a68118826c8e35007416f1d53a48a8adfdbc1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620773f18912b45d3699561",
    "number": 218,
    "body": "I found it confusing to mix length and strlen. The note about std::strlen() comes afterward.\n",
    "head_branch": "Jiwan-change-nullptr-passing-exemple",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774018912b45d3699562",
    "number": 217,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774118912b45d3699563",
    "number": 216,
    "body": "`std::find` accepts a value, not a function object.  `std::find_if` was the intended function.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774218912b45d3699564",
    "number": 215,
    "body": "This is an alternative approach to #191, providing only the `.travis.yml` file. \n\nThis makes it hard to reproduce the errors locally that travis would find, but is otherwise much lighter.\n#191 also makes it easier to add all other kinds of tools to the checking process.\n\nFeel free to close one of #191 and this PR to proceed with more iterations.\n",
    "head_branch": "travis-minimal",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774318912b45d3699565",
    "number": 214,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774418912b45d3699566",
    "number": 213,
    "body": "…ue_ptr in an example\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774518912b45d3699567",
    "number": 212,
    "body": "Choosing a different solution than in #203, I now try to ensure any code-block that cannot (yet) compile has at least one ???\n",
    "head_branch": "fix-mdstyle12",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774618912b45d3699568",
    "number": 211,
    "body": "where tabs and spaces are insonsitently used within same code sample. Moving towards 4 spaces for indent and spaces for align\n",
    "head_branch": "fix-mdstyle11",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774718912b45d3699569",
    "number": 210,
    "body": "Fix style and code examples\n",
    "head_branch": "fix-mdstyle10",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774818912b45d369956a",
    "number": 209,
    "body": "",
    "head_branch": "typos-and-other-fixes",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774918912b45d369956b",
    "number": 208,
    "body": "This should supercede #57, which I believe could be closed afterwards. I maintained the authorship of @rkawulak\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774a18912b45d369956c",
    "number": 207,
    "body": "ES.45\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774b18912b45d369956d",
    "number": 206,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774c18912b45d369956e",
    "number": 203,
    "body": "Hi,\n\ni started extracting and compiling / linting the C++ snippets. The PR lists minor things I found in the process. I am not 100% sure about my C++ fixes.\n",
    "head_branch": "fix-mdstyle9",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774d18912b45d369956f",
    "number": 201,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774e18912b45d3699570",
    "number": 199,
    "body": "",
    "head_branch": "patch-7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620774f18912b45d3699571",
    "number": 198,
    "body": "Usage of not_null<T> does not mean that null checks are completely unnecessary—it specifies where the responsibility for null checks lies.\n",
    "head_branch": "patch-6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775018912b45d3699572",
    "number": 197,
    "body": "To be grammatically correct, the phrase \"Confusion about what meaning a T\\* is the source\" should have had a doubled \"is\", which would have been awkward, so the sentence has been reworded.\n\nThe second and third sentences were inverted. Prior to the inversion, the sentence starting with \"For example\" initially appeared to be expanding on the debuggability of not_null, rather than providing an example of how using separate names improves code quality.\n",
    "head_branch": "patch-5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775118912b45d3699573",
    "number": 196,
    "body": "",
    "head_branch": "patch-4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775218912b45d3699574",
    "number": 194,
    "body": "",
    "head_branch": "fix-mdstyle8",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775318912b45d3699575",
    "number": 191,
    "body": "Hi,\n\nso my general idea here is to have automated quality checks for each pull request. This uses the free CI service Travic CI (https://travis-ci.org) that is well established in the open-source / github community.\n\nTo enable this, after merging this PR, an admin of this github repo has to create a free travis account, and add the CppCoreGuidelines repo to the repos that travis will monitor.\n\nAfter that, all pull requests will automatically trigger a run of the shell commands in the `.travis.yml` file. This will automatically show build status in the pull requests. As an example, I did this for my clone, and here is an example pull request that fails the build:\n\nhttps://github.com/tkruse/CppCoreGuidelines/pulls\nhttps://github.com/tkruse/CppCoreGuidelines/pull/1\n\nAs you can see, both the overview and the PR itself show that a build has failed, and it is possible to navigate to Travis to see the cause of the failure.\n\nThis PR provides an initial check using mdast (https://github.com/wooorm/mdast), which reformats markdown. Thanks to my previous PRs (and the effort of all other contributors), the markdown seems compliant except for the code blocks indents, which need to be fixed anyway. mdast can be used to fix them automatically.\n\nThe scripts used here are based on Gnu `make` and npm (nodejs package manager https://www.npmjs.com/) which are ubiquitous enough to be provided by default on travis. The idea is that any contributor can quickly see on github that their PR has issues, and can also locally run `make` to check locally before fixing their PR. This allows the other reviewers to focus on other things in the reviews than puny markdown mistakes, it saves everybody's time.\n\nThere are many way to add the files, I tried to hide them away in a `scripts` folder to be unobstrusive, but still this requires a toplevel .travis.yml file and a .gitignore (to prevent junk in the PRs).\n\nI have further ideas of including spell checking, and running compilers / c++ linters on all code examples to make sure they compile and suffice some minimal consensus of pretty code.\n",
    "head_branch": "travis",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge pull request #191 from tkruse/travis\n\ntravis configuration"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775418912b45d3699576",
    "number": 188,
    "body": "",
    "head_branch": "fix-mdstyle7",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 95ed86975193584da5463bc991b1ee4ba622e23a into acfa6a6b6b4e7972616720a69137612558ca2247"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775618912b45d3699577",
    "number": 185,
    "body": "c++ markdown tags to pretty code..\n\nOld\n![image](https://cloud.githubusercontent.com/assets/3732117/10132656/fd87cb6e-65ad-11e5-9772-10c4872887e9.png)\nNew \n![image](https://cloud.githubusercontent.com/assets/3732117/10132677/150f5dce-65ae-11e5-9c34-1b7c3b2aa74c.png)\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775718912b45d3699578",
    "number": 184,
    "body": "I know a recent PR has been submitted, yet I see this one often in code, and can serve as an easy example.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775818912b45d3699579",
    "number": 178,
    "body": "",
    "head_branch": "fix-anchors2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775918912b45d369957a",
    "number": 175,
    "body": "While overall in the document the indentations are inconsistent, this PR merely fixes those cases where within the same code block, indentation is inconsistent (sometimes tabs, sometimes spaces). This can render ugly with closing brackets being at different depth than opening ones, etc.\n\nIt would be nice if the document had a standard not just for fencing, but also for indentation (spaces, tabs, or tabs-for-indent-space-for-align).\n",
    "head_branch": "fix-inconsistent-code-indent",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775a18912b45d369957b",
    "number": 174,
    "body": "",
    "head_branch": "fix-mdstyle3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775b18912b45d369957c",
    "number": 173,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775c18912b45d369957d",
    "number": 172,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775d18912b45d369957e",
    "number": 171,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775e18912b45d369957f",
    "number": 168,
    "body": "(breaks formatting else because of underscore in std::memory_order)\n",
    "head_branch": "fix-backtick",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620775f18912b45d3699580",
    "number": 166,
    "body": "retension usually applied to magnetic tapes.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776018912b45d3699581",
    "number": 165,
    "body": "Link targets with spaces can break linking in different transformation targets. It is possible to have the,. when the links to them are in angle brackets like this `(bla)[<#the link>]`, but this is an extra burden to think of. Also this is for consistency, as other link targets use dash-notation.\n\nThis also fixes headers with broken anchors or with the title text inside the anchor, which I also addressed in #163\n",
    "head_branch": "links-without-spaces",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776118912b45d3699582",
    "number": 164,
    "body": "Some minor things, hopefully self-explaining.\n",
    "head_branch": "fix-mdstyle6",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776218912b45d3699583",
    "number": 163,
    "body": "else header becomes an ugly no-op link (also for Consistency)\n",
    "head_branch": "fix-anchors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776318912b45d3699584",
    "number": 162,
    "body": "There is still some possible cleanup to do with the existing R References section.\n",
    "head_branch": "fix-biblio",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776418912b45d3699585",
    "number": 161,
    "body": "for consistency and readability\n",
    "head_branch": "fix-comma",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776518912b45d3699586",
    "number": 160,
    "body": "The sections R.24, R.30 - R.37 had incorrect numbers in the text. Also R.30 was\nafter R.31. This is now fixed.\n",
    "head_branch": "number_fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776618912b45d3699587",
    "number": 158,
    "body": "Destructors are always marked as noexcept (unless noexcept(false)) using this word here is ambigious.\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776718912b45d3699588",
    "number": 157,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4ad6d50f860f5e16159a137a1e3e594e2e646fa1 into a2cb17f13aeb02cb85bd16ecc38fd9cdf400b2f5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776918912b45d3699589",
    "number": 155,
    "body": "",
    "head_branch": "fix-mdstyle5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge a68ace40df5806d08d25ef5f0f57ab0436e727eb into 5a4c7aaa7f4f5825710f5618f4eafdf8c172afa8"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776a18912b45d369958a",
    "number": 153,
    "body": "The anchor would else point to the end of the previous section\nAlso this causes issues with tools ensuring a blank line before a header.\n",
    "head_branch": "fix-mdstyle4",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776b18912b45d369958b",
    "number": 152,
    "body": "3 fix commits. One adds missing blanks after commas for consistency and readbility. One fixes minor markdown style. One fixes Citations, adding 1:1 from the Book \"C++ Coding Standards\" by H. Sutter.\n\nYou can preview what the new references will look like on github by visiting:\nhttps://github.com/tkruse/CppCoreGuidelines/blob/2ec99105297d517823c7c1e60a120059050dc9f4/CppCoreGuidelines.md\nand e.g. looking at Appendix C, References\n",
    "head_branch": "fix-mdstyle",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 78b66f4eaea9461544e3e0df4718dd7d03b1ebb8 into 4f76723995c45f630c6ab769f4fefbf07ad4f3e4"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776c18912b45d369958c",
    "number": 151,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776d18912b45d369958d",
    "number": 149,
    "body": "\"accpt\" -> \"accept\"\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776e18912b45d369958e",
    "number": 148,
    "body": "Fixed a few minor mistakes and inconsistencies\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620776f18912b45d369958f",
    "number": 147,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777018912b45d3699590",
    "number": 145,
    "body": "https://github.com/isocpp/CppCoreGuidelines/issues/136\n",
    "head_branch": "C150",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777118912b45d3699591",
    "number": 140,
    "body": "this is a new clean PR based on my old dirty one :p\n",
    "head_branch": "Temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777218912b45d3699592",
    "number": 139,
    "body": "I don't think these are fixed by other PR's.  Just a few...\n",
    "head_branch": "fixtypos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777318912b45d3699593",
    "number": 138,
    "body": "Add New Rule CP.3\n(Consider void futures for one-shot event communication)\nonce again this is just  making effective use of the new capabilities of the language.\n",
    "head_branch": "Temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777418912b45d3699594",
    "number": 137,
    "body": "This is much more consistent with std classes.  I also fixed a typo referring to this as final_act.\n",
    "head_branch": "final_action",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777518912b45d3699595",
    "number": 132,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777618912b45d3699596",
    "number": 130,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4ac15a4f4b5ec38db0f190dcdd4c3ca3ba8fc0c4 into fbf561b4d8f72d97a595e47c2351e7d7d8aedd93"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": true,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777718912b45d3699597",
    "number": 129,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777818912b45d3699598",
    "number": 127,
    "body": "Some links had trailing quote marks, and the 'BDE' link was broken because the\nlocation had changed.\n",
    "head_branch": "fixes-broken-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777918912b45d3699599",
    "number": 126,
    "body": "Created two examples for Names and Layout section.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777a18912b45d369959a",
    "number": 124,
    "body": "Add new rule (F.54)\nUse decltype on auto&& parameters to std::forward them.\n",
    "head_branch": "Temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777b18912b45d369959b",
    "number": 121,
    "body": "Also, fix a typo.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 07cbf4544e7011c6e57e6bac64917db7f20c0ba5 into 3706f991fc8b5071f6f85fcfd0f6c5882189ec0b"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777c18912b45d369959c",
    "number": 120,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ee80491fc3df3212d66eec0d8543b47d6feda107 into c61b99730570d0ff6b910b63806e1e88ccafe6c6"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777d18912b45d369959d",
    "number": 119,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 4278cd5c92b0baa8836bf4d5965fe1153e0f880e into 9c5637fd242bca6475f117d39ecc0247086ba4e2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777e18912b45d369959e",
    "number": 118,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620777f18912b45d369959f",
    "number": 117,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778018912b45d36995a0",
    "number": 115,
    "body": "Many local named anchors had slightly incorrect addresses.  This fixes a few of them.\n",
    "head_branch": "fix_invalid_links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778118912b45d36995a1",
    "number": 114,
    "body": "is -> it\n",
    "head_branch": "typo/f21",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778318912b45d36995a2",
    "number": 113,
    "body": "runrime -> runtime\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778418912b45d36995a3",
    "number": 112,
    "body": "an -> at\n",
    "head_branch": "typo/f5",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778518912b45d36995a4",
    "number": 111,
    "body": "Add some reasons and examples to section ES.74.\n",
    "head_branch": "es74",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e9f95eb4d6e31d2010f55f248713a7072e5597ff into 2abe9adf3c1894c7284455e1b60b6b5c4e87108a"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778618912b45d36995a5",
    "number": 110,
    "body": "Missing `i` in `for`-statement.\n",
    "head_branch": "fix-es26-example",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778718912b45d36995a6",
    "number": 107,
    "body": "1. thorough --> through\n2. Add missing `)`\n3. Fix \"a a move assignment\" (#90)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 031e7f5300fa420e335531bfdfcdcef7c1f4e42b into cdf12055e5441c4b86d6de29a372724db43a1de2"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778818912b45d36995a7",
    "number": 105,
    "body": "",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778918912b45d36995a8",
    "number": 104,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778a18912b45d36995a9",
    "number": 102,
    "body": "Fixes a minor typo in section E.17.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778b18912b45d36995aa",
    "number": 100,
    "body": "Typo in example F.20\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778c18912b45d36995ab",
    "number": 99,
    "body": "Typo on function in F.21\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778d18912b45d36995ac",
    "number": 98,
    "body": "This time without the accidental pdf files. \n",
    "head_branch": "syntax-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778e18912b45d36995ad",
    "number": 97,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620778f18912b45d36995ae",
    "number": 96,
    "body": "The syntax highlighting will help the reader to review the code examples.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779018912b45d36995af",
    "number": 94,
    "body": "Fixed typos.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779118912b45d36995b0",
    "number": 93,
    "body": "read and print and int -> read and print an int\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779218912b45d36995b1",
    "number": 92,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779318912b45d36995b2",
    "number": 91,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779418912b45d36995b3",
    "number": 89,
    "body": "Domain of the sqrt() function is nonnegative numbers (x>=0) and not positive (x>0).\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779518912b45d36995b4",
    "number": 87,
    "body": "",
    "head_branch": "LocalToasty-patch-typo-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779618912b45d36995b5",
    "number": 86,
    "body": "add (Reason) and (Example) at (Prefer to declare a loop variable in the initializer part of as `for`-statement) Rule\n",
    "head_branch": "temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779718912b45d36995b6",
    "number": 85,
    "body": "add code sample for (Prefer a `for`-statement to a `while`-statement when there is an obvious loop variable) rule\n",
    "head_branch": "temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779818912b45d36995b7",
    "number": 84,
    "body": "Found by:\n\n``` bash\ngrep -o -E '\\(#[^)]*\\)' CppCoreGuidelines.md | sed -e 's/(#//' -e 's/)//' | sort -u >used-anchors.txt\ngrep -o -E 'name\\s*=\\s*\"[^\"]*\"' CppCoreGuidelines.md | sed -r -e 's/name\\s*=\\s*//' -e 's/\"//g' | sort -u >defined-anchors.txt\ncomm -13 defined-anchors.txt used-anchors.txt | tee undefined-anchors.txt\n```\n\nSome of the results are left unfixed; it seems not obvious to me how to fix them.\n",
    "head_branch": "fix-obvious-link-errors",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 47d96204b33508cb97533195718672d9f3b604d2 into 3af2b932639116552232720387b8cb8bcd3dfef5"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779918912b45d36995b8",
    "number": 82,
    "body": "add code sample and explanation at (Use namespaces to express logical structure) rule.\n",
    "head_branch": "temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779a18912b45d36995b9",
    "number": 81,
    "body": "Typo\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779b18912b45d36995ba",
    "number": 80,
    "body": "",
    "head_branch": "LocalToasty-patch-typo",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779c18912b45d36995bb",
    "number": 79,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779d18912b45d36995bc",
    "number": 78,
    "body": "The bad example was the same as the good one.  \nAlso a small typo in algorithms -> algorithm.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 66a1bc8e589e278825e7c262bac836770d131c57 into 9ce7259b2e146f43aeeae4dc59eeeca025dc9d37"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "6620779e18912b45d36995bd",
    "number": 77,
    "body": "add code example at rule (An abstract class typically doesn't need a constructor)\n",
    "head_branch": "temp",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a018912b45d36995be",
    "number": 76,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a118912b45d36995bf",
    "number": 75,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a218912b45d36995c0",
    "number": 74,
    "body": "In the [text](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-continue), the order of both points is different.\n\n(No issue opened since it is only a typo)\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a318912b45d36995c1",
    "number": 73,
    "body": "Prefer enums over macros : update Reason and example sections\ndivide by zero : update example section\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a418912b45d36995c2",
    "number": 72,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a518912b45d36995c3",
    "number": 69,
    "body": "pandoc complains, e.g.:\n\n pandoc CppCoreGuidelines.md --latex-engine=xelatex --variable fontsize=11pt --variable papersize=a4 --variable geometry=margin=2cm -V mainfont=\"Lexicon\" -o sch.pdf\n ! Text line contains an invalid character.\n l.3481 result = myset.insert( “Hello” );^^K\n pandoc: Error producing PDF from TeX source\n\nFix by removing invalid characters.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a618912b45d36995c4",
    "number": 67,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a718912b45d36995c5",
    "number": 65,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a818912b45d36995c6",
    "number": 64,
    "body": "",
    "head_branch": "T80",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077a918912b45d36995c7",
    "number": 63,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077aa18912b45d36995c8",
    "number": 62,
    "body": "It is easier to see this commit with the following command.\ngit --no-pager diff --unified=0 --word-diff-regex=.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge b02c9a28fbb3aa8d28f847bb44ad3182cc23ad31 into ea2fbb6f49d7ef31cfe153e559cb7b5b7f2d4341"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077ab18912b45d36995c9",
    "number": 60,
    "body": "Fix a typo in P.9. I didn't see the need to create a ticket just for one typo.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077ac18912b45d36995ca",
    "number": 58,
    "body": "Other options include: \"use it where appropriate\".\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077ad18912b45d36995cb",
    "number": 57,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077ae18912b45d36995cc",
    "number": 56,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077af18912b45d36995cd",
    "number": 55,
    "body": "Add a \":\" and remove the \"*\" of the list\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b018912b45d36995ce",
    "number": 54,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b118912b45d36995cf",
    "number": 52,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b218912b45d36995d0",
    "number": 50,
    "body": "",
    "head_branch": "I10-example-fix",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b418912b45d36995d1",
    "number": 48,
    "body": "- use of \"precondition\" instead of \"postcondition\".\n- typo: \"and\" instead of \"are\".\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b518912b45d36995d2",
    "number": 46,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b618912b45d36995d3",
    "number": 45,
    "body": "",
    "head_branch": "fix-raii-links",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b718912b45d36995d4",
    "number": 44,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b818912b45d36995d5",
    "number": 43,
    "body": "Also added the \"extends B\" to D\n",
    "head_branch": "patch-3",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077b918912b45d36995d6",
    "number": 42,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077ba18912b45d36995d7",
    "number": 41,
    "body": "Read through the document and fixed some typos.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge cb7c0e48aa266c9f31c5ceae2c381cb6e785728a into 5452b119c5c597eeb76e52b7ebcb869b5c5cc641"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077bb18912b45d36995d8",
    "number": 39,
    "body": "There were a few spots in the document where the possessive pronoun \"its\" was misspelled as \"it's\" (which is a contraction for \"it is\").\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077bc18912b45d36995d9",
    "number": 38,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077bd18912b45d36995da",
    "number": 37,
    "body": "Just simple typos, didn't see an open pull request that didn't already contain fixes for them\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077be18912b45d36995db",
    "number": 36,
    "body": "I don't see why it'd fail otherwise, so I assume the \"2\" was a typo\n\nAlso add a missing \"f\" to \"side effect\"\n",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077bf18912b45d36995dc",
    "number": 32,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge e78f42c06b6e26161d6ff050a69698bce73af3a7 into c55a70572f1b3c11e679a17cedb395784628245c"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c018912b45d36995dd",
    "number": 31,
    "body": "I was reading, and noticed this was probably wrong.\n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c118912b45d36995de",
    "number": 25,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c218912b45d36995df",
    "number": 22,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge f6e94fb504c289558d09e8924c3ff401222cce40 into 5959bbc7be67d99a8ff13a80269379e9a0a50be1"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c318912b45d36995e0",
    "number": 21,
    "body": "",
    "head_branch": "fix_weird_characters",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c418912b45d36995e1",
    "number": 20,
    "body": "",
    "head_branch": "typo_in_precondition_section",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 95e8e527fb9c77aab6644344120b9324b7d8be31 into 5452b119c5c597eeb76e52b7ebcb869b5c5cc641"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c518912b45d36995e2",
    "number": 18,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c618912b45d36995e3",
    "number": 17,
    "body": "Just a fix for some small typos in the document\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c718912b45d36995e4",
    "number": 16,
    "body": "This is a minor change to fix an incorrect note in ES.62 (it looks like the not was just copied from above, verbatim). I thought it would be uncontroversial, so I didn't make an issue. Hope that's not a problem.\n",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c818912b45d36995e5",
    "number": 14,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077c918912b45d36995e6",
    "number": 13,
    "body": "Hi all. Really like the work going on here. I fixed a couple minor spelling mistakes, and while I was there my editor suggested removing trailing spaces. I can drop the second commit if it's unwarranted, or if it falls under \"avoid line ending issues\".\n\nI also didn't create an issue, though I can if it's required for this.\n",
    "head_branch": "SpellingAndSpaceCorrections",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge ccf97bd3783e043506c9ba136ca4c836807faa15 into b4dfe868b88babc4705236cfbd4f54befaabe124"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077cb18912b45d36995e7",
    "number": 12,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077cc18912b45d36995e8",
    "number": 10,
    "body": "",
    "head_branch": "master",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077cd18912b45d36995e9",
    "number": 8,
    "body": "",
    "head_branch": "typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077ce18912b45d36995ea",
    "number": 7,
    "body": "",
    "head_branch": "typos",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": false,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077cf18912b45d36995eb",
    "number": 6,
    "body": "",
    "head_branch": "patch-2",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [
      "Merge 774f159646f51856b7a502c758c73cb061fa1977 into 3650a3f016cf6386e79cb24f0d0dfa99086a60b3"
    ],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077d018912b45d36995ec",
    "number": 5,
    "body": "Fixed function call parameters \n",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077d118912b45d36995ed",
    "number": 4,
    "body": "",
    "head_branch": "patch-1",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  },
  {
    "_id": "662077d218912b45d36995ee",
    "number": 3,
    "body": "The shift instruction in the example should be <<= instead of >>=\n",
    "head_branch": "P5-patch",
    "is_a_fork": true,
    "comments": [],
    "commit_messages": [],
    "has_test_file": false,
    "was_merged": true,
    "documentation_file_was_changed": false,
    "documentation_or_comments_in_code_were_changed": false
  }
]